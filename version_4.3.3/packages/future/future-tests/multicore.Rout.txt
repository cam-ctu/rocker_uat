
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[16:21:15.811] plan(): Setting new future strategy stack:
[16:21:15.812] List of future strategies:
[16:21:15.812] 1. sequential:
[16:21:15.812]    - args: function (..., envir = parent.frame())
[16:21:15.812]    - tweaked: FALSE
[16:21:15.812]    - call: future::plan("sequential")
[16:21:15.826] plan(): nbrOfWorkers() = 1
> library("listenv")
> plan(multicore)
[16:21:15.838] plan(): Setting new future strategy stack:
[16:21:15.838] List of future strategies:
[16:21:15.838] 1. multicore:
[16:21:15.838]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:21:15.838]    - tweaked: FALSE
[16:21:15.838]    - call: plan(multicore)
[16:21:15.852] plan(): nbrOfWorkers() = 2
> 
> message("*** multicore() ...")
*** multicore() ...
> 
> for (cores in 1:min(2L, availableCores("multicore"))) {
+   message(sprintf("Testing with %d cores ...", cores))
+   options(mc.cores = cores)
+ 
+   if (!supportsMulticore()) {
+     message(sprintf("Multicore futures are not supporting on '%s'. Falling back to use synchronous sequential futures", .Platform$OS.type))
+   }
+ 
+   nworkers <- nbrOfWorkers()
+   message("Number of workers: ", nworkers)
+   stopifnot(nworkers == cores)
+   
+   for (globals in c(FALSE, TRUE)) {
+ 
+     message(sprintf("*** multicore(..., globals = %s) without globals", globals))
+   
+     f <- multicore({
+       42L
+     }, globals = globals)
+     stopifnot(inherits(f, "MulticoreFuture") || ((cores ==1 || !supportsMulticore()) && inherits(f, "SequentialFuture")))
+   
+     print(resolved(f))
+     y <- value(f)
+     print(y)
+     stopifnot(y == 42L)
+   
+   
+     message(sprintf("*** multicore(..., globals = %s) with globals", globals))
+     ## A global variable
+     a <- 0
+     f <- multicore({
+       b <- 3
+       c <- 2
+       a * b * c
+     }, globals = globals)
+     print(f)
+   
+   
+     ## A multicore future is evaluated in a separated
+     ## forked process.  Changing the value of a global
+     ## variable should not affect the result of the
+     ## future.
+     a <- 7  ## Make sure globals are frozen
+     v <- value(f)
+     print(v)
+     stopifnot(v == 0)
+   
+   
+     message(sprintf("*** multicore(..., globals = %s) with globals and blocking", globals))
+     x <- listenv()
+     for (ii in 1:4) {
+       message(sprintf(" - Creating multicore future #%d ...", ii))
+       x[[ii]] <- multicore({ ii }, globals = globals)
+     }
+     message(sprintf(" - Resolving %d multicore futures", length(x)))
+     v <- sapply(x, FUN = value)
+     stopifnot(all(v == 1:4))
+   
+   
+     message(sprintf("*** multicore(..., globals = %s) and errors", globals))
+     f <- multicore({
+       stop("Whoops!")
+       1
+     }, globals = globals)
+     print(f)
+     v <- value(f, signal = FALSE)
+     print(v)
+     stopifnot(inherits(v, "simpleError"))
+   
+     res <- try(value(f), silent = TRUE)
+     print(res)
+     stopifnot(inherits(res, "try-error"))
+   
+     ## Error is repeated
+     res <- try(value(f), silent = TRUE)
+     print(res)
+     stopifnot(inherits(res, "try-error"))
+ 
+     ## Custom error class
+     f <- multicore({
+       stop(structure(list(message = "boom"),
+                      class = c("MyError", "error", "condition")))
+     })
+     print(f)
+     v <- value(f, signal = FALSE)
+     print(v)
+     stopifnot(inherits(v, "error"), inherits(v, "MyError"))
+   
+     ## Make sure error is signaled
+     res <- tryCatch(value(f), error = identity)
+     stopifnot(inherits(res, "error"))
+   
+     ## Issue #200: Custom condition class attributes are lost 
+     stopifnot(inherits(res, "MyError"))    
+   } # for (globals ...)
+ 
+ 
+   message("*** multicore(..., workers = 1L) ...")
+ 
+   a <- 2
+   b <- 3
+   yTruth <- a * b
+ 
+   f <- multicore({ a * b }, globals = TRUE, workers = 1L)
+   rm(list = c("a", "b"))
+ 
+   v <- value(f)
+   print(v)
+   stopifnot(v == yTruth)
+ 
+   message("*** multicore(..., workers = 1L) ... DONE")
+ 
+   message(sprintf("Testing with %d cores ... DONE", cores))
+ } ## for (cores ...)
Testing with 1 cores ...
Number of workers: 1
*** multicore(..., globals = FALSE) without globals
[16:21:15.908] getGlobalsAndPackages() ...
[16:21:15.908] Not searching for globals
[16:21:15.908] - globals: [0] <none>
[16:21:15.908] getGlobalsAndPackages() ... DONE
[16:21:15.910] Packages needed by the future expression (n = 0): <none>
[16:21:15.910] Packages needed by future strategies (n = 0): <none>
[16:21:15.910] {
[16:21:15.910]     {
[16:21:15.910]         {
[16:21:15.910]             ...future.startTime <- base::Sys.time()
[16:21:15.910]             {
[16:21:15.910]                 {
[16:21:15.910]                   {
[16:21:15.910]                     base::local({
[16:21:15.910]                       has_future <- base::requireNamespace("future", 
[16:21:15.910]                         quietly = TRUE)
[16:21:15.910]                       if (has_future) {
[16:21:15.910]                         ns <- base::getNamespace("future")
[16:21:15.910]                         version <- ns[[".package"]][["version"]]
[16:21:15.910]                         if (is.null(version)) 
[16:21:15.910]                           version <- utils::packageVersion("future")
[16:21:15.910]                       }
[16:21:15.910]                       else {
[16:21:15.910]                         version <- NULL
[16:21:15.910]                       }
[16:21:15.910]                       if (!has_future || version < "1.8.0") {
[16:21:15.910]                         info <- base::c(r_version = base::gsub("R version ", 
[16:21:15.910]                           "", base::R.version$version.string), 
[16:21:15.910]                           platform = base::sprintf("%s (%s-bit)", 
[16:21:15.910]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:15.910]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:15.910]                             "release", "version")], collapse = " "), 
[16:21:15.910]                           hostname = base::Sys.info()[["nodename"]])
[16:21:15.910]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:21:15.910]                           info)
[16:21:15.910]                         info <- base::paste(info, collapse = "; ")
[16:21:15.910]                         if (!has_future) {
[16:21:15.910]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:15.910]                             info)
[16:21:15.910]                         }
[16:21:15.910]                         else {
[16:21:15.910]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:15.910]                             info, version)
[16:21:15.910]                         }
[16:21:15.910]                         base::stop(msg)
[16:21:15.910]                       }
[16:21:15.910]                     })
[16:21:15.910]                   }
[16:21:15.910]                   ...future.strategy.old <- future::plan("list")
[16:21:15.910]                   options(future.plan = NULL)
[16:21:15.910]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:15.910]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:15.910]                 }
[16:21:15.910]                 ...future.workdir <- getwd()
[16:21:15.910]             }
[16:21:15.910]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:15.910]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:15.910]         }
[16:21:15.910]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:15.910]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:15.910]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:15.910]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:15.910]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:15.910]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:15.910]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:15.910]             base::names(...future.oldOptions))
[16:21:15.910]     }
[16:21:15.910]     if (FALSE) {
[16:21:15.910]     }
[16:21:15.910]     else {
[16:21:15.910]         if (TRUE) {
[16:21:15.910]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:15.910]                 open = "w")
[16:21:15.910]         }
[16:21:15.910]         else {
[16:21:15.910]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:15.910]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:15.910]         }
[16:21:15.910]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:15.910]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:15.910]             base::sink(type = "output", split = FALSE)
[16:21:15.910]             base::close(...future.stdout)
[16:21:15.910]         }, add = TRUE)
[16:21:15.910]     }
[16:21:15.910]     ...future.frame <- base::sys.nframe()
[16:21:15.910]     ...future.conditions <- base::list()
[16:21:15.910]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:15.910]     if (FALSE) {
[16:21:15.910]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:15.910]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:15.910]     }
[16:21:15.910]     ...future.result <- base::tryCatch({
[16:21:15.910]         base::withCallingHandlers({
[16:21:15.910]             ...future.value <- base::withVisible(base::local({
[16:21:15.910]                 42L
[16:21:15.910]             }))
[16:21:15.910]             future::FutureResult(value = ...future.value$value, 
[16:21:15.910]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:15.910]                   ...future.rng), globalenv = if (FALSE) 
[16:21:15.910]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:15.910]                     ...future.globalenv.names))
[16:21:15.910]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:15.910]         }, condition = base::local({
[16:21:15.910]             c <- base::c
[16:21:15.910]             inherits <- base::inherits
[16:21:15.910]             invokeRestart <- base::invokeRestart
[16:21:15.910]             length <- base::length
[16:21:15.910]             list <- base::list
[16:21:15.910]             seq.int <- base::seq.int
[16:21:15.910]             signalCondition <- base::signalCondition
[16:21:15.910]             sys.calls <- base::sys.calls
[16:21:15.910]             `[[` <- base::`[[`
[16:21:15.910]             `+` <- base::`+`
[16:21:15.910]             `<<-` <- base::`<<-`
[16:21:15.910]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:15.910]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:15.910]                   3L)]
[16:21:15.910]             }
[16:21:15.910]             function(cond) {
[16:21:15.910]                 is_error <- inherits(cond, "error")
[16:21:15.910]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:15.910]                   NULL)
[16:21:15.910]                 if (is_error) {
[16:21:15.910]                   sessionInformation <- function() {
[16:21:15.910]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:15.910]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:15.910]                       search = base::search(), system = base::Sys.info())
[16:21:15.910]                   }
[16:21:15.910]                   ...future.conditions[[length(...future.conditions) + 
[16:21:15.910]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:15.910]                     cond$call), session = sessionInformation(), 
[16:21:15.910]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:15.910]                   signalCondition(cond)
[16:21:15.910]                 }
[16:21:15.910]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:15.910]                 "immediateCondition"))) {
[16:21:15.910]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:15.910]                   ...future.conditions[[length(...future.conditions) + 
[16:21:15.910]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:15.910]                   if (TRUE && !signal) {
[16:21:15.910]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:15.910]                     {
[16:21:15.910]                       inherits <- base::inherits
[16:21:15.910]                       invokeRestart <- base::invokeRestart
[16:21:15.910]                       is.null <- base::is.null
[16:21:15.910]                       muffled <- FALSE
[16:21:15.910]                       if (inherits(cond, "message")) {
[16:21:15.910]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:15.910]                         if (muffled) 
[16:21:15.910]                           invokeRestart("muffleMessage")
[16:21:15.910]                       }
[16:21:15.910]                       else if (inherits(cond, "warning")) {
[16:21:15.910]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:15.910]                         if (muffled) 
[16:21:15.910]                           invokeRestart("muffleWarning")
[16:21:15.910]                       }
[16:21:15.910]                       else if (inherits(cond, "condition")) {
[16:21:15.910]                         if (!is.null(pattern)) {
[16:21:15.910]                           computeRestarts <- base::computeRestarts
[16:21:15.910]                           grepl <- base::grepl
[16:21:15.910]                           restarts <- computeRestarts(cond)
[16:21:15.910]                           for (restart in restarts) {
[16:21:15.910]                             name <- restart$name
[16:21:15.910]                             if (is.null(name)) 
[16:21:15.910]                               next
[16:21:15.910]                             if (!grepl(pattern, name)) 
[16:21:15.910]                               next
[16:21:15.910]                             invokeRestart(restart)
[16:21:15.910]                             muffled <- TRUE
[16:21:15.910]                             break
[16:21:15.910]                           }
[16:21:15.910]                         }
[16:21:15.910]                       }
[16:21:15.910]                       invisible(muffled)
[16:21:15.910]                     }
[16:21:15.910]                     muffleCondition(cond, pattern = "^muffle")
[16:21:15.910]                   }
[16:21:15.910]                 }
[16:21:15.910]                 else {
[16:21:15.910]                   if (TRUE) {
[16:21:15.910]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:15.910]                     {
[16:21:15.910]                       inherits <- base::inherits
[16:21:15.910]                       invokeRestart <- base::invokeRestart
[16:21:15.910]                       is.null <- base::is.null
[16:21:15.910]                       muffled <- FALSE
[16:21:15.910]                       if (inherits(cond, "message")) {
[16:21:15.910]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:15.910]                         if (muffled) 
[16:21:15.910]                           invokeRestart("muffleMessage")
[16:21:15.910]                       }
[16:21:15.910]                       else if (inherits(cond, "warning")) {
[16:21:15.910]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:15.910]                         if (muffled) 
[16:21:15.910]                           invokeRestart("muffleWarning")
[16:21:15.910]                       }
[16:21:15.910]                       else if (inherits(cond, "condition")) {
[16:21:15.910]                         if (!is.null(pattern)) {
[16:21:15.910]                           computeRestarts <- base::computeRestarts
[16:21:15.910]                           grepl <- base::grepl
[16:21:15.910]                           restarts <- computeRestarts(cond)
[16:21:15.910]                           for (restart in restarts) {
[16:21:15.910]                             name <- restart$name
[16:21:15.910]                             if (is.null(name)) 
[16:21:15.910]                               next
[16:21:15.910]                             if (!grepl(pattern, name)) 
[16:21:15.910]                               next
[16:21:15.910]                             invokeRestart(restart)
[16:21:15.910]                             muffled <- TRUE
[16:21:15.910]                             break
[16:21:15.910]                           }
[16:21:15.910]                         }
[16:21:15.910]                       }
[16:21:15.910]                       invisible(muffled)
[16:21:15.910]                     }
[16:21:15.910]                     muffleCondition(cond, pattern = "^muffle")
[16:21:15.910]                   }
[16:21:15.910]                 }
[16:21:15.910]             }
[16:21:15.910]         }))
[16:21:15.910]     }, error = function(ex) {
[16:21:15.910]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:15.910]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:15.910]                 ...future.rng), started = ...future.startTime, 
[16:21:15.910]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:15.910]             version = "1.8"), class = "FutureResult")
[16:21:15.910]     }, finally = {
[16:21:15.910]         if (!identical(...future.workdir, getwd())) 
[16:21:15.910]             setwd(...future.workdir)
[16:21:15.910]         {
[16:21:15.910]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:15.910]                 ...future.oldOptions$nwarnings <- NULL
[16:21:15.910]             }
[16:21:15.910]             base::options(...future.oldOptions)
[16:21:15.910]             if (.Platform$OS.type == "windows") {
[16:21:15.910]                 old_names <- names(...future.oldEnvVars)
[16:21:15.910]                 envs <- base::Sys.getenv()
[16:21:15.910]                 names <- names(envs)
[16:21:15.910]                 common <- intersect(names, old_names)
[16:21:15.910]                 added <- setdiff(names, old_names)
[16:21:15.910]                 removed <- setdiff(old_names, names)
[16:21:15.910]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:15.910]                   envs[common]]
[16:21:15.910]                 NAMES <- toupper(changed)
[16:21:15.910]                 args <- list()
[16:21:15.910]                 for (kk in seq_along(NAMES)) {
[16:21:15.910]                   name <- changed[[kk]]
[16:21:15.910]                   NAME <- NAMES[[kk]]
[16:21:15.910]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:15.910]                     next
[16:21:15.910]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:15.910]                 }
[16:21:15.910]                 NAMES <- toupper(added)
[16:21:15.910]                 for (kk in seq_along(NAMES)) {
[16:21:15.910]                   name <- added[[kk]]
[16:21:15.910]                   NAME <- NAMES[[kk]]
[16:21:15.910]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:15.910]                     next
[16:21:15.910]                   args[[name]] <- ""
[16:21:15.910]                 }
[16:21:15.910]                 NAMES <- toupper(removed)
[16:21:15.910]                 for (kk in seq_along(NAMES)) {
[16:21:15.910]                   name <- removed[[kk]]
[16:21:15.910]                   NAME <- NAMES[[kk]]
[16:21:15.910]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:15.910]                     next
[16:21:15.910]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:15.910]                 }
[16:21:15.910]                 if (length(args) > 0) 
[16:21:15.910]                   base::do.call(base::Sys.setenv, args = args)
[16:21:15.910]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:15.910]             }
[16:21:15.910]             else {
[16:21:15.910]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:15.910]             }
[16:21:15.910]             {
[16:21:15.910]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:15.910]                   0L) {
[16:21:15.910]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:15.910]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:15.910]                   base::options(opts)
[16:21:15.910]                 }
[16:21:15.910]                 {
[16:21:15.910]                   {
[16:21:15.910]                     NULL
[16:21:15.910]                     RNGkind("Mersenne-Twister")
[16:21:15.910]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:21:15.910]                       inherits = FALSE)
[16:21:15.910]                   }
[16:21:15.910]                   options(future.plan = NULL)
[16:21:15.910]                   if (is.na(NA_character_)) 
[16:21:15.910]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:15.910]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:15.910]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:15.910]                     .init = FALSE)
[16:21:15.910]                 }
[16:21:15.910]             }
[16:21:15.910]         }
[16:21:15.910]     })
[16:21:15.910]     if (TRUE) {
[16:21:15.910]         base::sink(type = "output", split = FALSE)
[16:21:15.910]         if (TRUE) {
[16:21:15.910]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:15.910]         }
[16:21:15.910]         else {
[16:21:15.910]             ...future.result["stdout"] <- base::list(NULL)
[16:21:15.910]         }
[16:21:15.910]         base::close(...future.stdout)
[16:21:15.910]         ...future.stdout <- NULL
[16:21:15.910]     }
[16:21:15.910]     ...future.result$conditions <- ...future.conditions
[16:21:15.910]     ...future.result$finished <- base::Sys.time()
[16:21:15.910]     ...future.result
[16:21:15.910] }
[16:21:15.912] plan(): Setting new future strategy stack:
[16:21:15.913] List of future strategies:
[16:21:15.913] 1. sequential:
[16:21:15.913]    - args: function (..., envir = parent.frame())
[16:21:15.913]    - tweaked: FALSE
[16:21:15.913]    - call: NULL
[16:21:15.913] plan(): nbrOfWorkers() = 1
[16:21:15.914] plan(): Setting new future strategy stack:
[16:21:15.914] List of future strategies:
[16:21:15.914] 1. multicore:
[16:21:15.914]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:21:15.914]    - tweaked: FALSE
[16:21:15.914]    - call: plan(multicore)
[16:21:15.918] plan(): nbrOfWorkers() = 1
[16:21:15.918] SequentialFuture started (and completed)
[16:21:15.918] resolved() for ‘SequentialFuture’ ...
[16:21:15.919] - state: ‘finished’
[16:21:15.919] - run: TRUE
[16:21:15.919] - result: ‘FutureResult’
[16:21:15.919] resolved() for ‘SequentialFuture’ ... done
[1] TRUE
[1] 42
*** multicore(..., globals = FALSE) with globals
[16:21:15.923] getGlobalsAndPackages() ...
[16:21:15.923] Not searching for globals
[16:21:15.923] - globals: [0] <none>
[16:21:15.923] getGlobalsAndPackages() ... DONE
[16:21:15.923] Packages needed by the future expression (n = 0): <none>
[16:21:15.923] Packages needed by future strategies (n = 0): <none>
[16:21:15.924] {
[16:21:15.924]     {
[16:21:15.924]         {
[16:21:15.924]             ...future.startTime <- base::Sys.time()
[16:21:15.924]             {
[16:21:15.924]                 {
[16:21:15.924]                   {
[16:21:15.924]                     base::local({
[16:21:15.924]                       has_future <- base::requireNamespace("future", 
[16:21:15.924]                         quietly = TRUE)
[16:21:15.924]                       if (has_future) {
[16:21:15.924]                         ns <- base::getNamespace("future")
[16:21:15.924]                         version <- ns[[".package"]][["version"]]
[16:21:15.924]                         if (is.null(version)) 
[16:21:15.924]                           version <- utils::packageVersion("future")
[16:21:15.924]                       }
[16:21:15.924]                       else {
[16:21:15.924]                         version <- NULL
[16:21:15.924]                       }
[16:21:15.924]                       if (!has_future || version < "1.8.0") {
[16:21:15.924]                         info <- base::c(r_version = base::gsub("R version ", 
[16:21:15.924]                           "", base::R.version$version.string), 
[16:21:15.924]                           platform = base::sprintf("%s (%s-bit)", 
[16:21:15.924]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:15.924]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:15.924]                             "release", "version")], collapse = " "), 
[16:21:15.924]                           hostname = base::Sys.info()[["nodename"]])
[16:21:15.924]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:21:15.924]                           info)
[16:21:15.924]                         info <- base::paste(info, collapse = "; ")
[16:21:15.924]                         if (!has_future) {
[16:21:15.924]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:15.924]                             info)
[16:21:15.924]                         }
[16:21:15.924]                         else {
[16:21:15.924]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:15.924]                             info, version)
[16:21:15.924]                         }
[16:21:15.924]                         base::stop(msg)
[16:21:15.924]                       }
[16:21:15.924]                     })
[16:21:15.924]                   }
[16:21:15.924]                   ...future.strategy.old <- future::plan("list")
[16:21:15.924]                   options(future.plan = NULL)
[16:21:15.924]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:15.924]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:15.924]                 }
[16:21:15.924]                 ...future.workdir <- getwd()
[16:21:15.924]             }
[16:21:15.924]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:15.924]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:15.924]         }
[16:21:15.924]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:15.924]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:15.924]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:15.924]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:15.924]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:15.924]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:15.924]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:15.924]             base::names(...future.oldOptions))
[16:21:15.924]     }
[16:21:15.924]     if (FALSE) {
[16:21:15.924]     }
[16:21:15.924]     else {
[16:21:15.924]         if (TRUE) {
[16:21:15.924]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:15.924]                 open = "w")
[16:21:15.924]         }
[16:21:15.924]         else {
[16:21:15.924]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:15.924]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:15.924]         }
[16:21:15.924]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:15.924]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:15.924]             base::sink(type = "output", split = FALSE)
[16:21:15.924]             base::close(...future.stdout)
[16:21:15.924]         }, add = TRUE)
[16:21:15.924]     }
[16:21:15.924]     ...future.frame <- base::sys.nframe()
[16:21:15.924]     ...future.conditions <- base::list()
[16:21:15.924]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:15.924]     if (FALSE) {
[16:21:15.924]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:15.924]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:15.924]     }
[16:21:15.924]     ...future.result <- base::tryCatch({
[16:21:15.924]         base::withCallingHandlers({
[16:21:15.924]             ...future.value <- base::withVisible(base::local({
[16:21:15.924]                 b <- 3
[16:21:15.924]                 c <- 2
[16:21:15.924]                 a * b * c
[16:21:15.924]             }))
[16:21:15.924]             future::FutureResult(value = ...future.value$value, 
[16:21:15.924]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:15.924]                   ...future.rng), globalenv = if (FALSE) 
[16:21:15.924]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:15.924]                     ...future.globalenv.names))
[16:21:15.924]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:15.924]         }, condition = base::local({
[16:21:15.924]             c <- base::c
[16:21:15.924]             inherits <- base::inherits
[16:21:15.924]             invokeRestart <- base::invokeRestart
[16:21:15.924]             length <- base::length
[16:21:15.924]             list <- base::list
[16:21:15.924]             seq.int <- base::seq.int
[16:21:15.924]             signalCondition <- base::signalCondition
[16:21:15.924]             sys.calls <- base::sys.calls
[16:21:15.924]             `[[` <- base::`[[`
[16:21:15.924]             `+` <- base::`+`
[16:21:15.924]             `<<-` <- base::`<<-`
[16:21:15.924]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:15.924]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:15.924]                   3L)]
[16:21:15.924]             }
[16:21:15.924]             function(cond) {
[16:21:15.924]                 is_error <- inherits(cond, "error")
[16:21:15.924]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:15.924]                   NULL)
[16:21:15.924]                 if (is_error) {
[16:21:15.924]                   sessionInformation <- function() {
[16:21:15.924]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:15.924]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:15.924]                       search = base::search(), system = base::Sys.info())
[16:21:15.924]                   }
[16:21:15.924]                   ...future.conditions[[length(...future.conditions) + 
[16:21:15.924]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:15.924]                     cond$call), session = sessionInformation(), 
[16:21:15.924]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:15.924]                   signalCondition(cond)
[16:21:15.924]                 }
[16:21:15.924]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:15.924]                 "immediateCondition"))) {
[16:21:15.924]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:15.924]                   ...future.conditions[[length(...future.conditions) + 
[16:21:15.924]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:15.924]                   if (TRUE && !signal) {
[16:21:15.924]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:15.924]                     {
[16:21:15.924]                       inherits <- base::inherits
[16:21:15.924]                       invokeRestart <- base::invokeRestart
[16:21:15.924]                       is.null <- base::is.null
[16:21:15.924]                       muffled <- FALSE
[16:21:15.924]                       if (inherits(cond, "message")) {
[16:21:15.924]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:15.924]                         if (muffled) 
[16:21:15.924]                           invokeRestart("muffleMessage")
[16:21:15.924]                       }
[16:21:15.924]                       else if (inherits(cond, "warning")) {
[16:21:15.924]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:15.924]                         if (muffled) 
[16:21:15.924]                           invokeRestart("muffleWarning")
[16:21:15.924]                       }
[16:21:15.924]                       else if (inherits(cond, "condition")) {
[16:21:15.924]                         if (!is.null(pattern)) {
[16:21:15.924]                           computeRestarts <- base::computeRestarts
[16:21:15.924]                           grepl <- base::grepl
[16:21:15.924]                           restarts <- computeRestarts(cond)
[16:21:15.924]                           for (restart in restarts) {
[16:21:15.924]                             name <- restart$name
[16:21:15.924]                             if (is.null(name)) 
[16:21:15.924]                               next
[16:21:15.924]                             if (!grepl(pattern, name)) 
[16:21:15.924]                               next
[16:21:15.924]                             invokeRestart(restart)
[16:21:15.924]                             muffled <- TRUE
[16:21:15.924]                             break
[16:21:15.924]                           }
[16:21:15.924]                         }
[16:21:15.924]                       }
[16:21:15.924]                       invisible(muffled)
[16:21:15.924]                     }
[16:21:15.924]                     muffleCondition(cond, pattern = "^muffle")
[16:21:15.924]                   }
[16:21:15.924]                 }
[16:21:15.924]                 else {
[16:21:15.924]                   if (TRUE) {
[16:21:15.924]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:15.924]                     {
[16:21:15.924]                       inherits <- base::inherits
[16:21:15.924]                       invokeRestart <- base::invokeRestart
[16:21:15.924]                       is.null <- base::is.null
[16:21:15.924]                       muffled <- FALSE
[16:21:15.924]                       if (inherits(cond, "message")) {
[16:21:15.924]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:15.924]                         if (muffled) 
[16:21:15.924]                           invokeRestart("muffleMessage")
[16:21:15.924]                       }
[16:21:15.924]                       else if (inherits(cond, "warning")) {
[16:21:15.924]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:15.924]                         if (muffled) 
[16:21:15.924]                           invokeRestart("muffleWarning")
[16:21:15.924]                       }
[16:21:15.924]                       else if (inherits(cond, "condition")) {
[16:21:15.924]                         if (!is.null(pattern)) {
[16:21:15.924]                           computeRestarts <- base::computeRestarts
[16:21:15.924]                           grepl <- base::grepl
[16:21:15.924]                           restarts <- computeRestarts(cond)
[16:21:15.924]                           for (restart in restarts) {
[16:21:15.924]                             name <- restart$name
[16:21:15.924]                             if (is.null(name)) 
[16:21:15.924]                               next
[16:21:15.924]                             if (!grepl(pattern, name)) 
[16:21:15.924]                               next
[16:21:15.924]                             invokeRestart(restart)
[16:21:15.924]                             muffled <- TRUE
[16:21:15.924]                             break
[16:21:15.924]                           }
[16:21:15.924]                         }
[16:21:15.924]                       }
[16:21:15.924]                       invisible(muffled)
[16:21:15.924]                     }
[16:21:15.924]                     muffleCondition(cond, pattern = "^muffle")
[16:21:15.924]                   }
[16:21:15.924]                 }
[16:21:15.924]             }
[16:21:15.924]         }))
[16:21:15.924]     }, error = function(ex) {
[16:21:15.924]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:15.924]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:15.924]                 ...future.rng), started = ...future.startTime, 
[16:21:15.924]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:15.924]             version = "1.8"), class = "FutureResult")
[16:21:15.924]     }, finally = {
[16:21:15.924]         if (!identical(...future.workdir, getwd())) 
[16:21:15.924]             setwd(...future.workdir)
[16:21:15.924]         {
[16:21:15.924]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:15.924]                 ...future.oldOptions$nwarnings <- NULL
[16:21:15.924]             }
[16:21:15.924]             base::options(...future.oldOptions)
[16:21:15.924]             if (.Platform$OS.type == "windows") {
[16:21:15.924]                 old_names <- names(...future.oldEnvVars)
[16:21:15.924]                 envs <- base::Sys.getenv()
[16:21:15.924]                 names <- names(envs)
[16:21:15.924]                 common <- intersect(names, old_names)
[16:21:15.924]                 added <- setdiff(names, old_names)
[16:21:15.924]                 removed <- setdiff(old_names, names)
[16:21:15.924]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:15.924]                   envs[common]]
[16:21:15.924]                 NAMES <- toupper(changed)
[16:21:15.924]                 args <- list()
[16:21:15.924]                 for (kk in seq_along(NAMES)) {
[16:21:15.924]                   name <- changed[[kk]]
[16:21:15.924]                   NAME <- NAMES[[kk]]
[16:21:15.924]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:15.924]                     next
[16:21:15.924]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:15.924]                 }
[16:21:15.924]                 NAMES <- toupper(added)
[16:21:15.924]                 for (kk in seq_along(NAMES)) {
[16:21:15.924]                   name <- added[[kk]]
[16:21:15.924]                   NAME <- NAMES[[kk]]
[16:21:15.924]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:15.924]                     next
[16:21:15.924]                   args[[name]] <- ""
[16:21:15.924]                 }
[16:21:15.924]                 NAMES <- toupper(removed)
[16:21:15.924]                 for (kk in seq_along(NAMES)) {
[16:21:15.924]                   name <- removed[[kk]]
[16:21:15.924]                   NAME <- NAMES[[kk]]
[16:21:15.924]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:15.924]                     next
[16:21:15.924]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:15.924]                 }
[16:21:15.924]                 if (length(args) > 0) 
[16:21:15.924]                   base::do.call(base::Sys.setenv, args = args)
[16:21:15.924]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:15.924]             }
[16:21:15.924]             else {
[16:21:15.924]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:15.924]             }
[16:21:15.924]             {
[16:21:15.924]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:15.924]                   0L) {
[16:21:15.924]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:15.924]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:15.924]                   base::options(opts)
[16:21:15.924]                 }
[16:21:15.924]                 {
[16:21:15.924]                   {
[16:21:15.924]                     NULL
[16:21:15.924]                     RNGkind("Mersenne-Twister")
[16:21:15.924]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:21:15.924]                       inherits = FALSE)
[16:21:15.924]                   }
[16:21:15.924]                   options(future.plan = NULL)
[16:21:15.924]                   if (is.na(NA_character_)) 
[16:21:15.924]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:15.924]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:15.924]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:15.924]                     .init = FALSE)
[16:21:15.924]                 }
[16:21:15.924]             }
[16:21:15.924]         }
[16:21:15.924]     })
[16:21:15.924]     if (TRUE) {
[16:21:15.924]         base::sink(type = "output", split = FALSE)
[16:21:15.924]         if (TRUE) {
[16:21:15.924]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:15.924]         }
[16:21:15.924]         else {
[16:21:15.924]             ...future.result["stdout"] <- base::list(NULL)
[16:21:15.924]         }
[16:21:15.924]         base::close(...future.stdout)
[16:21:15.924]         ...future.stdout <- NULL
[16:21:15.924]     }
[16:21:15.924]     ...future.result$conditions <- ...future.conditions
[16:21:15.924]     ...future.result$finished <- base::Sys.time()
[16:21:15.924]     ...future.result
[16:21:15.924] }
[16:21:15.926] plan(): Setting new future strategy stack:
[16:21:15.926] List of future strategies:
[16:21:15.926] 1. sequential:
[16:21:15.926]    - args: function (..., envir = parent.frame())
[16:21:15.926]    - tweaked: FALSE
[16:21:15.926]    - call: NULL
[16:21:15.926] plan(): nbrOfWorkers() = 1
[16:21:15.927] plan(): Setting new future strategy stack:
[16:21:15.927] List of future strategies:
[16:21:15.927] 1. multicore:
[16:21:15.927]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:21:15.927]    - tweaked: FALSE
[16:21:15.927]    - call: plan(multicore)
[16:21:15.931] plan(): nbrOfWorkers() = 1
[16:21:15.931] SequentialFuture started (and completed)
SequentialFuture:
Label: ‘<none>’
Expression:
{
    b <- 3
    c <- 2
    a * b * c
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 341000aa-40a0-ae89-3f55-e211e7e2f207
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[1] 0
*** multicore(..., globals = FALSE) with globals and blocking
 - Creating multicore future #1 ...
[16:21:15.936] getGlobalsAndPackages() ...
[16:21:15.936] Not searching for globals
[16:21:15.936] - globals: [0] <none>
[16:21:15.936] getGlobalsAndPackages() ... DONE
[16:21:15.937] Packages needed by the future expression (n = 0): <none>
[16:21:15.937] Packages needed by future strategies (n = 0): <none>
[16:21:15.937] {
[16:21:15.937]     {
[16:21:15.937]         {
[16:21:15.937]             ...future.startTime <- base::Sys.time()
[16:21:15.937]             {
[16:21:15.937]                 {
[16:21:15.937]                   {
[16:21:15.937]                     base::local({
[16:21:15.937]                       has_future <- base::requireNamespace("future", 
[16:21:15.937]                         quietly = TRUE)
[16:21:15.937]                       if (has_future) {
[16:21:15.937]                         ns <- base::getNamespace("future")
[16:21:15.937]                         version <- ns[[".package"]][["version"]]
[16:21:15.937]                         if (is.null(version)) 
[16:21:15.937]                           version <- utils::packageVersion("future")
[16:21:15.937]                       }
[16:21:15.937]                       else {
[16:21:15.937]                         version <- NULL
[16:21:15.937]                       }
[16:21:15.937]                       if (!has_future || version < "1.8.0") {
[16:21:15.937]                         info <- base::c(r_version = base::gsub("R version ", 
[16:21:15.937]                           "", base::R.version$version.string), 
[16:21:15.937]                           platform = base::sprintf("%s (%s-bit)", 
[16:21:15.937]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:15.937]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:15.937]                             "release", "version")], collapse = " "), 
[16:21:15.937]                           hostname = base::Sys.info()[["nodename"]])
[16:21:15.937]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:21:15.937]                           info)
[16:21:15.937]                         info <- base::paste(info, collapse = "; ")
[16:21:15.937]                         if (!has_future) {
[16:21:15.937]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:15.937]                             info)
[16:21:15.937]                         }
[16:21:15.937]                         else {
[16:21:15.937]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:15.937]                             info, version)
[16:21:15.937]                         }
[16:21:15.937]                         base::stop(msg)
[16:21:15.937]                       }
[16:21:15.937]                     })
[16:21:15.937]                   }
[16:21:15.937]                   ...future.strategy.old <- future::plan("list")
[16:21:15.937]                   options(future.plan = NULL)
[16:21:15.937]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:15.937]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:15.937]                 }
[16:21:15.937]                 ...future.workdir <- getwd()
[16:21:15.937]             }
[16:21:15.937]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:15.937]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:15.937]         }
[16:21:15.937]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:15.937]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:15.937]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:15.937]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:15.937]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:15.937]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:15.937]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:15.937]             base::names(...future.oldOptions))
[16:21:15.937]     }
[16:21:15.937]     if (FALSE) {
[16:21:15.937]     }
[16:21:15.937]     else {
[16:21:15.937]         if (TRUE) {
[16:21:15.937]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:15.937]                 open = "w")
[16:21:15.937]         }
[16:21:15.937]         else {
[16:21:15.937]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:15.937]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:15.937]         }
[16:21:15.937]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:15.937]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:15.937]             base::sink(type = "output", split = FALSE)
[16:21:15.937]             base::close(...future.stdout)
[16:21:15.937]         }, add = TRUE)
[16:21:15.937]     }
[16:21:15.937]     ...future.frame <- base::sys.nframe()
[16:21:15.937]     ...future.conditions <- base::list()
[16:21:15.937]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:15.937]     if (FALSE) {
[16:21:15.937]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:15.937]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:15.937]     }
[16:21:15.937]     ...future.result <- base::tryCatch({
[16:21:15.937]         base::withCallingHandlers({
[16:21:15.937]             ...future.value <- base::withVisible(base::local({
[16:21:15.937]                 ii
[16:21:15.937]             }))
[16:21:15.937]             future::FutureResult(value = ...future.value$value, 
[16:21:15.937]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:15.937]                   ...future.rng), globalenv = if (FALSE) 
[16:21:15.937]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:15.937]                     ...future.globalenv.names))
[16:21:15.937]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:15.937]         }, condition = base::local({
[16:21:15.937]             c <- base::c
[16:21:15.937]             inherits <- base::inherits
[16:21:15.937]             invokeRestart <- base::invokeRestart
[16:21:15.937]             length <- base::length
[16:21:15.937]             list <- base::list
[16:21:15.937]             seq.int <- base::seq.int
[16:21:15.937]             signalCondition <- base::signalCondition
[16:21:15.937]             sys.calls <- base::sys.calls
[16:21:15.937]             `[[` <- base::`[[`
[16:21:15.937]             `+` <- base::`+`
[16:21:15.937]             `<<-` <- base::`<<-`
[16:21:15.937]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:15.937]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:15.937]                   3L)]
[16:21:15.937]             }
[16:21:15.937]             function(cond) {
[16:21:15.937]                 is_error <- inherits(cond, "error")
[16:21:15.937]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:15.937]                   NULL)
[16:21:15.937]                 if (is_error) {
[16:21:15.937]                   sessionInformation <- function() {
[16:21:15.937]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:15.937]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:15.937]                       search = base::search(), system = base::Sys.info())
[16:21:15.937]                   }
[16:21:15.937]                   ...future.conditions[[length(...future.conditions) + 
[16:21:15.937]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:15.937]                     cond$call), session = sessionInformation(), 
[16:21:15.937]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:15.937]                   signalCondition(cond)
[16:21:15.937]                 }
[16:21:15.937]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:15.937]                 "immediateCondition"))) {
[16:21:15.937]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:15.937]                   ...future.conditions[[length(...future.conditions) + 
[16:21:15.937]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:15.937]                   if (TRUE && !signal) {
[16:21:15.937]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:15.937]                     {
[16:21:15.937]                       inherits <- base::inherits
[16:21:15.937]                       invokeRestart <- base::invokeRestart
[16:21:15.937]                       is.null <- base::is.null
[16:21:15.937]                       muffled <- FALSE
[16:21:15.937]                       if (inherits(cond, "message")) {
[16:21:15.937]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:15.937]                         if (muffled) 
[16:21:15.937]                           invokeRestart("muffleMessage")
[16:21:15.937]                       }
[16:21:15.937]                       else if (inherits(cond, "warning")) {
[16:21:15.937]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:15.937]                         if (muffled) 
[16:21:15.937]                           invokeRestart("muffleWarning")
[16:21:15.937]                       }
[16:21:15.937]                       else if (inherits(cond, "condition")) {
[16:21:15.937]                         if (!is.null(pattern)) {
[16:21:15.937]                           computeRestarts <- base::computeRestarts
[16:21:15.937]                           grepl <- base::grepl
[16:21:15.937]                           restarts <- computeRestarts(cond)
[16:21:15.937]                           for (restart in restarts) {
[16:21:15.937]                             name <- restart$name
[16:21:15.937]                             if (is.null(name)) 
[16:21:15.937]                               next
[16:21:15.937]                             if (!grepl(pattern, name)) 
[16:21:15.937]                               next
[16:21:15.937]                             invokeRestart(restart)
[16:21:15.937]                             muffled <- TRUE
[16:21:15.937]                             break
[16:21:15.937]                           }
[16:21:15.937]                         }
[16:21:15.937]                       }
[16:21:15.937]                       invisible(muffled)
[16:21:15.937]                     }
[16:21:15.937]                     muffleCondition(cond, pattern = "^muffle")
[16:21:15.937]                   }
[16:21:15.937]                 }
[16:21:15.937]                 else {
[16:21:15.937]                   if (TRUE) {
[16:21:15.937]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:15.937]                     {
[16:21:15.937]                       inherits <- base::inherits
[16:21:15.937]                       invokeRestart <- base::invokeRestart
[16:21:15.937]                       is.null <- base::is.null
[16:21:15.937]                       muffled <- FALSE
[16:21:15.937]                       if (inherits(cond, "message")) {
[16:21:15.937]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:15.937]                         if (muffled) 
[16:21:15.937]                           invokeRestart("muffleMessage")
[16:21:15.937]                       }
[16:21:15.937]                       else if (inherits(cond, "warning")) {
[16:21:15.937]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:15.937]                         if (muffled) 
[16:21:15.937]                           invokeRestart("muffleWarning")
[16:21:15.937]                       }
[16:21:15.937]                       else if (inherits(cond, "condition")) {
[16:21:15.937]                         if (!is.null(pattern)) {
[16:21:15.937]                           computeRestarts <- base::computeRestarts
[16:21:15.937]                           grepl <- base::grepl
[16:21:15.937]                           restarts <- computeRestarts(cond)
[16:21:15.937]                           for (restart in restarts) {
[16:21:15.937]                             name <- restart$name
[16:21:15.937]                             if (is.null(name)) 
[16:21:15.937]                               next
[16:21:15.937]                             if (!grepl(pattern, name)) 
[16:21:15.937]                               next
[16:21:15.937]                             invokeRestart(restart)
[16:21:15.937]                             muffled <- TRUE
[16:21:15.937]                             break
[16:21:15.937]                           }
[16:21:15.937]                         }
[16:21:15.937]                       }
[16:21:15.937]                       invisible(muffled)
[16:21:15.937]                     }
[16:21:15.937]                     muffleCondition(cond, pattern = "^muffle")
[16:21:15.937]                   }
[16:21:15.937]                 }
[16:21:15.937]             }
[16:21:15.937]         }))
[16:21:15.937]     }, error = function(ex) {
[16:21:15.937]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:15.937]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:15.937]                 ...future.rng), started = ...future.startTime, 
[16:21:15.937]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:15.937]             version = "1.8"), class = "FutureResult")
[16:21:15.937]     }, finally = {
[16:21:15.937]         if (!identical(...future.workdir, getwd())) 
[16:21:15.937]             setwd(...future.workdir)
[16:21:15.937]         {
[16:21:15.937]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:15.937]                 ...future.oldOptions$nwarnings <- NULL
[16:21:15.937]             }
[16:21:15.937]             base::options(...future.oldOptions)
[16:21:15.937]             if (.Platform$OS.type == "windows") {
[16:21:15.937]                 old_names <- names(...future.oldEnvVars)
[16:21:15.937]                 envs <- base::Sys.getenv()
[16:21:15.937]                 names <- names(envs)
[16:21:15.937]                 common <- intersect(names, old_names)
[16:21:15.937]                 added <- setdiff(names, old_names)
[16:21:15.937]                 removed <- setdiff(old_names, names)
[16:21:15.937]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:15.937]                   envs[common]]
[16:21:15.937]                 NAMES <- toupper(changed)
[16:21:15.937]                 args <- list()
[16:21:15.937]                 for (kk in seq_along(NAMES)) {
[16:21:15.937]                   name <- changed[[kk]]
[16:21:15.937]                   NAME <- NAMES[[kk]]
[16:21:15.937]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:15.937]                     next
[16:21:15.937]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:15.937]                 }
[16:21:15.937]                 NAMES <- toupper(added)
[16:21:15.937]                 for (kk in seq_along(NAMES)) {
[16:21:15.937]                   name <- added[[kk]]
[16:21:15.937]                   NAME <- NAMES[[kk]]
[16:21:15.937]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:15.937]                     next
[16:21:15.937]                   args[[name]] <- ""
[16:21:15.937]                 }
[16:21:15.937]                 NAMES <- toupper(removed)
[16:21:15.937]                 for (kk in seq_along(NAMES)) {
[16:21:15.937]                   name <- removed[[kk]]
[16:21:15.937]                   NAME <- NAMES[[kk]]
[16:21:15.937]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:15.937]                     next
[16:21:15.937]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:15.937]                 }
[16:21:15.937]                 if (length(args) > 0) 
[16:21:15.937]                   base::do.call(base::Sys.setenv, args = args)
[16:21:15.937]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:15.937]             }
[16:21:15.937]             else {
[16:21:15.937]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:15.937]             }
[16:21:15.937]             {
[16:21:15.937]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:15.937]                   0L) {
[16:21:15.937]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:15.937]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:15.937]                   base::options(opts)
[16:21:15.937]                 }
[16:21:15.937]                 {
[16:21:15.937]                   {
[16:21:15.937]                     NULL
[16:21:15.937]                     RNGkind("Mersenne-Twister")
[16:21:15.937]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:21:15.937]                       inherits = FALSE)
[16:21:15.937]                   }
[16:21:15.937]                   options(future.plan = NULL)
[16:21:15.937]                   if (is.na(NA_character_)) 
[16:21:15.937]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:15.937]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:15.937]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:15.937]                     .init = FALSE)
[16:21:15.937]                 }
[16:21:15.937]             }
[16:21:15.937]         }
[16:21:15.937]     })
[16:21:15.937]     if (TRUE) {
[16:21:15.937]         base::sink(type = "output", split = FALSE)
[16:21:15.937]         if (TRUE) {
[16:21:15.937]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:15.937]         }
[16:21:15.937]         else {
[16:21:15.937]             ...future.result["stdout"] <- base::list(NULL)
[16:21:15.937]         }
[16:21:15.937]         base::close(...future.stdout)
[16:21:15.937]         ...future.stdout <- NULL
[16:21:15.937]     }
[16:21:15.937]     ...future.result$conditions <- ...future.conditions
[16:21:15.937]     ...future.result$finished <- base::Sys.time()
[16:21:15.937]     ...future.result
[16:21:15.937] }
[16:21:15.939] plan(): Setting new future strategy stack:
[16:21:15.939] List of future strategies:
[16:21:15.939] 1. sequential:
[16:21:15.939]    - args: function (..., envir = parent.frame())
[16:21:15.939]    - tweaked: FALSE
[16:21:15.939]    - call: NULL
[16:21:15.940] plan(): nbrOfWorkers() = 1
[16:21:15.941] plan(): Setting new future strategy stack:
[16:21:15.941] List of future strategies:
[16:21:15.941] 1. multicore:
[16:21:15.941]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:21:15.941]    - tweaked: FALSE
[16:21:15.941]    - call: plan(multicore)
[16:21:15.945] plan(): nbrOfWorkers() = 1
[16:21:15.945] SequentialFuture started (and completed)
 - Creating multicore future #2 ...
[16:21:15.952] getGlobalsAndPackages() ...
[16:21:15.952] Not searching for globals
[16:21:15.952] - globals: [0] <none>
[16:21:15.952] getGlobalsAndPackages() ... DONE
[16:21:15.953] Packages needed by the future expression (n = 0): <none>
[16:21:15.953] Packages needed by future strategies (n = 0): <none>
[16:21:15.953] {
[16:21:15.953]     {
[16:21:15.953]         {
[16:21:15.953]             ...future.startTime <- base::Sys.time()
[16:21:15.953]             {
[16:21:15.953]                 {
[16:21:15.953]                   {
[16:21:15.953]                     base::local({
[16:21:15.953]                       has_future <- base::requireNamespace("future", 
[16:21:15.953]                         quietly = TRUE)
[16:21:15.953]                       if (has_future) {
[16:21:15.953]                         ns <- base::getNamespace("future")
[16:21:15.953]                         version <- ns[[".package"]][["version"]]
[16:21:15.953]                         if (is.null(version)) 
[16:21:15.953]                           version <- utils::packageVersion("future")
[16:21:15.953]                       }
[16:21:15.953]                       else {
[16:21:15.953]                         version <- NULL
[16:21:15.953]                       }
[16:21:15.953]                       if (!has_future || version < "1.8.0") {
[16:21:15.953]                         info <- base::c(r_version = base::gsub("R version ", 
[16:21:15.953]                           "", base::R.version$version.string), 
[16:21:15.953]                           platform = base::sprintf("%s (%s-bit)", 
[16:21:15.953]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:15.953]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:15.953]                             "release", "version")], collapse = " "), 
[16:21:15.953]                           hostname = base::Sys.info()[["nodename"]])
[16:21:15.953]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:21:15.953]                           info)
[16:21:15.953]                         info <- base::paste(info, collapse = "; ")
[16:21:15.953]                         if (!has_future) {
[16:21:15.953]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:15.953]                             info)
[16:21:15.953]                         }
[16:21:15.953]                         else {
[16:21:15.953]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:15.953]                             info, version)
[16:21:15.953]                         }
[16:21:15.953]                         base::stop(msg)
[16:21:15.953]                       }
[16:21:15.953]                     })
[16:21:15.953]                   }
[16:21:15.953]                   ...future.strategy.old <- future::plan("list")
[16:21:15.953]                   options(future.plan = NULL)
[16:21:15.953]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:15.953]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:15.953]                 }
[16:21:15.953]                 ...future.workdir <- getwd()
[16:21:15.953]             }
[16:21:15.953]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:15.953]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:15.953]         }
[16:21:15.953]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:15.953]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:15.953]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:15.953]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:15.953]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:15.953]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:15.953]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:15.953]             base::names(...future.oldOptions))
[16:21:15.953]     }
[16:21:15.953]     if (FALSE) {
[16:21:15.953]     }
[16:21:15.953]     else {
[16:21:15.953]         if (TRUE) {
[16:21:15.953]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:15.953]                 open = "w")
[16:21:15.953]         }
[16:21:15.953]         else {
[16:21:15.953]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:15.953]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:15.953]         }
[16:21:15.953]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:15.953]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:15.953]             base::sink(type = "output", split = FALSE)
[16:21:15.953]             base::close(...future.stdout)
[16:21:15.953]         }, add = TRUE)
[16:21:15.953]     }
[16:21:15.953]     ...future.frame <- base::sys.nframe()
[16:21:15.953]     ...future.conditions <- base::list()
[16:21:15.953]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:15.953]     if (FALSE) {
[16:21:15.953]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:15.953]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:15.953]     }
[16:21:15.953]     ...future.result <- base::tryCatch({
[16:21:15.953]         base::withCallingHandlers({
[16:21:15.953]             ...future.value <- base::withVisible(base::local({
[16:21:15.953]                 ii
[16:21:15.953]             }))
[16:21:15.953]             future::FutureResult(value = ...future.value$value, 
[16:21:15.953]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:15.953]                   ...future.rng), globalenv = if (FALSE) 
[16:21:15.953]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:15.953]                     ...future.globalenv.names))
[16:21:15.953]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:15.953]         }, condition = base::local({
[16:21:15.953]             c <- base::c
[16:21:15.953]             inherits <- base::inherits
[16:21:15.953]             invokeRestart <- base::invokeRestart
[16:21:15.953]             length <- base::length
[16:21:15.953]             list <- base::list
[16:21:15.953]             seq.int <- base::seq.int
[16:21:15.953]             signalCondition <- base::signalCondition
[16:21:15.953]             sys.calls <- base::sys.calls
[16:21:15.953]             `[[` <- base::`[[`
[16:21:15.953]             `+` <- base::`+`
[16:21:15.953]             `<<-` <- base::`<<-`
[16:21:15.953]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:15.953]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:15.953]                   3L)]
[16:21:15.953]             }
[16:21:15.953]             function(cond) {
[16:21:15.953]                 is_error <- inherits(cond, "error")
[16:21:15.953]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:15.953]                   NULL)
[16:21:15.953]                 if (is_error) {
[16:21:15.953]                   sessionInformation <- function() {
[16:21:15.953]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:15.953]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:15.953]                       search = base::search(), system = base::Sys.info())
[16:21:15.953]                   }
[16:21:15.953]                   ...future.conditions[[length(...future.conditions) + 
[16:21:15.953]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:15.953]                     cond$call), session = sessionInformation(), 
[16:21:15.953]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:15.953]                   signalCondition(cond)
[16:21:15.953]                 }
[16:21:15.953]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:15.953]                 "immediateCondition"))) {
[16:21:15.953]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:15.953]                   ...future.conditions[[length(...future.conditions) + 
[16:21:15.953]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:15.953]                   if (TRUE && !signal) {
[16:21:15.953]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:15.953]                     {
[16:21:15.953]                       inherits <- base::inherits
[16:21:15.953]                       invokeRestart <- base::invokeRestart
[16:21:15.953]                       is.null <- base::is.null
[16:21:15.953]                       muffled <- FALSE
[16:21:15.953]                       if (inherits(cond, "message")) {
[16:21:15.953]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:15.953]                         if (muffled) 
[16:21:15.953]                           invokeRestart("muffleMessage")
[16:21:15.953]                       }
[16:21:15.953]                       else if (inherits(cond, "warning")) {
[16:21:15.953]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:15.953]                         if (muffled) 
[16:21:15.953]                           invokeRestart("muffleWarning")
[16:21:15.953]                       }
[16:21:15.953]                       else if (inherits(cond, "condition")) {
[16:21:15.953]                         if (!is.null(pattern)) {
[16:21:15.953]                           computeRestarts <- base::computeRestarts
[16:21:15.953]                           grepl <- base::grepl
[16:21:15.953]                           restarts <- computeRestarts(cond)
[16:21:15.953]                           for (restart in restarts) {
[16:21:15.953]                             name <- restart$name
[16:21:15.953]                             if (is.null(name)) 
[16:21:15.953]                               next
[16:21:15.953]                             if (!grepl(pattern, name)) 
[16:21:15.953]                               next
[16:21:15.953]                             invokeRestart(restart)
[16:21:15.953]                             muffled <- TRUE
[16:21:15.953]                             break
[16:21:15.953]                           }
[16:21:15.953]                         }
[16:21:15.953]                       }
[16:21:15.953]                       invisible(muffled)
[16:21:15.953]                     }
[16:21:15.953]                     muffleCondition(cond, pattern = "^muffle")
[16:21:15.953]                   }
[16:21:15.953]                 }
[16:21:15.953]                 else {
[16:21:15.953]                   if (TRUE) {
[16:21:15.953]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:15.953]                     {
[16:21:15.953]                       inherits <- base::inherits
[16:21:15.953]                       invokeRestart <- base::invokeRestart
[16:21:15.953]                       is.null <- base::is.null
[16:21:15.953]                       muffled <- FALSE
[16:21:15.953]                       if (inherits(cond, "message")) {
[16:21:15.953]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:15.953]                         if (muffled) 
[16:21:15.953]                           invokeRestart("muffleMessage")
[16:21:15.953]                       }
[16:21:15.953]                       else if (inherits(cond, "warning")) {
[16:21:15.953]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:15.953]                         if (muffled) 
[16:21:15.953]                           invokeRestart("muffleWarning")
[16:21:15.953]                       }
[16:21:15.953]                       else if (inherits(cond, "condition")) {
[16:21:15.953]                         if (!is.null(pattern)) {
[16:21:15.953]                           computeRestarts <- base::computeRestarts
[16:21:15.953]                           grepl <- base::grepl
[16:21:15.953]                           restarts <- computeRestarts(cond)
[16:21:15.953]                           for (restart in restarts) {
[16:21:15.953]                             name <- restart$name
[16:21:15.953]                             if (is.null(name)) 
[16:21:15.953]                               next
[16:21:15.953]                             if (!grepl(pattern, name)) 
[16:21:15.953]                               next
[16:21:15.953]                             invokeRestart(restart)
[16:21:15.953]                             muffled <- TRUE
[16:21:15.953]                             break
[16:21:15.953]                           }
[16:21:15.953]                         }
[16:21:15.953]                       }
[16:21:15.953]                       invisible(muffled)
[16:21:15.953]                     }
[16:21:15.953]                     muffleCondition(cond, pattern = "^muffle")
[16:21:15.953]                   }
[16:21:15.953]                 }
[16:21:15.953]             }
[16:21:15.953]         }))
[16:21:15.953]     }, error = function(ex) {
[16:21:15.953]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:15.953]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:15.953]                 ...future.rng), started = ...future.startTime, 
[16:21:15.953]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:15.953]             version = "1.8"), class = "FutureResult")
[16:21:15.953]     }, finally = {
[16:21:15.953]         if (!identical(...future.workdir, getwd())) 
[16:21:15.953]             setwd(...future.workdir)
[16:21:15.953]         {
[16:21:15.953]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:15.953]                 ...future.oldOptions$nwarnings <- NULL
[16:21:15.953]             }
[16:21:15.953]             base::options(...future.oldOptions)
[16:21:15.953]             if (.Platform$OS.type == "windows") {
[16:21:15.953]                 old_names <- names(...future.oldEnvVars)
[16:21:15.953]                 envs <- base::Sys.getenv()
[16:21:15.953]                 names <- names(envs)
[16:21:15.953]                 common <- intersect(names, old_names)
[16:21:15.953]                 added <- setdiff(names, old_names)
[16:21:15.953]                 removed <- setdiff(old_names, names)
[16:21:15.953]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:15.953]                   envs[common]]
[16:21:15.953]                 NAMES <- toupper(changed)
[16:21:15.953]                 args <- list()
[16:21:15.953]                 for (kk in seq_along(NAMES)) {
[16:21:15.953]                   name <- changed[[kk]]
[16:21:15.953]                   NAME <- NAMES[[kk]]
[16:21:15.953]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:15.953]                     next
[16:21:15.953]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:15.953]                 }
[16:21:15.953]                 NAMES <- toupper(added)
[16:21:15.953]                 for (kk in seq_along(NAMES)) {
[16:21:15.953]                   name <- added[[kk]]
[16:21:15.953]                   NAME <- NAMES[[kk]]
[16:21:15.953]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:15.953]                     next
[16:21:15.953]                   args[[name]] <- ""
[16:21:15.953]                 }
[16:21:15.953]                 NAMES <- toupper(removed)
[16:21:15.953]                 for (kk in seq_along(NAMES)) {
[16:21:15.953]                   name <- removed[[kk]]
[16:21:15.953]                   NAME <- NAMES[[kk]]
[16:21:15.953]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:15.953]                     next
[16:21:15.953]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:15.953]                 }
[16:21:15.953]                 if (length(args) > 0) 
[16:21:15.953]                   base::do.call(base::Sys.setenv, args = args)
[16:21:15.953]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:15.953]             }
[16:21:15.953]             else {
[16:21:15.953]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:15.953]             }
[16:21:15.953]             {
[16:21:15.953]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:15.953]                   0L) {
[16:21:15.953]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:15.953]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:15.953]                   base::options(opts)
[16:21:15.953]                 }
[16:21:15.953]                 {
[16:21:15.953]                   {
[16:21:15.953]                     NULL
[16:21:15.953]                     RNGkind("Mersenne-Twister")
[16:21:15.953]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:21:15.953]                       inherits = FALSE)
[16:21:15.953]                   }
[16:21:15.953]                   options(future.plan = NULL)
[16:21:15.953]                   if (is.na(NA_character_)) 
[16:21:15.953]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:15.953]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:15.953]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:15.953]                     .init = FALSE)
[16:21:15.953]                 }
[16:21:15.953]             }
[16:21:15.953]         }
[16:21:15.953]     })
[16:21:15.953]     if (TRUE) {
[16:21:15.953]         base::sink(type = "output", split = FALSE)
[16:21:15.953]         if (TRUE) {
[16:21:15.953]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:15.953]         }
[16:21:15.953]         else {
[16:21:15.953]             ...future.result["stdout"] <- base::list(NULL)
[16:21:15.953]         }
[16:21:15.953]         base::close(...future.stdout)
[16:21:15.953]         ...future.stdout <- NULL
[16:21:15.953]     }
[16:21:15.953]     ...future.result$conditions <- ...future.conditions
[16:21:15.953]     ...future.result$finished <- base::Sys.time()
[16:21:15.953]     ...future.result
[16:21:15.953] }
[16:21:15.955] plan(): Setting new future strategy stack:
[16:21:15.955] List of future strategies:
[16:21:15.955] 1. sequential:
[16:21:15.955]    - args: function (..., envir = parent.frame())
[16:21:15.955]    - tweaked: FALSE
[16:21:15.955]    - call: NULL
[16:21:15.956] plan(): nbrOfWorkers() = 1
[16:21:15.956] plan(): Setting new future strategy stack:
[16:21:15.957] List of future strategies:
[16:21:15.957] 1. multicore:
[16:21:15.957]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:21:15.957]    - tweaked: FALSE
[16:21:15.957]    - call: plan(multicore)
[16:21:15.960] plan(): nbrOfWorkers() = 1
[16:21:15.961] SequentialFuture started (and completed)
 - Creating multicore future #3 ...
[16:21:15.964] getGlobalsAndPackages() ...
[16:21:15.964] Not searching for globals
[16:21:15.965] - globals: [0] <none>
[16:21:15.965] getGlobalsAndPackages() ... DONE
[16:21:15.965] Packages needed by the future expression (n = 0): <none>
[16:21:15.965] Packages needed by future strategies (n = 0): <none>
[16:21:15.966] {
[16:21:15.966]     {
[16:21:15.966]         {
[16:21:15.966]             ...future.startTime <- base::Sys.time()
[16:21:15.966]             {
[16:21:15.966]                 {
[16:21:15.966]                   {
[16:21:15.966]                     base::local({
[16:21:15.966]                       has_future <- base::requireNamespace("future", 
[16:21:15.966]                         quietly = TRUE)
[16:21:15.966]                       if (has_future) {
[16:21:15.966]                         ns <- base::getNamespace("future")
[16:21:15.966]                         version <- ns[[".package"]][["version"]]
[16:21:15.966]                         if (is.null(version)) 
[16:21:15.966]                           version <- utils::packageVersion("future")
[16:21:15.966]                       }
[16:21:15.966]                       else {
[16:21:15.966]                         version <- NULL
[16:21:15.966]                       }
[16:21:15.966]                       if (!has_future || version < "1.8.0") {
[16:21:15.966]                         info <- base::c(r_version = base::gsub("R version ", 
[16:21:15.966]                           "", base::R.version$version.string), 
[16:21:15.966]                           platform = base::sprintf("%s (%s-bit)", 
[16:21:15.966]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:15.966]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:15.966]                             "release", "version")], collapse = " "), 
[16:21:15.966]                           hostname = base::Sys.info()[["nodename"]])
[16:21:15.966]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:21:15.966]                           info)
[16:21:15.966]                         info <- base::paste(info, collapse = "; ")
[16:21:15.966]                         if (!has_future) {
[16:21:15.966]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:15.966]                             info)
[16:21:15.966]                         }
[16:21:15.966]                         else {
[16:21:15.966]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:15.966]                             info, version)
[16:21:15.966]                         }
[16:21:15.966]                         base::stop(msg)
[16:21:15.966]                       }
[16:21:15.966]                     })
[16:21:15.966]                   }
[16:21:15.966]                   ...future.strategy.old <- future::plan("list")
[16:21:15.966]                   options(future.plan = NULL)
[16:21:15.966]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:15.966]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:15.966]                 }
[16:21:15.966]                 ...future.workdir <- getwd()
[16:21:15.966]             }
[16:21:15.966]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:15.966]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:15.966]         }
[16:21:15.966]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:15.966]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:15.966]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:15.966]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:15.966]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:15.966]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:15.966]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:15.966]             base::names(...future.oldOptions))
[16:21:15.966]     }
[16:21:15.966]     if (FALSE) {
[16:21:15.966]     }
[16:21:15.966]     else {
[16:21:15.966]         if (TRUE) {
[16:21:15.966]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:15.966]                 open = "w")
[16:21:15.966]         }
[16:21:15.966]         else {
[16:21:15.966]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:15.966]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:15.966]         }
[16:21:15.966]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:15.966]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:15.966]             base::sink(type = "output", split = FALSE)
[16:21:15.966]             base::close(...future.stdout)
[16:21:15.966]         }, add = TRUE)
[16:21:15.966]     }
[16:21:15.966]     ...future.frame <- base::sys.nframe()
[16:21:15.966]     ...future.conditions <- base::list()
[16:21:15.966]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:15.966]     if (FALSE) {
[16:21:15.966]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:15.966]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:15.966]     }
[16:21:15.966]     ...future.result <- base::tryCatch({
[16:21:15.966]         base::withCallingHandlers({
[16:21:15.966]             ...future.value <- base::withVisible(base::local({
[16:21:15.966]                 ii
[16:21:15.966]             }))
[16:21:15.966]             future::FutureResult(value = ...future.value$value, 
[16:21:15.966]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:15.966]                   ...future.rng), globalenv = if (FALSE) 
[16:21:15.966]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:15.966]                     ...future.globalenv.names))
[16:21:15.966]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:15.966]         }, condition = base::local({
[16:21:15.966]             c <- base::c
[16:21:15.966]             inherits <- base::inherits
[16:21:15.966]             invokeRestart <- base::invokeRestart
[16:21:15.966]             length <- base::length
[16:21:15.966]             list <- base::list
[16:21:15.966]             seq.int <- base::seq.int
[16:21:15.966]             signalCondition <- base::signalCondition
[16:21:15.966]             sys.calls <- base::sys.calls
[16:21:15.966]             `[[` <- base::`[[`
[16:21:15.966]             `+` <- base::`+`
[16:21:15.966]             `<<-` <- base::`<<-`
[16:21:15.966]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:15.966]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:15.966]                   3L)]
[16:21:15.966]             }
[16:21:15.966]             function(cond) {
[16:21:15.966]                 is_error <- inherits(cond, "error")
[16:21:15.966]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:15.966]                   NULL)
[16:21:15.966]                 if (is_error) {
[16:21:15.966]                   sessionInformation <- function() {
[16:21:15.966]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:15.966]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:15.966]                       search = base::search(), system = base::Sys.info())
[16:21:15.966]                   }
[16:21:15.966]                   ...future.conditions[[length(...future.conditions) + 
[16:21:15.966]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:15.966]                     cond$call), session = sessionInformation(), 
[16:21:15.966]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:15.966]                   signalCondition(cond)
[16:21:15.966]                 }
[16:21:15.966]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:15.966]                 "immediateCondition"))) {
[16:21:15.966]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:15.966]                   ...future.conditions[[length(...future.conditions) + 
[16:21:15.966]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:15.966]                   if (TRUE && !signal) {
[16:21:15.966]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:15.966]                     {
[16:21:15.966]                       inherits <- base::inherits
[16:21:15.966]                       invokeRestart <- base::invokeRestart
[16:21:15.966]                       is.null <- base::is.null
[16:21:15.966]                       muffled <- FALSE
[16:21:15.966]                       if (inherits(cond, "message")) {
[16:21:15.966]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:15.966]                         if (muffled) 
[16:21:15.966]                           invokeRestart("muffleMessage")
[16:21:15.966]                       }
[16:21:15.966]                       else if (inherits(cond, "warning")) {
[16:21:15.966]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:15.966]                         if (muffled) 
[16:21:15.966]                           invokeRestart("muffleWarning")
[16:21:15.966]                       }
[16:21:15.966]                       else if (inherits(cond, "condition")) {
[16:21:15.966]                         if (!is.null(pattern)) {
[16:21:15.966]                           computeRestarts <- base::computeRestarts
[16:21:15.966]                           grepl <- base::grepl
[16:21:15.966]                           restarts <- computeRestarts(cond)
[16:21:15.966]                           for (restart in restarts) {
[16:21:15.966]                             name <- restart$name
[16:21:15.966]                             if (is.null(name)) 
[16:21:15.966]                               next
[16:21:15.966]                             if (!grepl(pattern, name)) 
[16:21:15.966]                               next
[16:21:15.966]                             invokeRestart(restart)
[16:21:15.966]                             muffled <- TRUE
[16:21:15.966]                             break
[16:21:15.966]                           }
[16:21:15.966]                         }
[16:21:15.966]                       }
[16:21:15.966]                       invisible(muffled)
[16:21:15.966]                     }
[16:21:15.966]                     muffleCondition(cond, pattern = "^muffle")
[16:21:15.966]                   }
[16:21:15.966]                 }
[16:21:15.966]                 else {
[16:21:15.966]                   if (TRUE) {
[16:21:15.966]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:15.966]                     {
[16:21:15.966]                       inherits <- base::inherits
[16:21:15.966]                       invokeRestart <- base::invokeRestart
[16:21:15.966]                       is.null <- base::is.null
[16:21:15.966]                       muffled <- FALSE
[16:21:15.966]                       if (inherits(cond, "message")) {
[16:21:15.966]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:15.966]                         if (muffled) 
[16:21:15.966]                           invokeRestart("muffleMessage")
[16:21:15.966]                       }
[16:21:15.966]                       else if (inherits(cond, "warning")) {
[16:21:15.966]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:15.966]                         if (muffled) 
[16:21:15.966]                           invokeRestart("muffleWarning")
[16:21:15.966]                       }
[16:21:15.966]                       else if (inherits(cond, "condition")) {
[16:21:15.966]                         if (!is.null(pattern)) {
[16:21:15.966]                           computeRestarts <- base::computeRestarts
[16:21:15.966]                           grepl <- base::grepl
[16:21:15.966]                           restarts <- computeRestarts(cond)
[16:21:15.966]                           for (restart in restarts) {
[16:21:15.966]                             name <- restart$name
[16:21:15.966]                             if (is.null(name)) 
[16:21:15.966]                               next
[16:21:15.966]                             if (!grepl(pattern, name)) 
[16:21:15.966]                               next
[16:21:15.966]                             invokeRestart(restart)
[16:21:15.966]                             muffled <- TRUE
[16:21:15.966]                             break
[16:21:15.966]                           }
[16:21:15.966]                         }
[16:21:15.966]                       }
[16:21:15.966]                       invisible(muffled)
[16:21:15.966]                     }
[16:21:15.966]                     muffleCondition(cond, pattern = "^muffle")
[16:21:15.966]                   }
[16:21:15.966]                 }
[16:21:15.966]             }
[16:21:15.966]         }))
[16:21:15.966]     }, error = function(ex) {
[16:21:15.966]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:15.966]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:15.966]                 ...future.rng), started = ...future.startTime, 
[16:21:15.966]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:15.966]             version = "1.8"), class = "FutureResult")
[16:21:15.966]     }, finally = {
[16:21:15.966]         if (!identical(...future.workdir, getwd())) 
[16:21:15.966]             setwd(...future.workdir)
[16:21:15.966]         {
[16:21:15.966]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:15.966]                 ...future.oldOptions$nwarnings <- NULL
[16:21:15.966]             }
[16:21:15.966]             base::options(...future.oldOptions)
[16:21:15.966]             if (.Platform$OS.type == "windows") {
[16:21:15.966]                 old_names <- names(...future.oldEnvVars)
[16:21:15.966]                 envs <- base::Sys.getenv()
[16:21:15.966]                 names <- names(envs)
[16:21:15.966]                 common <- intersect(names, old_names)
[16:21:15.966]                 added <- setdiff(names, old_names)
[16:21:15.966]                 removed <- setdiff(old_names, names)
[16:21:15.966]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:15.966]                   envs[common]]
[16:21:15.966]                 NAMES <- toupper(changed)
[16:21:15.966]                 args <- list()
[16:21:15.966]                 for (kk in seq_along(NAMES)) {
[16:21:15.966]                   name <- changed[[kk]]
[16:21:15.966]                   NAME <- NAMES[[kk]]
[16:21:15.966]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:15.966]                     next
[16:21:15.966]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:15.966]                 }
[16:21:15.966]                 NAMES <- toupper(added)
[16:21:15.966]                 for (kk in seq_along(NAMES)) {
[16:21:15.966]                   name <- added[[kk]]
[16:21:15.966]                   NAME <- NAMES[[kk]]
[16:21:15.966]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:15.966]                     next
[16:21:15.966]                   args[[name]] <- ""
[16:21:15.966]                 }
[16:21:15.966]                 NAMES <- toupper(removed)
[16:21:15.966]                 for (kk in seq_along(NAMES)) {
[16:21:15.966]                   name <- removed[[kk]]
[16:21:15.966]                   NAME <- NAMES[[kk]]
[16:21:15.966]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:15.966]                     next
[16:21:15.966]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:15.966]                 }
[16:21:15.966]                 if (length(args) > 0) 
[16:21:15.966]                   base::do.call(base::Sys.setenv, args = args)
[16:21:15.966]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:15.966]             }
[16:21:15.966]             else {
[16:21:15.966]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:15.966]             }
[16:21:15.966]             {
[16:21:15.966]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:15.966]                   0L) {
[16:21:15.966]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:15.966]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:15.966]                   base::options(opts)
[16:21:15.966]                 }
[16:21:15.966]                 {
[16:21:15.966]                   {
[16:21:15.966]                     NULL
[16:21:15.966]                     RNGkind("Mersenne-Twister")
[16:21:15.966]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:21:15.966]                       inherits = FALSE)
[16:21:15.966]                   }
[16:21:15.966]                   options(future.plan = NULL)
[16:21:15.966]                   if (is.na(NA_character_)) 
[16:21:15.966]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:15.966]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:15.966]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:15.966]                     .init = FALSE)
[16:21:15.966]                 }
[16:21:15.966]             }
[16:21:15.966]         }
[16:21:15.966]     })
[16:21:15.966]     if (TRUE) {
[16:21:15.966]         base::sink(type = "output", split = FALSE)
[16:21:15.966]         if (TRUE) {
[16:21:15.966]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:15.966]         }
[16:21:15.966]         else {
[16:21:15.966]             ...future.result["stdout"] <- base::list(NULL)
[16:21:15.966]         }
[16:21:15.966]         base::close(...future.stdout)
[16:21:15.966]         ...future.stdout <- NULL
[16:21:15.966]     }
[16:21:15.966]     ...future.result$conditions <- ...future.conditions
[16:21:15.966]     ...future.result$finished <- base::Sys.time()
[16:21:15.966]     ...future.result
[16:21:15.966] }
[16:21:15.967] plan(): Setting new future strategy stack:
[16:21:15.967] List of future strategies:
[16:21:15.967] 1. sequential:
[16:21:15.967]    - args: function (..., envir = parent.frame())
[16:21:15.967]    - tweaked: FALSE
[16:21:15.967]    - call: NULL
[16:21:15.968] plan(): nbrOfWorkers() = 1
[16:21:15.969] plan(): Setting new future strategy stack:
[16:21:15.969] List of future strategies:
[16:21:15.969] 1. multicore:
[16:21:15.969]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:21:15.969]    - tweaked: FALSE
[16:21:15.969]    - call: plan(multicore)
[16:21:15.972] plan(): nbrOfWorkers() = 1
[16:21:15.972] SequentialFuture started (and completed)
 - Creating multicore future #4 ...
[16:21:15.976] getGlobalsAndPackages() ...
[16:21:15.976] Not searching for globals
[16:21:15.976] - globals: [0] <none>
[16:21:15.976] getGlobalsAndPackages() ... DONE
[16:21:15.976] Packages needed by the future expression (n = 0): <none>
[16:21:15.977] Packages needed by future strategies (n = 0): <none>
[16:21:15.977] {
[16:21:15.977]     {
[16:21:15.977]         {
[16:21:15.977]             ...future.startTime <- base::Sys.time()
[16:21:15.977]             {
[16:21:15.977]                 {
[16:21:15.977]                   {
[16:21:15.977]                     base::local({
[16:21:15.977]                       has_future <- base::requireNamespace("future", 
[16:21:15.977]                         quietly = TRUE)
[16:21:15.977]                       if (has_future) {
[16:21:15.977]                         ns <- base::getNamespace("future")
[16:21:15.977]                         version <- ns[[".package"]][["version"]]
[16:21:15.977]                         if (is.null(version)) 
[16:21:15.977]                           version <- utils::packageVersion("future")
[16:21:15.977]                       }
[16:21:15.977]                       else {
[16:21:15.977]                         version <- NULL
[16:21:15.977]                       }
[16:21:15.977]                       if (!has_future || version < "1.8.0") {
[16:21:15.977]                         info <- base::c(r_version = base::gsub("R version ", 
[16:21:15.977]                           "", base::R.version$version.string), 
[16:21:15.977]                           platform = base::sprintf("%s (%s-bit)", 
[16:21:15.977]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:15.977]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:15.977]                             "release", "version")], collapse = " "), 
[16:21:15.977]                           hostname = base::Sys.info()[["nodename"]])
[16:21:15.977]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:21:15.977]                           info)
[16:21:15.977]                         info <- base::paste(info, collapse = "; ")
[16:21:15.977]                         if (!has_future) {
[16:21:15.977]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:15.977]                             info)
[16:21:15.977]                         }
[16:21:15.977]                         else {
[16:21:15.977]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:15.977]                             info, version)
[16:21:15.977]                         }
[16:21:15.977]                         base::stop(msg)
[16:21:15.977]                       }
[16:21:15.977]                     })
[16:21:15.977]                   }
[16:21:15.977]                   ...future.strategy.old <- future::plan("list")
[16:21:15.977]                   options(future.plan = NULL)
[16:21:15.977]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:15.977]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:15.977]                 }
[16:21:15.977]                 ...future.workdir <- getwd()
[16:21:15.977]             }
[16:21:15.977]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:15.977]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:15.977]         }
[16:21:15.977]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:15.977]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:15.977]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:15.977]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:15.977]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:15.977]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:15.977]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:15.977]             base::names(...future.oldOptions))
[16:21:15.977]     }
[16:21:15.977]     if (FALSE) {
[16:21:15.977]     }
[16:21:15.977]     else {
[16:21:15.977]         if (TRUE) {
[16:21:15.977]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:15.977]                 open = "w")
[16:21:15.977]         }
[16:21:15.977]         else {
[16:21:15.977]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:15.977]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:15.977]         }
[16:21:15.977]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:15.977]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:15.977]             base::sink(type = "output", split = FALSE)
[16:21:15.977]             base::close(...future.stdout)
[16:21:15.977]         }, add = TRUE)
[16:21:15.977]     }
[16:21:15.977]     ...future.frame <- base::sys.nframe()
[16:21:15.977]     ...future.conditions <- base::list()
[16:21:15.977]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:15.977]     if (FALSE) {
[16:21:15.977]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:15.977]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:15.977]     }
[16:21:15.977]     ...future.result <- base::tryCatch({
[16:21:15.977]         base::withCallingHandlers({
[16:21:15.977]             ...future.value <- base::withVisible(base::local({
[16:21:15.977]                 ii
[16:21:15.977]             }))
[16:21:15.977]             future::FutureResult(value = ...future.value$value, 
[16:21:15.977]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:15.977]                   ...future.rng), globalenv = if (FALSE) 
[16:21:15.977]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:15.977]                     ...future.globalenv.names))
[16:21:15.977]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:15.977]         }, condition = base::local({
[16:21:15.977]             c <- base::c
[16:21:15.977]             inherits <- base::inherits
[16:21:15.977]             invokeRestart <- base::invokeRestart
[16:21:15.977]             length <- base::length
[16:21:15.977]             list <- base::list
[16:21:15.977]             seq.int <- base::seq.int
[16:21:15.977]             signalCondition <- base::signalCondition
[16:21:15.977]             sys.calls <- base::sys.calls
[16:21:15.977]             `[[` <- base::`[[`
[16:21:15.977]             `+` <- base::`+`
[16:21:15.977]             `<<-` <- base::`<<-`
[16:21:15.977]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:15.977]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:15.977]                   3L)]
[16:21:15.977]             }
[16:21:15.977]             function(cond) {
[16:21:15.977]                 is_error <- inherits(cond, "error")
[16:21:15.977]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:15.977]                   NULL)
[16:21:15.977]                 if (is_error) {
[16:21:15.977]                   sessionInformation <- function() {
[16:21:15.977]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:15.977]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:15.977]                       search = base::search(), system = base::Sys.info())
[16:21:15.977]                   }
[16:21:15.977]                   ...future.conditions[[length(...future.conditions) + 
[16:21:15.977]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:15.977]                     cond$call), session = sessionInformation(), 
[16:21:15.977]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:15.977]                   signalCondition(cond)
[16:21:15.977]                 }
[16:21:15.977]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:15.977]                 "immediateCondition"))) {
[16:21:15.977]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:15.977]                   ...future.conditions[[length(...future.conditions) + 
[16:21:15.977]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:15.977]                   if (TRUE && !signal) {
[16:21:15.977]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:15.977]                     {
[16:21:15.977]                       inherits <- base::inherits
[16:21:15.977]                       invokeRestart <- base::invokeRestart
[16:21:15.977]                       is.null <- base::is.null
[16:21:15.977]                       muffled <- FALSE
[16:21:15.977]                       if (inherits(cond, "message")) {
[16:21:15.977]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:15.977]                         if (muffled) 
[16:21:15.977]                           invokeRestart("muffleMessage")
[16:21:15.977]                       }
[16:21:15.977]                       else if (inherits(cond, "warning")) {
[16:21:15.977]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:15.977]                         if (muffled) 
[16:21:15.977]                           invokeRestart("muffleWarning")
[16:21:15.977]                       }
[16:21:15.977]                       else if (inherits(cond, "condition")) {
[16:21:15.977]                         if (!is.null(pattern)) {
[16:21:15.977]                           computeRestarts <- base::computeRestarts
[16:21:15.977]                           grepl <- base::grepl
[16:21:15.977]                           restarts <- computeRestarts(cond)
[16:21:15.977]                           for (restart in restarts) {
[16:21:15.977]                             name <- restart$name
[16:21:15.977]                             if (is.null(name)) 
[16:21:15.977]                               next
[16:21:15.977]                             if (!grepl(pattern, name)) 
[16:21:15.977]                               next
[16:21:15.977]                             invokeRestart(restart)
[16:21:15.977]                             muffled <- TRUE
[16:21:15.977]                             break
[16:21:15.977]                           }
[16:21:15.977]                         }
[16:21:15.977]                       }
[16:21:15.977]                       invisible(muffled)
[16:21:15.977]                     }
[16:21:15.977]                     muffleCondition(cond, pattern = "^muffle")
[16:21:15.977]                   }
[16:21:15.977]                 }
[16:21:15.977]                 else {
[16:21:15.977]                   if (TRUE) {
[16:21:15.977]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:15.977]                     {
[16:21:15.977]                       inherits <- base::inherits
[16:21:15.977]                       invokeRestart <- base::invokeRestart
[16:21:15.977]                       is.null <- base::is.null
[16:21:15.977]                       muffled <- FALSE
[16:21:15.977]                       if (inherits(cond, "message")) {
[16:21:15.977]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:15.977]                         if (muffled) 
[16:21:15.977]                           invokeRestart("muffleMessage")
[16:21:15.977]                       }
[16:21:15.977]                       else if (inherits(cond, "warning")) {
[16:21:15.977]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:15.977]                         if (muffled) 
[16:21:15.977]                           invokeRestart("muffleWarning")
[16:21:15.977]                       }
[16:21:15.977]                       else if (inherits(cond, "condition")) {
[16:21:15.977]                         if (!is.null(pattern)) {
[16:21:15.977]                           computeRestarts <- base::computeRestarts
[16:21:15.977]                           grepl <- base::grepl
[16:21:15.977]                           restarts <- computeRestarts(cond)
[16:21:15.977]                           for (restart in restarts) {
[16:21:15.977]                             name <- restart$name
[16:21:15.977]                             if (is.null(name)) 
[16:21:15.977]                               next
[16:21:15.977]                             if (!grepl(pattern, name)) 
[16:21:15.977]                               next
[16:21:15.977]                             invokeRestart(restart)
[16:21:15.977]                             muffled <- TRUE
[16:21:15.977]                             break
[16:21:15.977]                           }
[16:21:15.977]                         }
[16:21:15.977]                       }
[16:21:15.977]                       invisible(muffled)
[16:21:15.977]                     }
[16:21:15.977]                     muffleCondition(cond, pattern = "^muffle")
[16:21:15.977]                   }
[16:21:15.977]                 }
[16:21:15.977]             }
[16:21:15.977]         }))
[16:21:15.977]     }, error = function(ex) {
[16:21:15.977]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:15.977]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:15.977]                 ...future.rng), started = ...future.startTime, 
[16:21:15.977]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:15.977]             version = "1.8"), class = "FutureResult")
[16:21:15.977]     }, finally = {
[16:21:15.977]         if (!identical(...future.workdir, getwd())) 
[16:21:15.977]             setwd(...future.workdir)
[16:21:15.977]         {
[16:21:15.977]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:15.977]                 ...future.oldOptions$nwarnings <- NULL
[16:21:15.977]             }
[16:21:15.977]             base::options(...future.oldOptions)
[16:21:15.977]             if (.Platform$OS.type == "windows") {
[16:21:15.977]                 old_names <- names(...future.oldEnvVars)
[16:21:15.977]                 envs <- base::Sys.getenv()
[16:21:15.977]                 names <- names(envs)
[16:21:15.977]                 common <- intersect(names, old_names)
[16:21:15.977]                 added <- setdiff(names, old_names)
[16:21:15.977]                 removed <- setdiff(old_names, names)
[16:21:15.977]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:15.977]                   envs[common]]
[16:21:15.977]                 NAMES <- toupper(changed)
[16:21:15.977]                 args <- list()
[16:21:15.977]                 for (kk in seq_along(NAMES)) {
[16:21:15.977]                   name <- changed[[kk]]
[16:21:15.977]                   NAME <- NAMES[[kk]]
[16:21:15.977]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:15.977]                     next
[16:21:15.977]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:15.977]                 }
[16:21:15.977]                 NAMES <- toupper(added)
[16:21:15.977]                 for (kk in seq_along(NAMES)) {
[16:21:15.977]                   name <- added[[kk]]
[16:21:15.977]                   NAME <- NAMES[[kk]]
[16:21:15.977]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:15.977]                     next
[16:21:15.977]                   args[[name]] <- ""
[16:21:15.977]                 }
[16:21:15.977]                 NAMES <- toupper(removed)
[16:21:15.977]                 for (kk in seq_along(NAMES)) {
[16:21:15.977]                   name <- removed[[kk]]
[16:21:15.977]                   NAME <- NAMES[[kk]]
[16:21:15.977]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:15.977]                     next
[16:21:15.977]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:15.977]                 }
[16:21:15.977]                 if (length(args) > 0) 
[16:21:15.977]                   base::do.call(base::Sys.setenv, args = args)
[16:21:15.977]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:15.977]             }
[16:21:15.977]             else {
[16:21:15.977]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:15.977]             }
[16:21:15.977]             {
[16:21:15.977]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:15.977]                   0L) {
[16:21:15.977]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:15.977]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:15.977]                   base::options(opts)
[16:21:15.977]                 }
[16:21:15.977]                 {
[16:21:15.977]                   {
[16:21:15.977]                     NULL
[16:21:15.977]                     RNGkind("Mersenne-Twister")
[16:21:15.977]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:21:15.977]                       inherits = FALSE)
[16:21:15.977]                   }
[16:21:15.977]                   options(future.plan = NULL)
[16:21:15.977]                   if (is.na(NA_character_)) 
[16:21:15.977]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:15.977]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:15.977]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:15.977]                     .init = FALSE)
[16:21:15.977]                 }
[16:21:15.977]             }
[16:21:15.977]         }
[16:21:15.977]     })
[16:21:15.977]     if (TRUE) {
[16:21:15.977]         base::sink(type = "output", split = FALSE)
[16:21:15.977]         if (TRUE) {
[16:21:15.977]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:15.977]         }
[16:21:15.977]         else {
[16:21:15.977]             ...future.result["stdout"] <- base::list(NULL)
[16:21:15.977]         }
[16:21:15.977]         base::close(...future.stdout)
[16:21:15.977]         ...future.stdout <- NULL
[16:21:15.977]     }
[16:21:15.977]     ...future.result$conditions <- ...future.conditions
[16:21:15.977]     ...future.result$finished <- base::Sys.time()
[16:21:15.977]     ...future.result
[16:21:15.977] }
[16:21:15.979] plan(): Setting new future strategy stack:
[16:21:15.979] List of future strategies:
[16:21:15.979] 1. sequential:
[16:21:15.979]    - args: function (..., envir = parent.frame())
[16:21:15.979]    - tweaked: FALSE
[16:21:15.979]    - call: NULL
[16:21:15.979] plan(): nbrOfWorkers() = 1
[16:21:15.980] plan(): Setting new future strategy stack:
[16:21:15.980] List of future strategies:
[16:21:15.980] 1. multicore:
[16:21:15.980]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:21:15.980]    - tweaked: FALSE
[16:21:15.980]    - call: plan(multicore)
[16:21:15.984] plan(): nbrOfWorkers() = 1
[16:21:15.984] SequentialFuture started (and completed)
 - Resolving 4 multicore futures
*** multicore(..., globals = FALSE) and errors
[16:21:15.988] getGlobalsAndPackages() ...
[16:21:15.988] Not searching for globals
[16:21:15.988] - globals: [0] <none>
[16:21:15.988] getGlobalsAndPackages() ... DONE
[16:21:15.988] Packages needed by the future expression (n = 0): <none>
[16:21:15.989] Packages needed by future strategies (n = 0): <none>
[16:21:15.989] {
[16:21:15.989]     {
[16:21:15.989]         {
[16:21:15.989]             ...future.startTime <- base::Sys.time()
[16:21:15.989]             {
[16:21:15.989]                 {
[16:21:15.989]                   {
[16:21:15.989]                     base::local({
[16:21:15.989]                       has_future <- base::requireNamespace("future", 
[16:21:15.989]                         quietly = TRUE)
[16:21:15.989]                       if (has_future) {
[16:21:15.989]                         ns <- base::getNamespace("future")
[16:21:15.989]                         version <- ns[[".package"]][["version"]]
[16:21:15.989]                         if (is.null(version)) 
[16:21:15.989]                           version <- utils::packageVersion("future")
[16:21:15.989]                       }
[16:21:15.989]                       else {
[16:21:15.989]                         version <- NULL
[16:21:15.989]                       }
[16:21:15.989]                       if (!has_future || version < "1.8.0") {
[16:21:15.989]                         info <- base::c(r_version = base::gsub("R version ", 
[16:21:15.989]                           "", base::R.version$version.string), 
[16:21:15.989]                           platform = base::sprintf("%s (%s-bit)", 
[16:21:15.989]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:15.989]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:15.989]                             "release", "version")], collapse = " "), 
[16:21:15.989]                           hostname = base::Sys.info()[["nodename"]])
[16:21:15.989]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:21:15.989]                           info)
[16:21:15.989]                         info <- base::paste(info, collapse = "; ")
[16:21:15.989]                         if (!has_future) {
[16:21:15.989]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:15.989]                             info)
[16:21:15.989]                         }
[16:21:15.989]                         else {
[16:21:15.989]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:15.989]                             info, version)
[16:21:15.989]                         }
[16:21:15.989]                         base::stop(msg)
[16:21:15.989]                       }
[16:21:15.989]                     })
[16:21:15.989]                   }
[16:21:15.989]                   ...future.strategy.old <- future::plan("list")
[16:21:15.989]                   options(future.plan = NULL)
[16:21:15.989]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:15.989]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:15.989]                 }
[16:21:15.989]                 ...future.workdir <- getwd()
[16:21:15.989]             }
[16:21:15.989]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:15.989]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:15.989]         }
[16:21:15.989]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:15.989]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:15.989]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:15.989]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:15.989]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:15.989]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:15.989]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:15.989]             base::names(...future.oldOptions))
[16:21:15.989]     }
[16:21:15.989]     if (FALSE) {
[16:21:15.989]     }
[16:21:15.989]     else {
[16:21:15.989]         if (TRUE) {
[16:21:15.989]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:15.989]                 open = "w")
[16:21:15.989]         }
[16:21:15.989]         else {
[16:21:15.989]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:15.989]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:15.989]         }
[16:21:15.989]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:15.989]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:15.989]             base::sink(type = "output", split = FALSE)
[16:21:15.989]             base::close(...future.stdout)
[16:21:15.989]         }, add = TRUE)
[16:21:15.989]     }
[16:21:15.989]     ...future.frame <- base::sys.nframe()
[16:21:15.989]     ...future.conditions <- base::list()
[16:21:15.989]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:15.989]     if (FALSE) {
[16:21:15.989]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:15.989]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:15.989]     }
[16:21:15.989]     ...future.result <- base::tryCatch({
[16:21:15.989]         base::withCallingHandlers({
[16:21:15.989]             ...future.value <- base::withVisible(base::local({
[16:21:15.989]                 stop("Whoops!")
[16:21:15.989]                 1
[16:21:15.989]             }))
[16:21:15.989]             future::FutureResult(value = ...future.value$value, 
[16:21:15.989]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:15.989]                   ...future.rng), globalenv = if (FALSE) 
[16:21:15.989]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:15.989]                     ...future.globalenv.names))
[16:21:15.989]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:15.989]         }, condition = base::local({
[16:21:15.989]             c <- base::c
[16:21:15.989]             inherits <- base::inherits
[16:21:15.989]             invokeRestart <- base::invokeRestart
[16:21:15.989]             length <- base::length
[16:21:15.989]             list <- base::list
[16:21:15.989]             seq.int <- base::seq.int
[16:21:15.989]             signalCondition <- base::signalCondition
[16:21:15.989]             sys.calls <- base::sys.calls
[16:21:15.989]             `[[` <- base::`[[`
[16:21:15.989]             `+` <- base::`+`
[16:21:15.989]             `<<-` <- base::`<<-`
[16:21:15.989]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:15.989]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:15.989]                   3L)]
[16:21:15.989]             }
[16:21:15.989]             function(cond) {
[16:21:15.989]                 is_error <- inherits(cond, "error")
[16:21:15.989]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:15.989]                   NULL)
[16:21:15.989]                 if (is_error) {
[16:21:15.989]                   sessionInformation <- function() {
[16:21:15.989]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:15.989]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:15.989]                       search = base::search(), system = base::Sys.info())
[16:21:15.989]                   }
[16:21:15.989]                   ...future.conditions[[length(...future.conditions) + 
[16:21:15.989]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:15.989]                     cond$call), session = sessionInformation(), 
[16:21:15.989]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:15.989]                   signalCondition(cond)
[16:21:15.989]                 }
[16:21:15.989]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:15.989]                 "immediateCondition"))) {
[16:21:15.989]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:15.989]                   ...future.conditions[[length(...future.conditions) + 
[16:21:15.989]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:15.989]                   if (TRUE && !signal) {
[16:21:15.989]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:15.989]                     {
[16:21:15.989]                       inherits <- base::inherits
[16:21:15.989]                       invokeRestart <- base::invokeRestart
[16:21:15.989]                       is.null <- base::is.null
[16:21:15.989]                       muffled <- FALSE
[16:21:15.989]                       if (inherits(cond, "message")) {
[16:21:15.989]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:15.989]                         if (muffled) 
[16:21:15.989]                           invokeRestart("muffleMessage")
[16:21:15.989]                       }
[16:21:15.989]                       else if (inherits(cond, "warning")) {
[16:21:15.989]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:15.989]                         if (muffled) 
[16:21:15.989]                           invokeRestart("muffleWarning")
[16:21:15.989]                       }
[16:21:15.989]                       else if (inherits(cond, "condition")) {
[16:21:15.989]                         if (!is.null(pattern)) {
[16:21:15.989]                           computeRestarts <- base::computeRestarts
[16:21:15.989]                           grepl <- base::grepl
[16:21:15.989]                           restarts <- computeRestarts(cond)
[16:21:15.989]                           for (restart in restarts) {
[16:21:15.989]                             name <- restart$name
[16:21:15.989]                             if (is.null(name)) 
[16:21:15.989]                               next
[16:21:15.989]                             if (!grepl(pattern, name)) 
[16:21:15.989]                               next
[16:21:15.989]                             invokeRestart(restart)
[16:21:15.989]                             muffled <- TRUE
[16:21:15.989]                             break
[16:21:15.989]                           }
[16:21:15.989]                         }
[16:21:15.989]                       }
[16:21:15.989]                       invisible(muffled)
[16:21:15.989]                     }
[16:21:15.989]                     muffleCondition(cond, pattern = "^muffle")
[16:21:15.989]                   }
[16:21:15.989]                 }
[16:21:15.989]                 else {
[16:21:15.989]                   if (TRUE) {
[16:21:15.989]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:15.989]                     {
[16:21:15.989]                       inherits <- base::inherits
[16:21:15.989]                       invokeRestart <- base::invokeRestart
[16:21:15.989]                       is.null <- base::is.null
[16:21:15.989]                       muffled <- FALSE
[16:21:15.989]                       if (inherits(cond, "message")) {
[16:21:15.989]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:15.989]                         if (muffled) 
[16:21:15.989]                           invokeRestart("muffleMessage")
[16:21:15.989]                       }
[16:21:15.989]                       else if (inherits(cond, "warning")) {
[16:21:15.989]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:15.989]                         if (muffled) 
[16:21:15.989]                           invokeRestart("muffleWarning")
[16:21:15.989]                       }
[16:21:15.989]                       else if (inherits(cond, "condition")) {
[16:21:15.989]                         if (!is.null(pattern)) {
[16:21:15.989]                           computeRestarts <- base::computeRestarts
[16:21:15.989]                           grepl <- base::grepl
[16:21:15.989]                           restarts <- computeRestarts(cond)
[16:21:15.989]                           for (restart in restarts) {
[16:21:15.989]                             name <- restart$name
[16:21:15.989]                             if (is.null(name)) 
[16:21:15.989]                               next
[16:21:15.989]                             if (!grepl(pattern, name)) 
[16:21:15.989]                               next
[16:21:15.989]                             invokeRestart(restart)
[16:21:15.989]                             muffled <- TRUE
[16:21:15.989]                             break
[16:21:15.989]                           }
[16:21:15.989]                         }
[16:21:15.989]                       }
[16:21:15.989]                       invisible(muffled)
[16:21:15.989]                     }
[16:21:15.989]                     muffleCondition(cond, pattern = "^muffle")
[16:21:15.989]                   }
[16:21:15.989]                 }
[16:21:15.989]             }
[16:21:15.989]         }))
[16:21:15.989]     }, error = function(ex) {
[16:21:15.989]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:15.989]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:15.989]                 ...future.rng), started = ...future.startTime, 
[16:21:15.989]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:15.989]             version = "1.8"), class = "FutureResult")
[16:21:15.989]     }, finally = {
[16:21:15.989]         if (!identical(...future.workdir, getwd())) 
[16:21:15.989]             setwd(...future.workdir)
[16:21:15.989]         {
[16:21:15.989]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:15.989]                 ...future.oldOptions$nwarnings <- NULL
[16:21:15.989]             }
[16:21:15.989]             base::options(...future.oldOptions)
[16:21:15.989]             if (.Platform$OS.type == "windows") {
[16:21:15.989]                 old_names <- names(...future.oldEnvVars)
[16:21:15.989]                 envs <- base::Sys.getenv()
[16:21:15.989]                 names <- names(envs)
[16:21:15.989]                 common <- intersect(names, old_names)
[16:21:15.989]                 added <- setdiff(names, old_names)
[16:21:15.989]                 removed <- setdiff(old_names, names)
[16:21:15.989]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:15.989]                   envs[common]]
[16:21:15.989]                 NAMES <- toupper(changed)
[16:21:15.989]                 args <- list()
[16:21:15.989]                 for (kk in seq_along(NAMES)) {
[16:21:15.989]                   name <- changed[[kk]]
[16:21:15.989]                   NAME <- NAMES[[kk]]
[16:21:15.989]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:15.989]                     next
[16:21:15.989]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:15.989]                 }
[16:21:15.989]                 NAMES <- toupper(added)
[16:21:15.989]                 for (kk in seq_along(NAMES)) {
[16:21:15.989]                   name <- added[[kk]]
[16:21:15.989]                   NAME <- NAMES[[kk]]
[16:21:15.989]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:15.989]                     next
[16:21:15.989]                   args[[name]] <- ""
[16:21:15.989]                 }
[16:21:15.989]                 NAMES <- toupper(removed)
[16:21:15.989]                 for (kk in seq_along(NAMES)) {
[16:21:15.989]                   name <- removed[[kk]]
[16:21:15.989]                   NAME <- NAMES[[kk]]
[16:21:15.989]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:15.989]                     next
[16:21:15.989]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:15.989]                 }
[16:21:15.989]                 if (length(args) > 0) 
[16:21:15.989]                   base::do.call(base::Sys.setenv, args = args)
[16:21:15.989]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:15.989]             }
[16:21:15.989]             else {
[16:21:15.989]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:15.989]             }
[16:21:15.989]             {
[16:21:15.989]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:15.989]                   0L) {
[16:21:15.989]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:15.989]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:15.989]                   base::options(opts)
[16:21:15.989]                 }
[16:21:15.989]                 {
[16:21:15.989]                   {
[16:21:15.989]                     NULL
[16:21:15.989]                     RNGkind("Mersenne-Twister")
[16:21:15.989]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:21:15.989]                       inherits = FALSE)
[16:21:15.989]                   }
[16:21:15.989]                   options(future.plan = NULL)
[16:21:15.989]                   if (is.na(NA_character_)) 
[16:21:15.989]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:15.989]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:15.989]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:15.989]                     .init = FALSE)
[16:21:15.989]                 }
[16:21:15.989]             }
[16:21:15.989]         }
[16:21:15.989]     })
[16:21:15.989]     if (TRUE) {
[16:21:15.989]         base::sink(type = "output", split = FALSE)
[16:21:15.989]         if (TRUE) {
[16:21:15.989]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:15.989]         }
[16:21:15.989]         else {
[16:21:15.989]             ...future.result["stdout"] <- base::list(NULL)
[16:21:15.989]         }
[16:21:15.989]         base::close(...future.stdout)
[16:21:15.989]         ...future.stdout <- NULL
[16:21:15.989]     }
[16:21:15.989]     ...future.result$conditions <- ...future.conditions
[16:21:15.989]     ...future.result$finished <- base::Sys.time()
[16:21:15.989]     ...future.result
[16:21:15.989] }
[16:21:15.991] plan(): Setting new future strategy stack:
[16:21:15.991] List of future strategies:
[16:21:15.991] 1. sequential:
[16:21:15.991]    - args: function (..., envir = parent.frame())
[16:21:15.991]    - tweaked: FALSE
[16:21:15.991]    - call: NULL
[16:21:15.991] plan(): nbrOfWorkers() = 1
[16:21:15.992] plan(): Setting new future strategy stack:
[16:21:15.992] List of future strategies:
[16:21:15.992] 1. multicore:
[16:21:15.992]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:21:15.992]    - tweaked: FALSE
[16:21:15.992]    - call: plan(multicore)
[16:21:15.996] plan(): nbrOfWorkers() = 1
[16:21:15.996] SequentialFuture started (and completed)
[16:21:15.996] signalConditions() ...
[16:21:15.996]  - include = ‘immediateCondition’
[16:21:15.996]  - exclude = 
[16:21:15.996]  - resignal = FALSE
[16:21:15.996]  - Number of conditions: 1
[16:21:15.997] signalConditions() ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    stop("Whoops!")
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 0 bytes of class ‘NULL’
Conditions captured: [n=1] ‘simpleError’
Early signaling: FALSE
Owner process: 341000aa-40a0-ae89-3f55-e211e7e2f207
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:21:15.997] signalConditions() ...
[16:21:15.997]  - include = ‘immediateCondition’
[16:21:15.997]  - exclude = 
[16:21:15.997]  - resignal = FALSE
[16:21:15.997]  - Number of conditions: 1
[16:21:15.998] signalConditions() ... done
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[16:21:15.998] signalConditions() ...
[16:21:15.998]  - include = ‘immediateCondition’
[16:21:15.998]  - exclude = 
[16:21:15.998]  - resignal = FALSE
[16:21:15.998]  - Number of conditions: 1
[16:21:15.998] signalConditions() ... done
[16:21:15.998] Future state: ‘finished’
[16:21:15.999] signalConditions() ...
[16:21:15.999]  - include = ‘condition’
[16:21:15.999]  - exclude = ‘immediateCondition’
[16:21:15.999]  - resignal = TRUE
[16:21:15.999]  - Number of conditions: 1
[16:21:15.999]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[16:21:15.999] signalConditions() ... done
[1] "Error in eval(quote({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[16:21:16.000] signalConditions() ...
[16:21:16.000]  - include = ‘immediateCondition’
[16:21:16.000]  - exclude = 
[16:21:16.000]  - resignal = FALSE
[16:21:16.000]  - Number of conditions: 1
[16:21:16.000] signalConditions() ... done
[16:21:16.000] Future state: ‘finished’
[16:21:16.000] signalConditions() ...
[16:21:16.000]  - include = ‘condition’
[16:21:16.000]  - exclude = ‘immediateCondition’
[16:21:16.001]  - resignal = TRUE
[16:21:16.001]  - Number of conditions: 1
[16:21:16.001]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[16:21:16.001] signalConditions() ... done
[1] "Error in eval(quote({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[16:21:16.004] getGlobalsAndPackages() ...
[16:21:16.004] Searching for globals...
[16:21:16.014] - globals found: [5] ‘{’, ‘stop’, ‘structure’, ‘list’, ‘c’
[16:21:16.014] Searching for globals ... DONE
[16:21:16.014] Resolving globals: FALSE
[16:21:16.015] 
[16:21:16.015] 
[16:21:16.015] getGlobalsAndPackages() ... DONE
[16:21:16.015] Packages needed by the future expression (n = 0): <none>
[16:21:16.015] Packages needed by future strategies (n = 0): <none>
[16:21:16.016] {
[16:21:16.016]     {
[16:21:16.016]         {
[16:21:16.016]             ...future.startTime <- base::Sys.time()
[16:21:16.016]             {
[16:21:16.016]                 {
[16:21:16.016]                   {
[16:21:16.016]                     base::local({
[16:21:16.016]                       has_future <- base::requireNamespace("future", 
[16:21:16.016]                         quietly = TRUE)
[16:21:16.016]                       if (has_future) {
[16:21:16.016]                         ns <- base::getNamespace("future")
[16:21:16.016]                         version <- ns[[".package"]][["version"]]
[16:21:16.016]                         if (is.null(version)) 
[16:21:16.016]                           version <- utils::packageVersion("future")
[16:21:16.016]                       }
[16:21:16.016]                       else {
[16:21:16.016]                         version <- NULL
[16:21:16.016]                       }
[16:21:16.016]                       if (!has_future || version < "1.8.0") {
[16:21:16.016]                         info <- base::c(r_version = base::gsub("R version ", 
[16:21:16.016]                           "", base::R.version$version.string), 
[16:21:16.016]                           platform = base::sprintf("%s (%s-bit)", 
[16:21:16.016]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:16.016]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:16.016]                             "release", "version")], collapse = " "), 
[16:21:16.016]                           hostname = base::Sys.info()[["nodename"]])
[16:21:16.016]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:21:16.016]                           info)
[16:21:16.016]                         info <- base::paste(info, collapse = "; ")
[16:21:16.016]                         if (!has_future) {
[16:21:16.016]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:16.016]                             info)
[16:21:16.016]                         }
[16:21:16.016]                         else {
[16:21:16.016]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:16.016]                             info, version)
[16:21:16.016]                         }
[16:21:16.016]                         base::stop(msg)
[16:21:16.016]                       }
[16:21:16.016]                     })
[16:21:16.016]                   }
[16:21:16.016]                   ...future.strategy.old <- future::plan("list")
[16:21:16.016]                   options(future.plan = NULL)
[16:21:16.016]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:16.016]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:16.016]                 }
[16:21:16.016]                 ...future.workdir <- getwd()
[16:21:16.016]             }
[16:21:16.016]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:16.016]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:16.016]         }
[16:21:16.016]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:16.016]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:16.016]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:16.016]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:16.016]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:16.016]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:16.016]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:16.016]             base::names(...future.oldOptions))
[16:21:16.016]     }
[16:21:16.016]     if (FALSE) {
[16:21:16.016]     }
[16:21:16.016]     else {
[16:21:16.016]         if (TRUE) {
[16:21:16.016]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:16.016]                 open = "w")
[16:21:16.016]         }
[16:21:16.016]         else {
[16:21:16.016]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:16.016]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:16.016]         }
[16:21:16.016]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:16.016]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:16.016]             base::sink(type = "output", split = FALSE)
[16:21:16.016]             base::close(...future.stdout)
[16:21:16.016]         }, add = TRUE)
[16:21:16.016]     }
[16:21:16.016]     ...future.frame <- base::sys.nframe()
[16:21:16.016]     ...future.conditions <- base::list()
[16:21:16.016]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:16.016]     if (FALSE) {
[16:21:16.016]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:16.016]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:16.016]     }
[16:21:16.016]     ...future.result <- base::tryCatch({
[16:21:16.016]         base::withCallingHandlers({
[16:21:16.016]             ...future.value <- base::withVisible(base::local({
[16:21:16.016]                 stop(structure(list(message = "boom"), class = c("MyError", 
[16:21:16.016]                   "error", "condition")))
[16:21:16.016]             }))
[16:21:16.016]             future::FutureResult(value = ...future.value$value, 
[16:21:16.016]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:16.016]                   ...future.rng), globalenv = if (FALSE) 
[16:21:16.016]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:16.016]                     ...future.globalenv.names))
[16:21:16.016]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:16.016]         }, condition = base::local({
[16:21:16.016]             c <- base::c
[16:21:16.016]             inherits <- base::inherits
[16:21:16.016]             invokeRestart <- base::invokeRestart
[16:21:16.016]             length <- base::length
[16:21:16.016]             list <- base::list
[16:21:16.016]             seq.int <- base::seq.int
[16:21:16.016]             signalCondition <- base::signalCondition
[16:21:16.016]             sys.calls <- base::sys.calls
[16:21:16.016]             `[[` <- base::`[[`
[16:21:16.016]             `+` <- base::`+`
[16:21:16.016]             `<<-` <- base::`<<-`
[16:21:16.016]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:16.016]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:16.016]                   3L)]
[16:21:16.016]             }
[16:21:16.016]             function(cond) {
[16:21:16.016]                 is_error <- inherits(cond, "error")
[16:21:16.016]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:16.016]                   NULL)
[16:21:16.016]                 if (is_error) {
[16:21:16.016]                   sessionInformation <- function() {
[16:21:16.016]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:16.016]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:16.016]                       search = base::search(), system = base::Sys.info())
[16:21:16.016]                   }
[16:21:16.016]                   ...future.conditions[[length(...future.conditions) + 
[16:21:16.016]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:16.016]                     cond$call), session = sessionInformation(), 
[16:21:16.016]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:16.016]                   signalCondition(cond)
[16:21:16.016]                 }
[16:21:16.016]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:16.016]                 "immediateCondition"))) {
[16:21:16.016]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:16.016]                   ...future.conditions[[length(...future.conditions) + 
[16:21:16.016]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:16.016]                   if (TRUE && !signal) {
[16:21:16.016]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.016]                     {
[16:21:16.016]                       inherits <- base::inherits
[16:21:16.016]                       invokeRestart <- base::invokeRestart
[16:21:16.016]                       is.null <- base::is.null
[16:21:16.016]                       muffled <- FALSE
[16:21:16.016]                       if (inherits(cond, "message")) {
[16:21:16.016]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:16.016]                         if (muffled) 
[16:21:16.016]                           invokeRestart("muffleMessage")
[16:21:16.016]                       }
[16:21:16.016]                       else if (inherits(cond, "warning")) {
[16:21:16.016]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:16.016]                         if (muffled) 
[16:21:16.016]                           invokeRestart("muffleWarning")
[16:21:16.016]                       }
[16:21:16.016]                       else if (inherits(cond, "condition")) {
[16:21:16.016]                         if (!is.null(pattern)) {
[16:21:16.016]                           computeRestarts <- base::computeRestarts
[16:21:16.016]                           grepl <- base::grepl
[16:21:16.016]                           restarts <- computeRestarts(cond)
[16:21:16.016]                           for (restart in restarts) {
[16:21:16.016]                             name <- restart$name
[16:21:16.016]                             if (is.null(name)) 
[16:21:16.016]                               next
[16:21:16.016]                             if (!grepl(pattern, name)) 
[16:21:16.016]                               next
[16:21:16.016]                             invokeRestart(restart)
[16:21:16.016]                             muffled <- TRUE
[16:21:16.016]                             break
[16:21:16.016]                           }
[16:21:16.016]                         }
[16:21:16.016]                       }
[16:21:16.016]                       invisible(muffled)
[16:21:16.016]                     }
[16:21:16.016]                     muffleCondition(cond, pattern = "^muffle")
[16:21:16.016]                   }
[16:21:16.016]                 }
[16:21:16.016]                 else {
[16:21:16.016]                   if (TRUE) {
[16:21:16.016]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.016]                     {
[16:21:16.016]                       inherits <- base::inherits
[16:21:16.016]                       invokeRestart <- base::invokeRestart
[16:21:16.016]                       is.null <- base::is.null
[16:21:16.016]                       muffled <- FALSE
[16:21:16.016]                       if (inherits(cond, "message")) {
[16:21:16.016]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:16.016]                         if (muffled) 
[16:21:16.016]                           invokeRestart("muffleMessage")
[16:21:16.016]                       }
[16:21:16.016]                       else if (inherits(cond, "warning")) {
[16:21:16.016]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:16.016]                         if (muffled) 
[16:21:16.016]                           invokeRestart("muffleWarning")
[16:21:16.016]                       }
[16:21:16.016]                       else if (inherits(cond, "condition")) {
[16:21:16.016]                         if (!is.null(pattern)) {
[16:21:16.016]                           computeRestarts <- base::computeRestarts
[16:21:16.016]                           grepl <- base::grepl
[16:21:16.016]                           restarts <- computeRestarts(cond)
[16:21:16.016]                           for (restart in restarts) {
[16:21:16.016]                             name <- restart$name
[16:21:16.016]                             if (is.null(name)) 
[16:21:16.016]                               next
[16:21:16.016]                             if (!grepl(pattern, name)) 
[16:21:16.016]                               next
[16:21:16.016]                             invokeRestart(restart)
[16:21:16.016]                             muffled <- TRUE
[16:21:16.016]                             break
[16:21:16.016]                           }
[16:21:16.016]                         }
[16:21:16.016]                       }
[16:21:16.016]                       invisible(muffled)
[16:21:16.016]                     }
[16:21:16.016]                     muffleCondition(cond, pattern = "^muffle")
[16:21:16.016]                   }
[16:21:16.016]                 }
[16:21:16.016]             }
[16:21:16.016]         }))
[16:21:16.016]     }, error = function(ex) {
[16:21:16.016]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:16.016]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:16.016]                 ...future.rng), started = ...future.startTime, 
[16:21:16.016]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:16.016]             version = "1.8"), class = "FutureResult")
[16:21:16.016]     }, finally = {
[16:21:16.016]         if (!identical(...future.workdir, getwd())) 
[16:21:16.016]             setwd(...future.workdir)
[16:21:16.016]         {
[16:21:16.016]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:16.016]                 ...future.oldOptions$nwarnings <- NULL
[16:21:16.016]             }
[16:21:16.016]             base::options(...future.oldOptions)
[16:21:16.016]             if (.Platform$OS.type == "windows") {
[16:21:16.016]                 old_names <- names(...future.oldEnvVars)
[16:21:16.016]                 envs <- base::Sys.getenv()
[16:21:16.016]                 names <- names(envs)
[16:21:16.016]                 common <- intersect(names, old_names)
[16:21:16.016]                 added <- setdiff(names, old_names)
[16:21:16.016]                 removed <- setdiff(old_names, names)
[16:21:16.016]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:16.016]                   envs[common]]
[16:21:16.016]                 NAMES <- toupper(changed)
[16:21:16.016]                 args <- list()
[16:21:16.016]                 for (kk in seq_along(NAMES)) {
[16:21:16.016]                   name <- changed[[kk]]
[16:21:16.016]                   NAME <- NAMES[[kk]]
[16:21:16.016]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.016]                     next
[16:21:16.016]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:16.016]                 }
[16:21:16.016]                 NAMES <- toupper(added)
[16:21:16.016]                 for (kk in seq_along(NAMES)) {
[16:21:16.016]                   name <- added[[kk]]
[16:21:16.016]                   NAME <- NAMES[[kk]]
[16:21:16.016]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.016]                     next
[16:21:16.016]                   args[[name]] <- ""
[16:21:16.016]                 }
[16:21:16.016]                 NAMES <- toupper(removed)
[16:21:16.016]                 for (kk in seq_along(NAMES)) {
[16:21:16.016]                   name <- removed[[kk]]
[16:21:16.016]                   NAME <- NAMES[[kk]]
[16:21:16.016]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.016]                     next
[16:21:16.016]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:16.016]                 }
[16:21:16.016]                 if (length(args) > 0) 
[16:21:16.016]                   base::do.call(base::Sys.setenv, args = args)
[16:21:16.016]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:16.016]             }
[16:21:16.016]             else {
[16:21:16.016]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:16.016]             }
[16:21:16.016]             {
[16:21:16.016]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:16.016]                   0L) {
[16:21:16.016]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:16.016]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:16.016]                   base::options(opts)
[16:21:16.016]                 }
[16:21:16.016]                 {
[16:21:16.016]                   {
[16:21:16.016]                     NULL
[16:21:16.016]                     RNGkind("Mersenne-Twister")
[16:21:16.016]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:21:16.016]                       inherits = FALSE)
[16:21:16.016]                   }
[16:21:16.016]                   options(future.plan = NULL)
[16:21:16.016]                   if (is.na(NA_character_)) 
[16:21:16.016]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:16.016]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:16.016]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:16.016]                     .init = FALSE)
[16:21:16.016]                 }
[16:21:16.016]             }
[16:21:16.016]         }
[16:21:16.016]     })
[16:21:16.016]     if (TRUE) {
[16:21:16.016]         base::sink(type = "output", split = FALSE)
[16:21:16.016]         if (TRUE) {
[16:21:16.016]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:16.016]         }
[16:21:16.016]         else {
[16:21:16.016]             ...future.result["stdout"] <- base::list(NULL)
[16:21:16.016]         }
[16:21:16.016]         base::close(...future.stdout)
[16:21:16.016]         ...future.stdout <- NULL
[16:21:16.016]     }
[16:21:16.016]     ...future.result$conditions <- ...future.conditions
[16:21:16.016]     ...future.result$finished <- base::Sys.time()
[16:21:16.016]     ...future.result
[16:21:16.016] }
[16:21:16.017] plan(): Setting new future strategy stack:
[16:21:16.018] List of future strategies:
[16:21:16.018] 1. sequential:
[16:21:16.018]    - args: function (..., envir = parent.frame())
[16:21:16.018]    - tweaked: FALSE
[16:21:16.018]    - call: NULL
[16:21:16.018] plan(): nbrOfWorkers() = 1
[16:21:16.019] plan(): Setting new future strategy stack:
[16:21:16.019] List of future strategies:
[16:21:16.019] 1. multicore:
[16:21:16.019]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:21:16.019]    - tweaked: FALSE
[16:21:16.019]    - call: plan(multicore)
[16:21:16.022] plan(): nbrOfWorkers() = 1
[16:21:16.022] SequentialFuture started (and completed)
[16:21:16.023] signalConditions() ...
[16:21:16.023]  - include = ‘immediateCondition’
[16:21:16.023]  - exclude = 
[16:21:16.023]  - resignal = FALSE
[16:21:16.023]  - Number of conditions: 1
[16:21:16.023] signalConditions() ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    stop(structure(list(message = "boom"), class = c("MyError", 
        "error", "condition")))
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 0 bytes of class ‘NULL’
Conditions captured: [n=1] ‘MyError’
Early signaling: FALSE
Owner process: 341000aa-40a0-ae89-3f55-e211e7e2f207
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:21:16.024] signalConditions() ...
[16:21:16.024]  - include = ‘immediateCondition’
[16:21:16.024]  - exclude = 
[16:21:16.024]  - resignal = FALSE
[16:21:16.024]  - Number of conditions: 1
[16:21:16.024] signalConditions() ... done
<MyError: boom>
[16:21:16.024] signalConditions() ...
[16:21:16.024]  - include = ‘immediateCondition’
[16:21:16.024]  - exclude = 
[16:21:16.025]  - resignal = FALSE
[16:21:16.025]  - Number of conditions: 1
[16:21:16.025] signalConditions() ... done
[16:21:16.025] Future state: ‘finished’
[16:21:16.025] signalConditions() ...
[16:21:16.025]  - include = ‘condition’
[16:21:16.025]  - exclude = ‘immediateCondition’
[16:21:16.025]  - resignal = TRUE
[16:21:16.025]  - Number of conditions: 1
[16:21:16.025]  - Condition #1: ‘MyError’, ‘error’, ‘condition’
[16:21:16.026] signalConditions() ... done
*** multicore(..., globals = TRUE) without globals
[16:21:16.029] getGlobalsAndPackages() ...
[16:21:16.029] Searching for globals...
[16:21:16.030] - globals found: [1] ‘{’
[16:21:16.030] Searching for globals ... DONE
[16:21:16.030] Resolving globals: FALSE
[16:21:16.030] 
[16:21:16.030] 
[16:21:16.030] getGlobalsAndPackages() ... DONE
[16:21:16.031] Packages needed by the future expression (n = 0): <none>
[16:21:16.031] Packages needed by future strategies (n = 0): <none>
[16:21:16.031] {
[16:21:16.031]     {
[16:21:16.031]         {
[16:21:16.031]             ...future.startTime <- base::Sys.time()
[16:21:16.031]             {
[16:21:16.031]                 {
[16:21:16.031]                   {
[16:21:16.031]                     base::local({
[16:21:16.031]                       has_future <- base::requireNamespace("future", 
[16:21:16.031]                         quietly = TRUE)
[16:21:16.031]                       if (has_future) {
[16:21:16.031]                         ns <- base::getNamespace("future")
[16:21:16.031]                         version <- ns[[".package"]][["version"]]
[16:21:16.031]                         if (is.null(version)) 
[16:21:16.031]                           version <- utils::packageVersion("future")
[16:21:16.031]                       }
[16:21:16.031]                       else {
[16:21:16.031]                         version <- NULL
[16:21:16.031]                       }
[16:21:16.031]                       if (!has_future || version < "1.8.0") {
[16:21:16.031]                         info <- base::c(r_version = base::gsub("R version ", 
[16:21:16.031]                           "", base::R.version$version.string), 
[16:21:16.031]                           platform = base::sprintf("%s (%s-bit)", 
[16:21:16.031]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:16.031]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:16.031]                             "release", "version")], collapse = " "), 
[16:21:16.031]                           hostname = base::Sys.info()[["nodename"]])
[16:21:16.031]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:21:16.031]                           info)
[16:21:16.031]                         info <- base::paste(info, collapse = "; ")
[16:21:16.031]                         if (!has_future) {
[16:21:16.031]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:16.031]                             info)
[16:21:16.031]                         }
[16:21:16.031]                         else {
[16:21:16.031]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:16.031]                             info, version)
[16:21:16.031]                         }
[16:21:16.031]                         base::stop(msg)
[16:21:16.031]                       }
[16:21:16.031]                     })
[16:21:16.031]                   }
[16:21:16.031]                   ...future.strategy.old <- future::plan("list")
[16:21:16.031]                   options(future.plan = NULL)
[16:21:16.031]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:16.031]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:16.031]                 }
[16:21:16.031]                 ...future.workdir <- getwd()
[16:21:16.031]             }
[16:21:16.031]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:16.031]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:16.031]         }
[16:21:16.031]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:16.031]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:16.031]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:16.031]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:16.031]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:16.031]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:16.031]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:16.031]             base::names(...future.oldOptions))
[16:21:16.031]     }
[16:21:16.031]     if (FALSE) {
[16:21:16.031]     }
[16:21:16.031]     else {
[16:21:16.031]         if (TRUE) {
[16:21:16.031]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:16.031]                 open = "w")
[16:21:16.031]         }
[16:21:16.031]         else {
[16:21:16.031]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:16.031]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:16.031]         }
[16:21:16.031]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:16.031]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:16.031]             base::sink(type = "output", split = FALSE)
[16:21:16.031]             base::close(...future.stdout)
[16:21:16.031]         }, add = TRUE)
[16:21:16.031]     }
[16:21:16.031]     ...future.frame <- base::sys.nframe()
[16:21:16.031]     ...future.conditions <- base::list()
[16:21:16.031]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:16.031]     if (FALSE) {
[16:21:16.031]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:16.031]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:16.031]     }
[16:21:16.031]     ...future.result <- base::tryCatch({
[16:21:16.031]         base::withCallingHandlers({
[16:21:16.031]             ...future.value <- base::withVisible(base::local({
[16:21:16.031]                 42L
[16:21:16.031]             }))
[16:21:16.031]             future::FutureResult(value = ...future.value$value, 
[16:21:16.031]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:16.031]                   ...future.rng), globalenv = if (FALSE) 
[16:21:16.031]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:16.031]                     ...future.globalenv.names))
[16:21:16.031]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:16.031]         }, condition = base::local({
[16:21:16.031]             c <- base::c
[16:21:16.031]             inherits <- base::inherits
[16:21:16.031]             invokeRestart <- base::invokeRestart
[16:21:16.031]             length <- base::length
[16:21:16.031]             list <- base::list
[16:21:16.031]             seq.int <- base::seq.int
[16:21:16.031]             signalCondition <- base::signalCondition
[16:21:16.031]             sys.calls <- base::sys.calls
[16:21:16.031]             `[[` <- base::`[[`
[16:21:16.031]             `+` <- base::`+`
[16:21:16.031]             `<<-` <- base::`<<-`
[16:21:16.031]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:16.031]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:16.031]                   3L)]
[16:21:16.031]             }
[16:21:16.031]             function(cond) {
[16:21:16.031]                 is_error <- inherits(cond, "error")
[16:21:16.031]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:16.031]                   NULL)
[16:21:16.031]                 if (is_error) {
[16:21:16.031]                   sessionInformation <- function() {
[16:21:16.031]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:16.031]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:16.031]                       search = base::search(), system = base::Sys.info())
[16:21:16.031]                   }
[16:21:16.031]                   ...future.conditions[[length(...future.conditions) + 
[16:21:16.031]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:16.031]                     cond$call), session = sessionInformation(), 
[16:21:16.031]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:16.031]                   signalCondition(cond)
[16:21:16.031]                 }
[16:21:16.031]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:16.031]                 "immediateCondition"))) {
[16:21:16.031]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:16.031]                   ...future.conditions[[length(...future.conditions) + 
[16:21:16.031]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:16.031]                   if (TRUE && !signal) {
[16:21:16.031]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.031]                     {
[16:21:16.031]                       inherits <- base::inherits
[16:21:16.031]                       invokeRestart <- base::invokeRestart
[16:21:16.031]                       is.null <- base::is.null
[16:21:16.031]                       muffled <- FALSE
[16:21:16.031]                       if (inherits(cond, "message")) {
[16:21:16.031]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:16.031]                         if (muffled) 
[16:21:16.031]                           invokeRestart("muffleMessage")
[16:21:16.031]                       }
[16:21:16.031]                       else if (inherits(cond, "warning")) {
[16:21:16.031]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:16.031]                         if (muffled) 
[16:21:16.031]                           invokeRestart("muffleWarning")
[16:21:16.031]                       }
[16:21:16.031]                       else if (inherits(cond, "condition")) {
[16:21:16.031]                         if (!is.null(pattern)) {
[16:21:16.031]                           computeRestarts <- base::computeRestarts
[16:21:16.031]                           grepl <- base::grepl
[16:21:16.031]                           restarts <- computeRestarts(cond)
[16:21:16.031]                           for (restart in restarts) {
[16:21:16.031]                             name <- restart$name
[16:21:16.031]                             if (is.null(name)) 
[16:21:16.031]                               next
[16:21:16.031]                             if (!grepl(pattern, name)) 
[16:21:16.031]                               next
[16:21:16.031]                             invokeRestart(restart)
[16:21:16.031]                             muffled <- TRUE
[16:21:16.031]                             break
[16:21:16.031]                           }
[16:21:16.031]                         }
[16:21:16.031]                       }
[16:21:16.031]                       invisible(muffled)
[16:21:16.031]                     }
[16:21:16.031]                     muffleCondition(cond, pattern = "^muffle")
[16:21:16.031]                   }
[16:21:16.031]                 }
[16:21:16.031]                 else {
[16:21:16.031]                   if (TRUE) {
[16:21:16.031]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.031]                     {
[16:21:16.031]                       inherits <- base::inherits
[16:21:16.031]                       invokeRestart <- base::invokeRestart
[16:21:16.031]                       is.null <- base::is.null
[16:21:16.031]                       muffled <- FALSE
[16:21:16.031]                       if (inherits(cond, "message")) {
[16:21:16.031]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:16.031]                         if (muffled) 
[16:21:16.031]                           invokeRestart("muffleMessage")
[16:21:16.031]                       }
[16:21:16.031]                       else if (inherits(cond, "warning")) {
[16:21:16.031]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:16.031]                         if (muffled) 
[16:21:16.031]                           invokeRestart("muffleWarning")
[16:21:16.031]                       }
[16:21:16.031]                       else if (inherits(cond, "condition")) {
[16:21:16.031]                         if (!is.null(pattern)) {
[16:21:16.031]                           computeRestarts <- base::computeRestarts
[16:21:16.031]                           grepl <- base::grepl
[16:21:16.031]                           restarts <- computeRestarts(cond)
[16:21:16.031]                           for (restart in restarts) {
[16:21:16.031]                             name <- restart$name
[16:21:16.031]                             if (is.null(name)) 
[16:21:16.031]                               next
[16:21:16.031]                             if (!grepl(pattern, name)) 
[16:21:16.031]                               next
[16:21:16.031]                             invokeRestart(restart)
[16:21:16.031]                             muffled <- TRUE
[16:21:16.031]                             break
[16:21:16.031]                           }
[16:21:16.031]                         }
[16:21:16.031]                       }
[16:21:16.031]                       invisible(muffled)
[16:21:16.031]                     }
[16:21:16.031]                     muffleCondition(cond, pattern = "^muffle")
[16:21:16.031]                   }
[16:21:16.031]                 }
[16:21:16.031]             }
[16:21:16.031]         }))
[16:21:16.031]     }, error = function(ex) {
[16:21:16.031]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:16.031]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:16.031]                 ...future.rng), started = ...future.startTime, 
[16:21:16.031]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:16.031]             version = "1.8"), class = "FutureResult")
[16:21:16.031]     }, finally = {
[16:21:16.031]         if (!identical(...future.workdir, getwd())) 
[16:21:16.031]             setwd(...future.workdir)
[16:21:16.031]         {
[16:21:16.031]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:16.031]                 ...future.oldOptions$nwarnings <- NULL
[16:21:16.031]             }
[16:21:16.031]             base::options(...future.oldOptions)
[16:21:16.031]             if (.Platform$OS.type == "windows") {
[16:21:16.031]                 old_names <- names(...future.oldEnvVars)
[16:21:16.031]                 envs <- base::Sys.getenv()
[16:21:16.031]                 names <- names(envs)
[16:21:16.031]                 common <- intersect(names, old_names)
[16:21:16.031]                 added <- setdiff(names, old_names)
[16:21:16.031]                 removed <- setdiff(old_names, names)
[16:21:16.031]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:16.031]                   envs[common]]
[16:21:16.031]                 NAMES <- toupper(changed)
[16:21:16.031]                 args <- list()
[16:21:16.031]                 for (kk in seq_along(NAMES)) {
[16:21:16.031]                   name <- changed[[kk]]
[16:21:16.031]                   NAME <- NAMES[[kk]]
[16:21:16.031]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.031]                     next
[16:21:16.031]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:16.031]                 }
[16:21:16.031]                 NAMES <- toupper(added)
[16:21:16.031]                 for (kk in seq_along(NAMES)) {
[16:21:16.031]                   name <- added[[kk]]
[16:21:16.031]                   NAME <- NAMES[[kk]]
[16:21:16.031]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.031]                     next
[16:21:16.031]                   args[[name]] <- ""
[16:21:16.031]                 }
[16:21:16.031]                 NAMES <- toupper(removed)
[16:21:16.031]                 for (kk in seq_along(NAMES)) {
[16:21:16.031]                   name <- removed[[kk]]
[16:21:16.031]                   NAME <- NAMES[[kk]]
[16:21:16.031]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.031]                     next
[16:21:16.031]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:16.031]                 }
[16:21:16.031]                 if (length(args) > 0) 
[16:21:16.031]                   base::do.call(base::Sys.setenv, args = args)
[16:21:16.031]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:16.031]             }
[16:21:16.031]             else {
[16:21:16.031]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:16.031]             }
[16:21:16.031]             {
[16:21:16.031]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:16.031]                   0L) {
[16:21:16.031]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:16.031]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:16.031]                   base::options(opts)
[16:21:16.031]                 }
[16:21:16.031]                 {
[16:21:16.031]                   {
[16:21:16.031]                     NULL
[16:21:16.031]                     RNGkind("Mersenne-Twister")
[16:21:16.031]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:21:16.031]                       inherits = FALSE)
[16:21:16.031]                   }
[16:21:16.031]                   options(future.plan = NULL)
[16:21:16.031]                   if (is.na(NA_character_)) 
[16:21:16.031]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:16.031]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:16.031]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:16.031]                     .init = FALSE)
[16:21:16.031]                 }
[16:21:16.031]             }
[16:21:16.031]         }
[16:21:16.031]     })
[16:21:16.031]     if (TRUE) {
[16:21:16.031]         base::sink(type = "output", split = FALSE)
[16:21:16.031]         if (TRUE) {
[16:21:16.031]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:16.031]         }
[16:21:16.031]         else {
[16:21:16.031]             ...future.result["stdout"] <- base::list(NULL)
[16:21:16.031]         }
[16:21:16.031]         base::close(...future.stdout)
[16:21:16.031]         ...future.stdout <- NULL
[16:21:16.031]     }
[16:21:16.031]     ...future.result$conditions <- ...future.conditions
[16:21:16.031]     ...future.result$finished <- base::Sys.time()
[16:21:16.031]     ...future.result
[16:21:16.031] }
[16:21:16.033] plan(): Setting new future strategy stack:
[16:21:16.033] List of future strategies:
[16:21:16.033] 1. sequential:
[16:21:16.033]    - args: function (..., envir = parent.frame())
[16:21:16.033]    - tweaked: FALSE
[16:21:16.033]    - call: NULL
[16:21:16.033] plan(): nbrOfWorkers() = 1
[16:21:16.034] plan(): Setting new future strategy stack:
[16:21:16.034] List of future strategies:
[16:21:16.034] 1. multicore:
[16:21:16.034]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:21:16.034]    - tweaked: FALSE
[16:21:16.034]    - call: plan(multicore)
[16:21:16.037] plan(): nbrOfWorkers() = 1
[16:21:16.038] SequentialFuture started (and completed)
[16:21:16.038] resolved() for ‘SequentialFuture’ ...
[16:21:16.038] - state: ‘finished’
[16:21:16.038] - run: TRUE
[16:21:16.038] - result: ‘FutureResult’
[16:21:16.038] resolved() for ‘SequentialFuture’ ... done
[1] TRUE
[1] 42
*** multicore(..., globals = TRUE) with globals
[16:21:16.042] getGlobalsAndPackages() ...
[16:21:16.042] Searching for globals...
[16:21:16.044] - globals found: [4] ‘{’, ‘<-’, ‘*’, ‘a’
[16:21:16.044] Searching for globals ... DONE
[16:21:16.044] Resolving globals: FALSE
[16:21:16.044] The total size of the 1 globals is 56 bytes (56 bytes)
[16:21:16.045] The total size of the 1 globals exported for future expression (‘{; b <- 3; c <- 2; a * b * c; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[16:21:16.045] - globals: [1] ‘a’
[16:21:16.045] 
[16:21:16.045] getGlobalsAndPackages() ... DONE
[16:21:16.045] Packages needed by the future expression (n = 0): <none>
[16:21:16.046] Packages needed by future strategies (n = 0): <none>
[16:21:16.046] {
[16:21:16.046]     {
[16:21:16.046]         {
[16:21:16.046]             ...future.startTime <- base::Sys.time()
[16:21:16.046]             {
[16:21:16.046]                 {
[16:21:16.046]                   {
[16:21:16.046]                     base::local({
[16:21:16.046]                       has_future <- base::requireNamespace("future", 
[16:21:16.046]                         quietly = TRUE)
[16:21:16.046]                       if (has_future) {
[16:21:16.046]                         ns <- base::getNamespace("future")
[16:21:16.046]                         version <- ns[[".package"]][["version"]]
[16:21:16.046]                         if (is.null(version)) 
[16:21:16.046]                           version <- utils::packageVersion("future")
[16:21:16.046]                       }
[16:21:16.046]                       else {
[16:21:16.046]                         version <- NULL
[16:21:16.046]                       }
[16:21:16.046]                       if (!has_future || version < "1.8.0") {
[16:21:16.046]                         info <- base::c(r_version = base::gsub("R version ", 
[16:21:16.046]                           "", base::R.version$version.string), 
[16:21:16.046]                           platform = base::sprintf("%s (%s-bit)", 
[16:21:16.046]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:16.046]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:16.046]                             "release", "version")], collapse = " "), 
[16:21:16.046]                           hostname = base::Sys.info()[["nodename"]])
[16:21:16.046]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:21:16.046]                           info)
[16:21:16.046]                         info <- base::paste(info, collapse = "; ")
[16:21:16.046]                         if (!has_future) {
[16:21:16.046]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:16.046]                             info)
[16:21:16.046]                         }
[16:21:16.046]                         else {
[16:21:16.046]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:16.046]                             info, version)
[16:21:16.046]                         }
[16:21:16.046]                         base::stop(msg)
[16:21:16.046]                       }
[16:21:16.046]                     })
[16:21:16.046]                   }
[16:21:16.046]                   ...future.strategy.old <- future::plan("list")
[16:21:16.046]                   options(future.plan = NULL)
[16:21:16.046]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:16.046]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:16.046]                 }
[16:21:16.046]                 ...future.workdir <- getwd()
[16:21:16.046]             }
[16:21:16.046]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:16.046]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:16.046]         }
[16:21:16.046]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:16.046]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:16.046]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:16.046]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:16.046]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:16.046]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:16.046]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:16.046]             base::names(...future.oldOptions))
[16:21:16.046]     }
[16:21:16.046]     if (FALSE) {
[16:21:16.046]     }
[16:21:16.046]     else {
[16:21:16.046]         if (TRUE) {
[16:21:16.046]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:16.046]                 open = "w")
[16:21:16.046]         }
[16:21:16.046]         else {
[16:21:16.046]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:16.046]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:16.046]         }
[16:21:16.046]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:16.046]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:16.046]             base::sink(type = "output", split = FALSE)
[16:21:16.046]             base::close(...future.stdout)
[16:21:16.046]         }, add = TRUE)
[16:21:16.046]     }
[16:21:16.046]     ...future.frame <- base::sys.nframe()
[16:21:16.046]     ...future.conditions <- base::list()
[16:21:16.046]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:16.046]     if (FALSE) {
[16:21:16.046]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:16.046]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:16.046]     }
[16:21:16.046]     ...future.result <- base::tryCatch({
[16:21:16.046]         base::withCallingHandlers({
[16:21:16.046]             ...future.value <- base::withVisible(base::local({
[16:21:16.046]                 b <- 3
[16:21:16.046]                 c <- 2
[16:21:16.046]                 a * b * c
[16:21:16.046]             }))
[16:21:16.046]             future::FutureResult(value = ...future.value$value, 
[16:21:16.046]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:16.046]                   ...future.rng), globalenv = if (FALSE) 
[16:21:16.046]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:16.046]                     ...future.globalenv.names))
[16:21:16.046]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:16.046]         }, condition = base::local({
[16:21:16.046]             c <- base::c
[16:21:16.046]             inherits <- base::inherits
[16:21:16.046]             invokeRestart <- base::invokeRestart
[16:21:16.046]             length <- base::length
[16:21:16.046]             list <- base::list
[16:21:16.046]             seq.int <- base::seq.int
[16:21:16.046]             signalCondition <- base::signalCondition
[16:21:16.046]             sys.calls <- base::sys.calls
[16:21:16.046]             `[[` <- base::`[[`
[16:21:16.046]             `+` <- base::`+`
[16:21:16.046]             `<<-` <- base::`<<-`
[16:21:16.046]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:16.046]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:16.046]                   3L)]
[16:21:16.046]             }
[16:21:16.046]             function(cond) {
[16:21:16.046]                 is_error <- inherits(cond, "error")
[16:21:16.046]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:16.046]                   NULL)
[16:21:16.046]                 if (is_error) {
[16:21:16.046]                   sessionInformation <- function() {
[16:21:16.046]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:16.046]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:16.046]                       search = base::search(), system = base::Sys.info())
[16:21:16.046]                   }
[16:21:16.046]                   ...future.conditions[[length(...future.conditions) + 
[16:21:16.046]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:16.046]                     cond$call), session = sessionInformation(), 
[16:21:16.046]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:16.046]                   signalCondition(cond)
[16:21:16.046]                 }
[16:21:16.046]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:16.046]                 "immediateCondition"))) {
[16:21:16.046]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:16.046]                   ...future.conditions[[length(...future.conditions) + 
[16:21:16.046]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:16.046]                   if (TRUE && !signal) {
[16:21:16.046]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.046]                     {
[16:21:16.046]                       inherits <- base::inherits
[16:21:16.046]                       invokeRestart <- base::invokeRestart
[16:21:16.046]                       is.null <- base::is.null
[16:21:16.046]                       muffled <- FALSE
[16:21:16.046]                       if (inherits(cond, "message")) {
[16:21:16.046]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:16.046]                         if (muffled) 
[16:21:16.046]                           invokeRestart("muffleMessage")
[16:21:16.046]                       }
[16:21:16.046]                       else if (inherits(cond, "warning")) {
[16:21:16.046]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:16.046]                         if (muffled) 
[16:21:16.046]                           invokeRestart("muffleWarning")
[16:21:16.046]                       }
[16:21:16.046]                       else if (inherits(cond, "condition")) {
[16:21:16.046]                         if (!is.null(pattern)) {
[16:21:16.046]                           computeRestarts <- base::computeRestarts
[16:21:16.046]                           grepl <- base::grepl
[16:21:16.046]                           restarts <- computeRestarts(cond)
[16:21:16.046]                           for (restart in restarts) {
[16:21:16.046]                             name <- restart$name
[16:21:16.046]                             if (is.null(name)) 
[16:21:16.046]                               next
[16:21:16.046]                             if (!grepl(pattern, name)) 
[16:21:16.046]                               next
[16:21:16.046]                             invokeRestart(restart)
[16:21:16.046]                             muffled <- TRUE
[16:21:16.046]                             break
[16:21:16.046]                           }
[16:21:16.046]                         }
[16:21:16.046]                       }
[16:21:16.046]                       invisible(muffled)
[16:21:16.046]                     }
[16:21:16.046]                     muffleCondition(cond, pattern = "^muffle")
[16:21:16.046]                   }
[16:21:16.046]                 }
[16:21:16.046]                 else {
[16:21:16.046]                   if (TRUE) {
[16:21:16.046]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.046]                     {
[16:21:16.046]                       inherits <- base::inherits
[16:21:16.046]                       invokeRestart <- base::invokeRestart
[16:21:16.046]                       is.null <- base::is.null
[16:21:16.046]                       muffled <- FALSE
[16:21:16.046]                       if (inherits(cond, "message")) {
[16:21:16.046]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:16.046]                         if (muffled) 
[16:21:16.046]                           invokeRestart("muffleMessage")
[16:21:16.046]                       }
[16:21:16.046]                       else if (inherits(cond, "warning")) {
[16:21:16.046]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:16.046]                         if (muffled) 
[16:21:16.046]                           invokeRestart("muffleWarning")
[16:21:16.046]                       }
[16:21:16.046]                       else if (inherits(cond, "condition")) {
[16:21:16.046]                         if (!is.null(pattern)) {
[16:21:16.046]                           computeRestarts <- base::computeRestarts
[16:21:16.046]                           grepl <- base::grepl
[16:21:16.046]                           restarts <- computeRestarts(cond)
[16:21:16.046]                           for (restart in restarts) {
[16:21:16.046]                             name <- restart$name
[16:21:16.046]                             if (is.null(name)) 
[16:21:16.046]                               next
[16:21:16.046]                             if (!grepl(pattern, name)) 
[16:21:16.046]                               next
[16:21:16.046]                             invokeRestart(restart)
[16:21:16.046]                             muffled <- TRUE
[16:21:16.046]                             break
[16:21:16.046]                           }
[16:21:16.046]                         }
[16:21:16.046]                       }
[16:21:16.046]                       invisible(muffled)
[16:21:16.046]                     }
[16:21:16.046]                     muffleCondition(cond, pattern = "^muffle")
[16:21:16.046]                   }
[16:21:16.046]                 }
[16:21:16.046]             }
[16:21:16.046]         }))
[16:21:16.046]     }, error = function(ex) {
[16:21:16.046]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:16.046]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:16.046]                 ...future.rng), started = ...future.startTime, 
[16:21:16.046]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:16.046]             version = "1.8"), class = "FutureResult")
[16:21:16.046]     }, finally = {
[16:21:16.046]         if (!identical(...future.workdir, getwd())) 
[16:21:16.046]             setwd(...future.workdir)
[16:21:16.046]         {
[16:21:16.046]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:16.046]                 ...future.oldOptions$nwarnings <- NULL
[16:21:16.046]             }
[16:21:16.046]             base::options(...future.oldOptions)
[16:21:16.046]             if (.Platform$OS.type == "windows") {
[16:21:16.046]                 old_names <- names(...future.oldEnvVars)
[16:21:16.046]                 envs <- base::Sys.getenv()
[16:21:16.046]                 names <- names(envs)
[16:21:16.046]                 common <- intersect(names, old_names)
[16:21:16.046]                 added <- setdiff(names, old_names)
[16:21:16.046]                 removed <- setdiff(old_names, names)
[16:21:16.046]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:16.046]                   envs[common]]
[16:21:16.046]                 NAMES <- toupper(changed)
[16:21:16.046]                 args <- list()
[16:21:16.046]                 for (kk in seq_along(NAMES)) {
[16:21:16.046]                   name <- changed[[kk]]
[16:21:16.046]                   NAME <- NAMES[[kk]]
[16:21:16.046]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.046]                     next
[16:21:16.046]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:16.046]                 }
[16:21:16.046]                 NAMES <- toupper(added)
[16:21:16.046]                 for (kk in seq_along(NAMES)) {
[16:21:16.046]                   name <- added[[kk]]
[16:21:16.046]                   NAME <- NAMES[[kk]]
[16:21:16.046]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.046]                     next
[16:21:16.046]                   args[[name]] <- ""
[16:21:16.046]                 }
[16:21:16.046]                 NAMES <- toupper(removed)
[16:21:16.046]                 for (kk in seq_along(NAMES)) {
[16:21:16.046]                   name <- removed[[kk]]
[16:21:16.046]                   NAME <- NAMES[[kk]]
[16:21:16.046]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.046]                     next
[16:21:16.046]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:16.046]                 }
[16:21:16.046]                 if (length(args) > 0) 
[16:21:16.046]                   base::do.call(base::Sys.setenv, args = args)
[16:21:16.046]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:16.046]             }
[16:21:16.046]             else {
[16:21:16.046]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:16.046]             }
[16:21:16.046]             {
[16:21:16.046]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:16.046]                   0L) {
[16:21:16.046]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:16.046]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:16.046]                   base::options(opts)
[16:21:16.046]                 }
[16:21:16.046]                 {
[16:21:16.046]                   {
[16:21:16.046]                     NULL
[16:21:16.046]                     RNGkind("Mersenne-Twister")
[16:21:16.046]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:21:16.046]                       inherits = FALSE)
[16:21:16.046]                   }
[16:21:16.046]                   options(future.plan = NULL)
[16:21:16.046]                   if (is.na(NA_character_)) 
[16:21:16.046]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:16.046]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:16.046]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:16.046]                     .init = FALSE)
[16:21:16.046]                 }
[16:21:16.046]             }
[16:21:16.046]         }
[16:21:16.046]     })
[16:21:16.046]     if (TRUE) {
[16:21:16.046]         base::sink(type = "output", split = FALSE)
[16:21:16.046]         if (TRUE) {
[16:21:16.046]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:16.046]         }
[16:21:16.046]         else {
[16:21:16.046]             ...future.result["stdout"] <- base::list(NULL)
[16:21:16.046]         }
[16:21:16.046]         base::close(...future.stdout)
[16:21:16.046]         ...future.stdout <- NULL
[16:21:16.046]     }
[16:21:16.046]     ...future.result$conditions <- ...future.conditions
[16:21:16.046]     ...future.result$finished <- base::Sys.time()
[16:21:16.046]     ...future.result
[16:21:16.046] }
[16:21:16.048] assign_globals() ...
[16:21:16.048] List of 1
[16:21:16.048]  $ a: num 0
[16:21:16.048]  - attr(*, "where")=List of 1
[16:21:16.048]   ..$ a:<environment: R_EmptyEnv> 
[16:21:16.048]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:21:16.048]  - attr(*, "resolved")= logi FALSE
[16:21:16.048]  - attr(*, "total_size")= num 56
[16:21:16.055] - copied ‘a’ to environment
[16:21:16.055] assign_globals() ... done
[16:21:16.055] plan(): Setting new future strategy stack:
[16:21:16.055] List of future strategies:
[16:21:16.055] 1. sequential:
[16:21:16.055]    - args: function (..., envir = parent.frame())
[16:21:16.055]    - tweaked: FALSE
[16:21:16.055]    - call: NULL
[16:21:16.055] plan(): nbrOfWorkers() = 1
[16:21:16.056] plan(): Setting new future strategy stack:
[16:21:16.056] List of future strategies:
[16:21:16.056] 1. multicore:
[16:21:16.056]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:21:16.056]    - tweaked: FALSE
[16:21:16.056]    - call: plan(multicore)
[16:21:16.060] plan(): nbrOfWorkers() = 1
[16:21:16.060] SequentialFuture started (and completed)
SequentialFuture:
Label: ‘<none>’
Expression:
{
    b <- 3
    c <- 2
    a * b * c
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 56 bytes (numeric ‘a’ of 56 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 341000aa-40a0-ae89-3f55-e211e7e2f207
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[1] 0
*** multicore(..., globals = TRUE) with globals and blocking
 - Creating multicore future #1 ...
[16:21:16.064] getGlobalsAndPackages() ...
[16:21:16.064] Searching for globals...
[16:21:16.065] - globals found: [2] ‘{’, ‘ii’
[16:21:16.065] Searching for globals ... DONE
[16:21:16.065] Resolving globals: FALSE
[16:21:16.065] The total size of the 1 globals is 56 bytes (56 bytes)
[16:21:16.066] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[16:21:16.066] - globals: [1] ‘ii’
[16:21:16.066] 
[16:21:16.066] getGlobalsAndPackages() ... DONE
[16:21:16.066] Packages needed by the future expression (n = 0): <none>
[16:21:16.066] Packages needed by future strategies (n = 0): <none>
[16:21:16.067] {
[16:21:16.067]     {
[16:21:16.067]         {
[16:21:16.067]             ...future.startTime <- base::Sys.time()
[16:21:16.067]             {
[16:21:16.067]                 {
[16:21:16.067]                   {
[16:21:16.067]                     base::local({
[16:21:16.067]                       has_future <- base::requireNamespace("future", 
[16:21:16.067]                         quietly = TRUE)
[16:21:16.067]                       if (has_future) {
[16:21:16.067]                         ns <- base::getNamespace("future")
[16:21:16.067]                         version <- ns[[".package"]][["version"]]
[16:21:16.067]                         if (is.null(version)) 
[16:21:16.067]                           version <- utils::packageVersion("future")
[16:21:16.067]                       }
[16:21:16.067]                       else {
[16:21:16.067]                         version <- NULL
[16:21:16.067]                       }
[16:21:16.067]                       if (!has_future || version < "1.8.0") {
[16:21:16.067]                         info <- base::c(r_version = base::gsub("R version ", 
[16:21:16.067]                           "", base::R.version$version.string), 
[16:21:16.067]                           platform = base::sprintf("%s (%s-bit)", 
[16:21:16.067]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:16.067]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:16.067]                             "release", "version")], collapse = " "), 
[16:21:16.067]                           hostname = base::Sys.info()[["nodename"]])
[16:21:16.067]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:21:16.067]                           info)
[16:21:16.067]                         info <- base::paste(info, collapse = "; ")
[16:21:16.067]                         if (!has_future) {
[16:21:16.067]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:16.067]                             info)
[16:21:16.067]                         }
[16:21:16.067]                         else {
[16:21:16.067]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:16.067]                             info, version)
[16:21:16.067]                         }
[16:21:16.067]                         base::stop(msg)
[16:21:16.067]                       }
[16:21:16.067]                     })
[16:21:16.067]                   }
[16:21:16.067]                   ...future.strategy.old <- future::plan("list")
[16:21:16.067]                   options(future.plan = NULL)
[16:21:16.067]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:16.067]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:16.067]                 }
[16:21:16.067]                 ...future.workdir <- getwd()
[16:21:16.067]             }
[16:21:16.067]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:16.067]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:16.067]         }
[16:21:16.067]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:16.067]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:16.067]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:16.067]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:16.067]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:16.067]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:16.067]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:16.067]             base::names(...future.oldOptions))
[16:21:16.067]     }
[16:21:16.067]     if (FALSE) {
[16:21:16.067]     }
[16:21:16.067]     else {
[16:21:16.067]         if (TRUE) {
[16:21:16.067]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:16.067]                 open = "w")
[16:21:16.067]         }
[16:21:16.067]         else {
[16:21:16.067]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:16.067]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:16.067]         }
[16:21:16.067]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:16.067]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:16.067]             base::sink(type = "output", split = FALSE)
[16:21:16.067]             base::close(...future.stdout)
[16:21:16.067]         }, add = TRUE)
[16:21:16.067]     }
[16:21:16.067]     ...future.frame <- base::sys.nframe()
[16:21:16.067]     ...future.conditions <- base::list()
[16:21:16.067]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:16.067]     if (FALSE) {
[16:21:16.067]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:16.067]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:16.067]     }
[16:21:16.067]     ...future.result <- base::tryCatch({
[16:21:16.067]         base::withCallingHandlers({
[16:21:16.067]             ...future.value <- base::withVisible(base::local({
[16:21:16.067]                 ii
[16:21:16.067]             }))
[16:21:16.067]             future::FutureResult(value = ...future.value$value, 
[16:21:16.067]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:16.067]                   ...future.rng), globalenv = if (FALSE) 
[16:21:16.067]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:16.067]                     ...future.globalenv.names))
[16:21:16.067]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:16.067]         }, condition = base::local({
[16:21:16.067]             c <- base::c
[16:21:16.067]             inherits <- base::inherits
[16:21:16.067]             invokeRestart <- base::invokeRestart
[16:21:16.067]             length <- base::length
[16:21:16.067]             list <- base::list
[16:21:16.067]             seq.int <- base::seq.int
[16:21:16.067]             signalCondition <- base::signalCondition
[16:21:16.067]             sys.calls <- base::sys.calls
[16:21:16.067]             `[[` <- base::`[[`
[16:21:16.067]             `+` <- base::`+`
[16:21:16.067]             `<<-` <- base::`<<-`
[16:21:16.067]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:16.067]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:16.067]                   3L)]
[16:21:16.067]             }
[16:21:16.067]             function(cond) {
[16:21:16.067]                 is_error <- inherits(cond, "error")
[16:21:16.067]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:16.067]                   NULL)
[16:21:16.067]                 if (is_error) {
[16:21:16.067]                   sessionInformation <- function() {
[16:21:16.067]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:16.067]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:16.067]                       search = base::search(), system = base::Sys.info())
[16:21:16.067]                   }
[16:21:16.067]                   ...future.conditions[[length(...future.conditions) + 
[16:21:16.067]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:16.067]                     cond$call), session = sessionInformation(), 
[16:21:16.067]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:16.067]                   signalCondition(cond)
[16:21:16.067]                 }
[16:21:16.067]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:16.067]                 "immediateCondition"))) {
[16:21:16.067]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:16.067]                   ...future.conditions[[length(...future.conditions) + 
[16:21:16.067]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:16.067]                   if (TRUE && !signal) {
[16:21:16.067]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.067]                     {
[16:21:16.067]                       inherits <- base::inherits
[16:21:16.067]                       invokeRestart <- base::invokeRestart
[16:21:16.067]                       is.null <- base::is.null
[16:21:16.067]                       muffled <- FALSE
[16:21:16.067]                       if (inherits(cond, "message")) {
[16:21:16.067]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:16.067]                         if (muffled) 
[16:21:16.067]                           invokeRestart("muffleMessage")
[16:21:16.067]                       }
[16:21:16.067]                       else if (inherits(cond, "warning")) {
[16:21:16.067]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:16.067]                         if (muffled) 
[16:21:16.067]                           invokeRestart("muffleWarning")
[16:21:16.067]                       }
[16:21:16.067]                       else if (inherits(cond, "condition")) {
[16:21:16.067]                         if (!is.null(pattern)) {
[16:21:16.067]                           computeRestarts <- base::computeRestarts
[16:21:16.067]                           grepl <- base::grepl
[16:21:16.067]                           restarts <- computeRestarts(cond)
[16:21:16.067]                           for (restart in restarts) {
[16:21:16.067]                             name <- restart$name
[16:21:16.067]                             if (is.null(name)) 
[16:21:16.067]                               next
[16:21:16.067]                             if (!grepl(pattern, name)) 
[16:21:16.067]                               next
[16:21:16.067]                             invokeRestart(restart)
[16:21:16.067]                             muffled <- TRUE
[16:21:16.067]                             break
[16:21:16.067]                           }
[16:21:16.067]                         }
[16:21:16.067]                       }
[16:21:16.067]                       invisible(muffled)
[16:21:16.067]                     }
[16:21:16.067]                     muffleCondition(cond, pattern = "^muffle")
[16:21:16.067]                   }
[16:21:16.067]                 }
[16:21:16.067]                 else {
[16:21:16.067]                   if (TRUE) {
[16:21:16.067]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.067]                     {
[16:21:16.067]                       inherits <- base::inherits
[16:21:16.067]                       invokeRestart <- base::invokeRestart
[16:21:16.067]                       is.null <- base::is.null
[16:21:16.067]                       muffled <- FALSE
[16:21:16.067]                       if (inherits(cond, "message")) {
[16:21:16.067]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:16.067]                         if (muffled) 
[16:21:16.067]                           invokeRestart("muffleMessage")
[16:21:16.067]                       }
[16:21:16.067]                       else if (inherits(cond, "warning")) {
[16:21:16.067]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:16.067]                         if (muffled) 
[16:21:16.067]                           invokeRestart("muffleWarning")
[16:21:16.067]                       }
[16:21:16.067]                       else if (inherits(cond, "condition")) {
[16:21:16.067]                         if (!is.null(pattern)) {
[16:21:16.067]                           computeRestarts <- base::computeRestarts
[16:21:16.067]                           grepl <- base::grepl
[16:21:16.067]                           restarts <- computeRestarts(cond)
[16:21:16.067]                           for (restart in restarts) {
[16:21:16.067]                             name <- restart$name
[16:21:16.067]                             if (is.null(name)) 
[16:21:16.067]                               next
[16:21:16.067]                             if (!grepl(pattern, name)) 
[16:21:16.067]                               next
[16:21:16.067]                             invokeRestart(restart)
[16:21:16.067]                             muffled <- TRUE
[16:21:16.067]                             break
[16:21:16.067]                           }
[16:21:16.067]                         }
[16:21:16.067]                       }
[16:21:16.067]                       invisible(muffled)
[16:21:16.067]                     }
[16:21:16.067]                     muffleCondition(cond, pattern = "^muffle")
[16:21:16.067]                   }
[16:21:16.067]                 }
[16:21:16.067]             }
[16:21:16.067]         }))
[16:21:16.067]     }, error = function(ex) {
[16:21:16.067]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:16.067]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:16.067]                 ...future.rng), started = ...future.startTime, 
[16:21:16.067]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:16.067]             version = "1.8"), class = "FutureResult")
[16:21:16.067]     }, finally = {
[16:21:16.067]         if (!identical(...future.workdir, getwd())) 
[16:21:16.067]             setwd(...future.workdir)
[16:21:16.067]         {
[16:21:16.067]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:16.067]                 ...future.oldOptions$nwarnings <- NULL
[16:21:16.067]             }
[16:21:16.067]             base::options(...future.oldOptions)
[16:21:16.067]             if (.Platform$OS.type == "windows") {
[16:21:16.067]                 old_names <- names(...future.oldEnvVars)
[16:21:16.067]                 envs <- base::Sys.getenv()
[16:21:16.067]                 names <- names(envs)
[16:21:16.067]                 common <- intersect(names, old_names)
[16:21:16.067]                 added <- setdiff(names, old_names)
[16:21:16.067]                 removed <- setdiff(old_names, names)
[16:21:16.067]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:16.067]                   envs[common]]
[16:21:16.067]                 NAMES <- toupper(changed)
[16:21:16.067]                 args <- list()
[16:21:16.067]                 for (kk in seq_along(NAMES)) {
[16:21:16.067]                   name <- changed[[kk]]
[16:21:16.067]                   NAME <- NAMES[[kk]]
[16:21:16.067]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.067]                     next
[16:21:16.067]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:16.067]                 }
[16:21:16.067]                 NAMES <- toupper(added)
[16:21:16.067]                 for (kk in seq_along(NAMES)) {
[16:21:16.067]                   name <- added[[kk]]
[16:21:16.067]                   NAME <- NAMES[[kk]]
[16:21:16.067]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.067]                     next
[16:21:16.067]                   args[[name]] <- ""
[16:21:16.067]                 }
[16:21:16.067]                 NAMES <- toupper(removed)
[16:21:16.067]                 for (kk in seq_along(NAMES)) {
[16:21:16.067]                   name <- removed[[kk]]
[16:21:16.067]                   NAME <- NAMES[[kk]]
[16:21:16.067]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.067]                     next
[16:21:16.067]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:16.067]                 }
[16:21:16.067]                 if (length(args) > 0) 
[16:21:16.067]                   base::do.call(base::Sys.setenv, args = args)
[16:21:16.067]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:16.067]             }
[16:21:16.067]             else {
[16:21:16.067]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:16.067]             }
[16:21:16.067]             {
[16:21:16.067]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:16.067]                   0L) {
[16:21:16.067]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:16.067]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:16.067]                   base::options(opts)
[16:21:16.067]                 }
[16:21:16.067]                 {
[16:21:16.067]                   {
[16:21:16.067]                     NULL
[16:21:16.067]                     RNGkind("Mersenne-Twister")
[16:21:16.067]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:21:16.067]                       inherits = FALSE)
[16:21:16.067]                   }
[16:21:16.067]                   options(future.plan = NULL)
[16:21:16.067]                   if (is.na(NA_character_)) 
[16:21:16.067]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:16.067]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:16.067]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:16.067]                     .init = FALSE)
[16:21:16.067]                 }
[16:21:16.067]             }
[16:21:16.067]         }
[16:21:16.067]     })
[16:21:16.067]     if (TRUE) {
[16:21:16.067]         base::sink(type = "output", split = FALSE)
[16:21:16.067]         if (TRUE) {
[16:21:16.067]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:16.067]         }
[16:21:16.067]         else {
[16:21:16.067]             ...future.result["stdout"] <- base::list(NULL)
[16:21:16.067]         }
[16:21:16.067]         base::close(...future.stdout)
[16:21:16.067]         ...future.stdout <- NULL
[16:21:16.067]     }
[16:21:16.067]     ...future.result$conditions <- ...future.conditions
[16:21:16.067]     ...future.result$finished <- base::Sys.time()
[16:21:16.067]     ...future.result
[16:21:16.067] }
[16:21:16.068] assign_globals() ...
[16:21:16.068] List of 1
[16:21:16.068]  $ ii: int 1
[16:21:16.068]  - attr(*, "where")=List of 1
[16:21:16.068]   ..$ ii:<environment: R_EmptyEnv> 
[16:21:16.068]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:21:16.068]  - attr(*, "resolved")= logi FALSE
[16:21:16.068]  - attr(*, "total_size")= num 56
[16:21:16.071] - copied ‘ii’ to environment
[16:21:16.071] assign_globals() ... done
[16:21:16.071] plan(): Setting new future strategy stack:
[16:21:16.071] List of future strategies:
[16:21:16.071] 1. sequential:
[16:21:16.071]    - args: function (..., envir = parent.frame())
[16:21:16.071]    - tweaked: FALSE
[16:21:16.071]    - call: NULL
[16:21:16.071] plan(): nbrOfWorkers() = 1
[16:21:16.072] plan(): Setting new future strategy stack:
[16:21:16.072] List of future strategies:
[16:21:16.072] 1. multicore:
[16:21:16.072]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:21:16.072]    - tweaked: FALSE
[16:21:16.072]    - call: plan(multicore)
[16:21:16.075] plan(): nbrOfWorkers() = 1
[16:21:16.076] SequentialFuture started (and completed)
 - Creating multicore future #2 ...
[16:21:16.079] getGlobalsAndPackages() ...
[16:21:16.079] Searching for globals...
[16:21:16.080] - globals found: [2] ‘{’, ‘ii’
[16:21:16.080] Searching for globals ... DONE
[16:21:16.080] Resolving globals: FALSE
[16:21:16.080] The total size of the 1 globals is 56 bytes (56 bytes)
[16:21:16.081] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[16:21:16.081] - globals: [1] ‘ii’
[16:21:16.081] 
[16:21:16.081] getGlobalsAndPackages() ... DONE
[16:21:16.081] Packages needed by the future expression (n = 0): <none>
[16:21:16.081] Packages needed by future strategies (n = 0): <none>
[16:21:16.082] {
[16:21:16.082]     {
[16:21:16.082]         {
[16:21:16.082]             ...future.startTime <- base::Sys.time()
[16:21:16.082]             {
[16:21:16.082]                 {
[16:21:16.082]                   {
[16:21:16.082]                     base::local({
[16:21:16.082]                       has_future <- base::requireNamespace("future", 
[16:21:16.082]                         quietly = TRUE)
[16:21:16.082]                       if (has_future) {
[16:21:16.082]                         ns <- base::getNamespace("future")
[16:21:16.082]                         version <- ns[[".package"]][["version"]]
[16:21:16.082]                         if (is.null(version)) 
[16:21:16.082]                           version <- utils::packageVersion("future")
[16:21:16.082]                       }
[16:21:16.082]                       else {
[16:21:16.082]                         version <- NULL
[16:21:16.082]                       }
[16:21:16.082]                       if (!has_future || version < "1.8.0") {
[16:21:16.082]                         info <- base::c(r_version = base::gsub("R version ", 
[16:21:16.082]                           "", base::R.version$version.string), 
[16:21:16.082]                           platform = base::sprintf("%s (%s-bit)", 
[16:21:16.082]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:16.082]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:16.082]                             "release", "version")], collapse = " "), 
[16:21:16.082]                           hostname = base::Sys.info()[["nodename"]])
[16:21:16.082]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:21:16.082]                           info)
[16:21:16.082]                         info <- base::paste(info, collapse = "; ")
[16:21:16.082]                         if (!has_future) {
[16:21:16.082]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:16.082]                             info)
[16:21:16.082]                         }
[16:21:16.082]                         else {
[16:21:16.082]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:16.082]                             info, version)
[16:21:16.082]                         }
[16:21:16.082]                         base::stop(msg)
[16:21:16.082]                       }
[16:21:16.082]                     })
[16:21:16.082]                   }
[16:21:16.082]                   ...future.strategy.old <- future::plan("list")
[16:21:16.082]                   options(future.plan = NULL)
[16:21:16.082]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:16.082]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:16.082]                 }
[16:21:16.082]                 ...future.workdir <- getwd()
[16:21:16.082]             }
[16:21:16.082]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:16.082]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:16.082]         }
[16:21:16.082]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:16.082]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:16.082]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:16.082]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:16.082]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:16.082]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:16.082]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:16.082]             base::names(...future.oldOptions))
[16:21:16.082]     }
[16:21:16.082]     if (FALSE) {
[16:21:16.082]     }
[16:21:16.082]     else {
[16:21:16.082]         if (TRUE) {
[16:21:16.082]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:16.082]                 open = "w")
[16:21:16.082]         }
[16:21:16.082]         else {
[16:21:16.082]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:16.082]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:16.082]         }
[16:21:16.082]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:16.082]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:16.082]             base::sink(type = "output", split = FALSE)
[16:21:16.082]             base::close(...future.stdout)
[16:21:16.082]         }, add = TRUE)
[16:21:16.082]     }
[16:21:16.082]     ...future.frame <- base::sys.nframe()
[16:21:16.082]     ...future.conditions <- base::list()
[16:21:16.082]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:16.082]     if (FALSE) {
[16:21:16.082]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:16.082]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:16.082]     }
[16:21:16.082]     ...future.result <- base::tryCatch({
[16:21:16.082]         base::withCallingHandlers({
[16:21:16.082]             ...future.value <- base::withVisible(base::local({
[16:21:16.082]                 ii
[16:21:16.082]             }))
[16:21:16.082]             future::FutureResult(value = ...future.value$value, 
[16:21:16.082]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:16.082]                   ...future.rng), globalenv = if (FALSE) 
[16:21:16.082]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:16.082]                     ...future.globalenv.names))
[16:21:16.082]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:16.082]         }, condition = base::local({
[16:21:16.082]             c <- base::c
[16:21:16.082]             inherits <- base::inherits
[16:21:16.082]             invokeRestart <- base::invokeRestart
[16:21:16.082]             length <- base::length
[16:21:16.082]             list <- base::list
[16:21:16.082]             seq.int <- base::seq.int
[16:21:16.082]             signalCondition <- base::signalCondition
[16:21:16.082]             sys.calls <- base::sys.calls
[16:21:16.082]             `[[` <- base::`[[`
[16:21:16.082]             `+` <- base::`+`
[16:21:16.082]             `<<-` <- base::`<<-`
[16:21:16.082]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:16.082]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:16.082]                   3L)]
[16:21:16.082]             }
[16:21:16.082]             function(cond) {
[16:21:16.082]                 is_error <- inherits(cond, "error")
[16:21:16.082]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:16.082]                   NULL)
[16:21:16.082]                 if (is_error) {
[16:21:16.082]                   sessionInformation <- function() {
[16:21:16.082]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:16.082]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:16.082]                       search = base::search(), system = base::Sys.info())
[16:21:16.082]                   }
[16:21:16.082]                   ...future.conditions[[length(...future.conditions) + 
[16:21:16.082]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:16.082]                     cond$call), session = sessionInformation(), 
[16:21:16.082]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:16.082]                   signalCondition(cond)
[16:21:16.082]                 }
[16:21:16.082]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:16.082]                 "immediateCondition"))) {
[16:21:16.082]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:16.082]                   ...future.conditions[[length(...future.conditions) + 
[16:21:16.082]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:16.082]                   if (TRUE && !signal) {
[16:21:16.082]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.082]                     {
[16:21:16.082]                       inherits <- base::inherits
[16:21:16.082]                       invokeRestart <- base::invokeRestart
[16:21:16.082]                       is.null <- base::is.null
[16:21:16.082]                       muffled <- FALSE
[16:21:16.082]                       if (inherits(cond, "message")) {
[16:21:16.082]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:16.082]                         if (muffled) 
[16:21:16.082]                           invokeRestart("muffleMessage")
[16:21:16.082]                       }
[16:21:16.082]                       else if (inherits(cond, "warning")) {
[16:21:16.082]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:16.082]                         if (muffled) 
[16:21:16.082]                           invokeRestart("muffleWarning")
[16:21:16.082]                       }
[16:21:16.082]                       else if (inherits(cond, "condition")) {
[16:21:16.082]                         if (!is.null(pattern)) {
[16:21:16.082]                           computeRestarts <- base::computeRestarts
[16:21:16.082]                           grepl <- base::grepl
[16:21:16.082]                           restarts <- computeRestarts(cond)
[16:21:16.082]                           for (restart in restarts) {
[16:21:16.082]                             name <- restart$name
[16:21:16.082]                             if (is.null(name)) 
[16:21:16.082]                               next
[16:21:16.082]                             if (!grepl(pattern, name)) 
[16:21:16.082]                               next
[16:21:16.082]                             invokeRestart(restart)
[16:21:16.082]                             muffled <- TRUE
[16:21:16.082]                             break
[16:21:16.082]                           }
[16:21:16.082]                         }
[16:21:16.082]                       }
[16:21:16.082]                       invisible(muffled)
[16:21:16.082]                     }
[16:21:16.082]                     muffleCondition(cond, pattern = "^muffle")
[16:21:16.082]                   }
[16:21:16.082]                 }
[16:21:16.082]                 else {
[16:21:16.082]                   if (TRUE) {
[16:21:16.082]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.082]                     {
[16:21:16.082]                       inherits <- base::inherits
[16:21:16.082]                       invokeRestart <- base::invokeRestart
[16:21:16.082]                       is.null <- base::is.null
[16:21:16.082]                       muffled <- FALSE
[16:21:16.082]                       if (inherits(cond, "message")) {
[16:21:16.082]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:16.082]                         if (muffled) 
[16:21:16.082]                           invokeRestart("muffleMessage")
[16:21:16.082]                       }
[16:21:16.082]                       else if (inherits(cond, "warning")) {
[16:21:16.082]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:16.082]                         if (muffled) 
[16:21:16.082]                           invokeRestart("muffleWarning")
[16:21:16.082]                       }
[16:21:16.082]                       else if (inherits(cond, "condition")) {
[16:21:16.082]                         if (!is.null(pattern)) {
[16:21:16.082]                           computeRestarts <- base::computeRestarts
[16:21:16.082]                           grepl <- base::grepl
[16:21:16.082]                           restarts <- computeRestarts(cond)
[16:21:16.082]                           for (restart in restarts) {
[16:21:16.082]                             name <- restart$name
[16:21:16.082]                             if (is.null(name)) 
[16:21:16.082]                               next
[16:21:16.082]                             if (!grepl(pattern, name)) 
[16:21:16.082]                               next
[16:21:16.082]                             invokeRestart(restart)
[16:21:16.082]                             muffled <- TRUE
[16:21:16.082]                             break
[16:21:16.082]                           }
[16:21:16.082]                         }
[16:21:16.082]                       }
[16:21:16.082]                       invisible(muffled)
[16:21:16.082]                     }
[16:21:16.082]                     muffleCondition(cond, pattern = "^muffle")
[16:21:16.082]                   }
[16:21:16.082]                 }
[16:21:16.082]             }
[16:21:16.082]         }))
[16:21:16.082]     }, error = function(ex) {
[16:21:16.082]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:16.082]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:16.082]                 ...future.rng), started = ...future.startTime, 
[16:21:16.082]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:16.082]             version = "1.8"), class = "FutureResult")
[16:21:16.082]     }, finally = {
[16:21:16.082]         if (!identical(...future.workdir, getwd())) 
[16:21:16.082]             setwd(...future.workdir)
[16:21:16.082]         {
[16:21:16.082]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:16.082]                 ...future.oldOptions$nwarnings <- NULL
[16:21:16.082]             }
[16:21:16.082]             base::options(...future.oldOptions)
[16:21:16.082]             if (.Platform$OS.type == "windows") {
[16:21:16.082]                 old_names <- names(...future.oldEnvVars)
[16:21:16.082]                 envs <- base::Sys.getenv()
[16:21:16.082]                 names <- names(envs)
[16:21:16.082]                 common <- intersect(names, old_names)
[16:21:16.082]                 added <- setdiff(names, old_names)
[16:21:16.082]                 removed <- setdiff(old_names, names)
[16:21:16.082]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:16.082]                   envs[common]]
[16:21:16.082]                 NAMES <- toupper(changed)
[16:21:16.082]                 args <- list()
[16:21:16.082]                 for (kk in seq_along(NAMES)) {
[16:21:16.082]                   name <- changed[[kk]]
[16:21:16.082]                   NAME <- NAMES[[kk]]
[16:21:16.082]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.082]                     next
[16:21:16.082]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:16.082]                 }
[16:21:16.082]                 NAMES <- toupper(added)
[16:21:16.082]                 for (kk in seq_along(NAMES)) {
[16:21:16.082]                   name <- added[[kk]]
[16:21:16.082]                   NAME <- NAMES[[kk]]
[16:21:16.082]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.082]                     next
[16:21:16.082]                   args[[name]] <- ""
[16:21:16.082]                 }
[16:21:16.082]                 NAMES <- toupper(removed)
[16:21:16.082]                 for (kk in seq_along(NAMES)) {
[16:21:16.082]                   name <- removed[[kk]]
[16:21:16.082]                   NAME <- NAMES[[kk]]
[16:21:16.082]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.082]                     next
[16:21:16.082]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:16.082]                 }
[16:21:16.082]                 if (length(args) > 0) 
[16:21:16.082]                   base::do.call(base::Sys.setenv, args = args)
[16:21:16.082]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:16.082]             }
[16:21:16.082]             else {
[16:21:16.082]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:16.082]             }
[16:21:16.082]             {
[16:21:16.082]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:16.082]                   0L) {
[16:21:16.082]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:16.082]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:16.082]                   base::options(opts)
[16:21:16.082]                 }
[16:21:16.082]                 {
[16:21:16.082]                   {
[16:21:16.082]                     NULL
[16:21:16.082]                     RNGkind("Mersenne-Twister")
[16:21:16.082]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:21:16.082]                       inherits = FALSE)
[16:21:16.082]                   }
[16:21:16.082]                   options(future.plan = NULL)
[16:21:16.082]                   if (is.na(NA_character_)) 
[16:21:16.082]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:16.082]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:16.082]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:16.082]                     .init = FALSE)
[16:21:16.082]                 }
[16:21:16.082]             }
[16:21:16.082]         }
[16:21:16.082]     })
[16:21:16.082]     if (TRUE) {
[16:21:16.082]         base::sink(type = "output", split = FALSE)
[16:21:16.082]         if (TRUE) {
[16:21:16.082]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:16.082]         }
[16:21:16.082]         else {
[16:21:16.082]             ...future.result["stdout"] <- base::list(NULL)
[16:21:16.082]         }
[16:21:16.082]         base::close(...future.stdout)
[16:21:16.082]         ...future.stdout <- NULL
[16:21:16.082]     }
[16:21:16.082]     ...future.result$conditions <- ...future.conditions
[16:21:16.082]     ...future.result$finished <- base::Sys.time()
[16:21:16.082]     ...future.result
[16:21:16.082] }
[16:21:16.083] assign_globals() ...
[16:21:16.083] List of 1
[16:21:16.083]  $ ii: int 2
[16:21:16.083]  - attr(*, "where")=List of 1
[16:21:16.083]   ..$ ii:<environment: R_EmptyEnv> 
[16:21:16.083]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:21:16.083]  - attr(*, "resolved")= logi FALSE
[16:21:16.083]  - attr(*, "total_size")= num 56
[16:21:16.086] - copied ‘ii’ to environment
[16:21:16.086] assign_globals() ... done
[16:21:16.086] plan(): Setting new future strategy stack:
[16:21:16.086] List of future strategies:
[16:21:16.086] 1. sequential:
[16:21:16.086]    - args: function (..., envir = parent.frame())
[16:21:16.086]    - tweaked: FALSE
[16:21:16.086]    - call: NULL
[16:21:16.086] plan(): nbrOfWorkers() = 1
[16:21:16.087] plan(): Setting new future strategy stack:
[16:21:16.087] List of future strategies:
[16:21:16.087] 1. multicore:
[16:21:16.087]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:21:16.087]    - tweaked: FALSE
[16:21:16.087]    - call: plan(multicore)
[16:21:16.090] plan(): nbrOfWorkers() = 1
[16:21:16.091] SequentialFuture started (and completed)
 - Creating multicore future #3 ...
[16:21:16.094] getGlobalsAndPackages() ...
[16:21:16.094] Searching for globals...
[16:21:16.095] - globals found: [2] ‘{’, ‘ii’
[16:21:16.095] Searching for globals ... DONE
[16:21:16.097] Resolving globals: FALSE
[16:21:16.097] The total size of the 1 globals is 56 bytes (56 bytes)
[16:21:16.097] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[16:21:16.098] - globals: [1] ‘ii’
[16:21:16.098] 
[16:21:16.098] getGlobalsAndPackages() ... DONE
[16:21:16.098] Packages needed by the future expression (n = 0): <none>
[16:21:16.098] Packages needed by future strategies (n = 0): <none>
[16:21:16.099] {
[16:21:16.099]     {
[16:21:16.099]         {
[16:21:16.099]             ...future.startTime <- base::Sys.time()
[16:21:16.099]             {
[16:21:16.099]                 {
[16:21:16.099]                   {
[16:21:16.099]                     base::local({
[16:21:16.099]                       has_future <- base::requireNamespace("future", 
[16:21:16.099]                         quietly = TRUE)
[16:21:16.099]                       if (has_future) {
[16:21:16.099]                         ns <- base::getNamespace("future")
[16:21:16.099]                         version <- ns[[".package"]][["version"]]
[16:21:16.099]                         if (is.null(version)) 
[16:21:16.099]                           version <- utils::packageVersion("future")
[16:21:16.099]                       }
[16:21:16.099]                       else {
[16:21:16.099]                         version <- NULL
[16:21:16.099]                       }
[16:21:16.099]                       if (!has_future || version < "1.8.0") {
[16:21:16.099]                         info <- base::c(r_version = base::gsub("R version ", 
[16:21:16.099]                           "", base::R.version$version.string), 
[16:21:16.099]                           platform = base::sprintf("%s (%s-bit)", 
[16:21:16.099]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:16.099]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:16.099]                             "release", "version")], collapse = " "), 
[16:21:16.099]                           hostname = base::Sys.info()[["nodename"]])
[16:21:16.099]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:21:16.099]                           info)
[16:21:16.099]                         info <- base::paste(info, collapse = "; ")
[16:21:16.099]                         if (!has_future) {
[16:21:16.099]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:16.099]                             info)
[16:21:16.099]                         }
[16:21:16.099]                         else {
[16:21:16.099]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:16.099]                             info, version)
[16:21:16.099]                         }
[16:21:16.099]                         base::stop(msg)
[16:21:16.099]                       }
[16:21:16.099]                     })
[16:21:16.099]                   }
[16:21:16.099]                   ...future.strategy.old <- future::plan("list")
[16:21:16.099]                   options(future.plan = NULL)
[16:21:16.099]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:16.099]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:16.099]                 }
[16:21:16.099]                 ...future.workdir <- getwd()
[16:21:16.099]             }
[16:21:16.099]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:16.099]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:16.099]         }
[16:21:16.099]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:16.099]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:16.099]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:16.099]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:16.099]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:16.099]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:16.099]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:16.099]             base::names(...future.oldOptions))
[16:21:16.099]     }
[16:21:16.099]     if (FALSE) {
[16:21:16.099]     }
[16:21:16.099]     else {
[16:21:16.099]         if (TRUE) {
[16:21:16.099]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:16.099]                 open = "w")
[16:21:16.099]         }
[16:21:16.099]         else {
[16:21:16.099]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:16.099]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:16.099]         }
[16:21:16.099]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:16.099]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:16.099]             base::sink(type = "output", split = FALSE)
[16:21:16.099]             base::close(...future.stdout)
[16:21:16.099]         }, add = TRUE)
[16:21:16.099]     }
[16:21:16.099]     ...future.frame <- base::sys.nframe()
[16:21:16.099]     ...future.conditions <- base::list()
[16:21:16.099]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:16.099]     if (FALSE) {
[16:21:16.099]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:16.099]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:16.099]     }
[16:21:16.099]     ...future.result <- base::tryCatch({
[16:21:16.099]         base::withCallingHandlers({
[16:21:16.099]             ...future.value <- base::withVisible(base::local({
[16:21:16.099]                 ii
[16:21:16.099]             }))
[16:21:16.099]             future::FutureResult(value = ...future.value$value, 
[16:21:16.099]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:16.099]                   ...future.rng), globalenv = if (FALSE) 
[16:21:16.099]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:16.099]                     ...future.globalenv.names))
[16:21:16.099]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:16.099]         }, condition = base::local({
[16:21:16.099]             c <- base::c
[16:21:16.099]             inherits <- base::inherits
[16:21:16.099]             invokeRestart <- base::invokeRestart
[16:21:16.099]             length <- base::length
[16:21:16.099]             list <- base::list
[16:21:16.099]             seq.int <- base::seq.int
[16:21:16.099]             signalCondition <- base::signalCondition
[16:21:16.099]             sys.calls <- base::sys.calls
[16:21:16.099]             `[[` <- base::`[[`
[16:21:16.099]             `+` <- base::`+`
[16:21:16.099]             `<<-` <- base::`<<-`
[16:21:16.099]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:16.099]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:16.099]                   3L)]
[16:21:16.099]             }
[16:21:16.099]             function(cond) {
[16:21:16.099]                 is_error <- inherits(cond, "error")
[16:21:16.099]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:16.099]                   NULL)
[16:21:16.099]                 if (is_error) {
[16:21:16.099]                   sessionInformation <- function() {
[16:21:16.099]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:16.099]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:16.099]                       search = base::search(), system = base::Sys.info())
[16:21:16.099]                   }
[16:21:16.099]                   ...future.conditions[[length(...future.conditions) + 
[16:21:16.099]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:16.099]                     cond$call), session = sessionInformation(), 
[16:21:16.099]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:16.099]                   signalCondition(cond)
[16:21:16.099]                 }
[16:21:16.099]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:16.099]                 "immediateCondition"))) {
[16:21:16.099]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:16.099]                   ...future.conditions[[length(...future.conditions) + 
[16:21:16.099]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:16.099]                   if (TRUE && !signal) {
[16:21:16.099]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.099]                     {
[16:21:16.099]                       inherits <- base::inherits
[16:21:16.099]                       invokeRestart <- base::invokeRestart
[16:21:16.099]                       is.null <- base::is.null
[16:21:16.099]                       muffled <- FALSE
[16:21:16.099]                       if (inherits(cond, "message")) {
[16:21:16.099]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:16.099]                         if (muffled) 
[16:21:16.099]                           invokeRestart("muffleMessage")
[16:21:16.099]                       }
[16:21:16.099]                       else if (inherits(cond, "warning")) {
[16:21:16.099]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:16.099]                         if (muffled) 
[16:21:16.099]                           invokeRestart("muffleWarning")
[16:21:16.099]                       }
[16:21:16.099]                       else if (inherits(cond, "condition")) {
[16:21:16.099]                         if (!is.null(pattern)) {
[16:21:16.099]                           computeRestarts <- base::computeRestarts
[16:21:16.099]                           grepl <- base::grepl
[16:21:16.099]                           restarts <- computeRestarts(cond)
[16:21:16.099]                           for (restart in restarts) {
[16:21:16.099]                             name <- restart$name
[16:21:16.099]                             if (is.null(name)) 
[16:21:16.099]                               next
[16:21:16.099]                             if (!grepl(pattern, name)) 
[16:21:16.099]                               next
[16:21:16.099]                             invokeRestart(restart)
[16:21:16.099]                             muffled <- TRUE
[16:21:16.099]                             break
[16:21:16.099]                           }
[16:21:16.099]                         }
[16:21:16.099]                       }
[16:21:16.099]                       invisible(muffled)
[16:21:16.099]                     }
[16:21:16.099]                     muffleCondition(cond, pattern = "^muffle")
[16:21:16.099]                   }
[16:21:16.099]                 }
[16:21:16.099]                 else {
[16:21:16.099]                   if (TRUE) {
[16:21:16.099]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.099]                     {
[16:21:16.099]                       inherits <- base::inherits
[16:21:16.099]                       invokeRestart <- base::invokeRestart
[16:21:16.099]                       is.null <- base::is.null
[16:21:16.099]                       muffled <- FALSE
[16:21:16.099]                       if (inherits(cond, "message")) {
[16:21:16.099]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:16.099]                         if (muffled) 
[16:21:16.099]                           invokeRestart("muffleMessage")
[16:21:16.099]                       }
[16:21:16.099]                       else if (inherits(cond, "warning")) {
[16:21:16.099]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:16.099]                         if (muffled) 
[16:21:16.099]                           invokeRestart("muffleWarning")
[16:21:16.099]                       }
[16:21:16.099]                       else if (inherits(cond, "condition")) {
[16:21:16.099]                         if (!is.null(pattern)) {
[16:21:16.099]                           computeRestarts <- base::computeRestarts
[16:21:16.099]                           grepl <- base::grepl
[16:21:16.099]                           restarts <- computeRestarts(cond)
[16:21:16.099]                           for (restart in restarts) {
[16:21:16.099]                             name <- restart$name
[16:21:16.099]                             if (is.null(name)) 
[16:21:16.099]                               next
[16:21:16.099]                             if (!grepl(pattern, name)) 
[16:21:16.099]                               next
[16:21:16.099]                             invokeRestart(restart)
[16:21:16.099]                             muffled <- TRUE
[16:21:16.099]                             break
[16:21:16.099]                           }
[16:21:16.099]                         }
[16:21:16.099]                       }
[16:21:16.099]                       invisible(muffled)
[16:21:16.099]                     }
[16:21:16.099]                     muffleCondition(cond, pattern = "^muffle")
[16:21:16.099]                   }
[16:21:16.099]                 }
[16:21:16.099]             }
[16:21:16.099]         }))
[16:21:16.099]     }, error = function(ex) {
[16:21:16.099]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:16.099]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:16.099]                 ...future.rng), started = ...future.startTime, 
[16:21:16.099]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:16.099]             version = "1.8"), class = "FutureResult")
[16:21:16.099]     }, finally = {
[16:21:16.099]         if (!identical(...future.workdir, getwd())) 
[16:21:16.099]             setwd(...future.workdir)
[16:21:16.099]         {
[16:21:16.099]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:16.099]                 ...future.oldOptions$nwarnings <- NULL
[16:21:16.099]             }
[16:21:16.099]             base::options(...future.oldOptions)
[16:21:16.099]             if (.Platform$OS.type == "windows") {
[16:21:16.099]                 old_names <- names(...future.oldEnvVars)
[16:21:16.099]                 envs <- base::Sys.getenv()
[16:21:16.099]                 names <- names(envs)
[16:21:16.099]                 common <- intersect(names, old_names)
[16:21:16.099]                 added <- setdiff(names, old_names)
[16:21:16.099]                 removed <- setdiff(old_names, names)
[16:21:16.099]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:16.099]                   envs[common]]
[16:21:16.099]                 NAMES <- toupper(changed)
[16:21:16.099]                 args <- list()
[16:21:16.099]                 for (kk in seq_along(NAMES)) {
[16:21:16.099]                   name <- changed[[kk]]
[16:21:16.099]                   NAME <- NAMES[[kk]]
[16:21:16.099]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.099]                     next
[16:21:16.099]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:16.099]                 }
[16:21:16.099]                 NAMES <- toupper(added)
[16:21:16.099]                 for (kk in seq_along(NAMES)) {
[16:21:16.099]                   name <- added[[kk]]
[16:21:16.099]                   NAME <- NAMES[[kk]]
[16:21:16.099]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.099]                     next
[16:21:16.099]                   args[[name]] <- ""
[16:21:16.099]                 }
[16:21:16.099]                 NAMES <- toupper(removed)
[16:21:16.099]                 for (kk in seq_along(NAMES)) {
[16:21:16.099]                   name <- removed[[kk]]
[16:21:16.099]                   NAME <- NAMES[[kk]]
[16:21:16.099]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.099]                     next
[16:21:16.099]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:16.099]                 }
[16:21:16.099]                 if (length(args) > 0) 
[16:21:16.099]                   base::do.call(base::Sys.setenv, args = args)
[16:21:16.099]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:16.099]             }
[16:21:16.099]             else {
[16:21:16.099]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:16.099]             }
[16:21:16.099]             {
[16:21:16.099]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:16.099]                   0L) {
[16:21:16.099]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:16.099]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:16.099]                   base::options(opts)
[16:21:16.099]                 }
[16:21:16.099]                 {
[16:21:16.099]                   {
[16:21:16.099]                     NULL
[16:21:16.099]                     RNGkind("Mersenne-Twister")
[16:21:16.099]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:21:16.099]                       inherits = FALSE)
[16:21:16.099]                   }
[16:21:16.099]                   options(future.plan = NULL)
[16:21:16.099]                   if (is.na(NA_character_)) 
[16:21:16.099]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:16.099]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:16.099]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:16.099]                     .init = FALSE)
[16:21:16.099]                 }
[16:21:16.099]             }
[16:21:16.099]         }
[16:21:16.099]     })
[16:21:16.099]     if (TRUE) {
[16:21:16.099]         base::sink(type = "output", split = FALSE)
[16:21:16.099]         if (TRUE) {
[16:21:16.099]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:16.099]         }
[16:21:16.099]         else {
[16:21:16.099]             ...future.result["stdout"] <- base::list(NULL)
[16:21:16.099]         }
[16:21:16.099]         base::close(...future.stdout)
[16:21:16.099]         ...future.stdout <- NULL
[16:21:16.099]     }
[16:21:16.099]     ...future.result$conditions <- ...future.conditions
[16:21:16.099]     ...future.result$finished <- base::Sys.time()
[16:21:16.099]     ...future.result
[16:21:16.099] }
[16:21:16.100] assign_globals() ...
[16:21:16.100] List of 1
[16:21:16.100]  $ ii: int 3
[16:21:16.100]  - attr(*, "where")=List of 1
[16:21:16.100]   ..$ ii:<environment: R_EmptyEnv> 
[16:21:16.100]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:21:16.100]  - attr(*, "resolved")= logi FALSE
[16:21:16.100]  - attr(*, "total_size")= num 56
[16:21:16.102] - copied ‘ii’ to environment
[16:21:16.102] assign_globals() ... done
[16:21:16.103] plan(): Setting new future strategy stack:
[16:21:16.103] List of future strategies:
[16:21:16.103] 1. sequential:
[16:21:16.103]    - args: function (..., envir = parent.frame())
[16:21:16.103]    - tweaked: FALSE
[16:21:16.103]    - call: NULL
[16:21:16.103] plan(): nbrOfWorkers() = 1
[16:21:16.104] plan(): Setting new future strategy stack:
[16:21:16.104] List of future strategies:
[16:21:16.104] 1. multicore:
[16:21:16.104]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:21:16.104]    - tweaked: FALSE
[16:21:16.104]    - call: plan(multicore)
[16:21:16.107] plan(): nbrOfWorkers() = 1
[16:21:16.107] SequentialFuture started (and completed)
 - Creating multicore future #4 ...
[16:21:16.111] getGlobalsAndPackages() ...
[16:21:16.111] Searching for globals...
[16:21:16.112] - globals found: [2] ‘{’, ‘ii’
[16:21:16.112] Searching for globals ... DONE
[16:21:16.112] Resolving globals: FALSE
[16:21:16.112] The total size of the 1 globals is 56 bytes (56 bytes)
[16:21:16.112] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[16:21:16.113] - globals: [1] ‘ii’
[16:21:16.113] 
[16:21:16.113] getGlobalsAndPackages() ... DONE
[16:21:16.113] Packages needed by the future expression (n = 0): <none>
[16:21:16.113] Packages needed by future strategies (n = 0): <none>
[16:21:16.114] {
[16:21:16.114]     {
[16:21:16.114]         {
[16:21:16.114]             ...future.startTime <- base::Sys.time()
[16:21:16.114]             {
[16:21:16.114]                 {
[16:21:16.114]                   {
[16:21:16.114]                     base::local({
[16:21:16.114]                       has_future <- base::requireNamespace("future", 
[16:21:16.114]                         quietly = TRUE)
[16:21:16.114]                       if (has_future) {
[16:21:16.114]                         ns <- base::getNamespace("future")
[16:21:16.114]                         version <- ns[[".package"]][["version"]]
[16:21:16.114]                         if (is.null(version)) 
[16:21:16.114]                           version <- utils::packageVersion("future")
[16:21:16.114]                       }
[16:21:16.114]                       else {
[16:21:16.114]                         version <- NULL
[16:21:16.114]                       }
[16:21:16.114]                       if (!has_future || version < "1.8.0") {
[16:21:16.114]                         info <- base::c(r_version = base::gsub("R version ", 
[16:21:16.114]                           "", base::R.version$version.string), 
[16:21:16.114]                           platform = base::sprintf("%s (%s-bit)", 
[16:21:16.114]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:16.114]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:16.114]                             "release", "version")], collapse = " "), 
[16:21:16.114]                           hostname = base::Sys.info()[["nodename"]])
[16:21:16.114]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:21:16.114]                           info)
[16:21:16.114]                         info <- base::paste(info, collapse = "; ")
[16:21:16.114]                         if (!has_future) {
[16:21:16.114]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:16.114]                             info)
[16:21:16.114]                         }
[16:21:16.114]                         else {
[16:21:16.114]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:16.114]                             info, version)
[16:21:16.114]                         }
[16:21:16.114]                         base::stop(msg)
[16:21:16.114]                       }
[16:21:16.114]                     })
[16:21:16.114]                   }
[16:21:16.114]                   ...future.strategy.old <- future::plan("list")
[16:21:16.114]                   options(future.plan = NULL)
[16:21:16.114]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:16.114]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:16.114]                 }
[16:21:16.114]                 ...future.workdir <- getwd()
[16:21:16.114]             }
[16:21:16.114]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:16.114]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:16.114]         }
[16:21:16.114]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:16.114]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:16.114]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:16.114]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:16.114]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:16.114]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:16.114]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:16.114]             base::names(...future.oldOptions))
[16:21:16.114]     }
[16:21:16.114]     if (FALSE) {
[16:21:16.114]     }
[16:21:16.114]     else {
[16:21:16.114]         if (TRUE) {
[16:21:16.114]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:16.114]                 open = "w")
[16:21:16.114]         }
[16:21:16.114]         else {
[16:21:16.114]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:16.114]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:16.114]         }
[16:21:16.114]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:16.114]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:16.114]             base::sink(type = "output", split = FALSE)
[16:21:16.114]             base::close(...future.stdout)
[16:21:16.114]         }, add = TRUE)
[16:21:16.114]     }
[16:21:16.114]     ...future.frame <- base::sys.nframe()
[16:21:16.114]     ...future.conditions <- base::list()
[16:21:16.114]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:16.114]     if (FALSE) {
[16:21:16.114]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:16.114]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:16.114]     }
[16:21:16.114]     ...future.result <- base::tryCatch({
[16:21:16.114]         base::withCallingHandlers({
[16:21:16.114]             ...future.value <- base::withVisible(base::local({
[16:21:16.114]                 ii
[16:21:16.114]             }))
[16:21:16.114]             future::FutureResult(value = ...future.value$value, 
[16:21:16.114]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:16.114]                   ...future.rng), globalenv = if (FALSE) 
[16:21:16.114]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:16.114]                     ...future.globalenv.names))
[16:21:16.114]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:16.114]         }, condition = base::local({
[16:21:16.114]             c <- base::c
[16:21:16.114]             inherits <- base::inherits
[16:21:16.114]             invokeRestart <- base::invokeRestart
[16:21:16.114]             length <- base::length
[16:21:16.114]             list <- base::list
[16:21:16.114]             seq.int <- base::seq.int
[16:21:16.114]             signalCondition <- base::signalCondition
[16:21:16.114]             sys.calls <- base::sys.calls
[16:21:16.114]             `[[` <- base::`[[`
[16:21:16.114]             `+` <- base::`+`
[16:21:16.114]             `<<-` <- base::`<<-`
[16:21:16.114]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:16.114]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:16.114]                   3L)]
[16:21:16.114]             }
[16:21:16.114]             function(cond) {
[16:21:16.114]                 is_error <- inherits(cond, "error")
[16:21:16.114]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:16.114]                   NULL)
[16:21:16.114]                 if (is_error) {
[16:21:16.114]                   sessionInformation <- function() {
[16:21:16.114]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:16.114]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:16.114]                       search = base::search(), system = base::Sys.info())
[16:21:16.114]                   }
[16:21:16.114]                   ...future.conditions[[length(...future.conditions) + 
[16:21:16.114]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:16.114]                     cond$call), session = sessionInformation(), 
[16:21:16.114]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:16.114]                   signalCondition(cond)
[16:21:16.114]                 }
[16:21:16.114]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:16.114]                 "immediateCondition"))) {
[16:21:16.114]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:16.114]                   ...future.conditions[[length(...future.conditions) + 
[16:21:16.114]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:16.114]                   if (TRUE && !signal) {
[16:21:16.114]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.114]                     {
[16:21:16.114]                       inherits <- base::inherits
[16:21:16.114]                       invokeRestart <- base::invokeRestart
[16:21:16.114]                       is.null <- base::is.null
[16:21:16.114]                       muffled <- FALSE
[16:21:16.114]                       if (inherits(cond, "message")) {
[16:21:16.114]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:16.114]                         if (muffled) 
[16:21:16.114]                           invokeRestart("muffleMessage")
[16:21:16.114]                       }
[16:21:16.114]                       else if (inherits(cond, "warning")) {
[16:21:16.114]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:16.114]                         if (muffled) 
[16:21:16.114]                           invokeRestart("muffleWarning")
[16:21:16.114]                       }
[16:21:16.114]                       else if (inherits(cond, "condition")) {
[16:21:16.114]                         if (!is.null(pattern)) {
[16:21:16.114]                           computeRestarts <- base::computeRestarts
[16:21:16.114]                           grepl <- base::grepl
[16:21:16.114]                           restarts <- computeRestarts(cond)
[16:21:16.114]                           for (restart in restarts) {
[16:21:16.114]                             name <- restart$name
[16:21:16.114]                             if (is.null(name)) 
[16:21:16.114]                               next
[16:21:16.114]                             if (!grepl(pattern, name)) 
[16:21:16.114]                               next
[16:21:16.114]                             invokeRestart(restart)
[16:21:16.114]                             muffled <- TRUE
[16:21:16.114]                             break
[16:21:16.114]                           }
[16:21:16.114]                         }
[16:21:16.114]                       }
[16:21:16.114]                       invisible(muffled)
[16:21:16.114]                     }
[16:21:16.114]                     muffleCondition(cond, pattern = "^muffle")
[16:21:16.114]                   }
[16:21:16.114]                 }
[16:21:16.114]                 else {
[16:21:16.114]                   if (TRUE) {
[16:21:16.114]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.114]                     {
[16:21:16.114]                       inherits <- base::inherits
[16:21:16.114]                       invokeRestart <- base::invokeRestart
[16:21:16.114]                       is.null <- base::is.null
[16:21:16.114]                       muffled <- FALSE
[16:21:16.114]                       if (inherits(cond, "message")) {
[16:21:16.114]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:16.114]                         if (muffled) 
[16:21:16.114]                           invokeRestart("muffleMessage")
[16:21:16.114]                       }
[16:21:16.114]                       else if (inherits(cond, "warning")) {
[16:21:16.114]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:16.114]                         if (muffled) 
[16:21:16.114]                           invokeRestart("muffleWarning")
[16:21:16.114]                       }
[16:21:16.114]                       else if (inherits(cond, "condition")) {
[16:21:16.114]                         if (!is.null(pattern)) {
[16:21:16.114]                           computeRestarts <- base::computeRestarts
[16:21:16.114]                           grepl <- base::grepl
[16:21:16.114]                           restarts <- computeRestarts(cond)
[16:21:16.114]                           for (restart in restarts) {
[16:21:16.114]                             name <- restart$name
[16:21:16.114]                             if (is.null(name)) 
[16:21:16.114]                               next
[16:21:16.114]                             if (!grepl(pattern, name)) 
[16:21:16.114]                               next
[16:21:16.114]                             invokeRestart(restart)
[16:21:16.114]                             muffled <- TRUE
[16:21:16.114]                             break
[16:21:16.114]                           }
[16:21:16.114]                         }
[16:21:16.114]                       }
[16:21:16.114]                       invisible(muffled)
[16:21:16.114]                     }
[16:21:16.114]                     muffleCondition(cond, pattern = "^muffle")
[16:21:16.114]                   }
[16:21:16.114]                 }
[16:21:16.114]             }
[16:21:16.114]         }))
[16:21:16.114]     }, error = function(ex) {
[16:21:16.114]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:16.114]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:16.114]                 ...future.rng), started = ...future.startTime, 
[16:21:16.114]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:16.114]             version = "1.8"), class = "FutureResult")
[16:21:16.114]     }, finally = {
[16:21:16.114]         if (!identical(...future.workdir, getwd())) 
[16:21:16.114]             setwd(...future.workdir)
[16:21:16.114]         {
[16:21:16.114]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:16.114]                 ...future.oldOptions$nwarnings <- NULL
[16:21:16.114]             }
[16:21:16.114]             base::options(...future.oldOptions)
[16:21:16.114]             if (.Platform$OS.type == "windows") {
[16:21:16.114]                 old_names <- names(...future.oldEnvVars)
[16:21:16.114]                 envs <- base::Sys.getenv()
[16:21:16.114]                 names <- names(envs)
[16:21:16.114]                 common <- intersect(names, old_names)
[16:21:16.114]                 added <- setdiff(names, old_names)
[16:21:16.114]                 removed <- setdiff(old_names, names)
[16:21:16.114]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:16.114]                   envs[common]]
[16:21:16.114]                 NAMES <- toupper(changed)
[16:21:16.114]                 args <- list()
[16:21:16.114]                 for (kk in seq_along(NAMES)) {
[16:21:16.114]                   name <- changed[[kk]]
[16:21:16.114]                   NAME <- NAMES[[kk]]
[16:21:16.114]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.114]                     next
[16:21:16.114]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:16.114]                 }
[16:21:16.114]                 NAMES <- toupper(added)
[16:21:16.114]                 for (kk in seq_along(NAMES)) {
[16:21:16.114]                   name <- added[[kk]]
[16:21:16.114]                   NAME <- NAMES[[kk]]
[16:21:16.114]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.114]                     next
[16:21:16.114]                   args[[name]] <- ""
[16:21:16.114]                 }
[16:21:16.114]                 NAMES <- toupper(removed)
[16:21:16.114]                 for (kk in seq_along(NAMES)) {
[16:21:16.114]                   name <- removed[[kk]]
[16:21:16.114]                   NAME <- NAMES[[kk]]
[16:21:16.114]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.114]                     next
[16:21:16.114]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:16.114]                 }
[16:21:16.114]                 if (length(args) > 0) 
[16:21:16.114]                   base::do.call(base::Sys.setenv, args = args)
[16:21:16.114]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:16.114]             }
[16:21:16.114]             else {
[16:21:16.114]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:16.114]             }
[16:21:16.114]             {
[16:21:16.114]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:16.114]                   0L) {
[16:21:16.114]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:16.114]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:16.114]                   base::options(opts)
[16:21:16.114]                 }
[16:21:16.114]                 {
[16:21:16.114]                   {
[16:21:16.114]                     NULL
[16:21:16.114]                     RNGkind("Mersenne-Twister")
[16:21:16.114]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:21:16.114]                       inherits = FALSE)
[16:21:16.114]                   }
[16:21:16.114]                   options(future.plan = NULL)
[16:21:16.114]                   if (is.na(NA_character_)) 
[16:21:16.114]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:16.114]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:16.114]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:16.114]                     .init = FALSE)
[16:21:16.114]                 }
[16:21:16.114]             }
[16:21:16.114]         }
[16:21:16.114]     })
[16:21:16.114]     if (TRUE) {
[16:21:16.114]         base::sink(type = "output", split = FALSE)
[16:21:16.114]         if (TRUE) {
[16:21:16.114]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:16.114]         }
[16:21:16.114]         else {
[16:21:16.114]             ...future.result["stdout"] <- base::list(NULL)
[16:21:16.114]         }
[16:21:16.114]         base::close(...future.stdout)
[16:21:16.114]         ...future.stdout <- NULL
[16:21:16.114]     }
[16:21:16.114]     ...future.result$conditions <- ...future.conditions
[16:21:16.114]     ...future.result$finished <- base::Sys.time()
[16:21:16.114]     ...future.result
[16:21:16.114] }
[16:21:16.115] assign_globals() ...
[16:21:16.115] List of 1
[16:21:16.115]  $ ii: int 4
[16:21:16.115]  - attr(*, "where")=List of 1
[16:21:16.115]   ..$ ii:<environment: R_EmptyEnv> 
[16:21:16.115]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:21:16.115]  - attr(*, "resolved")= logi FALSE
[16:21:16.115]  - attr(*, "total_size")= num 56
[16:21:16.117] - copied ‘ii’ to environment
[16:21:16.117] assign_globals() ... done
[16:21:16.118] plan(): Setting new future strategy stack:
[16:21:16.118] List of future strategies:
[16:21:16.118] 1. sequential:
[16:21:16.118]    - args: function (..., envir = parent.frame())
[16:21:16.118]    - tweaked: FALSE
[16:21:16.118]    - call: NULL
[16:21:16.118] plan(): nbrOfWorkers() = 1
[16:21:16.119] plan(): Setting new future strategy stack:
[16:21:16.119] List of future strategies:
[16:21:16.119] 1. multicore:
[16:21:16.119]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:21:16.119]    - tweaked: FALSE
[16:21:16.119]    - call: plan(multicore)
[16:21:16.122] plan(): nbrOfWorkers() = 1
[16:21:16.122] SequentialFuture started (and completed)
 - Resolving 4 multicore futures
*** multicore(..., globals = TRUE) and errors
[16:21:16.126] getGlobalsAndPackages() ...
[16:21:16.126] Searching for globals...
[16:21:16.127] - globals found: [2] ‘{’, ‘stop’
[16:21:16.127] Searching for globals ... DONE
[16:21:16.127] Resolving globals: FALSE
[16:21:16.128] 
[16:21:16.128] 
[16:21:16.128] getGlobalsAndPackages() ... DONE
[16:21:16.128] Packages needed by the future expression (n = 0): <none>
[16:21:16.128] Packages needed by future strategies (n = 0): <none>
[16:21:16.129] {
[16:21:16.129]     {
[16:21:16.129]         {
[16:21:16.129]             ...future.startTime <- base::Sys.time()
[16:21:16.129]             {
[16:21:16.129]                 {
[16:21:16.129]                   {
[16:21:16.129]                     base::local({
[16:21:16.129]                       has_future <- base::requireNamespace("future", 
[16:21:16.129]                         quietly = TRUE)
[16:21:16.129]                       if (has_future) {
[16:21:16.129]                         ns <- base::getNamespace("future")
[16:21:16.129]                         version <- ns[[".package"]][["version"]]
[16:21:16.129]                         if (is.null(version)) 
[16:21:16.129]                           version <- utils::packageVersion("future")
[16:21:16.129]                       }
[16:21:16.129]                       else {
[16:21:16.129]                         version <- NULL
[16:21:16.129]                       }
[16:21:16.129]                       if (!has_future || version < "1.8.0") {
[16:21:16.129]                         info <- base::c(r_version = base::gsub("R version ", 
[16:21:16.129]                           "", base::R.version$version.string), 
[16:21:16.129]                           platform = base::sprintf("%s (%s-bit)", 
[16:21:16.129]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:16.129]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:16.129]                             "release", "version")], collapse = " "), 
[16:21:16.129]                           hostname = base::Sys.info()[["nodename"]])
[16:21:16.129]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:21:16.129]                           info)
[16:21:16.129]                         info <- base::paste(info, collapse = "; ")
[16:21:16.129]                         if (!has_future) {
[16:21:16.129]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:16.129]                             info)
[16:21:16.129]                         }
[16:21:16.129]                         else {
[16:21:16.129]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:16.129]                             info, version)
[16:21:16.129]                         }
[16:21:16.129]                         base::stop(msg)
[16:21:16.129]                       }
[16:21:16.129]                     })
[16:21:16.129]                   }
[16:21:16.129]                   ...future.strategy.old <- future::plan("list")
[16:21:16.129]                   options(future.plan = NULL)
[16:21:16.129]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:16.129]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:16.129]                 }
[16:21:16.129]                 ...future.workdir <- getwd()
[16:21:16.129]             }
[16:21:16.129]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:16.129]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:16.129]         }
[16:21:16.129]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:16.129]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:16.129]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:16.129]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:16.129]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:16.129]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:16.129]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:16.129]             base::names(...future.oldOptions))
[16:21:16.129]     }
[16:21:16.129]     if (FALSE) {
[16:21:16.129]     }
[16:21:16.129]     else {
[16:21:16.129]         if (TRUE) {
[16:21:16.129]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:16.129]                 open = "w")
[16:21:16.129]         }
[16:21:16.129]         else {
[16:21:16.129]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:16.129]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:16.129]         }
[16:21:16.129]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:16.129]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:16.129]             base::sink(type = "output", split = FALSE)
[16:21:16.129]             base::close(...future.stdout)
[16:21:16.129]         }, add = TRUE)
[16:21:16.129]     }
[16:21:16.129]     ...future.frame <- base::sys.nframe()
[16:21:16.129]     ...future.conditions <- base::list()
[16:21:16.129]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:16.129]     if (FALSE) {
[16:21:16.129]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:16.129]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:16.129]     }
[16:21:16.129]     ...future.result <- base::tryCatch({
[16:21:16.129]         base::withCallingHandlers({
[16:21:16.129]             ...future.value <- base::withVisible(base::local({
[16:21:16.129]                 stop("Whoops!")
[16:21:16.129]                 1
[16:21:16.129]             }))
[16:21:16.129]             future::FutureResult(value = ...future.value$value, 
[16:21:16.129]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:16.129]                   ...future.rng), globalenv = if (FALSE) 
[16:21:16.129]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:16.129]                     ...future.globalenv.names))
[16:21:16.129]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:16.129]         }, condition = base::local({
[16:21:16.129]             c <- base::c
[16:21:16.129]             inherits <- base::inherits
[16:21:16.129]             invokeRestart <- base::invokeRestart
[16:21:16.129]             length <- base::length
[16:21:16.129]             list <- base::list
[16:21:16.129]             seq.int <- base::seq.int
[16:21:16.129]             signalCondition <- base::signalCondition
[16:21:16.129]             sys.calls <- base::sys.calls
[16:21:16.129]             `[[` <- base::`[[`
[16:21:16.129]             `+` <- base::`+`
[16:21:16.129]             `<<-` <- base::`<<-`
[16:21:16.129]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:16.129]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:16.129]                   3L)]
[16:21:16.129]             }
[16:21:16.129]             function(cond) {
[16:21:16.129]                 is_error <- inherits(cond, "error")
[16:21:16.129]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:16.129]                   NULL)
[16:21:16.129]                 if (is_error) {
[16:21:16.129]                   sessionInformation <- function() {
[16:21:16.129]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:16.129]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:16.129]                       search = base::search(), system = base::Sys.info())
[16:21:16.129]                   }
[16:21:16.129]                   ...future.conditions[[length(...future.conditions) + 
[16:21:16.129]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:16.129]                     cond$call), session = sessionInformation(), 
[16:21:16.129]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:16.129]                   signalCondition(cond)
[16:21:16.129]                 }
[16:21:16.129]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:16.129]                 "immediateCondition"))) {
[16:21:16.129]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:16.129]                   ...future.conditions[[length(...future.conditions) + 
[16:21:16.129]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:16.129]                   if (TRUE && !signal) {
[16:21:16.129]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.129]                     {
[16:21:16.129]                       inherits <- base::inherits
[16:21:16.129]                       invokeRestart <- base::invokeRestart
[16:21:16.129]                       is.null <- base::is.null
[16:21:16.129]                       muffled <- FALSE
[16:21:16.129]                       if (inherits(cond, "message")) {
[16:21:16.129]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:16.129]                         if (muffled) 
[16:21:16.129]                           invokeRestart("muffleMessage")
[16:21:16.129]                       }
[16:21:16.129]                       else if (inherits(cond, "warning")) {
[16:21:16.129]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:16.129]                         if (muffled) 
[16:21:16.129]                           invokeRestart("muffleWarning")
[16:21:16.129]                       }
[16:21:16.129]                       else if (inherits(cond, "condition")) {
[16:21:16.129]                         if (!is.null(pattern)) {
[16:21:16.129]                           computeRestarts <- base::computeRestarts
[16:21:16.129]                           grepl <- base::grepl
[16:21:16.129]                           restarts <- computeRestarts(cond)
[16:21:16.129]                           for (restart in restarts) {
[16:21:16.129]                             name <- restart$name
[16:21:16.129]                             if (is.null(name)) 
[16:21:16.129]                               next
[16:21:16.129]                             if (!grepl(pattern, name)) 
[16:21:16.129]                               next
[16:21:16.129]                             invokeRestart(restart)
[16:21:16.129]                             muffled <- TRUE
[16:21:16.129]                             break
[16:21:16.129]                           }
[16:21:16.129]                         }
[16:21:16.129]                       }
[16:21:16.129]                       invisible(muffled)
[16:21:16.129]                     }
[16:21:16.129]                     muffleCondition(cond, pattern = "^muffle")
[16:21:16.129]                   }
[16:21:16.129]                 }
[16:21:16.129]                 else {
[16:21:16.129]                   if (TRUE) {
[16:21:16.129]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.129]                     {
[16:21:16.129]                       inherits <- base::inherits
[16:21:16.129]                       invokeRestart <- base::invokeRestart
[16:21:16.129]                       is.null <- base::is.null
[16:21:16.129]                       muffled <- FALSE
[16:21:16.129]                       if (inherits(cond, "message")) {
[16:21:16.129]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:16.129]                         if (muffled) 
[16:21:16.129]                           invokeRestart("muffleMessage")
[16:21:16.129]                       }
[16:21:16.129]                       else if (inherits(cond, "warning")) {
[16:21:16.129]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:16.129]                         if (muffled) 
[16:21:16.129]                           invokeRestart("muffleWarning")
[16:21:16.129]                       }
[16:21:16.129]                       else if (inherits(cond, "condition")) {
[16:21:16.129]                         if (!is.null(pattern)) {
[16:21:16.129]                           computeRestarts <- base::computeRestarts
[16:21:16.129]                           grepl <- base::grepl
[16:21:16.129]                           restarts <- computeRestarts(cond)
[16:21:16.129]                           for (restart in restarts) {
[16:21:16.129]                             name <- restart$name
[16:21:16.129]                             if (is.null(name)) 
[16:21:16.129]                               next
[16:21:16.129]                             if (!grepl(pattern, name)) 
[16:21:16.129]                               next
[16:21:16.129]                             invokeRestart(restart)
[16:21:16.129]                             muffled <- TRUE
[16:21:16.129]                             break
[16:21:16.129]                           }
[16:21:16.129]                         }
[16:21:16.129]                       }
[16:21:16.129]                       invisible(muffled)
[16:21:16.129]                     }
[16:21:16.129]                     muffleCondition(cond, pattern = "^muffle")
[16:21:16.129]                   }
[16:21:16.129]                 }
[16:21:16.129]             }
[16:21:16.129]         }))
[16:21:16.129]     }, error = function(ex) {
[16:21:16.129]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:16.129]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:16.129]                 ...future.rng), started = ...future.startTime, 
[16:21:16.129]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:16.129]             version = "1.8"), class = "FutureResult")
[16:21:16.129]     }, finally = {
[16:21:16.129]         if (!identical(...future.workdir, getwd())) 
[16:21:16.129]             setwd(...future.workdir)
[16:21:16.129]         {
[16:21:16.129]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:16.129]                 ...future.oldOptions$nwarnings <- NULL
[16:21:16.129]             }
[16:21:16.129]             base::options(...future.oldOptions)
[16:21:16.129]             if (.Platform$OS.type == "windows") {
[16:21:16.129]                 old_names <- names(...future.oldEnvVars)
[16:21:16.129]                 envs <- base::Sys.getenv()
[16:21:16.129]                 names <- names(envs)
[16:21:16.129]                 common <- intersect(names, old_names)
[16:21:16.129]                 added <- setdiff(names, old_names)
[16:21:16.129]                 removed <- setdiff(old_names, names)
[16:21:16.129]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:16.129]                   envs[common]]
[16:21:16.129]                 NAMES <- toupper(changed)
[16:21:16.129]                 args <- list()
[16:21:16.129]                 for (kk in seq_along(NAMES)) {
[16:21:16.129]                   name <- changed[[kk]]
[16:21:16.129]                   NAME <- NAMES[[kk]]
[16:21:16.129]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.129]                     next
[16:21:16.129]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:16.129]                 }
[16:21:16.129]                 NAMES <- toupper(added)
[16:21:16.129]                 for (kk in seq_along(NAMES)) {
[16:21:16.129]                   name <- added[[kk]]
[16:21:16.129]                   NAME <- NAMES[[kk]]
[16:21:16.129]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.129]                     next
[16:21:16.129]                   args[[name]] <- ""
[16:21:16.129]                 }
[16:21:16.129]                 NAMES <- toupper(removed)
[16:21:16.129]                 for (kk in seq_along(NAMES)) {
[16:21:16.129]                   name <- removed[[kk]]
[16:21:16.129]                   NAME <- NAMES[[kk]]
[16:21:16.129]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.129]                     next
[16:21:16.129]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:16.129]                 }
[16:21:16.129]                 if (length(args) > 0) 
[16:21:16.129]                   base::do.call(base::Sys.setenv, args = args)
[16:21:16.129]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:16.129]             }
[16:21:16.129]             else {
[16:21:16.129]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:16.129]             }
[16:21:16.129]             {
[16:21:16.129]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:16.129]                   0L) {
[16:21:16.129]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:16.129]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:16.129]                   base::options(opts)
[16:21:16.129]                 }
[16:21:16.129]                 {
[16:21:16.129]                   {
[16:21:16.129]                     NULL
[16:21:16.129]                     RNGkind("Mersenne-Twister")
[16:21:16.129]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:21:16.129]                       inherits = FALSE)
[16:21:16.129]                   }
[16:21:16.129]                   options(future.plan = NULL)
[16:21:16.129]                   if (is.na(NA_character_)) 
[16:21:16.129]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:16.129]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:16.129]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:16.129]                     .init = FALSE)
[16:21:16.129]                 }
[16:21:16.129]             }
[16:21:16.129]         }
[16:21:16.129]     })
[16:21:16.129]     if (TRUE) {
[16:21:16.129]         base::sink(type = "output", split = FALSE)
[16:21:16.129]         if (TRUE) {
[16:21:16.129]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:16.129]         }
[16:21:16.129]         else {
[16:21:16.129]             ...future.result["stdout"] <- base::list(NULL)
[16:21:16.129]         }
[16:21:16.129]         base::close(...future.stdout)
[16:21:16.129]         ...future.stdout <- NULL
[16:21:16.129]     }
[16:21:16.129]     ...future.result$conditions <- ...future.conditions
[16:21:16.129]     ...future.result$finished <- base::Sys.time()
[16:21:16.129]     ...future.result
[16:21:16.129] }
[16:21:16.130] plan(): Setting new future strategy stack:
[16:21:16.131] List of future strategies:
[16:21:16.131] 1. sequential:
[16:21:16.131]    - args: function (..., envir = parent.frame())
[16:21:16.131]    - tweaked: FALSE
[16:21:16.131]    - call: NULL
[16:21:16.131] plan(): nbrOfWorkers() = 1
[16:21:16.132] plan(): Setting new future strategy stack:
[16:21:16.132] List of future strategies:
[16:21:16.132] 1. multicore:
[16:21:16.132]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:21:16.132]    - tweaked: FALSE
[16:21:16.132]    - call: plan(multicore)
[16:21:16.135] plan(): nbrOfWorkers() = 1
[16:21:16.135] SequentialFuture started (and completed)
[16:21:16.136] signalConditions() ...
[16:21:16.136]  - include = ‘immediateCondition’
[16:21:16.136]  - exclude = 
[16:21:16.136]  - resignal = FALSE
[16:21:16.136]  - Number of conditions: 1
[16:21:16.136] signalConditions() ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    stop("Whoops!")
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 0 bytes of class ‘NULL’
Conditions captured: [n=1] ‘simpleError’
Early signaling: FALSE
Owner process: 341000aa-40a0-ae89-3f55-e211e7e2f207
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:21:16.137] signalConditions() ...
[16:21:16.137]  - include = ‘immediateCondition’
[16:21:16.138]  - exclude = 
[16:21:16.139]  - resignal = FALSE
[16:21:16.139]  - Number of conditions: 1
[16:21:16.139] signalConditions() ... done
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[16:21:16.139] signalConditions() ...
[16:21:16.139]  - include = ‘immediateCondition’
[16:21:16.139]  - exclude = 
[16:21:16.139]  - resignal = FALSE
[16:21:16.139]  - Number of conditions: 1
[16:21:16.139] signalConditions() ... done
[16:21:16.140] Future state: ‘finished’
[16:21:16.140] signalConditions() ...
[16:21:16.140]  - include = ‘condition’
[16:21:16.140]  - exclude = ‘immediateCondition’
[16:21:16.140]  - resignal = TRUE
[16:21:16.140]  - Number of conditions: 1
[16:21:16.140]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[16:21:16.140] signalConditions() ... done
[1] "Error in eval(quote({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[16:21:16.141] signalConditions() ...
[16:21:16.141]  - include = ‘immediateCondition’
[16:21:16.141]  - exclude = 
[16:21:16.141]  - resignal = FALSE
[16:21:16.141]  - Number of conditions: 1
[16:21:16.141] signalConditions() ... done
[16:21:16.141] Future state: ‘finished’
[16:21:16.141] signalConditions() ...
[16:21:16.141]  - include = ‘condition’
[16:21:16.142]  - exclude = ‘immediateCondition’
[16:21:16.142]  - resignal = TRUE
[16:21:16.142]  - Number of conditions: 1
[16:21:16.142]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[16:21:16.142] signalConditions() ... done
[1] "Error in eval(quote({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[16:21:16.145] getGlobalsAndPackages() ...
[16:21:16.146] Searching for globals...
[16:21:16.147] - globals found: [5] ‘{’, ‘stop’, ‘structure’, ‘list’, ‘c’
[16:21:16.147] Searching for globals ... DONE
[16:21:16.147] Resolving globals: FALSE
[16:21:16.147] 
[16:21:16.147] 
[16:21:16.147] getGlobalsAndPackages() ... DONE
[16:21:16.148] Packages needed by the future expression (n = 0): <none>
[16:21:16.148] Packages needed by future strategies (n = 0): <none>
[16:21:16.148] {
[16:21:16.148]     {
[16:21:16.148]         {
[16:21:16.148]             ...future.startTime <- base::Sys.time()
[16:21:16.148]             {
[16:21:16.148]                 {
[16:21:16.148]                   {
[16:21:16.148]                     base::local({
[16:21:16.148]                       has_future <- base::requireNamespace("future", 
[16:21:16.148]                         quietly = TRUE)
[16:21:16.148]                       if (has_future) {
[16:21:16.148]                         ns <- base::getNamespace("future")
[16:21:16.148]                         version <- ns[[".package"]][["version"]]
[16:21:16.148]                         if (is.null(version)) 
[16:21:16.148]                           version <- utils::packageVersion("future")
[16:21:16.148]                       }
[16:21:16.148]                       else {
[16:21:16.148]                         version <- NULL
[16:21:16.148]                       }
[16:21:16.148]                       if (!has_future || version < "1.8.0") {
[16:21:16.148]                         info <- base::c(r_version = base::gsub("R version ", 
[16:21:16.148]                           "", base::R.version$version.string), 
[16:21:16.148]                           platform = base::sprintf("%s (%s-bit)", 
[16:21:16.148]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:16.148]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:16.148]                             "release", "version")], collapse = " "), 
[16:21:16.148]                           hostname = base::Sys.info()[["nodename"]])
[16:21:16.148]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:21:16.148]                           info)
[16:21:16.148]                         info <- base::paste(info, collapse = "; ")
[16:21:16.148]                         if (!has_future) {
[16:21:16.148]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:16.148]                             info)
[16:21:16.148]                         }
[16:21:16.148]                         else {
[16:21:16.148]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:16.148]                             info, version)
[16:21:16.148]                         }
[16:21:16.148]                         base::stop(msg)
[16:21:16.148]                       }
[16:21:16.148]                     })
[16:21:16.148]                   }
[16:21:16.148]                   ...future.strategy.old <- future::plan("list")
[16:21:16.148]                   options(future.plan = NULL)
[16:21:16.148]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:16.148]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:16.148]                 }
[16:21:16.148]                 ...future.workdir <- getwd()
[16:21:16.148]             }
[16:21:16.148]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:16.148]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:16.148]         }
[16:21:16.148]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:16.148]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:16.148]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:16.148]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:16.148]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:16.148]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:16.148]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:16.148]             base::names(...future.oldOptions))
[16:21:16.148]     }
[16:21:16.148]     if (FALSE) {
[16:21:16.148]     }
[16:21:16.148]     else {
[16:21:16.148]         if (TRUE) {
[16:21:16.148]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:16.148]                 open = "w")
[16:21:16.148]         }
[16:21:16.148]         else {
[16:21:16.148]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:16.148]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:16.148]         }
[16:21:16.148]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:16.148]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:16.148]             base::sink(type = "output", split = FALSE)
[16:21:16.148]             base::close(...future.stdout)
[16:21:16.148]         }, add = TRUE)
[16:21:16.148]     }
[16:21:16.148]     ...future.frame <- base::sys.nframe()
[16:21:16.148]     ...future.conditions <- base::list()
[16:21:16.148]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:16.148]     if (FALSE) {
[16:21:16.148]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:16.148]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:16.148]     }
[16:21:16.148]     ...future.result <- base::tryCatch({
[16:21:16.148]         base::withCallingHandlers({
[16:21:16.148]             ...future.value <- base::withVisible(base::local({
[16:21:16.148]                 stop(structure(list(message = "boom"), class = c("MyError", 
[16:21:16.148]                   "error", "condition")))
[16:21:16.148]             }))
[16:21:16.148]             future::FutureResult(value = ...future.value$value, 
[16:21:16.148]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:16.148]                   ...future.rng), globalenv = if (FALSE) 
[16:21:16.148]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:16.148]                     ...future.globalenv.names))
[16:21:16.148]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:16.148]         }, condition = base::local({
[16:21:16.148]             c <- base::c
[16:21:16.148]             inherits <- base::inherits
[16:21:16.148]             invokeRestart <- base::invokeRestart
[16:21:16.148]             length <- base::length
[16:21:16.148]             list <- base::list
[16:21:16.148]             seq.int <- base::seq.int
[16:21:16.148]             signalCondition <- base::signalCondition
[16:21:16.148]             sys.calls <- base::sys.calls
[16:21:16.148]             `[[` <- base::`[[`
[16:21:16.148]             `+` <- base::`+`
[16:21:16.148]             `<<-` <- base::`<<-`
[16:21:16.148]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:16.148]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:16.148]                   3L)]
[16:21:16.148]             }
[16:21:16.148]             function(cond) {
[16:21:16.148]                 is_error <- inherits(cond, "error")
[16:21:16.148]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:16.148]                   NULL)
[16:21:16.148]                 if (is_error) {
[16:21:16.148]                   sessionInformation <- function() {
[16:21:16.148]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:16.148]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:16.148]                       search = base::search(), system = base::Sys.info())
[16:21:16.148]                   }
[16:21:16.148]                   ...future.conditions[[length(...future.conditions) + 
[16:21:16.148]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:16.148]                     cond$call), session = sessionInformation(), 
[16:21:16.148]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:16.148]                   signalCondition(cond)
[16:21:16.148]                 }
[16:21:16.148]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:16.148]                 "immediateCondition"))) {
[16:21:16.148]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:16.148]                   ...future.conditions[[length(...future.conditions) + 
[16:21:16.148]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:16.148]                   if (TRUE && !signal) {
[16:21:16.148]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.148]                     {
[16:21:16.148]                       inherits <- base::inherits
[16:21:16.148]                       invokeRestart <- base::invokeRestart
[16:21:16.148]                       is.null <- base::is.null
[16:21:16.148]                       muffled <- FALSE
[16:21:16.148]                       if (inherits(cond, "message")) {
[16:21:16.148]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:16.148]                         if (muffled) 
[16:21:16.148]                           invokeRestart("muffleMessage")
[16:21:16.148]                       }
[16:21:16.148]                       else if (inherits(cond, "warning")) {
[16:21:16.148]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:16.148]                         if (muffled) 
[16:21:16.148]                           invokeRestart("muffleWarning")
[16:21:16.148]                       }
[16:21:16.148]                       else if (inherits(cond, "condition")) {
[16:21:16.148]                         if (!is.null(pattern)) {
[16:21:16.148]                           computeRestarts <- base::computeRestarts
[16:21:16.148]                           grepl <- base::grepl
[16:21:16.148]                           restarts <- computeRestarts(cond)
[16:21:16.148]                           for (restart in restarts) {
[16:21:16.148]                             name <- restart$name
[16:21:16.148]                             if (is.null(name)) 
[16:21:16.148]                               next
[16:21:16.148]                             if (!grepl(pattern, name)) 
[16:21:16.148]                               next
[16:21:16.148]                             invokeRestart(restart)
[16:21:16.148]                             muffled <- TRUE
[16:21:16.148]                             break
[16:21:16.148]                           }
[16:21:16.148]                         }
[16:21:16.148]                       }
[16:21:16.148]                       invisible(muffled)
[16:21:16.148]                     }
[16:21:16.148]                     muffleCondition(cond, pattern = "^muffle")
[16:21:16.148]                   }
[16:21:16.148]                 }
[16:21:16.148]                 else {
[16:21:16.148]                   if (TRUE) {
[16:21:16.148]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.148]                     {
[16:21:16.148]                       inherits <- base::inherits
[16:21:16.148]                       invokeRestart <- base::invokeRestart
[16:21:16.148]                       is.null <- base::is.null
[16:21:16.148]                       muffled <- FALSE
[16:21:16.148]                       if (inherits(cond, "message")) {
[16:21:16.148]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:16.148]                         if (muffled) 
[16:21:16.148]                           invokeRestart("muffleMessage")
[16:21:16.148]                       }
[16:21:16.148]                       else if (inherits(cond, "warning")) {
[16:21:16.148]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:16.148]                         if (muffled) 
[16:21:16.148]                           invokeRestart("muffleWarning")
[16:21:16.148]                       }
[16:21:16.148]                       else if (inherits(cond, "condition")) {
[16:21:16.148]                         if (!is.null(pattern)) {
[16:21:16.148]                           computeRestarts <- base::computeRestarts
[16:21:16.148]                           grepl <- base::grepl
[16:21:16.148]                           restarts <- computeRestarts(cond)
[16:21:16.148]                           for (restart in restarts) {
[16:21:16.148]                             name <- restart$name
[16:21:16.148]                             if (is.null(name)) 
[16:21:16.148]                               next
[16:21:16.148]                             if (!grepl(pattern, name)) 
[16:21:16.148]                               next
[16:21:16.148]                             invokeRestart(restart)
[16:21:16.148]                             muffled <- TRUE
[16:21:16.148]                             break
[16:21:16.148]                           }
[16:21:16.148]                         }
[16:21:16.148]                       }
[16:21:16.148]                       invisible(muffled)
[16:21:16.148]                     }
[16:21:16.148]                     muffleCondition(cond, pattern = "^muffle")
[16:21:16.148]                   }
[16:21:16.148]                 }
[16:21:16.148]             }
[16:21:16.148]         }))
[16:21:16.148]     }, error = function(ex) {
[16:21:16.148]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:16.148]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:16.148]                 ...future.rng), started = ...future.startTime, 
[16:21:16.148]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:16.148]             version = "1.8"), class = "FutureResult")
[16:21:16.148]     }, finally = {
[16:21:16.148]         if (!identical(...future.workdir, getwd())) 
[16:21:16.148]             setwd(...future.workdir)
[16:21:16.148]         {
[16:21:16.148]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:16.148]                 ...future.oldOptions$nwarnings <- NULL
[16:21:16.148]             }
[16:21:16.148]             base::options(...future.oldOptions)
[16:21:16.148]             if (.Platform$OS.type == "windows") {
[16:21:16.148]                 old_names <- names(...future.oldEnvVars)
[16:21:16.148]                 envs <- base::Sys.getenv()
[16:21:16.148]                 names <- names(envs)
[16:21:16.148]                 common <- intersect(names, old_names)
[16:21:16.148]                 added <- setdiff(names, old_names)
[16:21:16.148]                 removed <- setdiff(old_names, names)
[16:21:16.148]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:16.148]                   envs[common]]
[16:21:16.148]                 NAMES <- toupper(changed)
[16:21:16.148]                 args <- list()
[16:21:16.148]                 for (kk in seq_along(NAMES)) {
[16:21:16.148]                   name <- changed[[kk]]
[16:21:16.148]                   NAME <- NAMES[[kk]]
[16:21:16.148]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.148]                     next
[16:21:16.148]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:16.148]                 }
[16:21:16.148]                 NAMES <- toupper(added)
[16:21:16.148]                 for (kk in seq_along(NAMES)) {
[16:21:16.148]                   name <- added[[kk]]
[16:21:16.148]                   NAME <- NAMES[[kk]]
[16:21:16.148]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.148]                     next
[16:21:16.148]                   args[[name]] <- ""
[16:21:16.148]                 }
[16:21:16.148]                 NAMES <- toupper(removed)
[16:21:16.148]                 for (kk in seq_along(NAMES)) {
[16:21:16.148]                   name <- removed[[kk]]
[16:21:16.148]                   NAME <- NAMES[[kk]]
[16:21:16.148]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.148]                     next
[16:21:16.148]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:16.148]                 }
[16:21:16.148]                 if (length(args) > 0) 
[16:21:16.148]                   base::do.call(base::Sys.setenv, args = args)
[16:21:16.148]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:16.148]             }
[16:21:16.148]             else {
[16:21:16.148]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:16.148]             }
[16:21:16.148]             {
[16:21:16.148]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:16.148]                   0L) {
[16:21:16.148]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:16.148]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:16.148]                   base::options(opts)
[16:21:16.148]                 }
[16:21:16.148]                 {
[16:21:16.148]                   {
[16:21:16.148]                     NULL
[16:21:16.148]                     RNGkind("Mersenne-Twister")
[16:21:16.148]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:21:16.148]                       inherits = FALSE)
[16:21:16.148]                   }
[16:21:16.148]                   options(future.plan = NULL)
[16:21:16.148]                   if (is.na(NA_character_)) 
[16:21:16.148]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:16.148]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:16.148]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:16.148]                     .init = FALSE)
[16:21:16.148]                 }
[16:21:16.148]             }
[16:21:16.148]         }
[16:21:16.148]     })
[16:21:16.148]     if (TRUE) {
[16:21:16.148]         base::sink(type = "output", split = FALSE)
[16:21:16.148]         if (TRUE) {
[16:21:16.148]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:16.148]         }
[16:21:16.148]         else {
[16:21:16.148]             ...future.result["stdout"] <- base::list(NULL)
[16:21:16.148]         }
[16:21:16.148]         base::close(...future.stdout)
[16:21:16.148]         ...future.stdout <- NULL
[16:21:16.148]     }
[16:21:16.148]     ...future.result$conditions <- ...future.conditions
[16:21:16.148]     ...future.result$finished <- base::Sys.time()
[16:21:16.148]     ...future.result
[16:21:16.148] }
[16:21:16.150] plan(): Setting new future strategy stack:
[16:21:16.150] List of future strategies:
[16:21:16.150] 1. sequential:
[16:21:16.150]    - args: function (..., envir = parent.frame())
[16:21:16.150]    - tweaked: FALSE
[16:21:16.150]    - call: NULL
[16:21:16.150] plan(): nbrOfWorkers() = 1
[16:21:16.151] plan(): Setting new future strategy stack:
[16:21:16.151] List of future strategies:
[16:21:16.151] 1. multicore:
[16:21:16.151]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:21:16.151]    - tweaked: FALSE
[16:21:16.151]    - call: plan(multicore)
[16:21:16.155] plan(): nbrOfWorkers() = 1
[16:21:16.155] SequentialFuture started (and completed)
[16:21:16.155] signalConditions() ...
[16:21:16.155]  - include = ‘immediateCondition’
[16:21:16.155]  - exclude = 
[16:21:16.155]  - resignal = FALSE
[16:21:16.155]  - Number of conditions: 1
[16:21:16.155] signalConditions() ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    stop(structure(list(message = "boom"), class = c("MyError", 
        "error", "condition")))
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 0 bytes of class ‘NULL’
Conditions captured: [n=1] ‘MyError’
Early signaling: FALSE
Owner process: 341000aa-40a0-ae89-3f55-e211e7e2f207
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:21:16.156] signalConditions() ...
[16:21:16.156]  - include = ‘immediateCondition’
[16:21:16.156]  - exclude = 
[16:21:16.156]  - resignal = FALSE
[16:21:16.156]  - Number of conditions: 1
[16:21:16.156] signalConditions() ... done
<MyError: boom>
[16:21:16.157] signalConditions() ...
[16:21:16.157]  - include = ‘immediateCondition’
[16:21:16.157]  - exclude = 
[16:21:16.157]  - resignal = FALSE
[16:21:16.157]  - Number of conditions: 1
[16:21:16.157] signalConditions() ... done
[16:21:16.157] Future state: ‘finished’
[16:21:16.157] signalConditions() ...
[16:21:16.157]  - include = ‘condition’
[16:21:16.157]  - exclude = ‘immediateCondition’
[16:21:16.158]  - resignal = TRUE
[16:21:16.158]  - Number of conditions: 1
[16:21:16.158]  - Condition #1: ‘MyError’, ‘error’, ‘condition’
[16:21:16.158] signalConditions() ... done
*** multicore(..., workers = 1L) ...
[16:21:16.158] getGlobalsAndPackages() ...
[16:21:16.158] Searching for globals...
[16:21:16.159] - globals found: [4] ‘{’, ‘*’, ‘a’, ‘b’
[16:21:16.159] Searching for globals ... DONE
[16:21:16.159] Resolving globals: FALSE
[16:21:16.160] The total size of the 2 globals is 112 bytes (112 bytes)
[16:21:16.160] The total size of the 2 globals exported for future expression (‘{; a * b; }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘a’ (56 bytes of class ‘numeric’) and ‘b’ (56 bytes of class ‘numeric’)
[16:21:16.160] - globals: [2] ‘a’, ‘b’
[16:21:16.160] 
[16:21:16.160] getGlobalsAndPackages() ... DONE
[16:21:16.161] Packages needed by the future expression (n = 0): <none>
[16:21:16.161] Packages needed by future strategies (n = 0): <none>
[16:21:16.161] {
[16:21:16.161]     {
[16:21:16.161]         {
[16:21:16.161]             ...future.startTime <- base::Sys.time()
[16:21:16.161]             {
[16:21:16.161]                 {
[16:21:16.161]                   {
[16:21:16.161]                     base::local({
[16:21:16.161]                       has_future <- base::requireNamespace("future", 
[16:21:16.161]                         quietly = TRUE)
[16:21:16.161]                       if (has_future) {
[16:21:16.161]                         ns <- base::getNamespace("future")
[16:21:16.161]                         version <- ns[[".package"]][["version"]]
[16:21:16.161]                         if (is.null(version)) 
[16:21:16.161]                           version <- utils::packageVersion("future")
[16:21:16.161]                       }
[16:21:16.161]                       else {
[16:21:16.161]                         version <- NULL
[16:21:16.161]                       }
[16:21:16.161]                       if (!has_future || version < "1.8.0") {
[16:21:16.161]                         info <- base::c(r_version = base::gsub("R version ", 
[16:21:16.161]                           "", base::R.version$version.string), 
[16:21:16.161]                           platform = base::sprintf("%s (%s-bit)", 
[16:21:16.161]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:16.161]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:16.161]                             "release", "version")], collapse = " "), 
[16:21:16.161]                           hostname = base::Sys.info()[["nodename"]])
[16:21:16.161]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:21:16.161]                           info)
[16:21:16.161]                         info <- base::paste(info, collapse = "; ")
[16:21:16.161]                         if (!has_future) {
[16:21:16.161]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:16.161]                             info)
[16:21:16.161]                         }
[16:21:16.161]                         else {
[16:21:16.161]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:16.161]                             info, version)
[16:21:16.161]                         }
[16:21:16.161]                         base::stop(msg)
[16:21:16.161]                       }
[16:21:16.161]                     })
[16:21:16.161]                   }
[16:21:16.161]                   ...future.strategy.old <- future::plan("list")
[16:21:16.161]                   options(future.plan = NULL)
[16:21:16.161]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:16.161]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:16.161]                 }
[16:21:16.161]                 ...future.workdir <- getwd()
[16:21:16.161]             }
[16:21:16.161]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:16.161]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:16.161]         }
[16:21:16.161]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:16.161]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:16.161]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:16.161]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:16.161]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:16.161]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:16.161]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:16.161]             base::names(...future.oldOptions))
[16:21:16.161]     }
[16:21:16.161]     if (FALSE) {
[16:21:16.161]     }
[16:21:16.161]     else {
[16:21:16.161]         if (TRUE) {
[16:21:16.161]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:16.161]                 open = "w")
[16:21:16.161]         }
[16:21:16.161]         else {
[16:21:16.161]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:16.161]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:16.161]         }
[16:21:16.161]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:16.161]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:16.161]             base::sink(type = "output", split = FALSE)
[16:21:16.161]             base::close(...future.stdout)
[16:21:16.161]         }, add = TRUE)
[16:21:16.161]     }
[16:21:16.161]     ...future.frame <- base::sys.nframe()
[16:21:16.161]     ...future.conditions <- base::list()
[16:21:16.161]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:16.161]     if (FALSE) {
[16:21:16.161]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:16.161]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:16.161]     }
[16:21:16.161]     ...future.result <- base::tryCatch({
[16:21:16.161]         base::withCallingHandlers({
[16:21:16.161]             ...future.value <- base::withVisible(base::local({
[16:21:16.161]                 a * b
[16:21:16.161]             }))
[16:21:16.161]             future::FutureResult(value = ...future.value$value, 
[16:21:16.161]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:16.161]                   ...future.rng), globalenv = if (FALSE) 
[16:21:16.161]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:16.161]                     ...future.globalenv.names))
[16:21:16.161]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:16.161]         }, condition = base::local({
[16:21:16.161]             c <- base::c
[16:21:16.161]             inherits <- base::inherits
[16:21:16.161]             invokeRestart <- base::invokeRestart
[16:21:16.161]             length <- base::length
[16:21:16.161]             list <- base::list
[16:21:16.161]             seq.int <- base::seq.int
[16:21:16.161]             signalCondition <- base::signalCondition
[16:21:16.161]             sys.calls <- base::sys.calls
[16:21:16.161]             `[[` <- base::`[[`
[16:21:16.161]             `+` <- base::`+`
[16:21:16.161]             `<<-` <- base::`<<-`
[16:21:16.161]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:16.161]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:16.161]                   3L)]
[16:21:16.161]             }
[16:21:16.161]             function(cond) {
[16:21:16.161]                 is_error <- inherits(cond, "error")
[16:21:16.161]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:16.161]                   NULL)
[16:21:16.161]                 if (is_error) {
[16:21:16.161]                   sessionInformation <- function() {
[16:21:16.161]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:16.161]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:16.161]                       search = base::search(), system = base::Sys.info())
[16:21:16.161]                   }
[16:21:16.161]                   ...future.conditions[[length(...future.conditions) + 
[16:21:16.161]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:16.161]                     cond$call), session = sessionInformation(), 
[16:21:16.161]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:16.161]                   signalCondition(cond)
[16:21:16.161]                 }
[16:21:16.161]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:16.161]                 "immediateCondition"))) {
[16:21:16.161]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:16.161]                   ...future.conditions[[length(...future.conditions) + 
[16:21:16.161]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:16.161]                   if (TRUE && !signal) {
[16:21:16.161]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.161]                     {
[16:21:16.161]                       inherits <- base::inherits
[16:21:16.161]                       invokeRestart <- base::invokeRestart
[16:21:16.161]                       is.null <- base::is.null
[16:21:16.161]                       muffled <- FALSE
[16:21:16.161]                       if (inherits(cond, "message")) {
[16:21:16.161]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:16.161]                         if (muffled) 
[16:21:16.161]                           invokeRestart("muffleMessage")
[16:21:16.161]                       }
[16:21:16.161]                       else if (inherits(cond, "warning")) {
[16:21:16.161]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:16.161]                         if (muffled) 
[16:21:16.161]                           invokeRestart("muffleWarning")
[16:21:16.161]                       }
[16:21:16.161]                       else if (inherits(cond, "condition")) {
[16:21:16.161]                         if (!is.null(pattern)) {
[16:21:16.161]                           computeRestarts <- base::computeRestarts
[16:21:16.161]                           grepl <- base::grepl
[16:21:16.161]                           restarts <- computeRestarts(cond)
[16:21:16.161]                           for (restart in restarts) {
[16:21:16.161]                             name <- restart$name
[16:21:16.161]                             if (is.null(name)) 
[16:21:16.161]                               next
[16:21:16.161]                             if (!grepl(pattern, name)) 
[16:21:16.161]                               next
[16:21:16.161]                             invokeRestart(restart)
[16:21:16.161]                             muffled <- TRUE
[16:21:16.161]                             break
[16:21:16.161]                           }
[16:21:16.161]                         }
[16:21:16.161]                       }
[16:21:16.161]                       invisible(muffled)
[16:21:16.161]                     }
[16:21:16.161]                     muffleCondition(cond, pattern = "^muffle")
[16:21:16.161]                   }
[16:21:16.161]                 }
[16:21:16.161]                 else {
[16:21:16.161]                   if (TRUE) {
[16:21:16.161]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.161]                     {
[16:21:16.161]                       inherits <- base::inherits
[16:21:16.161]                       invokeRestart <- base::invokeRestart
[16:21:16.161]                       is.null <- base::is.null
[16:21:16.161]                       muffled <- FALSE
[16:21:16.161]                       if (inherits(cond, "message")) {
[16:21:16.161]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:16.161]                         if (muffled) 
[16:21:16.161]                           invokeRestart("muffleMessage")
[16:21:16.161]                       }
[16:21:16.161]                       else if (inherits(cond, "warning")) {
[16:21:16.161]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:16.161]                         if (muffled) 
[16:21:16.161]                           invokeRestart("muffleWarning")
[16:21:16.161]                       }
[16:21:16.161]                       else if (inherits(cond, "condition")) {
[16:21:16.161]                         if (!is.null(pattern)) {
[16:21:16.161]                           computeRestarts <- base::computeRestarts
[16:21:16.161]                           grepl <- base::grepl
[16:21:16.161]                           restarts <- computeRestarts(cond)
[16:21:16.161]                           for (restart in restarts) {
[16:21:16.161]                             name <- restart$name
[16:21:16.161]                             if (is.null(name)) 
[16:21:16.161]                               next
[16:21:16.161]                             if (!grepl(pattern, name)) 
[16:21:16.161]                               next
[16:21:16.161]                             invokeRestart(restart)
[16:21:16.161]                             muffled <- TRUE
[16:21:16.161]                             break
[16:21:16.161]                           }
[16:21:16.161]                         }
[16:21:16.161]                       }
[16:21:16.161]                       invisible(muffled)
[16:21:16.161]                     }
[16:21:16.161]                     muffleCondition(cond, pattern = "^muffle")
[16:21:16.161]                   }
[16:21:16.161]                 }
[16:21:16.161]             }
[16:21:16.161]         }))
[16:21:16.161]     }, error = function(ex) {
[16:21:16.161]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:16.161]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:16.161]                 ...future.rng), started = ...future.startTime, 
[16:21:16.161]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:16.161]             version = "1.8"), class = "FutureResult")
[16:21:16.161]     }, finally = {
[16:21:16.161]         if (!identical(...future.workdir, getwd())) 
[16:21:16.161]             setwd(...future.workdir)
[16:21:16.161]         {
[16:21:16.161]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:16.161]                 ...future.oldOptions$nwarnings <- NULL
[16:21:16.161]             }
[16:21:16.161]             base::options(...future.oldOptions)
[16:21:16.161]             if (.Platform$OS.type == "windows") {
[16:21:16.161]                 old_names <- names(...future.oldEnvVars)
[16:21:16.161]                 envs <- base::Sys.getenv()
[16:21:16.161]                 names <- names(envs)
[16:21:16.161]                 common <- intersect(names, old_names)
[16:21:16.161]                 added <- setdiff(names, old_names)
[16:21:16.161]                 removed <- setdiff(old_names, names)
[16:21:16.161]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:16.161]                   envs[common]]
[16:21:16.161]                 NAMES <- toupper(changed)
[16:21:16.161]                 args <- list()
[16:21:16.161]                 for (kk in seq_along(NAMES)) {
[16:21:16.161]                   name <- changed[[kk]]
[16:21:16.161]                   NAME <- NAMES[[kk]]
[16:21:16.161]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.161]                     next
[16:21:16.161]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:16.161]                 }
[16:21:16.161]                 NAMES <- toupper(added)
[16:21:16.161]                 for (kk in seq_along(NAMES)) {
[16:21:16.161]                   name <- added[[kk]]
[16:21:16.161]                   NAME <- NAMES[[kk]]
[16:21:16.161]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.161]                     next
[16:21:16.161]                   args[[name]] <- ""
[16:21:16.161]                 }
[16:21:16.161]                 NAMES <- toupper(removed)
[16:21:16.161]                 for (kk in seq_along(NAMES)) {
[16:21:16.161]                   name <- removed[[kk]]
[16:21:16.161]                   NAME <- NAMES[[kk]]
[16:21:16.161]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.161]                     next
[16:21:16.161]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:16.161]                 }
[16:21:16.161]                 if (length(args) > 0) 
[16:21:16.161]                   base::do.call(base::Sys.setenv, args = args)
[16:21:16.161]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:16.161]             }
[16:21:16.161]             else {
[16:21:16.161]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:16.161]             }
[16:21:16.161]             {
[16:21:16.161]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:16.161]                   0L) {
[16:21:16.161]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:16.161]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:16.161]                   base::options(opts)
[16:21:16.161]                 }
[16:21:16.161]                 {
[16:21:16.161]                   {
[16:21:16.161]                     NULL
[16:21:16.161]                     RNGkind("Mersenne-Twister")
[16:21:16.161]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:21:16.161]                       inherits = FALSE)
[16:21:16.161]                   }
[16:21:16.161]                   options(future.plan = NULL)
[16:21:16.161]                   if (is.na(NA_character_)) 
[16:21:16.161]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:16.161]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:16.161]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:16.161]                     .init = FALSE)
[16:21:16.161]                 }
[16:21:16.161]             }
[16:21:16.161]         }
[16:21:16.161]     })
[16:21:16.161]     if (TRUE) {
[16:21:16.161]         base::sink(type = "output", split = FALSE)
[16:21:16.161]         if (TRUE) {
[16:21:16.161]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:16.161]         }
[16:21:16.161]         else {
[16:21:16.161]             ...future.result["stdout"] <- base::list(NULL)
[16:21:16.161]         }
[16:21:16.161]         base::close(...future.stdout)
[16:21:16.161]         ...future.stdout <- NULL
[16:21:16.161]     }
[16:21:16.161]     ...future.result$conditions <- ...future.conditions
[16:21:16.161]     ...future.result$finished <- base::Sys.time()
[16:21:16.161]     ...future.result
[16:21:16.161] }
[16:21:16.163] assign_globals() ...
[16:21:16.163] List of 2
[16:21:16.163]  $ a: num 2
[16:21:16.163]  $ b: num 3
[16:21:16.163]  - attr(*, "where")=List of 2
[16:21:16.163]   ..$ a:<environment: R_EmptyEnv> 
[16:21:16.163]   ..$ b:<environment: R_EmptyEnv> 
[16:21:16.163]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:21:16.163]  - attr(*, "resolved")= logi FALSE
[16:21:16.163]  - attr(*, "total_size")= num 112
[16:21:16.165] - copied ‘a’ to environment
[16:21:16.166] - copied ‘b’ to environment
[16:21:16.166] assign_globals() ... done
[16:21:16.166] plan(): Setting new future strategy stack:
[16:21:16.166] List of future strategies:
[16:21:16.166] 1. sequential:
[16:21:16.166]    - args: function (..., envir = parent.frame())
[16:21:16.166]    - tweaked: FALSE
[16:21:16.166]    - call: NULL
[16:21:16.166] plan(): nbrOfWorkers() = 1
[16:21:16.167] plan(): Setting new future strategy stack:
[16:21:16.167] List of future strategies:
[16:21:16.167] 1. multicore:
[16:21:16.167]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:21:16.167]    - tweaked: FALSE
[16:21:16.167]    - call: plan(multicore)
[16:21:16.171] plan(): nbrOfWorkers() = 1
[16:21:16.171] SequentialFuture started (and completed)
[1] 6
*** multicore(..., workers = 1L) ... DONE
Testing with 1 cores ... DONE
Testing with 2 cores ...
Number of workers: 2
*** multicore(..., globals = FALSE) without globals
[16:21:16.180] getGlobalsAndPackages() ...
[16:21:16.180] Not searching for globals
[16:21:16.181] - globals: [0] <none>
[16:21:16.181] getGlobalsAndPackages() ... DONE
[16:21:16.182] Packages needed by the future expression (n = 0): <none>
[16:21:16.182] Packages needed by future strategies (n = 0): <none>
[16:21:16.183] {
[16:21:16.183]     {
[16:21:16.183]         {
[16:21:16.183]             ...future.startTime <- base::Sys.time()
[16:21:16.183]             {
[16:21:16.183]                 {
[16:21:16.183]                   {
[16:21:16.183]                     {
[16:21:16.183]                       base::local({
[16:21:16.183]                         has_future <- base::requireNamespace("future", 
[16:21:16.183]                           quietly = TRUE)
[16:21:16.183]                         if (has_future) {
[16:21:16.183]                           ns <- base::getNamespace("future")
[16:21:16.183]                           version <- ns[[".package"]][["version"]]
[16:21:16.183]                           if (is.null(version)) 
[16:21:16.183]                             version <- utils::packageVersion("future")
[16:21:16.183]                         }
[16:21:16.183]                         else {
[16:21:16.183]                           version <- NULL
[16:21:16.183]                         }
[16:21:16.183]                         if (!has_future || version < "1.8.0") {
[16:21:16.183]                           info <- base::c(r_version = base::gsub("R version ", 
[16:21:16.183]                             "", base::R.version$version.string), 
[16:21:16.183]                             platform = base::sprintf("%s (%s-bit)", 
[16:21:16.183]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:16.183]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:16.183]                               "release", "version")], collapse = " "), 
[16:21:16.183]                             hostname = base::Sys.info()[["nodename"]])
[16:21:16.183]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:21:16.183]                             info)
[16:21:16.183]                           info <- base::paste(info, collapse = "; ")
[16:21:16.183]                           if (!has_future) {
[16:21:16.183]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:16.183]                               info)
[16:21:16.183]                           }
[16:21:16.183]                           else {
[16:21:16.183]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:16.183]                               info, version)
[16:21:16.183]                           }
[16:21:16.183]                           base::stop(msg)
[16:21:16.183]                         }
[16:21:16.183]                       })
[16:21:16.183]                     }
[16:21:16.183]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:21:16.183]                     base::options(mc.cores = 1L)
[16:21:16.183]                   }
[16:21:16.183]                   ...future.strategy.old <- future::plan("list")
[16:21:16.183]                   options(future.plan = NULL)
[16:21:16.183]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:16.183]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:16.183]                 }
[16:21:16.183]                 ...future.workdir <- getwd()
[16:21:16.183]             }
[16:21:16.183]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:16.183]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:16.183]         }
[16:21:16.183]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:16.183]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:16.183]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:16.183]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:16.183]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:16.183]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:16.183]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:16.183]             base::names(...future.oldOptions))
[16:21:16.183]     }
[16:21:16.183]     if (FALSE) {
[16:21:16.183]     }
[16:21:16.183]     else {
[16:21:16.183]         if (TRUE) {
[16:21:16.183]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:16.183]                 open = "w")
[16:21:16.183]         }
[16:21:16.183]         else {
[16:21:16.183]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:16.183]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:16.183]         }
[16:21:16.183]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:16.183]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:16.183]             base::sink(type = "output", split = FALSE)
[16:21:16.183]             base::close(...future.stdout)
[16:21:16.183]         }, add = TRUE)
[16:21:16.183]     }
[16:21:16.183]     ...future.frame <- base::sys.nframe()
[16:21:16.183]     ...future.conditions <- base::list()
[16:21:16.183]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:16.183]     if (FALSE) {
[16:21:16.183]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:16.183]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:16.183]     }
[16:21:16.183]     ...future.result <- base::tryCatch({
[16:21:16.183]         base::withCallingHandlers({
[16:21:16.183]             ...future.value <- base::withVisible(base::local({
[16:21:16.183]                 withCallingHandlers({
[16:21:16.183]                   {
[16:21:16.183]                     42L
[16:21:16.183]                   }
[16:21:16.183]                 }, immediateCondition = function(cond) {
[16:21:16.183]                   save_rds <- function (object, pathname, ...) 
[16:21:16.183]                   {
[16:21:16.183]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:21:16.183]                     if (file_test("-f", pathname_tmp)) {
[16:21:16.183]                       fi_tmp <- file.info(pathname_tmp)
[16:21:16.183]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:21:16.183]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:21:16.183]                         fi_tmp[["mtime"]])
[16:21:16.183]                     }
[16:21:16.183]                     tryCatch({
[16:21:16.183]                       saveRDS(object, file = pathname_tmp, ...)
[16:21:16.183]                     }, error = function(ex) {
[16:21:16.183]                       msg <- conditionMessage(ex)
[16:21:16.183]                       fi_tmp <- file.info(pathname_tmp)
[16:21:16.183]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:21:16.183]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:21:16.183]                         fi_tmp[["mtime"]], msg)
[16:21:16.183]                       ex$message <- msg
[16:21:16.183]                       stop(ex)
[16:21:16.183]                     })
[16:21:16.183]                     stopifnot(file_test("-f", pathname_tmp))
[16:21:16.183]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:21:16.183]                     if (!res || file_test("-f", pathname_tmp)) {
[16:21:16.183]                       fi_tmp <- file.info(pathname_tmp)
[16:21:16.183]                       fi <- file.info(pathname)
[16:21:16.183]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:21:16.183]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:21:16.183]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:21:16.183]                         fi[["size"]], fi[["mtime"]])
[16:21:16.183]                       stop(msg)
[16:21:16.183]                     }
[16:21:16.183]                     invisible(pathname)
[16:21:16.183]                   }
[16:21:16.183]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:21:16.183]                     rootPath = tempdir()) 
[16:21:16.183]                   {
[16:21:16.183]                     obj <- list(time = Sys.time(), condition = cond)
[16:21:16.183]                     file <- tempfile(pattern = class(cond)[1], 
[16:21:16.183]                       tmpdir = path, fileext = ".rds")
[16:21:16.183]                     save_rds(obj, file)
[16:21:16.183]                   }
[16:21:16.183]                   saveImmediateCondition(cond, path = "/tmp/RtmpCuMWhk/.future/immediateConditions")
[16:21:16.183]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.183]                   {
[16:21:16.183]                     inherits <- base::inherits
[16:21:16.183]                     invokeRestart <- base::invokeRestart
[16:21:16.183]                     is.null <- base::is.null
[16:21:16.183]                     muffled <- FALSE
[16:21:16.183]                     if (inherits(cond, "message")) {
[16:21:16.183]                       muffled <- grepl(pattern, "muffleMessage")
[16:21:16.183]                       if (muffled) 
[16:21:16.183]                         invokeRestart("muffleMessage")
[16:21:16.183]                     }
[16:21:16.183]                     else if (inherits(cond, "warning")) {
[16:21:16.183]                       muffled <- grepl(pattern, "muffleWarning")
[16:21:16.183]                       if (muffled) 
[16:21:16.183]                         invokeRestart("muffleWarning")
[16:21:16.183]                     }
[16:21:16.183]                     else if (inherits(cond, "condition")) {
[16:21:16.183]                       if (!is.null(pattern)) {
[16:21:16.183]                         computeRestarts <- base::computeRestarts
[16:21:16.183]                         grepl <- base::grepl
[16:21:16.183]                         restarts <- computeRestarts(cond)
[16:21:16.183]                         for (restart in restarts) {
[16:21:16.183]                           name <- restart$name
[16:21:16.183]                           if (is.null(name)) 
[16:21:16.183]                             next
[16:21:16.183]                           if (!grepl(pattern, name)) 
[16:21:16.183]                             next
[16:21:16.183]                           invokeRestart(restart)
[16:21:16.183]                           muffled <- TRUE
[16:21:16.183]                           break
[16:21:16.183]                         }
[16:21:16.183]                       }
[16:21:16.183]                     }
[16:21:16.183]                     invisible(muffled)
[16:21:16.183]                   }
[16:21:16.183]                   muffleCondition(cond)
[16:21:16.183]                 })
[16:21:16.183]             }))
[16:21:16.183]             future::FutureResult(value = ...future.value$value, 
[16:21:16.183]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:16.183]                   ...future.rng), globalenv = if (FALSE) 
[16:21:16.183]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:16.183]                     ...future.globalenv.names))
[16:21:16.183]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:16.183]         }, condition = base::local({
[16:21:16.183]             c <- base::c
[16:21:16.183]             inherits <- base::inherits
[16:21:16.183]             invokeRestart <- base::invokeRestart
[16:21:16.183]             length <- base::length
[16:21:16.183]             list <- base::list
[16:21:16.183]             seq.int <- base::seq.int
[16:21:16.183]             signalCondition <- base::signalCondition
[16:21:16.183]             sys.calls <- base::sys.calls
[16:21:16.183]             `[[` <- base::`[[`
[16:21:16.183]             `+` <- base::`+`
[16:21:16.183]             `<<-` <- base::`<<-`
[16:21:16.183]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:16.183]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:16.183]                   3L)]
[16:21:16.183]             }
[16:21:16.183]             function(cond) {
[16:21:16.183]                 is_error <- inherits(cond, "error")
[16:21:16.183]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:16.183]                   NULL)
[16:21:16.183]                 if (is_error) {
[16:21:16.183]                   sessionInformation <- function() {
[16:21:16.183]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:16.183]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:16.183]                       search = base::search(), system = base::Sys.info())
[16:21:16.183]                   }
[16:21:16.183]                   ...future.conditions[[length(...future.conditions) + 
[16:21:16.183]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:16.183]                     cond$call), session = sessionInformation(), 
[16:21:16.183]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:16.183]                   signalCondition(cond)
[16:21:16.183]                 }
[16:21:16.183]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:16.183]                 "immediateCondition"))) {
[16:21:16.183]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:16.183]                   ...future.conditions[[length(...future.conditions) + 
[16:21:16.183]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:16.183]                   if (TRUE && !signal) {
[16:21:16.183]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.183]                     {
[16:21:16.183]                       inherits <- base::inherits
[16:21:16.183]                       invokeRestart <- base::invokeRestart
[16:21:16.183]                       is.null <- base::is.null
[16:21:16.183]                       muffled <- FALSE
[16:21:16.183]                       if (inherits(cond, "message")) {
[16:21:16.183]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:16.183]                         if (muffled) 
[16:21:16.183]                           invokeRestart("muffleMessage")
[16:21:16.183]                       }
[16:21:16.183]                       else if (inherits(cond, "warning")) {
[16:21:16.183]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:16.183]                         if (muffled) 
[16:21:16.183]                           invokeRestart("muffleWarning")
[16:21:16.183]                       }
[16:21:16.183]                       else if (inherits(cond, "condition")) {
[16:21:16.183]                         if (!is.null(pattern)) {
[16:21:16.183]                           computeRestarts <- base::computeRestarts
[16:21:16.183]                           grepl <- base::grepl
[16:21:16.183]                           restarts <- computeRestarts(cond)
[16:21:16.183]                           for (restart in restarts) {
[16:21:16.183]                             name <- restart$name
[16:21:16.183]                             if (is.null(name)) 
[16:21:16.183]                               next
[16:21:16.183]                             if (!grepl(pattern, name)) 
[16:21:16.183]                               next
[16:21:16.183]                             invokeRestart(restart)
[16:21:16.183]                             muffled <- TRUE
[16:21:16.183]                             break
[16:21:16.183]                           }
[16:21:16.183]                         }
[16:21:16.183]                       }
[16:21:16.183]                       invisible(muffled)
[16:21:16.183]                     }
[16:21:16.183]                     muffleCondition(cond, pattern = "^muffle")
[16:21:16.183]                   }
[16:21:16.183]                 }
[16:21:16.183]                 else {
[16:21:16.183]                   if (TRUE) {
[16:21:16.183]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.183]                     {
[16:21:16.183]                       inherits <- base::inherits
[16:21:16.183]                       invokeRestart <- base::invokeRestart
[16:21:16.183]                       is.null <- base::is.null
[16:21:16.183]                       muffled <- FALSE
[16:21:16.183]                       if (inherits(cond, "message")) {
[16:21:16.183]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:16.183]                         if (muffled) 
[16:21:16.183]                           invokeRestart("muffleMessage")
[16:21:16.183]                       }
[16:21:16.183]                       else if (inherits(cond, "warning")) {
[16:21:16.183]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:16.183]                         if (muffled) 
[16:21:16.183]                           invokeRestart("muffleWarning")
[16:21:16.183]                       }
[16:21:16.183]                       else if (inherits(cond, "condition")) {
[16:21:16.183]                         if (!is.null(pattern)) {
[16:21:16.183]                           computeRestarts <- base::computeRestarts
[16:21:16.183]                           grepl <- base::grepl
[16:21:16.183]                           restarts <- computeRestarts(cond)
[16:21:16.183]                           for (restart in restarts) {
[16:21:16.183]                             name <- restart$name
[16:21:16.183]                             if (is.null(name)) 
[16:21:16.183]                               next
[16:21:16.183]                             if (!grepl(pattern, name)) 
[16:21:16.183]                               next
[16:21:16.183]                             invokeRestart(restart)
[16:21:16.183]                             muffled <- TRUE
[16:21:16.183]                             break
[16:21:16.183]                           }
[16:21:16.183]                         }
[16:21:16.183]                       }
[16:21:16.183]                       invisible(muffled)
[16:21:16.183]                     }
[16:21:16.183]                     muffleCondition(cond, pattern = "^muffle")
[16:21:16.183]                   }
[16:21:16.183]                 }
[16:21:16.183]             }
[16:21:16.183]         }))
[16:21:16.183]     }, error = function(ex) {
[16:21:16.183]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:16.183]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:16.183]                 ...future.rng), started = ...future.startTime, 
[16:21:16.183]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:16.183]             version = "1.8"), class = "FutureResult")
[16:21:16.183]     }, finally = {
[16:21:16.183]         if (!identical(...future.workdir, getwd())) 
[16:21:16.183]             setwd(...future.workdir)
[16:21:16.183]         {
[16:21:16.183]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:16.183]                 ...future.oldOptions$nwarnings <- NULL
[16:21:16.183]             }
[16:21:16.183]             base::options(...future.oldOptions)
[16:21:16.183]             if (.Platform$OS.type == "windows") {
[16:21:16.183]                 old_names <- names(...future.oldEnvVars)
[16:21:16.183]                 envs <- base::Sys.getenv()
[16:21:16.183]                 names <- names(envs)
[16:21:16.183]                 common <- intersect(names, old_names)
[16:21:16.183]                 added <- setdiff(names, old_names)
[16:21:16.183]                 removed <- setdiff(old_names, names)
[16:21:16.183]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:16.183]                   envs[common]]
[16:21:16.183]                 NAMES <- toupper(changed)
[16:21:16.183]                 args <- list()
[16:21:16.183]                 for (kk in seq_along(NAMES)) {
[16:21:16.183]                   name <- changed[[kk]]
[16:21:16.183]                   NAME <- NAMES[[kk]]
[16:21:16.183]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.183]                     next
[16:21:16.183]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:16.183]                 }
[16:21:16.183]                 NAMES <- toupper(added)
[16:21:16.183]                 for (kk in seq_along(NAMES)) {
[16:21:16.183]                   name <- added[[kk]]
[16:21:16.183]                   NAME <- NAMES[[kk]]
[16:21:16.183]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.183]                     next
[16:21:16.183]                   args[[name]] <- ""
[16:21:16.183]                 }
[16:21:16.183]                 NAMES <- toupper(removed)
[16:21:16.183]                 for (kk in seq_along(NAMES)) {
[16:21:16.183]                   name <- removed[[kk]]
[16:21:16.183]                   NAME <- NAMES[[kk]]
[16:21:16.183]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.183]                     next
[16:21:16.183]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:16.183]                 }
[16:21:16.183]                 if (length(args) > 0) 
[16:21:16.183]                   base::do.call(base::Sys.setenv, args = args)
[16:21:16.183]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:16.183]             }
[16:21:16.183]             else {
[16:21:16.183]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:16.183]             }
[16:21:16.183]             {
[16:21:16.183]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:16.183]                   0L) {
[16:21:16.183]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:16.183]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:16.183]                   base::options(opts)
[16:21:16.183]                 }
[16:21:16.183]                 {
[16:21:16.183]                   {
[16:21:16.183]                     base::options(mc.cores = ...future.mc.cores.old)
[16:21:16.183]                     NULL
[16:21:16.183]                   }
[16:21:16.183]                   options(future.plan = NULL)
[16:21:16.183]                   if (is.na(NA_character_)) 
[16:21:16.183]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:16.183]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:16.183]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:16.183]                     .init = FALSE)
[16:21:16.183]                 }
[16:21:16.183]             }
[16:21:16.183]         }
[16:21:16.183]     })
[16:21:16.183]     if (TRUE) {
[16:21:16.183]         base::sink(type = "output", split = FALSE)
[16:21:16.183]         if (TRUE) {
[16:21:16.183]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:16.183]         }
[16:21:16.183]         else {
[16:21:16.183]             ...future.result["stdout"] <- base::list(NULL)
[16:21:16.183]         }
[16:21:16.183]         base::close(...future.stdout)
[16:21:16.183]         ...future.stdout <- NULL
[16:21:16.183]     }
[16:21:16.183]     ...future.result$conditions <- ...future.conditions
[16:21:16.183]     ...future.result$finished <- base::Sys.time()
[16:21:16.183]     ...future.result
[16:21:16.183] }
[16:21:16.185] requestCore(): workers = 2
[16:21:16.188] MulticoreFuture started
[16:21:16.189] plan(): Setting new future strategy stack:
[16:21:16.189] List of future strategies:
[16:21:16.189] 1. sequential:
[16:21:16.189]    - args: function (..., envir = parent.frame())
[16:21:16.189]    - tweaked: FALSE
[16:21:16.189]    - call: NULL
[16:21:16.191] plan(): nbrOfWorkers() = 1
[16:21:16.193] plan(): Setting new future strategy stack:
[16:21:16.194] List of future strategies:
[16:21:16.194] 1. multicore:
[16:21:16.194]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:21:16.194]    - tweaked: FALSE
[16:21:16.194]    - call: plan(multicore)
[16:21:16.199] plan(): nbrOfWorkers() = 2
[1] TRUE
[16:21:16.201] result() for MulticoreFuture ...
[16:21:16.207] result() for MulticoreFuture ...
[16:21:16.207] result() for MulticoreFuture ... done
[16:21:16.207] result() for MulticoreFuture ... done
[16:21:16.207] result() for MulticoreFuture ...
[16:21:16.207] result() for MulticoreFuture ... done
[1] 42
*** multicore(..., globals = FALSE) with globals
[16:21:16.211] getGlobalsAndPackages() ...
[16:21:16.212] Not searching for globals
[16:21:16.212] - globals: [0] <none>
[16:21:16.212] getGlobalsAndPackages() ... DONE
[16:21:16.213] Packages needed by the future expression (n = 0): <none>
[16:21:16.213] Packages needed by future strategies (n = 0): <none>
[16:21:16.213] {
[16:21:16.213]     {
[16:21:16.213]         {
[16:21:16.213]             ...future.startTime <- base::Sys.time()
[16:21:16.213]             {
[16:21:16.213]                 {
[16:21:16.213]                   {
[16:21:16.213]                     {
[16:21:16.213]                       base::local({
[16:21:16.213]                         has_future <- base::requireNamespace("future", 
[16:21:16.213]                           quietly = TRUE)
[16:21:16.213]                         if (has_future) {
[16:21:16.213]                           ns <- base::getNamespace("future")
[16:21:16.213]                           version <- ns[[".package"]][["version"]]
[16:21:16.213]                           if (is.null(version)) 
[16:21:16.213]                             version <- utils::packageVersion("future")
[16:21:16.213]                         }
[16:21:16.213]                         else {
[16:21:16.213]                           version <- NULL
[16:21:16.213]                         }
[16:21:16.213]                         if (!has_future || version < "1.8.0") {
[16:21:16.213]                           info <- base::c(r_version = base::gsub("R version ", 
[16:21:16.213]                             "", base::R.version$version.string), 
[16:21:16.213]                             platform = base::sprintf("%s (%s-bit)", 
[16:21:16.213]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:16.213]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:16.213]                               "release", "version")], collapse = " "), 
[16:21:16.213]                             hostname = base::Sys.info()[["nodename"]])
[16:21:16.213]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:21:16.213]                             info)
[16:21:16.213]                           info <- base::paste(info, collapse = "; ")
[16:21:16.213]                           if (!has_future) {
[16:21:16.213]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:16.213]                               info)
[16:21:16.213]                           }
[16:21:16.213]                           else {
[16:21:16.213]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:16.213]                               info, version)
[16:21:16.213]                           }
[16:21:16.213]                           base::stop(msg)
[16:21:16.213]                         }
[16:21:16.213]                       })
[16:21:16.213]                     }
[16:21:16.213]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:21:16.213]                     base::options(mc.cores = 1L)
[16:21:16.213]                   }
[16:21:16.213]                   ...future.strategy.old <- future::plan("list")
[16:21:16.213]                   options(future.plan = NULL)
[16:21:16.213]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:16.213]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:16.213]                 }
[16:21:16.213]                 ...future.workdir <- getwd()
[16:21:16.213]             }
[16:21:16.213]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:16.213]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:16.213]         }
[16:21:16.213]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:16.213]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:16.213]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:16.213]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:16.213]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:16.213]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:16.213]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:16.213]             base::names(...future.oldOptions))
[16:21:16.213]     }
[16:21:16.213]     if (FALSE) {
[16:21:16.213]     }
[16:21:16.213]     else {
[16:21:16.213]         if (TRUE) {
[16:21:16.213]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:16.213]                 open = "w")
[16:21:16.213]         }
[16:21:16.213]         else {
[16:21:16.213]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:16.213]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:16.213]         }
[16:21:16.213]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:16.213]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:16.213]             base::sink(type = "output", split = FALSE)
[16:21:16.213]             base::close(...future.stdout)
[16:21:16.213]         }, add = TRUE)
[16:21:16.213]     }
[16:21:16.213]     ...future.frame <- base::sys.nframe()
[16:21:16.213]     ...future.conditions <- base::list()
[16:21:16.213]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:16.213]     if (FALSE) {
[16:21:16.213]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:16.213]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:16.213]     }
[16:21:16.213]     ...future.result <- base::tryCatch({
[16:21:16.213]         base::withCallingHandlers({
[16:21:16.213]             ...future.value <- base::withVisible(base::local({
[16:21:16.213]                 withCallingHandlers({
[16:21:16.213]                   {
[16:21:16.213]                     b <- 3
[16:21:16.213]                     c <- 2
[16:21:16.213]                     a * b * c
[16:21:16.213]                   }
[16:21:16.213]                 }, immediateCondition = function(cond) {
[16:21:16.213]                   save_rds <- function (object, pathname, ...) 
[16:21:16.213]                   {
[16:21:16.213]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:21:16.213]                     if (file_test("-f", pathname_tmp)) {
[16:21:16.213]                       fi_tmp <- file.info(pathname_tmp)
[16:21:16.213]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:21:16.213]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:21:16.213]                         fi_tmp[["mtime"]])
[16:21:16.213]                     }
[16:21:16.213]                     tryCatch({
[16:21:16.213]                       saveRDS(object, file = pathname_tmp, ...)
[16:21:16.213]                     }, error = function(ex) {
[16:21:16.213]                       msg <- conditionMessage(ex)
[16:21:16.213]                       fi_tmp <- file.info(pathname_tmp)
[16:21:16.213]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:21:16.213]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:21:16.213]                         fi_tmp[["mtime"]], msg)
[16:21:16.213]                       ex$message <- msg
[16:21:16.213]                       stop(ex)
[16:21:16.213]                     })
[16:21:16.213]                     stopifnot(file_test("-f", pathname_tmp))
[16:21:16.213]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:21:16.213]                     if (!res || file_test("-f", pathname_tmp)) {
[16:21:16.213]                       fi_tmp <- file.info(pathname_tmp)
[16:21:16.213]                       fi <- file.info(pathname)
[16:21:16.213]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:21:16.213]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:21:16.213]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:21:16.213]                         fi[["size"]], fi[["mtime"]])
[16:21:16.213]                       stop(msg)
[16:21:16.213]                     }
[16:21:16.213]                     invisible(pathname)
[16:21:16.213]                   }
[16:21:16.213]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:21:16.213]                     rootPath = tempdir()) 
[16:21:16.213]                   {
[16:21:16.213]                     obj <- list(time = Sys.time(), condition = cond)
[16:21:16.213]                     file <- tempfile(pattern = class(cond)[1], 
[16:21:16.213]                       tmpdir = path, fileext = ".rds")
[16:21:16.213]                     save_rds(obj, file)
[16:21:16.213]                   }
[16:21:16.213]                   saveImmediateCondition(cond, path = "/tmp/RtmpCuMWhk/.future/immediateConditions")
[16:21:16.213]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.213]                   {
[16:21:16.213]                     inherits <- base::inherits
[16:21:16.213]                     invokeRestart <- base::invokeRestart
[16:21:16.213]                     is.null <- base::is.null
[16:21:16.213]                     muffled <- FALSE
[16:21:16.213]                     if (inherits(cond, "message")) {
[16:21:16.213]                       muffled <- grepl(pattern, "muffleMessage")
[16:21:16.213]                       if (muffled) 
[16:21:16.213]                         invokeRestart("muffleMessage")
[16:21:16.213]                     }
[16:21:16.213]                     else if (inherits(cond, "warning")) {
[16:21:16.213]                       muffled <- grepl(pattern, "muffleWarning")
[16:21:16.213]                       if (muffled) 
[16:21:16.213]                         invokeRestart("muffleWarning")
[16:21:16.213]                     }
[16:21:16.213]                     else if (inherits(cond, "condition")) {
[16:21:16.213]                       if (!is.null(pattern)) {
[16:21:16.213]                         computeRestarts <- base::computeRestarts
[16:21:16.213]                         grepl <- base::grepl
[16:21:16.213]                         restarts <- computeRestarts(cond)
[16:21:16.213]                         for (restart in restarts) {
[16:21:16.213]                           name <- restart$name
[16:21:16.213]                           if (is.null(name)) 
[16:21:16.213]                             next
[16:21:16.213]                           if (!grepl(pattern, name)) 
[16:21:16.213]                             next
[16:21:16.213]                           invokeRestart(restart)
[16:21:16.213]                           muffled <- TRUE
[16:21:16.213]                           break
[16:21:16.213]                         }
[16:21:16.213]                       }
[16:21:16.213]                     }
[16:21:16.213]                     invisible(muffled)
[16:21:16.213]                   }
[16:21:16.213]                   muffleCondition(cond)
[16:21:16.213]                 })
[16:21:16.213]             }))
[16:21:16.213]             future::FutureResult(value = ...future.value$value, 
[16:21:16.213]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:16.213]                   ...future.rng), globalenv = if (FALSE) 
[16:21:16.213]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:16.213]                     ...future.globalenv.names))
[16:21:16.213]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:16.213]         }, condition = base::local({
[16:21:16.213]             c <- base::c
[16:21:16.213]             inherits <- base::inherits
[16:21:16.213]             invokeRestart <- base::invokeRestart
[16:21:16.213]             length <- base::length
[16:21:16.213]             list <- base::list
[16:21:16.213]             seq.int <- base::seq.int
[16:21:16.213]             signalCondition <- base::signalCondition
[16:21:16.213]             sys.calls <- base::sys.calls
[16:21:16.213]             `[[` <- base::`[[`
[16:21:16.213]             `+` <- base::`+`
[16:21:16.213]             `<<-` <- base::`<<-`
[16:21:16.213]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:16.213]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:16.213]                   3L)]
[16:21:16.213]             }
[16:21:16.213]             function(cond) {
[16:21:16.213]                 is_error <- inherits(cond, "error")
[16:21:16.213]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:16.213]                   NULL)
[16:21:16.213]                 if (is_error) {
[16:21:16.213]                   sessionInformation <- function() {
[16:21:16.213]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:16.213]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:16.213]                       search = base::search(), system = base::Sys.info())
[16:21:16.213]                   }
[16:21:16.213]                   ...future.conditions[[length(...future.conditions) + 
[16:21:16.213]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:16.213]                     cond$call), session = sessionInformation(), 
[16:21:16.213]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:16.213]                   signalCondition(cond)
[16:21:16.213]                 }
[16:21:16.213]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:16.213]                 "immediateCondition"))) {
[16:21:16.213]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:16.213]                   ...future.conditions[[length(...future.conditions) + 
[16:21:16.213]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:16.213]                   if (TRUE && !signal) {
[16:21:16.213]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.213]                     {
[16:21:16.213]                       inherits <- base::inherits
[16:21:16.213]                       invokeRestart <- base::invokeRestart
[16:21:16.213]                       is.null <- base::is.null
[16:21:16.213]                       muffled <- FALSE
[16:21:16.213]                       if (inherits(cond, "message")) {
[16:21:16.213]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:16.213]                         if (muffled) 
[16:21:16.213]                           invokeRestart("muffleMessage")
[16:21:16.213]                       }
[16:21:16.213]                       else if (inherits(cond, "warning")) {
[16:21:16.213]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:16.213]                         if (muffled) 
[16:21:16.213]                           invokeRestart("muffleWarning")
[16:21:16.213]                       }
[16:21:16.213]                       else if (inherits(cond, "condition")) {
[16:21:16.213]                         if (!is.null(pattern)) {
[16:21:16.213]                           computeRestarts <- base::computeRestarts
[16:21:16.213]                           grepl <- base::grepl
[16:21:16.213]                           restarts <- computeRestarts(cond)
[16:21:16.213]                           for (restart in restarts) {
[16:21:16.213]                             name <- restart$name
[16:21:16.213]                             if (is.null(name)) 
[16:21:16.213]                               next
[16:21:16.213]                             if (!grepl(pattern, name)) 
[16:21:16.213]                               next
[16:21:16.213]                             invokeRestart(restart)
[16:21:16.213]                             muffled <- TRUE
[16:21:16.213]                             break
[16:21:16.213]                           }
[16:21:16.213]                         }
[16:21:16.213]                       }
[16:21:16.213]                       invisible(muffled)
[16:21:16.213]                     }
[16:21:16.213]                     muffleCondition(cond, pattern = "^muffle")
[16:21:16.213]                   }
[16:21:16.213]                 }
[16:21:16.213]                 else {
[16:21:16.213]                   if (TRUE) {
[16:21:16.213]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.213]                     {
[16:21:16.213]                       inherits <- base::inherits
[16:21:16.213]                       invokeRestart <- base::invokeRestart
[16:21:16.213]                       is.null <- base::is.null
[16:21:16.213]                       muffled <- FALSE
[16:21:16.213]                       if (inherits(cond, "message")) {
[16:21:16.213]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:16.213]                         if (muffled) 
[16:21:16.213]                           invokeRestart("muffleMessage")
[16:21:16.213]                       }
[16:21:16.213]                       else if (inherits(cond, "warning")) {
[16:21:16.213]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:16.213]                         if (muffled) 
[16:21:16.213]                           invokeRestart("muffleWarning")
[16:21:16.213]                       }
[16:21:16.213]                       else if (inherits(cond, "condition")) {
[16:21:16.213]                         if (!is.null(pattern)) {
[16:21:16.213]                           computeRestarts <- base::computeRestarts
[16:21:16.213]                           grepl <- base::grepl
[16:21:16.213]                           restarts <- computeRestarts(cond)
[16:21:16.213]                           for (restart in restarts) {
[16:21:16.213]                             name <- restart$name
[16:21:16.213]                             if (is.null(name)) 
[16:21:16.213]                               next
[16:21:16.213]                             if (!grepl(pattern, name)) 
[16:21:16.213]                               next
[16:21:16.213]                             invokeRestart(restart)
[16:21:16.213]                             muffled <- TRUE
[16:21:16.213]                             break
[16:21:16.213]                           }
[16:21:16.213]                         }
[16:21:16.213]                       }
[16:21:16.213]                       invisible(muffled)
[16:21:16.213]                     }
[16:21:16.213]                     muffleCondition(cond, pattern = "^muffle")
[16:21:16.213]                   }
[16:21:16.213]                 }
[16:21:16.213]             }
[16:21:16.213]         }))
[16:21:16.213]     }, error = function(ex) {
[16:21:16.213]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:16.213]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:16.213]                 ...future.rng), started = ...future.startTime, 
[16:21:16.213]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:16.213]             version = "1.8"), class = "FutureResult")
[16:21:16.213]     }, finally = {
[16:21:16.213]         if (!identical(...future.workdir, getwd())) 
[16:21:16.213]             setwd(...future.workdir)
[16:21:16.213]         {
[16:21:16.213]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:16.213]                 ...future.oldOptions$nwarnings <- NULL
[16:21:16.213]             }
[16:21:16.213]             base::options(...future.oldOptions)
[16:21:16.213]             if (.Platform$OS.type == "windows") {
[16:21:16.213]                 old_names <- names(...future.oldEnvVars)
[16:21:16.213]                 envs <- base::Sys.getenv()
[16:21:16.213]                 names <- names(envs)
[16:21:16.213]                 common <- intersect(names, old_names)
[16:21:16.213]                 added <- setdiff(names, old_names)
[16:21:16.213]                 removed <- setdiff(old_names, names)
[16:21:16.213]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:16.213]                   envs[common]]
[16:21:16.213]                 NAMES <- toupper(changed)
[16:21:16.213]                 args <- list()
[16:21:16.213]                 for (kk in seq_along(NAMES)) {
[16:21:16.213]                   name <- changed[[kk]]
[16:21:16.213]                   NAME <- NAMES[[kk]]
[16:21:16.213]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.213]                     next
[16:21:16.213]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:16.213]                 }
[16:21:16.213]                 NAMES <- toupper(added)
[16:21:16.213]                 for (kk in seq_along(NAMES)) {
[16:21:16.213]                   name <- added[[kk]]
[16:21:16.213]                   NAME <- NAMES[[kk]]
[16:21:16.213]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.213]                     next
[16:21:16.213]                   args[[name]] <- ""
[16:21:16.213]                 }
[16:21:16.213]                 NAMES <- toupper(removed)
[16:21:16.213]                 for (kk in seq_along(NAMES)) {
[16:21:16.213]                   name <- removed[[kk]]
[16:21:16.213]                   NAME <- NAMES[[kk]]
[16:21:16.213]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.213]                     next
[16:21:16.213]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:16.213]                 }
[16:21:16.213]                 if (length(args) > 0) 
[16:21:16.213]                   base::do.call(base::Sys.setenv, args = args)
[16:21:16.213]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:16.213]             }
[16:21:16.213]             else {
[16:21:16.213]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:16.213]             }
[16:21:16.213]             {
[16:21:16.213]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:16.213]                   0L) {
[16:21:16.213]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:16.213]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:16.213]                   base::options(opts)
[16:21:16.213]                 }
[16:21:16.213]                 {
[16:21:16.213]                   {
[16:21:16.213]                     base::options(mc.cores = ...future.mc.cores.old)
[16:21:16.213]                     NULL
[16:21:16.213]                   }
[16:21:16.213]                   options(future.plan = NULL)
[16:21:16.213]                   if (is.na(NA_character_)) 
[16:21:16.213]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:16.213]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:16.213]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:16.213]                     .init = FALSE)
[16:21:16.213]                 }
[16:21:16.213]             }
[16:21:16.213]         }
[16:21:16.213]     })
[16:21:16.213]     if (TRUE) {
[16:21:16.213]         base::sink(type = "output", split = FALSE)
[16:21:16.213]         if (TRUE) {
[16:21:16.213]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:16.213]         }
[16:21:16.213]         else {
[16:21:16.213]             ...future.result["stdout"] <- base::list(NULL)
[16:21:16.213]         }
[16:21:16.213]         base::close(...future.stdout)
[16:21:16.213]         ...future.stdout <- NULL
[16:21:16.213]     }
[16:21:16.213]     ...future.result$conditions <- ...future.conditions
[16:21:16.213]     ...future.result$finished <- base::Sys.time()
[16:21:16.213]     ...future.result
[16:21:16.213] }
[16:21:16.216] requestCore(): workers = 2
[16:21:16.218] MulticoreFuture started
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    b <- 3
    c <- 2
    a * b * c
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[16:21:16.220] plan(): Setting new future strategy stack:
[16:21:16.220] List of future strategies:
[16:21:16.220] 1. sequential:
[16:21:16.220]    - args: function (..., envir = parent.frame())
[16:21:16.220]    - tweaked: FALSE
[16:21:16.220]    - call: NULL
[16:21:16.221] plan(): nbrOfWorkers() = 1
[16:21:16.223] plan(): Setting new future strategy stack:
[16:21:16.223] List of future strategies:
[16:21:16.223] 1. multicore:
[16:21:16.223]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:21:16.223]    - tweaked: FALSE
[16:21:16.223]    - call: plan(multicore)
[16:21:16.230] plan(): nbrOfWorkers() = 2
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 341000aa-40a0-ae89-3f55-e211e7e2f207
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:21:16.230] result() for MulticoreFuture ...
[16:21:16.232] result() for MulticoreFuture ...
[16:21:16.232] result() for MulticoreFuture ... done
[16:21:16.232] result() for MulticoreFuture ... done
[16:21:16.232] result() for MulticoreFuture ...
[16:21:16.232] result() for MulticoreFuture ... done
[1] 0
*** multicore(..., globals = FALSE) with globals and blocking
 - Creating multicore future #1 ...
[16:21:16.237] getGlobalsAndPackages() ...
[16:21:16.238] Not searching for globals
[16:21:16.238] - globals: [0] <none>
[16:21:16.238] getGlobalsAndPackages() ... DONE
[16:21:16.238] Packages needed by the future expression (n = 0): <none>
[16:21:16.239] Packages needed by future strategies (n = 0): <none>
[16:21:16.239] {
[16:21:16.239]     {
[16:21:16.239]         {
[16:21:16.239]             ...future.startTime <- base::Sys.time()
[16:21:16.239]             {
[16:21:16.239]                 {
[16:21:16.239]                   {
[16:21:16.239]                     {
[16:21:16.239]                       base::local({
[16:21:16.239]                         has_future <- base::requireNamespace("future", 
[16:21:16.239]                           quietly = TRUE)
[16:21:16.239]                         if (has_future) {
[16:21:16.239]                           ns <- base::getNamespace("future")
[16:21:16.239]                           version <- ns[[".package"]][["version"]]
[16:21:16.239]                           if (is.null(version)) 
[16:21:16.239]                             version <- utils::packageVersion("future")
[16:21:16.239]                         }
[16:21:16.239]                         else {
[16:21:16.239]                           version <- NULL
[16:21:16.239]                         }
[16:21:16.239]                         if (!has_future || version < "1.8.0") {
[16:21:16.239]                           info <- base::c(r_version = base::gsub("R version ", 
[16:21:16.239]                             "", base::R.version$version.string), 
[16:21:16.239]                             platform = base::sprintf("%s (%s-bit)", 
[16:21:16.239]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:16.239]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:16.239]                               "release", "version")], collapse = " "), 
[16:21:16.239]                             hostname = base::Sys.info()[["nodename"]])
[16:21:16.239]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:21:16.239]                             info)
[16:21:16.239]                           info <- base::paste(info, collapse = "; ")
[16:21:16.239]                           if (!has_future) {
[16:21:16.239]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:16.239]                               info)
[16:21:16.239]                           }
[16:21:16.239]                           else {
[16:21:16.239]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:16.239]                               info, version)
[16:21:16.239]                           }
[16:21:16.239]                           base::stop(msg)
[16:21:16.239]                         }
[16:21:16.239]                       })
[16:21:16.239]                     }
[16:21:16.239]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:21:16.239]                     base::options(mc.cores = 1L)
[16:21:16.239]                   }
[16:21:16.239]                   ...future.strategy.old <- future::plan("list")
[16:21:16.239]                   options(future.plan = NULL)
[16:21:16.239]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:16.239]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:16.239]                 }
[16:21:16.239]                 ...future.workdir <- getwd()
[16:21:16.239]             }
[16:21:16.239]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:16.239]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:16.239]         }
[16:21:16.239]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:16.239]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:16.239]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:16.239]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:16.239]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:16.239]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:16.239]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:16.239]             base::names(...future.oldOptions))
[16:21:16.239]     }
[16:21:16.239]     if (FALSE) {
[16:21:16.239]     }
[16:21:16.239]     else {
[16:21:16.239]         if (TRUE) {
[16:21:16.239]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:16.239]                 open = "w")
[16:21:16.239]         }
[16:21:16.239]         else {
[16:21:16.239]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:16.239]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:16.239]         }
[16:21:16.239]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:16.239]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:16.239]             base::sink(type = "output", split = FALSE)
[16:21:16.239]             base::close(...future.stdout)
[16:21:16.239]         }, add = TRUE)
[16:21:16.239]     }
[16:21:16.239]     ...future.frame <- base::sys.nframe()
[16:21:16.239]     ...future.conditions <- base::list()
[16:21:16.239]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:16.239]     if (FALSE) {
[16:21:16.239]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:16.239]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:16.239]     }
[16:21:16.239]     ...future.result <- base::tryCatch({
[16:21:16.239]         base::withCallingHandlers({
[16:21:16.239]             ...future.value <- base::withVisible(base::local({
[16:21:16.239]                 withCallingHandlers({
[16:21:16.239]                   {
[16:21:16.239]                     ii
[16:21:16.239]                   }
[16:21:16.239]                 }, immediateCondition = function(cond) {
[16:21:16.239]                   save_rds <- function (object, pathname, ...) 
[16:21:16.239]                   {
[16:21:16.239]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:21:16.239]                     if (file_test("-f", pathname_tmp)) {
[16:21:16.239]                       fi_tmp <- file.info(pathname_tmp)
[16:21:16.239]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:21:16.239]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:21:16.239]                         fi_tmp[["mtime"]])
[16:21:16.239]                     }
[16:21:16.239]                     tryCatch({
[16:21:16.239]                       saveRDS(object, file = pathname_tmp, ...)
[16:21:16.239]                     }, error = function(ex) {
[16:21:16.239]                       msg <- conditionMessage(ex)
[16:21:16.239]                       fi_tmp <- file.info(pathname_tmp)
[16:21:16.239]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:21:16.239]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:21:16.239]                         fi_tmp[["mtime"]], msg)
[16:21:16.239]                       ex$message <- msg
[16:21:16.239]                       stop(ex)
[16:21:16.239]                     })
[16:21:16.239]                     stopifnot(file_test("-f", pathname_tmp))
[16:21:16.239]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:21:16.239]                     if (!res || file_test("-f", pathname_tmp)) {
[16:21:16.239]                       fi_tmp <- file.info(pathname_tmp)
[16:21:16.239]                       fi <- file.info(pathname)
[16:21:16.239]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:21:16.239]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:21:16.239]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:21:16.239]                         fi[["size"]], fi[["mtime"]])
[16:21:16.239]                       stop(msg)
[16:21:16.239]                     }
[16:21:16.239]                     invisible(pathname)
[16:21:16.239]                   }
[16:21:16.239]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:21:16.239]                     rootPath = tempdir()) 
[16:21:16.239]                   {
[16:21:16.239]                     obj <- list(time = Sys.time(), condition = cond)
[16:21:16.239]                     file <- tempfile(pattern = class(cond)[1], 
[16:21:16.239]                       tmpdir = path, fileext = ".rds")
[16:21:16.239]                     save_rds(obj, file)
[16:21:16.239]                   }
[16:21:16.239]                   saveImmediateCondition(cond, path = "/tmp/RtmpCuMWhk/.future/immediateConditions")
[16:21:16.239]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.239]                   {
[16:21:16.239]                     inherits <- base::inherits
[16:21:16.239]                     invokeRestart <- base::invokeRestart
[16:21:16.239]                     is.null <- base::is.null
[16:21:16.239]                     muffled <- FALSE
[16:21:16.239]                     if (inherits(cond, "message")) {
[16:21:16.239]                       muffled <- grepl(pattern, "muffleMessage")
[16:21:16.239]                       if (muffled) 
[16:21:16.239]                         invokeRestart("muffleMessage")
[16:21:16.239]                     }
[16:21:16.239]                     else if (inherits(cond, "warning")) {
[16:21:16.239]                       muffled <- grepl(pattern, "muffleWarning")
[16:21:16.239]                       if (muffled) 
[16:21:16.239]                         invokeRestart("muffleWarning")
[16:21:16.239]                     }
[16:21:16.239]                     else if (inherits(cond, "condition")) {
[16:21:16.239]                       if (!is.null(pattern)) {
[16:21:16.239]                         computeRestarts <- base::computeRestarts
[16:21:16.239]                         grepl <- base::grepl
[16:21:16.239]                         restarts <- computeRestarts(cond)
[16:21:16.239]                         for (restart in restarts) {
[16:21:16.239]                           name <- restart$name
[16:21:16.239]                           if (is.null(name)) 
[16:21:16.239]                             next
[16:21:16.239]                           if (!grepl(pattern, name)) 
[16:21:16.239]                             next
[16:21:16.239]                           invokeRestart(restart)
[16:21:16.239]                           muffled <- TRUE
[16:21:16.239]                           break
[16:21:16.239]                         }
[16:21:16.239]                       }
[16:21:16.239]                     }
[16:21:16.239]                     invisible(muffled)
[16:21:16.239]                   }
[16:21:16.239]                   muffleCondition(cond)
[16:21:16.239]                 })
[16:21:16.239]             }))
[16:21:16.239]             future::FutureResult(value = ...future.value$value, 
[16:21:16.239]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:16.239]                   ...future.rng), globalenv = if (FALSE) 
[16:21:16.239]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:16.239]                     ...future.globalenv.names))
[16:21:16.239]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:16.239]         }, condition = base::local({
[16:21:16.239]             c <- base::c
[16:21:16.239]             inherits <- base::inherits
[16:21:16.239]             invokeRestart <- base::invokeRestart
[16:21:16.239]             length <- base::length
[16:21:16.239]             list <- base::list
[16:21:16.239]             seq.int <- base::seq.int
[16:21:16.239]             signalCondition <- base::signalCondition
[16:21:16.239]             sys.calls <- base::sys.calls
[16:21:16.239]             `[[` <- base::`[[`
[16:21:16.239]             `+` <- base::`+`
[16:21:16.239]             `<<-` <- base::`<<-`
[16:21:16.239]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:16.239]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:16.239]                   3L)]
[16:21:16.239]             }
[16:21:16.239]             function(cond) {
[16:21:16.239]                 is_error <- inherits(cond, "error")
[16:21:16.239]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:16.239]                   NULL)
[16:21:16.239]                 if (is_error) {
[16:21:16.239]                   sessionInformation <- function() {
[16:21:16.239]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:16.239]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:16.239]                       search = base::search(), system = base::Sys.info())
[16:21:16.239]                   }
[16:21:16.239]                   ...future.conditions[[length(...future.conditions) + 
[16:21:16.239]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:16.239]                     cond$call), session = sessionInformation(), 
[16:21:16.239]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:16.239]                   signalCondition(cond)
[16:21:16.239]                 }
[16:21:16.239]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:16.239]                 "immediateCondition"))) {
[16:21:16.239]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:16.239]                   ...future.conditions[[length(...future.conditions) + 
[16:21:16.239]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:16.239]                   if (TRUE && !signal) {
[16:21:16.239]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.239]                     {
[16:21:16.239]                       inherits <- base::inherits
[16:21:16.239]                       invokeRestart <- base::invokeRestart
[16:21:16.239]                       is.null <- base::is.null
[16:21:16.239]                       muffled <- FALSE
[16:21:16.239]                       if (inherits(cond, "message")) {
[16:21:16.239]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:16.239]                         if (muffled) 
[16:21:16.239]                           invokeRestart("muffleMessage")
[16:21:16.239]                       }
[16:21:16.239]                       else if (inherits(cond, "warning")) {
[16:21:16.239]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:16.239]                         if (muffled) 
[16:21:16.239]                           invokeRestart("muffleWarning")
[16:21:16.239]                       }
[16:21:16.239]                       else if (inherits(cond, "condition")) {
[16:21:16.239]                         if (!is.null(pattern)) {
[16:21:16.239]                           computeRestarts <- base::computeRestarts
[16:21:16.239]                           grepl <- base::grepl
[16:21:16.239]                           restarts <- computeRestarts(cond)
[16:21:16.239]                           for (restart in restarts) {
[16:21:16.239]                             name <- restart$name
[16:21:16.239]                             if (is.null(name)) 
[16:21:16.239]                               next
[16:21:16.239]                             if (!grepl(pattern, name)) 
[16:21:16.239]                               next
[16:21:16.239]                             invokeRestart(restart)
[16:21:16.239]                             muffled <- TRUE
[16:21:16.239]                             break
[16:21:16.239]                           }
[16:21:16.239]                         }
[16:21:16.239]                       }
[16:21:16.239]                       invisible(muffled)
[16:21:16.239]                     }
[16:21:16.239]                     muffleCondition(cond, pattern = "^muffle")
[16:21:16.239]                   }
[16:21:16.239]                 }
[16:21:16.239]                 else {
[16:21:16.239]                   if (TRUE) {
[16:21:16.239]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.239]                     {
[16:21:16.239]                       inherits <- base::inherits
[16:21:16.239]                       invokeRestart <- base::invokeRestart
[16:21:16.239]                       is.null <- base::is.null
[16:21:16.239]                       muffled <- FALSE
[16:21:16.239]                       if (inherits(cond, "message")) {
[16:21:16.239]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:16.239]                         if (muffled) 
[16:21:16.239]                           invokeRestart("muffleMessage")
[16:21:16.239]                       }
[16:21:16.239]                       else if (inherits(cond, "warning")) {
[16:21:16.239]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:16.239]                         if (muffled) 
[16:21:16.239]                           invokeRestart("muffleWarning")
[16:21:16.239]                       }
[16:21:16.239]                       else if (inherits(cond, "condition")) {
[16:21:16.239]                         if (!is.null(pattern)) {
[16:21:16.239]                           computeRestarts <- base::computeRestarts
[16:21:16.239]                           grepl <- base::grepl
[16:21:16.239]                           restarts <- computeRestarts(cond)
[16:21:16.239]                           for (restart in restarts) {
[16:21:16.239]                             name <- restart$name
[16:21:16.239]                             if (is.null(name)) 
[16:21:16.239]                               next
[16:21:16.239]                             if (!grepl(pattern, name)) 
[16:21:16.239]                               next
[16:21:16.239]                             invokeRestart(restart)
[16:21:16.239]                             muffled <- TRUE
[16:21:16.239]                             break
[16:21:16.239]                           }
[16:21:16.239]                         }
[16:21:16.239]                       }
[16:21:16.239]                       invisible(muffled)
[16:21:16.239]                     }
[16:21:16.239]                     muffleCondition(cond, pattern = "^muffle")
[16:21:16.239]                   }
[16:21:16.239]                 }
[16:21:16.239]             }
[16:21:16.239]         }))
[16:21:16.239]     }, error = function(ex) {
[16:21:16.239]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:16.239]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:16.239]                 ...future.rng), started = ...future.startTime, 
[16:21:16.239]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:16.239]             version = "1.8"), class = "FutureResult")
[16:21:16.239]     }, finally = {
[16:21:16.239]         if (!identical(...future.workdir, getwd())) 
[16:21:16.239]             setwd(...future.workdir)
[16:21:16.239]         {
[16:21:16.239]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:16.239]                 ...future.oldOptions$nwarnings <- NULL
[16:21:16.239]             }
[16:21:16.239]             base::options(...future.oldOptions)
[16:21:16.239]             if (.Platform$OS.type == "windows") {
[16:21:16.239]                 old_names <- names(...future.oldEnvVars)
[16:21:16.239]                 envs <- base::Sys.getenv()
[16:21:16.239]                 names <- names(envs)
[16:21:16.239]                 common <- intersect(names, old_names)
[16:21:16.239]                 added <- setdiff(names, old_names)
[16:21:16.239]                 removed <- setdiff(old_names, names)
[16:21:16.239]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:16.239]                   envs[common]]
[16:21:16.239]                 NAMES <- toupper(changed)
[16:21:16.239]                 args <- list()
[16:21:16.239]                 for (kk in seq_along(NAMES)) {
[16:21:16.239]                   name <- changed[[kk]]
[16:21:16.239]                   NAME <- NAMES[[kk]]
[16:21:16.239]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.239]                     next
[16:21:16.239]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:16.239]                 }
[16:21:16.239]                 NAMES <- toupper(added)
[16:21:16.239]                 for (kk in seq_along(NAMES)) {
[16:21:16.239]                   name <- added[[kk]]
[16:21:16.239]                   NAME <- NAMES[[kk]]
[16:21:16.239]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.239]                     next
[16:21:16.239]                   args[[name]] <- ""
[16:21:16.239]                 }
[16:21:16.239]                 NAMES <- toupper(removed)
[16:21:16.239]                 for (kk in seq_along(NAMES)) {
[16:21:16.239]                   name <- removed[[kk]]
[16:21:16.239]                   NAME <- NAMES[[kk]]
[16:21:16.239]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.239]                     next
[16:21:16.239]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:16.239]                 }
[16:21:16.239]                 if (length(args) > 0) 
[16:21:16.239]                   base::do.call(base::Sys.setenv, args = args)
[16:21:16.239]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:16.239]             }
[16:21:16.239]             else {
[16:21:16.239]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:16.239]             }
[16:21:16.239]             {
[16:21:16.239]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:16.239]                   0L) {
[16:21:16.239]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:16.239]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:16.239]                   base::options(opts)
[16:21:16.239]                 }
[16:21:16.239]                 {
[16:21:16.239]                   {
[16:21:16.239]                     base::options(mc.cores = ...future.mc.cores.old)
[16:21:16.239]                     NULL
[16:21:16.239]                   }
[16:21:16.239]                   options(future.plan = NULL)
[16:21:16.239]                   if (is.na(NA_character_)) 
[16:21:16.239]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:16.239]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:16.239]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:16.239]                     .init = FALSE)
[16:21:16.239]                 }
[16:21:16.239]             }
[16:21:16.239]         }
[16:21:16.239]     })
[16:21:16.239]     if (TRUE) {
[16:21:16.239]         base::sink(type = "output", split = FALSE)
[16:21:16.239]         if (TRUE) {
[16:21:16.239]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:16.239]         }
[16:21:16.239]         else {
[16:21:16.239]             ...future.result["stdout"] <- base::list(NULL)
[16:21:16.239]         }
[16:21:16.239]         base::close(...future.stdout)
[16:21:16.239]         ...future.stdout <- NULL
[16:21:16.239]     }
[16:21:16.239]     ...future.result$conditions <- ...future.conditions
[16:21:16.239]     ...future.result$finished <- base::Sys.time()
[16:21:16.239]     ...future.result
[16:21:16.239] }
[16:21:16.242] requestCore(): workers = 2
[16:21:16.245] MulticoreFuture started
 - Creating multicore future #2 ...
[16:21:16.246] plan(): Setting new future strategy stack:
[16:21:16.246] List of future strategies:
[16:21:16.246] 1. sequential:
[16:21:16.246]    - args: function (..., envir = parent.frame())
[16:21:16.246]    - tweaked: FALSE
[16:21:16.246]    - call: NULL
[16:21:16.247] plan(): nbrOfWorkers() = 1
[16:21:16.250] plan(): Setting new future strategy stack:
[16:21:16.250] List of future strategies:
[16:21:16.250] 1. multicore:
[16:21:16.250]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:21:16.250]    - tweaked: FALSE
[16:21:16.250]    - call: plan(multicore)
[16:21:16.252] getGlobalsAndPackages() ...
[16:21:16.252] Not searching for globals
[16:21:16.253] - globals: [0] <none>
[16:21:16.253] getGlobalsAndPackages() ... DONE
[16:21:16.254] Packages needed by the future expression (n = 0): <none>
[16:21:16.254] Packages needed by future strategies (n = 0): <none>
[16:21:16.255] plan(): nbrOfWorkers() = 2
[16:21:16.255] {
[16:21:16.255]     {
[16:21:16.255]         {
[16:21:16.255]             ...future.startTime <- base::Sys.time()
[16:21:16.255]             {
[16:21:16.255]                 {
[16:21:16.255]                   {
[16:21:16.255]                     {
[16:21:16.255]                       base::local({
[16:21:16.255]                         has_future <- base::requireNamespace("future", 
[16:21:16.255]                           quietly = TRUE)
[16:21:16.255]                         if (has_future) {
[16:21:16.255]                           ns <- base::getNamespace("future")
[16:21:16.255]                           version <- ns[[".package"]][["version"]]
[16:21:16.255]                           if (is.null(version)) 
[16:21:16.255]                             version <- utils::packageVersion("future")
[16:21:16.255]                         }
[16:21:16.255]                         else {
[16:21:16.255]                           version <- NULL
[16:21:16.255]                         }
[16:21:16.255]                         if (!has_future || version < "1.8.0") {
[16:21:16.255]                           info <- base::c(r_version = base::gsub("R version ", 
[16:21:16.255]                             "", base::R.version$version.string), 
[16:21:16.255]                             platform = base::sprintf("%s (%s-bit)", 
[16:21:16.255]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:16.255]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:16.255]                               "release", "version")], collapse = " "), 
[16:21:16.255]                             hostname = base::Sys.info()[["nodename"]])
[16:21:16.255]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:21:16.255]                             info)
[16:21:16.255]                           info <- base::paste(info, collapse = "; ")
[16:21:16.255]                           if (!has_future) {
[16:21:16.255]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:16.255]                               info)
[16:21:16.255]                           }
[16:21:16.255]                           else {
[16:21:16.255]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:16.255]                               info, version)
[16:21:16.255]                           }
[16:21:16.255]                           base::stop(msg)
[16:21:16.255]                         }
[16:21:16.255]                       })
[16:21:16.255]                     }
[16:21:16.255]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:21:16.255]                     base::options(mc.cores = 1L)
[16:21:16.255]                   }
[16:21:16.255]                   ...future.strategy.old <- future::plan("list")
[16:21:16.255]                   options(future.plan = NULL)
[16:21:16.255]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:16.255]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:16.255]                 }
[16:21:16.255]                 ...future.workdir <- getwd()
[16:21:16.255]             }
[16:21:16.255]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:16.255]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:16.255]         }
[16:21:16.255]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:16.255]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:16.255]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:16.255]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:16.255]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:16.255]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:16.255]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:16.255]             base::names(...future.oldOptions))
[16:21:16.255]     }
[16:21:16.255]     if (FALSE) {
[16:21:16.255]     }
[16:21:16.255]     else {
[16:21:16.255]         if (TRUE) {
[16:21:16.255]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:16.255]                 open = "w")
[16:21:16.255]         }
[16:21:16.255]         else {
[16:21:16.255]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:16.255]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:16.255]         }
[16:21:16.255]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:16.255]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:16.255]             base::sink(type = "output", split = FALSE)
[16:21:16.255]             base::close(...future.stdout)
[16:21:16.255]         }, add = TRUE)
[16:21:16.255]     }
[16:21:16.255]     ...future.frame <- base::sys.nframe()
[16:21:16.255]     ...future.conditions <- base::list()
[16:21:16.255]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:16.255]     if (FALSE) {
[16:21:16.255]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:16.255]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:16.255]     }
[16:21:16.255]     ...future.result <- base::tryCatch({
[16:21:16.255]         base::withCallingHandlers({
[16:21:16.255]             ...future.value <- base::withVisible(base::local({
[16:21:16.255]                 withCallingHandlers({
[16:21:16.255]                   {
[16:21:16.255]                     ii
[16:21:16.255]                   }
[16:21:16.255]                 }, immediateCondition = function(cond) {
[16:21:16.255]                   save_rds <- function (object, pathname, ...) 
[16:21:16.255]                   {
[16:21:16.255]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:21:16.255]                     if (file_test("-f", pathname_tmp)) {
[16:21:16.255]                       fi_tmp <- file.info(pathname_tmp)
[16:21:16.255]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:21:16.255]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:21:16.255]                         fi_tmp[["mtime"]])
[16:21:16.255]                     }
[16:21:16.255]                     tryCatch({
[16:21:16.255]                       saveRDS(object, file = pathname_tmp, ...)
[16:21:16.255]                     }, error = function(ex) {
[16:21:16.255]                       msg <- conditionMessage(ex)
[16:21:16.255]                       fi_tmp <- file.info(pathname_tmp)
[16:21:16.255]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:21:16.255]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:21:16.255]                         fi_tmp[["mtime"]], msg)
[16:21:16.255]                       ex$message <- msg
[16:21:16.255]                       stop(ex)
[16:21:16.255]                     })
[16:21:16.255]                     stopifnot(file_test("-f", pathname_tmp))
[16:21:16.255]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:21:16.255]                     if (!res || file_test("-f", pathname_tmp)) {
[16:21:16.255]                       fi_tmp <- file.info(pathname_tmp)
[16:21:16.255]                       fi <- file.info(pathname)
[16:21:16.255]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:21:16.255]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:21:16.255]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:21:16.255]                         fi[["size"]], fi[["mtime"]])
[16:21:16.255]                       stop(msg)
[16:21:16.255]                     }
[16:21:16.255]                     invisible(pathname)
[16:21:16.255]                   }
[16:21:16.255]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:21:16.255]                     rootPath = tempdir()) 
[16:21:16.255]                   {
[16:21:16.255]                     obj <- list(time = Sys.time(), condition = cond)
[16:21:16.255]                     file <- tempfile(pattern = class(cond)[1], 
[16:21:16.255]                       tmpdir = path, fileext = ".rds")
[16:21:16.255]                     save_rds(obj, file)
[16:21:16.255]                   }
[16:21:16.255]                   saveImmediateCondition(cond, path = "/tmp/RtmpCuMWhk/.future/immediateConditions")
[16:21:16.255]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.255]                   {
[16:21:16.255]                     inherits <- base::inherits
[16:21:16.255]                     invokeRestart <- base::invokeRestart
[16:21:16.255]                     is.null <- base::is.null
[16:21:16.255]                     muffled <- FALSE
[16:21:16.255]                     if (inherits(cond, "message")) {
[16:21:16.255]                       muffled <- grepl(pattern, "muffleMessage")
[16:21:16.255]                       if (muffled) 
[16:21:16.255]                         invokeRestart("muffleMessage")
[16:21:16.255]                     }
[16:21:16.255]                     else if (inherits(cond, "warning")) {
[16:21:16.255]                       muffled <- grepl(pattern, "muffleWarning")
[16:21:16.255]                       if (muffled) 
[16:21:16.255]                         invokeRestart("muffleWarning")
[16:21:16.255]                     }
[16:21:16.255]                     else if (inherits(cond, "condition")) {
[16:21:16.255]                       if (!is.null(pattern)) {
[16:21:16.255]                         computeRestarts <- base::computeRestarts
[16:21:16.255]                         grepl <- base::grepl
[16:21:16.255]                         restarts <- computeRestarts(cond)
[16:21:16.255]                         for (restart in restarts) {
[16:21:16.255]                           name <- restart$name
[16:21:16.255]                           if (is.null(name)) 
[16:21:16.255]                             next
[16:21:16.255]                           if (!grepl(pattern, name)) 
[16:21:16.255]                             next
[16:21:16.255]                           invokeRestart(restart)
[16:21:16.255]                           muffled <- TRUE
[16:21:16.255]                           break
[16:21:16.255]                         }
[16:21:16.255]                       }
[16:21:16.255]                     }
[16:21:16.255]                     invisible(muffled)
[16:21:16.255]                   }
[16:21:16.255]                   muffleCondition(cond)
[16:21:16.255]                 })
[16:21:16.255]             }))
[16:21:16.255]             future::FutureResult(value = ...future.value$value, 
[16:21:16.255]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:16.255]                   ...future.rng), globalenv = if (FALSE) 
[16:21:16.255]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:16.255]                     ...future.globalenv.names))
[16:21:16.255]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:16.255]         }, condition = base::local({
[16:21:16.255]             c <- base::c
[16:21:16.255]             inherits <- base::inherits
[16:21:16.255]             invokeRestart <- base::invokeRestart
[16:21:16.255]             length <- base::length
[16:21:16.255]             list <- base::list
[16:21:16.255]             seq.int <- base::seq.int
[16:21:16.255]             signalCondition <- base::signalCondition
[16:21:16.255]             sys.calls <- base::sys.calls
[16:21:16.255]             `[[` <- base::`[[`
[16:21:16.255]             `+` <- base::`+`
[16:21:16.255]             `<<-` <- base::`<<-`
[16:21:16.255]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:16.255]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:16.255]                   3L)]
[16:21:16.255]             }
[16:21:16.255]             function(cond) {
[16:21:16.255]                 is_error <- inherits(cond, "error")
[16:21:16.255]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:16.255]                   NULL)
[16:21:16.255]                 if (is_error) {
[16:21:16.255]                   sessionInformation <- function() {
[16:21:16.255]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:16.255]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:16.255]                       search = base::search(), system = base::Sys.info())
[16:21:16.255]                   }
[16:21:16.255]                   ...future.conditions[[length(...future.conditions) + 
[16:21:16.255]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:16.255]                     cond$call), session = sessionInformation(), 
[16:21:16.255]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:16.255]                   signalCondition(cond)
[16:21:16.255]                 }
[16:21:16.255]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:16.255]                 "immediateCondition"))) {
[16:21:16.255]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:16.255]                   ...future.conditions[[length(...future.conditions) + 
[16:21:16.255]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:16.255]                   if (TRUE && !signal) {
[16:21:16.255]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.255]                     {
[16:21:16.255]                       inherits <- base::inherits
[16:21:16.255]                       invokeRestart <- base::invokeRestart
[16:21:16.255]                       is.null <- base::is.null
[16:21:16.255]                       muffled <- FALSE
[16:21:16.255]                       if (inherits(cond, "message")) {
[16:21:16.255]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:16.255]                         if (muffled) 
[16:21:16.255]                           invokeRestart("muffleMessage")
[16:21:16.255]                       }
[16:21:16.255]                       else if (inherits(cond, "warning")) {
[16:21:16.255]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:16.255]                         if (muffled) 
[16:21:16.255]                           invokeRestart("muffleWarning")
[16:21:16.255]                       }
[16:21:16.255]                       else if (inherits(cond, "condition")) {
[16:21:16.255]                         if (!is.null(pattern)) {
[16:21:16.255]                           computeRestarts <- base::computeRestarts
[16:21:16.255]                           grepl <- base::grepl
[16:21:16.255]                           restarts <- computeRestarts(cond)
[16:21:16.255]                           for (restart in restarts) {
[16:21:16.255]                             name <- restart$name
[16:21:16.255]                             if (is.null(name)) 
[16:21:16.255]                               next
[16:21:16.255]                             if (!grepl(pattern, name)) 
[16:21:16.255]                               next
[16:21:16.255]                             invokeRestart(restart)
[16:21:16.255]                             muffled <- TRUE
[16:21:16.255]                             break
[16:21:16.255]                           }
[16:21:16.255]                         }
[16:21:16.255]                       }
[16:21:16.255]                       invisible(muffled)
[16:21:16.255]                     }
[16:21:16.255]                     muffleCondition(cond, pattern = "^muffle")
[16:21:16.255]                   }
[16:21:16.255]                 }
[16:21:16.255]                 else {
[16:21:16.255]                   if (TRUE) {
[16:21:16.255]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.255]                     {
[16:21:16.255]                       inherits <- base::inherits
[16:21:16.255]                       invokeRestart <- base::invokeRestart
[16:21:16.255]                       is.null <- base::is.null
[16:21:16.255]                       muffled <- FALSE
[16:21:16.255]                       if (inherits(cond, "message")) {
[16:21:16.255]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:16.255]                         if (muffled) 
[16:21:16.255]                           invokeRestart("muffleMessage")
[16:21:16.255]                       }
[16:21:16.255]                       else if (inherits(cond, "warning")) {
[16:21:16.255]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:16.255]                         if (muffled) 
[16:21:16.255]                           invokeRestart("muffleWarning")
[16:21:16.255]                       }
[16:21:16.255]                       else if (inherits(cond, "condition")) {
[16:21:16.255]                         if (!is.null(pattern)) {
[16:21:16.255]                           computeRestarts <- base::computeRestarts
[16:21:16.255]                           grepl <- base::grepl
[16:21:16.255]                           restarts <- computeRestarts(cond)
[16:21:16.255]                           for (restart in restarts) {
[16:21:16.255]                             name <- restart$name
[16:21:16.255]                             if (is.null(name)) 
[16:21:16.255]                               next
[16:21:16.255]                             if (!grepl(pattern, name)) 
[16:21:16.255]                               next
[16:21:16.255]                             invokeRestart(restart)
[16:21:16.255]                             muffled <- TRUE
[16:21:16.255]                             break
[16:21:16.255]                           }
[16:21:16.255]                         }
[16:21:16.255]                       }
[16:21:16.255]                       invisible(muffled)
[16:21:16.255]                     }
[16:21:16.255]                     muffleCondition(cond, pattern = "^muffle")
[16:21:16.255]                   }
[16:21:16.255]                 }
[16:21:16.255]             }
[16:21:16.255]         }))
[16:21:16.255]     }, error = function(ex) {
[16:21:16.255]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:16.255]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:16.255]                 ...future.rng), started = ...future.startTime, 
[16:21:16.255]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:16.255]             version = "1.8"), class = "FutureResult")
[16:21:16.255]     }, finally = {
[16:21:16.255]         if (!identical(...future.workdir, getwd())) 
[16:21:16.255]             setwd(...future.workdir)
[16:21:16.255]         {
[16:21:16.255]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:16.255]                 ...future.oldOptions$nwarnings <- NULL
[16:21:16.255]             }
[16:21:16.255]             base::options(...future.oldOptions)
[16:21:16.255]             if (.Platform$OS.type == "windows") {
[16:21:16.255]                 old_names <- names(...future.oldEnvVars)
[16:21:16.255]                 envs <- base::Sys.getenv()
[16:21:16.255]                 names <- names(envs)
[16:21:16.255]                 common <- intersect(names, old_names)
[16:21:16.255]                 added <- setdiff(names, old_names)
[16:21:16.255]                 removed <- setdiff(old_names, names)
[16:21:16.255]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:16.255]                   envs[common]]
[16:21:16.255]                 NAMES <- toupper(changed)
[16:21:16.255]                 args <- list()
[16:21:16.255]                 for (kk in seq_along(NAMES)) {
[16:21:16.255]                   name <- changed[[kk]]
[16:21:16.255]                   NAME <- NAMES[[kk]]
[16:21:16.255]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.255]                     next
[16:21:16.255]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:16.255]                 }
[16:21:16.255]                 NAMES <- toupper(added)
[16:21:16.255]                 for (kk in seq_along(NAMES)) {
[16:21:16.255]                   name <- added[[kk]]
[16:21:16.255]                   NAME <- NAMES[[kk]]
[16:21:16.255]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.255]                     next
[16:21:16.255]                   args[[name]] <- ""
[16:21:16.255]                 }
[16:21:16.255]                 NAMES <- toupper(removed)
[16:21:16.255]                 for (kk in seq_along(NAMES)) {
[16:21:16.255]                   name <- removed[[kk]]
[16:21:16.255]                   NAME <- NAMES[[kk]]
[16:21:16.255]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.255]                     next
[16:21:16.255]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:16.255]                 }
[16:21:16.255]                 if (length(args) > 0) 
[16:21:16.255]                   base::do.call(base::Sys.setenv, args = args)
[16:21:16.255]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:16.255]             }
[16:21:16.255]             else {
[16:21:16.255]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:16.255]             }
[16:21:16.255]             {
[16:21:16.255]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:16.255]                   0L) {
[16:21:16.255]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:16.255]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:16.255]                   base::options(opts)
[16:21:16.255]                 }
[16:21:16.255]                 {
[16:21:16.255]                   {
[16:21:16.255]                     base::options(mc.cores = ...future.mc.cores.old)
[16:21:16.255]                     NULL
[16:21:16.255]                   }
[16:21:16.255]                   options(future.plan = NULL)
[16:21:16.255]                   if (is.na(NA_character_)) 
[16:21:16.255]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:16.255]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:16.255]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:16.255]                     .init = FALSE)
[16:21:16.255]                 }
[16:21:16.255]             }
[16:21:16.255]         }
[16:21:16.255]     })
[16:21:16.255]     if (TRUE) {
[16:21:16.255]         base::sink(type = "output", split = FALSE)
[16:21:16.255]         if (TRUE) {
[16:21:16.255]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:16.255]         }
[16:21:16.255]         else {
[16:21:16.255]             ...future.result["stdout"] <- base::list(NULL)
[16:21:16.255]         }
[16:21:16.255]         base::close(...future.stdout)
[16:21:16.255]         ...future.stdout <- NULL
[16:21:16.255]     }
[16:21:16.255]     ...future.result$conditions <- ...future.conditions
[16:21:16.255]     ...future.result$finished <- base::Sys.time()
[16:21:16.255]     ...future.result
[16:21:16.255] }
[16:21:16.259] requestCore(): workers = 2
[16:21:16.261] MulticoreFuture started
 - Creating multicore future #3 ...
[16:21:16.262] plan(): Setting new future strategy stack:
[16:21:16.262] List of future strategies:
[16:21:16.262] 1. sequential:
[16:21:16.262]    - args: function (..., envir = parent.frame())
[16:21:16.262]    - tweaked: FALSE
[16:21:16.262]    - call: NULL
[16:21:16.263] plan(): nbrOfWorkers() = 1
[16:21:16.265] plan(): Setting new future strategy stack:
[16:21:16.266] List of future strategies:
[16:21:16.266] 1. multicore:
[16:21:16.266]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:21:16.266]    - tweaked: FALSE
[16:21:16.266]    - call: plan(multicore)
[16:21:16.267] getGlobalsAndPackages() ...
[16:21:16.268] Not searching for globals
[16:21:16.268] - globals: [0] <none>
[16:21:16.268] getGlobalsAndPackages() ... DONE
[16:21:16.269] Packages needed by the future expression (n = 0): <none>
[16:21:16.269] Packages needed by future strategies (n = 0): <none>
[16:21:16.271] plan(): nbrOfWorkers() = 2
[16:21:16.270] {
[16:21:16.270]     {
[16:21:16.270]         {
[16:21:16.270]             ...future.startTime <- base::Sys.time()
[16:21:16.270]             {
[16:21:16.270]                 {
[16:21:16.270]                   {
[16:21:16.270]                     {
[16:21:16.270]                       base::local({
[16:21:16.270]                         has_future <- base::requireNamespace("future", 
[16:21:16.270]                           quietly = TRUE)
[16:21:16.270]                         if (has_future) {
[16:21:16.270]                           ns <- base::getNamespace("future")
[16:21:16.270]                           version <- ns[[".package"]][["version"]]
[16:21:16.270]                           if (is.null(version)) 
[16:21:16.270]                             version <- utils::packageVersion("future")
[16:21:16.270]                         }
[16:21:16.270]                         else {
[16:21:16.270]                           version <- NULL
[16:21:16.270]                         }
[16:21:16.270]                         if (!has_future || version < "1.8.0") {
[16:21:16.270]                           info <- base::c(r_version = base::gsub("R version ", 
[16:21:16.270]                             "", base::R.version$version.string), 
[16:21:16.270]                             platform = base::sprintf("%s (%s-bit)", 
[16:21:16.270]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:16.270]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:16.270]                               "release", "version")], collapse = " "), 
[16:21:16.270]                             hostname = base::Sys.info()[["nodename"]])
[16:21:16.270]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:21:16.270]                             info)
[16:21:16.270]                           info <- base::paste(info, collapse = "; ")
[16:21:16.270]                           if (!has_future) {
[16:21:16.270]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:16.270]                               info)
[16:21:16.270]                           }
[16:21:16.270]                           else {
[16:21:16.270]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:16.270]                               info, version)
[16:21:16.270]                           }
[16:21:16.270]                           base::stop(msg)
[16:21:16.270]                         }
[16:21:16.270]                       })
[16:21:16.270]                     }
[16:21:16.270]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:21:16.270]                     base::options(mc.cores = 1L)
[16:21:16.270]                   }
[16:21:16.270]                   ...future.strategy.old <- future::plan("list")
[16:21:16.270]                   options(future.plan = NULL)
[16:21:16.270]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:16.270]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:16.270]                 }
[16:21:16.270]                 ...future.workdir <- getwd()
[16:21:16.270]             }
[16:21:16.270]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:16.270]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:16.270]         }
[16:21:16.270]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:16.270]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:16.270]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:16.270]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:16.270]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:16.270]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:16.270]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:16.270]             base::names(...future.oldOptions))
[16:21:16.270]     }
[16:21:16.270]     if (FALSE) {
[16:21:16.270]     }
[16:21:16.270]     else {
[16:21:16.270]         if (TRUE) {
[16:21:16.270]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:16.270]                 open = "w")
[16:21:16.270]         }
[16:21:16.270]         else {
[16:21:16.270]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:16.270]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:16.270]         }
[16:21:16.270]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:16.270]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:16.270]             base::sink(type = "output", split = FALSE)
[16:21:16.270]             base::close(...future.stdout)
[16:21:16.270]         }, add = TRUE)
[16:21:16.270]     }
[16:21:16.270]     ...future.frame <- base::sys.nframe()
[16:21:16.270]     ...future.conditions <- base::list()
[16:21:16.270]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:16.270]     if (FALSE) {
[16:21:16.270]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:16.270]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:16.270]     }
[16:21:16.270]     ...future.result <- base::tryCatch({
[16:21:16.270]         base::withCallingHandlers({
[16:21:16.270]             ...future.value <- base::withVisible(base::local({
[16:21:16.270]                 withCallingHandlers({
[16:21:16.270]                   {
[16:21:16.270]                     ii
[16:21:16.270]                   }
[16:21:16.270]                 }, immediateCondition = function(cond) {
[16:21:16.270]                   save_rds <- function (object, pathname, ...) 
[16:21:16.270]                   {
[16:21:16.270]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:21:16.270]                     if (file_test("-f", pathname_tmp)) {
[16:21:16.270]                       fi_tmp <- file.info(pathname_tmp)
[16:21:16.270]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:21:16.270]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:21:16.270]                         fi_tmp[["mtime"]])
[16:21:16.270]                     }
[16:21:16.270]                     tryCatch({
[16:21:16.270]                       saveRDS(object, file = pathname_tmp, ...)
[16:21:16.270]                     }, error = function(ex) {
[16:21:16.270]                       msg <- conditionMessage(ex)
[16:21:16.270]                       fi_tmp <- file.info(pathname_tmp)
[16:21:16.270]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:21:16.270]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:21:16.270]                         fi_tmp[["mtime"]], msg)
[16:21:16.270]                       ex$message <- msg
[16:21:16.270]                       stop(ex)
[16:21:16.270]                     })
[16:21:16.270]                     stopifnot(file_test("-f", pathname_tmp))
[16:21:16.270]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:21:16.270]                     if (!res || file_test("-f", pathname_tmp)) {
[16:21:16.270]                       fi_tmp <- file.info(pathname_tmp)
[16:21:16.270]                       fi <- file.info(pathname)
[16:21:16.270]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:21:16.270]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:21:16.270]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:21:16.270]                         fi[["size"]], fi[["mtime"]])
[16:21:16.270]                       stop(msg)
[16:21:16.270]                     }
[16:21:16.270]                     invisible(pathname)
[16:21:16.270]                   }
[16:21:16.270]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:21:16.270]                     rootPath = tempdir()) 
[16:21:16.270]                   {
[16:21:16.270]                     obj <- list(time = Sys.time(), condition = cond)
[16:21:16.270]                     file <- tempfile(pattern = class(cond)[1], 
[16:21:16.270]                       tmpdir = path, fileext = ".rds")
[16:21:16.270]                     save_rds(obj, file)
[16:21:16.270]                   }
[16:21:16.270]                   saveImmediateCondition(cond, path = "/tmp/RtmpCuMWhk/.future/immediateConditions")
[16:21:16.270]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.270]                   {
[16:21:16.270]                     inherits <- base::inherits
[16:21:16.270]                     invokeRestart <- base::invokeRestart
[16:21:16.270]                     is.null <- base::is.null
[16:21:16.270]                     muffled <- FALSE
[16:21:16.270]                     if (inherits(cond, "message")) {
[16:21:16.270]                       muffled <- grepl(pattern, "muffleMessage")
[16:21:16.270]                       if (muffled) 
[16:21:16.270]                         invokeRestart("muffleMessage")
[16:21:16.270]                     }
[16:21:16.270]                     else if (inherits(cond, "warning")) {
[16:21:16.270]                       muffled <- grepl(pattern, "muffleWarning")
[16:21:16.270]                       if (muffled) 
[16:21:16.270]                         invokeRestart("muffleWarning")
[16:21:16.270]                     }
[16:21:16.270]                     else if (inherits(cond, "condition")) {
[16:21:16.270]                       if (!is.null(pattern)) {
[16:21:16.270]                         computeRestarts <- base::computeRestarts
[16:21:16.270]                         grepl <- base::grepl
[16:21:16.270]                         restarts <- computeRestarts(cond)
[16:21:16.270]                         for (restart in restarts) {
[16:21:16.270]                           name <- restart$name
[16:21:16.270]                           if (is.null(name)) 
[16:21:16.270]                             next
[16:21:16.270]                           if (!grepl(pattern, name)) 
[16:21:16.270]                             next
[16:21:16.270]                           invokeRestart(restart)
[16:21:16.270]                           muffled <- TRUE
[16:21:16.270]                           break
[16:21:16.270]                         }
[16:21:16.270]                       }
[16:21:16.270]                     }
[16:21:16.270]                     invisible(muffled)
[16:21:16.270]                   }
[16:21:16.270]                   muffleCondition(cond)
[16:21:16.270]                 })
[16:21:16.270]             }))
[16:21:16.270]             future::FutureResult(value = ...future.value$value, 
[16:21:16.270]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:16.270]                   ...future.rng), globalenv = if (FALSE) 
[16:21:16.270]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:16.270]                     ...future.globalenv.names))
[16:21:16.270]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:16.270]         }, condition = base::local({
[16:21:16.270]             c <- base::c
[16:21:16.270]             inherits <- base::inherits
[16:21:16.270]             invokeRestart <- base::invokeRestart
[16:21:16.270]             length <- base::length
[16:21:16.270]             list <- base::list
[16:21:16.270]             seq.int <- base::seq.int
[16:21:16.270]             signalCondition <- base::signalCondition
[16:21:16.270]             sys.calls <- base::sys.calls
[16:21:16.270]             `[[` <- base::`[[`
[16:21:16.270]             `+` <- base::`+`
[16:21:16.270]             `<<-` <- base::`<<-`
[16:21:16.270]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:16.270]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:16.270]                   3L)]
[16:21:16.270]             }
[16:21:16.270]             function(cond) {
[16:21:16.270]                 is_error <- inherits(cond, "error")
[16:21:16.270]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:16.270]                   NULL)
[16:21:16.270]                 if (is_error) {
[16:21:16.270]                   sessionInformation <- function() {
[16:21:16.270]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:16.270]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:16.270]                       search = base::search(), system = base::Sys.info())
[16:21:16.270]                   }
[16:21:16.270]                   ...future.conditions[[length(...future.conditions) + 
[16:21:16.270]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:16.270]                     cond$call), session = sessionInformation(), 
[16:21:16.270]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:16.270]                   signalCondition(cond)
[16:21:16.270]                 }
[16:21:16.270]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:16.270]                 "immediateCondition"))) {
[16:21:16.270]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:16.270]                   ...future.conditions[[length(...future.conditions) + 
[16:21:16.270]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:16.270]                   if (TRUE && !signal) {
[16:21:16.270]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.270]                     {
[16:21:16.270]                       inherits <- base::inherits
[16:21:16.270]                       invokeRestart <- base::invokeRestart
[16:21:16.270]                       is.null <- base::is.null
[16:21:16.270]                       muffled <- FALSE
[16:21:16.270]                       if (inherits(cond, "message")) {
[16:21:16.270]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:16.270]                         if (muffled) 
[16:21:16.270]                           invokeRestart("muffleMessage")
[16:21:16.270]                       }
[16:21:16.270]                       else if (inherits(cond, "warning")) {
[16:21:16.270]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:16.270]                         if (muffled) 
[16:21:16.270]                           invokeRestart("muffleWarning")
[16:21:16.270]                       }
[16:21:16.270]                       else if (inherits(cond, "condition")) {
[16:21:16.270]                         if (!is.null(pattern)) {
[16:21:16.270]                           computeRestarts <- base::computeRestarts
[16:21:16.270]                           grepl <- base::grepl
[16:21:16.270]                           restarts <- computeRestarts(cond)
[16:21:16.270]                           for (restart in restarts) {
[16:21:16.270]                             name <- restart$name
[16:21:16.270]                             if (is.null(name)) 
[16:21:16.270]                               next
[16:21:16.270]                             if (!grepl(pattern, name)) 
[16:21:16.270]                               next
[16:21:16.270]                             invokeRestart(restart)
[16:21:16.270]                             muffled <- TRUE
[16:21:16.270]                             break
[16:21:16.270]                           }
[16:21:16.270]                         }
[16:21:16.270]                       }
[16:21:16.270]                       invisible(muffled)
[16:21:16.270]                     }
[16:21:16.270]                     muffleCondition(cond, pattern = "^muffle")
[16:21:16.270]                   }
[16:21:16.270]                 }
[16:21:16.270]                 else {
[16:21:16.270]                   if (TRUE) {
[16:21:16.270]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.270]                     {
[16:21:16.270]                       inherits <- base::inherits
[16:21:16.270]                       invokeRestart <- base::invokeRestart
[16:21:16.270]                       is.null <- base::is.null
[16:21:16.270]                       muffled <- FALSE
[16:21:16.270]                       if (inherits(cond, "message")) {
[16:21:16.270]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:16.270]                         if (muffled) 
[16:21:16.270]                           invokeRestart("muffleMessage")
[16:21:16.270]                       }
[16:21:16.270]                       else if (inherits(cond, "warning")) {
[16:21:16.270]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:16.270]                         if (muffled) 
[16:21:16.270]                           invokeRestart("muffleWarning")
[16:21:16.270]                       }
[16:21:16.270]                       else if (inherits(cond, "condition")) {
[16:21:16.270]                         if (!is.null(pattern)) {
[16:21:16.270]                           computeRestarts <- base::computeRestarts
[16:21:16.270]                           grepl <- base::grepl
[16:21:16.270]                           restarts <- computeRestarts(cond)
[16:21:16.270]                           for (restart in restarts) {
[16:21:16.270]                             name <- restart$name
[16:21:16.270]                             if (is.null(name)) 
[16:21:16.270]                               next
[16:21:16.270]                             if (!grepl(pattern, name)) 
[16:21:16.270]                               next
[16:21:16.270]                             invokeRestart(restart)
[16:21:16.270]                             muffled <- TRUE
[16:21:16.270]                             break
[16:21:16.270]                           }
[16:21:16.270]                         }
[16:21:16.270]                       }
[16:21:16.270]                       invisible(muffled)
[16:21:16.270]                     }
[16:21:16.270]                     muffleCondition(cond, pattern = "^muffle")
[16:21:16.270]                   }
[16:21:16.270]                 }
[16:21:16.270]             }
[16:21:16.270]         }))
[16:21:16.270]     }, error = function(ex) {
[16:21:16.270]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:16.270]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:16.270]                 ...future.rng), started = ...future.startTime, 
[16:21:16.270]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:16.270]             version = "1.8"), class = "FutureResult")
[16:21:16.270]     }, finally = {
[16:21:16.270]         if (!identical(...future.workdir, getwd())) 
[16:21:16.270]             setwd(...future.workdir)
[16:21:16.270]         {
[16:21:16.270]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:16.270]                 ...future.oldOptions$nwarnings <- NULL
[16:21:16.270]             }
[16:21:16.270]             base::options(...future.oldOptions)
[16:21:16.270]             if (.Platform$OS.type == "windows") {
[16:21:16.270]                 old_names <- names(...future.oldEnvVars)
[16:21:16.270]                 envs <- base::Sys.getenv()
[16:21:16.270]                 names <- names(envs)
[16:21:16.270]                 common <- intersect(names, old_names)
[16:21:16.270]                 added <- setdiff(names, old_names)
[16:21:16.270]                 removed <- setdiff(old_names, names)
[16:21:16.270]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:16.270]                   envs[common]]
[16:21:16.270]                 NAMES <- toupper(changed)
[16:21:16.270]                 args <- list()
[16:21:16.270]                 for (kk in seq_along(NAMES)) {
[16:21:16.270]                   name <- changed[[kk]]
[16:21:16.270]                   NAME <- NAMES[[kk]]
[16:21:16.270]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.270]                     next
[16:21:16.270]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:16.270]                 }
[16:21:16.270]                 NAMES <- toupper(added)
[16:21:16.270]                 for (kk in seq_along(NAMES)) {
[16:21:16.270]                   name <- added[[kk]]
[16:21:16.270]                   NAME <- NAMES[[kk]]
[16:21:16.270]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.270]                     next
[16:21:16.270]                   args[[name]] <- ""
[16:21:16.270]                 }
[16:21:16.270]                 NAMES <- toupper(removed)
[16:21:16.270]                 for (kk in seq_along(NAMES)) {
[16:21:16.270]                   name <- removed[[kk]]
[16:21:16.270]                   NAME <- NAMES[[kk]]
[16:21:16.270]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.270]                     next
[16:21:16.270]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:16.270]                 }
[16:21:16.270]                 if (length(args) > 0) 
[16:21:16.270]                   base::do.call(base::Sys.setenv, args = args)
[16:21:16.270]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:16.270]             }
[16:21:16.270]             else {
[16:21:16.270]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:16.270]             }
[16:21:16.270]             {
[16:21:16.270]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:16.270]                   0L) {
[16:21:16.270]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:16.270]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:16.270]                   base::options(opts)
[16:21:16.270]                 }
[16:21:16.270]                 {
[16:21:16.270]                   {
[16:21:16.270]                     base::options(mc.cores = ...future.mc.cores.old)
[16:21:16.270]                     NULL
[16:21:16.270]                   }
[16:21:16.270]                   options(future.plan = NULL)
[16:21:16.270]                   if (is.na(NA_character_)) 
[16:21:16.270]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:16.270]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:16.270]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:16.270]                     .init = FALSE)
[16:21:16.270]                 }
[16:21:16.270]             }
[16:21:16.270]         }
[16:21:16.270]     })
[16:21:16.270]     if (TRUE) {
[16:21:16.270]         base::sink(type = "output", split = FALSE)
[16:21:16.270]         if (TRUE) {
[16:21:16.270]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:16.270]         }
[16:21:16.270]         else {
[16:21:16.270]             ...future.result["stdout"] <- base::list(NULL)
[16:21:16.270]         }
[16:21:16.270]         base::close(...future.stdout)
[16:21:16.270]         ...future.stdout <- NULL
[16:21:16.270]     }
[16:21:16.270]     ...future.result$conditions <- ...future.conditions
[16:21:16.270]     ...future.result$finished <- base::Sys.time()
[16:21:16.270]     ...future.result
[16:21:16.270] }
[16:21:16.274] requestCore(): workers = 2
[16:21:16.275] Poll #1 (0): usedCores() = 2, workers = 2
[16:21:16.285] result() for MulticoreFuture ...
[16:21:16.286] result() for MulticoreFuture ...
[16:21:16.287] result() for MulticoreFuture ... done
[16:21:16.287] result() for MulticoreFuture ... done
[16:21:16.287] result() for MulticoreFuture ...
[16:21:16.287] result() for MulticoreFuture ... done
[16:21:16.290] MulticoreFuture started
 - Creating multicore future #4 ...
[16:21:16.291] plan(): Setting new future strategy stack:
[16:21:16.292] List of future strategies:
[16:21:16.292] 1. sequential:
[16:21:16.292]    - args: function (..., envir = parent.frame())
[16:21:16.292]    - tweaked: FALSE
[16:21:16.292]    - call: NULL
[16:21:16.293] plan(): nbrOfWorkers() = 1
[16:21:16.295] plan(): Setting new future strategy stack:
[16:21:16.295] List of future strategies:
[16:21:16.295] 1. multicore:
[16:21:16.295]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:21:16.295]    - tweaked: FALSE
[16:21:16.295]    - call: plan(multicore)
[16:21:16.297] getGlobalsAndPackages() ...
[16:21:16.297] Not searching for globals
[16:21:16.297] - globals: [0] <none>
[16:21:16.297] getGlobalsAndPackages() ... DONE
[16:21:16.298] Packages needed by the future expression (n = 0): <none>
[16:21:16.307] Packages needed by future strategies (n = 0): <none>
[16:21:16.309] plan(): nbrOfWorkers() = 2
[16:21:16.309] {
[16:21:16.309]     {
[16:21:16.309]         {
[16:21:16.309]             ...future.startTime <- base::Sys.time()
[16:21:16.309]             {
[16:21:16.309]                 {
[16:21:16.309]                   {
[16:21:16.309]                     {
[16:21:16.309]                       base::local({
[16:21:16.309]                         has_future <- base::requireNamespace("future", 
[16:21:16.309]                           quietly = TRUE)
[16:21:16.309]                         if (has_future) {
[16:21:16.309]                           ns <- base::getNamespace("future")
[16:21:16.309]                           version <- ns[[".package"]][["version"]]
[16:21:16.309]                           if (is.null(version)) 
[16:21:16.309]                             version <- utils::packageVersion("future")
[16:21:16.309]                         }
[16:21:16.309]                         else {
[16:21:16.309]                           version <- NULL
[16:21:16.309]                         }
[16:21:16.309]                         if (!has_future || version < "1.8.0") {
[16:21:16.309]                           info <- base::c(r_version = base::gsub("R version ", 
[16:21:16.309]                             "", base::R.version$version.string), 
[16:21:16.309]                             platform = base::sprintf("%s (%s-bit)", 
[16:21:16.309]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:16.309]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:16.309]                               "release", "version")], collapse = " "), 
[16:21:16.309]                             hostname = base::Sys.info()[["nodename"]])
[16:21:16.309]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:21:16.309]                             info)
[16:21:16.309]                           info <- base::paste(info, collapse = "; ")
[16:21:16.309]                           if (!has_future) {
[16:21:16.309]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:16.309]                               info)
[16:21:16.309]                           }
[16:21:16.309]                           else {
[16:21:16.309]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:16.309]                               info, version)
[16:21:16.309]                           }
[16:21:16.309]                           base::stop(msg)
[16:21:16.309]                         }
[16:21:16.309]                       })
[16:21:16.309]                     }
[16:21:16.309]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:21:16.309]                     base::options(mc.cores = 1L)
[16:21:16.309]                   }
[16:21:16.309]                   ...future.strategy.old <- future::plan("list")
[16:21:16.309]                   options(future.plan = NULL)
[16:21:16.309]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:16.309]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:16.309]                 }
[16:21:16.309]                 ...future.workdir <- getwd()
[16:21:16.309]             }
[16:21:16.309]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:16.309]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:16.309]         }
[16:21:16.309]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:16.309]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:16.309]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:16.309]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:16.309]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:16.309]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:16.309]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:16.309]             base::names(...future.oldOptions))
[16:21:16.309]     }
[16:21:16.309]     if (FALSE) {
[16:21:16.309]     }
[16:21:16.309]     else {
[16:21:16.309]         if (TRUE) {
[16:21:16.309]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:16.309]                 open = "w")
[16:21:16.309]         }
[16:21:16.309]         else {
[16:21:16.309]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:16.309]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:16.309]         }
[16:21:16.309]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:16.309]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:16.309]             base::sink(type = "output", split = FALSE)
[16:21:16.309]             base::close(...future.stdout)
[16:21:16.309]         }, add = TRUE)
[16:21:16.309]     }
[16:21:16.309]     ...future.frame <- base::sys.nframe()
[16:21:16.309]     ...future.conditions <- base::list()
[16:21:16.309]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:16.309]     if (FALSE) {
[16:21:16.309]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:16.309]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:16.309]     }
[16:21:16.309]     ...future.result <- base::tryCatch({
[16:21:16.309]         base::withCallingHandlers({
[16:21:16.309]             ...future.value <- base::withVisible(base::local({
[16:21:16.309]                 withCallingHandlers({
[16:21:16.309]                   {
[16:21:16.309]                     ii
[16:21:16.309]                   }
[16:21:16.309]                 }, immediateCondition = function(cond) {
[16:21:16.309]                   save_rds <- function (object, pathname, ...) 
[16:21:16.309]                   {
[16:21:16.309]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:21:16.309]                     if (file_test("-f", pathname_tmp)) {
[16:21:16.309]                       fi_tmp <- file.info(pathname_tmp)
[16:21:16.309]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:21:16.309]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:21:16.309]                         fi_tmp[["mtime"]])
[16:21:16.309]                     }
[16:21:16.309]                     tryCatch({
[16:21:16.309]                       saveRDS(object, file = pathname_tmp, ...)
[16:21:16.309]                     }, error = function(ex) {
[16:21:16.309]                       msg <- conditionMessage(ex)
[16:21:16.309]                       fi_tmp <- file.info(pathname_tmp)
[16:21:16.309]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:21:16.309]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:21:16.309]                         fi_tmp[["mtime"]], msg)
[16:21:16.309]                       ex$message <- msg
[16:21:16.309]                       stop(ex)
[16:21:16.309]                     })
[16:21:16.309]                     stopifnot(file_test("-f", pathname_tmp))
[16:21:16.309]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:21:16.309]                     if (!res || file_test("-f", pathname_tmp)) {
[16:21:16.309]                       fi_tmp <- file.info(pathname_tmp)
[16:21:16.309]                       fi <- file.info(pathname)
[16:21:16.309]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:21:16.309]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:21:16.309]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:21:16.309]                         fi[["size"]], fi[["mtime"]])
[16:21:16.309]                       stop(msg)
[16:21:16.309]                     }
[16:21:16.309]                     invisible(pathname)
[16:21:16.309]                   }
[16:21:16.309]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:21:16.309]                     rootPath = tempdir()) 
[16:21:16.309]                   {
[16:21:16.309]                     obj <- list(time = Sys.time(), condition = cond)
[16:21:16.309]                     file <- tempfile(pattern = class(cond)[1], 
[16:21:16.309]                       tmpdir = path, fileext = ".rds")
[16:21:16.309]                     save_rds(obj, file)
[16:21:16.309]                   }
[16:21:16.309]                   saveImmediateCondition(cond, path = "/tmp/RtmpCuMWhk/.future/immediateConditions")
[16:21:16.309]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.309]                   {
[16:21:16.309]                     inherits <- base::inherits
[16:21:16.309]                     invokeRestart <- base::invokeRestart
[16:21:16.309]                     is.null <- base::is.null
[16:21:16.309]                     muffled <- FALSE
[16:21:16.309]                     if (inherits(cond, "message")) {
[16:21:16.309]                       muffled <- grepl(pattern, "muffleMessage")
[16:21:16.309]                       if (muffled) 
[16:21:16.309]                         invokeRestart("muffleMessage")
[16:21:16.309]                     }
[16:21:16.309]                     else if (inherits(cond, "warning")) {
[16:21:16.309]                       muffled <- grepl(pattern, "muffleWarning")
[16:21:16.309]                       if (muffled) 
[16:21:16.309]                         invokeRestart("muffleWarning")
[16:21:16.309]                     }
[16:21:16.309]                     else if (inherits(cond, "condition")) {
[16:21:16.309]                       if (!is.null(pattern)) {
[16:21:16.309]                         computeRestarts <- base::computeRestarts
[16:21:16.309]                         grepl <- base::grepl
[16:21:16.309]                         restarts <- computeRestarts(cond)
[16:21:16.309]                         for (restart in restarts) {
[16:21:16.309]                           name <- restart$name
[16:21:16.309]                           if (is.null(name)) 
[16:21:16.309]                             next
[16:21:16.309]                           if (!grepl(pattern, name)) 
[16:21:16.309]                             next
[16:21:16.309]                           invokeRestart(restart)
[16:21:16.309]                           muffled <- TRUE
[16:21:16.309]                           break
[16:21:16.309]                         }
[16:21:16.309]                       }
[16:21:16.309]                     }
[16:21:16.309]                     invisible(muffled)
[16:21:16.309]                   }
[16:21:16.309]                   muffleCondition(cond)
[16:21:16.309]                 })
[16:21:16.309]             }))
[16:21:16.309]             future::FutureResult(value = ...future.value$value, 
[16:21:16.309]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:16.309]                   ...future.rng), globalenv = if (FALSE) 
[16:21:16.309]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:16.309]                     ...future.globalenv.names))
[16:21:16.309]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:16.309]         }, condition = base::local({
[16:21:16.309]             c <- base::c
[16:21:16.309]             inherits <- base::inherits
[16:21:16.309]             invokeRestart <- base::invokeRestart
[16:21:16.309]             length <- base::length
[16:21:16.309]             list <- base::list
[16:21:16.309]             seq.int <- base::seq.int
[16:21:16.309]             signalCondition <- base::signalCondition
[16:21:16.309]             sys.calls <- base::sys.calls
[16:21:16.309]             `[[` <- base::`[[`
[16:21:16.309]             `+` <- base::`+`
[16:21:16.309]             `<<-` <- base::`<<-`
[16:21:16.309]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:16.309]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:16.309]                   3L)]
[16:21:16.309]             }
[16:21:16.309]             function(cond) {
[16:21:16.309]                 is_error <- inherits(cond, "error")
[16:21:16.309]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:16.309]                   NULL)
[16:21:16.309]                 if (is_error) {
[16:21:16.309]                   sessionInformation <- function() {
[16:21:16.309]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:16.309]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:16.309]                       search = base::search(), system = base::Sys.info())
[16:21:16.309]                   }
[16:21:16.309]                   ...future.conditions[[length(...future.conditions) + 
[16:21:16.309]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:16.309]                     cond$call), session = sessionInformation(), 
[16:21:16.309]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:16.309]                   signalCondition(cond)
[16:21:16.309]                 }
[16:21:16.309]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:16.309]                 "immediateCondition"))) {
[16:21:16.309]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:16.309]                   ...future.conditions[[length(...future.conditions) + 
[16:21:16.309]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:16.309]                   if (TRUE && !signal) {
[16:21:16.309]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.309]                     {
[16:21:16.309]                       inherits <- base::inherits
[16:21:16.309]                       invokeRestart <- base::invokeRestart
[16:21:16.309]                       is.null <- base::is.null
[16:21:16.309]                       muffled <- FALSE
[16:21:16.309]                       if (inherits(cond, "message")) {
[16:21:16.309]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:16.309]                         if (muffled) 
[16:21:16.309]                           invokeRestart("muffleMessage")
[16:21:16.309]                       }
[16:21:16.309]                       else if (inherits(cond, "warning")) {
[16:21:16.309]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:16.309]                         if (muffled) 
[16:21:16.309]                           invokeRestart("muffleWarning")
[16:21:16.309]                       }
[16:21:16.309]                       else if (inherits(cond, "condition")) {
[16:21:16.309]                         if (!is.null(pattern)) {
[16:21:16.309]                           computeRestarts <- base::computeRestarts
[16:21:16.309]                           grepl <- base::grepl
[16:21:16.309]                           restarts <- computeRestarts(cond)
[16:21:16.309]                           for (restart in restarts) {
[16:21:16.309]                             name <- restart$name
[16:21:16.309]                             if (is.null(name)) 
[16:21:16.309]                               next
[16:21:16.309]                             if (!grepl(pattern, name)) 
[16:21:16.309]                               next
[16:21:16.309]                             invokeRestart(restart)
[16:21:16.309]                             muffled <- TRUE
[16:21:16.309]                             break
[16:21:16.309]                           }
[16:21:16.309]                         }
[16:21:16.309]                       }
[16:21:16.309]                       invisible(muffled)
[16:21:16.309]                     }
[16:21:16.309]                     muffleCondition(cond, pattern = "^muffle")
[16:21:16.309]                   }
[16:21:16.309]                 }
[16:21:16.309]                 else {
[16:21:16.309]                   if (TRUE) {
[16:21:16.309]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.309]                     {
[16:21:16.309]                       inherits <- base::inherits
[16:21:16.309]                       invokeRestart <- base::invokeRestart
[16:21:16.309]                       is.null <- base::is.null
[16:21:16.309]                       muffled <- FALSE
[16:21:16.309]                       if (inherits(cond, "message")) {
[16:21:16.309]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:16.309]                         if (muffled) 
[16:21:16.309]                           invokeRestart("muffleMessage")
[16:21:16.309]                       }
[16:21:16.309]                       else if (inherits(cond, "warning")) {
[16:21:16.309]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:16.309]                         if (muffled) 
[16:21:16.309]                           invokeRestart("muffleWarning")
[16:21:16.309]                       }
[16:21:16.309]                       else if (inherits(cond, "condition")) {
[16:21:16.309]                         if (!is.null(pattern)) {
[16:21:16.309]                           computeRestarts <- base::computeRestarts
[16:21:16.309]                           grepl <- base::grepl
[16:21:16.309]                           restarts <- computeRestarts(cond)
[16:21:16.309]                           for (restart in restarts) {
[16:21:16.309]                             name <- restart$name
[16:21:16.309]                             if (is.null(name)) 
[16:21:16.309]                               next
[16:21:16.309]                             if (!grepl(pattern, name)) 
[16:21:16.309]                               next
[16:21:16.309]                             invokeRestart(restart)
[16:21:16.309]                             muffled <- TRUE
[16:21:16.309]                             break
[16:21:16.309]                           }
[16:21:16.309]                         }
[16:21:16.309]                       }
[16:21:16.309]                       invisible(muffled)
[16:21:16.309]                     }
[16:21:16.309]                     muffleCondition(cond, pattern = "^muffle")
[16:21:16.309]                   }
[16:21:16.309]                 }
[16:21:16.309]             }
[16:21:16.309]         }))
[16:21:16.309]     }, error = function(ex) {
[16:21:16.309]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:16.309]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:16.309]                 ...future.rng), started = ...future.startTime, 
[16:21:16.309]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:16.309]             version = "1.8"), class = "FutureResult")
[16:21:16.309]     }, finally = {
[16:21:16.309]         if (!identical(...future.workdir, getwd())) 
[16:21:16.309]             setwd(...future.workdir)
[16:21:16.309]         {
[16:21:16.309]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:16.309]                 ...future.oldOptions$nwarnings <- NULL
[16:21:16.309]             }
[16:21:16.309]             base::options(...future.oldOptions)
[16:21:16.309]             if (.Platform$OS.type == "windows") {
[16:21:16.309]                 old_names <- names(...future.oldEnvVars)
[16:21:16.309]                 envs <- base::Sys.getenv()
[16:21:16.309]                 names <- names(envs)
[16:21:16.309]                 common <- intersect(names, old_names)
[16:21:16.309]                 added <- setdiff(names, old_names)
[16:21:16.309]                 removed <- setdiff(old_names, names)
[16:21:16.309]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:16.309]                   envs[common]]
[16:21:16.309]                 NAMES <- toupper(changed)
[16:21:16.309]                 args <- list()
[16:21:16.309]                 for (kk in seq_along(NAMES)) {
[16:21:16.309]                   name <- changed[[kk]]
[16:21:16.309]                   NAME <- NAMES[[kk]]
[16:21:16.309]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.309]                     next
[16:21:16.309]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:16.309]                 }
[16:21:16.309]                 NAMES <- toupper(added)
[16:21:16.309]                 for (kk in seq_along(NAMES)) {
[16:21:16.309]                   name <- added[[kk]]
[16:21:16.309]                   NAME <- NAMES[[kk]]
[16:21:16.309]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.309]                     next
[16:21:16.309]                   args[[name]] <- ""
[16:21:16.309]                 }
[16:21:16.309]                 NAMES <- toupper(removed)
[16:21:16.309]                 for (kk in seq_along(NAMES)) {
[16:21:16.309]                   name <- removed[[kk]]
[16:21:16.309]                   NAME <- NAMES[[kk]]
[16:21:16.309]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.309]                     next
[16:21:16.309]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:16.309]                 }
[16:21:16.309]                 if (length(args) > 0) 
[16:21:16.309]                   base::do.call(base::Sys.setenv, args = args)
[16:21:16.309]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:16.309]             }
[16:21:16.309]             else {
[16:21:16.309]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:16.309]             }
[16:21:16.309]             {
[16:21:16.309]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:16.309]                   0L) {
[16:21:16.309]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:16.309]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:16.309]                   base::options(opts)
[16:21:16.309]                 }
[16:21:16.309]                 {
[16:21:16.309]                   {
[16:21:16.309]                     base::options(mc.cores = ...future.mc.cores.old)
[16:21:16.309]                     NULL
[16:21:16.309]                   }
[16:21:16.309]                   options(future.plan = NULL)
[16:21:16.309]                   if (is.na(NA_character_)) 
[16:21:16.309]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:16.309]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:16.309]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:16.309]                     .init = FALSE)
[16:21:16.309]                 }
[16:21:16.309]             }
[16:21:16.309]         }
[16:21:16.309]     })
[16:21:16.309]     if (TRUE) {
[16:21:16.309]         base::sink(type = "output", split = FALSE)
[16:21:16.309]         if (TRUE) {
[16:21:16.309]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:16.309]         }
[16:21:16.309]         else {
[16:21:16.309]             ...future.result["stdout"] <- base::list(NULL)
[16:21:16.309]         }
[16:21:16.309]         base::close(...future.stdout)
[16:21:16.309]         ...future.stdout <- NULL
[16:21:16.309]     }
[16:21:16.309]     ...future.result$conditions <- ...future.conditions
[16:21:16.309]     ...future.result$finished <- base::Sys.time()
[16:21:16.309]     ...future.result
[16:21:16.309] }
[16:21:16.312] requestCore(): workers = 2
[16:21:16.312] Poll #1 (0): usedCores() = 2, workers = 2
[16:21:16.336] result() for MulticoreFuture ...
[16:21:16.337] result() for MulticoreFuture ...
[16:21:16.337] result() for MulticoreFuture ... done
[16:21:16.337] result() for MulticoreFuture ... done
[16:21:16.338] result() for MulticoreFuture ...
[16:21:16.338] result() for MulticoreFuture ... done
[16:21:16.340] MulticoreFuture started
 - Resolving 4 multicore futures
[16:21:16.341] result() for MulticoreFuture ...
[16:21:16.341] result() for MulticoreFuture ... done
[16:21:16.342] plan(): Setting new future strategy stack:
[16:21:16.342] result() for MulticoreFuture ...
[16:21:16.342] result() for MulticoreFuture ... done
[16:21:16.342] result() for MulticoreFuture ...
[16:21:16.342] result() for MulticoreFuture ... done
[16:21:16.342] List of future strategies:
[16:21:16.342] 1. sequential:
[16:21:16.342]    - args: function (..., envir = parent.frame())
[16:21:16.342]    - tweaked: FALSE
[16:21:16.342]    - call: NULL
[16:21:16.343] result() for MulticoreFuture ...
[16:21:16.343] result() for MulticoreFuture ... done
[16:21:16.343] plan(): nbrOfWorkers() = 1
[16:21:16.343] result() for MulticoreFuture ...
[16:21:16.345] result() for MulticoreFuture ...
[16:21:16.345] result() for MulticoreFuture ... done
[16:21:16.345] result() for MulticoreFuture ... done
[16:21:16.345] result() for MulticoreFuture ...
[16:21:16.346] result() for MulticoreFuture ... done
[16:21:16.346] plan(): Setting new future strategy stack:
[16:21:16.346] result() for MulticoreFuture ...
[16:21:16.346] List of future strategies:
[16:21:16.346] 1. multicore:
[16:21:16.346]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:21:16.346]    - tweaked: FALSE
[16:21:16.346]    - call: plan(multicore)
[16:21:16.352] plan(): nbrOfWorkers() = 2
[16:21:16.352] result() for MulticoreFuture ...
[16:21:16.352] result() for MulticoreFuture ... done
[16:21:16.353] result() for MulticoreFuture ... done
[16:21:16.353] result() for MulticoreFuture ...
[16:21:16.353] result() for MulticoreFuture ... done
*** multicore(..., globals = FALSE) and errors
[16:21:16.357] getGlobalsAndPackages() ...
[16:21:16.357] Not searching for globals
[16:21:16.357] - globals: [0] <none>
[16:21:16.357] getGlobalsAndPackages() ... DONE
[16:21:16.358] Packages needed by the future expression (n = 0): <none>
[16:21:16.358] Packages needed by future strategies (n = 0): <none>
[16:21:16.359] {
[16:21:16.359]     {
[16:21:16.359]         {
[16:21:16.359]             ...future.startTime <- base::Sys.time()
[16:21:16.359]             {
[16:21:16.359]                 {
[16:21:16.359]                   {
[16:21:16.359]                     {
[16:21:16.359]                       base::local({
[16:21:16.359]                         has_future <- base::requireNamespace("future", 
[16:21:16.359]                           quietly = TRUE)
[16:21:16.359]                         if (has_future) {
[16:21:16.359]                           ns <- base::getNamespace("future")
[16:21:16.359]                           version <- ns[[".package"]][["version"]]
[16:21:16.359]                           if (is.null(version)) 
[16:21:16.359]                             version <- utils::packageVersion("future")
[16:21:16.359]                         }
[16:21:16.359]                         else {
[16:21:16.359]                           version <- NULL
[16:21:16.359]                         }
[16:21:16.359]                         if (!has_future || version < "1.8.0") {
[16:21:16.359]                           info <- base::c(r_version = base::gsub("R version ", 
[16:21:16.359]                             "", base::R.version$version.string), 
[16:21:16.359]                             platform = base::sprintf("%s (%s-bit)", 
[16:21:16.359]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:16.359]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:16.359]                               "release", "version")], collapse = " "), 
[16:21:16.359]                             hostname = base::Sys.info()[["nodename"]])
[16:21:16.359]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:21:16.359]                             info)
[16:21:16.359]                           info <- base::paste(info, collapse = "; ")
[16:21:16.359]                           if (!has_future) {
[16:21:16.359]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:16.359]                               info)
[16:21:16.359]                           }
[16:21:16.359]                           else {
[16:21:16.359]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:16.359]                               info, version)
[16:21:16.359]                           }
[16:21:16.359]                           base::stop(msg)
[16:21:16.359]                         }
[16:21:16.359]                       })
[16:21:16.359]                     }
[16:21:16.359]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:21:16.359]                     base::options(mc.cores = 1L)
[16:21:16.359]                   }
[16:21:16.359]                   ...future.strategy.old <- future::plan("list")
[16:21:16.359]                   options(future.plan = NULL)
[16:21:16.359]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:16.359]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:16.359]                 }
[16:21:16.359]                 ...future.workdir <- getwd()
[16:21:16.359]             }
[16:21:16.359]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:16.359]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:16.359]         }
[16:21:16.359]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:16.359]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:16.359]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:16.359]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:16.359]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:16.359]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:16.359]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:16.359]             base::names(...future.oldOptions))
[16:21:16.359]     }
[16:21:16.359]     if (FALSE) {
[16:21:16.359]     }
[16:21:16.359]     else {
[16:21:16.359]         if (TRUE) {
[16:21:16.359]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:16.359]                 open = "w")
[16:21:16.359]         }
[16:21:16.359]         else {
[16:21:16.359]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:16.359]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:16.359]         }
[16:21:16.359]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:16.359]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:16.359]             base::sink(type = "output", split = FALSE)
[16:21:16.359]             base::close(...future.stdout)
[16:21:16.359]         }, add = TRUE)
[16:21:16.359]     }
[16:21:16.359]     ...future.frame <- base::sys.nframe()
[16:21:16.359]     ...future.conditions <- base::list()
[16:21:16.359]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:16.359]     if (FALSE) {
[16:21:16.359]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:16.359]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:16.359]     }
[16:21:16.359]     ...future.result <- base::tryCatch({
[16:21:16.359]         base::withCallingHandlers({
[16:21:16.359]             ...future.value <- base::withVisible(base::local({
[16:21:16.359]                 withCallingHandlers({
[16:21:16.359]                   {
[16:21:16.359]                     stop("Whoops!")
[16:21:16.359]                     1
[16:21:16.359]                   }
[16:21:16.359]                 }, immediateCondition = function(cond) {
[16:21:16.359]                   save_rds <- function (object, pathname, ...) 
[16:21:16.359]                   {
[16:21:16.359]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:21:16.359]                     if (file_test("-f", pathname_tmp)) {
[16:21:16.359]                       fi_tmp <- file.info(pathname_tmp)
[16:21:16.359]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:21:16.359]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:21:16.359]                         fi_tmp[["mtime"]])
[16:21:16.359]                     }
[16:21:16.359]                     tryCatch({
[16:21:16.359]                       saveRDS(object, file = pathname_tmp, ...)
[16:21:16.359]                     }, error = function(ex) {
[16:21:16.359]                       msg <- conditionMessage(ex)
[16:21:16.359]                       fi_tmp <- file.info(pathname_tmp)
[16:21:16.359]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:21:16.359]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:21:16.359]                         fi_tmp[["mtime"]], msg)
[16:21:16.359]                       ex$message <- msg
[16:21:16.359]                       stop(ex)
[16:21:16.359]                     })
[16:21:16.359]                     stopifnot(file_test("-f", pathname_tmp))
[16:21:16.359]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:21:16.359]                     if (!res || file_test("-f", pathname_tmp)) {
[16:21:16.359]                       fi_tmp <- file.info(pathname_tmp)
[16:21:16.359]                       fi <- file.info(pathname)
[16:21:16.359]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:21:16.359]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:21:16.359]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:21:16.359]                         fi[["size"]], fi[["mtime"]])
[16:21:16.359]                       stop(msg)
[16:21:16.359]                     }
[16:21:16.359]                     invisible(pathname)
[16:21:16.359]                   }
[16:21:16.359]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:21:16.359]                     rootPath = tempdir()) 
[16:21:16.359]                   {
[16:21:16.359]                     obj <- list(time = Sys.time(), condition = cond)
[16:21:16.359]                     file <- tempfile(pattern = class(cond)[1], 
[16:21:16.359]                       tmpdir = path, fileext = ".rds")
[16:21:16.359]                     save_rds(obj, file)
[16:21:16.359]                   }
[16:21:16.359]                   saveImmediateCondition(cond, path = "/tmp/RtmpCuMWhk/.future/immediateConditions")
[16:21:16.359]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.359]                   {
[16:21:16.359]                     inherits <- base::inherits
[16:21:16.359]                     invokeRestart <- base::invokeRestart
[16:21:16.359]                     is.null <- base::is.null
[16:21:16.359]                     muffled <- FALSE
[16:21:16.359]                     if (inherits(cond, "message")) {
[16:21:16.359]                       muffled <- grepl(pattern, "muffleMessage")
[16:21:16.359]                       if (muffled) 
[16:21:16.359]                         invokeRestart("muffleMessage")
[16:21:16.359]                     }
[16:21:16.359]                     else if (inherits(cond, "warning")) {
[16:21:16.359]                       muffled <- grepl(pattern, "muffleWarning")
[16:21:16.359]                       if (muffled) 
[16:21:16.359]                         invokeRestart("muffleWarning")
[16:21:16.359]                     }
[16:21:16.359]                     else if (inherits(cond, "condition")) {
[16:21:16.359]                       if (!is.null(pattern)) {
[16:21:16.359]                         computeRestarts <- base::computeRestarts
[16:21:16.359]                         grepl <- base::grepl
[16:21:16.359]                         restarts <- computeRestarts(cond)
[16:21:16.359]                         for (restart in restarts) {
[16:21:16.359]                           name <- restart$name
[16:21:16.359]                           if (is.null(name)) 
[16:21:16.359]                             next
[16:21:16.359]                           if (!grepl(pattern, name)) 
[16:21:16.359]                             next
[16:21:16.359]                           invokeRestart(restart)
[16:21:16.359]                           muffled <- TRUE
[16:21:16.359]                           break
[16:21:16.359]                         }
[16:21:16.359]                       }
[16:21:16.359]                     }
[16:21:16.359]                     invisible(muffled)
[16:21:16.359]                   }
[16:21:16.359]                   muffleCondition(cond)
[16:21:16.359]                 })
[16:21:16.359]             }))
[16:21:16.359]             future::FutureResult(value = ...future.value$value, 
[16:21:16.359]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:16.359]                   ...future.rng), globalenv = if (FALSE) 
[16:21:16.359]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:16.359]                     ...future.globalenv.names))
[16:21:16.359]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:16.359]         }, condition = base::local({
[16:21:16.359]             c <- base::c
[16:21:16.359]             inherits <- base::inherits
[16:21:16.359]             invokeRestart <- base::invokeRestart
[16:21:16.359]             length <- base::length
[16:21:16.359]             list <- base::list
[16:21:16.359]             seq.int <- base::seq.int
[16:21:16.359]             signalCondition <- base::signalCondition
[16:21:16.359]             sys.calls <- base::sys.calls
[16:21:16.359]             `[[` <- base::`[[`
[16:21:16.359]             `+` <- base::`+`
[16:21:16.359]             `<<-` <- base::`<<-`
[16:21:16.359]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:16.359]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:16.359]                   3L)]
[16:21:16.359]             }
[16:21:16.359]             function(cond) {
[16:21:16.359]                 is_error <- inherits(cond, "error")
[16:21:16.359]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:16.359]                   NULL)
[16:21:16.359]                 if (is_error) {
[16:21:16.359]                   sessionInformation <- function() {
[16:21:16.359]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:16.359]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:16.359]                       search = base::search(), system = base::Sys.info())
[16:21:16.359]                   }
[16:21:16.359]                   ...future.conditions[[length(...future.conditions) + 
[16:21:16.359]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:16.359]                     cond$call), session = sessionInformation(), 
[16:21:16.359]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:16.359]                   signalCondition(cond)
[16:21:16.359]                 }
[16:21:16.359]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:16.359]                 "immediateCondition"))) {
[16:21:16.359]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:16.359]                   ...future.conditions[[length(...future.conditions) + 
[16:21:16.359]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:16.359]                   if (TRUE && !signal) {
[16:21:16.359]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.359]                     {
[16:21:16.359]                       inherits <- base::inherits
[16:21:16.359]                       invokeRestart <- base::invokeRestart
[16:21:16.359]                       is.null <- base::is.null
[16:21:16.359]                       muffled <- FALSE
[16:21:16.359]                       if (inherits(cond, "message")) {
[16:21:16.359]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:16.359]                         if (muffled) 
[16:21:16.359]                           invokeRestart("muffleMessage")
[16:21:16.359]                       }
[16:21:16.359]                       else if (inherits(cond, "warning")) {
[16:21:16.359]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:16.359]                         if (muffled) 
[16:21:16.359]                           invokeRestart("muffleWarning")
[16:21:16.359]                       }
[16:21:16.359]                       else if (inherits(cond, "condition")) {
[16:21:16.359]                         if (!is.null(pattern)) {
[16:21:16.359]                           computeRestarts <- base::computeRestarts
[16:21:16.359]                           grepl <- base::grepl
[16:21:16.359]                           restarts <- computeRestarts(cond)
[16:21:16.359]                           for (restart in restarts) {
[16:21:16.359]                             name <- restart$name
[16:21:16.359]                             if (is.null(name)) 
[16:21:16.359]                               next
[16:21:16.359]                             if (!grepl(pattern, name)) 
[16:21:16.359]                               next
[16:21:16.359]                             invokeRestart(restart)
[16:21:16.359]                             muffled <- TRUE
[16:21:16.359]                             break
[16:21:16.359]                           }
[16:21:16.359]                         }
[16:21:16.359]                       }
[16:21:16.359]                       invisible(muffled)
[16:21:16.359]                     }
[16:21:16.359]                     muffleCondition(cond, pattern = "^muffle")
[16:21:16.359]                   }
[16:21:16.359]                 }
[16:21:16.359]                 else {
[16:21:16.359]                   if (TRUE) {
[16:21:16.359]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.359]                     {
[16:21:16.359]                       inherits <- base::inherits
[16:21:16.359]                       invokeRestart <- base::invokeRestart
[16:21:16.359]                       is.null <- base::is.null
[16:21:16.359]                       muffled <- FALSE
[16:21:16.359]                       if (inherits(cond, "message")) {
[16:21:16.359]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:16.359]                         if (muffled) 
[16:21:16.359]                           invokeRestart("muffleMessage")
[16:21:16.359]                       }
[16:21:16.359]                       else if (inherits(cond, "warning")) {
[16:21:16.359]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:16.359]                         if (muffled) 
[16:21:16.359]                           invokeRestart("muffleWarning")
[16:21:16.359]                       }
[16:21:16.359]                       else if (inherits(cond, "condition")) {
[16:21:16.359]                         if (!is.null(pattern)) {
[16:21:16.359]                           computeRestarts <- base::computeRestarts
[16:21:16.359]                           grepl <- base::grepl
[16:21:16.359]                           restarts <- computeRestarts(cond)
[16:21:16.359]                           for (restart in restarts) {
[16:21:16.359]                             name <- restart$name
[16:21:16.359]                             if (is.null(name)) 
[16:21:16.359]                               next
[16:21:16.359]                             if (!grepl(pattern, name)) 
[16:21:16.359]                               next
[16:21:16.359]                             invokeRestart(restart)
[16:21:16.359]                             muffled <- TRUE
[16:21:16.359]                             break
[16:21:16.359]                           }
[16:21:16.359]                         }
[16:21:16.359]                       }
[16:21:16.359]                       invisible(muffled)
[16:21:16.359]                     }
[16:21:16.359]                     muffleCondition(cond, pattern = "^muffle")
[16:21:16.359]                   }
[16:21:16.359]                 }
[16:21:16.359]             }
[16:21:16.359]         }))
[16:21:16.359]     }, error = function(ex) {
[16:21:16.359]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:16.359]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:16.359]                 ...future.rng), started = ...future.startTime, 
[16:21:16.359]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:16.359]             version = "1.8"), class = "FutureResult")
[16:21:16.359]     }, finally = {
[16:21:16.359]         if (!identical(...future.workdir, getwd())) 
[16:21:16.359]             setwd(...future.workdir)
[16:21:16.359]         {
[16:21:16.359]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:16.359]                 ...future.oldOptions$nwarnings <- NULL
[16:21:16.359]             }
[16:21:16.359]             base::options(...future.oldOptions)
[16:21:16.359]             if (.Platform$OS.type == "windows") {
[16:21:16.359]                 old_names <- names(...future.oldEnvVars)
[16:21:16.359]                 envs <- base::Sys.getenv()
[16:21:16.359]                 names <- names(envs)
[16:21:16.359]                 common <- intersect(names, old_names)
[16:21:16.359]                 added <- setdiff(names, old_names)
[16:21:16.359]                 removed <- setdiff(old_names, names)
[16:21:16.359]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:16.359]                   envs[common]]
[16:21:16.359]                 NAMES <- toupper(changed)
[16:21:16.359]                 args <- list()
[16:21:16.359]                 for (kk in seq_along(NAMES)) {
[16:21:16.359]                   name <- changed[[kk]]
[16:21:16.359]                   NAME <- NAMES[[kk]]
[16:21:16.359]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.359]                     next
[16:21:16.359]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:16.359]                 }
[16:21:16.359]                 NAMES <- toupper(added)
[16:21:16.359]                 for (kk in seq_along(NAMES)) {
[16:21:16.359]                   name <- added[[kk]]
[16:21:16.359]                   NAME <- NAMES[[kk]]
[16:21:16.359]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.359]                     next
[16:21:16.359]                   args[[name]] <- ""
[16:21:16.359]                 }
[16:21:16.359]                 NAMES <- toupper(removed)
[16:21:16.359]                 for (kk in seq_along(NAMES)) {
[16:21:16.359]                   name <- removed[[kk]]
[16:21:16.359]                   NAME <- NAMES[[kk]]
[16:21:16.359]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.359]                     next
[16:21:16.359]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:16.359]                 }
[16:21:16.359]                 if (length(args) > 0) 
[16:21:16.359]                   base::do.call(base::Sys.setenv, args = args)
[16:21:16.359]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:16.359]             }
[16:21:16.359]             else {
[16:21:16.359]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:16.359]             }
[16:21:16.359]             {
[16:21:16.359]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:16.359]                   0L) {
[16:21:16.359]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:16.359]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:16.359]                   base::options(opts)
[16:21:16.359]                 }
[16:21:16.359]                 {
[16:21:16.359]                   {
[16:21:16.359]                     base::options(mc.cores = ...future.mc.cores.old)
[16:21:16.359]                     NULL
[16:21:16.359]                   }
[16:21:16.359]                   options(future.plan = NULL)
[16:21:16.359]                   if (is.na(NA_character_)) 
[16:21:16.359]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:16.359]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:16.359]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:16.359]                     .init = FALSE)
[16:21:16.359]                 }
[16:21:16.359]             }
[16:21:16.359]         }
[16:21:16.359]     })
[16:21:16.359]     if (TRUE) {
[16:21:16.359]         base::sink(type = "output", split = FALSE)
[16:21:16.359]         if (TRUE) {
[16:21:16.359]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:16.359]         }
[16:21:16.359]         else {
[16:21:16.359]             ...future.result["stdout"] <- base::list(NULL)
[16:21:16.359]         }
[16:21:16.359]         base::close(...future.stdout)
[16:21:16.359]         ...future.stdout <- NULL
[16:21:16.359]     }
[16:21:16.359]     ...future.result$conditions <- ...future.conditions
[16:21:16.359]     ...future.result$finished <- base::Sys.time()
[16:21:16.359]     ...future.result
[16:21:16.359] }
[16:21:16.361] requestCore(): workers = 2
[16:21:16.363] MulticoreFuture started
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    stop("Whoops!")
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[16:21:16.364] plan(): Setting new future strategy stack:
[16:21:16.365] List of future strategies:
[16:21:16.365] 1. sequential:
[16:21:16.365]    - args: function (..., envir = parent.frame())
[16:21:16.365]    - tweaked: FALSE
[16:21:16.365]    - call: NULL
[16:21:16.366] plan(): nbrOfWorkers() = 1
[16:21:16.367] plan(): Setting new future strategy stack:
[16:21:16.368] List of future strategies:
[16:21:16.368] 1. multicore:
[16:21:16.368]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:21:16.368]    - tweaked: FALSE
[16:21:16.368]    - call: plan(multicore)
[16:21:16.372] plan(): nbrOfWorkers() = 2
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 341000aa-40a0-ae89-3f55-e211e7e2f207
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:21:16.375] result() for MulticoreFuture ...
[16:21:16.377] result() for MulticoreFuture ...
[16:21:16.378] result() for MulticoreFuture ... done
[16:21:16.378] signalConditions() ...
[16:21:16.378]  - include = ‘immediateCondition’
[16:21:16.378]  - exclude = 
[16:21:16.378]  - resignal = FALSE
[16:21:16.378]  - Number of conditions: 1
[16:21:16.378] signalConditions() ... done
[16:21:16.379] result() for MulticoreFuture ... done
[16:21:16.379] result() for MulticoreFuture ...
[16:21:16.379] result() for MulticoreFuture ... done
[16:21:16.379] signalConditions() ...
[16:21:16.379]  - include = ‘immediateCondition’
[16:21:16.379]  - exclude = 
[16:21:16.379]  - resignal = FALSE
[16:21:16.379]  - Number of conditions: 1
[16:21:16.379] signalConditions() ... done
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    save_rds <- function (object, pathname, ...)     {        pathname_tmp <- sprintf("%s.tmp", pathname)        if (file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]])        }        tryCatch({            saveRDS(object, file = pathname_tmp, ...)        }, error = function(ex) {            msg <- conditionMessage(ex)            fi_tmp <- file.info(pathname_tmp)            msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 msg)            ex$message <- msg            stop(ex)        })        stopifnot(file_test("-f", pathname_tmp))        res <- file.rename(from = pathname_tmp, to = pathname)        if (!res || file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            fi <- file.info(pathname)            msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 sQuote(pathname), fi[["size"]], fi[["mtime"]])            stop(msg)        }        invisible(pathname)    }    saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath),         rootPath = tempdir())     {        obj <- list(time = Sys.time(), condition = cond)        file <- tempfile(pattern = class(cond)[1], tmpdir = path,             fileext = ".rds")        save_rds(obj, file)    }    saveImmediateCondition(cond, path = "/tmp/RtmpCuMWhk/.future/immediateConditions")    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[16:21:16.380] result() for MulticoreFuture ...
[16:21:16.380] result() for MulticoreFuture ... done
[16:21:16.381] result() for MulticoreFuture ...
[16:21:16.381] result() for MulticoreFuture ... done
[16:21:16.381] signalConditions() ...
[16:21:16.381]  - include = ‘immediateCondition’
[16:21:16.381]  - exclude = 
[16:21:16.381]  - resignal = FALSE
[16:21:16.381]  - Number of conditions: 1
[16:21:16.381] signalConditions() ... done
[16:21:16.381] Future state: ‘finished’
[16:21:16.384] result() for MulticoreFuture ...
[16:21:16.385] result() for MulticoreFuture ... done
[16:21:16.385] signalConditions() ...
[16:21:16.385]  - include = ‘condition’
[16:21:16.385]  - exclude = ‘immediateCondition’
[16:21:16.385]  - resignal = TRUE
[16:21:16.385]  - Number of conditions: 1
[16:21:16.385]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[16:21:16.385] signalConditions() ... done
[1] "Error in withCallingHandlers({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    save_rds <- function (object, pathname, ...)     {        pathname_tmp <- sprintf("%s.tmp", pathname)        if (file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]])        }        tryCatch({            saveRDS(object, file = pathname_tmp, ...)        }, error = function(ex) {            msg <- conditionMessage(ex)            fi_tmp <- file.info(pathname_tmp)            msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 msg)            ex$message <- msg            stop(ex)        })        stopifnot(file_test("-f", pathname_tmp))        res <- file.rename(from = pathname_tmp, to = pathname)        if (!res || file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            fi <- file.info(pathname)            msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 sQuote(pathname), fi[["size"]], fi[["mtime"]])            stop(msg)        }        invisible(pathname)    }    saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath),         rootPath = tempdir())     {        obj <- list(time = Sys.time(), condition = cond)        file <- tempfile(pattern = class(cond)[1], tmpdir = path,             fileext = ".rds")        save_rds(obj, file)    }    saveImmediateCondition(cond, path = "/tmp/RtmpCuMWhk/.future/immediateConditions")    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[16:21:16.386] result() for MulticoreFuture ...
[16:21:16.387] result() for MulticoreFuture ... done
[16:21:16.387] result() for MulticoreFuture ...
[16:21:16.387] result() for MulticoreFuture ... done
[16:21:16.387] signalConditions() ...
[16:21:16.387]  - include = ‘immediateCondition’
[16:21:16.387]  - exclude = 
[16:21:16.387]  - resignal = FALSE
[16:21:16.388]  - Number of conditions: 1
[16:21:16.388] signalConditions() ... done
[16:21:16.388] Future state: ‘finished’
[16:21:16.388] result() for MulticoreFuture ...
[16:21:16.388] result() for MulticoreFuture ... done
[16:21:16.388] signalConditions() ...
[16:21:16.388]  - include = ‘condition’
[16:21:16.388]  - exclude = ‘immediateCondition’
[16:21:16.389]  - resignal = TRUE
[16:21:16.389]  - Number of conditions: 1
[16:21:16.389]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[16:21:16.389] signalConditions() ... done
[1] "Error in withCallingHandlers({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    save_rds <- function (object, pathname, ...)     {        pathname_tmp <- sprintf("%s.tmp", pathname)        if (file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]])        }        tryCatch({            saveRDS(object, file = pathname_tmp, ...)        }, error = function(ex) {            msg <- conditionMessage(ex)            fi_tmp <- file.info(pathname_tmp)            msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 msg)            ex$message <- msg            stop(ex)        })        stopifnot(file_test("-f", pathname_tmp))        res <- file.rename(from = pathname_tmp, to = pathname)        if (!res || file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            fi <- file.info(pathname)            msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 sQuote(pathname), fi[["size"]], fi[["mtime"]])            stop(msg)        }        invisible(pathname)    }    saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath),         rootPath = tempdir())     {        obj <- list(time = Sys.time(), condition = cond)        file <- tempfile(pattern = class(cond)[1], tmpdir = path,             fileext = ".rds")        save_rds(obj, file)    }    saveImmediateCondition(cond, path = "/tmp/RtmpCuMWhk/.future/immediateConditions")    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[16:21:16.393] getGlobalsAndPackages() ...
[16:21:16.393] 
[16:21:16.394] - globals: [0] <none>
[16:21:16.394] getGlobalsAndPackages() ... DONE
[16:21:16.394] Packages needed by the future expression (n = 0): <none>
[16:21:16.395] Packages needed by future strategies (n = 0): <none>
[16:21:16.395] {
[16:21:16.395]     {
[16:21:16.395]         {
[16:21:16.395]             ...future.startTime <- base::Sys.time()
[16:21:16.395]             {
[16:21:16.395]                 {
[16:21:16.395]                   {
[16:21:16.395]                     {
[16:21:16.395]                       base::local({
[16:21:16.395]                         has_future <- base::requireNamespace("future", 
[16:21:16.395]                           quietly = TRUE)
[16:21:16.395]                         if (has_future) {
[16:21:16.395]                           ns <- base::getNamespace("future")
[16:21:16.395]                           version <- ns[[".package"]][["version"]]
[16:21:16.395]                           if (is.null(version)) 
[16:21:16.395]                             version <- utils::packageVersion("future")
[16:21:16.395]                         }
[16:21:16.395]                         else {
[16:21:16.395]                           version <- NULL
[16:21:16.395]                         }
[16:21:16.395]                         if (!has_future || version < "1.8.0") {
[16:21:16.395]                           info <- base::c(r_version = base::gsub("R version ", 
[16:21:16.395]                             "", base::R.version$version.string), 
[16:21:16.395]                             platform = base::sprintf("%s (%s-bit)", 
[16:21:16.395]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:16.395]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:16.395]                               "release", "version")], collapse = " "), 
[16:21:16.395]                             hostname = base::Sys.info()[["nodename"]])
[16:21:16.395]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:21:16.395]                             info)
[16:21:16.395]                           info <- base::paste(info, collapse = "; ")
[16:21:16.395]                           if (!has_future) {
[16:21:16.395]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:16.395]                               info)
[16:21:16.395]                           }
[16:21:16.395]                           else {
[16:21:16.395]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:16.395]                               info, version)
[16:21:16.395]                           }
[16:21:16.395]                           base::stop(msg)
[16:21:16.395]                         }
[16:21:16.395]                       })
[16:21:16.395]                     }
[16:21:16.395]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:21:16.395]                     base::options(mc.cores = 1L)
[16:21:16.395]                   }
[16:21:16.395]                   ...future.strategy.old <- future::plan("list")
[16:21:16.395]                   options(future.plan = NULL)
[16:21:16.395]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:16.395]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:16.395]                 }
[16:21:16.395]                 ...future.workdir <- getwd()
[16:21:16.395]             }
[16:21:16.395]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:16.395]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:16.395]         }
[16:21:16.395]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:16.395]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:16.395]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:16.395]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:16.395]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:16.395]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:16.395]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:16.395]             base::names(...future.oldOptions))
[16:21:16.395]     }
[16:21:16.395]     if (FALSE) {
[16:21:16.395]     }
[16:21:16.395]     else {
[16:21:16.395]         if (TRUE) {
[16:21:16.395]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:16.395]                 open = "w")
[16:21:16.395]         }
[16:21:16.395]         else {
[16:21:16.395]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:16.395]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:16.395]         }
[16:21:16.395]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:16.395]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:16.395]             base::sink(type = "output", split = FALSE)
[16:21:16.395]             base::close(...future.stdout)
[16:21:16.395]         }, add = TRUE)
[16:21:16.395]     }
[16:21:16.395]     ...future.frame <- base::sys.nframe()
[16:21:16.395]     ...future.conditions <- base::list()
[16:21:16.395]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:16.395]     if (FALSE) {
[16:21:16.395]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:16.395]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:16.395]     }
[16:21:16.395]     ...future.result <- base::tryCatch({
[16:21:16.395]         base::withCallingHandlers({
[16:21:16.395]             ...future.value <- base::withVisible(base::local({
[16:21:16.395]                 withCallingHandlers({
[16:21:16.395]                   {
[16:21:16.395]                     stop(structure(list(message = "boom"), class = c("MyError", 
[16:21:16.395]                       "error", "condition")))
[16:21:16.395]                   }
[16:21:16.395]                 }, immediateCondition = function(cond) {
[16:21:16.395]                   save_rds <- function (object, pathname, ...) 
[16:21:16.395]                   {
[16:21:16.395]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:21:16.395]                     if (file_test("-f", pathname_tmp)) {
[16:21:16.395]                       fi_tmp <- file.info(pathname_tmp)
[16:21:16.395]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:21:16.395]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:21:16.395]                         fi_tmp[["mtime"]])
[16:21:16.395]                     }
[16:21:16.395]                     tryCatch({
[16:21:16.395]                       saveRDS(object, file = pathname_tmp, ...)
[16:21:16.395]                     }, error = function(ex) {
[16:21:16.395]                       msg <- conditionMessage(ex)
[16:21:16.395]                       fi_tmp <- file.info(pathname_tmp)
[16:21:16.395]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:21:16.395]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:21:16.395]                         fi_tmp[["mtime"]], msg)
[16:21:16.395]                       ex$message <- msg
[16:21:16.395]                       stop(ex)
[16:21:16.395]                     })
[16:21:16.395]                     stopifnot(file_test("-f", pathname_tmp))
[16:21:16.395]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:21:16.395]                     if (!res || file_test("-f", pathname_tmp)) {
[16:21:16.395]                       fi_tmp <- file.info(pathname_tmp)
[16:21:16.395]                       fi <- file.info(pathname)
[16:21:16.395]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:21:16.395]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:21:16.395]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:21:16.395]                         fi[["size"]], fi[["mtime"]])
[16:21:16.395]                       stop(msg)
[16:21:16.395]                     }
[16:21:16.395]                     invisible(pathname)
[16:21:16.395]                   }
[16:21:16.395]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:21:16.395]                     rootPath = tempdir()) 
[16:21:16.395]                   {
[16:21:16.395]                     obj <- list(time = Sys.time(), condition = cond)
[16:21:16.395]                     file <- tempfile(pattern = class(cond)[1], 
[16:21:16.395]                       tmpdir = path, fileext = ".rds")
[16:21:16.395]                     save_rds(obj, file)
[16:21:16.395]                   }
[16:21:16.395]                   saveImmediateCondition(cond, path = "/tmp/RtmpCuMWhk/.future/immediateConditions")
[16:21:16.395]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.395]                   {
[16:21:16.395]                     inherits <- base::inherits
[16:21:16.395]                     invokeRestart <- base::invokeRestart
[16:21:16.395]                     is.null <- base::is.null
[16:21:16.395]                     muffled <- FALSE
[16:21:16.395]                     if (inherits(cond, "message")) {
[16:21:16.395]                       muffled <- grepl(pattern, "muffleMessage")
[16:21:16.395]                       if (muffled) 
[16:21:16.395]                         invokeRestart("muffleMessage")
[16:21:16.395]                     }
[16:21:16.395]                     else if (inherits(cond, "warning")) {
[16:21:16.395]                       muffled <- grepl(pattern, "muffleWarning")
[16:21:16.395]                       if (muffled) 
[16:21:16.395]                         invokeRestart("muffleWarning")
[16:21:16.395]                     }
[16:21:16.395]                     else if (inherits(cond, "condition")) {
[16:21:16.395]                       if (!is.null(pattern)) {
[16:21:16.395]                         computeRestarts <- base::computeRestarts
[16:21:16.395]                         grepl <- base::grepl
[16:21:16.395]                         restarts <- computeRestarts(cond)
[16:21:16.395]                         for (restart in restarts) {
[16:21:16.395]                           name <- restart$name
[16:21:16.395]                           if (is.null(name)) 
[16:21:16.395]                             next
[16:21:16.395]                           if (!grepl(pattern, name)) 
[16:21:16.395]                             next
[16:21:16.395]                           invokeRestart(restart)
[16:21:16.395]                           muffled <- TRUE
[16:21:16.395]                           break
[16:21:16.395]                         }
[16:21:16.395]                       }
[16:21:16.395]                     }
[16:21:16.395]                     invisible(muffled)
[16:21:16.395]                   }
[16:21:16.395]                   muffleCondition(cond)
[16:21:16.395]                 })
[16:21:16.395]             }))
[16:21:16.395]             future::FutureResult(value = ...future.value$value, 
[16:21:16.395]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:16.395]                   ...future.rng), globalenv = if (FALSE) 
[16:21:16.395]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:16.395]                     ...future.globalenv.names))
[16:21:16.395]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:16.395]         }, condition = base::local({
[16:21:16.395]             c <- base::c
[16:21:16.395]             inherits <- base::inherits
[16:21:16.395]             invokeRestart <- base::invokeRestart
[16:21:16.395]             length <- base::length
[16:21:16.395]             list <- base::list
[16:21:16.395]             seq.int <- base::seq.int
[16:21:16.395]             signalCondition <- base::signalCondition
[16:21:16.395]             sys.calls <- base::sys.calls
[16:21:16.395]             `[[` <- base::`[[`
[16:21:16.395]             `+` <- base::`+`
[16:21:16.395]             `<<-` <- base::`<<-`
[16:21:16.395]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:16.395]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:16.395]                   3L)]
[16:21:16.395]             }
[16:21:16.395]             function(cond) {
[16:21:16.395]                 is_error <- inherits(cond, "error")
[16:21:16.395]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:16.395]                   NULL)
[16:21:16.395]                 if (is_error) {
[16:21:16.395]                   sessionInformation <- function() {
[16:21:16.395]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:16.395]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:16.395]                       search = base::search(), system = base::Sys.info())
[16:21:16.395]                   }
[16:21:16.395]                   ...future.conditions[[length(...future.conditions) + 
[16:21:16.395]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:16.395]                     cond$call), session = sessionInformation(), 
[16:21:16.395]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:16.395]                   signalCondition(cond)
[16:21:16.395]                 }
[16:21:16.395]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:16.395]                 "immediateCondition"))) {
[16:21:16.395]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:16.395]                   ...future.conditions[[length(...future.conditions) + 
[16:21:16.395]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:16.395]                   if (TRUE && !signal) {
[16:21:16.395]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.395]                     {
[16:21:16.395]                       inherits <- base::inherits
[16:21:16.395]                       invokeRestart <- base::invokeRestart
[16:21:16.395]                       is.null <- base::is.null
[16:21:16.395]                       muffled <- FALSE
[16:21:16.395]                       if (inherits(cond, "message")) {
[16:21:16.395]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:16.395]                         if (muffled) 
[16:21:16.395]                           invokeRestart("muffleMessage")
[16:21:16.395]                       }
[16:21:16.395]                       else if (inherits(cond, "warning")) {
[16:21:16.395]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:16.395]                         if (muffled) 
[16:21:16.395]                           invokeRestart("muffleWarning")
[16:21:16.395]                       }
[16:21:16.395]                       else if (inherits(cond, "condition")) {
[16:21:16.395]                         if (!is.null(pattern)) {
[16:21:16.395]                           computeRestarts <- base::computeRestarts
[16:21:16.395]                           grepl <- base::grepl
[16:21:16.395]                           restarts <- computeRestarts(cond)
[16:21:16.395]                           for (restart in restarts) {
[16:21:16.395]                             name <- restart$name
[16:21:16.395]                             if (is.null(name)) 
[16:21:16.395]                               next
[16:21:16.395]                             if (!grepl(pattern, name)) 
[16:21:16.395]                               next
[16:21:16.395]                             invokeRestart(restart)
[16:21:16.395]                             muffled <- TRUE
[16:21:16.395]                             break
[16:21:16.395]                           }
[16:21:16.395]                         }
[16:21:16.395]                       }
[16:21:16.395]                       invisible(muffled)
[16:21:16.395]                     }
[16:21:16.395]                     muffleCondition(cond, pattern = "^muffle")
[16:21:16.395]                   }
[16:21:16.395]                 }
[16:21:16.395]                 else {
[16:21:16.395]                   if (TRUE) {
[16:21:16.395]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.395]                     {
[16:21:16.395]                       inherits <- base::inherits
[16:21:16.395]                       invokeRestart <- base::invokeRestart
[16:21:16.395]                       is.null <- base::is.null
[16:21:16.395]                       muffled <- FALSE
[16:21:16.395]                       if (inherits(cond, "message")) {
[16:21:16.395]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:16.395]                         if (muffled) 
[16:21:16.395]                           invokeRestart("muffleMessage")
[16:21:16.395]                       }
[16:21:16.395]                       else if (inherits(cond, "warning")) {
[16:21:16.395]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:16.395]                         if (muffled) 
[16:21:16.395]                           invokeRestart("muffleWarning")
[16:21:16.395]                       }
[16:21:16.395]                       else if (inherits(cond, "condition")) {
[16:21:16.395]                         if (!is.null(pattern)) {
[16:21:16.395]                           computeRestarts <- base::computeRestarts
[16:21:16.395]                           grepl <- base::grepl
[16:21:16.395]                           restarts <- computeRestarts(cond)
[16:21:16.395]                           for (restart in restarts) {
[16:21:16.395]                             name <- restart$name
[16:21:16.395]                             if (is.null(name)) 
[16:21:16.395]                               next
[16:21:16.395]                             if (!grepl(pattern, name)) 
[16:21:16.395]                               next
[16:21:16.395]                             invokeRestart(restart)
[16:21:16.395]                             muffled <- TRUE
[16:21:16.395]                             break
[16:21:16.395]                           }
[16:21:16.395]                         }
[16:21:16.395]                       }
[16:21:16.395]                       invisible(muffled)
[16:21:16.395]                     }
[16:21:16.395]                     muffleCondition(cond, pattern = "^muffle")
[16:21:16.395]                   }
[16:21:16.395]                 }
[16:21:16.395]             }
[16:21:16.395]         }))
[16:21:16.395]     }, error = function(ex) {
[16:21:16.395]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:16.395]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:16.395]                 ...future.rng), started = ...future.startTime, 
[16:21:16.395]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:16.395]             version = "1.8"), class = "FutureResult")
[16:21:16.395]     }, finally = {
[16:21:16.395]         if (!identical(...future.workdir, getwd())) 
[16:21:16.395]             setwd(...future.workdir)
[16:21:16.395]         {
[16:21:16.395]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:16.395]                 ...future.oldOptions$nwarnings <- NULL
[16:21:16.395]             }
[16:21:16.395]             base::options(...future.oldOptions)
[16:21:16.395]             if (.Platform$OS.type == "windows") {
[16:21:16.395]                 old_names <- names(...future.oldEnvVars)
[16:21:16.395]                 envs <- base::Sys.getenv()
[16:21:16.395]                 names <- names(envs)
[16:21:16.395]                 common <- intersect(names, old_names)
[16:21:16.395]                 added <- setdiff(names, old_names)
[16:21:16.395]                 removed <- setdiff(old_names, names)
[16:21:16.395]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:16.395]                   envs[common]]
[16:21:16.395]                 NAMES <- toupper(changed)
[16:21:16.395]                 args <- list()
[16:21:16.395]                 for (kk in seq_along(NAMES)) {
[16:21:16.395]                   name <- changed[[kk]]
[16:21:16.395]                   NAME <- NAMES[[kk]]
[16:21:16.395]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.395]                     next
[16:21:16.395]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:16.395]                 }
[16:21:16.395]                 NAMES <- toupper(added)
[16:21:16.395]                 for (kk in seq_along(NAMES)) {
[16:21:16.395]                   name <- added[[kk]]
[16:21:16.395]                   NAME <- NAMES[[kk]]
[16:21:16.395]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.395]                     next
[16:21:16.395]                   args[[name]] <- ""
[16:21:16.395]                 }
[16:21:16.395]                 NAMES <- toupper(removed)
[16:21:16.395]                 for (kk in seq_along(NAMES)) {
[16:21:16.395]                   name <- removed[[kk]]
[16:21:16.395]                   NAME <- NAMES[[kk]]
[16:21:16.395]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.395]                     next
[16:21:16.395]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:16.395]                 }
[16:21:16.395]                 if (length(args) > 0) 
[16:21:16.395]                   base::do.call(base::Sys.setenv, args = args)
[16:21:16.395]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:16.395]             }
[16:21:16.395]             else {
[16:21:16.395]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:16.395]             }
[16:21:16.395]             {
[16:21:16.395]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:16.395]                   0L) {
[16:21:16.395]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:16.395]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:16.395]                   base::options(opts)
[16:21:16.395]                 }
[16:21:16.395]                 {
[16:21:16.395]                   {
[16:21:16.395]                     base::options(mc.cores = ...future.mc.cores.old)
[16:21:16.395]                     NULL
[16:21:16.395]                   }
[16:21:16.395]                   options(future.plan = NULL)
[16:21:16.395]                   if (is.na(NA_character_)) 
[16:21:16.395]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:16.395]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:16.395]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:16.395]                     .init = FALSE)
[16:21:16.395]                 }
[16:21:16.395]             }
[16:21:16.395]         }
[16:21:16.395]     })
[16:21:16.395]     if (TRUE) {
[16:21:16.395]         base::sink(type = "output", split = FALSE)
[16:21:16.395]         if (TRUE) {
[16:21:16.395]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:16.395]         }
[16:21:16.395]         else {
[16:21:16.395]             ...future.result["stdout"] <- base::list(NULL)
[16:21:16.395]         }
[16:21:16.395]         base::close(...future.stdout)
[16:21:16.395]         ...future.stdout <- NULL
[16:21:16.395]     }
[16:21:16.395]     ...future.result$conditions <- ...future.conditions
[16:21:16.395]     ...future.result$finished <- base::Sys.time()
[16:21:16.395]     ...future.result
[16:21:16.395] }
[16:21:16.397] requestCore(): workers = 2
[16:21:16.399] MulticoreFuture started
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    stop(structure(list(message = "boom"), class = c("MyError", 
        "error", "condition")))
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[16:21:16.400] plan(): Setting new future strategy stack:
[16:21:16.400] List of future strategies:
[16:21:16.400] 1. sequential:
[16:21:16.400]    - args: function (..., envir = parent.frame())
[16:21:16.400]    - tweaked: FALSE
[16:21:16.400]    - call: NULL
[16:21:16.401] plan(): nbrOfWorkers() = 1
[16:21:16.403] plan(): Setting new future strategy stack:
[16:21:16.403] List of future strategies:
[16:21:16.403] 1. multicore:
[16:21:16.403]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:21:16.403]    - tweaked: FALSE
[16:21:16.403]    - call: plan(multicore)
[16:21:16.408] plan(): nbrOfWorkers() = 2
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 341000aa-40a0-ae89-3f55-e211e7e2f207
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:21:16.411] result() for MulticoreFuture ...
[16:21:16.413] result() for MulticoreFuture ...
[16:21:16.413] result() for MulticoreFuture ... done
[16:21:16.414] signalConditions() ...
[16:21:16.414]  - include = ‘immediateCondition’
[16:21:16.414]  - exclude = 
[16:21:16.414]  - resignal = FALSE
[16:21:16.414]  - Number of conditions: 1
[16:21:16.414] signalConditions() ... done
[16:21:16.414] result() for MulticoreFuture ... done
[16:21:16.414] result() for MulticoreFuture ...
[16:21:16.414] result() for MulticoreFuture ... done
[16:21:16.415] signalConditions() ...
[16:21:16.415]  - include = ‘immediateCondition’
[16:21:16.415]  - exclude = 
[16:21:16.415]  - resignal = FALSE
[16:21:16.415]  - Number of conditions: 1
[16:21:16.415] signalConditions() ... done
<MyError: boom>
[16:21:16.415] result() for MulticoreFuture ...
[16:21:16.416] result() for MulticoreFuture ... done
[16:21:16.416] result() for MulticoreFuture ...
[16:21:16.416] result() for MulticoreFuture ... done
[16:21:16.416] signalConditions() ...
[16:21:16.416]  - include = ‘immediateCondition’
[16:21:16.416]  - exclude = 
[16:21:16.416]  - resignal = FALSE
[16:21:16.416]  - Number of conditions: 1
[16:21:16.417] signalConditions() ... done
[16:21:16.417] Future state: ‘finished’
[16:21:16.417] result() for MulticoreFuture ...
[16:21:16.417] result() for MulticoreFuture ... done
[16:21:16.417] signalConditions() ...
[16:21:16.417]  - include = ‘condition’
[16:21:16.417]  - exclude = ‘immediateCondition’
[16:21:16.417]  - resignal = TRUE
[16:21:16.417]  - Number of conditions: 1
[16:21:16.418]  - Condition #1: ‘MyError’, ‘error’, ‘condition’
[16:21:16.418] signalConditions() ... done
*** multicore(..., globals = TRUE) without globals
[16:21:16.422] getGlobalsAndPackages() ...
[16:21:16.422] Searching for globals...
[16:21:16.423] - globals found: [1] ‘{’
[16:21:16.423] Searching for globals ... DONE
[16:21:16.423] Resolving globals: FALSE
[16:21:16.424] 
[16:21:16.424] 
[16:21:16.424] getGlobalsAndPackages() ... DONE
[16:21:16.424] Packages needed by the future expression (n = 0): <none>
[16:21:16.424] Packages needed by future strategies (n = 0): <none>
[16:21:16.425] {
[16:21:16.425]     {
[16:21:16.425]         {
[16:21:16.425]             ...future.startTime <- base::Sys.time()
[16:21:16.425]             {
[16:21:16.425]                 {
[16:21:16.425]                   {
[16:21:16.425]                     {
[16:21:16.425]                       base::local({
[16:21:16.425]                         has_future <- base::requireNamespace("future", 
[16:21:16.425]                           quietly = TRUE)
[16:21:16.425]                         if (has_future) {
[16:21:16.425]                           ns <- base::getNamespace("future")
[16:21:16.425]                           version <- ns[[".package"]][["version"]]
[16:21:16.425]                           if (is.null(version)) 
[16:21:16.425]                             version <- utils::packageVersion("future")
[16:21:16.425]                         }
[16:21:16.425]                         else {
[16:21:16.425]                           version <- NULL
[16:21:16.425]                         }
[16:21:16.425]                         if (!has_future || version < "1.8.0") {
[16:21:16.425]                           info <- base::c(r_version = base::gsub("R version ", 
[16:21:16.425]                             "", base::R.version$version.string), 
[16:21:16.425]                             platform = base::sprintf("%s (%s-bit)", 
[16:21:16.425]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:16.425]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:16.425]                               "release", "version")], collapse = " "), 
[16:21:16.425]                             hostname = base::Sys.info()[["nodename"]])
[16:21:16.425]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:21:16.425]                             info)
[16:21:16.425]                           info <- base::paste(info, collapse = "; ")
[16:21:16.425]                           if (!has_future) {
[16:21:16.425]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:16.425]                               info)
[16:21:16.425]                           }
[16:21:16.425]                           else {
[16:21:16.425]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:16.425]                               info, version)
[16:21:16.425]                           }
[16:21:16.425]                           base::stop(msg)
[16:21:16.425]                         }
[16:21:16.425]                       })
[16:21:16.425]                     }
[16:21:16.425]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:21:16.425]                     base::options(mc.cores = 1L)
[16:21:16.425]                   }
[16:21:16.425]                   ...future.strategy.old <- future::plan("list")
[16:21:16.425]                   options(future.plan = NULL)
[16:21:16.425]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:16.425]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:16.425]                 }
[16:21:16.425]                 ...future.workdir <- getwd()
[16:21:16.425]             }
[16:21:16.425]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:16.425]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:16.425]         }
[16:21:16.425]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:16.425]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:16.425]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:16.425]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:16.425]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:16.425]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:16.425]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:16.425]             base::names(...future.oldOptions))
[16:21:16.425]     }
[16:21:16.425]     if (FALSE) {
[16:21:16.425]     }
[16:21:16.425]     else {
[16:21:16.425]         if (TRUE) {
[16:21:16.425]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:16.425]                 open = "w")
[16:21:16.425]         }
[16:21:16.425]         else {
[16:21:16.425]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:16.425]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:16.425]         }
[16:21:16.425]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:16.425]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:16.425]             base::sink(type = "output", split = FALSE)
[16:21:16.425]             base::close(...future.stdout)
[16:21:16.425]         }, add = TRUE)
[16:21:16.425]     }
[16:21:16.425]     ...future.frame <- base::sys.nframe()
[16:21:16.425]     ...future.conditions <- base::list()
[16:21:16.425]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:16.425]     if (FALSE) {
[16:21:16.425]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:16.425]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:16.425]     }
[16:21:16.425]     ...future.result <- base::tryCatch({
[16:21:16.425]         base::withCallingHandlers({
[16:21:16.425]             ...future.value <- base::withVisible(base::local({
[16:21:16.425]                 withCallingHandlers({
[16:21:16.425]                   {
[16:21:16.425]                     42L
[16:21:16.425]                   }
[16:21:16.425]                 }, immediateCondition = function(cond) {
[16:21:16.425]                   save_rds <- function (object, pathname, ...) 
[16:21:16.425]                   {
[16:21:16.425]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:21:16.425]                     if (file_test("-f", pathname_tmp)) {
[16:21:16.425]                       fi_tmp <- file.info(pathname_tmp)
[16:21:16.425]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:21:16.425]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:21:16.425]                         fi_tmp[["mtime"]])
[16:21:16.425]                     }
[16:21:16.425]                     tryCatch({
[16:21:16.425]                       saveRDS(object, file = pathname_tmp, ...)
[16:21:16.425]                     }, error = function(ex) {
[16:21:16.425]                       msg <- conditionMessage(ex)
[16:21:16.425]                       fi_tmp <- file.info(pathname_tmp)
[16:21:16.425]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:21:16.425]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:21:16.425]                         fi_tmp[["mtime"]], msg)
[16:21:16.425]                       ex$message <- msg
[16:21:16.425]                       stop(ex)
[16:21:16.425]                     })
[16:21:16.425]                     stopifnot(file_test("-f", pathname_tmp))
[16:21:16.425]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:21:16.425]                     if (!res || file_test("-f", pathname_tmp)) {
[16:21:16.425]                       fi_tmp <- file.info(pathname_tmp)
[16:21:16.425]                       fi <- file.info(pathname)
[16:21:16.425]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:21:16.425]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:21:16.425]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:21:16.425]                         fi[["size"]], fi[["mtime"]])
[16:21:16.425]                       stop(msg)
[16:21:16.425]                     }
[16:21:16.425]                     invisible(pathname)
[16:21:16.425]                   }
[16:21:16.425]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:21:16.425]                     rootPath = tempdir()) 
[16:21:16.425]                   {
[16:21:16.425]                     obj <- list(time = Sys.time(), condition = cond)
[16:21:16.425]                     file <- tempfile(pattern = class(cond)[1], 
[16:21:16.425]                       tmpdir = path, fileext = ".rds")
[16:21:16.425]                     save_rds(obj, file)
[16:21:16.425]                   }
[16:21:16.425]                   saveImmediateCondition(cond, path = "/tmp/RtmpCuMWhk/.future/immediateConditions")
[16:21:16.425]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.425]                   {
[16:21:16.425]                     inherits <- base::inherits
[16:21:16.425]                     invokeRestart <- base::invokeRestart
[16:21:16.425]                     is.null <- base::is.null
[16:21:16.425]                     muffled <- FALSE
[16:21:16.425]                     if (inherits(cond, "message")) {
[16:21:16.425]                       muffled <- grepl(pattern, "muffleMessage")
[16:21:16.425]                       if (muffled) 
[16:21:16.425]                         invokeRestart("muffleMessage")
[16:21:16.425]                     }
[16:21:16.425]                     else if (inherits(cond, "warning")) {
[16:21:16.425]                       muffled <- grepl(pattern, "muffleWarning")
[16:21:16.425]                       if (muffled) 
[16:21:16.425]                         invokeRestart("muffleWarning")
[16:21:16.425]                     }
[16:21:16.425]                     else if (inherits(cond, "condition")) {
[16:21:16.425]                       if (!is.null(pattern)) {
[16:21:16.425]                         computeRestarts <- base::computeRestarts
[16:21:16.425]                         grepl <- base::grepl
[16:21:16.425]                         restarts <- computeRestarts(cond)
[16:21:16.425]                         for (restart in restarts) {
[16:21:16.425]                           name <- restart$name
[16:21:16.425]                           if (is.null(name)) 
[16:21:16.425]                             next
[16:21:16.425]                           if (!grepl(pattern, name)) 
[16:21:16.425]                             next
[16:21:16.425]                           invokeRestart(restart)
[16:21:16.425]                           muffled <- TRUE
[16:21:16.425]                           break
[16:21:16.425]                         }
[16:21:16.425]                       }
[16:21:16.425]                     }
[16:21:16.425]                     invisible(muffled)
[16:21:16.425]                   }
[16:21:16.425]                   muffleCondition(cond)
[16:21:16.425]                 })
[16:21:16.425]             }))
[16:21:16.425]             future::FutureResult(value = ...future.value$value, 
[16:21:16.425]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:16.425]                   ...future.rng), globalenv = if (FALSE) 
[16:21:16.425]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:16.425]                     ...future.globalenv.names))
[16:21:16.425]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:16.425]         }, condition = base::local({
[16:21:16.425]             c <- base::c
[16:21:16.425]             inherits <- base::inherits
[16:21:16.425]             invokeRestart <- base::invokeRestart
[16:21:16.425]             length <- base::length
[16:21:16.425]             list <- base::list
[16:21:16.425]             seq.int <- base::seq.int
[16:21:16.425]             signalCondition <- base::signalCondition
[16:21:16.425]             sys.calls <- base::sys.calls
[16:21:16.425]             `[[` <- base::`[[`
[16:21:16.425]             `+` <- base::`+`
[16:21:16.425]             `<<-` <- base::`<<-`
[16:21:16.425]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:16.425]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:16.425]                   3L)]
[16:21:16.425]             }
[16:21:16.425]             function(cond) {
[16:21:16.425]                 is_error <- inherits(cond, "error")
[16:21:16.425]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:16.425]                   NULL)
[16:21:16.425]                 if (is_error) {
[16:21:16.425]                   sessionInformation <- function() {
[16:21:16.425]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:16.425]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:16.425]                       search = base::search(), system = base::Sys.info())
[16:21:16.425]                   }
[16:21:16.425]                   ...future.conditions[[length(...future.conditions) + 
[16:21:16.425]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:16.425]                     cond$call), session = sessionInformation(), 
[16:21:16.425]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:16.425]                   signalCondition(cond)
[16:21:16.425]                 }
[16:21:16.425]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:16.425]                 "immediateCondition"))) {
[16:21:16.425]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:16.425]                   ...future.conditions[[length(...future.conditions) + 
[16:21:16.425]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:16.425]                   if (TRUE && !signal) {
[16:21:16.425]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.425]                     {
[16:21:16.425]                       inherits <- base::inherits
[16:21:16.425]                       invokeRestart <- base::invokeRestart
[16:21:16.425]                       is.null <- base::is.null
[16:21:16.425]                       muffled <- FALSE
[16:21:16.425]                       if (inherits(cond, "message")) {
[16:21:16.425]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:16.425]                         if (muffled) 
[16:21:16.425]                           invokeRestart("muffleMessage")
[16:21:16.425]                       }
[16:21:16.425]                       else if (inherits(cond, "warning")) {
[16:21:16.425]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:16.425]                         if (muffled) 
[16:21:16.425]                           invokeRestart("muffleWarning")
[16:21:16.425]                       }
[16:21:16.425]                       else if (inherits(cond, "condition")) {
[16:21:16.425]                         if (!is.null(pattern)) {
[16:21:16.425]                           computeRestarts <- base::computeRestarts
[16:21:16.425]                           grepl <- base::grepl
[16:21:16.425]                           restarts <- computeRestarts(cond)
[16:21:16.425]                           for (restart in restarts) {
[16:21:16.425]                             name <- restart$name
[16:21:16.425]                             if (is.null(name)) 
[16:21:16.425]                               next
[16:21:16.425]                             if (!grepl(pattern, name)) 
[16:21:16.425]                               next
[16:21:16.425]                             invokeRestart(restart)
[16:21:16.425]                             muffled <- TRUE
[16:21:16.425]                             break
[16:21:16.425]                           }
[16:21:16.425]                         }
[16:21:16.425]                       }
[16:21:16.425]                       invisible(muffled)
[16:21:16.425]                     }
[16:21:16.425]                     muffleCondition(cond, pattern = "^muffle")
[16:21:16.425]                   }
[16:21:16.425]                 }
[16:21:16.425]                 else {
[16:21:16.425]                   if (TRUE) {
[16:21:16.425]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.425]                     {
[16:21:16.425]                       inherits <- base::inherits
[16:21:16.425]                       invokeRestart <- base::invokeRestart
[16:21:16.425]                       is.null <- base::is.null
[16:21:16.425]                       muffled <- FALSE
[16:21:16.425]                       if (inherits(cond, "message")) {
[16:21:16.425]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:16.425]                         if (muffled) 
[16:21:16.425]                           invokeRestart("muffleMessage")
[16:21:16.425]                       }
[16:21:16.425]                       else if (inherits(cond, "warning")) {
[16:21:16.425]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:16.425]                         if (muffled) 
[16:21:16.425]                           invokeRestart("muffleWarning")
[16:21:16.425]                       }
[16:21:16.425]                       else if (inherits(cond, "condition")) {
[16:21:16.425]                         if (!is.null(pattern)) {
[16:21:16.425]                           computeRestarts <- base::computeRestarts
[16:21:16.425]                           grepl <- base::grepl
[16:21:16.425]                           restarts <- computeRestarts(cond)
[16:21:16.425]                           for (restart in restarts) {
[16:21:16.425]                             name <- restart$name
[16:21:16.425]                             if (is.null(name)) 
[16:21:16.425]                               next
[16:21:16.425]                             if (!grepl(pattern, name)) 
[16:21:16.425]                               next
[16:21:16.425]                             invokeRestart(restart)
[16:21:16.425]                             muffled <- TRUE
[16:21:16.425]                             break
[16:21:16.425]                           }
[16:21:16.425]                         }
[16:21:16.425]                       }
[16:21:16.425]                       invisible(muffled)
[16:21:16.425]                     }
[16:21:16.425]                     muffleCondition(cond, pattern = "^muffle")
[16:21:16.425]                   }
[16:21:16.425]                 }
[16:21:16.425]             }
[16:21:16.425]         }))
[16:21:16.425]     }, error = function(ex) {
[16:21:16.425]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:16.425]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:16.425]                 ...future.rng), started = ...future.startTime, 
[16:21:16.425]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:16.425]             version = "1.8"), class = "FutureResult")
[16:21:16.425]     }, finally = {
[16:21:16.425]         if (!identical(...future.workdir, getwd())) 
[16:21:16.425]             setwd(...future.workdir)
[16:21:16.425]         {
[16:21:16.425]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:16.425]                 ...future.oldOptions$nwarnings <- NULL
[16:21:16.425]             }
[16:21:16.425]             base::options(...future.oldOptions)
[16:21:16.425]             if (.Platform$OS.type == "windows") {
[16:21:16.425]                 old_names <- names(...future.oldEnvVars)
[16:21:16.425]                 envs <- base::Sys.getenv()
[16:21:16.425]                 names <- names(envs)
[16:21:16.425]                 common <- intersect(names, old_names)
[16:21:16.425]                 added <- setdiff(names, old_names)
[16:21:16.425]                 removed <- setdiff(old_names, names)
[16:21:16.425]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:16.425]                   envs[common]]
[16:21:16.425]                 NAMES <- toupper(changed)
[16:21:16.425]                 args <- list()
[16:21:16.425]                 for (kk in seq_along(NAMES)) {
[16:21:16.425]                   name <- changed[[kk]]
[16:21:16.425]                   NAME <- NAMES[[kk]]
[16:21:16.425]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.425]                     next
[16:21:16.425]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:16.425]                 }
[16:21:16.425]                 NAMES <- toupper(added)
[16:21:16.425]                 for (kk in seq_along(NAMES)) {
[16:21:16.425]                   name <- added[[kk]]
[16:21:16.425]                   NAME <- NAMES[[kk]]
[16:21:16.425]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.425]                     next
[16:21:16.425]                   args[[name]] <- ""
[16:21:16.425]                 }
[16:21:16.425]                 NAMES <- toupper(removed)
[16:21:16.425]                 for (kk in seq_along(NAMES)) {
[16:21:16.425]                   name <- removed[[kk]]
[16:21:16.425]                   NAME <- NAMES[[kk]]
[16:21:16.425]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.425]                     next
[16:21:16.425]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:16.425]                 }
[16:21:16.425]                 if (length(args) > 0) 
[16:21:16.425]                   base::do.call(base::Sys.setenv, args = args)
[16:21:16.425]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:16.425]             }
[16:21:16.425]             else {
[16:21:16.425]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:16.425]             }
[16:21:16.425]             {
[16:21:16.425]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:16.425]                   0L) {
[16:21:16.425]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:16.425]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:16.425]                   base::options(opts)
[16:21:16.425]                 }
[16:21:16.425]                 {
[16:21:16.425]                   {
[16:21:16.425]                     base::options(mc.cores = ...future.mc.cores.old)
[16:21:16.425]                     NULL
[16:21:16.425]                   }
[16:21:16.425]                   options(future.plan = NULL)
[16:21:16.425]                   if (is.na(NA_character_)) 
[16:21:16.425]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:16.425]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:16.425]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:16.425]                     .init = FALSE)
[16:21:16.425]                 }
[16:21:16.425]             }
[16:21:16.425]         }
[16:21:16.425]     })
[16:21:16.425]     if (TRUE) {
[16:21:16.425]         base::sink(type = "output", split = FALSE)
[16:21:16.425]         if (TRUE) {
[16:21:16.425]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:16.425]         }
[16:21:16.425]         else {
[16:21:16.425]             ...future.result["stdout"] <- base::list(NULL)
[16:21:16.425]         }
[16:21:16.425]         base::close(...future.stdout)
[16:21:16.425]         ...future.stdout <- NULL
[16:21:16.425]     }
[16:21:16.425]     ...future.result$conditions <- ...future.conditions
[16:21:16.425]     ...future.result$finished <- base::Sys.time()
[16:21:16.425]     ...future.result
[16:21:16.425] }
[16:21:16.428] requestCore(): workers = 2
[16:21:16.429] MulticoreFuture started
[16:21:16.430] plan(): Setting new future strategy stack:
[16:21:16.431] List of future strategies:
[16:21:16.431] 1. sequential:
[16:21:16.431]    - args: function (..., envir = parent.frame())
[16:21:16.431]    - tweaked: FALSE
[16:21:16.431]    - call: NULL
[16:21:16.431] plan(): nbrOfWorkers() = 1
[16:21:16.433] plan(): Setting new future strategy stack:
[16:21:16.434] List of future strategies:
[16:21:16.434] 1. multicore:
[16:21:16.434]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:21:16.434]    - tweaked: FALSE
[16:21:16.434]    - call: plan(multicore)
[16:21:16.439] plan(): nbrOfWorkers() = 2
[1] TRUE
[16:21:16.439] result() for MulticoreFuture ...
[16:21:16.440] result() for MulticoreFuture ...
[16:21:16.441] result() for MulticoreFuture ... done
[16:21:16.441] result() for MulticoreFuture ... done
[16:21:16.441] result() for MulticoreFuture ...
[16:21:16.441] result() for MulticoreFuture ... done
[1] 42
*** multicore(..., globals = TRUE) with globals
[16:21:16.445] getGlobalsAndPackages() ...
[16:21:16.445] Searching for globals...
[16:21:16.447] - globals found: [4] ‘{’, ‘<-’, ‘*’, ‘a’
[16:21:16.448] Searching for globals ... DONE
[16:21:16.448] Resolving globals: FALSE
[16:21:16.448] The total size of the 1 globals is 56 bytes (56 bytes)
[16:21:16.449] The total size of the 1 globals exported for future expression (‘{; b <- 3; c <- 2; a * b * c; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[16:21:16.449] - globals: [1] ‘a’
[16:21:16.449] 
[16:21:16.449] getGlobalsAndPackages() ... DONE
[16:21:16.450] Packages needed by the future expression (n = 0): <none>
[16:21:16.450] Packages needed by future strategies (n = 0): <none>
[16:21:16.453] {
[16:21:16.453]     {
[16:21:16.453]         {
[16:21:16.453]             ...future.startTime <- base::Sys.time()
[16:21:16.453]             {
[16:21:16.453]                 {
[16:21:16.453]                   {
[16:21:16.453]                     {
[16:21:16.453]                       base::local({
[16:21:16.453]                         has_future <- base::requireNamespace("future", 
[16:21:16.453]                           quietly = TRUE)
[16:21:16.453]                         if (has_future) {
[16:21:16.453]                           ns <- base::getNamespace("future")
[16:21:16.453]                           version <- ns[[".package"]][["version"]]
[16:21:16.453]                           if (is.null(version)) 
[16:21:16.453]                             version <- utils::packageVersion("future")
[16:21:16.453]                         }
[16:21:16.453]                         else {
[16:21:16.453]                           version <- NULL
[16:21:16.453]                         }
[16:21:16.453]                         if (!has_future || version < "1.8.0") {
[16:21:16.453]                           info <- base::c(r_version = base::gsub("R version ", 
[16:21:16.453]                             "", base::R.version$version.string), 
[16:21:16.453]                             platform = base::sprintf("%s (%s-bit)", 
[16:21:16.453]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:16.453]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:16.453]                               "release", "version")], collapse = " "), 
[16:21:16.453]                             hostname = base::Sys.info()[["nodename"]])
[16:21:16.453]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:21:16.453]                             info)
[16:21:16.453]                           info <- base::paste(info, collapse = "; ")
[16:21:16.453]                           if (!has_future) {
[16:21:16.453]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:16.453]                               info)
[16:21:16.453]                           }
[16:21:16.453]                           else {
[16:21:16.453]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:16.453]                               info, version)
[16:21:16.453]                           }
[16:21:16.453]                           base::stop(msg)
[16:21:16.453]                         }
[16:21:16.453]                       })
[16:21:16.453]                     }
[16:21:16.453]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:21:16.453]                     base::options(mc.cores = 1L)
[16:21:16.453]                   }
[16:21:16.453]                   ...future.strategy.old <- future::plan("list")
[16:21:16.453]                   options(future.plan = NULL)
[16:21:16.453]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:16.453]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:16.453]                 }
[16:21:16.453]                 ...future.workdir <- getwd()
[16:21:16.453]             }
[16:21:16.453]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:16.453]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:16.453]         }
[16:21:16.453]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:16.453]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:16.453]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:16.453]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:16.453]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:16.453]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:16.453]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:16.453]             base::names(...future.oldOptions))
[16:21:16.453]     }
[16:21:16.453]     if (FALSE) {
[16:21:16.453]     }
[16:21:16.453]     else {
[16:21:16.453]         if (TRUE) {
[16:21:16.453]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:16.453]                 open = "w")
[16:21:16.453]         }
[16:21:16.453]         else {
[16:21:16.453]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:16.453]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:16.453]         }
[16:21:16.453]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:16.453]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:16.453]             base::sink(type = "output", split = FALSE)
[16:21:16.453]             base::close(...future.stdout)
[16:21:16.453]         }, add = TRUE)
[16:21:16.453]     }
[16:21:16.453]     ...future.frame <- base::sys.nframe()
[16:21:16.453]     ...future.conditions <- base::list()
[16:21:16.453]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:16.453]     if (FALSE) {
[16:21:16.453]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:16.453]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:16.453]     }
[16:21:16.453]     ...future.result <- base::tryCatch({
[16:21:16.453]         base::withCallingHandlers({
[16:21:16.453]             ...future.value <- base::withVisible(base::local({
[16:21:16.453]                 withCallingHandlers({
[16:21:16.453]                   {
[16:21:16.453]                     b <- 3
[16:21:16.453]                     c <- 2
[16:21:16.453]                     a * b * c
[16:21:16.453]                   }
[16:21:16.453]                 }, immediateCondition = function(cond) {
[16:21:16.453]                   save_rds <- function (object, pathname, ...) 
[16:21:16.453]                   {
[16:21:16.453]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:21:16.453]                     if (file_test("-f", pathname_tmp)) {
[16:21:16.453]                       fi_tmp <- file.info(pathname_tmp)
[16:21:16.453]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:21:16.453]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:21:16.453]                         fi_tmp[["mtime"]])
[16:21:16.453]                     }
[16:21:16.453]                     tryCatch({
[16:21:16.453]                       saveRDS(object, file = pathname_tmp, ...)
[16:21:16.453]                     }, error = function(ex) {
[16:21:16.453]                       msg <- conditionMessage(ex)
[16:21:16.453]                       fi_tmp <- file.info(pathname_tmp)
[16:21:16.453]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:21:16.453]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:21:16.453]                         fi_tmp[["mtime"]], msg)
[16:21:16.453]                       ex$message <- msg
[16:21:16.453]                       stop(ex)
[16:21:16.453]                     })
[16:21:16.453]                     stopifnot(file_test("-f", pathname_tmp))
[16:21:16.453]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:21:16.453]                     if (!res || file_test("-f", pathname_tmp)) {
[16:21:16.453]                       fi_tmp <- file.info(pathname_tmp)
[16:21:16.453]                       fi <- file.info(pathname)
[16:21:16.453]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:21:16.453]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:21:16.453]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:21:16.453]                         fi[["size"]], fi[["mtime"]])
[16:21:16.453]                       stop(msg)
[16:21:16.453]                     }
[16:21:16.453]                     invisible(pathname)
[16:21:16.453]                   }
[16:21:16.453]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:21:16.453]                     rootPath = tempdir()) 
[16:21:16.453]                   {
[16:21:16.453]                     obj <- list(time = Sys.time(), condition = cond)
[16:21:16.453]                     file <- tempfile(pattern = class(cond)[1], 
[16:21:16.453]                       tmpdir = path, fileext = ".rds")
[16:21:16.453]                     save_rds(obj, file)
[16:21:16.453]                   }
[16:21:16.453]                   saveImmediateCondition(cond, path = "/tmp/RtmpCuMWhk/.future/immediateConditions")
[16:21:16.453]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.453]                   {
[16:21:16.453]                     inherits <- base::inherits
[16:21:16.453]                     invokeRestart <- base::invokeRestart
[16:21:16.453]                     is.null <- base::is.null
[16:21:16.453]                     muffled <- FALSE
[16:21:16.453]                     if (inherits(cond, "message")) {
[16:21:16.453]                       muffled <- grepl(pattern, "muffleMessage")
[16:21:16.453]                       if (muffled) 
[16:21:16.453]                         invokeRestart("muffleMessage")
[16:21:16.453]                     }
[16:21:16.453]                     else if (inherits(cond, "warning")) {
[16:21:16.453]                       muffled <- grepl(pattern, "muffleWarning")
[16:21:16.453]                       if (muffled) 
[16:21:16.453]                         invokeRestart("muffleWarning")
[16:21:16.453]                     }
[16:21:16.453]                     else if (inherits(cond, "condition")) {
[16:21:16.453]                       if (!is.null(pattern)) {
[16:21:16.453]                         computeRestarts <- base::computeRestarts
[16:21:16.453]                         grepl <- base::grepl
[16:21:16.453]                         restarts <- computeRestarts(cond)
[16:21:16.453]                         for (restart in restarts) {
[16:21:16.453]                           name <- restart$name
[16:21:16.453]                           if (is.null(name)) 
[16:21:16.453]                             next
[16:21:16.453]                           if (!grepl(pattern, name)) 
[16:21:16.453]                             next
[16:21:16.453]                           invokeRestart(restart)
[16:21:16.453]                           muffled <- TRUE
[16:21:16.453]                           break
[16:21:16.453]                         }
[16:21:16.453]                       }
[16:21:16.453]                     }
[16:21:16.453]                     invisible(muffled)
[16:21:16.453]                   }
[16:21:16.453]                   muffleCondition(cond)
[16:21:16.453]                 })
[16:21:16.453]             }))
[16:21:16.453]             future::FutureResult(value = ...future.value$value, 
[16:21:16.453]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:16.453]                   ...future.rng), globalenv = if (FALSE) 
[16:21:16.453]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:16.453]                     ...future.globalenv.names))
[16:21:16.453]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:16.453]         }, condition = base::local({
[16:21:16.453]             c <- base::c
[16:21:16.453]             inherits <- base::inherits
[16:21:16.453]             invokeRestart <- base::invokeRestart
[16:21:16.453]             length <- base::length
[16:21:16.453]             list <- base::list
[16:21:16.453]             seq.int <- base::seq.int
[16:21:16.453]             signalCondition <- base::signalCondition
[16:21:16.453]             sys.calls <- base::sys.calls
[16:21:16.453]             `[[` <- base::`[[`
[16:21:16.453]             `+` <- base::`+`
[16:21:16.453]             `<<-` <- base::`<<-`
[16:21:16.453]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:16.453]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:16.453]                   3L)]
[16:21:16.453]             }
[16:21:16.453]             function(cond) {
[16:21:16.453]                 is_error <- inherits(cond, "error")
[16:21:16.453]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:16.453]                   NULL)
[16:21:16.453]                 if (is_error) {
[16:21:16.453]                   sessionInformation <- function() {
[16:21:16.453]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:16.453]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:16.453]                       search = base::search(), system = base::Sys.info())
[16:21:16.453]                   }
[16:21:16.453]                   ...future.conditions[[length(...future.conditions) + 
[16:21:16.453]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:16.453]                     cond$call), session = sessionInformation(), 
[16:21:16.453]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:16.453]                   signalCondition(cond)
[16:21:16.453]                 }
[16:21:16.453]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:16.453]                 "immediateCondition"))) {
[16:21:16.453]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:16.453]                   ...future.conditions[[length(...future.conditions) + 
[16:21:16.453]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:16.453]                   if (TRUE && !signal) {
[16:21:16.453]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.453]                     {
[16:21:16.453]                       inherits <- base::inherits
[16:21:16.453]                       invokeRestart <- base::invokeRestart
[16:21:16.453]                       is.null <- base::is.null
[16:21:16.453]                       muffled <- FALSE
[16:21:16.453]                       if (inherits(cond, "message")) {
[16:21:16.453]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:16.453]                         if (muffled) 
[16:21:16.453]                           invokeRestart("muffleMessage")
[16:21:16.453]                       }
[16:21:16.453]                       else if (inherits(cond, "warning")) {
[16:21:16.453]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:16.453]                         if (muffled) 
[16:21:16.453]                           invokeRestart("muffleWarning")
[16:21:16.453]                       }
[16:21:16.453]                       else if (inherits(cond, "condition")) {
[16:21:16.453]                         if (!is.null(pattern)) {
[16:21:16.453]                           computeRestarts <- base::computeRestarts
[16:21:16.453]                           grepl <- base::grepl
[16:21:16.453]                           restarts <- computeRestarts(cond)
[16:21:16.453]                           for (restart in restarts) {
[16:21:16.453]                             name <- restart$name
[16:21:16.453]                             if (is.null(name)) 
[16:21:16.453]                               next
[16:21:16.453]                             if (!grepl(pattern, name)) 
[16:21:16.453]                               next
[16:21:16.453]                             invokeRestart(restart)
[16:21:16.453]                             muffled <- TRUE
[16:21:16.453]                             break
[16:21:16.453]                           }
[16:21:16.453]                         }
[16:21:16.453]                       }
[16:21:16.453]                       invisible(muffled)
[16:21:16.453]                     }
[16:21:16.453]                     muffleCondition(cond, pattern = "^muffle")
[16:21:16.453]                   }
[16:21:16.453]                 }
[16:21:16.453]                 else {
[16:21:16.453]                   if (TRUE) {
[16:21:16.453]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.453]                     {
[16:21:16.453]                       inherits <- base::inherits
[16:21:16.453]                       invokeRestart <- base::invokeRestart
[16:21:16.453]                       is.null <- base::is.null
[16:21:16.453]                       muffled <- FALSE
[16:21:16.453]                       if (inherits(cond, "message")) {
[16:21:16.453]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:16.453]                         if (muffled) 
[16:21:16.453]                           invokeRestart("muffleMessage")
[16:21:16.453]                       }
[16:21:16.453]                       else if (inherits(cond, "warning")) {
[16:21:16.453]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:16.453]                         if (muffled) 
[16:21:16.453]                           invokeRestart("muffleWarning")
[16:21:16.453]                       }
[16:21:16.453]                       else if (inherits(cond, "condition")) {
[16:21:16.453]                         if (!is.null(pattern)) {
[16:21:16.453]                           computeRestarts <- base::computeRestarts
[16:21:16.453]                           grepl <- base::grepl
[16:21:16.453]                           restarts <- computeRestarts(cond)
[16:21:16.453]                           for (restart in restarts) {
[16:21:16.453]                             name <- restart$name
[16:21:16.453]                             if (is.null(name)) 
[16:21:16.453]                               next
[16:21:16.453]                             if (!grepl(pattern, name)) 
[16:21:16.453]                               next
[16:21:16.453]                             invokeRestart(restart)
[16:21:16.453]                             muffled <- TRUE
[16:21:16.453]                             break
[16:21:16.453]                           }
[16:21:16.453]                         }
[16:21:16.453]                       }
[16:21:16.453]                       invisible(muffled)
[16:21:16.453]                     }
[16:21:16.453]                     muffleCondition(cond, pattern = "^muffle")
[16:21:16.453]                   }
[16:21:16.453]                 }
[16:21:16.453]             }
[16:21:16.453]         }))
[16:21:16.453]     }, error = function(ex) {
[16:21:16.453]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:16.453]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:16.453]                 ...future.rng), started = ...future.startTime, 
[16:21:16.453]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:16.453]             version = "1.8"), class = "FutureResult")
[16:21:16.453]     }, finally = {
[16:21:16.453]         if (!identical(...future.workdir, getwd())) 
[16:21:16.453]             setwd(...future.workdir)
[16:21:16.453]         {
[16:21:16.453]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:16.453]                 ...future.oldOptions$nwarnings <- NULL
[16:21:16.453]             }
[16:21:16.453]             base::options(...future.oldOptions)
[16:21:16.453]             if (.Platform$OS.type == "windows") {
[16:21:16.453]                 old_names <- names(...future.oldEnvVars)
[16:21:16.453]                 envs <- base::Sys.getenv()
[16:21:16.453]                 names <- names(envs)
[16:21:16.453]                 common <- intersect(names, old_names)
[16:21:16.453]                 added <- setdiff(names, old_names)
[16:21:16.453]                 removed <- setdiff(old_names, names)
[16:21:16.453]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:16.453]                   envs[common]]
[16:21:16.453]                 NAMES <- toupper(changed)
[16:21:16.453]                 args <- list()
[16:21:16.453]                 for (kk in seq_along(NAMES)) {
[16:21:16.453]                   name <- changed[[kk]]
[16:21:16.453]                   NAME <- NAMES[[kk]]
[16:21:16.453]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.453]                     next
[16:21:16.453]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:16.453]                 }
[16:21:16.453]                 NAMES <- toupper(added)
[16:21:16.453]                 for (kk in seq_along(NAMES)) {
[16:21:16.453]                   name <- added[[kk]]
[16:21:16.453]                   NAME <- NAMES[[kk]]
[16:21:16.453]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.453]                     next
[16:21:16.453]                   args[[name]] <- ""
[16:21:16.453]                 }
[16:21:16.453]                 NAMES <- toupper(removed)
[16:21:16.453]                 for (kk in seq_along(NAMES)) {
[16:21:16.453]                   name <- removed[[kk]]
[16:21:16.453]                   NAME <- NAMES[[kk]]
[16:21:16.453]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.453]                     next
[16:21:16.453]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:16.453]                 }
[16:21:16.453]                 if (length(args) > 0) 
[16:21:16.453]                   base::do.call(base::Sys.setenv, args = args)
[16:21:16.453]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:16.453]             }
[16:21:16.453]             else {
[16:21:16.453]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:16.453]             }
[16:21:16.453]             {
[16:21:16.453]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:16.453]                   0L) {
[16:21:16.453]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:16.453]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:16.453]                   base::options(opts)
[16:21:16.453]                 }
[16:21:16.453]                 {
[16:21:16.453]                   {
[16:21:16.453]                     base::options(mc.cores = ...future.mc.cores.old)
[16:21:16.453]                     NULL
[16:21:16.453]                   }
[16:21:16.453]                   options(future.plan = NULL)
[16:21:16.453]                   if (is.na(NA_character_)) 
[16:21:16.453]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:16.453]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:16.453]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:16.453]                     .init = FALSE)
[16:21:16.453]                 }
[16:21:16.453]             }
[16:21:16.453]         }
[16:21:16.453]     })
[16:21:16.453]     if (TRUE) {
[16:21:16.453]         base::sink(type = "output", split = FALSE)
[16:21:16.453]         if (TRUE) {
[16:21:16.453]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:16.453]         }
[16:21:16.453]         else {
[16:21:16.453]             ...future.result["stdout"] <- base::list(NULL)
[16:21:16.453]         }
[16:21:16.453]         base::close(...future.stdout)
[16:21:16.453]         ...future.stdout <- NULL
[16:21:16.453]     }
[16:21:16.453]     ...future.result$conditions <- ...future.conditions
[16:21:16.453]     ...future.result$finished <- base::Sys.time()
[16:21:16.453]     ...future.result
[16:21:16.453] }
[16:21:16.456] assign_globals() ...
[16:21:16.456] List of 1
[16:21:16.456]  $ a: num 0
[16:21:16.456]  - attr(*, "where")=List of 1
[16:21:16.456]   ..$ a:<environment: R_EmptyEnv> 
[16:21:16.456]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:21:16.456]  - attr(*, "resolved")= logi FALSE
[16:21:16.456]  - attr(*, "total_size")= num 56
[16:21:16.459] - copied ‘a’ to environment
[16:21:16.459] assign_globals() ... done
[16:21:16.459] requestCore(): workers = 2
[16:21:16.461] MulticoreFuture started
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    b <- 3
    c <- 2
    a * b * c
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:21:16.462] plan(): Setting new future strategy stack:
Globals: 1 objects totaling 56 bytes (numeric ‘a’ of 56 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[16:21:16.462] List of future strategies:
[16:21:16.462] 1. sequential:
[16:21:16.462]    - args: function (..., envir = parent.frame())
[16:21:16.462]    - tweaked: FALSE
[16:21:16.462]    - call: NULL
[16:21:16.463] plan(): nbrOfWorkers() = 1
[16:21:16.465] plan(): Setting new future strategy stack:
[16:21:16.465] List of future strategies:
[16:21:16.465] 1. multicore:
[16:21:16.465]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:21:16.465]    - tweaked: FALSE
[16:21:16.465]    - call: plan(multicore)
[16:21:16.470] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 341000aa-40a0-ae89-3f55-e211e7e2f207
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:21:16.471] result() for MulticoreFuture ...
[16:21:16.472] result() for MulticoreFuture ...
[16:21:16.472] result() for MulticoreFuture ... done
[16:21:16.472] result() for MulticoreFuture ... done
[16:21:16.472] result() for MulticoreFuture ...
[16:21:16.472] result() for MulticoreFuture ... done
[1] 0
*** multicore(..., globals = TRUE) with globals and blocking
 - Creating multicore future #1 ...
[16:21:16.477] getGlobalsAndPackages() ...
[16:21:16.477] Searching for globals...
[16:21:16.478] - globals found: [2] ‘{’, ‘ii’
[16:21:16.478] Searching for globals ... DONE
[16:21:16.478] Resolving globals: FALSE
[16:21:16.478] The total size of the 1 globals is 56 bytes (56 bytes)
[16:21:16.479] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[16:21:16.479] - globals: [1] ‘ii’
[16:21:16.479] 
[16:21:16.479] getGlobalsAndPackages() ... DONE
[16:21:16.480] Packages needed by the future expression (n = 0): <none>
[16:21:16.480] Packages needed by future strategies (n = 0): <none>
[16:21:16.481] {
[16:21:16.481]     {
[16:21:16.481]         {
[16:21:16.481]             ...future.startTime <- base::Sys.time()
[16:21:16.481]             {
[16:21:16.481]                 {
[16:21:16.481]                   {
[16:21:16.481]                     {
[16:21:16.481]                       base::local({
[16:21:16.481]                         has_future <- base::requireNamespace("future", 
[16:21:16.481]                           quietly = TRUE)
[16:21:16.481]                         if (has_future) {
[16:21:16.481]                           ns <- base::getNamespace("future")
[16:21:16.481]                           version <- ns[[".package"]][["version"]]
[16:21:16.481]                           if (is.null(version)) 
[16:21:16.481]                             version <- utils::packageVersion("future")
[16:21:16.481]                         }
[16:21:16.481]                         else {
[16:21:16.481]                           version <- NULL
[16:21:16.481]                         }
[16:21:16.481]                         if (!has_future || version < "1.8.0") {
[16:21:16.481]                           info <- base::c(r_version = base::gsub("R version ", 
[16:21:16.481]                             "", base::R.version$version.string), 
[16:21:16.481]                             platform = base::sprintf("%s (%s-bit)", 
[16:21:16.481]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:16.481]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:16.481]                               "release", "version")], collapse = " "), 
[16:21:16.481]                             hostname = base::Sys.info()[["nodename"]])
[16:21:16.481]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:21:16.481]                             info)
[16:21:16.481]                           info <- base::paste(info, collapse = "; ")
[16:21:16.481]                           if (!has_future) {
[16:21:16.481]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:16.481]                               info)
[16:21:16.481]                           }
[16:21:16.481]                           else {
[16:21:16.481]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:16.481]                               info, version)
[16:21:16.481]                           }
[16:21:16.481]                           base::stop(msg)
[16:21:16.481]                         }
[16:21:16.481]                       })
[16:21:16.481]                     }
[16:21:16.481]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:21:16.481]                     base::options(mc.cores = 1L)
[16:21:16.481]                   }
[16:21:16.481]                   ...future.strategy.old <- future::plan("list")
[16:21:16.481]                   options(future.plan = NULL)
[16:21:16.481]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:16.481]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:16.481]                 }
[16:21:16.481]                 ...future.workdir <- getwd()
[16:21:16.481]             }
[16:21:16.481]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:16.481]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:16.481]         }
[16:21:16.481]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:16.481]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:16.481]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:16.481]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:16.481]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:16.481]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:16.481]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:16.481]             base::names(...future.oldOptions))
[16:21:16.481]     }
[16:21:16.481]     if (FALSE) {
[16:21:16.481]     }
[16:21:16.481]     else {
[16:21:16.481]         if (TRUE) {
[16:21:16.481]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:16.481]                 open = "w")
[16:21:16.481]         }
[16:21:16.481]         else {
[16:21:16.481]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:16.481]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:16.481]         }
[16:21:16.481]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:16.481]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:16.481]             base::sink(type = "output", split = FALSE)
[16:21:16.481]             base::close(...future.stdout)
[16:21:16.481]         }, add = TRUE)
[16:21:16.481]     }
[16:21:16.481]     ...future.frame <- base::sys.nframe()
[16:21:16.481]     ...future.conditions <- base::list()
[16:21:16.481]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:16.481]     if (FALSE) {
[16:21:16.481]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:16.481]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:16.481]     }
[16:21:16.481]     ...future.result <- base::tryCatch({
[16:21:16.481]         base::withCallingHandlers({
[16:21:16.481]             ...future.value <- base::withVisible(base::local({
[16:21:16.481]                 withCallingHandlers({
[16:21:16.481]                   {
[16:21:16.481]                     ii
[16:21:16.481]                   }
[16:21:16.481]                 }, immediateCondition = function(cond) {
[16:21:16.481]                   save_rds <- function (object, pathname, ...) 
[16:21:16.481]                   {
[16:21:16.481]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:21:16.481]                     if (file_test("-f", pathname_tmp)) {
[16:21:16.481]                       fi_tmp <- file.info(pathname_tmp)
[16:21:16.481]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:21:16.481]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:21:16.481]                         fi_tmp[["mtime"]])
[16:21:16.481]                     }
[16:21:16.481]                     tryCatch({
[16:21:16.481]                       saveRDS(object, file = pathname_tmp, ...)
[16:21:16.481]                     }, error = function(ex) {
[16:21:16.481]                       msg <- conditionMessage(ex)
[16:21:16.481]                       fi_tmp <- file.info(pathname_tmp)
[16:21:16.481]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:21:16.481]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:21:16.481]                         fi_tmp[["mtime"]], msg)
[16:21:16.481]                       ex$message <- msg
[16:21:16.481]                       stop(ex)
[16:21:16.481]                     })
[16:21:16.481]                     stopifnot(file_test("-f", pathname_tmp))
[16:21:16.481]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:21:16.481]                     if (!res || file_test("-f", pathname_tmp)) {
[16:21:16.481]                       fi_tmp <- file.info(pathname_tmp)
[16:21:16.481]                       fi <- file.info(pathname)
[16:21:16.481]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:21:16.481]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:21:16.481]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:21:16.481]                         fi[["size"]], fi[["mtime"]])
[16:21:16.481]                       stop(msg)
[16:21:16.481]                     }
[16:21:16.481]                     invisible(pathname)
[16:21:16.481]                   }
[16:21:16.481]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:21:16.481]                     rootPath = tempdir()) 
[16:21:16.481]                   {
[16:21:16.481]                     obj <- list(time = Sys.time(), condition = cond)
[16:21:16.481]                     file <- tempfile(pattern = class(cond)[1], 
[16:21:16.481]                       tmpdir = path, fileext = ".rds")
[16:21:16.481]                     save_rds(obj, file)
[16:21:16.481]                   }
[16:21:16.481]                   saveImmediateCondition(cond, path = "/tmp/RtmpCuMWhk/.future/immediateConditions")
[16:21:16.481]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.481]                   {
[16:21:16.481]                     inherits <- base::inherits
[16:21:16.481]                     invokeRestart <- base::invokeRestart
[16:21:16.481]                     is.null <- base::is.null
[16:21:16.481]                     muffled <- FALSE
[16:21:16.481]                     if (inherits(cond, "message")) {
[16:21:16.481]                       muffled <- grepl(pattern, "muffleMessage")
[16:21:16.481]                       if (muffled) 
[16:21:16.481]                         invokeRestart("muffleMessage")
[16:21:16.481]                     }
[16:21:16.481]                     else if (inherits(cond, "warning")) {
[16:21:16.481]                       muffled <- grepl(pattern, "muffleWarning")
[16:21:16.481]                       if (muffled) 
[16:21:16.481]                         invokeRestart("muffleWarning")
[16:21:16.481]                     }
[16:21:16.481]                     else if (inherits(cond, "condition")) {
[16:21:16.481]                       if (!is.null(pattern)) {
[16:21:16.481]                         computeRestarts <- base::computeRestarts
[16:21:16.481]                         grepl <- base::grepl
[16:21:16.481]                         restarts <- computeRestarts(cond)
[16:21:16.481]                         for (restart in restarts) {
[16:21:16.481]                           name <- restart$name
[16:21:16.481]                           if (is.null(name)) 
[16:21:16.481]                             next
[16:21:16.481]                           if (!grepl(pattern, name)) 
[16:21:16.481]                             next
[16:21:16.481]                           invokeRestart(restart)
[16:21:16.481]                           muffled <- TRUE
[16:21:16.481]                           break
[16:21:16.481]                         }
[16:21:16.481]                       }
[16:21:16.481]                     }
[16:21:16.481]                     invisible(muffled)
[16:21:16.481]                   }
[16:21:16.481]                   muffleCondition(cond)
[16:21:16.481]                 })
[16:21:16.481]             }))
[16:21:16.481]             future::FutureResult(value = ...future.value$value, 
[16:21:16.481]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:16.481]                   ...future.rng), globalenv = if (FALSE) 
[16:21:16.481]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:16.481]                     ...future.globalenv.names))
[16:21:16.481]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:16.481]         }, condition = base::local({
[16:21:16.481]             c <- base::c
[16:21:16.481]             inherits <- base::inherits
[16:21:16.481]             invokeRestart <- base::invokeRestart
[16:21:16.481]             length <- base::length
[16:21:16.481]             list <- base::list
[16:21:16.481]             seq.int <- base::seq.int
[16:21:16.481]             signalCondition <- base::signalCondition
[16:21:16.481]             sys.calls <- base::sys.calls
[16:21:16.481]             `[[` <- base::`[[`
[16:21:16.481]             `+` <- base::`+`
[16:21:16.481]             `<<-` <- base::`<<-`
[16:21:16.481]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:16.481]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:16.481]                   3L)]
[16:21:16.481]             }
[16:21:16.481]             function(cond) {
[16:21:16.481]                 is_error <- inherits(cond, "error")
[16:21:16.481]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:16.481]                   NULL)
[16:21:16.481]                 if (is_error) {
[16:21:16.481]                   sessionInformation <- function() {
[16:21:16.481]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:16.481]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:16.481]                       search = base::search(), system = base::Sys.info())
[16:21:16.481]                   }
[16:21:16.481]                   ...future.conditions[[length(...future.conditions) + 
[16:21:16.481]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:16.481]                     cond$call), session = sessionInformation(), 
[16:21:16.481]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:16.481]                   signalCondition(cond)
[16:21:16.481]                 }
[16:21:16.481]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:16.481]                 "immediateCondition"))) {
[16:21:16.481]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:16.481]                   ...future.conditions[[length(...future.conditions) + 
[16:21:16.481]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:16.481]                   if (TRUE && !signal) {
[16:21:16.481]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.481]                     {
[16:21:16.481]                       inherits <- base::inherits
[16:21:16.481]                       invokeRestart <- base::invokeRestart
[16:21:16.481]                       is.null <- base::is.null
[16:21:16.481]                       muffled <- FALSE
[16:21:16.481]                       if (inherits(cond, "message")) {
[16:21:16.481]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:16.481]                         if (muffled) 
[16:21:16.481]                           invokeRestart("muffleMessage")
[16:21:16.481]                       }
[16:21:16.481]                       else if (inherits(cond, "warning")) {
[16:21:16.481]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:16.481]                         if (muffled) 
[16:21:16.481]                           invokeRestart("muffleWarning")
[16:21:16.481]                       }
[16:21:16.481]                       else if (inherits(cond, "condition")) {
[16:21:16.481]                         if (!is.null(pattern)) {
[16:21:16.481]                           computeRestarts <- base::computeRestarts
[16:21:16.481]                           grepl <- base::grepl
[16:21:16.481]                           restarts <- computeRestarts(cond)
[16:21:16.481]                           for (restart in restarts) {
[16:21:16.481]                             name <- restart$name
[16:21:16.481]                             if (is.null(name)) 
[16:21:16.481]                               next
[16:21:16.481]                             if (!grepl(pattern, name)) 
[16:21:16.481]                               next
[16:21:16.481]                             invokeRestart(restart)
[16:21:16.481]                             muffled <- TRUE
[16:21:16.481]                             break
[16:21:16.481]                           }
[16:21:16.481]                         }
[16:21:16.481]                       }
[16:21:16.481]                       invisible(muffled)
[16:21:16.481]                     }
[16:21:16.481]                     muffleCondition(cond, pattern = "^muffle")
[16:21:16.481]                   }
[16:21:16.481]                 }
[16:21:16.481]                 else {
[16:21:16.481]                   if (TRUE) {
[16:21:16.481]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.481]                     {
[16:21:16.481]                       inherits <- base::inherits
[16:21:16.481]                       invokeRestart <- base::invokeRestart
[16:21:16.481]                       is.null <- base::is.null
[16:21:16.481]                       muffled <- FALSE
[16:21:16.481]                       if (inherits(cond, "message")) {
[16:21:16.481]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:16.481]                         if (muffled) 
[16:21:16.481]                           invokeRestart("muffleMessage")
[16:21:16.481]                       }
[16:21:16.481]                       else if (inherits(cond, "warning")) {
[16:21:16.481]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:16.481]                         if (muffled) 
[16:21:16.481]                           invokeRestart("muffleWarning")
[16:21:16.481]                       }
[16:21:16.481]                       else if (inherits(cond, "condition")) {
[16:21:16.481]                         if (!is.null(pattern)) {
[16:21:16.481]                           computeRestarts <- base::computeRestarts
[16:21:16.481]                           grepl <- base::grepl
[16:21:16.481]                           restarts <- computeRestarts(cond)
[16:21:16.481]                           for (restart in restarts) {
[16:21:16.481]                             name <- restart$name
[16:21:16.481]                             if (is.null(name)) 
[16:21:16.481]                               next
[16:21:16.481]                             if (!grepl(pattern, name)) 
[16:21:16.481]                               next
[16:21:16.481]                             invokeRestart(restart)
[16:21:16.481]                             muffled <- TRUE
[16:21:16.481]                             break
[16:21:16.481]                           }
[16:21:16.481]                         }
[16:21:16.481]                       }
[16:21:16.481]                       invisible(muffled)
[16:21:16.481]                     }
[16:21:16.481]                     muffleCondition(cond, pattern = "^muffle")
[16:21:16.481]                   }
[16:21:16.481]                 }
[16:21:16.481]             }
[16:21:16.481]         }))
[16:21:16.481]     }, error = function(ex) {
[16:21:16.481]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:16.481]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:16.481]                 ...future.rng), started = ...future.startTime, 
[16:21:16.481]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:16.481]             version = "1.8"), class = "FutureResult")
[16:21:16.481]     }, finally = {
[16:21:16.481]         if (!identical(...future.workdir, getwd())) 
[16:21:16.481]             setwd(...future.workdir)
[16:21:16.481]         {
[16:21:16.481]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:16.481]                 ...future.oldOptions$nwarnings <- NULL
[16:21:16.481]             }
[16:21:16.481]             base::options(...future.oldOptions)
[16:21:16.481]             if (.Platform$OS.type == "windows") {
[16:21:16.481]                 old_names <- names(...future.oldEnvVars)
[16:21:16.481]                 envs <- base::Sys.getenv()
[16:21:16.481]                 names <- names(envs)
[16:21:16.481]                 common <- intersect(names, old_names)
[16:21:16.481]                 added <- setdiff(names, old_names)
[16:21:16.481]                 removed <- setdiff(old_names, names)
[16:21:16.481]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:16.481]                   envs[common]]
[16:21:16.481]                 NAMES <- toupper(changed)
[16:21:16.481]                 args <- list()
[16:21:16.481]                 for (kk in seq_along(NAMES)) {
[16:21:16.481]                   name <- changed[[kk]]
[16:21:16.481]                   NAME <- NAMES[[kk]]
[16:21:16.481]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.481]                     next
[16:21:16.481]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:16.481]                 }
[16:21:16.481]                 NAMES <- toupper(added)
[16:21:16.481]                 for (kk in seq_along(NAMES)) {
[16:21:16.481]                   name <- added[[kk]]
[16:21:16.481]                   NAME <- NAMES[[kk]]
[16:21:16.481]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.481]                     next
[16:21:16.481]                   args[[name]] <- ""
[16:21:16.481]                 }
[16:21:16.481]                 NAMES <- toupper(removed)
[16:21:16.481]                 for (kk in seq_along(NAMES)) {
[16:21:16.481]                   name <- removed[[kk]]
[16:21:16.481]                   NAME <- NAMES[[kk]]
[16:21:16.481]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.481]                     next
[16:21:16.481]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:16.481]                 }
[16:21:16.481]                 if (length(args) > 0) 
[16:21:16.481]                   base::do.call(base::Sys.setenv, args = args)
[16:21:16.481]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:16.481]             }
[16:21:16.481]             else {
[16:21:16.481]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:16.481]             }
[16:21:16.481]             {
[16:21:16.481]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:16.481]                   0L) {
[16:21:16.481]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:16.481]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:16.481]                   base::options(opts)
[16:21:16.481]                 }
[16:21:16.481]                 {
[16:21:16.481]                   {
[16:21:16.481]                     base::options(mc.cores = ...future.mc.cores.old)
[16:21:16.481]                     NULL
[16:21:16.481]                   }
[16:21:16.481]                   options(future.plan = NULL)
[16:21:16.481]                   if (is.na(NA_character_)) 
[16:21:16.481]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:16.481]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:16.481]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:16.481]                     .init = FALSE)
[16:21:16.481]                 }
[16:21:16.481]             }
[16:21:16.481]         }
[16:21:16.481]     })
[16:21:16.481]     if (TRUE) {
[16:21:16.481]         base::sink(type = "output", split = FALSE)
[16:21:16.481]         if (TRUE) {
[16:21:16.481]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:16.481]         }
[16:21:16.481]         else {
[16:21:16.481]             ...future.result["stdout"] <- base::list(NULL)
[16:21:16.481]         }
[16:21:16.481]         base::close(...future.stdout)
[16:21:16.481]         ...future.stdout <- NULL
[16:21:16.481]     }
[16:21:16.481]     ...future.result$conditions <- ...future.conditions
[16:21:16.481]     ...future.result$finished <- base::Sys.time()
[16:21:16.481]     ...future.result
[16:21:16.481] }
[16:21:16.483] assign_globals() ...
[16:21:16.483] List of 1
[16:21:16.483]  $ ii: int 1
[16:21:16.483]  - attr(*, "where")=List of 1
[16:21:16.483]   ..$ ii:<environment: R_EmptyEnv> 
[16:21:16.483]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:21:16.483]  - attr(*, "resolved")= logi FALSE
[16:21:16.483]  - attr(*, "total_size")= num 56
[16:21:16.486] - copied ‘ii’ to environment
[16:21:16.486] assign_globals() ... done
[16:21:16.486] requestCore(): workers = 2
[16:21:16.488] MulticoreFuture started
 - Creating multicore future #2 ...
[16:21:16.489] plan(): Setting new future strategy stack:
[16:21:16.489] List of future strategies:
[16:21:16.489] 1. sequential:
[16:21:16.489]    - args: function (..., envir = parent.frame())
[16:21:16.489]    - tweaked: FALSE
[16:21:16.489]    - call: NULL
[16:21:16.490] plan(): nbrOfWorkers() = 1
[16:21:16.492] plan(): Setting new future strategy stack:
[16:21:16.493] List of future strategies:
[16:21:16.493] 1. multicore:
[16:21:16.493]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:21:16.493]    - tweaked: FALSE
[16:21:16.493]    - call: plan(multicore)
[16:21:16.494] getGlobalsAndPackages() ...
[16:21:16.495] Searching for globals...
[16:21:16.496] - globals found: [2] ‘{’, ‘ii’
[16:21:16.496] Searching for globals ... DONE
[16:21:16.497] Resolving globals: FALSE
[16:21:16.497] The total size of the 1 globals is 56 bytes (56 bytes)
[16:21:16.498] plan(): nbrOfWorkers() = 2
[16:21:16.498] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[16:21:16.498] - globals: [1] ‘ii’
[16:21:16.499] 
[16:21:16.499] getGlobalsAndPackages() ... DONE
[16:21:16.499] Packages needed by the future expression (n = 0): <none>
[16:21:16.500] Packages needed by future strategies (n = 0): <none>
[16:21:16.500] {
[16:21:16.500]     {
[16:21:16.500]         {
[16:21:16.500]             ...future.startTime <- base::Sys.time()
[16:21:16.500]             {
[16:21:16.500]                 {
[16:21:16.500]                   {
[16:21:16.500]                     {
[16:21:16.500]                       base::local({
[16:21:16.500]                         has_future <- base::requireNamespace("future", 
[16:21:16.500]                           quietly = TRUE)
[16:21:16.500]                         if (has_future) {
[16:21:16.500]                           ns <- base::getNamespace("future")
[16:21:16.500]                           version <- ns[[".package"]][["version"]]
[16:21:16.500]                           if (is.null(version)) 
[16:21:16.500]                             version <- utils::packageVersion("future")
[16:21:16.500]                         }
[16:21:16.500]                         else {
[16:21:16.500]                           version <- NULL
[16:21:16.500]                         }
[16:21:16.500]                         if (!has_future || version < "1.8.0") {
[16:21:16.500]                           info <- base::c(r_version = base::gsub("R version ", 
[16:21:16.500]                             "", base::R.version$version.string), 
[16:21:16.500]                             platform = base::sprintf("%s (%s-bit)", 
[16:21:16.500]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:16.500]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:16.500]                               "release", "version")], collapse = " "), 
[16:21:16.500]                             hostname = base::Sys.info()[["nodename"]])
[16:21:16.500]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:21:16.500]                             info)
[16:21:16.500]                           info <- base::paste(info, collapse = "; ")
[16:21:16.500]                           if (!has_future) {
[16:21:16.500]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:16.500]                               info)
[16:21:16.500]                           }
[16:21:16.500]                           else {
[16:21:16.500]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:16.500]                               info, version)
[16:21:16.500]                           }
[16:21:16.500]                           base::stop(msg)
[16:21:16.500]                         }
[16:21:16.500]                       })
[16:21:16.500]                     }
[16:21:16.500]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:21:16.500]                     base::options(mc.cores = 1L)
[16:21:16.500]                   }
[16:21:16.500]                   ...future.strategy.old <- future::plan("list")
[16:21:16.500]                   options(future.plan = NULL)
[16:21:16.500]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:16.500]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:16.500]                 }
[16:21:16.500]                 ...future.workdir <- getwd()
[16:21:16.500]             }
[16:21:16.500]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:16.500]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:16.500]         }
[16:21:16.500]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:16.500]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:16.500]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:16.500]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:16.500]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:16.500]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:16.500]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:16.500]             base::names(...future.oldOptions))
[16:21:16.500]     }
[16:21:16.500]     if (FALSE) {
[16:21:16.500]     }
[16:21:16.500]     else {
[16:21:16.500]         if (TRUE) {
[16:21:16.500]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:16.500]                 open = "w")
[16:21:16.500]         }
[16:21:16.500]         else {
[16:21:16.500]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:16.500]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:16.500]         }
[16:21:16.500]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:16.500]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:16.500]             base::sink(type = "output", split = FALSE)
[16:21:16.500]             base::close(...future.stdout)
[16:21:16.500]         }, add = TRUE)
[16:21:16.500]     }
[16:21:16.500]     ...future.frame <- base::sys.nframe()
[16:21:16.500]     ...future.conditions <- base::list()
[16:21:16.500]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:16.500]     if (FALSE) {
[16:21:16.500]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:16.500]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:16.500]     }
[16:21:16.500]     ...future.result <- base::tryCatch({
[16:21:16.500]         base::withCallingHandlers({
[16:21:16.500]             ...future.value <- base::withVisible(base::local({
[16:21:16.500]                 withCallingHandlers({
[16:21:16.500]                   {
[16:21:16.500]                     ii
[16:21:16.500]                   }
[16:21:16.500]                 }, immediateCondition = function(cond) {
[16:21:16.500]                   save_rds <- function (object, pathname, ...) 
[16:21:16.500]                   {
[16:21:16.500]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:21:16.500]                     if (file_test("-f", pathname_tmp)) {
[16:21:16.500]                       fi_tmp <- file.info(pathname_tmp)
[16:21:16.500]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:21:16.500]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:21:16.500]                         fi_tmp[["mtime"]])
[16:21:16.500]                     }
[16:21:16.500]                     tryCatch({
[16:21:16.500]                       saveRDS(object, file = pathname_tmp, ...)
[16:21:16.500]                     }, error = function(ex) {
[16:21:16.500]                       msg <- conditionMessage(ex)
[16:21:16.500]                       fi_tmp <- file.info(pathname_tmp)
[16:21:16.500]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:21:16.500]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:21:16.500]                         fi_tmp[["mtime"]], msg)
[16:21:16.500]                       ex$message <- msg
[16:21:16.500]                       stop(ex)
[16:21:16.500]                     })
[16:21:16.500]                     stopifnot(file_test("-f", pathname_tmp))
[16:21:16.500]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:21:16.500]                     if (!res || file_test("-f", pathname_tmp)) {
[16:21:16.500]                       fi_tmp <- file.info(pathname_tmp)
[16:21:16.500]                       fi <- file.info(pathname)
[16:21:16.500]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:21:16.500]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:21:16.500]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:21:16.500]                         fi[["size"]], fi[["mtime"]])
[16:21:16.500]                       stop(msg)
[16:21:16.500]                     }
[16:21:16.500]                     invisible(pathname)
[16:21:16.500]                   }
[16:21:16.500]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:21:16.500]                     rootPath = tempdir()) 
[16:21:16.500]                   {
[16:21:16.500]                     obj <- list(time = Sys.time(), condition = cond)
[16:21:16.500]                     file <- tempfile(pattern = class(cond)[1], 
[16:21:16.500]                       tmpdir = path, fileext = ".rds")
[16:21:16.500]                     save_rds(obj, file)
[16:21:16.500]                   }
[16:21:16.500]                   saveImmediateCondition(cond, path = "/tmp/RtmpCuMWhk/.future/immediateConditions")
[16:21:16.500]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.500]                   {
[16:21:16.500]                     inherits <- base::inherits
[16:21:16.500]                     invokeRestart <- base::invokeRestart
[16:21:16.500]                     is.null <- base::is.null
[16:21:16.500]                     muffled <- FALSE
[16:21:16.500]                     if (inherits(cond, "message")) {
[16:21:16.500]                       muffled <- grepl(pattern, "muffleMessage")
[16:21:16.500]                       if (muffled) 
[16:21:16.500]                         invokeRestart("muffleMessage")
[16:21:16.500]                     }
[16:21:16.500]                     else if (inherits(cond, "warning")) {
[16:21:16.500]                       muffled <- grepl(pattern, "muffleWarning")
[16:21:16.500]                       if (muffled) 
[16:21:16.500]                         invokeRestart("muffleWarning")
[16:21:16.500]                     }
[16:21:16.500]                     else if (inherits(cond, "condition")) {
[16:21:16.500]                       if (!is.null(pattern)) {
[16:21:16.500]                         computeRestarts <- base::computeRestarts
[16:21:16.500]                         grepl <- base::grepl
[16:21:16.500]                         restarts <- computeRestarts(cond)
[16:21:16.500]                         for (restart in restarts) {
[16:21:16.500]                           name <- restart$name
[16:21:16.500]                           if (is.null(name)) 
[16:21:16.500]                             next
[16:21:16.500]                           if (!grepl(pattern, name)) 
[16:21:16.500]                             next
[16:21:16.500]                           invokeRestart(restart)
[16:21:16.500]                           muffled <- TRUE
[16:21:16.500]                           break
[16:21:16.500]                         }
[16:21:16.500]                       }
[16:21:16.500]                     }
[16:21:16.500]                     invisible(muffled)
[16:21:16.500]                   }
[16:21:16.500]                   muffleCondition(cond)
[16:21:16.500]                 })
[16:21:16.500]             }))
[16:21:16.500]             future::FutureResult(value = ...future.value$value, 
[16:21:16.500]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:16.500]                   ...future.rng), globalenv = if (FALSE) 
[16:21:16.500]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:16.500]                     ...future.globalenv.names))
[16:21:16.500]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:16.500]         }, condition = base::local({
[16:21:16.500]             c <- base::c
[16:21:16.500]             inherits <- base::inherits
[16:21:16.500]             invokeRestart <- base::invokeRestart
[16:21:16.500]             length <- base::length
[16:21:16.500]             list <- base::list
[16:21:16.500]             seq.int <- base::seq.int
[16:21:16.500]             signalCondition <- base::signalCondition
[16:21:16.500]             sys.calls <- base::sys.calls
[16:21:16.500]             `[[` <- base::`[[`
[16:21:16.500]             `+` <- base::`+`
[16:21:16.500]             `<<-` <- base::`<<-`
[16:21:16.500]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:16.500]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:16.500]                   3L)]
[16:21:16.500]             }
[16:21:16.500]             function(cond) {
[16:21:16.500]                 is_error <- inherits(cond, "error")
[16:21:16.500]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:16.500]                   NULL)
[16:21:16.500]                 if (is_error) {
[16:21:16.500]                   sessionInformation <- function() {
[16:21:16.500]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:16.500]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:16.500]                       search = base::search(), system = base::Sys.info())
[16:21:16.500]                   }
[16:21:16.500]                   ...future.conditions[[length(...future.conditions) + 
[16:21:16.500]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:16.500]                     cond$call), session = sessionInformation(), 
[16:21:16.500]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:16.500]                   signalCondition(cond)
[16:21:16.500]                 }
[16:21:16.500]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:16.500]                 "immediateCondition"))) {
[16:21:16.500]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:16.500]                   ...future.conditions[[length(...future.conditions) + 
[16:21:16.500]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:16.500]                   if (TRUE && !signal) {
[16:21:16.500]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.500]                     {
[16:21:16.500]                       inherits <- base::inherits
[16:21:16.500]                       invokeRestart <- base::invokeRestart
[16:21:16.500]                       is.null <- base::is.null
[16:21:16.500]                       muffled <- FALSE
[16:21:16.500]                       if (inherits(cond, "message")) {
[16:21:16.500]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:16.500]                         if (muffled) 
[16:21:16.500]                           invokeRestart("muffleMessage")
[16:21:16.500]                       }
[16:21:16.500]                       else if (inherits(cond, "warning")) {
[16:21:16.500]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:16.500]                         if (muffled) 
[16:21:16.500]                           invokeRestart("muffleWarning")
[16:21:16.500]                       }
[16:21:16.500]                       else if (inherits(cond, "condition")) {
[16:21:16.500]                         if (!is.null(pattern)) {
[16:21:16.500]                           computeRestarts <- base::computeRestarts
[16:21:16.500]                           grepl <- base::grepl
[16:21:16.500]                           restarts <- computeRestarts(cond)
[16:21:16.500]                           for (restart in restarts) {
[16:21:16.500]                             name <- restart$name
[16:21:16.500]                             if (is.null(name)) 
[16:21:16.500]                               next
[16:21:16.500]                             if (!grepl(pattern, name)) 
[16:21:16.500]                               next
[16:21:16.500]                             invokeRestart(restart)
[16:21:16.500]                             muffled <- TRUE
[16:21:16.500]                             break
[16:21:16.500]                           }
[16:21:16.500]                         }
[16:21:16.500]                       }
[16:21:16.500]                       invisible(muffled)
[16:21:16.500]                     }
[16:21:16.500]                     muffleCondition(cond, pattern = "^muffle")
[16:21:16.500]                   }
[16:21:16.500]                 }
[16:21:16.500]                 else {
[16:21:16.500]                   if (TRUE) {
[16:21:16.500]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.500]                     {
[16:21:16.500]                       inherits <- base::inherits
[16:21:16.500]                       invokeRestart <- base::invokeRestart
[16:21:16.500]                       is.null <- base::is.null
[16:21:16.500]                       muffled <- FALSE
[16:21:16.500]                       if (inherits(cond, "message")) {
[16:21:16.500]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:16.500]                         if (muffled) 
[16:21:16.500]                           invokeRestart("muffleMessage")
[16:21:16.500]                       }
[16:21:16.500]                       else if (inherits(cond, "warning")) {
[16:21:16.500]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:16.500]                         if (muffled) 
[16:21:16.500]                           invokeRestart("muffleWarning")
[16:21:16.500]                       }
[16:21:16.500]                       else if (inherits(cond, "condition")) {
[16:21:16.500]                         if (!is.null(pattern)) {
[16:21:16.500]                           computeRestarts <- base::computeRestarts
[16:21:16.500]                           grepl <- base::grepl
[16:21:16.500]                           restarts <- computeRestarts(cond)
[16:21:16.500]                           for (restart in restarts) {
[16:21:16.500]                             name <- restart$name
[16:21:16.500]                             if (is.null(name)) 
[16:21:16.500]                               next
[16:21:16.500]                             if (!grepl(pattern, name)) 
[16:21:16.500]                               next
[16:21:16.500]                             invokeRestart(restart)
[16:21:16.500]                             muffled <- TRUE
[16:21:16.500]                             break
[16:21:16.500]                           }
[16:21:16.500]                         }
[16:21:16.500]                       }
[16:21:16.500]                       invisible(muffled)
[16:21:16.500]                     }
[16:21:16.500]                     muffleCondition(cond, pattern = "^muffle")
[16:21:16.500]                   }
[16:21:16.500]                 }
[16:21:16.500]             }
[16:21:16.500]         }))
[16:21:16.500]     }, error = function(ex) {
[16:21:16.500]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:16.500]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:16.500]                 ...future.rng), started = ...future.startTime, 
[16:21:16.500]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:16.500]             version = "1.8"), class = "FutureResult")
[16:21:16.500]     }, finally = {
[16:21:16.500]         if (!identical(...future.workdir, getwd())) 
[16:21:16.500]             setwd(...future.workdir)
[16:21:16.500]         {
[16:21:16.500]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:16.500]                 ...future.oldOptions$nwarnings <- NULL
[16:21:16.500]             }
[16:21:16.500]             base::options(...future.oldOptions)
[16:21:16.500]             if (.Platform$OS.type == "windows") {
[16:21:16.500]                 old_names <- names(...future.oldEnvVars)
[16:21:16.500]                 envs <- base::Sys.getenv()
[16:21:16.500]                 names <- names(envs)
[16:21:16.500]                 common <- intersect(names, old_names)
[16:21:16.500]                 added <- setdiff(names, old_names)
[16:21:16.500]                 removed <- setdiff(old_names, names)
[16:21:16.500]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:16.500]                   envs[common]]
[16:21:16.500]                 NAMES <- toupper(changed)
[16:21:16.500]                 args <- list()
[16:21:16.500]                 for (kk in seq_along(NAMES)) {
[16:21:16.500]                   name <- changed[[kk]]
[16:21:16.500]                   NAME <- NAMES[[kk]]
[16:21:16.500]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.500]                     next
[16:21:16.500]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:16.500]                 }
[16:21:16.500]                 NAMES <- toupper(added)
[16:21:16.500]                 for (kk in seq_along(NAMES)) {
[16:21:16.500]                   name <- added[[kk]]
[16:21:16.500]                   NAME <- NAMES[[kk]]
[16:21:16.500]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.500]                     next
[16:21:16.500]                   args[[name]] <- ""
[16:21:16.500]                 }
[16:21:16.500]                 NAMES <- toupper(removed)
[16:21:16.500]                 for (kk in seq_along(NAMES)) {
[16:21:16.500]                   name <- removed[[kk]]
[16:21:16.500]                   NAME <- NAMES[[kk]]
[16:21:16.500]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.500]                     next
[16:21:16.500]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:16.500]                 }
[16:21:16.500]                 if (length(args) > 0) 
[16:21:16.500]                   base::do.call(base::Sys.setenv, args = args)
[16:21:16.500]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:16.500]             }
[16:21:16.500]             else {
[16:21:16.500]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:16.500]             }
[16:21:16.500]             {
[16:21:16.500]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:16.500]                   0L) {
[16:21:16.500]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:16.500]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:16.500]                   base::options(opts)
[16:21:16.500]                 }
[16:21:16.500]                 {
[16:21:16.500]                   {
[16:21:16.500]                     base::options(mc.cores = ...future.mc.cores.old)
[16:21:16.500]                     NULL
[16:21:16.500]                   }
[16:21:16.500]                   options(future.plan = NULL)
[16:21:16.500]                   if (is.na(NA_character_)) 
[16:21:16.500]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:16.500]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:16.500]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:16.500]                     .init = FALSE)
[16:21:16.500]                 }
[16:21:16.500]             }
[16:21:16.500]         }
[16:21:16.500]     })
[16:21:16.500]     if (TRUE) {
[16:21:16.500]         base::sink(type = "output", split = FALSE)
[16:21:16.500]         if (TRUE) {
[16:21:16.500]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:16.500]         }
[16:21:16.500]         else {
[16:21:16.500]             ...future.result["stdout"] <- base::list(NULL)
[16:21:16.500]         }
[16:21:16.500]         base::close(...future.stdout)
[16:21:16.500]         ...future.stdout <- NULL
[16:21:16.500]     }
[16:21:16.500]     ...future.result$conditions <- ...future.conditions
[16:21:16.500]     ...future.result$finished <- base::Sys.time()
[16:21:16.500]     ...future.result
[16:21:16.500] }
[16:21:16.504] assign_globals() ...
[16:21:16.504] List of 1
[16:21:16.504]  $ ii: int 2
[16:21:16.504]  - attr(*, "where")=List of 1
[16:21:16.504]   ..$ ii:<environment: R_EmptyEnv> 
[16:21:16.504]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:21:16.504]  - attr(*, "resolved")= logi FALSE
[16:21:16.504]  - attr(*, "total_size")= num 56
[16:21:16.507] - copied ‘ii’ to environment
[16:21:16.507] assign_globals() ... done
[16:21:16.508] requestCore(): workers = 2
[16:21:16.510] MulticoreFuture started
 - Creating multicore future #3 ...
[16:21:16.511] plan(): Setting new future strategy stack:
[16:21:16.511] List of future strategies:
[16:21:16.511] 1. sequential:
[16:21:16.511]    - args: function (..., envir = parent.frame())
[16:21:16.511]    - tweaked: FALSE
[16:21:16.511]    - call: NULL
[16:21:16.512] plan(): nbrOfWorkers() = 1
[16:21:16.514] plan(): Setting new future strategy stack:
[16:21:16.514] List of future strategies:
[16:21:16.514] 1. multicore:
[16:21:16.514]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:21:16.514]    - tweaked: FALSE
[16:21:16.514]    - call: plan(multicore)
[16:21:16.516] getGlobalsAndPackages() ...
[16:21:16.516] Searching for globals...
[16:21:16.523] - globals found: [2] ‘{’, ‘ii’
[16:21:16.523] Searching for globals ... DONE
[16:21:16.523] Resolving globals: FALSE
[16:21:16.524] The total size of the 1 globals is 56 bytes (56 bytes)
[16:21:16.525] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[16:21:16.526] - globals: [1] ‘ii’
[16:21:16.526] 
[16:21:16.526] getGlobalsAndPackages() ... DONE
[16:21:16.527] plan(): nbrOfWorkers() = 2
[16:21:16.527] Packages needed by the future expression (n = 0): <none>
[16:21:16.528] Packages needed by future strategies (n = 0): <none>
[16:21:16.528] {
[16:21:16.528]     {
[16:21:16.528]         {
[16:21:16.528]             ...future.startTime <- base::Sys.time()
[16:21:16.528]             {
[16:21:16.528]                 {
[16:21:16.528]                   {
[16:21:16.528]                     {
[16:21:16.528]                       base::local({
[16:21:16.528]                         has_future <- base::requireNamespace("future", 
[16:21:16.528]                           quietly = TRUE)
[16:21:16.528]                         if (has_future) {
[16:21:16.528]                           ns <- base::getNamespace("future")
[16:21:16.528]                           version <- ns[[".package"]][["version"]]
[16:21:16.528]                           if (is.null(version)) 
[16:21:16.528]                             version <- utils::packageVersion("future")
[16:21:16.528]                         }
[16:21:16.528]                         else {
[16:21:16.528]                           version <- NULL
[16:21:16.528]                         }
[16:21:16.528]                         if (!has_future || version < "1.8.0") {
[16:21:16.528]                           info <- base::c(r_version = base::gsub("R version ", 
[16:21:16.528]                             "", base::R.version$version.string), 
[16:21:16.528]                             platform = base::sprintf("%s (%s-bit)", 
[16:21:16.528]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:16.528]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:16.528]                               "release", "version")], collapse = " "), 
[16:21:16.528]                             hostname = base::Sys.info()[["nodename"]])
[16:21:16.528]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:21:16.528]                             info)
[16:21:16.528]                           info <- base::paste(info, collapse = "; ")
[16:21:16.528]                           if (!has_future) {
[16:21:16.528]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:16.528]                               info)
[16:21:16.528]                           }
[16:21:16.528]                           else {
[16:21:16.528]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:16.528]                               info, version)
[16:21:16.528]                           }
[16:21:16.528]                           base::stop(msg)
[16:21:16.528]                         }
[16:21:16.528]                       })
[16:21:16.528]                     }
[16:21:16.528]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:21:16.528]                     base::options(mc.cores = 1L)
[16:21:16.528]                   }
[16:21:16.528]                   ...future.strategy.old <- future::plan("list")
[16:21:16.528]                   options(future.plan = NULL)
[16:21:16.528]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:16.528]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:16.528]                 }
[16:21:16.528]                 ...future.workdir <- getwd()
[16:21:16.528]             }
[16:21:16.528]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:16.528]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:16.528]         }
[16:21:16.528]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:16.528]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:16.528]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:16.528]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:16.528]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:16.528]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:16.528]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:16.528]             base::names(...future.oldOptions))
[16:21:16.528]     }
[16:21:16.528]     if (FALSE) {
[16:21:16.528]     }
[16:21:16.528]     else {
[16:21:16.528]         if (TRUE) {
[16:21:16.528]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:16.528]                 open = "w")
[16:21:16.528]         }
[16:21:16.528]         else {
[16:21:16.528]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:16.528]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:16.528]         }
[16:21:16.528]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:16.528]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:16.528]             base::sink(type = "output", split = FALSE)
[16:21:16.528]             base::close(...future.stdout)
[16:21:16.528]         }, add = TRUE)
[16:21:16.528]     }
[16:21:16.528]     ...future.frame <- base::sys.nframe()
[16:21:16.528]     ...future.conditions <- base::list()
[16:21:16.528]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:16.528]     if (FALSE) {
[16:21:16.528]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:16.528]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:16.528]     }
[16:21:16.528]     ...future.result <- base::tryCatch({
[16:21:16.528]         base::withCallingHandlers({
[16:21:16.528]             ...future.value <- base::withVisible(base::local({
[16:21:16.528]                 withCallingHandlers({
[16:21:16.528]                   {
[16:21:16.528]                     ii
[16:21:16.528]                   }
[16:21:16.528]                 }, immediateCondition = function(cond) {
[16:21:16.528]                   save_rds <- function (object, pathname, ...) 
[16:21:16.528]                   {
[16:21:16.528]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:21:16.528]                     if (file_test("-f", pathname_tmp)) {
[16:21:16.528]                       fi_tmp <- file.info(pathname_tmp)
[16:21:16.528]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:21:16.528]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:21:16.528]                         fi_tmp[["mtime"]])
[16:21:16.528]                     }
[16:21:16.528]                     tryCatch({
[16:21:16.528]                       saveRDS(object, file = pathname_tmp, ...)
[16:21:16.528]                     }, error = function(ex) {
[16:21:16.528]                       msg <- conditionMessage(ex)
[16:21:16.528]                       fi_tmp <- file.info(pathname_tmp)
[16:21:16.528]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:21:16.528]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:21:16.528]                         fi_tmp[["mtime"]], msg)
[16:21:16.528]                       ex$message <- msg
[16:21:16.528]                       stop(ex)
[16:21:16.528]                     })
[16:21:16.528]                     stopifnot(file_test("-f", pathname_tmp))
[16:21:16.528]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:21:16.528]                     if (!res || file_test("-f", pathname_tmp)) {
[16:21:16.528]                       fi_tmp <- file.info(pathname_tmp)
[16:21:16.528]                       fi <- file.info(pathname)
[16:21:16.528]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:21:16.528]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:21:16.528]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:21:16.528]                         fi[["size"]], fi[["mtime"]])
[16:21:16.528]                       stop(msg)
[16:21:16.528]                     }
[16:21:16.528]                     invisible(pathname)
[16:21:16.528]                   }
[16:21:16.528]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:21:16.528]                     rootPath = tempdir()) 
[16:21:16.528]                   {
[16:21:16.528]                     obj <- list(time = Sys.time(), condition = cond)
[16:21:16.528]                     file <- tempfile(pattern = class(cond)[1], 
[16:21:16.528]                       tmpdir = path, fileext = ".rds")
[16:21:16.528]                     save_rds(obj, file)
[16:21:16.528]                   }
[16:21:16.528]                   saveImmediateCondition(cond, path = "/tmp/RtmpCuMWhk/.future/immediateConditions")
[16:21:16.528]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.528]                   {
[16:21:16.528]                     inherits <- base::inherits
[16:21:16.528]                     invokeRestart <- base::invokeRestart
[16:21:16.528]                     is.null <- base::is.null
[16:21:16.528]                     muffled <- FALSE
[16:21:16.528]                     if (inherits(cond, "message")) {
[16:21:16.528]                       muffled <- grepl(pattern, "muffleMessage")
[16:21:16.528]                       if (muffled) 
[16:21:16.528]                         invokeRestart("muffleMessage")
[16:21:16.528]                     }
[16:21:16.528]                     else if (inherits(cond, "warning")) {
[16:21:16.528]                       muffled <- grepl(pattern, "muffleWarning")
[16:21:16.528]                       if (muffled) 
[16:21:16.528]                         invokeRestart("muffleWarning")
[16:21:16.528]                     }
[16:21:16.528]                     else if (inherits(cond, "condition")) {
[16:21:16.528]                       if (!is.null(pattern)) {
[16:21:16.528]                         computeRestarts <- base::computeRestarts
[16:21:16.528]                         grepl <- base::grepl
[16:21:16.528]                         restarts <- computeRestarts(cond)
[16:21:16.528]                         for (restart in restarts) {
[16:21:16.528]                           name <- restart$name
[16:21:16.528]                           if (is.null(name)) 
[16:21:16.528]                             next
[16:21:16.528]                           if (!grepl(pattern, name)) 
[16:21:16.528]                             next
[16:21:16.528]                           invokeRestart(restart)
[16:21:16.528]                           muffled <- TRUE
[16:21:16.528]                           break
[16:21:16.528]                         }
[16:21:16.528]                       }
[16:21:16.528]                     }
[16:21:16.528]                     invisible(muffled)
[16:21:16.528]                   }
[16:21:16.528]                   muffleCondition(cond)
[16:21:16.528]                 })
[16:21:16.528]             }))
[16:21:16.528]             future::FutureResult(value = ...future.value$value, 
[16:21:16.528]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:16.528]                   ...future.rng), globalenv = if (FALSE) 
[16:21:16.528]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:16.528]                     ...future.globalenv.names))
[16:21:16.528]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:16.528]         }, condition = base::local({
[16:21:16.528]             c <- base::c
[16:21:16.528]             inherits <- base::inherits
[16:21:16.528]             invokeRestart <- base::invokeRestart
[16:21:16.528]             length <- base::length
[16:21:16.528]             list <- base::list
[16:21:16.528]             seq.int <- base::seq.int
[16:21:16.528]             signalCondition <- base::signalCondition
[16:21:16.528]             sys.calls <- base::sys.calls
[16:21:16.528]             `[[` <- base::`[[`
[16:21:16.528]             `+` <- base::`+`
[16:21:16.528]             `<<-` <- base::`<<-`
[16:21:16.528]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:16.528]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:16.528]                   3L)]
[16:21:16.528]             }
[16:21:16.528]             function(cond) {
[16:21:16.528]                 is_error <- inherits(cond, "error")
[16:21:16.528]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:16.528]                   NULL)
[16:21:16.528]                 if (is_error) {
[16:21:16.528]                   sessionInformation <- function() {
[16:21:16.528]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:16.528]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:16.528]                       search = base::search(), system = base::Sys.info())
[16:21:16.528]                   }
[16:21:16.528]                   ...future.conditions[[length(...future.conditions) + 
[16:21:16.528]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:16.528]                     cond$call), session = sessionInformation(), 
[16:21:16.528]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:16.528]                   signalCondition(cond)
[16:21:16.528]                 }
[16:21:16.528]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:16.528]                 "immediateCondition"))) {
[16:21:16.528]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:16.528]                   ...future.conditions[[length(...future.conditions) + 
[16:21:16.528]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:16.528]                   if (TRUE && !signal) {
[16:21:16.528]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.528]                     {
[16:21:16.528]                       inherits <- base::inherits
[16:21:16.528]                       invokeRestart <- base::invokeRestart
[16:21:16.528]                       is.null <- base::is.null
[16:21:16.528]                       muffled <- FALSE
[16:21:16.528]                       if (inherits(cond, "message")) {
[16:21:16.528]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:16.528]                         if (muffled) 
[16:21:16.528]                           invokeRestart("muffleMessage")
[16:21:16.528]                       }
[16:21:16.528]                       else if (inherits(cond, "warning")) {
[16:21:16.528]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:16.528]                         if (muffled) 
[16:21:16.528]                           invokeRestart("muffleWarning")
[16:21:16.528]                       }
[16:21:16.528]                       else if (inherits(cond, "condition")) {
[16:21:16.528]                         if (!is.null(pattern)) {
[16:21:16.528]                           computeRestarts <- base::computeRestarts
[16:21:16.528]                           grepl <- base::grepl
[16:21:16.528]                           restarts <- computeRestarts(cond)
[16:21:16.528]                           for (restart in restarts) {
[16:21:16.528]                             name <- restart$name
[16:21:16.528]                             if (is.null(name)) 
[16:21:16.528]                               next
[16:21:16.528]                             if (!grepl(pattern, name)) 
[16:21:16.528]                               next
[16:21:16.528]                             invokeRestart(restart)
[16:21:16.528]                             muffled <- TRUE
[16:21:16.528]                             break
[16:21:16.528]                           }
[16:21:16.528]                         }
[16:21:16.528]                       }
[16:21:16.528]                       invisible(muffled)
[16:21:16.528]                     }
[16:21:16.528]                     muffleCondition(cond, pattern = "^muffle")
[16:21:16.528]                   }
[16:21:16.528]                 }
[16:21:16.528]                 else {
[16:21:16.528]                   if (TRUE) {
[16:21:16.528]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.528]                     {
[16:21:16.528]                       inherits <- base::inherits
[16:21:16.528]                       invokeRestart <- base::invokeRestart
[16:21:16.528]                       is.null <- base::is.null
[16:21:16.528]                       muffled <- FALSE
[16:21:16.528]                       if (inherits(cond, "message")) {
[16:21:16.528]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:16.528]                         if (muffled) 
[16:21:16.528]                           invokeRestart("muffleMessage")
[16:21:16.528]                       }
[16:21:16.528]                       else if (inherits(cond, "warning")) {
[16:21:16.528]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:16.528]                         if (muffled) 
[16:21:16.528]                           invokeRestart("muffleWarning")
[16:21:16.528]                       }
[16:21:16.528]                       else if (inherits(cond, "condition")) {
[16:21:16.528]                         if (!is.null(pattern)) {
[16:21:16.528]                           computeRestarts <- base::computeRestarts
[16:21:16.528]                           grepl <- base::grepl
[16:21:16.528]                           restarts <- computeRestarts(cond)
[16:21:16.528]                           for (restart in restarts) {
[16:21:16.528]                             name <- restart$name
[16:21:16.528]                             if (is.null(name)) 
[16:21:16.528]                               next
[16:21:16.528]                             if (!grepl(pattern, name)) 
[16:21:16.528]                               next
[16:21:16.528]                             invokeRestart(restart)
[16:21:16.528]                             muffled <- TRUE
[16:21:16.528]                             break
[16:21:16.528]                           }
[16:21:16.528]                         }
[16:21:16.528]                       }
[16:21:16.528]                       invisible(muffled)
[16:21:16.528]                     }
[16:21:16.528]                     muffleCondition(cond, pattern = "^muffle")
[16:21:16.528]                   }
[16:21:16.528]                 }
[16:21:16.528]             }
[16:21:16.528]         }))
[16:21:16.528]     }, error = function(ex) {
[16:21:16.528]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:16.528]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:16.528]                 ...future.rng), started = ...future.startTime, 
[16:21:16.528]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:16.528]             version = "1.8"), class = "FutureResult")
[16:21:16.528]     }, finally = {
[16:21:16.528]         if (!identical(...future.workdir, getwd())) 
[16:21:16.528]             setwd(...future.workdir)
[16:21:16.528]         {
[16:21:16.528]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:16.528]                 ...future.oldOptions$nwarnings <- NULL
[16:21:16.528]             }
[16:21:16.528]             base::options(...future.oldOptions)
[16:21:16.528]             if (.Platform$OS.type == "windows") {
[16:21:16.528]                 old_names <- names(...future.oldEnvVars)
[16:21:16.528]                 envs <- base::Sys.getenv()
[16:21:16.528]                 names <- names(envs)
[16:21:16.528]                 common <- intersect(names, old_names)
[16:21:16.528]                 added <- setdiff(names, old_names)
[16:21:16.528]                 removed <- setdiff(old_names, names)
[16:21:16.528]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:16.528]                   envs[common]]
[16:21:16.528]                 NAMES <- toupper(changed)
[16:21:16.528]                 args <- list()
[16:21:16.528]                 for (kk in seq_along(NAMES)) {
[16:21:16.528]                   name <- changed[[kk]]
[16:21:16.528]                   NAME <- NAMES[[kk]]
[16:21:16.528]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.528]                     next
[16:21:16.528]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:16.528]                 }
[16:21:16.528]                 NAMES <- toupper(added)
[16:21:16.528]                 for (kk in seq_along(NAMES)) {
[16:21:16.528]                   name <- added[[kk]]
[16:21:16.528]                   NAME <- NAMES[[kk]]
[16:21:16.528]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.528]                     next
[16:21:16.528]                   args[[name]] <- ""
[16:21:16.528]                 }
[16:21:16.528]                 NAMES <- toupper(removed)
[16:21:16.528]                 for (kk in seq_along(NAMES)) {
[16:21:16.528]                   name <- removed[[kk]]
[16:21:16.528]                   NAME <- NAMES[[kk]]
[16:21:16.528]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.528]                     next
[16:21:16.528]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:16.528]                 }
[16:21:16.528]                 if (length(args) > 0) 
[16:21:16.528]                   base::do.call(base::Sys.setenv, args = args)
[16:21:16.528]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:16.528]             }
[16:21:16.528]             else {
[16:21:16.528]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:16.528]             }
[16:21:16.528]             {
[16:21:16.528]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:16.528]                   0L) {
[16:21:16.528]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:16.528]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:16.528]                   base::options(opts)
[16:21:16.528]                 }
[16:21:16.528]                 {
[16:21:16.528]                   {
[16:21:16.528]                     base::options(mc.cores = ...future.mc.cores.old)
[16:21:16.528]                     NULL
[16:21:16.528]                   }
[16:21:16.528]                   options(future.plan = NULL)
[16:21:16.528]                   if (is.na(NA_character_)) 
[16:21:16.528]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:16.528]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:16.528]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:16.528]                     .init = FALSE)
[16:21:16.528]                 }
[16:21:16.528]             }
[16:21:16.528]         }
[16:21:16.528]     })
[16:21:16.528]     if (TRUE) {
[16:21:16.528]         base::sink(type = "output", split = FALSE)
[16:21:16.528]         if (TRUE) {
[16:21:16.528]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:16.528]         }
[16:21:16.528]         else {
[16:21:16.528]             ...future.result["stdout"] <- base::list(NULL)
[16:21:16.528]         }
[16:21:16.528]         base::close(...future.stdout)
[16:21:16.528]         ...future.stdout <- NULL
[16:21:16.528]     }
[16:21:16.528]     ...future.result$conditions <- ...future.conditions
[16:21:16.528]     ...future.result$finished <- base::Sys.time()
[16:21:16.528]     ...future.result
[16:21:16.528] }
[16:21:16.531] assign_globals() ...
[16:21:16.531] List of 1
[16:21:16.531]  $ ii: int 3
[16:21:16.531]  - attr(*, "where")=List of 1
[16:21:16.531]   ..$ ii:<environment: R_EmptyEnv> 
[16:21:16.531]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:21:16.531]  - attr(*, "resolved")= logi FALSE
[16:21:16.531]  - attr(*, "total_size")= num 56
[16:21:16.535] - copied ‘ii’ to environment
[16:21:16.535] assign_globals() ... done
[16:21:16.535] requestCore(): workers = 2
[16:21:16.536] Poll #1 (0): usedCores() = 2, workers = 2
[16:21:16.546] result() for MulticoreFuture ...
[16:21:16.547] result() for MulticoreFuture ...
[16:21:16.547] result() for MulticoreFuture ... done
[16:21:16.547] result() for MulticoreFuture ... done
[16:21:16.547] result() for MulticoreFuture ...
[16:21:16.548] result() for MulticoreFuture ... done
[16:21:16.550] MulticoreFuture started
 - Creating multicore future #4 ...
[16:21:16.551] plan(): Setting new future strategy stack:
[16:21:16.552] List of future strategies:
[16:21:16.552] 1. sequential:
[16:21:16.552]    - args: function (..., envir = parent.frame())
[16:21:16.552]    - tweaked: FALSE
[16:21:16.552]    - call: NULL
[16:21:16.553] plan(): nbrOfWorkers() = 1
[16:21:16.555] plan(): Setting new future strategy stack:
[16:21:16.555] List of future strategies:
[16:21:16.555] 1. multicore:
[16:21:16.555]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:21:16.555]    - tweaked: FALSE
[16:21:16.555]    - call: plan(multicore)
[16:21:16.557] getGlobalsAndPackages() ...
[16:21:16.558] Searching for globals...
[16:21:16.559] - globals found: [2] ‘{’, ‘ii’
[16:21:16.560] Searching for globals ... DONE
[16:21:16.560] Resolving globals: FALSE
[16:21:16.561] The total size of the 1 globals is 56 bytes (56 bytes)
[16:21:16.561] plan(): nbrOfWorkers() = 2
[16:21:16.562] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[16:21:16.562] - globals: [1] ‘ii’
[16:21:16.562] 
[16:21:16.562] getGlobalsAndPackages() ... DONE
[16:21:16.563] Packages needed by the future expression (n = 0): <none>
[16:21:16.563] Packages needed by future strategies (n = 0): <none>
[16:21:16.564] {
[16:21:16.564]     {
[16:21:16.564]         {
[16:21:16.564]             ...future.startTime <- base::Sys.time()
[16:21:16.564]             {
[16:21:16.564]                 {
[16:21:16.564]                   {
[16:21:16.564]                     {
[16:21:16.564]                       base::local({
[16:21:16.564]                         has_future <- base::requireNamespace("future", 
[16:21:16.564]                           quietly = TRUE)
[16:21:16.564]                         if (has_future) {
[16:21:16.564]                           ns <- base::getNamespace("future")
[16:21:16.564]                           version <- ns[[".package"]][["version"]]
[16:21:16.564]                           if (is.null(version)) 
[16:21:16.564]                             version <- utils::packageVersion("future")
[16:21:16.564]                         }
[16:21:16.564]                         else {
[16:21:16.564]                           version <- NULL
[16:21:16.564]                         }
[16:21:16.564]                         if (!has_future || version < "1.8.0") {
[16:21:16.564]                           info <- base::c(r_version = base::gsub("R version ", 
[16:21:16.564]                             "", base::R.version$version.string), 
[16:21:16.564]                             platform = base::sprintf("%s (%s-bit)", 
[16:21:16.564]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:16.564]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:16.564]                               "release", "version")], collapse = " "), 
[16:21:16.564]                             hostname = base::Sys.info()[["nodename"]])
[16:21:16.564]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:21:16.564]                             info)
[16:21:16.564]                           info <- base::paste(info, collapse = "; ")
[16:21:16.564]                           if (!has_future) {
[16:21:16.564]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:16.564]                               info)
[16:21:16.564]                           }
[16:21:16.564]                           else {
[16:21:16.564]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:16.564]                               info, version)
[16:21:16.564]                           }
[16:21:16.564]                           base::stop(msg)
[16:21:16.564]                         }
[16:21:16.564]                       })
[16:21:16.564]                     }
[16:21:16.564]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:21:16.564]                     base::options(mc.cores = 1L)
[16:21:16.564]                   }
[16:21:16.564]                   ...future.strategy.old <- future::plan("list")
[16:21:16.564]                   options(future.plan = NULL)
[16:21:16.564]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:16.564]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:16.564]                 }
[16:21:16.564]                 ...future.workdir <- getwd()
[16:21:16.564]             }
[16:21:16.564]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:16.564]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:16.564]         }
[16:21:16.564]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:16.564]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:16.564]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:16.564]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:16.564]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:16.564]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:16.564]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:16.564]             base::names(...future.oldOptions))
[16:21:16.564]     }
[16:21:16.564]     if (FALSE) {
[16:21:16.564]     }
[16:21:16.564]     else {
[16:21:16.564]         if (TRUE) {
[16:21:16.564]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:16.564]                 open = "w")
[16:21:16.564]         }
[16:21:16.564]         else {
[16:21:16.564]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:16.564]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:16.564]         }
[16:21:16.564]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:16.564]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:16.564]             base::sink(type = "output", split = FALSE)
[16:21:16.564]             base::close(...future.stdout)
[16:21:16.564]         }, add = TRUE)
[16:21:16.564]     }
[16:21:16.564]     ...future.frame <- base::sys.nframe()
[16:21:16.564]     ...future.conditions <- base::list()
[16:21:16.564]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:16.564]     if (FALSE) {
[16:21:16.564]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:16.564]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:16.564]     }
[16:21:16.564]     ...future.result <- base::tryCatch({
[16:21:16.564]         base::withCallingHandlers({
[16:21:16.564]             ...future.value <- base::withVisible(base::local({
[16:21:16.564]                 withCallingHandlers({
[16:21:16.564]                   {
[16:21:16.564]                     ii
[16:21:16.564]                   }
[16:21:16.564]                 }, immediateCondition = function(cond) {
[16:21:16.564]                   save_rds <- function (object, pathname, ...) 
[16:21:16.564]                   {
[16:21:16.564]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:21:16.564]                     if (file_test("-f", pathname_tmp)) {
[16:21:16.564]                       fi_tmp <- file.info(pathname_tmp)
[16:21:16.564]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:21:16.564]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:21:16.564]                         fi_tmp[["mtime"]])
[16:21:16.564]                     }
[16:21:16.564]                     tryCatch({
[16:21:16.564]                       saveRDS(object, file = pathname_tmp, ...)
[16:21:16.564]                     }, error = function(ex) {
[16:21:16.564]                       msg <- conditionMessage(ex)
[16:21:16.564]                       fi_tmp <- file.info(pathname_tmp)
[16:21:16.564]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:21:16.564]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:21:16.564]                         fi_tmp[["mtime"]], msg)
[16:21:16.564]                       ex$message <- msg
[16:21:16.564]                       stop(ex)
[16:21:16.564]                     })
[16:21:16.564]                     stopifnot(file_test("-f", pathname_tmp))
[16:21:16.564]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:21:16.564]                     if (!res || file_test("-f", pathname_tmp)) {
[16:21:16.564]                       fi_tmp <- file.info(pathname_tmp)
[16:21:16.564]                       fi <- file.info(pathname)
[16:21:16.564]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:21:16.564]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:21:16.564]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:21:16.564]                         fi[["size"]], fi[["mtime"]])
[16:21:16.564]                       stop(msg)
[16:21:16.564]                     }
[16:21:16.564]                     invisible(pathname)
[16:21:16.564]                   }
[16:21:16.564]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:21:16.564]                     rootPath = tempdir()) 
[16:21:16.564]                   {
[16:21:16.564]                     obj <- list(time = Sys.time(), condition = cond)
[16:21:16.564]                     file <- tempfile(pattern = class(cond)[1], 
[16:21:16.564]                       tmpdir = path, fileext = ".rds")
[16:21:16.564]                     save_rds(obj, file)
[16:21:16.564]                   }
[16:21:16.564]                   saveImmediateCondition(cond, path = "/tmp/RtmpCuMWhk/.future/immediateConditions")
[16:21:16.564]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.564]                   {
[16:21:16.564]                     inherits <- base::inherits
[16:21:16.564]                     invokeRestart <- base::invokeRestart
[16:21:16.564]                     is.null <- base::is.null
[16:21:16.564]                     muffled <- FALSE
[16:21:16.564]                     if (inherits(cond, "message")) {
[16:21:16.564]                       muffled <- grepl(pattern, "muffleMessage")
[16:21:16.564]                       if (muffled) 
[16:21:16.564]                         invokeRestart("muffleMessage")
[16:21:16.564]                     }
[16:21:16.564]                     else if (inherits(cond, "warning")) {
[16:21:16.564]                       muffled <- grepl(pattern, "muffleWarning")
[16:21:16.564]                       if (muffled) 
[16:21:16.564]                         invokeRestart("muffleWarning")
[16:21:16.564]                     }
[16:21:16.564]                     else if (inherits(cond, "condition")) {
[16:21:16.564]                       if (!is.null(pattern)) {
[16:21:16.564]                         computeRestarts <- base::computeRestarts
[16:21:16.564]                         grepl <- base::grepl
[16:21:16.564]                         restarts <- computeRestarts(cond)
[16:21:16.564]                         for (restart in restarts) {
[16:21:16.564]                           name <- restart$name
[16:21:16.564]                           if (is.null(name)) 
[16:21:16.564]                             next
[16:21:16.564]                           if (!grepl(pattern, name)) 
[16:21:16.564]                             next
[16:21:16.564]                           invokeRestart(restart)
[16:21:16.564]                           muffled <- TRUE
[16:21:16.564]                           break
[16:21:16.564]                         }
[16:21:16.564]                       }
[16:21:16.564]                     }
[16:21:16.564]                     invisible(muffled)
[16:21:16.564]                   }
[16:21:16.564]                   muffleCondition(cond)
[16:21:16.564]                 })
[16:21:16.564]             }))
[16:21:16.564]             future::FutureResult(value = ...future.value$value, 
[16:21:16.564]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:16.564]                   ...future.rng), globalenv = if (FALSE) 
[16:21:16.564]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:16.564]                     ...future.globalenv.names))
[16:21:16.564]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:16.564]         }, condition = base::local({
[16:21:16.564]             c <- base::c
[16:21:16.564]             inherits <- base::inherits
[16:21:16.564]             invokeRestart <- base::invokeRestart
[16:21:16.564]             length <- base::length
[16:21:16.564]             list <- base::list
[16:21:16.564]             seq.int <- base::seq.int
[16:21:16.564]             signalCondition <- base::signalCondition
[16:21:16.564]             sys.calls <- base::sys.calls
[16:21:16.564]             `[[` <- base::`[[`
[16:21:16.564]             `+` <- base::`+`
[16:21:16.564]             `<<-` <- base::`<<-`
[16:21:16.564]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:16.564]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:16.564]                   3L)]
[16:21:16.564]             }
[16:21:16.564]             function(cond) {
[16:21:16.564]                 is_error <- inherits(cond, "error")
[16:21:16.564]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:16.564]                   NULL)
[16:21:16.564]                 if (is_error) {
[16:21:16.564]                   sessionInformation <- function() {
[16:21:16.564]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:16.564]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:16.564]                       search = base::search(), system = base::Sys.info())
[16:21:16.564]                   }
[16:21:16.564]                   ...future.conditions[[length(...future.conditions) + 
[16:21:16.564]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:16.564]                     cond$call), session = sessionInformation(), 
[16:21:16.564]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:16.564]                   signalCondition(cond)
[16:21:16.564]                 }
[16:21:16.564]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:16.564]                 "immediateCondition"))) {
[16:21:16.564]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:16.564]                   ...future.conditions[[length(...future.conditions) + 
[16:21:16.564]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:16.564]                   if (TRUE && !signal) {
[16:21:16.564]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.564]                     {
[16:21:16.564]                       inherits <- base::inherits
[16:21:16.564]                       invokeRestart <- base::invokeRestart
[16:21:16.564]                       is.null <- base::is.null
[16:21:16.564]                       muffled <- FALSE
[16:21:16.564]                       if (inherits(cond, "message")) {
[16:21:16.564]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:16.564]                         if (muffled) 
[16:21:16.564]                           invokeRestart("muffleMessage")
[16:21:16.564]                       }
[16:21:16.564]                       else if (inherits(cond, "warning")) {
[16:21:16.564]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:16.564]                         if (muffled) 
[16:21:16.564]                           invokeRestart("muffleWarning")
[16:21:16.564]                       }
[16:21:16.564]                       else if (inherits(cond, "condition")) {
[16:21:16.564]                         if (!is.null(pattern)) {
[16:21:16.564]                           computeRestarts <- base::computeRestarts
[16:21:16.564]                           grepl <- base::grepl
[16:21:16.564]                           restarts <- computeRestarts(cond)
[16:21:16.564]                           for (restart in restarts) {
[16:21:16.564]                             name <- restart$name
[16:21:16.564]                             if (is.null(name)) 
[16:21:16.564]                               next
[16:21:16.564]                             if (!grepl(pattern, name)) 
[16:21:16.564]                               next
[16:21:16.564]                             invokeRestart(restart)
[16:21:16.564]                             muffled <- TRUE
[16:21:16.564]                             break
[16:21:16.564]                           }
[16:21:16.564]                         }
[16:21:16.564]                       }
[16:21:16.564]                       invisible(muffled)
[16:21:16.564]                     }
[16:21:16.564]                     muffleCondition(cond, pattern = "^muffle")
[16:21:16.564]                   }
[16:21:16.564]                 }
[16:21:16.564]                 else {
[16:21:16.564]                   if (TRUE) {
[16:21:16.564]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.564]                     {
[16:21:16.564]                       inherits <- base::inherits
[16:21:16.564]                       invokeRestart <- base::invokeRestart
[16:21:16.564]                       is.null <- base::is.null
[16:21:16.564]                       muffled <- FALSE
[16:21:16.564]                       if (inherits(cond, "message")) {
[16:21:16.564]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:16.564]                         if (muffled) 
[16:21:16.564]                           invokeRestart("muffleMessage")
[16:21:16.564]                       }
[16:21:16.564]                       else if (inherits(cond, "warning")) {
[16:21:16.564]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:16.564]                         if (muffled) 
[16:21:16.564]                           invokeRestart("muffleWarning")
[16:21:16.564]                       }
[16:21:16.564]                       else if (inherits(cond, "condition")) {
[16:21:16.564]                         if (!is.null(pattern)) {
[16:21:16.564]                           computeRestarts <- base::computeRestarts
[16:21:16.564]                           grepl <- base::grepl
[16:21:16.564]                           restarts <- computeRestarts(cond)
[16:21:16.564]                           for (restart in restarts) {
[16:21:16.564]                             name <- restart$name
[16:21:16.564]                             if (is.null(name)) 
[16:21:16.564]                               next
[16:21:16.564]                             if (!grepl(pattern, name)) 
[16:21:16.564]                               next
[16:21:16.564]                             invokeRestart(restart)
[16:21:16.564]                             muffled <- TRUE
[16:21:16.564]                             break
[16:21:16.564]                           }
[16:21:16.564]                         }
[16:21:16.564]                       }
[16:21:16.564]                       invisible(muffled)
[16:21:16.564]                     }
[16:21:16.564]                     muffleCondition(cond, pattern = "^muffle")
[16:21:16.564]                   }
[16:21:16.564]                 }
[16:21:16.564]             }
[16:21:16.564]         }))
[16:21:16.564]     }, error = function(ex) {
[16:21:16.564]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:16.564]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:16.564]                 ...future.rng), started = ...future.startTime, 
[16:21:16.564]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:16.564]             version = "1.8"), class = "FutureResult")
[16:21:16.564]     }, finally = {
[16:21:16.564]         if (!identical(...future.workdir, getwd())) 
[16:21:16.564]             setwd(...future.workdir)
[16:21:16.564]         {
[16:21:16.564]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:16.564]                 ...future.oldOptions$nwarnings <- NULL
[16:21:16.564]             }
[16:21:16.564]             base::options(...future.oldOptions)
[16:21:16.564]             if (.Platform$OS.type == "windows") {
[16:21:16.564]                 old_names <- names(...future.oldEnvVars)
[16:21:16.564]                 envs <- base::Sys.getenv()
[16:21:16.564]                 names <- names(envs)
[16:21:16.564]                 common <- intersect(names, old_names)
[16:21:16.564]                 added <- setdiff(names, old_names)
[16:21:16.564]                 removed <- setdiff(old_names, names)
[16:21:16.564]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:16.564]                   envs[common]]
[16:21:16.564]                 NAMES <- toupper(changed)
[16:21:16.564]                 args <- list()
[16:21:16.564]                 for (kk in seq_along(NAMES)) {
[16:21:16.564]                   name <- changed[[kk]]
[16:21:16.564]                   NAME <- NAMES[[kk]]
[16:21:16.564]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.564]                     next
[16:21:16.564]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:16.564]                 }
[16:21:16.564]                 NAMES <- toupper(added)
[16:21:16.564]                 for (kk in seq_along(NAMES)) {
[16:21:16.564]                   name <- added[[kk]]
[16:21:16.564]                   NAME <- NAMES[[kk]]
[16:21:16.564]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.564]                     next
[16:21:16.564]                   args[[name]] <- ""
[16:21:16.564]                 }
[16:21:16.564]                 NAMES <- toupper(removed)
[16:21:16.564]                 for (kk in seq_along(NAMES)) {
[16:21:16.564]                   name <- removed[[kk]]
[16:21:16.564]                   NAME <- NAMES[[kk]]
[16:21:16.564]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.564]                     next
[16:21:16.564]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:16.564]                 }
[16:21:16.564]                 if (length(args) > 0) 
[16:21:16.564]                   base::do.call(base::Sys.setenv, args = args)
[16:21:16.564]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:16.564]             }
[16:21:16.564]             else {
[16:21:16.564]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:16.564]             }
[16:21:16.564]             {
[16:21:16.564]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:16.564]                   0L) {
[16:21:16.564]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:16.564]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:16.564]                   base::options(opts)
[16:21:16.564]                 }
[16:21:16.564]                 {
[16:21:16.564]                   {
[16:21:16.564]                     base::options(mc.cores = ...future.mc.cores.old)
[16:21:16.564]                     NULL
[16:21:16.564]                   }
[16:21:16.564]                   options(future.plan = NULL)
[16:21:16.564]                   if (is.na(NA_character_)) 
[16:21:16.564]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:16.564]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:16.564]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:16.564]                     .init = FALSE)
[16:21:16.564]                 }
[16:21:16.564]             }
[16:21:16.564]         }
[16:21:16.564]     })
[16:21:16.564]     if (TRUE) {
[16:21:16.564]         base::sink(type = "output", split = FALSE)
[16:21:16.564]         if (TRUE) {
[16:21:16.564]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:16.564]         }
[16:21:16.564]         else {
[16:21:16.564]             ...future.result["stdout"] <- base::list(NULL)
[16:21:16.564]         }
[16:21:16.564]         base::close(...future.stdout)
[16:21:16.564]         ...future.stdout <- NULL
[16:21:16.564]     }
[16:21:16.564]     ...future.result$conditions <- ...future.conditions
[16:21:16.564]     ...future.result$finished <- base::Sys.time()
[16:21:16.564]     ...future.result
[16:21:16.564] }
[16:21:16.567] assign_globals() ...
[16:21:16.567] List of 1
[16:21:16.567]  $ ii: int 4
[16:21:16.567]  - attr(*, "where")=List of 1
[16:21:16.567]   ..$ ii:<environment: R_EmptyEnv> 
[16:21:16.567]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:21:16.567]  - attr(*, "resolved")= logi FALSE
[16:21:16.567]  - attr(*, "total_size")= num 56
[16:21:16.571] - copied ‘ii’ to environment
[16:21:16.571] assign_globals() ... done
[16:21:16.571] requestCore(): workers = 2
[16:21:16.571] Poll #1 (0): usedCores() = 2, workers = 2
[16:21:16.582] result() for MulticoreFuture ...
[16:21:16.583] result() for MulticoreFuture ...
[16:21:16.583] result() for MulticoreFuture ... done
[16:21:16.583] result() for MulticoreFuture ... done
[16:21:16.584] result() for MulticoreFuture ...
[16:21:16.584] result() for MulticoreFuture ... done
[16:21:16.587] MulticoreFuture started
 - Resolving 4 multicore futures
[16:21:16.587] result() for MulticoreFuture ...
[16:21:16.587] plan(): Setting new future strategy stack:
[16:21:16.588] result() for MulticoreFuture ... done
[16:21:16.588] result() for MulticoreFuture ...
[16:21:16.588] result() for MulticoreFuture ... done
[16:21:16.588] result() for MulticoreFuture ...
[16:21:16.588] result() for MulticoreFuture ... done
[16:21:16.589] result() for MulticoreFuture ...
[16:21:16.588] List of future strategies:
[16:21:16.588] 1. sequential:
[16:21:16.588]    - args: function (..., envir = parent.frame())
[16:21:16.588]    - tweaked: FALSE
[16:21:16.588]    - call: NULL
[16:21:16.589] result() for MulticoreFuture ... done
[16:21:16.589] plan(): nbrOfWorkers() = 1
[16:21:16.589] result() for MulticoreFuture ...
[16:21:16.590] result() for MulticoreFuture ...
[16:21:16.590] result() for MulticoreFuture ... done
[16:21:16.590] result() for MulticoreFuture ... done
[16:21:16.591] result() for MulticoreFuture ...
[16:21:16.591] plan(): Setting new future strategy stack:
[16:21:16.591] result() for MulticoreFuture ... done
[16:21:16.591] result() for MulticoreFuture ...
[16:21:16.591] List of future strategies:
[16:21:16.591] 1. multicore:
[16:21:16.591]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:21:16.591]    - tweaked: FALSE
[16:21:16.591]    - call: plan(multicore)
[16:21:16.596] plan(): nbrOfWorkers() = 2
[16:21:16.596] result() for MulticoreFuture ...
[16:21:16.597] result() for MulticoreFuture ... done
[16:21:16.597] result() for MulticoreFuture ... done
[16:21:16.597] result() for MulticoreFuture ...
[16:21:16.597] result() for MulticoreFuture ... done
*** multicore(..., globals = TRUE) and errors
[16:21:16.601] getGlobalsAndPackages() ...
[16:21:16.601] Searching for globals...
[16:21:16.603] - globals found: [2] ‘{’, ‘stop’
[16:21:16.606] Searching for globals ... DONE
[16:21:16.606] Resolving globals: FALSE
[16:21:16.606] 
[16:21:16.606] 
[16:21:16.607] getGlobalsAndPackages() ... DONE
[16:21:16.607] Packages needed by the future expression (n = 0): <none>
[16:21:16.607] Packages needed by future strategies (n = 0): <none>
[16:21:16.608] {
[16:21:16.608]     {
[16:21:16.608]         {
[16:21:16.608]             ...future.startTime <- base::Sys.time()
[16:21:16.608]             {
[16:21:16.608]                 {
[16:21:16.608]                   {
[16:21:16.608]                     {
[16:21:16.608]                       base::local({
[16:21:16.608]                         has_future <- base::requireNamespace("future", 
[16:21:16.608]                           quietly = TRUE)
[16:21:16.608]                         if (has_future) {
[16:21:16.608]                           ns <- base::getNamespace("future")
[16:21:16.608]                           version <- ns[[".package"]][["version"]]
[16:21:16.608]                           if (is.null(version)) 
[16:21:16.608]                             version <- utils::packageVersion("future")
[16:21:16.608]                         }
[16:21:16.608]                         else {
[16:21:16.608]                           version <- NULL
[16:21:16.608]                         }
[16:21:16.608]                         if (!has_future || version < "1.8.0") {
[16:21:16.608]                           info <- base::c(r_version = base::gsub("R version ", 
[16:21:16.608]                             "", base::R.version$version.string), 
[16:21:16.608]                             platform = base::sprintf("%s (%s-bit)", 
[16:21:16.608]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:16.608]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:16.608]                               "release", "version")], collapse = " "), 
[16:21:16.608]                             hostname = base::Sys.info()[["nodename"]])
[16:21:16.608]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:21:16.608]                             info)
[16:21:16.608]                           info <- base::paste(info, collapse = "; ")
[16:21:16.608]                           if (!has_future) {
[16:21:16.608]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:16.608]                               info)
[16:21:16.608]                           }
[16:21:16.608]                           else {
[16:21:16.608]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:16.608]                               info, version)
[16:21:16.608]                           }
[16:21:16.608]                           base::stop(msg)
[16:21:16.608]                         }
[16:21:16.608]                       })
[16:21:16.608]                     }
[16:21:16.608]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:21:16.608]                     base::options(mc.cores = 1L)
[16:21:16.608]                   }
[16:21:16.608]                   ...future.strategy.old <- future::plan("list")
[16:21:16.608]                   options(future.plan = NULL)
[16:21:16.608]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:16.608]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:16.608]                 }
[16:21:16.608]                 ...future.workdir <- getwd()
[16:21:16.608]             }
[16:21:16.608]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:16.608]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:16.608]         }
[16:21:16.608]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:16.608]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:16.608]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:16.608]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:16.608]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:16.608]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:16.608]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:16.608]             base::names(...future.oldOptions))
[16:21:16.608]     }
[16:21:16.608]     if (FALSE) {
[16:21:16.608]     }
[16:21:16.608]     else {
[16:21:16.608]         if (TRUE) {
[16:21:16.608]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:16.608]                 open = "w")
[16:21:16.608]         }
[16:21:16.608]         else {
[16:21:16.608]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:16.608]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:16.608]         }
[16:21:16.608]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:16.608]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:16.608]             base::sink(type = "output", split = FALSE)
[16:21:16.608]             base::close(...future.stdout)
[16:21:16.608]         }, add = TRUE)
[16:21:16.608]     }
[16:21:16.608]     ...future.frame <- base::sys.nframe()
[16:21:16.608]     ...future.conditions <- base::list()
[16:21:16.608]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:16.608]     if (FALSE) {
[16:21:16.608]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:16.608]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:16.608]     }
[16:21:16.608]     ...future.result <- base::tryCatch({
[16:21:16.608]         base::withCallingHandlers({
[16:21:16.608]             ...future.value <- base::withVisible(base::local({
[16:21:16.608]                 withCallingHandlers({
[16:21:16.608]                   {
[16:21:16.608]                     stop("Whoops!")
[16:21:16.608]                     1
[16:21:16.608]                   }
[16:21:16.608]                 }, immediateCondition = function(cond) {
[16:21:16.608]                   save_rds <- function (object, pathname, ...) 
[16:21:16.608]                   {
[16:21:16.608]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:21:16.608]                     if (file_test("-f", pathname_tmp)) {
[16:21:16.608]                       fi_tmp <- file.info(pathname_tmp)
[16:21:16.608]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:21:16.608]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:21:16.608]                         fi_tmp[["mtime"]])
[16:21:16.608]                     }
[16:21:16.608]                     tryCatch({
[16:21:16.608]                       saveRDS(object, file = pathname_tmp, ...)
[16:21:16.608]                     }, error = function(ex) {
[16:21:16.608]                       msg <- conditionMessage(ex)
[16:21:16.608]                       fi_tmp <- file.info(pathname_tmp)
[16:21:16.608]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:21:16.608]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:21:16.608]                         fi_tmp[["mtime"]], msg)
[16:21:16.608]                       ex$message <- msg
[16:21:16.608]                       stop(ex)
[16:21:16.608]                     })
[16:21:16.608]                     stopifnot(file_test("-f", pathname_tmp))
[16:21:16.608]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:21:16.608]                     if (!res || file_test("-f", pathname_tmp)) {
[16:21:16.608]                       fi_tmp <- file.info(pathname_tmp)
[16:21:16.608]                       fi <- file.info(pathname)
[16:21:16.608]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:21:16.608]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:21:16.608]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:21:16.608]                         fi[["size"]], fi[["mtime"]])
[16:21:16.608]                       stop(msg)
[16:21:16.608]                     }
[16:21:16.608]                     invisible(pathname)
[16:21:16.608]                   }
[16:21:16.608]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:21:16.608]                     rootPath = tempdir()) 
[16:21:16.608]                   {
[16:21:16.608]                     obj <- list(time = Sys.time(), condition = cond)
[16:21:16.608]                     file <- tempfile(pattern = class(cond)[1], 
[16:21:16.608]                       tmpdir = path, fileext = ".rds")
[16:21:16.608]                     save_rds(obj, file)
[16:21:16.608]                   }
[16:21:16.608]                   saveImmediateCondition(cond, path = "/tmp/RtmpCuMWhk/.future/immediateConditions")
[16:21:16.608]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.608]                   {
[16:21:16.608]                     inherits <- base::inherits
[16:21:16.608]                     invokeRestart <- base::invokeRestart
[16:21:16.608]                     is.null <- base::is.null
[16:21:16.608]                     muffled <- FALSE
[16:21:16.608]                     if (inherits(cond, "message")) {
[16:21:16.608]                       muffled <- grepl(pattern, "muffleMessage")
[16:21:16.608]                       if (muffled) 
[16:21:16.608]                         invokeRestart("muffleMessage")
[16:21:16.608]                     }
[16:21:16.608]                     else if (inherits(cond, "warning")) {
[16:21:16.608]                       muffled <- grepl(pattern, "muffleWarning")
[16:21:16.608]                       if (muffled) 
[16:21:16.608]                         invokeRestart("muffleWarning")
[16:21:16.608]                     }
[16:21:16.608]                     else if (inherits(cond, "condition")) {
[16:21:16.608]                       if (!is.null(pattern)) {
[16:21:16.608]                         computeRestarts <- base::computeRestarts
[16:21:16.608]                         grepl <- base::grepl
[16:21:16.608]                         restarts <- computeRestarts(cond)
[16:21:16.608]                         for (restart in restarts) {
[16:21:16.608]                           name <- restart$name
[16:21:16.608]                           if (is.null(name)) 
[16:21:16.608]                             next
[16:21:16.608]                           if (!grepl(pattern, name)) 
[16:21:16.608]                             next
[16:21:16.608]                           invokeRestart(restart)
[16:21:16.608]                           muffled <- TRUE
[16:21:16.608]                           break
[16:21:16.608]                         }
[16:21:16.608]                       }
[16:21:16.608]                     }
[16:21:16.608]                     invisible(muffled)
[16:21:16.608]                   }
[16:21:16.608]                   muffleCondition(cond)
[16:21:16.608]                 })
[16:21:16.608]             }))
[16:21:16.608]             future::FutureResult(value = ...future.value$value, 
[16:21:16.608]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:16.608]                   ...future.rng), globalenv = if (FALSE) 
[16:21:16.608]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:16.608]                     ...future.globalenv.names))
[16:21:16.608]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:16.608]         }, condition = base::local({
[16:21:16.608]             c <- base::c
[16:21:16.608]             inherits <- base::inherits
[16:21:16.608]             invokeRestart <- base::invokeRestart
[16:21:16.608]             length <- base::length
[16:21:16.608]             list <- base::list
[16:21:16.608]             seq.int <- base::seq.int
[16:21:16.608]             signalCondition <- base::signalCondition
[16:21:16.608]             sys.calls <- base::sys.calls
[16:21:16.608]             `[[` <- base::`[[`
[16:21:16.608]             `+` <- base::`+`
[16:21:16.608]             `<<-` <- base::`<<-`
[16:21:16.608]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:16.608]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:16.608]                   3L)]
[16:21:16.608]             }
[16:21:16.608]             function(cond) {
[16:21:16.608]                 is_error <- inherits(cond, "error")
[16:21:16.608]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:16.608]                   NULL)
[16:21:16.608]                 if (is_error) {
[16:21:16.608]                   sessionInformation <- function() {
[16:21:16.608]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:16.608]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:16.608]                       search = base::search(), system = base::Sys.info())
[16:21:16.608]                   }
[16:21:16.608]                   ...future.conditions[[length(...future.conditions) + 
[16:21:16.608]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:16.608]                     cond$call), session = sessionInformation(), 
[16:21:16.608]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:16.608]                   signalCondition(cond)
[16:21:16.608]                 }
[16:21:16.608]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:16.608]                 "immediateCondition"))) {
[16:21:16.608]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:16.608]                   ...future.conditions[[length(...future.conditions) + 
[16:21:16.608]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:16.608]                   if (TRUE && !signal) {
[16:21:16.608]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.608]                     {
[16:21:16.608]                       inherits <- base::inherits
[16:21:16.608]                       invokeRestart <- base::invokeRestart
[16:21:16.608]                       is.null <- base::is.null
[16:21:16.608]                       muffled <- FALSE
[16:21:16.608]                       if (inherits(cond, "message")) {
[16:21:16.608]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:16.608]                         if (muffled) 
[16:21:16.608]                           invokeRestart("muffleMessage")
[16:21:16.608]                       }
[16:21:16.608]                       else if (inherits(cond, "warning")) {
[16:21:16.608]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:16.608]                         if (muffled) 
[16:21:16.608]                           invokeRestart("muffleWarning")
[16:21:16.608]                       }
[16:21:16.608]                       else if (inherits(cond, "condition")) {
[16:21:16.608]                         if (!is.null(pattern)) {
[16:21:16.608]                           computeRestarts <- base::computeRestarts
[16:21:16.608]                           grepl <- base::grepl
[16:21:16.608]                           restarts <- computeRestarts(cond)
[16:21:16.608]                           for (restart in restarts) {
[16:21:16.608]                             name <- restart$name
[16:21:16.608]                             if (is.null(name)) 
[16:21:16.608]                               next
[16:21:16.608]                             if (!grepl(pattern, name)) 
[16:21:16.608]                               next
[16:21:16.608]                             invokeRestart(restart)
[16:21:16.608]                             muffled <- TRUE
[16:21:16.608]                             break
[16:21:16.608]                           }
[16:21:16.608]                         }
[16:21:16.608]                       }
[16:21:16.608]                       invisible(muffled)
[16:21:16.608]                     }
[16:21:16.608]                     muffleCondition(cond, pattern = "^muffle")
[16:21:16.608]                   }
[16:21:16.608]                 }
[16:21:16.608]                 else {
[16:21:16.608]                   if (TRUE) {
[16:21:16.608]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.608]                     {
[16:21:16.608]                       inherits <- base::inherits
[16:21:16.608]                       invokeRestart <- base::invokeRestart
[16:21:16.608]                       is.null <- base::is.null
[16:21:16.608]                       muffled <- FALSE
[16:21:16.608]                       if (inherits(cond, "message")) {
[16:21:16.608]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:16.608]                         if (muffled) 
[16:21:16.608]                           invokeRestart("muffleMessage")
[16:21:16.608]                       }
[16:21:16.608]                       else if (inherits(cond, "warning")) {
[16:21:16.608]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:16.608]                         if (muffled) 
[16:21:16.608]                           invokeRestart("muffleWarning")
[16:21:16.608]                       }
[16:21:16.608]                       else if (inherits(cond, "condition")) {
[16:21:16.608]                         if (!is.null(pattern)) {
[16:21:16.608]                           computeRestarts <- base::computeRestarts
[16:21:16.608]                           grepl <- base::grepl
[16:21:16.608]                           restarts <- computeRestarts(cond)
[16:21:16.608]                           for (restart in restarts) {
[16:21:16.608]                             name <- restart$name
[16:21:16.608]                             if (is.null(name)) 
[16:21:16.608]                               next
[16:21:16.608]                             if (!grepl(pattern, name)) 
[16:21:16.608]                               next
[16:21:16.608]                             invokeRestart(restart)
[16:21:16.608]                             muffled <- TRUE
[16:21:16.608]                             break
[16:21:16.608]                           }
[16:21:16.608]                         }
[16:21:16.608]                       }
[16:21:16.608]                       invisible(muffled)
[16:21:16.608]                     }
[16:21:16.608]                     muffleCondition(cond, pattern = "^muffle")
[16:21:16.608]                   }
[16:21:16.608]                 }
[16:21:16.608]             }
[16:21:16.608]         }))
[16:21:16.608]     }, error = function(ex) {
[16:21:16.608]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:16.608]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:16.608]                 ...future.rng), started = ...future.startTime, 
[16:21:16.608]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:16.608]             version = "1.8"), class = "FutureResult")
[16:21:16.608]     }, finally = {
[16:21:16.608]         if (!identical(...future.workdir, getwd())) 
[16:21:16.608]             setwd(...future.workdir)
[16:21:16.608]         {
[16:21:16.608]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:16.608]                 ...future.oldOptions$nwarnings <- NULL
[16:21:16.608]             }
[16:21:16.608]             base::options(...future.oldOptions)
[16:21:16.608]             if (.Platform$OS.type == "windows") {
[16:21:16.608]                 old_names <- names(...future.oldEnvVars)
[16:21:16.608]                 envs <- base::Sys.getenv()
[16:21:16.608]                 names <- names(envs)
[16:21:16.608]                 common <- intersect(names, old_names)
[16:21:16.608]                 added <- setdiff(names, old_names)
[16:21:16.608]                 removed <- setdiff(old_names, names)
[16:21:16.608]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:16.608]                   envs[common]]
[16:21:16.608]                 NAMES <- toupper(changed)
[16:21:16.608]                 args <- list()
[16:21:16.608]                 for (kk in seq_along(NAMES)) {
[16:21:16.608]                   name <- changed[[kk]]
[16:21:16.608]                   NAME <- NAMES[[kk]]
[16:21:16.608]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.608]                     next
[16:21:16.608]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:16.608]                 }
[16:21:16.608]                 NAMES <- toupper(added)
[16:21:16.608]                 for (kk in seq_along(NAMES)) {
[16:21:16.608]                   name <- added[[kk]]
[16:21:16.608]                   NAME <- NAMES[[kk]]
[16:21:16.608]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.608]                     next
[16:21:16.608]                   args[[name]] <- ""
[16:21:16.608]                 }
[16:21:16.608]                 NAMES <- toupper(removed)
[16:21:16.608]                 for (kk in seq_along(NAMES)) {
[16:21:16.608]                   name <- removed[[kk]]
[16:21:16.608]                   NAME <- NAMES[[kk]]
[16:21:16.608]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.608]                     next
[16:21:16.608]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:16.608]                 }
[16:21:16.608]                 if (length(args) > 0) 
[16:21:16.608]                   base::do.call(base::Sys.setenv, args = args)
[16:21:16.608]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:16.608]             }
[16:21:16.608]             else {
[16:21:16.608]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:16.608]             }
[16:21:16.608]             {
[16:21:16.608]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:16.608]                   0L) {
[16:21:16.608]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:16.608]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:16.608]                   base::options(opts)
[16:21:16.608]                 }
[16:21:16.608]                 {
[16:21:16.608]                   {
[16:21:16.608]                     base::options(mc.cores = ...future.mc.cores.old)
[16:21:16.608]                     NULL
[16:21:16.608]                   }
[16:21:16.608]                   options(future.plan = NULL)
[16:21:16.608]                   if (is.na(NA_character_)) 
[16:21:16.608]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:16.608]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:16.608]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:16.608]                     .init = FALSE)
[16:21:16.608]                 }
[16:21:16.608]             }
[16:21:16.608]         }
[16:21:16.608]     })
[16:21:16.608]     if (TRUE) {
[16:21:16.608]         base::sink(type = "output", split = FALSE)
[16:21:16.608]         if (TRUE) {
[16:21:16.608]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:16.608]         }
[16:21:16.608]         else {
[16:21:16.608]             ...future.result["stdout"] <- base::list(NULL)
[16:21:16.608]         }
[16:21:16.608]         base::close(...future.stdout)
[16:21:16.608]         ...future.stdout <- NULL
[16:21:16.608]     }
[16:21:16.608]     ...future.result$conditions <- ...future.conditions
[16:21:16.608]     ...future.result$finished <- base::Sys.time()
[16:21:16.608]     ...future.result
[16:21:16.608] }
[16:21:16.610] requestCore(): workers = 2
[16:21:16.612] MulticoreFuture started
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    stop("Whoops!")
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[16:21:16.613] plan(): Setting new future strategy stack:
[16:21:16.614] List of future strategies:
[16:21:16.614] 1. sequential:
[16:21:16.614]    - args: function (..., envir = parent.frame())
[16:21:16.614]    - tweaked: FALSE
[16:21:16.614]    - call: NULL
[16:21:16.614] plan(): nbrOfWorkers() = 1
[16:21:16.617] plan(): Setting new future strategy stack:
[16:21:16.617] List of future strategies:
[16:21:16.617] 1. multicore:
[16:21:16.617]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:21:16.617]    - tweaked: FALSE
[16:21:16.617]    - call: plan(multicore)
[16:21:16.622] plan(): nbrOfWorkers() = 2
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 341000aa-40a0-ae89-3f55-e211e7e2f207
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:21:16.624] result() for MulticoreFuture ...
[16:21:16.627] result() for MulticoreFuture ...
[16:21:16.627] result() for MulticoreFuture ... done
[16:21:16.627] signalConditions() ...
[16:21:16.627]  - include = ‘immediateCondition’
[16:21:16.627]  - exclude = 
[16:21:16.627]  - resignal = FALSE
[16:21:16.628]  - Number of conditions: 1
[16:21:16.628] signalConditions() ... done
[16:21:16.628] result() for MulticoreFuture ... done
[16:21:16.628] result() for MulticoreFuture ...
[16:21:16.628] result() for MulticoreFuture ... done
[16:21:16.628] signalConditions() ...
[16:21:16.628]  - include = ‘immediateCondition’
[16:21:16.629]  - exclude = 
[16:21:16.629]  - resignal = FALSE
[16:21:16.629]  - Number of conditions: 1
[16:21:16.629] signalConditions() ... done
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    save_rds <- function (object, pathname, ...)     {        pathname_tmp <- sprintf("%s.tmp", pathname)        if (file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]])        }        tryCatch({            saveRDS(object, file = pathname_tmp, ...)        }, error = function(ex) {            msg <- conditionMessage(ex)            fi_tmp <- file.info(pathname_tmp)            msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 msg)            ex$message <- msg            stop(ex)        })        stopifnot(file_test("-f", pathname_tmp))        res <- file.rename(from = pathname_tmp, to = pathname)        if (!res || file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            fi <- file.info(pathname)            msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 sQuote(pathname), fi[["size"]], fi[["mtime"]])            stop(msg)        }        invisible(pathname)    }    saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath),         rootPath = tempdir())     {        obj <- list(time = Sys.time(), condition = cond)        file <- tempfile(pattern = class(cond)[1], tmpdir = path,             fileext = ".rds")        save_rds(obj, file)    }    saveImmediateCondition(cond, path = "/tmp/RtmpCuMWhk/.future/immediateConditions")    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[16:21:16.630] result() for MulticoreFuture ...
[16:21:16.630] result() for MulticoreFuture ... done
[16:21:16.630] result() for MulticoreFuture ...
[16:21:16.630] result() for MulticoreFuture ... done
[16:21:16.630] signalConditions() ...
[16:21:16.630]  - include = ‘immediateCondition’
[16:21:16.630]  - exclude = 
[16:21:16.630]  - resignal = FALSE
[16:21:16.631]  - Number of conditions: 1
[16:21:16.631] signalConditions() ... done
[16:21:16.631] Future state: ‘finished’
[16:21:16.631] result() for MulticoreFuture ...
[16:21:16.631] result() for MulticoreFuture ... done
[16:21:16.631] signalConditions() ...
[16:21:16.631]  - include = ‘condition’
[16:21:16.631]  - exclude = ‘immediateCondition’
[16:21:16.631]  - resignal = TRUE
[16:21:16.632]  - Number of conditions: 1
[16:21:16.632]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[16:21:16.632] signalConditions() ... done
[1] "Error in withCallingHandlers({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    save_rds <- function (object, pathname, ...)     {        pathname_tmp <- sprintf("%s.tmp", pathname)        if (file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]])        }        tryCatch({            saveRDS(object, file = pathname_tmp, ...)        }, error = function(ex) {            msg <- conditionMessage(ex)            fi_tmp <- file.info(pathname_tmp)            msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 msg)            ex$message <- msg            stop(ex)        })        stopifnot(file_test("-f", pathname_tmp))        res <- file.rename(from = pathname_tmp, to = pathname)        if (!res || file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            fi <- file.info(pathname)            msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 sQuote(pathname), fi[["size"]], fi[["mtime"]])            stop(msg)        }        invisible(pathname)    }    saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath),         rootPath = tempdir())     {        obj <- list(time = Sys.time(), condition = cond)        file <- tempfile(pattern = class(cond)[1], tmpdir = path,             fileext = ".rds")        save_rds(obj, file)    }    saveImmediateCondition(cond, path = "/tmp/RtmpCuMWhk/.future/immediateConditions")    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[16:21:16.633] result() for MulticoreFuture ...
[16:21:16.633] result() for MulticoreFuture ... done
[16:21:16.633] result() for MulticoreFuture ...
[16:21:16.633] result() for MulticoreFuture ... done
[16:21:16.633] signalConditions() ...
[16:21:16.633]  - include = ‘immediateCondition’
[16:21:16.633]  - exclude = 
[16:21:16.634]  - resignal = FALSE
[16:21:16.634]  - Number of conditions: 1
[16:21:16.634] signalConditions() ... done
[16:21:16.634] Future state: ‘finished’
[16:21:16.634] result() for MulticoreFuture ...
[16:21:16.634] result() for MulticoreFuture ... done
[16:21:16.634] signalConditions() ...
[16:21:16.634]  - include = ‘condition’
[16:21:16.635]  - exclude = ‘immediateCondition’
[16:21:16.635]  - resignal = TRUE
[16:21:16.635]  - Number of conditions: 1
[16:21:16.635]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[16:21:16.635] signalConditions() ... done
[1] "Error in withCallingHandlers({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    save_rds <- function (object, pathname, ...)     {        pathname_tmp <- sprintf("%s.tmp", pathname)        if (file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]])        }        tryCatch({            saveRDS(object, file = pathname_tmp, ...)        }, error = function(ex) {            msg <- conditionMessage(ex)            fi_tmp <- file.info(pathname_tmp)            msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 msg)            ex$message <- msg            stop(ex)        })        stopifnot(file_test("-f", pathname_tmp))        res <- file.rename(from = pathname_tmp, to = pathname)        if (!res || file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            fi <- file.info(pathname)            msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 sQuote(pathname), fi[["size"]], fi[["mtime"]])            stop(msg)        }        invisible(pathname)    }    saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath),         rootPath = tempdir())     {        obj <- list(time = Sys.time(), condition = cond)        file <- tempfile(pattern = class(cond)[1], tmpdir = path,             fileext = ".rds")        save_rds(obj, file)    }    saveImmediateCondition(cond, path = "/tmp/RtmpCuMWhk/.future/immediateConditions")    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[16:21:16.640] getGlobalsAndPackages() ...
[16:21:16.640] 
[16:21:16.640] - globals: [0] <none>
[16:21:16.640] getGlobalsAndPackages() ... DONE
[16:21:16.641] Packages needed by the future expression (n = 0): <none>
[16:21:16.641] Packages needed by future strategies (n = 0): <none>
[16:21:16.641] {
[16:21:16.641]     {
[16:21:16.641]         {
[16:21:16.641]             ...future.startTime <- base::Sys.time()
[16:21:16.641]             {
[16:21:16.641]                 {
[16:21:16.641]                   {
[16:21:16.641]                     {
[16:21:16.641]                       base::local({
[16:21:16.641]                         has_future <- base::requireNamespace("future", 
[16:21:16.641]                           quietly = TRUE)
[16:21:16.641]                         if (has_future) {
[16:21:16.641]                           ns <- base::getNamespace("future")
[16:21:16.641]                           version <- ns[[".package"]][["version"]]
[16:21:16.641]                           if (is.null(version)) 
[16:21:16.641]                             version <- utils::packageVersion("future")
[16:21:16.641]                         }
[16:21:16.641]                         else {
[16:21:16.641]                           version <- NULL
[16:21:16.641]                         }
[16:21:16.641]                         if (!has_future || version < "1.8.0") {
[16:21:16.641]                           info <- base::c(r_version = base::gsub("R version ", 
[16:21:16.641]                             "", base::R.version$version.string), 
[16:21:16.641]                             platform = base::sprintf("%s (%s-bit)", 
[16:21:16.641]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:16.641]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:16.641]                               "release", "version")], collapse = " "), 
[16:21:16.641]                             hostname = base::Sys.info()[["nodename"]])
[16:21:16.641]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:21:16.641]                             info)
[16:21:16.641]                           info <- base::paste(info, collapse = "; ")
[16:21:16.641]                           if (!has_future) {
[16:21:16.641]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:16.641]                               info)
[16:21:16.641]                           }
[16:21:16.641]                           else {
[16:21:16.641]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:16.641]                               info, version)
[16:21:16.641]                           }
[16:21:16.641]                           base::stop(msg)
[16:21:16.641]                         }
[16:21:16.641]                       })
[16:21:16.641]                     }
[16:21:16.641]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:21:16.641]                     base::options(mc.cores = 1L)
[16:21:16.641]                   }
[16:21:16.641]                   ...future.strategy.old <- future::plan("list")
[16:21:16.641]                   options(future.plan = NULL)
[16:21:16.641]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:16.641]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:16.641]                 }
[16:21:16.641]                 ...future.workdir <- getwd()
[16:21:16.641]             }
[16:21:16.641]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:16.641]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:16.641]         }
[16:21:16.641]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:16.641]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:16.641]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:16.641]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:16.641]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:16.641]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:16.641]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:16.641]             base::names(...future.oldOptions))
[16:21:16.641]     }
[16:21:16.641]     if (FALSE) {
[16:21:16.641]     }
[16:21:16.641]     else {
[16:21:16.641]         if (TRUE) {
[16:21:16.641]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:16.641]                 open = "w")
[16:21:16.641]         }
[16:21:16.641]         else {
[16:21:16.641]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:16.641]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:16.641]         }
[16:21:16.641]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:16.641]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:16.641]             base::sink(type = "output", split = FALSE)
[16:21:16.641]             base::close(...future.stdout)
[16:21:16.641]         }, add = TRUE)
[16:21:16.641]     }
[16:21:16.641]     ...future.frame <- base::sys.nframe()
[16:21:16.641]     ...future.conditions <- base::list()
[16:21:16.641]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:16.641]     if (FALSE) {
[16:21:16.641]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:16.641]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:16.641]     }
[16:21:16.641]     ...future.result <- base::tryCatch({
[16:21:16.641]         base::withCallingHandlers({
[16:21:16.641]             ...future.value <- base::withVisible(base::local({
[16:21:16.641]                 withCallingHandlers({
[16:21:16.641]                   {
[16:21:16.641]                     stop(structure(list(message = "boom"), class = c("MyError", 
[16:21:16.641]                       "error", "condition")))
[16:21:16.641]                   }
[16:21:16.641]                 }, immediateCondition = function(cond) {
[16:21:16.641]                   save_rds <- function (object, pathname, ...) 
[16:21:16.641]                   {
[16:21:16.641]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:21:16.641]                     if (file_test("-f", pathname_tmp)) {
[16:21:16.641]                       fi_tmp <- file.info(pathname_tmp)
[16:21:16.641]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:21:16.641]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:21:16.641]                         fi_tmp[["mtime"]])
[16:21:16.641]                     }
[16:21:16.641]                     tryCatch({
[16:21:16.641]                       saveRDS(object, file = pathname_tmp, ...)
[16:21:16.641]                     }, error = function(ex) {
[16:21:16.641]                       msg <- conditionMessage(ex)
[16:21:16.641]                       fi_tmp <- file.info(pathname_tmp)
[16:21:16.641]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:21:16.641]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:21:16.641]                         fi_tmp[["mtime"]], msg)
[16:21:16.641]                       ex$message <- msg
[16:21:16.641]                       stop(ex)
[16:21:16.641]                     })
[16:21:16.641]                     stopifnot(file_test("-f", pathname_tmp))
[16:21:16.641]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:21:16.641]                     if (!res || file_test("-f", pathname_tmp)) {
[16:21:16.641]                       fi_tmp <- file.info(pathname_tmp)
[16:21:16.641]                       fi <- file.info(pathname)
[16:21:16.641]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:21:16.641]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:21:16.641]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:21:16.641]                         fi[["size"]], fi[["mtime"]])
[16:21:16.641]                       stop(msg)
[16:21:16.641]                     }
[16:21:16.641]                     invisible(pathname)
[16:21:16.641]                   }
[16:21:16.641]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:21:16.641]                     rootPath = tempdir()) 
[16:21:16.641]                   {
[16:21:16.641]                     obj <- list(time = Sys.time(), condition = cond)
[16:21:16.641]                     file <- tempfile(pattern = class(cond)[1], 
[16:21:16.641]                       tmpdir = path, fileext = ".rds")
[16:21:16.641]                     save_rds(obj, file)
[16:21:16.641]                   }
[16:21:16.641]                   saveImmediateCondition(cond, path = "/tmp/RtmpCuMWhk/.future/immediateConditions")
[16:21:16.641]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.641]                   {
[16:21:16.641]                     inherits <- base::inherits
[16:21:16.641]                     invokeRestart <- base::invokeRestart
[16:21:16.641]                     is.null <- base::is.null
[16:21:16.641]                     muffled <- FALSE
[16:21:16.641]                     if (inherits(cond, "message")) {
[16:21:16.641]                       muffled <- grepl(pattern, "muffleMessage")
[16:21:16.641]                       if (muffled) 
[16:21:16.641]                         invokeRestart("muffleMessage")
[16:21:16.641]                     }
[16:21:16.641]                     else if (inherits(cond, "warning")) {
[16:21:16.641]                       muffled <- grepl(pattern, "muffleWarning")
[16:21:16.641]                       if (muffled) 
[16:21:16.641]                         invokeRestart("muffleWarning")
[16:21:16.641]                     }
[16:21:16.641]                     else if (inherits(cond, "condition")) {
[16:21:16.641]                       if (!is.null(pattern)) {
[16:21:16.641]                         computeRestarts <- base::computeRestarts
[16:21:16.641]                         grepl <- base::grepl
[16:21:16.641]                         restarts <- computeRestarts(cond)
[16:21:16.641]                         for (restart in restarts) {
[16:21:16.641]                           name <- restart$name
[16:21:16.641]                           if (is.null(name)) 
[16:21:16.641]                             next
[16:21:16.641]                           if (!grepl(pattern, name)) 
[16:21:16.641]                             next
[16:21:16.641]                           invokeRestart(restart)
[16:21:16.641]                           muffled <- TRUE
[16:21:16.641]                           break
[16:21:16.641]                         }
[16:21:16.641]                       }
[16:21:16.641]                     }
[16:21:16.641]                     invisible(muffled)
[16:21:16.641]                   }
[16:21:16.641]                   muffleCondition(cond)
[16:21:16.641]                 })
[16:21:16.641]             }))
[16:21:16.641]             future::FutureResult(value = ...future.value$value, 
[16:21:16.641]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:16.641]                   ...future.rng), globalenv = if (FALSE) 
[16:21:16.641]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:16.641]                     ...future.globalenv.names))
[16:21:16.641]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:16.641]         }, condition = base::local({
[16:21:16.641]             c <- base::c
[16:21:16.641]             inherits <- base::inherits
[16:21:16.641]             invokeRestart <- base::invokeRestart
[16:21:16.641]             length <- base::length
[16:21:16.641]             list <- base::list
[16:21:16.641]             seq.int <- base::seq.int
[16:21:16.641]             signalCondition <- base::signalCondition
[16:21:16.641]             sys.calls <- base::sys.calls
[16:21:16.641]             `[[` <- base::`[[`
[16:21:16.641]             `+` <- base::`+`
[16:21:16.641]             `<<-` <- base::`<<-`
[16:21:16.641]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:16.641]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:16.641]                   3L)]
[16:21:16.641]             }
[16:21:16.641]             function(cond) {
[16:21:16.641]                 is_error <- inherits(cond, "error")
[16:21:16.641]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:16.641]                   NULL)
[16:21:16.641]                 if (is_error) {
[16:21:16.641]                   sessionInformation <- function() {
[16:21:16.641]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:16.641]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:16.641]                       search = base::search(), system = base::Sys.info())
[16:21:16.641]                   }
[16:21:16.641]                   ...future.conditions[[length(...future.conditions) + 
[16:21:16.641]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:16.641]                     cond$call), session = sessionInformation(), 
[16:21:16.641]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:16.641]                   signalCondition(cond)
[16:21:16.641]                 }
[16:21:16.641]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:16.641]                 "immediateCondition"))) {
[16:21:16.641]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:16.641]                   ...future.conditions[[length(...future.conditions) + 
[16:21:16.641]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:16.641]                   if (TRUE && !signal) {
[16:21:16.641]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.641]                     {
[16:21:16.641]                       inherits <- base::inherits
[16:21:16.641]                       invokeRestart <- base::invokeRestart
[16:21:16.641]                       is.null <- base::is.null
[16:21:16.641]                       muffled <- FALSE
[16:21:16.641]                       if (inherits(cond, "message")) {
[16:21:16.641]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:16.641]                         if (muffled) 
[16:21:16.641]                           invokeRestart("muffleMessage")
[16:21:16.641]                       }
[16:21:16.641]                       else if (inherits(cond, "warning")) {
[16:21:16.641]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:16.641]                         if (muffled) 
[16:21:16.641]                           invokeRestart("muffleWarning")
[16:21:16.641]                       }
[16:21:16.641]                       else if (inherits(cond, "condition")) {
[16:21:16.641]                         if (!is.null(pattern)) {
[16:21:16.641]                           computeRestarts <- base::computeRestarts
[16:21:16.641]                           grepl <- base::grepl
[16:21:16.641]                           restarts <- computeRestarts(cond)
[16:21:16.641]                           for (restart in restarts) {
[16:21:16.641]                             name <- restart$name
[16:21:16.641]                             if (is.null(name)) 
[16:21:16.641]                               next
[16:21:16.641]                             if (!grepl(pattern, name)) 
[16:21:16.641]                               next
[16:21:16.641]                             invokeRestart(restart)
[16:21:16.641]                             muffled <- TRUE
[16:21:16.641]                             break
[16:21:16.641]                           }
[16:21:16.641]                         }
[16:21:16.641]                       }
[16:21:16.641]                       invisible(muffled)
[16:21:16.641]                     }
[16:21:16.641]                     muffleCondition(cond, pattern = "^muffle")
[16:21:16.641]                   }
[16:21:16.641]                 }
[16:21:16.641]                 else {
[16:21:16.641]                   if (TRUE) {
[16:21:16.641]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.641]                     {
[16:21:16.641]                       inherits <- base::inherits
[16:21:16.641]                       invokeRestart <- base::invokeRestart
[16:21:16.641]                       is.null <- base::is.null
[16:21:16.641]                       muffled <- FALSE
[16:21:16.641]                       if (inherits(cond, "message")) {
[16:21:16.641]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:16.641]                         if (muffled) 
[16:21:16.641]                           invokeRestart("muffleMessage")
[16:21:16.641]                       }
[16:21:16.641]                       else if (inherits(cond, "warning")) {
[16:21:16.641]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:16.641]                         if (muffled) 
[16:21:16.641]                           invokeRestart("muffleWarning")
[16:21:16.641]                       }
[16:21:16.641]                       else if (inherits(cond, "condition")) {
[16:21:16.641]                         if (!is.null(pattern)) {
[16:21:16.641]                           computeRestarts <- base::computeRestarts
[16:21:16.641]                           grepl <- base::grepl
[16:21:16.641]                           restarts <- computeRestarts(cond)
[16:21:16.641]                           for (restart in restarts) {
[16:21:16.641]                             name <- restart$name
[16:21:16.641]                             if (is.null(name)) 
[16:21:16.641]                               next
[16:21:16.641]                             if (!grepl(pattern, name)) 
[16:21:16.641]                               next
[16:21:16.641]                             invokeRestart(restart)
[16:21:16.641]                             muffled <- TRUE
[16:21:16.641]                             break
[16:21:16.641]                           }
[16:21:16.641]                         }
[16:21:16.641]                       }
[16:21:16.641]                       invisible(muffled)
[16:21:16.641]                     }
[16:21:16.641]                     muffleCondition(cond, pattern = "^muffle")
[16:21:16.641]                   }
[16:21:16.641]                 }
[16:21:16.641]             }
[16:21:16.641]         }))
[16:21:16.641]     }, error = function(ex) {
[16:21:16.641]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:16.641]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:16.641]                 ...future.rng), started = ...future.startTime, 
[16:21:16.641]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:16.641]             version = "1.8"), class = "FutureResult")
[16:21:16.641]     }, finally = {
[16:21:16.641]         if (!identical(...future.workdir, getwd())) 
[16:21:16.641]             setwd(...future.workdir)
[16:21:16.641]         {
[16:21:16.641]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:16.641]                 ...future.oldOptions$nwarnings <- NULL
[16:21:16.641]             }
[16:21:16.641]             base::options(...future.oldOptions)
[16:21:16.641]             if (.Platform$OS.type == "windows") {
[16:21:16.641]                 old_names <- names(...future.oldEnvVars)
[16:21:16.641]                 envs <- base::Sys.getenv()
[16:21:16.641]                 names <- names(envs)
[16:21:16.641]                 common <- intersect(names, old_names)
[16:21:16.641]                 added <- setdiff(names, old_names)
[16:21:16.641]                 removed <- setdiff(old_names, names)
[16:21:16.641]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:16.641]                   envs[common]]
[16:21:16.641]                 NAMES <- toupper(changed)
[16:21:16.641]                 args <- list()
[16:21:16.641]                 for (kk in seq_along(NAMES)) {
[16:21:16.641]                   name <- changed[[kk]]
[16:21:16.641]                   NAME <- NAMES[[kk]]
[16:21:16.641]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.641]                     next
[16:21:16.641]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:16.641]                 }
[16:21:16.641]                 NAMES <- toupper(added)
[16:21:16.641]                 for (kk in seq_along(NAMES)) {
[16:21:16.641]                   name <- added[[kk]]
[16:21:16.641]                   NAME <- NAMES[[kk]]
[16:21:16.641]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.641]                     next
[16:21:16.641]                   args[[name]] <- ""
[16:21:16.641]                 }
[16:21:16.641]                 NAMES <- toupper(removed)
[16:21:16.641]                 for (kk in seq_along(NAMES)) {
[16:21:16.641]                   name <- removed[[kk]]
[16:21:16.641]                   NAME <- NAMES[[kk]]
[16:21:16.641]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.641]                     next
[16:21:16.641]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:16.641]                 }
[16:21:16.641]                 if (length(args) > 0) 
[16:21:16.641]                   base::do.call(base::Sys.setenv, args = args)
[16:21:16.641]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:16.641]             }
[16:21:16.641]             else {
[16:21:16.641]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:16.641]             }
[16:21:16.641]             {
[16:21:16.641]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:16.641]                   0L) {
[16:21:16.641]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:16.641]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:16.641]                   base::options(opts)
[16:21:16.641]                 }
[16:21:16.641]                 {
[16:21:16.641]                   {
[16:21:16.641]                     base::options(mc.cores = ...future.mc.cores.old)
[16:21:16.641]                     NULL
[16:21:16.641]                   }
[16:21:16.641]                   options(future.plan = NULL)
[16:21:16.641]                   if (is.na(NA_character_)) 
[16:21:16.641]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:16.641]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:16.641]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:16.641]                     .init = FALSE)
[16:21:16.641]                 }
[16:21:16.641]             }
[16:21:16.641]         }
[16:21:16.641]     })
[16:21:16.641]     if (TRUE) {
[16:21:16.641]         base::sink(type = "output", split = FALSE)
[16:21:16.641]         if (TRUE) {
[16:21:16.641]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:16.641]         }
[16:21:16.641]         else {
[16:21:16.641]             ...future.result["stdout"] <- base::list(NULL)
[16:21:16.641]         }
[16:21:16.641]         base::close(...future.stdout)
[16:21:16.641]         ...future.stdout <- NULL
[16:21:16.641]     }
[16:21:16.641]     ...future.result$conditions <- ...future.conditions
[16:21:16.641]     ...future.result$finished <- base::Sys.time()
[16:21:16.641]     ...future.result
[16:21:16.641] }
[16:21:16.644] requestCore(): workers = 2
[16:21:16.646] MulticoreFuture started
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    stop(structure(list(message = "boom"), class = c("MyError", 
        "error", "condition")))
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[16:21:16.647] plan(): Setting new future strategy stack:
[16:21:16.647] List of future strategies:
[16:21:16.647] 1. sequential:
[16:21:16.647]    - args: function (..., envir = parent.frame())
[16:21:16.647]    - tweaked: FALSE
[16:21:16.647]    - call: NULL
[16:21:16.648] plan(): nbrOfWorkers() = 1
[16:21:16.650] plan(): Setting new future strategy stack:
[16:21:16.650] List of future strategies:
[16:21:16.650] 1. multicore:
[16:21:16.650]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:21:16.650]    - tweaked: FALSE
[16:21:16.650]    - call: plan(multicore)
[16:21:16.655] plan(): nbrOfWorkers() = 2
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 341000aa-40a0-ae89-3f55-e211e7e2f207
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:21:16.657] result() for MulticoreFuture ...
[16:21:16.660] result() for MulticoreFuture ...
[16:21:16.660] result() for MulticoreFuture ... done
[16:21:16.660] signalConditions() ...
[16:21:16.660]  - include = ‘immediateCondition’
[16:21:16.660]  - exclude = 
[16:21:16.660]  - resignal = FALSE
[16:21:16.660]  - Number of conditions: 1
[16:21:16.661] signalConditions() ... done
[16:21:16.661] result() for MulticoreFuture ... done
[16:21:16.661] result() for MulticoreFuture ...
[16:21:16.661] result() for MulticoreFuture ... done
[16:21:16.661] signalConditions() ...
[16:21:16.661]  - include = ‘immediateCondition’
[16:21:16.661]  - exclude = 
[16:21:16.661]  - resignal = FALSE
[16:21:16.661]  - Number of conditions: 1
[16:21:16.662] signalConditions() ... done
<MyError: boom>
[16:21:16.662] result() for MulticoreFuture ...
[16:21:16.662] result() for MulticoreFuture ... done
[16:21:16.662] result() for MulticoreFuture ...
[16:21:16.662] result() for MulticoreFuture ... done
[16:21:16.662] signalConditions() ...
[16:21:16.662]  - include = ‘immediateCondition’
[16:21:16.662]  - exclude = 
[16:21:16.663]  - resignal = FALSE
[16:21:16.663]  - Number of conditions: 1
[16:21:16.663] signalConditions() ... done
[16:21:16.663] Future state: ‘finished’
[16:21:16.663] result() for MulticoreFuture ...
[16:21:16.663] result() for MulticoreFuture ... done
[16:21:16.663] signalConditions() ...
[16:21:16.663]  - include = ‘condition’
[16:21:16.663]  - exclude = ‘immediateCondition’
[16:21:16.664]  - resignal = TRUE
[16:21:16.664]  - Number of conditions: 1
[16:21:16.664]  - Condition #1: ‘MyError’, ‘error’, ‘condition’
[16:21:16.664] signalConditions() ... done
*** multicore(..., workers = 1L) ...
[16:21:16.664] getGlobalsAndPackages() ...
[16:21:16.664] Searching for globals...
[16:21:16.666] - globals found: [4] ‘{’, ‘*’, ‘a’, ‘b’
[16:21:16.666] Searching for globals ... DONE
[16:21:16.666] Resolving globals: FALSE
[16:21:16.667] The total size of the 2 globals is 112 bytes (112 bytes)
[16:21:16.671] The total size of the 2 globals exported for future expression (‘{; a * b; }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘a’ (56 bytes of class ‘numeric’) and ‘b’ (56 bytes of class ‘numeric’)
[16:21:16.671] - globals: [2] ‘a’, ‘b’
[16:21:16.671] 
[16:21:16.671] getGlobalsAndPackages() ... DONE
[16:21:16.672] Packages needed by the future expression (n = 0): <none>
[16:21:16.672] Packages needed by future strategies (n = 0): <none>
[16:21:16.673] {
[16:21:16.673]     {
[16:21:16.673]         {
[16:21:16.673]             ...future.startTime <- base::Sys.time()
[16:21:16.673]             {
[16:21:16.673]                 {
[16:21:16.673]                   {
[16:21:16.673]                     base::local({
[16:21:16.673]                       has_future <- base::requireNamespace("future", 
[16:21:16.673]                         quietly = TRUE)
[16:21:16.673]                       if (has_future) {
[16:21:16.673]                         ns <- base::getNamespace("future")
[16:21:16.673]                         version <- ns[[".package"]][["version"]]
[16:21:16.673]                         if (is.null(version)) 
[16:21:16.673]                           version <- utils::packageVersion("future")
[16:21:16.673]                       }
[16:21:16.673]                       else {
[16:21:16.673]                         version <- NULL
[16:21:16.673]                       }
[16:21:16.673]                       if (!has_future || version < "1.8.0") {
[16:21:16.673]                         info <- base::c(r_version = base::gsub("R version ", 
[16:21:16.673]                           "", base::R.version$version.string), 
[16:21:16.673]                           platform = base::sprintf("%s (%s-bit)", 
[16:21:16.673]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:16.673]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:16.673]                             "release", "version")], collapse = " "), 
[16:21:16.673]                           hostname = base::Sys.info()[["nodename"]])
[16:21:16.673]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:21:16.673]                           info)
[16:21:16.673]                         info <- base::paste(info, collapse = "; ")
[16:21:16.673]                         if (!has_future) {
[16:21:16.673]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:16.673]                             info)
[16:21:16.673]                         }
[16:21:16.673]                         else {
[16:21:16.673]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:16.673]                             info, version)
[16:21:16.673]                         }
[16:21:16.673]                         base::stop(msg)
[16:21:16.673]                       }
[16:21:16.673]                     })
[16:21:16.673]                   }
[16:21:16.673]                   ...future.strategy.old <- future::plan("list")
[16:21:16.673]                   options(future.plan = NULL)
[16:21:16.673]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:16.673]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:16.673]                 }
[16:21:16.673]                 ...future.workdir <- getwd()
[16:21:16.673]             }
[16:21:16.673]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:16.673]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:16.673]         }
[16:21:16.673]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:16.673]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:16.673]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:16.673]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:16.673]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:16.673]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:16.673]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:16.673]             base::names(...future.oldOptions))
[16:21:16.673]     }
[16:21:16.673]     if (FALSE) {
[16:21:16.673]     }
[16:21:16.673]     else {
[16:21:16.673]         if (TRUE) {
[16:21:16.673]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:16.673]                 open = "w")
[16:21:16.673]         }
[16:21:16.673]         else {
[16:21:16.673]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:16.673]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:16.673]         }
[16:21:16.673]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:16.673]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:16.673]             base::sink(type = "output", split = FALSE)
[16:21:16.673]             base::close(...future.stdout)
[16:21:16.673]         }, add = TRUE)
[16:21:16.673]     }
[16:21:16.673]     ...future.frame <- base::sys.nframe()
[16:21:16.673]     ...future.conditions <- base::list()
[16:21:16.673]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:16.673]     if (FALSE) {
[16:21:16.673]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:16.673]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:16.673]     }
[16:21:16.673]     ...future.result <- base::tryCatch({
[16:21:16.673]         base::withCallingHandlers({
[16:21:16.673]             ...future.value <- base::withVisible(base::local({
[16:21:16.673]                 a * b
[16:21:16.673]             }))
[16:21:16.673]             future::FutureResult(value = ...future.value$value, 
[16:21:16.673]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:16.673]                   ...future.rng), globalenv = if (FALSE) 
[16:21:16.673]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:16.673]                     ...future.globalenv.names))
[16:21:16.673]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:16.673]         }, condition = base::local({
[16:21:16.673]             c <- base::c
[16:21:16.673]             inherits <- base::inherits
[16:21:16.673]             invokeRestart <- base::invokeRestart
[16:21:16.673]             length <- base::length
[16:21:16.673]             list <- base::list
[16:21:16.673]             seq.int <- base::seq.int
[16:21:16.673]             signalCondition <- base::signalCondition
[16:21:16.673]             sys.calls <- base::sys.calls
[16:21:16.673]             `[[` <- base::`[[`
[16:21:16.673]             `+` <- base::`+`
[16:21:16.673]             `<<-` <- base::`<<-`
[16:21:16.673]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:16.673]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:16.673]                   3L)]
[16:21:16.673]             }
[16:21:16.673]             function(cond) {
[16:21:16.673]                 is_error <- inherits(cond, "error")
[16:21:16.673]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:16.673]                   NULL)
[16:21:16.673]                 if (is_error) {
[16:21:16.673]                   sessionInformation <- function() {
[16:21:16.673]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:16.673]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:16.673]                       search = base::search(), system = base::Sys.info())
[16:21:16.673]                   }
[16:21:16.673]                   ...future.conditions[[length(...future.conditions) + 
[16:21:16.673]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:16.673]                     cond$call), session = sessionInformation(), 
[16:21:16.673]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:16.673]                   signalCondition(cond)
[16:21:16.673]                 }
[16:21:16.673]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:16.673]                 "immediateCondition"))) {
[16:21:16.673]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:16.673]                   ...future.conditions[[length(...future.conditions) + 
[16:21:16.673]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:16.673]                   if (TRUE && !signal) {
[16:21:16.673]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.673]                     {
[16:21:16.673]                       inherits <- base::inherits
[16:21:16.673]                       invokeRestart <- base::invokeRestart
[16:21:16.673]                       is.null <- base::is.null
[16:21:16.673]                       muffled <- FALSE
[16:21:16.673]                       if (inherits(cond, "message")) {
[16:21:16.673]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:16.673]                         if (muffled) 
[16:21:16.673]                           invokeRestart("muffleMessage")
[16:21:16.673]                       }
[16:21:16.673]                       else if (inherits(cond, "warning")) {
[16:21:16.673]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:16.673]                         if (muffled) 
[16:21:16.673]                           invokeRestart("muffleWarning")
[16:21:16.673]                       }
[16:21:16.673]                       else if (inherits(cond, "condition")) {
[16:21:16.673]                         if (!is.null(pattern)) {
[16:21:16.673]                           computeRestarts <- base::computeRestarts
[16:21:16.673]                           grepl <- base::grepl
[16:21:16.673]                           restarts <- computeRestarts(cond)
[16:21:16.673]                           for (restart in restarts) {
[16:21:16.673]                             name <- restart$name
[16:21:16.673]                             if (is.null(name)) 
[16:21:16.673]                               next
[16:21:16.673]                             if (!grepl(pattern, name)) 
[16:21:16.673]                               next
[16:21:16.673]                             invokeRestart(restart)
[16:21:16.673]                             muffled <- TRUE
[16:21:16.673]                             break
[16:21:16.673]                           }
[16:21:16.673]                         }
[16:21:16.673]                       }
[16:21:16.673]                       invisible(muffled)
[16:21:16.673]                     }
[16:21:16.673]                     muffleCondition(cond, pattern = "^muffle")
[16:21:16.673]                   }
[16:21:16.673]                 }
[16:21:16.673]                 else {
[16:21:16.673]                   if (TRUE) {
[16:21:16.673]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:16.673]                     {
[16:21:16.673]                       inherits <- base::inherits
[16:21:16.673]                       invokeRestart <- base::invokeRestart
[16:21:16.673]                       is.null <- base::is.null
[16:21:16.673]                       muffled <- FALSE
[16:21:16.673]                       if (inherits(cond, "message")) {
[16:21:16.673]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:16.673]                         if (muffled) 
[16:21:16.673]                           invokeRestart("muffleMessage")
[16:21:16.673]                       }
[16:21:16.673]                       else if (inherits(cond, "warning")) {
[16:21:16.673]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:16.673]                         if (muffled) 
[16:21:16.673]                           invokeRestart("muffleWarning")
[16:21:16.673]                       }
[16:21:16.673]                       else if (inherits(cond, "condition")) {
[16:21:16.673]                         if (!is.null(pattern)) {
[16:21:16.673]                           computeRestarts <- base::computeRestarts
[16:21:16.673]                           grepl <- base::grepl
[16:21:16.673]                           restarts <- computeRestarts(cond)
[16:21:16.673]                           for (restart in restarts) {
[16:21:16.673]                             name <- restart$name
[16:21:16.673]                             if (is.null(name)) 
[16:21:16.673]                               next
[16:21:16.673]                             if (!grepl(pattern, name)) 
[16:21:16.673]                               next
[16:21:16.673]                             invokeRestart(restart)
[16:21:16.673]                             muffled <- TRUE
[16:21:16.673]                             break
[16:21:16.673]                           }
[16:21:16.673]                         }
[16:21:16.673]                       }
[16:21:16.673]                       invisible(muffled)
[16:21:16.673]                     }
[16:21:16.673]                     muffleCondition(cond, pattern = "^muffle")
[16:21:16.673]                   }
[16:21:16.673]                 }
[16:21:16.673]             }
[16:21:16.673]         }))
[16:21:16.673]     }, error = function(ex) {
[16:21:16.673]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:16.673]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:16.673]                 ...future.rng), started = ...future.startTime, 
[16:21:16.673]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:16.673]             version = "1.8"), class = "FutureResult")
[16:21:16.673]     }, finally = {
[16:21:16.673]         if (!identical(...future.workdir, getwd())) 
[16:21:16.673]             setwd(...future.workdir)
[16:21:16.673]         {
[16:21:16.673]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:16.673]                 ...future.oldOptions$nwarnings <- NULL
[16:21:16.673]             }
[16:21:16.673]             base::options(...future.oldOptions)
[16:21:16.673]             if (.Platform$OS.type == "windows") {
[16:21:16.673]                 old_names <- names(...future.oldEnvVars)
[16:21:16.673]                 envs <- base::Sys.getenv()
[16:21:16.673]                 names <- names(envs)
[16:21:16.673]                 common <- intersect(names, old_names)
[16:21:16.673]                 added <- setdiff(names, old_names)
[16:21:16.673]                 removed <- setdiff(old_names, names)
[16:21:16.673]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:16.673]                   envs[common]]
[16:21:16.673]                 NAMES <- toupper(changed)
[16:21:16.673]                 args <- list()
[16:21:16.673]                 for (kk in seq_along(NAMES)) {
[16:21:16.673]                   name <- changed[[kk]]
[16:21:16.673]                   NAME <- NAMES[[kk]]
[16:21:16.673]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.673]                     next
[16:21:16.673]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:16.673]                 }
[16:21:16.673]                 NAMES <- toupper(added)
[16:21:16.673]                 for (kk in seq_along(NAMES)) {
[16:21:16.673]                   name <- added[[kk]]
[16:21:16.673]                   NAME <- NAMES[[kk]]
[16:21:16.673]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.673]                     next
[16:21:16.673]                   args[[name]] <- ""
[16:21:16.673]                 }
[16:21:16.673]                 NAMES <- toupper(removed)
[16:21:16.673]                 for (kk in seq_along(NAMES)) {
[16:21:16.673]                   name <- removed[[kk]]
[16:21:16.673]                   NAME <- NAMES[[kk]]
[16:21:16.673]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:16.673]                     next
[16:21:16.673]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:16.673]                 }
[16:21:16.673]                 if (length(args) > 0) 
[16:21:16.673]                   base::do.call(base::Sys.setenv, args = args)
[16:21:16.673]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:16.673]             }
[16:21:16.673]             else {
[16:21:16.673]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:16.673]             }
[16:21:16.673]             {
[16:21:16.673]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:16.673]                   0L) {
[16:21:16.673]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:16.673]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:16.673]                   base::options(opts)
[16:21:16.673]                 }
[16:21:16.673]                 {
[16:21:16.673]                   {
[16:21:16.673]                     NULL
[16:21:16.673]                     RNGkind("Mersenne-Twister")
[16:21:16.673]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:21:16.673]                       inherits = FALSE)
[16:21:16.673]                   }
[16:21:16.673]                   options(future.plan = NULL)
[16:21:16.673]                   if (is.na(NA_character_)) 
[16:21:16.673]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:16.673]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:16.673]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:16.673]                     .init = FALSE)
[16:21:16.673]                 }
[16:21:16.673]             }
[16:21:16.673]         }
[16:21:16.673]     })
[16:21:16.673]     if (TRUE) {
[16:21:16.673]         base::sink(type = "output", split = FALSE)
[16:21:16.673]         if (TRUE) {
[16:21:16.673]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:16.673]         }
[16:21:16.673]         else {
[16:21:16.673]             ...future.result["stdout"] <- base::list(NULL)
[16:21:16.673]         }
[16:21:16.673]         base::close(...future.stdout)
[16:21:16.673]         ...future.stdout <- NULL
[16:21:16.673]     }
[16:21:16.673]     ...future.result$conditions <- ...future.conditions
[16:21:16.673]     ...future.result$finished <- base::Sys.time()
[16:21:16.673]     ...future.result
[16:21:16.673] }
[16:21:16.674] assign_globals() ...
[16:21:16.675] List of 2
[16:21:16.675]  $ a: num 2
[16:21:16.675]  $ b: num 3
[16:21:16.675]  - attr(*, "where")=List of 2
[16:21:16.675]   ..$ a:<environment: R_EmptyEnv> 
[16:21:16.675]   ..$ b:<environment: R_EmptyEnv> 
[16:21:16.675]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:21:16.675]  - attr(*, "resolved")= logi FALSE
[16:21:16.675]  - attr(*, "total_size")= num 112
[16:21:16.678] - copied ‘a’ to environment
[16:21:16.678] - copied ‘b’ to environment
[16:21:16.678] assign_globals() ... done
[16:21:16.679] plan(): Setting new future strategy stack:
[16:21:16.679] List of future strategies:
[16:21:16.679] 1. sequential:
[16:21:16.679]    - args: function (..., envir = parent.frame())
[16:21:16.679]    - tweaked: FALSE
[16:21:16.679]    - call: NULL
[16:21:16.679] plan(): nbrOfWorkers() = 1
[16:21:16.680] plan(): Setting new future strategy stack:
[16:21:16.680] List of future strategies:
[16:21:16.680] 1. multicore:
[16:21:16.680]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:21:16.680]    - tweaked: FALSE
[16:21:16.680]    - call: plan(multicore)
[16:21:16.684] plan(): nbrOfWorkers() = 2
[16:21:16.685] SequentialFuture started (and completed)
[1] 6
*** multicore(..., workers = 1L) ... DONE
Testing with 2 cores ... DONE
> 
> message("*** multicore() ... DONE")
*** multicore() ... DONE
> 
> source("incl/end.R")
[16:21:16.686] plan(): Setting new future strategy stack:
[16:21:16.686] List of future strategies:
[16:21:16.686] 1. FutureStrategy:
[16:21:16.686]    - args: function (..., envir = parent.frame())
[16:21:16.686]    - tweaked: FALSE
[16:21:16.686]    - call: future::plan(oplan)
[16:21:16.686] plan(): nbrOfWorkers() = 1
> 
