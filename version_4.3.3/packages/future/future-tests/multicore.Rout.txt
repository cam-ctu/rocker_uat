
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[13:37:08.035] plan(): Setting new future strategy stack:
[13:37:08.035] List of future strategies:
[13:37:08.035] 1. sequential:
[13:37:08.035]    - args: function (..., envir = parent.frame())
[13:37:08.035]    - tweaked: FALSE
[13:37:08.035]    - call: future::plan("sequential")
[13:37:08.049] plan(): nbrOfWorkers() = 1
> library("listenv")
> plan(multicore)
[13:37:08.061] plan(): Setting new future strategy stack:
[13:37:08.061] List of future strategies:
[13:37:08.061] 1. multicore:
[13:37:08.061]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:37:08.061]    - tweaked: FALSE
[13:37:08.061]    - call: plan(multicore)
[13:37:08.075] plan(): nbrOfWorkers() = 2
> 
> message("*** multicore() ...")
*** multicore() ...
> 
> for (cores in 1:min(2L, availableCores("multicore"))) {
+   message(sprintf("Testing with %d cores ...", cores))
+   options(mc.cores = cores)
+ 
+   if (!supportsMulticore()) {
+     message(sprintf("Multicore futures are not supporting on '%s'. Falling back to use synchronous sequential futures", .Platform$OS.type))
+   }
+ 
+   nworkers <- nbrOfWorkers()
+   message("Number of workers: ", nworkers)
+   stopifnot(nworkers == cores)
+   
+   for (globals in c(FALSE, TRUE)) {
+ 
+     message(sprintf("*** multicore(..., globals = %s) without globals", globals))
+   
+     f <- multicore({
+       42L
+     }, globals = globals)
+     stopifnot(inherits(f, "MulticoreFuture") || ((cores ==1 || !supportsMulticore()) && inherits(f, "SequentialFuture")))
+   
+     print(resolved(f))
+     y <- value(f)
+     print(y)
+     stopifnot(y == 42L)
+   
+   
+     message(sprintf("*** multicore(..., globals = %s) with globals", globals))
+     ## A global variable
+     a <- 0
+     f <- multicore({
+       b <- 3
+       c <- 2
+       a * b * c
+     }, globals = globals)
+     print(f)
+   
+   
+     ## A multicore future is evaluated in a separated
+     ## forked process.  Changing the value of a global
+     ## variable should not affect the result of the
+     ## future.
+     a <- 7  ## Make sure globals are frozen
+     v <- value(f)
+     print(v)
+     stopifnot(v == 0)
+   
+   
+     message(sprintf("*** multicore(..., globals = %s) with globals and blocking", globals))
+     x <- listenv()
+     for (ii in 1:4) {
+       message(sprintf(" - Creating multicore future #%d ...", ii))
+       x[[ii]] <- multicore({ ii }, globals = globals)
+     }
+     message(sprintf(" - Resolving %d multicore futures", length(x)))
+     v <- sapply(x, FUN = value)
+     stopifnot(all(v == 1:4))
+   
+   
+     message(sprintf("*** multicore(..., globals = %s) and errors", globals))
+     f <- multicore({
+       stop("Whoops!")
+       1
+     }, globals = globals)
+     print(f)
+     v <- value(f, signal = FALSE)
+     print(v)
+     stopifnot(inherits(v, "simpleError"))
+   
+     res <- try(value(f), silent = TRUE)
+     print(res)
+     stopifnot(inherits(res, "try-error"))
+   
+     ## Error is repeated
+     res <- try(value(f), silent = TRUE)
+     print(res)
+     stopifnot(inherits(res, "try-error"))
+ 
+     ## Custom error class
+     f <- multicore({
+       stop(structure(list(message = "boom"),
+                      class = c("MyError", "error", "condition")))
+     })
+     print(f)
+     v <- value(f, signal = FALSE)
+     print(v)
+     stopifnot(inherits(v, "error"), inherits(v, "MyError"))
+   
+     ## Make sure error is signaled
+     res <- tryCatch(value(f), error = identity)
+     stopifnot(inherits(res, "error"))
+   
+     ## Issue #200: Custom condition class attributes are lost 
+     stopifnot(inherits(res, "MyError"))    
+   } # for (globals ...)
+ 
+ 
+   message("*** multicore(..., workers = 1L) ...")
+ 
+   a <- 2
+   b <- 3
+   yTruth <- a * b
+ 
+   f <- multicore({ a * b }, globals = TRUE, workers = 1L)
+   rm(list = c("a", "b"))
+ 
+   v <- value(f)
+   print(v)
+   stopifnot(v == yTruth)
+ 
+   message("*** multicore(..., workers = 1L) ... DONE")
+ 
+   message(sprintf("Testing with %d cores ... DONE", cores))
+ } ## for (cores ...)
Testing with 1 cores ...
Number of workers: 1
*** multicore(..., globals = FALSE) without globals
[13:37:08.129] getGlobalsAndPackages() ...
[13:37:08.129] Not searching for globals
[13:37:08.129] - globals: [0] <none>
[13:37:08.129] getGlobalsAndPackages() ... DONE
[13:37:08.130] Packages needed by the future expression (n = 0): <none>
[13:37:08.130] Packages needed by future strategies (n = 0): <none>
[13:37:08.131] {
[13:37:08.131]     {
[13:37:08.131]         {
[13:37:08.131]             ...future.startTime <- base::Sys.time()
[13:37:08.131]             {
[13:37:08.131]                 {
[13:37:08.131]                   {
[13:37:08.131]                     base::local({
[13:37:08.131]                       has_future <- base::requireNamespace("future", 
[13:37:08.131]                         quietly = TRUE)
[13:37:08.131]                       if (has_future) {
[13:37:08.131]                         ns <- base::getNamespace("future")
[13:37:08.131]                         version <- ns[[".package"]][["version"]]
[13:37:08.131]                         if (is.null(version)) 
[13:37:08.131]                           version <- utils::packageVersion("future")
[13:37:08.131]                       }
[13:37:08.131]                       else {
[13:37:08.131]                         version <- NULL
[13:37:08.131]                       }
[13:37:08.131]                       if (!has_future || version < "1.8.0") {
[13:37:08.131]                         info <- base::c(r_version = base::gsub("R version ", 
[13:37:08.131]                           "", base::R.version$version.string), 
[13:37:08.131]                           platform = base::sprintf("%s (%s-bit)", 
[13:37:08.131]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:08.131]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:08.131]                             "release", "version")], collapse = " "), 
[13:37:08.131]                           hostname = base::Sys.info()[["nodename"]])
[13:37:08.131]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:37:08.131]                           info)
[13:37:08.131]                         info <- base::paste(info, collapse = "; ")
[13:37:08.131]                         if (!has_future) {
[13:37:08.131]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:08.131]                             info)
[13:37:08.131]                         }
[13:37:08.131]                         else {
[13:37:08.131]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:08.131]                             info, version)
[13:37:08.131]                         }
[13:37:08.131]                         base::stop(msg)
[13:37:08.131]                       }
[13:37:08.131]                     })
[13:37:08.131]                   }
[13:37:08.131]                   ...future.strategy.old <- future::plan("list")
[13:37:08.131]                   options(future.plan = NULL)
[13:37:08.131]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.131]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:08.131]                 }
[13:37:08.131]                 ...future.workdir <- getwd()
[13:37:08.131]             }
[13:37:08.131]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:08.131]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:08.131]         }
[13:37:08.131]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:08.131]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:08.131]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:08.131]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:08.131]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:08.131]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:08.131]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:08.131]             base::names(...future.oldOptions))
[13:37:08.131]     }
[13:37:08.131]     if (FALSE) {
[13:37:08.131]     }
[13:37:08.131]     else {
[13:37:08.131]         if (TRUE) {
[13:37:08.131]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:08.131]                 open = "w")
[13:37:08.131]         }
[13:37:08.131]         else {
[13:37:08.131]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:08.131]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:08.131]         }
[13:37:08.131]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:08.131]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:08.131]             base::sink(type = "output", split = FALSE)
[13:37:08.131]             base::close(...future.stdout)
[13:37:08.131]         }, add = TRUE)
[13:37:08.131]     }
[13:37:08.131]     ...future.frame <- base::sys.nframe()
[13:37:08.131]     ...future.conditions <- base::list()
[13:37:08.131]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:08.131]     if (FALSE) {
[13:37:08.131]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:08.131]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:08.131]     }
[13:37:08.131]     ...future.result <- base::tryCatch({
[13:37:08.131]         base::withCallingHandlers({
[13:37:08.131]             ...future.value <- base::withVisible(base::local({
[13:37:08.131]                 42L
[13:37:08.131]             }))
[13:37:08.131]             future::FutureResult(value = ...future.value$value, 
[13:37:08.131]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.131]                   ...future.rng), globalenv = if (FALSE) 
[13:37:08.131]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:08.131]                     ...future.globalenv.names))
[13:37:08.131]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:08.131]         }, condition = base::local({
[13:37:08.131]             c <- base::c
[13:37:08.131]             inherits <- base::inherits
[13:37:08.131]             invokeRestart <- base::invokeRestart
[13:37:08.131]             length <- base::length
[13:37:08.131]             list <- base::list
[13:37:08.131]             seq.int <- base::seq.int
[13:37:08.131]             signalCondition <- base::signalCondition
[13:37:08.131]             sys.calls <- base::sys.calls
[13:37:08.131]             `[[` <- base::`[[`
[13:37:08.131]             `+` <- base::`+`
[13:37:08.131]             `<<-` <- base::`<<-`
[13:37:08.131]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:08.131]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:08.131]                   3L)]
[13:37:08.131]             }
[13:37:08.131]             function(cond) {
[13:37:08.131]                 is_error <- inherits(cond, "error")
[13:37:08.131]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:08.131]                   NULL)
[13:37:08.131]                 if (is_error) {
[13:37:08.131]                   sessionInformation <- function() {
[13:37:08.131]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:08.131]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:08.131]                       search = base::search(), system = base::Sys.info())
[13:37:08.131]                   }
[13:37:08.131]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.131]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:08.131]                     cond$call), session = sessionInformation(), 
[13:37:08.131]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:08.131]                   signalCondition(cond)
[13:37:08.131]                 }
[13:37:08.131]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:08.131]                 "immediateCondition"))) {
[13:37:08.131]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:08.131]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.131]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:08.131]                   if (TRUE && !signal) {
[13:37:08.131]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.131]                     {
[13:37:08.131]                       inherits <- base::inherits
[13:37:08.131]                       invokeRestart <- base::invokeRestart
[13:37:08.131]                       is.null <- base::is.null
[13:37:08.131]                       muffled <- FALSE
[13:37:08.131]                       if (inherits(cond, "message")) {
[13:37:08.131]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.131]                         if (muffled) 
[13:37:08.131]                           invokeRestart("muffleMessage")
[13:37:08.131]                       }
[13:37:08.131]                       else if (inherits(cond, "warning")) {
[13:37:08.131]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.131]                         if (muffled) 
[13:37:08.131]                           invokeRestart("muffleWarning")
[13:37:08.131]                       }
[13:37:08.131]                       else if (inherits(cond, "condition")) {
[13:37:08.131]                         if (!is.null(pattern)) {
[13:37:08.131]                           computeRestarts <- base::computeRestarts
[13:37:08.131]                           grepl <- base::grepl
[13:37:08.131]                           restarts <- computeRestarts(cond)
[13:37:08.131]                           for (restart in restarts) {
[13:37:08.131]                             name <- restart$name
[13:37:08.131]                             if (is.null(name)) 
[13:37:08.131]                               next
[13:37:08.131]                             if (!grepl(pattern, name)) 
[13:37:08.131]                               next
[13:37:08.131]                             invokeRestart(restart)
[13:37:08.131]                             muffled <- TRUE
[13:37:08.131]                             break
[13:37:08.131]                           }
[13:37:08.131]                         }
[13:37:08.131]                       }
[13:37:08.131]                       invisible(muffled)
[13:37:08.131]                     }
[13:37:08.131]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.131]                   }
[13:37:08.131]                 }
[13:37:08.131]                 else {
[13:37:08.131]                   if (TRUE) {
[13:37:08.131]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.131]                     {
[13:37:08.131]                       inherits <- base::inherits
[13:37:08.131]                       invokeRestart <- base::invokeRestart
[13:37:08.131]                       is.null <- base::is.null
[13:37:08.131]                       muffled <- FALSE
[13:37:08.131]                       if (inherits(cond, "message")) {
[13:37:08.131]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.131]                         if (muffled) 
[13:37:08.131]                           invokeRestart("muffleMessage")
[13:37:08.131]                       }
[13:37:08.131]                       else if (inherits(cond, "warning")) {
[13:37:08.131]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.131]                         if (muffled) 
[13:37:08.131]                           invokeRestart("muffleWarning")
[13:37:08.131]                       }
[13:37:08.131]                       else if (inherits(cond, "condition")) {
[13:37:08.131]                         if (!is.null(pattern)) {
[13:37:08.131]                           computeRestarts <- base::computeRestarts
[13:37:08.131]                           grepl <- base::grepl
[13:37:08.131]                           restarts <- computeRestarts(cond)
[13:37:08.131]                           for (restart in restarts) {
[13:37:08.131]                             name <- restart$name
[13:37:08.131]                             if (is.null(name)) 
[13:37:08.131]                               next
[13:37:08.131]                             if (!grepl(pattern, name)) 
[13:37:08.131]                               next
[13:37:08.131]                             invokeRestart(restart)
[13:37:08.131]                             muffled <- TRUE
[13:37:08.131]                             break
[13:37:08.131]                           }
[13:37:08.131]                         }
[13:37:08.131]                       }
[13:37:08.131]                       invisible(muffled)
[13:37:08.131]                     }
[13:37:08.131]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.131]                   }
[13:37:08.131]                 }
[13:37:08.131]             }
[13:37:08.131]         }))
[13:37:08.131]     }, error = function(ex) {
[13:37:08.131]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:08.131]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.131]                 ...future.rng), started = ...future.startTime, 
[13:37:08.131]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:08.131]             version = "1.8"), class = "FutureResult")
[13:37:08.131]     }, finally = {
[13:37:08.131]         if (!identical(...future.workdir, getwd())) 
[13:37:08.131]             setwd(...future.workdir)
[13:37:08.131]         {
[13:37:08.131]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:08.131]                 ...future.oldOptions$nwarnings <- NULL
[13:37:08.131]             }
[13:37:08.131]             base::options(...future.oldOptions)
[13:37:08.131]             if (.Platform$OS.type == "windows") {
[13:37:08.131]                 old_names <- names(...future.oldEnvVars)
[13:37:08.131]                 envs <- base::Sys.getenv()
[13:37:08.131]                 names <- names(envs)
[13:37:08.131]                 common <- intersect(names, old_names)
[13:37:08.131]                 added <- setdiff(names, old_names)
[13:37:08.131]                 removed <- setdiff(old_names, names)
[13:37:08.131]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:08.131]                   envs[common]]
[13:37:08.131]                 NAMES <- toupper(changed)
[13:37:08.131]                 args <- list()
[13:37:08.131]                 for (kk in seq_along(NAMES)) {
[13:37:08.131]                   name <- changed[[kk]]
[13:37:08.131]                   NAME <- NAMES[[kk]]
[13:37:08.131]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.131]                     next
[13:37:08.131]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.131]                 }
[13:37:08.131]                 NAMES <- toupper(added)
[13:37:08.131]                 for (kk in seq_along(NAMES)) {
[13:37:08.131]                   name <- added[[kk]]
[13:37:08.131]                   NAME <- NAMES[[kk]]
[13:37:08.131]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.131]                     next
[13:37:08.131]                   args[[name]] <- ""
[13:37:08.131]                 }
[13:37:08.131]                 NAMES <- toupper(removed)
[13:37:08.131]                 for (kk in seq_along(NAMES)) {
[13:37:08.131]                   name <- removed[[kk]]
[13:37:08.131]                   NAME <- NAMES[[kk]]
[13:37:08.131]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.131]                     next
[13:37:08.131]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.131]                 }
[13:37:08.131]                 if (length(args) > 0) 
[13:37:08.131]                   base::do.call(base::Sys.setenv, args = args)
[13:37:08.131]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:08.131]             }
[13:37:08.131]             else {
[13:37:08.131]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:08.131]             }
[13:37:08.131]             {
[13:37:08.131]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:08.131]                   0L) {
[13:37:08.131]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:08.131]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:08.131]                   base::options(opts)
[13:37:08.131]                 }
[13:37:08.131]                 {
[13:37:08.131]                   {
[13:37:08.131]                     NULL
[13:37:08.131]                     RNGkind("Mersenne-Twister")
[13:37:08.131]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:37:08.131]                       inherits = FALSE)
[13:37:08.131]                   }
[13:37:08.131]                   options(future.plan = NULL)
[13:37:08.131]                   if (is.na(NA_character_)) 
[13:37:08.131]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.131]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:08.131]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:08.131]                     .init = FALSE)
[13:37:08.131]                 }
[13:37:08.131]             }
[13:37:08.131]         }
[13:37:08.131]     })
[13:37:08.131]     if (TRUE) {
[13:37:08.131]         base::sink(type = "output", split = FALSE)
[13:37:08.131]         if (TRUE) {
[13:37:08.131]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:08.131]         }
[13:37:08.131]         else {
[13:37:08.131]             ...future.result["stdout"] <- base::list(NULL)
[13:37:08.131]         }
[13:37:08.131]         base::close(...future.stdout)
[13:37:08.131]         ...future.stdout <- NULL
[13:37:08.131]     }
[13:37:08.131]     ...future.result$conditions <- ...future.conditions
[13:37:08.131]     ...future.result$finished <- base::Sys.time()
[13:37:08.131]     ...future.result
[13:37:08.131] }
[13:37:08.133] plan(): Setting new future strategy stack:
[13:37:08.133] List of future strategies:
[13:37:08.133] 1. sequential:
[13:37:08.133]    - args: function (..., envir = parent.frame())
[13:37:08.133]    - tweaked: FALSE
[13:37:08.133]    - call: NULL
[13:37:08.133] plan(): nbrOfWorkers() = 1
[13:37:08.134] plan(): Setting new future strategy stack:
[13:37:08.135] List of future strategies:
[13:37:08.135] 1. multicore:
[13:37:08.135]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:37:08.135]    - tweaked: FALSE
[13:37:08.135]    - call: plan(multicore)
[13:37:08.138] plan(): nbrOfWorkers() = 1
[13:37:08.138] SequentialFuture started (and completed)
[13:37:08.139] resolved() for ‘SequentialFuture’ ...
[13:37:08.139] - state: ‘finished’
[13:37:08.139] - run: TRUE
[13:37:08.139] - result: ‘FutureResult’
[13:37:08.139] resolved() for ‘SequentialFuture’ ... done
[1] TRUE
[1] 42
*** multicore(..., globals = FALSE) with globals
[13:37:08.143] getGlobalsAndPackages() ...
[13:37:08.143] Not searching for globals
[13:37:08.143] - globals: [0] <none>
[13:37:08.143] getGlobalsAndPackages() ... DONE
[13:37:08.143] Packages needed by the future expression (n = 0): <none>
[13:37:08.144] Packages needed by future strategies (n = 0): <none>
[13:37:08.144] {
[13:37:08.144]     {
[13:37:08.144]         {
[13:37:08.144]             ...future.startTime <- base::Sys.time()
[13:37:08.144]             {
[13:37:08.144]                 {
[13:37:08.144]                   {
[13:37:08.144]                     base::local({
[13:37:08.144]                       has_future <- base::requireNamespace("future", 
[13:37:08.144]                         quietly = TRUE)
[13:37:08.144]                       if (has_future) {
[13:37:08.144]                         ns <- base::getNamespace("future")
[13:37:08.144]                         version <- ns[[".package"]][["version"]]
[13:37:08.144]                         if (is.null(version)) 
[13:37:08.144]                           version <- utils::packageVersion("future")
[13:37:08.144]                       }
[13:37:08.144]                       else {
[13:37:08.144]                         version <- NULL
[13:37:08.144]                       }
[13:37:08.144]                       if (!has_future || version < "1.8.0") {
[13:37:08.144]                         info <- base::c(r_version = base::gsub("R version ", 
[13:37:08.144]                           "", base::R.version$version.string), 
[13:37:08.144]                           platform = base::sprintf("%s (%s-bit)", 
[13:37:08.144]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:08.144]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:08.144]                             "release", "version")], collapse = " "), 
[13:37:08.144]                           hostname = base::Sys.info()[["nodename"]])
[13:37:08.144]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:37:08.144]                           info)
[13:37:08.144]                         info <- base::paste(info, collapse = "; ")
[13:37:08.144]                         if (!has_future) {
[13:37:08.144]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:08.144]                             info)
[13:37:08.144]                         }
[13:37:08.144]                         else {
[13:37:08.144]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:08.144]                             info, version)
[13:37:08.144]                         }
[13:37:08.144]                         base::stop(msg)
[13:37:08.144]                       }
[13:37:08.144]                     })
[13:37:08.144]                   }
[13:37:08.144]                   ...future.strategy.old <- future::plan("list")
[13:37:08.144]                   options(future.plan = NULL)
[13:37:08.144]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.144]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:08.144]                 }
[13:37:08.144]                 ...future.workdir <- getwd()
[13:37:08.144]             }
[13:37:08.144]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:08.144]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:08.144]         }
[13:37:08.144]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:08.144]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:08.144]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:08.144]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:08.144]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:08.144]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:08.144]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:08.144]             base::names(...future.oldOptions))
[13:37:08.144]     }
[13:37:08.144]     if (FALSE) {
[13:37:08.144]     }
[13:37:08.144]     else {
[13:37:08.144]         if (TRUE) {
[13:37:08.144]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:08.144]                 open = "w")
[13:37:08.144]         }
[13:37:08.144]         else {
[13:37:08.144]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:08.144]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:08.144]         }
[13:37:08.144]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:08.144]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:08.144]             base::sink(type = "output", split = FALSE)
[13:37:08.144]             base::close(...future.stdout)
[13:37:08.144]         }, add = TRUE)
[13:37:08.144]     }
[13:37:08.144]     ...future.frame <- base::sys.nframe()
[13:37:08.144]     ...future.conditions <- base::list()
[13:37:08.144]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:08.144]     if (FALSE) {
[13:37:08.144]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:08.144]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:08.144]     }
[13:37:08.144]     ...future.result <- base::tryCatch({
[13:37:08.144]         base::withCallingHandlers({
[13:37:08.144]             ...future.value <- base::withVisible(base::local({
[13:37:08.144]                 b <- 3
[13:37:08.144]                 c <- 2
[13:37:08.144]                 a * b * c
[13:37:08.144]             }))
[13:37:08.144]             future::FutureResult(value = ...future.value$value, 
[13:37:08.144]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.144]                   ...future.rng), globalenv = if (FALSE) 
[13:37:08.144]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:08.144]                     ...future.globalenv.names))
[13:37:08.144]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:08.144]         }, condition = base::local({
[13:37:08.144]             c <- base::c
[13:37:08.144]             inherits <- base::inherits
[13:37:08.144]             invokeRestart <- base::invokeRestart
[13:37:08.144]             length <- base::length
[13:37:08.144]             list <- base::list
[13:37:08.144]             seq.int <- base::seq.int
[13:37:08.144]             signalCondition <- base::signalCondition
[13:37:08.144]             sys.calls <- base::sys.calls
[13:37:08.144]             `[[` <- base::`[[`
[13:37:08.144]             `+` <- base::`+`
[13:37:08.144]             `<<-` <- base::`<<-`
[13:37:08.144]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:08.144]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:08.144]                   3L)]
[13:37:08.144]             }
[13:37:08.144]             function(cond) {
[13:37:08.144]                 is_error <- inherits(cond, "error")
[13:37:08.144]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:08.144]                   NULL)
[13:37:08.144]                 if (is_error) {
[13:37:08.144]                   sessionInformation <- function() {
[13:37:08.144]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:08.144]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:08.144]                       search = base::search(), system = base::Sys.info())
[13:37:08.144]                   }
[13:37:08.144]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.144]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:08.144]                     cond$call), session = sessionInformation(), 
[13:37:08.144]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:08.144]                   signalCondition(cond)
[13:37:08.144]                 }
[13:37:08.144]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:08.144]                 "immediateCondition"))) {
[13:37:08.144]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:08.144]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.144]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:08.144]                   if (TRUE && !signal) {
[13:37:08.144]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.144]                     {
[13:37:08.144]                       inherits <- base::inherits
[13:37:08.144]                       invokeRestart <- base::invokeRestart
[13:37:08.144]                       is.null <- base::is.null
[13:37:08.144]                       muffled <- FALSE
[13:37:08.144]                       if (inherits(cond, "message")) {
[13:37:08.144]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.144]                         if (muffled) 
[13:37:08.144]                           invokeRestart("muffleMessage")
[13:37:08.144]                       }
[13:37:08.144]                       else if (inherits(cond, "warning")) {
[13:37:08.144]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.144]                         if (muffled) 
[13:37:08.144]                           invokeRestart("muffleWarning")
[13:37:08.144]                       }
[13:37:08.144]                       else if (inherits(cond, "condition")) {
[13:37:08.144]                         if (!is.null(pattern)) {
[13:37:08.144]                           computeRestarts <- base::computeRestarts
[13:37:08.144]                           grepl <- base::grepl
[13:37:08.144]                           restarts <- computeRestarts(cond)
[13:37:08.144]                           for (restart in restarts) {
[13:37:08.144]                             name <- restart$name
[13:37:08.144]                             if (is.null(name)) 
[13:37:08.144]                               next
[13:37:08.144]                             if (!grepl(pattern, name)) 
[13:37:08.144]                               next
[13:37:08.144]                             invokeRestart(restart)
[13:37:08.144]                             muffled <- TRUE
[13:37:08.144]                             break
[13:37:08.144]                           }
[13:37:08.144]                         }
[13:37:08.144]                       }
[13:37:08.144]                       invisible(muffled)
[13:37:08.144]                     }
[13:37:08.144]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.144]                   }
[13:37:08.144]                 }
[13:37:08.144]                 else {
[13:37:08.144]                   if (TRUE) {
[13:37:08.144]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.144]                     {
[13:37:08.144]                       inherits <- base::inherits
[13:37:08.144]                       invokeRestart <- base::invokeRestart
[13:37:08.144]                       is.null <- base::is.null
[13:37:08.144]                       muffled <- FALSE
[13:37:08.144]                       if (inherits(cond, "message")) {
[13:37:08.144]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.144]                         if (muffled) 
[13:37:08.144]                           invokeRestart("muffleMessage")
[13:37:08.144]                       }
[13:37:08.144]                       else if (inherits(cond, "warning")) {
[13:37:08.144]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.144]                         if (muffled) 
[13:37:08.144]                           invokeRestart("muffleWarning")
[13:37:08.144]                       }
[13:37:08.144]                       else if (inherits(cond, "condition")) {
[13:37:08.144]                         if (!is.null(pattern)) {
[13:37:08.144]                           computeRestarts <- base::computeRestarts
[13:37:08.144]                           grepl <- base::grepl
[13:37:08.144]                           restarts <- computeRestarts(cond)
[13:37:08.144]                           for (restart in restarts) {
[13:37:08.144]                             name <- restart$name
[13:37:08.144]                             if (is.null(name)) 
[13:37:08.144]                               next
[13:37:08.144]                             if (!grepl(pattern, name)) 
[13:37:08.144]                               next
[13:37:08.144]                             invokeRestart(restart)
[13:37:08.144]                             muffled <- TRUE
[13:37:08.144]                             break
[13:37:08.144]                           }
[13:37:08.144]                         }
[13:37:08.144]                       }
[13:37:08.144]                       invisible(muffled)
[13:37:08.144]                     }
[13:37:08.144]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.144]                   }
[13:37:08.144]                 }
[13:37:08.144]             }
[13:37:08.144]         }))
[13:37:08.144]     }, error = function(ex) {
[13:37:08.144]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:08.144]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.144]                 ...future.rng), started = ...future.startTime, 
[13:37:08.144]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:08.144]             version = "1.8"), class = "FutureResult")
[13:37:08.144]     }, finally = {
[13:37:08.144]         if (!identical(...future.workdir, getwd())) 
[13:37:08.144]             setwd(...future.workdir)
[13:37:08.144]         {
[13:37:08.144]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:08.144]                 ...future.oldOptions$nwarnings <- NULL
[13:37:08.144]             }
[13:37:08.144]             base::options(...future.oldOptions)
[13:37:08.144]             if (.Platform$OS.type == "windows") {
[13:37:08.144]                 old_names <- names(...future.oldEnvVars)
[13:37:08.144]                 envs <- base::Sys.getenv()
[13:37:08.144]                 names <- names(envs)
[13:37:08.144]                 common <- intersect(names, old_names)
[13:37:08.144]                 added <- setdiff(names, old_names)
[13:37:08.144]                 removed <- setdiff(old_names, names)
[13:37:08.144]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:08.144]                   envs[common]]
[13:37:08.144]                 NAMES <- toupper(changed)
[13:37:08.144]                 args <- list()
[13:37:08.144]                 for (kk in seq_along(NAMES)) {
[13:37:08.144]                   name <- changed[[kk]]
[13:37:08.144]                   NAME <- NAMES[[kk]]
[13:37:08.144]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.144]                     next
[13:37:08.144]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.144]                 }
[13:37:08.144]                 NAMES <- toupper(added)
[13:37:08.144]                 for (kk in seq_along(NAMES)) {
[13:37:08.144]                   name <- added[[kk]]
[13:37:08.144]                   NAME <- NAMES[[kk]]
[13:37:08.144]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.144]                     next
[13:37:08.144]                   args[[name]] <- ""
[13:37:08.144]                 }
[13:37:08.144]                 NAMES <- toupper(removed)
[13:37:08.144]                 for (kk in seq_along(NAMES)) {
[13:37:08.144]                   name <- removed[[kk]]
[13:37:08.144]                   NAME <- NAMES[[kk]]
[13:37:08.144]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.144]                     next
[13:37:08.144]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.144]                 }
[13:37:08.144]                 if (length(args) > 0) 
[13:37:08.144]                   base::do.call(base::Sys.setenv, args = args)
[13:37:08.144]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:08.144]             }
[13:37:08.144]             else {
[13:37:08.144]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:08.144]             }
[13:37:08.144]             {
[13:37:08.144]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:08.144]                   0L) {
[13:37:08.144]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:08.144]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:08.144]                   base::options(opts)
[13:37:08.144]                 }
[13:37:08.144]                 {
[13:37:08.144]                   {
[13:37:08.144]                     NULL
[13:37:08.144]                     RNGkind("Mersenne-Twister")
[13:37:08.144]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:37:08.144]                       inherits = FALSE)
[13:37:08.144]                   }
[13:37:08.144]                   options(future.plan = NULL)
[13:37:08.144]                   if (is.na(NA_character_)) 
[13:37:08.144]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.144]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:08.144]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:08.144]                     .init = FALSE)
[13:37:08.144]                 }
[13:37:08.144]             }
[13:37:08.144]         }
[13:37:08.144]     })
[13:37:08.144]     if (TRUE) {
[13:37:08.144]         base::sink(type = "output", split = FALSE)
[13:37:08.144]         if (TRUE) {
[13:37:08.144]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:08.144]         }
[13:37:08.144]         else {
[13:37:08.144]             ...future.result["stdout"] <- base::list(NULL)
[13:37:08.144]         }
[13:37:08.144]         base::close(...future.stdout)
[13:37:08.144]         ...future.stdout <- NULL
[13:37:08.144]     }
[13:37:08.144]     ...future.result$conditions <- ...future.conditions
[13:37:08.144]     ...future.result$finished <- base::Sys.time()
[13:37:08.144]     ...future.result
[13:37:08.144] }
[13:37:08.146] plan(): Setting new future strategy stack:
[13:37:08.146] List of future strategies:
[13:37:08.146] 1. sequential:
[13:37:08.146]    - args: function (..., envir = parent.frame())
[13:37:08.146]    - tweaked: FALSE
[13:37:08.146]    - call: NULL
[13:37:08.146] plan(): nbrOfWorkers() = 1
[13:37:08.147] plan(): Setting new future strategy stack:
[13:37:08.147] List of future strategies:
[13:37:08.147] 1. multicore:
[13:37:08.147]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:37:08.147]    - tweaked: FALSE
[13:37:08.147]    - call: plan(multicore)
[13:37:08.150] plan(): nbrOfWorkers() = 1
[13:37:08.150] SequentialFuture started (and completed)
SequentialFuture:
Label: ‘<none>’
Expression:
{
    b <- 3
    c <- 2
    a * b * c
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 95e450d1-e7b8-6209-6c23-e4c8d06e1b18
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[1] 0
*** multicore(..., globals = FALSE) with globals and blocking
 - Creating multicore future #1 ...
[13:37:08.155] getGlobalsAndPackages() ...
[13:37:08.155] Not searching for globals
[13:37:08.155] - globals: [0] <none>
[13:37:08.155] getGlobalsAndPackages() ... DONE
[13:37:08.155] Packages needed by the future expression (n = 0): <none>
[13:37:08.156] Packages needed by future strategies (n = 0): <none>
[13:37:08.156] {
[13:37:08.156]     {
[13:37:08.156]         {
[13:37:08.156]             ...future.startTime <- base::Sys.time()
[13:37:08.156]             {
[13:37:08.156]                 {
[13:37:08.156]                   {
[13:37:08.156]                     base::local({
[13:37:08.156]                       has_future <- base::requireNamespace("future", 
[13:37:08.156]                         quietly = TRUE)
[13:37:08.156]                       if (has_future) {
[13:37:08.156]                         ns <- base::getNamespace("future")
[13:37:08.156]                         version <- ns[[".package"]][["version"]]
[13:37:08.156]                         if (is.null(version)) 
[13:37:08.156]                           version <- utils::packageVersion("future")
[13:37:08.156]                       }
[13:37:08.156]                       else {
[13:37:08.156]                         version <- NULL
[13:37:08.156]                       }
[13:37:08.156]                       if (!has_future || version < "1.8.0") {
[13:37:08.156]                         info <- base::c(r_version = base::gsub("R version ", 
[13:37:08.156]                           "", base::R.version$version.string), 
[13:37:08.156]                           platform = base::sprintf("%s (%s-bit)", 
[13:37:08.156]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:08.156]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:08.156]                             "release", "version")], collapse = " "), 
[13:37:08.156]                           hostname = base::Sys.info()[["nodename"]])
[13:37:08.156]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:37:08.156]                           info)
[13:37:08.156]                         info <- base::paste(info, collapse = "; ")
[13:37:08.156]                         if (!has_future) {
[13:37:08.156]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:08.156]                             info)
[13:37:08.156]                         }
[13:37:08.156]                         else {
[13:37:08.156]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:08.156]                             info, version)
[13:37:08.156]                         }
[13:37:08.156]                         base::stop(msg)
[13:37:08.156]                       }
[13:37:08.156]                     })
[13:37:08.156]                   }
[13:37:08.156]                   ...future.strategy.old <- future::plan("list")
[13:37:08.156]                   options(future.plan = NULL)
[13:37:08.156]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.156]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:08.156]                 }
[13:37:08.156]                 ...future.workdir <- getwd()
[13:37:08.156]             }
[13:37:08.156]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:08.156]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:08.156]         }
[13:37:08.156]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:08.156]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:08.156]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:08.156]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:08.156]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:08.156]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:08.156]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:08.156]             base::names(...future.oldOptions))
[13:37:08.156]     }
[13:37:08.156]     if (FALSE) {
[13:37:08.156]     }
[13:37:08.156]     else {
[13:37:08.156]         if (TRUE) {
[13:37:08.156]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:08.156]                 open = "w")
[13:37:08.156]         }
[13:37:08.156]         else {
[13:37:08.156]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:08.156]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:08.156]         }
[13:37:08.156]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:08.156]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:08.156]             base::sink(type = "output", split = FALSE)
[13:37:08.156]             base::close(...future.stdout)
[13:37:08.156]         }, add = TRUE)
[13:37:08.156]     }
[13:37:08.156]     ...future.frame <- base::sys.nframe()
[13:37:08.156]     ...future.conditions <- base::list()
[13:37:08.156]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:08.156]     if (FALSE) {
[13:37:08.156]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:08.156]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:08.156]     }
[13:37:08.156]     ...future.result <- base::tryCatch({
[13:37:08.156]         base::withCallingHandlers({
[13:37:08.156]             ...future.value <- base::withVisible(base::local({
[13:37:08.156]                 ii
[13:37:08.156]             }))
[13:37:08.156]             future::FutureResult(value = ...future.value$value, 
[13:37:08.156]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.156]                   ...future.rng), globalenv = if (FALSE) 
[13:37:08.156]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:08.156]                     ...future.globalenv.names))
[13:37:08.156]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:08.156]         }, condition = base::local({
[13:37:08.156]             c <- base::c
[13:37:08.156]             inherits <- base::inherits
[13:37:08.156]             invokeRestart <- base::invokeRestart
[13:37:08.156]             length <- base::length
[13:37:08.156]             list <- base::list
[13:37:08.156]             seq.int <- base::seq.int
[13:37:08.156]             signalCondition <- base::signalCondition
[13:37:08.156]             sys.calls <- base::sys.calls
[13:37:08.156]             `[[` <- base::`[[`
[13:37:08.156]             `+` <- base::`+`
[13:37:08.156]             `<<-` <- base::`<<-`
[13:37:08.156]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:08.156]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:08.156]                   3L)]
[13:37:08.156]             }
[13:37:08.156]             function(cond) {
[13:37:08.156]                 is_error <- inherits(cond, "error")
[13:37:08.156]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:08.156]                   NULL)
[13:37:08.156]                 if (is_error) {
[13:37:08.156]                   sessionInformation <- function() {
[13:37:08.156]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:08.156]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:08.156]                       search = base::search(), system = base::Sys.info())
[13:37:08.156]                   }
[13:37:08.156]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.156]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:08.156]                     cond$call), session = sessionInformation(), 
[13:37:08.156]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:08.156]                   signalCondition(cond)
[13:37:08.156]                 }
[13:37:08.156]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:08.156]                 "immediateCondition"))) {
[13:37:08.156]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:08.156]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.156]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:08.156]                   if (TRUE && !signal) {
[13:37:08.156]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.156]                     {
[13:37:08.156]                       inherits <- base::inherits
[13:37:08.156]                       invokeRestart <- base::invokeRestart
[13:37:08.156]                       is.null <- base::is.null
[13:37:08.156]                       muffled <- FALSE
[13:37:08.156]                       if (inherits(cond, "message")) {
[13:37:08.156]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.156]                         if (muffled) 
[13:37:08.156]                           invokeRestart("muffleMessage")
[13:37:08.156]                       }
[13:37:08.156]                       else if (inherits(cond, "warning")) {
[13:37:08.156]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.156]                         if (muffled) 
[13:37:08.156]                           invokeRestart("muffleWarning")
[13:37:08.156]                       }
[13:37:08.156]                       else if (inherits(cond, "condition")) {
[13:37:08.156]                         if (!is.null(pattern)) {
[13:37:08.156]                           computeRestarts <- base::computeRestarts
[13:37:08.156]                           grepl <- base::grepl
[13:37:08.156]                           restarts <- computeRestarts(cond)
[13:37:08.156]                           for (restart in restarts) {
[13:37:08.156]                             name <- restart$name
[13:37:08.156]                             if (is.null(name)) 
[13:37:08.156]                               next
[13:37:08.156]                             if (!grepl(pattern, name)) 
[13:37:08.156]                               next
[13:37:08.156]                             invokeRestart(restart)
[13:37:08.156]                             muffled <- TRUE
[13:37:08.156]                             break
[13:37:08.156]                           }
[13:37:08.156]                         }
[13:37:08.156]                       }
[13:37:08.156]                       invisible(muffled)
[13:37:08.156]                     }
[13:37:08.156]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.156]                   }
[13:37:08.156]                 }
[13:37:08.156]                 else {
[13:37:08.156]                   if (TRUE) {
[13:37:08.156]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.156]                     {
[13:37:08.156]                       inherits <- base::inherits
[13:37:08.156]                       invokeRestart <- base::invokeRestart
[13:37:08.156]                       is.null <- base::is.null
[13:37:08.156]                       muffled <- FALSE
[13:37:08.156]                       if (inherits(cond, "message")) {
[13:37:08.156]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.156]                         if (muffled) 
[13:37:08.156]                           invokeRestart("muffleMessage")
[13:37:08.156]                       }
[13:37:08.156]                       else if (inherits(cond, "warning")) {
[13:37:08.156]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.156]                         if (muffled) 
[13:37:08.156]                           invokeRestart("muffleWarning")
[13:37:08.156]                       }
[13:37:08.156]                       else if (inherits(cond, "condition")) {
[13:37:08.156]                         if (!is.null(pattern)) {
[13:37:08.156]                           computeRestarts <- base::computeRestarts
[13:37:08.156]                           grepl <- base::grepl
[13:37:08.156]                           restarts <- computeRestarts(cond)
[13:37:08.156]                           for (restart in restarts) {
[13:37:08.156]                             name <- restart$name
[13:37:08.156]                             if (is.null(name)) 
[13:37:08.156]                               next
[13:37:08.156]                             if (!grepl(pattern, name)) 
[13:37:08.156]                               next
[13:37:08.156]                             invokeRestart(restart)
[13:37:08.156]                             muffled <- TRUE
[13:37:08.156]                             break
[13:37:08.156]                           }
[13:37:08.156]                         }
[13:37:08.156]                       }
[13:37:08.156]                       invisible(muffled)
[13:37:08.156]                     }
[13:37:08.156]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.156]                   }
[13:37:08.156]                 }
[13:37:08.156]             }
[13:37:08.156]         }))
[13:37:08.156]     }, error = function(ex) {
[13:37:08.156]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:08.156]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.156]                 ...future.rng), started = ...future.startTime, 
[13:37:08.156]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:08.156]             version = "1.8"), class = "FutureResult")
[13:37:08.156]     }, finally = {
[13:37:08.156]         if (!identical(...future.workdir, getwd())) 
[13:37:08.156]             setwd(...future.workdir)
[13:37:08.156]         {
[13:37:08.156]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:08.156]                 ...future.oldOptions$nwarnings <- NULL
[13:37:08.156]             }
[13:37:08.156]             base::options(...future.oldOptions)
[13:37:08.156]             if (.Platform$OS.type == "windows") {
[13:37:08.156]                 old_names <- names(...future.oldEnvVars)
[13:37:08.156]                 envs <- base::Sys.getenv()
[13:37:08.156]                 names <- names(envs)
[13:37:08.156]                 common <- intersect(names, old_names)
[13:37:08.156]                 added <- setdiff(names, old_names)
[13:37:08.156]                 removed <- setdiff(old_names, names)
[13:37:08.156]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:08.156]                   envs[common]]
[13:37:08.156]                 NAMES <- toupper(changed)
[13:37:08.156]                 args <- list()
[13:37:08.156]                 for (kk in seq_along(NAMES)) {
[13:37:08.156]                   name <- changed[[kk]]
[13:37:08.156]                   NAME <- NAMES[[kk]]
[13:37:08.156]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.156]                     next
[13:37:08.156]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.156]                 }
[13:37:08.156]                 NAMES <- toupper(added)
[13:37:08.156]                 for (kk in seq_along(NAMES)) {
[13:37:08.156]                   name <- added[[kk]]
[13:37:08.156]                   NAME <- NAMES[[kk]]
[13:37:08.156]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.156]                     next
[13:37:08.156]                   args[[name]] <- ""
[13:37:08.156]                 }
[13:37:08.156]                 NAMES <- toupper(removed)
[13:37:08.156]                 for (kk in seq_along(NAMES)) {
[13:37:08.156]                   name <- removed[[kk]]
[13:37:08.156]                   NAME <- NAMES[[kk]]
[13:37:08.156]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.156]                     next
[13:37:08.156]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.156]                 }
[13:37:08.156]                 if (length(args) > 0) 
[13:37:08.156]                   base::do.call(base::Sys.setenv, args = args)
[13:37:08.156]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:08.156]             }
[13:37:08.156]             else {
[13:37:08.156]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:08.156]             }
[13:37:08.156]             {
[13:37:08.156]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:08.156]                   0L) {
[13:37:08.156]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:08.156]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:08.156]                   base::options(opts)
[13:37:08.156]                 }
[13:37:08.156]                 {
[13:37:08.156]                   {
[13:37:08.156]                     NULL
[13:37:08.156]                     RNGkind("Mersenne-Twister")
[13:37:08.156]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:37:08.156]                       inherits = FALSE)
[13:37:08.156]                   }
[13:37:08.156]                   options(future.plan = NULL)
[13:37:08.156]                   if (is.na(NA_character_)) 
[13:37:08.156]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.156]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:08.156]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:08.156]                     .init = FALSE)
[13:37:08.156]                 }
[13:37:08.156]             }
[13:37:08.156]         }
[13:37:08.156]     })
[13:37:08.156]     if (TRUE) {
[13:37:08.156]         base::sink(type = "output", split = FALSE)
[13:37:08.156]         if (TRUE) {
[13:37:08.156]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:08.156]         }
[13:37:08.156]         else {
[13:37:08.156]             ...future.result["stdout"] <- base::list(NULL)
[13:37:08.156]         }
[13:37:08.156]         base::close(...future.stdout)
[13:37:08.156]         ...future.stdout <- NULL
[13:37:08.156]     }
[13:37:08.156]     ...future.result$conditions <- ...future.conditions
[13:37:08.156]     ...future.result$finished <- base::Sys.time()
[13:37:08.156]     ...future.result
[13:37:08.156] }
[13:37:08.158] plan(): Setting new future strategy stack:
[13:37:08.158] List of future strategies:
[13:37:08.158] 1. sequential:
[13:37:08.158]    - args: function (..., envir = parent.frame())
[13:37:08.158]    - tweaked: FALSE
[13:37:08.158]    - call: NULL
[13:37:08.158] plan(): nbrOfWorkers() = 1
[13:37:08.159] plan(): Setting new future strategy stack:
[13:37:08.159] List of future strategies:
[13:37:08.159] 1. multicore:
[13:37:08.159]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:37:08.159]    - tweaked: FALSE
[13:37:08.159]    - call: plan(multicore)
[13:37:08.162] plan(): nbrOfWorkers() = 1
[13:37:08.162] SequentialFuture started (and completed)
 - Creating multicore future #2 ...
[13:37:08.167] getGlobalsAndPackages() ...
[13:37:08.167] Not searching for globals
[13:37:08.168] - globals: [0] <none>
[13:37:08.168] getGlobalsAndPackages() ... DONE
[13:37:08.168] Packages needed by the future expression (n = 0): <none>
[13:37:08.168] Packages needed by future strategies (n = 0): <none>
[13:37:08.168] {
[13:37:08.168]     {
[13:37:08.168]         {
[13:37:08.168]             ...future.startTime <- base::Sys.time()
[13:37:08.168]             {
[13:37:08.168]                 {
[13:37:08.168]                   {
[13:37:08.168]                     base::local({
[13:37:08.168]                       has_future <- base::requireNamespace("future", 
[13:37:08.168]                         quietly = TRUE)
[13:37:08.168]                       if (has_future) {
[13:37:08.168]                         ns <- base::getNamespace("future")
[13:37:08.168]                         version <- ns[[".package"]][["version"]]
[13:37:08.168]                         if (is.null(version)) 
[13:37:08.168]                           version <- utils::packageVersion("future")
[13:37:08.168]                       }
[13:37:08.168]                       else {
[13:37:08.168]                         version <- NULL
[13:37:08.168]                       }
[13:37:08.168]                       if (!has_future || version < "1.8.0") {
[13:37:08.168]                         info <- base::c(r_version = base::gsub("R version ", 
[13:37:08.168]                           "", base::R.version$version.string), 
[13:37:08.168]                           platform = base::sprintf("%s (%s-bit)", 
[13:37:08.168]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:08.168]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:08.168]                             "release", "version")], collapse = " "), 
[13:37:08.168]                           hostname = base::Sys.info()[["nodename"]])
[13:37:08.168]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:37:08.168]                           info)
[13:37:08.168]                         info <- base::paste(info, collapse = "; ")
[13:37:08.168]                         if (!has_future) {
[13:37:08.168]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:08.168]                             info)
[13:37:08.168]                         }
[13:37:08.168]                         else {
[13:37:08.168]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:08.168]                             info, version)
[13:37:08.168]                         }
[13:37:08.168]                         base::stop(msg)
[13:37:08.168]                       }
[13:37:08.168]                     })
[13:37:08.168]                   }
[13:37:08.168]                   ...future.strategy.old <- future::plan("list")
[13:37:08.168]                   options(future.plan = NULL)
[13:37:08.168]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.168]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:08.168]                 }
[13:37:08.168]                 ...future.workdir <- getwd()
[13:37:08.168]             }
[13:37:08.168]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:08.168]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:08.168]         }
[13:37:08.168]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:08.168]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:08.168]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:08.168]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:08.168]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:08.168]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:08.168]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:08.168]             base::names(...future.oldOptions))
[13:37:08.168]     }
[13:37:08.168]     if (FALSE) {
[13:37:08.168]     }
[13:37:08.168]     else {
[13:37:08.168]         if (TRUE) {
[13:37:08.168]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:08.168]                 open = "w")
[13:37:08.168]         }
[13:37:08.168]         else {
[13:37:08.168]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:08.168]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:08.168]         }
[13:37:08.168]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:08.168]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:08.168]             base::sink(type = "output", split = FALSE)
[13:37:08.168]             base::close(...future.stdout)
[13:37:08.168]         }, add = TRUE)
[13:37:08.168]     }
[13:37:08.168]     ...future.frame <- base::sys.nframe()
[13:37:08.168]     ...future.conditions <- base::list()
[13:37:08.168]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:08.168]     if (FALSE) {
[13:37:08.168]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:08.168]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:08.168]     }
[13:37:08.168]     ...future.result <- base::tryCatch({
[13:37:08.168]         base::withCallingHandlers({
[13:37:08.168]             ...future.value <- base::withVisible(base::local({
[13:37:08.168]                 ii
[13:37:08.168]             }))
[13:37:08.168]             future::FutureResult(value = ...future.value$value, 
[13:37:08.168]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.168]                   ...future.rng), globalenv = if (FALSE) 
[13:37:08.168]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:08.168]                     ...future.globalenv.names))
[13:37:08.168]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:08.168]         }, condition = base::local({
[13:37:08.168]             c <- base::c
[13:37:08.168]             inherits <- base::inherits
[13:37:08.168]             invokeRestart <- base::invokeRestart
[13:37:08.168]             length <- base::length
[13:37:08.168]             list <- base::list
[13:37:08.168]             seq.int <- base::seq.int
[13:37:08.168]             signalCondition <- base::signalCondition
[13:37:08.168]             sys.calls <- base::sys.calls
[13:37:08.168]             `[[` <- base::`[[`
[13:37:08.168]             `+` <- base::`+`
[13:37:08.168]             `<<-` <- base::`<<-`
[13:37:08.168]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:08.168]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:08.168]                   3L)]
[13:37:08.168]             }
[13:37:08.168]             function(cond) {
[13:37:08.168]                 is_error <- inherits(cond, "error")
[13:37:08.168]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:08.168]                   NULL)
[13:37:08.168]                 if (is_error) {
[13:37:08.168]                   sessionInformation <- function() {
[13:37:08.168]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:08.168]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:08.168]                       search = base::search(), system = base::Sys.info())
[13:37:08.168]                   }
[13:37:08.168]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.168]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:08.168]                     cond$call), session = sessionInformation(), 
[13:37:08.168]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:08.168]                   signalCondition(cond)
[13:37:08.168]                 }
[13:37:08.168]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:08.168]                 "immediateCondition"))) {
[13:37:08.168]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:08.168]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.168]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:08.168]                   if (TRUE && !signal) {
[13:37:08.168]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.168]                     {
[13:37:08.168]                       inherits <- base::inherits
[13:37:08.168]                       invokeRestart <- base::invokeRestart
[13:37:08.168]                       is.null <- base::is.null
[13:37:08.168]                       muffled <- FALSE
[13:37:08.168]                       if (inherits(cond, "message")) {
[13:37:08.168]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.168]                         if (muffled) 
[13:37:08.168]                           invokeRestart("muffleMessage")
[13:37:08.168]                       }
[13:37:08.168]                       else if (inherits(cond, "warning")) {
[13:37:08.168]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.168]                         if (muffled) 
[13:37:08.168]                           invokeRestart("muffleWarning")
[13:37:08.168]                       }
[13:37:08.168]                       else if (inherits(cond, "condition")) {
[13:37:08.168]                         if (!is.null(pattern)) {
[13:37:08.168]                           computeRestarts <- base::computeRestarts
[13:37:08.168]                           grepl <- base::grepl
[13:37:08.168]                           restarts <- computeRestarts(cond)
[13:37:08.168]                           for (restart in restarts) {
[13:37:08.168]                             name <- restart$name
[13:37:08.168]                             if (is.null(name)) 
[13:37:08.168]                               next
[13:37:08.168]                             if (!grepl(pattern, name)) 
[13:37:08.168]                               next
[13:37:08.168]                             invokeRestart(restart)
[13:37:08.168]                             muffled <- TRUE
[13:37:08.168]                             break
[13:37:08.168]                           }
[13:37:08.168]                         }
[13:37:08.168]                       }
[13:37:08.168]                       invisible(muffled)
[13:37:08.168]                     }
[13:37:08.168]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.168]                   }
[13:37:08.168]                 }
[13:37:08.168]                 else {
[13:37:08.168]                   if (TRUE) {
[13:37:08.168]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.168]                     {
[13:37:08.168]                       inherits <- base::inherits
[13:37:08.168]                       invokeRestart <- base::invokeRestart
[13:37:08.168]                       is.null <- base::is.null
[13:37:08.168]                       muffled <- FALSE
[13:37:08.168]                       if (inherits(cond, "message")) {
[13:37:08.168]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.168]                         if (muffled) 
[13:37:08.168]                           invokeRestart("muffleMessage")
[13:37:08.168]                       }
[13:37:08.168]                       else if (inherits(cond, "warning")) {
[13:37:08.168]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.168]                         if (muffled) 
[13:37:08.168]                           invokeRestart("muffleWarning")
[13:37:08.168]                       }
[13:37:08.168]                       else if (inherits(cond, "condition")) {
[13:37:08.168]                         if (!is.null(pattern)) {
[13:37:08.168]                           computeRestarts <- base::computeRestarts
[13:37:08.168]                           grepl <- base::grepl
[13:37:08.168]                           restarts <- computeRestarts(cond)
[13:37:08.168]                           for (restart in restarts) {
[13:37:08.168]                             name <- restart$name
[13:37:08.168]                             if (is.null(name)) 
[13:37:08.168]                               next
[13:37:08.168]                             if (!grepl(pattern, name)) 
[13:37:08.168]                               next
[13:37:08.168]                             invokeRestart(restart)
[13:37:08.168]                             muffled <- TRUE
[13:37:08.168]                             break
[13:37:08.168]                           }
[13:37:08.168]                         }
[13:37:08.168]                       }
[13:37:08.168]                       invisible(muffled)
[13:37:08.168]                     }
[13:37:08.168]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.168]                   }
[13:37:08.168]                 }
[13:37:08.168]             }
[13:37:08.168]         }))
[13:37:08.168]     }, error = function(ex) {
[13:37:08.168]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:08.168]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.168]                 ...future.rng), started = ...future.startTime, 
[13:37:08.168]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:08.168]             version = "1.8"), class = "FutureResult")
[13:37:08.168]     }, finally = {
[13:37:08.168]         if (!identical(...future.workdir, getwd())) 
[13:37:08.168]             setwd(...future.workdir)
[13:37:08.168]         {
[13:37:08.168]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:08.168]                 ...future.oldOptions$nwarnings <- NULL
[13:37:08.168]             }
[13:37:08.168]             base::options(...future.oldOptions)
[13:37:08.168]             if (.Platform$OS.type == "windows") {
[13:37:08.168]                 old_names <- names(...future.oldEnvVars)
[13:37:08.168]                 envs <- base::Sys.getenv()
[13:37:08.168]                 names <- names(envs)
[13:37:08.168]                 common <- intersect(names, old_names)
[13:37:08.168]                 added <- setdiff(names, old_names)
[13:37:08.168]                 removed <- setdiff(old_names, names)
[13:37:08.168]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:08.168]                   envs[common]]
[13:37:08.168]                 NAMES <- toupper(changed)
[13:37:08.168]                 args <- list()
[13:37:08.168]                 for (kk in seq_along(NAMES)) {
[13:37:08.168]                   name <- changed[[kk]]
[13:37:08.168]                   NAME <- NAMES[[kk]]
[13:37:08.168]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.168]                     next
[13:37:08.168]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.168]                 }
[13:37:08.168]                 NAMES <- toupper(added)
[13:37:08.168]                 for (kk in seq_along(NAMES)) {
[13:37:08.168]                   name <- added[[kk]]
[13:37:08.168]                   NAME <- NAMES[[kk]]
[13:37:08.168]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.168]                     next
[13:37:08.168]                   args[[name]] <- ""
[13:37:08.168]                 }
[13:37:08.168]                 NAMES <- toupper(removed)
[13:37:08.168]                 for (kk in seq_along(NAMES)) {
[13:37:08.168]                   name <- removed[[kk]]
[13:37:08.168]                   NAME <- NAMES[[kk]]
[13:37:08.168]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.168]                     next
[13:37:08.168]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.168]                 }
[13:37:08.168]                 if (length(args) > 0) 
[13:37:08.168]                   base::do.call(base::Sys.setenv, args = args)
[13:37:08.168]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:08.168]             }
[13:37:08.168]             else {
[13:37:08.168]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:08.168]             }
[13:37:08.168]             {
[13:37:08.168]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:08.168]                   0L) {
[13:37:08.168]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:08.168]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:08.168]                   base::options(opts)
[13:37:08.168]                 }
[13:37:08.168]                 {
[13:37:08.168]                   {
[13:37:08.168]                     NULL
[13:37:08.168]                     RNGkind("Mersenne-Twister")
[13:37:08.168]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:37:08.168]                       inherits = FALSE)
[13:37:08.168]                   }
[13:37:08.168]                   options(future.plan = NULL)
[13:37:08.168]                   if (is.na(NA_character_)) 
[13:37:08.168]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.168]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:08.168]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:08.168]                     .init = FALSE)
[13:37:08.168]                 }
[13:37:08.168]             }
[13:37:08.168]         }
[13:37:08.168]     })
[13:37:08.168]     if (TRUE) {
[13:37:08.168]         base::sink(type = "output", split = FALSE)
[13:37:08.168]         if (TRUE) {
[13:37:08.168]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:08.168]         }
[13:37:08.168]         else {
[13:37:08.168]             ...future.result["stdout"] <- base::list(NULL)
[13:37:08.168]         }
[13:37:08.168]         base::close(...future.stdout)
[13:37:08.168]         ...future.stdout <- NULL
[13:37:08.168]     }
[13:37:08.168]     ...future.result$conditions <- ...future.conditions
[13:37:08.168]     ...future.result$finished <- base::Sys.time()
[13:37:08.168]     ...future.result
[13:37:08.168] }
[13:37:08.170] plan(): Setting new future strategy stack:
[13:37:08.170] List of future strategies:
[13:37:08.170] 1. sequential:
[13:37:08.170]    - args: function (..., envir = parent.frame())
[13:37:08.170]    - tweaked: FALSE
[13:37:08.170]    - call: NULL
[13:37:08.171] plan(): nbrOfWorkers() = 1
[13:37:08.171] plan(): Setting new future strategy stack:
[13:37:08.171] List of future strategies:
[13:37:08.171] 1. multicore:
[13:37:08.171]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:37:08.171]    - tweaked: FALSE
[13:37:08.171]    - call: plan(multicore)
[13:37:08.175] plan(): nbrOfWorkers() = 1
[13:37:08.175] SequentialFuture started (and completed)
 - Creating multicore future #3 ...
[13:37:08.178] getGlobalsAndPackages() ...
[13:37:08.178] Not searching for globals
[13:37:08.178] - globals: [0] <none>
[13:37:08.179] getGlobalsAndPackages() ... DONE
[13:37:08.179] Packages needed by the future expression (n = 0): <none>
[13:37:08.179] Packages needed by future strategies (n = 0): <none>
[13:37:08.179] {
[13:37:08.179]     {
[13:37:08.179]         {
[13:37:08.179]             ...future.startTime <- base::Sys.time()
[13:37:08.179]             {
[13:37:08.179]                 {
[13:37:08.179]                   {
[13:37:08.179]                     base::local({
[13:37:08.179]                       has_future <- base::requireNamespace("future", 
[13:37:08.179]                         quietly = TRUE)
[13:37:08.179]                       if (has_future) {
[13:37:08.179]                         ns <- base::getNamespace("future")
[13:37:08.179]                         version <- ns[[".package"]][["version"]]
[13:37:08.179]                         if (is.null(version)) 
[13:37:08.179]                           version <- utils::packageVersion("future")
[13:37:08.179]                       }
[13:37:08.179]                       else {
[13:37:08.179]                         version <- NULL
[13:37:08.179]                       }
[13:37:08.179]                       if (!has_future || version < "1.8.0") {
[13:37:08.179]                         info <- base::c(r_version = base::gsub("R version ", 
[13:37:08.179]                           "", base::R.version$version.string), 
[13:37:08.179]                           platform = base::sprintf("%s (%s-bit)", 
[13:37:08.179]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:08.179]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:08.179]                             "release", "version")], collapse = " "), 
[13:37:08.179]                           hostname = base::Sys.info()[["nodename"]])
[13:37:08.179]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:37:08.179]                           info)
[13:37:08.179]                         info <- base::paste(info, collapse = "; ")
[13:37:08.179]                         if (!has_future) {
[13:37:08.179]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:08.179]                             info)
[13:37:08.179]                         }
[13:37:08.179]                         else {
[13:37:08.179]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:08.179]                             info, version)
[13:37:08.179]                         }
[13:37:08.179]                         base::stop(msg)
[13:37:08.179]                       }
[13:37:08.179]                     })
[13:37:08.179]                   }
[13:37:08.179]                   ...future.strategy.old <- future::plan("list")
[13:37:08.179]                   options(future.plan = NULL)
[13:37:08.179]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.179]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:08.179]                 }
[13:37:08.179]                 ...future.workdir <- getwd()
[13:37:08.179]             }
[13:37:08.179]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:08.179]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:08.179]         }
[13:37:08.179]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:08.179]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:08.179]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:08.179]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:08.179]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:08.179]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:08.179]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:08.179]             base::names(...future.oldOptions))
[13:37:08.179]     }
[13:37:08.179]     if (FALSE) {
[13:37:08.179]     }
[13:37:08.179]     else {
[13:37:08.179]         if (TRUE) {
[13:37:08.179]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:08.179]                 open = "w")
[13:37:08.179]         }
[13:37:08.179]         else {
[13:37:08.179]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:08.179]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:08.179]         }
[13:37:08.179]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:08.179]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:08.179]             base::sink(type = "output", split = FALSE)
[13:37:08.179]             base::close(...future.stdout)
[13:37:08.179]         }, add = TRUE)
[13:37:08.179]     }
[13:37:08.179]     ...future.frame <- base::sys.nframe()
[13:37:08.179]     ...future.conditions <- base::list()
[13:37:08.179]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:08.179]     if (FALSE) {
[13:37:08.179]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:08.179]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:08.179]     }
[13:37:08.179]     ...future.result <- base::tryCatch({
[13:37:08.179]         base::withCallingHandlers({
[13:37:08.179]             ...future.value <- base::withVisible(base::local({
[13:37:08.179]                 ii
[13:37:08.179]             }))
[13:37:08.179]             future::FutureResult(value = ...future.value$value, 
[13:37:08.179]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.179]                   ...future.rng), globalenv = if (FALSE) 
[13:37:08.179]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:08.179]                     ...future.globalenv.names))
[13:37:08.179]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:08.179]         }, condition = base::local({
[13:37:08.179]             c <- base::c
[13:37:08.179]             inherits <- base::inherits
[13:37:08.179]             invokeRestart <- base::invokeRestart
[13:37:08.179]             length <- base::length
[13:37:08.179]             list <- base::list
[13:37:08.179]             seq.int <- base::seq.int
[13:37:08.179]             signalCondition <- base::signalCondition
[13:37:08.179]             sys.calls <- base::sys.calls
[13:37:08.179]             `[[` <- base::`[[`
[13:37:08.179]             `+` <- base::`+`
[13:37:08.179]             `<<-` <- base::`<<-`
[13:37:08.179]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:08.179]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:08.179]                   3L)]
[13:37:08.179]             }
[13:37:08.179]             function(cond) {
[13:37:08.179]                 is_error <- inherits(cond, "error")
[13:37:08.179]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:08.179]                   NULL)
[13:37:08.179]                 if (is_error) {
[13:37:08.179]                   sessionInformation <- function() {
[13:37:08.179]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:08.179]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:08.179]                       search = base::search(), system = base::Sys.info())
[13:37:08.179]                   }
[13:37:08.179]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.179]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:08.179]                     cond$call), session = sessionInformation(), 
[13:37:08.179]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:08.179]                   signalCondition(cond)
[13:37:08.179]                 }
[13:37:08.179]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:08.179]                 "immediateCondition"))) {
[13:37:08.179]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:08.179]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.179]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:08.179]                   if (TRUE && !signal) {
[13:37:08.179]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.179]                     {
[13:37:08.179]                       inherits <- base::inherits
[13:37:08.179]                       invokeRestart <- base::invokeRestart
[13:37:08.179]                       is.null <- base::is.null
[13:37:08.179]                       muffled <- FALSE
[13:37:08.179]                       if (inherits(cond, "message")) {
[13:37:08.179]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.179]                         if (muffled) 
[13:37:08.179]                           invokeRestart("muffleMessage")
[13:37:08.179]                       }
[13:37:08.179]                       else if (inherits(cond, "warning")) {
[13:37:08.179]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.179]                         if (muffled) 
[13:37:08.179]                           invokeRestart("muffleWarning")
[13:37:08.179]                       }
[13:37:08.179]                       else if (inherits(cond, "condition")) {
[13:37:08.179]                         if (!is.null(pattern)) {
[13:37:08.179]                           computeRestarts <- base::computeRestarts
[13:37:08.179]                           grepl <- base::grepl
[13:37:08.179]                           restarts <- computeRestarts(cond)
[13:37:08.179]                           for (restart in restarts) {
[13:37:08.179]                             name <- restart$name
[13:37:08.179]                             if (is.null(name)) 
[13:37:08.179]                               next
[13:37:08.179]                             if (!grepl(pattern, name)) 
[13:37:08.179]                               next
[13:37:08.179]                             invokeRestart(restart)
[13:37:08.179]                             muffled <- TRUE
[13:37:08.179]                             break
[13:37:08.179]                           }
[13:37:08.179]                         }
[13:37:08.179]                       }
[13:37:08.179]                       invisible(muffled)
[13:37:08.179]                     }
[13:37:08.179]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.179]                   }
[13:37:08.179]                 }
[13:37:08.179]                 else {
[13:37:08.179]                   if (TRUE) {
[13:37:08.179]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.179]                     {
[13:37:08.179]                       inherits <- base::inherits
[13:37:08.179]                       invokeRestart <- base::invokeRestart
[13:37:08.179]                       is.null <- base::is.null
[13:37:08.179]                       muffled <- FALSE
[13:37:08.179]                       if (inherits(cond, "message")) {
[13:37:08.179]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.179]                         if (muffled) 
[13:37:08.179]                           invokeRestart("muffleMessage")
[13:37:08.179]                       }
[13:37:08.179]                       else if (inherits(cond, "warning")) {
[13:37:08.179]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.179]                         if (muffled) 
[13:37:08.179]                           invokeRestart("muffleWarning")
[13:37:08.179]                       }
[13:37:08.179]                       else if (inherits(cond, "condition")) {
[13:37:08.179]                         if (!is.null(pattern)) {
[13:37:08.179]                           computeRestarts <- base::computeRestarts
[13:37:08.179]                           grepl <- base::grepl
[13:37:08.179]                           restarts <- computeRestarts(cond)
[13:37:08.179]                           for (restart in restarts) {
[13:37:08.179]                             name <- restart$name
[13:37:08.179]                             if (is.null(name)) 
[13:37:08.179]                               next
[13:37:08.179]                             if (!grepl(pattern, name)) 
[13:37:08.179]                               next
[13:37:08.179]                             invokeRestart(restart)
[13:37:08.179]                             muffled <- TRUE
[13:37:08.179]                             break
[13:37:08.179]                           }
[13:37:08.179]                         }
[13:37:08.179]                       }
[13:37:08.179]                       invisible(muffled)
[13:37:08.179]                     }
[13:37:08.179]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.179]                   }
[13:37:08.179]                 }
[13:37:08.179]             }
[13:37:08.179]         }))
[13:37:08.179]     }, error = function(ex) {
[13:37:08.179]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:08.179]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.179]                 ...future.rng), started = ...future.startTime, 
[13:37:08.179]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:08.179]             version = "1.8"), class = "FutureResult")
[13:37:08.179]     }, finally = {
[13:37:08.179]         if (!identical(...future.workdir, getwd())) 
[13:37:08.179]             setwd(...future.workdir)
[13:37:08.179]         {
[13:37:08.179]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:08.179]                 ...future.oldOptions$nwarnings <- NULL
[13:37:08.179]             }
[13:37:08.179]             base::options(...future.oldOptions)
[13:37:08.179]             if (.Platform$OS.type == "windows") {
[13:37:08.179]                 old_names <- names(...future.oldEnvVars)
[13:37:08.179]                 envs <- base::Sys.getenv()
[13:37:08.179]                 names <- names(envs)
[13:37:08.179]                 common <- intersect(names, old_names)
[13:37:08.179]                 added <- setdiff(names, old_names)
[13:37:08.179]                 removed <- setdiff(old_names, names)
[13:37:08.179]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:08.179]                   envs[common]]
[13:37:08.179]                 NAMES <- toupper(changed)
[13:37:08.179]                 args <- list()
[13:37:08.179]                 for (kk in seq_along(NAMES)) {
[13:37:08.179]                   name <- changed[[kk]]
[13:37:08.179]                   NAME <- NAMES[[kk]]
[13:37:08.179]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.179]                     next
[13:37:08.179]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.179]                 }
[13:37:08.179]                 NAMES <- toupper(added)
[13:37:08.179]                 for (kk in seq_along(NAMES)) {
[13:37:08.179]                   name <- added[[kk]]
[13:37:08.179]                   NAME <- NAMES[[kk]]
[13:37:08.179]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.179]                     next
[13:37:08.179]                   args[[name]] <- ""
[13:37:08.179]                 }
[13:37:08.179]                 NAMES <- toupper(removed)
[13:37:08.179]                 for (kk in seq_along(NAMES)) {
[13:37:08.179]                   name <- removed[[kk]]
[13:37:08.179]                   NAME <- NAMES[[kk]]
[13:37:08.179]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.179]                     next
[13:37:08.179]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.179]                 }
[13:37:08.179]                 if (length(args) > 0) 
[13:37:08.179]                   base::do.call(base::Sys.setenv, args = args)
[13:37:08.179]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:08.179]             }
[13:37:08.179]             else {
[13:37:08.179]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:08.179]             }
[13:37:08.179]             {
[13:37:08.179]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:08.179]                   0L) {
[13:37:08.179]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:08.179]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:08.179]                   base::options(opts)
[13:37:08.179]                 }
[13:37:08.179]                 {
[13:37:08.179]                   {
[13:37:08.179]                     NULL
[13:37:08.179]                     RNGkind("Mersenne-Twister")
[13:37:08.179]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:37:08.179]                       inherits = FALSE)
[13:37:08.179]                   }
[13:37:08.179]                   options(future.plan = NULL)
[13:37:08.179]                   if (is.na(NA_character_)) 
[13:37:08.179]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.179]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:08.179]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:08.179]                     .init = FALSE)
[13:37:08.179]                 }
[13:37:08.179]             }
[13:37:08.179]         }
[13:37:08.179]     })
[13:37:08.179]     if (TRUE) {
[13:37:08.179]         base::sink(type = "output", split = FALSE)
[13:37:08.179]         if (TRUE) {
[13:37:08.179]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:08.179]         }
[13:37:08.179]         else {
[13:37:08.179]             ...future.result["stdout"] <- base::list(NULL)
[13:37:08.179]         }
[13:37:08.179]         base::close(...future.stdout)
[13:37:08.179]         ...future.stdout <- NULL
[13:37:08.179]     }
[13:37:08.179]     ...future.result$conditions <- ...future.conditions
[13:37:08.179]     ...future.result$finished <- base::Sys.time()
[13:37:08.179]     ...future.result
[13:37:08.179] }
[13:37:08.181] plan(): Setting new future strategy stack:
[13:37:08.181] List of future strategies:
[13:37:08.181] 1. sequential:
[13:37:08.181]    - args: function (..., envir = parent.frame())
[13:37:08.181]    - tweaked: FALSE
[13:37:08.181]    - call: NULL
[13:37:08.181] plan(): nbrOfWorkers() = 1
[13:37:08.182] plan(): Setting new future strategy stack:
[13:37:08.182] List of future strategies:
[13:37:08.182] 1. multicore:
[13:37:08.182]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:37:08.182]    - tweaked: FALSE
[13:37:08.182]    - call: plan(multicore)
[13:37:08.185] plan(): nbrOfWorkers() = 1
[13:37:08.186] SequentialFuture started (and completed)
 - Creating multicore future #4 ...
[13:37:08.189] getGlobalsAndPackages() ...
[13:37:08.189] Not searching for globals
[13:37:08.189] - globals: [0] <none>
[13:37:08.189] getGlobalsAndPackages() ... DONE
[13:37:08.190] Packages needed by the future expression (n = 0): <none>
[13:37:08.190] Packages needed by future strategies (n = 0): <none>
[13:37:08.190] {
[13:37:08.190]     {
[13:37:08.190]         {
[13:37:08.190]             ...future.startTime <- base::Sys.time()
[13:37:08.190]             {
[13:37:08.190]                 {
[13:37:08.190]                   {
[13:37:08.190]                     base::local({
[13:37:08.190]                       has_future <- base::requireNamespace("future", 
[13:37:08.190]                         quietly = TRUE)
[13:37:08.190]                       if (has_future) {
[13:37:08.190]                         ns <- base::getNamespace("future")
[13:37:08.190]                         version <- ns[[".package"]][["version"]]
[13:37:08.190]                         if (is.null(version)) 
[13:37:08.190]                           version <- utils::packageVersion("future")
[13:37:08.190]                       }
[13:37:08.190]                       else {
[13:37:08.190]                         version <- NULL
[13:37:08.190]                       }
[13:37:08.190]                       if (!has_future || version < "1.8.0") {
[13:37:08.190]                         info <- base::c(r_version = base::gsub("R version ", 
[13:37:08.190]                           "", base::R.version$version.string), 
[13:37:08.190]                           platform = base::sprintf("%s (%s-bit)", 
[13:37:08.190]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:08.190]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:08.190]                             "release", "version")], collapse = " "), 
[13:37:08.190]                           hostname = base::Sys.info()[["nodename"]])
[13:37:08.190]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:37:08.190]                           info)
[13:37:08.190]                         info <- base::paste(info, collapse = "; ")
[13:37:08.190]                         if (!has_future) {
[13:37:08.190]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:08.190]                             info)
[13:37:08.190]                         }
[13:37:08.190]                         else {
[13:37:08.190]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:08.190]                             info, version)
[13:37:08.190]                         }
[13:37:08.190]                         base::stop(msg)
[13:37:08.190]                       }
[13:37:08.190]                     })
[13:37:08.190]                   }
[13:37:08.190]                   ...future.strategy.old <- future::plan("list")
[13:37:08.190]                   options(future.plan = NULL)
[13:37:08.190]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.190]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:08.190]                 }
[13:37:08.190]                 ...future.workdir <- getwd()
[13:37:08.190]             }
[13:37:08.190]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:08.190]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:08.190]         }
[13:37:08.190]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:08.190]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:08.190]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:08.190]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:08.190]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:08.190]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:08.190]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:08.190]             base::names(...future.oldOptions))
[13:37:08.190]     }
[13:37:08.190]     if (FALSE) {
[13:37:08.190]     }
[13:37:08.190]     else {
[13:37:08.190]         if (TRUE) {
[13:37:08.190]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:08.190]                 open = "w")
[13:37:08.190]         }
[13:37:08.190]         else {
[13:37:08.190]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:08.190]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:08.190]         }
[13:37:08.190]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:08.190]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:08.190]             base::sink(type = "output", split = FALSE)
[13:37:08.190]             base::close(...future.stdout)
[13:37:08.190]         }, add = TRUE)
[13:37:08.190]     }
[13:37:08.190]     ...future.frame <- base::sys.nframe()
[13:37:08.190]     ...future.conditions <- base::list()
[13:37:08.190]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:08.190]     if (FALSE) {
[13:37:08.190]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:08.190]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:08.190]     }
[13:37:08.190]     ...future.result <- base::tryCatch({
[13:37:08.190]         base::withCallingHandlers({
[13:37:08.190]             ...future.value <- base::withVisible(base::local({
[13:37:08.190]                 ii
[13:37:08.190]             }))
[13:37:08.190]             future::FutureResult(value = ...future.value$value, 
[13:37:08.190]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.190]                   ...future.rng), globalenv = if (FALSE) 
[13:37:08.190]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:08.190]                     ...future.globalenv.names))
[13:37:08.190]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:08.190]         }, condition = base::local({
[13:37:08.190]             c <- base::c
[13:37:08.190]             inherits <- base::inherits
[13:37:08.190]             invokeRestart <- base::invokeRestart
[13:37:08.190]             length <- base::length
[13:37:08.190]             list <- base::list
[13:37:08.190]             seq.int <- base::seq.int
[13:37:08.190]             signalCondition <- base::signalCondition
[13:37:08.190]             sys.calls <- base::sys.calls
[13:37:08.190]             `[[` <- base::`[[`
[13:37:08.190]             `+` <- base::`+`
[13:37:08.190]             `<<-` <- base::`<<-`
[13:37:08.190]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:08.190]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:08.190]                   3L)]
[13:37:08.190]             }
[13:37:08.190]             function(cond) {
[13:37:08.190]                 is_error <- inherits(cond, "error")
[13:37:08.190]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:08.190]                   NULL)
[13:37:08.190]                 if (is_error) {
[13:37:08.190]                   sessionInformation <- function() {
[13:37:08.190]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:08.190]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:08.190]                       search = base::search(), system = base::Sys.info())
[13:37:08.190]                   }
[13:37:08.190]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.190]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:08.190]                     cond$call), session = sessionInformation(), 
[13:37:08.190]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:08.190]                   signalCondition(cond)
[13:37:08.190]                 }
[13:37:08.190]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:08.190]                 "immediateCondition"))) {
[13:37:08.190]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:08.190]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.190]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:08.190]                   if (TRUE && !signal) {
[13:37:08.190]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.190]                     {
[13:37:08.190]                       inherits <- base::inherits
[13:37:08.190]                       invokeRestart <- base::invokeRestart
[13:37:08.190]                       is.null <- base::is.null
[13:37:08.190]                       muffled <- FALSE
[13:37:08.190]                       if (inherits(cond, "message")) {
[13:37:08.190]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.190]                         if (muffled) 
[13:37:08.190]                           invokeRestart("muffleMessage")
[13:37:08.190]                       }
[13:37:08.190]                       else if (inherits(cond, "warning")) {
[13:37:08.190]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.190]                         if (muffled) 
[13:37:08.190]                           invokeRestart("muffleWarning")
[13:37:08.190]                       }
[13:37:08.190]                       else if (inherits(cond, "condition")) {
[13:37:08.190]                         if (!is.null(pattern)) {
[13:37:08.190]                           computeRestarts <- base::computeRestarts
[13:37:08.190]                           grepl <- base::grepl
[13:37:08.190]                           restarts <- computeRestarts(cond)
[13:37:08.190]                           for (restart in restarts) {
[13:37:08.190]                             name <- restart$name
[13:37:08.190]                             if (is.null(name)) 
[13:37:08.190]                               next
[13:37:08.190]                             if (!grepl(pattern, name)) 
[13:37:08.190]                               next
[13:37:08.190]                             invokeRestart(restart)
[13:37:08.190]                             muffled <- TRUE
[13:37:08.190]                             break
[13:37:08.190]                           }
[13:37:08.190]                         }
[13:37:08.190]                       }
[13:37:08.190]                       invisible(muffled)
[13:37:08.190]                     }
[13:37:08.190]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.190]                   }
[13:37:08.190]                 }
[13:37:08.190]                 else {
[13:37:08.190]                   if (TRUE) {
[13:37:08.190]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.190]                     {
[13:37:08.190]                       inherits <- base::inherits
[13:37:08.190]                       invokeRestart <- base::invokeRestart
[13:37:08.190]                       is.null <- base::is.null
[13:37:08.190]                       muffled <- FALSE
[13:37:08.190]                       if (inherits(cond, "message")) {
[13:37:08.190]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.190]                         if (muffled) 
[13:37:08.190]                           invokeRestart("muffleMessage")
[13:37:08.190]                       }
[13:37:08.190]                       else if (inherits(cond, "warning")) {
[13:37:08.190]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.190]                         if (muffled) 
[13:37:08.190]                           invokeRestart("muffleWarning")
[13:37:08.190]                       }
[13:37:08.190]                       else if (inherits(cond, "condition")) {
[13:37:08.190]                         if (!is.null(pattern)) {
[13:37:08.190]                           computeRestarts <- base::computeRestarts
[13:37:08.190]                           grepl <- base::grepl
[13:37:08.190]                           restarts <- computeRestarts(cond)
[13:37:08.190]                           for (restart in restarts) {
[13:37:08.190]                             name <- restart$name
[13:37:08.190]                             if (is.null(name)) 
[13:37:08.190]                               next
[13:37:08.190]                             if (!grepl(pattern, name)) 
[13:37:08.190]                               next
[13:37:08.190]                             invokeRestart(restart)
[13:37:08.190]                             muffled <- TRUE
[13:37:08.190]                             break
[13:37:08.190]                           }
[13:37:08.190]                         }
[13:37:08.190]                       }
[13:37:08.190]                       invisible(muffled)
[13:37:08.190]                     }
[13:37:08.190]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.190]                   }
[13:37:08.190]                 }
[13:37:08.190]             }
[13:37:08.190]         }))
[13:37:08.190]     }, error = function(ex) {
[13:37:08.190]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:08.190]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.190]                 ...future.rng), started = ...future.startTime, 
[13:37:08.190]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:08.190]             version = "1.8"), class = "FutureResult")
[13:37:08.190]     }, finally = {
[13:37:08.190]         if (!identical(...future.workdir, getwd())) 
[13:37:08.190]             setwd(...future.workdir)
[13:37:08.190]         {
[13:37:08.190]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:08.190]                 ...future.oldOptions$nwarnings <- NULL
[13:37:08.190]             }
[13:37:08.190]             base::options(...future.oldOptions)
[13:37:08.190]             if (.Platform$OS.type == "windows") {
[13:37:08.190]                 old_names <- names(...future.oldEnvVars)
[13:37:08.190]                 envs <- base::Sys.getenv()
[13:37:08.190]                 names <- names(envs)
[13:37:08.190]                 common <- intersect(names, old_names)
[13:37:08.190]                 added <- setdiff(names, old_names)
[13:37:08.190]                 removed <- setdiff(old_names, names)
[13:37:08.190]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:08.190]                   envs[common]]
[13:37:08.190]                 NAMES <- toupper(changed)
[13:37:08.190]                 args <- list()
[13:37:08.190]                 for (kk in seq_along(NAMES)) {
[13:37:08.190]                   name <- changed[[kk]]
[13:37:08.190]                   NAME <- NAMES[[kk]]
[13:37:08.190]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.190]                     next
[13:37:08.190]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.190]                 }
[13:37:08.190]                 NAMES <- toupper(added)
[13:37:08.190]                 for (kk in seq_along(NAMES)) {
[13:37:08.190]                   name <- added[[kk]]
[13:37:08.190]                   NAME <- NAMES[[kk]]
[13:37:08.190]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.190]                     next
[13:37:08.190]                   args[[name]] <- ""
[13:37:08.190]                 }
[13:37:08.190]                 NAMES <- toupper(removed)
[13:37:08.190]                 for (kk in seq_along(NAMES)) {
[13:37:08.190]                   name <- removed[[kk]]
[13:37:08.190]                   NAME <- NAMES[[kk]]
[13:37:08.190]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.190]                     next
[13:37:08.190]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.190]                 }
[13:37:08.190]                 if (length(args) > 0) 
[13:37:08.190]                   base::do.call(base::Sys.setenv, args = args)
[13:37:08.190]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:08.190]             }
[13:37:08.190]             else {
[13:37:08.190]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:08.190]             }
[13:37:08.190]             {
[13:37:08.190]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:08.190]                   0L) {
[13:37:08.190]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:08.190]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:08.190]                   base::options(opts)
[13:37:08.190]                 }
[13:37:08.190]                 {
[13:37:08.190]                   {
[13:37:08.190]                     NULL
[13:37:08.190]                     RNGkind("Mersenne-Twister")
[13:37:08.190]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:37:08.190]                       inherits = FALSE)
[13:37:08.190]                   }
[13:37:08.190]                   options(future.plan = NULL)
[13:37:08.190]                   if (is.na(NA_character_)) 
[13:37:08.190]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.190]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:08.190]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:08.190]                     .init = FALSE)
[13:37:08.190]                 }
[13:37:08.190]             }
[13:37:08.190]         }
[13:37:08.190]     })
[13:37:08.190]     if (TRUE) {
[13:37:08.190]         base::sink(type = "output", split = FALSE)
[13:37:08.190]         if (TRUE) {
[13:37:08.190]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:08.190]         }
[13:37:08.190]         else {
[13:37:08.190]             ...future.result["stdout"] <- base::list(NULL)
[13:37:08.190]         }
[13:37:08.190]         base::close(...future.stdout)
[13:37:08.190]         ...future.stdout <- NULL
[13:37:08.190]     }
[13:37:08.190]     ...future.result$conditions <- ...future.conditions
[13:37:08.190]     ...future.result$finished <- base::Sys.time()
[13:37:08.190]     ...future.result
[13:37:08.190] }
[13:37:08.192] plan(): Setting new future strategy stack:
[13:37:08.192] List of future strategies:
[13:37:08.192] 1. sequential:
[13:37:08.192]    - args: function (..., envir = parent.frame())
[13:37:08.192]    - tweaked: FALSE
[13:37:08.192]    - call: NULL
[13:37:08.192] plan(): nbrOfWorkers() = 1
[13:37:08.193] plan(): Setting new future strategy stack:
[13:37:08.193] List of future strategies:
[13:37:08.193] 1. multicore:
[13:37:08.193]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:37:08.193]    - tweaked: FALSE
[13:37:08.193]    - call: plan(multicore)
[13:37:08.196] plan(): nbrOfWorkers() = 1
[13:37:08.196] SequentialFuture started (and completed)
 - Resolving 4 multicore futures
*** multicore(..., globals = FALSE) and errors
[13:37:08.200] getGlobalsAndPackages() ...
[13:37:08.200] Not searching for globals
[13:37:08.200] - globals: [0] <none>
[13:37:08.201] getGlobalsAndPackages() ... DONE
[13:37:08.201] Packages needed by the future expression (n = 0): <none>
[13:37:08.201] Packages needed by future strategies (n = 0): <none>
[13:37:08.201] {
[13:37:08.201]     {
[13:37:08.201]         {
[13:37:08.201]             ...future.startTime <- base::Sys.time()
[13:37:08.201]             {
[13:37:08.201]                 {
[13:37:08.201]                   {
[13:37:08.201]                     base::local({
[13:37:08.201]                       has_future <- base::requireNamespace("future", 
[13:37:08.201]                         quietly = TRUE)
[13:37:08.201]                       if (has_future) {
[13:37:08.201]                         ns <- base::getNamespace("future")
[13:37:08.201]                         version <- ns[[".package"]][["version"]]
[13:37:08.201]                         if (is.null(version)) 
[13:37:08.201]                           version <- utils::packageVersion("future")
[13:37:08.201]                       }
[13:37:08.201]                       else {
[13:37:08.201]                         version <- NULL
[13:37:08.201]                       }
[13:37:08.201]                       if (!has_future || version < "1.8.0") {
[13:37:08.201]                         info <- base::c(r_version = base::gsub("R version ", 
[13:37:08.201]                           "", base::R.version$version.string), 
[13:37:08.201]                           platform = base::sprintf("%s (%s-bit)", 
[13:37:08.201]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:08.201]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:08.201]                             "release", "version")], collapse = " "), 
[13:37:08.201]                           hostname = base::Sys.info()[["nodename"]])
[13:37:08.201]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:37:08.201]                           info)
[13:37:08.201]                         info <- base::paste(info, collapse = "; ")
[13:37:08.201]                         if (!has_future) {
[13:37:08.201]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:08.201]                             info)
[13:37:08.201]                         }
[13:37:08.201]                         else {
[13:37:08.201]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:08.201]                             info, version)
[13:37:08.201]                         }
[13:37:08.201]                         base::stop(msg)
[13:37:08.201]                       }
[13:37:08.201]                     })
[13:37:08.201]                   }
[13:37:08.201]                   ...future.strategy.old <- future::plan("list")
[13:37:08.201]                   options(future.plan = NULL)
[13:37:08.201]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.201]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:08.201]                 }
[13:37:08.201]                 ...future.workdir <- getwd()
[13:37:08.201]             }
[13:37:08.201]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:08.201]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:08.201]         }
[13:37:08.201]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:08.201]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:08.201]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:08.201]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:08.201]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:08.201]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:08.201]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:08.201]             base::names(...future.oldOptions))
[13:37:08.201]     }
[13:37:08.201]     if (FALSE) {
[13:37:08.201]     }
[13:37:08.201]     else {
[13:37:08.201]         if (TRUE) {
[13:37:08.201]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:08.201]                 open = "w")
[13:37:08.201]         }
[13:37:08.201]         else {
[13:37:08.201]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:08.201]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:08.201]         }
[13:37:08.201]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:08.201]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:08.201]             base::sink(type = "output", split = FALSE)
[13:37:08.201]             base::close(...future.stdout)
[13:37:08.201]         }, add = TRUE)
[13:37:08.201]     }
[13:37:08.201]     ...future.frame <- base::sys.nframe()
[13:37:08.201]     ...future.conditions <- base::list()
[13:37:08.201]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:08.201]     if (FALSE) {
[13:37:08.201]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:08.201]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:08.201]     }
[13:37:08.201]     ...future.result <- base::tryCatch({
[13:37:08.201]         base::withCallingHandlers({
[13:37:08.201]             ...future.value <- base::withVisible(base::local({
[13:37:08.201]                 stop("Whoops!")
[13:37:08.201]                 1
[13:37:08.201]             }))
[13:37:08.201]             future::FutureResult(value = ...future.value$value, 
[13:37:08.201]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.201]                   ...future.rng), globalenv = if (FALSE) 
[13:37:08.201]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:08.201]                     ...future.globalenv.names))
[13:37:08.201]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:08.201]         }, condition = base::local({
[13:37:08.201]             c <- base::c
[13:37:08.201]             inherits <- base::inherits
[13:37:08.201]             invokeRestart <- base::invokeRestart
[13:37:08.201]             length <- base::length
[13:37:08.201]             list <- base::list
[13:37:08.201]             seq.int <- base::seq.int
[13:37:08.201]             signalCondition <- base::signalCondition
[13:37:08.201]             sys.calls <- base::sys.calls
[13:37:08.201]             `[[` <- base::`[[`
[13:37:08.201]             `+` <- base::`+`
[13:37:08.201]             `<<-` <- base::`<<-`
[13:37:08.201]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:08.201]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:08.201]                   3L)]
[13:37:08.201]             }
[13:37:08.201]             function(cond) {
[13:37:08.201]                 is_error <- inherits(cond, "error")
[13:37:08.201]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:08.201]                   NULL)
[13:37:08.201]                 if (is_error) {
[13:37:08.201]                   sessionInformation <- function() {
[13:37:08.201]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:08.201]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:08.201]                       search = base::search(), system = base::Sys.info())
[13:37:08.201]                   }
[13:37:08.201]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.201]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:08.201]                     cond$call), session = sessionInformation(), 
[13:37:08.201]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:08.201]                   signalCondition(cond)
[13:37:08.201]                 }
[13:37:08.201]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:08.201]                 "immediateCondition"))) {
[13:37:08.201]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:08.201]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.201]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:08.201]                   if (TRUE && !signal) {
[13:37:08.201]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.201]                     {
[13:37:08.201]                       inherits <- base::inherits
[13:37:08.201]                       invokeRestart <- base::invokeRestart
[13:37:08.201]                       is.null <- base::is.null
[13:37:08.201]                       muffled <- FALSE
[13:37:08.201]                       if (inherits(cond, "message")) {
[13:37:08.201]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.201]                         if (muffled) 
[13:37:08.201]                           invokeRestart("muffleMessage")
[13:37:08.201]                       }
[13:37:08.201]                       else if (inherits(cond, "warning")) {
[13:37:08.201]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.201]                         if (muffled) 
[13:37:08.201]                           invokeRestart("muffleWarning")
[13:37:08.201]                       }
[13:37:08.201]                       else if (inherits(cond, "condition")) {
[13:37:08.201]                         if (!is.null(pattern)) {
[13:37:08.201]                           computeRestarts <- base::computeRestarts
[13:37:08.201]                           grepl <- base::grepl
[13:37:08.201]                           restarts <- computeRestarts(cond)
[13:37:08.201]                           for (restart in restarts) {
[13:37:08.201]                             name <- restart$name
[13:37:08.201]                             if (is.null(name)) 
[13:37:08.201]                               next
[13:37:08.201]                             if (!grepl(pattern, name)) 
[13:37:08.201]                               next
[13:37:08.201]                             invokeRestart(restart)
[13:37:08.201]                             muffled <- TRUE
[13:37:08.201]                             break
[13:37:08.201]                           }
[13:37:08.201]                         }
[13:37:08.201]                       }
[13:37:08.201]                       invisible(muffled)
[13:37:08.201]                     }
[13:37:08.201]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.201]                   }
[13:37:08.201]                 }
[13:37:08.201]                 else {
[13:37:08.201]                   if (TRUE) {
[13:37:08.201]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.201]                     {
[13:37:08.201]                       inherits <- base::inherits
[13:37:08.201]                       invokeRestart <- base::invokeRestart
[13:37:08.201]                       is.null <- base::is.null
[13:37:08.201]                       muffled <- FALSE
[13:37:08.201]                       if (inherits(cond, "message")) {
[13:37:08.201]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.201]                         if (muffled) 
[13:37:08.201]                           invokeRestart("muffleMessage")
[13:37:08.201]                       }
[13:37:08.201]                       else if (inherits(cond, "warning")) {
[13:37:08.201]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.201]                         if (muffled) 
[13:37:08.201]                           invokeRestart("muffleWarning")
[13:37:08.201]                       }
[13:37:08.201]                       else if (inherits(cond, "condition")) {
[13:37:08.201]                         if (!is.null(pattern)) {
[13:37:08.201]                           computeRestarts <- base::computeRestarts
[13:37:08.201]                           grepl <- base::grepl
[13:37:08.201]                           restarts <- computeRestarts(cond)
[13:37:08.201]                           for (restart in restarts) {
[13:37:08.201]                             name <- restart$name
[13:37:08.201]                             if (is.null(name)) 
[13:37:08.201]                               next
[13:37:08.201]                             if (!grepl(pattern, name)) 
[13:37:08.201]                               next
[13:37:08.201]                             invokeRestart(restart)
[13:37:08.201]                             muffled <- TRUE
[13:37:08.201]                             break
[13:37:08.201]                           }
[13:37:08.201]                         }
[13:37:08.201]                       }
[13:37:08.201]                       invisible(muffled)
[13:37:08.201]                     }
[13:37:08.201]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.201]                   }
[13:37:08.201]                 }
[13:37:08.201]             }
[13:37:08.201]         }))
[13:37:08.201]     }, error = function(ex) {
[13:37:08.201]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:08.201]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.201]                 ...future.rng), started = ...future.startTime, 
[13:37:08.201]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:08.201]             version = "1.8"), class = "FutureResult")
[13:37:08.201]     }, finally = {
[13:37:08.201]         if (!identical(...future.workdir, getwd())) 
[13:37:08.201]             setwd(...future.workdir)
[13:37:08.201]         {
[13:37:08.201]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:08.201]                 ...future.oldOptions$nwarnings <- NULL
[13:37:08.201]             }
[13:37:08.201]             base::options(...future.oldOptions)
[13:37:08.201]             if (.Platform$OS.type == "windows") {
[13:37:08.201]                 old_names <- names(...future.oldEnvVars)
[13:37:08.201]                 envs <- base::Sys.getenv()
[13:37:08.201]                 names <- names(envs)
[13:37:08.201]                 common <- intersect(names, old_names)
[13:37:08.201]                 added <- setdiff(names, old_names)
[13:37:08.201]                 removed <- setdiff(old_names, names)
[13:37:08.201]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:08.201]                   envs[common]]
[13:37:08.201]                 NAMES <- toupper(changed)
[13:37:08.201]                 args <- list()
[13:37:08.201]                 for (kk in seq_along(NAMES)) {
[13:37:08.201]                   name <- changed[[kk]]
[13:37:08.201]                   NAME <- NAMES[[kk]]
[13:37:08.201]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.201]                     next
[13:37:08.201]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.201]                 }
[13:37:08.201]                 NAMES <- toupper(added)
[13:37:08.201]                 for (kk in seq_along(NAMES)) {
[13:37:08.201]                   name <- added[[kk]]
[13:37:08.201]                   NAME <- NAMES[[kk]]
[13:37:08.201]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.201]                     next
[13:37:08.201]                   args[[name]] <- ""
[13:37:08.201]                 }
[13:37:08.201]                 NAMES <- toupper(removed)
[13:37:08.201]                 for (kk in seq_along(NAMES)) {
[13:37:08.201]                   name <- removed[[kk]]
[13:37:08.201]                   NAME <- NAMES[[kk]]
[13:37:08.201]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.201]                     next
[13:37:08.201]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.201]                 }
[13:37:08.201]                 if (length(args) > 0) 
[13:37:08.201]                   base::do.call(base::Sys.setenv, args = args)
[13:37:08.201]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:08.201]             }
[13:37:08.201]             else {
[13:37:08.201]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:08.201]             }
[13:37:08.201]             {
[13:37:08.201]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:08.201]                   0L) {
[13:37:08.201]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:08.201]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:08.201]                   base::options(opts)
[13:37:08.201]                 }
[13:37:08.201]                 {
[13:37:08.201]                   {
[13:37:08.201]                     NULL
[13:37:08.201]                     RNGkind("Mersenne-Twister")
[13:37:08.201]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:37:08.201]                       inherits = FALSE)
[13:37:08.201]                   }
[13:37:08.201]                   options(future.plan = NULL)
[13:37:08.201]                   if (is.na(NA_character_)) 
[13:37:08.201]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.201]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:08.201]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:08.201]                     .init = FALSE)
[13:37:08.201]                 }
[13:37:08.201]             }
[13:37:08.201]         }
[13:37:08.201]     })
[13:37:08.201]     if (TRUE) {
[13:37:08.201]         base::sink(type = "output", split = FALSE)
[13:37:08.201]         if (TRUE) {
[13:37:08.201]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:08.201]         }
[13:37:08.201]         else {
[13:37:08.201]             ...future.result["stdout"] <- base::list(NULL)
[13:37:08.201]         }
[13:37:08.201]         base::close(...future.stdout)
[13:37:08.201]         ...future.stdout <- NULL
[13:37:08.201]     }
[13:37:08.201]     ...future.result$conditions <- ...future.conditions
[13:37:08.201]     ...future.result$finished <- base::Sys.time()
[13:37:08.201]     ...future.result
[13:37:08.201] }
[13:37:08.203] plan(): Setting new future strategy stack:
[13:37:08.203] List of future strategies:
[13:37:08.203] 1. sequential:
[13:37:08.203]    - args: function (..., envir = parent.frame())
[13:37:08.203]    - tweaked: FALSE
[13:37:08.203]    - call: NULL
[13:37:08.203] plan(): nbrOfWorkers() = 1
[13:37:08.204] plan(): Setting new future strategy stack:
[13:37:08.204] List of future strategies:
[13:37:08.204] 1. multicore:
[13:37:08.204]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:37:08.204]    - tweaked: FALSE
[13:37:08.204]    - call: plan(multicore)
[13:37:08.208] plan(): nbrOfWorkers() = 1
[13:37:08.208] SequentialFuture started (and completed)
[13:37:08.208] signalConditions() ...
[13:37:08.208]  - include = ‘immediateCondition’
[13:37:08.208]  - exclude = 
[13:37:08.208]  - resignal = FALSE
[13:37:08.208]  - Number of conditions: 1
[13:37:08.208] signalConditions() ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    stop("Whoops!")
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 0 bytes of class ‘NULL’
Conditions captured: [n=1] ‘simpleError’
Early signaling: FALSE
Owner process: 95e450d1-e7b8-6209-6c23-e4c8d06e1b18
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:37:08.209] signalConditions() ...
[13:37:08.209]  - include = ‘immediateCondition’
[13:37:08.209]  - exclude = 
[13:37:08.209]  - resignal = FALSE
[13:37:08.209]  - Number of conditions: 1
[13:37:08.209] signalConditions() ... done
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[13:37:08.210] signalConditions() ...
[13:37:08.210]  - include = ‘immediateCondition’
[13:37:08.210]  - exclude = 
[13:37:08.210]  - resignal = FALSE
[13:37:08.210]  - Number of conditions: 1
[13:37:08.210] signalConditions() ... done
[13:37:08.210] Future state: ‘finished’
[13:37:08.211] signalConditions() ...
[13:37:08.211]  - include = ‘condition’
[13:37:08.211]  - exclude = ‘immediateCondition’
[13:37:08.211]  - resignal = TRUE
[13:37:08.211]  - Number of conditions: 1
[13:37:08.211]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[13:37:08.211] signalConditions() ... done
[1] "Error in eval(quote({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[13:37:08.211] signalConditions() ...
[13:37:08.212]  - include = ‘immediateCondition’
[13:37:08.212]  - exclude = 
[13:37:08.212]  - resignal = FALSE
[13:37:08.212]  - Number of conditions: 1
[13:37:08.212] signalConditions() ... done
[13:37:08.212] Future state: ‘finished’
[13:37:08.212] signalConditions() ...
[13:37:08.212]  - include = ‘condition’
[13:37:08.212]  - exclude = ‘immediateCondition’
[13:37:08.212]  - resignal = TRUE
[13:37:08.212]  - Number of conditions: 1
[13:37:08.212]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[13:37:08.213] signalConditions() ... done
[1] "Error in eval(quote({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[13:37:08.216] getGlobalsAndPackages() ...
[13:37:08.216] Searching for globals...
[13:37:08.224] - globals found: [5] ‘{’, ‘stop’, ‘structure’, ‘list’, ‘c’
[13:37:08.225] Searching for globals ... DONE
[13:37:08.225] Resolving globals: FALSE
[13:37:08.225] 
[13:37:08.225] 
[13:37:08.225] getGlobalsAndPackages() ... DONE
[13:37:08.226] Packages needed by the future expression (n = 0): <none>
[13:37:08.226] Packages needed by future strategies (n = 0): <none>
[13:37:08.226] {
[13:37:08.226]     {
[13:37:08.226]         {
[13:37:08.226]             ...future.startTime <- base::Sys.time()
[13:37:08.226]             {
[13:37:08.226]                 {
[13:37:08.226]                   {
[13:37:08.226]                     base::local({
[13:37:08.226]                       has_future <- base::requireNamespace("future", 
[13:37:08.226]                         quietly = TRUE)
[13:37:08.226]                       if (has_future) {
[13:37:08.226]                         ns <- base::getNamespace("future")
[13:37:08.226]                         version <- ns[[".package"]][["version"]]
[13:37:08.226]                         if (is.null(version)) 
[13:37:08.226]                           version <- utils::packageVersion("future")
[13:37:08.226]                       }
[13:37:08.226]                       else {
[13:37:08.226]                         version <- NULL
[13:37:08.226]                       }
[13:37:08.226]                       if (!has_future || version < "1.8.0") {
[13:37:08.226]                         info <- base::c(r_version = base::gsub("R version ", 
[13:37:08.226]                           "", base::R.version$version.string), 
[13:37:08.226]                           platform = base::sprintf("%s (%s-bit)", 
[13:37:08.226]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:08.226]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:08.226]                             "release", "version")], collapse = " "), 
[13:37:08.226]                           hostname = base::Sys.info()[["nodename"]])
[13:37:08.226]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:37:08.226]                           info)
[13:37:08.226]                         info <- base::paste(info, collapse = "; ")
[13:37:08.226]                         if (!has_future) {
[13:37:08.226]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:08.226]                             info)
[13:37:08.226]                         }
[13:37:08.226]                         else {
[13:37:08.226]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:08.226]                             info, version)
[13:37:08.226]                         }
[13:37:08.226]                         base::stop(msg)
[13:37:08.226]                       }
[13:37:08.226]                     })
[13:37:08.226]                   }
[13:37:08.226]                   ...future.strategy.old <- future::plan("list")
[13:37:08.226]                   options(future.plan = NULL)
[13:37:08.226]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.226]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:08.226]                 }
[13:37:08.226]                 ...future.workdir <- getwd()
[13:37:08.226]             }
[13:37:08.226]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:08.226]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:08.226]         }
[13:37:08.226]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:08.226]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:08.226]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:08.226]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:08.226]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:08.226]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:08.226]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:08.226]             base::names(...future.oldOptions))
[13:37:08.226]     }
[13:37:08.226]     if (FALSE) {
[13:37:08.226]     }
[13:37:08.226]     else {
[13:37:08.226]         if (TRUE) {
[13:37:08.226]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:08.226]                 open = "w")
[13:37:08.226]         }
[13:37:08.226]         else {
[13:37:08.226]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:08.226]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:08.226]         }
[13:37:08.226]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:08.226]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:08.226]             base::sink(type = "output", split = FALSE)
[13:37:08.226]             base::close(...future.stdout)
[13:37:08.226]         }, add = TRUE)
[13:37:08.226]     }
[13:37:08.226]     ...future.frame <- base::sys.nframe()
[13:37:08.226]     ...future.conditions <- base::list()
[13:37:08.226]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:08.226]     if (FALSE) {
[13:37:08.226]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:08.226]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:08.226]     }
[13:37:08.226]     ...future.result <- base::tryCatch({
[13:37:08.226]         base::withCallingHandlers({
[13:37:08.226]             ...future.value <- base::withVisible(base::local({
[13:37:08.226]                 stop(structure(list(message = "boom"), class = c("MyError", 
[13:37:08.226]                   "error", "condition")))
[13:37:08.226]             }))
[13:37:08.226]             future::FutureResult(value = ...future.value$value, 
[13:37:08.226]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.226]                   ...future.rng), globalenv = if (FALSE) 
[13:37:08.226]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:08.226]                     ...future.globalenv.names))
[13:37:08.226]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:08.226]         }, condition = base::local({
[13:37:08.226]             c <- base::c
[13:37:08.226]             inherits <- base::inherits
[13:37:08.226]             invokeRestart <- base::invokeRestart
[13:37:08.226]             length <- base::length
[13:37:08.226]             list <- base::list
[13:37:08.226]             seq.int <- base::seq.int
[13:37:08.226]             signalCondition <- base::signalCondition
[13:37:08.226]             sys.calls <- base::sys.calls
[13:37:08.226]             `[[` <- base::`[[`
[13:37:08.226]             `+` <- base::`+`
[13:37:08.226]             `<<-` <- base::`<<-`
[13:37:08.226]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:08.226]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:08.226]                   3L)]
[13:37:08.226]             }
[13:37:08.226]             function(cond) {
[13:37:08.226]                 is_error <- inherits(cond, "error")
[13:37:08.226]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:08.226]                   NULL)
[13:37:08.226]                 if (is_error) {
[13:37:08.226]                   sessionInformation <- function() {
[13:37:08.226]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:08.226]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:08.226]                       search = base::search(), system = base::Sys.info())
[13:37:08.226]                   }
[13:37:08.226]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.226]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:08.226]                     cond$call), session = sessionInformation(), 
[13:37:08.226]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:08.226]                   signalCondition(cond)
[13:37:08.226]                 }
[13:37:08.226]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:08.226]                 "immediateCondition"))) {
[13:37:08.226]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:08.226]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.226]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:08.226]                   if (TRUE && !signal) {
[13:37:08.226]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.226]                     {
[13:37:08.226]                       inherits <- base::inherits
[13:37:08.226]                       invokeRestart <- base::invokeRestart
[13:37:08.226]                       is.null <- base::is.null
[13:37:08.226]                       muffled <- FALSE
[13:37:08.226]                       if (inherits(cond, "message")) {
[13:37:08.226]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.226]                         if (muffled) 
[13:37:08.226]                           invokeRestart("muffleMessage")
[13:37:08.226]                       }
[13:37:08.226]                       else if (inherits(cond, "warning")) {
[13:37:08.226]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.226]                         if (muffled) 
[13:37:08.226]                           invokeRestart("muffleWarning")
[13:37:08.226]                       }
[13:37:08.226]                       else if (inherits(cond, "condition")) {
[13:37:08.226]                         if (!is.null(pattern)) {
[13:37:08.226]                           computeRestarts <- base::computeRestarts
[13:37:08.226]                           grepl <- base::grepl
[13:37:08.226]                           restarts <- computeRestarts(cond)
[13:37:08.226]                           for (restart in restarts) {
[13:37:08.226]                             name <- restart$name
[13:37:08.226]                             if (is.null(name)) 
[13:37:08.226]                               next
[13:37:08.226]                             if (!grepl(pattern, name)) 
[13:37:08.226]                               next
[13:37:08.226]                             invokeRestart(restart)
[13:37:08.226]                             muffled <- TRUE
[13:37:08.226]                             break
[13:37:08.226]                           }
[13:37:08.226]                         }
[13:37:08.226]                       }
[13:37:08.226]                       invisible(muffled)
[13:37:08.226]                     }
[13:37:08.226]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.226]                   }
[13:37:08.226]                 }
[13:37:08.226]                 else {
[13:37:08.226]                   if (TRUE) {
[13:37:08.226]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.226]                     {
[13:37:08.226]                       inherits <- base::inherits
[13:37:08.226]                       invokeRestart <- base::invokeRestart
[13:37:08.226]                       is.null <- base::is.null
[13:37:08.226]                       muffled <- FALSE
[13:37:08.226]                       if (inherits(cond, "message")) {
[13:37:08.226]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.226]                         if (muffled) 
[13:37:08.226]                           invokeRestart("muffleMessage")
[13:37:08.226]                       }
[13:37:08.226]                       else if (inherits(cond, "warning")) {
[13:37:08.226]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.226]                         if (muffled) 
[13:37:08.226]                           invokeRestart("muffleWarning")
[13:37:08.226]                       }
[13:37:08.226]                       else if (inherits(cond, "condition")) {
[13:37:08.226]                         if (!is.null(pattern)) {
[13:37:08.226]                           computeRestarts <- base::computeRestarts
[13:37:08.226]                           grepl <- base::grepl
[13:37:08.226]                           restarts <- computeRestarts(cond)
[13:37:08.226]                           for (restart in restarts) {
[13:37:08.226]                             name <- restart$name
[13:37:08.226]                             if (is.null(name)) 
[13:37:08.226]                               next
[13:37:08.226]                             if (!grepl(pattern, name)) 
[13:37:08.226]                               next
[13:37:08.226]                             invokeRestart(restart)
[13:37:08.226]                             muffled <- TRUE
[13:37:08.226]                             break
[13:37:08.226]                           }
[13:37:08.226]                         }
[13:37:08.226]                       }
[13:37:08.226]                       invisible(muffled)
[13:37:08.226]                     }
[13:37:08.226]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.226]                   }
[13:37:08.226]                 }
[13:37:08.226]             }
[13:37:08.226]         }))
[13:37:08.226]     }, error = function(ex) {
[13:37:08.226]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:08.226]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.226]                 ...future.rng), started = ...future.startTime, 
[13:37:08.226]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:08.226]             version = "1.8"), class = "FutureResult")
[13:37:08.226]     }, finally = {
[13:37:08.226]         if (!identical(...future.workdir, getwd())) 
[13:37:08.226]             setwd(...future.workdir)
[13:37:08.226]         {
[13:37:08.226]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:08.226]                 ...future.oldOptions$nwarnings <- NULL
[13:37:08.226]             }
[13:37:08.226]             base::options(...future.oldOptions)
[13:37:08.226]             if (.Platform$OS.type == "windows") {
[13:37:08.226]                 old_names <- names(...future.oldEnvVars)
[13:37:08.226]                 envs <- base::Sys.getenv()
[13:37:08.226]                 names <- names(envs)
[13:37:08.226]                 common <- intersect(names, old_names)
[13:37:08.226]                 added <- setdiff(names, old_names)
[13:37:08.226]                 removed <- setdiff(old_names, names)
[13:37:08.226]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:08.226]                   envs[common]]
[13:37:08.226]                 NAMES <- toupper(changed)
[13:37:08.226]                 args <- list()
[13:37:08.226]                 for (kk in seq_along(NAMES)) {
[13:37:08.226]                   name <- changed[[kk]]
[13:37:08.226]                   NAME <- NAMES[[kk]]
[13:37:08.226]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.226]                     next
[13:37:08.226]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.226]                 }
[13:37:08.226]                 NAMES <- toupper(added)
[13:37:08.226]                 for (kk in seq_along(NAMES)) {
[13:37:08.226]                   name <- added[[kk]]
[13:37:08.226]                   NAME <- NAMES[[kk]]
[13:37:08.226]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.226]                     next
[13:37:08.226]                   args[[name]] <- ""
[13:37:08.226]                 }
[13:37:08.226]                 NAMES <- toupper(removed)
[13:37:08.226]                 for (kk in seq_along(NAMES)) {
[13:37:08.226]                   name <- removed[[kk]]
[13:37:08.226]                   NAME <- NAMES[[kk]]
[13:37:08.226]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.226]                     next
[13:37:08.226]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.226]                 }
[13:37:08.226]                 if (length(args) > 0) 
[13:37:08.226]                   base::do.call(base::Sys.setenv, args = args)
[13:37:08.226]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:08.226]             }
[13:37:08.226]             else {
[13:37:08.226]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:08.226]             }
[13:37:08.226]             {
[13:37:08.226]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:08.226]                   0L) {
[13:37:08.226]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:08.226]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:08.226]                   base::options(opts)
[13:37:08.226]                 }
[13:37:08.226]                 {
[13:37:08.226]                   {
[13:37:08.226]                     NULL
[13:37:08.226]                     RNGkind("Mersenne-Twister")
[13:37:08.226]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:37:08.226]                       inherits = FALSE)
[13:37:08.226]                   }
[13:37:08.226]                   options(future.plan = NULL)
[13:37:08.226]                   if (is.na(NA_character_)) 
[13:37:08.226]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.226]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:08.226]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:08.226]                     .init = FALSE)
[13:37:08.226]                 }
[13:37:08.226]             }
[13:37:08.226]         }
[13:37:08.226]     })
[13:37:08.226]     if (TRUE) {
[13:37:08.226]         base::sink(type = "output", split = FALSE)
[13:37:08.226]         if (TRUE) {
[13:37:08.226]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:08.226]         }
[13:37:08.226]         else {
[13:37:08.226]             ...future.result["stdout"] <- base::list(NULL)
[13:37:08.226]         }
[13:37:08.226]         base::close(...future.stdout)
[13:37:08.226]         ...future.stdout <- NULL
[13:37:08.226]     }
[13:37:08.226]     ...future.result$conditions <- ...future.conditions
[13:37:08.226]     ...future.result$finished <- base::Sys.time()
[13:37:08.226]     ...future.result
[13:37:08.226] }
[13:37:08.228] plan(): Setting new future strategy stack:
[13:37:08.228] List of future strategies:
[13:37:08.228] 1. sequential:
[13:37:08.228]    - args: function (..., envir = parent.frame())
[13:37:08.228]    - tweaked: FALSE
[13:37:08.228]    - call: NULL
[13:37:08.228] plan(): nbrOfWorkers() = 1
[13:37:08.229] plan(): Setting new future strategy stack:
[13:37:08.229] List of future strategies:
[13:37:08.229] 1. multicore:
[13:37:08.229]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:37:08.229]    - tweaked: FALSE
[13:37:08.229]    - call: plan(multicore)
[13:37:08.232] plan(): nbrOfWorkers() = 1
[13:37:08.233] SequentialFuture started (and completed)
[13:37:08.233] signalConditions() ...
[13:37:08.233]  - include = ‘immediateCondition’
[13:37:08.233]  - exclude = 
[13:37:08.233]  - resignal = FALSE
[13:37:08.233]  - Number of conditions: 1
[13:37:08.233] signalConditions() ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    stop(structure(list(message = "boom"), class = c("MyError", 
        "error", "condition")))
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 0 bytes of class ‘NULL’
Conditions captured: [n=1] ‘MyError’
Early signaling: FALSE
Owner process: 95e450d1-e7b8-6209-6c23-e4c8d06e1b18
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:37:08.234] signalConditions() ...
[13:37:08.234]  - include = ‘immediateCondition’
[13:37:08.234]  - exclude = 
[13:37:08.234]  - resignal = FALSE
[13:37:08.234]  - Number of conditions: 1
[13:37:08.234] signalConditions() ... done
<MyError: boom>
[13:37:08.234] signalConditions() ...
[13:37:08.234]  - include = ‘immediateCondition’
[13:37:08.235]  - exclude = 
[13:37:08.235]  - resignal = FALSE
[13:37:08.235]  - Number of conditions: 1
[13:37:08.235] signalConditions() ... done
[13:37:08.235] Future state: ‘finished’
[13:37:08.235] signalConditions() ...
[13:37:08.235]  - include = ‘condition’
[13:37:08.235]  - exclude = ‘immediateCondition’
[13:37:08.235]  - resignal = TRUE
[13:37:08.235]  - Number of conditions: 1
[13:37:08.235]  - Condition #1: ‘MyError’, ‘error’, ‘condition’
[13:37:08.236] signalConditions() ... done
*** multicore(..., globals = TRUE) without globals
[13:37:08.239] getGlobalsAndPackages() ...
[13:37:08.239] Searching for globals...
[13:37:08.239] - globals found: [1] ‘{’
[13:37:08.240] Searching for globals ... DONE
[13:37:08.240] Resolving globals: FALSE
[13:37:08.240] 
[13:37:08.240] 
[13:37:08.240] getGlobalsAndPackages() ... DONE
[13:37:08.240] Packages needed by the future expression (n = 0): <none>
[13:37:08.240] Packages needed by future strategies (n = 0): <none>
[13:37:08.241] {
[13:37:08.241]     {
[13:37:08.241]         {
[13:37:08.241]             ...future.startTime <- base::Sys.time()
[13:37:08.241]             {
[13:37:08.241]                 {
[13:37:08.241]                   {
[13:37:08.241]                     base::local({
[13:37:08.241]                       has_future <- base::requireNamespace("future", 
[13:37:08.241]                         quietly = TRUE)
[13:37:08.241]                       if (has_future) {
[13:37:08.241]                         ns <- base::getNamespace("future")
[13:37:08.241]                         version <- ns[[".package"]][["version"]]
[13:37:08.241]                         if (is.null(version)) 
[13:37:08.241]                           version <- utils::packageVersion("future")
[13:37:08.241]                       }
[13:37:08.241]                       else {
[13:37:08.241]                         version <- NULL
[13:37:08.241]                       }
[13:37:08.241]                       if (!has_future || version < "1.8.0") {
[13:37:08.241]                         info <- base::c(r_version = base::gsub("R version ", 
[13:37:08.241]                           "", base::R.version$version.string), 
[13:37:08.241]                           platform = base::sprintf("%s (%s-bit)", 
[13:37:08.241]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:08.241]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:08.241]                             "release", "version")], collapse = " "), 
[13:37:08.241]                           hostname = base::Sys.info()[["nodename"]])
[13:37:08.241]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:37:08.241]                           info)
[13:37:08.241]                         info <- base::paste(info, collapse = "; ")
[13:37:08.241]                         if (!has_future) {
[13:37:08.241]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:08.241]                             info)
[13:37:08.241]                         }
[13:37:08.241]                         else {
[13:37:08.241]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:08.241]                             info, version)
[13:37:08.241]                         }
[13:37:08.241]                         base::stop(msg)
[13:37:08.241]                       }
[13:37:08.241]                     })
[13:37:08.241]                   }
[13:37:08.241]                   ...future.strategy.old <- future::plan("list")
[13:37:08.241]                   options(future.plan = NULL)
[13:37:08.241]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.241]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:08.241]                 }
[13:37:08.241]                 ...future.workdir <- getwd()
[13:37:08.241]             }
[13:37:08.241]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:08.241]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:08.241]         }
[13:37:08.241]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:08.241]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:08.241]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:08.241]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:08.241]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:08.241]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:08.241]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:08.241]             base::names(...future.oldOptions))
[13:37:08.241]     }
[13:37:08.241]     if (FALSE) {
[13:37:08.241]     }
[13:37:08.241]     else {
[13:37:08.241]         if (TRUE) {
[13:37:08.241]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:08.241]                 open = "w")
[13:37:08.241]         }
[13:37:08.241]         else {
[13:37:08.241]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:08.241]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:08.241]         }
[13:37:08.241]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:08.241]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:08.241]             base::sink(type = "output", split = FALSE)
[13:37:08.241]             base::close(...future.stdout)
[13:37:08.241]         }, add = TRUE)
[13:37:08.241]     }
[13:37:08.241]     ...future.frame <- base::sys.nframe()
[13:37:08.241]     ...future.conditions <- base::list()
[13:37:08.241]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:08.241]     if (FALSE) {
[13:37:08.241]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:08.241]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:08.241]     }
[13:37:08.241]     ...future.result <- base::tryCatch({
[13:37:08.241]         base::withCallingHandlers({
[13:37:08.241]             ...future.value <- base::withVisible(base::local({
[13:37:08.241]                 42L
[13:37:08.241]             }))
[13:37:08.241]             future::FutureResult(value = ...future.value$value, 
[13:37:08.241]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.241]                   ...future.rng), globalenv = if (FALSE) 
[13:37:08.241]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:08.241]                     ...future.globalenv.names))
[13:37:08.241]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:08.241]         }, condition = base::local({
[13:37:08.241]             c <- base::c
[13:37:08.241]             inherits <- base::inherits
[13:37:08.241]             invokeRestart <- base::invokeRestart
[13:37:08.241]             length <- base::length
[13:37:08.241]             list <- base::list
[13:37:08.241]             seq.int <- base::seq.int
[13:37:08.241]             signalCondition <- base::signalCondition
[13:37:08.241]             sys.calls <- base::sys.calls
[13:37:08.241]             `[[` <- base::`[[`
[13:37:08.241]             `+` <- base::`+`
[13:37:08.241]             `<<-` <- base::`<<-`
[13:37:08.241]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:08.241]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:08.241]                   3L)]
[13:37:08.241]             }
[13:37:08.241]             function(cond) {
[13:37:08.241]                 is_error <- inherits(cond, "error")
[13:37:08.241]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:08.241]                   NULL)
[13:37:08.241]                 if (is_error) {
[13:37:08.241]                   sessionInformation <- function() {
[13:37:08.241]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:08.241]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:08.241]                       search = base::search(), system = base::Sys.info())
[13:37:08.241]                   }
[13:37:08.241]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.241]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:08.241]                     cond$call), session = sessionInformation(), 
[13:37:08.241]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:08.241]                   signalCondition(cond)
[13:37:08.241]                 }
[13:37:08.241]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:08.241]                 "immediateCondition"))) {
[13:37:08.241]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:08.241]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.241]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:08.241]                   if (TRUE && !signal) {
[13:37:08.241]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.241]                     {
[13:37:08.241]                       inherits <- base::inherits
[13:37:08.241]                       invokeRestart <- base::invokeRestart
[13:37:08.241]                       is.null <- base::is.null
[13:37:08.241]                       muffled <- FALSE
[13:37:08.241]                       if (inherits(cond, "message")) {
[13:37:08.241]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.241]                         if (muffled) 
[13:37:08.241]                           invokeRestart("muffleMessage")
[13:37:08.241]                       }
[13:37:08.241]                       else if (inherits(cond, "warning")) {
[13:37:08.241]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.241]                         if (muffled) 
[13:37:08.241]                           invokeRestart("muffleWarning")
[13:37:08.241]                       }
[13:37:08.241]                       else if (inherits(cond, "condition")) {
[13:37:08.241]                         if (!is.null(pattern)) {
[13:37:08.241]                           computeRestarts <- base::computeRestarts
[13:37:08.241]                           grepl <- base::grepl
[13:37:08.241]                           restarts <- computeRestarts(cond)
[13:37:08.241]                           for (restart in restarts) {
[13:37:08.241]                             name <- restart$name
[13:37:08.241]                             if (is.null(name)) 
[13:37:08.241]                               next
[13:37:08.241]                             if (!grepl(pattern, name)) 
[13:37:08.241]                               next
[13:37:08.241]                             invokeRestart(restart)
[13:37:08.241]                             muffled <- TRUE
[13:37:08.241]                             break
[13:37:08.241]                           }
[13:37:08.241]                         }
[13:37:08.241]                       }
[13:37:08.241]                       invisible(muffled)
[13:37:08.241]                     }
[13:37:08.241]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.241]                   }
[13:37:08.241]                 }
[13:37:08.241]                 else {
[13:37:08.241]                   if (TRUE) {
[13:37:08.241]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.241]                     {
[13:37:08.241]                       inherits <- base::inherits
[13:37:08.241]                       invokeRestart <- base::invokeRestart
[13:37:08.241]                       is.null <- base::is.null
[13:37:08.241]                       muffled <- FALSE
[13:37:08.241]                       if (inherits(cond, "message")) {
[13:37:08.241]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.241]                         if (muffled) 
[13:37:08.241]                           invokeRestart("muffleMessage")
[13:37:08.241]                       }
[13:37:08.241]                       else if (inherits(cond, "warning")) {
[13:37:08.241]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.241]                         if (muffled) 
[13:37:08.241]                           invokeRestart("muffleWarning")
[13:37:08.241]                       }
[13:37:08.241]                       else if (inherits(cond, "condition")) {
[13:37:08.241]                         if (!is.null(pattern)) {
[13:37:08.241]                           computeRestarts <- base::computeRestarts
[13:37:08.241]                           grepl <- base::grepl
[13:37:08.241]                           restarts <- computeRestarts(cond)
[13:37:08.241]                           for (restart in restarts) {
[13:37:08.241]                             name <- restart$name
[13:37:08.241]                             if (is.null(name)) 
[13:37:08.241]                               next
[13:37:08.241]                             if (!grepl(pattern, name)) 
[13:37:08.241]                               next
[13:37:08.241]                             invokeRestart(restart)
[13:37:08.241]                             muffled <- TRUE
[13:37:08.241]                             break
[13:37:08.241]                           }
[13:37:08.241]                         }
[13:37:08.241]                       }
[13:37:08.241]                       invisible(muffled)
[13:37:08.241]                     }
[13:37:08.241]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.241]                   }
[13:37:08.241]                 }
[13:37:08.241]             }
[13:37:08.241]         }))
[13:37:08.241]     }, error = function(ex) {
[13:37:08.241]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:08.241]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.241]                 ...future.rng), started = ...future.startTime, 
[13:37:08.241]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:08.241]             version = "1.8"), class = "FutureResult")
[13:37:08.241]     }, finally = {
[13:37:08.241]         if (!identical(...future.workdir, getwd())) 
[13:37:08.241]             setwd(...future.workdir)
[13:37:08.241]         {
[13:37:08.241]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:08.241]                 ...future.oldOptions$nwarnings <- NULL
[13:37:08.241]             }
[13:37:08.241]             base::options(...future.oldOptions)
[13:37:08.241]             if (.Platform$OS.type == "windows") {
[13:37:08.241]                 old_names <- names(...future.oldEnvVars)
[13:37:08.241]                 envs <- base::Sys.getenv()
[13:37:08.241]                 names <- names(envs)
[13:37:08.241]                 common <- intersect(names, old_names)
[13:37:08.241]                 added <- setdiff(names, old_names)
[13:37:08.241]                 removed <- setdiff(old_names, names)
[13:37:08.241]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:08.241]                   envs[common]]
[13:37:08.241]                 NAMES <- toupper(changed)
[13:37:08.241]                 args <- list()
[13:37:08.241]                 for (kk in seq_along(NAMES)) {
[13:37:08.241]                   name <- changed[[kk]]
[13:37:08.241]                   NAME <- NAMES[[kk]]
[13:37:08.241]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.241]                     next
[13:37:08.241]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.241]                 }
[13:37:08.241]                 NAMES <- toupper(added)
[13:37:08.241]                 for (kk in seq_along(NAMES)) {
[13:37:08.241]                   name <- added[[kk]]
[13:37:08.241]                   NAME <- NAMES[[kk]]
[13:37:08.241]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.241]                     next
[13:37:08.241]                   args[[name]] <- ""
[13:37:08.241]                 }
[13:37:08.241]                 NAMES <- toupper(removed)
[13:37:08.241]                 for (kk in seq_along(NAMES)) {
[13:37:08.241]                   name <- removed[[kk]]
[13:37:08.241]                   NAME <- NAMES[[kk]]
[13:37:08.241]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.241]                     next
[13:37:08.241]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.241]                 }
[13:37:08.241]                 if (length(args) > 0) 
[13:37:08.241]                   base::do.call(base::Sys.setenv, args = args)
[13:37:08.241]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:08.241]             }
[13:37:08.241]             else {
[13:37:08.241]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:08.241]             }
[13:37:08.241]             {
[13:37:08.241]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:08.241]                   0L) {
[13:37:08.241]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:08.241]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:08.241]                   base::options(opts)
[13:37:08.241]                 }
[13:37:08.241]                 {
[13:37:08.241]                   {
[13:37:08.241]                     NULL
[13:37:08.241]                     RNGkind("Mersenne-Twister")
[13:37:08.241]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:37:08.241]                       inherits = FALSE)
[13:37:08.241]                   }
[13:37:08.241]                   options(future.plan = NULL)
[13:37:08.241]                   if (is.na(NA_character_)) 
[13:37:08.241]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.241]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:08.241]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:08.241]                     .init = FALSE)
[13:37:08.241]                 }
[13:37:08.241]             }
[13:37:08.241]         }
[13:37:08.241]     })
[13:37:08.241]     if (TRUE) {
[13:37:08.241]         base::sink(type = "output", split = FALSE)
[13:37:08.241]         if (TRUE) {
[13:37:08.241]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:08.241]         }
[13:37:08.241]         else {
[13:37:08.241]             ...future.result["stdout"] <- base::list(NULL)
[13:37:08.241]         }
[13:37:08.241]         base::close(...future.stdout)
[13:37:08.241]         ...future.stdout <- NULL
[13:37:08.241]     }
[13:37:08.241]     ...future.result$conditions <- ...future.conditions
[13:37:08.241]     ...future.result$finished <- base::Sys.time()
[13:37:08.241]     ...future.result
[13:37:08.241] }
[13:37:08.243] plan(): Setting new future strategy stack:
[13:37:08.243] List of future strategies:
[13:37:08.243] 1. sequential:
[13:37:08.243]    - args: function (..., envir = parent.frame())
[13:37:08.243]    - tweaked: FALSE
[13:37:08.243]    - call: NULL
[13:37:08.243] plan(): nbrOfWorkers() = 1
[13:37:08.244] plan(): Setting new future strategy stack:
[13:37:08.244] List of future strategies:
[13:37:08.244] 1. multicore:
[13:37:08.244]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:37:08.244]    - tweaked: FALSE
[13:37:08.244]    - call: plan(multicore)
[13:37:08.247] plan(): nbrOfWorkers() = 1
[13:37:08.247] SequentialFuture started (and completed)
[13:37:08.247] resolved() for ‘SequentialFuture’ ...
[13:37:08.247] - state: ‘finished’
[13:37:08.247] - run: TRUE
[13:37:08.248] - result: ‘FutureResult’
[13:37:08.248] resolved() for ‘SequentialFuture’ ... done
[1] TRUE
[1] 42
*** multicore(..., globals = TRUE) with globals
[13:37:08.251] getGlobalsAndPackages() ...
[13:37:08.251] Searching for globals...
[13:37:08.253] - globals found: [4] ‘{’, ‘<-’, ‘*’, ‘a’
[13:37:08.253] Searching for globals ... DONE
[13:37:08.253] Resolving globals: FALSE
[13:37:08.254] The total size of the 1 globals is 56 bytes (56 bytes)
[13:37:08.254] The total size of the 1 globals exported for future expression (‘{; b <- 3; c <- 2; a * b * c; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[13:37:08.254] - globals: [1] ‘a’
[13:37:08.254] 
[13:37:08.254] getGlobalsAndPackages() ... DONE
[13:37:08.255] Packages needed by the future expression (n = 0): <none>
[13:37:08.255] Packages needed by future strategies (n = 0): <none>
[13:37:08.255] {
[13:37:08.255]     {
[13:37:08.255]         {
[13:37:08.255]             ...future.startTime <- base::Sys.time()
[13:37:08.255]             {
[13:37:08.255]                 {
[13:37:08.255]                   {
[13:37:08.255]                     base::local({
[13:37:08.255]                       has_future <- base::requireNamespace("future", 
[13:37:08.255]                         quietly = TRUE)
[13:37:08.255]                       if (has_future) {
[13:37:08.255]                         ns <- base::getNamespace("future")
[13:37:08.255]                         version <- ns[[".package"]][["version"]]
[13:37:08.255]                         if (is.null(version)) 
[13:37:08.255]                           version <- utils::packageVersion("future")
[13:37:08.255]                       }
[13:37:08.255]                       else {
[13:37:08.255]                         version <- NULL
[13:37:08.255]                       }
[13:37:08.255]                       if (!has_future || version < "1.8.0") {
[13:37:08.255]                         info <- base::c(r_version = base::gsub("R version ", 
[13:37:08.255]                           "", base::R.version$version.string), 
[13:37:08.255]                           platform = base::sprintf("%s (%s-bit)", 
[13:37:08.255]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:08.255]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:08.255]                             "release", "version")], collapse = " "), 
[13:37:08.255]                           hostname = base::Sys.info()[["nodename"]])
[13:37:08.255]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:37:08.255]                           info)
[13:37:08.255]                         info <- base::paste(info, collapse = "; ")
[13:37:08.255]                         if (!has_future) {
[13:37:08.255]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:08.255]                             info)
[13:37:08.255]                         }
[13:37:08.255]                         else {
[13:37:08.255]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:08.255]                             info, version)
[13:37:08.255]                         }
[13:37:08.255]                         base::stop(msg)
[13:37:08.255]                       }
[13:37:08.255]                     })
[13:37:08.255]                   }
[13:37:08.255]                   ...future.strategy.old <- future::plan("list")
[13:37:08.255]                   options(future.plan = NULL)
[13:37:08.255]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.255]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:08.255]                 }
[13:37:08.255]                 ...future.workdir <- getwd()
[13:37:08.255]             }
[13:37:08.255]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:08.255]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:08.255]         }
[13:37:08.255]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:08.255]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:08.255]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:08.255]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:08.255]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:08.255]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:08.255]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:08.255]             base::names(...future.oldOptions))
[13:37:08.255]     }
[13:37:08.255]     if (FALSE) {
[13:37:08.255]     }
[13:37:08.255]     else {
[13:37:08.255]         if (TRUE) {
[13:37:08.255]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:08.255]                 open = "w")
[13:37:08.255]         }
[13:37:08.255]         else {
[13:37:08.255]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:08.255]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:08.255]         }
[13:37:08.255]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:08.255]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:08.255]             base::sink(type = "output", split = FALSE)
[13:37:08.255]             base::close(...future.stdout)
[13:37:08.255]         }, add = TRUE)
[13:37:08.255]     }
[13:37:08.255]     ...future.frame <- base::sys.nframe()
[13:37:08.255]     ...future.conditions <- base::list()
[13:37:08.255]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:08.255]     if (FALSE) {
[13:37:08.255]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:08.255]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:08.255]     }
[13:37:08.255]     ...future.result <- base::tryCatch({
[13:37:08.255]         base::withCallingHandlers({
[13:37:08.255]             ...future.value <- base::withVisible(base::local({
[13:37:08.255]                 b <- 3
[13:37:08.255]                 c <- 2
[13:37:08.255]                 a * b * c
[13:37:08.255]             }))
[13:37:08.255]             future::FutureResult(value = ...future.value$value, 
[13:37:08.255]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.255]                   ...future.rng), globalenv = if (FALSE) 
[13:37:08.255]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:08.255]                     ...future.globalenv.names))
[13:37:08.255]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:08.255]         }, condition = base::local({
[13:37:08.255]             c <- base::c
[13:37:08.255]             inherits <- base::inherits
[13:37:08.255]             invokeRestart <- base::invokeRestart
[13:37:08.255]             length <- base::length
[13:37:08.255]             list <- base::list
[13:37:08.255]             seq.int <- base::seq.int
[13:37:08.255]             signalCondition <- base::signalCondition
[13:37:08.255]             sys.calls <- base::sys.calls
[13:37:08.255]             `[[` <- base::`[[`
[13:37:08.255]             `+` <- base::`+`
[13:37:08.255]             `<<-` <- base::`<<-`
[13:37:08.255]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:08.255]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:08.255]                   3L)]
[13:37:08.255]             }
[13:37:08.255]             function(cond) {
[13:37:08.255]                 is_error <- inherits(cond, "error")
[13:37:08.255]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:08.255]                   NULL)
[13:37:08.255]                 if (is_error) {
[13:37:08.255]                   sessionInformation <- function() {
[13:37:08.255]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:08.255]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:08.255]                       search = base::search(), system = base::Sys.info())
[13:37:08.255]                   }
[13:37:08.255]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.255]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:08.255]                     cond$call), session = sessionInformation(), 
[13:37:08.255]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:08.255]                   signalCondition(cond)
[13:37:08.255]                 }
[13:37:08.255]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:08.255]                 "immediateCondition"))) {
[13:37:08.255]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:08.255]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.255]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:08.255]                   if (TRUE && !signal) {
[13:37:08.255]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.255]                     {
[13:37:08.255]                       inherits <- base::inherits
[13:37:08.255]                       invokeRestart <- base::invokeRestart
[13:37:08.255]                       is.null <- base::is.null
[13:37:08.255]                       muffled <- FALSE
[13:37:08.255]                       if (inherits(cond, "message")) {
[13:37:08.255]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.255]                         if (muffled) 
[13:37:08.255]                           invokeRestart("muffleMessage")
[13:37:08.255]                       }
[13:37:08.255]                       else if (inherits(cond, "warning")) {
[13:37:08.255]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.255]                         if (muffled) 
[13:37:08.255]                           invokeRestart("muffleWarning")
[13:37:08.255]                       }
[13:37:08.255]                       else if (inherits(cond, "condition")) {
[13:37:08.255]                         if (!is.null(pattern)) {
[13:37:08.255]                           computeRestarts <- base::computeRestarts
[13:37:08.255]                           grepl <- base::grepl
[13:37:08.255]                           restarts <- computeRestarts(cond)
[13:37:08.255]                           for (restart in restarts) {
[13:37:08.255]                             name <- restart$name
[13:37:08.255]                             if (is.null(name)) 
[13:37:08.255]                               next
[13:37:08.255]                             if (!grepl(pattern, name)) 
[13:37:08.255]                               next
[13:37:08.255]                             invokeRestart(restart)
[13:37:08.255]                             muffled <- TRUE
[13:37:08.255]                             break
[13:37:08.255]                           }
[13:37:08.255]                         }
[13:37:08.255]                       }
[13:37:08.255]                       invisible(muffled)
[13:37:08.255]                     }
[13:37:08.255]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.255]                   }
[13:37:08.255]                 }
[13:37:08.255]                 else {
[13:37:08.255]                   if (TRUE) {
[13:37:08.255]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.255]                     {
[13:37:08.255]                       inherits <- base::inherits
[13:37:08.255]                       invokeRestart <- base::invokeRestart
[13:37:08.255]                       is.null <- base::is.null
[13:37:08.255]                       muffled <- FALSE
[13:37:08.255]                       if (inherits(cond, "message")) {
[13:37:08.255]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.255]                         if (muffled) 
[13:37:08.255]                           invokeRestart("muffleMessage")
[13:37:08.255]                       }
[13:37:08.255]                       else if (inherits(cond, "warning")) {
[13:37:08.255]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.255]                         if (muffled) 
[13:37:08.255]                           invokeRestart("muffleWarning")
[13:37:08.255]                       }
[13:37:08.255]                       else if (inherits(cond, "condition")) {
[13:37:08.255]                         if (!is.null(pattern)) {
[13:37:08.255]                           computeRestarts <- base::computeRestarts
[13:37:08.255]                           grepl <- base::grepl
[13:37:08.255]                           restarts <- computeRestarts(cond)
[13:37:08.255]                           for (restart in restarts) {
[13:37:08.255]                             name <- restart$name
[13:37:08.255]                             if (is.null(name)) 
[13:37:08.255]                               next
[13:37:08.255]                             if (!grepl(pattern, name)) 
[13:37:08.255]                               next
[13:37:08.255]                             invokeRestart(restart)
[13:37:08.255]                             muffled <- TRUE
[13:37:08.255]                             break
[13:37:08.255]                           }
[13:37:08.255]                         }
[13:37:08.255]                       }
[13:37:08.255]                       invisible(muffled)
[13:37:08.255]                     }
[13:37:08.255]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.255]                   }
[13:37:08.255]                 }
[13:37:08.255]             }
[13:37:08.255]         }))
[13:37:08.255]     }, error = function(ex) {
[13:37:08.255]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:08.255]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.255]                 ...future.rng), started = ...future.startTime, 
[13:37:08.255]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:08.255]             version = "1.8"), class = "FutureResult")
[13:37:08.255]     }, finally = {
[13:37:08.255]         if (!identical(...future.workdir, getwd())) 
[13:37:08.255]             setwd(...future.workdir)
[13:37:08.255]         {
[13:37:08.255]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:08.255]                 ...future.oldOptions$nwarnings <- NULL
[13:37:08.255]             }
[13:37:08.255]             base::options(...future.oldOptions)
[13:37:08.255]             if (.Platform$OS.type == "windows") {
[13:37:08.255]                 old_names <- names(...future.oldEnvVars)
[13:37:08.255]                 envs <- base::Sys.getenv()
[13:37:08.255]                 names <- names(envs)
[13:37:08.255]                 common <- intersect(names, old_names)
[13:37:08.255]                 added <- setdiff(names, old_names)
[13:37:08.255]                 removed <- setdiff(old_names, names)
[13:37:08.255]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:08.255]                   envs[common]]
[13:37:08.255]                 NAMES <- toupper(changed)
[13:37:08.255]                 args <- list()
[13:37:08.255]                 for (kk in seq_along(NAMES)) {
[13:37:08.255]                   name <- changed[[kk]]
[13:37:08.255]                   NAME <- NAMES[[kk]]
[13:37:08.255]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.255]                     next
[13:37:08.255]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.255]                 }
[13:37:08.255]                 NAMES <- toupper(added)
[13:37:08.255]                 for (kk in seq_along(NAMES)) {
[13:37:08.255]                   name <- added[[kk]]
[13:37:08.255]                   NAME <- NAMES[[kk]]
[13:37:08.255]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.255]                     next
[13:37:08.255]                   args[[name]] <- ""
[13:37:08.255]                 }
[13:37:08.255]                 NAMES <- toupper(removed)
[13:37:08.255]                 for (kk in seq_along(NAMES)) {
[13:37:08.255]                   name <- removed[[kk]]
[13:37:08.255]                   NAME <- NAMES[[kk]]
[13:37:08.255]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.255]                     next
[13:37:08.255]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.255]                 }
[13:37:08.255]                 if (length(args) > 0) 
[13:37:08.255]                   base::do.call(base::Sys.setenv, args = args)
[13:37:08.255]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:08.255]             }
[13:37:08.255]             else {
[13:37:08.255]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:08.255]             }
[13:37:08.255]             {
[13:37:08.255]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:08.255]                   0L) {
[13:37:08.255]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:08.255]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:08.255]                   base::options(opts)
[13:37:08.255]                 }
[13:37:08.255]                 {
[13:37:08.255]                   {
[13:37:08.255]                     NULL
[13:37:08.255]                     RNGkind("Mersenne-Twister")
[13:37:08.255]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:37:08.255]                       inherits = FALSE)
[13:37:08.255]                   }
[13:37:08.255]                   options(future.plan = NULL)
[13:37:08.255]                   if (is.na(NA_character_)) 
[13:37:08.255]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.255]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:08.255]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:08.255]                     .init = FALSE)
[13:37:08.255]                 }
[13:37:08.255]             }
[13:37:08.255]         }
[13:37:08.255]     })
[13:37:08.255]     if (TRUE) {
[13:37:08.255]         base::sink(type = "output", split = FALSE)
[13:37:08.255]         if (TRUE) {
[13:37:08.255]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:08.255]         }
[13:37:08.255]         else {
[13:37:08.255]             ...future.result["stdout"] <- base::list(NULL)
[13:37:08.255]         }
[13:37:08.255]         base::close(...future.stdout)
[13:37:08.255]         ...future.stdout <- NULL
[13:37:08.255]     }
[13:37:08.255]     ...future.result$conditions <- ...future.conditions
[13:37:08.255]     ...future.result$finished <- base::Sys.time()
[13:37:08.255]     ...future.result
[13:37:08.255] }
[13:37:08.257] assign_globals() ...
[13:37:08.257] List of 1
[13:37:08.257]  $ a: num 0
[13:37:08.257]  - attr(*, "where")=List of 1
[13:37:08.257]   ..$ a:<environment: R_EmptyEnv> 
[13:37:08.257]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:37:08.257]  - attr(*, "resolved")= logi FALSE
[13:37:08.257]  - attr(*, "total_size")= num 56
[13:37:08.263] - copied ‘a’ to environment
[13:37:08.263] assign_globals() ... done
[13:37:08.263] plan(): Setting new future strategy stack:
[13:37:08.263] List of future strategies:
[13:37:08.263] 1. sequential:
[13:37:08.263]    - args: function (..., envir = parent.frame())
[13:37:08.263]    - tweaked: FALSE
[13:37:08.263]    - call: NULL
[13:37:08.264] plan(): nbrOfWorkers() = 1
[13:37:08.264] plan(): Setting new future strategy stack:
[13:37:08.264] List of future strategies:
[13:37:08.264] 1. multicore:
[13:37:08.264]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:37:08.264]    - tweaked: FALSE
[13:37:08.264]    - call: plan(multicore)
[13:37:08.268] plan(): nbrOfWorkers() = 1
[13:37:08.268] SequentialFuture started (and completed)
SequentialFuture:
Label: ‘<none>’
Expression:
{
    b <- 3
    c <- 2
    a * b * c
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 56 bytes (numeric ‘a’ of 56 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 95e450d1-e7b8-6209-6c23-e4c8d06e1b18
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[1] 0
*** multicore(..., globals = TRUE) with globals and blocking
 - Creating multicore future #1 ...
[13:37:08.272] getGlobalsAndPackages() ...
[13:37:08.272] Searching for globals...
[13:37:08.273] - globals found: [2] ‘{’, ‘ii’
[13:37:08.273] Searching for globals ... DONE
[13:37:08.273] Resolving globals: FALSE
[13:37:08.273] The total size of the 1 globals is 56 bytes (56 bytes)
[13:37:08.274] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[13:37:08.274] - globals: [1] ‘ii’
[13:37:08.274] 
[13:37:08.274] getGlobalsAndPackages() ... DONE
[13:37:08.274] Packages needed by the future expression (n = 0): <none>
[13:37:08.274] Packages needed by future strategies (n = 0): <none>
[13:37:08.275] {
[13:37:08.275]     {
[13:37:08.275]         {
[13:37:08.275]             ...future.startTime <- base::Sys.time()
[13:37:08.275]             {
[13:37:08.275]                 {
[13:37:08.275]                   {
[13:37:08.275]                     base::local({
[13:37:08.275]                       has_future <- base::requireNamespace("future", 
[13:37:08.275]                         quietly = TRUE)
[13:37:08.275]                       if (has_future) {
[13:37:08.275]                         ns <- base::getNamespace("future")
[13:37:08.275]                         version <- ns[[".package"]][["version"]]
[13:37:08.275]                         if (is.null(version)) 
[13:37:08.275]                           version <- utils::packageVersion("future")
[13:37:08.275]                       }
[13:37:08.275]                       else {
[13:37:08.275]                         version <- NULL
[13:37:08.275]                       }
[13:37:08.275]                       if (!has_future || version < "1.8.0") {
[13:37:08.275]                         info <- base::c(r_version = base::gsub("R version ", 
[13:37:08.275]                           "", base::R.version$version.string), 
[13:37:08.275]                           platform = base::sprintf("%s (%s-bit)", 
[13:37:08.275]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:08.275]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:08.275]                             "release", "version")], collapse = " "), 
[13:37:08.275]                           hostname = base::Sys.info()[["nodename"]])
[13:37:08.275]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:37:08.275]                           info)
[13:37:08.275]                         info <- base::paste(info, collapse = "; ")
[13:37:08.275]                         if (!has_future) {
[13:37:08.275]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:08.275]                             info)
[13:37:08.275]                         }
[13:37:08.275]                         else {
[13:37:08.275]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:08.275]                             info, version)
[13:37:08.275]                         }
[13:37:08.275]                         base::stop(msg)
[13:37:08.275]                       }
[13:37:08.275]                     })
[13:37:08.275]                   }
[13:37:08.275]                   ...future.strategy.old <- future::plan("list")
[13:37:08.275]                   options(future.plan = NULL)
[13:37:08.275]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.275]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:08.275]                 }
[13:37:08.275]                 ...future.workdir <- getwd()
[13:37:08.275]             }
[13:37:08.275]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:08.275]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:08.275]         }
[13:37:08.275]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:08.275]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:08.275]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:08.275]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:08.275]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:08.275]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:08.275]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:08.275]             base::names(...future.oldOptions))
[13:37:08.275]     }
[13:37:08.275]     if (FALSE) {
[13:37:08.275]     }
[13:37:08.275]     else {
[13:37:08.275]         if (TRUE) {
[13:37:08.275]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:08.275]                 open = "w")
[13:37:08.275]         }
[13:37:08.275]         else {
[13:37:08.275]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:08.275]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:08.275]         }
[13:37:08.275]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:08.275]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:08.275]             base::sink(type = "output", split = FALSE)
[13:37:08.275]             base::close(...future.stdout)
[13:37:08.275]         }, add = TRUE)
[13:37:08.275]     }
[13:37:08.275]     ...future.frame <- base::sys.nframe()
[13:37:08.275]     ...future.conditions <- base::list()
[13:37:08.275]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:08.275]     if (FALSE) {
[13:37:08.275]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:08.275]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:08.275]     }
[13:37:08.275]     ...future.result <- base::tryCatch({
[13:37:08.275]         base::withCallingHandlers({
[13:37:08.275]             ...future.value <- base::withVisible(base::local({
[13:37:08.275]                 ii
[13:37:08.275]             }))
[13:37:08.275]             future::FutureResult(value = ...future.value$value, 
[13:37:08.275]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.275]                   ...future.rng), globalenv = if (FALSE) 
[13:37:08.275]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:08.275]                     ...future.globalenv.names))
[13:37:08.275]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:08.275]         }, condition = base::local({
[13:37:08.275]             c <- base::c
[13:37:08.275]             inherits <- base::inherits
[13:37:08.275]             invokeRestart <- base::invokeRestart
[13:37:08.275]             length <- base::length
[13:37:08.275]             list <- base::list
[13:37:08.275]             seq.int <- base::seq.int
[13:37:08.275]             signalCondition <- base::signalCondition
[13:37:08.275]             sys.calls <- base::sys.calls
[13:37:08.275]             `[[` <- base::`[[`
[13:37:08.275]             `+` <- base::`+`
[13:37:08.275]             `<<-` <- base::`<<-`
[13:37:08.275]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:08.275]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:08.275]                   3L)]
[13:37:08.275]             }
[13:37:08.275]             function(cond) {
[13:37:08.275]                 is_error <- inherits(cond, "error")
[13:37:08.275]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:08.275]                   NULL)
[13:37:08.275]                 if (is_error) {
[13:37:08.275]                   sessionInformation <- function() {
[13:37:08.275]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:08.275]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:08.275]                       search = base::search(), system = base::Sys.info())
[13:37:08.275]                   }
[13:37:08.275]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.275]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:08.275]                     cond$call), session = sessionInformation(), 
[13:37:08.275]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:08.275]                   signalCondition(cond)
[13:37:08.275]                 }
[13:37:08.275]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:08.275]                 "immediateCondition"))) {
[13:37:08.275]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:08.275]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.275]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:08.275]                   if (TRUE && !signal) {
[13:37:08.275]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.275]                     {
[13:37:08.275]                       inherits <- base::inherits
[13:37:08.275]                       invokeRestart <- base::invokeRestart
[13:37:08.275]                       is.null <- base::is.null
[13:37:08.275]                       muffled <- FALSE
[13:37:08.275]                       if (inherits(cond, "message")) {
[13:37:08.275]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.275]                         if (muffled) 
[13:37:08.275]                           invokeRestart("muffleMessage")
[13:37:08.275]                       }
[13:37:08.275]                       else if (inherits(cond, "warning")) {
[13:37:08.275]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.275]                         if (muffled) 
[13:37:08.275]                           invokeRestart("muffleWarning")
[13:37:08.275]                       }
[13:37:08.275]                       else if (inherits(cond, "condition")) {
[13:37:08.275]                         if (!is.null(pattern)) {
[13:37:08.275]                           computeRestarts <- base::computeRestarts
[13:37:08.275]                           grepl <- base::grepl
[13:37:08.275]                           restarts <- computeRestarts(cond)
[13:37:08.275]                           for (restart in restarts) {
[13:37:08.275]                             name <- restart$name
[13:37:08.275]                             if (is.null(name)) 
[13:37:08.275]                               next
[13:37:08.275]                             if (!grepl(pattern, name)) 
[13:37:08.275]                               next
[13:37:08.275]                             invokeRestart(restart)
[13:37:08.275]                             muffled <- TRUE
[13:37:08.275]                             break
[13:37:08.275]                           }
[13:37:08.275]                         }
[13:37:08.275]                       }
[13:37:08.275]                       invisible(muffled)
[13:37:08.275]                     }
[13:37:08.275]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.275]                   }
[13:37:08.275]                 }
[13:37:08.275]                 else {
[13:37:08.275]                   if (TRUE) {
[13:37:08.275]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.275]                     {
[13:37:08.275]                       inherits <- base::inherits
[13:37:08.275]                       invokeRestart <- base::invokeRestart
[13:37:08.275]                       is.null <- base::is.null
[13:37:08.275]                       muffled <- FALSE
[13:37:08.275]                       if (inherits(cond, "message")) {
[13:37:08.275]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.275]                         if (muffled) 
[13:37:08.275]                           invokeRestart("muffleMessage")
[13:37:08.275]                       }
[13:37:08.275]                       else if (inherits(cond, "warning")) {
[13:37:08.275]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.275]                         if (muffled) 
[13:37:08.275]                           invokeRestart("muffleWarning")
[13:37:08.275]                       }
[13:37:08.275]                       else if (inherits(cond, "condition")) {
[13:37:08.275]                         if (!is.null(pattern)) {
[13:37:08.275]                           computeRestarts <- base::computeRestarts
[13:37:08.275]                           grepl <- base::grepl
[13:37:08.275]                           restarts <- computeRestarts(cond)
[13:37:08.275]                           for (restart in restarts) {
[13:37:08.275]                             name <- restart$name
[13:37:08.275]                             if (is.null(name)) 
[13:37:08.275]                               next
[13:37:08.275]                             if (!grepl(pattern, name)) 
[13:37:08.275]                               next
[13:37:08.275]                             invokeRestart(restart)
[13:37:08.275]                             muffled <- TRUE
[13:37:08.275]                             break
[13:37:08.275]                           }
[13:37:08.275]                         }
[13:37:08.275]                       }
[13:37:08.275]                       invisible(muffled)
[13:37:08.275]                     }
[13:37:08.275]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.275]                   }
[13:37:08.275]                 }
[13:37:08.275]             }
[13:37:08.275]         }))
[13:37:08.275]     }, error = function(ex) {
[13:37:08.275]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:08.275]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.275]                 ...future.rng), started = ...future.startTime, 
[13:37:08.275]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:08.275]             version = "1.8"), class = "FutureResult")
[13:37:08.275]     }, finally = {
[13:37:08.275]         if (!identical(...future.workdir, getwd())) 
[13:37:08.275]             setwd(...future.workdir)
[13:37:08.275]         {
[13:37:08.275]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:08.275]                 ...future.oldOptions$nwarnings <- NULL
[13:37:08.275]             }
[13:37:08.275]             base::options(...future.oldOptions)
[13:37:08.275]             if (.Platform$OS.type == "windows") {
[13:37:08.275]                 old_names <- names(...future.oldEnvVars)
[13:37:08.275]                 envs <- base::Sys.getenv()
[13:37:08.275]                 names <- names(envs)
[13:37:08.275]                 common <- intersect(names, old_names)
[13:37:08.275]                 added <- setdiff(names, old_names)
[13:37:08.275]                 removed <- setdiff(old_names, names)
[13:37:08.275]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:08.275]                   envs[common]]
[13:37:08.275]                 NAMES <- toupper(changed)
[13:37:08.275]                 args <- list()
[13:37:08.275]                 for (kk in seq_along(NAMES)) {
[13:37:08.275]                   name <- changed[[kk]]
[13:37:08.275]                   NAME <- NAMES[[kk]]
[13:37:08.275]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.275]                     next
[13:37:08.275]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.275]                 }
[13:37:08.275]                 NAMES <- toupper(added)
[13:37:08.275]                 for (kk in seq_along(NAMES)) {
[13:37:08.275]                   name <- added[[kk]]
[13:37:08.275]                   NAME <- NAMES[[kk]]
[13:37:08.275]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.275]                     next
[13:37:08.275]                   args[[name]] <- ""
[13:37:08.275]                 }
[13:37:08.275]                 NAMES <- toupper(removed)
[13:37:08.275]                 for (kk in seq_along(NAMES)) {
[13:37:08.275]                   name <- removed[[kk]]
[13:37:08.275]                   NAME <- NAMES[[kk]]
[13:37:08.275]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.275]                     next
[13:37:08.275]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.275]                 }
[13:37:08.275]                 if (length(args) > 0) 
[13:37:08.275]                   base::do.call(base::Sys.setenv, args = args)
[13:37:08.275]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:08.275]             }
[13:37:08.275]             else {
[13:37:08.275]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:08.275]             }
[13:37:08.275]             {
[13:37:08.275]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:08.275]                   0L) {
[13:37:08.275]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:08.275]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:08.275]                   base::options(opts)
[13:37:08.275]                 }
[13:37:08.275]                 {
[13:37:08.275]                   {
[13:37:08.275]                     NULL
[13:37:08.275]                     RNGkind("Mersenne-Twister")
[13:37:08.275]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:37:08.275]                       inherits = FALSE)
[13:37:08.275]                   }
[13:37:08.275]                   options(future.plan = NULL)
[13:37:08.275]                   if (is.na(NA_character_)) 
[13:37:08.275]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.275]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:08.275]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:08.275]                     .init = FALSE)
[13:37:08.275]                 }
[13:37:08.275]             }
[13:37:08.275]         }
[13:37:08.275]     })
[13:37:08.275]     if (TRUE) {
[13:37:08.275]         base::sink(type = "output", split = FALSE)
[13:37:08.275]         if (TRUE) {
[13:37:08.275]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:08.275]         }
[13:37:08.275]         else {
[13:37:08.275]             ...future.result["stdout"] <- base::list(NULL)
[13:37:08.275]         }
[13:37:08.275]         base::close(...future.stdout)
[13:37:08.275]         ...future.stdout <- NULL
[13:37:08.275]     }
[13:37:08.275]     ...future.result$conditions <- ...future.conditions
[13:37:08.275]     ...future.result$finished <- base::Sys.time()
[13:37:08.275]     ...future.result
[13:37:08.275] }
[13:37:08.276] assign_globals() ...
[13:37:08.276] List of 1
[13:37:08.276]  $ ii: int 1
[13:37:08.276]  - attr(*, "where")=List of 1
[13:37:08.276]   ..$ ii:<environment: R_EmptyEnv> 
[13:37:08.276]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:37:08.276]  - attr(*, "resolved")= logi FALSE
[13:37:08.276]  - attr(*, "total_size")= num 56
[13:37:08.278] - copied ‘ii’ to environment
[13:37:08.279] assign_globals() ... done
[13:37:08.279] plan(): Setting new future strategy stack:
[13:37:08.279] List of future strategies:
[13:37:08.279] 1. sequential:
[13:37:08.279]    - args: function (..., envir = parent.frame())
[13:37:08.279]    - tweaked: FALSE
[13:37:08.279]    - call: NULL
[13:37:08.279] plan(): nbrOfWorkers() = 1
[13:37:08.280] plan(): Setting new future strategy stack:
[13:37:08.280] List of future strategies:
[13:37:08.280] 1. multicore:
[13:37:08.280]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:37:08.280]    - tweaked: FALSE
[13:37:08.280]    - call: plan(multicore)
[13:37:08.283] plan(): nbrOfWorkers() = 1
[13:37:08.283] SequentialFuture started (and completed)
 - Creating multicore future #2 ...
[13:37:08.287] getGlobalsAndPackages() ...
[13:37:08.287] Searching for globals...
[13:37:08.287] - globals found: [2] ‘{’, ‘ii’
[13:37:08.288] Searching for globals ... DONE
[13:37:08.288] Resolving globals: FALSE
[13:37:08.288] The total size of the 1 globals is 56 bytes (56 bytes)
[13:37:08.288] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[13:37:08.288] - globals: [1] ‘ii’
[13:37:08.288] 
[13:37:08.289] getGlobalsAndPackages() ... DONE
[13:37:08.289] Packages needed by the future expression (n = 0): <none>
[13:37:08.289] Packages needed by future strategies (n = 0): <none>
[13:37:08.289] {
[13:37:08.289]     {
[13:37:08.289]         {
[13:37:08.289]             ...future.startTime <- base::Sys.time()
[13:37:08.289]             {
[13:37:08.289]                 {
[13:37:08.289]                   {
[13:37:08.289]                     base::local({
[13:37:08.289]                       has_future <- base::requireNamespace("future", 
[13:37:08.289]                         quietly = TRUE)
[13:37:08.289]                       if (has_future) {
[13:37:08.289]                         ns <- base::getNamespace("future")
[13:37:08.289]                         version <- ns[[".package"]][["version"]]
[13:37:08.289]                         if (is.null(version)) 
[13:37:08.289]                           version <- utils::packageVersion("future")
[13:37:08.289]                       }
[13:37:08.289]                       else {
[13:37:08.289]                         version <- NULL
[13:37:08.289]                       }
[13:37:08.289]                       if (!has_future || version < "1.8.0") {
[13:37:08.289]                         info <- base::c(r_version = base::gsub("R version ", 
[13:37:08.289]                           "", base::R.version$version.string), 
[13:37:08.289]                           platform = base::sprintf("%s (%s-bit)", 
[13:37:08.289]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:08.289]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:08.289]                             "release", "version")], collapse = " "), 
[13:37:08.289]                           hostname = base::Sys.info()[["nodename"]])
[13:37:08.289]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:37:08.289]                           info)
[13:37:08.289]                         info <- base::paste(info, collapse = "; ")
[13:37:08.289]                         if (!has_future) {
[13:37:08.289]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:08.289]                             info)
[13:37:08.289]                         }
[13:37:08.289]                         else {
[13:37:08.289]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:08.289]                             info, version)
[13:37:08.289]                         }
[13:37:08.289]                         base::stop(msg)
[13:37:08.289]                       }
[13:37:08.289]                     })
[13:37:08.289]                   }
[13:37:08.289]                   ...future.strategy.old <- future::plan("list")
[13:37:08.289]                   options(future.plan = NULL)
[13:37:08.289]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.289]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:08.289]                 }
[13:37:08.289]                 ...future.workdir <- getwd()
[13:37:08.289]             }
[13:37:08.289]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:08.289]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:08.289]         }
[13:37:08.289]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:08.289]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:08.289]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:08.289]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:08.289]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:08.289]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:08.289]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:08.289]             base::names(...future.oldOptions))
[13:37:08.289]     }
[13:37:08.289]     if (FALSE) {
[13:37:08.289]     }
[13:37:08.289]     else {
[13:37:08.289]         if (TRUE) {
[13:37:08.289]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:08.289]                 open = "w")
[13:37:08.289]         }
[13:37:08.289]         else {
[13:37:08.289]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:08.289]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:08.289]         }
[13:37:08.289]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:08.289]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:08.289]             base::sink(type = "output", split = FALSE)
[13:37:08.289]             base::close(...future.stdout)
[13:37:08.289]         }, add = TRUE)
[13:37:08.289]     }
[13:37:08.289]     ...future.frame <- base::sys.nframe()
[13:37:08.289]     ...future.conditions <- base::list()
[13:37:08.289]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:08.289]     if (FALSE) {
[13:37:08.289]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:08.289]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:08.289]     }
[13:37:08.289]     ...future.result <- base::tryCatch({
[13:37:08.289]         base::withCallingHandlers({
[13:37:08.289]             ...future.value <- base::withVisible(base::local({
[13:37:08.289]                 ii
[13:37:08.289]             }))
[13:37:08.289]             future::FutureResult(value = ...future.value$value, 
[13:37:08.289]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.289]                   ...future.rng), globalenv = if (FALSE) 
[13:37:08.289]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:08.289]                     ...future.globalenv.names))
[13:37:08.289]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:08.289]         }, condition = base::local({
[13:37:08.289]             c <- base::c
[13:37:08.289]             inherits <- base::inherits
[13:37:08.289]             invokeRestart <- base::invokeRestart
[13:37:08.289]             length <- base::length
[13:37:08.289]             list <- base::list
[13:37:08.289]             seq.int <- base::seq.int
[13:37:08.289]             signalCondition <- base::signalCondition
[13:37:08.289]             sys.calls <- base::sys.calls
[13:37:08.289]             `[[` <- base::`[[`
[13:37:08.289]             `+` <- base::`+`
[13:37:08.289]             `<<-` <- base::`<<-`
[13:37:08.289]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:08.289]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:08.289]                   3L)]
[13:37:08.289]             }
[13:37:08.289]             function(cond) {
[13:37:08.289]                 is_error <- inherits(cond, "error")
[13:37:08.289]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:08.289]                   NULL)
[13:37:08.289]                 if (is_error) {
[13:37:08.289]                   sessionInformation <- function() {
[13:37:08.289]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:08.289]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:08.289]                       search = base::search(), system = base::Sys.info())
[13:37:08.289]                   }
[13:37:08.289]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.289]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:08.289]                     cond$call), session = sessionInformation(), 
[13:37:08.289]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:08.289]                   signalCondition(cond)
[13:37:08.289]                 }
[13:37:08.289]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:08.289]                 "immediateCondition"))) {
[13:37:08.289]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:08.289]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.289]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:08.289]                   if (TRUE && !signal) {
[13:37:08.289]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.289]                     {
[13:37:08.289]                       inherits <- base::inherits
[13:37:08.289]                       invokeRestart <- base::invokeRestart
[13:37:08.289]                       is.null <- base::is.null
[13:37:08.289]                       muffled <- FALSE
[13:37:08.289]                       if (inherits(cond, "message")) {
[13:37:08.289]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.289]                         if (muffled) 
[13:37:08.289]                           invokeRestart("muffleMessage")
[13:37:08.289]                       }
[13:37:08.289]                       else if (inherits(cond, "warning")) {
[13:37:08.289]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.289]                         if (muffled) 
[13:37:08.289]                           invokeRestart("muffleWarning")
[13:37:08.289]                       }
[13:37:08.289]                       else if (inherits(cond, "condition")) {
[13:37:08.289]                         if (!is.null(pattern)) {
[13:37:08.289]                           computeRestarts <- base::computeRestarts
[13:37:08.289]                           grepl <- base::grepl
[13:37:08.289]                           restarts <- computeRestarts(cond)
[13:37:08.289]                           for (restart in restarts) {
[13:37:08.289]                             name <- restart$name
[13:37:08.289]                             if (is.null(name)) 
[13:37:08.289]                               next
[13:37:08.289]                             if (!grepl(pattern, name)) 
[13:37:08.289]                               next
[13:37:08.289]                             invokeRestart(restart)
[13:37:08.289]                             muffled <- TRUE
[13:37:08.289]                             break
[13:37:08.289]                           }
[13:37:08.289]                         }
[13:37:08.289]                       }
[13:37:08.289]                       invisible(muffled)
[13:37:08.289]                     }
[13:37:08.289]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.289]                   }
[13:37:08.289]                 }
[13:37:08.289]                 else {
[13:37:08.289]                   if (TRUE) {
[13:37:08.289]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.289]                     {
[13:37:08.289]                       inherits <- base::inherits
[13:37:08.289]                       invokeRestart <- base::invokeRestart
[13:37:08.289]                       is.null <- base::is.null
[13:37:08.289]                       muffled <- FALSE
[13:37:08.289]                       if (inherits(cond, "message")) {
[13:37:08.289]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.289]                         if (muffled) 
[13:37:08.289]                           invokeRestart("muffleMessage")
[13:37:08.289]                       }
[13:37:08.289]                       else if (inherits(cond, "warning")) {
[13:37:08.289]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.289]                         if (muffled) 
[13:37:08.289]                           invokeRestart("muffleWarning")
[13:37:08.289]                       }
[13:37:08.289]                       else if (inherits(cond, "condition")) {
[13:37:08.289]                         if (!is.null(pattern)) {
[13:37:08.289]                           computeRestarts <- base::computeRestarts
[13:37:08.289]                           grepl <- base::grepl
[13:37:08.289]                           restarts <- computeRestarts(cond)
[13:37:08.289]                           for (restart in restarts) {
[13:37:08.289]                             name <- restart$name
[13:37:08.289]                             if (is.null(name)) 
[13:37:08.289]                               next
[13:37:08.289]                             if (!grepl(pattern, name)) 
[13:37:08.289]                               next
[13:37:08.289]                             invokeRestart(restart)
[13:37:08.289]                             muffled <- TRUE
[13:37:08.289]                             break
[13:37:08.289]                           }
[13:37:08.289]                         }
[13:37:08.289]                       }
[13:37:08.289]                       invisible(muffled)
[13:37:08.289]                     }
[13:37:08.289]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.289]                   }
[13:37:08.289]                 }
[13:37:08.289]             }
[13:37:08.289]         }))
[13:37:08.289]     }, error = function(ex) {
[13:37:08.289]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:08.289]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.289]                 ...future.rng), started = ...future.startTime, 
[13:37:08.289]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:08.289]             version = "1.8"), class = "FutureResult")
[13:37:08.289]     }, finally = {
[13:37:08.289]         if (!identical(...future.workdir, getwd())) 
[13:37:08.289]             setwd(...future.workdir)
[13:37:08.289]         {
[13:37:08.289]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:08.289]                 ...future.oldOptions$nwarnings <- NULL
[13:37:08.289]             }
[13:37:08.289]             base::options(...future.oldOptions)
[13:37:08.289]             if (.Platform$OS.type == "windows") {
[13:37:08.289]                 old_names <- names(...future.oldEnvVars)
[13:37:08.289]                 envs <- base::Sys.getenv()
[13:37:08.289]                 names <- names(envs)
[13:37:08.289]                 common <- intersect(names, old_names)
[13:37:08.289]                 added <- setdiff(names, old_names)
[13:37:08.289]                 removed <- setdiff(old_names, names)
[13:37:08.289]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:08.289]                   envs[common]]
[13:37:08.289]                 NAMES <- toupper(changed)
[13:37:08.289]                 args <- list()
[13:37:08.289]                 for (kk in seq_along(NAMES)) {
[13:37:08.289]                   name <- changed[[kk]]
[13:37:08.289]                   NAME <- NAMES[[kk]]
[13:37:08.289]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.289]                     next
[13:37:08.289]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.289]                 }
[13:37:08.289]                 NAMES <- toupper(added)
[13:37:08.289]                 for (kk in seq_along(NAMES)) {
[13:37:08.289]                   name <- added[[kk]]
[13:37:08.289]                   NAME <- NAMES[[kk]]
[13:37:08.289]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.289]                     next
[13:37:08.289]                   args[[name]] <- ""
[13:37:08.289]                 }
[13:37:08.289]                 NAMES <- toupper(removed)
[13:37:08.289]                 for (kk in seq_along(NAMES)) {
[13:37:08.289]                   name <- removed[[kk]]
[13:37:08.289]                   NAME <- NAMES[[kk]]
[13:37:08.289]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.289]                     next
[13:37:08.289]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.289]                 }
[13:37:08.289]                 if (length(args) > 0) 
[13:37:08.289]                   base::do.call(base::Sys.setenv, args = args)
[13:37:08.289]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:08.289]             }
[13:37:08.289]             else {
[13:37:08.289]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:08.289]             }
[13:37:08.289]             {
[13:37:08.289]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:08.289]                   0L) {
[13:37:08.289]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:08.289]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:08.289]                   base::options(opts)
[13:37:08.289]                 }
[13:37:08.289]                 {
[13:37:08.289]                   {
[13:37:08.289]                     NULL
[13:37:08.289]                     RNGkind("Mersenne-Twister")
[13:37:08.289]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:37:08.289]                       inherits = FALSE)
[13:37:08.289]                   }
[13:37:08.289]                   options(future.plan = NULL)
[13:37:08.289]                   if (is.na(NA_character_)) 
[13:37:08.289]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.289]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:08.289]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:08.289]                     .init = FALSE)
[13:37:08.289]                 }
[13:37:08.289]             }
[13:37:08.289]         }
[13:37:08.289]     })
[13:37:08.289]     if (TRUE) {
[13:37:08.289]         base::sink(type = "output", split = FALSE)
[13:37:08.289]         if (TRUE) {
[13:37:08.289]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:08.289]         }
[13:37:08.289]         else {
[13:37:08.289]             ...future.result["stdout"] <- base::list(NULL)
[13:37:08.289]         }
[13:37:08.289]         base::close(...future.stdout)
[13:37:08.289]         ...future.stdout <- NULL
[13:37:08.289]     }
[13:37:08.289]     ...future.result$conditions <- ...future.conditions
[13:37:08.289]     ...future.result$finished <- base::Sys.time()
[13:37:08.289]     ...future.result
[13:37:08.289] }
[13:37:08.291] assign_globals() ...
[13:37:08.291] List of 1
[13:37:08.291]  $ ii: int 2
[13:37:08.291]  - attr(*, "where")=List of 1
[13:37:08.291]   ..$ ii:<environment: R_EmptyEnv> 
[13:37:08.291]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:37:08.291]  - attr(*, "resolved")= logi FALSE
[13:37:08.291]  - attr(*, "total_size")= num 56
[13:37:08.293] - copied ‘ii’ to environment
[13:37:08.293] assign_globals() ... done
[13:37:08.293] plan(): Setting new future strategy stack:
[13:37:08.293] List of future strategies:
[13:37:08.293] 1. sequential:
[13:37:08.293]    - args: function (..., envir = parent.frame())
[13:37:08.293]    - tweaked: FALSE
[13:37:08.293]    - call: NULL
[13:37:08.294] plan(): nbrOfWorkers() = 1
[13:37:08.294] plan(): Setting new future strategy stack:
[13:37:08.295] List of future strategies:
[13:37:08.295] 1. multicore:
[13:37:08.295]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:37:08.295]    - tweaked: FALSE
[13:37:08.295]    - call: plan(multicore)
[13:37:08.298] plan(): nbrOfWorkers() = 1
[13:37:08.298] SequentialFuture started (and completed)
 - Creating multicore future #3 ...
[13:37:08.301] getGlobalsAndPackages() ...
[13:37:08.301] Searching for globals...
[13:37:08.302] - globals found: [2] ‘{’, ‘ii’
[13:37:08.302] Searching for globals ... DONE
[13:37:08.304] Resolving globals: FALSE
[13:37:08.304] The total size of the 1 globals is 56 bytes (56 bytes)
[13:37:08.304] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[13:37:08.304] - globals: [1] ‘ii’
[13:37:08.305] 
[13:37:08.305] getGlobalsAndPackages() ... DONE
[13:37:08.305] Packages needed by the future expression (n = 0): <none>
[13:37:08.305] Packages needed by future strategies (n = 0): <none>
[13:37:08.306] {
[13:37:08.306]     {
[13:37:08.306]         {
[13:37:08.306]             ...future.startTime <- base::Sys.time()
[13:37:08.306]             {
[13:37:08.306]                 {
[13:37:08.306]                   {
[13:37:08.306]                     base::local({
[13:37:08.306]                       has_future <- base::requireNamespace("future", 
[13:37:08.306]                         quietly = TRUE)
[13:37:08.306]                       if (has_future) {
[13:37:08.306]                         ns <- base::getNamespace("future")
[13:37:08.306]                         version <- ns[[".package"]][["version"]]
[13:37:08.306]                         if (is.null(version)) 
[13:37:08.306]                           version <- utils::packageVersion("future")
[13:37:08.306]                       }
[13:37:08.306]                       else {
[13:37:08.306]                         version <- NULL
[13:37:08.306]                       }
[13:37:08.306]                       if (!has_future || version < "1.8.0") {
[13:37:08.306]                         info <- base::c(r_version = base::gsub("R version ", 
[13:37:08.306]                           "", base::R.version$version.string), 
[13:37:08.306]                           platform = base::sprintf("%s (%s-bit)", 
[13:37:08.306]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:08.306]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:08.306]                             "release", "version")], collapse = " "), 
[13:37:08.306]                           hostname = base::Sys.info()[["nodename"]])
[13:37:08.306]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:37:08.306]                           info)
[13:37:08.306]                         info <- base::paste(info, collapse = "; ")
[13:37:08.306]                         if (!has_future) {
[13:37:08.306]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:08.306]                             info)
[13:37:08.306]                         }
[13:37:08.306]                         else {
[13:37:08.306]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:08.306]                             info, version)
[13:37:08.306]                         }
[13:37:08.306]                         base::stop(msg)
[13:37:08.306]                       }
[13:37:08.306]                     })
[13:37:08.306]                   }
[13:37:08.306]                   ...future.strategy.old <- future::plan("list")
[13:37:08.306]                   options(future.plan = NULL)
[13:37:08.306]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.306]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:08.306]                 }
[13:37:08.306]                 ...future.workdir <- getwd()
[13:37:08.306]             }
[13:37:08.306]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:08.306]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:08.306]         }
[13:37:08.306]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:08.306]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:08.306]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:08.306]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:08.306]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:08.306]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:08.306]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:08.306]             base::names(...future.oldOptions))
[13:37:08.306]     }
[13:37:08.306]     if (FALSE) {
[13:37:08.306]     }
[13:37:08.306]     else {
[13:37:08.306]         if (TRUE) {
[13:37:08.306]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:08.306]                 open = "w")
[13:37:08.306]         }
[13:37:08.306]         else {
[13:37:08.306]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:08.306]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:08.306]         }
[13:37:08.306]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:08.306]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:08.306]             base::sink(type = "output", split = FALSE)
[13:37:08.306]             base::close(...future.stdout)
[13:37:08.306]         }, add = TRUE)
[13:37:08.306]     }
[13:37:08.306]     ...future.frame <- base::sys.nframe()
[13:37:08.306]     ...future.conditions <- base::list()
[13:37:08.306]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:08.306]     if (FALSE) {
[13:37:08.306]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:08.306]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:08.306]     }
[13:37:08.306]     ...future.result <- base::tryCatch({
[13:37:08.306]         base::withCallingHandlers({
[13:37:08.306]             ...future.value <- base::withVisible(base::local({
[13:37:08.306]                 ii
[13:37:08.306]             }))
[13:37:08.306]             future::FutureResult(value = ...future.value$value, 
[13:37:08.306]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.306]                   ...future.rng), globalenv = if (FALSE) 
[13:37:08.306]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:08.306]                     ...future.globalenv.names))
[13:37:08.306]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:08.306]         }, condition = base::local({
[13:37:08.306]             c <- base::c
[13:37:08.306]             inherits <- base::inherits
[13:37:08.306]             invokeRestart <- base::invokeRestart
[13:37:08.306]             length <- base::length
[13:37:08.306]             list <- base::list
[13:37:08.306]             seq.int <- base::seq.int
[13:37:08.306]             signalCondition <- base::signalCondition
[13:37:08.306]             sys.calls <- base::sys.calls
[13:37:08.306]             `[[` <- base::`[[`
[13:37:08.306]             `+` <- base::`+`
[13:37:08.306]             `<<-` <- base::`<<-`
[13:37:08.306]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:08.306]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:08.306]                   3L)]
[13:37:08.306]             }
[13:37:08.306]             function(cond) {
[13:37:08.306]                 is_error <- inherits(cond, "error")
[13:37:08.306]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:08.306]                   NULL)
[13:37:08.306]                 if (is_error) {
[13:37:08.306]                   sessionInformation <- function() {
[13:37:08.306]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:08.306]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:08.306]                       search = base::search(), system = base::Sys.info())
[13:37:08.306]                   }
[13:37:08.306]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.306]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:08.306]                     cond$call), session = sessionInformation(), 
[13:37:08.306]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:08.306]                   signalCondition(cond)
[13:37:08.306]                 }
[13:37:08.306]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:08.306]                 "immediateCondition"))) {
[13:37:08.306]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:08.306]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.306]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:08.306]                   if (TRUE && !signal) {
[13:37:08.306]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.306]                     {
[13:37:08.306]                       inherits <- base::inherits
[13:37:08.306]                       invokeRestart <- base::invokeRestart
[13:37:08.306]                       is.null <- base::is.null
[13:37:08.306]                       muffled <- FALSE
[13:37:08.306]                       if (inherits(cond, "message")) {
[13:37:08.306]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.306]                         if (muffled) 
[13:37:08.306]                           invokeRestart("muffleMessage")
[13:37:08.306]                       }
[13:37:08.306]                       else if (inherits(cond, "warning")) {
[13:37:08.306]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.306]                         if (muffled) 
[13:37:08.306]                           invokeRestart("muffleWarning")
[13:37:08.306]                       }
[13:37:08.306]                       else if (inherits(cond, "condition")) {
[13:37:08.306]                         if (!is.null(pattern)) {
[13:37:08.306]                           computeRestarts <- base::computeRestarts
[13:37:08.306]                           grepl <- base::grepl
[13:37:08.306]                           restarts <- computeRestarts(cond)
[13:37:08.306]                           for (restart in restarts) {
[13:37:08.306]                             name <- restart$name
[13:37:08.306]                             if (is.null(name)) 
[13:37:08.306]                               next
[13:37:08.306]                             if (!grepl(pattern, name)) 
[13:37:08.306]                               next
[13:37:08.306]                             invokeRestart(restart)
[13:37:08.306]                             muffled <- TRUE
[13:37:08.306]                             break
[13:37:08.306]                           }
[13:37:08.306]                         }
[13:37:08.306]                       }
[13:37:08.306]                       invisible(muffled)
[13:37:08.306]                     }
[13:37:08.306]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.306]                   }
[13:37:08.306]                 }
[13:37:08.306]                 else {
[13:37:08.306]                   if (TRUE) {
[13:37:08.306]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.306]                     {
[13:37:08.306]                       inherits <- base::inherits
[13:37:08.306]                       invokeRestart <- base::invokeRestart
[13:37:08.306]                       is.null <- base::is.null
[13:37:08.306]                       muffled <- FALSE
[13:37:08.306]                       if (inherits(cond, "message")) {
[13:37:08.306]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.306]                         if (muffled) 
[13:37:08.306]                           invokeRestart("muffleMessage")
[13:37:08.306]                       }
[13:37:08.306]                       else if (inherits(cond, "warning")) {
[13:37:08.306]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.306]                         if (muffled) 
[13:37:08.306]                           invokeRestart("muffleWarning")
[13:37:08.306]                       }
[13:37:08.306]                       else if (inherits(cond, "condition")) {
[13:37:08.306]                         if (!is.null(pattern)) {
[13:37:08.306]                           computeRestarts <- base::computeRestarts
[13:37:08.306]                           grepl <- base::grepl
[13:37:08.306]                           restarts <- computeRestarts(cond)
[13:37:08.306]                           for (restart in restarts) {
[13:37:08.306]                             name <- restart$name
[13:37:08.306]                             if (is.null(name)) 
[13:37:08.306]                               next
[13:37:08.306]                             if (!grepl(pattern, name)) 
[13:37:08.306]                               next
[13:37:08.306]                             invokeRestart(restart)
[13:37:08.306]                             muffled <- TRUE
[13:37:08.306]                             break
[13:37:08.306]                           }
[13:37:08.306]                         }
[13:37:08.306]                       }
[13:37:08.306]                       invisible(muffled)
[13:37:08.306]                     }
[13:37:08.306]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.306]                   }
[13:37:08.306]                 }
[13:37:08.306]             }
[13:37:08.306]         }))
[13:37:08.306]     }, error = function(ex) {
[13:37:08.306]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:08.306]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.306]                 ...future.rng), started = ...future.startTime, 
[13:37:08.306]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:08.306]             version = "1.8"), class = "FutureResult")
[13:37:08.306]     }, finally = {
[13:37:08.306]         if (!identical(...future.workdir, getwd())) 
[13:37:08.306]             setwd(...future.workdir)
[13:37:08.306]         {
[13:37:08.306]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:08.306]                 ...future.oldOptions$nwarnings <- NULL
[13:37:08.306]             }
[13:37:08.306]             base::options(...future.oldOptions)
[13:37:08.306]             if (.Platform$OS.type == "windows") {
[13:37:08.306]                 old_names <- names(...future.oldEnvVars)
[13:37:08.306]                 envs <- base::Sys.getenv()
[13:37:08.306]                 names <- names(envs)
[13:37:08.306]                 common <- intersect(names, old_names)
[13:37:08.306]                 added <- setdiff(names, old_names)
[13:37:08.306]                 removed <- setdiff(old_names, names)
[13:37:08.306]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:08.306]                   envs[common]]
[13:37:08.306]                 NAMES <- toupper(changed)
[13:37:08.306]                 args <- list()
[13:37:08.306]                 for (kk in seq_along(NAMES)) {
[13:37:08.306]                   name <- changed[[kk]]
[13:37:08.306]                   NAME <- NAMES[[kk]]
[13:37:08.306]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.306]                     next
[13:37:08.306]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.306]                 }
[13:37:08.306]                 NAMES <- toupper(added)
[13:37:08.306]                 for (kk in seq_along(NAMES)) {
[13:37:08.306]                   name <- added[[kk]]
[13:37:08.306]                   NAME <- NAMES[[kk]]
[13:37:08.306]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.306]                     next
[13:37:08.306]                   args[[name]] <- ""
[13:37:08.306]                 }
[13:37:08.306]                 NAMES <- toupper(removed)
[13:37:08.306]                 for (kk in seq_along(NAMES)) {
[13:37:08.306]                   name <- removed[[kk]]
[13:37:08.306]                   NAME <- NAMES[[kk]]
[13:37:08.306]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.306]                     next
[13:37:08.306]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.306]                 }
[13:37:08.306]                 if (length(args) > 0) 
[13:37:08.306]                   base::do.call(base::Sys.setenv, args = args)
[13:37:08.306]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:08.306]             }
[13:37:08.306]             else {
[13:37:08.306]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:08.306]             }
[13:37:08.306]             {
[13:37:08.306]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:08.306]                   0L) {
[13:37:08.306]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:08.306]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:08.306]                   base::options(opts)
[13:37:08.306]                 }
[13:37:08.306]                 {
[13:37:08.306]                   {
[13:37:08.306]                     NULL
[13:37:08.306]                     RNGkind("Mersenne-Twister")
[13:37:08.306]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:37:08.306]                       inherits = FALSE)
[13:37:08.306]                   }
[13:37:08.306]                   options(future.plan = NULL)
[13:37:08.306]                   if (is.na(NA_character_)) 
[13:37:08.306]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.306]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:08.306]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:08.306]                     .init = FALSE)
[13:37:08.306]                 }
[13:37:08.306]             }
[13:37:08.306]         }
[13:37:08.306]     })
[13:37:08.306]     if (TRUE) {
[13:37:08.306]         base::sink(type = "output", split = FALSE)
[13:37:08.306]         if (TRUE) {
[13:37:08.306]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:08.306]         }
[13:37:08.306]         else {
[13:37:08.306]             ...future.result["stdout"] <- base::list(NULL)
[13:37:08.306]         }
[13:37:08.306]         base::close(...future.stdout)
[13:37:08.306]         ...future.stdout <- NULL
[13:37:08.306]     }
[13:37:08.306]     ...future.result$conditions <- ...future.conditions
[13:37:08.306]     ...future.result$finished <- base::Sys.time()
[13:37:08.306]     ...future.result
[13:37:08.306] }
[13:37:08.307] assign_globals() ...
[13:37:08.307] List of 1
[13:37:08.307]  $ ii: int 3
[13:37:08.307]  - attr(*, "where")=List of 1
[13:37:08.307]   ..$ ii:<environment: R_EmptyEnv> 
[13:37:08.307]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:37:08.307]  - attr(*, "resolved")= logi FALSE
[13:37:08.307]  - attr(*, "total_size")= num 56
[13:37:08.309] - copied ‘ii’ to environment
[13:37:08.309] assign_globals() ... done
[13:37:08.310] plan(): Setting new future strategy stack:
[13:37:08.310] List of future strategies:
[13:37:08.310] 1. sequential:
[13:37:08.310]    - args: function (..., envir = parent.frame())
[13:37:08.310]    - tweaked: FALSE
[13:37:08.310]    - call: NULL
[13:37:08.310] plan(): nbrOfWorkers() = 1
[13:37:08.311] plan(): Setting new future strategy stack:
[13:37:08.311] List of future strategies:
[13:37:08.311] 1. multicore:
[13:37:08.311]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:37:08.311]    - tweaked: FALSE
[13:37:08.311]    - call: plan(multicore)
[13:37:08.314] plan(): nbrOfWorkers() = 1
[13:37:08.315] SequentialFuture started (and completed)
 - Creating multicore future #4 ...
[13:37:08.318] getGlobalsAndPackages() ...
[13:37:08.318] Searching for globals...
[13:37:08.319] - globals found: [2] ‘{’, ‘ii’
[13:37:08.319] Searching for globals ... DONE
[13:37:08.319] Resolving globals: FALSE
[13:37:08.319] The total size of the 1 globals is 56 bytes (56 bytes)
[13:37:08.320] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[13:37:08.320] - globals: [1] ‘ii’
[13:37:08.320] 
[13:37:08.320] getGlobalsAndPackages() ... DONE
[13:37:08.320] Packages needed by the future expression (n = 0): <none>
[13:37:08.320] Packages needed by future strategies (n = 0): <none>
[13:37:08.321] {
[13:37:08.321]     {
[13:37:08.321]         {
[13:37:08.321]             ...future.startTime <- base::Sys.time()
[13:37:08.321]             {
[13:37:08.321]                 {
[13:37:08.321]                   {
[13:37:08.321]                     base::local({
[13:37:08.321]                       has_future <- base::requireNamespace("future", 
[13:37:08.321]                         quietly = TRUE)
[13:37:08.321]                       if (has_future) {
[13:37:08.321]                         ns <- base::getNamespace("future")
[13:37:08.321]                         version <- ns[[".package"]][["version"]]
[13:37:08.321]                         if (is.null(version)) 
[13:37:08.321]                           version <- utils::packageVersion("future")
[13:37:08.321]                       }
[13:37:08.321]                       else {
[13:37:08.321]                         version <- NULL
[13:37:08.321]                       }
[13:37:08.321]                       if (!has_future || version < "1.8.0") {
[13:37:08.321]                         info <- base::c(r_version = base::gsub("R version ", 
[13:37:08.321]                           "", base::R.version$version.string), 
[13:37:08.321]                           platform = base::sprintf("%s (%s-bit)", 
[13:37:08.321]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:08.321]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:08.321]                             "release", "version")], collapse = " "), 
[13:37:08.321]                           hostname = base::Sys.info()[["nodename"]])
[13:37:08.321]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:37:08.321]                           info)
[13:37:08.321]                         info <- base::paste(info, collapse = "; ")
[13:37:08.321]                         if (!has_future) {
[13:37:08.321]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:08.321]                             info)
[13:37:08.321]                         }
[13:37:08.321]                         else {
[13:37:08.321]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:08.321]                             info, version)
[13:37:08.321]                         }
[13:37:08.321]                         base::stop(msg)
[13:37:08.321]                       }
[13:37:08.321]                     })
[13:37:08.321]                   }
[13:37:08.321]                   ...future.strategy.old <- future::plan("list")
[13:37:08.321]                   options(future.plan = NULL)
[13:37:08.321]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.321]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:08.321]                 }
[13:37:08.321]                 ...future.workdir <- getwd()
[13:37:08.321]             }
[13:37:08.321]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:08.321]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:08.321]         }
[13:37:08.321]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:08.321]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:08.321]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:08.321]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:08.321]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:08.321]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:08.321]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:08.321]             base::names(...future.oldOptions))
[13:37:08.321]     }
[13:37:08.321]     if (FALSE) {
[13:37:08.321]     }
[13:37:08.321]     else {
[13:37:08.321]         if (TRUE) {
[13:37:08.321]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:08.321]                 open = "w")
[13:37:08.321]         }
[13:37:08.321]         else {
[13:37:08.321]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:08.321]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:08.321]         }
[13:37:08.321]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:08.321]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:08.321]             base::sink(type = "output", split = FALSE)
[13:37:08.321]             base::close(...future.stdout)
[13:37:08.321]         }, add = TRUE)
[13:37:08.321]     }
[13:37:08.321]     ...future.frame <- base::sys.nframe()
[13:37:08.321]     ...future.conditions <- base::list()
[13:37:08.321]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:08.321]     if (FALSE) {
[13:37:08.321]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:08.321]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:08.321]     }
[13:37:08.321]     ...future.result <- base::tryCatch({
[13:37:08.321]         base::withCallingHandlers({
[13:37:08.321]             ...future.value <- base::withVisible(base::local({
[13:37:08.321]                 ii
[13:37:08.321]             }))
[13:37:08.321]             future::FutureResult(value = ...future.value$value, 
[13:37:08.321]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.321]                   ...future.rng), globalenv = if (FALSE) 
[13:37:08.321]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:08.321]                     ...future.globalenv.names))
[13:37:08.321]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:08.321]         }, condition = base::local({
[13:37:08.321]             c <- base::c
[13:37:08.321]             inherits <- base::inherits
[13:37:08.321]             invokeRestart <- base::invokeRestart
[13:37:08.321]             length <- base::length
[13:37:08.321]             list <- base::list
[13:37:08.321]             seq.int <- base::seq.int
[13:37:08.321]             signalCondition <- base::signalCondition
[13:37:08.321]             sys.calls <- base::sys.calls
[13:37:08.321]             `[[` <- base::`[[`
[13:37:08.321]             `+` <- base::`+`
[13:37:08.321]             `<<-` <- base::`<<-`
[13:37:08.321]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:08.321]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:08.321]                   3L)]
[13:37:08.321]             }
[13:37:08.321]             function(cond) {
[13:37:08.321]                 is_error <- inherits(cond, "error")
[13:37:08.321]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:08.321]                   NULL)
[13:37:08.321]                 if (is_error) {
[13:37:08.321]                   sessionInformation <- function() {
[13:37:08.321]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:08.321]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:08.321]                       search = base::search(), system = base::Sys.info())
[13:37:08.321]                   }
[13:37:08.321]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.321]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:08.321]                     cond$call), session = sessionInformation(), 
[13:37:08.321]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:08.321]                   signalCondition(cond)
[13:37:08.321]                 }
[13:37:08.321]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:08.321]                 "immediateCondition"))) {
[13:37:08.321]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:08.321]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.321]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:08.321]                   if (TRUE && !signal) {
[13:37:08.321]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.321]                     {
[13:37:08.321]                       inherits <- base::inherits
[13:37:08.321]                       invokeRestart <- base::invokeRestart
[13:37:08.321]                       is.null <- base::is.null
[13:37:08.321]                       muffled <- FALSE
[13:37:08.321]                       if (inherits(cond, "message")) {
[13:37:08.321]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.321]                         if (muffled) 
[13:37:08.321]                           invokeRestart("muffleMessage")
[13:37:08.321]                       }
[13:37:08.321]                       else if (inherits(cond, "warning")) {
[13:37:08.321]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.321]                         if (muffled) 
[13:37:08.321]                           invokeRestart("muffleWarning")
[13:37:08.321]                       }
[13:37:08.321]                       else if (inherits(cond, "condition")) {
[13:37:08.321]                         if (!is.null(pattern)) {
[13:37:08.321]                           computeRestarts <- base::computeRestarts
[13:37:08.321]                           grepl <- base::grepl
[13:37:08.321]                           restarts <- computeRestarts(cond)
[13:37:08.321]                           for (restart in restarts) {
[13:37:08.321]                             name <- restart$name
[13:37:08.321]                             if (is.null(name)) 
[13:37:08.321]                               next
[13:37:08.321]                             if (!grepl(pattern, name)) 
[13:37:08.321]                               next
[13:37:08.321]                             invokeRestart(restart)
[13:37:08.321]                             muffled <- TRUE
[13:37:08.321]                             break
[13:37:08.321]                           }
[13:37:08.321]                         }
[13:37:08.321]                       }
[13:37:08.321]                       invisible(muffled)
[13:37:08.321]                     }
[13:37:08.321]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.321]                   }
[13:37:08.321]                 }
[13:37:08.321]                 else {
[13:37:08.321]                   if (TRUE) {
[13:37:08.321]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.321]                     {
[13:37:08.321]                       inherits <- base::inherits
[13:37:08.321]                       invokeRestart <- base::invokeRestart
[13:37:08.321]                       is.null <- base::is.null
[13:37:08.321]                       muffled <- FALSE
[13:37:08.321]                       if (inherits(cond, "message")) {
[13:37:08.321]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.321]                         if (muffled) 
[13:37:08.321]                           invokeRestart("muffleMessage")
[13:37:08.321]                       }
[13:37:08.321]                       else if (inherits(cond, "warning")) {
[13:37:08.321]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.321]                         if (muffled) 
[13:37:08.321]                           invokeRestart("muffleWarning")
[13:37:08.321]                       }
[13:37:08.321]                       else if (inherits(cond, "condition")) {
[13:37:08.321]                         if (!is.null(pattern)) {
[13:37:08.321]                           computeRestarts <- base::computeRestarts
[13:37:08.321]                           grepl <- base::grepl
[13:37:08.321]                           restarts <- computeRestarts(cond)
[13:37:08.321]                           for (restart in restarts) {
[13:37:08.321]                             name <- restart$name
[13:37:08.321]                             if (is.null(name)) 
[13:37:08.321]                               next
[13:37:08.321]                             if (!grepl(pattern, name)) 
[13:37:08.321]                               next
[13:37:08.321]                             invokeRestart(restart)
[13:37:08.321]                             muffled <- TRUE
[13:37:08.321]                             break
[13:37:08.321]                           }
[13:37:08.321]                         }
[13:37:08.321]                       }
[13:37:08.321]                       invisible(muffled)
[13:37:08.321]                     }
[13:37:08.321]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.321]                   }
[13:37:08.321]                 }
[13:37:08.321]             }
[13:37:08.321]         }))
[13:37:08.321]     }, error = function(ex) {
[13:37:08.321]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:08.321]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.321]                 ...future.rng), started = ...future.startTime, 
[13:37:08.321]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:08.321]             version = "1.8"), class = "FutureResult")
[13:37:08.321]     }, finally = {
[13:37:08.321]         if (!identical(...future.workdir, getwd())) 
[13:37:08.321]             setwd(...future.workdir)
[13:37:08.321]         {
[13:37:08.321]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:08.321]                 ...future.oldOptions$nwarnings <- NULL
[13:37:08.321]             }
[13:37:08.321]             base::options(...future.oldOptions)
[13:37:08.321]             if (.Platform$OS.type == "windows") {
[13:37:08.321]                 old_names <- names(...future.oldEnvVars)
[13:37:08.321]                 envs <- base::Sys.getenv()
[13:37:08.321]                 names <- names(envs)
[13:37:08.321]                 common <- intersect(names, old_names)
[13:37:08.321]                 added <- setdiff(names, old_names)
[13:37:08.321]                 removed <- setdiff(old_names, names)
[13:37:08.321]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:08.321]                   envs[common]]
[13:37:08.321]                 NAMES <- toupper(changed)
[13:37:08.321]                 args <- list()
[13:37:08.321]                 for (kk in seq_along(NAMES)) {
[13:37:08.321]                   name <- changed[[kk]]
[13:37:08.321]                   NAME <- NAMES[[kk]]
[13:37:08.321]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.321]                     next
[13:37:08.321]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.321]                 }
[13:37:08.321]                 NAMES <- toupper(added)
[13:37:08.321]                 for (kk in seq_along(NAMES)) {
[13:37:08.321]                   name <- added[[kk]]
[13:37:08.321]                   NAME <- NAMES[[kk]]
[13:37:08.321]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.321]                     next
[13:37:08.321]                   args[[name]] <- ""
[13:37:08.321]                 }
[13:37:08.321]                 NAMES <- toupper(removed)
[13:37:08.321]                 for (kk in seq_along(NAMES)) {
[13:37:08.321]                   name <- removed[[kk]]
[13:37:08.321]                   NAME <- NAMES[[kk]]
[13:37:08.321]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.321]                     next
[13:37:08.321]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.321]                 }
[13:37:08.321]                 if (length(args) > 0) 
[13:37:08.321]                   base::do.call(base::Sys.setenv, args = args)
[13:37:08.321]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:08.321]             }
[13:37:08.321]             else {
[13:37:08.321]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:08.321]             }
[13:37:08.321]             {
[13:37:08.321]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:08.321]                   0L) {
[13:37:08.321]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:08.321]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:08.321]                   base::options(opts)
[13:37:08.321]                 }
[13:37:08.321]                 {
[13:37:08.321]                   {
[13:37:08.321]                     NULL
[13:37:08.321]                     RNGkind("Mersenne-Twister")
[13:37:08.321]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:37:08.321]                       inherits = FALSE)
[13:37:08.321]                   }
[13:37:08.321]                   options(future.plan = NULL)
[13:37:08.321]                   if (is.na(NA_character_)) 
[13:37:08.321]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.321]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:08.321]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:08.321]                     .init = FALSE)
[13:37:08.321]                 }
[13:37:08.321]             }
[13:37:08.321]         }
[13:37:08.321]     })
[13:37:08.321]     if (TRUE) {
[13:37:08.321]         base::sink(type = "output", split = FALSE)
[13:37:08.321]         if (TRUE) {
[13:37:08.321]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:08.321]         }
[13:37:08.321]         else {
[13:37:08.321]             ...future.result["stdout"] <- base::list(NULL)
[13:37:08.321]         }
[13:37:08.321]         base::close(...future.stdout)
[13:37:08.321]         ...future.stdout <- NULL
[13:37:08.321]     }
[13:37:08.321]     ...future.result$conditions <- ...future.conditions
[13:37:08.321]     ...future.result$finished <- base::Sys.time()
[13:37:08.321]     ...future.result
[13:37:08.321] }
[13:37:08.322] assign_globals() ...
[13:37:08.322] List of 1
[13:37:08.322]  $ ii: int 4
[13:37:08.322]  - attr(*, "where")=List of 1
[13:37:08.322]   ..$ ii:<environment: R_EmptyEnv> 
[13:37:08.322]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:37:08.322]  - attr(*, "resolved")= logi FALSE
[13:37:08.322]  - attr(*, "total_size")= num 56
[13:37:08.324] - copied ‘ii’ to environment
[13:37:08.325] assign_globals() ... done
[13:37:08.325] plan(): Setting new future strategy stack:
[13:37:08.325] List of future strategies:
[13:37:08.325] 1. sequential:
[13:37:08.325]    - args: function (..., envir = parent.frame())
[13:37:08.325]    - tweaked: FALSE
[13:37:08.325]    - call: NULL
[13:37:08.325] plan(): nbrOfWorkers() = 1
[13:37:08.326] plan(): Setting new future strategy stack:
[13:37:08.326] List of future strategies:
[13:37:08.326] 1. multicore:
[13:37:08.326]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:37:08.326]    - tweaked: FALSE
[13:37:08.326]    - call: plan(multicore)
[13:37:08.330] plan(): nbrOfWorkers() = 1
[13:37:08.330] SequentialFuture started (and completed)
 - Resolving 4 multicore futures
*** multicore(..., globals = TRUE) and errors
[13:37:08.334] getGlobalsAndPackages() ...
[13:37:08.335] Searching for globals...
[13:37:08.336] - globals found: [2] ‘{’, ‘stop’
[13:37:08.336] Searching for globals ... DONE
[13:37:08.336] Resolving globals: FALSE
[13:37:08.336] 
[13:37:08.336] 
[13:37:08.337] getGlobalsAndPackages() ... DONE
[13:37:08.337] Packages needed by the future expression (n = 0): <none>
[13:37:08.337] Packages needed by future strategies (n = 0): <none>
[13:37:08.337] {
[13:37:08.337]     {
[13:37:08.337]         {
[13:37:08.337]             ...future.startTime <- base::Sys.time()
[13:37:08.337]             {
[13:37:08.337]                 {
[13:37:08.337]                   {
[13:37:08.337]                     base::local({
[13:37:08.337]                       has_future <- base::requireNamespace("future", 
[13:37:08.337]                         quietly = TRUE)
[13:37:08.337]                       if (has_future) {
[13:37:08.337]                         ns <- base::getNamespace("future")
[13:37:08.337]                         version <- ns[[".package"]][["version"]]
[13:37:08.337]                         if (is.null(version)) 
[13:37:08.337]                           version <- utils::packageVersion("future")
[13:37:08.337]                       }
[13:37:08.337]                       else {
[13:37:08.337]                         version <- NULL
[13:37:08.337]                       }
[13:37:08.337]                       if (!has_future || version < "1.8.0") {
[13:37:08.337]                         info <- base::c(r_version = base::gsub("R version ", 
[13:37:08.337]                           "", base::R.version$version.string), 
[13:37:08.337]                           platform = base::sprintf("%s (%s-bit)", 
[13:37:08.337]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:08.337]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:08.337]                             "release", "version")], collapse = " "), 
[13:37:08.337]                           hostname = base::Sys.info()[["nodename"]])
[13:37:08.337]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:37:08.337]                           info)
[13:37:08.337]                         info <- base::paste(info, collapse = "; ")
[13:37:08.337]                         if (!has_future) {
[13:37:08.337]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:08.337]                             info)
[13:37:08.337]                         }
[13:37:08.337]                         else {
[13:37:08.337]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:08.337]                             info, version)
[13:37:08.337]                         }
[13:37:08.337]                         base::stop(msg)
[13:37:08.337]                       }
[13:37:08.337]                     })
[13:37:08.337]                   }
[13:37:08.337]                   ...future.strategy.old <- future::plan("list")
[13:37:08.337]                   options(future.plan = NULL)
[13:37:08.337]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.337]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:08.337]                 }
[13:37:08.337]                 ...future.workdir <- getwd()
[13:37:08.337]             }
[13:37:08.337]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:08.337]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:08.337]         }
[13:37:08.337]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:08.337]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:08.337]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:08.337]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:08.337]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:08.337]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:08.337]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:08.337]             base::names(...future.oldOptions))
[13:37:08.337]     }
[13:37:08.337]     if (FALSE) {
[13:37:08.337]     }
[13:37:08.337]     else {
[13:37:08.337]         if (TRUE) {
[13:37:08.337]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:08.337]                 open = "w")
[13:37:08.337]         }
[13:37:08.337]         else {
[13:37:08.337]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:08.337]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:08.337]         }
[13:37:08.337]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:08.337]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:08.337]             base::sink(type = "output", split = FALSE)
[13:37:08.337]             base::close(...future.stdout)
[13:37:08.337]         }, add = TRUE)
[13:37:08.337]     }
[13:37:08.337]     ...future.frame <- base::sys.nframe()
[13:37:08.337]     ...future.conditions <- base::list()
[13:37:08.337]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:08.337]     if (FALSE) {
[13:37:08.337]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:08.337]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:08.337]     }
[13:37:08.337]     ...future.result <- base::tryCatch({
[13:37:08.337]         base::withCallingHandlers({
[13:37:08.337]             ...future.value <- base::withVisible(base::local({
[13:37:08.337]                 stop("Whoops!")
[13:37:08.337]                 1
[13:37:08.337]             }))
[13:37:08.337]             future::FutureResult(value = ...future.value$value, 
[13:37:08.337]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.337]                   ...future.rng), globalenv = if (FALSE) 
[13:37:08.337]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:08.337]                     ...future.globalenv.names))
[13:37:08.337]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:08.337]         }, condition = base::local({
[13:37:08.337]             c <- base::c
[13:37:08.337]             inherits <- base::inherits
[13:37:08.337]             invokeRestart <- base::invokeRestart
[13:37:08.337]             length <- base::length
[13:37:08.337]             list <- base::list
[13:37:08.337]             seq.int <- base::seq.int
[13:37:08.337]             signalCondition <- base::signalCondition
[13:37:08.337]             sys.calls <- base::sys.calls
[13:37:08.337]             `[[` <- base::`[[`
[13:37:08.337]             `+` <- base::`+`
[13:37:08.337]             `<<-` <- base::`<<-`
[13:37:08.337]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:08.337]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:08.337]                   3L)]
[13:37:08.337]             }
[13:37:08.337]             function(cond) {
[13:37:08.337]                 is_error <- inherits(cond, "error")
[13:37:08.337]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:08.337]                   NULL)
[13:37:08.337]                 if (is_error) {
[13:37:08.337]                   sessionInformation <- function() {
[13:37:08.337]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:08.337]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:08.337]                       search = base::search(), system = base::Sys.info())
[13:37:08.337]                   }
[13:37:08.337]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.337]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:08.337]                     cond$call), session = sessionInformation(), 
[13:37:08.337]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:08.337]                   signalCondition(cond)
[13:37:08.337]                 }
[13:37:08.337]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:08.337]                 "immediateCondition"))) {
[13:37:08.337]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:08.337]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.337]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:08.337]                   if (TRUE && !signal) {
[13:37:08.337]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.337]                     {
[13:37:08.337]                       inherits <- base::inherits
[13:37:08.337]                       invokeRestart <- base::invokeRestart
[13:37:08.337]                       is.null <- base::is.null
[13:37:08.337]                       muffled <- FALSE
[13:37:08.337]                       if (inherits(cond, "message")) {
[13:37:08.337]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.337]                         if (muffled) 
[13:37:08.337]                           invokeRestart("muffleMessage")
[13:37:08.337]                       }
[13:37:08.337]                       else if (inherits(cond, "warning")) {
[13:37:08.337]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.337]                         if (muffled) 
[13:37:08.337]                           invokeRestart("muffleWarning")
[13:37:08.337]                       }
[13:37:08.337]                       else if (inherits(cond, "condition")) {
[13:37:08.337]                         if (!is.null(pattern)) {
[13:37:08.337]                           computeRestarts <- base::computeRestarts
[13:37:08.337]                           grepl <- base::grepl
[13:37:08.337]                           restarts <- computeRestarts(cond)
[13:37:08.337]                           for (restart in restarts) {
[13:37:08.337]                             name <- restart$name
[13:37:08.337]                             if (is.null(name)) 
[13:37:08.337]                               next
[13:37:08.337]                             if (!grepl(pattern, name)) 
[13:37:08.337]                               next
[13:37:08.337]                             invokeRestart(restart)
[13:37:08.337]                             muffled <- TRUE
[13:37:08.337]                             break
[13:37:08.337]                           }
[13:37:08.337]                         }
[13:37:08.337]                       }
[13:37:08.337]                       invisible(muffled)
[13:37:08.337]                     }
[13:37:08.337]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.337]                   }
[13:37:08.337]                 }
[13:37:08.337]                 else {
[13:37:08.337]                   if (TRUE) {
[13:37:08.337]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.337]                     {
[13:37:08.337]                       inherits <- base::inherits
[13:37:08.337]                       invokeRestart <- base::invokeRestart
[13:37:08.337]                       is.null <- base::is.null
[13:37:08.337]                       muffled <- FALSE
[13:37:08.337]                       if (inherits(cond, "message")) {
[13:37:08.337]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.337]                         if (muffled) 
[13:37:08.337]                           invokeRestart("muffleMessage")
[13:37:08.337]                       }
[13:37:08.337]                       else if (inherits(cond, "warning")) {
[13:37:08.337]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.337]                         if (muffled) 
[13:37:08.337]                           invokeRestart("muffleWarning")
[13:37:08.337]                       }
[13:37:08.337]                       else if (inherits(cond, "condition")) {
[13:37:08.337]                         if (!is.null(pattern)) {
[13:37:08.337]                           computeRestarts <- base::computeRestarts
[13:37:08.337]                           grepl <- base::grepl
[13:37:08.337]                           restarts <- computeRestarts(cond)
[13:37:08.337]                           for (restart in restarts) {
[13:37:08.337]                             name <- restart$name
[13:37:08.337]                             if (is.null(name)) 
[13:37:08.337]                               next
[13:37:08.337]                             if (!grepl(pattern, name)) 
[13:37:08.337]                               next
[13:37:08.337]                             invokeRestart(restart)
[13:37:08.337]                             muffled <- TRUE
[13:37:08.337]                             break
[13:37:08.337]                           }
[13:37:08.337]                         }
[13:37:08.337]                       }
[13:37:08.337]                       invisible(muffled)
[13:37:08.337]                     }
[13:37:08.337]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.337]                   }
[13:37:08.337]                 }
[13:37:08.337]             }
[13:37:08.337]         }))
[13:37:08.337]     }, error = function(ex) {
[13:37:08.337]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:08.337]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.337]                 ...future.rng), started = ...future.startTime, 
[13:37:08.337]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:08.337]             version = "1.8"), class = "FutureResult")
[13:37:08.337]     }, finally = {
[13:37:08.337]         if (!identical(...future.workdir, getwd())) 
[13:37:08.337]             setwd(...future.workdir)
[13:37:08.337]         {
[13:37:08.337]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:08.337]                 ...future.oldOptions$nwarnings <- NULL
[13:37:08.337]             }
[13:37:08.337]             base::options(...future.oldOptions)
[13:37:08.337]             if (.Platform$OS.type == "windows") {
[13:37:08.337]                 old_names <- names(...future.oldEnvVars)
[13:37:08.337]                 envs <- base::Sys.getenv()
[13:37:08.337]                 names <- names(envs)
[13:37:08.337]                 common <- intersect(names, old_names)
[13:37:08.337]                 added <- setdiff(names, old_names)
[13:37:08.337]                 removed <- setdiff(old_names, names)
[13:37:08.337]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:08.337]                   envs[common]]
[13:37:08.337]                 NAMES <- toupper(changed)
[13:37:08.337]                 args <- list()
[13:37:08.337]                 for (kk in seq_along(NAMES)) {
[13:37:08.337]                   name <- changed[[kk]]
[13:37:08.337]                   NAME <- NAMES[[kk]]
[13:37:08.337]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.337]                     next
[13:37:08.337]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.337]                 }
[13:37:08.337]                 NAMES <- toupper(added)
[13:37:08.337]                 for (kk in seq_along(NAMES)) {
[13:37:08.337]                   name <- added[[kk]]
[13:37:08.337]                   NAME <- NAMES[[kk]]
[13:37:08.337]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.337]                     next
[13:37:08.337]                   args[[name]] <- ""
[13:37:08.337]                 }
[13:37:08.337]                 NAMES <- toupper(removed)
[13:37:08.337]                 for (kk in seq_along(NAMES)) {
[13:37:08.337]                   name <- removed[[kk]]
[13:37:08.337]                   NAME <- NAMES[[kk]]
[13:37:08.337]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.337]                     next
[13:37:08.337]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.337]                 }
[13:37:08.337]                 if (length(args) > 0) 
[13:37:08.337]                   base::do.call(base::Sys.setenv, args = args)
[13:37:08.337]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:08.337]             }
[13:37:08.337]             else {
[13:37:08.337]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:08.337]             }
[13:37:08.337]             {
[13:37:08.337]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:08.337]                   0L) {
[13:37:08.337]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:08.337]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:08.337]                   base::options(opts)
[13:37:08.337]                 }
[13:37:08.337]                 {
[13:37:08.337]                   {
[13:37:08.337]                     NULL
[13:37:08.337]                     RNGkind("Mersenne-Twister")
[13:37:08.337]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:37:08.337]                       inherits = FALSE)
[13:37:08.337]                   }
[13:37:08.337]                   options(future.plan = NULL)
[13:37:08.337]                   if (is.na(NA_character_)) 
[13:37:08.337]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.337]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:08.337]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:08.337]                     .init = FALSE)
[13:37:08.337]                 }
[13:37:08.337]             }
[13:37:08.337]         }
[13:37:08.337]     })
[13:37:08.337]     if (TRUE) {
[13:37:08.337]         base::sink(type = "output", split = FALSE)
[13:37:08.337]         if (TRUE) {
[13:37:08.337]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:08.337]         }
[13:37:08.337]         else {
[13:37:08.337]             ...future.result["stdout"] <- base::list(NULL)
[13:37:08.337]         }
[13:37:08.337]         base::close(...future.stdout)
[13:37:08.337]         ...future.stdout <- NULL
[13:37:08.337]     }
[13:37:08.337]     ...future.result$conditions <- ...future.conditions
[13:37:08.337]     ...future.result$finished <- base::Sys.time()
[13:37:08.337]     ...future.result
[13:37:08.337] }
[13:37:08.339] plan(): Setting new future strategy stack:
[13:37:08.339] List of future strategies:
[13:37:08.339] 1. sequential:
[13:37:08.339]    - args: function (..., envir = parent.frame())
[13:37:08.339]    - tweaked: FALSE
[13:37:08.339]    - call: NULL
[13:37:08.340] plan(): nbrOfWorkers() = 1
[13:37:08.340] plan(): Setting new future strategy stack:
[13:37:08.341] List of future strategies:
[13:37:08.341] 1. multicore:
[13:37:08.341]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:37:08.341]    - tweaked: FALSE
[13:37:08.341]    - call: plan(multicore)
[13:37:08.344] plan(): nbrOfWorkers() = 1
[13:37:08.344] SequentialFuture started (and completed)
[13:37:08.344] signalConditions() ...
[13:37:08.344]  - include = ‘immediateCondition’
[13:37:08.344]  - exclude = 
[13:37:08.345]  - resignal = FALSE
[13:37:08.345]  - Number of conditions: 1
[13:37:08.345] signalConditions() ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    stop("Whoops!")
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 0 bytes of class ‘NULL’
Conditions captured: [n=1] ‘simpleError’
Early signaling: FALSE
Owner process: 95e450d1-e7b8-6209-6c23-e4c8d06e1b18
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:37:08.345] signalConditions() ...
[13:37:08.345]  - include = ‘immediateCondition’
[13:37:08.347]  - exclude = 
[13:37:08.347]  - resignal = FALSE
[13:37:08.347]  - Number of conditions: 1
[13:37:08.347] signalConditions() ... done
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[13:37:08.348] signalConditions() ...
[13:37:08.348]  - include = ‘immediateCondition’
[13:37:08.348]  - exclude = 
[13:37:08.348]  - resignal = FALSE
[13:37:08.348]  - Number of conditions: 1
[13:37:08.348] signalConditions() ... done
[13:37:08.348] Future state: ‘finished’
[13:37:08.348] signalConditions() ...
[13:37:08.348]  - include = ‘condition’
[13:37:08.349]  - exclude = ‘immediateCondition’
[13:37:08.349]  - resignal = TRUE
[13:37:08.349]  - Number of conditions: 1
[13:37:08.349]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[13:37:08.349] signalConditions() ... done
[1] "Error in eval(quote({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[13:37:08.349] signalConditions() ...
[13:37:08.349]  - include = ‘immediateCondition’
[13:37:08.350]  - exclude = 
[13:37:08.350]  - resignal = FALSE
[13:37:08.350]  - Number of conditions: 1
[13:37:08.350] signalConditions() ... done
[13:37:08.350] Future state: ‘finished’
[13:37:08.350] signalConditions() ...
[13:37:08.350]  - include = ‘condition’
[13:37:08.350]  - exclude = ‘immediateCondition’
[13:37:08.350]  - resignal = TRUE
[13:37:08.350]  - Number of conditions: 1
[13:37:08.350]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[13:37:08.351] signalConditions() ... done
[1] "Error in eval(quote({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[13:37:08.354] getGlobalsAndPackages() ...
[13:37:08.354] Searching for globals...
[13:37:08.355] - globals found: [5] ‘{’, ‘stop’, ‘structure’, ‘list’, ‘c’
[13:37:08.355] Searching for globals ... DONE
[13:37:08.356] Resolving globals: FALSE
[13:37:08.356] 
[13:37:08.356] 
[13:37:08.356] getGlobalsAndPackages() ... DONE
[13:37:08.356] Packages needed by the future expression (n = 0): <none>
[13:37:08.356] Packages needed by future strategies (n = 0): <none>
[13:37:08.357] {
[13:37:08.357]     {
[13:37:08.357]         {
[13:37:08.357]             ...future.startTime <- base::Sys.time()
[13:37:08.357]             {
[13:37:08.357]                 {
[13:37:08.357]                   {
[13:37:08.357]                     base::local({
[13:37:08.357]                       has_future <- base::requireNamespace("future", 
[13:37:08.357]                         quietly = TRUE)
[13:37:08.357]                       if (has_future) {
[13:37:08.357]                         ns <- base::getNamespace("future")
[13:37:08.357]                         version <- ns[[".package"]][["version"]]
[13:37:08.357]                         if (is.null(version)) 
[13:37:08.357]                           version <- utils::packageVersion("future")
[13:37:08.357]                       }
[13:37:08.357]                       else {
[13:37:08.357]                         version <- NULL
[13:37:08.357]                       }
[13:37:08.357]                       if (!has_future || version < "1.8.0") {
[13:37:08.357]                         info <- base::c(r_version = base::gsub("R version ", 
[13:37:08.357]                           "", base::R.version$version.string), 
[13:37:08.357]                           platform = base::sprintf("%s (%s-bit)", 
[13:37:08.357]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:08.357]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:08.357]                             "release", "version")], collapse = " "), 
[13:37:08.357]                           hostname = base::Sys.info()[["nodename"]])
[13:37:08.357]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:37:08.357]                           info)
[13:37:08.357]                         info <- base::paste(info, collapse = "; ")
[13:37:08.357]                         if (!has_future) {
[13:37:08.357]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:08.357]                             info)
[13:37:08.357]                         }
[13:37:08.357]                         else {
[13:37:08.357]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:08.357]                             info, version)
[13:37:08.357]                         }
[13:37:08.357]                         base::stop(msg)
[13:37:08.357]                       }
[13:37:08.357]                     })
[13:37:08.357]                   }
[13:37:08.357]                   ...future.strategy.old <- future::plan("list")
[13:37:08.357]                   options(future.plan = NULL)
[13:37:08.357]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.357]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:08.357]                 }
[13:37:08.357]                 ...future.workdir <- getwd()
[13:37:08.357]             }
[13:37:08.357]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:08.357]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:08.357]         }
[13:37:08.357]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:08.357]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:08.357]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:08.357]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:08.357]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:08.357]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:08.357]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:08.357]             base::names(...future.oldOptions))
[13:37:08.357]     }
[13:37:08.357]     if (FALSE) {
[13:37:08.357]     }
[13:37:08.357]     else {
[13:37:08.357]         if (TRUE) {
[13:37:08.357]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:08.357]                 open = "w")
[13:37:08.357]         }
[13:37:08.357]         else {
[13:37:08.357]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:08.357]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:08.357]         }
[13:37:08.357]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:08.357]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:08.357]             base::sink(type = "output", split = FALSE)
[13:37:08.357]             base::close(...future.stdout)
[13:37:08.357]         }, add = TRUE)
[13:37:08.357]     }
[13:37:08.357]     ...future.frame <- base::sys.nframe()
[13:37:08.357]     ...future.conditions <- base::list()
[13:37:08.357]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:08.357]     if (FALSE) {
[13:37:08.357]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:08.357]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:08.357]     }
[13:37:08.357]     ...future.result <- base::tryCatch({
[13:37:08.357]         base::withCallingHandlers({
[13:37:08.357]             ...future.value <- base::withVisible(base::local({
[13:37:08.357]                 stop(structure(list(message = "boom"), class = c("MyError", 
[13:37:08.357]                   "error", "condition")))
[13:37:08.357]             }))
[13:37:08.357]             future::FutureResult(value = ...future.value$value, 
[13:37:08.357]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.357]                   ...future.rng), globalenv = if (FALSE) 
[13:37:08.357]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:08.357]                     ...future.globalenv.names))
[13:37:08.357]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:08.357]         }, condition = base::local({
[13:37:08.357]             c <- base::c
[13:37:08.357]             inherits <- base::inherits
[13:37:08.357]             invokeRestart <- base::invokeRestart
[13:37:08.357]             length <- base::length
[13:37:08.357]             list <- base::list
[13:37:08.357]             seq.int <- base::seq.int
[13:37:08.357]             signalCondition <- base::signalCondition
[13:37:08.357]             sys.calls <- base::sys.calls
[13:37:08.357]             `[[` <- base::`[[`
[13:37:08.357]             `+` <- base::`+`
[13:37:08.357]             `<<-` <- base::`<<-`
[13:37:08.357]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:08.357]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:08.357]                   3L)]
[13:37:08.357]             }
[13:37:08.357]             function(cond) {
[13:37:08.357]                 is_error <- inherits(cond, "error")
[13:37:08.357]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:08.357]                   NULL)
[13:37:08.357]                 if (is_error) {
[13:37:08.357]                   sessionInformation <- function() {
[13:37:08.357]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:08.357]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:08.357]                       search = base::search(), system = base::Sys.info())
[13:37:08.357]                   }
[13:37:08.357]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.357]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:08.357]                     cond$call), session = sessionInformation(), 
[13:37:08.357]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:08.357]                   signalCondition(cond)
[13:37:08.357]                 }
[13:37:08.357]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:08.357]                 "immediateCondition"))) {
[13:37:08.357]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:08.357]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.357]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:08.357]                   if (TRUE && !signal) {
[13:37:08.357]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.357]                     {
[13:37:08.357]                       inherits <- base::inherits
[13:37:08.357]                       invokeRestart <- base::invokeRestart
[13:37:08.357]                       is.null <- base::is.null
[13:37:08.357]                       muffled <- FALSE
[13:37:08.357]                       if (inherits(cond, "message")) {
[13:37:08.357]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.357]                         if (muffled) 
[13:37:08.357]                           invokeRestart("muffleMessage")
[13:37:08.357]                       }
[13:37:08.357]                       else if (inherits(cond, "warning")) {
[13:37:08.357]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.357]                         if (muffled) 
[13:37:08.357]                           invokeRestart("muffleWarning")
[13:37:08.357]                       }
[13:37:08.357]                       else if (inherits(cond, "condition")) {
[13:37:08.357]                         if (!is.null(pattern)) {
[13:37:08.357]                           computeRestarts <- base::computeRestarts
[13:37:08.357]                           grepl <- base::grepl
[13:37:08.357]                           restarts <- computeRestarts(cond)
[13:37:08.357]                           for (restart in restarts) {
[13:37:08.357]                             name <- restart$name
[13:37:08.357]                             if (is.null(name)) 
[13:37:08.357]                               next
[13:37:08.357]                             if (!grepl(pattern, name)) 
[13:37:08.357]                               next
[13:37:08.357]                             invokeRestart(restart)
[13:37:08.357]                             muffled <- TRUE
[13:37:08.357]                             break
[13:37:08.357]                           }
[13:37:08.357]                         }
[13:37:08.357]                       }
[13:37:08.357]                       invisible(muffled)
[13:37:08.357]                     }
[13:37:08.357]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.357]                   }
[13:37:08.357]                 }
[13:37:08.357]                 else {
[13:37:08.357]                   if (TRUE) {
[13:37:08.357]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.357]                     {
[13:37:08.357]                       inherits <- base::inherits
[13:37:08.357]                       invokeRestart <- base::invokeRestart
[13:37:08.357]                       is.null <- base::is.null
[13:37:08.357]                       muffled <- FALSE
[13:37:08.357]                       if (inherits(cond, "message")) {
[13:37:08.357]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.357]                         if (muffled) 
[13:37:08.357]                           invokeRestart("muffleMessage")
[13:37:08.357]                       }
[13:37:08.357]                       else if (inherits(cond, "warning")) {
[13:37:08.357]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.357]                         if (muffled) 
[13:37:08.357]                           invokeRestart("muffleWarning")
[13:37:08.357]                       }
[13:37:08.357]                       else if (inherits(cond, "condition")) {
[13:37:08.357]                         if (!is.null(pattern)) {
[13:37:08.357]                           computeRestarts <- base::computeRestarts
[13:37:08.357]                           grepl <- base::grepl
[13:37:08.357]                           restarts <- computeRestarts(cond)
[13:37:08.357]                           for (restart in restarts) {
[13:37:08.357]                             name <- restart$name
[13:37:08.357]                             if (is.null(name)) 
[13:37:08.357]                               next
[13:37:08.357]                             if (!grepl(pattern, name)) 
[13:37:08.357]                               next
[13:37:08.357]                             invokeRestart(restart)
[13:37:08.357]                             muffled <- TRUE
[13:37:08.357]                             break
[13:37:08.357]                           }
[13:37:08.357]                         }
[13:37:08.357]                       }
[13:37:08.357]                       invisible(muffled)
[13:37:08.357]                     }
[13:37:08.357]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.357]                   }
[13:37:08.357]                 }
[13:37:08.357]             }
[13:37:08.357]         }))
[13:37:08.357]     }, error = function(ex) {
[13:37:08.357]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:08.357]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.357]                 ...future.rng), started = ...future.startTime, 
[13:37:08.357]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:08.357]             version = "1.8"), class = "FutureResult")
[13:37:08.357]     }, finally = {
[13:37:08.357]         if (!identical(...future.workdir, getwd())) 
[13:37:08.357]             setwd(...future.workdir)
[13:37:08.357]         {
[13:37:08.357]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:08.357]                 ...future.oldOptions$nwarnings <- NULL
[13:37:08.357]             }
[13:37:08.357]             base::options(...future.oldOptions)
[13:37:08.357]             if (.Platform$OS.type == "windows") {
[13:37:08.357]                 old_names <- names(...future.oldEnvVars)
[13:37:08.357]                 envs <- base::Sys.getenv()
[13:37:08.357]                 names <- names(envs)
[13:37:08.357]                 common <- intersect(names, old_names)
[13:37:08.357]                 added <- setdiff(names, old_names)
[13:37:08.357]                 removed <- setdiff(old_names, names)
[13:37:08.357]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:08.357]                   envs[common]]
[13:37:08.357]                 NAMES <- toupper(changed)
[13:37:08.357]                 args <- list()
[13:37:08.357]                 for (kk in seq_along(NAMES)) {
[13:37:08.357]                   name <- changed[[kk]]
[13:37:08.357]                   NAME <- NAMES[[kk]]
[13:37:08.357]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.357]                     next
[13:37:08.357]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.357]                 }
[13:37:08.357]                 NAMES <- toupper(added)
[13:37:08.357]                 for (kk in seq_along(NAMES)) {
[13:37:08.357]                   name <- added[[kk]]
[13:37:08.357]                   NAME <- NAMES[[kk]]
[13:37:08.357]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.357]                     next
[13:37:08.357]                   args[[name]] <- ""
[13:37:08.357]                 }
[13:37:08.357]                 NAMES <- toupper(removed)
[13:37:08.357]                 for (kk in seq_along(NAMES)) {
[13:37:08.357]                   name <- removed[[kk]]
[13:37:08.357]                   NAME <- NAMES[[kk]]
[13:37:08.357]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.357]                     next
[13:37:08.357]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.357]                 }
[13:37:08.357]                 if (length(args) > 0) 
[13:37:08.357]                   base::do.call(base::Sys.setenv, args = args)
[13:37:08.357]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:08.357]             }
[13:37:08.357]             else {
[13:37:08.357]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:08.357]             }
[13:37:08.357]             {
[13:37:08.357]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:08.357]                   0L) {
[13:37:08.357]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:08.357]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:08.357]                   base::options(opts)
[13:37:08.357]                 }
[13:37:08.357]                 {
[13:37:08.357]                   {
[13:37:08.357]                     NULL
[13:37:08.357]                     RNGkind("Mersenne-Twister")
[13:37:08.357]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:37:08.357]                       inherits = FALSE)
[13:37:08.357]                   }
[13:37:08.357]                   options(future.plan = NULL)
[13:37:08.357]                   if (is.na(NA_character_)) 
[13:37:08.357]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.357]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:08.357]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:08.357]                     .init = FALSE)
[13:37:08.357]                 }
[13:37:08.357]             }
[13:37:08.357]         }
[13:37:08.357]     })
[13:37:08.357]     if (TRUE) {
[13:37:08.357]         base::sink(type = "output", split = FALSE)
[13:37:08.357]         if (TRUE) {
[13:37:08.357]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:08.357]         }
[13:37:08.357]         else {
[13:37:08.357]             ...future.result["stdout"] <- base::list(NULL)
[13:37:08.357]         }
[13:37:08.357]         base::close(...future.stdout)
[13:37:08.357]         ...future.stdout <- NULL
[13:37:08.357]     }
[13:37:08.357]     ...future.result$conditions <- ...future.conditions
[13:37:08.357]     ...future.result$finished <- base::Sys.time()
[13:37:08.357]     ...future.result
[13:37:08.357] }
[13:37:08.359] plan(): Setting new future strategy stack:
[13:37:08.359] List of future strategies:
[13:37:08.359] 1. sequential:
[13:37:08.359]    - args: function (..., envir = parent.frame())
[13:37:08.359]    - tweaked: FALSE
[13:37:08.359]    - call: NULL
[13:37:08.359] plan(): nbrOfWorkers() = 1
[13:37:08.360] plan(): Setting new future strategy stack:
[13:37:08.360] List of future strategies:
[13:37:08.360] 1. multicore:
[13:37:08.360]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:37:08.360]    - tweaked: FALSE
[13:37:08.360]    - call: plan(multicore)
[13:37:08.363] plan(): nbrOfWorkers() = 1
[13:37:08.363] SequentialFuture started (and completed)
[13:37:08.364] signalConditions() ...
[13:37:08.364]  - include = ‘immediateCondition’
[13:37:08.364]  - exclude = 
[13:37:08.364]  - resignal = FALSE
[13:37:08.364]  - Number of conditions: 1
[13:37:08.364] signalConditions() ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    stop(structure(list(message = "boom"), class = c("MyError", 
        "error", "condition")))
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 0 bytes of class ‘NULL’
Conditions captured: [n=1] ‘MyError’
Early signaling: FALSE
Owner process: 95e450d1-e7b8-6209-6c23-e4c8d06e1b18
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:37:08.364] signalConditions() ...
[13:37:08.365]  - include = ‘immediateCondition’
[13:37:08.365]  - exclude = 
[13:37:08.365]  - resignal = FALSE
[13:37:08.365]  - Number of conditions: 1
[13:37:08.365] signalConditions() ... done
<MyError: boom>
[13:37:08.365] signalConditions() ...
[13:37:08.365]  - include = ‘immediateCondition’
[13:37:08.365]  - exclude = 
[13:37:08.365]  - resignal = FALSE
[13:37:08.365]  - Number of conditions: 1
[13:37:08.366] signalConditions() ... done
[13:37:08.366] Future state: ‘finished’
[13:37:08.366] signalConditions() ...
[13:37:08.366]  - include = ‘condition’
[13:37:08.366]  - exclude = ‘immediateCondition’
[13:37:08.366]  - resignal = TRUE
[13:37:08.366]  - Number of conditions: 1
[13:37:08.366]  - Condition #1: ‘MyError’, ‘error’, ‘condition’
[13:37:08.366] signalConditions() ... done
*** multicore(..., workers = 1L) ...
[13:37:08.367] getGlobalsAndPackages() ...
[13:37:08.367] Searching for globals...
[13:37:08.367] - globals found: [4] ‘{’, ‘*’, ‘a’, ‘b’
[13:37:08.368] Searching for globals ... DONE
[13:37:08.368] Resolving globals: FALSE
[13:37:08.368] The total size of the 2 globals is 112 bytes (112 bytes)
[13:37:08.368] The total size of the 2 globals exported for future expression (‘{; a * b; }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘a’ (56 bytes of class ‘numeric’) and ‘b’ (56 bytes of class ‘numeric’)
[13:37:08.368] - globals: [2] ‘a’, ‘b’
[13:37:08.369] 
[13:37:08.369] getGlobalsAndPackages() ... DONE
[13:37:08.369] Packages needed by the future expression (n = 0): <none>
[13:37:08.369] Packages needed by future strategies (n = 0): <none>
[13:37:08.369] {
[13:37:08.369]     {
[13:37:08.369]         {
[13:37:08.369]             ...future.startTime <- base::Sys.time()
[13:37:08.369]             {
[13:37:08.369]                 {
[13:37:08.369]                   {
[13:37:08.369]                     base::local({
[13:37:08.369]                       has_future <- base::requireNamespace("future", 
[13:37:08.369]                         quietly = TRUE)
[13:37:08.369]                       if (has_future) {
[13:37:08.369]                         ns <- base::getNamespace("future")
[13:37:08.369]                         version <- ns[[".package"]][["version"]]
[13:37:08.369]                         if (is.null(version)) 
[13:37:08.369]                           version <- utils::packageVersion("future")
[13:37:08.369]                       }
[13:37:08.369]                       else {
[13:37:08.369]                         version <- NULL
[13:37:08.369]                       }
[13:37:08.369]                       if (!has_future || version < "1.8.0") {
[13:37:08.369]                         info <- base::c(r_version = base::gsub("R version ", 
[13:37:08.369]                           "", base::R.version$version.string), 
[13:37:08.369]                           platform = base::sprintf("%s (%s-bit)", 
[13:37:08.369]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:08.369]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:08.369]                             "release", "version")], collapse = " "), 
[13:37:08.369]                           hostname = base::Sys.info()[["nodename"]])
[13:37:08.369]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:37:08.369]                           info)
[13:37:08.369]                         info <- base::paste(info, collapse = "; ")
[13:37:08.369]                         if (!has_future) {
[13:37:08.369]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:08.369]                             info)
[13:37:08.369]                         }
[13:37:08.369]                         else {
[13:37:08.369]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:08.369]                             info, version)
[13:37:08.369]                         }
[13:37:08.369]                         base::stop(msg)
[13:37:08.369]                       }
[13:37:08.369]                     })
[13:37:08.369]                   }
[13:37:08.369]                   ...future.strategy.old <- future::plan("list")
[13:37:08.369]                   options(future.plan = NULL)
[13:37:08.369]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.369]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:08.369]                 }
[13:37:08.369]                 ...future.workdir <- getwd()
[13:37:08.369]             }
[13:37:08.369]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:08.369]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:08.369]         }
[13:37:08.369]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:08.369]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:08.369]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:08.369]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:08.369]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:08.369]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:08.369]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:08.369]             base::names(...future.oldOptions))
[13:37:08.369]     }
[13:37:08.369]     if (FALSE) {
[13:37:08.369]     }
[13:37:08.369]     else {
[13:37:08.369]         if (TRUE) {
[13:37:08.369]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:08.369]                 open = "w")
[13:37:08.369]         }
[13:37:08.369]         else {
[13:37:08.369]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:08.369]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:08.369]         }
[13:37:08.369]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:08.369]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:08.369]             base::sink(type = "output", split = FALSE)
[13:37:08.369]             base::close(...future.stdout)
[13:37:08.369]         }, add = TRUE)
[13:37:08.369]     }
[13:37:08.369]     ...future.frame <- base::sys.nframe()
[13:37:08.369]     ...future.conditions <- base::list()
[13:37:08.369]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:08.369]     if (FALSE) {
[13:37:08.369]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:08.369]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:08.369]     }
[13:37:08.369]     ...future.result <- base::tryCatch({
[13:37:08.369]         base::withCallingHandlers({
[13:37:08.369]             ...future.value <- base::withVisible(base::local({
[13:37:08.369]                 a * b
[13:37:08.369]             }))
[13:37:08.369]             future::FutureResult(value = ...future.value$value, 
[13:37:08.369]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.369]                   ...future.rng), globalenv = if (FALSE) 
[13:37:08.369]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:08.369]                     ...future.globalenv.names))
[13:37:08.369]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:08.369]         }, condition = base::local({
[13:37:08.369]             c <- base::c
[13:37:08.369]             inherits <- base::inherits
[13:37:08.369]             invokeRestart <- base::invokeRestart
[13:37:08.369]             length <- base::length
[13:37:08.369]             list <- base::list
[13:37:08.369]             seq.int <- base::seq.int
[13:37:08.369]             signalCondition <- base::signalCondition
[13:37:08.369]             sys.calls <- base::sys.calls
[13:37:08.369]             `[[` <- base::`[[`
[13:37:08.369]             `+` <- base::`+`
[13:37:08.369]             `<<-` <- base::`<<-`
[13:37:08.369]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:08.369]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:08.369]                   3L)]
[13:37:08.369]             }
[13:37:08.369]             function(cond) {
[13:37:08.369]                 is_error <- inherits(cond, "error")
[13:37:08.369]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:08.369]                   NULL)
[13:37:08.369]                 if (is_error) {
[13:37:08.369]                   sessionInformation <- function() {
[13:37:08.369]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:08.369]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:08.369]                       search = base::search(), system = base::Sys.info())
[13:37:08.369]                   }
[13:37:08.369]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.369]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:08.369]                     cond$call), session = sessionInformation(), 
[13:37:08.369]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:08.369]                   signalCondition(cond)
[13:37:08.369]                 }
[13:37:08.369]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:08.369]                 "immediateCondition"))) {
[13:37:08.369]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:08.369]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.369]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:08.369]                   if (TRUE && !signal) {
[13:37:08.369]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.369]                     {
[13:37:08.369]                       inherits <- base::inherits
[13:37:08.369]                       invokeRestart <- base::invokeRestart
[13:37:08.369]                       is.null <- base::is.null
[13:37:08.369]                       muffled <- FALSE
[13:37:08.369]                       if (inherits(cond, "message")) {
[13:37:08.369]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.369]                         if (muffled) 
[13:37:08.369]                           invokeRestart("muffleMessage")
[13:37:08.369]                       }
[13:37:08.369]                       else if (inherits(cond, "warning")) {
[13:37:08.369]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.369]                         if (muffled) 
[13:37:08.369]                           invokeRestart("muffleWarning")
[13:37:08.369]                       }
[13:37:08.369]                       else if (inherits(cond, "condition")) {
[13:37:08.369]                         if (!is.null(pattern)) {
[13:37:08.369]                           computeRestarts <- base::computeRestarts
[13:37:08.369]                           grepl <- base::grepl
[13:37:08.369]                           restarts <- computeRestarts(cond)
[13:37:08.369]                           for (restart in restarts) {
[13:37:08.369]                             name <- restart$name
[13:37:08.369]                             if (is.null(name)) 
[13:37:08.369]                               next
[13:37:08.369]                             if (!grepl(pattern, name)) 
[13:37:08.369]                               next
[13:37:08.369]                             invokeRestart(restart)
[13:37:08.369]                             muffled <- TRUE
[13:37:08.369]                             break
[13:37:08.369]                           }
[13:37:08.369]                         }
[13:37:08.369]                       }
[13:37:08.369]                       invisible(muffled)
[13:37:08.369]                     }
[13:37:08.369]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.369]                   }
[13:37:08.369]                 }
[13:37:08.369]                 else {
[13:37:08.369]                   if (TRUE) {
[13:37:08.369]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.369]                     {
[13:37:08.369]                       inherits <- base::inherits
[13:37:08.369]                       invokeRestart <- base::invokeRestart
[13:37:08.369]                       is.null <- base::is.null
[13:37:08.369]                       muffled <- FALSE
[13:37:08.369]                       if (inherits(cond, "message")) {
[13:37:08.369]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.369]                         if (muffled) 
[13:37:08.369]                           invokeRestart("muffleMessage")
[13:37:08.369]                       }
[13:37:08.369]                       else if (inherits(cond, "warning")) {
[13:37:08.369]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.369]                         if (muffled) 
[13:37:08.369]                           invokeRestart("muffleWarning")
[13:37:08.369]                       }
[13:37:08.369]                       else if (inherits(cond, "condition")) {
[13:37:08.369]                         if (!is.null(pattern)) {
[13:37:08.369]                           computeRestarts <- base::computeRestarts
[13:37:08.369]                           grepl <- base::grepl
[13:37:08.369]                           restarts <- computeRestarts(cond)
[13:37:08.369]                           for (restart in restarts) {
[13:37:08.369]                             name <- restart$name
[13:37:08.369]                             if (is.null(name)) 
[13:37:08.369]                               next
[13:37:08.369]                             if (!grepl(pattern, name)) 
[13:37:08.369]                               next
[13:37:08.369]                             invokeRestart(restart)
[13:37:08.369]                             muffled <- TRUE
[13:37:08.369]                             break
[13:37:08.369]                           }
[13:37:08.369]                         }
[13:37:08.369]                       }
[13:37:08.369]                       invisible(muffled)
[13:37:08.369]                     }
[13:37:08.369]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.369]                   }
[13:37:08.369]                 }
[13:37:08.369]             }
[13:37:08.369]         }))
[13:37:08.369]     }, error = function(ex) {
[13:37:08.369]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:08.369]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.369]                 ...future.rng), started = ...future.startTime, 
[13:37:08.369]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:08.369]             version = "1.8"), class = "FutureResult")
[13:37:08.369]     }, finally = {
[13:37:08.369]         if (!identical(...future.workdir, getwd())) 
[13:37:08.369]             setwd(...future.workdir)
[13:37:08.369]         {
[13:37:08.369]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:08.369]                 ...future.oldOptions$nwarnings <- NULL
[13:37:08.369]             }
[13:37:08.369]             base::options(...future.oldOptions)
[13:37:08.369]             if (.Platform$OS.type == "windows") {
[13:37:08.369]                 old_names <- names(...future.oldEnvVars)
[13:37:08.369]                 envs <- base::Sys.getenv()
[13:37:08.369]                 names <- names(envs)
[13:37:08.369]                 common <- intersect(names, old_names)
[13:37:08.369]                 added <- setdiff(names, old_names)
[13:37:08.369]                 removed <- setdiff(old_names, names)
[13:37:08.369]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:08.369]                   envs[common]]
[13:37:08.369]                 NAMES <- toupper(changed)
[13:37:08.369]                 args <- list()
[13:37:08.369]                 for (kk in seq_along(NAMES)) {
[13:37:08.369]                   name <- changed[[kk]]
[13:37:08.369]                   NAME <- NAMES[[kk]]
[13:37:08.369]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.369]                     next
[13:37:08.369]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.369]                 }
[13:37:08.369]                 NAMES <- toupper(added)
[13:37:08.369]                 for (kk in seq_along(NAMES)) {
[13:37:08.369]                   name <- added[[kk]]
[13:37:08.369]                   NAME <- NAMES[[kk]]
[13:37:08.369]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.369]                     next
[13:37:08.369]                   args[[name]] <- ""
[13:37:08.369]                 }
[13:37:08.369]                 NAMES <- toupper(removed)
[13:37:08.369]                 for (kk in seq_along(NAMES)) {
[13:37:08.369]                   name <- removed[[kk]]
[13:37:08.369]                   NAME <- NAMES[[kk]]
[13:37:08.369]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.369]                     next
[13:37:08.369]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.369]                 }
[13:37:08.369]                 if (length(args) > 0) 
[13:37:08.369]                   base::do.call(base::Sys.setenv, args = args)
[13:37:08.369]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:08.369]             }
[13:37:08.369]             else {
[13:37:08.369]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:08.369]             }
[13:37:08.369]             {
[13:37:08.369]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:08.369]                   0L) {
[13:37:08.369]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:08.369]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:08.369]                   base::options(opts)
[13:37:08.369]                 }
[13:37:08.369]                 {
[13:37:08.369]                   {
[13:37:08.369]                     NULL
[13:37:08.369]                     RNGkind("Mersenne-Twister")
[13:37:08.369]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:37:08.369]                       inherits = FALSE)
[13:37:08.369]                   }
[13:37:08.369]                   options(future.plan = NULL)
[13:37:08.369]                   if (is.na(NA_character_)) 
[13:37:08.369]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.369]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:08.369]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:08.369]                     .init = FALSE)
[13:37:08.369]                 }
[13:37:08.369]             }
[13:37:08.369]         }
[13:37:08.369]     })
[13:37:08.369]     if (TRUE) {
[13:37:08.369]         base::sink(type = "output", split = FALSE)
[13:37:08.369]         if (TRUE) {
[13:37:08.369]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:08.369]         }
[13:37:08.369]         else {
[13:37:08.369]             ...future.result["stdout"] <- base::list(NULL)
[13:37:08.369]         }
[13:37:08.369]         base::close(...future.stdout)
[13:37:08.369]         ...future.stdout <- NULL
[13:37:08.369]     }
[13:37:08.369]     ...future.result$conditions <- ...future.conditions
[13:37:08.369]     ...future.result$finished <- base::Sys.time()
[13:37:08.369]     ...future.result
[13:37:08.369] }
[13:37:08.371] assign_globals() ...
[13:37:08.371] List of 2
[13:37:08.371]  $ a: num 2
[13:37:08.371]  $ b: num 3
[13:37:08.371]  - attr(*, "where")=List of 2
[13:37:08.371]   ..$ a:<environment: R_EmptyEnv> 
[13:37:08.371]   ..$ b:<environment: R_EmptyEnv> 
[13:37:08.371]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:37:08.371]  - attr(*, "resolved")= logi FALSE
[13:37:08.371]  - attr(*, "total_size")= num 112
[13:37:08.374] - copied ‘a’ to environment
[13:37:08.374] - copied ‘b’ to environment
[13:37:08.374] assign_globals() ... done
[13:37:08.374] plan(): Setting new future strategy stack:
[13:37:08.374] List of future strategies:
[13:37:08.374] 1. sequential:
[13:37:08.374]    - args: function (..., envir = parent.frame())
[13:37:08.374]    - tweaked: FALSE
[13:37:08.374]    - call: NULL
[13:37:08.374] plan(): nbrOfWorkers() = 1
[13:37:08.375] plan(): Setting new future strategy stack:
[13:37:08.375] List of future strategies:
[13:37:08.375] 1. multicore:
[13:37:08.375]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:37:08.375]    - tweaked: FALSE
[13:37:08.375]    - call: plan(multicore)
[13:37:08.379] plan(): nbrOfWorkers() = 1
[13:37:08.379] SequentialFuture started (and completed)
[1] 6
*** multicore(..., workers = 1L) ... DONE
Testing with 1 cores ... DONE
Testing with 2 cores ...
Number of workers: 2
*** multicore(..., globals = FALSE) without globals
[13:37:08.387] getGlobalsAndPackages() ...
[13:37:08.387] Not searching for globals
[13:37:08.387] - globals: [0] <none>
[13:37:08.387] getGlobalsAndPackages() ... DONE
[13:37:08.388] Packages needed by the future expression (n = 0): <none>
[13:37:08.389] Packages needed by future strategies (n = 0): <none>
[13:37:08.389] {
[13:37:08.389]     {
[13:37:08.389]         {
[13:37:08.389]             ...future.startTime <- base::Sys.time()
[13:37:08.389]             {
[13:37:08.389]                 {
[13:37:08.389]                   {
[13:37:08.389]                     {
[13:37:08.389]                       base::local({
[13:37:08.389]                         has_future <- base::requireNamespace("future", 
[13:37:08.389]                           quietly = TRUE)
[13:37:08.389]                         if (has_future) {
[13:37:08.389]                           ns <- base::getNamespace("future")
[13:37:08.389]                           version <- ns[[".package"]][["version"]]
[13:37:08.389]                           if (is.null(version)) 
[13:37:08.389]                             version <- utils::packageVersion("future")
[13:37:08.389]                         }
[13:37:08.389]                         else {
[13:37:08.389]                           version <- NULL
[13:37:08.389]                         }
[13:37:08.389]                         if (!has_future || version < "1.8.0") {
[13:37:08.389]                           info <- base::c(r_version = base::gsub("R version ", 
[13:37:08.389]                             "", base::R.version$version.string), 
[13:37:08.389]                             platform = base::sprintf("%s (%s-bit)", 
[13:37:08.389]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:08.389]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:08.389]                               "release", "version")], collapse = " "), 
[13:37:08.389]                             hostname = base::Sys.info()[["nodename"]])
[13:37:08.389]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:37:08.389]                             info)
[13:37:08.389]                           info <- base::paste(info, collapse = "; ")
[13:37:08.389]                           if (!has_future) {
[13:37:08.389]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:08.389]                               info)
[13:37:08.389]                           }
[13:37:08.389]                           else {
[13:37:08.389]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:08.389]                               info, version)
[13:37:08.389]                           }
[13:37:08.389]                           base::stop(msg)
[13:37:08.389]                         }
[13:37:08.389]                       })
[13:37:08.389]                     }
[13:37:08.389]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:37:08.389]                     base::options(mc.cores = 1L)
[13:37:08.389]                   }
[13:37:08.389]                   ...future.strategy.old <- future::plan("list")
[13:37:08.389]                   options(future.plan = NULL)
[13:37:08.389]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.389]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:08.389]                 }
[13:37:08.389]                 ...future.workdir <- getwd()
[13:37:08.389]             }
[13:37:08.389]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:08.389]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:08.389]         }
[13:37:08.389]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:08.389]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:08.389]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:08.389]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:08.389]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:08.389]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:08.389]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:08.389]             base::names(...future.oldOptions))
[13:37:08.389]     }
[13:37:08.389]     if (FALSE) {
[13:37:08.389]     }
[13:37:08.389]     else {
[13:37:08.389]         if (TRUE) {
[13:37:08.389]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:08.389]                 open = "w")
[13:37:08.389]         }
[13:37:08.389]         else {
[13:37:08.389]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:08.389]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:08.389]         }
[13:37:08.389]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:08.389]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:08.389]             base::sink(type = "output", split = FALSE)
[13:37:08.389]             base::close(...future.stdout)
[13:37:08.389]         }, add = TRUE)
[13:37:08.389]     }
[13:37:08.389]     ...future.frame <- base::sys.nframe()
[13:37:08.389]     ...future.conditions <- base::list()
[13:37:08.389]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:08.389]     if (FALSE) {
[13:37:08.389]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:08.389]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:08.389]     }
[13:37:08.389]     ...future.result <- base::tryCatch({
[13:37:08.389]         base::withCallingHandlers({
[13:37:08.389]             ...future.value <- base::withVisible(base::local({
[13:37:08.389]                 withCallingHandlers({
[13:37:08.389]                   {
[13:37:08.389]                     42L
[13:37:08.389]                   }
[13:37:08.389]                 }, immediateCondition = function(cond) {
[13:37:08.389]                   save_rds <- function (object, pathname, ...) 
[13:37:08.389]                   {
[13:37:08.389]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:37:08.389]                     if (file_test("-f", pathname_tmp)) {
[13:37:08.389]                       fi_tmp <- file.info(pathname_tmp)
[13:37:08.389]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:37:08.389]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:08.389]                         fi_tmp[["mtime"]])
[13:37:08.389]                     }
[13:37:08.389]                     tryCatch({
[13:37:08.389]                       saveRDS(object, file = pathname_tmp, ...)
[13:37:08.389]                     }, error = function(ex) {
[13:37:08.389]                       msg <- conditionMessage(ex)
[13:37:08.389]                       fi_tmp <- file.info(pathname_tmp)
[13:37:08.389]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:37:08.389]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:08.389]                         fi_tmp[["mtime"]], msg)
[13:37:08.389]                       ex$message <- msg
[13:37:08.389]                       stop(ex)
[13:37:08.389]                     })
[13:37:08.389]                     stopifnot(file_test("-f", pathname_tmp))
[13:37:08.389]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:37:08.389]                     if (!res || file_test("-f", pathname_tmp)) {
[13:37:08.389]                       fi_tmp <- file.info(pathname_tmp)
[13:37:08.389]                       fi <- file.info(pathname)
[13:37:08.389]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:37:08.389]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:08.389]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:37:08.389]                         fi[["size"]], fi[["mtime"]])
[13:37:08.389]                       stop(msg)
[13:37:08.389]                     }
[13:37:08.389]                     invisible(pathname)
[13:37:08.389]                   }
[13:37:08.389]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:37:08.389]                     rootPath = tempdir()) 
[13:37:08.389]                   {
[13:37:08.389]                     obj <- list(time = Sys.time(), condition = cond)
[13:37:08.389]                     file <- tempfile(pattern = class(cond)[1], 
[13:37:08.389]                       tmpdir = path, fileext = ".rds")
[13:37:08.389]                     save_rds(obj, file)
[13:37:08.389]                   }
[13:37:08.389]                   saveImmediateCondition(cond, path = "/tmp/RtmptV9aIe/.future/immediateConditions")
[13:37:08.389]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.389]                   {
[13:37:08.389]                     inherits <- base::inherits
[13:37:08.389]                     invokeRestart <- base::invokeRestart
[13:37:08.389]                     is.null <- base::is.null
[13:37:08.389]                     muffled <- FALSE
[13:37:08.389]                     if (inherits(cond, "message")) {
[13:37:08.389]                       muffled <- grepl(pattern, "muffleMessage")
[13:37:08.389]                       if (muffled) 
[13:37:08.389]                         invokeRestart("muffleMessage")
[13:37:08.389]                     }
[13:37:08.389]                     else if (inherits(cond, "warning")) {
[13:37:08.389]                       muffled <- grepl(pattern, "muffleWarning")
[13:37:08.389]                       if (muffled) 
[13:37:08.389]                         invokeRestart("muffleWarning")
[13:37:08.389]                     }
[13:37:08.389]                     else if (inherits(cond, "condition")) {
[13:37:08.389]                       if (!is.null(pattern)) {
[13:37:08.389]                         computeRestarts <- base::computeRestarts
[13:37:08.389]                         grepl <- base::grepl
[13:37:08.389]                         restarts <- computeRestarts(cond)
[13:37:08.389]                         for (restart in restarts) {
[13:37:08.389]                           name <- restart$name
[13:37:08.389]                           if (is.null(name)) 
[13:37:08.389]                             next
[13:37:08.389]                           if (!grepl(pattern, name)) 
[13:37:08.389]                             next
[13:37:08.389]                           invokeRestart(restart)
[13:37:08.389]                           muffled <- TRUE
[13:37:08.389]                           break
[13:37:08.389]                         }
[13:37:08.389]                       }
[13:37:08.389]                     }
[13:37:08.389]                     invisible(muffled)
[13:37:08.389]                   }
[13:37:08.389]                   muffleCondition(cond)
[13:37:08.389]                 })
[13:37:08.389]             }))
[13:37:08.389]             future::FutureResult(value = ...future.value$value, 
[13:37:08.389]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.389]                   ...future.rng), globalenv = if (FALSE) 
[13:37:08.389]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:08.389]                     ...future.globalenv.names))
[13:37:08.389]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:08.389]         }, condition = base::local({
[13:37:08.389]             c <- base::c
[13:37:08.389]             inherits <- base::inherits
[13:37:08.389]             invokeRestart <- base::invokeRestart
[13:37:08.389]             length <- base::length
[13:37:08.389]             list <- base::list
[13:37:08.389]             seq.int <- base::seq.int
[13:37:08.389]             signalCondition <- base::signalCondition
[13:37:08.389]             sys.calls <- base::sys.calls
[13:37:08.389]             `[[` <- base::`[[`
[13:37:08.389]             `+` <- base::`+`
[13:37:08.389]             `<<-` <- base::`<<-`
[13:37:08.389]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:08.389]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:08.389]                   3L)]
[13:37:08.389]             }
[13:37:08.389]             function(cond) {
[13:37:08.389]                 is_error <- inherits(cond, "error")
[13:37:08.389]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:08.389]                   NULL)
[13:37:08.389]                 if (is_error) {
[13:37:08.389]                   sessionInformation <- function() {
[13:37:08.389]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:08.389]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:08.389]                       search = base::search(), system = base::Sys.info())
[13:37:08.389]                   }
[13:37:08.389]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.389]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:08.389]                     cond$call), session = sessionInformation(), 
[13:37:08.389]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:08.389]                   signalCondition(cond)
[13:37:08.389]                 }
[13:37:08.389]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:08.389]                 "immediateCondition"))) {
[13:37:08.389]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:08.389]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.389]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:08.389]                   if (TRUE && !signal) {
[13:37:08.389]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.389]                     {
[13:37:08.389]                       inherits <- base::inherits
[13:37:08.389]                       invokeRestart <- base::invokeRestart
[13:37:08.389]                       is.null <- base::is.null
[13:37:08.389]                       muffled <- FALSE
[13:37:08.389]                       if (inherits(cond, "message")) {
[13:37:08.389]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.389]                         if (muffled) 
[13:37:08.389]                           invokeRestart("muffleMessage")
[13:37:08.389]                       }
[13:37:08.389]                       else if (inherits(cond, "warning")) {
[13:37:08.389]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.389]                         if (muffled) 
[13:37:08.389]                           invokeRestart("muffleWarning")
[13:37:08.389]                       }
[13:37:08.389]                       else if (inherits(cond, "condition")) {
[13:37:08.389]                         if (!is.null(pattern)) {
[13:37:08.389]                           computeRestarts <- base::computeRestarts
[13:37:08.389]                           grepl <- base::grepl
[13:37:08.389]                           restarts <- computeRestarts(cond)
[13:37:08.389]                           for (restart in restarts) {
[13:37:08.389]                             name <- restart$name
[13:37:08.389]                             if (is.null(name)) 
[13:37:08.389]                               next
[13:37:08.389]                             if (!grepl(pattern, name)) 
[13:37:08.389]                               next
[13:37:08.389]                             invokeRestart(restart)
[13:37:08.389]                             muffled <- TRUE
[13:37:08.389]                             break
[13:37:08.389]                           }
[13:37:08.389]                         }
[13:37:08.389]                       }
[13:37:08.389]                       invisible(muffled)
[13:37:08.389]                     }
[13:37:08.389]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.389]                   }
[13:37:08.389]                 }
[13:37:08.389]                 else {
[13:37:08.389]                   if (TRUE) {
[13:37:08.389]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.389]                     {
[13:37:08.389]                       inherits <- base::inherits
[13:37:08.389]                       invokeRestart <- base::invokeRestart
[13:37:08.389]                       is.null <- base::is.null
[13:37:08.389]                       muffled <- FALSE
[13:37:08.389]                       if (inherits(cond, "message")) {
[13:37:08.389]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.389]                         if (muffled) 
[13:37:08.389]                           invokeRestart("muffleMessage")
[13:37:08.389]                       }
[13:37:08.389]                       else if (inherits(cond, "warning")) {
[13:37:08.389]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.389]                         if (muffled) 
[13:37:08.389]                           invokeRestart("muffleWarning")
[13:37:08.389]                       }
[13:37:08.389]                       else if (inherits(cond, "condition")) {
[13:37:08.389]                         if (!is.null(pattern)) {
[13:37:08.389]                           computeRestarts <- base::computeRestarts
[13:37:08.389]                           grepl <- base::grepl
[13:37:08.389]                           restarts <- computeRestarts(cond)
[13:37:08.389]                           for (restart in restarts) {
[13:37:08.389]                             name <- restart$name
[13:37:08.389]                             if (is.null(name)) 
[13:37:08.389]                               next
[13:37:08.389]                             if (!grepl(pattern, name)) 
[13:37:08.389]                               next
[13:37:08.389]                             invokeRestart(restart)
[13:37:08.389]                             muffled <- TRUE
[13:37:08.389]                             break
[13:37:08.389]                           }
[13:37:08.389]                         }
[13:37:08.389]                       }
[13:37:08.389]                       invisible(muffled)
[13:37:08.389]                     }
[13:37:08.389]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.389]                   }
[13:37:08.389]                 }
[13:37:08.389]             }
[13:37:08.389]         }))
[13:37:08.389]     }, error = function(ex) {
[13:37:08.389]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:08.389]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.389]                 ...future.rng), started = ...future.startTime, 
[13:37:08.389]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:08.389]             version = "1.8"), class = "FutureResult")
[13:37:08.389]     }, finally = {
[13:37:08.389]         if (!identical(...future.workdir, getwd())) 
[13:37:08.389]             setwd(...future.workdir)
[13:37:08.389]         {
[13:37:08.389]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:08.389]                 ...future.oldOptions$nwarnings <- NULL
[13:37:08.389]             }
[13:37:08.389]             base::options(...future.oldOptions)
[13:37:08.389]             if (.Platform$OS.type == "windows") {
[13:37:08.389]                 old_names <- names(...future.oldEnvVars)
[13:37:08.389]                 envs <- base::Sys.getenv()
[13:37:08.389]                 names <- names(envs)
[13:37:08.389]                 common <- intersect(names, old_names)
[13:37:08.389]                 added <- setdiff(names, old_names)
[13:37:08.389]                 removed <- setdiff(old_names, names)
[13:37:08.389]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:08.389]                   envs[common]]
[13:37:08.389]                 NAMES <- toupper(changed)
[13:37:08.389]                 args <- list()
[13:37:08.389]                 for (kk in seq_along(NAMES)) {
[13:37:08.389]                   name <- changed[[kk]]
[13:37:08.389]                   NAME <- NAMES[[kk]]
[13:37:08.389]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.389]                     next
[13:37:08.389]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.389]                 }
[13:37:08.389]                 NAMES <- toupper(added)
[13:37:08.389]                 for (kk in seq_along(NAMES)) {
[13:37:08.389]                   name <- added[[kk]]
[13:37:08.389]                   NAME <- NAMES[[kk]]
[13:37:08.389]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.389]                     next
[13:37:08.389]                   args[[name]] <- ""
[13:37:08.389]                 }
[13:37:08.389]                 NAMES <- toupper(removed)
[13:37:08.389]                 for (kk in seq_along(NAMES)) {
[13:37:08.389]                   name <- removed[[kk]]
[13:37:08.389]                   NAME <- NAMES[[kk]]
[13:37:08.389]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.389]                     next
[13:37:08.389]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.389]                 }
[13:37:08.389]                 if (length(args) > 0) 
[13:37:08.389]                   base::do.call(base::Sys.setenv, args = args)
[13:37:08.389]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:08.389]             }
[13:37:08.389]             else {
[13:37:08.389]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:08.389]             }
[13:37:08.389]             {
[13:37:08.389]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:08.389]                   0L) {
[13:37:08.389]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:08.389]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:08.389]                   base::options(opts)
[13:37:08.389]                 }
[13:37:08.389]                 {
[13:37:08.389]                   {
[13:37:08.389]                     base::options(mc.cores = ...future.mc.cores.old)
[13:37:08.389]                     NULL
[13:37:08.389]                   }
[13:37:08.389]                   options(future.plan = NULL)
[13:37:08.389]                   if (is.na(NA_character_)) 
[13:37:08.389]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.389]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:08.389]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:08.389]                     .init = FALSE)
[13:37:08.389]                 }
[13:37:08.389]             }
[13:37:08.389]         }
[13:37:08.389]     })
[13:37:08.389]     if (TRUE) {
[13:37:08.389]         base::sink(type = "output", split = FALSE)
[13:37:08.389]         if (TRUE) {
[13:37:08.389]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:08.389]         }
[13:37:08.389]         else {
[13:37:08.389]             ...future.result["stdout"] <- base::list(NULL)
[13:37:08.389]         }
[13:37:08.389]         base::close(...future.stdout)
[13:37:08.389]         ...future.stdout <- NULL
[13:37:08.389]     }
[13:37:08.389]     ...future.result$conditions <- ...future.conditions
[13:37:08.389]     ...future.result$finished <- base::Sys.time()
[13:37:08.389]     ...future.result
[13:37:08.389] }
[13:37:08.391] requestCore(): workers = 2
[13:37:08.394] MulticoreFuture started
[13:37:08.395] plan(): Setting new future strategy stack:
[13:37:08.395] List of future strategies:
[13:37:08.395] 1. sequential:
[13:37:08.395]    - args: function (..., envir = parent.frame())
[13:37:08.395]    - tweaked: FALSE
[13:37:08.395]    - call: NULL
[13:37:08.396] plan(): nbrOfWorkers() = 1
[13:37:08.398] plan(): Setting new future strategy stack:
[13:37:08.398] List of future strategies:
[13:37:08.398] 1. multicore:
[13:37:08.398]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:37:08.398]    - tweaked: FALSE
[13:37:08.398]    - call: plan(multicore)
[13:37:08.403] plan(): nbrOfWorkers() = 2
[1] TRUE
[13:37:08.405] result() for MulticoreFuture ...
[13:37:08.410] result() for MulticoreFuture ...
[13:37:08.410] result() for MulticoreFuture ... done
[13:37:08.410] result() for MulticoreFuture ... done
[13:37:08.410] result() for MulticoreFuture ...
[13:37:08.410] result() for MulticoreFuture ... done
[1] 42
*** multicore(..., globals = FALSE) with globals
[13:37:08.414] getGlobalsAndPackages() ...
[13:37:08.414] Not searching for globals
[13:37:08.414] - globals: [0] <none>
[13:37:08.414] getGlobalsAndPackages() ... DONE
[13:37:08.415] Packages needed by the future expression (n = 0): <none>
[13:37:08.415] Packages needed by future strategies (n = 0): <none>
[13:37:08.416] {
[13:37:08.416]     {
[13:37:08.416]         {
[13:37:08.416]             ...future.startTime <- base::Sys.time()
[13:37:08.416]             {
[13:37:08.416]                 {
[13:37:08.416]                   {
[13:37:08.416]                     {
[13:37:08.416]                       base::local({
[13:37:08.416]                         has_future <- base::requireNamespace("future", 
[13:37:08.416]                           quietly = TRUE)
[13:37:08.416]                         if (has_future) {
[13:37:08.416]                           ns <- base::getNamespace("future")
[13:37:08.416]                           version <- ns[[".package"]][["version"]]
[13:37:08.416]                           if (is.null(version)) 
[13:37:08.416]                             version <- utils::packageVersion("future")
[13:37:08.416]                         }
[13:37:08.416]                         else {
[13:37:08.416]                           version <- NULL
[13:37:08.416]                         }
[13:37:08.416]                         if (!has_future || version < "1.8.0") {
[13:37:08.416]                           info <- base::c(r_version = base::gsub("R version ", 
[13:37:08.416]                             "", base::R.version$version.string), 
[13:37:08.416]                             platform = base::sprintf("%s (%s-bit)", 
[13:37:08.416]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:08.416]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:08.416]                               "release", "version")], collapse = " "), 
[13:37:08.416]                             hostname = base::Sys.info()[["nodename"]])
[13:37:08.416]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:37:08.416]                             info)
[13:37:08.416]                           info <- base::paste(info, collapse = "; ")
[13:37:08.416]                           if (!has_future) {
[13:37:08.416]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:08.416]                               info)
[13:37:08.416]                           }
[13:37:08.416]                           else {
[13:37:08.416]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:08.416]                               info, version)
[13:37:08.416]                           }
[13:37:08.416]                           base::stop(msg)
[13:37:08.416]                         }
[13:37:08.416]                       })
[13:37:08.416]                     }
[13:37:08.416]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:37:08.416]                     base::options(mc.cores = 1L)
[13:37:08.416]                   }
[13:37:08.416]                   ...future.strategy.old <- future::plan("list")
[13:37:08.416]                   options(future.plan = NULL)
[13:37:08.416]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.416]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:08.416]                 }
[13:37:08.416]                 ...future.workdir <- getwd()
[13:37:08.416]             }
[13:37:08.416]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:08.416]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:08.416]         }
[13:37:08.416]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:08.416]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:08.416]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:08.416]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:08.416]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:08.416]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:08.416]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:08.416]             base::names(...future.oldOptions))
[13:37:08.416]     }
[13:37:08.416]     if (FALSE) {
[13:37:08.416]     }
[13:37:08.416]     else {
[13:37:08.416]         if (TRUE) {
[13:37:08.416]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:08.416]                 open = "w")
[13:37:08.416]         }
[13:37:08.416]         else {
[13:37:08.416]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:08.416]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:08.416]         }
[13:37:08.416]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:08.416]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:08.416]             base::sink(type = "output", split = FALSE)
[13:37:08.416]             base::close(...future.stdout)
[13:37:08.416]         }, add = TRUE)
[13:37:08.416]     }
[13:37:08.416]     ...future.frame <- base::sys.nframe()
[13:37:08.416]     ...future.conditions <- base::list()
[13:37:08.416]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:08.416]     if (FALSE) {
[13:37:08.416]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:08.416]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:08.416]     }
[13:37:08.416]     ...future.result <- base::tryCatch({
[13:37:08.416]         base::withCallingHandlers({
[13:37:08.416]             ...future.value <- base::withVisible(base::local({
[13:37:08.416]                 withCallingHandlers({
[13:37:08.416]                   {
[13:37:08.416]                     b <- 3
[13:37:08.416]                     c <- 2
[13:37:08.416]                     a * b * c
[13:37:08.416]                   }
[13:37:08.416]                 }, immediateCondition = function(cond) {
[13:37:08.416]                   save_rds <- function (object, pathname, ...) 
[13:37:08.416]                   {
[13:37:08.416]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:37:08.416]                     if (file_test("-f", pathname_tmp)) {
[13:37:08.416]                       fi_tmp <- file.info(pathname_tmp)
[13:37:08.416]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:37:08.416]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:08.416]                         fi_tmp[["mtime"]])
[13:37:08.416]                     }
[13:37:08.416]                     tryCatch({
[13:37:08.416]                       saveRDS(object, file = pathname_tmp, ...)
[13:37:08.416]                     }, error = function(ex) {
[13:37:08.416]                       msg <- conditionMessage(ex)
[13:37:08.416]                       fi_tmp <- file.info(pathname_tmp)
[13:37:08.416]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:37:08.416]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:08.416]                         fi_tmp[["mtime"]], msg)
[13:37:08.416]                       ex$message <- msg
[13:37:08.416]                       stop(ex)
[13:37:08.416]                     })
[13:37:08.416]                     stopifnot(file_test("-f", pathname_tmp))
[13:37:08.416]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:37:08.416]                     if (!res || file_test("-f", pathname_tmp)) {
[13:37:08.416]                       fi_tmp <- file.info(pathname_tmp)
[13:37:08.416]                       fi <- file.info(pathname)
[13:37:08.416]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:37:08.416]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:08.416]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:37:08.416]                         fi[["size"]], fi[["mtime"]])
[13:37:08.416]                       stop(msg)
[13:37:08.416]                     }
[13:37:08.416]                     invisible(pathname)
[13:37:08.416]                   }
[13:37:08.416]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:37:08.416]                     rootPath = tempdir()) 
[13:37:08.416]                   {
[13:37:08.416]                     obj <- list(time = Sys.time(), condition = cond)
[13:37:08.416]                     file <- tempfile(pattern = class(cond)[1], 
[13:37:08.416]                       tmpdir = path, fileext = ".rds")
[13:37:08.416]                     save_rds(obj, file)
[13:37:08.416]                   }
[13:37:08.416]                   saveImmediateCondition(cond, path = "/tmp/RtmptV9aIe/.future/immediateConditions")
[13:37:08.416]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.416]                   {
[13:37:08.416]                     inherits <- base::inherits
[13:37:08.416]                     invokeRestart <- base::invokeRestart
[13:37:08.416]                     is.null <- base::is.null
[13:37:08.416]                     muffled <- FALSE
[13:37:08.416]                     if (inherits(cond, "message")) {
[13:37:08.416]                       muffled <- grepl(pattern, "muffleMessage")
[13:37:08.416]                       if (muffled) 
[13:37:08.416]                         invokeRestart("muffleMessage")
[13:37:08.416]                     }
[13:37:08.416]                     else if (inherits(cond, "warning")) {
[13:37:08.416]                       muffled <- grepl(pattern, "muffleWarning")
[13:37:08.416]                       if (muffled) 
[13:37:08.416]                         invokeRestart("muffleWarning")
[13:37:08.416]                     }
[13:37:08.416]                     else if (inherits(cond, "condition")) {
[13:37:08.416]                       if (!is.null(pattern)) {
[13:37:08.416]                         computeRestarts <- base::computeRestarts
[13:37:08.416]                         grepl <- base::grepl
[13:37:08.416]                         restarts <- computeRestarts(cond)
[13:37:08.416]                         for (restart in restarts) {
[13:37:08.416]                           name <- restart$name
[13:37:08.416]                           if (is.null(name)) 
[13:37:08.416]                             next
[13:37:08.416]                           if (!grepl(pattern, name)) 
[13:37:08.416]                             next
[13:37:08.416]                           invokeRestart(restart)
[13:37:08.416]                           muffled <- TRUE
[13:37:08.416]                           break
[13:37:08.416]                         }
[13:37:08.416]                       }
[13:37:08.416]                     }
[13:37:08.416]                     invisible(muffled)
[13:37:08.416]                   }
[13:37:08.416]                   muffleCondition(cond)
[13:37:08.416]                 })
[13:37:08.416]             }))
[13:37:08.416]             future::FutureResult(value = ...future.value$value, 
[13:37:08.416]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.416]                   ...future.rng), globalenv = if (FALSE) 
[13:37:08.416]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:08.416]                     ...future.globalenv.names))
[13:37:08.416]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:08.416]         }, condition = base::local({
[13:37:08.416]             c <- base::c
[13:37:08.416]             inherits <- base::inherits
[13:37:08.416]             invokeRestart <- base::invokeRestart
[13:37:08.416]             length <- base::length
[13:37:08.416]             list <- base::list
[13:37:08.416]             seq.int <- base::seq.int
[13:37:08.416]             signalCondition <- base::signalCondition
[13:37:08.416]             sys.calls <- base::sys.calls
[13:37:08.416]             `[[` <- base::`[[`
[13:37:08.416]             `+` <- base::`+`
[13:37:08.416]             `<<-` <- base::`<<-`
[13:37:08.416]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:08.416]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:08.416]                   3L)]
[13:37:08.416]             }
[13:37:08.416]             function(cond) {
[13:37:08.416]                 is_error <- inherits(cond, "error")
[13:37:08.416]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:08.416]                   NULL)
[13:37:08.416]                 if (is_error) {
[13:37:08.416]                   sessionInformation <- function() {
[13:37:08.416]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:08.416]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:08.416]                       search = base::search(), system = base::Sys.info())
[13:37:08.416]                   }
[13:37:08.416]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.416]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:08.416]                     cond$call), session = sessionInformation(), 
[13:37:08.416]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:08.416]                   signalCondition(cond)
[13:37:08.416]                 }
[13:37:08.416]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:08.416]                 "immediateCondition"))) {
[13:37:08.416]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:08.416]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.416]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:08.416]                   if (TRUE && !signal) {
[13:37:08.416]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.416]                     {
[13:37:08.416]                       inherits <- base::inherits
[13:37:08.416]                       invokeRestart <- base::invokeRestart
[13:37:08.416]                       is.null <- base::is.null
[13:37:08.416]                       muffled <- FALSE
[13:37:08.416]                       if (inherits(cond, "message")) {
[13:37:08.416]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.416]                         if (muffled) 
[13:37:08.416]                           invokeRestart("muffleMessage")
[13:37:08.416]                       }
[13:37:08.416]                       else if (inherits(cond, "warning")) {
[13:37:08.416]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.416]                         if (muffled) 
[13:37:08.416]                           invokeRestart("muffleWarning")
[13:37:08.416]                       }
[13:37:08.416]                       else if (inherits(cond, "condition")) {
[13:37:08.416]                         if (!is.null(pattern)) {
[13:37:08.416]                           computeRestarts <- base::computeRestarts
[13:37:08.416]                           grepl <- base::grepl
[13:37:08.416]                           restarts <- computeRestarts(cond)
[13:37:08.416]                           for (restart in restarts) {
[13:37:08.416]                             name <- restart$name
[13:37:08.416]                             if (is.null(name)) 
[13:37:08.416]                               next
[13:37:08.416]                             if (!grepl(pattern, name)) 
[13:37:08.416]                               next
[13:37:08.416]                             invokeRestart(restart)
[13:37:08.416]                             muffled <- TRUE
[13:37:08.416]                             break
[13:37:08.416]                           }
[13:37:08.416]                         }
[13:37:08.416]                       }
[13:37:08.416]                       invisible(muffled)
[13:37:08.416]                     }
[13:37:08.416]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.416]                   }
[13:37:08.416]                 }
[13:37:08.416]                 else {
[13:37:08.416]                   if (TRUE) {
[13:37:08.416]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.416]                     {
[13:37:08.416]                       inherits <- base::inherits
[13:37:08.416]                       invokeRestart <- base::invokeRestart
[13:37:08.416]                       is.null <- base::is.null
[13:37:08.416]                       muffled <- FALSE
[13:37:08.416]                       if (inherits(cond, "message")) {
[13:37:08.416]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.416]                         if (muffled) 
[13:37:08.416]                           invokeRestart("muffleMessage")
[13:37:08.416]                       }
[13:37:08.416]                       else if (inherits(cond, "warning")) {
[13:37:08.416]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.416]                         if (muffled) 
[13:37:08.416]                           invokeRestart("muffleWarning")
[13:37:08.416]                       }
[13:37:08.416]                       else if (inherits(cond, "condition")) {
[13:37:08.416]                         if (!is.null(pattern)) {
[13:37:08.416]                           computeRestarts <- base::computeRestarts
[13:37:08.416]                           grepl <- base::grepl
[13:37:08.416]                           restarts <- computeRestarts(cond)
[13:37:08.416]                           for (restart in restarts) {
[13:37:08.416]                             name <- restart$name
[13:37:08.416]                             if (is.null(name)) 
[13:37:08.416]                               next
[13:37:08.416]                             if (!grepl(pattern, name)) 
[13:37:08.416]                               next
[13:37:08.416]                             invokeRestart(restart)
[13:37:08.416]                             muffled <- TRUE
[13:37:08.416]                             break
[13:37:08.416]                           }
[13:37:08.416]                         }
[13:37:08.416]                       }
[13:37:08.416]                       invisible(muffled)
[13:37:08.416]                     }
[13:37:08.416]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.416]                   }
[13:37:08.416]                 }
[13:37:08.416]             }
[13:37:08.416]         }))
[13:37:08.416]     }, error = function(ex) {
[13:37:08.416]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:08.416]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.416]                 ...future.rng), started = ...future.startTime, 
[13:37:08.416]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:08.416]             version = "1.8"), class = "FutureResult")
[13:37:08.416]     }, finally = {
[13:37:08.416]         if (!identical(...future.workdir, getwd())) 
[13:37:08.416]             setwd(...future.workdir)
[13:37:08.416]         {
[13:37:08.416]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:08.416]                 ...future.oldOptions$nwarnings <- NULL
[13:37:08.416]             }
[13:37:08.416]             base::options(...future.oldOptions)
[13:37:08.416]             if (.Platform$OS.type == "windows") {
[13:37:08.416]                 old_names <- names(...future.oldEnvVars)
[13:37:08.416]                 envs <- base::Sys.getenv()
[13:37:08.416]                 names <- names(envs)
[13:37:08.416]                 common <- intersect(names, old_names)
[13:37:08.416]                 added <- setdiff(names, old_names)
[13:37:08.416]                 removed <- setdiff(old_names, names)
[13:37:08.416]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:08.416]                   envs[common]]
[13:37:08.416]                 NAMES <- toupper(changed)
[13:37:08.416]                 args <- list()
[13:37:08.416]                 for (kk in seq_along(NAMES)) {
[13:37:08.416]                   name <- changed[[kk]]
[13:37:08.416]                   NAME <- NAMES[[kk]]
[13:37:08.416]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.416]                     next
[13:37:08.416]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.416]                 }
[13:37:08.416]                 NAMES <- toupper(added)
[13:37:08.416]                 for (kk in seq_along(NAMES)) {
[13:37:08.416]                   name <- added[[kk]]
[13:37:08.416]                   NAME <- NAMES[[kk]]
[13:37:08.416]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.416]                     next
[13:37:08.416]                   args[[name]] <- ""
[13:37:08.416]                 }
[13:37:08.416]                 NAMES <- toupper(removed)
[13:37:08.416]                 for (kk in seq_along(NAMES)) {
[13:37:08.416]                   name <- removed[[kk]]
[13:37:08.416]                   NAME <- NAMES[[kk]]
[13:37:08.416]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.416]                     next
[13:37:08.416]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.416]                 }
[13:37:08.416]                 if (length(args) > 0) 
[13:37:08.416]                   base::do.call(base::Sys.setenv, args = args)
[13:37:08.416]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:08.416]             }
[13:37:08.416]             else {
[13:37:08.416]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:08.416]             }
[13:37:08.416]             {
[13:37:08.416]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:08.416]                   0L) {
[13:37:08.416]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:08.416]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:08.416]                   base::options(opts)
[13:37:08.416]                 }
[13:37:08.416]                 {
[13:37:08.416]                   {
[13:37:08.416]                     base::options(mc.cores = ...future.mc.cores.old)
[13:37:08.416]                     NULL
[13:37:08.416]                   }
[13:37:08.416]                   options(future.plan = NULL)
[13:37:08.416]                   if (is.na(NA_character_)) 
[13:37:08.416]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.416]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:08.416]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:08.416]                     .init = FALSE)
[13:37:08.416]                 }
[13:37:08.416]             }
[13:37:08.416]         }
[13:37:08.416]     })
[13:37:08.416]     if (TRUE) {
[13:37:08.416]         base::sink(type = "output", split = FALSE)
[13:37:08.416]         if (TRUE) {
[13:37:08.416]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:08.416]         }
[13:37:08.416]         else {
[13:37:08.416]             ...future.result["stdout"] <- base::list(NULL)
[13:37:08.416]         }
[13:37:08.416]         base::close(...future.stdout)
[13:37:08.416]         ...future.stdout <- NULL
[13:37:08.416]     }
[13:37:08.416]     ...future.result$conditions <- ...future.conditions
[13:37:08.416]     ...future.result$finished <- base::Sys.time()
[13:37:08.416]     ...future.result
[13:37:08.416] }
[13:37:08.418] requestCore(): workers = 2
[13:37:08.420] MulticoreFuture started
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    b <- 3
    c <- 2
    a * b * c
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[13:37:08.421] plan(): Setting new future strategy stack:
[13:37:08.421] List of future strategies:
[13:37:08.421] 1. sequential:
[13:37:08.421]    - args: function (..., envir = parent.frame())
[13:37:08.421]    - tweaked: FALSE
[13:37:08.421]    - call: NULL
[13:37:08.422] plan(): nbrOfWorkers() = 1
[13:37:08.424] plan(): Setting new future strategy stack:
[13:37:08.424] List of future strategies:
[13:37:08.424] 1. multicore:
[13:37:08.424]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:37:08.424]    - tweaked: FALSE
[13:37:08.424]    - call: plan(multicore)
[13:37:08.429] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 95e450d1-e7b8-6209-6c23-e4c8d06e1b18
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:37:08.430] result() for MulticoreFuture ...
[13:37:08.431] result() for MulticoreFuture ...
[13:37:08.431] result() for MulticoreFuture ... done
[13:37:08.431] result() for MulticoreFuture ... done
[13:37:08.431] result() for MulticoreFuture ...
[13:37:08.432] result() for MulticoreFuture ... done
[1] 0
*** multicore(..., globals = FALSE) with globals and blocking
 - Creating multicore future #1 ...
[13:37:08.436] getGlobalsAndPackages() ...
[13:37:08.436] Not searching for globals
[13:37:08.436] - globals: [0] <none>
[13:37:08.436] getGlobalsAndPackages() ... DONE
[13:37:08.436] Packages needed by the future expression (n = 0): <none>
[13:37:08.437] Packages needed by future strategies (n = 0): <none>
[13:37:08.437] {
[13:37:08.437]     {
[13:37:08.437]         {
[13:37:08.437]             ...future.startTime <- base::Sys.time()
[13:37:08.437]             {
[13:37:08.437]                 {
[13:37:08.437]                   {
[13:37:08.437]                     {
[13:37:08.437]                       base::local({
[13:37:08.437]                         has_future <- base::requireNamespace("future", 
[13:37:08.437]                           quietly = TRUE)
[13:37:08.437]                         if (has_future) {
[13:37:08.437]                           ns <- base::getNamespace("future")
[13:37:08.437]                           version <- ns[[".package"]][["version"]]
[13:37:08.437]                           if (is.null(version)) 
[13:37:08.437]                             version <- utils::packageVersion("future")
[13:37:08.437]                         }
[13:37:08.437]                         else {
[13:37:08.437]                           version <- NULL
[13:37:08.437]                         }
[13:37:08.437]                         if (!has_future || version < "1.8.0") {
[13:37:08.437]                           info <- base::c(r_version = base::gsub("R version ", 
[13:37:08.437]                             "", base::R.version$version.string), 
[13:37:08.437]                             platform = base::sprintf("%s (%s-bit)", 
[13:37:08.437]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:08.437]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:08.437]                               "release", "version")], collapse = " "), 
[13:37:08.437]                             hostname = base::Sys.info()[["nodename"]])
[13:37:08.437]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:37:08.437]                             info)
[13:37:08.437]                           info <- base::paste(info, collapse = "; ")
[13:37:08.437]                           if (!has_future) {
[13:37:08.437]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:08.437]                               info)
[13:37:08.437]                           }
[13:37:08.437]                           else {
[13:37:08.437]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:08.437]                               info, version)
[13:37:08.437]                           }
[13:37:08.437]                           base::stop(msg)
[13:37:08.437]                         }
[13:37:08.437]                       })
[13:37:08.437]                     }
[13:37:08.437]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:37:08.437]                     base::options(mc.cores = 1L)
[13:37:08.437]                   }
[13:37:08.437]                   ...future.strategy.old <- future::plan("list")
[13:37:08.437]                   options(future.plan = NULL)
[13:37:08.437]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.437]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:08.437]                 }
[13:37:08.437]                 ...future.workdir <- getwd()
[13:37:08.437]             }
[13:37:08.437]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:08.437]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:08.437]         }
[13:37:08.437]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:08.437]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:08.437]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:08.437]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:08.437]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:08.437]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:08.437]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:08.437]             base::names(...future.oldOptions))
[13:37:08.437]     }
[13:37:08.437]     if (FALSE) {
[13:37:08.437]     }
[13:37:08.437]     else {
[13:37:08.437]         if (TRUE) {
[13:37:08.437]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:08.437]                 open = "w")
[13:37:08.437]         }
[13:37:08.437]         else {
[13:37:08.437]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:08.437]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:08.437]         }
[13:37:08.437]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:08.437]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:08.437]             base::sink(type = "output", split = FALSE)
[13:37:08.437]             base::close(...future.stdout)
[13:37:08.437]         }, add = TRUE)
[13:37:08.437]     }
[13:37:08.437]     ...future.frame <- base::sys.nframe()
[13:37:08.437]     ...future.conditions <- base::list()
[13:37:08.437]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:08.437]     if (FALSE) {
[13:37:08.437]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:08.437]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:08.437]     }
[13:37:08.437]     ...future.result <- base::tryCatch({
[13:37:08.437]         base::withCallingHandlers({
[13:37:08.437]             ...future.value <- base::withVisible(base::local({
[13:37:08.437]                 withCallingHandlers({
[13:37:08.437]                   {
[13:37:08.437]                     ii
[13:37:08.437]                   }
[13:37:08.437]                 }, immediateCondition = function(cond) {
[13:37:08.437]                   save_rds <- function (object, pathname, ...) 
[13:37:08.437]                   {
[13:37:08.437]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:37:08.437]                     if (file_test("-f", pathname_tmp)) {
[13:37:08.437]                       fi_tmp <- file.info(pathname_tmp)
[13:37:08.437]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:37:08.437]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:08.437]                         fi_tmp[["mtime"]])
[13:37:08.437]                     }
[13:37:08.437]                     tryCatch({
[13:37:08.437]                       saveRDS(object, file = pathname_tmp, ...)
[13:37:08.437]                     }, error = function(ex) {
[13:37:08.437]                       msg <- conditionMessage(ex)
[13:37:08.437]                       fi_tmp <- file.info(pathname_tmp)
[13:37:08.437]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:37:08.437]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:08.437]                         fi_tmp[["mtime"]], msg)
[13:37:08.437]                       ex$message <- msg
[13:37:08.437]                       stop(ex)
[13:37:08.437]                     })
[13:37:08.437]                     stopifnot(file_test("-f", pathname_tmp))
[13:37:08.437]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:37:08.437]                     if (!res || file_test("-f", pathname_tmp)) {
[13:37:08.437]                       fi_tmp <- file.info(pathname_tmp)
[13:37:08.437]                       fi <- file.info(pathname)
[13:37:08.437]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:37:08.437]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:08.437]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:37:08.437]                         fi[["size"]], fi[["mtime"]])
[13:37:08.437]                       stop(msg)
[13:37:08.437]                     }
[13:37:08.437]                     invisible(pathname)
[13:37:08.437]                   }
[13:37:08.437]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:37:08.437]                     rootPath = tempdir()) 
[13:37:08.437]                   {
[13:37:08.437]                     obj <- list(time = Sys.time(), condition = cond)
[13:37:08.437]                     file <- tempfile(pattern = class(cond)[1], 
[13:37:08.437]                       tmpdir = path, fileext = ".rds")
[13:37:08.437]                     save_rds(obj, file)
[13:37:08.437]                   }
[13:37:08.437]                   saveImmediateCondition(cond, path = "/tmp/RtmptV9aIe/.future/immediateConditions")
[13:37:08.437]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.437]                   {
[13:37:08.437]                     inherits <- base::inherits
[13:37:08.437]                     invokeRestart <- base::invokeRestart
[13:37:08.437]                     is.null <- base::is.null
[13:37:08.437]                     muffled <- FALSE
[13:37:08.437]                     if (inherits(cond, "message")) {
[13:37:08.437]                       muffled <- grepl(pattern, "muffleMessage")
[13:37:08.437]                       if (muffled) 
[13:37:08.437]                         invokeRestart("muffleMessage")
[13:37:08.437]                     }
[13:37:08.437]                     else if (inherits(cond, "warning")) {
[13:37:08.437]                       muffled <- grepl(pattern, "muffleWarning")
[13:37:08.437]                       if (muffled) 
[13:37:08.437]                         invokeRestart("muffleWarning")
[13:37:08.437]                     }
[13:37:08.437]                     else if (inherits(cond, "condition")) {
[13:37:08.437]                       if (!is.null(pattern)) {
[13:37:08.437]                         computeRestarts <- base::computeRestarts
[13:37:08.437]                         grepl <- base::grepl
[13:37:08.437]                         restarts <- computeRestarts(cond)
[13:37:08.437]                         for (restart in restarts) {
[13:37:08.437]                           name <- restart$name
[13:37:08.437]                           if (is.null(name)) 
[13:37:08.437]                             next
[13:37:08.437]                           if (!grepl(pattern, name)) 
[13:37:08.437]                             next
[13:37:08.437]                           invokeRestart(restart)
[13:37:08.437]                           muffled <- TRUE
[13:37:08.437]                           break
[13:37:08.437]                         }
[13:37:08.437]                       }
[13:37:08.437]                     }
[13:37:08.437]                     invisible(muffled)
[13:37:08.437]                   }
[13:37:08.437]                   muffleCondition(cond)
[13:37:08.437]                 })
[13:37:08.437]             }))
[13:37:08.437]             future::FutureResult(value = ...future.value$value, 
[13:37:08.437]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.437]                   ...future.rng), globalenv = if (FALSE) 
[13:37:08.437]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:08.437]                     ...future.globalenv.names))
[13:37:08.437]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:08.437]         }, condition = base::local({
[13:37:08.437]             c <- base::c
[13:37:08.437]             inherits <- base::inherits
[13:37:08.437]             invokeRestart <- base::invokeRestart
[13:37:08.437]             length <- base::length
[13:37:08.437]             list <- base::list
[13:37:08.437]             seq.int <- base::seq.int
[13:37:08.437]             signalCondition <- base::signalCondition
[13:37:08.437]             sys.calls <- base::sys.calls
[13:37:08.437]             `[[` <- base::`[[`
[13:37:08.437]             `+` <- base::`+`
[13:37:08.437]             `<<-` <- base::`<<-`
[13:37:08.437]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:08.437]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:08.437]                   3L)]
[13:37:08.437]             }
[13:37:08.437]             function(cond) {
[13:37:08.437]                 is_error <- inherits(cond, "error")
[13:37:08.437]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:08.437]                   NULL)
[13:37:08.437]                 if (is_error) {
[13:37:08.437]                   sessionInformation <- function() {
[13:37:08.437]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:08.437]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:08.437]                       search = base::search(), system = base::Sys.info())
[13:37:08.437]                   }
[13:37:08.437]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.437]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:08.437]                     cond$call), session = sessionInformation(), 
[13:37:08.437]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:08.437]                   signalCondition(cond)
[13:37:08.437]                 }
[13:37:08.437]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:08.437]                 "immediateCondition"))) {
[13:37:08.437]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:08.437]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.437]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:08.437]                   if (TRUE && !signal) {
[13:37:08.437]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.437]                     {
[13:37:08.437]                       inherits <- base::inherits
[13:37:08.437]                       invokeRestart <- base::invokeRestart
[13:37:08.437]                       is.null <- base::is.null
[13:37:08.437]                       muffled <- FALSE
[13:37:08.437]                       if (inherits(cond, "message")) {
[13:37:08.437]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.437]                         if (muffled) 
[13:37:08.437]                           invokeRestart("muffleMessage")
[13:37:08.437]                       }
[13:37:08.437]                       else if (inherits(cond, "warning")) {
[13:37:08.437]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.437]                         if (muffled) 
[13:37:08.437]                           invokeRestart("muffleWarning")
[13:37:08.437]                       }
[13:37:08.437]                       else if (inherits(cond, "condition")) {
[13:37:08.437]                         if (!is.null(pattern)) {
[13:37:08.437]                           computeRestarts <- base::computeRestarts
[13:37:08.437]                           grepl <- base::grepl
[13:37:08.437]                           restarts <- computeRestarts(cond)
[13:37:08.437]                           for (restart in restarts) {
[13:37:08.437]                             name <- restart$name
[13:37:08.437]                             if (is.null(name)) 
[13:37:08.437]                               next
[13:37:08.437]                             if (!grepl(pattern, name)) 
[13:37:08.437]                               next
[13:37:08.437]                             invokeRestart(restart)
[13:37:08.437]                             muffled <- TRUE
[13:37:08.437]                             break
[13:37:08.437]                           }
[13:37:08.437]                         }
[13:37:08.437]                       }
[13:37:08.437]                       invisible(muffled)
[13:37:08.437]                     }
[13:37:08.437]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.437]                   }
[13:37:08.437]                 }
[13:37:08.437]                 else {
[13:37:08.437]                   if (TRUE) {
[13:37:08.437]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.437]                     {
[13:37:08.437]                       inherits <- base::inherits
[13:37:08.437]                       invokeRestart <- base::invokeRestart
[13:37:08.437]                       is.null <- base::is.null
[13:37:08.437]                       muffled <- FALSE
[13:37:08.437]                       if (inherits(cond, "message")) {
[13:37:08.437]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.437]                         if (muffled) 
[13:37:08.437]                           invokeRestart("muffleMessage")
[13:37:08.437]                       }
[13:37:08.437]                       else if (inherits(cond, "warning")) {
[13:37:08.437]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.437]                         if (muffled) 
[13:37:08.437]                           invokeRestart("muffleWarning")
[13:37:08.437]                       }
[13:37:08.437]                       else if (inherits(cond, "condition")) {
[13:37:08.437]                         if (!is.null(pattern)) {
[13:37:08.437]                           computeRestarts <- base::computeRestarts
[13:37:08.437]                           grepl <- base::grepl
[13:37:08.437]                           restarts <- computeRestarts(cond)
[13:37:08.437]                           for (restart in restarts) {
[13:37:08.437]                             name <- restart$name
[13:37:08.437]                             if (is.null(name)) 
[13:37:08.437]                               next
[13:37:08.437]                             if (!grepl(pattern, name)) 
[13:37:08.437]                               next
[13:37:08.437]                             invokeRestart(restart)
[13:37:08.437]                             muffled <- TRUE
[13:37:08.437]                             break
[13:37:08.437]                           }
[13:37:08.437]                         }
[13:37:08.437]                       }
[13:37:08.437]                       invisible(muffled)
[13:37:08.437]                     }
[13:37:08.437]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.437]                   }
[13:37:08.437]                 }
[13:37:08.437]             }
[13:37:08.437]         }))
[13:37:08.437]     }, error = function(ex) {
[13:37:08.437]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:08.437]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.437]                 ...future.rng), started = ...future.startTime, 
[13:37:08.437]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:08.437]             version = "1.8"), class = "FutureResult")
[13:37:08.437]     }, finally = {
[13:37:08.437]         if (!identical(...future.workdir, getwd())) 
[13:37:08.437]             setwd(...future.workdir)
[13:37:08.437]         {
[13:37:08.437]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:08.437]                 ...future.oldOptions$nwarnings <- NULL
[13:37:08.437]             }
[13:37:08.437]             base::options(...future.oldOptions)
[13:37:08.437]             if (.Platform$OS.type == "windows") {
[13:37:08.437]                 old_names <- names(...future.oldEnvVars)
[13:37:08.437]                 envs <- base::Sys.getenv()
[13:37:08.437]                 names <- names(envs)
[13:37:08.437]                 common <- intersect(names, old_names)
[13:37:08.437]                 added <- setdiff(names, old_names)
[13:37:08.437]                 removed <- setdiff(old_names, names)
[13:37:08.437]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:08.437]                   envs[common]]
[13:37:08.437]                 NAMES <- toupper(changed)
[13:37:08.437]                 args <- list()
[13:37:08.437]                 for (kk in seq_along(NAMES)) {
[13:37:08.437]                   name <- changed[[kk]]
[13:37:08.437]                   NAME <- NAMES[[kk]]
[13:37:08.437]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.437]                     next
[13:37:08.437]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.437]                 }
[13:37:08.437]                 NAMES <- toupper(added)
[13:37:08.437]                 for (kk in seq_along(NAMES)) {
[13:37:08.437]                   name <- added[[kk]]
[13:37:08.437]                   NAME <- NAMES[[kk]]
[13:37:08.437]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.437]                     next
[13:37:08.437]                   args[[name]] <- ""
[13:37:08.437]                 }
[13:37:08.437]                 NAMES <- toupper(removed)
[13:37:08.437]                 for (kk in seq_along(NAMES)) {
[13:37:08.437]                   name <- removed[[kk]]
[13:37:08.437]                   NAME <- NAMES[[kk]]
[13:37:08.437]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.437]                     next
[13:37:08.437]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.437]                 }
[13:37:08.437]                 if (length(args) > 0) 
[13:37:08.437]                   base::do.call(base::Sys.setenv, args = args)
[13:37:08.437]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:08.437]             }
[13:37:08.437]             else {
[13:37:08.437]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:08.437]             }
[13:37:08.437]             {
[13:37:08.437]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:08.437]                   0L) {
[13:37:08.437]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:08.437]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:08.437]                   base::options(opts)
[13:37:08.437]                 }
[13:37:08.437]                 {
[13:37:08.437]                   {
[13:37:08.437]                     base::options(mc.cores = ...future.mc.cores.old)
[13:37:08.437]                     NULL
[13:37:08.437]                   }
[13:37:08.437]                   options(future.plan = NULL)
[13:37:08.437]                   if (is.na(NA_character_)) 
[13:37:08.437]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.437]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:08.437]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:08.437]                     .init = FALSE)
[13:37:08.437]                 }
[13:37:08.437]             }
[13:37:08.437]         }
[13:37:08.437]     })
[13:37:08.437]     if (TRUE) {
[13:37:08.437]         base::sink(type = "output", split = FALSE)
[13:37:08.437]         if (TRUE) {
[13:37:08.437]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:08.437]         }
[13:37:08.437]         else {
[13:37:08.437]             ...future.result["stdout"] <- base::list(NULL)
[13:37:08.437]         }
[13:37:08.437]         base::close(...future.stdout)
[13:37:08.437]         ...future.stdout <- NULL
[13:37:08.437]     }
[13:37:08.437]     ...future.result$conditions <- ...future.conditions
[13:37:08.437]     ...future.result$finished <- base::Sys.time()
[13:37:08.437]     ...future.result
[13:37:08.437] }
[13:37:08.440] requestCore(): workers = 2
[13:37:08.441] MulticoreFuture started
 - Creating multicore future #2 ...
[13:37:08.443] plan(): Setting new future strategy stack:
[13:37:08.443] List of future strategies:
[13:37:08.443] 1. sequential:
[13:37:08.443]    - args: function (..., envir = parent.frame())
[13:37:08.443]    - tweaked: FALSE
[13:37:08.443]    - call: NULL
[13:37:08.444] plan(): nbrOfWorkers() = 1
[13:37:08.445] plan(): Setting new future strategy stack:
[13:37:08.446] List of future strategies:
[13:37:08.446] 1. multicore:
[13:37:08.446]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:37:08.446]    - tweaked: FALSE
[13:37:08.446]    - call: plan(multicore)
[13:37:08.447] getGlobalsAndPackages() ...
[13:37:08.447] Not searching for globals
[13:37:08.447] - globals: [0] <none>
[13:37:08.447] getGlobalsAndPackages() ... DONE
[13:37:08.448] Packages needed by the future expression (n = 0): <none>
[13:37:08.448] Packages needed by future strategies (n = 0): <none>
[13:37:08.450] plan(): nbrOfWorkers() = 2
[13:37:08.449] {
[13:37:08.449]     {
[13:37:08.449]         {
[13:37:08.449]             ...future.startTime <- base::Sys.time()
[13:37:08.449]             {
[13:37:08.449]                 {
[13:37:08.449]                   {
[13:37:08.449]                     {
[13:37:08.449]                       base::local({
[13:37:08.449]                         has_future <- base::requireNamespace("future", 
[13:37:08.449]                           quietly = TRUE)
[13:37:08.449]                         if (has_future) {
[13:37:08.449]                           ns <- base::getNamespace("future")
[13:37:08.449]                           version <- ns[[".package"]][["version"]]
[13:37:08.449]                           if (is.null(version)) 
[13:37:08.449]                             version <- utils::packageVersion("future")
[13:37:08.449]                         }
[13:37:08.449]                         else {
[13:37:08.449]                           version <- NULL
[13:37:08.449]                         }
[13:37:08.449]                         if (!has_future || version < "1.8.0") {
[13:37:08.449]                           info <- base::c(r_version = base::gsub("R version ", 
[13:37:08.449]                             "", base::R.version$version.string), 
[13:37:08.449]                             platform = base::sprintf("%s (%s-bit)", 
[13:37:08.449]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:08.449]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:08.449]                               "release", "version")], collapse = " "), 
[13:37:08.449]                             hostname = base::Sys.info()[["nodename"]])
[13:37:08.449]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:37:08.449]                             info)
[13:37:08.449]                           info <- base::paste(info, collapse = "; ")
[13:37:08.449]                           if (!has_future) {
[13:37:08.449]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:08.449]                               info)
[13:37:08.449]                           }
[13:37:08.449]                           else {
[13:37:08.449]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:08.449]                               info, version)
[13:37:08.449]                           }
[13:37:08.449]                           base::stop(msg)
[13:37:08.449]                         }
[13:37:08.449]                       })
[13:37:08.449]                     }
[13:37:08.449]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:37:08.449]                     base::options(mc.cores = 1L)
[13:37:08.449]                   }
[13:37:08.449]                   ...future.strategy.old <- future::plan("list")
[13:37:08.449]                   options(future.plan = NULL)
[13:37:08.449]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.449]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:08.449]                 }
[13:37:08.449]                 ...future.workdir <- getwd()
[13:37:08.449]             }
[13:37:08.449]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:08.449]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:08.449]         }
[13:37:08.449]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:08.449]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:08.449]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:08.449]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:08.449]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:08.449]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:08.449]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:08.449]             base::names(...future.oldOptions))
[13:37:08.449]     }
[13:37:08.449]     if (FALSE) {
[13:37:08.449]     }
[13:37:08.449]     else {
[13:37:08.449]         if (TRUE) {
[13:37:08.449]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:08.449]                 open = "w")
[13:37:08.449]         }
[13:37:08.449]         else {
[13:37:08.449]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:08.449]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:08.449]         }
[13:37:08.449]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:08.449]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:08.449]             base::sink(type = "output", split = FALSE)
[13:37:08.449]             base::close(...future.stdout)
[13:37:08.449]         }, add = TRUE)
[13:37:08.449]     }
[13:37:08.449]     ...future.frame <- base::sys.nframe()
[13:37:08.449]     ...future.conditions <- base::list()
[13:37:08.449]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:08.449]     if (FALSE) {
[13:37:08.449]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:08.449]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:08.449]     }
[13:37:08.449]     ...future.result <- base::tryCatch({
[13:37:08.449]         base::withCallingHandlers({
[13:37:08.449]             ...future.value <- base::withVisible(base::local({
[13:37:08.449]                 withCallingHandlers({
[13:37:08.449]                   {
[13:37:08.449]                     ii
[13:37:08.449]                   }
[13:37:08.449]                 }, immediateCondition = function(cond) {
[13:37:08.449]                   save_rds <- function (object, pathname, ...) 
[13:37:08.449]                   {
[13:37:08.449]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:37:08.449]                     if (file_test("-f", pathname_tmp)) {
[13:37:08.449]                       fi_tmp <- file.info(pathname_tmp)
[13:37:08.449]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:37:08.449]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:08.449]                         fi_tmp[["mtime"]])
[13:37:08.449]                     }
[13:37:08.449]                     tryCatch({
[13:37:08.449]                       saveRDS(object, file = pathname_tmp, ...)
[13:37:08.449]                     }, error = function(ex) {
[13:37:08.449]                       msg <- conditionMessage(ex)
[13:37:08.449]                       fi_tmp <- file.info(pathname_tmp)
[13:37:08.449]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:37:08.449]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:08.449]                         fi_tmp[["mtime"]], msg)
[13:37:08.449]                       ex$message <- msg
[13:37:08.449]                       stop(ex)
[13:37:08.449]                     })
[13:37:08.449]                     stopifnot(file_test("-f", pathname_tmp))
[13:37:08.449]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:37:08.449]                     if (!res || file_test("-f", pathname_tmp)) {
[13:37:08.449]                       fi_tmp <- file.info(pathname_tmp)
[13:37:08.449]                       fi <- file.info(pathname)
[13:37:08.449]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:37:08.449]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:08.449]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:37:08.449]                         fi[["size"]], fi[["mtime"]])
[13:37:08.449]                       stop(msg)
[13:37:08.449]                     }
[13:37:08.449]                     invisible(pathname)
[13:37:08.449]                   }
[13:37:08.449]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:37:08.449]                     rootPath = tempdir()) 
[13:37:08.449]                   {
[13:37:08.449]                     obj <- list(time = Sys.time(), condition = cond)
[13:37:08.449]                     file <- tempfile(pattern = class(cond)[1], 
[13:37:08.449]                       tmpdir = path, fileext = ".rds")
[13:37:08.449]                     save_rds(obj, file)
[13:37:08.449]                   }
[13:37:08.449]                   saveImmediateCondition(cond, path = "/tmp/RtmptV9aIe/.future/immediateConditions")
[13:37:08.449]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.449]                   {
[13:37:08.449]                     inherits <- base::inherits
[13:37:08.449]                     invokeRestart <- base::invokeRestart
[13:37:08.449]                     is.null <- base::is.null
[13:37:08.449]                     muffled <- FALSE
[13:37:08.449]                     if (inherits(cond, "message")) {
[13:37:08.449]                       muffled <- grepl(pattern, "muffleMessage")
[13:37:08.449]                       if (muffled) 
[13:37:08.449]                         invokeRestart("muffleMessage")
[13:37:08.449]                     }
[13:37:08.449]                     else if (inherits(cond, "warning")) {
[13:37:08.449]                       muffled <- grepl(pattern, "muffleWarning")
[13:37:08.449]                       if (muffled) 
[13:37:08.449]                         invokeRestart("muffleWarning")
[13:37:08.449]                     }
[13:37:08.449]                     else if (inherits(cond, "condition")) {
[13:37:08.449]                       if (!is.null(pattern)) {
[13:37:08.449]                         computeRestarts <- base::computeRestarts
[13:37:08.449]                         grepl <- base::grepl
[13:37:08.449]                         restarts <- computeRestarts(cond)
[13:37:08.449]                         for (restart in restarts) {
[13:37:08.449]                           name <- restart$name
[13:37:08.449]                           if (is.null(name)) 
[13:37:08.449]                             next
[13:37:08.449]                           if (!grepl(pattern, name)) 
[13:37:08.449]                             next
[13:37:08.449]                           invokeRestart(restart)
[13:37:08.449]                           muffled <- TRUE
[13:37:08.449]                           break
[13:37:08.449]                         }
[13:37:08.449]                       }
[13:37:08.449]                     }
[13:37:08.449]                     invisible(muffled)
[13:37:08.449]                   }
[13:37:08.449]                   muffleCondition(cond)
[13:37:08.449]                 })
[13:37:08.449]             }))
[13:37:08.449]             future::FutureResult(value = ...future.value$value, 
[13:37:08.449]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.449]                   ...future.rng), globalenv = if (FALSE) 
[13:37:08.449]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:08.449]                     ...future.globalenv.names))
[13:37:08.449]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:08.449]         }, condition = base::local({
[13:37:08.449]             c <- base::c
[13:37:08.449]             inherits <- base::inherits
[13:37:08.449]             invokeRestart <- base::invokeRestart
[13:37:08.449]             length <- base::length
[13:37:08.449]             list <- base::list
[13:37:08.449]             seq.int <- base::seq.int
[13:37:08.449]             signalCondition <- base::signalCondition
[13:37:08.449]             sys.calls <- base::sys.calls
[13:37:08.449]             `[[` <- base::`[[`
[13:37:08.449]             `+` <- base::`+`
[13:37:08.449]             `<<-` <- base::`<<-`
[13:37:08.449]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:08.449]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:08.449]                   3L)]
[13:37:08.449]             }
[13:37:08.449]             function(cond) {
[13:37:08.449]                 is_error <- inherits(cond, "error")
[13:37:08.449]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:08.449]                   NULL)
[13:37:08.449]                 if (is_error) {
[13:37:08.449]                   sessionInformation <- function() {
[13:37:08.449]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:08.449]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:08.449]                       search = base::search(), system = base::Sys.info())
[13:37:08.449]                   }
[13:37:08.449]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.449]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:08.449]                     cond$call), session = sessionInformation(), 
[13:37:08.449]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:08.449]                   signalCondition(cond)
[13:37:08.449]                 }
[13:37:08.449]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:08.449]                 "immediateCondition"))) {
[13:37:08.449]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:08.449]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.449]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:08.449]                   if (TRUE && !signal) {
[13:37:08.449]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.449]                     {
[13:37:08.449]                       inherits <- base::inherits
[13:37:08.449]                       invokeRestart <- base::invokeRestart
[13:37:08.449]                       is.null <- base::is.null
[13:37:08.449]                       muffled <- FALSE
[13:37:08.449]                       if (inherits(cond, "message")) {
[13:37:08.449]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.449]                         if (muffled) 
[13:37:08.449]                           invokeRestart("muffleMessage")
[13:37:08.449]                       }
[13:37:08.449]                       else if (inherits(cond, "warning")) {
[13:37:08.449]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.449]                         if (muffled) 
[13:37:08.449]                           invokeRestart("muffleWarning")
[13:37:08.449]                       }
[13:37:08.449]                       else if (inherits(cond, "condition")) {
[13:37:08.449]                         if (!is.null(pattern)) {
[13:37:08.449]                           computeRestarts <- base::computeRestarts
[13:37:08.449]                           grepl <- base::grepl
[13:37:08.449]                           restarts <- computeRestarts(cond)
[13:37:08.449]                           for (restart in restarts) {
[13:37:08.449]                             name <- restart$name
[13:37:08.449]                             if (is.null(name)) 
[13:37:08.449]                               next
[13:37:08.449]                             if (!grepl(pattern, name)) 
[13:37:08.449]                               next
[13:37:08.449]                             invokeRestart(restart)
[13:37:08.449]                             muffled <- TRUE
[13:37:08.449]                             break
[13:37:08.449]                           }
[13:37:08.449]                         }
[13:37:08.449]                       }
[13:37:08.449]                       invisible(muffled)
[13:37:08.449]                     }
[13:37:08.449]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.449]                   }
[13:37:08.449]                 }
[13:37:08.449]                 else {
[13:37:08.449]                   if (TRUE) {
[13:37:08.449]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.449]                     {
[13:37:08.449]                       inherits <- base::inherits
[13:37:08.449]                       invokeRestart <- base::invokeRestart
[13:37:08.449]                       is.null <- base::is.null
[13:37:08.449]                       muffled <- FALSE
[13:37:08.449]                       if (inherits(cond, "message")) {
[13:37:08.449]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.449]                         if (muffled) 
[13:37:08.449]                           invokeRestart("muffleMessage")
[13:37:08.449]                       }
[13:37:08.449]                       else if (inherits(cond, "warning")) {
[13:37:08.449]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.449]                         if (muffled) 
[13:37:08.449]                           invokeRestart("muffleWarning")
[13:37:08.449]                       }
[13:37:08.449]                       else if (inherits(cond, "condition")) {
[13:37:08.449]                         if (!is.null(pattern)) {
[13:37:08.449]                           computeRestarts <- base::computeRestarts
[13:37:08.449]                           grepl <- base::grepl
[13:37:08.449]                           restarts <- computeRestarts(cond)
[13:37:08.449]                           for (restart in restarts) {
[13:37:08.449]                             name <- restart$name
[13:37:08.449]                             if (is.null(name)) 
[13:37:08.449]                               next
[13:37:08.449]                             if (!grepl(pattern, name)) 
[13:37:08.449]                               next
[13:37:08.449]                             invokeRestart(restart)
[13:37:08.449]                             muffled <- TRUE
[13:37:08.449]                             break
[13:37:08.449]                           }
[13:37:08.449]                         }
[13:37:08.449]                       }
[13:37:08.449]                       invisible(muffled)
[13:37:08.449]                     }
[13:37:08.449]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.449]                   }
[13:37:08.449]                 }
[13:37:08.449]             }
[13:37:08.449]         }))
[13:37:08.449]     }, error = function(ex) {
[13:37:08.449]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:08.449]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.449]                 ...future.rng), started = ...future.startTime, 
[13:37:08.449]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:08.449]             version = "1.8"), class = "FutureResult")
[13:37:08.449]     }, finally = {
[13:37:08.449]         if (!identical(...future.workdir, getwd())) 
[13:37:08.449]             setwd(...future.workdir)
[13:37:08.449]         {
[13:37:08.449]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:08.449]                 ...future.oldOptions$nwarnings <- NULL
[13:37:08.449]             }
[13:37:08.449]             base::options(...future.oldOptions)
[13:37:08.449]             if (.Platform$OS.type == "windows") {
[13:37:08.449]                 old_names <- names(...future.oldEnvVars)
[13:37:08.449]                 envs <- base::Sys.getenv()
[13:37:08.449]                 names <- names(envs)
[13:37:08.449]                 common <- intersect(names, old_names)
[13:37:08.449]                 added <- setdiff(names, old_names)
[13:37:08.449]                 removed <- setdiff(old_names, names)
[13:37:08.449]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:08.449]                   envs[common]]
[13:37:08.449]                 NAMES <- toupper(changed)
[13:37:08.449]                 args <- list()
[13:37:08.449]                 for (kk in seq_along(NAMES)) {
[13:37:08.449]                   name <- changed[[kk]]
[13:37:08.449]                   NAME <- NAMES[[kk]]
[13:37:08.449]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.449]                     next
[13:37:08.449]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.449]                 }
[13:37:08.449]                 NAMES <- toupper(added)
[13:37:08.449]                 for (kk in seq_along(NAMES)) {
[13:37:08.449]                   name <- added[[kk]]
[13:37:08.449]                   NAME <- NAMES[[kk]]
[13:37:08.449]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.449]                     next
[13:37:08.449]                   args[[name]] <- ""
[13:37:08.449]                 }
[13:37:08.449]                 NAMES <- toupper(removed)
[13:37:08.449]                 for (kk in seq_along(NAMES)) {
[13:37:08.449]                   name <- removed[[kk]]
[13:37:08.449]                   NAME <- NAMES[[kk]]
[13:37:08.449]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.449]                     next
[13:37:08.449]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.449]                 }
[13:37:08.449]                 if (length(args) > 0) 
[13:37:08.449]                   base::do.call(base::Sys.setenv, args = args)
[13:37:08.449]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:08.449]             }
[13:37:08.449]             else {
[13:37:08.449]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:08.449]             }
[13:37:08.449]             {
[13:37:08.449]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:08.449]                   0L) {
[13:37:08.449]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:08.449]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:08.449]                   base::options(opts)
[13:37:08.449]                 }
[13:37:08.449]                 {
[13:37:08.449]                   {
[13:37:08.449]                     base::options(mc.cores = ...future.mc.cores.old)
[13:37:08.449]                     NULL
[13:37:08.449]                   }
[13:37:08.449]                   options(future.plan = NULL)
[13:37:08.449]                   if (is.na(NA_character_)) 
[13:37:08.449]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.449]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:08.449]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:08.449]                     .init = FALSE)
[13:37:08.449]                 }
[13:37:08.449]             }
[13:37:08.449]         }
[13:37:08.449]     })
[13:37:08.449]     if (TRUE) {
[13:37:08.449]         base::sink(type = "output", split = FALSE)
[13:37:08.449]         if (TRUE) {
[13:37:08.449]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:08.449]         }
[13:37:08.449]         else {
[13:37:08.449]             ...future.result["stdout"] <- base::list(NULL)
[13:37:08.449]         }
[13:37:08.449]         base::close(...future.stdout)
[13:37:08.449]         ...future.stdout <- NULL
[13:37:08.449]     }
[13:37:08.449]     ...future.result$conditions <- ...future.conditions
[13:37:08.449]     ...future.result$finished <- base::Sys.time()
[13:37:08.449]     ...future.result
[13:37:08.449] }
[13:37:08.452] requestCore(): workers = 2
[13:37:08.454] MulticoreFuture started
 - Creating multicore future #3 ...
[13:37:08.455] plan(): Setting new future strategy stack:
[13:37:08.455] List of future strategies:
[13:37:08.455] 1. sequential:
[13:37:08.455]    - args: function (..., envir = parent.frame())
[13:37:08.455]    - tweaked: FALSE
[13:37:08.455]    - call: NULL
[13:37:08.456] plan(): nbrOfWorkers() = 1
[13:37:08.458] plan(): Setting new future strategy stack:
[13:37:08.458] List of future strategies:
[13:37:08.458] 1. multicore:
[13:37:08.458]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:37:08.458]    - tweaked: FALSE
[13:37:08.458]    - call: plan(multicore)
[13:37:08.459] getGlobalsAndPackages() ...
[13:37:08.459] Not searching for globals
[13:37:08.460] - globals: [0] <none>
[13:37:08.460] getGlobalsAndPackages() ... DONE
[13:37:08.461] Packages needed by the future expression (n = 0): <none>
[13:37:08.461] Packages needed by future strategies (n = 0): <none>
[13:37:08.462] plan(): nbrOfWorkers() = 2
[13:37:08.461] {
[13:37:08.461]     {
[13:37:08.461]         {
[13:37:08.461]             ...future.startTime <- base::Sys.time()
[13:37:08.461]             {
[13:37:08.461]                 {
[13:37:08.461]                   {
[13:37:08.461]                     {
[13:37:08.461]                       base::local({
[13:37:08.461]                         has_future <- base::requireNamespace("future", 
[13:37:08.461]                           quietly = TRUE)
[13:37:08.461]                         if (has_future) {
[13:37:08.461]                           ns <- base::getNamespace("future")
[13:37:08.461]                           version <- ns[[".package"]][["version"]]
[13:37:08.461]                           if (is.null(version)) 
[13:37:08.461]                             version <- utils::packageVersion("future")
[13:37:08.461]                         }
[13:37:08.461]                         else {
[13:37:08.461]                           version <- NULL
[13:37:08.461]                         }
[13:37:08.461]                         if (!has_future || version < "1.8.0") {
[13:37:08.461]                           info <- base::c(r_version = base::gsub("R version ", 
[13:37:08.461]                             "", base::R.version$version.string), 
[13:37:08.461]                             platform = base::sprintf("%s (%s-bit)", 
[13:37:08.461]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:08.461]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:08.461]                               "release", "version")], collapse = " "), 
[13:37:08.461]                             hostname = base::Sys.info()[["nodename"]])
[13:37:08.461]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:37:08.461]                             info)
[13:37:08.461]                           info <- base::paste(info, collapse = "; ")
[13:37:08.461]                           if (!has_future) {
[13:37:08.461]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:08.461]                               info)
[13:37:08.461]                           }
[13:37:08.461]                           else {
[13:37:08.461]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:08.461]                               info, version)
[13:37:08.461]                           }
[13:37:08.461]                           base::stop(msg)
[13:37:08.461]                         }
[13:37:08.461]                       })
[13:37:08.461]                     }
[13:37:08.461]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:37:08.461]                     base::options(mc.cores = 1L)
[13:37:08.461]                   }
[13:37:08.461]                   ...future.strategy.old <- future::plan("list")
[13:37:08.461]                   options(future.plan = NULL)
[13:37:08.461]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.461]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:08.461]                 }
[13:37:08.461]                 ...future.workdir <- getwd()
[13:37:08.461]             }
[13:37:08.461]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:08.461]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:08.461]         }
[13:37:08.461]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:08.461]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:08.461]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:08.461]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:08.461]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:08.461]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:08.461]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:08.461]             base::names(...future.oldOptions))
[13:37:08.461]     }
[13:37:08.461]     if (FALSE) {
[13:37:08.461]     }
[13:37:08.461]     else {
[13:37:08.461]         if (TRUE) {
[13:37:08.461]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:08.461]                 open = "w")
[13:37:08.461]         }
[13:37:08.461]         else {
[13:37:08.461]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:08.461]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:08.461]         }
[13:37:08.461]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:08.461]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:08.461]             base::sink(type = "output", split = FALSE)
[13:37:08.461]             base::close(...future.stdout)
[13:37:08.461]         }, add = TRUE)
[13:37:08.461]     }
[13:37:08.461]     ...future.frame <- base::sys.nframe()
[13:37:08.461]     ...future.conditions <- base::list()
[13:37:08.461]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:08.461]     if (FALSE) {
[13:37:08.461]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:08.461]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:08.461]     }
[13:37:08.461]     ...future.result <- base::tryCatch({
[13:37:08.461]         base::withCallingHandlers({
[13:37:08.461]             ...future.value <- base::withVisible(base::local({
[13:37:08.461]                 withCallingHandlers({
[13:37:08.461]                   {
[13:37:08.461]                     ii
[13:37:08.461]                   }
[13:37:08.461]                 }, immediateCondition = function(cond) {
[13:37:08.461]                   save_rds <- function (object, pathname, ...) 
[13:37:08.461]                   {
[13:37:08.461]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:37:08.461]                     if (file_test("-f", pathname_tmp)) {
[13:37:08.461]                       fi_tmp <- file.info(pathname_tmp)
[13:37:08.461]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:37:08.461]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:08.461]                         fi_tmp[["mtime"]])
[13:37:08.461]                     }
[13:37:08.461]                     tryCatch({
[13:37:08.461]                       saveRDS(object, file = pathname_tmp, ...)
[13:37:08.461]                     }, error = function(ex) {
[13:37:08.461]                       msg <- conditionMessage(ex)
[13:37:08.461]                       fi_tmp <- file.info(pathname_tmp)
[13:37:08.461]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:37:08.461]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:08.461]                         fi_tmp[["mtime"]], msg)
[13:37:08.461]                       ex$message <- msg
[13:37:08.461]                       stop(ex)
[13:37:08.461]                     })
[13:37:08.461]                     stopifnot(file_test("-f", pathname_tmp))
[13:37:08.461]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:37:08.461]                     if (!res || file_test("-f", pathname_tmp)) {
[13:37:08.461]                       fi_tmp <- file.info(pathname_tmp)
[13:37:08.461]                       fi <- file.info(pathname)
[13:37:08.461]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:37:08.461]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:08.461]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:37:08.461]                         fi[["size"]], fi[["mtime"]])
[13:37:08.461]                       stop(msg)
[13:37:08.461]                     }
[13:37:08.461]                     invisible(pathname)
[13:37:08.461]                   }
[13:37:08.461]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:37:08.461]                     rootPath = tempdir()) 
[13:37:08.461]                   {
[13:37:08.461]                     obj <- list(time = Sys.time(), condition = cond)
[13:37:08.461]                     file <- tempfile(pattern = class(cond)[1], 
[13:37:08.461]                       tmpdir = path, fileext = ".rds")
[13:37:08.461]                     save_rds(obj, file)
[13:37:08.461]                   }
[13:37:08.461]                   saveImmediateCondition(cond, path = "/tmp/RtmptV9aIe/.future/immediateConditions")
[13:37:08.461]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.461]                   {
[13:37:08.461]                     inherits <- base::inherits
[13:37:08.461]                     invokeRestart <- base::invokeRestart
[13:37:08.461]                     is.null <- base::is.null
[13:37:08.461]                     muffled <- FALSE
[13:37:08.461]                     if (inherits(cond, "message")) {
[13:37:08.461]                       muffled <- grepl(pattern, "muffleMessage")
[13:37:08.461]                       if (muffled) 
[13:37:08.461]                         invokeRestart("muffleMessage")
[13:37:08.461]                     }
[13:37:08.461]                     else if (inherits(cond, "warning")) {
[13:37:08.461]                       muffled <- grepl(pattern, "muffleWarning")
[13:37:08.461]                       if (muffled) 
[13:37:08.461]                         invokeRestart("muffleWarning")
[13:37:08.461]                     }
[13:37:08.461]                     else if (inherits(cond, "condition")) {
[13:37:08.461]                       if (!is.null(pattern)) {
[13:37:08.461]                         computeRestarts <- base::computeRestarts
[13:37:08.461]                         grepl <- base::grepl
[13:37:08.461]                         restarts <- computeRestarts(cond)
[13:37:08.461]                         for (restart in restarts) {
[13:37:08.461]                           name <- restart$name
[13:37:08.461]                           if (is.null(name)) 
[13:37:08.461]                             next
[13:37:08.461]                           if (!grepl(pattern, name)) 
[13:37:08.461]                             next
[13:37:08.461]                           invokeRestart(restart)
[13:37:08.461]                           muffled <- TRUE
[13:37:08.461]                           break
[13:37:08.461]                         }
[13:37:08.461]                       }
[13:37:08.461]                     }
[13:37:08.461]                     invisible(muffled)
[13:37:08.461]                   }
[13:37:08.461]                   muffleCondition(cond)
[13:37:08.461]                 })
[13:37:08.461]             }))
[13:37:08.461]             future::FutureResult(value = ...future.value$value, 
[13:37:08.461]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.461]                   ...future.rng), globalenv = if (FALSE) 
[13:37:08.461]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:08.461]                     ...future.globalenv.names))
[13:37:08.461]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:08.461]         }, condition = base::local({
[13:37:08.461]             c <- base::c
[13:37:08.461]             inherits <- base::inherits
[13:37:08.461]             invokeRestart <- base::invokeRestart
[13:37:08.461]             length <- base::length
[13:37:08.461]             list <- base::list
[13:37:08.461]             seq.int <- base::seq.int
[13:37:08.461]             signalCondition <- base::signalCondition
[13:37:08.461]             sys.calls <- base::sys.calls
[13:37:08.461]             `[[` <- base::`[[`
[13:37:08.461]             `+` <- base::`+`
[13:37:08.461]             `<<-` <- base::`<<-`
[13:37:08.461]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:08.461]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:08.461]                   3L)]
[13:37:08.461]             }
[13:37:08.461]             function(cond) {
[13:37:08.461]                 is_error <- inherits(cond, "error")
[13:37:08.461]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:08.461]                   NULL)
[13:37:08.461]                 if (is_error) {
[13:37:08.461]                   sessionInformation <- function() {
[13:37:08.461]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:08.461]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:08.461]                       search = base::search(), system = base::Sys.info())
[13:37:08.461]                   }
[13:37:08.461]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.461]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:08.461]                     cond$call), session = sessionInformation(), 
[13:37:08.461]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:08.461]                   signalCondition(cond)
[13:37:08.461]                 }
[13:37:08.461]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:08.461]                 "immediateCondition"))) {
[13:37:08.461]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:08.461]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.461]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:08.461]                   if (TRUE && !signal) {
[13:37:08.461]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.461]                     {
[13:37:08.461]                       inherits <- base::inherits
[13:37:08.461]                       invokeRestart <- base::invokeRestart
[13:37:08.461]                       is.null <- base::is.null
[13:37:08.461]                       muffled <- FALSE
[13:37:08.461]                       if (inherits(cond, "message")) {
[13:37:08.461]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.461]                         if (muffled) 
[13:37:08.461]                           invokeRestart("muffleMessage")
[13:37:08.461]                       }
[13:37:08.461]                       else if (inherits(cond, "warning")) {
[13:37:08.461]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.461]                         if (muffled) 
[13:37:08.461]                           invokeRestart("muffleWarning")
[13:37:08.461]                       }
[13:37:08.461]                       else if (inherits(cond, "condition")) {
[13:37:08.461]                         if (!is.null(pattern)) {
[13:37:08.461]                           computeRestarts <- base::computeRestarts
[13:37:08.461]                           grepl <- base::grepl
[13:37:08.461]                           restarts <- computeRestarts(cond)
[13:37:08.461]                           for (restart in restarts) {
[13:37:08.461]                             name <- restart$name
[13:37:08.461]                             if (is.null(name)) 
[13:37:08.461]                               next
[13:37:08.461]                             if (!grepl(pattern, name)) 
[13:37:08.461]                               next
[13:37:08.461]                             invokeRestart(restart)
[13:37:08.461]                             muffled <- TRUE
[13:37:08.461]                             break
[13:37:08.461]                           }
[13:37:08.461]                         }
[13:37:08.461]                       }
[13:37:08.461]                       invisible(muffled)
[13:37:08.461]                     }
[13:37:08.461]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.461]                   }
[13:37:08.461]                 }
[13:37:08.461]                 else {
[13:37:08.461]                   if (TRUE) {
[13:37:08.461]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.461]                     {
[13:37:08.461]                       inherits <- base::inherits
[13:37:08.461]                       invokeRestart <- base::invokeRestart
[13:37:08.461]                       is.null <- base::is.null
[13:37:08.461]                       muffled <- FALSE
[13:37:08.461]                       if (inherits(cond, "message")) {
[13:37:08.461]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.461]                         if (muffled) 
[13:37:08.461]                           invokeRestart("muffleMessage")
[13:37:08.461]                       }
[13:37:08.461]                       else if (inherits(cond, "warning")) {
[13:37:08.461]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.461]                         if (muffled) 
[13:37:08.461]                           invokeRestart("muffleWarning")
[13:37:08.461]                       }
[13:37:08.461]                       else if (inherits(cond, "condition")) {
[13:37:08.461]                         if (!is.null(pattern)) {
[13:37:08.461]                           computeRestarts <- base::computeRestarts
[13:37:08.461]                           grepl <- base::grepl
[13:37:08.461]                           restarts <- computeRestarts(cond)
[13:37:08.461]                           for (restart in restarts) {
[13:37:08.461]                             name <- restart$name
[13:37:08.461]                             if (is.null(name)) 
[13:37:08.461]                               next
[13:37:08.461]                             if (!grepl(pattern, name)) 
[13:37:08.461]                               next
[13:37:08.461]                             invokeRestart(restart)
[13:37:08.461]                             muffled <- TRUE
[13:37:08.461]                             break
[13:37:08.461]                           }
[13:37:08.461]                         }
[13:37:08.461]                       }
[13:37:08.461]                       invisible(muffled)
[13:37:08.461]                     }
[13:37:08.461]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.461]                   }
[13:37:08.461]                 }
[13:37:08.461]             }
[13:37:08.461]         }))
[13:37:08.461]     }, error = function(ex) {
[13:37:08.461]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:08.461]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.461]                 ...future.rng), started = ...future.startTime, 
[13:37:08.461]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:08.461]             version = "1.8"), class = "FutureResult")
[13:37:08.461]     }, finally = {
[13:37:08.461]         if (!identical(...future.workdir, getwd())) 
[13:37:08.461]             setwd(...future.workdir)
[13:37:08.461]         {
[13:37:08.461]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:08.461]                 ...future.oldOptions$nwarnings <- NULL
[13:37:08.461]             }
[13:37:08.461]             base::options(...future.oldOptions)
[13:37:08.461]             if (.Platform$OS.type == "windows") {
[13:37:08.461]                 old_names <- names(...future.oldEnvVars)
[13:37:08.461]                 envs <- base::Sys.getenv()
[13:37:08.461]                 names <- names(envs)
[13:37:08.461]                 common <- intersect(names, old_names)
[13:37:08.461]                 added <- setdiff(names, old_names)
[13:37:08.461]                 removed <- setdiff(old_names, names)
[13:37:08.461]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:08.461]                   envs[common]]
[13:37:08.461]                 NAMES <- toupper(changed)
[13:37:08.461]                 args <- list()
[13:37:08.461]                 for (kk in seq_along(NAMES)) {
[13:37:08.461]                   name <- changed[[kk]]
[13:37:08.461]                   NAME <- NAMES[[kk]]
[13:37:08.461]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.461]                     next
[13:37:08.461]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.461]                 }
[13:37:08.461]                 NAMES <- toupper(added)
[13:37:08.461]                 for (kk in seq_along(NAMES)) {
[13:37:08.461]                   name <- added[[kk]]
[13:37:08.461]                   NAME <- NAMES[[kk]]
[13:37:08.461]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.461]                     next
[13:37:08.461]                   args[[name]] <- ""
[13:37:08.461]                 }
[13:37:08.461]                 NAMES <- toupper(removed)
[13:37:08.461]                 for (kk in seq_along(NAMES)) {
[13:37:08.461]                   name <- removed[[kk]]
[13:37:08.461]                   NAME <- NAMES[[kk]]
[13:37:08.461]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.461]                     next
[13:37:08.461]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.461]                 }
[13:37:08.461]                 if (length(args) > 0) 
[13:37:08.461]                   base::do.call(base::Sys.setenv, args = args)
[13:37:08.461]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:08.461]             }
[13:37:08.461]             else {
[13:37:08.461]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:08.461]             }
[13:37:08.461]             {
[13:37:08.461]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:08.461]                   0L) {
[13:37:08.461]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:08.461]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:08.461]                   base::options(opts)
[13:37:08.461]                 }
[13:37:08.461]                 {
[13:37:08.461]                   {
[13:37:08.461]                     base::options(mc.cores = ...future.mc.cores.old)
[13:37:08.461]                     NULL
[13:37:08.461]                   }
[13:37:08.461]                   options(future.plan = NULL)
[13:37:08.461]                   if (is.na(NA_character_)) 
[13:37:08.461]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.461]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:08.461]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:08.461]                     .init = FALSE)
[13:37:08.461]                 }
[13:37:08.461]             }
[13:37:08.461]         }
[13:37:08.461]     })
[13:37:08.461]     if (TRUE) {
[13:37:08.461]         base::sink(type = "output", split = FALSE)
[13:37:08.461]         if (TRUE) {
[13:37:08.461]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:08.461]         }
[13:37:08.461]         else {
[13:37:08.461]             ...future.result["stdout"] <- base::list(NULL)
[13:37:08.461]         }
[13:37:08.461]         base::close(...future.stdout)
[13:37:08.461]         ...future.stdout <- NULL
[13:37:08.461]     }
[13:37:08.461]     ...future.result$conditions <- ...future.conditions
[13:37:08.461]     ...future.result$finished <- base::Sys.time()
[13:37:08.461]     ...future.result
[13:37:08.461] }
[13:37:08.464] requestCore(): workers = 2
[13:37:08.465] Poll #1 (0): usedCores() = 2, workers = 2
[13:37:08.476] result() for MulticoreFuture ...
[13:37:08.476] result() for MulticoreFuture ...
[13:37:08.477] result() for MulticoreFuture ... done
[13:37:08.477] result() for MulticoreFuture ... done
[13:37:08.477] result() for MulticoreFuture ...
[13:37:08.477] result() for MulticoreFuture ... done
[13:37:08.479] MulticoreFuture started
 - Creating multicore future #4 ...
[13:37:08.480] plan(): Setting new future strategy stack:
[13:37:08.481] List of future strategies:
[13:37:08.481] 1. sequential:
[13:37:08.481]    - args: function (..., envir = parent.frame())
[13:37:08.481]    - tweaked: FALSE
[13:37:08.481]    - call: NULL
[13:37:08.481] plan(): nbrOfWorkers() = 1
[13:37:08.483] plan(): Setting new future strategy stack:
[13:37:08.483] List of future strategies:
[13:37:08.483] 1. multicore:
[13:37:08.483]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:37:08.483]    - tweaked: FALSE
[13:37:08.483]    - call: plan(multicore)
[13:37:08.485] getGlobalsAndPackages() ...
[13:37:08.485] Not searching for globals
[13:37:08.485] - globals: [0] <none>
[13:37:08.485] getGlobalsAndPackages() ... DONE
[13:37:08.486] Packages needed by the future expression (n = 0): <none>
[13:37:08.493] Packages needed by future strategies (n = 0): <none>
[13:37:08.494] plan(): nbrOfWorkers() = 2
[13:37:08.494] {
[13:37:08.494]     {
[13:37:08.494]         {
[13:37:08.494]             ...future.startTime <- base::Sys.time()
[13:37:08.494]             {
[13:37:08.494]                 {
[13:37:08.494]                   {
[13:37:08.494]                     {
[13:37:08.494]                       base::local({
[13:37:08.494]                         has_future <- base::requireNamespace("future", 
[13:37:08.494]                           quietly = TRUE)
[13:37:08.494]                         if (has_future) {
[13:37:08.494]                           ns <- base::getNamespace("future")
[13:37:08.494]                           version <- ns[[".package"]][["version"]]
[13:37:08.494]                           if (is.null(version)) 
[13:37:08.494]                             version <- utils::packageVersion("future")
[13:37:08.494]                         }
[13:37:08.494]                         else {
[13:37:08.494]                           version <- NULL
[13:37:08.494]                         }
[13:37:08.494]                         if (!has_future || version < "1.8.0") {
[13:37:08.494]                           info <- base::c(r_version = base::gsub("R version ", 
[13:37:08.494]                             "", base::R.version$version.string), 
[13:37:08.494]                             platform = base::sprintf("%s (%s-bit)", 
[13:37:08.494]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:08.494]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:08.494]                               "release", "version")], collapse = " "), 
[13:37:08.494]                             hostname = base::Sys.info()[["nodename"]])
[13:37:08.494]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:37:08.494]                             info)
[13:37:08.494]                           info <- base::paste(info, collapse = "; ")
[13:37:08.494]                           if (!has_future) {
[13:37:08.494]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:08.494]                               info)
[13:37:08.494]                           }
[13:37:08.494]                           else {
[13:37:08.494]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:08.494]                               info, version)
[13:37:08.494]                           }
[13:37:08.494]                           base::stop(msg)
[13:37:08.494]                         }
[13:37:08.494]                       })
[13:37:08.494]                     }
[13:37:08.494]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:37:08.494]                     base::options(mc.cores = 1L)
[13:37:08.494]                   }
[13:37:08.494]                   ...future.strategy.old <- future::plan("list")
[13:37:08.494]                   options(future.plan = NULL)
[13:37:08.494]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.494]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:08.494]                 }
[13:37:08.494]                 ...future.workdir <- getwd()
[13:37:08.494]             }
[13:37:08.494]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:08.494]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:08.494]         }
[13:37:08.494]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:08.494]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:08.494]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:08.494]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:08.494]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:08.494]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:08.494]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:08.494]             base::names(...future.oldOptions))
[13:37:08.494]     }
[13:37:08.494]     if (FALSE) {
[13:37:08.494]     }
[13:37:08.494]     else {
[13:37:08.494]         if (TRUE) {
[13:37:08.494]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:08.494]                 open = "w")
[13:37:08.494]         }
[13:37:08.494]         else {
[13:37:08.494]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:08.494]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:08.494]         }
[13:37:08.494]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:08.494]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:08.494]             base::sink(type = "output", split = FALSE)
[13:37:08.494]             base::close(...future.stdout)
[13:37:08.494]         }, add = TRUE)
[13:37:08.494]     }
[13:37:08.494]     ...future.frame <- base::sys.nframe()
[13:37:08.494]     ...future.conditions <- base::list()
[13:37:08.494]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:08.494]     if (FALSE) {
[13:37:08.494]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:08.494]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:08.494]     }
[13:37:08.494]     ...future.result <- base::tryCatch({
[13:37:08.494]         base::withCallingHandlers({
[13:37:08.494]             ...future.value <- base::withVisible(base::local({
[13:37:08.494]                 withCallingHandlers({
[13:37:08.494]                   {
[13:37:08.494]                     ii
[13:37:08.494]                   }
[13:37:08.494]                 }, immediateCondition = function(cond) {
[13:37:08.494]                   save_rds <- function (object, pathname, ...) 
[13:37:08.494]                   {
[13:37:08.494]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:37:08.494]                     if (file_test("-f", pathname_tmp)) {
[13:37:08.494]                       fi_tmp <- file.info(pathname_tmp)
[13:37:08.494]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:37:08.494]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:08.494]                         fi_tmp[["mtime"]])
[13:37:08.494]                     }
[13:37:08.494]                     tryCatch({
[13:37:08.494]                       saveRDS(object, file = pathname_tmp, ...)
[13:37:08.494]                     }, error = function(ex) {
[13:37:08.494]                       msg <- conditionMessage(ex)
[13:37:08.494]                       fi_tmp <- file.info(pathname_tmp)
[13:37:08.494]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:37:08.494]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:08.494]                         fi_tmp[["mtime"]], msg)
[13:37:08.494]                       ex$message <- msg
[13:37:08.494]                       stop(ex)
[13:37:08.494]                     })
[13:37:08.494]                     stopifnot(file_test("-f", pathname_tmp))
[13:37:08.494]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:37:08.494]                     if (!res || file_test("-f", pathname_tmp)) {
[13:37:08.494]                       fi_tmp <- file.info(pathname_tmp)
[13:37:08.494]                       fi <- file.info(pathname)
[13:37:08.494]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:37:08.494]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:08.494]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:37:08.494]                         fi[["size"]], fi[["mtime"]])
[13:37:08.494]                       stop(msg)
[13:37:08.494]                     }
[13:37:08.494]                     invisible(pathname)
[13:37:08.494]                   }
[13:37:08.494]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:37:08.494]                     rootPath = tempdir()) 
[13:37:08.494]                   {
[13:37:08.494]                     obj <- list(time = Sys.time(), condition = cond)
[13:37:08.494]                     file <- tempfile(pattern = class(cond)[1], 
[13:37:08.494]                       tmpdir = path, fileext = ".rds")
[13:37:08.494]                     save_rds(obj, file)
[13:37:08.494]                   }
[13:37:08.494]                   saveImmediateCondition(cond, path = "/tmp/RtmptV9aIe/.future/immediateConditions")
[13:37:08.494]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.494]                   {
[13:37:08.494]                     inherits <- base::inherits
[13:37:08.494]                     invokeRestart <- base::invokeRestart
[13:37:08.494]                     is.null <- base::is.null
[13:37:08.494]                     muffled <- FALSE
[13:37:08.494]                     if (inherits(cond, "message")) {
[13:37:08.494]                       muffled <- grepl(pattern, "muffleMessage")
[13:37:08.494]                       if (muffled) 
[13:37:08.494]                         invokeRestart("muffleMessage")
[13:37:08.494]                     }
[13:37:08.494]                     else if (inherits(cond, "warning")) {
[13:37:08.494]                       muffled <- grepl(pattern, "muffleWarning")
[13:37:08.494]                       if (muffled) 
[13:37:08.494]                         invokeRestart("muffleWarning")
[13:37:08.494]                     }
[13:37:08.494]                     else if (inherits(cond, "condition")) {
[13:37:08.494]                       if (!is.null(pattern)) {
[13:37:08.494]                         computeRestarts <- base::computeRestarts
[13:37:08.494]                         grepl <- base::grepl
[13:37:08.494]                         restarts <- computeRestarts(cond)
[13:37:08.494]                         for (restart in restarts) {
[13:37:08.494]                           name <- restart$name
[13:37:08.494]                           if (is.null(name)) 
[13:37:08.494]                             next
[13:37:08.494]                           if (!grepl(pattern, name)) 
[13:37:08.494]                             next
[13:37:08.494]                           invokeRestart(restart)
[13:37:08.494]                           muffled <- TRUE
[13:37:08.494]                           break
[13:37:08.494]                         }
[13:37:08.494]                       }
[13:37:08.494]                     }
[13:37:08.494]                     invisible(muffled)
[13:37:08.494]                   }
[13:37:08.494]                   muffleCondition(cond)
[13:37:08.494]                 })
[13:37:08.494]             }))
[13:37:08.494]             future::FutureResult(value = ...future.value$value, 
[13:37:08.494]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.494]                   ...future.rng), globalenv = if (FALSE) 
[13:37:08.494]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:08.494]                     ...future.globalenv.names))
[13:37:08.494]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:08.494]         }, condition = base::local({
[13:37:08.494]             c <- base::c
[13:37:08.494]             inherits <- base::inherits
[13:37:08.494]             invokeRestart <- base::invokeRestart
[13:37:08.494]             length <- base::length
[13:37:08.494]             list <- base::list
[13:37:08.494]             seq.int <- base::seq.int
[13:37:08.494]             signalCondition <- base::signalCondition
[13:37:08.494]             sys.calls <- base::sys.calls
[13:37:08.494]             `[[` <- base::`[[`
[13:37:08.494]             `+` <- base::`+`
[13:37:08.494]             `<<-` <- base::`<<-`
[13:37:08.494]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:08.494]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:08.494]                   3L)]
[13:37:08.494]             }
[13:37:08.494]             function(cond) {
[13:37:08.494]                 is_error <- inherits(cond, "error")
[13:37:08.494]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:08.494]                   NULL)
[13:37:08.494]                 if (is_error) {
[13:37:08.494]                   sessionInformation <- function() {
[13:37:08.494]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:08.494]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:08.494]                       search = base::search(), system = base::Sys.info())
[13:37:08.494]                   }
[13:37:08.494]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.494]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:08.494]                     cond$call), session = sessionInformation(), 
[13:37:08.494]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:08.494]                   signalCondition(cond)
[13:37:08.494]                 }
[13:37:08.494]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:08.494]                 "immediateCondition"))) {
[13:37:08.494]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:08.494]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.494]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:08.494]                   if (TRUE && !signal) {
[13:37:08.494]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.494]                     {
[13:37:08.494]                       inherits <- base::inherits
[13:37:08.494]                       invokeRestart <- base::invokeRestart
[13:37:08.494]                       is.null <- base::is.null
[13:37:08.494]                       muffled <- FALSE
[13:37:08.494]                       if (inherits(cond, "message")) {
[13:37:08.494]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.494]                         if (muffled) 
[13:37:08.494]                           invokeRestart("muffleMessage")
[13:37:08.494]                       }
[13:37:08.494]                       else if (inherits(cond, "warning")) {
[13:37:08.494]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.494]                         if (muffled) 
[13:37:08.494]                           invokeRestart("muffleWarning")
[13:37:08.494]                       }
[13:37:08.494]                       else if (inherits(cond, "condition")) {
[13:37:08.494]                         if (!is.null(pattern)) {
[13:37:08.494]                           computeRestarts <- base::computeRestarts
[13:37:08.494]                           grepl <- base::grepl
[13:37:08.494]                           restarts <- computeRestarts(cond)
[13:37:08.494]                           for (restart in restarts) {
[13:37:08.494]                             name <- restart$name
[13:37:08.494]                             if (is.null(name)) 
[13:37:08.494]                               next
[13:37:08.494]                             if (!grepl(pattern, name)) 
[13:37:08.494]                               next
[13:37:08.494]                             invokeRestart(restart)
[13:37:08.494]                             muffled <- TRUE
[13:37:08.494]                             break
[13:37:08.494]                           }
[13:37:08.494]                         }
[13:37:08.494]                       }
[13:37:08.494]                       invisible(muffled)
[13:37:08.494]                     }
[13:37:08.494]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.494]                   }
[13:37:08.494]                 }
[13:37:08.494]                 else {
[13:37:08.494]                   if (TRUE) {
[13:37:08.494]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.494]                     {
[13:37:08.494]                       inherits <- base::inherits
[13:37:08.494]                       invokeRestart <- base::invokeRestart
[13:37:08.494]                       is.null <- base::is.null
[13:37:08.494]                       muffled <- FALSE
[13:37:08.494]                       if (inherits(cond, "message")) {
[13:37:08.494]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.494]                         if (muffled) 
[13:37:08.494]                           invokeRestart("muffleMessage")
[13:37:08.494]                       }
[13:37:08.494]                       else if (inherits(cond, "warning")) {
[13:37:08.494]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.494]                         if (muffled) 
[13:37:08.494]                           invokeRestart("muffleWarning")
[13:37:08.494]                       }
[13:37:08.494]                       else if (inherits(cond, "condition")) {
[13:37:08.494]                         if (!is.null(pattern)) {
[13:37:08.494]                           computeRestarts <- base::computeRestarts
[13:37:08.494]                           grepl <- base::grepl
[13:37:08.494]                           restarts <- computeRestarts(cond)
[13:37:08.494]                           for (restart in restarts) {
[13:37:08.494]                             name <- restart$name
[13:37:08.494]                             if (is.null(name)) 
[13:37:08.494]                               next
[13:37:08.494]                             if (!grepl(pattern, name)) 
[13:37:08.494]                               next
[13:37:08.494]                             invokeRestart(restart)
[13:37:08.494]                             muffled <- TRUE
[13:37:08.494]                             break
[13:37:08.494]                           }
[13:37:08.494]                         }
[13:37:08.494]                       }
[13:37:08.494]                       invisible(muffled)
[13:37:08.494]                     }
[13:37:08.494]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.494]                   }
[13:37:08.494]                 }
[13:37:08.494]             }
[13:37:08.494]         }))
[13:37:08.494]     }, error = function(ex) {
[13:37:08.494]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:08.494]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.494]                 ...future.rng), started = ...future.startTime, 
[13:37:08.494]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:08.494]             version = "1.8"), class = "FutureResult")
[13:37:08.494]     }, finally = {
[13:37:08.494]         if (!identical(...future.workdir, getwd())) 
[13:37:08.494]             setwd(...future.workdir)
[13:37:08.494]         {
[13:37:08.494]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:08.494]                 ...future.oldOptions$nwarnings <- NULL
[13:37:08.494]             }
[13:37:08.494]             base::options(...future.oldOptions)
[13:37:08.494]             if (.Platform$OS.type == "windows") {
[13:37:08.494]                 old_names <- names(...future.oldEnvVars)
[13:37:08.494]                 envs <- base::Sys.getenv()
[13:37:08.494]                 names <- names(envs)
[13:37:08.494]                 common <- intersect(names, old_names)
[13:37:08.494]                 added <- setdiff(names, old_names)
[13:37:08.494]                 removed <- setdiff(old_names, names)
[13:37:08.494]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:08.494]                   envs[common]]
[13:37:08.494]                 NAMES <- toupper(changed)
[13:37:08.494]                 args <- list()
[13:37:08.494]                 for (kk in seq_along(NAMES)) {
[13:37:08.494]                   name <- changed[[kk]]
[13:37:08.494]                   NAME <- NAMES[[kk]]
[13:37:08.494]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.494]                     next
[13:37:08.494]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.494]                 }
[13:37:08.494]                 NAMES <- toupper(added)
[13:37:08.494]                 for (kk in seq_along(NAMES)) {
[13:37:08.494]                   name <- added[[kk]]
[13:37:08.494]                   NAME <- NAMES[[kk]]
[13:37:08.494]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.494]                     next
[13:37:08.494]                   args[[name]] <- ""
[13:37:08.494]                 }
[13:37:08.494]                 NAMES <- toupper(removed)
[13:37:08.494]                 for (kk in seq_along(NAMES)) {
[13:37:08.494]                   name <- removed[[kk]]
[13:37:08.494]                   NAME <- NAMES[[kk]]
[13:37:08.494]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.494]                     next
[13:37:08.494]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.494]                 }
[13:37:08.494]                 if (length(args) > 0) 
[13:37:08.494]                   base::do.call(base::Sys.setenv, args = args)
[13:37:08.494]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:08.494]             }
[13:37:08.494]             else {
[13:37:08.494]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:08.494]             }
[13:37:08.494]             {
[13:37:08.494]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:08.494]                   0L) {
[13:37:08.494]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:08.494]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:08.494]                   base::options(opts)
[13:37:08.494]                 }
[13:37:08.494]                 {
[13:37:08.494]                   {
[13:37:08.494]                     base::options(mc.cores = ...future.mc.cores.old)
[13:37:08.494]                     NULL
[13:37:08.494]                   }
[13:37:08.494]                   options(future.plan = NULL)
[13:37:08.494]                   if (is.na(NA_character_)) 
[13:37:08.494]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.494]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:08.494]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:08.494]                     .init = FALSE)
[13:37:08.494]                 }
[13:37:08.494]             }
[13:37:08.494]         }
[13:37:08.494]     })
[13:37:08.494]     if (TRUE) {
[13:37:08.494]         base::sink(type = "output", split = FALSE)
[13:37:08.494]         if (TRUE) {
[13:37:08.494]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:08.494]         }
[13:37:08.494]         else {
[13:37:08.494]             ...future.result["stdout"] <- base::list(NULL)
[13:37:08.494]         }
[13:37:08.494]         base::close(...future.stdout)
[13:37:08.494]         ...future.stdout <- NULL
[13:37:08.494]     }
[13:37:08.494]     ...future.result$conditions <- ...future.conditions
[13:37:08.494]     ...future.result$finished <- base::Sys.time()
[13:37:08.494]     ...future.result
[13:37:08.494] }
[13:37:08.497] requestCore(): workers = 2
[13:37:08.498] Poll #1 (0): usedCores() = 2, workers = 2
[13:37:08.521] result() for MulticoreFuture ...
[13:37:08.522] result() for MulticoreFuture ...
[13:37:08.522] result() for MulticoreFuture ... done
[13:37:08.522] result() for MulticoreFuture ... done
[13:37:08.523] result() for MulticoreFuture ...
[13:37:08.523] result() for MulticoreFuture ... done
[13:37:08.525] MulticoreFuture started
 - Resolving 4 multicore futures
[13:37:08.526] result() for MulticoreFuture ...
[13:37:08.526] result() for MulticoreFuture ... done
[13:37:08.526] plan(): Setting new future strategy stack:
[13:37:08.527] result() for MulticoreFuture ...
[13:37:08.527] result() for MulticoreFuture ... done
[13:37:08.527] result() for MulticoreFuture ...
[13:37:08.528] result() for MulticoreFuture ... done
[13:37:08.527] List of future strategies:
[13:37:08.527] 1. sequential:
[13:37:08.527]    - args: function (..., envir = parent.frame())
[13:37:08.527]    - tweaked: FALSE
[13:37:08.527]    - call: NULL
[13:37:08.528] result() for MulticoreFuture ...
[13:37:08.528] result() for MulticoreFuture ... done
[13:37:08.528] plan(): nbrOfWorkers() = 1
[13:37:08.528] result() for MulticoreFuture ...
[13:37:08.530] result() for MulticoreFuture ...
[13:37:08.530] result() for MulticoreFuture ... done
[13:37:08.530] result() for MulticoreFuture ... done
[13:37:08.530] result() for MulticoreFuture ...
[13:37:08.531] result() for MulticoreFuture ... done
[13:37:08.531] plan(): Setting new future strategy stack:
[13:37:08.531] result() for MulticoreFuture ...
[13:37:08.531] List of future strategies:
[13:37:08.531] 1. multicore:
[13:37:08.531]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:37:08.531]    - tweaked: FALSE
[13:37:08.531]    - call: plan(multicore)
[13:37:08.536] plan(): nbrOfWorkers() = 2
[13:37:08.537] result() for MulticoreFuture ...
[13:37:08.537] result() for MulticoreFuture ... done
[13:37:08.537] result() for MulticoreFuture ... done
[13:37:08.538] result() for MulticoreFuture ...
[13:37:08.538] result() for MulticoreFuture ... done
*** multicore(..., globals = FALSE) and errors
[13:37:08.542] getGlobalsAndPackages() ...
[13:37:08.543] Not searching for globals
[13:37:08.543] - globals: [0] <none>
[13:37:08.543] getGlobalsAndPackages() ... DONE
[13:37:08.543] Packages needed by the future expression (n = 0): <none>
[13:37:08.544] Packages needed by future strategies (n = 0): <none>
[13:37:08.544] {
[13:37:08.544]     {
[13:37:08.544]         {
[13:37:08.544]             ...future.startTime <- base::Sys.time()
[13:37:08.544]             {
[13:37:08.544]                 {
[13:37:08.544]                   {
[13:37:08.544]                     {
[13:37:08.544]                       base::local({
[13:37:08.544]                         has_future <- base::requireNamespace("future", 
[13:37:08.544]                           quietly = TRUE)
[13:37:08.544]                         if (has_future) {
[13:37:08.544]                           ns <- base::getNamespace("future")
[13:37:08.544]                           version <- ns[[".package"]][["version"]]
[13:37:08.544]                           if (is.null(version)) 
[13:37:08.544]                             version <- utils::packageVersion("future")
[13:37:08.544]                         }
[13:37:08.544]                         else {
[13:37:08.544]                           version <- NULL
[13:37:08.544]                         }
[13:37:08.544]                         if (!has_future || version < "1.8.0") {
[13:37:08.544]                           info <- base::c(r_version = base::gsub("R version ", 
[13:37:08.544]                             "", base::R.version$version.string), 
[13:37:08.544]                             platform = base::sprintf("%s (%s-bit)", 
[13:37:08.544]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:08.544]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:08.544]                               "release", "version")], collapse = " "), 
[13:37:08.544]                             hostname = base::Sys.info()[["nodename"]])
[13:37:08.544]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:37:08.544]                             info)
[13:37:08.544]                           info <- base::paste(info, collapse = "; ")
[13:37:08.544]                           if (!has_future) {
[13:37:08.544]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:08.544]                               info)
[13:37:08.544]                           }
[13:37:08.544]                           else {
[13:37:08.544]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:08.544]                               info, version)
[13:37:08.544]                           }
[13:37:08.544]                           base::stop(msg)
[13:37:08.544]                         }
[13:37:08.544]                       })
[13:37:08.544]                     }
[13:37:08.544]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:37:08.544]                     base::options(mc.cores = 1L)
[13:37:08.544]                   }
[13:37:08.544]                   ...future.strategy.old <- future::plan("list")
[13:37:08.544]                   options(future.plan = NULL)
[13:37:08.544]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.544]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:08.544]                 }
[13:37:08.544]                 ...future.workdir <- getwd()
[13:37:08.544]             }
[13:37:08.544]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:08.544]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:08.544]         }
[13:37:08.544]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:08.544]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:08.544]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:08.544]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:08.544]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:08.544]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:08.544]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:08.544]             base::names(...future.oldOptions))
[13:37:08.544]     }
[13:37:08.544]     if (FALSE) {
[13:37:08.544]     }
[13:37:08.544]     else {
[13:37:08.544]         if (TRUE) {
[13:37:08.544]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:08.544]                 open = "w")
[13:37:08.544]         }
[13:37:08.544]         else {
[13:37:08.544]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:08.544]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:08.544]         }
[13:37:08.544]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:08.544]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:08.544]             base::sink(type = "output", split = FALSE)
[13:37:08.544]             base::close(...future.stdout)
[13:37:08.544]         }, add = TRUE)
[13:37:08.544]     }
[13:37:08.544]     ...future.frame <- base::sys.nframe()
[13:37:08.544]     ...future.conditions <- base::list()
[13:37:08.544]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:08.544]     if (FALSE) {
[13:37:08.544]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:08.544]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:08.544]     }
[13:37:08.544]     ...future.result <- base::tryCatch({
[13:37:08.544]         base::withCallingHandlers({
[13:37:08.544]             ...future.value <- base::withVisible(base::local({
[13:37:08.544]                 withCallingHandlers({
[13:37:08.544]                   {
[13:37:08.544]                     stop("Whoops!")
[13:37:08.544]                     1
[13:37:08.544]                   }
[13:37:08.544]                 }, immediateCondition = function(cond) {
[13:37:08.544]                   save_rds <- function (object, pathname, ...) 
[13:37:08.544]                   {
[13:37:08.544]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:37:08.544]                     if (file_test("-f", pathname_tmp)) {
[13:37:08.544]                       fi_tmp <- file.info(pathname_tmp)
[13:37:08.544]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:37:08.544]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:08.544]                         fi_tmp[["mtime"]])
[13:37:08.544]                     }
[13:37:08.544]                     tryCatch({
[13:37:08.544]                       saveRDS(object, file = pathname_tmp, ...)
[13:37:08.544]                     }, error = function(ex) {
[13:37:08.544]                       msg <- conditionMessage(ex)
[13:37:08.544]                       fi_tmp <- file.info(pathname_tmp)
[13:37:08.544]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:37:08.544]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:08.544]                         fi_tmp[["mtime"]], msg)
[13:37:08.544]                       ex$message <- msg
[13:37:08.544]                       stop(ex)
[13:37:08.544]                     })
[13:37:08.544]                     stopifnot(file_test("-f", pathname_tmp))
[13:37:08.544]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:37:08.544]                     if (!res || file_test("-f", pathname_tmp)) {
[13:37:08.544]                       fi_tmp <- file.info(pathname_tmp)
[13:37:08.544]                       fi <- file.info(pathname)
[13:37:08.544]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:37:08.544]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:08.544]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:37:08.544]                         fi[["size"]], fi[["mtime"]])
[13:37:08.544]                       stop(msg)
[13:37:08.544]                     }
[13:37:08.544]                     invisible(pathname)
[13:37:08.544]                   }
[13:37:08.544]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:37:08.544]                     rootPath = tempdir()) 
[13:37:08.544]                   {
[13:37:08.544]                     obj <- list(time = Sys.time(), condition = cond)
[13:37:08.544]                     file <- tempfile(pattern = class(cond)[1], 
[13:37:08.544]                       tmpdir = path, fileext = ".rds")
[13:37:08.544]                     save_rds(obj, file)
[13:37:08.544]                   }
[13:37:08.544]                   saveImmediateCondition(cond, path = "/tmp/RtmptV9aIe/.future/immediateConditions")
[13:37:08.544]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.544]                   {
[13:37:08.544]                     inherits <- base::inherits
[13:37:08.544]                     invokeRestart <- base::invokeRestart
[13:37:08.544]                     is.null <- base::is.null
[13:37:08.544]                     muffled <- FALSE
[13:37:08.544]                     if (inherits(cond, "message")) {
[13:37:08.544]                       muffled <- grepl(pattern, "muffleMessage")
[13:37:08.544]                       if (muffled) 
[13:37:08.544]                         invokeRestart("muffleMessage")
[13:37:08.544]                     }
[13:37:08.544]                     else if (inherits(cond, "warning")) {
[13:37:08.544]                       muffled <- grepl(pattern, "muffleWarning")
[13:37:08.544]                       if (muffled) 
[13:37:08.544]                         invokeRestart("muffleWarning")
[13:37:08.544]                     }
[13:37:08.544]                     else if (inherits(cond, "condition")) {
[13:37:08.544]                       if (!is.null(pattern)) {
[13:37:08.544]                         computeRestarts <- base::computeRestarts
[13:37:08.544]                         grepl <- base::grepl
[13:37:08.544]                         restarts <- computeRestarts(cond)
[13:37:08.544]                         for (restart in restarts) {
[13:37:08.544]                           name <- restart$name
[13:37:08.544]                           if (is.null(name)) 
[13:37:08.544]                             next
[13:37:08.544]                           if (!grepl(pattern, name)) 
[13:37:08.544]                             next
[13:37:08.544]                           invokeRestart(restart)
[13:37:08.544]                           muffled <- TRUE
[13:37:08.544]                           break
[13:37:08.544]                         }
[13:37:08.544]                       }
[13:37:08.544]                     }
[13:37:08.544]                     invisible(muffled)
[13:37:08.544]                   }
[13:37:08.544]                   muffleCondition(cond)
[13:37:08.544]                 })
[13:37:08.544]             }))
[13:37:08.544]             future::FutureResult(value = ...future.value$value, 
[13:37:08.544]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.544]                   ...future.rng), globalenv = if (FALSE) 
[13:37:08.544]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:08.544]                     ...future.globalenv.names))
[13:37:08.544]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:08.544]         }, condition = base::local({
[13:37:08.544]             c <- base::c
[13:37:08.544]             inherits <- base::inherits
[13:37:08.544]             invokeRestart <- base::invokeRestart
[13:37:08.544]             length <- base::length
[13:37:08.544]             list <- base::list
[13:37:08.544]             seq.int <- base::seq.int
[13:37:08.544]             signalCondition <- base::signalCondition
[13:37:08.544]             sys.calls <- base::sys.calls
[13:37:08.544]             `[[` <- base::`[[`
[13:37:08.544]             `+` <- base::`+`
[13:37:08.544]             `<<-` <- base::`<<-`
[13:37:08.544]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:08.544]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:08.544]                   3L)]
[13:37:08.544]             }
[13:37:08.544]             function(cond) {
[13:37:08.544]                 is_error <- inherits(cond, "error")
[13:37:08.544]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:08.544]                   NULL)
[13:37:08.544]                 if (is_error) {
[13:37:08.544]                   sessionInformation <- function() {
[13:37:08.544]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:08.544]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:08.544]                       search = base::search(), system = base::Sys.info())
[13:37:08.544]                   }
[13:37:08.544]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.544]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:08.544]                     cond$call), session = sessionInformation(), 
[13:37:08.544]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:08.544]                   signalCondition(cond)
[13:37:08.544]                 }
[13:37:08.544]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:08.544]                 "immediateCondition"))) {
[13:37:08.544]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:08.544]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.544]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:08.544]                   if (TRUE && !signal) {
[13:37:08.544]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.544]                     {
[13:37:08.544]                       inherits <- base::inherits
[13:37:08.544]                       invokeRestart <- base::invokeRestart
[13:37:08.544]                       is.null <- base::is.null
[13:37:08.544]                       muffled <- FALSE
[13:37:08.544]                       if (inherits(cond, "message")) {
[13:37:08.544]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.544]                         if (muffled) 
[13:37:08.544]                           invokeRestart("muffleMessage")
[13:37:08.544]                       }
[13:37:08.544]                       else if (inherits(cond, "warning")) {
[13:37:08.544]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.544]                         if (muffled) 
[13:37:08.544]                           invokeRestart("muffleWarning")
[13:37:08.544]                       }
[13:37:08.544]                       else if (inherits(cond, "condition")) {
[13:37:08.544]                         if (!is.null(pattern)) {
[13:37:08.544]                           computeRestarts <- base::computeRestarts
[13:37:08.544]                           grepl <- base::grepl
[13:37:08.544]                           restarts <- computeRestarts(cond)
[13:37:08.544]                           for (restart in restarts) {
[13:37:08.544]                             name <- restart$name
[13:37:08.544]                             if (is.null(name)) 
[13:37:08.544]                               next
[13:37:08.544]                             if (!grepl(pattern, name)) 
[13:37:08.544]                               next
[13:37:08.544]                             invokeRestart(restart)
[13:37:08.544]                             muffled <- TRUE
[13:37:08.544]                             break
[13:37:08.544]                           }
[13:37:08.544]                         }
[13:37:08.544]                       }
[13:37:08.544]                       invisible(muffled)
[13:37:08.544]                     }
[13:37:08.544]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.544]                   }
[13:37:08.544]                 }
[13:37:08.544]                 else {
[13:37:08.544]                   if (TRUE) {
[13:37:08.544]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.544]                     {
[13:37:08.544]                       inherits <- base::inherits
[13:37:08.544]                       invokeRestart <- base::invokeRestart
[13:37:08.544]                       is.null <- base::is.null
[13:37:08.544]                       muffled <- FALSE
[13:37:08.544]                       if (inherits(cond, "message")) {
[13:37:08.544]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.544]                         if (muffled) 
[13:37:08.544]                           invokeRestart("muffleMessage")
[13:37:08.544]                       }
[13:37:08.544]                       else if (inherits(cond, "warning")) {
[13:37:08.544]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.544]                         if (muffled) 
[13:37:08.544]                           invokeRestart("muffleWarning")
[13:37:08.544]                       }
[13:37:08.544]                       else if (inherits(cond, "condition")) {
[13:37:08.544]                         if (!is.null(pattern)) {
[13:37:08.544]                           computeRestarts <- base::computeRestarts
[13:37:08.544]                           grepl <- base::grepl
[13:37:08.544]                           restarts <- computeRestarts(cond)
[13:37:08.544]                           for (restart in restarts) {
[13:37:08.544]                             name <- restart$name
[13:37:08.544]                             if (is.null(name)) 
[13:37:08.544]                               next
[13:37:08.544]                             if (!grepl(pattern, name)) 
[13:37:08.544]                               next
[13:37:08.544]                             invokeRestart(restart)
[13:37:08.544]                             muffled <- TRUE
[13:37:08.544]                             break
[13:37:08.544]                           }
[13:37:08.544]                         }
[13:37:08.544]                       }
[13:37:08.544]                       invisible(muffled)
[13:37:08.544]                     }
[13:37:08.544]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.544]                   }
[13:37:08.544]                 }
[13:37:08.544]             }
[13:37:08.544]         }))
[13:37:08.544]     }, error = function(ex) {
[13:37:08.544]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:08.544]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.544]                 ...future.rng), started = ...future.startTime, 
[13:37:08.544]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:08.544]             version = "1.8"), class = "FutureResult")
[13:37:08.544]     }, finally = {
[13:37:08.544]         if (!identical(...future.workdir, getwd())) 
[13:37:08.544]             setwd(...future.workdir)
[13:37:08.544]         {
[13:37:08.544]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:08.544]                 ...future.oldOptions$nwarnings <- NULL
[13:37:08.544]             }
[13:37:08.544]             base::options(...future.oldOptions)
[13:37:08.544]             if (.Platform$OS.type == "windows") {
[13:37:08.544]                 old_names <- names(...future.oldEnvVars)
[13:37:08.544]                 envs <- base::Sys.getenv()
[13:37:08.544]                 names <- names(envs)
[13:37:08.544]                 common <- intersect(names, old_names)
[13:37:08.544]                 added <- setdiff(names, old_names)
[13:37:08.544]                 removed <- setdiff(old_names, names)
[13:37:08.544]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:08.544]                   envs[common]]
[13:37:08.544]                 NAMES <- toupper(changed)
[13:37:08.544]                 args <- list()
[13:37:08.544]                 for (kk in seq_along(NAMES)) {
[13:37:08.544]                   name <- changed[[kk]]
[13:37:08.544]                   NAME <- NAMES[[kk]]
[13:37:08.544]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.544]                     next
[13:37:08.544]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.544]                 }
[13:37:08.544]                 NAMES <- toupper(added)
[13:37:08.544]                 for (kk in seq_along(NAMES)) {
[13:37:08.544]                   name <- added[[kk]]
[13:37:08.544]                   NAME <- NAMES[[kk]]
[13:37:08.544]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.544]                     next
[13:37:08.544]                   args[[name]] <- ""
[13:37:08.544]                 }
[13:37:08.544]                 NAMES <- toupper(removed)
[13:37:08.544]                 for (kk in seq_along(NAMES)) {
[13:37:08.544]                   name <- removed[[kk]]
[13:37:08.544]                   NAME <- NAMES[[kk]]
[13:37:08.544]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.544]                     next
[13:37:08.544]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.544]                 }
[13:37:08.544]                 if (length(args) > 0) 
[13:37:08.544]                   base::do.call(base::Sys.setenv, args = args)
[13:37:08.544]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:08.544]             }
[13:37:08.544]             else {
[13:37:08.544]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:08.544]             }
[13:37:08.544]             {
[13:37:08.544]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:08.544]                   0L) {
[13:37:08.544]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:08.544]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:08.544]                   base::options(opts)
[13:37:08.544]                 }
[13:37:08.544]                 {
[13:37:08.544]                   {
[13:37:08.544]                     base::options(mc.cores = ...future.mc.cores.old)
[13:37:08.544]                     NULL
[13:37:08.544]                   }
[13:37:08.544]                   options(future.plan = NULL)
[13:37:08.544]                   if (is.na(NA_character_)) 
[13:37:08.544]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.544]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:08.544]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:08.544]                     .init = FALSE)
[13:37:08.544]                 }
[13:37:08.544]             }
[13:37:08.544]         }
[13:37:08.544]     })
[13:37:08.544]     if (TRUE) {
[13:37:08.544]         base::sink(type = "output", split = FALSE)
[13:37:08.544]         if (TRUE) {
[13:37:08.544]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:08.544]         }
[13:37:08.544]         else {
[13:37:08.544]             ...future.result["stdout"] <- base::list(NULL)
[13:37:08.544]         }
[13:37:08.544]         base::close(...future.stdout)
[13:37:08.544]         ...future.stdout <- NULL
[13:37:08.544]     }
[13:37:08.544]     ...future.result$conditions <- ...future.conditions
[13:37:08.544]     ...future.result$finished <- base::Sys.time()
[13:37:08.544]     ...future.result
[13:37:08.544] }
[13:37:08.547] requestCore(): workers = 2
[13:37:08.548] MulticoreFuture started
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    stop("Whoops!")
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[13:37:08.550] plan(): Setting new future strategy stack:
[13:37:08.550] List of future strategies:
[13:37:08.550] 1. sequential:
[13:37:08.550]    - args: function (..., envir = parent.frame())
[13:37:08.550]    - tweaked: FALSE
[13:37:08.550]    - call: NULL
[13:37:08.551] plan(): nbrOfWorkers() = 1
[13:37:08.553] plan(): Setting new future strategy stack:
[13:37:08.553] List of future strategies:
[13:37:08.553] 1. multicore:
[13:37:08.553]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:37:08.553]    - tweaked: FALSE
[13:37:08.553]    - call: plan(multicore)
[13:37:08.558] plan(): nbrOfWorkers() = 2
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 95e450d1-e7b8-6209-6c23-e4c8d06e1b18
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:37:08.560] result() for MulticoreFuture ...
[13:37:08.563] result() for MulticoreFuture ...
[13:37:08.563] result() for MulticoreFuture ... done
[13:37:08.563] signalConditions() ...
[13:37:08.563]  - include = ‘immediateCondition’
[13:37:08.563]  - exclude = 
[13:37:08.563]  - resignal = FALSE
[13:37:08.564]  - Number of conditions: 1
[13:37:08.564] signalConditions() ... done
[13:37:08.564] result() for MulticoreFuture ... done
[13:37:08.564] result() for MulticoreFuture ...
[13:37:08.564] result() for MulticoreFuture ... done
[13:37:08.564] signalConditions() ...
[13:37:08.564]  - include = ‘immediateCondition’
[13:37:08.564]  - exclude = 
[13:37:08.565]  - resignal = FALSE
[13:37:08.565]  - Number of conditions: 1
[13:37:08.565] signalConditions() ... done
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    save_rds <- function (object, pathname, ...)     {        pathname_tmp <- sprintf("%s.tmp", pathname)        if (file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]])        }        tryCatch({            saveRDS(object, file = pathname_tmp, ...)        }, error = function(ex) {            msg <- conditionMessage(ex)            fi_tmp <- file.info(pathname_tmp)            msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 msg)            ex$message <- msg            stop(ex)        })        stopifnot(file_test("-f", pathname_tmp))        res <- file.rename(from = pathname_tmp, to = pathname)        if (!res || file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            fi <- file.info(pathname)            msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 sQuote(pathname), fi[["size"]], fi[["mtime"]])            stop(msg)        }        invisible(pathname)    }    saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath),         rootPath = tempdir())     {        obj <- list(time = Sys.time(), condition = cond)        file <- tempfile(pattern = class(cond)[1], tmpdir = path,             fileext = ".rds")        save_rds(obj, file)    }    saveImmediateCondition(cond, path = "/tmp/RtmptV9aIe/.future/immediateConditions")    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[13:37:08.566] result() for MulticoreFuture ...
[13:37:08.566] result() for MulticoreFuture ... done
[13:37:08.566] result() for MulticoreFuture ...
[13:37:08.566] result() for MulticoreFuture ... done
[13:37:08.566] signalConditions() ...
[13:37:08.566]  - include = ‘immediateCondition’
[13:37:08.566]  - exclude = 
[13:37:08.566]  - resignal = FALSE
[13:37:08.567]  - Number of conditions: 1
[13:37:08.567] signalConditions() ... done
[13:37:08.567] Future state: ‘finished’
[13:37:08.570] result() for MulticoreFuture ...
[13:37:08.570] result() for MulticoreFuture ... done
[13:37:08.570] signalConditions() ...
[13:37:08.570]  - include = ‘condition’
[13:37:08.570]  - exclude = ‘immediateCondition’
[13:37:08.571]  - resignal = TRUE
[13:37:08.571]  - Number of conditions: 1
[13:37:08.571]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[13:37:08.571] signalConditions() ... done
[1] "Error in withCallingHandlers({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    save_rds <- function (object, pathname, ...)     {        pathname_tmp <- sprintf("%s.tmp", pathname)        if (file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]])        }        tryCatch({            saveRDS(object, file = pathname_tmp, ...)        }, error = function(ex) {            msg <- conditionMessage(ex)            fi_tmp <- file.info(pathname_tmp)            msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 msg)            ex$message <- msg            stop(ex)        })        stopifnot(file_test("-f", pathname_tmp))        res <- file.rename(from = pathname_tmp, to = pathname)        if (!res || file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            fi <- file.info(pathname)            msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 sQuote(pathname), fi[["size"]], fi[["mtime"]])            stop(msg)        }        invisible(pathname)    }    saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath),         rootPath = tempdir())     {        obj <- list(time = Sys.time(), condition = cond)        file <- tempfile(pattern = class(cond)[1], tmpdir = path,             fileext = ".rds")        save_rds(obj, file)    }    saveImmediateCondition(cond, path = "/tmp/RtmptV9aIe/.future/immediateConditions")    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[13:37:08.572] result() for MulticoreFuture ...
[13:37:08.572] result() for MulticoreFuture ... done
[13:37:08.572] result() for MulticoreFuture ...
[13:37:08.572] result() for MulticoreFuture ... done
[13:37:08.573] signalConditions() ...
[13:37:08.573]  - include = ‘immediateCondition’
[13:37:08.573]  - exclude = 
[13:37:08.573]  - resignal = FALSE
[13:37:08.573]  - Number of conditions: 1
[13:37:08.573] signalConditions() ... done
[13:37:08.573] Future state: ‘finished’
[13:37:08.574] result() for MulticoreFuture ...
[13:37:08.574] result() for MulticoreFuture ... done
[13:37:08.574] signalConditions() ...
[13:37:08.574]  - include = ‘condition’
[13:37:08.574]  - exclude = ‘immediateCondition’
[13:37:08.574]  - resignal = TRUE
[13:37:08.574]  - Number of conditions: 1
[13:37:08.574]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[13:37:08.575] signalConditions() ... done
[1] "Error in withCallingHandlers({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    save_rds <- function (object, pathname, ...)     {        pathname_tmp <- sprintf("%s.tmp", pathname)        if (file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]])        }        tryCatch({            saveRDS(object, file = pathname_tmp, ...)        }, error = function(ex) {            msg <- conditionMessage(ex)            fi_tmp <- file.info(pathname_tmp)            msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 msg)            ex$message <- msg            stop(ex)        })        stopifnot(file_test("-f", pathname_tmp))        res <- file.rename(from = pathname_tmp, to = pathname)        if (!res || file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            fi <- file.info(pathname)            msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 sQuote(pathname), fi[["size"]], fi[["mtime"]])            stop(msg)        }        invisible(pathname)    }    saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath),         rootPath = tempdir())     {        obj <- list(time = Sys.time(), condition = cond)        file <- tempfile(pattern = class(cond)[1], tmpdir = path,             fileext = ".rds")        save_rds(obj, file)    }    saveImmediateCondition(cond, path = "/tmp/RtmptV9aIe/.future/immediateConditions")    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[13:37:08.579] getGlobalsAndPackages() ...
[13:37:08.579] 
[13:37:08.579] - globals: [0] <none>
[13:37:08.580] getGlobalsAndPackages() ... DONE
[13:37:08.580] Packages needed by the future expression (n = 0): <none>
[13:37:08.580] Packages needed by future strategies (n = 0): <none>
[13:37:08.581] {
[13:37:08.581]     {
[13:37:08.581]         {
[13:37:08.581]             ...future.startTime <- base::Sys.time()
[13:37:08.581]             {
[13:37:08.581]                 {
[13:37:08.581]                   {
[13:37:08.581]                     {
[13:37:08.581]                       base::local({
[13:37:08.581]                         has_future <- base::requireNamespace("future", 
[13:37:08.581]                           quietly = TRUE)
[13:37:08.581]                         if (has_future) {
[13:37:08.581]                           ns <- base::getNamespace("future")
[13:37:08.581]                           version <- ns[[".package"]][["version"]]
[13:37:08.581]                           if (is.null(version)) 
[13:37:08.581]                             version <- utils::packageVersion("future")
[13:37:08.581]                         }
[13:37:08.581]                         else {
[13:37:08.581]                           version <- NULL
[13:37:08.581]                         }
[13:37:08.581]                         if (!has_future || version < "1.8.0") {
[13:37:08.581]                           info <- base::c(r_version = base::gsub("R version ", 
[13:37:08.581]                             "", base::R.version$version.string), 
[13:37:08.581]                             platform = base::sprintf("%s (%s-bit)", 
[13:37:08.581]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:08.581]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:08.581]                               "release", "version")], collapse = " "), 
[13:37:08.581]                             hostname = base::Sys.info()[["nodename"]])
[13:37:08.581]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:37:08.581]                             info)
[13:37:08.581]                           info <- base::paste(info, collapse = "; ")
[13:37:08.581]                           if (!has_future) {
[13:37:08.581]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:08.581]                               info)
[13:37:08.581]                           }
[13:37:08.581]                           else {
[13:37:08.581]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:08.581]                               info, version)
[13:37:08.581]                           }
[13:37:08.581]                           base::stop(msg)
[13:37:08.581]                         }
[13:37:08.581]                       })
[13:37:08.581]                     }
[13:37:08.581]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:37:08.581]                     base::options(mc.cores = 1L)
[13:37:08.581]                   }
[13:37:08.581]                   ...future.strategy.old <- future::plan("list")
[13:37:08.581]                   options(future.plan = NULL)
[13:37:08.581]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.581]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:08.581]                 }
[13:37:08.581]                 ...future.workdir <- getwd()
[13:37:08.581]             }
[13:37:08.581]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:08.581]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:08.581]         }
[13:37:08.581]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:08.581]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:08.581]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:08.581]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:08.581]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:08.581]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:08.581]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:08.581]             base::names(...future.oldOptions))
[13:37:08.581]     }
[13:37:08.581]     if (FALSE) {
[13:37:08.581]     }
[13:37:08.581]     else {
[13:37:08.581]         if (TRUE) {
[13:37:08.581]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:08.581]                 open = "w")
[13:37:08.581]         }
[13:37:08.581]         else {
[13:37:08.581]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:08.581]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:08.581]         }
[13:37:08.581]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:08.581]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:08.581]             base::sink(type = "output", split = FALSE)
[13:37:08.581]             base::close(...future.stdout)
[13:37:08.581]         }, add = TRUE)
[13:37:08.581]     }
[13:37:08.581]     ...future.frame <- base::sys.nframe()
[13:37:08.581]     ...future.conditions <- base::list()
[13:37:08.581]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:08.581]     if (FALSE) {
[13:37:08.581]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:08.581]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:08.581]     }
[13:37:08.581]     ...future.result <- base::tryCatch({
[13:37:08.581]         base::withCallingHandlers({
[13:37:08.581]             ...future.value <- base::withVisible(base::local({
[13:37:08.581]                 withCallingHandlers({
[13:37:08.581]                   {
[13:37:08.581]                     stop(structure(list(message = "boom"), class = c("MyError", 
[13:37:08.581]                       "error", "condition")))
[13:37:08.581]                   }
[13:37:08.581]                 }, immediateCondition = function(cond) {
[13:37:08.581]                   save_rds <- function (object, pathname, ...) 
[13:37:08.581]                   {
[13:37:08.581]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:37:08.581]                     if (file_test("-f", pathname_tmp)) {
[13:37:08.581]                       fi_tmp <- file.info(pathname_tmp)
[13:37:08.581]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:37:08.581]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:08.581]                         fi_tmp[["mtime"]])
[13:37:08.581]                     }
[13:37:08.581]                     tryCatch({
[13:37:08.581]                       saveRDS(object, file = pathname_tmp, ...)
[13:37:08.581]                     }, error = function(ex) {
[13:37:08.581]                       msg <- conditionMessage(ex)
[13:37:08.581]                       fi_tmp <- file.info(pathname_tmp)
[13:37:08.581]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:37:08.581]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:08.581]                         fi_tmp[["mtime"]], msg)
[13:37:08.581]                       ex$message <- msg
[13:37:08.581]                       stop(ex)
[13:37:08.581]                     })
[13:37:08.581]                     stopifnot(file_test("-f", pathname_tmp))
[13:37:08.581]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:37:08.581]                     if (!res || file_test("-f", pathname_tmp)) {
[13:37:08.581]                       fi_tmp <- file.info(pathname_tmp)
[13:37:08.581]                       fi <- file.info(pathname)
[13:37:08.581]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:37:08.581]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:08.581]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:37:08.581]                         fi[["size"]], fi[["mtime"]])
[13:37:08.581]                       stop(msg)
[13:37:08.581]                     }
[13:37:08.581]                     invisible(pathname)
[13:37:08.581]                   }
[13:37:08.581]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:37:08.581]                     rootPath = tempdir()) 
[13:37:08.581]                   {
[13:37:08.581]                     obj <- list(time = Sys.time(), condition = cond)
[13:37:08.581]                     file <- tempfile(pattern = class(cond)[1], 
[13:37:08.581]                       tmpdir = path, fileext = ".rds")
[13:37:08.581]                     save_rds(obj, file)
[13:37:08.581]                   }
[13:37:08.581]                   saveImmediateCondition(cond, path = "/tmp/RtmptV9aIe/.future/immediateConditions")
[13:37:08.581]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.581]                   {
[13:37:08.581]                     inherits <- base::inherits
[13:37:08.581]                     invokeRestart <- base::invokeRestart
[13:37:08.581]                     is.null <- base::is.null
[13:37:08.581]                     muffled <- FALSE
[13:37:08.581]                     if (inherits(cond, "message")) {
[13:37:08.581]                       muffled <- grepl(pattern, "muffleMessage")
[13:37:08.581]                       if (muffled) 
[13:37:08.581]                         invokeRestart("muffleMessage")
[13:37:08.581]                     }
[13:37:08.581]                     else if (inherits(cond, "warning")) {
[13:37:08.581]                       muffled <- grepl(pattern, "muffleWarning")
[13:37:08.581]                       if (muffled) 
[13:37:08.581]                         invokeRestart("muffleWarning")
[13:37:08.581]                     }
[13:37:08.581]                     else if (inherits(cond, "condition")) {
[13:37:08.581]                       if (!is.null(pattern)) {
[13:37:08.581]                         computeRestarts <- base::computeRestarts
[13:37:08.581]                         grepl <- base::grepl
[13:37:08.581]                         restarts <- computeRestarts(cond)
[13:37:08.581]                         for (restart in restarts) {
[13:37:08.581]                           name <- restart$name
[13:37:08.581]                           if (is.null(name)) 
[13:37:08.581]                             next
[13:37:08.581]                           if (!grepl(pattern, name)) 
[13:37:08.581]                             next
[13:37:08.581]                           invokeRestart(restart)
[13:37:08.581]                           muffled <- TRUE
[13:37:08.581]                           break
[13:37:08.581]                         }
[13:37:08.581]                       }
[13:37:08.581]                     }
[13:37:08.581]                     invisible(muffled)
[13:37:08.581]                   }
[13:37:08.581]                   muffleCondition(cond)
[13:37:08.581]                 })
[13:37:08.581]             }))
[13:37:08.581]             future::FutureResult(value = ...future.value$value, 
[13:37:08.581]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.581]                   ...future.rng), globalenv = if (FALSE) 
[13:37:08.581]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:08.581]                     ...future.globalenv.names))
[13:37:08.581]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:08.581]         }, condition = base::local({
[13:37:08.581]             c <- base::c
[13:37:08.581]             inherits <- base::inherits
[13:37:08.581]             invokeRestart <- base::invokeRestart
[13:37:08.581]             length <- base::length
[13:37:08.581]             list <- base::list
[13:37:08.581]             seq.int <- base::seq.int
[13:37:08.581]             signalCondition <- base::signalCondition
[13:37:08.581]             sys.calls <- base::sys.calls
[13:37:08.581]             `[[` <- base::`[[`
[13:37:08.581]             `+` <- base::`+`
[13:37:08.581]             `<<-` <- base::`<<-`
[13:37:08.581]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:08.581]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:08.581]                   3L)]
[13:37:08.581]             }
[13:37:08.581]             function(cond) {
[13:37:08.581]                 is_error <- inherits(cond, "error")
[13:37:08.581]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:08.581]                   NULL)
[13:37:08.581]                 if (is_error) {
[13:37:08.581]                   sessionInformation <- function() {
[13:37:08.581]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:08.581]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:08.581]                       search = base::search(), system = base::Sys.info())
[13:37:08.581]                   }
[13:37:08.581]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.581]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:08.581]                     cond$call), session = sessionInformation(), 
[13:37:08.581]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:08.581]                   signalCondition(cond)
[13:37:08.581]                 }
[13:37:08.581]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:08.581]                 "immediateCondition"))) {
[13:37:08.581]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:08.581]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.581]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:08.581]                   if (TRUE && !signal) {
[13:37:08.581]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.581]                     {
[13:37:08.581]                       inherits <- base::inherits
[13:37:08.581]                       invokeRestart <- base::invokeRestart
[13:37:08.581]                       is.null <- base::is.null
[13:37:08.581]                       muffled <- FALSE
[13:37:08.581]                       if (inherits(cond, "message")) {
[13:37:08.581]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.581]                         if (muffled) 
[13:37:08.581]                           invokeRestart("muffleMessage")
[13:37:08.581]                       }
[13:37:08.581]                       else if (inherits(cond, "warning")) {
[13:37:08.581]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.581]                         if (muffled) 
[13:37:08.581]                           invokeRestart("muffleWarning")
[13:37:08.581]                       }
[13:37:08.581]                       else if (inherits(cond, "condition")) {
[13:37:08.581]                         if (!is.null(pattern)) {
[13:37:08.581]                           computeRestarts <- base::computeRestarts
[13:37:08.581]                           grepl <- base::grepl
[13:37:08.581]                           restarts <- computeRestarts(cond)
[13:37:08.581]                           for (restart in restarts) {
[13:37:08.581]                             name <- restart$name
[13:37:08.581]                             if (is.null(name)) 
[13:37:08.581]                               next
[13:37:08.581]                             if (!grepl(pattern, name)) 
[13:37:08.581]                               next
[13:37:08.581]                             invokeRestart(restart)
[13:37:08.581]                             muffled <- TRUE
[13:37:08.581]                             break
[13:37:08.581]                           }
[13:37:08.581]                         }
[13:37:08.581]                       }
[13:37:08.581]                       invisible(muffled)
[13:37:08.581]                     }
[13:37:08.581]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.581]                   }
[13:37:08.581]                 }
[13:37:08.581]                 else {
[13:37:08.581]                   if (TRUE) {
[13:37:08.581]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.581]                     {
[13:37:08.581]                       inherits <- base::inherits
[13:37:08.581]                       invokeRestart <- base::invokeRestart
[13:37:08.581]                       is.null <- base::is.null
[13:37:08.581]                       muffled <- FALSE
[13:37:08.581]                       if (inherits(cond, "message")) {
[13:37:08.581]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.581]                         if (muffled) 
[13:37:08.581]                           invokeRestart("muffleMessage")
[13:37:08.581]                       }
[13:37:08.581]                       else if (inherits(cond, "warning")) {
[13:37:08.581]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.581]                         if (muffled) 
[13:37:08.581]                           invokeRestart("muffleWarning")
[13:37:08.581]                       }
[13:37:08.581]                       else if (inherits(cond, "condition")) {
[13:37:08.581]                         if (!is.null(pattern)) {
[13:37:08.581]                           computeRestarts <- base::computeRestarts
[13:37:08.581]                           grepl <- base::grepl
[13:37:08.581]                           restarts <- computeRestarts(cond)
[13:37:08.581]                           for (restart in restarts) {
[13:37:08.581]                             name <- restart$name
[13:37:08.581]                             if (is.null(name)) 
[13:37:08.581]                               next
[13:37:08.581]                             if (!grepl(pattern, name)) 
[13:37:08.581]                               next
[13:37:08.581]                             invokeRestart(restart)
[13:37:08.581]                             muffled <- TRUE
[13:37:08.581]                             break
[13:37:08.581]                           }
[13:37:08.581]                         }
[13:37:08.581]                       }
[13:37:08.581]                       invisible(muffled)
[13:37:08.581]                     }
[13:37:08.581]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.581]                   }
[13:37:08.581]                 }
[13:37:08.581]             }
[13:37:08.581]         }))
[13:37:08.581]     }, error = function(ex) {
[13:37:08.581]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:08.581]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.581]                 ...future.rng), started = ...future.startTime, 
[13:37:08.581]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:08.581]             version = "1.8"), class = "FutureResult")
[13:37:08.581]     }, finally = {
[13:37:08.581]         if (!identical(...future.workdir, getwd())) 
[13:37:08.581]             setwd(...future.workdir)
[13:37:08.581]         {
[13:37:08.581]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:08.581]                 ...future.oldOptions$nwarnings <- NULL
[13:37:08.581]             }
[13:37:08.581]             base::options(...future.oldOptions)
[13:37:08.581]             if (.Platform$OS.type == "windows") {
[13:37:08.581]                 old_names <- names(...future.oldEnvVars)
[13:37:08.581]                 envs <- base::Sys.getenv()
[13:37:08.581]                 names <- names(envs)
[13:37:08.581]                 common <- intersect(names, old_names)
[13:37:08.581]                 added <- setdiff(names, old_names)
[13:37:08.581]                 removed <- setdiff(old_names, names)
[13:37:08.581]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:08.581]                   envs[common]]
[13:37:08.581]                 NAMES <- toupper(changed)
[13:37:08.581]                 args <- list()
[13:37:08.581]                 for (kk in seq_along(NAMES)) {
[13:37:08.581]                   name <- changed[[kk]]
[13:37:08.581]                   NAME <- NAMES[[kk]]
[13:37:08.581]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.581]                     next
[13:37:08.581]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.581]                 }
[13:37:08.581]                 NAMES <- toupper(added)
[13:37:08.581]                 for (kk in seq_along(NAMES)) {
[13:37:08.581]                   name <- added[[kk]]
[13:37:08.581]                   NAME <- NAMES[[kk]]
[13:37:08.581]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.581]                     next
[13:37:08.581]                   args[[name]] <- ""
[13:37:08.581]                 }
[13:37:08.581]                 NAMES <- toupper(removed)
[13:37:08.581]                 for (kk in seq_along(NAMES)) {
[13:37:08.581]                   name <- removed[[kk]]
[13:37:08.581]                   NAME <- NAMES[[kk]]
[13:37:08.581]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.581]                     next
[13:37:08.581]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.581]                 }
[13:37:08.581]                 if (length(args) > 0) 
[13:37:08.581]                   base::do.call(base::Sys.setenv, args = args)
[13:37:08.581]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:08.581]             }
[13:37:08.581]             else {
[13:37:08.581]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:08.581]             }
[13:37:08.581]             {
[13:37:08.581]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:08.581]                   0L) {
[13:37:08.581]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:08.581]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:08.581]                   base::options(opts)
[13:37:08.581]                 }
[13:37:08.581]                 {
[13:37:08.581]                   {
[13:37:08.581]                     base::options(mc.cores = ...future.mc.cores.old)
[13:37:08.581]                     NULL
[13:37:08.581]                   }
[13:37:08.581]                   options(future.plan = NULL)
[13:37:08.581]                   if (is.na(NA_character_)) 
[13:37:08.581]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.581]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:08.581]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:08.581]                     .init = FALSE)
[13:37:08.581]                 }
[13:37:08.581]             }
[13:37:08.581]         }
[13:37:08.581]     })
[13:37:08.581]     if (TRUE) {
[13:37:08.581]         base::sink(type = "output", split = FALSE)
[13:37:08.581]         if (TRUE) {
[13:37:08.581]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:08.581]         }
[13:37:08.581]         else {
[13:37:08.581]             ...future.result["stdout"] <- base::list(NULL)
[13:37:08.581]         }
[13:37:08.581]         base::close(...future.stdout)
[13:37:08.581]         ...future.stdout <- NULL
[13:37:08.581]     }
[13:37:08.581]     ...future.result$conditions <- ...future.conditions
[13:37:08.581]     ...future.result$finished <- base::Sys.time()
[13:37:08.581]     ...future.result
[13:37:08.581] }
[13:37:08.583] requestCore(): workers = 2
[13:37:08.585] MulticoreFuture started
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    stop(structure(list(message = "boom"), class = c("MyError", 
        "error", "condition")))
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[13:37:08.586] plan(): Setting new future strategy stack:
[13:37:08.586] List of future strategies:
[13:37:08.586] 1. sequential:
[13:37:08.586]    - args: function (..., envir = parent.frame())
[13:37:08.586]    - tweaked: FALSE
[13:37:08.586]    - call: NULL
[13:37:08.587] plan(): nbrOfWorkers() = 1
[13:37:08.589] plan(): Setting new future strategy stack:
[13:37:08.590] List of future strategies:
[13:37:08.590] 1. multicore:
[13:37:08.590]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:37:08.590]    - tweaked: FALSE
[13:37:08.590]    - call: plan(multicore)
[13:37:08.595] plan(): nbrOfWorkers() = 2
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 95e450d1-e7b8-6209-6c23-e4c8d06e1b18
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:37:08.597] result() for MulticoreFuture ...
[13:37:08.600] result() for MulticoreFuture ...
[13:37:08.600] result() for MulticoreFuture ... done
[13:37:08.601] signalConditions() ...
[13:37:08.601]  - include = ‘immediateCondition’
[13:37:08.601]  - exclude = 
[13:37:08.601]  - resignal = FALSE
[13:37:08.601]  - Number of conditions: 1
[13:37:08.601] signalConditions() ... done
[13:37:08.602] result() for MulticoreFuture ... done
[13:37:08.602] result() for MulticoreFuture ...
[13:37:08.602] result() for MulticoreFuture ... done
[13:37:08.602] signalConditions() ...
[13:37:08.602]  - include = ‘immediateCondition’
[13:37:08.602]  - exclude = 
[13:37:08.602]  - resignal = FALSE
[13:37:08.603]  - Number of conditions: 1
[13:37:08.603] signalConditions() ... done
<MyError: boom>
[13:37:08.603] result() for MulticoreFuture ...
[13:37:08.603] result() for MulticoreFuture ... done
[13:37:08.603] result() for MulticoreFuture ...
[13:37:08.604] result() for MulticoreFuture ... done
[13:37:08.604] signalConditions() ...
[13:37:08.604]  - include = ‘immediateCondition’
[13:37:08.604]  - exclude = 
[13:37:08.604]  - resignal = FALSE
[13:37:08.604]  - Number of conditions: 1
[13:37:08.605] signalConditions() ... done
[13:37:08.605] Future state: ‘finished’
[13:37:08.605] result() for MulticoreFuture ...
[13:37:08.605] result() for MulticoreFuture ... done
[13:37:08.605] signalConditions() ...
[13:37:08.605]  - include = ‘condition’
[13:37:08.606]  - exclude = ‘immediateCondition’
[13:37:08.606]  - resignal = TRUE
[13:37:08.606]  - Number of conditions: 1
[13:37:08.606]  - Condition #1: ‘MyError’, ‘error’, ‘condition’
[13:37:08.606] signalConditions() ... done
*** multicore(..., globals = TRUE) without globals
[13:37:08.610] getGlobalsAndPackages() ...
[13:37:08.611] Searching for globals...
[13:37:08.611] - globals found: [1] ‘{’
[13:37:08.612] Searching for globals ... DONE
[13:37:08.612] Resolving globals: FALSE
[13:37:08.612] 
[13:37:08.612] 
[13:37:08.612] getGlobalsAndPackages() ... DONE
[13:37:08.613] Packages needed by the future expression (n = 0): <none>
[13:37:08.613] Packages needed by future strategies (n = 0): <none>
[13:37:08.614] {
[13:37:08.614]     {
[13:37:08.614]         {
[13:37:08.614]             ...future.startTime <- base::Sys.time()
[13:37:08.614]             {
[13:37:08.614]                 {
[13:37:08.614]                   {
[13:37:08.614]                     {
[13:37:08.614]                       base::local({
[13:37:08.614]                         has_future <- base::requireNamespace("future", 
[13:37:08.614]                           quietly = TRUE)
[13:37:08.614]                         if (has_future) {
[13:37:08.614]                           ns <- base::getNamespace("future")
[13:37:08.614]                           version <- ns[[".package"]][["version"]]
[13:37:08.614]                           if (is.null(version)) 
[13:37:08.614]                             version <- utils::packageVersion("future")
[13:37:08.614]                         }
[13:37:08.614]                         else {
[13:37:08.614]                           version <- NULL
[13:37:08.614]                         }
[13:37:08.614]                         if (!has_future || version < "1.8.0") {
[13:37:08.614]                           info <- base::c(r_version = base::gsub("R version ", 
[13:37:08.614]                             "", base::R.version$version.string), 
[13:37:08.614]                             platform = base::sprintf("%s (%s-bit)", 
[13:37:08.614]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:08.614]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:08.614]                               "release", "version")], collapse = " "), 
[13:37:08.614]                             hostname = base::Sys.info()[["nodename"]])
[13:37:08.614]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:37:08.614]                             info)
[13:37:08.614]                           info <- base::paste(info, collapse = "; ")
[13:37:08.614]                           if (!has_future) {
[13:37:08.614]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:08.614]                               info)
[13:37:08.614]                           }
[13:37:08.614]                           else {
[13:37:08.614]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:08.614]                               info, version)
[13:37:08.614]                           }
[13:37:08.614]                           base::stop(msg)
[13:37:08.614]                         }
[13:37:08.614]                       })
[13:37:08.614]                     }
[13:37:08.614]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:37:08.614]                     base::options(mc.cores = 1L)
[13:37:08.614]                   }
[13:37:08.614]                   ...future.strategy.old <- future::plan("list")
[13:37:08.614]                   options(future.plan = NULL)
[13:37:08.614]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.614]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:08.614]                 }
[13:37:08.614]                 ...future.workdir <- getwd()
[13:37:08.614]             }
[13:37:08.614]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:08.614]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:08.614]         }
[13:37:08.614]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:08.614]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:08.614]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:08.614]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:08.614]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:08.614]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:08.614]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:08.614]             base::names(...future.oldOptions))
[13:37:08.614]     }
[13:37:08.614]     if (FALSE) {
[13:37:08.614]     }
[13:37:08.614]     else {
[13:37:08.614]         if (TRUE) {
[13:37:08.614]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:08.614]                 open = "w")
[13:37:08.614]         }
[13:37:08.614]         else {
[13:37:08.614]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:08.614]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:08.614]         }
[13:37:08.614]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:08.614]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:08.614]             base::sink(type = "output", split = FALSE)
[13:37:08.614]             base::close(...future.stdout)
[13:37:08.614]         }, add = TRUE)
[13:37:08.614]     }
[13:37:08.614]     ...future.frame <- base::sys.nframe()
[13:37:08.614]     ...future.conditions <- base::list()
[13:37:08.614]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:08.614]     if (FALSE) {
[13:37:08.614]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:08.614]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:08.614]     }
[13:37:08.614]     ...future.result <- base::tryCatch({
[13:37:08.614]         base::withCallingHandlers({
[13:37:08.614]             ...future.value <- base::withVisible(base::local({
[13:37:08.614]                 withCallingHandlers({
[13:37:08.614]                   {
[13:37:08.614]                     42L
[13:37:08.614]                   }
[13:37:08.614]                 }, immediateCondition = function(cond) {
[13:37:08.614]                   save_rds <- function (object, pathname, ...) 
[13:37:08.614]                   {
[13:37:08.614]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:37:08.614]                     if (file_test("-f", pathname_tmp)) {
[13:37:08.614]                       fi_tmp <- file.info(pathname_tmp)
[13:37:08.614]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:37:08.614]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:08.614]                         fi_tmp[["mtime"]])
[13:37:08.614]                     }
[13:37:08.614]                     tryCatch({
[13:37:08.614]                       saveRDS(object, file = pathname_tmp, ...)
[13:37:08.614]                     }, error = function(ex) {
[13:37:08.614]                       msg <- conditionMessage(ex)
[13:37:08.614]                       fi_tmp <- file.info(pathname_tmp)
[13:37:08.614]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:37:08.614]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:08.614]                         fi_tmp[["mtime"]], msg)
[13:37:08.614]                       ex$message <- msg
[13:37:08.614]                       stop(ex)
[13:37:08.614]                     })
[13:37:08.614]                     stopifnot(file_test("-f", pathname_tmp))
[13:37:08.614]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:37:08.614]                     if (!res || file_test("-f", pathname_tmp)) {
[13:37:08.614]                       fi_tmp <- file.info(pathname_tmp)
[13:37:08.614]                       fi <- file.info(pathname)
[13:37:08.614]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:37:08.614]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:08.614]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:37:08.614]                         fi[["size"]], fi[["mtime"]])
[13:37:08.614]                       stop(msg)
[13:37:08.614]                     }
[13:37:08.614]                     invisible(pathname)
[13:37:08.614]                   }
[13:37:08.614]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:37:08.614]                     rootPath = tempdir()) 
[13:37:08.614]                   {
[13:37:08.614]                     obj <- list(time = Sys.time(), condition = cond)
[13:37:08.614]                     file <- tempfile(pattern = class(cond)[1], 
[13:37:08.614]                       tmpdir = path, fileext = ".rds")
[13:37:08.614]                     save_rds(obj, file)
[13:37:08.614]                   }
[13:37:08.614]                   saveImmediateCondition(cond, path = "/tmp/RtmptV9aIe/.future/immediateConditions")
[13:37:08.614]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.614]                   {
[13:37:08.614]                     inherits <- base::inherits
[13:37:08.614]                     invokeRestart <- base::invokeRestart
[13:37:08.614]                     is.null <- base::is.null
[13:37:08.614]                     muffled <- FALSE
[13:37:08.614]                     if (inherits(cond, "message")) {
[13:37:08.614]                       muffled <- grepl(pattern, "muffleMessage")
[13:37:08.614]                       if (muffled) 
[13:37:08.614]                         invokeRestart("muffleMessage")
[13:37:08.614]                     }
[13:37:08.614]                     else if (inherits(cond, "warning")) {
[13:37:08.614]                       muffled <- grepl(pattern, "muffleWarning")
[13:37:08.614]                       if (muffled) 
[13:37:08.614]                         invokeRestart("muffleWarning")
[13:37:08.614]                     }
[13:37:08.614]                     else if (inherits(cond, "condition")) {
[13:37:08.614]                       if (!is.null(pattern)) {
[13:37:08.614]                         computeRestarts <- base::computeRestarts
[13:37:08.614]                         grepl <- base::grepl
[13:37:08.614]                         restarts <- computeRestarts(cond)
[13:37:08.614]                         for (restart in restarts) {
[13:37:08.614]                           name <- restart$name
[13:37:08.614]                           if (is.null(name)) 
[13:37:08.614]                             next
[13:37:08.614]                           if (!grepl(pattern, name)) 
[13:37:08.614]                             next
[13:37:08.614]                           invokeRestart(restart)
[13:37:08.614]                           muffled <- TRUE
[13:37:08.614]                           break
[13:37:08.614]                         }
[13:37:08.614]                       }
[13:37:08.614]                     }
[13:37:08.614]                     invisible(muffled)
[13:37:08.614]                   }
[13:37:08.614]                   muffleCondition(cond)
[13:37:08.614]                 })
[13:37:08.614]             }))
[13:37:08.614]             future::FutureResult(value = ...future.value$value, 
[13:37:08.614]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.614]                   ...future.rng), globalenv = if (FALSE) 
[13:37:08.614]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:08.614]                     ...future.globalenv.names))
[13:37:08.614]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:08.614]         }, condition = base::local({
[13:37:08.614]             c <- base::c
[13:37:08.614]             inherits <- base::inherits
[13:37:08.614]             invokeRestart <- base::invokeRestart
[13:37:08.614]             length <- base::length
[13:37:08.614]             list <- base::list
[13:37:08.614]             seq.int <- base::seq.int
[13:37:08.614]             signalCondition <- base::signalCondition
[13:37:08.614]             sys.calls <- base::sys.calls
[13:37:08.614]             `[[` <- base::`[[`
[13:37:08.614]             `+` <- base::`+`
[13:37:08.614]             `<<-` <- base::`<<-`
[13:37:08.614]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:08.614]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:08.614]                   3L)]
[13:37:08.614]             }
[13:37:08.614]             function(cond) {
[13:37:08.614]                 is_error <- inherits(cond, "error")
[13:37:08.614]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:08.614]                   NULL)
[13:37:08.614]                 if (is_error) {
[13:37:08.614]                   sessionInformation <- function() {
[13:37:08.614]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:08.614]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:08.614]                       search = base::search(), system = base::Sys.info())
[13:37:08.614]                   }
[13:37:08.614]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.614]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:08.614]                     cond$call), session = sessionInformation(), 
[13:37:08.614]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:08.614]                   signalCondition(cond)
[13:37:08.614]                 }
[13:37:08.614]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:08.614]                 "immediateCondition"))) {
[13:37:08.614]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:08.614]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.614]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:08.614]                   if (TRUE && !signal) {
[13:37:08.614]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.614]                     {
[13:37:08.614]                       inherits <- base::inherits
[13:37:08.614]                       invokeRestart <- base::invokeRestart
[13:37:08.614]                       is.null <- base::is.null
[13:37:08.614]                       muffled <- FALSE
[13:37:08.614]                       if (inherits(cond, "message")) {
[13:37:08.614]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.614]                         if (muffled) 
[13:37:08.614]                           invokeRestart("muffleMessage")
[13:37:08.614]                       }
[13:37:08.614]                       else if (inherits(cond, "warning")) {
[13:37:08.614]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.614]                         if (muffled) 
[13:37:08.614]                           invokeRestart("muffleWarning")
[13:37:08.614]                       }
[13:37:08.614]                       else if (inherits(cond, "condition")) {
[13:37:08.614]                         if (!is.null(pattern)) {
[13:37:08.614]                           computeRestarts <- base::computeRestarts
[13:37:08.614]                           grepl <- base::grepl
[13:37:08.614]                           restarts <- computeRestarts(cond)
[13:37:08.614]                           for (restart in restarts) {
[13:37:08.614]                             name <- restart$name
[13:37:08.614]                             if (is.null(name)) 
[13:37:08.614]                               next
[13:37:08.614]                             if (!grepl(pattern, name)) 
[13:37:08.614]                               next
[13:37:08.614]                             invokeRestart(restart)
[13:37:08.614]                             muffled <- TRUE
[13:37:08.614]                             break
[13:37:08.614]                           }
[13:37:08.614]                         }
[13:37:08.614]                       }
[13:37:08.614]                       invisible(muffled)
[13:37:08.614]                     }
[13:37:08.614]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.614]                   }
[13:37:08.614]                 }
[13:37:08.614]                 else {
[13:37:08.614]                   if (TRUE) {
[13:37:08.614]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.614]                     {
[13:37:08.614]                       inherits <- base::inherits
[13:37:08.614]                       invokeRestart <- base::invokeRestart
[13:37:08.614]                       is.null <- base::is.null
[13:37:08.614]                       muffled <- FALSE
[13:37:08.614]                       if (inherits(cond, "message")) {
[13:37:08.614]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.614]                         if (muffled) 
[13:37:08.614]                           invokeRestart("muffleMessage")
[13:37:08.614]                       }
[13:37:08.614]                       else if (inherits(cond, "warning")) {
[13:37:08.614]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.614]                         if (muffled) 
[13:37:08.614]                           invokeRestart("muffleWarning")
[13:37:08.614]                       }
[13:37:08.614]                       else if (inherits(cond, "condition")) {
[13:37:08.614]                         if (!is.null(pattern)) {
[13:37:08.614]                           computeRestarts <- base::computeRestarts
[13:37:08.614]                           grepl <- base::grepl
[13:37:08.614]                           restarts <- computeRestarts(cond)
[13:37:08.614]                           for (restart in restarts) {
[13:37:08.614]                             name <- restart$name
[13:37:08.614]                             if (is.null(name)) 
[13:37:08.614]                               next
[13:37:08.614]                             if (!grepl(pattern, name)) 
[13:37:08.614]                               next
[13:37:08.614]                             invokeRestart(restart)
[13:37:08.614]                             muffled <- TRUE
[13:37:08.614]                             break
[13:37:08.614]                           }
[13:37:08.614]                         }
[13:37:08.614]                       }
[13:37:08.614]                       invisible(muffled)
[13:37:08.614]                     }
[13:37:08.614]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.614]                   }
[13:37:08.614]                 }
[13:37:08.614]             }
[13:37:08.614]         }))
[13:37:08.614]     }, error = function(ex) {
[13:37:08.614]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:08.614]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.614]                 ...future.rng), started = ...future.startTime, 
[13:37:08.614]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:08.614]             version = "1.8"), class = "FutureResult")
[13:37:08.614]     }, finally = {
[13:37:08.614]         if (!identical(...future.workdir, getwd())) 
[13:37:08.614]             setwd(...future.workdir)
[13:37:08.614]         {
[13:37:08.614]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:08.614]                 ...future.oldOptions$nwarnings <- NULL
[13:37:08.614]             }
[13:37:08.614]             base::options(...future.oldOptions)
[13:37:08.614]             if (.Platform$OS.type == "windows") {
[13:37:08.614]                 old_names <- names(...future.oldEnvVars)
[13:37:08.614]                 envs <- base::Sys.getenv()
[13:37:08.614]                 names <- names(envs)
[13:37:08.614]                 common <- intersect(names, old_names)
[13:37:08.614]                 added <- setdiff(names, old_names)
[13:37:08.614]                 removed <- setdiff(old_names, names)
[13:37:08.614]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:08.614]                   envs[common]]
[13:37:08.614]                 NAMES <- toupper(changed)
[13:37:08.614]                 args <- list()
[13:37:08.614]                 for (kk in seq_along(NAMES)) {
[13:37:08.614]                   name <- changed[[kk]]
[13:37:08.614]                   NAME <- NAMES[[kk]]
[13:37:08.614]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.614]                     next
[13:37:08.614]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.614]                 }
[13:37:08.614]                 NAMES <- toupper(added)
[13:37:08.614]                 for (kk in seq_along(NAMES)) {
[13:37:08.614]                   name <- added[[kk]]
[13:37:08.614]                   NAME <- NAMES[[kk]]
[13:37:08.614]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.614]                     next
[13:37:08.614]                   args[[name]] <- ""
[13:37:08.614]                 }
[13:37:08.614]                 NAMES <- toupper(removed)
[13:37:08.614]                 for (kk in seq_along(NAMES)) {
[13:37:08.614]                   name <- removed[[kk]]
[13:37:08.614]                   NAME <- NAMES[[kk]]
[13:37:08.614]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.614]                     next
[13:37:08.614]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.614]                 }
[13:37:08.614]                 if (length(args) > 0) 
[13:37:08.614]                   base::do.call(base::Sys.setenv, args = args)
[13:37:08.614]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:08.614]             }
[13:37:08.614]             else {
[13:37:08.614]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:08.614]             }
[13:37:08.614]             {
[13:37:08.614]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:08.614]                   0L) {
[13:37:08.614]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:08.614]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:08.614]                   base::options(opts)
[13:37:08.614]                 }
[13:37:08.614]                 {
[13:37:08.614]                   {
[13:37:08.614]                     base::options(mc.cores = ...future.mc.cores.old)
[13:37:08.614]                     NULL
[13:37:08.614]                   }
[13:37:08.614]                   options(future.plan = NULL)
[13:37:08.614]                   if (is.na(NA_character_)) 
[13:37:08.614]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.614]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:08.614]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:08.614]                     .init = FALSE)
[13:37:08.614]                 }
[13:37:08.614]             }
[13:37:08.614]         }
[13:37:08.614]     })
[13:37:08.614]     if (TRUE) {
[13:37:08.614]         base::sink(type = "output", split = FALSE)
[13:37:08.614]         if (TRUE) {
[13:37:08.614]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:08.614]         }
[13:37:08.614]         else {
[13:37:08.614]             ...future.result["stdout"] <- base::list(NULL)
[13:37:08.614]         }
[13:37:08.614]         base::close(...future.stdout)
[13:37:08.614]         ...future.stdout <- NULL
[13:37:08.614]     }
[13:37:08.614]     ...future.result$conditions <- ...future.conditions
[13:37:08.614]     ...future.result$finished <- base::Sys.time()
[13:37:08.614]     ...future.result
[13:37:08.614] }
[13:37:08.616] requestCore(): workers = 2
[13:37:08.618] MulticoreFuture started
[13:37:08.619] plan(): Setting new future strategy stack:
[13:37:08.620] List of future strategies:
[13:37:08.620] 1. sequential:
[13:37:08.620]    - args: function (..., envir = parent.frame())
[13:37:08.620]    - tweaked: FALSE
[13:37:08.620]    - call: NULL
[13:37:08.621] plan(): nbrOfWorkers() = 1
[13:37:08.623] plan(): Setting new future strategy stack:
[13:37:08.623] List of future strategies:
[13:37:08.623] 1. multicore:
[13:37:08.623]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:37:08.623]    - tweaked: FALSE
[13:37:08.623]    - call: plan(multicore)
[13:37:08.629] plan(): nbrOfWorkers() = 2
[1] FALSE
[13:37:08.629] result() for MulticoreFuture ...
[13:37:08.630] result() for MulticoreFuture ...
[13:37:08.631] result() for MulticoreFuture ... done
[13:37:08.631] result() for MulticoreFuture ... done
[13:37:08.631] result() for MulticoreFuture ...
[13:37:08.631] result() for MulticoreFuture ... done
[1] 42
*** multicore(..., globals = TRUE) with globals
[13:37:08.636] getGlobalsAndPackages() ...
[13:37:08.636] Searching for globals...
[13:37:08.639] - globals found: [4] ‘{’, ‘<-’, ‘*’, ‘a’
[13:37:08.639] Searching for globals ... DONE
[13:37:08.639] Resolving globals: FALSE
[13:37:08.640] The total size of the 1 globals is 56 bytes (56 bytes)
[13:37:08.641] The total size of the 1 globals exported for future expression (‘{; b <- 3; c <- 2; a * b * c; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[13:37:08.641] - globals: [1] ‘a’
[13:37:08.641] 
[13:37:08.641] getGlobalsAndPackages() ... DONE
[13:37:08.642] Packages needed by the future expression (n = 0): <none>
[13:37:08.642] Packages needed by future strategies (n = 0): <none>
[13:37:08.647] {
[13:37:08.647]     {
[13:37:08.647]         {
[13:37:08.647]             ...future.startTime <- base::Sys.time()
[13:37:08.647]             {
[13:37:08.647]                 {
[13:37:08.647]                   {
[13:37:08.647]                     {
[13:37:08.647]                       base::local({
[13:37:08.647]                         has_future <- base::requireNamespace("future", 
[13:37:08.647]                           quietly = TRUE)
[13:37:08.647]                         if (has_future) {
[13:37:08.647]                           ns <- base::getNamespace("future")
[13:37:08.647]                           version <- ns[[".package"]][["version"]]
[13:37:08.647]                           if (is.null(version)) 
[13:37:08.647]                             version <- utils::packageVersion("future")
[13:37:08.647]                         }
[13:37:08.647]                         else {
[13:37:08.647]                           version <- NULL
[13:37:08.647]                         }
[13:37:08.647]                         if (!has_future || version < "1.8.0") {
[13:37:08.647]                           info <- base::c(r_version = base::gsub("R version ", 
[13:37:08.647]                             "", base::R.version$version.string), 
[13:37:08.647]                             platform = base::sprintf("%s (%s-bit)", 
[13:37:08.647]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:08.647]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:08.647]                               "release", "version")], collapse = " "), 
[13:37:08.647]                             hostname = base::Sys.info()[["nodename"]])
[13:37:08.647]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:37:08.647]                             info)
[13:37:08.647]                           info <- base::paste(info, collapse = "; ")
[13:37:08.647]                           if (!has_future) {
[13:37:08.647]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:08.647]                               info)
[13:37:08.647]                           }
[13:37:08.647]                           else {
[13:37:08.647]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:08.647]                               info, version)
[13:37:08.647]                           }
[13:37:08.647]                           base::stop(msg)
[13:37:08.647]                         }
[13:37:08.647]                       })
[13:37:08.647]                     }
[13:37:08.647]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:37:08.647]                     base::options(mc.cores = 1L)
[13:37:08.647]                   }
[13:37:08.647]                   ...future.strategy.old <- future::plan("list")
[13:37:08.647]                   options(future.plan = NULL)
[13:37:08.647]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.647]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:08.647]                 }
[13:37:08.647]                 ...future.workdir <- getwd()
[13:37:08.647]             }
[13:37:08.647]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:08.647]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:08.647]         }
[13:37:08.647]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:08.647]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:08.647]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:08.647]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:08.647]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:08.647]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:08.647]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:08.647]             base::names(...future.oldOptions))
[13:37:08.647]     }
[13:37:08.647]     if (FALSE) {
[13:37:08.647]     }
[13:37:08.647]     else {
[13:37:08.647]         if (TRUE) {
[13:37:08.647]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:08.647]                 open = "w")
[13:37:08.647]         }
[13:37:08.647]         else {
[13:37:08.647]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:08.647]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:08.647]         }
[13:37:08.647]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:08.647]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:08.647]             base::sink(type = "output", split = FALSE)
[13:37:08.647]             base::close(...future.stdout)
[13:37:08.647]         }, add = TRUE)
[13:37:08.647]     }
[13:37:08.647]     ...future.frame <- base::sys.nframe()
[13:37:08.647]     ...future.conditions <- base::list()
[13:37:08.647]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:08.647]     if (FALSE) {
[13:37:08.647]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:08.647]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:08.647]     }
[13:37:08.647]     ...future.result <- base::tryCatch({
[13:37:08.647]         base::withCallingHandlers({
[13:37:08.647]             ...future.value <- base::withVisible(base::local({
[13:37:08.647]                 withCallingHandlers({
[13:37:08.647]                   {
[13:37:08.647]                     b <- 3
[13:37:08.647]                     c <- 2
[13:37:08.647]                     a * b * c
[13:37:08.647]                   }
[13:37:08.647]                 }, immediateCondition = function(cond) {
[13:37:08.647]                   save_rds <- function (object, pathname, ...) 
[13:37:08.647]                   {
[13:37:08.647]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:37:08.647]                     if (file_test("-f", pathname_tmp)) {
[13:37:08.647]                       fi_tmp <- file.info(pathname_tmp)
[13:37:08.647]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:37:08.647]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:08.647]                         fi_tmp[["mtime"]])
[13:37:08.647]                     }
[13:37:08.647]                     tryCatch({
[13:37:08.647]                       saveRDS(object, file = pathname_tmp, ...)
[13:37:08.647]                     }, error = function(ex) {
[13:37:08.647]                       msg <- conditionMessage(ex)
[13:37:08.647]                       fi_tmp <- file.info(pathname_tmp)
[13:37:08.647]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:37:08.647]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:08.647]                         fi_tmp[["mtime"]], msg)
[13:37:08.647]                       ex$message <- msg
[13:37:08.647]                       stop(ex)
[13:37:08.647]                     })
[13:37:08.647]                     stopifnot(file_test("-f", pathname_tmp))
[13:37:08.647]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:37:08.647]                     if (!res || file_test("-f", pathname_tmp)) {
[13:37:08.647]                       fi_tmp <- file.info(pathname_tmp)
[13:37:08.647]                       fi <- file.info(pathname)
[13:37:08.647]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:37:08.647]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:08.647]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:37:08.647]                         fi[["size"]], fi[["mtime"]])
[13:37:08.647]                       stop(msg)
[13:37:08.647]                     }
[13:37:08.647]                     invisible(pathname)
[13:37:08.647]                   }
[13:37:08.647]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:37:08.647]                     rootPath = tempdir()) 
[13:37:08.647]                   {
[13:37:08.647]                     obj <- list(time = Sys.time(), condition = cond)
[13:37:08.647]                     file <- tempfile(pattern = class(cond)[1], 
[13:37:08.647]                       tmpdir = path, fileext = ".rds")
[13:37:08.647]                     save_rds(obj, file)
[13:37:08.647]                   }
[13:37:08.647]                   saveImmediateCondition(cond, path = "/tmp/RtmptV9aIe/.future/immediateConditions")
[13:37:08.647]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.647]                   {
[13:37:08.647]                     inherits <- base::inherits
[13:37:08.647]                     invokeRestart <- base::invokeRestart
[13:37:08.647]                     is.null <- base::is.null
[13:37:08.647]                     muffled <- FALSE
[13:37:08.647]                     if (inherits(cond, "message")) {
[13:37:08.647]                       muffled <- grepl(pattern, "muffleMessage")
[13:37:08.647]                       if (muffled) 
[13:37:08.647]                         invokeRestart("muffleMessage")
[13:37:08.647]                     }
[13:37:08.647]                     else if (inherits(cond, "warning")) {
[13:37:08.647]                       muffled <- grepl(pattern, "muffleWarning")
[13:37:08.647]                       if (muffled) 
[13:37:08.647]                         invokeRestart("muffleWarning")
[13:37:08.647]                     }
[13:37:08.647]                     else if (inherits(cond, "condition")) {
[13:37:08.647]                       if (!is.null(pattern)) {
[13:37:08.647]                         computeRestarts <- base::computeRestarts
[13:37:08.647]                         grepl <- base::grepl
[13:37:08.647]                         restarts <- computeRestarts(cond)
[13:37:08.647]                         for (restart in restarts) {
[13:37:08.647]                           name <- restart$name
[13:37:08.647]                           if (is.null(name)) 
[13:37:08.647]                             next
[13:37:08.647]                           if (!grepl(pattern, name)) 
[13:37:08.647]                             next
[13:37:08.647]                           invokeRestart(restart)
[13:37:08.647]                           muffled <- TRUE
[13:37:08.647]                           break
[13:37:08.647]                         }
[13:37:08.647]                       }
[13:37:08.647]                     }
[13:37:08.647]                     invisible(muffled)
[13:37:08.647]                   }
[13:37:08.647]                   muffleCondition(cond)
[13:37:08.647]                 })
[13:37:08.647]             }))
[13:37:08.647]             future::FutureResult(value = ...future.value$value, 
[13:37:08.647]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.647]                   ...future.rng), globalenv = if (FALSE) 
[13:37:08.647]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:08.647]                     ...future.globalenv.names))
[13:37:08.647]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:08.647]         }, condition = base::local({
[13:37:08.647]             c <- base::c
[13:37:08.647]             inherits <- base::inherits
[13:37:08.647]             invokeRestart <- base::invokeRestart
[13:37:08.647]             length <- base::length
[13:37:08.647]             list <- base::list
[13:37:08.647]             seq.int <- base::seq.int
[13:37:08.647]             signalCondition <- base::signalCondition
[13:37:08.647]             sys.calls <- base::sys.calls
[13:37:08.647]             `[[` <- base::`[[`
[13:37:08.647]             `+` <- base::`+`
[13:37:08.647]             `<<-` <- base::`<<-`
[13:37:08.647]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:08.647]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:08.647]                   3L)]
[13:37:08.647]             }
[13:37:08.647]             function(cond) {
[13:37:08.647]                 is_error <- inherits(cond, "error")
[13:37:08.647]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:08.647]                   NULL)
[13:37:08.647]                 if (is_error) {
[13:37:08.647]                   sessionInformation <- function() {
[13:37:08.647]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:08.647]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:08.647]                       search = base::search(), system = base::Sys.info())
[13:37:08.647]                   }
[13:37:08.647]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.647]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:08.647]                     cond$call), session = sessionInformation(), 
[13:37:08.647]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:08.647]                   signalCondition(cond)
[13:37:08.647]                 }
[13:37:08.647]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:08.647]                 "immediateCondition"))) {
[13:37:08.647]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:08.647]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.647]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:08.647]                   if (TRUE && !signal) {
[13:37:08.647]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.647]                     {
[13:37:08.647]                       inherits <- base::inherits
[13:37:08.647]                       invokeRestart <- base::invokeRestart
[13:37:08.647]                       is.null <- base::is.null
[13:37:08.647]                       muffled <- FALSE
[13:37:08.647]                       if (inherits(cond, "message")) {
[13:37:08.647]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.647]                         if (muffled) 
[13:37:08.647]                           invokeRestart("muffleMessage")
[13:37:08.647]                       }
[13:37:08.647]                       else if (inherits(cond, "warning")) {
[13:37:08.647]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.647]                         if (muffled) 
[13:37:08.647]                           invokeRestart("muffleWarning")
[13:37:08.647]                       }
[13:37:08.647]                       else if (inherits(cond, "condition")) {
[13:37:08.647]                         if (!is.null(pattern)) {
[13:37:08.647]                           computeRestarts <- base::computeRestarts
[13:37:08.647]                           grepl <- base::grepl
[13:37:08.647]                           restarts <- computeRestarts(cond)
[13:37:08.647]                           for (restart in restarts) {
[13:37:08.647]                             name <- restart$name
[13:37:08.647]                             if (is.null(name)) 
[13:37:08.647]                               next
[13:37:08.647]                             if (!grepl(pattern, name)) 
[13:37:08.647]                               next
[13:37:08.647]                             invokeRestart(restart)
[13:37:08.647]                             muffled <- TRUE
[13:37:08.647]                             break
[13:37:08.647]                           }
[13:37:08.647]                         }
[13:37:08.647]                       }
[13:37:08.647]                       invisible(muffled)
[13:37:08.647]                     }
[13:37:08.647]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.647]                   }
[13:37:08.647]                 }
[13:37:08.647]                 else {
[13:37:08.647]                   if (TRUE) {
[13:37:08.647]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.647]                     {
[13:37:08.647]                       inherits <- base::inherits
[13:37:08.647]                       invokeRestart <- base::invokeRestart
[13:37:08.647]                       is.null <- base::is.null
[13:37:08.647]                       muffled <- FALSE
[13:37:08.647]                       if (inherits(cond, "message")) {
[13:37:08.647]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.647]                         if (muffled) 
[13:37:08.647]                           invokeRestart("muffleMessage")
[13:37:08.647]                       }
[13:37:08.647]                       else if (inherits(cond, "warning")) {
[13:37:08.647]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.647]                         if (muffled) 
[13:37:08.647]                           invokeRestart("muffleWarning")
[13:37:08.647]                       }
[13:37:08.647]                       else if (inherits(cond, "condition")) {
[13:37:08.647]                         if (!is.null(pattern)) {
[13:37:08.647]                           computeRestarts <- base::computeRestarts
[13:37:08.647]                           grepl <- base::grepl
[13:37:08.647]                           restarts <- computeRestarts(cond)
[13:37:08.647]                           for (restart in restarts) {
[13:37:08.647]                             name <- restart$name
[13:37:08.647]                             if (is.null(name)) 
[13:37:08.647]                               next
[13:37:08.647]                             if (!grepl(pattern, name)) 
[13:37:08.647]                               next
[13:37:08.647]                             invokeRestart(restart)
[13:37:08.647]                             muffled <- TRUE
[13:37:08.647]                             break
[13:37:08.647]                           }
[13:37:08.647]                         }
[13:37:08.647]                       }
[13:37:08.647]                       invisible(muffled)
[13:37:08.647]                     }
[13:37:08.647]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.647]                   }
[13:37:08.647]                 }
[13:37:08.647]             }
[13:37:08.647]         }))
[13:37:08.647]     }, error = function(ex) {
[13:37:08.647]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:08.647]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.647]                 ...future.rng), started = ...future.startTime, 
[13:37:08.647]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:08.647]             version = "1.8"), class = "FutureResult")
[13:37:08.647]     }, finally = {
[13:37:08.647]         if (!identical(...future.workdir, getwd())) 
[13:37:08.647]             setwd(...future.workdir)
[13:37:08.647]         {
[13:37:08.647]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:08.647]                 ...future.oldOptions$nwarnings <- NULL
[13:37:08.647]             }
[13:37:08.647]             base::options(...future.oldOptions)
[13:37:08.647]             if (.Platform$OS.type == "windows") {
[13:37:08.647]                 old_names <- names(...future.oldEnvVars)
[13:37:08.647]                 envs <- base::Sys.getenv()
[13:37:08.647]                 names <- names(envs)
[13:37:08.647]                 common <- intersect(names, old_names)
[13:37:08.647]                 added <- setdiff(names, old_names)
[13:37:08.647]                 removed <- setdiff(old_names, names)
[13:37:08.647]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:08.647]                   envs[common]]
[13:37:08.647]                 NAMES <- toupper(changed)
[13:37:08.647]                 args <- list()
[13:37:08.647]                 for (kk in seq_along(NAMES)) {
[13:37:08.647]                   name <- changed[[kk]]
[13:37:08.647]                   NAME <- NAMES[[kk]]
[13:37:08.647]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.647]                     next
[13:37:08.647]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.647]                 }
[13:37:08.647]                 NAMES <- toupper(added)
[13:37:08.647]                 for (kk in seq_along(NAMES)) {
[13:37:08.647]                   name <- added[[kk]]
[13:37:08.647]                   NAME <- NAMES[[kk]]
[13:37:08.647]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.647]                     next
[13:37:08.647]                   args[[name]] <- ""
[13:37:08.647]                 }
[13:37:08.647]                 NAMES <- toupper(removed)
[13:37:08.647]                 for (kk in seq_along(NAMES)) {
[13:37:08.647]                   name <- removed[[kk]]
[13:37:08.647]                   NAME <- NAMES[[kk]]
[13:37:08.647]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.647]                     next
[13:37:08.647]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.647]                 }
[13:37:08.647]                 if (length(args) > 0) 
[13:37:08.647]                   base::do.call(base::Sys.setenv, args = args)
[13:37:08.647]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:08.647]             }
[13:37:08.647]             else {
[13:37:08.647]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:08.647]             }
[13:37:08.647]             {
[13:37:08.647]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:08.647]                   0L) {
[13:37:08.647]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:08.647]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:08.647]                   base::options(opts)
[13:37:08.647]                 }
[13:37:08.647]                 {
[13:37:08.647]                   {
[13:37:08.647]                     base::options(mc.cores = ...future.mc.cores.old)
[13:37:08.647]                     NULL
[13:37:08.647]                   }
[13:37:08.647]                   options(future.plan = NULL)
[13:37:08.647]                   if (is.na(NA_character_)) 
[13:37:08.647]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.647]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:08.647]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:08.647]                     .init = FALSE)
[13:37:08.647]                 }
[13:37:08.647]             }
[13:37:08.647]         }
[13:37:08.647]     })
[13:37:08.647]     if (TRUE) {
[13:37:08.647]         base::sink(type = "output", split = FALSE)
[13:37:08.647]         if (TRUE) {
[13:37:08.647]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:08.647]         }
[13:37:08.647]         else {
[13:37:08.647]             ...future.result["stdout"] <- base::list(NULL)
[13:37:08.647]         }
[13:37:08.647]         base::close(...future.stdout)
[13:37:08.647]         ...future.stdout <- NULL
[13:37:08.647]     }
[13:37:08.647]     ...future.result$conditions <- ...future.conditions
[13:37:08.647]     ...future.result$finished <- base::Sys.time()
[13:37:08.647]     ...future.result
[13:37:08.647] }
[13:37:08.649] assign_globals() ...
[13:37:08.650] List of 1
[13:37:08.650]  $ a: num 0
[13:37:08.650]  - attr(*, "where")=List of 1
[13:37:08.650]   ..$ a:<environment: R_EmptyEnv> 
[13:37:08.650]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:37:08.650]  - attr(*, "resolved")= logi FALSE
[13:37:08.650]  - attr(*, "total_size")= num 56
[13:37:08.654] - copied ‘a’ to environment
[13:37:08.654] assign_globals() ... done
[13:37:08.654] requestCore(): workers = 2
[13:37:08.657] MulticoreFuture started
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    b <- 3
    c <- 2
    a * b * c
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 56 bytes (numeric ‘a’ of 56 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[13:37:08.661] plan(): Setting new future strategy stack:
[13:37:08.661] List of future strategies:
[13:37:08.661] 1. sequential:
[13:37:08.661]    - args: function (..., envir = parent.frame())
[13:37:08.661]    - tweaked: FALSE
[13:37:08.661]    - call: NULL
[13:37:08.662] plan(): nbrOfWorkers() = 1
[13:37:08.665] plan(): Setting new future strategy stack:
[13:37:08.665] List of future strategies:
[13:37:08.665] 1. multicore:
[13:37:08.665]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:37:08.665]    - tweaked: FALSE
[13:37:08.665]    - call: plan(multicore)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 95e450d1-e7b8-6209-6c23-e4c8d06e1b18
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:37:08.670] result() for MulticoreFuture ...
[13:37:08.673] plan(): nbrOfWorkers() = 2
[13:37:08.674] result() for MulticoreFuture ...
[13:37:08.675] result() for MulticoreFuture ... done
[13:37:08.675] result() for MulticoreFuture ... done
[13:37:08.675] result() for MulticoreFuture ...
[13:37:08.675] result() for MulticoreFuture ... done
[1] 0
*** multicore(..., globals = TRUE) with globals and blocking
 - Creating multicore future #1 ...
[13:37:08.680] getGlobalsAndPackages() ...
[13:37:08.680] Searching for globals...
[13:37:08.681] - globals found: [2] ‘{’, ‘ii’
[13:37:08.682] Searching for globals ... DONE
[13:37:08.682] Resolving globals: FALSE
[13:37:08.682] The total size of the 1 globals is 56 bytes (56 bytes)
[13:37:08.683] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[13:37:08.683] - globals: [1] ‘ii’
[13:37:08.683] 
[13:37:08.683] getGlobalsAndPackages() ... DONE
[13:37:08.684] Packages needed by the future expression (n = 0): <none>
[13:37:08.684] Packages needed by future strategies (n = 0): <none>
[13:37:08.684] {
[13:37:08.684]     {
[13:37:08.684]         {
[13:37:08.684]             ...future.startTime <- base::Sys.time()
[13:37:08.684]             {
[13:37:08.684]                 {
[13:37:08.684]                   {
[13:37:08.684]                     {
[13:37:08.684]                       base::local({
[13:37:08.684]                         has_future <- base::requireNamespace("future", 
[13:37:08.684]                           quietly = TRUE)
[13:37:08.684]                         if (has_future) {
[13:37:08.684]                           ns <- base::getNamespace("future")
[13:37:08.684]                           version <- ns[[".package"]][["version"]]
[13:37:08.684]                           if (is.null(version)) 
[13:37:08.684]                             version <- utils::packageVersion("future")
[13:37:08.684]                         }
[13:37:08.684]                         else {
[13:37:08.684]                           version <- NULL
[13:37:08.684]                         }
[13:37:08.684]                         if (!has_future || version < "1.8.0") {
[13:37:08.684]                           info <- base::c(r_version = base::gsub("R version ", 
[13:37:08.684]                             "", base::R.version$version.string), 
[13:37:08.684]                             platform = base::sprintf("%s (%s-bit)", 
[13:37:08.684]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:08.684]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:08.684]                               "release", "version")], collapse = " "), 
[13:37:08.684]                             hostname = base::Sys.info()[["nodename"]])
[13:37:08.684]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:37:08.684]                             info)
[13:37:08.684]                           info <- base::paste(info, collapse = "; ")
[13:37:08.684]                           if (!has_future) {
[13:37:08.684]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:08.684]                               info)
[13:37:08.684]                           }
[13:37:08.684]                           else {
[13:37:08.684]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:08.684]                               info, version)
[13:37:08.684]                           }
[13:37:08.684]                           base::stop(msg)
[13:37:08.684]                         }
[13:37:08.684]                       })
[13:37:08.684]                     }
[13:37:08.684]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:37:08.684]                     base::options(mc.cores = 1L)
[13:37:08.684]                   }
[13:37:08.684]                   ...future.strategy.old <- future::plan("list")
[13:37:08.684]                   options(future.plan = NULL)
[13:37:08.684]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.684]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:08.684]                 }
[13:37:08.684]                 ...future.workdir <- getwd()
[13:37:08.684]             }
[13:37:08.684]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:08.684]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:08.684]         }
[13:37:08.684]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:08.684]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:08.684]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:08.684]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:08.684]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:08.684]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:08.684]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:08.684]             base::names(...future.oldOptions))
[13:37:08.684]     }
[13:37:08.684]     if (FALSE) {
[13:37:08.684]     }
[13:37:08.684]     else {
[13:37:08.684]         if (TRUE) {
[13:37:08.684]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:08.684]                 open = "w")
[13:37:08.684]         }
[13:37:08.684]         else {
[13:37:08.684]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:08.684]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:08.684]         }
[13:37:08.684]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:08.684]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:08.684]             base::sink(type = "output", split = FALSE)
[13:37:08.684]             base::close(...future.stdout)
[13:37:08.684]         }, add = TRUE)
[13:37:08.684]     }
[13:37:08.684]     ...future.frame <- base::sys.nframe()
[13:37:08.684]     ...future.conditions <- base::list()
[13:37:08.684]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:08.684]     if (FALSE) {
[13:37:08.684]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:08.684]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:08.684]     }
[13:37:08.684]     ...future.result <- base::tryCatch({
[13:37:08.684]         base::withCallingHandlers({
[13:37:08.684]             ...future.value <- base::withVisible(base::local({
[13:37:08.684]                 withCallingHandlers({
[13:37:08.684]                   {
[13:37:08.684]                     ii
[13:37:08.684]                   }
[13:37:08.684]                 }, immediateCondition = function(cond) {
[13:37:08.684]                   save_rds <- function (object, pathname, ...) 
[13:37:08.684]                   {
[13:37:08.684]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:37:08.684]                     if (file_test("-f", pathname_tmp)) {
[13:37:08.684]                       fi_tmp <- file.info(pathname_tmp)
[13:37:08.684]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:37:08.684]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:08.684]                         fi_tmp[["mtime"]])
[13:37:08.684]                     }
[13:37:08.684]                     tryCatch({
[13:37:08.684]                       saveRDS(object, file = pathname_tmp, ...)
[13:37:08.684]                     }, error = function(ex) {
[13:37:08.684]                       msg <- conditionMessage(ex)
[13:37:08.684]                       fi_tmp <- file.info(pathname_tmp)
[13:37:08.684]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:37:08.684]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:08.684]                         fi_tmp[["mtime"]], msg)
[13:37:08.684]                       ex$message <- msg
[13:37:08.684]                       stop(ex)
[13:37:08.684]                     })
[13:37:08.684]                     stopifnot(file_test("-f", pathname_tmp))
[13:37:08.684]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:37:08.684]                     if (!res || file_test("-f", pathname_tmp)) {
[13:37:08.684]                       fi_tmp <- file.info(pathname_tmp)
[13:37:08.684]                       fi <- file.info(pathname)
[13:37:08.684]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:37:08.684]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:08.684]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:37:08.684]                         fi[["size"]], fi[["mtime"]])
[13:37:08.684]                       stop(msg)
[13:37:08.684]                     }
[13:37:08.684]                     invisible(pathname)
[13:37:08.684]                   }
[13:37:08.684]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:37:08.684]                     rootPath = tempdir()) 
[13:37:08.684]                   {
[13:37:08.684]                     obj <- list(time = Sys.time(), condition = cond)
[13:37:08.684]                     file <- tempfile(pattern = class(cond)[1], 
[13:37:08.684]                       tmpdir = path, fileext = ".rds")
[13:37:08.684]                     save_rds(obj, file)
[13:37:08.684]                   }
[13:37:08.684]                   saveImmediateCondition(cond, path = "/tmp/RtmptV9aIe/.future/immediateConditions")
[13:37:08.684]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.684]                   {
[13:37:08.684]                     inherits <- base::inherits
[13:37:08.684]                     invokeRestart <- base::invokeRestart
[13:37:08.684]                     is.null <- base::is.null
[13:37:08.684]                     muffled <- FALSE
[13:37:08.684]                     if (inherits(cond, "message")) {
[13:37:08.684]                       muffled <- grepl(pattern, "muffleMessage")
[13:37:08.684]                       if (muffled) 
[13:37:08.684]                         invokeRestart("muffleMessage")
[13:37:08.684]                     }
[13:37:08.684]                     else if (inherits(cond, "warning")) {
[13:37:08.684]                       muffled <- grepl(pattern, "muffleWarning")
[13:37:08.684]                       if (muffled) 
[13:37:08.684]                         invokeRestart("muffleWarning")
[13:37:08.684]                     }
[13:37:08.684]                     else if (inherits(cond, "condition")) {
[13:37:08.684]                       if (!is.null(pattern)) {
[13:37:08.684]                         computeRestarts <- base::computeRestarts
[13:37:08.684]                         grepl <- base::grepl
[13:37:08.684]                         restarts <- computeRestarts(cond)
[13:37:08.684]                         for (restart in restarts) {
[13:37:08.684]                           name <- restart$name
[13:37:08.684]                           if (is.null(name)) 
[13:37:08.684]                             next
[13:37:08.684]                           if (!grepl(pattern, name)) 
[13:37:08.684]                             next
[13:37:08.684]                           invokeRestart(restart)
[13:37:08.684]                           muffled <- TRUE
[13:37:08.684]                           break
[13:37:08.684]                         }
[13:37:08.684]                       }
[13:37:08.684]                     }
[13:37:08.684]                     invisible(muffled)
[13:37:08.684]                   }
[13:37:08.684]                   muffleCondition(cond)
[13:37:08.684]                 })
[13:37:08.684]             }))
[13:37:08.684]             future::FutureResult(value = ...future.value$value, 
[13:37:08.684]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.684]                   ...future.rng), globalenv = if (FALSE) 
[13:37:08.684]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:08.684]                     ...future.globalenv.names))
[13:37:08.684]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:08.684]         }, condition = base::local({
[13:37:08.684]             c <- base::c
[13:37:08.684]             inherits <- base::inherits
[13:37:08.684]             invokeRestart <- base::invokeRestart
[13:37:08.684]             length <- base::length
[13:37:08.684]             list <- base::list
[13:37:08.684]             seq.int <- base::seq.int
[13:37:08.684]             signalCondition <- base::signalCondition
[13:37:08.684]             sys.calls <- base::sys.calls
[13:37:08.684]             `[[` <- base::`[[`
[13:37:08.684]             `+` <- base::`+`
[13:37:08.684]             `<<-` <- base::`<<-`
[13:37:08.684]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:08.684]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:08.684]                   3L)]
[13:37:08.684]             }
[13:37:08.684]             function(cond) {
[13:37:08.684]                 is_error <- inherits(cond, "error")
[13:37:08.684]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:08.684]                   NULL)
[13:37:08.684]                 if (is_error) {
[13:37:08.684]                   sessionInformation <- function() {
[13:37:08.684]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:08.684]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:08.684]                       search = base::search(), system = base::Sys.info())
[13:37:08.684]                   }
[13:37:08.684]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.684]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:08.684]                     cond$call), session = sessionInformation(), 
[13:37:08.684]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:08.684]                   signalCondition(cond)
[13:37:08.684]                 }
[13:37:08.684]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:08.684]                 "immediateCondition"))) {
[13:37:08.684]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:08.684]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.684]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:08.684]                   if (TRUE && !signal) {
[13:37:08.684]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.684]                     {
[13:37:08.684]                       inherits <- base::inherits
[13:37:08.684]                       invokeRestart <- base::invokeRestart
[13:37:08.684]                       is.null <- base::is.null
[13:37:08.684]                       muffled <- FALSE
[13:37:08.684]                       if (inherits(cond, "message")) {
[13:37:08.684]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.684]                         if (muffled) 
[13:37:08.684]                           invokeRestart("muffleMessage")
[13:37:08.684]                       }
[13:37:08.684]                       else if (inherits(cond, "warning")) {
[13:37:08.684]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.684]                         if (muffled) 
[13:37:08.684]                           invokeRestart("muffleWarning")
[13:37:08.684]                       }
[13:37:08.684]                       else if (inherits(cond, "condition")) {
[13:37:08.684]                         if (!is.null(pattern)) {
[13:37:08.684]                           computeRestarts <- base::computeRestarts
[13:37:08.684]                           grepl <- base::grepl
[13:37:08.684]                           restarts <- computeRestarts(cond)
[13:37:08.684]                           for (restart in restarts) {
[13:37:08.684]                             name <- restart$name
[13:37:08.684]                             if (is.null(name)) 
[13:37:08.684]                               next
[13:37:08.684]                             if (!grepl(pattern, name)) 
[13:37:08.684]                               next
[13:37:08.684]                             invokeRestart(restart)
[13:37:08.684]                             muffled <- TRUE
[13:37:08.684]                             break
[13:37:08.684]                           }
[13:37:08.684]                         }
[13:37:08.684]                       }
[13:37:08.684]                       invisible(muffled)
[13:37:08.684]                     }
[13:37:08.684]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.684]                   }
[13:37:08.684]                 }
[13:37:08.684]                 else {
[13:37:08.684]                   if (TRUE) {
[13:37:08.684]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.684]                     {
[13:37:08.684]                       inherits <- base::inherits
[13:37:08.684]                       invokeRestart <- base::invokeRestart
[13:37:08.684]                       is.null <- base::is.null
[13:37:08.684]                       muffled <- FALSE
[13:37:08.684]                       if (inherits(cond, "message")) {
[13:37:08.684]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.684]                         if (muffled) 
[13:37:08.684]                           invokeRestart("muffleMessage")
[13:37:08.684]                       }
[13:37:08.684]                       else if (inherits(cond, "warning")) {
[13:37:08.684]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.684]                         if (muffled) 
[13:37:08.684]                           invokeRestart("muffleWarning")
[13:37:08.684]                       }
[13:37:08.684]                       else if (inherits(cond, "condition")) {
[13:37:08.684]                         if (!is.null(pattern)) {
[13:37:08.684]                           computeRestarts <- base::computeRestarts
[13:37:08.684]                           grepl <- base::grepl
[13:37:08.684]                           restarts <- computeRestarts(cond)
[13:37:08.684]                           for (restart in restarts) {
[13:37:08.684]                             name <- restart$name
[13:37:08.684]                             if (is.null(name)) 
[13:37:08.684]                               next
[13:37:08.684]                             if (!grepl(pattern, name)) 
[13:37:08.684]                               next
[13:37:08.684]                             invokeRestart(restart)
[13:37:08.684]                             muffled <- TRUE
[13:37:08.684]                             break
[13:37:08.684]                           }
[13:37:08.684]                         }
[13:37:08.684]                       }
[13:37:08.684]                       invisible(muffled)
[13:37:08.684]                     }
[13:37:08.684]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.684]                   }
[13:37:08.684]                 }
[13:37:08.684]             }
[13:37:08.684]         }))
[13:37:08.684]     }, error = function(ex) {
[13:37:08.684]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:08.684]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.684]                 ...future.rng), started = ...future.startTime, 
[13:37:08.684]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:08.684]             version = "1.8"), class = "FutureResult")
[13:37:08.684]     }, finally = {
[13:37:08.684]         if (!identical(...future.workdir, getwd())) 
[13:37:08.684]             setwd(...future.workdir)
[13:37:08.684]         {
[13:37:08.684]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:08.684]                 ...future.oldOptions$nwarnings <- NULL
[13:37:08.684]             }
[13:37:08.684]             base::options(...future.oldOptions)
[13:37:08.684]             if (.Platform$OS.type == "windows") {
[13:37:08.684]                 old_names <- names(...future.oldEnvVars)
[13:37:08.684]                 envs <- base::Sys.getenv()
[13:37:08.684]                 names <- names(envs)
[13:37:08.684]                 common <- intersect(names, old_names)
[13:37:08.684]                 added <- setdiff(names, old_names)
[13:37:08.684]                 removed <- setdiff(old_names, names)
[13:37:08.684]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:08.684]                   envs[common]]
[13:37:08.684]                 NAMES <- toupper(changed)
[13:37:08.684]                 args <- list()
[13:37:08.684]                 for (kk in seq_along(NAMES)) {
[13:37:08.684]                   name <- changed[[kk]]
[13:37:08.684]                   NAME <- NAMES[[kk]]
[13:37:08.684]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.684]                     next
[13:37:08.684]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.684]                 }
[13:37:08.684]                 NAMES <- toupper(added)
[13:37:08.684]                 for (kk in seq_along(NAMES)) {
[13:37:08.684]                   name <- added[[kk]]
[13:37:08.684]                   NAME <- NAMES[[kk]]
[13:37:08.684]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.684]                     next
[13:37:08.684]                   args[[name]] <- ""
[13:37:08.684]                 }
[13:37:08.684]                 NAMES <- toupper(removed)
[13:37:08.684]                 for (kk in seq_along(NAMES)) {
[13:37:08.684]                   name <- removed[[kk]]
[13:37:08.684]                   NAME <- NAMES[[kk]]
[13:37:08.684]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.684]                     next
[13:37:08.684]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.684]                 }
[13:37:08.684]                 if (length(args) > 0) 
[13:37:08.684]                   base::do.call(base::Sys.setenv, args = args)
[13:37:08.684]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:08.684]             }
[13:37:08.684]             else {
[13:37:08.684]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:08.684]             }
[13:37:08.684]             {
[13:37:08.684]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:08.684]                   0L) {
[13:37:08.684]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:08.684]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:08.684]                   base::options(opts)
[13:37:08.684]                 }
[13:37:08.684]                 {
[13:37:08.684]                   {
[13:37:08.684]                     base::options(mc.cores = ...future.mc.cores.old)
[13:37:08.684]                     NULL
[13:37:08.684]                   }
[13:37:08.684]                   options(future.plan = NULL)
[13:37:08.684]                   if (is.na(NA_character_)) 
[13:37:08.684]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.684]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:08.684]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:08.684]                     .init = FALSE)
[13:37:08.684]                 }
[13:37:08.684]             }
[13:37:08.684]         }
[13:37:08.684]     })
[13:37:08.684]     if (TRUE) {
[13:37:08.684]         base::sink(type = "output", split = FALSE)
[13:37:08.684]         if (TRUE) {
[13:37:08.684]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:08.684]         }
[13:37:08.684]         else {
[13:37:08.684]             ...future.result["stdout"] <- base::list(NULL)
[13:37:08.684]         }
[13:37:08.684]         base::close(...future.stdout)
[13:37:08.684]         ...future.stdout <- NULL
[13:37:08.684]     }
[13:37:08.684]     ...future.result$conditions <- ...future.conditions
[13:37:08.684]     ...future.result$finished <- base::Sys.time()
[13:37:08.684]     ...future.result
[13:37:08.684] }
[13:37:08.687] assign_globals() ...
[13:37:08.687] List of 1
[13:37:08.687]  $ ii: int 1
[13:37:08.687]  - attr(*, "where")=List of 1
[13:37:08.687]   ..$ ii:<environment: R_EmptyEnv> 
[13:37:08.687]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:37:08.687]  - attr(*, "resolved")= logi FALSE
[13:37:08.687]  - attr(*, "total_size")= num 56
[13:37:08.690] - copied ‘ii’ to environment
[13:37:08.690] assign_globals() ... done
[13:37:08.690] requestCore(): workers = 2
[13:37:08.692] MulticoreFuture started
 - Creating multicore future #2 ...
[13:37:08.693] plan(): Setting new future strategy stack:
[13:37:08.693] List of future strategies:
[13:37:08.693] 1. sequential:
[13:37:08.693]    - args: function (..., envir = parent.frame())
[13:37:08.693]    - tweaked: FALSE
[13:37:08.693]    - call: NULL
[13:37:08.694] plan(): nbrOfWorkers() = 1
[13:37:08.696] plan(): Setting new future strategy stack:
[13:37:08.696] List of future strategies:
[13:37:08.696] 1. multicore:
[13:37:08.696]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:37:08.696]    - tweaked: FALSE
[13:37:08.696]    - call: plan(multicore)
[13:37:08.697] getGlobalsAndPackages() ...
[13:37:08.697] Searching for globals...
[13:37:08.699] - globals found: [2] ‘{’, ‘ii’
[13:37:08.699] Searching for globals ... DONE
[13:37:08.699] Resolving globals: FALSE
[13:37:08.700] The total size of the 1 globals is 56 bytes (56 bytes)
[13:37:08.700] plan(): nbrOfWorkers() = 2
[13:37:08.700] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[13:37:08.701] - globals: [1] ‘ii’
[13:37:08.701] 
[13:37:08.701] getGlobalsAndPackages() ... DONE
[13:37:08.702] Packages needed by the future expression (n = 0): <none>
[13:37:08.702] Packages needed by future strategies (n = 0): <none>
[13:37:08.703] {
[13:37:08.703]     {
[13:37:08.703]         {
[13:37:08.703]             ...future.startTime <- base::Sys.time()
[13:37:08.703]             {
[13:37:08.703]                 {
[13:37:08.703]                   {
[13:37:08.703]                     {
[13:37:08.703]                       base::local({
[13:37:08.703]                         has_future <- base::requireNamespace("future", 
[13:37:08.703]                           quietly = TRUE)
[13:37:08.703]                         if (has_future) {
[13:37:08.703]                           ns <- base::getNamespace("future")
[13:37:08.703]                           version <- ns[[".package"]][["version"]]
[13:37:08.703]                           if (is.null(version)) 
[13:37:08.703]                             version <- utils::packageVersion("future")
[13:37:08.703]                         }
[13:37:08.703]                         else {
[13:37:08.703]                           version <- NULL
[13:37:08.703]                         }
[13:37:08.703]                         if (!has_future || version < "1.8.0") {
[13:37:08.703]                           info <- base::c(r_version = base::gsub("R version ", 
[13:37:08.703]                             "", base::R.version$version.string), 
[13:37:08.703]                             platform = base::sprintf("%s (%s-bit)", 
[13:37:08.703]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:08.703]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:08.703]                               "release", "version")], collapse = " "), 
[13:37:08.703]                             hostname = base::Sys.info()[["nodename"]])
[13:37:08.703]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:37:08.703]                             info)
[13:37:08.703]                           info <- base::paste(info, collapse = "; ")
[13:37:08.703]                           if (!has_future) {
[13:37:08.703]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:08.703]                               info)
[13:37:08.703]                           }
[13:37:08.703]                           else {
[13:37:08.703]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:08.703]                               info, version)
[13:37:08.703]                           }
[13:37:08.703]                           base::stop(msg)
[13:37:08.703]                         }
[13:37:08.703]                       })
[13:37:08.703]                     }
[13:37:08.703]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:37:08.703]                     base::options(mc.cores = 1L)
[13:37:08.703]                   }
[13:37:08.703]                   ...future.strategy.old <- future::plan("list")
[13:37:08.703]                   options(future.plan = NULL)
[13:37:08.703]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.703]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:08.703]                 }
[13:37:08.703]                 ...future.workdir <- getwd()
[13:37:08.703]             }
[13:37:08.703]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:08.703]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:08.703]         }
[13:37:08.703]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:08.703]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:08.703]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:08.703]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:08.703]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:08.703]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:08.703]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:08.703]             base::names(...future.oldOptions))
[13:37:08.703]     }
[13:37:08.703]     if (FALSE) {
[13:37:08.703]     }
[13:37:08.703]     else {
[13:37:08.703]         if (TRUE) {
[13:37:08.703]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:08.703]                 open = "w")
[13:37:08.703]         }
[13:37:08.703]         else {
[13:37:08.703]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:08.703]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:08.703]         }
[13:37:08.703]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:08.703]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:08.703]             base::sink(type = "output", split = FALSE)
[13:37:08.703]             base::close(...future.stdout)
[13:37:08.703]         }, add = TRUE)
[13:37:08.703]     }
[13:37:08.703]     ...future.frame <- base::sys.nframe()
[13:37:08.703]     ...future.conditions <- base::list()
[13:37:08.703]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:08.703]     if (FALSE) {
[13:37:08.703]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:08.703]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:08.703]     }
[13:37:08.703]     ...future.result <- base::tryCatch({
[13:37:08.703]         base::withCallingHandlers({
[13:37:08.703]             ...future.value <- base::withVisible(base::local({
[13:37:08.703]                 withCallingHandlers({
[13:37:08.703]                   {
[13:37:08.703]                     ii
[13:37:08.703]                   }
[13:37:08.703]                 }, immediateCondition = function(cond) {
[13:37:08.703]                   save_rds <- function (object, pathname, ...) 
[13:37:08.703]                   {
[13:37:08.703]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:37:08.703]                     if (file_test("-f", pathname_tmp)) {
[13:37:08.703]                       fi_tmp <- file.info(pathname_tmp)
[13:37:08.703]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:37:08.703]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:08.703]                         fi_tmp[["mtime"]])
[13:37:08.703]                     }
[13:37:08.703]                     tryCatch({
[13:37:08.703]                       saveRDS(object, file = pathname_tmp, ...)
[13:37:08.703]                     }, error = function(ex) {
[13:37:08.703]                       msg <- conditionMessage(ex)
[13:37:08.703]                       fi_tmp <- file.info(pathname_tmp)
[13:37:08.703]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:37:08.703]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:08.703]                         fi_tmp[["mtime"]], msg)
[13:37:08.703]                       ex$message <- msg
[13:37:08.703]                       stop(ex)
[13:37:08.703]                     })
[13:37:08.703]                     stopifnot(file_test("-f", pathname_tmp))
[13:37:08.703]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:37:08.703]                     if (!res || file_test("-f", pathname_tmp)) {
[13:37:08.703]                       fi_tmp <- file.info(pathname_tmp)
[13:37:08.703]                       fi <- file.info(pathname)
[13:37:08.703]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:37:08.703]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:08.703]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:37:08.703]                         fi[["size"]], fi[["mtime"]])
[13:37:08.703]                       stop(msg)
[13:37:08.703]                     }
[13:37:08.703]                     invisible(pathname)
[13:37:08.703]                   }
[13:37:08.703]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:37:08.703]                     rootPath = tempdir()) 
[13:37:08.703]                   {
[13:37:08.703]                     obj <- list(time = Sys.time(), condition = cond)
[13:37:08.703]                     file <- tempfile(pattern = class(cond)[1], 
[13:37:08.703]                       tmpdir = path, fileext = ".rds")
[13:37:08.703]                     save_rds(obj, file)
[13:37:08.703]                   }
[13:37:08.703]                   saveImmediateCondition(cond, path = "/tmp/RtmptV9aIe/.future/immediateConditions")
[13:37:08.703]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.703]                   {
[13:37:08.703]                     inherits <- base::inherits
[13:37:08.703]                     invokeRestart <- base::invokeRestart
[13:37:08.703]                     is.null <- base::is.null
[13:37:08.703]                     muffled <- FALSE
[13:37:08.703]                     if (inherits(cond, "message")) {
[13:37:08.703]                       muffled <- grepl(pattern, "muffleMessage")
[13:37:08.703]                       if (muffled) 
[13:37:08.703]                         invokeRestart("muffleMessage")
[13:37:08.703]                     }
[13:37:08.703]                     else if (inherits(cond, "warning")) {
[13:37:08.703]                       muffled <- grepl(pattern, "muffleWarning")
[13:37:08.703]                       if (muffled) 
[13:37:08.703]                         invokeRestart("muffleWarning")
[13:37:08.703]                     }
[13:37:08.703]                     else if (inherits(cond, "condition")) {
[13:37:08.703]                       if (!is.null(pattern)) {
[13:37:08.703]                         computeRestarts <- base::computeRestarts
[13:37:08.703]                         grepl <- base::grepl
[13:37:08.703]                         restarts <- computeRestarts(cond)
[13:37:08.703]                         for (restart in restarts) {
[13:37:08.703]                           name <- restart$name
[13:37:08.703]                           if (is.null(name)) 
[13:37:08.703]                             next
[13:37:08.703]                           if (!grepl(pattern, name)) 
[13:37:08.703]                             next
[13:37:08.703]                           invokeRestart(restart)
[13:37:08.703]                           muffled <- TRUE
[13:37:08.703]                           break
[13:37:08.703]                         }
[13:37:08.703]                       }
[13:37:08.703]                     }
[13:37:08.703]                     invisible(muffled)
[13:37:08.703]                   }
[13:37:08.703]                   muffleCondition(cond)
[13:37:08.703]                 })
[13:37:08.703]             }))
[13:37:08.703]             future::FutureResult(value = ...future.value$value, 
[13:37:08.703]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.703]                   ...future.rng), globalenv = if (FALSE) 
[13:37:08.703]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:08.703]                     ...future.globalenv.names))
[13:37:08.703]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:08.703]         }, condition = base::local({
[13:37:08.703]             c <- base::c
[13:37:08.703]             inherits <- base::inherits
[13:37:08.703]             invokeRestart <- base::invokeRestart
[13:37:08.703]             length <- base::length
[13:37:08.703]             list <- base::list
[13:37:08.703]             seq.int <- base::seq.int
[13:37:08.703]             signalCondition <- base::signalCondition
[13:37:08.703]             sys.calls <- base::sys.calls
[13:37:08.703]             `[[` <- base::`[[`
[13:37:08.703]             `+` <- base::`+`
[13:37:08.703]             `<<-` <- base::`<<-`
[13:37:08.703]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:08.703]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:08.703]                   3L)]
[13:37:08.703]             }
[13:37:08.703]             function(cond) {
[13:37:08.703]                 is_error <- inherits(cond, "error")
[13:37:08.703]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:08.703]                   NULL)
[13:37:08.703]                 if (is_error) {
[13:37:08.703]                   sessionInformation <- function() {
[13:37:08.703]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:08.703]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:08.703]                       search = base::search(), system = base::Sys.info())
[13:37:08.703]                   }
[13:37:08.703]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.703]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:08.703]                     cond$call), session = sessionInformation(), 
[13:37:08.703]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:08.703]                   signalCondition(cond)
[13:37:08.703]                 }
[13:37:08.703]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:08.703]                 "immediateCondition"))) {
[13:37:08.703]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:08.703]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.703]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:08.703]                   if (TRUE && !signal) {
[13:37:08.703]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.703]                     {
[13:37:08.703]                       inherits <- base::inherits
[13:37:08.703]                       invokeRestart <- base::invokeRestart
[13:37:08.703]                       is.null <- base::is.null
[13:37:08.703]                       muffled <- FALSE
[13:37:08.703]                       if (inherits(cond, "message")) {
[13:37:08.703]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.703]                         if (muffled) 
[13:37:08.703]                           invokeRestart("muffleMessage")
[13:37:08.703]                       }
[13:37:08.703]                       else if (inherits(cond, "warning")) {
[13:37:08.703]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.703]                         if (muffled) 
[13:37:08.703]                           invokeRestart("muffleWarning")
[13:37:08.703]                       }
[13:37:08.703]                       else if (inherits(cond, "condition")) {
[13:37:08.703]                         if (!is.null(pattern)) {
[13:37:08.703]                           computeRestarts <- base::computeRestarts
[13:37:08.703]                           grepl <- base::grepl
[13:37:08.703]                           restarts <- computeRestarts(cond)
[13:37:08.703]                           for (restart in restarts) {
[13:37:08.703]                             name <- restart$name
[13:37:08.703]                             if (is.null(name)) 
[13:37:08.703]                               next
[13:37:08.703]                             if (!grepl(pattern, name)) 
[13:37:08.703]                               next
[13:37:08.703]                             invokeRestart(restart)
[13:37:08.703]                             muffled <- TRUE
[13:37:08.703]                             break
[13:37:08.703]                           }
[13:37:08.703]                         }
[13:37:08.703]                       }
[13:37:08.703]                       invisible(muffled)
[13:37:08.703]                     }
[13:37:08.703]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.703]                   }
[13:37:08.703]                 }
[13:37:08.703]                 else {
[13:37:08.703]                   if (TRUE) {
[13:37:08.703]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.703]                     {
[13:37:08.703]                       inherits <- base::inherits
[13:37:08.703]                       invokeRestart <- base::invokeRestart
[13:37:08.703]                       is.null <- base::is.null
[13:37:08.703]                       muffled <- FALSE
[13:37:08.703]                       if (inherits(cond, "message")) {
[13:37:08.703]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.703]                         if (muffled) 
[13:37:08.703]                           invokeRestart("muffleMessage")
[13:37:08.703]                       }
[13:37:08.703]                       else if (inherits(cond, "warning")) {
[13:37:08.703]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.703]                         if (muffled) 
[13:37:08.703]                           invokeRestart("muffleWarning")
[13:37:08.703]                       }
[13:37:08.703]                       else if (inherits(cond, "condition")) {
[13:37:08.703]                         if (!is.null(pattern)) {
[13:37:08.703]                           computeRestarts <- base::computeRestarts
[13:37:08.703]                           grepl <- base::grepl
[13:37:08.703]                           restarts <- computeRestarts(cond)
[13:37:08.703]                           for (restart in restarts) {
[13:37:08.703]                             name <- restart$name
[13:37:08.703]                             if (is.null(name)) 
[13:37:08.703]                               next
[13:37:08.703]                             if (!grepl(pattern, name)) 
[13:37:08.703]                               next
[13:37:08.703]                             invokeRestart(restart)
[13:37:08.703]                             muffled <- TRUE
[13:37:08.703]                             break
[13:37:08.703]                           }
[13:37:08.703]                         }
[13:37:08.703]                       }
[13:37:08.703]                       invisible(muffled)
[13:37:08.703]                     }
[13:37:08.703]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.703]                   }
[13:37:08.703]                 }
[13:37:08.703]             }
[13:37:08.703]         }))
[13:37:08.703]     }, error = function(ex) {
[13:37:08.703]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:08.703]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.703]                 ...future.rng), started = ...future.startTime, 
[13:37:08.703]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:08.703]             version = "1.8"), class = "FutureResult")
[13:37:08.703]     }, finally = {
[13:37:08.703]         if (!identical(...future.workdir, getwd())) 
[13:37:08.703]             setwd(...future.workdir)
[13:37:08.703]         {
[13:37:08.703]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:08.703]                 ...future.oldOptions$nwarnings <- NULL
[13:37:08.703]             }
[13:37:08.703]             base::options(...future.oldOptions)
[13:37:08.703]             if (.Platform$OS.type == "windows") {
[13:37:08.703]                 old_names <- names(...future.oldEnvVars)
[13:37:08.703]                 envs <- base::Sys.getenv()
[13:37:08.703]                 names <- names(envs)
[13:37:08.703]                 common <- intersect(names, old_names)
[13:37:08.703]                 added <- setdiff(names, old_names)
[13:37:08.703]                 removed <- setdiff(old_names, names)
[13:37:08.703]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:08.703]                   envs[common]]
[13:37:08.703]                 NAMES <- toupper(changed)
[13:37:08.703]                 args <- list()
[13:37:08.703]                 for (kk in seq_along(NAMES)) {
[13:37:08.703]                   name <- changed[[kk]]
[13:37:08.703]                   NAME <- NAMES[[kk]]
[13:37:08.703]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.703]                     next
[13:37:08.703]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.703]                 }
[13:37:08.703]                 NAMES <- toupper(added)
[13:37:08.703]                 for (kk in seq_along(NAMES)) {
[13:37:08.703]                   name <- added[[kk]]
[13:37:08.703]                   NAME <- NAMES[[kk]]
[13:37:08.703]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.703]                     next
[13:37:08.703]                   args[[name]] <- ""
[13:37:08.703]                 }
[13:37:08.703]                 NAMES <- toupper(removed)
[13:37:08.703]                 for (kk in seq_along(NAMES)) {
[13:37:08.703]                   name <- removed[[kk]]
[13:37:08.703]                   NAME <- NAMES[[kk]]
[13:37:08.703]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.703]                     next
[13:37:08.703]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.703]                 }
[13:37:08.703]                 if (length(args) > 0) 
[13:37:08.703]                   base::do.call(base::Sys.setenv, args = args)
[13:37:08.703]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:08.703]             }
[13:37:08.703]             else {
[13:37:08.703]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:08.703]             }
[13:37:08.703]             {
[13:37:08.703]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:08.703]                   0L) {
[13:37:08.703]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:08.703]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:08.703]                   base::options(opts)
[13:37:08.703]                 }
[13:37:08.703]                 {
[13:37:08.703]                   {
[13:37:08.703]                     base::options(mc.cores = ...future.mc.cores.old)
[13:37:08.703]                     NULL
[13:37:08.703]                   }
[13:37:08.703]                   options(future.plan = NULL)
[13:37:08.703]                   if (is.na(NA_character_)) 
[13:37:08.703]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.703]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:08.703]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:08.703]                     .init = FALSE)
[13:37:08.703]                 }
[13:37:08.703]             }
[13:37:08.703]         }
[13:37:08.703]     })
[13:37:08.703]     if (TRUE) {
[13:37:08.703]         base::sink(type = "output", split = FALSE)
[13:37:08.703]         if (TRUE) {
[13:37:08.703]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:08.703]         }
[13:37:08.703]         else {
[13:37:08.703]             ...future.result["stdout"] <- base::list(NULL)
[13:37:08.703]         }
[13:37:08.703]         base::close(...future.stdout)
[13:37:08.703]         ...future.stdout <- NULL
[13:37:08.703]     }
[13:37:08.703]     ...future.result$conditions <- ...future.conditions
[13:37:08.703]     ...future.result$finished <- base::Sys.time()
[13:37:08.703]     ...future.result
[13:37:08.703] }
[13:37:08.706] assign_globals() ...
[13:37:08.706] List of 1
[13:37:08.706]  $ ii: int 2
[13:37:08.706]  - attr(*, "where")=List of 1
[13:37:08.706]   ..$ ii:<environment: R_EmptyEnv> 
[13:37:08.706]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:37:08.706]  - attr(*, "resolved")= logi FALSE
[13:37:08.706]  - attr(*, "total_size")= num 56
[13:37:08.709] - copied ‘ii’ to environment
[13:37:08.709] assign_globals() ... done
[13:37:08.710] requestCore(): workers = 2
[13:37:08.711] MulticoreFuture started
 - Creating multicore future #3 ...
[13:37:08.713] plan(): Setting new future strategy stack:
[13:37:08.713] List of future strategies:
[13:37:08.713] 1. sequential:
[13:37:08.713]    - args: function (..., envir = parent.frame())
[13:37:08.713]    - tweaked: FALSE
[13:37:08.713]    - call: NULL
[13:37:08.714] plan(): nbrOfWorkers() = 1
[13:37:08.715] plan(): Setting new future strategy stack:
[13:37:08.716] List of future strategies:
[13:37:08.716] 1. multicore:
[13:37:08.716]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:37:08.716]    - tweaked: FALSE
[13:37:08.716]    - call: plan(multicore)
[13:37:08.717] getGlobalsAndPackages() ...
[13:37:08.717] Searching for globals...
[13:37:08.722] - globals found: [2] ‘{’, ‘ii’
[13:37:08.723] Searching for globals ... DONE
[13:37:08.723] Resolving globals: FALSE
[13:37:08.724] The total size of the 1 globals is 56 bytes (56 bytes)
[13:37:08.725] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[13:37:08.725] - globals: [1] ‘ii’
[13:37:08.725] 
[13:37:08.726] getGlobalsAndPackages() ... DONE
[13:37:08.726] plan(): nbrOfWorkers() = 2
[13:37:08.727] Packages needed by the future expression (n = 0): <none>
[13:37:08.727] Packages needed by future strategies (n = 0): <none>
[13:37:08.728] {
[13:37:08.728]     {
[13:37:08.728]         {
[13:37:08.728]             ...future.startTime <- base::Sys.time()
[13:37:08.728]             {
[13:37:08.728]                 {
[13:37:08.728]                   {
[13:37:08.728]                     {
[13:37:08.728]                       base::local({
[13:37:08.728]                         has_future <- base::requireNamespace("future", 
[13:37:08.728]                           quietly = TRUE)
[13:37:08.728]                         if (has_future) {
[13:37:08.728]                           ns <- base::getNamespace("future")
[13:37:08.728]                           version <- ns[[".package"]][["version"]]
[13:37:08.728]                           if (is.null(version)) 
[13:37:08.728]                             version <- utils::packageVersion("future")
[13:37:08.728]                         }
[13:37:08.728]                         else {
[13:37:08.728]                           version <- NULL
[13:37:08.728]                         }
[13:37:08.728]                         if (!has_future || version < "1.8.0") {
[13:37:08.728]                           info <- base::c(r_version = base::gsub("R version ", 
[13:37:08.728]                             "", base::R.version$version.string), 
[13:37:08.728]                             platform = base::sprintf("%s (%s-bit)", 
[13:37:08.728]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:08.728]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:08.728]                               "release", "version")], collapse = " "), 
[13:37:08.728]                             hostname = base::Sys.info()[["nodename"]])
[13:37:08.728]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:37:08.728]                             info)
[13:37:08.728]                           info <- base::paste(info, collapse = "; ")
[13:37:08.728]                           if (!has_future) {
[13:37:08.728]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:08.728]                               info)
[13:37:08.728]                           }
[13:37:08.728]                           else {
[13:37:08.728]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:08.728]                               info, version)
[13:37:08.728]                           }
[13:37:08.728]                           base::stop(msg)
[13:37:08.728]                         }
[13:37:08.728]                       })
[13:37:08.728]                     }
[13:37:08.728]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:37:08.728]                     base::options(mc.cores = 1L)
[13:37:08.728]                   }
[13:37:08.728]                   ...future.strategy.old <- future::plan("list")
[13:37:08.728]                   options(future.plan = NULL)
[13:37:08.728]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.728]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:08.728]                 }
[13:37:08.728]                 ...future.workdir <- getwd()
[13:37:08.728]             }
[13:37:08.728]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:08.728]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:08.728]         }
[13:37:08.728]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:08.728]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:08.728]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:08.728]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:08.728]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:08.728]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:08.728]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:08.728]             base::names(...future.oldOptions))
[13:37:08.728]     }
[13:37:08.728]     if (FALSE) {
[13:37:08.728]     }
[13:37:08.728]     else {
[13:37:08.728]         if (TRUE) {
[13:37:08.728]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:08.728]                 open = "w")
[13:37:08.728]         }
[13:37:08.728]         else {
[13:37:08.728]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:08.728]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:08.728]         }
[13:37:08.728]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:08.728]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:08.728]             base::sink(type = "output", split = FALSE)
[13:37:08.728]             base::close(...future.stdout)
[13:37:08.728]         }, add = TRUE)
[13:37:08.728]     }
[13:37:08.728]     ...future.frame <- base::sys.nframe()
[13:37:08.728]     ...future.conditions <- base::list()
[13:37:08.728]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:08.728]     if (FALSE) {
[13:37:08.728]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:08.728]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:08.728]     }
[13:37:08.728]     ...future.result <- base::tryCatch({
[13:37:08.728]         base::withCallingHandlers({
[13:37:08.728]             ...future.value <- base::withVisible(base::local({
[13:37:08.728]                 withCallingHandlers({
[13:37:08.728]                   {
[13:37:08.728]                     ii
[13:37:08.728]                   }
[13:37:08.728]                 }, immediateCondition = function(cond) {
[13:37:08.728]                   save_rds <- function (object, pathname, ...) 
[13:37:08.728]                   {
[13:37:08.728]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:37:08.728]                     if (file_test("-f", pathname_tmp)) {
[13:37:08.728]                       fi_tmp <- file.info(pathname_tmp)
[13:37:08.728]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:37:08.728]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:08.728]                         fi_tmp[["mtime"]])
[13:37:08.728]                     }
[13:37:08.728]                     tryCatch({
[13:37:08.728]                       saveRDS(object, file = pathname_tmp, ...)
[13:37:08.728]                     }, error = function(ex) {
[13:37:08.728]                       msg <- conditionMessage(ex)
[13:37:08.728]                       fi_tmp <- file.info(pathname_tmp)
[13:37:08.728]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:37:08.728]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:08.728]                         fi_tmp[["mtime"]], msg)
[13:37:08.728]                       ex$message <- msg
[13:37:08.728]                       stop(ex)
[13:37:08.728]                     })
[13:37:08.728]                     stopifnot(file_test("-f", pathname_tmp))
[13:37:08.728]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:37:08.728]                     if (!res || file_test("-f", pathname_tmp)) {
[13:37:08.728]                       fi_tmp <- file.info(pathname_tmp)
[13:37:08.728]                       fi <- file.info(pathname)
[13:37:08.728]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:37:08.728]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:08.728]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:37:08.728]                         fi[["size"]], fi[["mtime"]])
[13:37:08.728]                       stop(msg)
[13:37:08.728]                     }
[13:37:08.728]                     invisible(pathname)
[13:37:08.728]                   }
[13:37:08.728]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:37:08.728]                     rootPath = tempdir()) 
[13:37:08.728]                   {
[13:37:08.728]                     obj <- list(time = Sys.time(), condition = cond)
[13:37:08.728]                     file <- tempfile(pattern = class(cond)[1], 
[13:37:08.728]                       tmpdir = path, fileext = ".rds")
[13:37:08.728]                     save_rds(obj, file)
[13:37:08.728]                   }
[13:37:08.728]                   saveImmediateCondition(cond, path = "/tmp/RtmptV9aIe/.future/immediateConditions")
[13:37:08.728]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.728]                   {
[13:37:08.728]                     inherits <- base::inherits
[13:37:08.728]                     invokeRestart <- base::invokeRestart
[13:37:08.728]                     is.null <- base::is.null
[13:37:08.728]                     muffled <- FALSE
[13:37:08.728]                     if (inherits(cond, "message")) {
[13:37:08.728]                       muffled <- grepl(pattern, "muffleMessage")
[13:37:08.728]                       if (muffled) 
[13:37:08.728]                         invokeRestart("muffleMessage")
[13:37:08.728]                     }
[13:37:08.728]                     else if (inherits(cond, "warning")) {
[13:37:08.728]                       muffled <- grepl(pattern, "muffleWarning")
[13:37:08.728]                       if (muffled) 
[13:37:08.728]                         invokeRestart("muffleWarning")
[13:37:08.728]                     }
[13:37:08.728]                     else if (inherits(cond, "condition")) {
[13:37:08.728]                       if (!is.null(pattern)) {
[13:37:08.728]                         computeRestarts <- base::computeRestarts
[13:37:08.728]                         grepl <- base::grepl
[13:37:08.728]                         restarts <- computeRestarts(cond)
[13:37:08.728]                         for (restart in restarts) {
[13:37:08.728]                           name <- restart$name
[13:37:08.728]                           if (is.null(name)) 
[13:37:08.728]                             next
[13:37:08.728]                           if (!grepl(pattern, name)) 
[13:37:08.728]                             next
[13:37:08.728]                           invokeRestart(restart)
[13:37:08.728]                           muffled <- TRUE
[13:37:08.728]                           break
[13:37:08.728]                         }
[13:37:08.728]                       }
[13:37:08.728]                     }
[13:37:08.728]                     invisible(muffled)
[13:37:08.728]                   }
[13:37:08.728]                   muffleCondition(cond)
[13:37:08.728]                 })
[13:37:08.728]             }))
[13:37:08.728]             future::FutureResult(value = ...future.value$value, 
[13:37:08.728]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.728]                   ...future.rng), globalenv = if (FALSE) 
[13:37:08.728]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:08.728]                     ...future.globalenv.names))
[13:37:08.728]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:08.728]         }, condition = base::local({
[13:37:08.728]             c <- base::c
[13:37:08.728]             inherits <- base::inherits
[13:37:08.728]             invokeRestart <- base::invokeRestart
[13:37:08.728]             length <- base::length
[13:37:08.728]             list <- base::list
[13:37:08.728]             seq.int <- base::seq.int
[13:37:08.728]             signalCondition <- base::signalCondition
[13:37:08.728]             sys.calls <- base::sys.calls
[13:37:08.728]             `[[` <- base::`[[`
[13:37:08.728]             `+` <- base::`+`
[13:37:08.728]             `<<-` <- base::`<<-`
[13:37:08.728]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:08.728]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:08.728]                   3L)]
[13:37:08.728]             }
[13:37:08.728]             function(cond) {
[13:37:08.728]                 is_error <- inherits(cond, "error")
[13:37:08.728]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:08.728]                   NULL)
[13:37:08.728]                 if (is_error) {
[13:37:08.728]                   sessionInformation <- function() {
[13:37:08.728]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:08.728]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:08.728]                       search = base::search(), system = base::Sys.info())
[13:37:08.728]                   }
[13:37:08.728]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.728]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:08.728]                     cond$call), session = sessionInformation(), 
[13:37:08.728]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:08.728]                   signalCondition(cond)
[13:37:08.728]                 }
[13:37:08.728]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:08.728]                 "immediateCondition"))) {
[13:37:08.728]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:08.728]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.728]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:08.728]                   if (TRUE && !signal) {
[13:37:08.728]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.728]                     {
[13:37:08.728]                       inherits <- base::inherits
[13:37:08.728]                       invokeRestart <- base::invokeRestart
[13:37:08.728]                       is.null <- base::is.null
[13:37:08.728]                       muffled <- FALSE
[13:37:08.728]                       if (inherits(cond, "message")) {
[13:37:08.728]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.728]                         if (muffled) 
[13:37:08.728]                           invokeRestart("muffleMessage")
[13:37:08.728]                       }
[13:37:08.728]                       else if (inherits(cond, "warning")) {
[13:37:08.728]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.728]                         if (muffled) 
[13:37:08.728]                           invokeRestart("muffleWarning")
[13:37:08.728]                       }
[13:37:08.728]                       else if (inherits(cond, "condition")) {
[13:37:08.728]                         if (!is.null(pattern)) {
[13:37:08.728]                           computeRestarts <- base::computeRestarts
[13:37:08.728]                           grepl <- base::grepl
[13:37:08.728]                           restarts <- computeRestarts(cond)
[13:37:08.728]                           for (restart in restarts) {
[13:37:08.728]                             name <- restart$name
[13:37:08.728]                             if (is.null(name)) 
[13:37:08.728]                               next
[13:37:08.728]                             if (!grepl(pattern, name)) 
[13:37:08.728]                               next
[13:37:08.728]                             invokeRestart(restart)
[13:37:08.728]                             muffled <- TRUE
[13:37:08.728]                             break
[13:37:08.728]                           }
[13:37:08.728]                         }
[13:37:08.728]                       }
[13:37:08.728]                       invisible(muffled)
[13:37:08.728]                     }
[13:37:08.728]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.728]                   }
[13:37:08.728]                 }
[13:37:08.728]                 else {
[13:37:08.728]                   if (TRUE) {
[13:37:08.728]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.728]                     {
[13:37:08.728]                       inherits <- base::inherits
[13:37:08.728]                       invokeRestart <- base::invokeRestart
[13:37:08.728]                       is.null <- base::is.null
[13:37:08.728]                       muffled <- FALSE
[13:37:08.728]                       if (inherits(cond, "message")) {
[13:37:08.728]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.728]                         if (muffled) 
[13:37:08.728]                           invokeRestart("muffleMessage")
[13:37:08.728]                       }
[13:37:08.728]                       else if (inherits(cond, "warning")) {
[13:37:08.728]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.728]                         if (muffled) 
[13:37:08.728]                           invokeRestart("muffleWarning")
[13:37:08.728]                       }
[13:37:08.728]                       else if (inherits(cond, "condition")) {
[13:37:08.728]                         if (!is.null(pattern)) {
[13:37:08.728]                           computeRestarts <- base::computeRestarts
[13:37:08.728]                           grepl <- base::grepl
[13:37:08.728]                           restarts <- computeRestarts(cond)
[13:37:08.728]                           for (restart in restarts) {
[13:37:08.728]                             name <- restart$name
[13:37:08.728]                             if (is.null(name)) 
[13:37:08.728]                               next
[13:37:08.728]                             if (!grepl(pattern, name)) 
[13:37:08.728]                               next
[13:37:08.728]                             invokeRestart(restart)
[13:37:08.728]                             muffled <- TRUE
[13:37:08.728]                             break
[13:37:08.728]                           }
[13:37:08.728]                         }
[13:37:08.728]                       }
[13:37:08.728]                       invisible(muffled)
[13:37:08.728]                     }
[13:37:08.728]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.728]                   }
[13:37:08.728]                 }
[13:37:08.728]             }
[13:37:08.728]         }))
[13:37:08.728]     }, error = function(ex) {
[13:37:08.728]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:08.728]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.728]                 ...future.rng), started = ...future.startTime, 
[13:37:08.728]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:08.728]             version = "1.8"), class = "FutureResult")
[13:37:08.728]     }, finally = {
[13:37:08.728]         if (!identical(...future.workdir, getwd())) 
[13:37:08.728]             setwd(...future.workdir)
[13:37:08.728]         {
[13:37:08.728]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:08.728]                 ...future.oldOptions$nwarnings <- NULL
[13:37:08.728]             }
[13:37:08.728]             base::options(...future.oldOptions)
[13:37:08.728]             if (.Platform$OS.type == "windows") {
[13:37:08.728]                 old_names <- names(...future.oldEnvVars)
[13:37:08.728]                 envs <- base::Sys.getenv()
[13:37:08.728]                 names <- names(envs)
[13:37:08.728]                 common <- intersect(names, old_names)
[13:37:08.728]                 added <- setdiff(names, old_names)
[13:37:08.728]                 removed <- setdiff(old_names, names)
[13:37:08.728]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:08.728]                   envs[common]]
[13:37:08.728]                 NAMES <- toupper(changed)
[13:37:08.728]                 args <- list()
[13:37:08.728]                 for (kk in seq_along(NAMES)) {
[13:37:08.728]                   name <- changed[[kk]]
[13:37:08.728]                   NAME <- NAMES[[kk]]
[13:37:08.728]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.728]                     next
[13:37:08.728]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.728]                 }
[13:37:08.728]                 NAMES <- toupper(added)
[13:37:08.728]                 for (kk in seq_along(NAMES)) {
[13:37:08.728]                   name <- added[[kk]]
[13:37:08.728]                   NAME <- NAMES[[kk]]
[13:37:08.728]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.728]                     next
[13:37:08.728]                   args[[name]] <- ""
[13:37:08.728]                 }
[13:37:08.728]                 NAMES <- toupper(removed)
[13:37:08.728]                 for (kk in seq_along(NAMES)) {
[13:37:08.728]                   name <- removed[[kk]]
[13:37:08.728]                   NAME <- NAMES[[kk]]
[13:37:08.728]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.728]                     next
[13:37:08.728]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.728]                 }
[13:37:08.728]                 if (length(args) > 0) 
[13:37:08.728]                   base::do.call(base::Sys.setenv, args = args)
[13:37:08.728]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:08.728]             }
[13:37:08.728]             else {
[13:37:08.728]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:08.728]             }
[13:37:08.728]             {
[13:37:08.728]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:08.728]                   0L) {
[13:37:08.728]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:08.728]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:08.728]                   base::options(opts)
[13:37:08.728]                 }
[13:37:08.728]                 {
[13:37:08.728]                   {
[13:37:08.728]                     base::options(mc.cores = ...future.mc.cores.old)
[13:37:08.728]                     NULL
[13:37:08.728]                   }
[13:37:08.728]                   options(future.plan = NULL)
[13:37:08.728]                   if (is.na(NA_character_)) 
[13:37:08.728]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.728]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:08.728]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:08.728]                     .init = FALSE)
[13:37:08.728]                 }
[13:37:08.728]             }
[13:37:08.728]         }
[13:37:08.728]     })
[13:37:08.728]     if (TRUE) {
[13:37:08.728]         base::sink(type = "output", split = FALSE)
[13:37:08.728]         if (TRUE) {
[13:37:08.728]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:08.728]         }
[13:37:08.728]         else {
[13:37:08.728]             ...future.result["stdout"] <- base::list(NULL)
[13:37:08.728]         }
[13:37:08.728]         base::close(...future.stdout)
[13:37:08.728]         ...future.stdout <- NULL
[13:37:08.728]     }
[13:37:08.728]     ...future.result$conditions <- ...future.conditions
[13:37:08.728]     ...future.result$finished <- base::Sys.time()
[13:37:08.728]     ...future.result
[13:37:08.728] }
[13:37:08.731] assign_globals() ...
[13:37:08.731] List of 1
[13:37:08.731]  $ ii: int 3
[13:37:08.731]  - attr(*, "where")=List of 1
[13:37:08.731]   ..$ ii:<environment: R_EmptyEnv> 
[13:37:08.731]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:37:08.731]  - attr(*, "resolved")= logi FALSE
[13:37:08.731]  - attr(*, "total_size")= num 56
[13:37:08.734] - copied ‘ii’ to environment
[13:37:08.735] assign_globals() ... done
[13:37:08.735] requestCore(): workers = 2
[13:37:08.735] Poll #1 (0): usedCores() = 2, workers = 2
[13:37:08.746] result() for MulticoreFuture ...
[13:37:08.747] result() for MulticoreFuture ...
[13:37:08.747] result() for MulticoreFuture ... done
[13:37:08.747] result() for MulticoreFuture ... done
[13:37:08.747] result() for MulticoreFuture ...
[13:37:08.747] result() for MulticoreFuture ... done
[13:37:08.750] MulticoreFuture started
 - Creating multicore future #4 ...
[13:37:08.751] plan(): Setting new future strategy stack:
[13:37:08.752] List of future strategies:
[13:37:08.752] 1. sequential:
[13:37:08.752]    - args: function (..., envir = parent.frame())
[13:37:08.752]    - tweaked: FALSE
[13:37:08.752]    - call: NULL
[13:37:08.753] plan(): nbrOfWorkers() = 1
[13:37:08.755] plan(): Setting new future strategy stack:
[13:37:08.755] List of future strategies:
[13:37:08.755] 1. multicore:
[13:37:08.755]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:37:08.755]    - tweaked: FALSE
[13:37:08.755]    - call: plan(multicore)
[13:37:08.757] getGlobalsAndPackages() ...
[13:37:08.758] Searching for globals...
[13:37:08.759] - globals found: [2] ‘{’, ‘ii’
[13:37:08.760] Searching for globals ... DONE
[13:37:08.760] Resolving globals: FALSE
[13:37:08.761] The total size of the 1 globals is 56 bytes (56 bytes)
[13:37:08.761] plan(): nbrOfWorkers() = 2
[13:37:08.761] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[13:37:08.762] - globals: [1] ‘ii’
[13:37:08.762] 
[13:37:08.762] getGlobalsAndPackages() ... DONE
[13:37:08.763] Packages needed by the future expression (n = 0): <none>
[13:37:08.763] Packages needed by future strategies (n = 0): <none>
[13:37:08.764] {
[13:37:08.764]     {
[13:37:08.764]         {
[13:37:08.764]             ...future.startTime <- base::Sys.time()
[13:37:08.764]             {
[13:37:08.764]                 {
[13:37:08.764]                   {
[13:37:08.764]                     {
[13:37:08.764]                       base::local({
[13:37:08.764]                         has_future <- base::requireNamespace("future", 
[13:37:08.764]                           quietly = TRUE)
[13:37:08.764]                         if (has_future) {
[13:37:08.764]                           ns <- base::getNamespace("future")
[13:37:08.764]                           version <- ns[[".package"]][["version"]]
[13:37:08.764]                           if (is.null(version)) 
[13:37:08.764]                             version <- utils::packageVersion("future")
[13:37:08.764]                         }
[13:37:08.764]                         else {
[13:37:08.764]                           version <- NULL
[13:37:08.764]                         }
[13:37:08.764]                         if (!has_future || version < "1.8.0") {
[13:37:08.764]                           info <- base::c(r_version = base::gsub("R version ", 
[13:37:08.764]                             "", base::R.version$version.string), 
[13:37:08.764]                             platform = base::sprintf("%s (%s-bit)", 
[13:37:08.764]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:08.764]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:08.764]                               "release", "version")], collapse = " "), 
[13:37:08.764]                             hostname = base::Sys.info()[["nodename"]])
[13:37:08.764]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:37:08.764]                             info)
[13:37:08.764]                           info <- base::paste(info, collapse = "; ")
[13:37:08.764]                           if (!has_future) {
[13:37:08.764]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:08.764]                               info)
[13:37:08.764]                           }
[13:37:08.764]                           else {
[13:37:08.764]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:08.764]                               info, version)
[13:37:08.764]                           }
[13:37:08.764]                           base::stop(msg)
[13:37:08.764]                         }
[13:37:08.764]                       })
[13:37:08.764]                     }
[13:37:08.764]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:37:08.764]                     base::options(mc.cores = 1L)
[13:37:08.764]                   }
[13:37:08.764]                   ...future.strategy.old <- future::plan("list")
[13:37:08.764]                   options(future.plan = NULL)
[13:37:08.764]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.764]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:08.764]                 }
[13:37:08.764]                 ...future.workdir <- getwd()
[13:37:08.764]             }
[13:37:08.764]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:08.764]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:08.764]         }
[13:37:08.764]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:08.764]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:08.764]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:08.764]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:08.764]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:08.764]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:08.764]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:08.764]             base::names(...future.oldOptions))
[13:37:08.764]     }
[13:37:08.764]     if (FALSE) {
[13:37:08.764]     }
[13:37:08.764]     else {
[13:37:08.764]         if (TRUE) {
[13:37:08.764]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:08.764]                 open = "w")
[13:37:08.764]         }
[13:37:08.764]         else {
[13:37:08.764]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:08.764]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:08.764]         }
[13:37:08.764]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:08.764]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:08.764]             base::sink(type = "output", split = FALSE)
[13:37:08.764]             base::close(...future.stdout)
[13:37:08.764]         }, add = TRUE)
[13:37:08.764]     }
[13:37:08.764]     ...future.frame <- base::sys.nframe()
[13:37:08.764]     ...future.conditions <- base::list()
[13:37:08.764]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:08.764]     if (FALSE) {
[13:37:08.764]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:08.764]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:08.764]     }
[13:37:08.764]     ...future.result <- base::tryCatch({
[13:37:08.764]         base::withCallingHandlers({
[13:37:08.764]             ...future.value <- base::withVisible(base::local({
[13:37:08.764]                 withCallingHandlers({
[13:37:08.764]                   {
[13:37:08.764]                     ii
[13:37:08.764]                   }
[13:37:08.764]                 }, immediateCondition = function(cond) {
[13:37:08.764]                   save_rds <- function (object, pathname, ...) 
[13:37:08.764]                   {
[13:37:08.764]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:37:08.764]                     if (file_test("-f", pathname_tmp)) {
[13:37:08.764]                       fi_tmp <- file.info(pathname_tmp)
[13:37:08.764]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:37:08.764]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:08.764]                         fi_tmp[["mtime"]])
[13:37:08.764]                     }
[13:37:08.764]                     tryCatch({
[13:37:08.764]                       saveRDS(object, file = pathname_tmp, ...)
[13:37:08.764]                     }, error = function(ex) {
[13:37:08.764]                       msg <- conditionMessage(ex)
[13:37:08.764]                       fi_tmp <- file.info(pathname_tmp)
[13:37:08.764]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:37:08.764]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:08.764]                         fi_tmp[["mtime"]], msg)
[13:37:08.764]                       ex$message <- msg
[13:37:08.764]                       stop(ex)
[13:37:08.764]                     })
[13:37:08.764]                     stopifnot(file_test("-f", pathname_tmp))
[13:37:08.764]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:37:08.764]                     if (!res || file_test("-f", pathname_tmp)) {
[13:37:08.764]                       fi_tmp <- file.info(pathname_tmp)
[13:37:08.764]                       fi <- file.info(pathname)
[13:37:08.764]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:37:08.764]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:08.764]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:37:08.764]                         fi[["size"]], fi[["mtime"]])
[13:37:08.764]                       stop(msg)
[13:37:08.764]                     }
[13:37:08.764]                     invisible(pathname)
[13:37:08.764]                   }
[13:37:08.764]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:37:08.764]                     rootPath = tempdir()) 
[13:37:08.764]                   {
[13:37:08.764]                     obj <- list(time = Sys.time(), condition = cond)
[13:37:08.764]                     file <- tempfile(pattern = class(cond)[1], 
[13:37:08.764]                       tmpdir = path, fileext = ".rds")
[13:37:08.764]                     save_rds(obj, file)
[13:37:08.764]                   }
[13:37:08.764]                   saveImmediateCondition(cond, path = "/tmp/RtmptV9aIe/.future/immediateConditions")
[13:37:08.764]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.764]                   {
[13:37:08.764]                     inherits <- base::inherits
[13:37:08.764]                     invokeRestart <- base::invokeRestart
[13:37:08.764]                     is.null <- base::is.null
[13:37:08.764]                     muffled <- FALSE
[13:37:08.764]                     if (inherits(cond, "message")) {
[13:37:08.764]                       muffled <- grepl(pattern, "muffleMessage")
[13:37:08.764]                       if (muffled) 
[13:37:08.764]                         invokeRestart("muffleMessage")
[13:37:08.764]                     }
[13:37:08.764]                     else if (inherits(cond, "warning")) {
[13:37:08.764]                       muffled <- grepl(pattern, "muffleWarning")
[13:37:08.764]                       if (muffled) 
[13:37:08.764]                         invokeRestart("muffleWarning")
[13:37:08.764]                     }
[13:37:08.764]                     else if (inherits(cond, "condition")) {
[13:37:08.764]                       if (!is.null(pattern)) {
[13:37:08.764]                         computeRestarts <- base::computeRestarts
[13:37:08.764]                         grepl <- base::grepl
[13:37:08.764]                         restarts <- computeRestarts(cond)
[13:37:08.764]                         for (restart in restarts) {
[13:37:08.764]                           name <- restart$name
[13:37:08.764]                           if (is.null(name)) 
[13:37:08.764]                             next
[13:37:08.764]                           if (!grepl(pattern, name)) 
[13:37:08.764]                             next
[13:37:08.764]                           invokeRestart(restart)
[13:37:08.764]                           muffled <- TRUE
[13:37:08.764]                           break
[13:37:08.764]                         }
[13:37:08.764]                       }
[13:37:08.764]                     }
[13:37:08.764]                     invisible(muffled)
[13:37:08.764]                   }
[13:37:08.764]                   muffleCondition(cond)
[13:37:08.764]                 })
[13:37:08.764]             }))
[13:37:08.764]             future::FutureResult(value = ...future.value$value, 
[13:37:08.764]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.764]                   ...future.rng), globalenv = if (FALSE) 
[13:37:08.764]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:08.764]                     ...future.globalenv.names))
[13:37:08.764]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:08.764]         }, condition = base::local({
[13:37:08.764]             c <- base::c
[13:37:08.764]             inherits <- base::inherits
[13:37:08.764]             invokeRestart <- base::invokeRestart
[13:37:08.764]             length <- base::length
[13:37:08.764]             list <- base::list
[13:37:08.764]             seq.int <- base::seq.int
[13:37:08.764]             signalCondition <- base::signalCondition
[13:37:08.764]             sys.calls <- base::sys.calls
[13:37:08.764]             `[[` <- base::`[[`
[13:37:08.764]             `+` <- base::`+`
[13:37:08.764]             `<<-` <- base::`<<-`
[13:37:08.764]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:08.764]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:08.764]                   3L)]
[13:37:08.764]             }
[13:37:08.764]             function(cond) {
[13:37:08.764]                 is_error <- inherits(cond, "error")
[13:37:08.764]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:08.764]                   NULL)
[13:37:08.764]                 if (is_error) {
[13:37:08.764]                   sessionInformation <- function() {
[13:37:08.764]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:08.764]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:08.764]                       search = base::search(), system = base::Sys.info())
[13:37:08.764]                   }
[13:37:08.764]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.764]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:08.764]                     cond$call), session = sessionInformation(), 
[13:37:08.764]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:08.764]                   signalCondition(cond)
[13:37:08.764]                 }
[13:37:08.764]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:08.764]                 "immediateCondition"))) {
[13:37:08.764]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:08.764]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.764]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:08.764]                   if (TRUE && !signal) {
[13:37:08.764]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.764]                     {
[13:37:08.764]                       inherits <- base::inherits
[13:37:08.764]                       invokeRestart <- base::invokeRestart
[13:37:08.764]                       is.null <- base::is.null
[13:37:08.764]                       muffled <- FALSE
[13:37:08.764]                       if (inherits(cond, "message")) {
[13:37:08.764]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.764]                         if (muffled) 
[13:37:08.764]                           invokeRestart("muffleMessage")
[13:37:08.764]                       }
[13:37:08.764]                       else if (inherits(cond, "warning")) {
[13:37:08.764]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.764]                         if (muffled) 
[13:37:08.764]                           invokeRestart("muffleWarning")
[13:37:08.764]                       }
[13:37:08.764]                       else if (inherits(cond, "condition")) {
[13:37:08.764]                         if (!is.null(pattern)) {
[13:37:08.764]                           computeRestarts <- base::computeRestarts
[13:37:08.764]                           grepl <- base::grepl
[13:37:08.764]                           restarts <- computeRestarts(cond)
[13:37:08.764]                           for (restart in restarts) {
[13:37:08.764]                             name <- restart$name
[13:37:08.764]                             if (is.null(name)) 
[13:37:08.764]                               next
[13:37:08.764]                             if (!grepl(pattern, name)) 
[13:37:08.764]                               next
[13:37:08.764]                             invokeRestart(restart)
[13:37:08.764]                             muffled <- TRUE
[13:37:08.764]                             break
[13:37:08.764]                           }
[13:37:08.764]                         }
[13:37:08.764]                       }
[13:37:08.764]                       invisible(muffled)
[13:37:08.764]                     }
[13:37:08.764]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.764]                   }
[13:37:08.764]                 }
[13:37:08.764]                 else {
[13:37:08.764]                   if (TRUE) {
[13:37:08.764]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.764]                     {
[13:37:08.764]                       inherits <- base::inherits
[13:37:08.764]                       invokeRestart <- base::invokeRestart
[13:37:08.764]                       is.null <- base::is.null
[13:37:08.764]                       muffled <- FALSE
[13:37:08.764]                       if (inherits(cond, "message")) {
[13:37:08.764]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.764]                         if (muffled) 
[13:37:08.764]                           invokeRestart("muffleMessage")
[13:37:08.764]                       }
[13:37:08.764]                       else if (inherits(cond, "warning")) {
[13:37:08.764]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.764]                         if (muffled) 
[13:37:08.764]                           invokeRestart("muffleWarning")
[13:37:08.764]                       }
[13:37:08.764]                       else if (inherits(cond, "condition")) {
[13:37:08.764]                         if (!is.null(pattern)) {
[13:37:08.764]                           computeRestarts <- base::computeRestarts
[13:37:08.764]                           grepl <- base::grepl
[13:37:08.764]                           restarts <- computeRestarts(cond)
[13:37:08.764]                           for (restart in restarts) {
[13:37:08.764]                             name <- restart$name
[13:37:08.764]                             if (is.null(name)) 
[13:37:08.764]                               next
[13:37:08.764]                             if (!grepl(pattern, name)) 
[13:37:08.764]                               next
[13:37:08.764]                             invokeRestart(restart)
[13:37:08.764]                             muffled <- TRUE
[13:37:08.764]                             break
[13:37:08.764]                           }
[13:37:08.764]                         }
[13:37:08.764]                       }
[13:37:08.764]                       invisible(muffled)
[13:37:08.764]                     }
[13:37:08.764]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.764]                   }
[13:37:08.764]                 }
[13:37:08.764]             }
[13:37:08.764]         }))
[13:37:08.764]     }, error = function(ex) {
[13:37:08.764]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:08.764]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.764]                 ...future.rng), started = ...future.startTime, 
[13:37:08.764]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:08.764]             version = "1.8"), class = "FutureResult")
[13:37:08.764]     }, finally = {
[13:37:08.764]         if (!identical(...future.workdir, getwd())) 
[13:37:08.764]             setwd(...future.workdir)
[13:37:08.764]         {
[13:37:08.764]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:08.764]                 ...future.oldOptions$nwarnings <- NULL
[13:37:08.764]             }
[13:37:08.764]             base::options(...future.oldOptions)
[13:37:08.764]             if (.Platform$OS.type == "windows") {
[13:37:08.764]                 old_names <- names(...future.oldEnvVars)
[13:37:08.764]                 envs <- base::Sys.getenv()
[13:37:08.764]                 names <- names(envs)
[13:37:08.764]                 common <- intersect(names, old_names)
[13:37:08.764]                 added <- setdiff(names, old_names)
[13:37:08.764]                 removed <- setdiff(old_names, names)
[13:37:08.764]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:08.764]                   envs[common]]
[13:37:08.764]                 NAMES <- toupper(changed)
[13:37:08.764]                 args <- list()
[13:37:08.764]                 for (kk in seq_along(NAMES)) {
[13:37:08.764]                   name <- changed[[kk]]
[13:37:08.764]                   NAME <- NAMES[[kk]]
[13:37:08.764]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.764]                     next
[13:37:08.764]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.764]                 }
[13:37:08.764]                 NAMES <- toupper(added)
[13:37:08.764]                 for (kk in seq_along(NAMES)) {
[13:37:08.764]                   name <- added[[kk]]
[13:37:08.764]                   NAME <- NAMES[[kk]]
[13:37:08.764]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.764]                     next
[13:37:08.764]                   args[[name]] <- ""
[13:37:08.764]                 }
[13:37:08.764]                 NAMES <- toupper(removed)
[13:37:08.764]                 for (kk in seq_along(NAMES)) {
[13:37:08.764]                   name <- removed[[kk]]
[13:37:08.764]                   NAME <- NAMES[[kk]]
[13:37:08.764]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.764]                     next
[13:37:08.764]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.764]                 }
[13:37:08.764]                 if (length(args) > 0) 
[13:37:08.764]                   base::do.call(base::Sys.setenv, args = args)
[13:37:08.764]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:08.764]             }
[13:37:08.764]             else {
[13:37:08.764]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:08.764]             }
[13:37:08.764]             {
[13:37:08.764]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:08.764]                   0L) {
[13:37:08.764]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:08.764]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:08.764]                   base::options(opts)
[13:37:08.764]                 }
[13:37:08.764]                 {
[13:37:08.764]                   {
[13:37:08.764]                     base::options(mc.cores = ...future.mc.cores.old)
[13:37:08.764]                     NULL
[13:37:08.764]                   }
[13:37:08.764]                   options(future.plan = NULL)
[13:37:08.764]                   if (is.na(NA_character_)) 
[13:37:08.764]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.764]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:08.764]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:08.764]                     .init = FALSE)
[13:37:08.764]                 }
[13:37:08.764]             }
[13:37:08.764]         }
[13:37:08.764]     })
[13:37:08.764]     if (TRUE) {
[13:37:08.764]         base::sink(type = "output", split = FALSE)
[13:37:08.764]         if (TRUE) {
[13:37:08.764]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:08.764]         }
[13:37:08.764]         else {
[13:37:08.764]             ...future.result["stdout"] <- base::list(NULL)
[13:37:08.764]         }
[13:37:08.764]         base::close(...future.stdout)
[13:37:08.764]         ...future.stdout <- NULL
[13:37:08.764]     }
[13:37:08.764]     ...future.result$conditions <- ...future.conditions
[13:37:08.764]     ...future.result$finished <- base::Sys.time()
[13:37:08.764]     ...future.result
[13:37:08.764] }
[13:37:08.767] assign_globals() ...
[13:37:08.767] List of 1
[13:37:08.767]  $ ii: int 4
[13:37:08.767]  - attr(*, "where")=List of 1
[13:37:08.767]   ..$ ii:<environment: R_EmptyEnv> 
[13:37:08.767]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:37:08.767]  - attr(*, "resolved")= logi FALSE
[13:37:08.767]  - attr(*, "total_size")= num 56
[13:37:08.771] - copied ‘ii’ to environment
[13:37:08.771] assign_globals() ... done
[13:37:08.771] requestCore(): workers = 2
[13:37:08.771] Poll #1 (0): usedCores() = 2, workers = 2
[13:37:08.782] result() for MulticoreFuture ...
[13:37:08.783] result() for MulticoreFuture ...
[13:37:08.783] result() for MulticoreFuture ... done
[13:37:08.783] result() for MulticoreFuture ... done
[13:37:08.783] result() for MulticoreFuture ...
[13:37:08.784] result() for MulticoreFuture ... done
[13:37:08.786] MulticoreFuture started
 - Resolving 4 multicore futures
[13:37:08.787] result() for MulticoreFuture ...
[13:37:08.787] result() for MulticoreFuture ... done
[13:37:08.787] plan(): Setting new future strategy stack:
[13:37:08.788] result() for MulticoreFuture ...
[13:37:08.788] result() for MulticoreFuture ... done
[13:37:08.788] result() for MulticoreFuture ...
[13:37:08.788] result() for MulticoreFuture ... done
[13:37:08.788] List of future strategies:
[13:37:08.788] 1. sequential:
[13:37:08.788]    - args: function (..., envir = parent.frame())
[13:37:08.788]    - tweaked: FALSE
[13:37:08.788]    - call: NULL
[13:37:08.788] result() for MulticoreFuture ...
[13:37:08.789] result() for MulticoreFuture ... done
[13:37:08.789] plan(): nbrOfWorkers() = 1
[13:37:08.789] result() for MulticoreFuture ...
[13:37:08.790] result() for MulticoreFuture ...
[13:37:08.791] result() for MulticoreFuture ... done
[13:37:08.791] result() for MulticoreFuture ... done
[13:37:08.791] result() for MulticoreFuture ...
[13:37:08.791] result() for MulticoreFuture ... done
[13:37:08.791] plan(): Setting new future strategy stack:
[13:37:08.792] result() for MulticoreFuture ...
[13:37:08.792] List of future strategies:
[13:37:08.792] 1. multicore:
[13:37:08.792]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:37:08.792]    - tweaked: FALSE
[13:37:08.792]    - call: plan(multicore)
[13:37:08.797] plan(): nbrOfWorkers() = 2
[13:37:08.797] result() for MulticoreFuture ...
[13:37:08.798] result() for MulticoreFuture ... done
[13:37:08.798] result() for MulticoreFuture ... done
[13:37:08.798] result() for MulticoreFuture ...
[13:37:08.798] result() for MulticoreFuture ... done
*** multicore(..., globals = TRUE) and errors
[13:37:08.803] getGlobalsAndPackages() ...
[13:37:08.803] Searching for globals...
[13:37:08.807] - globals found: [2] ‘{’, ‘stop’
[13:37:08.807] Searching for globals ... DONE
[13:37:08.807] Resolving globals: FALSE
[13:37:08.808] 
[13:37:08.808] 
[13:37:08.808] getGlobalsAndPackages() ... DONE
[13:37:08.809] Packages needed by the future expression (n = 0): <none>
[13:37:08.809] Packages needed by future strategies (n = 0): <none>
[13:37:08.809] {
[13:37:08.809]     {
[13:37:08.809]         {
[13:37:08.809]             ...future.startTime <- base::Sys.time()
[13:37:08.809]             {
[13:37:08.809]                 {
[13:37:08.809]                   {
[13:37:08.809]                     {
[13:37:08.809]                       base::local({
[13:37:08.809]                         has_future <- base::requireNamespace("future", 
[13:37:08.809]                           quietly = TRUE)
[13:37:08.809]                         if (has_future) {
[13:37:08.809]                           ns <- base::getNamespace("future")
[13:37:08.809]                           version <- ns[[".package"]][["version"]]
[13:37:08.809]                           if (is.null(version)) 
[13:37:08.809]                             version <- utils::packageVersion("future")
[13:37:08.809]                         }
[13:37:08.809]                         else {
[13:37:08.809]                           version <- NULL
[13:37:08.809]                         }
[13:37:08.809]                         if (!has_future || version < "1.8.0") {
[13:37:08.809]                           info <- base::c(r_version = base::gsub("R version ", 
[13:37:08.809]                             "", base::R.version$version.string), 
[13:37:08.809]                             platform = base::sprintf("%s (%s-bit)", 
[13:37:08.809]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:08.809]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:08.809]                               "release", "version")], collapse = " "), 
[13:37:08.809]                             hostname = base::Sys.info()[["nodename"]])
[13:37:08.809]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:37:08.809]                             info)
[13:37:08.809]                           info <- base::paste(info, collapse = "; ")
[13:37:08.809]                           if (!has_future) {
[13:37:08.809]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:08.809]                               info)
[13:37:08.809]                           }
[13:37:08.809]                           else {
[13:37:08.809]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:08.809]                               info, version)
[13:37:08.809]                           }
[13:37:08.809]                           base::stop(msg)
[13:37:08.809]                         }
[13:37:08.809]                       })
[13:37:08.809]                     }
[13:37:08.809]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:37:08.809]                     base::options(mc.cores = 1L)
[13:37:08.809]                   }
[13:37:08.809]                   ...future.strategy.old <- future::plan("list")
[13:37:08.809]                   options(future.plan = NULL)
[13:37:08.809]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.809]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:08.809]                 }
[13:37:08.809]                 ...future.workdir <- getwd()
[13:37:08.809]             }
[13:37:08.809]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:08.809]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:08.809]         }
[13:37:08.809]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:08.809]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:08.809]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:08.809]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:08.809]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:08.809]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:08.809]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:08.809]             base::names(...future.oldOptions))
[13:37:08.809]     }
[13:37:08.809]     if (FALSE) {
[13:37:08.809]     }
[13:37:08.809]     else {
[13:37:08.809]         if (TRUE) {
[13:37:08.809]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:08.809]                 open = "w")
[13:37:08.809]         }
[13:37:08.809]         else {
[13:37:08.809]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:08.809]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:08.809]         }
[13:37:08.809]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:08.809]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:08.809]             base::sink(type = "output", split = FALSE)
[13:37:08.809]             base::close(...future.stdout)
[13:37:08.809]         }, add = TRUE)
[13:37:08.809]     }
[13:37:08.809]     ...future.frame <- base::sys.nframe()
[13:37:08.809]     ...future.conditions <- base::list()
[13:37:08.809]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:08.809]     if (FALSE) {
[13:37:08.809]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:08.809]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:08.809]     }
[13:37:08.809]     ...future.result <- base::tryCatch({
[13:37:08.809]         base::withCallingHandlers({
[13:37:08.809]             ...future.value <- base::withVisible(base::local({
[13:37:08.809]                 withCallingHandlers({
[13:37:08.809]                   {
[13:37:08.809]                     stop("Whoops!")
[13:37:08.809]                     1
[13:37:08.809]                   }
[13:37:08.809]                 }, immediateCondition = function(cond) {
[13:37:08.809]                   save_rds <- function (object, pathname, ...) 
[13:37:08.809]                   {
[13:37:08.809]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:37:08.809]                     if (file_test("-f", pathname_tmp)) {
[13:37:08.809]                       fi_tmp <- file.info(pathname_tmp)
[13:37:08.809]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:37:08.809]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:08.809]                         fi_tmp[["mtime"]])
[13:37:08.809]                     }
[13:37:08.809]                     tryCatch({
[13:37:08.809]                       saveRDS(object, file = pathname_tmp, ...)
[13:37:08.809]                     }, error = function(ex) {
[13:37:08.809]                       msg <- conditionMessage(ex)
[13:37:08.809]                       fi_tmp <- file.info(pathname_tmp)
[13:37:08.809]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:37:08.809]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:08.809]                         fi_tmp[["mtime"]], msg)
[13:37:08.809]                       ex$message <- msg
[13:37:08.809]                       stop(ex)
[13:37:08.809]                     })
[13:37:08.809]                     stopifnot(file_test("-f", pathname_tmp))
[13:37:08.809]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:37:08.809]                     if (!res || file_test("-f", pathname_tmp)) {
[13:37:08.809]                       fi_tmp <- file.info(pathname_tmp)
[13:37:08.809]                       fi <- file.info(pathname)
[13:37:08.809]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:37:08.809]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:08.809]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:37:08.809]                         fi[["size"]], fi[["mtime"]])
[13:37:08.809]                       stop(msg)
[13:37:08.809]                     }
[13:37:08.809]                     invisible(pathname)
[13:37:08.809]                   }
[13:37:08.809]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:37:08.809]                     rootPath = tempdir()) 
[13:37:08.809]                   {
[13:37:08.809]                     obj <- list(time = Sys.time(), condition = cond)
[13:37:08.809]                     file <- tempfile(pattern = class(cond)[1], 
[13:37:08.809]                       tmpdir = path, fileext = ".rds")
[13:37:08.809]                     save_rds(obj, file)
[13:37:08.809]                   }
[13:37:08.809]                   saveImmediateCondition(cond, path = "/tmp/RtmptV9aIe/.future/immediateConditions")
[13:37:08.809]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.809]                   {
[13:37:08.809]                     inherits <- base::inherits
[13:37:08.809]                     invokeRestart <- base::invokeRestart
[13:37:08.809]                     is.null <- base::is.null
[13:37:08.809]                     muffled <- FALSE
[13:37:08.809]                     if (inherits(cond, "message")) {
[13:37:08.809]                       muffled <- grepl(pattern, "muffleMessage")
[13:37:08.809]                       if (muffled) 
[13:37:08.809]                         invokeRestart("muffleMessage")
[13:37:08.809]                     }
[13:37:08.809]                     else if (inherits(cond, "warning")) {
[13:37:08.809]                       muffled <- grepl(pattern, "muffleWarning")
[13:37:08.809]                       if (muffled) 
[13:37:08.809]                         invokeRestart("muffleWarning")
[13:37:08.809]                     }
[13:37:08.809]                     else if (inherits(cond, "condition")) {
[13:37:08.809]                       if (!is.null(pattern)) {
[13:37:08.809]                         computeRestarts <- base::computeRestarts
[13:37:08.809]                         grepl <- base::grepl
[13:37:08.809]                         restarts <- computeRestarts(cond)
[13:37:08.809]                         for (restart in restarts) {
[13:37:08.809]                           name <- restart$name
[13:37:08.809]                           if (is.null(name)) 
[13:37:08.809]                             next
[13:37:08.809]                           if (!grepl(pattern, name)) 
[13:37:08.809]                             next
[13:37:08.809]                           invokeRestart(restart)
[13:37:08.809]                           muffled <- TRUE
[13:37:08.809]                           break
[13:37:08.809]                         }
[13:37:08.809]                       }
[13:37:08.809]                     }
[13:37:08.809]                     invisible(muffled)
[13:37:08.809]                   }
[13:37:08.809]                   muffleCondition(cond)
[13:37:08.809]                 })
[13:37:08.809]             }))
[13:37:08.809]             future::FutureResult(value = ...future.value$value, 
[13:37:08.809]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.809]                   ...future.rng), globalenv = if (FALSE) 
[13:37:08.809]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:08.809]                     ...future.globalenv.names))
[13:37:08.809]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:08.809]         }, condition = base::local({
[13:37:08.809]             c <- base::c
[13:37:08.809]             inherits <- base::inherits
[13:37:08.809]             invokeRestart <- base::invokeRestart
[13:37:08.809]             length <- base::length
[13:37:08.809]             list <- base::list
[13:37:08.809]             seq.int <- base::seq.int
[13:37:08.809]             signalCondition <- base::signalCondition
[13:37:08.809]             sys.calls <- base::sys.calls
[13:37:08.809]             `[[` <- base::`[[`
[13:37:08.809]             `+` <- base::`+`
[13:37:08.809]             `<<-` <- base::`<<-`
[13:37:08.809]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:08.809]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:08.809]                   3L)]
[13:37:08.809]             }
[13:37:08.809]             function(cond) {
[13:37:08.809]                 is_error <- inherits(cond, "error")
[13:37:08.809]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:08.809]                   NULL)
[13:37:08.809]                 if (is_error) {
[13:37:08.809]                   sessionInformation <- function() {
[13:37:08.809]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:08.809]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:08.809]                       search = base::search(), system = base::Sys.info())
[13:37:08.809]                   }
[13:37:08.809]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.809]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:08.809]                     cond$call), session = sessionInformation(), 
[13:37:08.809]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:08.809]                   signalCondition(cond)
[13:37:08.809]                 }
[13:37:08.809]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:08.809]                 "immediateCondition"))) {
[13:37:08.809]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:08.809]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.809]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:08.809]                   if (TRUE && !signal) {
[13:37:08.809]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.809]                     {
[13:37:08.809]                       inherits <- base::inherits
[13:37:08.809]                       invokeRestart <- base::invokeRestart
[13:37:08.809]                       is.null <- base::is.null
[13:37:08.809]                       muffled <- FALSE
[13:37:08.809]                       if (inherits(cond, "message")) {
[13:37:08.809]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.809]                         if (muffled) 
[13:37:08.809]                           invokeRestart("muffleMessage")
[13:37:08.809]                       }
[13:37:08.809]                       else if (inherits(cond, "warning")) {
[13:37:08.809]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.809]                         if (muffled) 
[13:37:08.809]                           invokeRestart("muffleWarning")
[13:37:08.809]                       }
[13:37:08.809]                       else if (inherits(cond, "condition")) {
[13:37:08.809]                         if (!is.null(pattern)) {
[13:37:08.809]                           computeRestarts <- base::computeRestarts
[13:37:08.809]                           grepl <- base::grepl
[13:37:08.809]                           restarts <- computeRestarts(cond)
[13:37:08.809]                           for (restart in restarts) {
[13:37:08.809]                             name <- restart$name
[13:37:08.809]                             if (is.null(name)) 
[13:37:08.809]                               next
[13:37:08.809]                             if (!grepl(pattern, name)) 
[13:37:08.809]                               next
[13:37:08.809]                             invokeRestart(restart)
[13:37:08.809]                             muffled <- TRUE
[13:37:08.809]                             break
[13:37:08.809]                           }
[13:37:08.809]                         }
[13:37:08.809]                       }
[13:37:08.809]                       invisible(muffled)
[13:37:08.809]                     }
[13:37:08.809]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.809]                   }
[13:37:08.809]                 }
[13:37:08.809]                 else {
[13:37:08.809]                   if (TRUE) {
[13:37:08.809]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.809]                     {
[13:37:08.809]                       inherits <- base::inherits
[13:37:08.809]                       invokeRestart <- base::invokeRestart
[13:37:08.809]                       is.null <- base::is.null
[13:37:08.809]                       muffled <- FALSE
[13:37:08.809]                       if (inherits(cond, "message")) {
[13:37:08.809]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.809]                         if (muffled) 
[13:37:08.809]                           invokeRestart("muffleMessage")
[13:37:08.809]                       }
[13:37:08.809]                       else if (inherits(cond, "warning")) {
[13:37:08.809]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.809]                         if (muffled) 
[13:37:08.809]                           invokeRestart("muffleWarning")
[13:37:08.809]                       }
[13:37:08.809]                       else if (inherits(cond, "condition")) {
[13:37:08.809]                         if (!is.null(pattern)) {
[13:37:08.809]                           computeRestarts <- base::computeRestarts
[13:37:08.809]                           grepl <- base::grepl
[13:37:08.809]                           restarts <- computeRestarts(cond)
[13:37:08.809]                           for (restart in restarts) {
[13:37:08.809]                             name <- restart$name
[13:37:08.809]                             if (is.null(name)) 
[13:37:08.809]                               next
[13:37:08.809]                             if (!grepl(pattern, name)) 
[13:37:08.809]                               next
[13:37:08.809]                             invokeRestart(restart)
[13:37:08.809]                             muffled <- TRUE
[13:37:08.809]                             break
[13:37:08.809]                           }
[13:37:08.809]                         }
[13:37:08.809]                       }
[13:37:08.809]                       invisible(muffled)
[13:37:08.809]                     }
[13:37:08.809]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.809]                   }
[13:37:08.809]                 }
[13:37:08.809]             }
[13:37:08.809]         }))
[13:37:08.809]     }, error = function(ex) {
[13:37:08.809]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:08.809]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.809]                 ...future.rng), started = ...future.startTime, 
[13:37:08.809]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:08.809]             version = "1.8"), class = "FutureResult")
[13:37:08.809]     }, finally = {
[13:37:08.809]         if (!identical(...future.workdir, getwd())) 
[13:37:08.809]             setwd(...future.workdir)
[13:37:08.809]         {
[13:37:08.809]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:08.809]                 ...future.oldOptions$nwarnings <- NULL
[13:37:08.809]             }
[13:37:08.809]             base::options(...future.oldOptions)
[13:37:08.809]             if (.Platform$OS.type == "windows") {
[13:37:08.809]                 old_names <- names(...future.oldEnvVars)
[13:37:08.809]                 envs <- base::Sys.getenv()
[13:37:08.809]                 names <- names(envs)
[13:37:08.809]                 common <- intersect(names, old_names)
[13:37:08.809]                 added <- setdiff(names, old_names)
[13:37:08.809]                 removed <- setdiff(old_names, names)
[13:37:08.809]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:08.809]                   envs[common]]
[13:37:08.809]                 NAMES <- toupper(changed)
[13:37:08.809]                 args <- list()
[13:37:08.809]                 for (kk in seq_along(NAMES)) {
[13:37:08.809]                   name <- changed[[kk]]
[13:37:08.809]                   NAME <- NAMES[[kk]]
[13:37:08.809]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.809]                     next
[13:37:08.809]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.809]                 }
[13:37:08.809]                 NAMES <- toupper(added)
[13:37:08.809]                 for (kk in seq_along(NAMES)) {
[13:37:08.809]                   name <- added[[kk]]
[13:37:08.809]                   NAME <- NAMES[[kk]]
[13:37:08.809]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.809]                     next
[13:37:08.809]                   args[[name]] <- ""
[13:37:08.809]                 }
[13:37:08.809]                 NAMES <- toupper(removed)
[13:37:08.809]                 for (kk in seq_along(NAMES)) {
[13:37:08.809]                   name <- removed[[kk]]
[13:37:08.809]                   NAME <- NAMES[[kk]]
[13:37:08.809]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.809]                     next
[13:37:08.809]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.809]                 }
[13:37:08.809]                 if (length(args) > 0) 
[13:37:08.809]                   base::do.call(base::Sys.setenv, args = args)
[13:37:08.809]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:08.809]             }
[13:37:08.809]             else {
[13:37:08.809]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:08.809]             }
[13:37:08.809]             {
[13:37:08.809]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:08.809]                   0L) {
[13:37:08.809]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:08.809]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:08.809]                   base::options(opts)
[13:37:08.809]                 }
[13:37:08.809]                 {
[13:37:08.809]                   {
[13:37:08.809]                     base::options(mc.cores = ...future.mc.cores.old)
[13:37:08.809]                     NULL
[13:37:08.809]                   }
[13:37:08.809]                   options(future.plan = NULL)
[13:37:08.809]                   if (is.na(NA_character_)) 
[13:37:08.809]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.809]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:08.809]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:08.809]                     .init = FALSE)
[13:37:08.809]                 }
[13:37:08.809]             }
[13:37:08.809]         }
[13:37:08.809]     })
[13:37:08.809]     if (TRUE) {
[13:37:08.809]         base::sink(type = "output", split = FALSE)
[13:37:08.809]         if (TRUE) {
[13:37:08.809]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:08.809]         }
[13:37:08.809]         else {
[13:37:08.809]             ...future.result["stdout"] <- base::list(NULL)
[13:37:08.809]         }
[13:37:08.809]         base::close(...future.stdout)
[13:37:08.809]         ...future.stdout <- NULL
[13:37:08.809]     }
[13:37:08.809]     ...future.result$conditions <- ...future.conditions
[13:37:08.809]     ...future.result$finished <- base::Sys.time()
[13:37:08.809]     ...future.result
[13:37:08.809] }
[13:37:08.812] requestCore(): workers = 2
[13:37:08.814] MulticoreFuture started
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    stop("Whoops!")
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[13:37:08.815] plan(): Setting new future strategy stack:
[13:37:08.815] List of future strategies:
[13:37:08.815] 1. sequential:
[13:37:08.815]    - args: function (..., envir = parent.frame())
[13:37:08.815]    - tweaked: FALSE
[13:37:08.815]    - call: NULL
[13:37:08.816] plan(): nbrOfWorkers() = 1
[13:37:08.819] plan(): Setting new future strategy stack:
[13:37:08.819] List of future strategies:
[13:37:08.819] 1. multicore:
[13:37:08.819]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:37:08.819]    - tweaked: FALSE
[13:37:08.819]    - call: plan(multicore)
[13:37:08.824] plan(): nbrOfWorkers() = 2
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 95e450d1-e7b8-6209-6c23-e4c8d06e1b18
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:37:08.825] result() for MulticoreFuture ...
[13:37:08.829] result() for MulticoreFuture ...
[13:37:08.829] result() for MulticoreFuture ... done
[13:37:08.829] signalConditions() ...
[13:37:08.830]  - include = ‘immediateCondition’
[13:37:08.830]  - exclude = 
[13:37:08.830]  - resignal = FALSE
[13:37:08.830]  - Number of conditions: 1
[13:37:08.830] signalConditions() ... done
[13:37:08.830] result() for MulticoreFuture ... done
[13:37:08.830] result() for MulticoreFuture ...
[13:37:08.831] result() for MulticoreFuture ... done
[13:37:08.831] signalConditions() ...
[13:37:08.831]  - include = ‘immediateCondition’
[13:37:08.831]  - exclude = 
[13:37:08.831]  - resignal = FALSE
[13:37:08.831]  - Number of conditions: 1
[13:37:08.831] signalConditions() ... done
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    save_rds <- function (object, pathname, ...)     {        pathname_tmp <- sprintf("%s.tmp", pathname)        if (file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]])        }        tryCatch({            saveRDS(object, file = pathname_tmp, ...)        }, error = function(ex) {            msg <- conditionMessage(ex)            fi_tmp <- file.info(pathname_tmp)            msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 msg)            ex$message <- msg            stop(ex)        })        stopifnot(file_test("-f", pathname_tmp))        res <- file.rename(from = pathname_tmp, to = pathname)        if (!res || file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            fi <- file.info(pathname)            msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 sQuote(pathname), fi[["size"]], fi[["mtime"]])            stop(msg)        }        invisible(pathname)    }    saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath),         rootPath = tempdir())     {        obj <- list(time = Sys.time(), condition = cond)        file <- tempfile(pattern = class(cond)[1], tmpdir = path,             fileext = ".rds")        save_rds(obj, file)    }    saveImmediateCondition(cond, path = "/tmp/RtmptV9aIe/.future/immediateConditions")    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[13:37:08.832] result() for MulticoreFuture ...
[13:37:08.832] result() for MulticoreFuture ... done
[13:37:08.832] result() for MulticoreFuture ...
[13:37:08.832] result() for MulticoreFuture ... done
[13:37:08.832] signalConditions() ...
[13:37:08.833]  - include = ‘immediateCondition’
[13:37:08.833]  - exclude = 
[13:37:08.833]  - resignal = FALSE
[13:37:08.833]  - Number of conditions: 1
[13:37:08.833] signalConditions() ... done
[13:37:08.833] Future state: ‘finished’
[13:37:08.833] result() for MulticoreFuture ...
[13:37:08.833] result() for MulticoreFuture ... done
[13:37:08.833] signalConditions() ...
[13:37:08.834]  - include = ‘condition’
[13:37:08.834]  - exclude = ‘immediateCondition’
[13:37:08.834]  - resignal = TRUE
[13:37:08.834]  - Number of conditions: 1
[13:37:08.834]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[13:37:08.834] signalConditions() ... done
[1] "Error in withCallingHandlers({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    save_rds <- function (object, pathname, ...)     {        pathname_tmp <- sprintf("%s.tmp", pathname)        if (file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]])        }        tryCatch({            saveRDS(object, file = pathname_tmp, ...)        }, error = function(ex) {            msg <- conditionMessage(ex)            fi_tmp <- file.info(pathname_tmp)            msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 msg)            ex$message <- msg            stop(ex)        })        stopifnot(file_test("-f", pathname_tmp))        res <- file.rename(from = pathname_tmp, to = pathname)        if (!res || file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            fi <- file.info(pathname)            msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 sQuote(pathname), fi[["size"]], fi[["mtime"]])            stop(msg)        }        invisible(pathname)    }    saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath),         rootPath = tempdir())     {        obj <- list(time = Sys.time(), condition = cond)        file <- tempfile(pattern = class(cond)[1], tmpdir = path,             fileext = ".rds")        save_rds(obj, file)    }    saveImmediateCondition(cond, path = "/tmp/RtmptV9aIe/.future/immediateConditions")    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[13:37:08.835] result() for MulticoreFuture ...
[13:37:08.835] result() for MulticoreFuture ... done
[13:37:08.835] result() for MulticoreFuture ...
[13:37:08.835] result() for MulticoreFuture ... done
[13:37:08.835] signalConditions() ...
[13:37:08.836]  - include = ‘immediateCondition’
[13:37:08.836]  - exclude = 
[13:37:08.836]  - resignal = FALSE
[13:37:08.836]  - Number of conditions: 1
[13:37:08.836] signalConditions() ... done
[13:37:08.836] Future state: ‘finished’
[13:37:08.836] result() for MulticoreFuture ...
[13:37:08.836] result() for MulticoreFuture ... done
[13:37:08.836] signalConditions() ...
[13:37:08.837]  - include = ‘condition’
[13:37:08.837]  - exclude = ‘immediateCondition’
[13:37:08.837]  - resignal = TRUE
[13:37:08.837]  - Number of conditions: 1
[13:37:08.837]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[13:37:08.837] signalConditions() ... done
[1] "Error in withCallingHandlers({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    save_rds <- function (object, pathname, ...)     {        pathname_tmp <- sprintf("%s.tmp", pathname)        if (file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]])        }        tryCatch({            saveRDS(object, file = pathname_tmp, ...)        }, error = function(ex) {            msg <- conditionMessage(ex)            fi_tmp <- file.info(pathname_tmp)            msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 msg)            ex$message <- msg            stop(ex)        })        stopifnot(file_test("-f", pathname_tmp))        res <- file.rename(from = pathname_tmp, to = pathname)        if (!res || file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            fi <- file.info(pathname)            msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 sQuote(pathname), fi[["size"]], fi[["mtime"]])            stop(msg)        }        invisible(pathname)    }    saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath),         rootPath = tempdir())     {        obj <- list(time = Sys.time(), condition = cond)        file <- tempfile(pattern = class(cond)[1], tmpdir = path,             fileext = ".rds")        save_rds(obj, file)    }    saveImmediateCondition(cond, path = "/tmp/RtmptV9aIe/.future/immediateConditions")    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[13:37:08.842] getGlobalsAndPackages() ...
[13:37:08.842] 
[13:37:08.842] - globals: [0] <none>
[13:37:08.842] getGlobalsAndPackages() ... DONE
[13:37:08.843] Packages needed by the future expression (n = 0): <none>
[13:37:08.843] Packages needed by future strategies (n = 0): <none>
[13:37:08.843] {
[13:37:08.843]     {
[13:37:08.843]         {
[13:37:08.843]             ...future.startTime <- base::Sys.time()
[13:37:08.843]             {
[13:37:08.843]                 {
[13:37:08.843]                   {
[13:37:08.843]                     {
[13:37:08.843]                       base::local({
[13:37:08.843]                         has_future <- base::requireNamespace("future", 
[13:37:08.843]                           quietly = TRUE)
[13:37:08.843]                         if (has_future) {
[13:37:08.843]                           ns <- base::getNamespace("future")
[13:37:08.843]                           version <- ns[[".package"]][["version"]]
[13:37:08.843]                           if (is.null(version)) 
[13:37:08.843]                             version <- utils::packageVersion("future")
[13:37:08.843]                         }
[13:37:08.843]                         else {
[13:37:08.843]                           version <- NULL
[13:37:08.843]                         }
[13:37:08.843]                         if (!has_future || version < "1.8.0") {
[13:37:08.843]                           info <- base::c(r_version = base::gsub("R version ", 
[13:37:08.843]                             "", base::R.version$version.string), 
[13:37:08.843]                             platform = base::sprintf("%s (%s-bit)", 
[13:37:08.843]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:08.843]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:08.843]                               "release", "version")], collapse = " "), 
[13:37:08.843]                             hostname = base::Sys.info()[["nodename"]])
[13:37:08.843]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:37:08.843]                             info)
[13:37:08.843]                           info <- base::paste(info, collapse = "; ")
[13:37:08.843]                           if (!has_future) {
[13:37:08.843]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:08.843]                               info)
[13:37:08.843]                           }
[13:37:08.843]                           else {
[13:37:08.843]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:08.843]                               info, version)
[13:37:08.843]                           }
[13:37:08.843]                           base::stop(msg)
[13:37:08.843]                         }
[13:37:08.843]                       })
[13:37:08.843]                     }
[13:37:08.843]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:37:08.843]                     base::options(mc.cores = 1L)
[13:37:08.843]                   }
[13:37:08.843]                   ...future.strategy.old <- future::plan("list")
[13:37:08.843]                   options(future.plan = NULL)
[13:37:08.843]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.843]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:08.843]                 }
[13:37:08.843]                 ...future.workdir <- getwd()
[13:37:08.843]             }
[13:37:08.843]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:08.843]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:08.843]         }
[13:37:08.843]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:08.843]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:08.843]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:08.843]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:08.843]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:08.843]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:08.843]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:08.843]             base::names(...future.oldOptions))
[13:37:08.843]     }
[13:37:08.843]     if (FALSE) {
[13:37:08.843]     }
[13:37:08.843]     else {
[13:37:08.843]         if (TRUE) {
[13:37:08.843]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:08.843]                 open = "w")
[13:37:08.843]         }
[13:37:08.843]         else {
[13:37:08.843]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:08.843]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:08.843]         }
[13:37:08.843]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:08.843]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:08.843]             base::sink(type = "output", split = FALSE)
[13:37:08.843]             base::close(...future.stdout)
[13:37:08.843]         }, add = TRUE)
[13:37:08.843]     }
[13:37:08.843]     ...future.frame <- base::sys.nframe()
[13:37:08.843]     ...future.conditions <- base::list()
[13:37:08.843]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:08.843]     if (FALSE) {
[13:37:08.843]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:08.843]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:08.843]     }
[13:37:08.843]     ...future.result <- base::tryCatch({
[13:37:08.843]         base::withCallingHandlers({
[13:37:08.843]             ...future.value <- base::withVisible(base::local({
[13:37:08.843]                 withCallingHandlers({
[13:37:08.843]                   {
[13:37:08.843]                     stop(structure(list(message = "boom"), class = c("MyError", 
[13:37:08.843]                       "error", "condition")))
[13:37:08.843]                   }
[13:37:08.843]                 }, immediateCondition = function(cond) {
[13:37:08.843]                   save_rds <- function (object, pathname, ...) 
[13:37:08.843]                   {
[13:37:08.843]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:37:08.843]                     if (file_test("-f", pathname_tmp)) {
[13:37:08.843]                       fi_tmp <- file.info(pathname_tmp)
[13:37:08.843]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:37:08.843]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:08.843]                         fi_tmp[["mtime"]])
[13:37:08.843]                     }
[13:37:08.843]                     tryCatch({
[13:37:08.843]                       saveRDS(object, file = pathname_tmp, ...)
[13:37:08.843]                     }, error = function(ex) {
[13:37:08.843]                       msg <- conditionMessage(ex)
[13:37:08.843]                       fi_tmp <- file.info(pathname_tmp)
[13:37:08.843]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:37:08.843]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:08.843]                         fi_tmp[["mtime"]], msg)
[13:37:08.843]                       ex$message <- msg
[13:37:08.843]                       stop(ex)
[13:37:08.843]                     })
[13:37:08.843]                     stopifnot(file_test("-f", pathname_tmp))
[13:37:08.843]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:37:08.843]                     if (!res || file_test("-f", pathname_tmp)) {
[13:37:08.843]                       fi_tmp <- file.info(pathname_tmp)
[13:37:08.843]                       fi <- file.info(pathname)
[13:37:08.843]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:37:08.843]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:08.843]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:37:08.843]                         fi[["size"]], fi[["mtime"]])
[13:37:08.843]                       stop(msg)
[13:37:08.843]                     }
[13:37:08.843]                     invisible(pathname)
[13:37:08.843]                   }
[13:37:08.843]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:37:08.843]                     rootPath = tempdir()) 
[13:37:08.843]                   {
[13:37:08.843]                     obj <- list(time = Sys.time(), condition = cond)
[13:37:08.843]                     file <- tempfile(pattern = class(cond)[1], 
[13:37:08.843]                       tmpdir = path, fileext = ".rds")
[13:37:08.843]                     save_rds(obj, file)
[13:37:08.843]                   }
[13:37:08.843]                   saveImmediateCondition(cond, path = "/tmp/RtmptV9aIe/.future/immediateConditions")
[13:37:08.843]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.843]                   {
[13:37:08.843]                     inherits <- base::inherits
[13:37:08.843]                     invokeRestart <- base::invokeRestart
[13:37:08.843]                     is.null <- base::is.null
[13:37:08.843]                     muffled <- FALSE
[13:37:08.843]                     if (inherits(cond, "message")) {
[13:37:08.843]                       muffled <- grepl(pattern, "muffleMessage")
[13:37:08.843]                       if (muffled) 
[13:37:08.843]                         invokeRestart("muffleMessage")
[13:37:08.843]                     }
[13:37:08.843]                     else if (inherits(cond, "warning")) {
[13:37:08.843]                       muffled <- grepl(pattern, "muffleWarning")
[13:37:08.843]                       if (muffled) 
[13:37:08.843]                         invokeRestart("muffleWarning")
[13:37:08.843]                     }
[13:37:08.843]                     else if (inherits(cond, "condition")) {
[13:37:08.843]                       if (!is.null(pattern)) {
[13:37:08.843]                         computeRestarts <- base::computeRestarts
[13:37:08.843]                         grepl <- base::grepl
[13:37:08.843]                         restarts <- computeRestarts(cond)
[13:37:08.843]                         for (restart in restarts) {
[13:37:08.843]                           name <- restart$name
[13:37:08.843]                           if (is.null(name)) 
[13:37:08.843]                             next
[13:37:08.843]                           if (!grepl(pattern, name)) 
[13:37:08.843]                             next
[13:37:08.843]                           invokeRestart(restart)
[13:37:08.843]                           muffled <- TRUE
[13:37:08.843]                           break
[13:37:08.843]                         }
[13:37:08.843]                       }
[13:37:08.843]                     }
[13:37:08.843]                     invisible(muffled)
[13:37:08.843]                   }
[13:37:08.843]                   muffleCondition(cond)
[13:37:08.843]                 })
[13:37:08.843]             }))
[13:37:08.843]             future::FutureResult(value = ...future.value$value, 
[13:37:08.843]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.843]                   ...future.rng), globalenv = if (FALSE) 
[13:37:08.843]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:08.843]                     ...future.globalenv.names))
[13:37:08.843]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:08.843]         }, condition = base::local({
[13:37:08.843]             c <- base::c
[13:37:08.843]             inherits <- base::inherits
[13:37:08.843]             invokeRestart <- base::invokeRestart
[13:37:08.843]             length <- base::length
[13:37:08.843]             list <- base::list
[13:37:08.843]             seq.int <- base::seq.int
[13:37:08.843]             signalCondition <- base::signalCondition
[13:37:08.843]             sys.calls <- base::sys.calls
[13:37:08.843]             `[[` <- base::`[[`
[13:37:08.843]             `+` <- base::`+`
[13:37:08.843]             `<<-` <- base::`<<-`
[13:37:08.843]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:08.843]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:08.843]                   3L)]
[13:37:08.843]             }
[13:37:08.843]             function(cond) {
[13:37:08.843]                 is_error <- inherits(cond, "error")
[13:37:08.843]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:08.843]                   NULL)
[13:37:08.843]                 if (is_error) {
[13:37:08.843]                   sessionInformation <- function() {
[13:37:08.843]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:08.843]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:08.843]                       search = base::search(), system = base::Sys.info())
[13:37:08.843]                   }
[13:37:08.843]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.843]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:08.843]                     cond$call), session = sessionInformation(), 
[13:37:08.843]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:08.843]                   signalCondition(cond)
[13:37:08.843]                 }
[13:37:08.843]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:08.843]                 "immediateCondition"))) {
[13:37:08.843]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:08.843]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.843]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:08.843]                   if (TRUE && !signal) {
[13:37:08.843]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.843]                     {
[13:37:08.843]                       inherits <- base::inherits
[13:37:08.843]                       invokeRestart <- base::invokeRestart
[13:37:08.843]                       is.null <- base::is.null
[13:37:08.843]                       muffled <- FALSE
[13:37:08.843]                       if (inherits(cond, "message")) {
[13:37:08.843]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.843]                         if (muffled) 
[13:37:08.843]                           invokeRestart("muffleMessage")
[13:37:08.843]                       }
[13:37:08.843]                       else if (inherits(cond, "warning")) {
[13:37:08.843]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.843]                         if (muffled) 
[13:37:08.843]                           invokeRestart("muffleWarning")
[13:37:08.843]                       }
[13:37:08.843]                       else if (inherits(cond, "condition")) {
[13:37:08.843]                         if (!is.null(pattern)) {
[13:37:08.843]                           computeRestarts <- base::computeRestarts
[13:37:08.843]                           grepl <- base::grepl
[13:37:08.843]                           restarts <- computeRestarts(cond)
[13:37:08.843]                           for (restart in restarts) {
[13:37:08.843]                             name <- restart$name
[13:37:08.843]                             if (is.null(name)) 
[13:37:08.843]                               next
[13:37:08.843]                             if (!grepl(pattern, name)) 
[13:37:08.843]                               next
[13:37:08.843]                             invokeRestart(restart)
[13:37:08.843]                             muffled <- TRUE
[13:37:08.843]                             break
[13:37:08.843]                           }
[13:37:08.843]                         }
[13:37:08.843]                       }
[13:37:08.843]                       invisible(muffled)
[13:37:08.843]                     }
[13:37:08.843]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.843]                   }
[13:37:08.843]                 }
[13:37:08.843]                 else {
[13:37:08.843]                   if (TRUE) {
[13:37:08.843]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.843]                     {
[13:37:08.843]                       inherits <- base::inherits
[13:37:08.843]                       invokeRestart <- base::invokeRestart
[13:37:08.843]                       is.null <- base::is.null
[13:37:08.843]                       muffled <- FALSE
[13:37:08.843]                       if (inherits(cond, "message")) {
[13:37:08.843]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.843]                         if (muffled) 
[13:37:08.843]                           invokeRestart("muffleMessage")
[13:37:08.843]                       }
[13:37:08.843]                       else if (inherits(cond, "warning")) {
[13:37:08.843]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.843]                         if (muffled) 
[13:37:08.843]                           invokeRestart("muffleWarning")
[13:37:08.843]                       }
[13:37:08.843]                       else if (inherits(cond, "condition")) {
[13:37:08.843]                         if (!is.null(pattern)) {
[13:37:08.843]                           computeRestarts <- base::computeRestarts
[13:37:08.843]                           grepl <- base::grepl
[13:37:08.843]                           restarts <- computeRestarts(cond)
[13:37:08.843]                           for (restart in restarts) {
[13:37:08.843]                             name <- restart$name
[13:37:08.843]                             if (is.null(name)) 
[13:37:08.843]                               next
[13:37:08.843]                             if (!grepl(pattern, name)) 
[13:37:08.843]                               next
[13:37:08.843]                             invokeRestart(restart)
[13:37:08.843]                             muffled <- TRUE
[13:37:08.843]                             break
[13:37:08.843]                           }
[13:37:08.843]                         }
[13:37:08.843]                       }
[13:37:08.843]                       invisible(muffled)
[13:37:08.843]                     }
[13:37:08.843]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.843]                   }
[13:37:08.843]                 }
[13:37:08.843]             }
[13:37:08.843]         }))
[13:37:08.843]     }, error = function(ex) {
[13:37:08.843]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:08.843]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.843]                 ...future.rng), started = ...future.startTime, 
[13:37:08.843]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:08.843]             version = "1.8"), class = "FutureResult")
[13:37:08.843]     }, finally = {
[13:37:08.843]         if (!identical(...future.workdir, getwd())) 
[13:37:08.843]             setwd(...future.workdir)
[13:37:08.843]         {
[13:37:08.843]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:08.843]                 ...future.oldOptions$nwarnings <- NULL
[13:37:08.843]             }
[13:37:08.843]             base::options(...future.oldOptions)
[13:37:08.843]             if (.Platform$OS.type == "windows") {
[13:37:08.843]                 old_names <- names(...future.oldEnvVars)
[13:37:08.843]                 envs <- base::Sys.getenv()
[13:37:08.843]                 names <- names(envs)
[13:37:08.843]                 common <- intersect(names, old_names)
[13:37:08.843]                 added <- setdiff(names, old_names)
[13:37:08.843]                 removed <- setdiff(old_names, names)
[13:37:08.843]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:08.843]                   envs[common]]
[13:37:08.843]                 NAMES <- toupper(changed)
[13:37:08.843]                 args <- list()
[13:37:08.843]                 for (kk in seq_along(NAMES)) {
[13:37:08.843]                   name <- changed[[kk]]
[13:37:08.843]                   NAME <- NAMES[[kk]]
[13:37:08.843]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.843]                     next
[13:37:08.843]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.843]                 }
[13:37:08.843]                 NAMES <- toupper(added)
[13:37:08.843]                 for (kk in seq_along(NAMES)) {
[13:37:08.843]                   name <- added[[kk]]
[13:37:08.843]                   NAME <- NAMES[[kk]]
[13:37:08.843]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.843]                     next
[13:37:08.843]                   args[[name]] <- ""
[13:37:08.843]                 }
[13:37:08.843]                 NAMES <- toupper(removed)
[13:37:08.843]                 for (kk in seq_along(NAMES)) {
[13:37:08.843]                   name <- removed[[kk]]
[13:37:08.843]                   NAME <- NAMES[[kk]]
[13:37:08.843]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.843]                     next
[13:37:08.843]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.843]                 }
[13:37:08.843]                 if (length(args) > 0) 
[13:37:08.843]                   base::do.call(base::Sys.setenv, args = args)
[13:37:08.843]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:08.843]             }
[13:37:08.843]             else {
[13:37:08.843]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:08.843]             }
[13:37:08.843]             {
[13:37:08.843]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:08.843]                   0L) {
[13:37:08.843]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:08.843]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:08.843]                   base::options(opts)
[13:37:08.843]                 }
[13:37:08.843]                 {
[13:37:08.843]                   {
[13:37:08.843]                     base::options(mc.cores = ...future.mc.cores.old)
[13:37:08.843]                     NULL
[13:37:08.843]                   }
[13:37:08.843]                   options(future.plan = NULL)
[13:37:08.843]                   if (is.na(NA_character_)) 
[13:37:08.843]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.843]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:08.843]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:08.843]                     .init = FALSE)
[13:37:08.843]                 }
[13:37:08.843]             }
[13:37:08.843]         }
[13:37:08.843]     })
[13:37:08.843]     if (TRUE) {
[13:37:08.843]         base::sink(type = "output", split = FALSE)
[13:37:08.843]         if (TRUE) {
[13:37:08.843]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:08.843]         }
[13:37:08.843]         else {
[13:37:08.843]             ...future.result["stdout"] <- base::list(NULL)
[13:37:08.843]         }
[13:37:08.843]         base::close(...future.stdout)
[13:37:08.843]         ...future.stdout <- NULL
[13:37:08.843]     }
[13:37:08.843]     ...future.result$conditions <- ...future.conditions
[13:37:08.843]     ...future.result$finished <- base::Sys.time()
[13:37:08.843]     ...future.result
[13:37:08.843] }
[13:37:08.846] requestCore(): workers = 2
[13:37:08.847] MulticoreFuture started
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    stop(structure(list(message = "boom"), class = c("MyError", 
        "error", "condition")))
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[13:37:08.848] plan(): Setting new future strategy stack:
[13:37:08.849] List of future strategies:
[13:37:08.849] 1. sequential:
[13:37:08.849]    - args: function (..., envir = parent.frame())
[13:37:08.849]    - tweaked: FALSE
[13:37:08.849]    - call: NULL
[13:37:08.850] plan(): nbrOfWorkers() = 1
[13:37:08.851] plan(): Setting new future strategy stack:
[13:37:08.852] List of future strategies:
[13:37:08.852] 1. multicore:
[13:37:08.852]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:37:08.852]    - tweaked: FALSE
[13:37:08.852]    - call: plan(multicore)
[13:37:08.856] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 95e450d1-e7b8-6209-6c23-e4c8d06e1b18
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:37:08.859] result() for MulticoreFuture ...
[13:37:08.861] result() for MulticoreFuture ...
[13:37:08.861] result() for MulticoreFuture ... done
[13:37:08.861] signalConditions() ...
[13:37:08.861]  - include = ‘immediateCondition’
[13:37:08.862]  - exclude = 
[13:37:08.862]  - resignal = FALSE
[13:37:08.862]  - Number of conditions: 1
[13:37:08.862] signalConditions() ... done
[13:37:08.862] result() for MulticoreFuture ... done
[13:37:08.862] result() for MulticoreFuture ...
[13:37:08.863] result() for MulticoreFuture ... done
[13:37:08.863] signalConditions() ...
[13:37:08.863]  - include = ‘immediateCondition’
[13:37:08.863]  - exclude = 
[13:37:08.863]  - resignal = FALSE
[13:37:08.863]  - Number of conditions: 1
[13:37:08.864] signalConditions() ... done
<MyError: boom>
[13:37:08.864] result() for MulticoreFuture ...
[13:37:08.864] result() for MulticoreFuture ... done
[13:37:08.864] result() for MulticoreFuture ...
[13:37:08.864] result() for MulticoreFuture ... done
[13:37:08.864] signalConditions() ...
[13:37:08.864]  - include = ‘immediateCondition’
[13:37:08.865]  - exclude = 
[13:37:08.865]  - resignal = FALSE
[13:37:08.865]  - Number of conditions: 1
[13:37:08.865] signalConditions() ... done
[13:37:08.865] Future state: ‘finished’
[13:37:08.865] result() for MulticoreFuture ...
[13:37:08.865] result() for MulticoreFuture ... done
[13:37:08.865] signalConditions() ...
[13:37:08.865]  - include = ‘condition’
[13:37:08.866]  - exclude = ‘immediateCondition’
[13:37:08.866]  - resignal = TRUE
[13:37:08.866]  - Number of conditions: 1
[13:37:08.866]  - Condition #1: ‘MyError’, ‘error’, ‘condition’
[13:37:08.866] signalConditions() ... done
*** multicore(..., workers = 1L) ...
[13:37:08.866] getGlobalsAndPackages() ...
[13:37:08.866] Searching for globals...
[13:37:08.868] - globals found: [4] ‘{’, ‘*’, ‘a’, ‘b’
[13:37:08.868] Searching for globals ... DONE
[13:37:08.868] Resolving globals: FALSE
[13:37:08.872] The total size of the 2 globals is 112 bytes (112 bytes)
[13:37:08.873] The total size of the 2 globals exported for future expression (‘{; a * b; }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘a’ (56 bytes of class ‘numeric’) and ‘b’ (56 bytes of class ‘numeric’)
[13:37:08.873] - globals: [2] ‘a’, ‘b’
[13:37:08.873] 
[13:37:08.873] getGlobalsAndPackages() ... DONE
[13:37:08.874] Packages needed by the future expression (n = 0): <none>
[13:37:08.874] Packages needed by future strategies (n = 0): <none>
[13:37:08.875] {
[13:37:08.875]     {
[13:37:08.875]         {
[13:37:08.875]             ...future.startTime <- base::Sys.time()
[13:37:08.875]             {
[13:37:08.875]                 {
[13:37:08.875]                   {
[13:37:08.875]                     base::local({
[13:37:08.875]                       has_future <- base::requireNamespace("future", 
[13:37:08.875]                         quietly = TRUE)
[13:37:08.875]                       if (has_future) {
[13:37:08.875]                         ns <- base::getNamespace("future")
[13:37:08.875]                         version <- ns[[".package"]][["version"]]
[13:37:08.875]                         if (is.null(version)) 
[13:37:08.875]                           version <- utils::packageVersion("future")
[13:37:08.875]                       }
[13:37:08.875]                       else {
[13:37:08.875]                         version <- NULL
[13:37:08.875]                       }
[13:37:08.875]                       if (!has_future || version < "1.8.0") {
[13:37:08.875]                         info <- base::c(r_version = base::gsub("R version ", 
[13:37:08.875]                           "", base::R.version$version.string), 
[13:37:08.875]                           platform = base::sprintf("%s (%s-bit)", 
[13:37:08.875]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:08.875]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:08.875]                             "release", "version")], collapse = " "), 
[13:37:08.875]                           hostname = base::Sys.info()[["nodename"]])
[13:37:08.875]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:37:08.875]                           info)
[13:37:08.875]                         info <- base::paste(info, collapse = "; ")
[13:37:08.875]                         if (!has_future) {
[13:37:08.875]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:08.875]                             info)
[13:37:08.875]                         }
[13:37:08.875]                         else {
[13:37:08.875]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:08.875]                             info, version)
[13:37:08.875]                         }
[13:37:08.875]                         base::stop(msg)
[13:37:08.875]                       }
[13:37:08.875]                     })
[13:37:08.875]                   }
[13:37:08.875]                   ...future.strategy.old <- future::plan("list")
[13:37:08.875]                   options(future.plan = NULL)
[13:37:08.875]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.875]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:08.875]                 }
[13:37:08.875]                 ...future.workdir <- getwd()
[13:37:08.875]             }
[13:37:08.875]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:08.875]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:08.875]         }
[13:37:08.875]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:08.875]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:08.875]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:08.875]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:08.875]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:08.875]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:08.875]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:08.875]             base::names(...future.oldOptions))
[13:37:08.875]     }
[13:37:08.875]     if (FALSE) {
[13:37:08.875]     }
[13:37:08.875]     else {
[13:37:08.875]         if (TRUE) {
[13:37:08.875]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:08.875]                 open = "w")
[13:37:08.875]         }
[13:37:08.875]         else {
[13:37:08.875]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:08.875]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:08.875]         }
[13:37:08.875]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:08.875]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:08.875]             base::sink(type = "output", split = FALSE)
[13:37:08.875]             base::close(...future.stdout)
[13:37:08.875]         }, add = TRUE)
[13:37:08.875]     }
[13:37:08.875]     ...future.frame <- base::sys.nframe()
[13:37:08.875]     ...future.conditions <- base::list()
[13:37:08.875]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:08.875]     if (FALSE) {
[13:37:08.875]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:08.875]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:08.875]     }
[13:37:08.875]     ...future.result <- base::tryCatch({
[13:37:08.875]         base::withCallingHandlers({
[13:37:08.875]             ...future.value <- base::withVisible(base::local({
[13:37:08.875]                 a * b
[13:37:08.875]             }))
[13:37:08.875]             future::FutureResult(value = ...future.value$value, 
[13:37:08.875]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.875]                   ...future.rng), globalenv = if (FALSE) 
[13:37:08.875]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:08.875]                     ...future.globalenv.names))
[13:37:08.875]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:08.875]         }, condition = base::local({
[13:37:08.875]             c <- base::c
[13:37:08.875]             inherits <- base::inherits
[13:37:08.875]             invokeRestart <- base::invokeRestart
[13:37:08.875]             length <- base::length
[13:37:08.875]             list <- base::list
[13:37:08.875]             seq.int <- base::seq.int
[13:37:08.875]             signalCondition <- base::signalCondition
[13:37:08.875]             sys.calls <- base::sys.calls
[13:37:08.875]             `[[` <- base::`[[`
[13:37:08.875]             `+` <- base::`+`
[13:37:08.875]             `<<-` <- base::`<<-`
[13:37:08.875]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:08.875]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:08.875]                   3L)]
[13:37:08.875]             }
[13:37:08.875]             function(cond) {
[13:37:08.875]                 is_error <- inherits(cond, "error")
[13:37:08.875]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:08.875]                   NULL)
[13:37:08.875]                 if (is_error) {
[13:37:08.875]                   sessionInformation <- function() {
[13:37:08.875]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:08.875]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:08.875]                       search = base::search(), system = base::Sys.info())
[13:37:08.875]                   }
[13:37:08.875]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.875]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:08.875]                     cond$call), session = sessionInformation(), 
[13:37:08.875]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:08.875]                   signalCondition(cond)
[13:37:08.875]                 }
[13:37:08.875]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:08.875]                 "immediateCondition"))) {
[13:37:08.875]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:08.875]                   ...future.conditions[[length(...future.conditions) + 
[13:37:08.875]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:08.875]                   if (TRUE && !signal) {
[13:37:08.875]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.875]                     {
[13:37:08.875]                       inherits <- base::inherits
[13:37:08.875]                       invokeRestart <- base::invokeRestart
[13:37:08.875]                       is.null <- base::is.null
[13:37:08.875]                       muffled <- FALSE
[13:37:08.875]                       if (inherits(cond, "message")) {
[13:37:08.875]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.875]                         if (muffled) 
[13:37:08.875]                           invokeRestart("muffleMessage")
[13:37:08.875]                       }
[13:37:08.875]                       else if (inherits(cond, "warning")) {
[13:37:08.875]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.875]                         if (muffled) 
[13:37:08.875]                           invokeRestart("muffleWarning")
[13:37:08.875]                       }
[13:37:08.875]                       else if (inherits(cond, "condition")) {
[13:37:08.875]                         if (!is.null(pattern)) {
[13:37:08.875]                           computeRestarts <- base::computeRestarts
[13:37:08.875]                           grepl <- base::grepl
[13:37:08.875]                           restarts <- computeRestarts(cond)
[13:37:08.875]                           for (restart in restarts) {
[13:37:08.875]                             name <- restart$name
[13:37:08.875]                             if (is.null(name)) 
[13:37:08.875]                               next
[13:37:08.875]                             if (!grepl(pattern, name)) 
[13:37:08.875]                               next
[13:37:08.875]                             invokeRestart(restart)
[13:37:08.875]                             muffled <- TRUE
[13:37:08.875]                             break
[13:37:08.875]                           }
[13:37:08.875]                         }
[13:37:08.875]                       }
[13:37:08.875]                       invisible(muffled)
[13:37:08.875]                     }
[13:37:08.875]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.875]                   }
[13:37:08.875]                 }
[13:37:08.875]                 else {
[13:37:08.875]                   if (TRUE) {
[13:37:08.875]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:08.875]                     {
[13:37:08.875]                       inherits <- base::inherits
[13:37:08.875]                       invokeRestart <- base::invokeRestart
[13:37:08.875]                       is.null <- base::is.null
[13:37:08.875]                       muffled <- FALSE
[13:37:08.875]                       if (inherits(cond, "message")) {
[13:37:08.875]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:08.875]                         if (muffled) 
[13:37:08.875]                           invokeRestart("muffleMessage")
[13:37:08.875]                       }
[13:37:08.875]                       else if (inherits(cond, "warning")) {
[13:37:08.875]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:08.875]                         if (muffled) 
[13:37:08.875]                           invokeRestart("muffleWarning")
[13:37:08.875]                       }
[13:37:08.875]                       else if (inherits(cond, "condition")) {
[13:37:08.875]                         if (!is.null(pattern)) {
[13:37:08.875]                           computeRestarts <- base::computeRestarts
[13:37:08.875]                           grepl <- base::grepl
[13:37:08.875]                           restarts <- computeRestarts(cond)
[13:37:08.875]                           for (restart in restarts) {
[13:37:08.875]                             name <- restart$name
[13:37:08.875]                             if (is.null(name)) 
[13:37:08.875]                               next
[13:37:08.875]                             if (!grepl(pattern, name)) 
[13:37:08.875]                               next
[13:37:08.875]                             invokeRestart(restart)
[13:37:08.875]                             muffled <- TRUE
[13:37:08.875]                             break
[13:37:08.875]                           }
[13:37:08.875]                         }
[13:37:08.875]                       }
[13:37:08.875]                       invisible(muffled)
[13:37:08.875]                     }
[13:37:08.875]                     muffleCondition(cond, pattern = "^muffle")
[13:37:08.875]                   }
[13:37:08.875]                 }
[13:37:08.875]             }
[13:37:08.875]         }))
[13:37:08.875]     }, error = function(ex) {
[13:37:08.875]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:08.875]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:08.875]                 ...future.rng), started = ...future.startTime, 
[13:37:08.875]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:08.875]             version = "1.8"), class = "FutureResult")
[13:37:08.875]     }, finally = {
[13:37:08.875]         if (!identical(...future.workdir, getwd())) 
[13:37:08.875]             setwd(...future.workdir)
[13:37:08.875]         {
[13:37:08.875]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:08.875]                 ...future.oldOptions$nwarnings <- NULL
[13:37:08.875]             }
[13:37:08.875]             base::options(...future.oldOptions)
[13:37:08.875]             if (.Platform$OS.type == "windows") {
[13:37:08.875]                 old_names <- names(...future.oldEnvVars)
[13:37:08.875]                 envs <- base::Sys.getenv()
[13:37:08.875]                 names <- names(envs)
[13:37:08.875]                 common <- intersect(names, old_names)
[13:37:08.875]                 added <- setdiff(names, old_names)
[13:37:08.875]                 removed <- setdiff(old_names, names)
[13:37:08.875]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:08.875]                   envs[common]]
[13:37:08.875]                 NAMES <- toupper(changed)
[13:37:08.875]                 args <- list()
[13:37:08.875]                 for (kk in seq_along(NAMES)) {
[13:37:08.875]                   name <- changed[[kk]]
[13:37:08.875]                   NAME <- NAMES[[kk]]
[13:37:08.875]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.875]                     next
[13:37:08.875]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.875]                 }
[13:37:08.875]                 NAMES <- toupper(added)
[13:37:08.875]                 for (kk in seq_along(NAMES)) {
[13:37:08.875]                   name <- added[[kk]]
[13:37:08.875]                   NAME <- NAMES[[kk]]
[13:37:08.875]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.875]                     next
[13:37:08.875]                   args[[name]] <- ""
[13:37:08.875]                 }
[13:37:08.875]                 NAMES <- toupper(removed)
[13:37:08.875]                 for (kk in seq_along(NAMES)) {
[13:37:08.875]                   name <- removed[[kk]]
[13:37:08.875]                   NAME <- NAMES[[kk]]
[13:37:08.875]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:08.875]                     next
[13:37:08.875]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:08.875]                 }
[13:37:08.875]                 if (length(args) > 0) 
[13:37:08.875]                   base::do.call(base::Sys.setenv, args = args)
[13:37:08.875]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:08.875]             }
[13:37:08.875]             else {
[13:37:08.875]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:08.875]             }
[13:37:08.875]             {
[13:37:08.875]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:08.875]                   0L) {
[13:37:08.875]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:08.875]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:08.875]                   base::options(opts)
[13:37:08.875]                 }
[13:37:08.875]                 {
[13:37:08.875]                   {
[13:37:08.875]                     NULL
[13:37:08.875]                     RNGkind("Mersenne-Twister")
[13:37:08.875]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:37:08.875]                       inherits = FALSE)
[13:37:08.875]                   }
[13:37:08.875]                   options(future.plan = NULL)
[13:37:08.875]                   if (is.na(NA_character_)) 
[13:37:08.875]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:08.875]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:08.875]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:08.875]                     .init = FALSE)
[13:37:08.875]                 }
[13:37:08.875]             }
[13:37:08.875]         }
[13:37:08.875]     })
[13:37:08.875]     if (TRUE) {
[13:37:08.875]         base::sink(type = "output", split = FALSE)
[13:37:08.875]         if (TRUE) {
[13:37:08.875]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:08.875]         }
[13:37:08.875]         else {
[13:37:08.875]             ...future.result["stdout"] <- base::list(NULL)
[13:37:08.875]         }
[13:37:08.875]         base::close(...future.stdout)
[13:37:08.875]         ...future.stdout <- NULL
[13:37:08.875]     }
[13:37:08.875]     ...future.result$conditions <- ...future.conditions
[13:37:08.875]     ...future.result$finished <- base::Sys.time()
[13:37:08.875]     ...future.result
[13:37:08.875] }
[13:37:08.876] assign_globals() ...
[13:37:08.877] List of 2
[13:37:08.877]  $ a: num 2
[13:37:08.877]  $ b: num 3
[13:37:08.877]  - attr(*, "where")=List of 2
[13:37:08.877]   ..$ a:<environment: R_EmptyEnv> 
[13:37:08.877]   ..$ b:<environment: R_EmptyEnv> 
[13:37:08.877]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:37:08.877]  - attr(*, "resolved")= logi FALSE
[13:37:08.877]  - attr(*, "total_size")= num 112
[13:37:08.880] - copied ‘a’ to environment
[13:37:08.880] - copied ‘b’ to environment
[13:37:08.880] assign_globals() ... done
[13:37:08.880] plan(): Setting new future strategy stack:
[13:37:08.881] List of future strategies:
[13:37:08.881] 1. sequential:
[13:37:08.881]    - args: function (..., envir = parent.frame())
[13:37:08.881]    - tweaked: FALSE
[13:37:08.881]    - call: NULL
[13:37:08.881] plan(): nbrOfWorkers() = 1
[13:37:08.882] plan(): Setting new future strategy stack:
[13:37:08.882] List of future strategies:
[13:37:08.882] 1. multicore:
[13:37:08.882]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:37:08.882]    - tweaked: FALSE
[13:37:08.882]    - call: plan(multicore)
[13:37:08.885] plan(): nbrOfWorkers() = 2
[13:37:08.886] SequentialFuture started (and completed)
[1] 6
*** multicore(..., workers = 1L) ... DONE
Testing with 2 cores ... DONE
> 
> message("*** multicore() ... DONE")
*** multicore() ... DONE
> 
> source("incl/end.R")
[13:37:08.887] plan(): Setting new future strategy stack:
[13:37:08.887] List of future strategies:
[13:37:08.887] 1. FutureStrategy:
[13:37:08.887]    - args: function (..., envir = parent.frame())
[13:37:08.887]    - tweaked: FALSE
[13:37:08.887]    - call: future::plan(oplan)
[13:37:08.887] plan(): nbrOfWorkers() = 1
> 
