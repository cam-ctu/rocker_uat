
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[10:32:43.738] plan(): Setting new future strategy stack:
[10:32:43.738] List of future strategies:
[10:32:43.738] 1. sequential:
[10:32:43.738]    - args: function (..., envir = parent.frame())
[10:32:43.738]    - tweaked: FALSE
[10:32:43.738]    - call: future::plan("sequential")
[10:32:43.752] plan(): nbrOfWorkers() = 1
> 
> message("*** futureAssign() ...")
*** futureAssign() ...
> 
> message("*** futureAssign() - sequential w/ lazy evaluation ...")
*** futureAssign() - sequential w/ lazy evaluation ...
> 
> delayedAssign("a", {
+   cat("Delayed assignment evaluated\n")
+   1
+ })
> 
> futureAssign("b", {
+   cat("Future assignment evaluated\n")
+   2
+ }, lazy = TRUE)
[10:32:43.763] getGlobalsAndPackages() ...
[10:32:43.763] Searching for globals...
[10:32:43.770] - globals found: [2] ‘{’, ‘cat’
[10:32:43.770] Searching for globals ... DONE
[10:32:43.770] Resolving globals: FALSE
[10:32:43.771] 
[10:32:43.771] 
[10:32:43.771] getGlobalsAndPackages() ... DONE
> 
> ## Because "lazy future" is used, the expression/value
> ## for 'b' will not be resolved at the point.  For other
> ## types of futures, it may already have been resolved
> cat(sprintf("b = %s\n", b))
[10:32:43.772] run() for ‘Future’ ...
[10:32:43.772] - state: ‘created’
[10:32:43.772] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:32:43.773] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:32:43.773] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:32:43.773]   - Field: ‘label’
[10:32:43.773]   - Field: ‘local’
[10:32:43.773]   - Field: ‘owner’
[10:32:43.773]   - Field: ‘envir’
[10:32:43.773]   - Field: ‘packages’
[10:32:43.773]   - Field: ‘gc’
[10:32:43.773]   - Field: ‘conditions’
[10:32:43.774]   - Field: ‘expr’
[10:32:43.774]   - Field: ‘uuid’
[10:32:43.774]   - Field: ‘seed’
[10:32:43.774]   - Field: ‘version’
[10:32:43.774]   - Field: ‘result’
[10:32:43.774]   - Field: ‘asynchronous’
[10:32:43.774]   - Field: ‘calls’
[10:32:43.774]   - Field: ‘globals’
[10:32:43.774]   - Field: ‘stdout’
[10:32:43.774]   - Field: ‘earlySignal’
[10:32:43.774]   - Field: ‘lazy’
[10:32:43.774]   - Field: ‘state’
[10:32:43.775] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:32:43.775] - Launch lazy future ...
[10:32:43.775] Packages needed by the future expression (n = 0): <none>
[10:32:43.776] Packages needed by future strategies (n = 0): <none>
[10:32:43.776] {
[10:32:43.776]     {
[10:32:43.776]         {
[10:32:43.776]             ...future.startTime <- base::Sys.time()
[10:32:43.776]             {
[10:32:43.776]                 {
[10:32:43.776]                   {
[10:32:43.776]                     base::local({
[10:32:43.776]                       has_future <- base::requireNamespace("future", 
[10:32:43.776]                         quietly = TRUE)
[10:32:43.776]                       if (has_future) {
[10:32:43.776]                         ns <- base::getNamespace("future")
[10:32:43.776]                         version <- ns[[".package"]][["version"]]
[10:32:43.776]                         if (is.null(version)) 
[10:32:43.776]                           version <- utils::packageVersion("future")
[10:32:43.776]                       }
[10:32:43.776]                       else {
[10:32:43.776]                         version <- NULL
[10:32:43.776]                       }
[10:32:43.776]                       if (!has_future || version < "1.8.0") {
[10:32:43.776]                         info <- base::c(r_version = base::gsub("R version ", 
[10:32:43.776]                           "", base::R.version$version.string), 
[10:32:43.776]                           platform = base::sprintf("%s (%s-bit)", 
[10:32:43.776]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:43.776]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:43.776]                             "release", "version")], collapse = " "), 
[10:32:43.776]                           hostname = base::Sys.info()[["nodename"]])
[10:32:43.776]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:32:43.776]                           info)
[10:32:43.776]                         info <- base::paste(info, collapse = "; ")
[10:32:43.776]                         if (!has_future) {
[10:32:43.776]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:43.776]                             info)
[10:32:43.776]                         }
[10:32:43.776]                         else {
[10:32:43.776]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:43.776]                             info, version)
[10:32:43.776]                         }
[10:32:43.776]                         base::stop(msg)
[10:32:43.776]                       }
[10:32:43.776]                     })
[10:32:43.776]                   }
[10:32:43.776]                   ...future.strategy.old <- future::plan("list")
[10:32:43.776]                   options(future.plan = NULL)
[10:32:43.776]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:43.776]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:43.776]                 }
[10:32:43.776]                 ...future.workdir <- getwd()
[10:32:43.776]             }
[10:32:43.776]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:43.776]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:43.776]         }
[10:32:43.776]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:43.776]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:43.776]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:43.776]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:43.776]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:43.776]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:43.776]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:43.776]             base::names(...future.oldOptions))
[10:32:43.776]     }
[10:32:43.776]     if (FALSE) {
[10:32:43.776]     }
[10:32:43.776]     else {
[10:32:43.776]         if (TRUE) {
[10:32:43.776]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:43.776]                 open = "w")
[10:32:43.776]         }
[10:32:43.776]         else {
[10:32:43.776]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:43.776]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:43.776]         }
[10:32:43.776]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:43.776]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:43.776]             base::sink(type = "output", split = FALSE)
[10:32:43.776]             base::close(...future.stdout)
[10:32:43.776]         }, add = TRUE)
[10:32:43.776]     }
[10:32:43.776]     ...future.frame <- base::sys.nframe()
[10:32:43.776]     ...future.conditions <- base::list()
[10:32:43.776]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:43.776]     if (FALSE) {
[10:32:43.776]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:43.776]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:43.776]     }
[10:32:43.776]     ...future.result <- base::tryCatch({
[10:32:43.776]         base::withCallingHandlers({
[10:32:43.776]             ...future.value <- base::withVisible(base::local({
[10:32:43.776]                 cat("Future assignment evaluated\n")
[10:32:43.776]                 2
[10:32:43.776]             }))
[10:32:43.776]             future::FutureResult(value = ...future.value$value, 
[10:32:43.776]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:43.776]                   ...future.rng), globalenv = if (FALSE) 
[10:32:43.776]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:43.776]                     ...future.globalenv.names))
[10:32:43.776]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:43.776]         }, condition = base::local({
[10:32:43.776]             c <- base::c
[10:32:43.776]             inherits <- base::inherits
[10:32:43.776]             invokeRestart <- base::invokeRestart
[10:32:43.776]             length <- base::length
[10:32:43.776]             list <- base::list
[10:32:43.776]             seq.int <- base::seq.int
[10:32:43.776]             signalCondition <- base::signalCondition
[10:32:43.776]             sys.calls <- base::sys.calls
[10:32:43.776]             `[[` <- base::`[[`
[10:32:43.776]             `+` <- base::`+`
[10:32:43.776]             `<<-` <- base::`<<-`
[10:32:43.776]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:43.776]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:43.776]                   3L)]
[10:32:43.776]             }
[10:32:43.776]             function(cond) {
[10:32:43.776]                 is_error <- inherits(cond, "error")
[10:32:43.776]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:43.776]                   NULL)
[10:32:43.776]                 if (is_error) {
[10:32:43.776]                   sessionInformation <- function() {
[10:32:43.776]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:43.776]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:43.776]                       search = base::search(), system = base::Sys.info())
[10:32:43.776]                   }
[10:32:43.776]                   ...future.conditions[[length(...future.conditions) + 
[10:32:43.776]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:43.776]                     cond$call), session = sessionInformation(), 
[10:32:43.776]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:43.776]                   signalCondition(cond)
[10:32:43.776]                 }
[10:32:43.776]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:43.776]                 "immediateCondition"))) {
[10:32:43.776]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:43.776]                   ...future.conditions[[length(...future.conditions) + 
[10:32:43.776]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:43.776]                   if (TRUE && !signal) {
[10:32:43.776]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:43.776]                     {
[10:32:43.776]                       inherits <- base::inherits
[10:32:43.776]                       invokeRestart <- base::invokeRestart
[10:32:43.776]                       is.null <- base::is.null
[10:32:43.776]                       muffled <- FALSE
[10:32:43.776]                       if (inherits(cond, "message")) {
[10:32:43.776]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:43.776]                         if (muffled) 
[10:32:43.776]                           invokeRestart("muffleMessage")
[10:32:43.776]                       }
[10:32:43.776]                       else if (inherits(cond, "warning")) {
[10:32:43.776]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:43.776]                         if (muffled) 
[10:32:43.776]                           invokeRestart("muffleWarning")
[10:32:43.776]                       }
[10:32:43.776]                       else if (inherits(cond, "condition")) {
[10:32:43.776]                         if (!is.null(pattern)) {
[10:32:43.776]                           computeRestarts <- base::computeRestarts
[10:32:43.776]                           grepl <- base::grepl
[10:32:43.776]                           restarts <- computeRestarts(cond)
[10:32:43.776]                           for (restart in restarts) {
[10:32:43.776]                             name <- restart$name
[10:32:43.776]                             if (is.null(name)) 
[10:32:43.776]                               next
[10:32:43.776]                             if (!grepl(pattern, name)) 
[10:32:43.776]                               next
[10:32:43.776]                             invokeRestart(restart)
[10:32:43.776]                             muffled <- TRUE
[10:32:43.776]                             break
[10:32:43.776]                           }
[10:32:43.776]                         }
[10:32:43.776]                       }
[10:32:43.776]                       invisible(muffled)
[10:32:43.776]                     }
[10:32:43.776]                     muffleCondition(cond, pattern = "^muffle")
[10:32:43.776]                   }
[10:32:43.776]                 }
[10:32:43.776]                 else {
[10:32:43.776]                   if (TRUE) {
[10:32:43.776]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:43.776]                     {
[10:32:43.776]                       inherits <- base::inherits
[10:32:43.776]                       invokeRestart <- base::invokeRestart
[10:32:43.776]                       is.null <- base::is.null
[10:32:43.776]                       muffled <- FALSE
[10:32:43.776]                       if (inherits(cond, "message")) {
[10:32:43.776]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:43.776]                         if (muffled) 
[10:32:43.776]                           invokeRestart("muffleMessage")
[10:32:43.776]                       }
[10:32:43.776]                       else if (inherits(cond, "warning")) {
[10:32:43.776]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:43.776]                         if (muffled) 
[10:32:43.776]                           invokeRestart("muffleWarning")
[10:32:43.776]                       }
[10:32:43.776]                       else if (inherits(cond, "condition")) {
[10:32:43.776]                         if (!is.null(pattern)) {
[10:32:43.776]                           computeRestarts <- base::computeRestarts
[10:32:43.776]                           grepl <- base::grepl
[10:32:43.776]                           restarts <- computeRestarts(cond)
[10:32:43.776]                           for (restart in restarts) {
[10:32:43.776]                             name <- restart$name
[10:32:43.776]                             if (is.null(name)) 
[10:32:43.776]                               next
[10:32:43.776]                             if (!grepl(pattern, name)) 
[10:32:43.776]                               next
[10:32:43.776]                             invokeRestart(restart)
[10:32:43.776]                             muffled <- TRUE
[10:32:43.776]                             break
[10:32:43.776]                           }
[10:32:43.776]                         }
[10:32:43.776]                       }
[10:32:43.776]                       invisible(muffled)
[10:32:43.776]                     }
[10:32:43.776]                     muffleCondition(cond, pattern = "^muffle")
[10:32:43.776]                   }
[10:32:43.776]                 }
[10:32:43.776]             }
[10:32:43.776]         }))
[10:32:43.776]     }, error = function(ex) {
[10:32:43.776]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:43.776]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:43.776]                 ...future.rng), started = ...future.startTime, 
[10:32:43.776]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:43.776]             version = "1.8"), class = "FutureResult")
[10:32:43.776]     }, finally = {
[10:32:43.776]         if (!identical(...future.workdir, getwd())) 
[10:32:43.776]             setwd(...future.workdir)
[10:32:43.776]         {
[10:32:43.776]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:43.776]                 ...future.oldOptions$nwarnings <- NULL
[10:32:43.776]             }
[10:32:43.776]             base::options(...future.oldOptions)
[10:32:43.776]             if (.Platform$OS.type == "windows") {
[10:32:43.776]                 old_names <- names(...future.oldEnvVars)
[10:32:43.776]                 envs <- base::Sys.getenv()
[10:32:43.776]                 names <- names(envs)
[10:32:43.776]                 common <- intersect(names, old_names)
[10:32:43.776]                 added <- setdiff(names, old_names)
[10:32:43.776]                 removed <- setdiff(old_names, names)
[10:32:43.776]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:43.776]                   envs[common]]
[10:32:43.776]                 NAMES <- toupper(changed)
[10:32:43.776]                 args <- list()
[10:32:43.776]                 for (kk in seq_along(NAMES)) {
[10:32:43.776]                   name <- changed[[kk]]
[10:32:43.776]                   NAME <- NAMES[[kk]]
[10:32:43.776]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:43.776]                     next
[10:32:43.776]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:43.776]                 }
[10:32:43.776]                 NAMES <- toupper(added)
[10:32:43.776]                 for (kk in seq_along(NAMES)) {
[10:32:43.776]                   name <- added[[kk]]
[10:32:43.776]                   NAME <- NAMES[[kk]]
[10:32:43.776]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:43.776]                     next
[10:32:43.776]                   args[[name]] <- ""
[10:32:43.776]                 }
[10:32:43.776]                 NAMES <- toupper(removed)
[10:32:43.776]                 for (kk in seq_along(NAMES)) {
[10:32:43.776]                   name <- removed[[kk]]
[10:32:43.776]                   NAME <- NAMES[[kk]]
[10:32:43.776]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:43.776]                     next
[10:32:43.776]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:43.776]                 }
[10:32:43.776]                 if (length(args) > 0) 
[10:32:43.776]                   base::do.call(base::Sys.setenv, args = args)
[10:32:43.776]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:43.776]             }
[10:32:43.776]             else {
[10:32:43.776]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:43.776]             }
[10:32:43.776]             {
[10:32:43.776]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:43.776]                   0L) {
[10:32:43.776]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:43.776]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:43.776]                   base::options(opts)
[10:32:43.776]                 }
[10:32:43.776]                 {
[10:32:43.776]                   {
[10:32:43.776]                     NULL
[10:32:43.776]                     RNGkind("Mersenne-Twister")
[10:32:43.776]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:32:43.776]                       inherits = FALSE)
[10:32:43.776]                   }
[10:32:43.776]                   options(future.plan = NULL)
[10:32:43.776]                   if (is.na(NA_character_)) 
[10:32:43.776]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:43.776]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:43.776]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:43.776]                     .init = FALSE)
[10:32:43.776]                 }
[10:32:43.776]             }
[10:32:43.776]         }
[10:32:43.776]     })
[10:32:43.776]     if (TRUE) {
[10:32:43.776]         base::sink(type = "output", split = FALSE)
[10:32:43.776]         if (TRUE) {
[10:32:43.776]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:43.776]         }
[10:32:43.776]         else {
[10:32:43.776]             ...future.result["stdout"] <- base::list(NULL)
[10:32:43.776]         }
[10:32:43.776]         base::close(...future.stdout)
[10:32:43.776]         ...future.stdout <- NULL
[10:32:43.776]     }
[10:32:43.776]     ...future.result$conditions <- ...future.conditions
[10:32:43.776]     ...future.result$finished <- base::Sys.time()
[10:32:43.776]     ...future.result
[10:32:43.776] }
[10:32:43.778] plan(): Setting new future strategy stack:
[10:32:43.778] List of future strategies:
[10:32:43.778] 1. sequential:
[10:32:43.778]    - args: function (..., envir = parent.frame())
[10:32:43.778]    - tweaked: FALSE
[10:32:43.778]    - call: NULL
[10:32:43.779] plan(): nbrOfWorkers() = 1
[10:32:43.780] plan(): Setting new future strategy stack:
[10:32:43.780] List of future strategies:
[10:32:43.780] 1. sequential:
[10:32:43.780]    - args: function (..., envir = parent.frame())
[10:32:43.780]    - tweaked: FALSE
[10:32:43.780]    - call: future::plan("sequential")
[10:32:43.780] plan(): nbrOfWorkers() = 1
[10:32:43.781] SequentialFuture started (and completed)
[10:32:43.781] - Launch lazy future ... done
[10:32:43.781] run() for ‘SequentialFuture’ ... done
Future assignment evaluated
b = 2
> 
> ## The expression/value of 'a' is resolved at this point,
> ## because a delayed assignment (promise) was used.
> cat(sprintf("a = %s\n", a))
Delayed assignment evaluated
a = 1
> 
> stopifnot(identical(a, 1))
> stopifnot(identical(b, 2))
> 
> message("*** futureAssign() - sequential w/ lazy evaluation ... DONE")
*** futureAssign() - sequential w/ lazy evaluation ... DONE
> 
> 
> message("*** futureAssign() - lazy = TRUE / FALSE ...")
*** futureAssign() - lazy = TRUE / FALSE ...
> 
> for (cores in 1:availCores) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   message(sprintf("Testing with %d cores ...", cores))
+   options(mc.cores = cores)
+ 
+   for (strategy in supportedStrategies(cores)) {
+     message(sprintf("*** futureAssign() with %s futures ...", sQuote(strategy)))
+     plan(strategy)
+ 
+     ## Potential task name clashes
+     u <- new.env()
+     v <- new.env()
+     futureAssign("a", { 2 }, assign.env = u)
+     futureAssign("a", { 4 }, assign.env = v)
+     
+     cat(sprintf("u$a = %s\n", u$a))
+     cat(sprintf("v$a = %s\n", v$a))
+     
+     stopifnot(identical(u$a, 2))
+     stopifnot(identical(v$a, 4))
+     
+     
+     ## Global variables
+     a <- 1
+     futureAssign("b", { 2 * a })
+     a <- 2
+     stopifnot(b == 2)
+ 
+     ## Explicit lazy evaluation
+     for (lazy in c(FALSE, TRUE)) {
+       a <- 1
+       f <- futureAssign("b", { 2 * a }, lazy = lazy)
+       a <- 2
+       stopifnot(b == 2)
+       stopifnot(f$lazy == lazy || (strategy %in% c("multisession", "multicore") && cores == 1L))
+       
+       ## Set 'lazy' via disposable option
+       options(future.disposable = list(lazy = lazy))
+       a <- 1
+       f <- futureAssign("b", { 2 * a })
+       a <- 2
+       stopifnot(b == 2)
+       stopifnot(f$lazy == lazy || (strategy %in% c("multisession", "multicore") && cores == 1L))
+     }
+ 
+     message(sprintf("*** futureAssign() with %s futures ... DONE", sQuote(strategy)))
+   } # for (strategy in ...)
+ 
+   message(sprintf("Testing with %d cores ... DONE", cores))
+ } ## for (cores ...)
Testing with 1 cores ...
*** futureAssign() with ‘sequential’ futures ...
[10:32:43.807] plan(): Setting new future strategy stack:
[10:32:43.807] List of future strategies:
[10:32:43.807] 1. sequential:
[10:32:43.807]    - args: function (..., envir = parent.frame())
[10:32:43.807]    - tweaked: FALSE
[10:32:43.807]    - call: plan(strategy)
[10:32:43.819] plan(): nbrOfWorkers() = 1
[10:32:43.819] getGlobalsAndPackages() ...
[10:32:43.819] Searching for globals...
[10:32:43.820] - globals found: [1] ‘{’
[10:32:43.820] Searching for globals ... DONE
[10:32:43.820] Resolving globals: FALSE
[10:32:43.821] 
[10:32:43.821] 
[10:32:43.821] getGlobalsAndPackages() ... DONE
[10:32:43.821] run() for ‘Future’ ...
[10:32:43.821] - state: ‘created’
[10:32:43.821] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:32:43.821] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:32:43.822] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:32:43.822]   - Field: ‘label’
[10:32:43.822]   - Field: ‘local’
[10:32:43.822]   - Field: ‘owner’
[10:32:43.822]   - Field: ‘envir’
[10:32:43.822]   - Field: ‘packages’
[10:32:43.822]   - Field: ‘gc’
[10:32:43.822]   - Field: ‘conditions’
[10:32:43.822]   - Field: ‘expr’
[10:32:43.822]   - Field: ‘uuid’
[10:32:43.822]   - Field: ‘seed’
[10:32:43.823]   - Field: ‘version’
[10:32:43.823]   - Field: ‘result’
[10:32:43.823]   - Field: ‘asynchronous’
[10:32:43.823]   - Field: ‘calls’
[10:32:43.823]   - Field: ‘globals’
[10:32:43.823]   - Field: ‘stdout’
[10:32:43.823]   - Field: ‘earlySignal’
[10:32:43.823]   - Field: ‘lazy’
[10:32:43.823]   - Field: ‘state’
[10:32:43.823] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:32:43.823] - Launch lazy future ...
[10:32:43.824] Packages needed by the future expression (n = 0): <none>
[10:32:43.824] Packages needed by future strategies (n = 0): <none>
[10:32:43.824] {
[10:32:43.824]     {
[10:32:43.824]         {
[10:32:43.824]             ...future.startTime <- base::Sys.time()
[10:32:43.824]             {
[10:32:43.824]                 {
[10:32:43.824]                   {
[10:32:43.824]                     base::local({
[10:32:43.824]                       has_future <- base::requireNamespace("future", 
[10:32:43.824]                         quietly = TRUE)
[10:32:43.824]                       if (has_future) {
[10:32:43.824]                         ns <- base::getNamespace("future")
[10:32:43.824]                         version <- ns[[".package"]][["version"]]
[10:32:43.824]                         if (is.null(version)) 
[10:32:43.824]                           version <- utils::packageVersion("future")
[10:32:43.824]                       }
[10:32:43.824]                       else {
[10:32:43.824]                         version <- NULL
[10:32:43.824]                       }
[10:32:43.824]                       if (!has_future || version < "1.8.0") {
[10:32:43.824]                         info <- base::c(r_version = base::gsub("R version ", 
[10:32:43.824]                           "", base::R.version$version.string), 
[10:32:43.824]                           platform = base::sprintf("%s (%s-bit)", 
[10:32:43.824]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:43.824]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:43.824]                             "release", "version")], collapse = " "), 
[10:32:43.824]                           hostname = base::Sys.info()[["nodename"]])
[10:32:43.824]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:32:43.824]                           info)
[10:32:43.824]                         info <- base::paste(info, collapse = "; ")
[10:32:43.824]                         if (!has_future) {
[10:32:43.824]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:43.824]                             info)
[10:32:43.824]                         }
[10:32:43.824]                         else {
[10:32:43.824]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:43.824]                             info, version)
[10:32:43.824]                         }
[10:32:43.824]                         base::stop(msg)
[10:32:43.824]                       }
[10:32:43.824]                     })
[10:32:43.824]                   }
[10:32:43.824]                   ...future.strategy.old <- future::plan("list")
[10:32:43.824]                   options(future.plan = NULL)
[10:32:43.824]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:43.824]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:43.824]                 }
[10:32:43.824]                 ...future.workdir <- getwd()
[10:32:43.824]             }
[10:32:43.824]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:43.824]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:43.824]         }
[10:32:43.824]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:43.824]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:43.824]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:43.824]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:43.824]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:43.824]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:43.824]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:43.824]             base::names(...future.oldOptions))
[10:32:43.824]     }
[10:32:43.824]     if (FALSE) {
[10:32:43.824]     }
[10:32:43.824]     else {
[10:32:43.824]         if (TRUE) {
[10:32:43.824]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:43.824]                 open = "w")
[10:32:43.824]         }
[10:32:43.824]         else {
[10:32:43.824]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:43.824]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:43.824]         }
[10:32:43.824]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:43.824]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:43.824]             base::sink(type = "output", split = FALSE)
[10:32:43.824]             base::close(...future.stdout)
[10:32:43.824]         }, add = TRUE)
[10:32:43.824]     }
[10:32:43.824]     ...future.frame <- base::sys.nframe()
[10:32:43.824]     ...future.conditions <- base::list()
[10:32:43.824]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:43.824]     if (FALSE) {
[10:32:43.824]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:43.824]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:43.824]     }
[10:32:43.824]     ...future.result <- base::tryCatch({
[10:32:43.824]         base::withCallingHandlers({
[10:32:43.824]             ...future.value <- base::withVisible(base::local({
[10:32:43.824]                 2
[10:32:43.824]             }))
[10:32:43.824]             future::FutureResult(value = ...future.value$value, 
[10:32:43.824]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:43.824]                   ...future.rng), globalenv = if (FALSE) 
[10:32:43.824]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:43.824]                     ...future.globalenv.names))
[10:32:43.824]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:43.824]         }, condition = base::local({
[10:32:43.824]             c <- base::c
[10:32:43.824]             inherits <- base::inherits
[10:32:43.824]             invokeRestart <- base::invokeRestart
[10:32:43.824]             length <- base::length
[10:32:43.824]             list <- base::list
[10:32:43.824]             seq.int <- base::seq.int
[10:32:43.824]             signalCondition <- base::signalCondition
[10:32:43.824]             sys.calls <- base::sys.calls
[10:32:43.824]             `[[` <- base::`[[`
[10:32:43.824]             `+` <- base::`+`
[10:32:43.824]             `<<-` <- base::`<<-`
[10:32:43.824]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:43.824]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:43.824]                   3L)]
[10:32:43.824]             }
[10:32:43.824]             function(cond) {
[10:32:43.824]                 is_error <- inherits(cond, "error")
[10:32:43.824]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:43.824]                   NULL)
[10:32:43.824]                 if (is_error) {
[10:32:43.824]                   sessionInformation <- function() {
[10:32:43.824]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:43.824]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:43.824]                       search = base::search(), system = base::Sys.info())
[10:32:43.824]                   }
[10:32:43.824]                   ...future.conditions[[length(...future.conditions) + 
[10:32:43.824]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:43.824]                     cond$call), session = sessionInformation(), 
[10:32:43.824]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:43.824]                   signalCondition(cond)
[10:32:43.824]                 }
[10:32:43.824]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:43.824]                 "immediateCondition"))) {
[10:32:43.824]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:43.824]                   ...future.conditions[[length(...future.conditions) + 
[10:32:43.824]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:43.824]                   if (TRUE && !signal) {
[10:32:43.824]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:43.824]                     {
[10:32:43.824]                       inherits <- base::inherits
[10:32:43.824]                       invokeRestart <- base::invokeRestart
[10:32:43.824]                       is.null <- base::is.null
[10:32:43.824]                       muffled <- FALSE
[10:32:43.824]                       if (inherits(cond, "message")) {
[10:32:43.824]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:43.824]                         if (muffled) 
[10:32:43.824]                           invokeRestart("muffleMessage")
[10:32:43.824]                       }
[10:32:43.824]                       else if (inherits(cond, "warning")) {
[10:32:43.824]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:43.824]                         if (muffled) 
[10:32:43.824]                           invokeRestart("muffleWarning")
[10:32:43.824]                       }
[10:32:43.824]                       else if (inherits(cond, "condition")) {
[10:32:43.824]                         if (!is.null(pattern)) {
[10:32:43.824]                           computeRestarts <- base::computeRestarts
[10:32:43.824]                           grepl <- base::grepl
[10:32:43.824]                           restarts <- computeRestarts(cond)
[10:32:43.824]                           for (restart in restarts) {
[10:32:43.824]                             name <- restart$name
[10:32:43.824]                             if (is.null(name)) 
[10:32:43.824]                               next
[10:32:43.824]                             if (!grepl(pattern, name)) 
[10:32:43.824]                               next
[10:32:43.824]                             invokeRestart(restart)
[10:32:43.824]                             muffled <- TRUE
[10:32:43.824]                             break
[10:32:43.824]                           }
[10:32:43.824]                         }
[10:32:43.824]                       }
[10:32:43.824]                       invisible(muffled)
[10:32:43.824]                     }
[10:32:43.824]                     muffleCondition(cond, pattern = "^muffle")
[10:32:43.824]                   }
[10:32:43.824]                 }
[10:32:43.824]                 else {
[10:32:43.824]                   if (TRUE) {
[10:32:43.824]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:43.824]                     {
[10:32:43.824]                       inherits <- base::inherits
[10:32:43.824]                       invokeRestart <- base::invokeRestart
[10:32:43.824]                       is.null <- base::is.null
[10:32:43.824]                       muffled <- FALSE
[10:32:43.824]                       if (inherits(cond, "message")) {
[10:32:43.824]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:43.824]                         if (muffled) 
[10:32:43.824]                           invokeRestart("muffleMessage")
[10:32:43.824]                       }
[10:32:43.824]                       else if (inherits(cond, "warning")) {
[10:32:43.824]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:43.824]                         if (muffled) 
[10:32:43.824]                           invokeRestart("muffleWarning")
[10:32:43.824]                       }
[10:32:43.824]                       else if (inherits(cond, "condition")) {
[10:32:43.824]                         if (!is.null(pattern)) {
[10:32:43.824]                           computeRestarts <- base::computeRestarts
[10:32:43.824]                           grepl <- base::grepl
[10:32:43.824]                           restarts <- computeRestarts(cond)
[10:32:43.824]                           for (restart in restarts) {
[10:32:43.824]                             name <- restart$name
[10:32:43.824]                             if (is.null(name)) 
[10:32:43.824]                               next
[10:32:43.824]                             if (!grepl(pattern, name)) 
[10:32:43.824]                               next
[10:32:43.824]                             invokeRestart(restart)
[10:32:43.824]                             muffled <- TRUE
[10:32:43.824]                             break
[10:32:43.824]                           }
[10:32:43.824]                         }
[10:32:43.824]                       }
[10:32:43.824]                       invisible(muffled)
[10:32:43.824]                     }
[10:32:43.824]                     muffleCondition(cond, pattern = "^muffle")
[10:32:43.824]                   }
[10:32:43.824]                 }
[10:32:43.824]             }
[10:32:43.824]         }))
[10:32:43.824]     }, error = function(ex) {
[10:32:43.824]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:43.824]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:43.824]                 ...future.rng), started = ...future.startTime, 
[10:32:43.824]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:43.824]             version = "1.8"), class = "FutureResult")
[10:32:43.824]     }, finally = {
[10:32:43.824]         if (!identical(...future.workdir, getwd())) 
[10:32:43.824]             setwd(...future.workdir)
[10:32:43.824]         {
[10:32:43.824]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:43.824]                 ...future.oldOptions$nwarnings <- NULL
[10:32:43.824]             }
[10:32:43.824]             base::options(...future.oldOptions)
[10:32:43.824]             if (.Platform$OS.type == "windows") {
[10:32:43.824]                 old_names <- names(...future.oldEnvVars)
[10:32:43.824]                 envs <- base::Sys.getenv()
[10:32:43.824]                 names <- names(envs)
[10:32:43.824]                 common <- intersect(names, old_names)
[10:32:43.824]                 added <- setdiff(names, old_names)
[10:32:43.824]                 removed <- setdiff(old_names, names)
[10:32:43.824]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:43.824]                   envs[common]]
[10:32:43.824]                 NAMES <- toupper(changed)
[10:32:43.824]                 args <- list()
[10:32:43.824]                 for (kk in seq_along(NAMES)) {
[10:32:43.824]                   name <- changed[[kk]]
[10:32:43.824]                   NAME <- NAMES[[kk]]
[10:32:43.824]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:43.824]                     next
[10:32:43.824]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:43.824]                 }
[10:32:43.824]                 NAMES <- toupper(added)
[10:32:43.824]                 for (kk in seq_along(NAMES)) {
[10:32:43.824]                   name <- added[[kk]]
[10:32:43.824]                   NAME <- NAMES[[kk]]
[10:32:43.824]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:43.824]                     next
[10:32:43.824]                   args[[name]] <- ""
[10:32:43.824]                 }
[10:32:43.824]                 NAMES <- toupper(removed)
[10:32:43.824]                 for (kk in seq_along(NAMES)) {
[10:32:43.824]                   name <- removed[[kk]]
[10:32:43.824]                   NAME <- NAMES[[kk]]
[10:32:43.824]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:43.824]                     next
[10:32:43.824]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:43.824]                 }
[10:32:43.824]                 if (length(args) > 0) 
[10:32:43.824]                   base::do.call(base::Sys.setenv, args = args)
[10:32:43.824]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:43.824]             }
[10:32:43.824]             else {
[10:32:43.824]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:43.824]             }
[10:32:43.824]             {
[10:32:43.824]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:43.824]                   0L) {
[10:32:43.824]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:43.824]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:43.824]                   base::options(opts)
[10:32:43.824]                 }
[10:32:43.824]                 {
[10:32:43.824]                   {
[10:32:43.824]                     NULL
[10:32:43.824]                     RNGkind("Mersenne-Twister")
[10:32:43.824]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:32:43.824]                       inherits = FALSE)
[10:32:43.824]                   }
[10:32:43.824]                   options(future.plan = NULL)
[10:32:43.824]                   if (is.na(NA_character_)) 
[10:32:43.824]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:43.824]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:43.824]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:43.824]                     .init = FALSE)
[10:32:43.824]                 }
[10:32:43.824]             }
[10:32:43.824]         }
[10:32:43.824]     })
[10:32:43.824]     if (TRUE) {
[10:32:43.824]         base::sink(type = "output", split = FALSE)
[10:32:43.824]         if (TRUE) {
[10:32:43.824]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:43.824]         }
[10:32:43.824]         else {
[10:32:43.824]             ...future.result["stdout"] <- base::list(NULL)
[10:32:43.824]         }
[10:32:43.824]         base::close(...future.stdout)
[10:32:43.824]         ...future.stdout <- NULL
[10:32:43.824]     }
[10:32:43.824]     ...future.result$conditions <- ...future.conditions
[10:32:43.824]     ...future.result$finished <- base::Sys.time()
[10:32:43.824]     ...future.result
[10:32:43.824] }
[10:32:43.826] plan(): Setting new future strategy stack:
[10:32:43.826] List of future strategies:
[10:32:43.826] 1. sequential:
[10:32:43.826]    - args: function (..., envir = parent.frame())
[10:32:43.826]    - tweaked: FALSE
[10:32:43.826]    - call: NULL
[10:32:43.826] plan(): nbrOfWorkers() = 1
[10:32:43.827] plan(): Setting new future strategy stack:
[10:32:43.827] List of future strategies:
[10:32:43.827] 1. sequential:
[10:32:43.827]    - args: function (..., envir = parent.frame())
[10:32:43.827]    - tweaked: FALSE
[10:32:43.827]    - call: plan(strategy)
[10:32:43.828] plan(): nbrOfWorkers() = 1
[10:32:43.828] SequentialFuture started (and completed)
[10:32:43.828] - Launch lazy future ... done
[10:32:43.828] run() for ‘SequentialFuture’ ... done
[10:32:43.829] getGlobalsAndPackages() ...
[10:32:43.829] Searching for globals...
[10:32:43.829] - globals found: [1] ‘{’
[10:32:43.829] Searching for globals ... DONE
[10:32:43.830] Resolving globals: FALSE
[10:32:43.830] 
[10:32:43.830] 
[10:32:43.830] getGlobalsAndPackages() ... DONE
[10:32:43.830] run() for ‘Future’ ...
[10:32:43.830] - state: ‘created’
[10:32:43.831] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:32:43.831] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:32:43.831] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:32:43.831]   - Field: ‘label’
[10:32:43.831]   - Field: ‘local’
[10:32:43.831]   - Field: ‘owner’
[10:32:43.831]   - Field: ‘envir’
[10:32:43.831]   - Field: ‘packages’
[10:32:43.831]   - Field: ‘gc’
[10:32:43.832]   - Field: ‘conditions’
[10:32:43.832]   - Field: ‘expr’
[10:32:43.832]   - Field: ‘uuid’
[10:32:43.832]   - Field: ‘seed’
[10:32:43.832]   - Field: ‘version’
[10:32:43.832]   - Field: ‘result’
[10:32:43.832]   - Field: ‘asynchronous’
[10:32:43.832]   - Field: ‘calls’
[10:32:43.832]   - Field: ‘globals’
[10:32:43.832]   - Field: ‘stdout’
[10:32:43.832]   - Field: ‘earlySignal’
[10:32:43.833]   - Field: ‘lazy’
[10:32:43.833]   - Field: ‘state’
[10:32:43.833] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:32:43.833] - Launch lazy future ...
[10:32:43.833] Packages needed by the future expression (n = 0): <none>
[10:32:43.833] Packages needed by future strategies (n = 0): <none>
[10:32:43.834] {
[10:32:43.834]     {
[10:32:43.834]         {
[10:32:43.834]             ...future.startTime <- base::Sys.time()
[10:32:43.834]             {
[10:32:43.834]                 {
[10:32:43.834]                   {
[10:32:43.834]                     base::local({
[10:32:43.834]                       has_future <- base::requireNamespace("future", 
[10:32:43.834]                         quietly = TRUE)
[10:32:43.834]                       if (has_future) {
[10:32:43.834]                         ns <- base::getNamespace("future")
[10:32:43.834]                         version <- ns[[".package"]][["version"]]
[10:32:43.834]                         if (is.null(version)) 
[10:32:43.834]                           version <- utils::packageVersion("future")
[10:32:43.834]                       }
[10:32:43.834]                       else {
[10:32:43.834]                         version <- NULL
[10:32:43.834]                       }
[10:32:43.834]                       if (!has_future || version < "1.8.0") {
[10:32:43.834]                         info <- base::c(r_version = base::gsub("R version ", 
[10:32:43.834]                           "", base::R.version$version.string), 
[10:32:43.834]                           platform = base::sprintf("%s (%s-bit)", 
[10:32:43.834]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:43.834]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:43.834]                             "release", "version")], collapse = " "), 
[10:32:43.834]                           hostname = base::Sys.info()[["nodename"]])
[10:32:43.834]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:32:43.834]                           info)
[10:32:43.834]                         info <- base::paste(info, collapse = "; ")
[10:32:43.834]                         if (!has_future) {
[10:32:43.834]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:43.834]                             info)
[10:32:43.834]                         }
[10:32:43.834]                         else {
[10:32:43.834]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:43.834]                             info, version)
[10:32:43.834]                         }
[10:32:43.834]                         base::stop(msg)
[10:32:43.834]                       }
[10:32:43.834]                     })
[10:32:43.834]                   }
[10:32:43.834]                   ...future.strategy.old <- future::plan("list")
[10:32:43.834]                   options(future.plan = NULL)
[10:32:43.834]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:43.834]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:43.834]                 }
[10:32:43.834]                 ...future.workdir <- getwd()
[10:32:43.834]             }
[10:32:43.834]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:43.834]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:43.834]         }
[10:32:43.834]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:43.834]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:43.834]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:43.834]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:43.834]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:43.834]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:43.834]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:43.834]             base::names(...future.oldOptions))
[10:32:43.834]     }
[10:32:43.834]     if (FALSE) {
[10:32:43.834]     }
[10:32:43.834]     else {
[10:32:43.834]         if (TRUE) {
[10:32:43.834]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:43.834]                 open = "w")
[10:32:43.834]         }
[10:32:43.834]         else {
[10:32:43.834]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:43.834]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:43.834]         }
[10:32:43.834]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:43.834]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:43.834]             base::sink(type = "output", split = FALSE)
[10:32:43.834]             base::close(...future.stdout)
[10:32:43.834]         }, add = TRUE)
[10:32:43.834]     }
[10:32:43.834]     ...future.frame <- base::sys.nframe()
[10:32:43.834]     ...future.conditions <- base::list()
[10:32:43.834]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:43.834]     if (FALSE) {
[10:32:43.834]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:43.834]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:43.834]     }
[10:32:43.834]     ...future.result <- base::tryCatch({
[10:32:43.834]         base::withCallingHandlers({
[10:32:43.834]             ...future.value <- base::withVisible(base::local({
[10:32:43.834]                 4
[10:32:43.834]             }))
[10:32:43.834]             future::FutureResult(value = ...future.value$value, 
[10:32:43.834]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:43.834]                   ...future.rng), globalenv = if (FALSE) 
[10:32:43.834]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:43.834]                     ...future.globalenv.names))
[10:32:43.834]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:43.834]         }, condition = base::local({
[10:32:43.834]             c <- base::c
[10:32:43.834]             inherits <- base::inherits
[10:32:43.834]             invokeRestart <- base::invokeRestart
[10:32:43.834]             length <- base::length
[10:32:43.834]             list <- base::list
[10:32:43.834]             seq.int <- base::seq.int
[10:32:43.834]             signalCondition <- base::signalCondition
[10:32:43.834]             sys.calls <- base::sys.calls
[10:32:43.834]             `[[` <- base::`[[`
[10:32:43.834]             `+` <- base::`+`
[10:32:43.834]             `<<-` <- base::`<<-`
[10:32:43.834]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:43.834]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:43.834]                   3L)]
[10:32:43.834]             }
[10:32:43.834]             function(cond) {
[10:32:43.834]                 is_error <- inherits(cond, "error")
[10:32:43.834]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:43.834]                   NULL)
[10:32:43.834]                 if (is_error) {
[10:32:43.834]                   sessionInformation <- function() {
[10:32:43.834]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:43.834]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:43.834]                       search = base::search(), system = base::Sys.info())
[10:32:43.834]                   }
[10:32:43.834]                   ...future.conditions[[length(...future.conditions) + 
[10:32:43.834]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:43.834]                     cond$call), session = sessionInformation(), 
[10:32:43.834]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:43.834]                   signalCondition(cond)
[10:32:43.834]                 }
[10:32:43.834]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:43.834]                 "immediateCondition"))) {
[10:32:43.834]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:43.834]                   ...future.conditions[[length(...future.conditions) + 
[10:32:43.834]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:43.834]                   if (TRUE && !signal) {
[10:32:43.834]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:43.834]                     {
[10:32:43.834]                       inherits <- base::inherits
[10:32:43.834]                       invokeRestart <- base::invokeRestart
[10:32:43.834]                       is.null <- base::is.null
[10:32:43.834]                       muffled <- FALSE
[10:32:43.834]                       if (inherits(cond, "message")) {
[10:32:43.834]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:43.834]                         if (muffled) 
[10:32:43.834]                           invokeRestart("muffleMessage")
[10:32:43.834]                       }
[10:32:43.834]                       else if (inherits(cond, "warning")) {
[10:32:43.834]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:43.834]                         if (muffled) 
[10:32:43.834]                           invokeRestart("muffleWarning")
[10:32:43.834]                       }
[10:32:43.834]                       else if (inherits(cond, "condition")) {
[10:32:43.834]                         if (!is.null(pattern)) {
[10:32:43.834]                           computeRestarts <- base::computeRestarts
[10:32:43.834]                           grepl <- base::grepl
[10:32:43.834]                           restarts <- computeRestarts(cond)
[10:32:43.834]                           for (restart in restarts) {
[10:32:43.834]                             name <- restart$name
[10:32:43.834]                             if (is.null(name)) 
[10:32:43.834]                               next
[10:32:43.834]                             if (!grepl(pattern, name)) 
[10:32:43.834]                               next
[10:32:43.834]                             invokeRestart(restart)
[10:32:43.834]                             muffled <- TRUE
[10:32:43.834]                             break
[10:32:43.834]                           }
[10:32:43.834]                         }
[10:32:43.834]                       }
[10:32:43.834]                       invisible(muffled)
[10:32:43.834]                     }
[10:32:43.834]                     muffleCondition(cond, pattern = "^muffle")
[10:32:43.834]                   }
[10:32:43.834]                 }
[10:32:43.834]                 else {
[10:32:43.834]                   if (TRUE) {
[10:32:43.834]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:43.834]                     {
[10:32:43.834]                       inherits <- base::inherits
[10:32:43.834]                       invokeRestart <- base::invokeRestart
[10:32:43.834]                       is.null <- base::is.null
[10:32:43.834]                       muffled <- FALSE
[10:32:43.834]                       if (inherits(cond, "message")) {
[10:32:43.834]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:43.834]                         if (muffled) 
[10:32:43.834]                           invokeRestart("muffleMessage")
[10:32:43.834]                       }
[10:32:43.834]                       else if (inherits(cond, "warning")) {
[10:32:43.834]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:43.834]                         if (muffled) 
[10:32:43.834]                           invokeRestart("muffleWarning")
[10:32:43.834]                       }
[10:32:43.834]                       else if (inherits(cond, "condition")) {
[10:32:43.834]                         if (!is.null(pattern)) {
[10:32:43.834]                           computeRestarts <- base::computeRestarts
[10:32:43.834]                           grepl <- base::grepl
[10:32:43.834]                           restarts <- computeRestarts(cond)
[10:32:43.834]                           for (restart in restarts) {
[10:32:43.834]                             name <- restart$name
[10:32:43.834]                             if (is.null(name)) 
[10:32:43.834]                               next
[10:32:43.834]                             if (!grepl(pattern, name)) 
[10:32:43.834]                               next
[10:32:43.834]                             invokeRestart(restart)
[10:32:43.834]                             muffled <- TRUE
[10:32:43.834]                             break
[10:32:43.834]                           }
[10:32:43.834]                         }
[10:32:43.834]                       }
[10:32:43.834]                       invisible(muffled)
[10:32:43.834]                     }
[10:32:43.834]                     muffleCondition(cond, pattern = "^muffle")
[10:32:43.834]                   }
[10:32:43.834]                 }
[10:32:43.834]             }
[10:32:43.834]         }))
[10:32:43.834]     }, error = function(ex) {
[10:32:43.834]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:43.834]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:43.834]                 ...future.rng), started = ...future.startTime, 
[10:32:43.834]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:43.834]             version = "1.8"), class = "FutureResult")
[10:32:43.834]     }, finally = {
[10:32:43.834]         if (!identical(...future.workdir, getwd())) 
[10:32:43.834]             setwd(...future.workdir)
[10:32:43.834]         {
[10:32:43.834]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:43.834]                 ...future.oldOptions$nwarnings <- NULL
[10:32:43.834]             }
[10:32:43.834]             base::options(...future.oldOptions)
[10:32:43.834]             if (.Platform$OS.type == "windows") {
[10:32:43.834]                 old_names <- names(...future.oldEnvVars)
[10:32:43.834]                 envs <- base::Sys.getenv()
[10:32:43.834]                 names <- names(envs)
[10:32:43.834]                 common <- intersect(names, old_names)
[10:32:43.834]                 added <- setdiff(names, old_names)
[10:32:43.834]                 removed <- setdiff(old_names, names)
[10:32:43.834]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:43.834]                   envs[common]]
[10:32:43.834]                 NAMES <- toupper(changed)
[10:32:43.834]                 args <- list()
[10:32:43.834]                 for (kk in seq_along(NAMES)) {
[10:32:43.834]                   name <- changed[[kk]]
[10:32:43.834]                   NAME <- NAMES[[kk]]
[10:32:43.834]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:43.834]                     next
[10:32:43.834]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:43.834]                 }
[10:32:43.834]                 NAMES <- toupper(added)
[10:32:43.834]                 for (kk in seq_along(NAMES)) {
[10:32:43.834]                   name <- added[[kk]]
[10:32:43.834]                   NAME <- NAMES[[kk]]
[10:32:43.834]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:43.834]                     next
[10:32:43.834]                   args[[name]] <- ""
[10:32:43.834]                 }
[10:32:43.834]                 NAMES <- toupper(removed)
[10:32:43.834]                 for (kk in seq_along(NAMES)) {
[10:32:43.834]                   name <- removed[[kk]]
[10:32:43.834]                   NAME <- NAMES[[kk]]
[10:32:43.834]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:43.834]                     next
[10:32:43.834]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:43.834]                 }
[10:32:43.834]                 if (length(args) > 0) 
[10:32:43.834]                   base::do.call(base::Sys.setenv, args = args)
[10:32:43.834]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:43.834]             }
[10:32:43.834]             else {
[10:32:43.834]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:43.834]             }
[10:32:43.834]             {
[10:32:43.834]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:43.834]                   0L) {
[10:32:43.834]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:43.834]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:43.834]                   base::options(opts)
[10:32:43.834]                 }
[10:32:43.834]                 {
[10:32:43.834]                   {
[10:32:43.834]                     NULL
[10:32:43.834]                     RNGkind("Mersenne-Twister")
[10:32:43.834]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:32:43.834]                       inherits = FALSE)
[10:32:43.834]                   }
[10:32:43.834]                   options(future.plan = NULL)
[10:32:43.834]                   if (is.na(NA_character_)) 
[10:32:43.834]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:43.834]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:43.834]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:43.834]                     .init = FALSE)
[10:32:43.834]                 }
[10:32:43.834]             }
[10:32:43.834]         }
[10:32:43.834]     })
[10:32:43.834]     if (TRUE) {
[10:32:43.834]         base::sink(type = "output", split = FALSE)
[10:32:43.834]         if (TRUE) {
[10:32:43.834]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:43.834]         }
[10:32:43.834]         else {
[10:32:43.834]             ...future.result["stdout"] <- base::list(NULL)
[10:32:43.834]         }
[10:32:43.834]         base::close(...future.stdout)
[10:32:43.834]         ...future.stdout <- NULL
[10:32:43.834]     }
[10:32:43.834]     ...future.result$conditions <- ...future.conditions
[10:32:43.834]     ...future.result$finished <- base::Sys.time()
[10:32:43.834]     ...future.result
[10:32:43.834] }
[10:32:43.835] plan(): Setting new future strategy stack:
[10:32:43.835] List of future strategies:
[10:32:43.835] 1. sequential:
[10:32:43.835]    - args: function (..., envir = parent.frame())
[10:32:43.835]    - tweaked: FALSE
[10:32:43.835]    - call: NULL
[10:32:43.836] plan(): nbrOfWorkers() = 1
[10:32:43.836] plan(): Setting new future strategy stack:
[10:32:43.836] List of future strategies:
[10:32:43.836] 1. sequential:
[10:32:43.836]    - args: function (..., envir = parent.frame())
[10:32:43.836]    - tweaked: FALSE
[10:32:43.836]    - call: plan(strategy)
[10:32:43.837] plan(): nbrOfWorkers() = 1
[10:32:43.837] SequentialFuture started (and completed)
[10:32:43.837] - Launch lazy future ... done
[10:32:43.837] run() for ‘SequentialFuture’ ... done
u$a = 2
v$a = 4
[10:32:43.838] getGlobalsAndPackages() ...
[10:32:43.838] Searching for globals...
[10:32:43.838] - globals found: [3] ‘{’, ‘*’, ‘a’
[10:32:43.839] Searching for globals ... DONE
[10:32:43.839] Resolving globals: FALSE
[10:32:43.839] The total size of the 1 globals is 56 bytes (56 bytes)
[10:32:43.840] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[10:32:43.840] - globals: [1] ‘a’
[10:32:43.840] 
[10:32:43.840] getGlobalsAndPackages() ... DONE
[10:32:43.840] run() for ‘Future’ ...
[10:32:43.840] - state: ‘created’
[10:32:43.841] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:32:43.841] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:32:43.841] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:32:43.841]   - Field: ‘label’
[10:32:43.841]   - Field: ‘local’
[10:32:43.841]   - Field: ‘owner’
[10:32:43.841]   - Field: ‘envir’
[10:32:43.841]   - Field: ‘packages’
[10:32:43.841]   - Field: ‘gc’
[10:32:43.842]   - Field: ‘conditions’
[10:32:43.842]   - Field: ‘expr’
[10:32:43.842]   - Field: ‘uuid’
[10:32:43.842]   - Field: ‘seed’
[10:32:43.842]   - Field: ‘version’
[10:32:43.842]   - Field: ‘result’
[10:32:43.842]   - Field: ‘asynchronous’
[10:32:43.842]   - Field: ‘calls’
[10:32:43.842]   - Field: ‘globals’
[10:32:43.842]   - Field: ‘stdout’
[10:32:43.842]   - Field: ‘earlySignal’
[10:32:43.843]   - Field: ‘lazy’
[10:32:43.843]   - Field: ‘state’
[10:32:43.843] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:32:43.843] - Launch lazy future ...
[10:32:43.843] Packages needed by the future expression (n = 0): <none>
[10:32:43.843] Packages needed by future strategies (n = 0): <none>
[10:32:43.843] {
[10:32:43.843]     {
[10:32:43.843]         {
[10:32:43.843]             ...future.startTime <- base::Sys.time()
[10:32:43.843]             {
[10:32:43.843]                 {
[10:32:43.843]                   {
[10:32:43.843]                     base::local({
[10:32:43.843]                       has_future <- base::requireNamespace("future", 
[10:32:43.843]                         quietly = TRUE)
[10:32:43.843]                       if (has_future) {
[10:32:43.843]                         ns <- base::getNamespace("future")
[10:32:43.843]                         version <- ns[[".package"]][["version"]]
[10:32:43.843]                         if (is.null(version)) 
[10:32:43.843]                           version <- utils::packageVersion("future")
[10:32:43.843]                       }
[10:32:43.843]                       else {
[10:32:43.843]                         version <- NULL
[10:32:43.843]                       }
[10:32:43.843]                       if (!has_future || version < "1.8.0") {
[10:32:43.843]                         info <- base::c(r_version = base::gsub("R version ", 
[10:32:43.843]                           "", base::R.version$version.string), 
[10:32:43.843]                           platform = base::sprintf("%s (%s-bit)", 
[10:32:43.843]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:43.843]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:43.843]                             "release", "version")], collapse = " "), 
[10:32:43.843]                           hostname = base::Sys.info()[["nodename"]])
[10:32:43.843]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:32:43.843]                           info)
[10:32:43.843]                         info <- base::paste(info, collapse = "; ")
[10:32:43.843]                         if (!has_future) {
[10:32:43.843]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:43.843]                             info)
[10:32:43.843]                         }
[10:32:43.843]                         else {
[10:32:43.843]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:43.843]                             info, version)
[10:32:43.843]                         }
[10:32:43.843]                         base::stop(msg)
[10:32:43.843]                       }
[10:32:43.843]                     })
[10:32:43.843]                   }
[10:32:43.843]                   ...future.strategy.old <- future::plan("list")
[10:32:43.843]                   options(future.plan = NULL)
[10:32:43.843]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:43.843]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:43.843]                 }
[10:32:43.843]                 ...future.workdir <- getwd()
[10:32:43.843]             }
[10:32:43.843]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:43.843]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:43.843]         }
[10:32:43.843]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:43.843]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:43.843]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:43.843]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:43.843]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:43.843]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:43.843]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:43.843]             base::names(...future.oldOptions))
[10:32:43.843]     }
[10:32:43.843]     if (FALSE) {
[10:32:43.843]     }
[10:32:43.843]     else {
[10:32:43.843]         if (TRUE) {
[10:32:43.843]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:43.843]                 open = "w")
[10:32:43.843]         }
[10:32:43.843]         else {
[10:32:43.843]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:43.843]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:43.843]         }
[10:32:43.843]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:43.843]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:43.843]             base::sink(type = "output", split = FALSE)
[10:32:43.843]             base::close(...future.stdout)
[10:32:43.843]         }, add = TRUE)
[10:32:43.843]     }
[10:32:43.843]     ...future.frame <- base::sys.nframe()
[10:32:43.843]     ...future.conditions <- base::list()
[10:32:43.843]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:43.843]     if (FALSE) {
[10:32:43.843]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:43.843]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:43.843]     }
[10:32:43.843]     ...future.result <- base::tryCatch({
[10:32:43.843]         base::withCallingHandlers({
[10:32:43.843]             ...future.value <- base::withVisible(base::local({
[10:32:43.843]                 2 * a
[10:32:43.843]             }))
[10:32:43.843]             future::FutureResult(value = ...future.value$value, 
[10:32:43.843]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:43.843]                   ...future.rng), globalenv = if (FALSE) 
[10:32:43.843]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:43.843]                     ...future.globalenv.names))
[10:32:43.843]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:43.843]         }, condition = base::local({
[10:32:43.843]             c <- base::c
[10:32:43.843]             inherits <- base::inherits
[10:32:43.843]             invokeRestart <- base::invokeRestart
[10:32:43.843]             length <- base::length
[10:32:43.843]             list <- base::list
[10:32:43.843]             seq.int <- base::seq.int
[10:32:43.843]             signalCondition <- base::signalCondition
[10:32:43.843]             sys.calls <- base::sys.calls
[10:32:43.843]             `[[` <- base::`[[`
[10:32:43.843]             `+` <- base::`+`
[10:32:43.843]             `<<-` <- base::`<<-`
[10:32:43.843]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:43.843]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:43.843]                   3L)]
[10:32:43.843]             }
[10:32:43.843]             function(cond) {
[10:32:43.843]                 is_error <- inherits(cond, "error")
[10:32:43.843]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:43.843]                   NULL)
[10:32:43.843]                 if (is_error) {
[10:32:43.843]                   sessionInformation <- function() {
[10:32:43.843]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:43.843]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:43.843]                       search = base::search(), system = base::Sys.info())
[10:32:43.843]                   }
[10:32:43.843]                   ...future.conditions[[length(...future.conditions) + 
[10:32:43.843]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:43.843]                     cond$call), session = sessionInformation(), 
[10:32:43.843]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:43.843]                   signalCondition(cond)
[10:32:43.843]                 }
[10:32:43.843]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:43.843]                 "immediateCondition"))) {
[10:32:43.843]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:43.843]                   ...future.conditions[[length(...future.conditions) + 
[10:32:43.843]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:43.843]                   if (TRUE && !signal) {
[10:32:43.843]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:43.843]                     {
[10:32:43.843]                       inherits <- base::inherits
[10:32:43.843]                       invokeRestart <- base::invokeRestart
[10:32:43.843]                       is.null <- base::is.null
[10:32:43.843]                       muffled <- FALSE
[10:32:43.843]                       if (inherits(cond, "message")) {
[10:32:43.843]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:43.843]                         if (muffled) 
[10:32:43.843]                           invokeRestart("muffleMessage")
[10:32:43.843]                       }
[10:32:43.843]                       else if (inherits(cond, "warning")) {
[10:32:43.843]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:43.843]                         if (muffled) 
[10:32:43.843]                           invokeRestart("muffleWarning")
[10:32:43.843]                       }
[10:32:43.843]                       else if (inherits(cond, "condition")) {
[10:32:43.843]                         if (!is.null(pattern)) {
[10:32:43.843]                           computeRestarts <- base::computeRestarts
[10:32:43.843]                           grepl <- base::grepl
[10:32:43.843]                           restarts <- computeRestarts(cond)
[10:32:43.843]                           for (restart in restarts) {
[10:32:43.843]                             name <- restart$name
[10:32:43.843]                             if (is.null(name)) 
[10:32:43.843]                               next
[10:32:43.843]                             if (!grepl(pattern, name)) 
[10:32:43.843]                               next
[10:32:43.843]                             invokeRestart(restart)
[10:32:43.843]                             muffled <- TRUE
[10:32:43.843]                             break
[10:32:43.843]                           }
[10:32:43.843]                         }
[10:32:43.843]                       }
[10:32:43.843]                       invisible(muffled)
[10:32:43.843]                     }
[10:32:43.843]                     muffleCondition(cond, pattern = "^muffle")
[10:32:43.843]                   }
[10:32:43.843]                 }
[10:32:43.843]                 else {
[10:32:43.843]                   if (TRUE) {
[10:32:43.843]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:43.843]                     {
[10:32:43.843]                       inherits <- base::inherits
[10:32:43.843]                       invokeRestart <- base::invokeRestart
[10:32:43.843]                       is.null <- base::is.null
[10:32:43.843]                       muffled <- FALSE
[10:32:43.843]                       if (inherits(cond, "message")) {
[10:32:43.843]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:43.843]                         if (muffled) 
[10:32:43.843]                           invokeRestart("muffleMessage")
[10:32:43.843]                       }
[10:32:43.843]                       else if (inherits(cond, "warning")) {
[10:32:43.843]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:43.843]                         if (muffled) 
[10:32:43.843]                           invokeRestart("muffleWarning")
[10:32:43.843]                       }
[10:32:43.843]                       else if (inherits(cond, "condition")) {
[10:32:43.843]                         if (!is.null(pattern)) {
[10:32:43.843]                           computeRestarts <- base::computeRestarts
[10:32:43.843]                           grepl <- base::grepl
[10:32:43.843]                           restarts <- computeRestarts(cond)
[10:32:43.843]                           for (restart in restarts) {
[10:32:43.843]                             name <- restart$name
[10:32:43.843]                             if (is.null(name)) 
[10:32:43.843]                               next
[10:32:43.843]                             if (!grepl(pattern, name)) 
[10:32:43.843]                               next
[10:32:43.843]                             invokeRestart(restart)
[10:32:43.843]                             muffled <- TRUE
[10:32:43.843]                             break
[10:32:43.843]                           }
[10:32:43.843]                         }
[10:32:43.843]                       }
[10:32:43.843]                       invisible(muffled)
[10:32:43.843]                     }
[10:32:43.843]                     muffleCondition(cond, pattern = "^muffle")
[10:32:43.843]                   }
[10:32:43.843]                 }
[10:32:43.843]             }
[10:32:43.843]         }))
[10:32:43.843]     }, error = function(ex) {
[10:32:43.843]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:43.843]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:43.843]                 ...future.rng), started = ...future.startTime, 
[10:32:43.843]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:43.843]             version = "1.8"), class = "FutureResult")
[10:32:43.843]     }, finally = {
[10:32:43.843]         if (!identical(...future.workdir, getwd())) 
[10:32:43.843]             setwd(...future.workdir)
[10:32:43.843]         {
[10:32:43.843]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:43.843]                 ...future.oldOptions$nwarnings <- NULL
[10:32:43.843]             }
[10:32:43.843]             base::options(...future.oldOptions)
[10:32:43.843]             if (.Platform$OS.type == "windows") {
[10:32:43.843]                 old_names <- names(...future.oldEnvVars)
[10:32:43.843]                 envs <- base::Sys.getenv()
[10:32:43.843]                 names <- names(envs)
[10:32:43.843]                 common <- intersect(names, old_names)
[10:32:43.843]                 added <- setdiff(names, old_names)
[10:32:43.843]                 removed <- setdiff(old_names, names)
[10:32:43.843]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:43.843]                   envs[common]]
[10:32:43.843]                 NAMES <- toupper(changed)
[10:32:43.843]                 args <- list()
[10:32:43.843]                 for (kk in seq_along(NAMES)) {
[10:32:43.843]                   name <- changed[[kk]]
[10:32:43.843]                   NAME <- NAMES[[kk]]
[10:32:43.843]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:43.843]                     next
[10:32:43.843]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:43.843]                 }
[10:32:43.843]                 NAMES <- toupper(added)
[10:32:43.843]                 for (kk in seq_along(NAMES)) {
[10:32:43.843]                   name <- added[[kk]]
[10:32:43.843]                   NAME <- NAMES[[kk]]
[10:32:43.843]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:43.843]                     next
[10:32:43.843]                   args[[name]] <- ""
[10:32:43.843]                 }
[10:32:43.843]                 NAMES <- toupper(removed)
[10:32:43.843]                 for (kk in seq_along(NAMES)) {
[10:32:43.843]                   name <- removed[[kk]]
[10:32:43.843]                   NAME <- NAMES[[kk]]
[10:32:43.843]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:43.843]                     next
[10:32:43.843]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:43.843]                 }
[10:32:43.843]                 if (length(args) > 0) 
[10:32:43.843]                   base::do.call(base::Sys.setenv, args = args)
[10:32:43.843]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:43.843]             }
[10:32:43.843]             else {
[10:32:43.843]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:43.843]             }
[10:32:43.843]             {
[10:32:43.843]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:43.843]                   0L) {
[10:32:43.843]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:43.843]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:43.843]                   base::options(opts)
[10:32:43.843]                 }
[10:32:43.843]                 {
[10:32:43.843]                   {
[10:32:43.843]                     NULL
[10:32:43.843]                     RNGkind("Mersenne-Twister")
[10:32:43.843]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:32:43.843]                       inherits = FALSE)
[10:32:43.843]                   }
[10:32:43.843]                   options(future.plan = NULL)
[10:32:43.843]                   if (is.na(NA_character_)) 
[10:32:43.843]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:43.843]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:43.843]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:43.843]                     .init = FALSE)
[10:32:43.843]                 }
[10:32:43.843]             }
[10:32:43.843]         }
[10:32:43.843]     })
[10:32:43.843]     if (TRUE) {
[10:32:43.843]         base::sink(type = "output", split = FALSE)
[10:32:43.843]         if (TRUE) {
[10:32:43.843]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:43.843]         }
[10:32:43.843]         else {
[10:32:43.843]             ...future.result["stdout"] <- base::list(NULL)
[10:32:43.843]         }
[10:32:43.843]         base::close(...future.stdout)
[10:32:43.843]         ...future.stdout <- NULL
[10:32:43.843]     }
[10:32:43.843]     ...future.result$conditions <- ...future.conditions
[10:32:43.843]     ...future.result$finished <- base::Sys.time()
[10:32:43.843]     ...future.result
[10:32:43.843] }
[10:32:43.845] assign_globals() ...
[10:32:43.845] List of 1
[10:32:43.845]  $ a: num 1
[10:32:43.845]  - attr(*, "where")=List of 1
[10:32:43.845]   ..$ a:<environment: R_EmptyEnv> 
[10:32:43.845]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:32:43.845]  - attr(*, "resolved")= logi FALSE
[10:32:43.845]  - attr(*, "total_size")= num 56
[10:32:43.845]  - attr(*, "already-done")= logi TRUE
[10:32:43.851] - copied ‘a’ to environment
[10:32:43.852] assign_globals() ... done
[10:32:43.852] plan(): Setting new future strategy stack:
[10:32:43.852] List of future strategies:
[10:32:43.852] 1. sequential:
[10:32:43.852]    - args: function (..., envir = parent.frame())
[10:32:43.852]    - tweaked: FALSE
[10:32:43.852]    - call: NULL
[10:32:43.852] plan(): nbrOfWorkers() = 1
[10:32:43.853] plan(): Setting new future strategy stack:
[10:32:43.853] List of future strategies:
[10:32:43.853] 1. sequential:
[10:32:43.853]    - args: function (..., envir = parent.frame())
[10:32:43.853]    - tweaked: FALSE
[10:32:43.853]    - call: plan(strategy)
[10:32:43.853] plan(): nbrOfWorkers() = 1
[10:32:43.854] SequentialFuture started (and completed)
[10:32:43.854] - Launch lazy future ... done
[10:32:43.854] run() for ‘SequentialFuture’ ... done
[10:32:43.854] getGlobalsAndPackages() ...
[10:32:43.854] Searching for globals...
[10:32:43.855] - globals found: [3] ‘{’, ‘*’, ‘a’
[10:32:43.855] Searching for globals ... DONE
[10:32:43.855] Resolving globals: FALSE
[10:32:43.855] The total size of the 1 globals is 56 bytes (56 bytes)
[10:32:43.856] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[10:32:43.856] - globals: [1] ‘a’
[10:32:43.856] 
[10:32:43.856] getGlobalsAndPackages() ... DONE
[10:32:43.856] run() for ‘Future’ ...
[10:32:43.856] - state: ‘created’
[10:32:43.857] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:32:43.857] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:32:43.857] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:32:43.857]   - Field: ‘label’
[10:32:43.857]   - Field: ‘local’
[10:32:43.857]   - Field: ‘owner’
[10:32:43.857]   - Field: ‘envir’
[10:32:43.857]   - Field: ‘packages’
[10:32:43.858]   - Field: ‘gc’
[10:32:43.858]   - Field: ‘conditions’
[10:32:43.858]   - Field: ‘expr’
[10:32:43.858]   - Field: ‘uuid’
[10:32:43.858]   - Field: ‘seed’
[10:32:43.858]   - Field: ‘version’
[10:32:43.858]   - Field: ‘result’
[10:32:43.858]   - Field: ‘asynchronous’
[10:32:43.858]   - Field: ‘calls’
[10:32:43.858]   - Field: ‘globals’
[10:32:43.858]   - Field: ‘stdout’
[10:32:43.859]   - Field: ‘earlySignal’
[10:32:43.859]   - Field: ‘lazy’
[10:32:43.859]   - Field: ‘state’
[10:32:43.859] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:32:43.859] - Launch lazy future ...
[10:32:43.859] Packages needed by the future expression (n = 0): <none>
[10:32:43.859] Packages needed by future strategies (n = 0): <none>
[10:32:43.860] {
[10:32:43.860]     {
[10:32:43.860]         {
[10:32:43.860]             ...future.startTime <- base::Sys.time()
[10:32:43.860]             {
[10:32:43.860]                 {
[10:32:43.860]                   {
[10:32:43.860]                     base::local({
[10:32:43.860]                       has_future <- base::requireNamespace("future", 
[10:32:43.860]                         quietly = TRUE)
[10:32:43.860]                       if (has_future) {
[10:32:43.860]                         ns <- base::getNamespace("future")
[10:32:43.860]                         version <- ns[[".package"]][["version"]]
[10:32:43.860]                         if (is.null(version)) 
[10:32:43.860]                           version <- utils::packageVersion("future")
[10:32:43.860]                       }
[10:32:43.860]                       else {
[10:32:43.860]                         version <- NULL
[10:32:43.860]                       }
[10:32:43.860]                       if (!has_future || version < "1.8.0") {
[10:32:43.860]                         info <- base::c(r_version = base::gsub("R version ", 
[10:32:43.860]                           "", base::R.version$version.string), 
[10:32:43.860]                           platform = base::sprintf("%s (%s-bit)", 
[10:32:43.860]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:43.860]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:43.860]                             "release", "version")], collapse = " "), 
[10:32:43.860]                           hostname = base::Sys.info()[["nodename"]])
[10:32:43.860]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:32:43.860]                           info)
[10:32:43.860]                         info <- base::paste(info, collapse = "; ")
[10:32:43.860]                         if (!has_future) {
[10:32:43.860]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:43.860]                             info)
[10:32:43.860]                         }
[10:32:43.860]                         else {
[10:32:43.860]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:43.860]                             info, version)
[10:32:43.860]                         }
[10:32:43.860]                         base::stop(msg)
[10:32:43.860]                       }
[10:32:43.860]                     })
[10:32:43.860]                   }
[10:32:43.860]                   ...future.strategy.old <- future::plan("list")
[10:32:43.860]                   options(future.plan = NULL)
[10:32:43.860]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:43.860]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:43.860]                 }
[10:32:43.860]                 ...future.workdir <- getwd()
[10:32:43.860]             }
[10:32:43.860]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:43.860]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:43.860]         }
[10:32:43.860]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:43.860]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:43.860]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:43.860]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:43.860]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:43.860]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:43.860]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:43.860]             base::names(...future.oldOptions))
[10:32:43.860]     }
[10:32:43.860]     if (FALSE) {
[10:32:43.860]     }
[10:32:43.860]     else {
[10:32:43.860]         if (TRUE) {
[10:32:43.860]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:43.860]                 open = "w")
[10:32:43.860]         }
[10:32:43.860]         else {
[10:32:43.860]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:43.860]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:43.860]         }
[10:32:43.860]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:43.860]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:43.860]             base::sink(type = "output", split = FALSE)
[10:32:43.860]             base::close(...future.stdout)
[10:32:43.860]         }, add = TRUE)
[10:32:43.860]     }
[10:32:43.860]     ...future.frame <- base::sys.nframe()
[10:32:43.860]     ...future.conditions <- base::list()
[10:32:43.860]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:43.860]     if (FALSE) {
[10:32:43.860]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:43.860]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:43.860]     }
[10:32:43.860]     ...future.result <- base::tryCatch({
[10:32:43.860]         base::withCallingHandlers({
[10:32:43.860]             ...future.value <- base::withVisible(base::local({
[10:32:43.860]                 2 * a
[10:32:43.860]             }))
[10:32:43.860]             future::FutureResult(value = ...future.value$value, 
[10:32:43.860]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:43.860]                   ...future.rng), globalenv = if (FALSE) 
[10:32:43.860]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:43.860]                     ...future.globalenv.names))
[10:32:43.860]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:43.860]         }, condition = base::local({
[10:32:43.860]             c <- base::c
[10:32:43.860]             inherits <- base::inherits
[10:32:43.860]             invokeRestart <- base::invokeRestart
[10:32:43.860]             length <- base::length
[10:32:43.860]             list <- base::list
[10:32:43.860]             seq.int <- base::seq.int
[10:32:43.860]             signalCondition <- base::signalCondition
[10:32:43.860]             sys.calls <- base::sys.calls
[10:32:43.860]             `[[` <- base::`[[`
[10:32:43.860]             `+` <- base::`+`
[10:32:43.860]             `<<-` <- base::`<<-`
[10:32:43.860]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:43.860]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:43.860]                   3L)]
[10:32:43.860]             }
[10:32:43.860]             function(cond) {
[10:32:43.860]                 is_error <- inherits(cond, "error")
[10:32:43.860]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:43.860]                   NULL)
[10:32:43.860]                 if (is_error) {
[10:32:43.860]                   sessionInformation <- function() {
[10:32:43.860]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:43.860]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:43.860]                       search = base::search(), system = base::Sys.info())
[10:32:43.860]                   }
[10:32:43.860]                   ...future.conditions[[length(...future.conditions) + 
[10:32:43.860]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:43.860]                     cond$call), session = sessionInformation(), 
[10:32:43.860]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:43.860]                   signalCondition(cond)
[10:32:43.860]                 }
[10:32:43.860]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:43.860]                 "immediateCondition"))) {
[10:32:43.860]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:43.860]                   ...future.conditions[[length(...future.conditions) + 
[10:32:43.860]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:43.860]                   if (TRUE && !signal) {
[10:32:43.860]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:43.860]                     {
[10:32:43.860]                       inherits <- base::inherits
[10:32:43.860]                       invokeRestart <- base::invokeRestart
[10:32:43.860]                       is.null <- base::is.null
[10:32:43.860]                       muffled <- FALSE
[10:32:43.860]                       if (inherits(cond, "message")) {
[10:32:43.860]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:43.860]                         if (muffled) 
[10:32:43.860]                           invokeRestart("muffleMessage")
[10:32:43.860]                       }
[10:32:43.860]                       else if (inherits(cond, "warning")) {
[10:32:43.860]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:43.860]                         if (muffled) 
[10:32:43.860]                           invokeRestart("muffleWarning")
[10:32:43.860]                       }
[10:32:43.860]                       else if (inherits(cond, "condition")) {
[10:32:43.860]                         if (!is.null(pattern)) {
[10:32:43.860]                           computeRestarts <- base::computeRestarts
[10:32:43.860]                           grepl <- base::grepl
[10:32:43.860]                           restarts <- computeRestarts(cond)
[10:32:43.860]                           for (restart in restarts) {
[10:32:43.860]                             name <- restart$name
[10:32:43.860]                             if (is.null(name)) 
[10:32:43.860]                               next
[10:32:43.860]                             if (!grepl(pattern, name)) 
[10:32:43.860]                               next
[10:32:43.860]                             invokeRestart(restart)
[10:32:43.860]                             muffled <- TRUE
[10:32:43.860]                             break
[10:32:43.860]                           }
[10:32:43.860]                         }
[10:32:43.860]                       }
[10:32:43.860]                       invisible(muffled)
[10:32:43.860]                     }
[10:32:43.860]                     muffleCondition(cond, pattern = "^muffle")
[10:32:43.860]                   }
[10:32:43.860]                 }
[10:32:43.860]                 else {
[10:32:43.860]                   if (TRUE) {
[10:32:43.860]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:43.860]                     {
[10:32:43.860]                       inherits <- base::inherits
[10:32:43.860]                       invokeRestart <- base::invokeRestart
[10:32:43.860]                       is.null <- base::is.null
[10:32:43.860]                       muffled <- FALSE
[10:32:43.860]                       if (inherits(cond, "message")) {
[10:32:43.860]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:43.860]                         if (muffled) 
[10:32:43.860]                           invokeRestart("muffleMessage")
[10:32:43.860]                       }
[10:32:43.860]                       else if (inherits(cond, "warning")) {
[10:32:43.860]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:43.860]                         if (muffled) 
[10:32:43.860]                           invokeRestart("muffleWarning")
[10:32:43.860]                       }
[10:32:43.860]                       else if (inherits(cond, "condition")) {
[10:32:43.860]                         if (!is.null(pattern)) {
[10:32:43.860]                           computeRestarts <- base::computeRestarts
[10:32:43.860]                           grepl <- base::grepl
[10:32:43.860]                           restarts <- computeRestarts(cond)
[10:32:43.860]                           for (restart in restarts) {
[10:32:43.860]                             name <- restart$name
[10:32:43.860]                             if (is.null(name)) 
[10:32:43.860]                               next
[10:32:43.860]                             if (!grepl(pattern, name)) 
[10:32:43.860]                               next
[10:32:43.860]                             invokeRestart(restart)
[10:32:43.860]                             muffled <- TRUE
[10:32:43.860]                             break
[10:32:43.860]                           }
[10:32:43.860]                         }
[10:32:43.860]                       }
[10:32:43.860]                       invisible(muffled)
[10:32:43.860]                     }
[10:32:43.860]                     muffleCondition(cond, pattern = "^muffle")
[10:32:43.860]                   }
[10:32:43.860]                 }
[10:32:43.860]             }
[10:32:43.860]         }))
[10:32:43.860]     }, error = function(ex) {
[10:32:43.860]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:43.860]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:43.860]                 ...future.rng), started = ...future.startTime, 
[10:32:43.860]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:43.860]             version = "1.8"), class = "FutureResult")
[10:32:43.860]     }, finally = {
[10:32:43.860]         if (!identical(...future.workdir, getwd())) 
[10:32:43.860]             setwd(...future.workdir)
[10:32:43.860]         {
[10:32:43.860]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:43.860]                 ...future.oldOptions$nwarnings <- NULL
[10:32:43.860]             }
[10:32:43.860]             base::options(...future.oldOptions)
[10:32:43.860]             if (.Platform$OS.type == "windows") {
[10:32:43.860]                 old_names <- names(...future.oldEnvVars)
[10:32:43.860]                 envs <- base::Sys.getenv()
[10:32:43.860]                 names <- names(envs)
[10:32:43.860]                 common <- intersect(names, old_names)
[10:32:43.860]                 added <- setdiff(names, old_names)
[10:32:43.860]                 removed <- setdiff(old_names, names)
[10:32:43.860]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:43.860]                   envs[common]]
[10:32:43.860]                 NAMES <- toupper(changed)
[10:32:43.860]                 args <- list()
[10:32:43.860]                 for (kk in seq_along(NAMES)) {
[10:32:43.860]                   name <- changed[[kk]]
[10:32:43.860]                   NAME <- NAMES[[kk]]
[10:32:43.860]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:43.860]                     next
[10:32:43.860]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:43.860]                 }
[10:32:43.860]                 NAMES <- toupper(added)
[10:32:43.860]                 for (kk in seq_along(NAMES)) {
[10:32:43.860]                   name <- added[[kk]]
[10:32:43.860]                   NAME <- NAMES[[kk]]
[10:32:43.860]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:43.860]                     next
[10:32:43.860]                   args[[name]] <- ""
[10:32:43.860]                 }
[10:32:43.860]                 NAMES <- toupper(removed)
[10:32:43.860]                 for (kk in seq_along(NAMES)) {
[10:32:43.860]                   name <- removed[[kk]]
[10:32:43.860]                   NAME <- NAMES[[kk]]
[10:32:43.860]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:43.860]                     next
[10:32:43.860]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:43.860]                 }
[10:32:43.860]                 if (length(args) > 0) 
[10:32:43.860]                   base::do.call(base::Sys.setenv, args = args)
[10:32:43.860]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:43.860]             }
[10:32:43.860]             else {
[10:32:43.860]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:43.860]             }
[10:32:43.860]             {
[10:32:43.860]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:43.860]                   0L) {
[10:32:43.860]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:43.860]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:43.860]                   base::options(opts)
[10:32:43.860]                 }
[10:32:43.860]                 {
[10:32:43.860]                   {
[10:32:43.860]                     NULL
[10:32:43.860]                     RNGkind("Mersenne-Twister")
[10:32:43.860]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:32:43.860]                       inherits = FALSE)
[10:32:43.860]                   }
[10:32:43.860]                   options(future.plan = NULL)
[10:32:43.860]                   if (is.na(NA_character_)) 
[10:32:43.860]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:43.860]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:43.860]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:43.860]                     .init = FALSE)
[10:32:43.860]                 }
[10:32:43.860]             }
[10:32:43.860]         }
[10:32:43.860]     })
[10:32:43.860]     if (TRUE) {
[10:32:43.860]         base::sink(type = "output", split = FALSE)
[10:32:43.860]         if (TRUE) {
[10:32:43.860]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:43.860]         }
[10:32:43.860]         else {
[10:32:43.860]             ...future.result["stdout"] <- base::list(NULL)
[10:32:43.860]         }
[10:32:43.860]         base::close(...future.stdout)
[10:32:43.860]         ...future.stdout <- NULL
[10:32:43.860]     }
[10:32:43.860]     ...future.result$conditions <- ...future.conditions
[10:32:43.860]     ...future.result$finished <- base::Sys.time()
[10:32:43.860]     ...future.result
[10:32:43.860] }
[10:32:43.861] assign_globals() ...
[10:32:43.861] List of 1
[10:32:43.861]  $ a: num 1
[10:32:43.861]  - attr(*, "where")=List of 1
[10:32:43.861]   ..$ a:<environment: R_EmptyEnv> 
[10:32:43.861]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:32:43.861]  - attr(*, "resolved")= logi FALSE
[10:32:43.861]  - attr(*, "total_size")= num 56
[10:32:43.861]  - attr(*, "already-done")= logi TRUE
[10:32:43.863] - copied ‘a’ to environment
[10:32:43.864] assign_globals() ... done
[10:32:43.864] plan(): Setting new future strategy stack:
[10:32:43.864] List of future strategies:
[10:32:43.864] 1. sequential:
[10:32:43.864]    - args: function (..., envir = parent.frame())
[10:32:43.864]    - tweaked: FALSE
[10:32:43.864]    - call: NULL
[10:32:43.864] plan(): nbrOfWorkers() = 1
[10:32:43.865] plan(): Setting new future strategy stack:
[10:32:43.865] List of future strategies:
[10:32:43.865] 1. sequential:
[10:32:43.865]    - args: function (..., envir = parent.frame())
[10:32:43.865]    - tweaked: FALSE
[10:32:43.865]    - call: plan(strategy)
[10:32:43.865] plan(): nbrOfWorkers() = 1
[10:32:43.865] SequentialFuture started (and completed)
[10:32:43.866] - Launch lazy future ... done
[10:32:43.866] run() for ‘SequentialFuture’ ... done
[10:32:43.866] getGlobalsAndPackages() ...
[10:32:43.866] Searching for globals...
[10:32:43.867] - globals found: [3] ‘{’, ‘*’, ‘a’
[10:32:43.867] Searching for globals ... DONE
[10:32:43.867] Resolving globals: FALSE
[10:32:43.867] The total size of the 1 globals is 56 bytes (56 bytes)
[10:32:43.868] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[10:32:43.868] - globals: [1] ‘a’
[10:32:43.868] 
[10:32:43.868] getGlobalsAndPackages() ... DONE
[10:32:43.868] run() for ‘Future’ ...
[10:32:43.868] - state: ‘created’
[10:32:43.868] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:32:43.869] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:32:43.869] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:32:43.869]   - Field: ‘label’
[10:32:43.869]   - Field: ‘local’
[10:32:43.869]   - Field: ‘owner’
[10:32:43.869]   - Field: ‘envir’
[10:32:43.869]   - Field: ‘packages’
[10:32:43.869]   - Field: ‘gc’
[10:32:43.869]   - Field: ‘conditions’
[10:32:43.869]   - Field: ‘expr’
[10:32:43.870]   - Field: ‘uuid’
[10:32:43.870]   - Field: ‘seed’
[10:32:43.870]   - Field: ‘version’
[10:32:43.870]   - Field: ‘result’
[10:32:43.870]   - Field: ‘asynchronous’
[10:32:43.870]   - Field: ‘calls’
[10:32:43.870]   - Field: ‘globals’
[10:32:43.870]   - Field: ‘stdout’
[10:32:43.870]   - Field: ‘earlySignal’
[10:32:43.870]   - Field: ‘lazy’
[10:32:43.870]   - Field: ‘state’
[10:32:43.870] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:32:43.871] - Launch lazy future ...
[10:32:43.871] Packages needed by the future expression (n = 0): <none>
[10:32:43.871] Packages needed by future strategies (n = 0): <none>
[10:32:43.871] {
[10:32:43.871]     {
[10:32:43.871]         {
[10:32:43.871]             ...future.startTime <- base::Sys.time()
[10:32:43.871]             {
[10:32:43.871]                 {
[10:32:43.871]                   {
[10:32:43.871]                     base::local({
[10:32:43.871]                       has_future <- base::requireNamespace("future", 
[10:32:43.871]                         quietly = TRUE)
[10:32:43.871]                       if (has_future) {
[10:32:43.871]                         ns <- base::getNamespace("future")
[10:32:43.871]                         version <- ns[[".package"]][["version"]]
[10:32:43.871]                         if (is.null(version)) 
[10:32:43.871]                           version <- utils::packageVersion("future")
[10:32:43.871]                       }
[10:32:43.871]                       else {
[10:32:43.871]                         version <- NULL
[10:32:43.871]                       }
[10:32:43.871]                       if (!has_future || version < "1.8.0") {
[10:32:43.871]                         info <- base::c(r_version = base::gsub("R version ", 
[10:32:43.871]                           "", base::R.version$version.string), 
[10:32:43.871]                           platform = base::sprintf("%s (%s-bit)", 
[10:32:43.871]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:43.871]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:43.871]                             "release", "version")], collapse = " "), 
[10:32:43.871]                           hostname = base::Sys.info()[["nodename"]])
[10:32:43.871]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:32:43.871]                           info)
[10:32:43.871]                         info <- base::paste(info, collapse = "; ")
[10:32:43.871]                         if (!has_future) {
[10:32:43.871]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:43.871]                             info)
[10:32:43.871]                         }
[10:32:43.871]                         else {
[10:32:43.871]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:43.871]                             info, version)
[10:32:43.871]                         }
[10:32:43.871]                         base::stop(msg)
[10:32:43.871]                       }
[10:32:43.871]                     })
[10:32:43.871]                   }
[10:32:43.871]                   ...future.strategy.old <- future::plan("list")
[10:32:43.871]                   options(future.plan = NULL)
[10:32:43.871]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:43.871]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:43.871]                 }
[10:32:43.871]                 ...future.workdir <- getwd()
[10:32:43.871]             }
[10:32:43.871]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:43.871]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:43.871]         }
[10:32:43.871]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:43.871]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:43.871]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:43.871]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:43.871]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:43.871]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:43.871]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:43.871]             base::names(...future.oldOptions))
[10:32:43.871]     }
[10:32:43.871]     if (FALSE) {
[10:32:43.871]     }
[10:32:43.871]     else {
[10:32:43.871]         if (TRUE) {
[10:32:43.871]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:43.871]                 open = "w")
[10:32:43.871]         }
[10:32:43.871]         else {
[10:32:43.871]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:43.871]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:43.871]         }
[10:32:43.871]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:43.871]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:43.871]             base::sink(type = "output", split = FALSE)
[10:32:43.871]             base::close(...future.stdout)
[10:32:43.871]         }, add = TRUE)
[10:32:43.871]     }
[10:32:43.871]     ...future.frame <- base::sys.nframe()
[10:32:43.871]     ...future.conditions <- base::list()
[10:32:43.871]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:43.871]     if (FALSE) {
[10:32:43.871]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:43.871]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:43.871]     }
[10:32:43.871]     ...future.result <- base::tryCatch({
[10:32:43.871]         base::withCallingHandlers({
[10:32:43.871]             ...future.value <- base::withVisible(base::local({
[10:32:43.871]                 2 * a
[10:32:43.871]             }))
[10:32:43.871]             future::FutureResult(value = ...future.value$value, 
[10:32:43.871]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:43.871]                   ...future.rng), globalenv = if (FALSE) 
[10:32:43.871]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:43.871]                     ...future.globalenv.names))
[10:32:43.871]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:43.871]         }, condition = base::local({
[10:32:43.871]             c <- base::c
[10:32:43.871]             inherits <- base::inherits
[10:32:43.871]             invokeRestart <- base::invokeRestart
[10:32:43.871]             length <- base::length
[10:32:43.871]             list <- base::list
[10:32:43.871]             seq.int <- base::seq.int
[10:32:43.871]             signalCondition <- base::signalCondition
[10:32:43.871]             sys.calls <- base::sys.calls
[10:32:43.871]             `[[` <- base::`[[`
[10:32:43.871]             `+` <- base::`+`
[10:32:43.871]             `<<-` <- base::`<<-`
[10:32:43.871]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:43.871]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:43.871]                   3L)]
[10:32:43.871]             }
[10:32:43.871]             function(cond) {
[10:32:43.871]                 is_error <- inherits(cond, "error")
[10:32:43.871]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:43.871]                   NULL)
[10:32:43.871]                 if (is_error) {
[10:32:43.871]                   sessionInformation <- function() {
[10:32:43.871]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:43.871]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:43.871]                       search = base::search(), system = base::Sys.info())
[10:32:43.871]                   }
[10:32:43.871]                   ...future.conditions[[length(...future.conditions) + 
[10:32:43.871]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:43.871]                     cond$call), session = sessionInformation(), 
[10:32:43.871]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:43.871]                   signalCondition(cond)
[10:32:43.871]                 }
[10:32:43.871]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:43.871]                 "immediateCondition"))) {
[10:32:43.871]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:43.871]                   ...future.conditions[[length(...future.conditions) + 
[10:32:43.871]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:43.871]                   if (TRUE && !signal) {
[10:32:43.871]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:43.871]                     {
[10:32:43.871]                       inherits <- base::inherits
[10:32:43.871]                       invokeRestart <- base::invokeRestart
[10:32:43.871]                       is.null <- base::is.null
[10:32:43.871]                       muffled <- FALSE
[10:32:43.871]                       if (inherits(cond, "message")) {
[10:32:43.871]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:43.871]                         if (muffled) 
[10:32:43.871]                           invokeRestart("muffleMessage")
[10:32:43.871]                       }
[10:32:43.871]                       else if (inherits(cond, "warning")) {
[10:32:43.871]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:43.871]                         if (muffled) 
[10:32:43.871]                           invokeRestart("muffleWarning")
[10:32:43.871]                       }
[10:32:43.871]                       else if (inherits(cond, "condition")) {
[10:32:43.871]                         if (!is.null(pattern)) {
[10:32:43.871]                           computeRestarts <- base::computeRestarts
[10:32:43.871]                           grepl <- base::grepl
[10:32:43.871]                           restarts <- computeRestarts(cond)
[10:32:43.871]                           for (restart in restarts) {
[10:32:43.871]                             name <- restart$name
[10:32:43.871]                             if (is.null(name)) 
[10:32:43.871]                               next
[10:32:43.871]                             if (!grepl(pattern, name)) 
[10:32:43.871]                               next
[10:32:43.871]                             invokeRestart(restart)
[10:32:43.871]                             muffled <- TRUE
[10:32:43.871]                             break
[10:32:43.871]                           }
[10:32:43.871]                         }
[10:32:43.871]                       }
[10:32:43.871]                       invisible(muffled)
[10:32:43.871]                     }
[10:32:43.871]                     muffleCondition(cond, pattern = "^muffle")
[10:32:43.871]                   }
[10:32:43.871]                 }
[10:32:43.871]                 else {
[10:32:43.871]                   if (TRUE) {
[10:32:43.871]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:43.871]                     {
[10:32:43.871]                       inherits <- base::inherits
[10:32:43.871]                       invokeRestart <- base::invokeRestart
[10:32:43.871]                       is.null <- base::is.null
[10:32:43.871]                       muffled <- FALSE
[10:32:43.871]                       if (inherits(cond, "message")) {
[10:32:43.871]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:43.871]                         if (muffled) 
[10:32:43.871]                           invokeRestart("muffleMessage")
[10:32:43.871]                       }
[10:32:43.871]                       else if (inherits(cond, "warning")) {
[10:32:43.871]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:43.871]                         if (muffled) 
[10:32:43.871]                           invokeRestart("muffleWarning")
[10:32:43.871]                       }
[10:32:43.871]                       else if (inherits(cond, "condition")) {
[10:32:43.871]                         if (!is.null(pattern)) {
[10:32:43.871]                           computeRestarts <- base::computeRestarts
[10:32:43.871]                           grepl <- base::grepl
[10:32:43.871]                           restarts <- computeRestarts(cond)
[10:32:43.871]                           for (restart in restarts) {
[10:32:43.871]                             name <- restart$name
[10:32:43.871]                             if (is.null(name)) 
[10:32:43.871]                               next
[10:32:43.871]                             if (!grepl(pattern, name)) 
[10:32:43.871]                               next
[10:32:43.871]                             invokeRestart(restart)
[10:32:43.871]                             muffled <- TRUE
[10:32:43.871]                             break
[10:32:43.871]                           }
[10:32:43.871]                         }
[10:32:43.871]                       }
[10:32:43.871]                       invisible(muffled)
[10:32:43.871]                     }
[10:32:43.871]                     muffleCondition(cond, pattern = "^muffle")
[10:32:43.871]                   }
[10:32:43.871]                 }
[10:32:43.871]             }
[10:32:43.871]         }))
[10:32:43.871]     }, error = function(ex) {
[10:32:43.871]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:43.871]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:43.871]                 ...future.rng), started = ...future.startTime, 
[10:32:43.871]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:43.871]             version = "1.8"), class = "FutureResult")
[10:32:43.871]     }, finally = {
[10:32:43.871]         if (!identical(...future.workdir, getwd())) 
[10:32:43.871]             setwd(...future.workdir)
[10:32:43.871]         {
[10:32:43.871]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:43.871]                 ...future.oldOptions$nwarnings <- NULL
[10:32:43.871]             }
[10:32:43.871]             base::options(...future.oldOptions)
[10:32:43.871]             if (.Platform$OS.type == "windows") {
[10:32:43.871]                 old_names <- names(...future.oldEnvVars)
[10:32:43.871]                 envs <- base::Sys.getenv()
[10:32:43.871]                 names <- names(envs)
[10:32:43.871]                 common <- intersect(names, old_names)
[10:32:43.871]                 added <- setdiff(names, old_names)
[10:32:43.871]                 removed <- setdiff(old_names, names)
[10:32:43.871]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:43.871]                   envs[common]]
[10:32:43.871]                 NAMES <- toupper(changed)
[10:32:43.871]                 args <- list()
[10:32:43.871]                 for (kk in seq_along(NAMES)) {
[10:32:43.871]                   name <- changed[[kk]]
[10:32:43.871]                   NAME <- NAMES[[kk]]
[10:32:43.871]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:43.871]                     next
[10:32:43.871]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:43.871]                 }
[10:32:43.871]                 NAMES <- toupper(added)
[10:32:43.871]                 for (kk in seq_along(NAMES)) {
[10:32:43.871]                   name <- added[[kk]]
[10:32:43.871]                   NAME <- NAMES[[kk]]
[10:32:43.871]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:43.871]                     next
[10:32:43.871]                   args[[name]] <- ""
[10:32:43.871]                 }
[10:32:43.871]                 NAMES <- toupper(removed)
[10:32:43.871]                 for (kk in seq_along(NAMES)) {
[10:32:43.871]                   name <- removed[[kk]]
[10:32:43.871]                   NAME <- NAMES[[kk]]
[10:32:43.871]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:43.871]                     next
[10:32:43.871]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:43.871]                 }
[10:32:43.871]                 if (length(args) > 0) 
[10:32:43.871]                   base::do.call(base::Sys.setenv, args = args)
[10:32:43.871]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:43.871]             }
[10:32:43.871]             else {
[10:32:43.871]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:43.871]             }
[10:32:43.871]             {
[10:32:43.871]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:43.871]                   0L) {
[10:32:43.871]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:43.871]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:43.871]                   base::options(opts)
[10:32:43.871]                 }
[10:32:43.871]                 {
[10:32:43.871]                   {
[10:32:43.871]                     NULL
[10:32:43.871]                     RNGkind("Mersenne-Twister")
[10:32:43.871]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:32:43.871]                       inherits = FALSE)
[10:32:43.871]                   }
[10:32:43.871]                   options(future.plan = NULL)
[10:32:43.871]                   if (is.na(NA_character_)) 
[10:32:43.871]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:43.871]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:43.871]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:43.871]                     .init = FALSE)
[10:32:43.871]                 }
[10:32:43.871]             }
[10:32:43.871]         }
[10:32:43.871]     })
[10:32:43.871]     if (TRUE) {
[10:32:43.871]         base::sink(type = "output", split = FALSE)
[10:32:43.871]         if (TRUE) {
[10:32:43.871]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:43.871]         }
[10:32:43.871]         else {
[10:32:43.871]             ...future.result["stdout"] <- base::list(NULL)
[10:32:43.871]         }
[10:32:43.871]         base::close(...future.stdout)
[10:32:43.871]         ...future.stdout <- NULL
[10:32:43.871]     }
[10:32:43.871]     ...future.result$conditions <- ...future.conditions
[10:32:43.871]     ...future.result$finished <- base::Sys.time()
[10:32:43.871]     ...future.result
[10:32:43.871] }
[10:32:43.873] assign_globals() ...
[10:32:43.873] List of 1
[10:32:43.873]  $ a: num 1
[10:32:43.873]  - attr(*, "where")=List of 1
[10:32:43.873]   ..$ a:<environment: R_EmptyEnv> 
[10:32:43.873]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:32:43.873]  - attr(*, "resolved")= logi FALSE
[10:32:43.873]  - attr(*, "total_size")= num 56
[10:32:43.873]  - attr(*, "already-done")= logi TRUE
[10:32:43.875] - copied ‘a’ to environment
[10:32:43.875] assign_globals() ... done
[10:32:43.876] plan(): Setting new future strategy stack:
[10:32:43.876] List of future strategies:
[10:32:43.876] 1. sequential:
[10:32:43.876]    - args: function (..., envir = parent.frame())
[10:32:43.876]    - tweaked: FALSE
[10:32:43.876]    - call: NULL
[10:32:43.876] plan(): nbrOfWorkers() = 1
[10:32:43.877] plan(): Setting new future strategy stack:
[10:32:43.878] List of future strategies:
[10:32:43.878] 1. sequential:
[10:32:43.878]    - args: function (..., envir = parent.frame())
[10:32:43.878]    - tweaked: FALSE
[10:32:43.878]    - call: plan(strategy)
[10:32:43.878] plan(): nbrOfWorkers() = 1
[10:32:43.878] SequentialFuture started (and completed)
[10:32:43.878] - Launch lazy future ... done
[10:32:43.878] run() for ‘SequentialFuture’ ... done
[10:32:43.879] getGlobalsAndPackages() ...
[10:32:43.879] Searching for globals...
[10:32:43.879] - globals found: [3] ‘{’, ‘*’, ‘a’
[10:32:43.880] Searching for globals ... DONE
[10:32:43.880] Resolving globals: FALSE
[10:32:43.880] The total size of the 1 globals is 56 bytes (56 bytes)
[10:32:43.880] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[10:32:43.880] - globals: [1] ‘a’
[10:32:43.881] 
[10:32:43.881] getGlobalsAndPackages() ... DONE
[10:32:43.881] run() for ‘Future’ ...
[10:32:43.881] - state: ‘created’
[10:32:43.881] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:32:43.881] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:32:43.881] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:32:43.882]   - Field: ‘label’
[10:32:43.882]   - Field: ‘local’
[10:32:43.882]   - Field: ‘owner’
[10:32:43.882]   - Field: ‘envir’
[10:32:43.882]   - Field: ‘packages’
[10:32:43.882]   - Field: ‘gc’
[10:32:43.882]   - Field: ‘conditions’
[10:32:43.882]   - Field: ‘expr’
[10:32:43.882]   - Field: ‘uuid’
[10:32:43.882]   - Field: ‘seed’
[10:32:43.882]   - Field: ‘version’
[10:32:43.883]   - Field: ‘result’
[10:32:43.883]   - Field: ‘asynchronous’
[10:32:43.883]   - Field: ‘calls’
[10:32:43.883]   - Field: ‘globals’
[10:32:43.883]   - Field: ‘stdout’
[10:32:43.883]   - Field: ‘earlySignal’
[10:32:43.883]   - Field: ‘lazy’
[10:32:43.883]   - Field: ‘state’
[10:32:43.883] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:32:43.883] - Launch lazy future ...
[10:32:43.883] Packages needed by the future expression (n = 0): <none>
[10:32:43.884] Packages needed by future strategies (n = 0): <none>
[10:32:43.884] {
[10:32:43.884]     {
[10:32:43.884]         {
[10:32:43.884]             ...future.startTime <- base::Sys.time()
[10:32:43.884]             {
[10:32:43.884]                 {
[10:32:43.884]                   {
[10:32:43.884]                     base::local({
[10:32:43.884]                       has_future <- base::requireNamespace("future", 
[10:32:43.884]                         quietly = TRUE)
[10:32:43.884]                       if (has_future) {
[10:32:43.884]                         ns <- base::getNamespace("future")
[10:32:43.884]                         version <- ns[[".package"]][["version"]]
[10:32:43.884]                         if (is.null(version)) 
[10:32:43.884]                           version <- utils::packageVersion("future")
[10:32:43.884]                       }
[10:32:43.884]                       else {
[10:32:43.884]                         version <- NULL
[10:32:43.884]                       }
[10:32:43.884]                       if (!has_future || version < "1.8.0") {
[10:32:43.884]                         info <- base::c(r_version = base::gsub("R version ", 
[10:32:43.884]                           "", base::R.version$version.string), 
[10:32:43.884]                           platform = base::sprintf("%s (%s-bit)", 
[10:32:43.884]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:43.884]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:43.884]                             "release", "version")], collapse = " "), 
[10:32:43.884]                           hostname = base::Sys.info()[["nodename"]])
[10:32:43.884]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:32:43.884]                           info)
[10:32:43.884]                         info <- base::paste(info, collapse = "; ")
[10:32:43.884]                         if (!has_future) {
[10:32:43.884]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:43.884]                             info)
[10:32:43.884]                         }
[10:32:43.884]                         else {
[10:32:43.884]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:43.884]                             info, version)
[10:32:43.884]                         }
[10:32:43.884]                         base::stop(msg)
[10:32:43.884]                       }
[10:32:43.884]                     })
[10:32:43.884]                   }
[10:32:43.884]                   ...future.strategy.old <- future::plan("list")
[10:32:43.884]                   options(future.plan = NULL)
[10:32:43.884]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:43.884]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:43.884]                 }
[10:32:43.884]                 ...future.workdir <- getwd()
[10:32:43.884]             }
[10:32:43.884]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:43.884]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:43.884]         }
[10:32:43.884]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:43.884]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:43.884]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:43.884]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:43.884]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:43.884]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:43.884]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:43.884]             base::names(...future.oldOptions))
[10:32:43.884]     }
[10:32:43.884]     if (FALSE) {
[10:32:43.884]     }
[10:32:43.884]     else {
[10:32:43.884]         if (TRUE) {
[10:32:43.884]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:43.884]                 open = "w")
[10:32:43.884]         }
[10:32:43.884]         else {
[10:32:43.884]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:43.884]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:43.884]         }
[10:32:43.884]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:43.884]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:43.884]             base::sink(type = "output", split = FALSE)
[10:32:43.884]             base::close(...future.stdout)
[10:32:43.884]         }, add = TRUE)
[10:32:43.884]     }
[10:32:43.884]     ...future.frame <- base::sys.nframe()
[10:32:43.884]     ...future.conditions <- base::list()
[10:32:43.884]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:43.884]     if (FALSE) {
[10:32:43.884]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:43.884]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:43.884]     }
[10:32:43.884]     ...future.result <- base::tryCatch({
[10:32:43.884]         base::withCallingHandlers({
[10:32:43.884]             ...future.value <- base::withVisible(base::local({
[10:32:43.884]                 2 * a
[10:32:43.884]             }))
[10:32:43.884]             future::FutureResult(value = ...future.value$value, 
[10:32:43.884]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:43.884]                   ...future.rng), globalenv = if (FALSE) 
[10:32:43.884]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:43.884]                     ...future.globalenv.names))
[10:32:43.884]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:43.884]         }, condition = base::local({
[10:32:43.884]             c <- base::c
[10:32:43.884]             inherits <- base::inherits
[10:32:43.884]             invokeRestart <- base::invokeRestart
[10:32:43.884]             length <- base::length
[10:32:43.884]             list <- base::list
[10:32:43.884]             seq.int <- base::seq.int
[10:32:43.884]             signalCondition <- base::signalCondition
[10:32:43.884]             sys.calls <- base::sys.calls
[10:32:43.884]             `[[` <- base::`[[`
[10:32:43.884]             `+` <- base::`+`
[10:32:43.884]             `<<-` <- base::`<<-`
[10:32:43.884]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:43.884]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:43.884]                   3L)]
[10:32:43.884]             }
[10:32:43.884]             function(cond) {
[10:32:43.884]                 is_error <- inherits(cond, "error")
[10:32:43.884]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:43.884]                   NULL)
[10:32:43.884]                 if (is_error) {
[10:32:43.884]                   sessionInformation <- function() {
[10:32:43.884]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:43.884]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:43.884]                       search = base::search(), system = base::Sys.info())
[10:32:43.884]                   }
[10:32:43.884]                   ...future.conditions[[length(...future.conditions) + 
[10:32:43.884]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:43.884]                     cond$call), session = sessionInformation(), 
[10:32:43.884]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:43.884]                   signalCondition(cond)
[10:32:43.884]                 }
[10:32:43.884]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:43.884]                 "immediateCondition"))) {
[10:32:43.884]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:43.884]                   ...future.conditions[[length(...future.conditions) + 
[10:32:43.884]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:43.884]                   if (TRUE && !signal) {
[10:32:43.884]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:43.884]                     {
[10:32:43.884]                       inherits <- base::inherits
[10:32:43.884]                       invokeRestart <- base::invokeRestart
[10:32:43.884]                       is.null <- base::is.null
[10:32:43.884]                       muffled <- FALSE
[10:32:43.884]                       if (inherits(cond, "message")) {
[10:32:43.884]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:43.884]                         if (muffled) 
[10:32:43.884]                           invokeRestart("muffleMessage")
[10:32:43.884]                       }
[10:32:43.884]                       else if (inherits(cond, "warning")) {
[10:32:43.884]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:43.884]                         if (muffled) 
[10:32:43.884]                           invokeRestart("muffleWarning")
[10:32:43.884]                       }
[10:32:43.884]                       else if (inherits(cond, "condition")) {
[10:32:43.884]                         if (!is.null(pattern)) {
[10:32:43.884]                           computeRestarts <- base::computeRestarts
[10:32:43.884]                           grepl <- base::grepl
[10:32:43.884]                           restarts <- computeRestarts(cond)
[10:32:43.884]                           for (restart in restarts) {
[10:32:43.884]                             name <- restart$name
[10:32:43.884]                             if (is.null(name)) 
[10:32:43.884]                               next
[10:32:43.884]                             if (!grepl(pattern, name)) 
[10:32:43.884]                               next
[10:32:43.884]                             invokeRestart(restart)
[10:32:43.884]                             muffled <- TRUE
[10:32:43.884]                             break
[10:32:43.884]                           }
[10:32:43.884]                         }
[10:32:43.884]                       }
[10:32:43.884]                       invisible(muffled)
[10:32:43.884]                     }
[10:32:43.884]                     muffleCondition(cond, pattern = "^muffle")
[10:32:43.884]                   }
[10:32:43.884]                 }
[10:32:43.884]                 else {
[10:32:43.884]                   if (TRUE) {
[10:32:43.884]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:43.884]                     {
[10:32:43.884]                       inherits <- base::inherits
[10:32:43.884]                       invokeRestart <- base::invokeRestart
[10:32:43.884]                       is.null <- base::is.null
[10:32:43.884]                       muffled <- FALSE
[10:32:43.884]                       if (inherits(cond, "message")) {
[10:32:43.884]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:43.884]                         if (muffled) 
[10:32:43.884]                           invokeRestart("muffleMessage")
[10:32:43.884]                       }
[10:32:43.884]                       else if (inherits(cond, "warning")) {
[10:32:43.884]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:43.884]                         if (muffled) 
[10:32:43.884]                           invokeRestart("muffleWarning")
[10:32:43.884]                       }
[10:32:43.884]                       else if (inherits(cond, "condition")) {
[10:32:43.884]                         if (!is.null(pattern)) {
[10:32:43.884]                           computeRestarts <- base::computeRestarts
[10:32:43.884]                           grepl <- base::grepl
[10:32:43.884]                           restarts <- computeRestarts(cond)
[10:32:43.884]                           for (restart in restarts) {
[10:32:43.884]                             name <- restart$name
[10:32:43.884]                             if (is.null(name)) 
[10:32:43.884]                               next
[10:32:43.884]                             if (!grepl(pattern, name)) 
[10:32:43.884]                               next
[10:32:43.884]                             invokeRestart(restart)
[10:32:43.884]                             muffled <- TRUE
[10:32:43.884]                             break
[10:32:43.884]                           }
[10:32:43.884]                         }
[10:32:43.884]                       }
[10:32:43.884]                       invisible(muffled)
[10:32:43.884]                     }
[10:32:43.884]                     muffleCondition(cond, pattern = "^muffle")
[10:32:43.884]                   }
[10:32:43.884]                 }
[10:32:43.884]             }
[10:32:43.884]         }))
[10:32:43.884]     }, error = function(ex) {
[10:32:43.884]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:43.884]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:43.884]                 ...future.rng), started = ...future.startTime, 
[10:32:43.884]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:43.884]             version = "1.8"), class = "FutureResult")
[10:32:43.884]     }, finally = {
[10:32:43.884]         if (!identical(...future.workdir, getwd())) 
[10:32:43.884]             setwd(...future.workdir)
[10:32:43.884]         {
[10:32:43.884]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:43.884]                 ...future.oldOptions$nwarnings <- NULL
[10:32:43.884]             }
[10:32:43.884]             base::options(...future.oldOptions)
[10:32:43.884]             if (.Platform$OS.type == "windows") {
[10:32:43.884]                 old_names <- names(...future.oldEnvVars)
[10:32:43.884]                 envs <- base::Sys.getenv()
[10:32:43.884]                 names <- names(envs)
[10:32:43.884]                 common <- intersect(names, old_names)
[10:32:43.884]                 added <- setdiff(names, old_names)
[10:32:43.884]                 removed <- setdiff(old_names, names)
[10:32:43.884]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:43.884]                   envs[common]]
[10:32:43.884]                 NAMES <- toupper(changed)
[10:32:43.884]                 args <- list()
[10:32:43.884]                 for (kk in seq_along(NAMES)) {
[10:32:43.884]                   name <- changed[[kk]]
[10:32:43.884]                   NAME <- NAMES[[kk]]
[10:32:43.884]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:43.884]                     next
[10:32:43.884]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:43.884]                 }
[10:32:43.884]                 NAMES <- toupper(added)
[10:32:43.884]                 for (kk in seq_along(NAMES)) {
[10:32:43.884]                   name <- added[[kk]]
[10:32:43.884]                   NAME <- NAMES[[kk]]
[10:32:43.884]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:43.884]                     next
[10:32:43.884]                   args[[name]] <- ""
[10:32:43.884]                 }
[10:32:43.884]                 NAMES <- toupper(removed)
[10:32:43.884]                 for (kk in seq_along(NAMES)) {
[10:32:43.884]                   name <- removed[[kk]]
[10:32:43.884]                   NAME <- NAMES[[kk]]
[10:32:43.884]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:43.884]                     next
[10:32:43.884]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:43.884]                 }
[10:32:43.884]                 if (length(args) > 0) 
[10:32:43.884]                   base::do.call(base::Sys.setenv, args = args)
[10:32:43.884]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:43.884]             }
[10:32:43.884]             else {
[10:32:43.884]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:43.884]             }
[10:32:43.884]             {
[10:32:43.884]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:43.884]                   0L) {
[10:32:43.884]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:43.884]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:43.884]                   base::options(opts)
[10:32:43.884]                 }
[10:32:43.884]                 {
[10:32:43.884]                   {
[10:32:43.884]                     NULL
[10:32:43.884]                     RNGkind("Mersenne-Twister")
[10:32:43.884]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:32:43.884]                       inherits = FALSE)
[10:32:43.884]                   }
[10:32:43.884]                   options(future.plan = NULL)
[10:32:43.884]                   if (is.na(NA_character_)) 
[10:32:43.884]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:43.884]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:43.884]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:43.884]                     .init = FALSE)
[10:32:43.884]                 }
[10:32:43.884]             }
[10:32:43.884]         }
[10:32:43.884]     })
[10:32:43.884]     if (TRUE) {
[10:32:43.884]         base::sink(type = "output", split = FALSE)
[10:32:43.884]         if (TRUE) {
[10:32:43.884]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:43.884]         }
[10:32:43.884]         else {
[10:32:43.884]             ...future.result["stdout"] <- base::list(NULL)
[10:32:43.884]         }
[10:32:43.884]         base::close(...future.stdout)
[10:32:43.884]         ...future.stdout <- NULL
[10:32:43.884]     }
[10:32:43.884]     ...future.result$conditions <- ...future.conditions
[10:32:43.884]     ...future.result$finished <- base::Sys.time()
[10:32:43.884]     ...future.result
[10:32:43.884] }
[10:32:43.885] assign_globals() ...
[10:32:43.886] List of 1
[10:32:43.886]  $ a: num 1
[10:32:43.886]  - attr(*, "where")=List of 1
[10:32:43.886]   ..$ a:<environment: R_EmptyEnv> 
[10:32:43.886]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:32:43.886]  - attr(*, "resolved")= logi FALSE
[10:32:43.886]  - attr(*, "total_size")= num 56
[10:32:43.886]  - attr(*, "already-done")= logi TRUE
[10:32:43.888] - copied ‘a’ to environment
[10:32:43.888] assign_globals() ... done
[10:32:43.888] plan(): Setting new future strategy stack:
[10:32:43.888] List of future strategies:
[10:32:43.888] 1. sequential:
[10:32:43.888]    - args: function (..., envir = parent.frame())
[10:32:43.888]    - tweaked: FALSE
[10:32:43.888]    - call: NULL
[10:32:43.889] plan(): nbrOfWorkers() = 1
[10:32:43.889] plan(): Setting new future strategy stack:
[10:32:43.889] List of future strategies:
[10:32:43.889] 1. sequential:
[10:32:43.889]    - args: function (..., envir = parent.frame())
[10:32:43.889]    - tweaked: FALSE
[10:32:43.889]    - call: plan(strategy)
[10:32:43.890] plan(): nbrOfWorkers() = 1
[10:32:43.890] SequentialFuture started (and completed)
[10:32:43.890] - Launch lazy future ... done
[10:32:43.890] run() for ‘SequentialFuture’ ... done
[10:32:43.890] getGlobalsAndPackages() ...
[10:32:43.890] Searching for globals...
[10:32:43.891] - globals found: [3] ‘{’, ‘*’, ‘a’
[10:32:43.891] Searching for globals ... DONE
[10:32:43.891] Resolving globals: FALSE
[10:32:43.892] The total size of the 1 globals is 56 bytes (56 bytes)
[10:32:43.892] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[10:32:43.892] - globals: [1] ‘a’
[10:32:43.892] 
[10:32:43.892] getGlobalsAndPackages() ... DONE
[10:32:43.892] run() for ‘Future’ ...
[10:32:43.892] - state: ‘created’
[10:32:43.893] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:32:43.893] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:32:43.893] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:32:43.893]   - Field: ‘label’
[10:32:43.893]   - Field: ‘local’
[10:32:43.893]   - Field: ‘owner’
[10:32:43.893]   - Field: ‘envir’
[10:32:43.893]   - Field: ‘packages’
[10:32:43.893]   - Field: ‘gc’
[10:32:43.894]   - Field: ‘conditions’
[10:32:43.894]   - Field: ‘expr’
[10:32:43.894]   - Field: ‘uuid’
[10:32:43.894]   - Field: ‘seed’
[10:32:43.894]   - Field: ‘version’
[10:32:43.894]   - Field: ‘result’
[10:32:43.894]   - Field: ‘asynchronous’
[10:32:43.894]   - Field: ‘calls’
[10:32:43.894]   - Field: ‘globals’
[10:32:43.894]   - Field: ‘stdout’
[10:32:43.894]   - Field: ‘earlySignal’
[10:32:43.894]   - Field: ‘lazy’
[10:32:43.895]   - Field: ‘state’
[10:32:43.895] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:32:43.895] - Launch lazy future ...
[10:32:43.895] Packages needed by the future expression (n = 0): <none>
[10:32:43.895] Packages needed by future strategies (n = 0): <none>
[10:32:43.895] {
[10:32:43.895]     {
[10:32:43.895]         {
[10:32:43.895]             ...future.startTime <- base::Sys.time()
[10:32:43.895]             {
[10:32:43.895]                 {
[10:32:43.895]                   {
[10:32:43.895]                     base::local({
[10:32:43.895]                       has_future <- base::requireNamespace("future", 
[10:32:43.895]                         quietly = TRUE)
[10:32:43.895]                       if (has_future) {
[10:32:43.895]                         ns <- base::getNamespace("future")
[10:32:43.895]                         version <- ns[[".package"]][["version"]]
[10:32:43.895]                         if (is.null(version)) 
[10:32:43.895]                           version <- utils::packageVersion("future")
[10:32:43.895]                       }
[10:32:43.895]                       else {
[10:32:43.895]                         version <- NULL
[10:32:43.895]                       }
[10:32:43.895]                       if (!has_future || version < "1.8.0") {
[10:32:43.895]                         info <- base::c(r_version = base::gsub("R version ", 
[10:32:43.895]                           "", base::R.version$version.string), 
[10:32:43.895]                           platform = base::sprintf("%s (%s-bit)", 
[10:32:43.895]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:43.895]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:43.895]                             "release", "version")], collapse = " "), 
[10:32:43.895]                           hostname = base::Sys.info()[["nodename"]])
[10:32:43.895]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:32:43.895]                           info)
[10:32:43.895]                         info <- base::paste(info, collapse = "; ")
[10:32:43.895]                         if (!has_future) {
[10:32:43.895]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:43.895]                             info)
[10:32:43.895]                         }
[10:32:43.895]                         else {
[10:32:43.895]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:43.895]                             info, version)
[10:32:43.895]                         }
[10:32:43.895]                         base::stop(msg)
[10:32:43.895]                       }
[10:32:43.895]                     })
[10:32:43.895]                   }
[10:32:43.895]                   ...future.strategy.old <- future::plan("list")
[10:32:43.895]                   options(future.plan = NULL)
[10:32:43.895]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:43.895]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:43.895]                 }
[10:32:43.895]                 ...future.workdir <- getwd()
[10:32:43.895]             }
[10:32:43.895]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:43.895]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:43.895]         }
[10:32:43.895]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:43.895]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:43.895]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:43.895]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:43.895]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:43.895]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:43.895]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:43.895]             base::names(...future.oldOptions))
[10:32:43.895]     }
[10:32:43.895]     if (FALSE) {
[10:32:43.895]     }
[10:32:43.895]     else {
[10:32:43.895]         if (TRUE) {
[10:32:43.895]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:43.895]                 open = "w")
[10:32:43.895]         }
[10:32:43.895]         else {
[10:32:43.895]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:43.895]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:43.895]         }
[10:32:43.895]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:43.895]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:43.895]             base::sink(type = "output", split = FALSE)
[10:32:43.895]             base::close(...future.stdout)
[10:32:43.895]         }, add = TRUE)
[10:32:43.895]     }
[10:32:43.895]     ...future.frame <- base::sys.nframe()
[10:32:43.895]     ...future.conditions <- base::list()
[10:32:43.895]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:43.895]     if (FALSE) {
[10:32:43.895]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:43.895]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:43.895]     }
[10:32:43.895]     ...future.result <- base::tryCatch({
[10:32:43.895]         base::withCallingHandlers({
[10:32:43.895]             ...future.value <- base::withVisible(base::local({
[10:32:43.895]                 2 * a
[10:32:43.895]             }))
[10:32:43.895]             future::FutureResult(value = ...future.value$value, 
[10:32:43.895]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:43.895]                   ...future.rng), globalenv = if (FALSE) 
[10:32:43.895]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:43.895]                     ...future.globalenv.names))
[10:32:43.895]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:43.895]         }, condition = base::local({
[10:32:43.895]             c <- base::c
[10:32:43.895]             inherits <- base::inherits
[10:32:43.895]             invokeRestart <- base::invokeRestart
[10:32:43.895]             length <- base::length
[10:32:43.895]             list <- base::list
[10:32:43.895]             seq.int <- base::seq.int
[10:32:43.895]             signalCondition <- base::signalCondition
[10:32:43.895]             sys.calls <- base::sys.calls
[10:32:43.895]             `[[` <- base::`[[`
[10:32:43.895]             `+` <- base::`+`
[10:32:43.895]             `<<-` <- base::`<<-`
[10:32:43.895]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:43.895]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:43.895]                   3L)]
[10:32:43.895]             }
[10:32:43.895]             function(cond) {
[10:32:43.895]                 is_error <- inherits(cond, "error")
[10:32:43.895]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:43.895]                   NULL)
[10:32:43.895]                 if (is_error) {
[10:32:43.895]                   sessionInformation <- function() {
[10:32:43.895]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:43.895]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:43.895]                       search = base::search(), system = base::Sys.info())
[10:32:43.895]                   }
[10:32:43.895]                   ...future.conditions[[length(...future.conditions) + 
[10:32:43.895]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:43.895]                     cond$call), session = sessionInformation(), 
[10:32:43.895]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:43.895]                   signalCondition(cond)
[10:32:43.895]                 }
[10:32:43.895]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:43.895]                 "immediateCondition"))) {
[10:32:43.895]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:43.895]                   ...future.conditions[[length(...future.conditions) + 
[10:32:43.895]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:43.895]                   if (TRUE && !signal) {
[10:32:43.895]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:43.895]                     {
[10:32:43.895]                       inherits <- base::inherits
[10:32:43.895]                       invokeRestart <- base::invokeRestart
[10:32:43.895]                       is.null <- base::is.null
[10:32:43.895]                       muffled <- FALSE
[10:32:43.895]                       if (inherits(cond, "message")) {
[10:32:43.895]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:43.895]                         if (muffled) 
[10:32:43.895]                           invokeRestart("muffleMessage")
[10:32:43.895]                       }
[10:32:43.895]                       else if (inherits(cond, "warning")) {
[10:32:43.895]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:43.895]                         if (muffled) 
[10:32:43.895]                           invokeRestart("muffleWarning")
[10:32:43.895]                       }
[10:32:43.895]                       else if (inherits(cond, "condition")) {
[10:32:43.895]                         if (!is.null(pattern)) {
[10:32:43.895]                           computeRestarts <- base::computeRestarts
[10:32:43.895]                           grepl <- base::grepl
[10:32:43.895]                           restarts <- computeRestarts(cond)
[10:32:43.895]                           for (restart in restarts) {
[10:32:43.895]                             name <- restart$name
[10:32:43.895]                             if (is.null(name)) 
[10:32:43.895]                               next
[10:32:43.895]                             if (!grepl(pattern, name)) 
[10:32:43.895]                               next
[10:32:43.895]                             invokeRestart(restart)
[10:32:43.895]                             muffled <- TRUE
[10:32:43.895]                             break
[10:32:43.895]                           }
[10:32:43.895]                         }
[10:32:43.895]                       }
[10:32:43.895]                       invisible(muffled)
[10:32:43.895]                     }
[10:32:43.895]                     muffleCondition(cond, pattern = "^muffle")
[10:32:43.895]                   }
[10:32:43.895]                 }
[10:32:43.895]                 else {
[10:32:43.895]                   if (TRUE) {
[10:32:43.895]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:43.895]                     {
[10:32:43.895]                       inherits <- base::inherits
[10:32:43.895]                       invokeRestart <- base::invokeRestart
[10:32:43.895]                       is.null <- base::is.null
[10:32:43.895]                       muffled <- FALSE
[10:32:43.895]                       if (inherits(cond, "message")) {
[10:32:43.895]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:43.895]                         if (muffled) 
[10:32:43.895]                           invokeRestart("muffleMessage")
[10:32:43.895]                       }
[10:32:43.895]                       else if (inherits(cond, "warning")) {
[10:32:43.895]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:43.895]                         if (muffled) 
[10:32:43.895]                           invokeRestart("muffleWarning")
[10:32:43.895]                       }
[10:32:43.895]                       else if (inherits(cond, "condition")) {
[10:32:43.895]                         if (!is.null(pattern)) {
[10:32:43.895]                           computeRestarts <- base::computeRestarts
[10:32:43.895]                           grepl <- base::grepl
[10:32:43.895]                           restarts <- computeRestarts(cond)
[10:32:43.895]                           for (restart in restarts) {
[10:32:43.895]                             name <- restart$name
[10:32:43.895]                             if (is.null(name)) 
[10:32:43.895]                               next
[10:32:43.895]                             if (!grepl(pattern, name)) 
[10:32:43.895]                               next
[10:32:43.895]                             invokeRestart(restart)
[10:32:43.895]                             muffled <- TRUE
[10:32:43.895]                             break
[10:32:43.895]                           }
[10:32:43.895]                         }
[10:32:43.895]                       }
[10:32:43.895]                       invisible(muffled)
[10:32:43.895]                     }
[10:32:43.895]                     muffleCondition(cond, pattern = "^muffle")
[10:32:43.895]                   }
[10:32:43.895]                 }
[10:32:43.895]             }
[10:32:43.895]         }))
[10:32:43.895]     }, error = function(ex) {
[10:32:43.895]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:43.895]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:43.895]                 ...future.rng), started = ...future.startTime, 
[10:32:43.895]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:43.895]             version = "1.8"), class = "FutureResult")
[10:32:43.895]     }, finally = {
[10:32:43.895]         if (!identical(...future.workdir, getwd())) 
[10:32:43.895]             setwd(...future.workdir)
[10:32:43.895]         {
[10:32:43.895]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:43.895]                 ...future.oldOptions$nwarnings <- NULL
[10:32:43.895]             }
[10:32:43.895]             base::options(...future.oldOptions)
[10:32:43.895]             if (.Platform$OS.type == "windows") {
[10:32:43.895]                 old_names <- names(...future.oldEnvVars)
[10:32:43.895]                 envs <- base::Sys.getenv()
[10:32:43.895]                 names <- names(envs)
[10:32:43.895]                 common <- intersect(names, old_names)
[10:32:43.895]                 added <- setdiff(names, old_names)
[10:32:43.895]                 removed <- setdiff(old_names, names)
[10:32:43.895]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:43.895]                   envs[common]]
[10:32:43.895]                 NAMES <- toupper(changed)
[10:32:43.895]                 args <- list()
[10:32:43.895]                 for (kk in seq_along(NAMES)) {
[10:32:43.895]                   name <- changed[[kk]]
[10:32:43.895]                   NAME <- NAMES[[kk]]
[10:32:43.895]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:43.895]                     next
[10:32:43.895]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:43.895]                 }
[10:32:43.895]                 NAMES <- toupper(added)
[10:32:43.895]                 for (kk in seq_along(NAMES)) {
[10:32:43.895]                   name <- added[[kk]]
[10:32:43.895]                   NAME <- NAMES[[kk]]
[10:32:43.895]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:43.895]                     next
[10:32:43.895]                   args[[name]] <- ""
[10:32:43.895]                 }
[10:32:43.895]                 NAMES <- toupper(removed)
[10:32:43.895]                 for (kk in seq_along(NAMES)) {
[10:32:43.895]                   name <- removed[[kk]]
[10:32:43.895]                   NAME <- NAMES[[kk]]
[10:32:43.895]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:43.895]                     next
[10:32:43.895]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:43.895]                 }
[10:32:43.895]                 if (length(args) > 0) 
[10:32:43.895]                   base::do.call(base::Sys.setenv, args = args)
[10:32:43.895]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:43.895]             }
[10:32:43.895]             else {
[10:32:43.895]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:43.895]             }
[10:32:43.895]             {
[10:32:43.895]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:43.895]                   0L) {
[10:32:43.895]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:43.895]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:43.895]                   base::options(opts)
[10:32:43.895]                 }
[10:32:43.895]                 {
[10:32:43.895]                   {
[10:32:43.895]                     NULL
[10:32:43.895]                     RNGkind("Mersenne-Twister")
[10:32:43.895]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:32:43.895]                       inherits = FALSE)
[10:32:43.895]                   }
[10:32:43.895]                   options(future.plan = NULL)
[10:32:43.895]                   if (is.na(NA_character_)) 
[10:32:43.895]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:43.895]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:43.895]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:43.895]                     .init = FALSE)
[10:32:43.895]                 }
[10:32:43.895]             }
[10:32:43.895]         }
[10:32:43.895]     })
[10:32:43.895]     if (TRUE) {
[10:32:43.895]         base::sink(type = "output", split = FALSE)
[10:32:43.895]         if (TRUE) {
[10:32:43.895]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:43.895]         }
[10:32:43.895]         else {
[10:32:43.895]             ...future.result["stdout"] <- base::list(NULL)
[10:32:43.895]         }
[10:32:43.895]         base::close(...future.stdout)
[10:32:43.895]         ...future.stdout <- NULL
[10:32:43.895]     }
[10:32:43.895]     ...future.result$conditions <- ...future.conditions
[10:32:43.895]     ...future.result$finished <- base::Sys.time()
[10:32:43.895]     ...future.result
[10:32:43.895] }
[10:32:43.897] assign_globals() ...
[10:32:43.897] List of 1
[10:32:43.897]  $ a: num 1
[10:32:43.897]  - attr(*, "where")=List of 1
[10:32:43.897]   ..$ a:<environment: R_EmptyEnv> 
[10:32:43.897]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:32:43.897]  - attr(*, "resolved")= logi FALSE
[10:32:43.897]  - attr(*, "total_size")= num 56
[10:32:43.897]  - attr(*, "already-done")= logi TRUE
[10:32:43.899] - copied ‘a’ to environment
[10:32:43.899] assign_globals() ... done
[10:32:43.900] plan(): Setting new future strategy stack:
[10:32:43.900] List of future strategies:
[10:32:43.900] 1. sequential:
[10:32:43.900]    - args: function (..., envir = parent.frame())
[10:32:43.900]    - tweaked: FALSE
[10:32:43.900]    - call: NULL
[10:32:43.900] plan(): nbrOfWorkers() = 1
[10:32:43.901] plan(): Setting new future strategy stack:
[10:32:43.901] List of future strategies:
[10:32:43.901] 1. sequential:
[10:32:43.901]    - args: function (..., envir = parent.frame())
[10:32:43.901]    - tweaked: FALSE
[10:32:43.901]    - call: plan(strategy)
[10:32:43.901] plan(): nbrOfWorkers() = 1
[10:32:43.901] SequentialFuture started (and completed)
[10:32:43.901] - Launch lazy future ... done
[10:32:43.901] run() for ‘SequentialFuture’ ... done
*** futureAssign() with ‘sequential’ futures ... DONE
Testing with 1 cores ... DONE
Testing with 2 cores ...
*** futureAssign() with ‘multicore’ futures ...
[10:32:43.907] plan(): Setting new future strategy stack:
[10:32:43.907] List of future strategies:
[10:32:43.907] 1. multicore:
[10:32:43.907]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:32:43.907]    - tweaked: FALSE
[10:32:43.907]    - call: plan(strategy)
[10:32:43.911] plan(): nbrOfWorkers() = 2
[10:32:43.911] getGlobalsAndPackages() ...
[10:32:43.911] Searching for globals...
[10:32:43.912] - globals found: [1] ‘{’
[10:32:43.912] Searching for globals ... DONE
[10:32:43.912] Resolving globals: FALSE
[10:32:43.912] 
[10:32:43.912] 
[10:32:43.913] getGlobalsAndPackages() ... DONE
[10:32:43.913] run() for ‘Future’ ...
[10:32:43.913] - state: ‘created’
[10:32:43.913] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:32:43.916] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:32:43.916] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:32:43.916]   - Field: ‘label’
[10:32:43.917]   - Field: ‘local’
[10:32:43.917]   - Field: ‘owner’
[10:32:43.917]   - Field: ‘envir’
[10:32:43.917]   - Field: ‘workers’
[10:32:43.917]   - Field: ‘packages’
[10:32:43.917]   - Field: ‘gc’
[10:32:43.917]   - Field: ‘job’
[10:32:43.917]   - Field: ‘conditions’
[10:32:43.917]   - Field: ‘expr’
[10:32:43.917]   - Field: ‘uuid’
[10:32:43.917]   - Field: ‘seed’
[10:32:43.918]   - Field: ‘version’
[10:32:43.918]   - Field: ‘result’
[10:32:43.918]   - Field: ‘asynchronous’
[10:32:43.918]   - Field: ‘calls’
[10:32:43.918]   - Field: ‘globals’
[10:32:43.918]   - Field: ‘stdout’
[10:32:43.918]   - Field: ‘earlySignal’
[10:32:43.918]   - Field: ‘lazy’
[10:32:43.918]   - Field: ‘state’
[10:32:43.918] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:32:43.918] - Launch lazy future ...
[10:32:43.919] Packages needed by the future expression (n = 0): <none>
[10:32:43.919] Packages needed by future strategies (n = 0): <none>
[10:32:43.920] {
[10:32:43.920]     {
[10:32:43.920]         {
[10:32:43.920]             ...future.startTime <- base::Sys.time()
[10:32:43.920]             {
[10:32:43.920]                 {
[10:32:43.920]                   {
[10:32:43.920]                     {
[10:32:43.920]                       base::local({
[10:32:43.920]                         has_future <- base::requireNamespace("future", 
[10:32:43.920]                           quietly = TRUE)
[10:32:43.920]                         if (has_future) {
[10:32:43.920]                           ns <- base::getNamespace("future")
[10:32:43.920]                           version <- ns[[".package"]][["version"]]
[10:32:43.920]                           if (is.null(version)) 
[10:32:43.920]                             version <- utils::packageVersion("future")
[10:32:43.920]                         }
[10:32:43.920]                         else {
[10:32:43.920]                           version <- NULL
[10:32:43.920]                         }
[10:32:43.920]                         if (!has_future || version < "1.8.0") {
[10:32:43.920]                           info <- base::c(r_version = base::gsub("R version ", 
[10:32:43.920]                             "", base::R.version$version.string), 
[10:32:43.920]                             platform = base::sprintf("%s (%s-bit)", 
[10:32:43.920]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:43.920]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:43.920]                               "release", "version")], collapse = " "), 
[10:32:43.920]                             hostname = base::Sys.info()[["nodename"]])
[10:32:43.920]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:32:43.920]                             info)
[10:32:43.920]                           info <- base::paste(info, collapse = "; ")
[10:32:43.920]                           if (!has_future) {
[10:32:43.920]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:43.920]                               info)
[10:32:43.920]                           }
[10:32:43.920]                           else {
[10:32:43.920]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:43.920]                               info, version)
[10:32:43.920]                           }
[10:32:43.920]                           base::stop(msg)
[10:32:43.920]                         }
[10:32:43.920]                       })
[10:32:43.920]                     }
[10:32:43.920]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:32:43.920]                     base::options(mc.cores = 1L)
[10:32:43.920]                   }
[10:32:43.920]                   ...future.strategy.old <- future::plan("list")
[10:32:43.920]                   options(future.plan = NULL)
[10:32:43.920]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:43.920]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:43.920]                 }
[10:32:43.920]                 ...future.workdir <- getwd()
[10:32:43.920]             }
[10:32:43.920]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:43.920]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:43.920]         }
[10:32:43.920]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:43.920]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:43.920]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:43.920]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:43.920]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:43.920]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:43.920]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:43.920]             base::names(...future.oldOptions))
[10:32:43.920]     }
[10:32:43.920]     if (FALSE) {
[10:32:43.920]     }
[10:32:43.920]     else {
[10:32:43.920]         if (TRUE) {
[10:32:43.920]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:43.920]                 open = "w")
[10:32:43.920]         }
[10:32:43.920]         else {
[10:32:43.920]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:43.920]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:43.920]         }
[10:32:43.920]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:43.920]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:43.920]             base::sink(type = "output", split = FALSE)
[10:32:43.920]             base::close(...future.stdout)
[10:32:43.920]         }, add = TRUE)
[10:32:43.920]     }
[10:32:43.920]     ...future.frame <- base::sys.nframe()
[10:32:43.920]     ...future.conditions <- base::list()
[10:32:43.920]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:43.920]     if (FALSE) {
[10:32:43.920]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:43.920]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:43.920]     }
[10:32:43.920]     ...future.result <- base::tryCatch({
[10:32:43.920]         base::withCallingHandlers({
[10:32:43.920]             ...future.value <- base::withVisible(base::local({
[10:32:43.920]                 withCallingHandlers({
[10:32:43.920]                   {
[10:32:43.920]                     2
[10:32:43.920]                   }
[10:32:43.920]                 }, immediateCondition = function(cond) {
[10:32:43.920]                   save_rds <- function (object, pathname, ...) 
[10:32:43.920]                   {
[10:32:43.920]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:32:43.920]                     if (file_test("-f", pathname_tmp)) {
[10:32:43.920]                       fi_tmp <- file.info(pathname_tmp)
[10:32:43.920]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:32:43.920]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:32:43.920]                         fi_tmp[["mtime"]])
[10:32:43.920]                     }
[10:32:43.920]                     tryCatch({
[10:32:43.920]                       saveRDS(object, file = pathname_tmp, ...)
[10:32:43.920]                     }, error = function(ex) {
[10:32:43.920]                       msg <- conditionMessage(ex)
[10:32:43.920]                       fi_tmp <- file.info(pathname_tmp)
[10:32:43.920]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:32:43.920]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:32:43.920]                         fi_tmp[["mtime"]], msg)
[10:32:43.920]                       ex$message <- msg
[10:32:43.920]                       stop(ex)
[10:32:43.920]                     })
[10:32:43.920]                     stopifnot(file_test("-f", pathname_tmp))
[10:32:43.920]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:32:43.920]                     if (!res || file_test("-f", pathname_tmp)) {
[10:32:43.920]                       fi_tmp <- file.info(pathname_tmp)
[10:32:43.920]                       fi <- file.info(pathname)
[10:32:43.920]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:32:43.920]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:32:43.920]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:32:43.920]                         fi[["size"]], fi[["mtime"]])
[10:32:43.920]                       stop(msg)
[10:32:43.920]                     }
[10:32:43.920]                     invisible(pathname)
[10:32:43.920]                   }
[10:32:43.920]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:32:43.920]                     rootPath = tempdir()) 
[10:32:43.920]                   {
[10:32:43.920]                     obj <- list(time = Sys.time(), condition = cond)
[10:32:43.920]                     file <- tempfile(pattern = class(cond)[1], 
[10:32:43.920]                       tmpdir = path, fileext = ".rds")
[10:32:43.920]                     save_rds(obj, file)
[10:32:43.920]                   }
[10:32:43.920]                   saveImmediateCondition(cond, path = "/tmp/RtmpFz1RKJ/.future/immediateConditions")
[10:32:43.920]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:43.920]                   {
[10:32:43.920]                     inherits <- base::inherits
[10:32:43.920]                     invokeRestart <- base::invokeRestart
[10:32:43.920]                     is.null <- base::is.null
[10:32:43.920]                     muffled <- FALSE
[10:32:43.920]                     if (inherits(cond, "message")) {
[10:32:43.920]                       muffled <- grepl(pattern, "muffleMessage")
[10:32:43.920]                       if (muffled) 
[10:32:43.920]                         invokeRestart("muffleMessage")
[10:32:43.920]                     }
[10:32:43.920]                     else if (inherits(cond, "warning")) {
[10:32:43.920]                       muffled <- grepl(pattern, "muffleWarning")
[10:32:43.920]                       if (muffled) 
[10:32:43.920]                         invokeRestart("muffleWarning")
[10:32:43.920]                     }
[10:32:43.920]                     else if (inherits(cond, "condition")) {
[10:32:43.920]                       if (!is.null(pattern)) {
[10:32:43.920]                         computeRestarts <- base::computeRestarts
[10:32:43.920]                         grepl <- base::grepl
[10:32:43.920]                         restarts <- computeRestarts(cond)
[10:32:43.920]                         for (restart in restarts) {
[10:32:43.920]                           name <- restart$name
[10:32:43.920]                           if (is.null(name)) 
[10:32:43.920]                             next
[10:32:43.920]                           if (!grepl(pattern, name)) 
[10:32:43.920]                             next
[10:32:43.920]                           invokeRestart(restart)
[10:32:43.920]                           muffled <- TRUE
[10:32:43.920]                           break
[10:32:43.920]                         }
[10:32:43.920]                       }
[10:32:43.920]                     }
[10:32:43.920]                     invisible(muffled)
[10:32:43.920]                   }
[10:32:43.920]                   muffleCondition(cond)
[10:32:43.920]                 })
[10:32:43.920]             }))
[10:32:43.920]             future::FutureResult(value = ...future.value$value, 
[10:32:43.920]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:43.920]                   ...future.rng), globalenv = if (FALSE) 
[10:32:43.920]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:43.920]                     ...future.globalenv.names))
[10:32:43.920]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:43.920]         }, condition = base::local({
[10:32:43.920]             c <- base::c
[10:32:43.920]             inherits <- base::inherits
[10:32:43.920]             invokeRestart <- base::invokeRestart
[10:32:43.920]             length <- base::length
[10:32:43.920]             list <- base::list
[10:32:43.920]             seq.int <- base::seq.int
[10:32:43.920]             signalCondition <- base::signalCondition
[10:32:43.920]             sys.calls <- base::sys.calls
[10:32:43.920]             `[[` <- base::`[[`
[10:32:43.920]             `+` <- base::`+`
[10:32:43.920]             `<<-` <- base::`<<-`
[10:32:43.920]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:43.920]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:43.920]                   3L)]
[10:32:43.920]             }
[10:32:43.920]             function(cond) {
[10:32:43.920]                 is_error <- inherits(cond, "error")
[10:32:43.920]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:43.920]                   NULL)
[10:32:43.920]                 if (is_error) {
[10:32:43.920]                   sessionInformation <- function() {
[10:32:43.920]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:43.920]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:43.920]                       search = base::search(), system = base::Sys.info())
[10:32:43.920]                   }
[10:32:43.920]                   ...future.conditions[[length(...future.conditions) + 
[10:32:43.920]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:43.920]                     cond$call), session = sessionInformation(), 
[10:32:43.920]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:43.920]                   signalCondition(cond)
[10:32:43.920]                 }
[10:32:43.920]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:43.920]                 "immediateCondition"))) {
[10:32:43.920]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:43.920]                   ...future.conditions[[length(...future.conditions) + 
[10:32:43.920]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:43.920]                   if (TRUE && !signal) {
[10:32:43.920]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:43.920]                     {
[10:32:43.920]                       inherits <- base::inherits
[10:32:43.920]                       invokeRestart <- base::invokeRestart
[10:32:43.920]                       is.null <- base::is.null
[10:32:43.920]                       muffled <- FALSE
[10:32:43.920]                       if (inherits(cond, "message")) {
[10:32:43.920]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:43.920]                         if (muffled) 
[10:32:43.920]                           invokeRestart("muffleMessage")
[10:32:43.920]                       }
[10:32:43.920]                       else if (inherits(cond, "warning")) {
[10:32:43.920]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:43.920]                         if (muffled) 
[10:32:43.920]                           invokeRestart("muffleWarning")
[10:32:43.920]                       }
[10:32:43.920]                       else if (inherits(cond, "condition")) {
[10:32:43.920]                         if (!is.null(pattern)) {
[10:32:43.920]                           computeRestarts <- base::computeRestarts
[10:32:43.920]                           grepl <- base::grepl
[10:32:43.920]                           restarts <- computeRestarts(cond)
[10:32:43.920]                           for (restart in restarts) {
[10:32:43.920]                             name <- restart$name
[10:32:43.920]                             if (is.null(name)) 
[10:32:43.920]                               next
[10:32:43.920]                             if (!grepl(pattern, name)) 
[10:32:43.920]                               next
[10:32:43.920]                             invokeRestart(restart)
[10:32:43.920]                             muffled <- TRUE
[10:32:43.920]                             break
[10:32:43.920]                           }
[10:32:43.920]                         }
[10:32:43.920]                       }
[10:32:43.920]                       invisible(muffled)
[10:32:43.920]                     }
[10:32:43.920]                     muffleCondition(cond, pattern = "^muffle")
[10:32:43.920]                   }
[10:32:43.920]                 }
[10:32:43.920]                 else {
[10:32:43.920]                   if (TRUE) {
[10:32:43.920]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:43.920]                     {
[10:32:43.920]                       inherits <- base::inherits
[10:32:43.920]                       invokeRestart <- base::invokeRestart
[10:32:43.920]                       is.null <- base::is.null
[10:32:43.920]                       muffled <- FALSE
[10:32:43.920]                       if (inherits(cond, "message")) {
[10:32:43.920]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:43.920]                         if (muffled) 
[10:32:43.920]                           invokeRestart("muffleMessage")
[10:32:43.920]                       }
[10:32:43.920]                       else if (inherits(cond, "warning")) {
[10:32:43.920]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:43.920]                         if (muffled) 
[10:32:43.920]                           invokeRestart("muffleWarning")
[10:32:43.920]                       }
[10:32:43.920]                       else if (inherits(cond, "condition")) {
[10:32:43.920]                         if (!is.null(pattern)) {
[10:32:43.920]                           computeRestarts <- base::computeRestarts
[10:32:43.920]                           grepl <- base::grepl
[10:32:43.920]                           restarts <- computeRestarts(cond)
[10:32:43.920]                           for (restart in restarts) {
[10:32:43.920]                             name <- restart$name
[10:32:43.920]                             if (is.null(name)) 
[10:32:43.920]                               next
[10:32:43.920]                             if (!grepl(pattern, name)) 
[10:32:43.920]                               next
[10:32:43.920]                             invokeRestart(restart)
[10:32:43.920]                             muffled <- TRUE
[10:32:43.920]                             break
[10:32:43.920]                           }
[10:32:43.920]                         }
[10:32:43.920]                       }
[10:32:43.920]                       invisible(muffled)
[10:32:43.920]                     }
[10:32:43.920]                     muffleCondition(cond, pattern = "^muffle")
[10:32:43.920]                   }
[10:32:43.920]                 }
[10:32:43.920]             }
[10:32:43.920]         }))
[10:32:43.920]     }, error = function(ex) {
[10:32:43.920]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:43.920]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:43.920]                 ...future.rng), started = ...future.startTime, 
[10:32:43.920]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:43.920]             version = "1.8"), class = "FutureResult")
[10:32:43.920]     }, finally = {
[10:32:43.920]         if (!identical(...future.workdir, getwd())) 
[10:32:43.920]             setwd(...future.workdir)
[10:32:43.920]         {
[10:32:43.920]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:43.920]                 ...future.oldOptions$nwarnings <- NULL
[10:32:43.920]             }
[10:32:43.920]             base::options(...future.oldOptions)
[10:32:43.920]             if (.Platform$OS.type == "windows") {
[10:32:43.920]                 old_names <- names(...future.oldEnvVars)
[10:32:43.920]                 envs <- base::Sys.getenv()
[10:32:43.920]                 names <- names(envs)
[10:32:43.920]                 common <- intersect(names, old_names)
[10:32:43.920]                 added <- setdiff(names, old_names)
[10:32:43.920]                 removed <- setdiff(old_names, names)
[10:32:43.920]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:43.920]                   envs[common]]
[10:32:43.920]                 NAMES <- toupper(changed)
[10:32:43.920]                 args <- list()
[10:32:43.920]                 for (kk in seq_along(NAMES)) {
[10:32:43.920]                   name <- changed[[kk]]
[10:32:43.920]                   NAME <- NAMES[[kk]]
[10:32:43.920]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:43.920]                     next
[10:32:43.920]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:43.920]                 }
[10:32:43.920]                 NAMES <- toupper(added)
[10:32:43.920]                 for (kk in seq_along(NAMES)) {
[10:32:43.920]                   name <- added[[kk]]
[10:32:43.920]                   NAME <- NAMES[[kk]]
[10:32:43.920]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:43.920]                     next
[10:32:43.920]                   args[[name]] <- ""
[10:32:43.920]                 }
[10:32:43.920]                 NAMES <- toupper(removed)
[10:32:43.920]                 for (kk in seq_along(NAMES)) {
[10:32:43.920]                   name <- removed[[kk]]
[10:32:43.920]                   NAME <- NAMES[[kk]]
[10:32:43.920]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:43.920]                     next
[10:32:43.920]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:43.920]                 }
[10:32:43.920]                 if (length(args) > 0) 
[10:32:43.920]                   base::do.call(base::Sys.setenv, args = args)
[10:32:43.920]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:43.920]             }
[10:32:43.920]             else {
[10:32:43.920]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:43.920]             }
[10:32:43.920]             {
[10:32:43.920]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:43.920]                   0L) {
[10:32:43.920]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:43.920]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:43.920]                   base::options(opts)
[10:32:43.920]                 }
[10:32:43.920]                 {
[10:32:43.920]                   {
[10:32:43.920]                     base::options(mc.cores = ...future.mc.cores.old)
[10:32:43.920]                     NULL
[10:32:43.920]                   }
[10:32:43.920]                   options(future.plan = NULL)
[10:32:43.920]                   if (is.na(NA_character_)) 
[10:32:43.920]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:43.920]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:43.920]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:43.920]                     .init = FALSE)
[10:32:43.920]                 }
[10:32:43.920]             }
[10:32:43.920]         }
[10:32:43.920]     })
[10:32:43.920]     if (TRUE) {
[10:32:43.920]         base::sink(type = "output", split = FALSE)
[10:32:43.920]         if (TRUE) {
[10:32:43.920]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:43.920]         }
[10:32:43.920]         else {
[10:32:43.920]             ...future.result["stdout"] <- base::list(NULL)
[10:32:43.920]         }
[10:32:43.920]         base::close(...future.stdout)
[10:32:43.920]         ...future.stdout <- NULL
[10:32:43.920]     }
[10:32:43.920]     ...future.result$conditions <- ...future.conditions
[10:32:43.920]     ...future.result$finished <- base::Sys.time()
[10:32:43.920]     ...future.result
[10:32:43.920] }
[10:32:43.922] requestCore(): workers = 2
[10:32:43.925] MulticoreFuture started
[10:32:43.925] - Launch lazy future ... done
[10:32:43.925] run() for ‘MulticoreFuture’ ... done
[10:32:43.926] plan(): Setting new future strategy stack:
[10:32:43.926] getGlobalsAndPackages() ...
[10:32:43.926] Searching for globals...
[10:32:43.926] List of future strategies:
[10:32:43.926] 1. sequential:
[10:32:43.926]    - args: function (..., envir = parent.frame())
[10:32:43.926]    - tweaked: FALSE
[10:32:43.926]    - call: NULL
[10:32:43.927] plan(): nbrOfWorkers() = 1
[10:32:43.928] - globals found: [1] ‘{’
[10:32:43.928] Searching for globals ... DONE
[10:32:43.928] plan(): Setting new future strategy stack:
[10:32:43.928] Resolving globals: FALSE
[10:32:43.928] List of future strategies:
[10:32:43.928] 1. multicore:
[10:32:43.928]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:32:43.928]    - tweaked: FALSE
[10:32:43.928]    - call: plan(strategy)
[10:32:43.929] 
[10:32:43.929] 
[10:32:43.929] getGlobalsAndPackages() ... DONE
[10:32:43.930] run() for ‘Future’ ...
[10:32:43.930] - state: ‘created’
[10:32:43.930] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:32:43.933] plan(): nbrOfWorkers() = 2
[10:32:43.935] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:32:43.935] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:32:43.935]   - Field: ‘label’
[10:32:43.935]   - Field: ‘local’
[10:32:43.935]   - Field: ‘owner’
[10:32:43.935]   - Field: ‘envir’
[10:32:43.936]   - Field: ‘workers’
[10:32:43.936]   - Field: ‘packages’
[10:32:43.936]   - Field: ‘gc’
[10:32:43.936]   - Field: ‘job’
[10:32:43.936]   - Field: ‘conditions’
[10:32:43.936]   - Field: ‘expr’
[10:32:43.936]   - Field: ‘uuid’
[10:32:43.936]   - Field: ‘seed’
[10:32:43.937]   - Field: ‘version’
[10:32:43.937]   - Field: ‘result’
[10:32:43.937]   - Field: ‘asynchronous’
[10:32:43.937]   - Field: ‘calls’
[10:32:43.937]   - Field: ‘globals’
[10:32:43.937]   - Field: ‘stdout’
[10:32:43.938]   - Field: ‘earlySignal’
[10:32:43.938]   - Field: ‘lazy’
[10:32:43.938]   - Field: ‘state’
[10:32:43.938] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:32:43.938] - Launch lazy future ...
[10:32:43.939] Packages needed by the future expression (n = 0): <none>
[10:32:43.939] Packages needed by future strategies (n = 0): <none>
[10:32:43.939] {
[10:32:43.939]     {
[10:32:43.939]         {
[10:32:43.939]             ...future.startTime <- base::Sys.time()
[10:32:43.939]             {
[10:32:43.939]                 {
[10:32:43.939]                   {
[10:32:43.939]                     {
[10:32:43.939]                       base::local({
[10:32:43.939]                         has_future <- base::requireNamespace("future", 
[10:32:43.939]                           quietly = TRUE)
[10:32:43.939]                         if (has_future) {
[10:32:43.939]                           ns <- base::getNamespace("future")
[10:32:43.939]                           version <- ns[[".package"]][["version"]]
[10:32:43.939]                           if (is.null(version)) 
[10:32:43.939]                             version <- utils::packageVersion("future")
[10:32:43.939]                         }
[10:32:43.939]                         else {
[10:32:43.939]                           version <- NULL
[10:32:43.939]                         }
[10:32:43.939]                         if (!has_future || version < "1.8.0") {
[10:32:43.939]                           info <- base::c(r_version = base::gsub("R version ", 
[10:32:43.939]                             "", base::R.version$version.string), 
[10:32:43.939]                             platform = base::sprintf("%s (%s-bit)", 
[10:32:43.939]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:43.939]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:43.939]                               "release", "version")], collapse = " "), 
[10:32:43.939]                             hostname = base::Sys.info()[["nodename"]])
[10:32:43.939]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:32:43.939]                             info)
[10:32:43.939]                           info <- base::paste(info, collapse = "; ")
[10:32:43.939]                           if (!has_future) {
[10:32:43.939]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:43.939]                               info)
[10:32:43.939]                           }
[10:32:43.939]                           else {
[10:32:43.939]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:43.939]                               info, version)
[10:32:43.939]                           }
[10:32:43.939]                           base::stop(msg)
[10:32:43.939]                         }
[10:32:43.939]                       })
[10:32:43.939]                     }
[10:32:43.939]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:32:43.939]                     base::options(mc.cores = 1L)
[10:32:43.939]                   }
[10:32:43.939]                   ...future.strategy.old <- future::plan("list")
[10:32:43.939]                   options(future.plan = NULL)
[10:32:43.939]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:43.939]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:43.939]                 }
[10:32:43.939]                 ...future.workdir <- getwd()
[10:32:43.939]             }
[10:32:43.939]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:43.939]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:43.939]         }
[10:32:43.939]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:43.939]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:43.939]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:43.939]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:43.939]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:43.939]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:43.939]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:43.939]             base::names(...future.oldOptions))
[10:32:43.939]     }
[10:32:43.939]     if (FALSE) {
[10:32:43.939]     }
[10:32:43.939]     else {
[10:32:43.939]         if (TRUE) {
[10:32:43.939]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:43.939]                 open = "w")
[10:32:43.939]         }
[10:32:43.939]         else {
[10:32:43.939]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:43.939]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:43.939]         }
[10:32:43.939]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:43.939]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:43.939]             base::sink(type = "output", split = FALSE)
[10:32:43.939]             base::close(...future.stdout)
[10:32:43.939]         }, add = TRUE)
[10:32:43.939]     }
[10:32:43.939]     ...future.frame <- base::sys.nframe()
[10:32:43.939]     ...future.conditions <- base::list()
[10:32:43.939]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:43.939]     if (FALSE) {
[10:32:43.939]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:43.939]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:43.939]     }
[10:32:43.939]     ...future.result <- base::tryCatch({
[10:32:43.939]         base::withCallingHandlers({
[10:32:43.939]             ...future.value <- base::withVisible(base::local({
[10:32:43.939]                 withCallingHandlers({
[10:32:43.939]                   {
[10:32:43.939]                     4
[10:32:43.939]                   }
[10:32:43.939]                 }, immediateCondition = function(cond) {
[10:32:43.939]                   save_rds <- function (object, pathname, ...) 
[10:32:43.939]                   {
[10:32:43.939]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:32:43.939]                     if (file_test("-f", pathname_tmp)) {
[10:32:43.939]                       fi_tmp <- file.info(pathname_tmp)
[10:32:43.939]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:32:43.939]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:32:43.939]                         fi_tmp[["mtime"]])
[10:32:43.939]                     }
[10:32:43.939]                     tryCatch({
[10:32:43.939]                       saveRDS(object, file = pathname_tmp, ...)
[10:32:43.939]                     }, error = function(ex) {
[10:32:43.939]                       msg <- conditionMessage(ex)
[10:32:43.939]                       fi_tmp <- file.info(pathname_tmp)
[10:32:43.939]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:32:43.939]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:32:43.939]                         fi_tmp[["mtime"]], msg)
[10:32:43.939]                       ex$message <- msg
[10:32:43.939]                       stop(ex)
[10:32:43.939]                     })
[10:32:43.939]                     stopifnot(file_test("-f", pathname_tmp))
[10:32:43.939]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:32:43.939]                     if (!res || file_test("-f", pathname_tmp)) {
[10:32:43.939]                       fi_tmp <- file.info(pathname_tmp)
[10:32:43.939]                       fi <- file.info(pathname)
[10:32:43.939]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:32:43.939]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:32:43.939]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:32:43.939]                         fi[["size"]], fi[["mtime"]])
[10:32:43.939]                       stop(msg)
[10:32:43.939]                     }
[10:32:43.939]                     invisible(pathname)
[10:32:43.939]                   }
[10:32:43.939]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:32:43.939]                     rootPath = tempdir()) 
[10:32:43.939]                   {
[10:32:43.939]                     obj <- list(time = Sys.time(), condition = cond)
[10:32:43.939]                     file <- tempfile(pattern = class(cond)[1], 
[10:32:43.939]                       tmpdir = path, fileext = ".rds")
[10:32:43.939]                     save_rds(obj, file)
[10:32:43.939]                   }
[10:32:43.939]                   saveImmediateCondition(cond, path = "/tmp/RtmpFz1RKJ/.future/immediateConditions")
[10:32:43.939]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:43.939]                   {
[10:32:43.939]                     inherits <- base::inherits
[10:32:43.939]                     invokeRestart <- base::invokeRestart
[10:32:43.939]                     is.null <- base::is.null
[10:32:43.939]                     muffled <- FALSE
[10:32:43.939]                     if (inherits(cond, "message")) {
[10:32:43.939]                       muffled <- grepl(pattern, "muffleMessage")
[10:32:43.939]                       if (muffled) 
[10:32:43.939]                         invokeRestart("muffleMessage")
[10:32:43.939]                     }
[10:32:43.939]                     else if (inherits(cond, "warning")) {
[10:32:43.939]                       muffled <- grepl(pattern, "muffleWarning")
[10:32:43.939]                       if (muffled) 
[10:32:43.939]                         invokeRestart("muffleWarning")
[10:32:43.939]                     }
[10:32:43.939]                     else if (inherits(cond, "condition")) {
[10:32:43.939]                       if (!is.null(pattern)) {
[10:32:43.939]                         computeRestarts <- base::computeRestarts
[10:32:43.939]                         grepl <- base::grepl
[10:32:43.939]                         restarts <- computeRestarts(cond)
[10:32:43.939]                         for (restart in restarts) {
[10:32:43.939]                           name <- restart$name
[10:32:43.939]                           if (is.null(name)) 
[10:32:43.939]                             next
[10:32:43.939]                           if (!grepl(pattern, name)) 
[10:32:43.939]                             next
[10:32:43.939]                           invokeRestart(restart)
[10:32:43.939]                           muffled <- TRUE
[10:32:43.939]                           break
[10:32:43.939]                         }
[10:32:43.939]                       }
[10:32:43.939]                     }
[10:32:43.939]                     invisible(muffled)
[10:32:43.939]                   }
[10:32:43.939]                   muffleCondition(cond)
[10:32:43.939]                 })
[10:32:43.939]             }))
[10:32:43.939]             future::FutureResult(value = ...future.value$value, 
[10:32:43.939]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:43.939]                   ...future.rng), globalenv = if (FALSE) 
[10:32:43.939]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:43.939]                     ...future.globalenv.names))
[10:32:43.939]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:43.939]         }, condition = base::local({
[10:32:43.939]             c <- base::c
[10:32:43.939]             inherits <- base::inherits
[10:32:43.939]             invokeRestart <- base::invokeRestart
[10:32:43.939]             length <- base::length
[10:32:43.939]             list <- base::list
[10:32:43.939]             seq.int <- base::seq.int
[10:32:43.939]             signalCondition <- base::signalCondition
[10:32:43.939]             sys.calls <- base::sys.calls
[10:32:43.939]             `[[` <- base::`[[`
[10:32:43.939]             `+` <- base::`+`
[10:32:43.939]             `<<-` <- base::`<<-`
[10:32:43.939]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:43.939]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:43.939]                   3L)]
[10:32:43.939]             }
[10:32:43.939]             function(cond) {
[10:32:43.939]                 is_error <- inherits(cond, "error")
[10:32:43.939]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:43.939]                   NULL)
[10:32:43.939]                 if (is_error) {
[10:32:43.939]                   sessionInformation <- function() {
[10:32:43.939]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:43.939]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:43.939]                       search = base::search(), system = base::Sys.info())
[10:32:43.939]                   }
[10:32:43.939]                   ...future.conditions[[length(...future.conditions) + 
[10:32:43.939]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:43.939]                     cond$call), session = sessionInformation(), 
[10:32:43.939]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:43.939]                   signalCondition(cond)
[10:32:43.939]                 }
[10:32:43.939]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:43.939]                 "immediateCondition"))) {
[10:32:43.939]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:43.939]                   ...future.conditions[[length(...future.conditions) + 
[10:32:43.939]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:43.939]                   if (TRUE && !signal) {
[10:32:43.939]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:43.939]                     {
[10:32:43.939]                       inherits <- base::inherits
[10:32:43.939]                       invokeRestart <- base::invokeRestart
[10:32:43.939]                       is.null <- base::is.null
[10:32:43.939]                       muffled <- FALSE
[10:32:43.939]                       if (inherits(cond, "message")) {
[10:32:43.939]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:43.939]                         if (muffled) 
[10:32:43.939]                           invokeRestart("muffleMessage")
[10:32:43.939]                       }
[10:32:43.939]                       else if (inherits(cond, "warning")) {
[10:32:43.939]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:43.939]                         if (muffled) 
[10:32:43.939]                           invokeRestart("muffleWarning")
[10:32:43.939]                       }
[10:32:43.939]                       else if (inherits(cond, "condition")) {
[10:32:43.939]                         if (!is.null(pattern)) {
[10:32:43.939]                           computeRestarts <- base::computeRestarts
[10:32:43.939]                           grepl <- base::grepl
[10:32:43.939]                           restarts <- computeRestarts(cond)
[10:32:43.939]                           for (restart in restarts) {
[10:32:43.939]                             name <- restart$name
[10:32:43.939]                             if (is.null(name)) 
[10:32:43.939]                               next
[10:32:43.939]                             if (!grepl(pattern, name)) 
[10:32:43.939]                               next
[10:32:43.939]                             invokeRestart(restart)
[10:32:43.939]                             muffled <- TRUE
[10:32:43.939]                             break
[10:32:43.939]                           }
[10:32:43.939]                         }
[10:32:43.939]                       }
[10:32:43.939]                       invisible(muffled)
[10:32:43.939]                     }
[10:32:43.939]                     muffleCondition(cond, pattern = "^muffle")
[10:32:43.939]                   }
[10:32:43.939]                 }
[10:32:43.939]                 else {
[10:32:43.939]                   if (TRUE) {
[10:32:43.939]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:43.939]                     {
[10:32:43.939]                       inherits <- base::inherits
[10:32:43.939]                       invokeRestart <- base::invokeRestart
[10:32:43.939]                       is.null <- base::is.null
[10:32:43.939]                       muffled <- FALSE
[10:32:43.939]                       if (inherits(cond, "message")) {
[10:32:43.939]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:43.939]                         if (muffled) 
[10:32:43.939]                           invokeRestart("muffleMessage")
[10:32:43.939]                       }
[10:32:43.939]                       else if (inherits(cond, "warning")) {
[10:32:43.939]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:43.939]                         if (muffled) 
[10:32:43.939]                           invokeRestart("muffleWarning")
[10:32:43.939]                       }
[10:32:43.939]                       else if (inherits(cond, "condition")) {
[10:32:43.939]                         if (!is.null(pattern)) {
[10:32:43.939]                           computeRestarts <- base::computeRestarts
[10:32:43.939]                           grepl <- base::grepl
[10:32:43.939]                           restarts <- computeRestarts(cond)
[10:32:43.939]                           for (restart in restarts) {
[10:32:43.939]                             name <- restart$name
[10:32:43.939]                             if (is.null(name)) 
[10:32:43.939]                               next
[10:32:43.939]                             if (!grepl(pattern, name)) 
[10:32:43.939]                               next
[10:32:43.939]                             invokeRestart(restart)
[10:32:43.939]                             muffled <- TRUE
[10:32:43.939]                             break
[10:32:43.939]                           }
[10:32:43.939]                         }
[10:32:43.939]                       }
[10:32:43.939]                       invisible(muffled)
[10:32:43.939]                     }
[10:32:43.939]                     muffleCondition(cond, pattern = "^muffle")
[10:32:43.939]                   }
[10:32:43.939]                 }
[10:32:43.939]             }
[10:32:43.939]         }))
[10:32:43.939]     }, error = function(ex) {
[10:32:43.939]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:43.939]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:43.939]                 ...future.rng), started = ...future.startTime, 
[10:32:43.939]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:43.939]             version = "1.8"), class = "FutureResult")
[10:32:43.939]     }, finally = {
[10:32:43.939]         if (!identical(...future.workdir, getwd())) 
[10:32:43.939]             setwd(...future.workdir)
[10:32:43.939]         {
[10:32:43.939]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:43.939]                 ...future.oldOptions$nwarnings <- NULL
[10:32:43.939]             }
[10:32:43.939]             base::options(...future.oldOptions)
[10:32:43.939]             if (.Platform$OS.type == "windows") {
[10:32:43.939]                 old_names <- names(...future.oldEnvVars)
[10:32:43.939]                 envs <- base::Sys.getenv()
[10:32:43.939]                 names <- names(envs)
[10:32:43.939]                 common <- intersect(names, old_names)
[10:32:43.939]                 added <- setdiff(names, old_names)
[10:32:43.939]                 removed <- setdiff(old_names, names)
[10:32:43.939]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:43.939]                   envs[common]]
[10:32:43.939]                 NAMES <- toupper(changed)
[10:32:43.939]                 args <- list()
[10:32:43.939]                 for (kk in seq_along(NAMES)) {
[10:32:43.939]                   name <- changed[[kk]]
[10:32:43.939]                   NAME <- NAMES[[kk]]
[10:32:43.939]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:43.939]                     next
[10:32:43.939]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:43.939]                 }
[10:32:43.939]                 NAMES <- toupper(added)
[10:32:43.939]                 for (kk in seq_along(NAMES)) {
[10:32:43.939]                   name <- added[[kk]]
[10:32:43.939]                   NAME <- NAMES[[kk]]
[10:32:43.939]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:43.939]                     next
[10:32:43.939]                   args[[name]] <- ""
[10:32:43.939]                 }
[10:32:43.939]                 NAMES <- toupper(removed)
[10:32:43.939]                 for (kk in seq_along(NAMES)) {
[10:32:43.939]                   name <- removed[[kk]]
[10:32:43.939]                   NAME <- NAMES[[kk]]
[10:32:43.939]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:43.939]                     next
[10:32:43.939]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:43.939]                 }
[10:32:43.939]                 if (length(args) > 0) 
[10:32:43.939]                   base::do.call(base::Sys.setenv, args = args)
[10:32:43.939]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:43.939]             }
[10:32:43.939]             else {
[10:32:43.939]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:43.939]             }
[10:32:43.939]             {
[10:32:43.939]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:43.939]                   0L) {
[10:32:43.939]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:43.939]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:43.939]                   base::options(opts)
[10:32:43.939]                 }
[10:32:43.939]                 {
[10:32:43.939]                   {
[10:32:43.939]                     base::options(mc.cores = ...future.mc.cores.old)
[10:32:43.939]                     NULL
[10:32:43.939]                   }
[10:32:43.939]                   options(future.plan = NULL)
[10:32:43.939]                   if (is.na(NA_character_)) 
[10:32:43.939]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:43.939]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:43.939]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:43.939]                     .init = FALSE)
[10:32:43.939]                 }
[10:32:43.939]             }
[10:32:43.939]         }
[10:32:43.939]     })
[10:32:43.939]     if (TRUE) {
[10:32:43.939]         base::sink(type = "output", split = FALSE)
[10:32:43.939]         if (TRUE) {
[10:32:43.939]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:43.939]         }
[10:32:43.939]         else {
[10:32:43.939]             ...future.result["stdout"] <- base::list(NULL)
[10:32:43.939]         }
[10:32:43.939]         base::close(...future.stdout)
[10:32:43.939]         ...future.stdout <- NULL
[10:32:43.939]     }
[10:32:43.939]     ...future.result$conditions <- ...future.conditions
[10:32:43.939]     ...future.result$finished <- base::Sys.time()
[10:32:43.939]     ...future.result
[10:32:43.939] }
[10:32:43.943] requestCore(): workers = 2
[10:32:43.948] MulticoreFuture started
[10:32:43.949] - Launch lazy future ... done
[10:32:43.949] run() for ‘MulticoreFuture’ ... done
[10:32:43.949] plan(): Setting new future strategy stack:
[10:32:43.950] result() for MulticoreFuture ...
[10:32:43.950] List of future strategies:
[10:32:43.950] 1. sequential:
[10:32:43.950]    - args: function (..., envir = parent.frame())
[10:32:43.950]    - tweaked: FALSE
[10:32:43.950]    - call: NULL
[10:32:43.950] plan(): nbrOfWorkers() = 1
[10:32:43.952] result() for MulticoreFuture ...
[10:32:43.952] result() for MulticoreFuture ... done
[10:32:43.952] plan(): Setting new future strategy stack:
[10:32:43.953] result() for MulticoreFuture ... done
[10:32:43.953] List of future strategies:
[10:32:43.953] 1. multicore:
[10:32:43.953]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:32:43.953]    - tweaked: FALSE
[10:32:43.953]    - call: plan(strategy)
[10:32:43.953] result() for MulticoreFuture ...
[10:32:43.957] result() for MulticoreFuture ... done
u$a = 2
[10:32:43.958] result() for MulticoreFuture ...
[10:32:43.961] plan(): nbrOfWorkers() = 2
[10:32:43.962] result() for MulticoreFuture ...
[10:32:43.962] result() for MulticoreFuture ... done
[10:32:43.962] result() for MulticoreFuture ... done
[10:32:43.962] result() for MulticoreFuture ...
[10:32:43.962] result() for MulticoreFuture ... done
v$a = 4
[10:32:43.963] getGlobalsAndPackages() ...
[10:32:43.963] Searching for globals...
[10:32:43.964] - globals found: [3] ‘{’, ‘*’, ‘a’
[10:32:43.965] Searching for globals ... DONE
[10:32:43.965] Resolving globals: FALSE
[10:32:43.965] The total size of the 1 globals is 56 bytes (56 bytes)
[10:32:43.966] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[10:32:43.966] - globals: [1] ‘a’
[10:32:43.966] 
[10:32:43.966] getGlobalsAndPackages() ... DONE
[10:32:43.966] run() for ‘Future’ ...
[10:32:43.967] - state: ‘created’
[10:32:43.967] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:32:43.971] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:32:43.971] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:32:43.971]   - Field: ‘label’
[10:32:43.971]   - Field: ‘local’
[10:32:43.971]   - Field: ‘owner’
[10:32:43.971]   - Field: ‘envir’
[10:32:43.971]   - Field: ‘workers’
[10:32:43.972]   - Field: ‘packages’
[10:32:43.972]   - Field: ‘gc’
[10:32:43.972]   - Field: ‘job’
[10:32:43.972]   - Field: ‘conditions’
[10:32:43.972]   - Field: ‘expr’
[10:32:43.972]   - Field: ‘uuid’
[10:32:43.972]   - Field: ‘seed’
[10:32:43.972]   - Field: ‘version’
[10:32:43.972]   - Field: ‘result’
[10:32:43.973]   - Field: ‘asynchronous’
[10:32:43.973]   - Field: ‘calls’
[10:32:43.973]   - Field: ‘globals’
[10:32:43.973]   - Field: ‘stdout’
[10:32:43.973]   - Field: ‘earlySignal’
[10:32:43.973]   - Field: ‘lazy’
[10:32:43.973]   - Field: ‘state’
[10:32:43.973] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:32:43.974] - Launch lazy future ...
[10:32:43.974] Packages needed by the future expression (n = 0): <none>
[10:32:43.974] Packages needed by future strategies (n = 0): <none>
[10:32:43.975] {
[10:32:43.975]     {
[10:32:43.975]         {
[10:32:43.975]             ...future.startTime <- base::Sys.time()
[10:32:43.975]             {
[10:32:43.975]                 {
[10:32:43.975]                   {
[10:32:43.975]                     {
[10:32:43.975]                       base::local({
[10:32:43.975]                         has_future <- base::requireNamespace("future", 
[10:32:43.975]                           quietly = TRUE)
[10:32:43.975]                         if (has_future) {
[10:32:43.975]                           ns <- base::getNamespace("future")
[10:32:43.975]                           version <- ns[[".package"]][["version"]]
[10:32:43.975]                           if (is.null(version)) 
[10:32:43.975]                             version <- utils::packageVersion("future")
[10:32:43.975]                         }
[10:32:43.975]                         else {
[10:32:43.975]                           version <- NULL
[10:32:43.975]                         }
[10:32:43.975]                         if (!has_future || version < "1.8.0") {
[10:32:43.975]                           info <- base::c(r_version = base::gsub("R version ", 
[10:32:43.975]                             "", base::R.version$version.string), 
[10:32:43.975]                             platform = base::sprintf("%s (%s-bit)", 
[10:32:43.975]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:43.975]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:43.975]                               "release", "version")], collapse = " "), 
[10:32:43.975]                             hostname = base::Sys.info()[["nodename"]])
[10:32:43.975]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:32:43.975]                             info)
[10:32:43.975]                           info <- base::paste(info, collapse = "; ")
[10:32:43.975]                           if (!has_future) {
[10:32:43.975]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:43.975]                               info)
[10:32:43.975]                           }
[10:32:43.975]                           else {
[10:32:43.975]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:43.975]                               info, version)
[10:32:43.975]                           }
[10:32:43.975]                           base::stop(msg)
[10:32:43.975]                         }
[10:32:43.975]                       })
[10:32:43.975]                     }
[10:32:43.975]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:32:43.975]                     base::options(mc.cores = 1L)
[10:32:43.975]                   }
[10:32:43.975]                   ...future.strategy.old <- future::plan("list")
[10:32:43.975]                   options(future.plan = NULL)
[10:32:43.975]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:43.975]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:43.975]                 }
[10:32:43.975]                 ...future.workdir <- getwd()
[10:32:43.975]             }
[10:32:43.975]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:43.975]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:43.975]         }
[10:32:43.975]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:43.975]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:43.975]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:43.975]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:43.975]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:43.975]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:43.975]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:43.975]             base::names(...future.oldOptions))
[10:32:43.975]     }
[10:32:43.975]     if (FALSE) {
[10:32:43.975]     }
[10:32:43.975]     else {
[10:32:43.975]         if (TRUE) {
[10:32:43.975]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:43.975]                 open = "w")
[10:32:43.975]         }
[10:32:43.975]         else {
[10:32:43.975]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:43.975]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:43.975]         }
[10:32:43.975]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:43.975]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:43.975]             base::sink(type = "output", split = FALSE)
[10:32:43.975]             base::close(...future.stdout)
[10:32:43.975]         }, add = TRUE)
[10:32:43.975]     }
[10:32:43.975]     ...future.frame <- base::sys.nframe()
[10:32:43.975]     ...future.conditions <- base::list()
[10:32:43.975]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:43.975]     if (FALSE) {
[10:32:43.975]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:43.975]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:43.975]     }
[10:32:43.975]     ...future.result <- base::tryCatch({
[10:32:43.975]         base::withCallingHandlers({
[10:32:43.975]             ...future.value <- base::withVisible(base::local({
[10:32:43.975]                 withCallingHandlers({
[10:32:43.975]                   {
[10:32:43.975]                     2 * a
[10:32:43.975]                   }
[10:32:43.975]                 }, immediateCondition = function(cond) {
[10:32:43.975]                   save_rds <- function (object, pathname, ...) 
[10:32:43.975]                   {
[10:32:43.975]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:32:43.975]                     if (file_test("-f", pathname_tmp)) {
[10:32:43.975]                       fi_tmp <- file.info(pathname_tmp)
[10:32:43.975]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:32:43.975]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:32:43.975]                         fi_tmp[["mtime"]])
[10:32:43.975]                     }
[10:32:43.975]                     tryCatch({
[10:32:43.975]                       saveRDS(object, file = pathname_tmp, ...)
[10:32:43.975]                     }, error = function(ex) {
[10:32:43.975]                       msg <- conditionMessage(ex)
[10:32:43.975]                       fi_tmp <- file.info(pathname_tmp)
[10:32:43.975]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:32:43.975]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:32:43.975]                         fi_tmp[["mtime"]], msg)
[10:32:43.975]                       ex$message <- msg
[10:32:43.975]                       stop(ex)
[10:32:43.975]                     })
[10:32:43.975]                     stopifnot(file_test("-f", pathname_tmp))
[10:32:43.975]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:32:43.975]                     if (!res || file_test("-f", pathname_tmp)) {
[10:32:43.975]                       fi_tmp <- file.info(pathname_tmp)
[10:32:43.975]                       fi <- file.info(pathname)
[10:32:43.975]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:32:43.975]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:32:43.975]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:32:43.975]                         fi[["size"]], fi[["mtime"]])
[10:32:43.975]                       stop(msg)
[10:32:43.975]                     }
[10:32:43.975]                     invisible(pathname)
[10:32:43.975]                   }
[10:32:43.975]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:32:43.975]                     rootPath = tempdir()) 
[10:32:43.975]                   {
[10:32:43.975]                     obj <- list(time = Sys.time(), condition = cond)
[10:32:43.975]                     file <- tempfile(pattern = class(cond)[1], 
[10:32:43.975]                       tmpdir = path, fileext = ".rds")
[10:32:43.975]                     save_rds(obj, file)
[10:32:43.975]                   }
[10:32:43.975]                   saveImmediateCondition(cond, path = "/tmp/RtmpFz1RKJ/.future/immediateConditions")
[10:32:43.975]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:43.975]                   {
[10:32:43.975]                     inherits <- base::inherits
[10:32:43.975]                     invokeRestart <- base::invokeRestart
[10:32:43.975]                     is.null <- base::is.null
[10:32:43.975]                     muffled <- FALSE
[10:32:43.975]                     if (inherits(cond, "message")) {
[10:32:43.975]                       muffled <- grepl(pattern, "muffleMessage")
[10:32:43.975]                       if (muffled) 
[10:32:43.975]                         invokeRestart("muffleMessage")
[10:32:43.975]                     }
[10:32:43.975]                     else if (inherits(cond, "warning")) {
[10:32:43.975]                       muffled <- grepl(pattern, "muffleWarning")
[10:32:43.975]                       if (muffled) 
[10:32:43.975]                         invokeRestart("muffleWarning")
[10:32:43.975]                     }
[10:32:43.975]                     else if (inherits(cond, "condition")) {
[10:32:43.975]                       if (!is.null(pattern)) {
[10:32:43.975]                         computeRestarts <- base::computeRestarts
[10:32:43.975]                         grepl <- base::grepl
[10:32:43.975]                         restarts <- computeRestarts(cond)
[10:32:43.975]                         for (restart in restarts) {
[10:32:43.975]                           name <- restart$name
[10:32:43.975]                           if (is.null(name)) 
[10:32:43.975]                             next
[10:32:43.975]                           if (!grepl(pattern, name)) 
[10:32:43.975]                             next
[10:32:43.975]                           invokeRestart(restart)
[10:32:43.975]                           muffled <- TRUE
[10:32:43.975]                           break
[10:32:43.975]                         }
[10:32:43.975]                       }
[10:32:43.975]                     }
[10:32:43.975]                     invisible(muffled)
[10:32:43.975]                   }
[10:32:43.975]                   muffleCondition(cond)
[10:32:43.975]                 })
[10:32:43.975]             }))
[10:32:43.975]             future::FutureResult(value = ...future.value$value, 
[10:32:43.975]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:43.975]                   ...future.rng), globalenv = if (FALSE) 
[10:32:43.975]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:43.975]                     ...future.globalenv.names))
[10:32:43.975]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:43.975]         }, condition = base::local({
[10:32:43.975]             c <- base::c
[10:32:43.975]             inherits <- base::inherits
[10:32:43.975]             invokeRestart <- base::invokeRestart
[10:32:43.975]             length <- base::length
[10:32:43.975]             list <- base::list
[10:32:43.975]             seq.int <- base::seq.int
[10:32:43.975]             signalCondition <- base::signalCondition
[10:32:43.975]             sys.calls <- base::sys.calls
[10:32:43.975]             `[[` <- base::`[[`
[10:32:43.975]             `+` <- base::`+`
[10:32:43.975]             `<<-` <- base::`<<-`
[10:32:43.975]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:43.975]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:43.975]                   3L)]
[10:32:43.975]             }
[10:32:43.975]             function(cond) {
[10:32:43.975]                 is_error <- inherits(cond, "error")
[10:32:43.975]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:43.975]                   NULL)
[10:32:43.975]                 if (is_error) {
[10:32:43.975]                   sessionInformation <- function() {
[10:32:43.975]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:43.975]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:43.975]                       search = base::search(), system = base::Sys.info())
[10:32:43.975]                   }
[10:32:43.975]                   ...future.conditions[[length(...future.conditions) + 
[10:32:43.975]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:43.975]                     cond$call), session = sessionInformation(), 
[10:32:43.975]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:43.975]                   signalCondition(cond)
[10:32:43.975]                 }
[10:32:43.975]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:43.975]                 "immediateCondition"))) {
[10:32:43.975]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:43.975]                   ...future.conditions[[length(...future.conditions) + 
[10:32:43.975]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:43.975]                   if (TRUE && !signal) {
[10:32:43.975]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:43.975]                     {
[10:32:43.975]                       inherits <- base::inherits
[10:32:43.975]                       invokeRestart <- base::invokeRestart
[10:32:43.975]                       is.null <- base::is.null
[10:32:43.975]                       muffled <- FALSE
[10:32:43.975]                       if (inherits(cond, "message")) {
[10:32:43.975]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:43.975]                         if (muffled) 
[10:32:43.975]                           invokeRestart("muffleMessage")
[10:32:43.975]                       }
[10:32:43.975]                       else if (inherits(cond, "warning")) {
[10:32:43.975]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:43.975]                         if (muffled) 
[10:32:43.975]                           invokeRestart("muffleWarning")
[10:32:43.975]                       }
[10:32:43.975]                       else if (inherits(cond, "condition")) {
[10:32:43.975]                         if (!is.null(pattern)) {
[10:32:43.975]                           computeRestarts <- base::computeRestarts
[10:32:43.975]                           grepl <- base::grepl
[10:32:43.975]                           restarts <- computeRestarts(cond)
[10:32:43.975]                           for (restart in restarts) {
[10:32:43.975]                             name <- restart$name
[10:32:43.975]                             if (is.null(name)) 
[10:32:43.975]                               next
[10:32:43.975]                             if (!grepl(pattern, name)) 
[10:32:43.975]                               next
[10:32:43.975]                             invokeRestart(restart)
[10:32:43.975]                             muffled <- TRUE
[10:32:43.975]                             break
[10:32:43.975]                           }
[10:32:43.975]                         }
[10:32:43.975]                       }
[10:32:43.975]                       invisible(muffled)
[10:32:43.975]                     }
[10:32:43.975]                     muffleCondition(cond, pattern = "^muffle")
[10:32:43.975]                   }
[10:32:43.975]                 }
[10:32:43.975]                 else {
[10:32:43.975]                   if (TRUE) {
[10:32:43.975]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:43.975]                     {
[10:32:43.975]                       inherits <- base::inherits
[10:32:43.975]                       invokeRestart <- base::invokeRestart
[10:32:43.975]                       is.null <- base::is.null
[10:32:43.975]                       muffled <- FALSE
[10:32:43.975]                       if (inherits(cond, "message")) {
[10:32:43.975]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:43.975]                         if (muffled) 
[10:32:43.975]                           invokeRestart("muffleMessage")
[10:32:43.975]                       }
[10:32:43.975]                       else if (inherits(cond, "warning")) {
[10:32:43.975]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:43.975]                         if (muffled) 
[10:32:43.975]                           invokeRestart("muffleWarning")
[10:32:43.975]                       }
[10:32:43.975]                       else if (inherits(cond, "condition")) {
[10:32:43.975]                         if (!is.null(pattern)) {
[10:32:43.975]                           computeRestarts <- base::computeRestarts
[10:32:43.975]                           grepl <- base::grepl
[10:32:43.975]                           restarts <- computeRestarts(cond)
[10:32:43.975]                           for (restart in restarts) {
[10:32:43.975]                             name <- restart$name
[10:32:43.975]                             if (is.null(name)) 
[10:32:43.975]                               next
[10:32:43.975]                             if (!grepl(pattern, name)) 
[10:32:43.975]                               next
[10:32:43.975]                             invokeRestart(restart)
[10:32:43.975]                             muffled <- TRUE
[10:32:43.975]                             break
[10:32:43.975]                           }
[10:32:43.975]                         }
[10:32:43.975]                       }
[10:32:43.975]                       invisible(muffled)
[10:32:43.975]                     }
[10:32:43.975]                     muffleCondition(cond, pattern = "^muffle")
[10:32:43.975]                   }
[10:32:43.975]                 }
[10:32:43.975]             }
[10:32:43.975]         }))
[10:32:43.975]     }, error = function(ex) {
[10:32:43.975]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:43.975]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:43.975]                 ...future.rng), started = ...future.startTime, 
[10:32:43.975]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:43.975]             version = "1.8"), class = "FutureResult")
[10:32:43.975]     }, finally = {
[10:32:43.975]         if (!identical(...future.workdir, getwd())) 
[10:32:43.975]             setwd(...future.workdir)
[10:32:43.975]         {
[10:32:43.975]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:43.975]                 ...future.oldOptions$nwarnings <- NULL
[10:32:43.975]             }
[10:32:43.975]             base::options(...future.oldOptions)
[10:32:43.975]             if (.Platform$OS.type == "windows") {
[10:32:43.975]                 old_names <- names(...future.oldEnvVars)
[10:32:43.975]                 envs <- base::Sys.getenv()
[10:32:43.975]                 names <- names(envs)
[10:32:43.975]                 common <- intersect(names, old_names)
[10:32:43.975]                 added <- setdiff(names, old_names)
[10:32:43.975]                 removed <- setdiff(old_names, names)
[10:32:43.975]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:43.975]                   envs[common]]
[10:32:43.975]                 NAMES <- toupper(changed)
[10:32:43.975]                 args <- list()
[10:32:43.975]                 for (kk in seq_along(NAMES)) {
[10:32:43.975]                   name <- changed[[kk]]
[10:32:43.975]                   NAME <- NAMES[[kk]]
[10:32:43.975]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:43.975]                     next
[10:32:43.975]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:43.975]                 }
[10:32:43.975]                 NAMES <- toupper(added)
[10:32:43.975]                 for (kk in seq_along(NAMES)) {
[10:32:43.975]                   name <- added[[kk]]
[10:32:43.975]                   NAME <- NAMES[[kk]]
[10:32:43.975]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:43.975]                     next
[10:32:43.975]                   args[[name]] <- ""
[10:32:43.975]                 }
[10:32:43.975]                 NAMES <- toupper(removed)
[10:32:43.975]                 for (kk in seq_along(NAMES)) {
[10:32:43.975]                   name <- removed[[kk]]
[10:32:43.975]                   NAME <- NAMES[[kk]]
[10:32:43.975]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:43.975]                     next
[10:32:43.975]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:43.975]                 }
[10:32:43.975]                 if (length(args) > 0) 
[10:32:43.975]                   base::do.call(base::Sys.setenv, args = args)
[10:32:43.975]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:43.975]             }
[10:32:43.975]             else {
[10:32:43.975]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:43.975]             }
[10:32:43.975]             {
[10:32:43.975]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:43.975]                   0L) {
[10:32:43.975]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:43.975]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:43.975]                   base::options(opts)
[10:32:43.975]                 }
[10:32:43.975]                 {
[10:32:43.975]                   {
[10:32:43.975]                     base::options(mc.cores = ...future.mc.cores.old)
[10:32:43.975]                     NULL
[10:32:43.975]                   }
[10:32:43.975]                   options(future.plan = NULL)
[10:32:43.975]                   if (is.na(NA_character_)) 
[10:32:43.975]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:43.975]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:43.975]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:43.975]                     .init = FALSE)
[10:32:43.975]                 }
[10:32:43.975]             }
[10:32:43.975]         }
[10:32:43.975]     })
[10:32:43.975]     if (TRUE) {
[10:32:43.975]         base::sink(type = "output", split = FALSE)
[10:32:43.975]         if (TRUE) {
[10:32:43.975]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:43.975]         }
[10:32:43.975]         else {
[10:32:43.975]             ...future.result["stdout"] <- base::list(NULL)
[10:32:43.975]         }
[10:32:43.975]         base::close(...future.stdout)
[10:32:43.975]         ...future.stdout <- NULL
[10:32:43.975]     }
[10:32:43.975]     ...future.result$conditions <- ...future.conditions
[10:32:43.975]     ...future.result$finished <- base::Sys.time()
[10:32:43.975]     ...future.result
[10:32:43.975] }
[10:32:43.977] assign_globals() ...
[10:32:43.977] List of 1
[10:32:43.977]  $ a: num 1
[10:32:43.977]  - attr(*, "where")=List of 1
[10:32:43.977]   ..$ a:<environment: R_EmptyEnv> 
[10:32:43.977]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:32:43.977]  - attr(*, "resolved")= logi FALSE
[10:32:43.977]  - attr(*, "total_size")= num 56
[10:32:43.977]  - attr(*, "already-done")= logi TRUE
[10:32:43.980] - copied ‘a’ to environment
[10:32:43.980] assign_globals() ... done
[10:32:43.980] requestCore(): workers = 2
[10:32:43.982] MulticoreFuture started
[10:32:43.982] - Launch lazy future ... done
[10:32:43.982] run() for ‘MulticoreFuture’ ... done
[10:32:43.983] result() for MulticoreFuture ...
[10:32:43.983] plan(): Setting new future strategy stack:
[10:32:43.983] List of future strategies:
[10:32:43.983] 1. sequential:
[10:32:43.983]    - args: function (..., envir = parent.frame())
[10:32:43.983]    - tweaked: FALSE
[10:32:43.983]    - call: NULL
[10:32:43.984] plan(): nbrOfWorkers() = 1
[10:32:43.986] plan(): Setting new future strategy stack:
[10:32:43.986] List of future strategies:
[10:32:43.986] 1. multicore:
[10:32:43.986]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:32:43.986]    - tweaked: FALSE
[10:32:43.986]    - call: plan(strategy)
[10:32:43.991] plan(): nbrOfWorkers() = 2
[10:32:43.992] result() for MulticoreFuture ...
[10:32:43.992] result() for MulticoreFuture ... done
[10:32:43.992] result() for MulticoreFuture ... done
[10:32:43.992] result() for MulticoreFuture ...
[10:32:43.992] result() for MulticoreFuture ... done
[10:32:43.993] getGlobalsAndPackages() ...
[10:32:43.993] Searching for globals...
[10:32:43.994] - globals found: [3] ‘{’, ‘*’, ‘a’
[10:32:43.994] Searching for globals ... DONE
[10:32:43.994] Resolving globals: FALSE
[10:32:43.995] The total size of the 1 globals is 56 bytes (56 bytes)
[10:32:43.995] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[10:32:43.995] - globals: [1] ‘a’
[10:32:43.995] 
[10:32:43.996] getGlobalsAndPackages() ... DONE
[10:32:43.996] run() for ‘Future’ ...
[10:32:43.996] - state: ‘created’
[10:32:43.996] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:32:44.000] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:32:44.000] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:32:44.000]   - Field: ‘label’
[10:32:44.001]   - Field: ‘local’
[10:32:44.001]   - Field: ‘owner’
[10:32:44.001]   - Field: ‘envir’
[10:32:44.001]   - Field: ‘workers’
[10:32:44.001]   - Field: ‘packages’
[10:32:44.001]   - Field: ‘gc’
[10:32:44.001]   - Field: ‘job’
[10:32:44.001]   - Field: ‘conditions’
[10:32:44.002]   - Field: ‘expr’
[10:32:44.002]   - Field: ‘uuid’
[10:32:44.002]   - Field: ‘seed’
[10:32:44.002]   - Field: ‘version’
[10:32:44.002]   - Field: ‘result’
[10:32:44.002]   - Field: ‘asynchronous’
[10:32:44.002]   - Field: ‘calls’
[10:32:44.002]   - Field: ‘globals’
[10:32:44.002]   - Field: ‘stdout’
[10:32:44.003]   - Field: ‘earlySignal’
[10:32:44.003]   - Field: ‘lazy’
[10:32:44.003]   - Field: ‘state’
[10:32:44.003] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:32:44.003] - Launch lazy future ...
[10:32:44.003] Packages needed by the future expression (n = 0): <none>
[10:32:44.003] Packages needed by future strategies (n = 0): <none>
[10:32:44.004] {
[10:32:44.004]     {
[10:32:44.004]         {
[10:32:44.004]             ...future.startTime <- base::Sys.time()
[10:32:44.004]             {
[10:32:44.004]                 {
[10:32:44.004]                   {
[10:32:44.004]                     {
[10:32:44.004]                       base::local({
[10:32:44.004]                         has_future <- base::requireNamespace("future", 
[10:32:44.004]                           quietly = TRUE)
[10:32:44.004]                         if (has_future) {
[10:32:44.004]                           ns <- base::getNamespace("future")
[10:32:44.004]                           version <- ns[[".package"]][["version"]]
[10:32:44.004]                           if (is.null(version)) 
[10:32:44.004]                             version <- utils::packageVersion("future")
[10:32:44.004]                         }
[10:32:44.004]                         else {
[10:32:44.004]                           version <- NULL
[10:32:44.004]                         }
[10:32:44.004]                         if (!has_future || version < "1.8.0") {
[10:32:44.004]                           info <- base::c(r_version = base::gsub("R version ", 
[10:32:44.004]                             "", base::R.version$version.string), 
[10:32:44.004]                             platform = base::sprintf("%s (%s-bit)", 
[10:32:44.004]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:44.004]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:44.004]                               "release", "version")], collapse = " "), 
[10:32:44.004]                             hostname = base::Sys.info()[["nodename"]])
[10:32:44.004]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:32:44.004]                             info)
[10:32:44.004]                           info <- base::paste(info, collapse = "; ")
[10:32:44.004]                           if (!has_future) {
[10:32:44.004]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:44.004]                               info)
[10:32:44.004]                           }
[10:32:44.004]                           else {
[10:32:44.004]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:44.004]                               info, version)
[10:32:44.004]                           }
[10:32:44.004]                           base::stop(msg)
[10:32:44.004]                         }
[10:32:44.004]                       })
[10:32:44.004]                     }
[10:32:44.004]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:32:44.004]                     base::options(mc.cores = 1L)
[10:32:44.004]                   }
[10:32:44.004]                   ...future.strategy.old <- future::plan("list")
[10:32:44.004]                   options(future.plan = NULL)
[10:32:44.004]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:44.004]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:44.004]                 }
[10:32:44.004]                 ...future.workdir <- getwd()
[10:32:44.004]             }
[10:32:44.004]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:44.004]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:44.004]         }
[10:32:44.004]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:44.004]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:44.004]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:44.004]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:44.004]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:44.004]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:44.004]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:44.004]             base::names(...future.oldOptions))
[10:32:44.004]     }
[10:32:44.004]     if (FALSE) {
[10:32:44.004]     }
[10:32:44.004]     else {
[10:32:44.004]         if (TRUE) {
[10:32:44.004]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:44.004]                 open = "w")
[10:32:44.004]         }
[10:32:44.004]         else {
[10:32:44.004]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:44.004]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:44.004]         }
[10:32:44.004]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:44.004]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:44.004]             base::sink(type = "output", split = FALSE)
[10:32:44.004]             base::close(...future.stdout)
[10:32:44.004]         }, add = TRUE)
[10:32:44.004]     }
[10:32:44.004]     ...future.frame <- base::sys.nframe()
[10:32:44.004]     ...future.conditions <- base::list()
[10:32:44.004]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:44.004]     if (FALSE) {
[10:32:44.004]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:44.004]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:44.004]     }
[10:32:44.004]     ...future.result <- base::tryCatch({
[10:32:44.004]         base::withCallingHandlers({
[10:32:44.004]             ...future.value <- base::withVisible(base::local({
[10:32:44.004]                 withCallingHandlers({
[10:32:44.004]                   {
[10:32:44.004]                     2 * a
[10:32:44.004]                   }
[10:32:44.004]                 }, immediateCondition = function(cond) {
[10:32:44.004]                   save_rds <- function (object, pathname, ...) 
[10:32:44.004]                   {
[10:32:44.004]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:32:44.004]                     if (file_test("-f", pathname_tmp)) {
[10:32:44.004]                       fi_tmp <- file.info(pathname_tmp)
[10:32:44.004]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:32:44.004]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:32:44.004]                         fi_tmp[["mtime"]])
[10:32:44.004]                     }
[10:32:44.004]                     tryCatch({
[10:32:44.004]                       saveRDS(object, file = pathname_tmp, ...)
[10:32:44.004]                     }, error = function(ex) {
[10:32:44.004]                       msg <- conditionMessage(ex)
[10:32:44.004]                       fi_tmp <- file.info(pathname_tmp)
[10:32:44.004]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:32:44.004]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:32:44.004]                         fi_tmp[["mtime"]], msg)
[10:32:44.004]                       ex$message <- msg
[10:32:44.004]                       stop(ex)
[10:32:44.004]                     })
[10:32:44.004]                     stopifnot(file_test("-f", pathname_tmp))
[10:32:44.004]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:32:44.004]                     if (!res || file_test("-f", pathname_tmp)) {
[10:32:44.004]                       fi_tmp <- file.info(pathname_tmp)
[10:32:44.004]                       fi <- file.info(pathname)
[10:32:44.004]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:32:44.004]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:32:44.004]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:32:44.004]                         fi[["size"]], fi[["mtime"]])
[10:32:44.004]                       stop(msg)
[10:32:44.004]                     }
[10:32:44.004]                     invisible(pathname)
[10:32:44.004]                   }
[10:32:44.004]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:32:44.004]                     rootPath = tempdir()) 
[10:32:44.004]                   {
[10:32:44.004]                     obj <- list(time = Sys.time(), condition = cond)
[10:32:44.004]                     file <- tempfile(pattern = class(cond)[1], 
[10:32:44.004]                       tmpdir = path, fileext = ".rds")
[10:32:44.004]                     save_rds(obj, file)
[10:32:44.004]                   }
[10:32:44.004]                   saveImmediateCondition(cond, path = "/tmp/RtmpFz1RKJ/.future/immediateConditions")
[10:32:44.004]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:44.004]                   {
[10:32:44.004]                     inherits <- base::inherits
[10:32:44.004]                     invokeRestart <- base::invokeRestart
[10:32:44.004]                     is.null <- base::is.null
[10:32:44.004]                     muffled <- FALSE
[10:32:44.004]                     if (inherits(cond, "message")) {
[10:32:44.004]                       muffled <- grepl(pattern, "muffleMessage")
[10:32:44.004]                       if (muffled) 
[10:32:44.004]                         invokeRestart("muffleMessage")
[10:32:44.004]                     }
[10:32:44.004]                     else if (inherits(cond, "warning")) {
[10:32:44.004]                       muffled <- grepl(pattern, "muffleWarning")
[10:32:44.004]                       if (muffled) 
[10:32:44.004]                         invokeRestart("muffleWarning")
[10:32:44.004]                     }
[10:32:44.004]                     else if (inherits(cond, "condition")) {
[10:32:44.004]                       if (!is.null(pattern)) {
[10:32:44.004]                         computeRestarts <- base::computeRestarts
[10:32:44.004]                         grepl <- base::grepl
[10:32:44.004]                         restarts <- computeRestarts(cond)
[10:32:44.004]                         for (restart in restarts) {
[10:32:44.004]                           name <- restart$name
[10:32:44.004]                           if (is.null(name)) 
[10:32:44.004]                             next
[10:32:44.004]                           if (!grepl(pattern, name)) 
[10:32:44.004]                             next
[10:32:44.004]                           invokeRestart(restart)
[10:32:44.004]                           muffled <- TRUE
[10:32:44.004]                           break
[10:32:44.004]                         }
[10:32:44.004]                       }
[10:32:44.004]                     }
[10:32:44.004]                     invisible(muffled)
[10:32:44.004]                   }
[10:32:44.004]                   muffleCondition(cond)
[10:32:44.004]                 })
[10:32:44.004]             }))
[10:32:44.004]             future::FutureResult(value = ...future.value$value, 
[10:32:44.004]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:44.004]                   ...future.rng), globalenv = if (FALSE) 
[10:32:44.004]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:44.004]                     ...future.globalenv.names))
[10:32:44.004]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:44.004]         }, condition = base::local({
[10:32:44.004]             c <- base::c
[10:32:44.004]             inherits <- base::inherits
[10:32:44.004]             invokeRestart <- base::invokeRestart
[10:32:44.004]             length <- base::length
[10:32:44.004]             list <- base::list
[10:32:44.004]             seq.int <- base::seq.int
[10:32:44.004]             signalCondition <- base::signalCondition
[10:32:44.004]             sys.calls <- base::sys.calls
[10:32:44.004]             `[[` <- base::`[[`
[10:32:44.004]             `+` <- base::`+`
[10:32:44.004]             `<<-` <- base::`<<-`
[10:32:44.004]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:44.004]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:44.004]                   3L)]
[10:32:44.004]             }
[10:32:44.004]             function(cond) {
[10:32:44.004]                 is_error <- inherits(cond, "error")
[10:32:44.004]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:44.004]                   NULL)
[10:32:44.004]                 if (is_error) {
[10:32:44.004]                   sessionInformation <- function() {
[10:32:44.004]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:44.004]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:44.004]                       search = base::search(), system = base::Sys.info())
[10:32:44.004]                   }
[10:32:44.004]                   ...future.conditions[[length(...future.conditions) + 
[10:32:44.004]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:44.004]                     cond$call), session = sessionInformation(), 
[10:32:44.004]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:44.004]                   signalCondition(cond)
[10:32:44.004]                 }
[10:32:44.004]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:44.004]                 "immediateCondition"))) {
[10:32:44.004]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:44.004]                   ...future.conditions[[length(...future.conditions) + 
[10:32:44.004]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:44.004]                   if (TRUE && !signal) {
[10:32:44.004]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:44.004]                     {
[10:32:44.004]                       inherits <- base::inherits
[10:32:44.004]                       invokeRestart <- base::invokeRestart
[10:32:44.004]                       is.null <- base::is.null
[10:32:44.004]                       muffled <- FALSE
[10:32:44.004]                       if (inherits(cond, "message")) {
[10:32:44.004]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:44.004]                         if (muffled) 
[10:32:44.004]                           invokeRestart("muffleMessage")
[10:32:44.004]                       }
[10:32:44.004]                       else if (inherits(cond, "warning")) {
[10:32:44.004]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:44.004]                         if (muffled) 
[10:32:44.004]                           invokeRestart("muffleWarning")
[10:32:44.004]                       }
[10:32:44.004]                       else if (inherits(cond, "condition")) {
[10:32:44.004]                         if (!is.null(pattern)) {
[10:32:44.004]                           computeRestarts <- base::computeRestarts
[10:32:44.004]                           grepl <- base::grepl
[10:32:44.004]                           restarts <- computeRestarts(cond)
[10:32:44.004]                           for (restart in restarts) {
[10:32:44.004]                             name <- restart$name
[10:32:44.004]                             if (is.null(name)) 
[10:32:44.004]                               next
[10:32:44.004]                             if (!grepl(pattern, name)) 
[10:32:44.004]                               next
[10:32:44.004]                             invokeRestart(restart)
[10:32:44.004]                             muffled <- TRUE
[10:32:44.004]                             break
[10:32:44.004]                           }
[10:32:44.004]                         }
[10:32:44.004]                       }
[10:32:44.004]                       invisible(muffled)
[10:32:44.004]                     }
[10:32:44.004]                     muffleCondition(cond, pattern = "^muffle")
[10:32:44.004]                   }
[10:32:44.004]                 }
[10:32:44.004]                 else {
[10:32:44.004]                   if (TRUE) {
[10:32:44.004]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:44.004]                     {
[10:32:44.004]                       inherits <- base::inherits
[10:32:44.004]                       invokeRestart <- base::invokeRestart
[10:32:44.004]                       is.null <- base::is.null
[10:32:44.004]                       muffled <- FALSE
[10:32:44.004]                       if (inherits(cond, "message")) {
[10:32:44.004]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:44.004]                         if (muffled) 
[10:32:44.004]                           invokeRestart("muffleMessage")
[10:32:44.004]                       }
[10:32:44.004]                       else if (inherits(cond, "warning")) {
[10:32:44.004]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:44.004]                         if (muffled) 
[10:32:44.004]                           invokeRestart("muffleWarning")
[10:32:44.004]                       }
[10:32:44.004]                       else if (inherits(cond, "condition")) {
[10:32:44.004]                         if (!is.null(pattern)) {
[10:32:44.004]                           computeRestarts <- base::computeRestarts
[10:32:44.004]                           grepl <- base::grepl
[10:32:44.004]                           restarts <- computeRestarts(cond)
[10:32:44.004]                           for (restart in restarts) {
[10:32:44.004]                             name <- restart$name
[10:32:44.004]                             if (is.null(name)) 
[10:32:44.004]                               next
[10:32:44.004]                             if (!grepl(pattern, name)) 
[10:32:44.004]                               next
[10:32:44.004]                             invokeRestart(restart)
[10:32:44.004]                             muffled <- TRUE
[10:32:44.004]                             break
[10:32:44.004]                           }
[10:32:44.004]                         }
[10:32:44.004]                       }
[10:32:44.004]                       invisible(muffled)
[10:32:44.004]                     }
[10:32:44.004]                     muffleCondition(cond, pattern = "^muffle")
[10:32:44.004]                   }
[10:32:44.004]                 }
[10:32:44.004]             }
[10:32:44.004]         }))
[10:32:44.004]     }, error = function(ex) {
[10:32:44.004]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:44.004]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:44.004]                 ...future.rng), started = ...future.startTime, 
[10:32:44.004]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:44.004]             version = "1.8"), class = "FutureResult")
[10:32:44.004]     }, finally = {
[10:32:44.004]         if (!identical(...future.workdir, getwd())) 
[10:32:44.004]             setwd(...future.workdir)
[10:32:44.004]         {
[10:32:44.004]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:44.004]                 ...future.oldOptions$nwarnings <- NULL
[10:32:44.004]             }
[10:32:44.004]             base::options(...future.oldOptions)
[10:32:44.004]             if (.Platform$OS.type == "windows") {
[10:32:44.004]                 old_names <- names(...future.oldEnvVars)
[10:32:44.004]                 envs <- base::Sys.getenv()
[10:32:44.004]                 names <- names(envs)
[10:32:44.004]                 common <- intersect(names, old_names)
[10:32:44.004]                 added <- setdiff(names, old_names)
[10:32:44.004]                 removed <- setdiff(old_names, names)
[10:32:44.004]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:44.004]                   envs[common]]
[10:32:44.004]                 NAMES <- toupper(changed)
[10:32:44.004]                 args <- list()
[10:32:44.004]                 for (kk in seq_along(NAMES)) {
[10:32:44.004]                   name <- changed[[kk]]
[10:32:44.004]                   NAME <- NAMES[[kk]]
[10:32:44.004]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:44.004]                     next
[10:32:44.004]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:44.004]                 }
[10:32:44.004]                 NAMES <- toupper(added)
[10:32:44.004]                 for (kk in seq_along(NAMES)) {
[10:32:44.004]                   name <- added[[kk]]
[10:32:44.004]                   NAME <- NAMES[[kk]]
[10:32:44.004]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:44.004]                     next
[10:32:44.004]                   args[[name]] <- ""
[10:32:44.004]                 }
[10:32:44.004]                 NAMES <- toupper(removed)
[10:32:44.004]                 for (kk in seq_along(NAMES)) {
[10:32:44.004]                   name <- removed[[kk]]
[10:32:44.004]                   NAME <- NAMES[[kk]]
[10:32:44.004]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:44.004]                     next
[10:32:44.004]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:44.004]                 }
[10:32:44.004]                 if (length(args) > 0) 
[10:32:44.004]                   base::do.call(base::Sys.setenv, args = args)
[10:32:44.004]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:44.004]             }
[10:32:44.004]             else {
[10:32:44.004]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:44.004]             }
[10:32:44.004]             {
[10:32:44.004]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:44.004]                   0L) {
[10:32:44.004]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:44.004]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:44.004]                   base::options(opts)
[10:32:44.004]                 }
[10:32:44.004]                 {
[10:32:44.004]                   {
[10:32:44.004]                     base::options(mc.cores = ...future.mc.cores.old)
[10:32:44.004]                     NULL
[10:32:44.004]                   }
[10:32:44.004]                   options(future.plan = NULL)
[10:32:44.004]                   if (is.na(NA_character_)) 
[10:32:44.004]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:44.004]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:44.004]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:44.004]                     .init = FALSE)
[10:32:44.004]                 }
[10:32:44.004]             }
[10:32:44.004]         }
[10:32:44.004]     })
[10:32:44.004]     if (TRUE) {
[10:32:44.004]         base::sink(type = "output", split = FALSE)
[10:32:44.004]         if (TRUE) {
[10:32:44.004]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:44.004]         }
[10:32:44.004]         else {
[10:32:44.004]             ...future.result["stdout"] <- base::list(NULL)
[10:32:44.004]         }
[10:32:44.004]         base::close(...future.stdout)
[10:32:44.004]         ...future.stdout <- NULL
[10:32:44.004]     }
[10:32:44.004]     ...future.result$conditions <- ...future.conditions
[10:32:44.004]     ...future.result$finished <- base::Sys.time()
[10:32:44.004]     ...future.result
[10:32:44.004] }
[10:32:44.007] assign_globals() ...
[10:32:44.007] List of 1
[10:32:44.007]  $ a: num 1
[10:32:44.007]  - attr(*, "where")=List of 1
[10:32:44.007]   ..$ a:<environment: R_EmptyEnv> 
[10:32:44.007]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:32:44.007]  - attr(*, "resolved")= logi FALSE
[10:32:44.007]  - attr(*, "total_size")= num 56
[10:32:44.007]  - attr(*, "already-done")= logi TRUE
[10:32:44.010] - copied ‘a’ to environment
[10:32:44.010] assign_globals() ... done
[10:32:44.010] requestCore(): workers = 2
[10:32:44.012] MulticoreFuture started
[10:32:44.012] - Launch lazy future ... done
[10:32:44.012] run() for ‘MulticoreFuture’ ... done
[10:32:44.013] result() for MulticoreFuture ...
[10:32:44.013] plan(): Setting new future strategy stack:
[10:32:44.013] List of future strategies:
[10:32:44.013] 1. sequential:
[10:32:44.013]    - args: function (..., envir = parent.frame())
[10:32:44.013]    - tweaked: FALSE
[10:32:44.013]    - call: NULL
[10:32:44.014] plan(): nbrOfWorkers() = 1
[10:32:44.021] plan(): Setting new future strategy stack:
[10:32:44.021] List of future strategies:
[10:32:44.021] 1. multicore:
[10:32:44.021]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:32:44.021]    - tweaked: FALSE
[10:32:44.021]    - call: plan(strategy)
[10:32:44.027] plan(): nbrOfWorkers() = 2
[10:32:44.030] result() for MulticoreFuture ...
[10:32:44.030] result() for MulticoreFuture ... done
[10:32:44.030] result() for MulticoreFuture ... done
[10:32:44.031] result() for MulticoreFuture ...
[10:32:44.031] result() for MulticoreFuture ... done
[10:32:44.031] getGlobalsAndPackages() ...
[10:32:44.031] Searching for globals...
[10:32:44.033] - globals found: [3] ‘{’, ‘*’, ‘a’
[10:32:44.033] Searching for globals ... DONE
[10:32:44.033] Resolving globals: FALSE
[10:32:44.034] The total size of the 1 globals is 56 bytes (56 bytes)
[10:32:44.034] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[10:32:44.034] - globals: [1] ‘a’
[10:32:44.034] 
[10:32:44.034] getGlobalsAndPackages() ... DONE
[10:32:44.035] run() for ‘Future’ ...
[10:32:44.035] - state: ‘created’
[10:32:44.035] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:32:44.039] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:32:44.039] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:32:44.039]   - Field: ‘label’
[10:32:44.039]   - Field: ‘local’
[10:32:44.040]   - Field: ‘owner’
[10:32:44.040]   - Field: ‘envir’
[10:32:44.040]   - Field: ‘workers’
[10:32:44.040]   - Field: ‘packages’
[10:32:44.040]   - Field: ‘gc’
[10:32:44.040]   - Field: ‘job’
[10:32:44.040]   - Field: ‘conditions’
[10:32:44.040]   - Field: ‘expr’
[10:32:44.041]   - Field: ‘uuid’
[10:32:44.041]   - Field: ‘seed’
[10:32:44.041]   - Field: ‘version’
[10:32:44.041]   - Field: ‘result’
[10:32:44.041]   - Field: ‘asynchronous’
[10:32:44.041]   - Field: ‘calls’
[10:32:44.041]   - Field: ‘globals’
[10:32:44.041]   - Field: ‘stdout’
[10:32:44.042]   - Field: ‘earlySignal’
[10:32:44.042]   - Field: ‘lazy’
[10:32:44.042]   - Field: ‘state’
[10:32:44.042] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:32:44.042] - Launch lazy future ...
[10:32:44.042] Packages needed by the future expression (n = 0): <none>
[10:32:44.042] Packages needed by future strategies (n = 0): <none>
[10:32:44.043] {
[10:32:44.043]     {
[10:32:44.043]         {
[10:32:44.043]             ...future.startTime <- base::Sys.time()
[10:32:44.043]             {
[10:32:44.043]                 {
[10:32:44.043]                   {
[10:32:44.043]                     {
[10:32:44.043]                       base::local({
[10:32:44.043]                         has_future <- base::requireNamespace("future", 
[10:32:44.043]                           quietly = TRUE)
[10:32:44.043]                         if (has_future) {
[10:32:44.043]                           ns <- base::getNamespace("future")
[10:32:44.043]                           version <- ns[[".package"]][["version"]]
[10:32:44.043]                           if (is.null(version)) 
[10:32:44.043]                             version <- utils::packageVersion("future")
[10:32:44.043]                         }
[10:32:44.043]                         else {
[10:32:44.043]                           version <- NULL
[10:32:44.043]                         }
[10:32:44.043]                         if (!has_future || version < "1.8.0") {
[10:32:44.043]                           info <- base::c(r_version = base::gsub("R version ", 
[10:32:44.043]                             "", base::R.version$version.string), 
[10:32:44.043]                             platform = base::sprintf("%s (%s-bit)", 
[10:32:44.043]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:44.043]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:44.043]                               "release", "version")], collapse = " "), 
[10:32:44.043]                             hostname = base::Sys.info()[["nodename"]])
[10:32:44.043]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:32:44.043]                             info)
[10:32:44.043]                           info <- base::paste(info, collapse = "; ")
[10:32:44.043]                           if (!has_future) {
[10:32:44.043]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:44.043]                               info)
[10:32:44.043]                           }
[10:32:44.043]                           else {
[10:32:44.043]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:44.043]                               info, version)
[10:32:44.043]                           }
[10:32:44.043]                           base::stop(msg)
[10:32:44.043]                         }
[10:32:44.043]                       })
[10:32:44.043]                     }
[10:32:44.043]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:32:44.043]                     base::options(mc.cores = 1L)
[10:32:44.043]                   }
[10:32:44.043]                   ...future.strategy.old <- future::plan("list")
[10:32:44.043]                   options(future.plan = NULL)
[10:32:44.043]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:44.043]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:44.043]                 }
[10:32:44.043]                 ...future.workdir <- getwd()
[10:32:44.043]             }
[10:32:44.043]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:44.043]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:44.043]         }
[10:32:44.043]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:44.043]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:44.043]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:44.043]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:44.043]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:44.043]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:44.043]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:44.043]             base::names(...future.oldOptions))
[10:32:44.043]     }
[10:32:44.043]     if (FALSE) {
[10:32:44.043]     }
[10:32:44.043]     else {
[10:32:44.043]         if (TRUE) {
[10:32:44.043]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:44.043]                 open = "w")
[10:32:44.043]         }
[10:32:44.043]         else {
[10:32:44.043]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:44.043]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:44.043]         }
[10:32:44.043]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:44.043]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:44.043]             base::sink(type = "output", split = FALSE)
[10:32:44.043]             base::close(...future.stdout)
[10:32:44.043]         }, add = TRUE)
[10:32:44.043]     }
[10:32:44.043]     ...future.frame <- base::sys.nframe()
[10:32:44.043]     ...future.conditions <- base::list()
[10:32:44.043]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:44.043]     if (FALSE) {
[10:32:44.043]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:44.043]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:44.043]     }
[10:32:44.043]     ...future.result <- base::tryCatch({
[10:32:44.043]         base::withCallingHandlers({
[10:32:44.043]             ...future.value <- base::withVisible(base::local({
[10:32:44.043]                 withCallingHandlers({
[10:32:44.043]                   {
[10:32:44.043]                     2 * a
[10:32:44.043]                   }
[10:32:44.043]                 }, immediateCondition = function(cond) {
[10:32:44.043]                   save_rds <- function (object, pathname, ...) 
[10:32:44.043]                   {
[10:32:44.043]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:32:44.043]                     if (file_test("-f", pathname_tmp)) {
[10:32:44.043]                       fi_tmp <- file.info(pathname_tmp)
[10:32:44.043]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:32:44.043]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:32:44.043]                         fi_tmp[["mtime"]])
[10:32:44.043]                     }
[10:32:44.043]                     tryCatch({
[10:32:44.043]                       saveRDS(object, file = pathname_tmp, ...)
[10:32:44.043]                     }, error = function(ex) {
[10:32:44.043]                       msg <- conditionMessage(ex)
[10:32:44.043]                       fi_tmp <- file.info(pathname_tmp)
[10:32:44.043]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:32:44.043]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:32:44.043]                         fi_tmp[["mtime"]], msg)
[10:32:44.043]                       ex$message <- msg
[10:32:44.043]                       stop(ex)
[10:32:44.043]                     })
[10:32:44.043]                     stopifnot(file_test("-f", pathname_tmp))
[10:32:44.043]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:32:44.043]                     if (!res || file_test("-f", pathname_tmp)) {
[10:32:44.043]                       fi_tmp <- file.info(pathname_tmp)
[10:32:44.043]                       fi <- file.info(pathname)
[10:32:44.043]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:32:44.043]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:32:44.043]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:32:44.043]                         fi[["size"]], fi[["mtime"]])
[10:32:44.043]                       stop(msg)
[10:32:44.043]                     }
[10:32:44.043]                     invisible(pathname)
[10:32:44.043]                   }
[10:32:44.043]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:32:44.043]                     rootPath = tempdir()) 
[10:32:44.043]                   {
[10:32:44.043]                     obj <- list(time = Sys.time(), condition = cond)
[10:32:44.043]                     file <- tempfile(pattern = class(cond)[1], 
[10:32:44.043]                       tmpdir = path, fileext = ".rds")
[10:32:44.043]                     save_rds(obj, file)
[10:32:44.043]                   }
[10:32:44.043]                   saveImmediateCondition(cond, path = "/tmp/RtmpFz1RKJ/.future/immediateConditions")
[10:32:44.043]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:44.043]                   {
[10:32:44.043]                     inherits <- base::inherits
[10:32:44.043]                     invokeRestart <- base::invokeRestart
[10:32:44.043]                     is.null <- base::is.null
[10:32:44.043]                     muffled <- FALSE
[10:32:44.043]                     if (inherits(cond, "message")) {
[10:32:44.043]                       muffled <- grepl(pattern, "muffleMessage")
[10:32:44.043]                       if (muffled) 
[10:32:44.043]                         invokeRestart("muffleMessage")
[10:32:44.043]                     }
[10:32:44.043]                     else if (inherits(cond, "warning")) {
[10:32:44.043]                       muffled <- grepl(pattern, "muffleWarning")
[10:32:44.043]                       if (muffled) 
[10:32:44.043]                         invokeRestart("muffleWarning")
[10:32:44.043]                     }
[10:32:44.043]                     else if (inherits(cond, "condition")) {
[10:32:44.043]                       if (!is.null(pattern)) {
[10:32:44.043]                         computeRestarts <- base::computeRestarts
[10:32:44.043]                         grepl <- base::grepl
[10:32:44.043]                         restarts <- computeRestarts(cond)
[10:32:44.043]                         for (restart in restarts) {
[10:32:44.043]                           name <- restart$name
[10:32:44.043]                           if (is.null(name)) 
[10:32:44.043]                             next
[10:32:44.043]                           if (!grepl(pattern, name)) 
[10:32:44.043]                             next
[10:32:44.043]                           invokeRestart(restart)
[10:32:44.043]                           muffled <- TRUE
[10:32:44.043]                           break
[10:32:44.043]                         }
[10:32:44.043]                       }
[10:32:44.043]                     }
[10:32:44.043]                     invisible(muffled)
[10:32:44.043]                   }
[10:32:44.043]                   muffleCondition(cond)
[10:32:44.043]                 })
[10:32:44.043]             }))
[10:32:44.043]             future::FutureResult(value = ...future.value$value, 
[10:32:44.043]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:44.043]                   ...future.rng), globalenv = if (FALSE) 
[10:32:44.043]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:44.043]                     ...future.globalenv.names))
[10:32:44.043]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:44.043]         }, condition = base::local({
[10:32:44.043]             c <- base::c
[10:32:44.043]             inherits <- base::inherits
[10:32:44.043]             invokeRestart <- base::invokeRestart
[10:32:44.043]             length <- base::length
[10:32:44.043]             list <- base::list
[10:32:44.043]             seq.int <- base::seq.int
[10:32:44.043]             signalCondition <- base::signalCondition
[10:32:44.043]             sys.calls <- base::sys.calls
[10:32:44.043]             `[[` <- base::`[[`
[10:32:44.043]             `+` <- base::`+`
[10:32:44.043]             `<<-` <- base::`<<-`
[10:32:44.043]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:44.043]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:44.043]                   3L)]
[10:32:44.043]             }
[10:32:44.043]             function(cond) {
[10:32:44.043]                 is_error <- inherits(cond, "error")
[10:32:44.043]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:44.043]                   NULL)
[10:32:44.043]                 if (is_error) {
[10:32:44.043]                   sessionInformation <- function() {
[10:32:44.043]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:44.043]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:44.043]                       search = base::search(), system = base::Sys.info())
[10:32:44.043]                   }
[10:32:44.043]                   ...future.conditions[[length(...future.conditions) + 
[10:32:44.043]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:44.043]                     cond$call), session = sessionInformation(), 
[10:32:44.043]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:44.043]                   signalCondition(cond)
[10:32:44.043]                 }
[10:32:44.043]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:44.043]                 "immediateCondition"))) {
[10:32:44.043]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:44.043]                   ...future.conditions[[length(...future.conditions) + 
[10:32:44.043]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:44.043]                   if (TRUE && !signal) {
[10:32:44.043]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:44.043]                     {
[10:32:44.043]                       inherits <- base::inherits
[10:32:44.043]                       invokeRestart <- base::invokeRestart
[10:32:44.043]                       is.null <- base::is.null
[10:32:44.043]                       muffled <- FALSE
[10:32:44.043]                       if (inherits(cond, "message")) {
[10:32:44.043]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:44.043]                         if (muffled) 
[10:32:44.043]                           invokeRestart("muffleMessage")
[10:32:44.043]                       }
[10:32:44.043]                       else if (inherits(cond, "warning")) {
[10:32:44.043]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:44.043]                         if (muffled) 
[10:32:44.043]                           invokeRestart("muffleWarning")
[10:32:44.043]                       }
[10:32:44.043]                       else if (inherits(cond, "condition")) {
[10:32:44.043]                         if (!is.null(pattern)) {
[10:32:44.043]                           computeRestarts <- base::computeRestarts
[10:32:44.043]                           grepl <- base::grepl
[10:32:44.043]                           restarts <- computeRestarts(cond)
[10:32:44.043]                           for (restart in restarts) {
[10:32:44.043]                             name <- restart$name
[10:32:44.043]                             if (is.null(name)) 
[10:32:44.043]                               next
[10:32:44.043]                             if (!grepl(pattern, name)) 
[10:32:44.043]                               next
[10:32:44.043]                             invokeRestart(restart)
[10:32:44.043]                             muffled <- TRUE
[10:32:44.043]                             break
[10:32:44.043]                           }
[10:32:44.043]                         }
[10:32:44.043]                       }
[10:32:44.043]                       invisible(muffled)
[10:32:44.043]                     }
[10:32:44.043]                     muffleCondition(cond, pattern = "^muffle")
[10:32:44.043]                   }
[10:32:44.043]                 }
[10:32:44.043]                 else {
[10:32:44.043]                   if (TRUE) {
[10:32:44.043]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:44.043]                     {
[10:32:44.043]                       inherits <- base::inherits
[10:32:44.043]                       invokeRestart <- base::invokeRestart
[10:32:44.043]                       is.null <- base::is.null
[10:32:44.043]                       muffled <- FALSE
[10:32:44.043]                       if (inherits(cond, "message")) {
[10:32:44.043]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:44.043]                         if (muffled) 
[10:32:44.043]                           invokeRestart("muffleMessage")
[10:32:44.043]                       }
[10:32:44.043]                       else if (inherits(cond, "warning")) {
[10:32:44.043]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:44.043]                         if (muffled) 
[10:32:44.043]                           invokeRestart("muffleWarning")
[10:32:44.043]                       }
[10:32:44.043]                       else if (inherits(cond, "condition")) {
[10:32:44.043]                         if (!is.null(pattern)) {
[10:32:44.043]                           computeRestarts <- base::computeRestarts
[10:32:44.043]                           grepl <- base::grepl
[10:32:44.043]                           restarts <- computeRestarts(cond)
[10:32:44.043]                           for (restart in restarts) {
[10:32:44.043]                             name <- restart$name
[10:32:44.043]                             if (is.null(name)) 
[10:32:44.043]                               next
[10:32:44.043]                             if (!grepl(pattern, name)) 
[10:32:44.043]                               next
[10:32:44.043]                             invokeRestart(restart)
[10:32:44.043]                             muffled <- TRUE
[10:32:44.043]                             break
[10:32:44.043]                           }
[10:32:44.043]                         }
[10:32:44.043]                       }
[10:32:44.043]                       invisible(muffled)
[10:32:44.043]                     }
[10:32:44.043]                     muffleCondition(cond, pattern = "^muffle")
[10:32:44.043]                   }
[10:32:44.043]                 }
[10:32:44.043]             }
[10:32:44.043]         }))
[10:32:44.043]     }, error = function(ex) {
[10:32:44.043]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:44.043]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:44.043]                 ...future.rng), started = ...future.startTime, 
[10:32:44.043]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:44.043]             version = "1.8"), class = "FutureResult")
[10:32:44.043]     }, finally = {
[10:32:44.043]         if (!identical(...future.workdir, getwd())) 
[10:32:44.043]             setwd(...future.workdir)
[10:32:44.043]         {
[10:32:44.043]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:44.043]                 ...future.oldOptions$nwarnings <- NULL
[10:32:44.043]             }
[10:32:44.043]             base::options(...future.oldOptions)
[10:32:44.043]             if (.Platform$OS.type == "windows") {
[10:32:44.043]                 old_names <- names(...future.oldEnvVars)
[10:32:44.043]                 envs <- base::Sys.getenv()
[10:32:44.043]                 names <- names(envs)
[10:32:44.043]                 common <- intersect(names, old_names)
[10:32:44.043]                 added <- setdiff(names, old_names)
[10:32:44.043]                 removed <- setdiff(old_names, names)
[10:32:44.043]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:44.043]                   envs[common]]
[10:32:44.043]                 NAMES <- toupper(changed)
[10:32:44.043]                 args <- list()
[10:32:44.043]                 for (kk in seq_along(NAMES)) {
[10:32:44.043]                   name <- changed[[kk]]
[10:32:44.043]                   NAME <- NAMES[[kk]]
[10:32:44.043]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:44.043]                     next
[10:32:44.043]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:44.043]                 }
[10:32:44.043]                 NAMES <- toupper(added)
[10:32:44.043]                 for (kk in seq_along(NAMES)) {
[10:32:44.043]                   name <- added[[kk]]
[10:32:44.043]                   NAME <- NAMES[[kk]]
[10:32:44.043]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:44.043]                     next
[10:32:44.043]                   args[[name]] <- ""
[10:32:44.043]                 }
[10:32:44.043]                 NAMES <- toupper(removed)
[10:32:44.043]                 for (kk in seq_along(NAMES)) {
[10:32:44.043]                   name <- removed[[kk]]
[10:32:44.043]                   NAME <- NAMES[[kk]]
[10:32:44.043]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:44.043]                     next
[10:32:44.043]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:44.043]                 }
[10:32:44.043]                 if (length(args) > 0) 
[10:32:44.043]                   base::do.call(base::Sys.setenv, args = args)
[10:32:44.043]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:44.043]             }
[10:32:44.043]             else {
[10:32:44.043]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:44.043]             }
[10:32:44.043]             {
[10:32:44.043]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:44.043]                   0L) {
[10:32:44.043]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:44.043]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:44.043]                   base::options(opts)
[10:32:44.043]                 }
[10:32:44.043]                 {
[10:32:44.043]                   {
[10:32:44.043]                     base::options(mc.cores = ...future.mc.cores.old)
[10:32:44.043]                     NULL
[10:32:44.043]                   }
[10:32:44.043]                   options(future.plan = NULL)
[10:32:44.043]                   if (is.na(NA_character_)) 
[10:32:44.043]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:44.043]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:44.043]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:44.043]                     .init = FALSE)
[10:32:44.043]                 }
[10:32:44.043]             }
[10:32:44.043]         }
[10:32:44.043]     })
[10:32:44.043]     if (TRUE) {
[10:32:44.043]         base::sink(type = "output", split = FALSE)
[10:32:44.043]         if (TRUE) {
[10:32:44.043]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:44.043]         }
[10:32:44.043]         else {
[10:32:44.043]             ...future.result["stdout"] <- base::list(NULL)
[10:32:44.043]         }
[10:32:44.043]         base::close(...future.stdout)
[10:32:44.043]         ...future.stdout <- NULL
[10:32:44.043]     }
[10:32:44.043]     ...future.result$conditions <- ...future.conditions
[10:32:44.043]     ...future.result$finished <- base::Sys.time()
[10:32:44.043]     ...future.result
[10:32:44.043] }
[10:32:44.045] assign_globals() ...
[10:32:44.045] List of 1
[10:32:44.045]  $ a: num 1
[10:32:44.045]  - attr(*, "where")=List of 1
[10:32:44.045]   ..$ a:<environment: R_EmptyEnv> 
[10:32:44.045]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:32:44.045]  - attr(*, "resolved")= logi FALSE
[10:32:44.045]  - attr(*, "total_size")= num 56
[10:32:44.045]  - attr(*, "already-done")= logi TRUE
[10:32:44.048] - copied ‘a’ to environment
[10:32:44.048] assign_globals() ... done
[10:32:44.049] requestCore(): workers = 2
[10:32:44.050] MulticoreFuture started
[10:32:44.051] - Launch lazy future ... done
[10:32:44.051] run() for ‘MulticoreFuture’ ... done
[10:32:44.051] result() for MulticoreFuture ...
[10:32:44.051] plan(): Setting new future strategy stack:
[10:32:44.052] List of future strategies:
[10:32:44.052] 1. sequential:
[10:32:44.052]    - args: function (..., envir = parent.frame())
[10:32:44.052]    - tweaked: FALSE
[10:32:44.052]    - call: NULL
[10:32:44.052] plan(): nbrOfWorkers() = 1
[10:32:44.054] plan(): Setting new future strategy stack:
[10:32:44.054] List of future strategies:
[10:32:44.054] 1. multicore:
[10:32:44.054]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:32:44.054]    - tweaked: FALSE
[10:32:44.054]    - call: plan(strategy)
[10:32:44.059] plan(): nbrOfWorkers() = 2
[10:32:44.060] result() for MulticoreFuture ...
[10:32:44.060] result() for MulticoreFuture ... done
[10:32:44.061] result() for MulticoreFuture ... done
[10:32:44.061] result() for MulticoreFuture ...
[10:32:44.061] result() for MulticoreFuture ... done
[10:32:44.061] getGlobalsAndPackages() ...
[10:32:44.061] Searching for globals...
[10:32:44.063] - globals found: [3] ‘{’, ‘*’, ‘a’
[10:32:44.063] Searching for globals ... DONE
[10:32:44.063] Resolving globals: FALSE
[10:32:44.063] The total size of the 1 globals is 56 bytes (56 bytes)
[10:32:44.064] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[10:32:44.064] - globals: [1] ‘a’
[10:32:44.064] 
[10:32:44.064] getGlobalsAndPackages() ... DONE
[10:32:44.065] run() for ‘Future’ ...
[10:32:44.065] - state: ‘created’
[10:32:44.065] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:32:44.069] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:32:44.069] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:32:44.069]   - Field: ‘label’
[10:32:44.069]   - Field: ‘local’
[10:32:44.069]   - Field: ‘owner’
[10:32:44.069]   - Field: ‘envir’
[10:32:44.070]   - Field: ‘workers’
[10:32:44.070]   - Field: ‘packages’
[10:32:44.070]   - Field: ‘gc’
[10:32:44.070]   - Field: ‘job’
[10:32:44.070]   - Field: ‘conditions’
[10:32:44.070]   - Field: ‘expr’
[10:32:44.070]   - Field: ‘uuid’
[10:32:44.070]   - Field: ‘seed’
[10:32:44.070]   - Field: ‘version’
[10:32:44.071]   - Field: ‘result’
[10:32:44.071]   - Field: ‘asynchronous’
[10:32:44.071]   - Field: ‘calls’
[10:32:44.071]   - Field: ‘globals’
[10:32:44.071]   - Field: ‘stdout’
[10:32:44.071]   - Field: ‘earlySignal’
[10:32:44.071]   - Field: ‘lazy’
[10:32:44.071]   - Field: ‘state’
[10:32:44.071] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:32:44.072] - Launch lazy future ...
[10:32:44.072] Packages needed by the future expression (n = 0): <none>
[10:32:44.072] Packages needed by future strategies (n = 0): <none>
[10:32:44.073] {
[10:32:44.073]     {
[10:32:44.073]         {
[10:32:44.073]             ...future.startTime <- base::Sys.time()
[10:32:44.073]             {
[10:32:44.073]                 {
[10:32:44.073]                   {
[10:32:44.073]                     {
[10:32:44.073]                       base::local({
[10:32:44.073]                         has_future <- base::requireNamespace("future", 
[10:32:44.073]                           quietly = TRUE)
[10:32:44.073]                         if (has_future) {
[10:32:44.073]                           ns <- base::getNamespace("future")
[10:32:44.073]                           version <- ns[[".package"]][["version"]]
[10:32:44.073]                           if (is.null(version)) 
[10:32:44.073]                             version <- utils::packageVersion("future")
[10:32:44.073]                         }
[10:32:44.073]                         else {
[10:32:44.073]                           version <- NULL
[10:32:44.073]                         }
[10:32:44.073]                         if (!has_future || version < "1.8.0") {
[10:32:44.073]                           info <- base::c(r_version = base::gsub("R version ", 
[10:32:44.073]                             "", base::R.version$version.string), 
[10:32:44.073]                             platform = base::sprintf("%s (%s-bit)", 
[10:32:44.073]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:44.073]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:44.073]                               "release", "version")], collapse = " "), 
[10:32:44.073]                             hostname = base::Sys.info()[["nodename"]])
[10:32:44.073]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:32:44.073]                             info)
[10:32:44.073]                           info <- base::paste(info, collapse = "; ")
[10:32:44.073]                           if (!has_future) {
[10:32:44.073]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:44.073]                               info)
[10:32:44.073]                           }
[10:32:44.073]                           else {
[10:32:44.073]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:44.073]                               info, version)
[10:32:44.073]                           }
[10:32:44.073]                           base::stop(msg)
[10:32:44.073]                         }
[10:32:44.073]                       })
[10:32:44.073]                     }
[10:32:44.073]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:32:44.073]                     base::options(mc.cores = 1L)
[10:32:44.073]                   }
[10:32:44.073]                   ...future.strategy.old <- future::plan("list")
[10:32:44.073]                   options(future.plan = NULL)
[10:32:44.073]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:44.073]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:44.073]                 }
[10:32:44.073]                 ...future.workdir <- getwd()
[10:32:44.073]             }
[10:32:44.073]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:44.073]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:44.073]         }
[10:32:44.073]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:44.073]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:44.073]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:44.073]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:44.073]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:44.073]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:44.073]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:44.073]             base::names(...future.oldOptions))
[10:32:44.073]     }
[10:32:44.073]     if (FALSE) {
[10:32:44.073]     }
[10:32:44.073]     else {
[10:32:44.073]         if (TRUE) {
[10:32:44.073]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:44.073]                 open = "w")
[10:32:44.073]         }
[10:32:44.073]         else {
[10:32:44.073]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:44.073]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:44.073]         }
[10:32:44.073]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:44.073]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:44.073]             base::sink(type = "output", split = FALSE)
[10:32:44.073]             base::close(...future.stdout)
[10:32:44.073]         }, add = TRUE)
[10:32:44.073]     }
[10:32:44.073]     ...future.frame <- base::sys.nframe()
[10:32:44.073]     ...future.conditions <- base::list()
[10:32:44.073]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:44.073]     if (FALSE) {
[10:32:44.073]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:44.073]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:44.073]     }
[10:32:44.073]     ...future.result <- base::tryCatch({
[10:32:44.073]         base::withCallingHandlers({
[10:32:44.073]             ...future.value <- base::withVisible(base::local({
[10:32:44.073]                 withCallingHandlers({
[10:32:44.073]                   {
[10:32:44.073]                     2 * a
[10:32:44.073]                   }
[10:32:44.073]                 }, immediateCondition = function(cond) {
[10:32:44.073]                   save_rds <- function (object, pathname, ...) 
[10:32:44.073]                   {
[10:32:44.073]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:32:44.073]                     if (file_test("-f", pathname_tmp)) {
[10:32:44.073]                       fi_tmp <- file.info(pathname_tmp)
[10:32:44.073]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:32:44.073]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:32:44.073]                         fi_tmp[["mtime"]])
[10:32:44.073]                     }
[10:32:44.073]                     tryCatch({
[10:32:44.073]                       saveRDS(object, file = pathname_tmp, ...)
[10:32:44.073]                     }, error = function(ex) {
[10:32:44.073]                       msg <- conditionMessage(ex)
[10:32:44.073]                       fi_tmp <- file.info(pathname_tmp)
[10:32:44.073]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:32:44.073]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:32:44.073]                         fi_tmp[["mtime"]], msg)
[10:32:44.073]                       ex$message <- msg
[10:32:44.073]                       stop(ex)
[10:32:44.073]                     })
[10:32:44.073]                     stopifnot(file_test("-f", pathname_tmp))
[10:32:44.073]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:32:44.073]                     if (!res || file_test("-f", pathname_tmp)) {
[10:32:44.073]                       fi_tmp <- file.info(pathname_tmp)
[10:32:44.073]                       fi <- file.info(pathname)
[10:32:44.073]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:32:44.073]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:32:44.073]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:32:44.073]                         fi[["size"]], fi[["mtime"]])
[10:32:44.073]                       stop(msg)
[10:32:44.073]                     }
[10:32:44.073]                     invisible(pathname)
[10:32:44.073]                   }
[10:32:44.073]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:32:44.073]                     rootPath = tempdir()) 
[10:32:44.073]                   {
[10:32:44.073]                     obj <- list(time = Sys.time(), condition = cond)
[10:32:44.073]                     file <- tempfile(pattern = class(cond)[1], 
[10:32:44.073]                       tmpdir = path, fileext = ".rds")
[10:32:44.073]                     save_rds(obj, file)
[10:32:44.073]                   }
[10:32:44.073]                   saveImmediateCondition(cond, path = "/tmp/RtmpFz1RKJ/.future/immediateConditions")
[10:32:44.073]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:44.073]                   {
[10:32:44.073]                     inherits <- base::inherits
[10:32:44.073]                     invokeRestart <- base::invokeRestart
[10:32:44.073]                     is.null <- base::is.null
[10:32:44.073]                     muffled <- FALSE
[10:32:44.073]                     if (inherits(cond, "message")) {
[10:32:44.073]                       muffled <- grepl(pattern, "muffleMessage")
[10:32:44.073]                       if (muffled) 
[10:32:44.073]                         invokeRestart("muffleMessage")
[10:32:44.073]                     }
[10:32:44.073]                     else if (inherits(cond, "warning")) {
[10:32:44.073]                       muffled <- grepl(pattern, "muffleWarning")
[10:32:44.073]                       if (muffled) 
[10:32:44.073]                         invokeRestart("muffleWarning")
[10:32:44.073]                     }
[10:32:44.073]                     else if (inherits(cond, "condition")) {
[10:32:44.073]                       if (!is.null(pattern)) {
[10:32:44.073]                         computeRestarts <- base::computeRestarts
[10:32:44.073]                         grepl <- base::grepl
[10:32:44.073]                         restarts <- computeRestarts(cond)
[10:32:44.073]                         for (restart in restarts) {
[10:32:44.073]                           name <- restart$name
[10:32:44.073]                           if (is.null(name)) 
[10:32:44.073]                             next
[10:32:44.073]                           if (!grepl(pattern, name)) 
[10:32:44.073]                             next
[10:32:44.073]                           invokeRestart(restart)
[10:32:44.073]                           muffled <- TRUE
[10:32:44.073]                           break
[10:32:44.073]                         }
[10:32:44.073]                       }
[10:32:44.073]                     }
[10:32:44.073]                     invisible(muffled)
[10:32:44.073]                   }
[10:32:44.073]                   muffleCondition(cond)
[10:32:44.073]                 })
[10:32:44.073]             }))
[10:32:44.073]             future::FutureResult(value = ...future.value$value, 
[10:32:44.073]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:44.073]                   ...future.rng), globalenv = if (FALSE) 
[10:32:44.073]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:44.073]                     ...future.globalenv.names))
[10:32:44.073]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:44.073]         }, condition = base::local({
[10:32:44.073]             c <- base::c
[10:32:44.073]             inherits <- base::inherits
[10:32:44.073]             invokeRestart <- base::invokeRestart
[10:32:44.073]             length <- base::length
[10:32:44.073]             list <- base::list
[10:32:44.073]             seq.int <- base::seq.int
[10:32:44.073]             signalCondition <- base::signalCondition
[10:32:44.073]             sys.calls <- base::sys.calls
[10:32:44.073]             `[[` <- base::`[[`
[10:32:44.073]             `+` <- base::`+`
[10:32:44.073]             `<<-` <- base::`<<-`
[10:32:44.073]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:44.073]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:44.073]                   3L)]
[10:32:44.073]             }
[10:32:44.073]             function(cond) {
[10:32:44.073]                 is_error <- inherits(cond, "error")
[10:32:44.073]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:44.073]                   NULL)
[10:32:44.073]                 if (is_error) {
[10:32:44.073]                   sessionInformation <- function() {
[10:32:44.073]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:44.073]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:44.073]                       search = base::search(), system = base::Sys.info())
[10:32:44.073]                   }
[10:32:44.073]                   ...future.conditions[[length(...future.conditions) + 
[10:32:44.073]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:44.073]                     cond$call), session = sessionInformation(), 
[10:32:44.073]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:44.073]                   signalCondition(cond)
[10:32:44.073]                 }
[10:32:44.073]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:44.073]                 "immediateCondition"))) {
[10:32:44.073]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:44.073]                   ...future.conditions[[length(...future.conditions) + 
[10:32:44.073]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:44.073]                   if (TRUE && !signal) {
[10:32:44.073]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:44.073]                     {
[10:32:44.073]                       inherits <- base::inherits
[10:32:44.073]                       invokeRestart <- base::invokeRestart
[10:32:44.073]                       is.null <- base::is.null
[10:32:44.073]                       muffled <- FALSE
[10:32:44.073]                       if (inherits(cond, "message")) {
[10:32:44.073]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:44.073]                         if (muffled) 
[10:32:44.073]                           invokeRestart("muffleMessage")
[10:32:44.073]                       }
[10:32:44.073]                       else if (inherits(cond, "warning")) {
[10:32:44.073]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:44.073]                         if (muffled) 
[10:32:44.073]                           invokeRestart("muffleWarning")
[10:32:44.073]                       }
[10:32:44.073]                       else if (inherits(cond, "condition")) {
[10:32:44.073]                         if (!is.null(pattern)) {
[10:32:44.073]                           computeRestarts <- base::computeRestarts
[10:32:44.073]                           grepl <- base::grepl
[10:32:44.073]                           restarts <- computeRestarts(cond)
[10:32:44.073]                           for (restart in restarts) {
[10:32:44.073]                             name <- restart$name
[10:32:44.073]                             if (is.null(name)) 
[10:32:44.073]                               next
[10:32:44.073]                             if (!grepl(pattern, name)) 
[10:32:44.073]                               next
[10:32:44.073]                             invokeRestart(restart)
[10:32:44.073]                             muffled <- TRUE
[10:32:44.073]                             break
[10:32:44.073]                           }
[10:32:44.073]                         }
[10:32:44.073]                       }
[10:32:44.073]                       invisible(muffled)
[10:32:44.073]                     }
[10:32:44.073]                     muffleCondition(cond, pattern = "^muffle")
[10:32:44.073]                   }
[10:32:44.073]                 }
[10:32:44.073]                 else {
[10:32:44.073]                   if (TRUE) {
[10:32:44.073]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:44.073]                     {
[10:32:44.073]                       inherits <- base::inherits
[10:32:44.073]                       invokeRestart <- base::invokeRestart
[10:32:44.073]                       is.null <- base::is.null
[10:32:44.073]                       muffled <- FALSE
[10:32:44.073]                       if (inherits(cond, "message")) {
[10:32:44.073]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:44.073]                         if (muffled) 
[10:32:44.073]                           invokeRestart("muffleMessage")
[10:32:44.073]                       }
[10:32:44.073]                       else if (inherits(cond, "warning")) {
[10:32:44.073]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:44.073]                         if (muffled) 
[10:32:44.073]                           invokeRestart("muffleWarning")
[10:32:44.073]                       }
[10:32:44.073]                       else if (inherits(cond, "condition")) {
[10:32:44.073]                         if (!is.null(pattern)) {
[10:32:44.073]                           computeRestarts <- base::computeRestarts
[10:32:44.073]                           grepl <- base::grepl
[10:32:44.073]                           restarts <- computeRestarts(cond)
[10:32:44.073]                           for (restart in restarts) {
[10:32:44.073]                             name <- restart$name
[10:32:44.073]                             if (is.null(name)) 
[10:32:44.073]                               next
[10:32:44.073]                             if (!grepl(pattern, name)) 
[10:32:44.073]                               next
[10:32:44.073]                             invokeRestart(restart)
[10:32:44.073]                             muffled <- TRUE
[10:32:44.073]                             break
[10:32:44.073]                           }
[10:32:44.073]                         }
[10:32:44.073]                       }
[10:32:44.073]                       invisible(muffled)
[10:32:44.073]                     }
[10:32:44.073]                     muffleCondition(cond, pattern = "^muffle")
[10:32:44.073]                   }
[10:32:44.073]                 }
[10:32:44.073]             }
[10:32:44.073]         }))
[10:32:44.073]     }, error = function(ex) {
[10:32:44.073]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:44.073]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:44.073]                 ...future.rng), started = ...future.startTime, 
[10:32:44.073]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:44.073]             version = "1.8"), class = "FutureResult")
[10:32:44.073]     }, finally = {
[10:32:44.073]         if (!identical(...future.workdir, getwd())) 
[10:32:44.073]             setwd(...future.workdir)
[10:32:44.073]         {
[10:32:44.073]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:44.073]                 ...future.oldOptions$nwarnings <- NULL
[10:32:44.073]             }
[10:32:44.073]             base::options(...future.oldOptions)
[10:32:44.073]             if (.Platform$OS.type == "windows") {
[10:32:44.073]                 old_names <- names(...future.oldEnvVars)
[10:32:44.073]                 envs <- base::Sys.getenv()
[10:32:44.073]                 names <- names(envs)
[10:32:44.073]                 common <- intersect(names, old_names)
[10:32:44.073]                 added <- setdiff(names, old_names)
[10:32:44.073]                 removed <- setdiff(old_names, names)
[10:32:44.073]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:44.073]                   envs[common]]
[10:32:44.073]                 NAMES <- toupper(changed)
[10:32:44.073]                 args <- list()
[10:32:44.073]                 for (kk in seq_along(NAMES)) {
[10:32:44.073]                   name <- changed[[kk]]
[10:32:44.073]                   NAME <- NAMES[[kk]]
[10:32:44.073]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:44.073]                     next
[10:32:44.073]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:44.073]                 }
[10:32:44.073]                 NAMES <- toupper(added)
[10:32:44.073]                 for (kk in seq_along(NAMES)) {
[10:32:44.073]                   name <- added[[kk]]
[10:32:44.073]                   NAME <- NAMES[[kk]]
[10:32:44.073]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:44.073]                     next
[10:32:44.073]                   args[[name]] <- ""
[10:32:44.073]                 }
[10:32:44.073]                 NAMES <- toupper(removed)
[10:32:44.073]                 for (kk in seq_along(NAMES)) {
[10:32:44.073]                   name <- removed[[kk]]
[10:32:44.073]                   NAME <- NAMES[[kk]]
[10:32:44.073]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:44.073]                     next
[10:32:44.073]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:44.073]                 }
[10:32:44.073]                 if (length(args) > 0) 
[10:32:44.073]                   base::do.call(base::Sys.setenv, args = args)
[10:32:44.073]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:44.073]             }
[10:32:44.073]             else {
[10:32:44.073]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:44.073]             }
[10:32:44.073]             {
[10:32:44.073]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:44.073]                   0L) {
[10:32:44.073]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:44.073]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:44.073]                   base::options(opts)
[10:32:44.073]                 }
[10:32:44.073]                 {
[10:32:44.073]                   {
[10:32:44.073]                     base::options(mc.cores = ...future.mc.cores.old)
[10:32:44.073]                     NULL
[10:32:44.073]                   }
[10:32:44.073]                   options(future.plan = NULL)
[10:32:44.073]                   if (is.na(NA_character_)) 
[10:32:44.073]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:44.073]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:44.073]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:44.073]                     .init = FALSE)
[10:32:44.073]                 }
[10:32:44.073]             }
[10:32:44.073]         }
[10:32:44.073]     })
[10:32:44.073]     if (TRUE) {
[10:32:44.073]         base::sink(type = "output", split = FALSE)
[10:32:44.073]         if (TRUE) {
[10:32:44.073]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:44.073]         }
[10:32:44.073]         else {
[10:32:44.073]             ...future.result["stdout"] <- base::list(NULL)
[10:32:44.073]         }
[10:32:44.073]         base::close(...future.stdout)
[10:32:44.073]         ...future.stdout <- NULL
[10:32:44.073]     }
[10:32:44.073]     ...future.result$conditions <- ...future.conditions
[10:32:44.073]     ...future.result$finished <- base::Sys.time()
[10:32:44.073]     ...future.result
[10:32:44.073] }
[10:32:44.075] assign_globals() ...
[10:32:44.075] List of 1
[10:32:44.075]  $ a: num 1
[10:32:44.075]  - attr(*, "where")=List of 1
[10:32:44.075]   ..$ a:<environment: R_EmptyEnv> 
[10:32:44.075]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:32:44.075]  - attr(*, "resolved")= logi FALSE
[10:32:44.075]  - attr(*, "total_size")= num 56
[10:32:44.075]  - attr(*, "already-done")= logi TRUE
[10:32:44.078] - copied ‘a’ to environment
[10:32:44.078] assign_globals() ... done
[10:32:44.079] requestCore(): workers = 2
[10:32:44.080] MulticoreFuture started
[10:32:44.081] - Launch lazy future ... done
[10:32:44.081] run() for ‘MulticoreFuture’ ... done
[10:32:44.081] result() for MulticoreFuture ...
[10:32:44.082] plan(): Setting new future strategy stack:
[10:32:44.082] List of future strategies:
[10:32:44.082] 1. sequential:
[10:32:44.082]    - args: function (..., envir = parent.frame())
[10:32:44.082]    - tweaked: FALSE
[10:32:44.082]    - call: NULL
[10:32:44.083] plan(): nbrOfWorkers() = 1
[10:32:44.089] plan(): Setting new future strategy stack:
[10:32:44.089] List of future strategies:
[10:32:44.089] 1. multicore:
[10:32:44.089]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:32:44.089]    - tweaked: FALSE
[10:32:44.089]    - call: plan(strategy)
[10:32:44.095] plan(): nbrOfWorkers() = 2
[10:32:44.096] result() for MulticoreFuture ...
[10:32:44.096] result() for MulticoreFuture ... done
[10:32:44.097] result() for MulticoreFuture ... done
[10:32:44.099] result() for MulticoreFuture ...
[10:32:44.099] result() for MulticoreFuture ... done
[10:32:44.100] getGlobalsAndPackages() ...
[10:32:44.100] Searching for globals...
[10:32:44.101] - globals found: [3] ‘{’, ‘*’, ‘a’
[10:32:44.101] Searching for globals ... DONE
[10:32:44.102] Resolving globals: FALSE
[10:32:44.102] The total size of the 1 globals is 56 bytes (56 bytes)
[10:32:44.103] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[10:32:44.103] - globals: [1] ‘a’
[10:32:44.103] 
[10:32:44.103] getGlobalsAndPackages() ... DONE
[10:32:44.103] run() for ‘Future’ ...
[10:32:44.104] - state: ‘created’
[10:32:44.104] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:32:44.108] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:32:44.108] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:32:44.108]   - Field: ‘label’
[10:32:44.108]   - Field: ‘local’
[10:32:44.108]   - Field: ‘owner’
[10:32:44.108]   - Field: ‘envir’
[10:32:44.109]   - Field: ‘workers’
[10:32:44.109]   - Field: ‘packages’
[10:32:44.109]   - Field: ‘gc’
[10:32:44.109]   - Field: ‘job’
[10:32:44.109]   - Field: ‘conditions’
[10:32:44.109]   - Field: ‘expr’
[10:32:44.109]   - Field: ‘uuid’
[10:32:44.109]   - Field: ‘seed’
[10:32:44.110]   - Field: ‘version’
[10:32:44.110]   - Field: ‘result’
[10:32:44.110]   - Field: ‘asynchronous’
[10:32:44.110]   - Field: ‘calls’
[10:32:44.110]   - Field: ‘globals’
[10:32:44.110]   - Field: ‘stdout’
[10:32:44.110]   - Field: ‘earlySignal’
[10:32:44.110]   - Field: ‘lazy’
[10:32:44.110]   - Field: ‘state’
[10:32:44.111] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:32:44.111] - Launch lazy future ...
[10:32:44.111] Packages needed by the future expression (n = 0): <none>
[10:32:44.111] Packages needed by future strategies (n = 0): <none>
[10:32:44.112] {
[10:32:44.112]     {
[10:32:44.112]         {
[10:32:44.112]             ...future.startTime <- base::Sys.time()
[10:32:44.112]             {
[10:32:44.112]                 {
[10:32:44.112]                   {
[10:32:44.112]                     {
[10:32:44.112]                       base::local({
[10:32:44.112]                         has_future <- base::requireNamespace("future", 
[10:32:44.112]                           quietly = TRUE)
[10:32:44.112]                         if (has_future) {
[10:32:44.112]                           ns <- base::getNamespace("future")
[10:32:44.112]                           version <- ns[[".package"]][["version"]]
[10:32:44.112]                           if (is.null(version)) 
[10:32:44.112]                             version <- utils::packageVersion("future")
[10:32:44.112]                         }
[10:32:44.112]                         else {
[10:32:44.112]                           version <- NULL
[10:32:44.112]                         }
[10:32:44.112]                         if (!has_future || version < "1.8.0") {
[10:32:44.112]                           info <- base::c(r_version = base::gsub("R version ", 
[10:32:44.112]                             "", base::R.version$version.string), 
[10:32:44.112]                             platform = base::sprintf("%s (%s-bit)", 
[10:32:44.112]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:44.112]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:44.112]                               "release", "version")], collapse = " "), 
[10:32:44.112]                             hostname = base::Sys.info()[["nodename"]])
[10:32:44.112]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:32:44.112]                             info)
[10:32:44.112]                           info <- base::paste(info, collapse = "; ")
[10:32:44.112]                           if (!has_future) {
[10:32:44.112]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:44.112]                               info)
[10:32:44.112]                           }
[10:32:44.112]                           else {
[10:32:44.112]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:44.112]                               info, version)
[10:32:44.112]                           }
[10:32:44.112]                           base::stop(msg)
[10:32:44.112]                         }
[10:32:44.112]                       })
[10:32:44.112]                     }
[10:32:44.112]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:32:44.112]                     base::options(mc.cores = 1L)
[10:32:44.112]                   }
[10:32:44.112]                   ...future.strategy.old <- future::plan("list")
[10:32:44.112]                   options(future.plan = NULL)
[10:32:44.112]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:44.112]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:44.112]                 }
[10:32:44.112]                 ...future.workdir <- getwd()
[10:32:44.112]             }
[10:32:44.112]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:44.112]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:44.112]         }
[10:32:44.112]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:44.112]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:44.112]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:44.112]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:44.112]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:44.112]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:44.112]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:44.112]             base::names(...future.oldOptions))
[10:32:44.112]     }
[10:32:44.112]     if (FALSE) {
[10:32:44.112]     }
[10:32:44.112]     else {
[10:32:44.112]         if (TRUE) {
[10:32:44.112]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:44.112]                 open = "w")
[10:32:44.112]         }
[10:32:44.112]         else {
[10:32:44.112]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:44.112]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:44.112]         }
[10:32:44.112]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:44.112]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:44.112]             base::sink(type = "output", split = FALSE)
[10:32:44.112]             base::close(...future.stdout)
[10:32:44.112]         }, add = TRUE)
[10:32:44.112]     }
[10:32:44.112]     ...future.frame <- base::sys.nframe()
[10:32:44.112]     ...future.conditions <- base::list()
[10:32:44.112]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:44.112]     if (FALSE) {
[10:32:44.112]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:44.112]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:44.112]     }
[10:32:44.112]     ...future.result <- base::tryCatch({
[10:32:44.112]         base::withCallingHandlers({
[10:32:44.112]             ...future.value <- base::withVisible(base::local({
[10:32:44.112]                 withCallingHandlers({
[10:32:44.112]                   {
[10:32:44.112]                     2 * a
[10:32:44.112]                   }
[10:32:44.112]                 }, immediateCondition = function(cond) {
[10:32:44.112]                   save_rds <- function (object, pathname, ...) 
[10:32:44.112]                   {
[10:32:44.112]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:32:44.112]                     if (file_test("-f", pathname_tmp)) {
[10:32:44.112]                       fi_tmp <- file.info(pathname_tmp)
[10:32:44.112]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:32:44.112]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:32:44.112]                         fi_tmp[["mtime"]])
[10:32:44.112]                     }
[10:32:44.112]                     tryCatch({
[10:32:44.112]                       saveRDS(object, file = pathname_tmp, ...)
[10:32:44.112]                     }, error = function(ex) {
[10:32:44.112]                       msg <- conditionMessage(ex)
[10:32:44.112]                       fi_tmp <- file.info(pathname_tmp)
[10:32:44.112]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:32:44.112]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:32:44.112]                         fi_tmp[["mtime"]], msg)
[10:32:44.112]                       ex$message <- msg
[10:32:44.112]                       stop(ex)
[10:32:44.112]                     })
[10:32:44.112]                     stopifnot(file_test("-f", pathname_tmp))
[10:32:44.112]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:32:44.112]                     if (!res || file_test("-f", pathname_tmp)) {
[10:32:44.112]                       fi_tmp <- file.info(pathname_tmp)
[10:32:44.112]                       fi <- file.info(pathname)
[10:32:44.112]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:32:44.112]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:32:44.112]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:32:44.112]                         fi[["size"]], fi[["mtime"]])
[10:32:44.112]                       stop(msg)
[10:32:44.112]                     }
[10:32:44.112]                     invisible(pathname)
[10:32:44.112]                   }
[10:32:44.112]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:32:44.112]                     rootPath = tempdir()) 
[10:32:44.112]                   {
[10:32:44.112]                     obj <- list(time = Sys.time(), condition = cond)
[10:32:44.112]                     file <- tempfile(pattern = class(cond)[1], 
[10:32:44.112]                       tmpdir = path, fileext = ".rds")
[10:32:44.112]                     save_rds(obj, file)
[10:32:44.112]                   }
[10:32:44.112]                   saveImmediateCondition(cond, path = "/tmp/RtmpFz1RKJ/.future/immediateConditions")
[10:32:44.112]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:44.112]                   {
[10:32:44.112]                     inherits <- base::inherits
[10:32:44.112]                     invokeRestart <- base::invokeRestart
[10:32:44.112]                     is.null <- base::is.null
[10:32:44.112]                     muffled <- FALSE
[10:32:44.112]                     if (inherits(cond, "message")) {
[10:32:44.112]                       muffled <- grepl(pattern, "muffleMessage")
[10:32:44.112]                       if (muffled) 
[10:32:44.112]                         invokeRestart("muffleMessage")
[10:32:44.112]                     }
[10:32:44.112]                     else if (inherits(cond, "warning")) {
[10:32:44.112]                       muffled <- grepl(pattern, "muffleWarning")
[10:32:44.112]                       if (muffled) 
[10:32:44.112]                         invokeRestart("muffleWarning")
[10:32:44.112]                     }
[10:32:44.112]                     else if (inherits(cond, "condition")) {
[10:32:44.112]                       if (!is.null(pattern)) {
[10:32:44.112]                         computeRestarts <- base::computeRestarts
[10:32:44.112]                         grepl <- base::grepl
[10:32:44.112]                         restarts <- computeRestarts(cond)
[10:32:44.112]                         for (restart in restarts) {
[10:32:44.112]                           name <- restart$name
[10:32:44.112]                           if (is.null(name)) 
[10:32:44.112]                             next
[10:32:44.112]                           if (!grepl(pattern, name)) 
[10:32:44.112]                             next
[10:32:44.112]                           invokeRestart(restart)
[10:32:44.112]                           muffled <- TRUE
[10:32:44.112]                           break
[10:32:44.112]                         }
[10:32:44.112]                       }
[10:32:44.112]                     }
[10:32:44.112]                     invisible(muffled)
[10:32:44.112]                   }
[10:32:44.112]                   muffleCondition(cond)
[10:32:44.112]                 })
[10:32:44.112]             }))
[10:32:44.112]             future::FutureResult(value = ...future.value$value, 
[10:32:44.112]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:44.112]                   ...future.rng), globalenv = if (FALSE) 
[10:32:44.112]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:44.112]                     ...future.globalenv.names))
[10:32:44.112]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:44.112]         }, condition = base::local({
[10:32:44.112]             c <- base::c
[10:32:44.112]             inherits <- base::inherits
[10:32:44.112]             invokeRestart <- base::invokeRestart
[10:32:44.112]             length <- base::length
[10:32:44.112]             list <- base::list
[10:32:44.112]             seq.int <- base::seq.int
[10:32:44.112]             signalCondition <- base::signalCondition
[10:32:44.112]             sys.calls <- base::sys.calls
[10:32:44.112]             `[[` <- base::`[[`
[10:32:44.112]             `+` <- base::`+`
[10:32:44.112]             `<<-` <- base::`<<-`
[10:32:44.112]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:44.112]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:44.112]                   3L)]
[10:32:44.112]             }
[10:32:44.112]             function(cond) {
[10:32:44.112]                 is_error <- inherits(cond, "error")
[10:32:44.112]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:44.112]                   NULL)
[10:32:44.112]                 if (is_error) {
[10:32:44.112]                   sessionInformation <- function() {
[10:32:44.112]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:44.112]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:44.112]                       search = base::search(), system = base::Sys.info())
[10:32:44.112]                   }
[10:32:44.112]                   ...future.conditions[[length(...future.conditions) + 
[10:32:44.112]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:44.112]                     cond$call), session = sessionInformation(), 
[10:32:44.112]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:44.112]                   signalCondition(cond)
[10:32:44.112]                 }
[10:32:44.112]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:44.112]                 "immediateCondition"))) {
[10:32:44.112]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:44.112]                   ...future.conditions[[length(...future.conditions) + 
[10:32:44.112]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:44.112]                   if (TRUE && !signal) {
[10:32:44.112]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:44.112]                     {
[10:32:44.112]                       inherits <- base::inherits
[10:32:44.112]                       invokeRestart <- base::invokeRestart
[10:32:44.112]                       is.null <- base::is.null
[10:32:44.112]                       muffled <- FALSE
[10:32:44.112]                       if (inherits(cond, "message")) {
[10:32:44.112]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:44.112]                         if (muffled) 
[10:32:44.112]                           invokeRestart("muffleMessage")
[10:32:44.112]                       }
[10:32:44.112]                       else if (inherits(cond, "warning")) {
[10:32:44.112]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:44.112]                         if (muffled) 
[10:32:44.112]                           invokeRestart("muffleWarning")
[10:32:44.112]                       }
[10:32:44.112]                       else if (inherits(cond, "condition")) {
[10:32:44.112]                         if (!is.null(pattern)) {
[10:32:44.112]                           computeRestarts <- base::computeRestarts
[10:32:44.112]                           grepl <- base::grepl
[10:32:44.112]                           restarts <- computeRestarts(cond)
[10:32:44.112]                           for (restart in restarts) {
[10:32:44.112]                             name <- restart$name
[10:32:44.112]                             if (is.null(name)) 
[10:32:44.112]                               next
[10:32:44.112]                             if (!grepl(pattern, name)) 
[10:32:44.112]                               next
[10:32:44.112]                             invokeRestart(restart)
[10:32:44.112]                             muffled <- TRUE
[10:32:44.112]                             break
[10:32:44.112]                           }
[10:32:44.112]                         }
[10:32:44.112]                       }
[10:32:44.112]                       invisible(muffled)
[10:32:44.112]                     }
[10:32:44.112]                     muffleCondition(cond, pattern = "^muffle")
[10:32:44.112]                   }
[10:32:44.112]                 }
[10:32:44.112]                 else {
[10:32:44.112]                   if (TRUE) {
[10:32:44.112]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:44.112]                     {
[10:32:44.112]                       inherits <- base::inherits
[10:32:44.112]                       invokeRestart <- base::invokeRestart
[10:32:44.112]                       is.null <- base::is.null
[10:32:44.112]                       muffled <- FALSE
[10:32:44.112]                       if (inherits(cond, "message")) {
[10:32:44.112]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:44.112]                         if (muffled) 
[10:32:44.112]                           invokeRestart("muffleMessage")
[10:32:44.112]                       }
[10:32:44.112]                       else if (inherits(cond, "warning")) {
[10:32:44.112]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:44.112]                         if (muffled) 
[10:32:44.112]                           invokeRestart("muffleWarning")
[10:32:44.112]                       }
[10:32:44.112]                       else if (inherits(cond, "condition")) {
[10:32:44.112]                         if (!is.null(pattern)) {
[10:32:44.112]                           computeRestarts <- base::computeRestarts
[10:32:44.112]                           grepl <- base::grepl
[10:32:44.112]                           restarts <- computeRestarts(cond)
[10:32:44.112]                           for (restart in restarts) {
[10:32:44.112]                             name <- restart$name
[10:32:44.112]                             if (is.null(name)) 
[10:32:44.112]                               next
[10:32:44.112]                             if (!grepl(pattern, name)) 
[10:32:44.112]                               next
[10:32:44.112]                             invokeRestart(restart)
[10:32:44.112]                             muffled <- TRUE
[10:32:44.112]                             break
[10:32:44.112]                           }
[10:32:44.112]                         }
[10:32:44.112]                       }
[10:32:44.112]                       invisible(muffled)
[10:32:44.112]                     }
[10:32:44.112]                     muffleCondition(cond, pattern = "^muffle")
[10:32:44.112]                   }
[10:32:44.112]                 }
[10:32:44.112]             }
[10:32:44.112]         }))
[10:32:44.112]     }, error = function(ex) {
[10:32:44.112]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:44.112]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:44.112]                 ...future.rng), started = ...future.startTime, 
[10:32:44.112]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:44.112]             version = "1.8"), class = "FutureResult")
[10:32:44.112]     }, finally = {
[10:32:44.112]         if (!identical(...future.workdir, getwd())) 
[10:32:44.112]             setwd(...future.workdir)
[10:32:44.112]         {
[10:32:44.112]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:44.112]                 ...future.oldOptions$nwarnings <- NULL
[10:32:44.112]             }
[10:32:44.112]             base::options(...future.oldOptions)
[10:32:44.112]             if (.Platform$OS.type == "windows") {
[10:32:44.112]                 old_names <- names(...future.oldEnvVars)
[10:32:44.112]                 envs <- base::Sys.getenv()
[10:32:44.112]                 names <- names(envs)
[10:32:44.112]                 common <- intersect(names, old_names)
[10:32:44.112]                 added <- setdiff(names, old_names)
[10:32:44.112]                 removed <- setdiff(old_names, names)
[10:32:44.112]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:44.112]                   envs[common]]
[10:32:44.112]                 NAMES <- toupper(changed)
[10:32:44.112]                 args <- list()
[10:32:44.112]                 for (kk in seq_along(NAMES)) {
[10:32:44.112]                   name <- changed[[kk]]
[10:32:44.112]                   NAME <- NAMES[[kk]]
[10:32:44.112]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:44.112]                     next
[10:32:44.112]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:44.112]                 }
[10:32:44.112]                 NAMES <- toupper(added)
[10:32:44.112]                 for (kk in seq_along(NAMES)) {
[10:32:44.112]                   name <- added[[kk]]
[10:32:44.112]                   NAME <- NAMES[[kk]]
[10:32:44.112]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:44.112]                     next
[10:32:44.112]                   args[[name]] <- ""
[10:32:44.112]                 }
[10:32:44.112]                 NAMES <- toupper(removed)
[10:32:44.112]                 for (kk in seq_along(NAMES)) {
[10:32:44.112]                   name <- removed[[kk]]
[10:32:44.112]                   NAME <- NAMES[[kk]]
[10:32:44.112]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:44.112]                     next
[10:32:44.112]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:44.112]                 }
[10:32:44.112]                 if (length(args) > 0) 
[10:32:44.112]                   base::do.call(base::Sys.setenv, args = args)
[10:32:44.112]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:44.112]             }
[10:32:44.112]             else {
[10:32:44.112]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:44.112]             }
[10:32:44.112]             {
[10:32:44.112]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:44.112]                   0L) {
[10:32:44.112]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:44.112]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:44.112]                   base::options(opts)
[10:32:44.112]                 }
[10:32:44.112]                 {
[10:32:44.112]                   {
[10:32:44.112]                     base::options(mc.cores = ...future.mc.cores.old)
[10:32:44.112]                     NULL
[10:32:44.112]                   }
[10:32:44.112]                   options(future.plan = NULL)
[10:32:44.112]                   if (is.na(NA_character_)) 
[10:32:44.112]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:44.112]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:44.112]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:44.112]                     .init = FALSE)
[10:32:44.112]                 }
[10:32:44.112]             }
[10:32:44.112]         }
[10:32:44.112]     })
[10:32:44.112]     if (TRUE) {
[10:32:44.112]         base::sink(type = "output", split = FALSE)
[10:32:44.112]         if (TRUE) {
[10:32:44.112]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:44.112]         }
[10:32:44.112]         else {
[10:32:44.112]             ...future.result["stdout"] <- base::list(NULL)
[10:32:44.112]         }
[10:32:44.112]         base::close(...future.stdout)
[10:32:44.112]         ...future.stdout <- NULL
[10:32:44.112]     }
[10:32:44.112]     ...future.result$conditions <- ...future.conditions
[10:32:44.112]     ...future.result$finished <- base::Sys.time()
[10:32:44.112]     ...future.result
[10:32:44.112] }
[10:32:44.114] assign_globals() ...
[10:32:44.114] List of 1
[10:32:44.114]  $ a: num 1
[10:32:44.114]  - attr(*, "where")=List of 1
[10:32:44.114]   ..$ a:<environment: R_EmptyEnv> 
[10:32:44.114]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:32:44.114]  - attr(*, "resolved")= logi FALSE
[10:32:44.114]  - attr(*, "total_size")= num 56
[10:32:44.114]  - attr(*, "already-done")= logi TRUE
[10:32:44.117] - copied ‘a’ to environment
[10:32:44.117] assign_globals() ... done
[10:32:44.117] requestCore(): workers = 2
[10:32:44.119] MulticoreFuture started
[10:32:44.119] - Launch lazy future ... done
[10:32:44.120] run() for ‘MulticoreFuture’ ... done
[10:32:44.120] result() for MulticoreFuture ...
[10:32:44.120] plan(): Setting new future strategy stack:
[10:32:44.121] List of future strategies:
[10:32:44.121] 1. sequential:
[10:32:44.121]    - args: function (..., envir = parent.frame())
[10:32:44.121]    - tweaked: FALSE
[10:32:44.121]    - call: NULL
[10:32:44.121] plan(): nbrOfWorkers() = 1
[10:32:44.123] plan(): Setting new future strategy stack:
[10:32:44.123] List of future strategies:
[10:32:44.123] 1. multicore:
[10:32:44.123]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:32:44.123]    - tweaked: FALSE
[10:32:44.123]    - call: plan(strategy)
[10:32:44.129] plan(): nbrOfWorkers() = 2
[10:32:44.129] result() for MulticoreFuture ...
[10:32:44.130] result() for MulticoreFuture ... done
[10:32:44.130] result() for MulticoreFuture ... done
[10:32:44.130] result() for MulticoreFuture ...
[10:32:44.130] result() for MulticoreFuture ... done
*** futureAssign() with ‘multicore’ futures ... DONE
*** futureAssign() with ‘multisession’ futures ...
[10:32:44.131] plan(): Setting new future strategy stack:
[10:32:44.131] List of future strategies:
[10:32:44.131] 1. multisession:
[10:32:44.131]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:32:44.131]    - tweaked: FALSE
[10:32:44.131]    - call: plan(strategy)
[10:32:44.132] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:32:44.132] multisession:
[10:32:44.132] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:32:44.132] - tweaked: FALSE
[10:32:44.132] - call: plan(strategy)
[10:32:44.139] getGlobalsAndPackages() ...
[10:32:44.139] Not searching for globals
[10:32:44.139] - globals: [0] <none>
[10:32:44.139] getGlobalsAndPackages() ... DONE
[10:32:44.140] [local output] makeClusterPSOCK() ...
[10:32:44.180] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[10:32:44.181] [local output] Base port: 11009
[10:32:44.181] [local output] Getting setup options for 2 cluster nodes ...
[10:32:44.181] [local output]  - Node 1 of 2 ...
[10:32:44.182] [local output] localMachine=TRUE => revtunnel=FALSE

[10:32:44.183] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpFz1RKJ/worker.rank=1.parallelly.parent=81104.13cd02c7183.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpFz1RKJ/worker.rank=1.parallelly.parent=81104.13cd02c7183.pid")'’
[10:32:44.372] - Possible to infer worker's PID: TRUE
[10:32:44.372] [local output] Rscript port: 11009

[10:32:44.373] [local output]  - Node 2 of 2 ...
[10:32:44.373] [local output] localMachine=TRUE => revtunnel=FALSE

[10:32:44.374] [local output] Rscript port: 11009

[10:32:44.374] [local output] Getting setup options for 2 cluster nodes ... done
[10:32:44.374] [local output]  - Parallel setup requested for some PSOCK nodes
[10:32:44.375] [local output] Setting up PSOCK nodes in parallel
[10:32:44.375] List of 36
[10:32:44.375]  $ worker          : chr "localhost"
[10:32:44.375]   ..- attr(*, "localhost")= logi TRUE
[10:32:44.375]  $ master          : chr "localhost"
[10:32:44.375]  $ port            : int 11009
[10:32:44.375]  $ connectTimeout  : num 120
[10:32:44.375]  $ timeout         : num 2592000
[10:32:44.375]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[10:32:44.375]  $ homogeneous     : logi TRUE
[10:32:44.375]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[10:32:44.375]  $ rscript_envs    : NULL
[10:32:44.375]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:32:44.375]  $ rscript_startup : NULL
[10:32:44.375]  $ rscript_sh      : chr "sh"
[10:32:44.375]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:32:44.375]  $ methods         : logi TRUE
[10:32:44.375]  $ socketOptions   : chr "no-delay"
[10:32:44.375]  $ useXDR          : logi FALSE
[10:32:44.375]  $ outfile         : chr "/dev/null"
[10:32:44.375]  $ renice          : int NA
[10:32:44.375]  $ rshcmd          : NULL
[10:32:44.375]  $ user            : chr(0) 
[10:32:44.375]  $ revtunnel       : logi FALSE
[10:32:44.375]  $ rshlogfile      : NULL
[10:32:44.375]  $ rshopts         : chr(0) 
[10:32:44.375]  $ rank            : int 1
[10:32:44.375]  $ manual          : logi FALSE
[10:32:44.375]  $ dryrun          : logi FALSE
[10:32:44.375]  $ quiet           : logi FALSE
[10:32:44.375]  $ setup_strategy  : chr "parallel"
[10:32:44.375]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:32:44.375]  $ pidfile         : chr "/tmp/RtmpFz1RKJ/worker.rank=1.parallelly.parent=81104.13cd02c7183.pid"
[10:32:44.375]  $ rshcmd_label    : NULL
[10:32:44.375]  $ rsh_call        : NULL
[10:32:44.375]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:32:44.375]  $ localMachine    : logi TRUE
[10:32:44.375]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[10:32:44.375]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[10:32:44.375]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[10:32:44.375]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[10:32:44.375]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[10:32:44.375]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[10:32:44.375]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[10:32:44.375]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[10:32:44.375]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[10:32:44.375]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[10:32:44.375]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[10:32:44.375]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[10:32:44.375]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[10:32:44.375]  $ arguments       :List of 28
[10:32:44.375]   ..$ worker          : chr "localhost"
[10:32:44.375]   ..$ master          : NULL
[10:32:44.375]   ..$ port            : int 11009
[10:32:44.375]   ..$ connectTimeout  : num 120
[10:32:44.375]   ..$ timeout         : num 2592000
[10:32:44.375]   ..$ rscript         : NULL
[10:32:44.375]   ..$ homogeneous     : NULL
[10:32:44.375]   ..$ rscript_args    : NULL
[10:32:44.375]   ..$ rscript_envs    : NULL
[10:32:44.375]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:32:44.375]   ..$ rscript_startup : NULL
[10:32:44.375]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[10:32:44.375]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:32:44.375]   ..$ methods         : logi TRUE
[10:32:44.375]   ..$ socketOptions   : chr "no-delay"
[10:32:44.375]   ..$ useXDR          : logi FALSE
[10:32:44.375]   ..$ outfile         : chr "/dev/null"
[10:32:44.375]   ..$ renice          : int NA
[10:32:44.375]   ..$ rshcmd          : NULL
[10:32:44.375]   ..$ user            : NULL
[10:32:44.375]   ..$ revtunnel       : logi NA
[10:32:44.375]   ..$ rshlogfile      : NULL
[10:32:44.375]   ..$ rshopts         : NULL
[10:32:44.375]   ..$ rank            : int 1
[10:32:44.375]   ..$ manual          : logi FALSE
[10:32:44.375]   ..$ dryrun          : logi FALSE
[10:32:44.375]   ..$ quiet           : logi FALSE
[10:32:44.375]   ..$ setup_strategy  : chr "parallel"
[10:32:44.375]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[10:32:44.391] [local output] System call to launch all workers:
[10:32:44.391] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpFz1RKJ/worker.rank=1.parallelly.parent=81104.13cd02c7183.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11009 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[10:32:44.391] [local output] Starting PSOCK main server
[10:32:44.397] [local output] Workers launched
[10:32:44.397] [local output] Waiting for workers to connect back
[10:32:44.397]  - [local output] 0 workers out of 2 ready
[10:32:44.640]  - [local output] 0 workers out of 2 ready
[10:32:44.640]  - [local output] 1 workers out of 2 ready
[10:32:44.640]  - [local output] 2 workers out of 2 ready
[10:32:44.641] [local output] Launching of workers completed
[10:32:44.641] [local output] Collecting session information from workers
[10:32:44.641] [local output]  - Worker #1 of 2
[10:32:44.642] [local output]  - Worker #2 of 2
[10:32:44.642] [local output] makeClusterPSOCK() ... done
[10:32:44.655] Packages needed by the future expression (n = 0): <none>
[10:32:44.655] Packages needed by future strategies (n = 0): <none>
[10:32:44.655] {
[10:32:44.655]     {
[10:32:44.655]         {
[10:32:44.655]             ...future.startTime <- base::Sys.time()
[10:32:44.655]             {
[10:32:44.655]                 {
[10:32:44.655]                   {
[10:32:44.655]                     {
[10:32:44.655]                       base::local({
[10:32:44.655]                         has_future <- base::requireNamespace("future", 
[10:32:44.655]                           quietly = TRUE)
[10:32:44.655]                         if (has_future) {
[10:32:44.655]                           ns <- base::getNamespace("future")
[10:32:44.655]                           version <- ns[[".package"]][["version"]]
[10:32:44.655]                           if (is.null(version)) 
[10:32:44.655]                             version <- utils::packageVersion("future")
[10:32:44.655]                         }
[10:32:44.655]                         else {
[10:32:44.655]                           version <- NULL
[10:32:44.655]                         }
[10:32:44.655]                         if (!has_future || version < "1.8.0") {
[10:32:44.655]                           info <- base::c(r_version = base::gsub("R version ", 
[10:32:44.655]                             "", base::R.version$version.string), 
[10:32:44.655]                             platform = base::sprintf("%s (%s-bit)", 
[10:32:44.655]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:44.655]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:44.655]                               "release", "version")], collapse = " "), 
[10:32:44.655]                             hostname = base::Sys.info()[["nodename"]])
[10:32:44.655]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:32:44.655]                             info)
[10:32:44.655]                           info <- base::paste(info, collapse = "; ")
[10:32:44.655]                           if (!has_future) {
[10:32:44.655]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:44.655]                               info)
[10:32:44.655]                           }
[10:32:44.655]                           else {
[10:32:44.655]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:44.655]                               info, version)
[10:32:44.655]                           }
[10:32:44.655]                           base::stop(msg)
[10:32:44.655]                         }
[10:32:44.655]                       })
[10:32:44.655]                     }
[10:32:44.655]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:32:44.655]                     base::options(mc.cores = 1L)
[10:32:44.655]                   }
[10:32:44.655]                   ...future.strategy.old <- future::plan("list")
[10:32:44.655]                   options(future.plan = NULL)
[10:32:44.655]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:44.655]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:44.655]                 }
[10:32:44.655]                 ...future.workdir <- getwd()
[10:32:44.655]             }
[10:32:44.655]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:44.655]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:44.655]         }
[10:32:44.655]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:44.655]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:44.655]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:44.655]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:44.655]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:44.655]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:44.655]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:44.655]             base::names(...future.oldOptions))
[10:32:44.655]     }
[10:32:44.655]     if (FALSE) {
[10:32:44.655]     }
[10:32:44.655]     else {
[10:32:44.655]         if (TRUE) {
[10:32:44.655]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:44.655]                 open = "w")
[10:32:44.655]         }
[10:32:44.655]         else {
[10:32:44.655]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:44.655]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:44.655]         }
[10:32:44.655]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:44.655]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:44.655]             base::sink(type = "output", split = FALSE)
[10:32:44.655]             base::close(...future.stdout)
[10:32:44.655]         }, add = TRUE)
[10:32:44.655]     }
[10:32:44.655]     ...future.frame <- base::sys.nframe()
[10:32:44.655]     ...future.conditions <- base::list()
[10:32:44.655]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:44.655]     if (FALSE) {
[10:32:44.655]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:44.655]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:44.655]     }
[10:32:44.655]     ...future.result <- base::tryCatch({
[10:32:44.655]         base::withCallingHandlers({
[10:32:44.655]             ...future.value <- base::withVisible(base::local({
[10:32:44.655]                 ...future.makeSendCondition <- base::local({
[10:32:44.655]                   sendCondition <- NULL
[10:32:44.655]                   function(frame = 1L) {
[10:32:44.655]                     if (is.function(sendCondition)) 
[10:32:44.655]                       return(sendCondition)
[10:32:44.655]                     ns <- getNamespace("parallel")
[10:32:44.655]                     if (exists("sendData", mode = "function", 
[10:32:44.655]                       envir = ns)) {
[10:32:44.655]                       parallel_sendData <- get("sendData", mode = "function", 
[10:32:44.655]                         envir = ns)
[10:32:44.655]                       envir <- sys.frame(frame)
[10:32:44.655]                       master <- NULL
[10:32:44.655]                       while (!identical(envir, .GlobalEnv) && 
[10:32:44.655]                         !identical(envir, emptyenv())) {
[10:32:44.655]                         if (exists("master", mode = "list", envir = envir, 
[10:32:44.655]                           inherits = FALSE)) {
[10:32:44.655]                           master <- get("master", mode = "list", 
[10:32:44.655]                             envir = envir, inherits = FALSE)
[10:32:44.655]                           if (inherits(master, c("SOCKnode", 
[10:32:44.655]                             "SOCK0node"))) {
[10:32:44.655]                             sendCondition <<- function(cond) {
[10:32:44.655]                               data <- list(type = "VALUE", value = cond, 
[10:32:44.655]                                 success = TRUE)
[10:32:44.655]                               parallel_sendData(master, data)
[10:32:44.655]                             }
[10:32:44.655]                             return(sendCondition)
[10:32:44.655]                           }
[10:32:44.655]                         }
[10:32:44.655]                         frame <- frame + 1L
[10:32:44.655]                         envir <- sys.frame(frame)
[10:32:44.655]                       }
[10:32:44.655]                     }
[10:32:44.655]                     sendCondition <<- function(cond) NULL
[10:32:44.655]                   }
[10:32:44.655]                 })
[10:32:44.655]                 withCallingHandlers({
[10:32:44.655]                   NA
[10:32:44.655]                 }, immediateCondition = function(cond) {
[10:32:44.655]                   sendCondition <- ...future.makeSendCondition()
[10:32:44.655]                   sendCondition(cond)
[10:32:44.655]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:44.655]                   {
[10:32:44.655]                     inherits <- base::inherits
[10:32:44.655]                     invokeRestart <- base::invokeRestart
[10:32:44.655]                     is.null <- base::is.null
[10:32:44.655]                     muffled <- FALSE
[10:32:44.655]                     if (inherits(cond, "message")) {
[10:32:44.655]                       muffled <- grepl(pattern, "muffleMessage")
[10:32:44.655]                       if (muffled) 
[10:32:44.655]                         invokeRestart("muffleMessage")
[10:32:44.655]                     }
[10:32:44.655]                     else if (inherits(cond, "warning")) {
[10:32:44.655]                       muffled <- grepl(pattern, "muffleWarning")
[10:32:44.655]                       if (muffled) 
[10:32:44.655]                         invokeRestart("muffleWarning")
[10:32:44.655]                     }
[10:32:44.655]                     else if (inherits(cond, "condition")) {
[10:32:44.655]                       if (!is.null(pattern)) {
[10:32:44.655]                         computeRestarts <- base::computeRestarts
[10:32:44.655]                         grepl <- base::grepl
[10:32:44.655]                         restarts <- computeRestarts(cond)
[10:32:44.655]                         for (restart in restarts) {
[10:32:44.655]                           name <- restart$name
[10:32:44.655]                           if (is.null(name)) 
[10:32:44.655]                             next
[10:32:44.655]                           if (!grepl(pattern, name)) 
[10:32:44.655]                             next
[10:32:44.655]                           invokeRestart(restart)
[10:32:44.655]                           muffled <- TRUE
[10:32:44.655]                           break
[10:32:44.655]                         }
[10:32:44.655]                       }
[10:32:44.655]                     }
[10:32:44.655]                     invisible(muffled)
[10:32:44.655]                   }
[10:32:44.655]                   muffleCondition(cond)
[10:32:44.655]                 })
[10:32:44.655]             }))
[10:32:44.655]             future::FutureResult(value = ...future.value$value, 
[10:32:44.655]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:44.655]                   ...future.rng), globalenv = if (FALSE) 
[10:32:44.655]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:44.655]                     ...future.globalenv.names))
[10:32:44.655]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:44.655]         }, condition = base::local({
[10:32:44.655]             c <- base::c
[10:32:44.655]             inherits <- base::inherits
[10:32:44.655]             invokeRestart <- base::invokeRestart
[10:32:44.655]             length <- base::length
[10:32:44.655]             list <- base::list
[10:32:44.655]             seq.int <- base::seq.int
[10:32:44.655]             signalCondition <- base::signalCondition
[10:32:44.655]             sys.calls <- base::sys.calls
[10:32:44.655]             `[[` <- base::`[[`
[10:32:44.655]             `+` <- base::`+`
[10:32:44.655]             `<<-` <- base::`<<-`
[10:32:44.655]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:44.655]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:44.655]                   3L)]
[10:32:44.655]             }
[10:32:44.655]             function(cond) {
[10:32:44.655]                 is_error <- inherits(cond, "error")
[10:32:44.655]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:44.655]                   NULL)
[10:32:44.655]                 if (is_error) {
[10:32:44.655]                   sessionInformation <- function() {
[10:32:44.655]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:44.655]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:44.655]                       search = base::search(), system = base::Sys.info())
[10:32:44.655]                   }
[10:32:44.655]                   ...future.conditions[[length(...future.conditions) + 
[10:32:44.655]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:44.655]                     cond$call), session = sessionInformation(), 
[10:32:44.655]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:44.655]                   signalCondition(cond)
[10:32:44.655]                 }
[10:32:44.655]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:44.655]                 "immediateCondition"))) {
[10:32:44.655]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:44.655]                   ...future.conditions[[length(...future.conditions) + 
[10:32:44.655]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:44.655]                   if (TRUE && !signal) {
[10:32:44.655]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:44.655]                     {
[10:32:44.655]                       inherits <- base::inherits
[10:32:44.655]                       invokeRestart <- base::invokeRestart
[10:32:44.655]                       is.null <- base::is.null
[10:32:44.655]                       muffled <- FALSE
[10:32:44.655]                       if (inherits(cond, "message")) {
[10:32:44.655]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:44.655]                         if (muffled) 
[10:32:44.655]                           invokeRestart("muffleMessage")
[10:32:44.655]                       }
[10:32:44.655]                       else if (inherits(cond, "warning")) {
[10:32:44.655]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:44.655]                         if (muffled) 
[10:32:44.655]                           invokeRestart("muffleWarning")
[10:32:44.655]                       }
[10:32:44.655]                       else if (inherits(cond, "condition")) {
[10:32:44.655]                         if (!is.null(pattern)) {
[10:32:44.655]                           computeRestarts <- base::computeRestarts
[10:32:44.655]                           grepl <- base::grepl
[10:32:44.655]                           restarts <- computeRestarts(cond)
[10:32:44.655]                           for (restart in restarts) {
[10:32:44.655]                             name <- restart$name
[10:32:44.655]                             if (is.null(name)) 
[10:32:44.655]                               next
[10:32:44.655]                             if (!grepl(pattern, name)) 
[10:32:44.655]                               next
[10:32:44.655]                             invokeRestart(restart)
[10:32:44.655]                             muffled <- TRUE
[10:32:44.655]                             break
[10:32:44.655]                           }
[10:32:44.655]                         }
[10:32:44.655]                       }
[10:32:44.655]                       invisible(muffled)
[10:32:44.655]                     }
[10:32:44.655]                     muffleCondition(cond, pattern = "^muffle")
[10:32:44.655]                   }
[10:32:44.655]                 }
[10:32:44.655]                 else {
[10:32:44.655]                   if (TRUE) {
[10:32:44.655]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:44.655]                     {
[10:32:44.655]                       inherits <- base::inherits
[10:32:44.655]                       invokeRestart <- base::invokeRestart
[10:32:44.655]                       is.null <- base::is.null
[10:32:44.655]                       muffled <- FALSE
[10:32:44.655]                       if (inherits(cond, "message")) {
[10:32:44.655]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:44.655]                         if (muffled) 
[10:32:44.655]                           invokeRestart("muffleMessage")
[10:32:44.655]                       }
[10:32:44.655]                       else if (inherits(cond, "warning")) {
[10:32:44.655]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:44.655]                         if (muffled) 
[10:32:44.655]                           invokeRestart("muffleWarning")
[10:32:44.655]                       }
[10:32:44.655]                       else if (inherits(cond, "condition")) {
[10:32:44.655]                         if (!is.null(pattern)) {
[10:32:44.655]                           computeRestarts <- base::computeRestarts
[10:32:44.655]                           grepl <- base::grepl
[10:32:44.655]                           restarts <- computeRestarts(cond)
[10:32:44.655]                           for (restart in restarts) {
[10:32:44.655]                             name <- restart$name
[10:32:44.655]                             if (is.null(name)) 
[10:32:44.655]                               next
[10:32:44.655]                             if (!grepl(pattern, name)) 
[10:32:44.655]                               next
[10:32:44.655]                             invokeRestart(restart)
[10:32:44.655]                             muffled <- TRUE
[10:32:44.655]                             break
[10:32:44.655]                           }
[10:32:44.655]                         }
[10:32:44.655]                       }
[10:32:44.655]                       invisible(muffled)
[10:32:44.655]                     }
[10:32:44.655]                     muffleCondition(cond, pattern = "^muffle")
[10:32:44.655]                   }
[10:32:44.655]                 }
[10:32:44.655]             }
[10:32:44.655]         }))
[10:32:44.655]     }, error = function(ex) {
[10:32:44.655]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:44.655]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:44.655]                 ...future.rng), started = ...future.startTime, 
[10:32:44.655]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:44.655]             version = "1.8"), class = "FutureResult")
[10:32:44.655]     }, finally = {
[10:32:44.655]         if (!identical(...future.workdir, getwd())) 
[10:32:44.655]             setwd(...future.workdir)
[10:32:44.655]         {
[10:32:44.655]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:44.655]                 ...future.oldOptions$nwarnings <- NULL
[10:32:44.655]             }
[10:32:44.655]             base::options(...future.oldOptions)
[10:32:44.655]             if (.Platform$OS.type == "windows") {
[10:32:44.655]                 old_names <- names(...future.oldEnvVars)
[10:32:44.655]                 envs <- base::Sys.getenv()
[10:32:44.655]                 names <- names(envs)
[10:32:44.655]                 common <- intersect(names, old_names)
[10:32:44.655]                 added <- setdiff(names, old_names)
[10:32:44.655]                 removed <- setdiff(old_names, names)
[10:32:44.655]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:44.655]                   envs[common]]
[10:32:44.655]                 NAMES <- toupper(changed)
[10:32:44.655]                 args <- list()
[10:32:44.655]                 for (kk in seq_along(NAMES)) {
[10:32:44.655]                   name <- changed[[kk]]
[10:32:44.655]                   NAME <- NAMES[[kk]]
[10:32:44.655]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:44.655]                     next
[10:32:44.655]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:44.655]                 }
[10:32:44.655]                 NAMES <- toupper(added)
[10:32:44.655]                 for (kk in seq_along(NAMES)) {
[10:32:44.655]                   name <- added[[kk]]
[10:32:44.655]                   NAME <- NAMES[[kk]]
[10:32:44.655]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:44.655]                     next
[10:32:44.655]                   args[[name]] <- ""
[10:32:44.655]                 }
[10:32:44.655]                 NAMES <- toupper(removed)
[10:32:44.655]                 for (kk in seq_along(NAMES)) {
[10:32:44.655]                   name <- removed[[kk]]
[10:32:44.655]                   NAME <- NAMES[[kk]]
[10:32:44.655]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:44.655]                     next
[10:32:44.655]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:44.655]                 }
[10:32:44.655]                 if (length(args) > 0) 
[10:32:44.655]                   base::do.call(base::Sys.setenv, args = args)
[10:32:44.655]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:44.655]             }
[10:32:44.655]             else {
[10:32:44.655]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:44.655]             }
[10:32:44.655]             {
[10:32:44.655]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:44.655]                   0L) {
[10:32:44.655]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:44.655]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:44.655]                   base::options(opts)
[10:32:44.655]                 }
[10:32:44.655]                 {
[10:32:44.655]                   {
[10:32:44.655]                     base::options(mc.cores = ...future.mc.cores.old)
[10:32:44.655]                     NULL
[10:32:44.655]                   }
[10:32:44.655]                   options(future.plan = NULL)
[10:32:44.655]                   if (is.na(NA_character_)) 
[10:32:44.655]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:44.655]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:44.655]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:44.655]                     .init = FALSE)
[10:32:44.655]                 }
[10:32:44.655]             }
[10:32:44.655]         }
[10:32:44.655]     })
[10:32:44.655]     if (TRUE) {
[10:32:44.655]         base::sink(type = "output", split = FALSE)
[10:32:44.655]         if (TRUE) {
[10:32:44.655]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:44.655]         }
[10:32:44.655]         else {
[10:32:44.655]             ...future.result["stdout"] <- base::list(NULL)
[10:32:44.655]         }
[10:32:44.655]         base::close(...future.stdout)
[10:32:44.655]         ...future.stdout <- NULL
[10:32:44.655]     }
[10:32:44.655]     ...future.result$conditions <- ...future.conditions
[10:32:44.655]     ...future.result$finished <- base::Sys.time()
[10:32:44.655]     ...future.result
[10:32:44.655] }
[10:32:44.709] MultisessionFuture started
[10:32:44.710] result() for ClusterFuture ...
[10:32:44.710] receiveMessageFromWorker() for ClusterFuture ...
[10:32:44.710] - Validating connection of MultisessionFuture
[10:32:44.743] - received message: FutureResult
[10:32:44.743] - Received FutureResult
[10:32:44.743] - Erased future from FutureRegistry
[10:32:44.743] result() for ClusterFuture ...
[10:32:44.743] - result already collected: FutureResult
[10:32:44.743] result() for ClusterFuture ... done
[10:32:44.743] receiveMessageFromWorker() for ClusterFuture ... done
[10:32:44.743] result() for ClusterFuture ... done
[10:32:44.744] result() for ClusterFuture ...
[10:32:44.744] - result already collected: FutureResult
[10:32:44.744] result() for ClusterFuture ... done
[10:32:44.744] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[10:32:44.748] plan(): nbrOfWorkers() = 2
[10:32:44.748] getGlobalsAndPackages() ...
[10:32:44.748] Searching for globals...
[10:32:44.749] - globals found: [1] ‘{’
[10:32:44.749] Searching for globals ... DONE
[10:32:44.749] Resolving globals: FALSE
[10:32:44.750] 
[10:32:44.750] 
[10:32:44.750] getGlobalsAndPackages() ... DONE
[10:32:44.750] run() for ‘Future’ ...
[10:32:44.750] - state: ‘created’
[10:32:44.751] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:32:44.765] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:32:44.765] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:32:44.765]   - Field: ‘node’
[10:32:44.765]   - Field: ‘label’
[10:32:44.765]   - Field: ‘local’
[10:32:44.765]   - Field: ‘owner’
[10:32:44.765]   - Field: ‘envir’
[10:32:44.766]   - Field: ‘workers’
[10:32:44.766]   - Field: ‘packages’
[10:32:44.766]   - Field: ‘gc’
[10:32:44.766]   - Field: ‘conditions’
[10:32:44.766]   - Field: ‘persistent’
[10:32:44.766]   - Field: ‘expr’
[10:32:44.766]   - Field: ‘uuid’
[10:32:44.766]   - Field: ‘seed’
[10:32:44.766]   - Field: ‘version’
[10:32:44.767]   - Field: ‘result’
[10:32:44.767]   - Field: ‘asynchronous’
[10:32:44.767]   - Field: ‘calls’
[10:32:44.767]   - Field: ‘globals’
[10:32:44.767]   - Field: ‘stdout’
[10:32:44.767]   - Field: ‘earlySignal’
[10:32:44.767]   - Field: ‘lazy’
[10:32:44.767]   - Field: ‘state’
[10:32:44.767] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:32:44.768] - Launch lazy future ...
[10:32:44.768] Packages needed by the future expression (n = 0): <none>
[10:32:44.768] Packages needed by future strategies (n = 0): <none>
[10:32:44.769] {
[10:32:44.769]     {
[10:32:44.769]         {
[10:32:44.769]             ...future.startTime <- base::Sys.time()
[10:32:44.769]             {
[10:32:44.769]                 {
[10:32:44.769]                   {
[10:32:44.769]                     {
[10:32:44.769]                       base::local({
[10:32:44.769]                         has_future <- base::requireNamespace("future", 
[10:32:44.769]                           quietly = TRUE)
[10:32:44.769]                         if (has_future) {
[10:32:44.769]                           ns <- base::getNamespace("future")
[10:32:44.769]                           version <- ns[[".package"]][["version"]]
[10:32:44.769]                           if (is.null(version)) 
[10:32:44.769]                             version <- utils::packageVersion("future")
[10:32:44.769]                         }
[10:32:44.769]                         else {
[10:32:44.769]                           version <- NULL
[10:32:44.769]                         }
[10:32:44.769]                         if (!has_future || version < "1.8.0") {
[10:32:44.769]                           info <- base::c(r_version = base::gsub("R version ", 
[10:32:44.769]                             "", base::R.version$version.string), 
[10:32:44.769]                             platform = base::sprintf("%s (%s-bit)", 
[10:32:44.769]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:44.769]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:44.769]                               "release", "version")], collapse = " "), 
[10:32:44.769]                             hostname = base::Sys.info()[["nodename"]])
[10:32:44.769]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:32:44.769]                             info)
[10:32:44.769]                           info <- base::paste(info, collapse = "; ")
[10:32:44.769]                           if (!has_future) {
[10:32:44.769]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:44.769]                               info)
[10:32:44.769]                           }
[10:32:44.769]                           else {
[10:32:44.769]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:44.769]                               info, version)
[10:32:44.769]                           }
[10:32:44.769]                           base::stop(msg)
[10:32:44.769]                         }
[10:32:44.769]                       })
[10:32:44.769]                     }
[10:32:44.769]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:32:44.769]                     base::options(mc.cores = 1L)
[10:32:44.769]                   }
[10:32:44.769]                   ...future.strategy.old <- future::plan("list")
[10:32:44.769]                   options(future.plan = NULL)
[10:32:44.769]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:44.769]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:44.769]                 }
[10:32:44.769]                 ...future.workdir <- getwd()
[10:32:44.769]             }
[10:32:44.769]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:44.769]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:44.769]         }
[10:32:44.769]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:44.769]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:44.769]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:44.769]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:44.769]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:44.769]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:44.769]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:44.769]             base::names(...future.oldOptions))
[10:32:44.769]     }
[10:32:44.769]     if (FALSE) {
[10:32:44.769]     }
[10:32:44.769]     else {
[10:32:44.769]         if (TRUE) {
[10:32:44.769]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:44.769]                 open = "w")
[10:32:44.769]         }
[10:32:44.769]         else {
[10:32:44.769]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:44.769]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:44.769]         }
[10:32:44.769]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:44.769]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:44.769]             base::sink(type = "output", split = FALSE)
[10:32:44.769]             base::close(...future.stdout)
[10:32:44.769]         }, add = TRUE)
[10:32:44.769]     }
[10:32:44.769]     ...future.frame <- base::sys.nframe()
[10:32:44.769]     ...future.conditions <- base::list()
[10:32:44.769]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:44.769]     if (FALSE) {
[10:32:44.769]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:44.769]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:44.769]     }
[10:32:44.769]     ...future.result <- base::tryCatch({
[10:32:44.769]         base::withCallingHandlers({
[10:32:44.769]             ...future.value <- base::withVisible(base::local({
[10:32:44.769]                 ...future.makeSendCondition <- base::local({
[10:32:44.769]                   sendCondition <- NULL
[10:32:44.769]                   function(frame = 1L) {
[10:32:44.769]                     if (is.function(sendCondition)) 
[10:32:44.769]                       return(sendCondition)
[10:32:44.769]                     ns <- getNamespace("parallel")
[10:32:44.769]                     if (exists("sendData", mode = "function", 
[10:32:44.769]                       envir = ns)) {
[10:32:44.769]                       parallel_sendData <- get("sendData", mode = "function", 
[10:32:44.769]                         envir = ns)
[10:32:44.769]                       envir <- sys.frame(frame)
[10:32:44.769]                       master <- NULL
[10:32:44.769]                       while (!identical(envir, .GlobalEnv) && 
[10:32:44.769]                         !identical(envir, emptyenv())) {
[10:32:44.769]                         if (exists("master", mode = "list", envir = envir, 
[10:32:44.769]                           inherits = FALSE)) {
[10:32:44.769]                           master <- get("master", mode = "list", 
[10:32:44.769]                             envir = envir, inherits = FALSE)
[10:32:44.769]                           if (inherits(master, c("SOCKnode", 
[10:32:44.769]                             "SOCK0node"))) {
[10:32:44.769]                             sendCondition <<- function(cond) {
[10:32:44.769]                               data <- list(type = "VALUE", value = cond, 
[10:32:44.769]                                 success = TRUE)
[10:32:44.769]                               parallel_sendData(master, data)
[10:32:44.769]                             }
[10:32:44.769]                             return(sendCondition)
[10:32:44.769]                           }
[10:32:44.769]                         }
[10:32:44.769]                         frame <- frame + 1L
[10:32:44.769]                         envir <- sys.frame(frame)
[10:32:44.769]                       }
[10:32:44.769]                     }
[10:32:44.769]                     sendCondition <<- function(cond) NULL
[10:32:44.769]                   }
[10:32:44.769]                 })
[10:32:44.769]                 withCallingHandlers({
[10:32:44.769]                   {
[10:32:44.769]                     2
[10:32:44.769]                   }
[10:32:44.769]                 }, immediateCondition = function(cond) {
[10:32:44.769]                   sendCondition <- ...future.makeSendCondition()
[10:32:44.769]                   sendCondition(cond)
[10:32:44.769]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:44.769]                   {
[10:32:44.769]                     inherits <- base::inherits
[10:32:44.769]                     invokeRestart <- base::invokeRestart
[10:32:44.769]                     is.null <- base::is.null
[10:32:44.769]                     muffled <- FALSE
[10:32:44.769]                     if (inherits(cond, "message")) {
[10:32:44.769]                       muffled <- grepl(pattern, "muffleMessage")
[10:32:44.769]                       if (muffled) 
[10:32:44.769]                         invokeRestart("muffleMessage")
[10:32:44.769]                     }
[10:32:44.769]                     else if (inherits(cond, "warning")) {
[10:32:44.769]                       muffled <- grepl(pattern, "muffleWarning")
[10:32:44.769]                       if (muffled) 
[10:32:44.769]                         invokeRestart("muffleWarning")
[10:32:44.769]                     }
[10:32:44.769]                     else if (inherits(cond, "condition")) {
[10:32:44.769]                       if (!is.null(pattern)) {
[10:32:44.769]                         computeRestarts <- base::computeRestarts
[10:32:44.769]                         grepl <- base::grepl
[10:32:44.769]                         restarts <- computeRestarts(cond)
[10:32:44.769]                         for (restart in restarts) {
[10:32:44.769]                           name <- restart$name
[10:32:44.769]                           if (is.null(name)) 
[10:32:44.769]                             next
[10:32:44.769]                           if (!grepl(pattern, name)) 
[10:32:44.769]                             next
[10:32:44.769]                           invokeRestart(restart)
[10:32:44.769]                           muffled <- TRUE
[10:32:44.769]                           break
[10:32:44.769]                         }
[10:32:44.769]                       }
[10:32:44.769]                     }
[10:32:44.769]                     invisible(muffled)
[10:32:44.769]                   }
[10:32:44.769]                   muffleCondition(cond)
[10:32:44.769]                 })
[10:32:44.769]             }))
[10:32:44.769]             future::FutureResult(value = ...future.value$value, 
[10:32:44.769]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:44.769]                   ...future.rng), globalenv = if (FALSE) 
[10:32:44.769]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:44.769]                     ...future.globalenv.names))
[10:32:44.769]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:44.769]         }, condition = base::local({
[10:32:44.769]             c <- base::c
[10:32:44.769]             inherits <- base::inherits
[10:32:44.769]             invokeRestart <- base::invokeRestart
[10:32:44.769]             length <- base::length
[10:32:44.769]             list <- base::list
[10:32:44.769]             seq.int <- base::seq.int
[10:32:44.769]             signalCondition <- base::signalCondition
[10:32:44.769]             sys.calls <- base::sys.calls
[10:32:44.769]             `[[` <- base::`[[`
[10:32:44.769]             `+` <- base::`+`
[10:32:44.769]             `<<-` <- base::`<<-`
[10:32:44.769]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:44.769]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:44.769]                   3L)]
[10:32:44.769]             }
[10:32:44.769]             function(cond) {
[10:32:44.769]                 is_error <- inherits(cond, "error")
[10:32:44.769]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:44.769]                   NULL)
[10:32:44.769]                 if (is_error) {
[10:32:44.769]                   sessionInformation <- function() {
[10:32:44.769]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:44.769]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:44.769]                       search = base::search(), system = base::Sys.info())
[10:32:44.769]                   }
[10:32:44.769]                   ...future.conditions[[length(...future.conditions) + 
[10:32:44.769]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:44.769]                     cond$call), session = sessionInformation(), 
[10:32:44.769]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:44.769]                   signalCondition(cond)
[10:32:44.769]                 }
[10:32:44.769]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:44.769]                 "immediateCondition"))) {
[10:32:44.769]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:44.769]                   ...future.conditions[[length(...future.conditions) + 
[10:32:44.769]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:44.769]                   if (TRUE && !signal) {
[10:32:44.769]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:44.769]                     {
[10:32:44.769]                       inherits <- base::inherits
[10:32:44.769]                       invokeRestart <- base::invokeRestart
[10:32:44.769]                       is.null <- base::is.null
[10:32:44.769]                       muffled <- FALSE
[10:32:44.769]                       if (inherits(cond, "message")) {
[10:32:44.769]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:44.769]                         if (muffled) 
[10:32:44.769]                           invokeRestart("muffleMessage")
[10:32:44.769]                       }
[10:32:44.769]                       else if (inherits(cond, "warning")) {
[10:32:44.769]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:44.769]                         if (muffled) 
[10:32:44.769]                           invokeRestart("muffleWarning")
[10:32:44.769]                       }
[10:32:44.769]                       else if (inherits(cond, "condition")) {
[10:32:44.769]                         if (!is.null(pattern)) {
[10:32:44.769]                           computeRestarts <- base::computeRestarts
[10:32:44.769]                           grepl <- base::grepl
[10:32:44.769]                           restarts <- computeRestarts(cond)
[10:32:44.769]                           for (restart in restarts) {
[10:32:44.769]                             name <- restart$name
[10:32:44.769]                             if (is.null(name)) 
[10:32:44.769]                               next
[10:32:44.769]                             if (!grepl(pattern, name)) 
[10:32:44.769]                               next
[10:32:44.769]                             invokeRestart(restart)
[10:32:44.769]                             muffled <- TRUE
[10:32:44.769]                             break
[10:32:44.769]                           }
[10:32:44.769]                         }
[10:32:44.769]                       }
[10:32:44.769]                       invisible(muffled)
[10:32:44.769]                     }
[10:32:44.769]                     muffleCondition(cond, pattern = "^muffle")
[10:32:44.769]                   }
[10:32:44.769]                 }
[10:32:44.769]                 else {
[10:32:44.769]                   if (TRUE) {
[10:32:44.769]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:44.769]                     {
[10:32:44.769]                       inherits <- base::inherits
[10:32:44.769]                       invokeRestart <- base::invokeRestart
[10:32:44.769]                       is.null <- base::is.null
[10:32:44.769]                       muffled <- FALSE
[10:32:44.769]                       if (inherits(cond, "message")) {
[10:32:44.769]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:44.769]                         if (muffled) 
[10:32:44.769]                           invokeRestart("muffleMessage")
[10:32:44.769]                       }
[10:32:44.769]                       else if (inherits(cond, "warning")) {
[10:32:44.769]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:44.769]                         if (muffled) 
[10:32:44.769]                           invokeRestart("muffleWarning")
[10:32:44.769]                       }
[10:32:44.769]                       else if (inherits(cond, "condition")) {
[10:32:44.769]                         if (!is.null(pattern)) {
[10:32:44.769]                           computeRestarts <- base::computeRestarts
[10:32:44.769]                           grepl <- base::grepl
[10:32:44.769]                           restarts <- computeRestarts(cond)
[10:32:44.769]                           for (restart in restarts) {
[10:32:44.769]                             name <- restart$name
[10:32:44.769]                             if (is.null(name)) 
[10:32:44.769]                               next
[10:32:44.769]                             if (!grepl(pattern, name)) 
[10:32:44.769]                               next
[10:32:44.769]                             invokeRestart(restart)
[10:32:44.769]                             muffled <- TRUE
[10:32:44.769]                             break
[10:32:44.769]                           }
[10:32:44.769]                         }
[10:32:44.769]                       }
[10:32:44.769]                       invisible(muffled)
[10:32:44.769]                     }
[10:32:44.769]                     muffleCondition(cond, pattern = "^muffle")
[10:32:44.769]                   }
[10:32:44.769]                 }
[10:32:44.769]             }
[10:32:44.769]         }))
[10:32:44.769]     }, error = function(ex) {
[10:32:44.769]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:44.769]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:44.769]                 ...future.rng), started = ...future.startTime, 
[10:32:44.769]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:44.769]             version = "1.8"), class = "FutureResult")
[10:32:44.769]     }, finally = {
[10:32:44.769]         if (!identical(...future.workdir, getwd())) 
[10:32:44.769]             setwd(...future.workdir)
[10:32:44.769]         {
[10:32:44.769]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:44.769]                 ...future.oldOptions$nwarnings <- NULL
[10:32:44.769]             }
[10:32:44.769]             base::options(...future.oldOptions)
[10:32:44.769]             if (.Platform$OS.type == "windows") {
[10:32:44.769]                 old_names <- names(...future.oldEnvVars)
[10:32:44.769]                 envs <- base::Sys.getenv()
[10:32:44.769]                 names <- names(envs)
[10:32:44.769]                 common <- intersect(names, old_names)
[10:32:44.769]                 added <- setdiff(names, old_names)
[10:32:44.769]                 removed <- setdiff(old_names, names)
[10:32:44.769]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:44.769]                   envs[common]]
[10:32:44.769]                 NAMES <- toupper(changed)
[10:32:44.769]                 args <- list()
[10:32:44.769]                 for (kk in seq_along(NAMES)) {
[10:32:44.769]                   name <- changed[[kk]]
[10:32:44.769]                   NAME <- NAMES[[kk]]
[10:32:44.769]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:44.769]                     next
[10:32:44.769]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:44.769]                 }
[10:32:44.769]                 NAMES <- toupper(added)
[10:32:44.769]                 for (kk in seq_along(NAMES)) {
[10:32:44.769]                   name <- added[[kk]]
[10:32:44.769]                   NAME <- NAMES[[kk]]
[10:32:44.769]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:44.769]                     next
[10:32:44.769]                   args[[name]] <- ""
[10:32:44.769]                 }
[10:32:44.769]                 NAMES <- toupper(removed)
[10:32:44.769]                 for (kk in seq_along(NAMES)) {
[10:32:44.769]                   name <- removed[[kk]]
[10:32:44.769]                   NAME <- NAMES[[kk]]
[10:32:44.769]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:44.769]                     next
[10:32:44.769]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:44.769]                 }
[10:32:44.769]                 if (length(args) > 0) 
[10:32:44.769]                   base::do.call(base::Sys.setenv, args = args)
[10:32:44.769]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:44.769]             }
[10:32:44.769]             else {
[10:32:44.769]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:44.769]             }
[10:32:44.769]             {
[10:32:44.769]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:44.769]                   0L) {
[10:32:44.769]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:44.769]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:44.769]                   base::options(opts)
[10:32:44.769]                 }
[10:32:44.769]                 {
[10:32:44.769]                   {
[10:32:44.769]                     base::options(mc.cores = ...future.mc.cores.old)
[10:32:44.769]                     NULL
[10:32:44.769]                   }
[10:32:44.769]                   options(future.plan = NULL)
[10:32:44.769]                   if (is.na(NA_character_)) 
[10:32:44.769]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:44.769]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:44.769]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:44.769]                     .init = FALSE)
[10:32:44.769]                 }
[10:32:44.769]             }
[10:32:44.769]         }
[10:32:44.769]     })
[10:32:44.769]     if (TRUE) {
[10:32:44.769]         base::sink(type = "output", split = FALSE)
[10:32:44.769]         if (TRUE) {
[10:32:44.769]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:44.769]         }
[10:32:44.769]         else {
[10:32:44.769]             ...future.result["stdout"] <- base::list(NULL)
[10:32:44.769]         }
[10:32:44.769]         base::close(...future.stdout)
[10:32:44.769]         ...future.stdout <- NULL
[10:32:44.769]     }
[10:32:44.769]     ...future.result$conditions <- ...future.conditions
[10:32:44.769]     ...future.result$finished <- base::Sys.time()
[10:32:44.769]     ...future.result
[10:32:44.769] }
[10:32:44.772] MultisessionFuture started
[10:32:44.772] - Launch lazy future ... done
[10:32:44.772] run() for ‘MultisessionFuture’ ... done
[10:32:44.773] getGlobalsAndPackages() ...
[10:32:44.773] Searching for globals...
[10:32:44.774] - globals found: [1] ‘{’
[10:32:44.774] Searching for globals ... DONE
[10:32:44.774] Resolving globals: FALSE
[10:32:44.775] 
[10:32:44.775] 
[10:32:44.775] getGlobalsAndPackages() ... DONE
[10:32:44.775] run() for ‘Future’ ...
[10:32:44.776] - state: ‘created’
[10:32:44.776] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:32:44.791] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:32:44.791] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:32:44.791]   - Field: ‘node’
[10:32:44.791]   - Field: ‘label’
[10:32:44.791]   - Field: ‘local’
[10:32:44.791]   - Field: ‘owner’
[10:32:44.791]   - Field: ‘envir’
[10:32:44.791]   - Field: ‘workers’
[10:32:44.791]   - Field: ‘packages’
[10:32:44.791]   - Field: ‘gc’
[10:32:44.792]   - Field: ‘conditions’
[10:32:44.792]   - Field: ‘persistent’
[10:32:44.792]   - Field: ‘expr’
[10:32:44.792]   - Field: ‘uuid’
[10:32:44.792]   - Field: ‘seed’
[10:32:44.792]   - Field: ‘version’
[10:32:44.792]   - Field: ‘result’
[10:32:44.792]   - Field: ‘asynchronous’
[10:32:44.793]   - Field: ‘calls’
[10:32:44.793]   - Field: ‘globals’
[10:32:44.793]   - Field: ‘stdout’
[10:32:44.793]   - Field: ‘earlySignal’
[10:32:44.793]   - Field: ‘lazy’
[10:32:44.793]   - Field: ‘state’
[10:32:44.793] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:32:44.793] - Launch lazy future ...
[10:32:44.794] Packages needed by the future expression (n = 0): <none>
[10:32:44.794] Packages needed by future strategies (n = 0): <none>
[10:32:44.794] {
[10:32:44.794]     {
[10:32:44.794]         {
[10:32:44.794]             ...future.startTime <- base::Sys.time()
[10:32:44.794]             {
[10:32:44.794]                 {
[10:32:44.794]                   {
[10:32:44.794]                     {
[10:32:44.794]                       base::local({
[10:32:44.794]                         has_future <- base::requireNamespace("future", 
[10:32:44.794]                           quietly = TRUE)
[10:32:44.794]                         if (has_future) {
[10:32:44.794]                           ns <- base::getNamespace("future")
[10:32:44.794]                           version <- ns[[".package"]][["version"]]
[10:32:44.794]                           if (is.null(version)) 
[10:32:44.794]                             version <- utils::packageVersion("future")
[10:32:44.794]                         }
[10:32:44.794]                         else {
[10:32:44.794]                           version <- NULL
[10:32:44.794]                         }
[10:32:44.794]                         if (!has_future || version < "1.8.0") {
[10:32:44.794]                           info <- base::c(r_version = base::gsub("R version ", 
[10:32:44.794]                             "", base::R.version$version.string), 
[10:32:44.794]                             platform = base::sprintf("%s (%s-bit)", 
[10:32:44.794]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:44.794]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:44.794]                               "release", "version")], collapse = " "), 
[10:32:44.794]                             hostname = base::Sys.info()[["nodename"]])
[10:32:44.794]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:32:44.794]                             info)
[10:32:44.794]                           info <- base::paste(info, collapse = "; ")
[10:32:44.794]                           if (!has_future) {
[10:32:44.794]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:44.794]                               info)
[10:32:44.794]                           }
[10:32:44.794]                           else {
[10:32:44.794]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:44.794]                               info, version)
[10:32:44.794]                           }
[10:32:44.794]                           base::stop(msg)
[10:32:44.794]                         }
[10:32:44.794]                       })
[10:32:44.794]                     }
[10:32:44.794]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:32:44.794]                     base::options(mc.cores = 1L)
[10:32:44.794]                   }
[10:32:44.794]                   ...future.strategy.old <- future::plan("list")
[10:32:44.794]                   options(future.plan = NULL)
[10:32:44.794]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:44.794]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:44.794]                 }
[10:32:44.794]                 ...future.workdir <- getwd()
[10:32:44.794]             }
[10:32:44.794]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:44.794]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:44.794]         }
[10:32:44.794]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:44.794]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:44.794]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:44.794]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:44.794]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:44.794]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:44.794]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:44.794]             base::names(...future.oldOptions))
[10:32:44.794]     }
[10:32:44.794]     if (FALSE) {
[10:32:44.794]     }
[10:32:44.794]     else {
[10:32:44.794]         if (TRUE) {
[10:32:44.794]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:44.794]                 open = "w")
[10:32:44.794]         }
[10:32:44.794]         else {
[10:32:44.794]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:44.794]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:44.794]         }
[10:32:44.794]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:44.794]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:44.794]             base::sink(type = "output", split = FALSE)
[10:32:44.794]             base::close(...future.stdout)
[10:32:44.794]         }, add = TRUE)
[10:32:44.794]     }
[10:32:44.794]     ...future.frame <- base::sys.nframe()
[10:32:44.794]     ...future.conditions <- base::list()
[10:32:44.794]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:44.794]     if (FALSE) {
[10:32:44.794]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:44.794]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:44.794]     }
[10:32:44.794]     ...future.result <- base::tryCatch({
[10:32:44.794]         base::withCallingHandlers({
[10:32:44.794]             ...future.value <- base::withVisible(base::local({
[10:32:44.794]                 ...future.makeSendCondition <- base::local({
[10:32:44.794]                   sendCondition <- NULL
[10:32:44.794]                   function(frame = 1L) {
[10:32:44.794]                     if (is.function(sendCondition)) 
[10:32:44.794]                       return(sendCondition)
[10:32:44.794]                     ns <- getNamespace("parallel")
[10:32:44.794]                     if (exists("sendData", mode = "function", 
[10:32:44.794]                       envir = ns)) {
[10:32:44.794]                       parallel_sendData <- get("sendData", mode = "function", 
[10:32:44.794]                         envir = ns)
[10:32:44.794]                       envir <- sys.frame(frame)
[10:32:44.794]                       master <- NULL
[10:32:44.794]                       while (!identical(envir, .GlobalEnv) && 
[10:32:44.794]                         !identical(envir, emptyenv())) {
[10:32:44.794]                         if (exists("master", mode = "list", envir = envir, 
[10:32:44.794]                           inherits = FALSE)) {
[10:32:44.794]                           master <- get("master", mode = "list", 
[10:32:44.794]                             envir = envir, inherits = FALSE)
[10:32:44.794]                           if (inherits(master, c("SOCKnode", 
[10:32:44.794]                             "SOCK0node"))) {
[10:32:44.794]                             sendCondition <<- function(cond) {
[10:32:44.794]                               data <- list(type = "VALUE", value = cond, 
[10:32:44.794]                                 success = TRUE)
[10:32:44.794]                               parallel_sendData(master, data)
[10:32:44.794]                             }
[10:32:44.794]                             return(sendCondition)
[10:32:44.794]                           }
[10:32:44.794]                         }
[10:32:44.794]                         frame <- frame + 1L
[10:32:44.794]                         envir <- sys.frame(frame)
[10:32:44.794]                       }
[10:32:44.794]                     }
[10:32:44.794]                     sendCondition <<- function(cond) NULL
[10:32:44.794]                   }
[10:32:44.794]                 })
[10:32:44.794]                 withCallingHandlers({
[10:32:44.794]                   {
[10:32:44.794]                     4
[10:32:44.794]                   }
[10:32:44.794]                 }, immediateCondition = function(cond) {
[10:32:44.794]                   sendCondition <- ...future.makeSendCondition()
[10:32:44.794]                   sendCondition(cond)
[10:32:44.794]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:44.794]                   {
[10:32:44.794]                     inherits <- base::inherits
[10:32:44.794]                     invokeRestart <- base::invokeRestart
[10:32:44.794]                     is.null <- base::is.null
[10:32:44.794]                     muffled <- FALSE
[10:32:44.794]                     if (inherits(cond, "message")) {
[10:32:44.794]                       muffled <- grepl(pattern, "muffleMessage")
[10:32:44.794]                       if (muffled) 
[10:32:44.794]                         invokeRestart("muffleMessage")
[10:32:44.794]                     }
[10:32:44.794]                     else if (inherits(cond, "warning")) {
[10:32:44.794]                       muffled <- grepl(pattern, "muffleWarning")
[10:32:44.794]                       if (muffled) 
[10:32:44.794]                         invokeRestart("muffleWarning")
[10:32:44.794]                     }
[10:32:44.794]                     else if (inherits(cond, "condition")) {
[10:32:44.794]                       if (!is.null(pattern)) {
[10:32:44.794]                         computeRestarts <- base::computeRestarts
[10:32:44.794]                         grepl <- base::grepl
[10:32:44.794]                         restarts <- computeRestarts(cond)
[10:32:44.794]                         for (restart in restarts) {
[10:32:44.794]                           name <- restart$name
[10:32:44.794]                           if (is.null(name)) 
[10:32:44.794]                             next
[10:32:44.794]                           if (!grepl(pattern, name)) 
[10:32:44.794]                             next
[10:32:44.794]                           invokeRestart(restart)
[10:32:44.794]                           muffled <- TRUE
[10:32:44.794]                           break
[10:32:44.794]                         }
[10:32:44.794]                       }
[10:32:44.794]                     }
[10:32:44.794]                     invisible(muffled)
[10:32:44.794]                   }
[10:32:44.794]                   muffleCondition(cond)
[10:32:44.794]                 })
[10:32:44.794]             }))
[10:32:44.794]             future::FutureResult(value = ...future.value$value, 
[10:32:44.794]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:44.794]                   ...future.rng), globalenv = if (FALSE) 
[10:32:44.794]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:44.794]                     ...future.globalenv.names))
[10:32:44.794]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:44.794]         }, condition = base::local({
[10:32:44.794]             c <- base::c
[10:32:44.794]             inherits <- base::inherits
[10:32:44.794]             invokeRestart <- base::invokeRestart
[10:32:44.794]             length <- base::length
[10:32:44.794]             list <- base::list
[10:32:44.794]             seq.int <- base::seq.int
[10:32:44.794]             signalCondition <- base::signalCondition
[10:32:44.794]             sys.calls <- base::sys.calls
[10:32:44.794]             `[[` <- base::`[[`
[10:32:44.794]             `+` <- base::`+`
[10:32:44.794]             `<<-` <- base::`<<-`
[10:32:44.794]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:44.794]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:44.794]                   3L)]
[10:32:44.794]             }
[10:32:44.794]             function(cond) {
[10:32:44.794]                 is_error <- inherits(cond, "error")
[10:32:44.794]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:44.794]                   NULL)
[10:32:44.794]                 if (is_error) {
[10:32:44.794]                   sessionInformation <- function() {
[10:32:44.794]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:44.794]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:44.794]                       search = base::search(), system = base::Sys.info())
[10:32:44.794]                   }
[10:32:44.794]                   ...future.conditions[[length(...future.conditions) + 
[10:32:44.794]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:44.794]                     cond$call), session = sessionInformation(), 
[10:32:44.794]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:44.794]                   signalCondition(cond)
[10:32:44.794]                 }
[10:32:44.794]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:44.794]                 "immediateCondition"))) {
[10:32:44.794]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:44.794]                   ...future.conditions[[length(...future.conditions) + 
[10:32:44.794]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:44.794]                   if (TRUE && !signal) {
[10:32:44.794]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:44.794]                     {
[10:32:44.794]                       inherits <- base::inherits
[10:32:44.794]                       invokeRestart <- base::invokeRestart
[10:32:44.794]                       is.null <- base::is.null
[10:32:44.794]                       muffled <- FALSE
[10:32:44.794]                       if (inherits(cond, "message")) {
[10:32:44.794]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:44.794]                         if (muffled) 
[10:32:44.794]                           invokeRestart("muffleMessage")
[10:32:44.794]                       }
[10:32:44.794]                       else if (inherits(cond, "warning")) {
[10:32:44.794]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:44.794]                         if (muffled) 
[10:32:44.794]                           invokeRestart("muffleWarning")
[10:32:44.794]                       }
[10:32:44.794]                       else if (inherits(cond, "condition")) {
[10:32:44.794]                         if (!is.null(pattern)) {
[10:32:44.794]                           computeRestarts <- base::computeRestarts
[10:32:44.794]                           grepl <- base::grepl
[10:32:44.794]                           restarts <- computeRestarts(cond)
[10:32:44.794]                           for (restart in restarts) {
[10:32:44.794]                             name <- restart$name
[10:32:44.794]                             if (is.null(name)) 
[10:32:44.794]                               next
[10:32:44.794]                             if (!grepl(pattern, name)) 
[10:32:44.794]                               next
[10:32:44.794]                             invokeRestart(restart)
[10:32:44.794]                             muffled <- TRUE
[10:32:44.794]                             break
[10:32:44.794]                           }
[10:32:44.794]                         }
[10:32:44.794]                       }
[10:32:44.794]                       invisible(muffled)
[10:32:44.794]                     }
[10:32:44.794]                     muffleCondition(cond, pattern = "^muffle")
[10:32:44.794]                   }
[10:32:44.794]                 }
[10:32:44.794]                 else {
[10:32:44.794]                   if (TRUE) {
[10:32:44.794]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:44.794]                     {
[10:32:44.794]                       inherits <- base::inherits
[10:32:44.794]                       invokeRestart <- base::invokeRestart
[10:32:44.794]                       is.null <- base::is.null
[10:32:44.794]                       muffled <- FALSE
[10:32:44.794]                       if (inherits(cond, "message")) {
[10:32:44.794]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:44.794]                         if (muffled) 
[10:32:44.794]                           invokeRestart("muffleMessage")
[10:32:44.794]                       }
[10:32:44.794]                       else if (inherits(cond, "warning")) {
[10:32:44.794]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:44.794]                         if (muffled) 
[10:32:44.794]                           invokeRestart("muffleWarning")
[10:32:44.794]                       }
[10:32:44.794]                       else if (inherits(cond, "condition")) {
[10:32:44.794]                         if (!is.null(pattern)) {
[10:32:44.794]                           computeRestarts <- base::computeRestarts
[10:32:44.794]                           grepl <- base::grepl
[10:32:44.794]                           restarts <- computeRestarts(cond)
[10:32:44.794]                           for (restart in restarts) {
[10:32:44.794]                             name <- restart$name
[10:32:44.794]                             if (is.null(name)) 
[10:32:44.794]                               next
[10:32:44.794]                             if (!grepl(pattern, name)) 
[10:32:44.794]                               next
[10:32:44.794]                             invokeRestart(restart)
[10:32:44.794]                             muffled <- TRUE
[10:32:44.794]                             break
[10:32:44.794]                           }
[10:32:44.794]                         }
[10:32:44.794]                       }
[10:32:44.794]                       invisible(muffled)
[10:32:44.794]                     }
[10:32:44.794]                     muffleCondition(cond, pattern = "^muffle")
[10:32:44.794]                   }
[10:32:44.794]                 }
[10:32:44.794]             }
[10:32:44.794]         }))
[10:32:44.794]     }, error = function(ex) {
[10:32:44.794]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:44.794]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:44.794]                 ...future.rng), started = ...future.startTime, 
[10:32:44.794]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:44.794]             version = "1.8"), class = "FutureResult")
[10:32:44.794]     }, finally = {
[10:32:44.794]         if (!identical(...future.workdir, getwd())) 
[10:32:44.794]             setwd(...future.workdir)
[10:32:44.794]         {
[10:32:44.794]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:44.794]                 ...future.oldOptions$nwarnings <- NULL
[10:32:44.794]             }
[10:32:44.794]             base::options(...future.oldOptions)
[10:32:44.794]             if (.Platform$OS.type == "windows") {
[10:32:44.794]                 old_names <- names(...future.oldEnvVars)
[10:32:44.794]                 envs <- base::Sys.getenv()
[10:32:44.794]                 names <- names(envs)
[10:32:44.794]                 common <- intersect(names, old_names)
[10:32:44.794]                 added <- setdiff(names, old_names)
[10:32:44.794]                 removed <- setdiff(old_names, names)
[10:32:44.794]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:44.794]                   envs[common]]
[10:32:44.794]                 NAMES <- toupper(changed)
[10:32:44.794]                 args <- list()
[10:32:44.794]                 for (kk in seq_along(NAMES)) {
[10:32:44.794]                   name <- changed[[kk]]
[10:32:44.794]                   NAME <- NAMES[[kk]]
[10:32:44.794]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:44.794]                     next
[10:32:44.794]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:44.794]                 }
[10:32:44.794]                 NAMES <- toupper(added)
[10:32:44.794]                 for (kk in seq_along(NAMES)) {
[10:32:44.794]                   name <- added[[kk]]
[10:32:44.794]                   NAME <- NAMES[[kk]]
[10:32:44.794]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:44.794]                     next
[10:32:44.794]                   args[[name]] <- ""
[10:32:44.794]                 }
[10:32:44.794]                 NAMES <- toupper(removed)
[10:32:44.794]                 for (kk in seq_along(NAMES)) {
[10:32:44.794]                   name <- removed[[kk]]
[10:32:44.794]                   NAME <- NAMES[[kk]]
[10:32:44.794]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:44.794]                     next
[10:32:44.794]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:44.794]                 }
[10:32:44.794]                 if (length(args) > 0) 
[10:32:44.794]                   base::do.call(base::Sys.setenv, args = args)
[10:32:44.794]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:44.794]             }
[10:32:44.794]             else {
[10:32:44.794]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:44.794]             }
[10:32:44.794]             {
[10:32:44.794]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:44.794]                   0L) {
[10:32:44.794]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:44.794]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:44.794]                   base::options(opts)
[10:32:44.794]                 }
[10:32:44.794]                 {
[10:32:44.794]                   {
[10:32:44.794]                     base::options(mc.cores = ...future.mc.cores.old)
[10:32:44.794]                     NULL
[10:32:44.794]                   }
[10:32:44.794]                   options(future.plan = NULL)
[10:32:44.794]                   if (is.na(NA_character_)) 
[10:32:44.794]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:44.794]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:44.794]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:44.794]                     .init = FALSE)
[10:32:44.794]                 }
[10:32:44.794]             }
[10:32:44.794]         }
[10:32:44.794]     })
[10:32:44.794]     if (TRUE) {
[10:32:44.794]         base::sink(type = "output", split = FALSE)
[10:32:44.794]         if (TRUE) {
[10:32:44.794]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:44.794]         }
[10:32:44.794]         else {
[10:32:44.794]             ...future.result["stdout"] <- base::list(NULL)
[10:32:44.794]         }
[10:32:44.794]         base::close(...future.stdout)
[10:32:44.794]         ...future.stdout <- NULL
[10:32:44.794]     }
[10:32:44.794]     ...future.result$conditions <- ...future.conditions
[10:32:44.794]     ...future.result$finished <- base::Sys.time()
[10:32:44.794]     ...future.result
[10:32:44.794] }
[10:32:44.849] MultisessionFuture started
[10:32:44.850] - Launch lazy future ... done
[10:32:44.850] run() for ‘MultisessionFuture’ ... done
[10:32:44.850] result() for ClusterFuture ...
[10:32:44.850] receiveMessageFromWorker() for ClusterFuture ...
[10:32:44.851] - Validating connection of MultisessionFuture
[10:32:44.851] - received message: FutureResult
[10:32:44.851] - Received FutureResult
[10:32:44.851] - Erased future from FutureRegistry
[10:32:44.852] result() for ClusterFuture ...
[10:32:44.852] - result already collected: FutureResult
[10:32:44.852] result() for ClusterFuture ... done
[10:32:44.852] receiveMessageFromWorker() for ClusterFuture ... done
[10:32:44.852] result() for ClusterFuture ... done
[10:32:44.852] result() for ClusterFuture ...
[10:32:44.853] - result already collected: FutureResult
[10:32:44.853] result() for ClusterFuture ... done
u$a = 2
[10:32:44.853] result() for ClusterFuture ...
[10:32:44.853] receiveMessageFromWorker() for ClusterFuture ...
[10:32:44.854] - Validating connection of MultisessionFuture
[10:32:44.885] - received message: FutureResult
[10:32:44.885] - Received FutureResult
[10:32:44.885] - Erased future from FutureRegistry
[10:32:44.885] result() for ClusterFuture ...
[10:32:44.885] - result already collected: FutureResult
[10:32:44.886] result() for ClusterFuture ... done
[10:32:44.886] receiveMessageFromWorker() for ClusterFuture ... done
[10:32:44.886] result() for ClusterFuture ... done
[10:32:44.886] result() for ClusterFuture ...
[10:32:44.886] - result already collected: FutureResult
[10:32:44.886] result() for ClusterFuture ... done
v$a = 4
[10:32:44.886] getGlobalsAndPackages() ...
[10:32:44.887] Searching for globals...
[10:32:44.888] - globals found: [3] ‘{’, ‘*’, ‘a’
[10:32:44.888] Searching for globals ... DONE
[10:32:44.888] Resolving globals: FALSE
[10:32:44.888] The total size of the 1 globals is 56 bytes (56 bytes)
[10:32:44.889] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[10:32:44.889] - globals: [1] ‘a’
[10:32:44.889] 
[10:32:44.889] getGlobalsAndPackages() ... DONE
[10:32:44.890] run() for ‘Future’ ...
[10:32:44.890] - state: ‘created’
[10:32:44.890] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:32:44.904] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:32:44.905] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:32:44.905]   - Field: ‘node’
[10:32:44.905]   - Field: ‘label’
[10:32:44.905]   - Field: ‘local’
[10:32:44.905]   - Field: ‘owner’
[10:32:44.905]   - Field: ‘envir’
[10:32:44.905]   - Field: ‘workers’
[10:32:44.905]   - Field: ‘packages’
[10:32:44.905]   - Field: ‘gc’
[10:32:44.905]   - Field: ‘conditions’
[10:32:44.906]   - Field: ‘persistent’
[10:32:44.906]   - Field: ‘expr’
[10:32:44.906]   - Field: ‘uuid’
[10:32:44.906]   - Field: ‘seed’
[10:32:44.906]   - Field: ‘version’
[10:32:44.906]   - Field: ‘result’
[10:32:44.906]   - Field: ‘asynchronous’
[10:32:44.906]   - Field: ‘calls’
[10:32:44.907]   - Field: ‘globals’
[10:32:44.907]   - Field: ‘stdout’
[10:32:44.907]   - Field: ‘earlySignal’
[10:32:44.907]   - Field: ‘lazy’
[10:32:44.907]   - Field: ‘state’
[10:32:44.907] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:32:44.907] - Launch lazy future ...
[10:32:44.908] Packages needed by the future expression (n = 0): <none>
[10:32:44.908] Packages needed by future strategies (n = 0): <none>
[10:32:44.908] {
[10:32:44.908]     {
[10:32:44.908]         {
[10:32:44.908]             ...future.startTime <- base::Sys.time()
[10:32:44.908]             {
[10:32:44.908]                 {
[10:32:44.908]                   {
[10:32:44.908]                     {
[10:32:44.908]                       base::local({
[10:32:44.908]                         has_future <- base::requireNamespace("future", 
[10:32:44.908]                           quietly = TRUE)
[10:32:44.908]                         if (has_future) {
[10:32:44.908]                           ns <- base::getNamespace("future")
[10:32:44.908]                           version <- ns[[".package"]][["version"]]
[10:32:44.908]                           if (is.null(version)) 
[10:32:44.908]                             version <- utils::packageVersion("future")
[10:32:44.908]                         }
[10:32:44.908]                         else {
[10:32:44.908]                           version <- NULL
[10:32:44.908]                         }
[10:32:44.908]                         if (!has_future || version < "1.8.0") {
[10:32:44.908]                           info <- base::c(r_version = base::gsub("R version ", 
[10:32:44.908]                             "", base::R.version$version.string), 
[10:32:44.908]                             platform = base::sprintf("%s (%s-bit)", 
[10:32:44.908]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:44.908]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:44.908]                               "release", "version")], collapse = " "), 
[10:32:44.908]                             hostname = base::Sys.info()[["nodename"]])
[10:32:44.908]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:32:44.908]                             info)
[10:32:44.908]                           info <- base::paste(info, collapse = "; ")
[10:32:44.908]                           if (!has_future) {
[10:32:44.908]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:44.908]                               info)
[10:32:44.908]                           }
[10:32:44.908]                           else {
[10:32:44.908]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:44.908]                               info, version)
[10:32:44.908]                           }
[10:32:44.908]                           base::stop(msg)
[10:32:44.908]                         }
[10:32:44.908]                       })
[10:32:44.908]                     }
[10:32:44.908]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:32:44.908]                     base::options(mc.cores = 1L)
[10:32:44.908]                   }
[10:32:44.908]                   ...future.strategy.old <- future::plan("list")
[10:32:44.908]                   options(future.plan = NULL)
[10:32:44.908]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:44.908]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:44.908]                 }
[10:32:44.908]                 ...future.workdir <- getwd()
[10:32:44.908]             }
[10:32:44.908]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:44.908]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:44.908]         }
[10:32:44.908]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:44.908]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:44.908]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:44.908]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:44.908]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:44.908]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:44.908]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:44.908]             base::names(...future.oldOptions))
[10:32:44.908]     }
[10:32:44.908]     if (FALSE) {
[10:32:44.908]     }
[10:32:44.908]     else {
[10:32:44.908]         if (TRUE) {
[10:32:44.908]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:44.908]                 open = "w")
[10:32:44.908]         }
[10:32:44.908]         else {
[10:32:44.908]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:44.908]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:44.908]         }
[10:32:44.908]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:44.908]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:44.908]             base::sink(type = "output", split = FALSE)
[10:32:44.908]             base::close(...future.stdout)
[10:32:44.908]         }, add = TRUE)
[10:32:44.908]     }
[10:32:44.908]     ...future.frame <- base::sys.nframe()
[10:32:44.908]     ...future.conditions <- base::list()
[10:32:44.908]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:44.908]     if (FALSE) {
[10:32:44.908]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:44.908]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:44.908]     }
[10:32:44.908]     ...future.result <- base::tryCatch({
[10:32:44.908]         base::withCallingHandlers({
[10:32:44.908]             ...future.value <- base::withVisible(base::local({
[10:32:44.908]                 ...future.makeSendCondition <- base::local({
[10:32:44.908]                   sendCondition <- NULL
[10:32:44.908]                   function(frame = 1L) {
[10:32:44.908]                     if (is.function(sendCondition)) 
[10:32:44.908]                       return(sendCondition)
[10:32:44.908]                     ns <- getNamespace("parallel")
[10:32:44.908]                     if (exists("sendData", mode = "function", 
[10:32:44.908]                       envir = ns)) {
[10:32:44.908]                       parallel_sendData <- get("sendData", mode = "function", 
[10:32:44.908]                         envir = ns)
[10:32:44.908]                       envir <- sys.frame(frame)
[10:32:44.908]                       master <- NULL
[10:32:44.908]                       while (!identical(envir, .GlobalEnv) && 
[10:32:44.908]                         !identical(envir, emptyenv())) {
[10:32:44.908]                         if (exists("master", mode = "list", envir = envir, 
[10:32:44.908]                           inherits = FALSE)) {
[10:32:44.908]                           master <- get("master", mode = "list", 
[10:32:44.908]                             envir = envir, inherits = FALSE)
[10:32:44.908]                           if (inherits(master, c("SOCKnode", 
[10:32:44.908]                             "SOCK0node"))) {
[10:32:44.908]                             sendCondition <<- function(cond) {
[10:32:44.908]                               data <- list(type = "VALUE", value = cond, 
[10:32:44.908]                                 success = TRUE)
[10:32:44.908]                               parallel_sendData(master, data)
[10:32:44.908]                             }
[10:32:44.908]                             return(sendCondition)
[10:32:44.908]                           }
[10:32:44.908]                         }
[10:32:44.908]                         frame <- frame + 1L
[10:32:44.908]                         envir <- sys.frame(frame)
[10:32:44.908]                       }
[10:32:44.908]                     }
[10:32:44.908]                     sendCondition <<- function(cond) NULL
[10:32:44.908]                   }
[10:32:44.908]                 })
[10:32:44.908]                 withCallingHandlers({
[10:32:44.908]                   {
[10:32:44.908]                     2 * a
[10:32:44.908]                   }
[10:32:44.908]                 }, immediateCondition = function(cond) {
[10:32:44.908]                   sendCondition <- ...future.makeSendCondition()
[10:32:44.908]                   sendCondition(cond)
[10:32:44.908]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:44.908]                   {
[10:32:44.908]                     inherits <- base::inherits
[10:32:44.908]                     invokeRestart <- base::invokeRestart
[10:32:44.908]                     is.null <- base::is.null
[10:32:44.908]                     muffled <- FALSE
[10:32:44.908]                     if (inherits(cond, "message")) {
[10:32:44.908]                       muffled <- grepl(pattern, "muffleMessage")
[10:32:44.908]                       if (muffled) 
[10:32:44.908]                         invokeRestart("muffleMessage")
[10:32:44.908]                     }
[10:32:44.908]                     else if (inherits(cond, "warning")) {
[10:32:44.908]                       muffled <- grepl(pattern, "muffleWarning")
[10:32:44.908]                       if (muffled) 
[10:32:44.908]                         invokeRestart("muffleWarning")
[10:32:44.908]                     }
[10:32:44.908]                     else if (inherits(cond, "condition")) {
[10:32:44.908]                       if (!is.null(pattern)) {
[10:32:44.908]                         computeRestarts <- base::computeRestarts
[10:32:44.908]                         grepl <- base::grepl
[10:32:44.908]                         restarts <- computeRestarts(cond)
[10:32:44.908]                         for (restart in restarts) {
[10:32:44.908]                           name <- restart$name
[10:32:44.908]                           if (is.null(name)) 
[10:32:44.908]                             next
[10:32:44.908]                           if (!grepl(pattern, name)) 
[10:32:44.908]                             next
[10:32:44.908]                           invokeRestart(restart)
[10:32:44.908]                           muffled <- TRUE
[10:32:44.908]                           break
[10:32:44.908]                         }
[10:32:44.908]                       }
[10:32:44.908]                     }
[10:32:44.908]                     invisible(muffled)
[10:32:44.908]                   }
[10:32:44.908]                   muffleCondition(cond)
[10:32:44.908]                 })
[10:32:44.908]             }))
[10:32:44.908]             future::FutureResult(value = ...future.value$value, 
[10:32:44.908]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:44.908]                   ...future.rng), globalenv = if (FALSE) 
[10:32:44.908]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:44.908]                     ...future.globalenv.names))
[10:32:44.908]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:44.908]         }, condition = base::local({
[10:32:44.908]             c <- base::c
[10:32:44.908]             inherits <- base::inherits
[10:32:44.908]             invokeRestart <- base::invokeRestart
[10:32:44.908]             length <- base::length
[10:32:44.908]             list <- base::list
[10:32:44.908]             seq.int <- base::seq.int
[10:32:44.908]             signalCondition <- base::signalCondition
[10:32:44.908]             sys.calls <- base::sys.calls
[10:32:44.908]             `[[` <- base::`[[`
[10:32:44.908]             `+` <- base::`+`
[10:32:44.908]             `<<-` <- base::`<<-`
[10:32:44.908]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:44.908]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:44.908]                   3L)]
[10:32:44.908]             }
[10:32:44.908]             function(cond) {
[10:32:44.908]                 is_error <- inherits(cond, "error")
[10:32:44.908]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:44.908]                   NULL)
[10:32:44.908]                 if (is_error) {
[10:32:44.908]                   sessionInformation <- function() {
[10:32:44.908]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:44.908]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:44.908]                       search = base::search(), system = base::Sys.info())
[10:32:44.908]                   }
[10:32:44.908]                   ...future.conditions[[length(...future.conditions) + 
[10:32:44.908]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:44.908]                     cond$call), session = sessionInformation(), 
[10:32:44.908]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:44.908]                   signalCondition(cond)
[10:32:44.908]                 }
[10:32:44.908]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:44.908]                 "immediateCondition"))) {
[10:32:44.908]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:44.908]                   ...future.conditions[[length(...future.conditions) + 
[10:32:44.908]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:44.908]                   if (TRUE && !signal) {
[10:32:44.908]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:44.908]                     {
[10:32:44.908]                       inherits <- base::inherits
[10:32:44.908]                       invokeRestart <- base::invokeRestart
[10:32:44.908]                       is.null <- base::is.null
[10:32:44.908]                       muffled <- FALSE
[10:32:44.908]                       if (inherits(cond, "message")) {
[10:32:44.908]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:44.908]                         if (muffled) 
[10:32:44.908]                           invokeRestart("muffleMessage")
[10:32:44.908]                       }
[10:32:44.908]                       else if (inherits(cond, "warning")) {
[10:32:44.908]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:44.908]                         if (muffled) 
[10:32:44.908]                           invokeRestart("muffleWarning")
[10:32:44.908]                       }
[10:32:44.908]                       else if (inherits(cond, "condition")) {
[10:32:44.908]                         if (!is.null(pattern)) {
[10:32:44.908]                           computeRestarts <- base::computeRestarts
[10:32:44.908]                           grepl <- base::grepl
[10:32:44.908]                           restarts <- computeRestarts(cond)
[10:32:44.908]                           for (restart in restarts) {
[10:32:44.908]                             name <- restart$name
[10:32:44.908]                             if (is.null(name)) 
[10:32:44.908]                               next
[10:32:44.908]                             if (!grepl(pattern, name)) 
[10:32:44.908]                               next
[10:32:44.908]                             invokeRestart(restart)
[10:32:44.908]                             muffled <- TRUE
[10:32:44.908]                             break
[10:32:44.908]                           }
[10:32:44.908]                         }
[10:32:44.908]                       }
[10:32:44.908]                       invisible(muffled)
[10:32:44.908]                     }
[10:32:44.908]                     muffleCondition(cond, pattern = "^muffle")
[10:32:44.908]                   }
[10:32:44.908]                 }
[10:32:44.908]                 else {
[10:32:44.908]                   if (TRUE) {
[10:32:44.908]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:44.908]                     {
[10:32:44.908]                       inherits <- base::inherits
[10:32:44.908]                       invokeRestart <- base::invokeRestart
[10:32:44.908]                       is.null <- base::is.null
[10:32:44.908]                       muffled <- FALSE
[10:32:44.908]                       if (inherits(cond, "message")) {
[10:32:44.908]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:44.908]                         if (muffled) 
[10:32:44.908]                           invokeRestart("muffleMessage")
[10:32:44.908]                       }
[10:32:44.908]                       else if (inherits(cond, "warning")) {
[10:32:44.908]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:44.908]                         if (muffled) 
[10:32:44.908]                           invokeRestart("muffleWarning")
[10:32:44.908]                       }
[10:32:44.908]                       else if (inherits(cond, "condition")) {
[10:32:44.908]                         if (!is.null(pattern)) {
[10:32:44.908]                           computeRestarts <- base::computeRestarts
[10:32:44.908]                           grepl <- base::grepl
[10:32:44.908]                           restarts <- computeRestarts(cond)
[10:32:44.908]                           for (restart in restarts) {
[10:32:44.908]                             name <- restart$name
[10:32:44.908]                             if (is.null(name)) 
[10:32:44.908]                               next
[10:32:44.908]                             if (!grepl(pattern, name)) 
[10:32:44.908]                               next
[10:32:44.908]                             invokeRestart(restart)
[10:32:44.908]                             muffled <- TRUE
[10:32:44.908]                             break
[10:32:44.908]                           }
[10:32:44.908]                         }
[10:32:44.908]                       }
[10:32:44.908]                       invisible(muffled)
[10:32:44.908]                     }
[10:32:44.908]                     muffleCondition(cond, pattern = "^muffle")
[10:32:44.908]                   }
[10:32:44.908]                 }
[10:32:44.908]             }
[10:32:44.908]         }))
[10:32:44.908]     }, error = function(ex) {
[10:32:44.908]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:44.908]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:44.908]                 ...future.rng), started = ...future.startTime, 
[10:32:44.908]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:44.908]             version = "1.8"), class = "FutureResult")
[10:32:44.908]     }, finally = {
[10:32:44.908]         if (!identical(...future.workdir, getwd())) 
[10:32:44.908]             setwd(...future.workdir)
[10:32:44.908]         {
[10:32:44.908]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:44.908]                 ...future.oldOptions$nwarnings <- NULL
[10:32:44.908]             }
[10:32:44.908]             base::options(...future.oldOptions)
[10:32:44.908]             if (.Platform$OS.type == "windows") {
[10:32:44.908]                 old_names <- names(...future.oldEnvVars)
[10:32:44.908]                 envs <- base::Sys.getenv()
[10:32:44.908]                 names <- names(envs)
[10:32:44.908]                 common <- intersect(names, old_names)
[10:32:44.908]                 added <- setdiff(names, old_names)
[10:32:44.908]                 removed <- setdiff(old_names, names)
[10:32:44.908]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:44.908]                   envs[common]]
[10:32:44.908]                 NAMES <- toupper(changed)
[10:32:44.908]                 args <- list()
[10:32:44.908]                 for (kk in seq_along(NAMES)) {
[10:32:44.908]                   name <- changed[[kk]]
[10:32:44.908]                   NAME <- NAMES[[kk]]
[10:32:44.908]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:44.908]                     next
[10:32:44.908]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:44.908]                 }
[10:32:44.908]                 NAMES <- toupper(added)
[10:32:44.908]                 for (kk in seq_along(NAMES)) {
[10:32:44.908]                   name <- added[[kk]]
[10:32:44.908]                   NAME <- NAMES[[kk]]
[10:32:44.908]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:44.908]                     next
[10:32:44.908]                   args[[name]] <- ""
[10:32:44.908]                 }
[10:32:44.908]                 NAMES <- toupper(removed)
[10:32:44.908]                 for (kk in seq_along(NAMES)) {
[10:32:44.908]                   name <- removed[[kk]]
[10:32:44.908]                   NAME <- NAMES[[kk]]
[10:32:44.908]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:44.908]                     next
[10:32:44.908]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:44.908]                 }
[10:32:44.908]                 if (length(args) > 0) 
[10:32:44.908]                   base::do.call(base::Sys.setenv, args = args)
[10:32:44.908]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:44.908]             }
[10:32:44.908]             else {
[10:32:44.908]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:44.908]             }
[10:32:44.908]             {
[10:32:44.908]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:44.908]                   0L) {
[10:32:44.908]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:44.908]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:44.908]                   base::options(opts)
[10:32:44.908]                 }
[10:32:44.908]                 {
[10:32:44.908]                   {
[10:32:44.908]                     base::options(mc.cores = ...future.mc.cores.old)
[10:32:44.908]                     NULL
[10:32:44.908]                   }
[10:32:44.908]                   options(future.plan = NULL)
[10:32:44.908]                   if (is.na(NA_character_)) 
[10:32:44.908]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:44.908]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:44.908]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:44.908]                     .init = FALSE)
[10:32:44.908]                 }
[10:32:44.908]             }
[10:32:44.908]         }
[10:32:44.908]     })
[10:32:44.908]     if (TRUE) {
[10:32:44.908]         base::sink(type = "output", split = FALSE)
[10:32:44.908]         if (TRUE) {
[10:32:44.908]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:44.908]         }
[10:32:44.908]         else {
[10:32:44.908]             ...future.result["stdout"] <- base::list(NULL)
[10:32:44.908]         }
[10:32:44.908]         base::close(...future.stdout)
[10:32:44.908]         ...future.stdout <- NULL
[10:32:44.908]     }
[10:32:44.908]     ...future.result$conditions <- ...future.conditions
[10:32:44.908]     ...future.result$finished <- base::Sys.time()
[10:32:44.908]     ...future.result
[10:32:44.908] }
[10:32:44.911] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[10:32:44.911] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[10:32:44.912] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[10:32:44.912] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[10:32:44.913] MultisessionFuture started
[10:32:44.913] - Launch lazy future ... done
[10:32:44.913] run() for ‘MultisessionFuture’ ... done
[10:32:44.913] result() for ClusterFuture ...
[10:32:44.913] receiveMessageFromWorker() for ClusterFuture ...
[10:32:44.913] - Validating connection of MultisessionFuture
[10:32:44.914] - received message: FutureResult
[10:32:44.914] - Received FutureResult
[10:32:44.914] - Erased future from FutureRegistry
[10:32:44.915] result() for ClusterFuture ...
[10:32:44.915] - result already collected: FutureResult
[10:32:44.915] result() for ClusterFuture ... done
[10:32:44.915] receiveMessageFromWorker() for ClusterFuture ... done
[10:32:44.915] result() for ClusterFuture ... done
[10:32:44.915] result() for ClusterFuture ...
[10:32:44.915] - result already collected: FutureResult
[10:32:44.915] result() for ClusterFuture ... done
[10:32:44.916] getGlobalsAndPackages() ...
[10:32:44.916] Searching for globals...
[10:32:44.917] - globals found: [3] ‘{’, ‘*’, ‘a’
[10:32:44.917] Searching for globals ... DONE
[10:32:44.917] Resolving globals: FALSE
[10:32:44.917] The total size of the 1 globals is 56 bytes (56 bytes)
[10:32:44.918] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[10:32:44.918] - globals: [1] ‘a’
[10:32:44.918] 
[10:32:44.918] getGlobalsAndPackages() ... DONE
[10:32:44.918] run() for ‘Future’ ...
[10:32:44.919] - state: ‘created’
[10:32:44.919] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:32:44.934] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:32:44.934] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:32:44.934]   - Field: ‘node’
[10:32:44.935]   - Field: ‘label’
[10:32:44.935]   - Field: ‘local’
[10:32:44.935]   - Field: ‘owner’
[10:32:44.935]   - Field: ‘envir’
[10:32:44.935]   - Field: ‘workers’
[10:32:44.935]   - Field: ‘packages’
[10:32:44.935]   - Field: ‘gc’
[10:32:44.935]   - Field: ‘conditions’
[10:32:44.935]   - Field: ‘persistent’
[10:32:44.935]   - Field: ‘expr’
[10:32:44.935]   - Field: ‘uuid’
[10:32:44.936]   - Field: ‘seed’
[10:32:44.936]   - Field: ‘version’
[10:32:44.936]   - Field: ‘result’
[10:32:44.936]   - Field: ‘asynchronous’
[10:32:44.936]   - Field: ‘calls’
[10:32:44.936]   - Field: ‘globals’
[10:32:44.936]   - Field: ‘stdout’
[10:32:44.936]   - Field: ‘earlySignal’
[10:32:44.936]   - Field: ‘lazy’
[10:32:44.936]   - Field: ‘state’
[10:32:44.936] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:32:44.937] - Launch lazy future ...
[10:32:44.937] Packages needed by the future expression (n = 0): <none>
[10:32:44.937] Packages needed by future strategies (n = 0): <none>
[10:32:44.937] {
[10:32:44.937]     {
[10:32:44.937]         {
[10:32:44.937]             ...future.startTime <- base::Sys.time()
[10:32:44.937]             {
[10:32:44.937]                 {
[10:32:44.937]                   {
[10:32:44.937]                     {
[10:32:44.937]                       base::local({
[10:32:44.937]                         has_future <- base::requireNamespace("future", 
[10:32:44.937]                           quietly = TRUE)
[10:32:44.937]                         if (has_future) {
[10:32:44.937]                           ns <- base::getNamespace("future")
[10:32:44.937]                           version <- ns[[".package"]][["version"]]
[10:32:44.937]                           if (is.null(version)) 
[10:32:44.937]                             version <- utils::packageVersion("future")
[10:32:44.937]                         }
[10:32:44.937]                         else {
[10:32:44.937]                           version <- NULL
[10:32:44.937]                         }
[10:32:44.937]                         if (!has_future || version < "1.8.0") {
[10:32:44.937]                           info <- base::c(r_version = base::gsub("R version ", 
[10:32:44.937]                             "", base::R.version$version.string), 
[10:32:44.937]                             platform = base::sprintf("%s (%s-bit)", 
[10:32:44.937]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:44.937]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:44.937]                               "release", "version")], collapse = " "), 
[10:32:44.937]                             hostname = base::Sys.info()[["nodename"]])
[10:32:44.937]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:32:44.937]                             info)
[10:32:44.937]                           info <- base::paste(info, collapse = "; ")
[10:32:44.937]                           if (!has_future) {
[10:32:44.937]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:44.937]                               info)
[10:32:44.937]                           }
[10:32:44.937]                           else {
[10:32:44.937]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:44.937]                               info, version)
[10:32:44.937]                           }
[10:32:44.937]                           base::stop(msg)
[10:32:44.937]                         }
[10:32:44.937]                       })
[10:32:44.937]                     }
[10:32:44.937]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:32:44.937]                     base::options(mc.cores = 1L)
[10:32:44.937]                   }
[10:32:44.937]                   ...future.strategy.old <- future::plan("list")
[10:32:44.937]                   options(future.plan = NULL)
[10:32:44.937]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:44.937]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:44.937]                 }
[10:32:44.937]                 ...future.workdir <- getwd()
[10:32:44.937]             }
[10:32:44.937]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:44.937]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:44.937]         }
[10:32:44.937]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:44.937]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:44.937]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:44.937]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:44.937]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:44.937]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:44.937]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:44.937]             base::names(...future.oldOptions))
[10:32:44.937]     }
[10:32:44.937]     if (FALSE) {
[10:32:44.937]     }
[10:32:44.937]     else {
[10:32:44.937]         if (TRUE) {
[10:32:44.937]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:44.937]                 open = "w")
[10:32:44.937]         }
[10:32:44.937]         else {
[10:32:44.937]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:44.937]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:44.937]         }
[10:32:44.937]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:44.937]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:44.937]             base::sink(type = "output", split = FALSE)
[10:32:44.937]             base::close(...future.stdout)
[10:32:44.937]         }, add = TRUE)
[10:32:44.937]     }
[10:32:44.937]     ...future.frame <- base::sys.nframe()
[10:32:44.937]     ...future.conditions <- base::list()
[10:32:44.937]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:44.937]     if (FALSE) {
[10:32:44.937]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:44.937]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:44.937]     }
[10:32:44.937]     ...future.result <- base::tryCatch({
[10:32:44.937]         base::withCallingHandlers({
[10:32:44.937]             ...future.value <- base::withVisible(base::local({
[10:32:44.937]                 ...future.makeSendCondition <- base::local({
[10:32:44.937]                   sendCondition <- NULL
[10:32:44.937]                   function(frame = 1L) {
[10:32:44.937]                     if (is.function(sendCondition)) 
[10:32:44.937]                       return(sendCondition)
[10:32:44.937]                     ns <- getNamespace("parallel")
[10:32:44.937]                     if (exists("sendData", mode = "function", 
[10:32:44.937]                       envir = ns)) {
[10:32:44.937]                       parallel_sendData <- get("sendData", mode = "function", 
[10:32:44.937]                         envir = ns)
[10:32:44.937]                       envir <- sys.frame(frame)
[10:32:44.937]                       master <- NULL
[10:32:44.937]                       while (!identical(envir, .GlobalEnv) && 
[10:32:44.937]                         !identical(envir, emptyenv())) {
[10:32:44.937]                         if (exists("master", mode = "list", envir = envir, 
[10:32:44.937]                           inherits = FALSE)) {
[10:32:44.937]                           master <- get("master", mode = "list", 
[10:32:44.937]                             envir = envir, inherits = FALSE)
[10:32:44.937]                           if (inherits(master, c("SOCKnode", 
[10:32:44.937]                             "SOCK0node"))) {
[10:32:44.937]                             sendCondition <<- function(cond) {
[10:32:44.937]                               data <- list(type = "VALUE", value = cond, 
[10:32:44.937]                                 success = TRUE)
[10:32:44.937]                               parallel_sendData(master, data)
[10:32:44.937]                             }
[10:32:44.937]                             return(sendCondition)
[10:32:44.937]                           }
[10:32:44.937]                         }
[10:32:44.937]                         frame <- frame + 1L
[10:32:44.937]                         envir <- sys.frame(frame)
[10:32:44.937]                       }
[10:32:44.937]                     }
[10:32:44.937]                     sendCondition <<- function(cond) NULL
[10:32:44.937]                   }
[10:32:44.937]                 })
[10:32:44.937]                 withCallingHandlers({
[10:32:44.937]                   {
[10:32:44.937]                     2 * a
[10:32:44.937]                   }
[10:32:44.937]                 }, immediateCondition = function(cond) {
[10:32:44.937]                   sendCondition <- ...future.makeSendCondition()
[10:32:44.937]                   sendCondition(cond)
[10:32:44.937]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:44.937]                   {
[10:32:44.937]                     inherits <- base::inherits
[10:32:44.937]                     invokeRestart <- base::invokeRestart
[10:32:44.937]                     is.null <- base::is.null
[10:32:44.937]                     muffled <- FALSE
[10:32:44.937]                     if (inherits(cond, "message")) {
[10:32:44.937]                       muffled <- grepl(pattern, "muffleMessage")
[10:32:44.937]                       if (muffled) 
[10:32:44.937]                         invokeRestart("muffleMessage")
[10:32:44.937]                     }
[10:32:44.937]                     else if (inherits(cond, "warning")) {
[10:32:44.937]                       muffled <- grepl(pattern, "muffleWarning")
[10:32:44.937]                       if (muffled) 
[10:32:44.937]                         invokeRestart("muffleWarning")
[10:32:44.937]                     }
[10:32:44.937]                     else if (inherits(cond, "condition")) {
[10:32:44.937]                       if (!is.null(pattern)) {
[10:32:44.937]                         computeRestarts <- base::computeRestarts
[10:32:44.937]                         grepl <- base::grepl
[10:32:44.937]                         restarts <- computeRestarts(cond)
[10:32:44.937]                         for (restart in restarts) {
[10:32:44.937]                           name <- restart$name
[10:32:44.937]                           if (is.null(name)) 
[10:32:44.937]                             next
[10:32:44.937]                           if (!grepl(pattern, name)) 
[10:32:44.937]                             next
[10:32:44.937]                           invokeRestart(restart)
[10:32:44.937]                           muffled <- TRUE
[10:32:44.937]                           break
[10:32:44.937]                         }
[10:32:44.937]                       }
[10:32:44.937]                     }
[10:32:44.937]                     invisible(muffled)
[10:32:44.937]                   }
[10:32:44.937]                   muffleCondition(cond)
[10:32:44.937]                 })
[10:32:44.937]             }))
[10:32:44.937]             future::FutureResult(value = ...future.value$value, 
[10:32:44.937]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:44.937]                   ...future.rng), globalenv = if (FALSE) 
[10:32:44.937]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:44.937]                     ...future.globalenv.names))
[10:32:44.937]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:44.937]         }, condition = base::local({
[10:32:44.937]             c <- base::c
[10:32:44.937]             inherits <- base::inherits
[10:32:44.937]             invokeRestart <- base::invokeRestart
[10:32:44.937]             length <- base::length
[10:32:44.937]             list <- base::list
[10:32:44.937]             seq.int <- base::seq.int
[10:32:44.937]             signalCondition <- base::signalCondition
[10:32:44.937]             sys.calls <- base::sys.calls
[10:32:44.937]             `[[` <- base::`[[`
[10:32:44.937]             `+` <- base::`+`
[10:32:44.937]             `<<-` <- base::`<<-`
[10:32:44.937]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:44.937]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:44.937]                   3L)]
[10:32:44.937]             }
[10:32:44.937]             function(cond) {
[10:32:44.937]                 is_error <- inherits(cond, "error")
[10:32:44.937]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:44.937]                   NULL)
[10:32:44.937]                 if (is_error) {
[10:32:44.937]                   sessionInformation <- function() {
[10:32:44.937]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:44.937]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:44.937]                       search = base::search(), system = base::Sys.info())
[10:32:44.937]                   }
[10:32:44.937]                   ...future.conditions[[length(...future.conditions) + 
[10:32:44.937]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:44.937]                     cond$call), session = sessionInformation(), 
[10:32:44.937]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:44.937]                   signalCondition(cond)
[10:32:44.937]                 }
[10:32:44.937]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:44.937]                 "immediateCondition"))) {
[10:32:44.937]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:44.937]                   ...future.conditions[[length(...future.conditions) + 
[10:32:44.937]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:44.937]                   if (TRUE && !signal) {
[10:32:44.937]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:44.937]                     {
[10:32:44.937]                       inherits <- base::inherits
[10:32:44.937]                       invokeRestart <- base::invokeRestart
[10:32:44.937]                       is.null <- base::is.null
[10:32:44.937]                       muffled <- FALSE
[10:32:44.937]                       if (inherits(cond, "message")) {
[10:32:44.937]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:44.937]                         if (muffled) 
[10:32:44.937]                           invokeRestart("muffleMessage")
[10:32:44.937]                       }
[10:32:44.937]                       else if (inherits(cond, "warning")) {
[10:32:44.937]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:44.937]                         if (muffled) 
[10:32:44.937]                           invokeRestart("muffleWarning")
[10:32:44.937]                       }
[10:32:44.937]                       else if (inherits(cond, "condition")) {
[10:32:44.937]                         if (!is.null(pattern)) {
[10:32:44.937]                           computeRestarts <- base::computeRestarts
[10:32:44.937]                           grepl <- base::grepl
[10:32:44.937]                           restarts <- computeRestarts(cond)
[10:32:44.937]                           for (restart in restarts) {
[10:32:44.937]                             name <- restart$name
[10:32:44.937]                             if (is.null(name)) 
[10:32:44.937]                               next
[10:32:44.937]                             if (!grepl(pattern, name)) 
[10:32:44.937]                               next
[10:32:44.937]                             invokeRestart(restart)
[10:32:44.937]                             muffled <- TRUE
[10:32:44.937]                             break
[10:32:44.937]                           }
[10:32:44.937]                         }
[10:32:44.937]                       }
[10:32:44.937]                       invisible(muffled)
[10:32:44.937]                     }
[10:32:44.937]                     muffleCondition(cond, pattern = "^muffle")
[10:32:44.937]                   }
[10:32:44.937]                 }
[10:32:44.937]                 else {
[10:32:44.937]                   if (TRUE) {
[10:32:44.937]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:44.937]                     {
[10:32:44.937]                       inherits <- base::inherits
[10:32:44.937]                       invokeRestart <- base::invokeRestart
[10:32:44.937]                       is.null <- base::is.null
[10:32:44.937]                       muffled <- FALSE
[10:32:44.937]                       if (inherits(cond, "message")) {
[10:32:44.937]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:44.937]                         if (muffled) 
[10:32:44.937]                           invokeRestart("muffleMessage")
[10:32:44.937]                       }
[10:32:44.937]                       else if (inherits(cond, "warning")) {
[10:32:44.937]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:44.937]                         if (muffled) 
[10:32:44.937]                           invokeRestart("muffleWarning")
[10:32:44.937]                       }
[10:32:44.937]                       else if (inherits(cond, "condition")) {
[10:32:44.937]                         if (!is.null(pattern)) {
[10:32:44.937]                           computeRestarts <- base::computeRestarts
[10:32:44.937]                           grepl <- base::grepl
[10:32:44.937]                           restarts <- computeRestarts(cond)
[10:32:44.937]                           for (restart in restarts) {
[10:32:44.937]                             name <- restart$name
[10:32:44.937]                             if (is.null(name)) 
[10:32:44.937]                               next
[10:32:44.937]                             if (!grepl(pattern, name)) 
[10:32:44.937]                               next
[10:32:44.937]                             invokeRestart(restart)
[10:32:44.937]                             muffled <- TRUE
[10:32:44.937]                             break
[10:32:44.937]                           }
[10:32:44.937]                         }
[10:32:44.937]                       }
[10:32:44.937]                       invisible(muffled)
[10:32:44.937]                     }
[10:32:44.937]                     muffleCondition(cond, pattern = "^muffle")
[10:32:44.937]                   }
[10:32:44.937]                 }
[10:32:44.937]             }
[10:32:44.937]         }))
[10:32:44.937]     }, error = function(ex) {
[10:32:44.937]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:44.937]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:44.937]                 ...future.rng), started = ...future.startTime, 
[10:32:44.937]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:44.937]             version = "1.8"), class = "FutureResult")
[10:32:44.937]     }, finally = {
[10:32:44.937]         if (!identical(...future.workdir, getwd())) 
[10:32:44.937]             setwd(...future.workdir)
[10:32:44.937]         {
[10:32:44.937]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:44.937]                 ...future.oldOptions$nwarnings <- NULL
[10:32:44.937]             }
[10:32:44.937]             base::options(...future.oldOptions)
[10:32:44.937]             if (.Platform$OS.type == "windows") {
[10:32:44.937]                 old_names <- names(...future.oldEnvVars)
[10:32:44.937]                 envs <- base::Sys.getenv()
[10:32:44.937]                 names <- names(envs)
[10:32:44.937]                 common <- intersect(names, old_names)
[10:32:44.937]                 added <- setdiff(names, old_names)
[10:32:44.937]                 removed <- setdiff(old_names, names)
[10:32:44.937]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:44.937]                   envs[common]]
[10:32:44.937]                 NAMES <- toupper(changed)
[10:32:44.937]                 args <- list()
[10:32:44.937]                 for (kk in seq_along(NAMES)) {
[10:32:44.937]                   name <- changed[[kk]]
[10:32:44.937]                   NAME <- NAMES[[kk]]
[10:32:44.937]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:44.937]                     next
[10:32:44.937]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:44.937]                 }
[10:32:44.937]                 NAMES <- toupper(added)
[10:32:44.937]                 for (kk in seq_along(NAMES)) {
[10:32:44.937]                   name <- added[[kk]]
[10:32:44.937]                   NAME <- NAMES[[kk]]
[10:32:44.937]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:44.937]                     next
[10:32:44.937]                   args[[name]] <- ""
[10:32:44.937]                 }
[10:32:44.937]                 NAMES <- toupper(removed)
[10:32:44.937]                 for (kk in seq_along(NAMES)) {
[10:32:44.937]                   name <- removed[[kk]]
[10:32:44.937]                   NAME <- NAMES[[kk]]
[10:32:44.937]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:44.937]                     next
[10:32:44.937]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:44.937]                 }
[10:32:44.937]                 if (length(args) > 0) 
[10:32:44.937]                   base::do.call(base::Sys.setenv, args = args)
[10:32:44.937]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:44.937]             }
[10:32:44.937]             else {
[10:32:44.937]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:44.937]             }
[10:32:44.937]             {
[10:32:44.937]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:44.937]                   0L) {
[10:32:44.937]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:44.937]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:44.937]                   base::options(opts)
[10:32:44.937]                 }
[10:32:44.937]                 {
[10:32:44.937]                   {
[10:32:44.937]                     base::options(mc.cores = ...future.mc.cores.old)
[10:32:44.937]                     NULL
[10:32:44.937]                   }
[10:32:44.937]                   options(future.plan = NULL)
[10:32:44.937]                   if (is.na(NA_character_)) 
[10:32:44.937]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:44.937]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:44.937]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:44.937]                     .init = FALSE)
[10:32:44.937]                 }
[10:32:44.937]             }
[10:32:44.937]         }
[10:32:44.937]     })
[10:32:44.937]     if (TRUE) {
[10:32:44.937]         base::sink(type = "output", split = FALSE)
[10:32:44.937]         if (TRUE) {
[10:32:44.937]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:44.937]         }
[10:32:44.937]         else {
[10:32:44.937]             ...future.result["stdout"] <- base::list(NULL)
[10:32:44.937]         }
[10:32:44.937]         base::close(...future.stdout)
[10:32:44.937]         ...future.stdout <- NULL
[10:32:44.937]     }
[10:32:44.937]     ...future.result$conditions <- ...future.conditions
[10:32:44.937]     ...future.result$finished <- base::Sys.time()
[10:32:44.937]     ...future.result
[10:32:44.937] }
[10:32:44.940] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[10:32:44.940] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[10:32:44.940] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[10:32:44.940] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[10:32:44.941] MultisessionFuture started
[10:32:44.941] - Launch lazy future ... done
[10:32:44.941] run() for ‘MultisessionFuture’ ... done
[10:32:44.941] result() for ClusterFuture ...
[10:32:44.941] receiveMessageFromWorker() for ClusterFuture ...
[10:32:44.941] - Validating connection of MultisessionFuture
[10:32:44.942] - received message: FutureResult
[10:32:44.942] - Received FutureResult
[10:32:44.942] - Erased future from FutureRegistry
[10:32:44.942] result() for ClusterFuture ...
[10:32:44.943] - result already collected: FutureResult
[10:32:44.943] result() for ClusterFuture ... done
[10:32:44.943] receiveMessageFromWorker() for ClusterFuture ... done
[10:32:44.943] result() for ClusterFuture ... done
[10:32:44.943] result() for ClusterFuture ...
[10:32:44.943] - result already collected: FutureResult
[10:32:44.943] result() for ClusterFuture ... done
[10:32:44.943] getGlobalsAndPackages() ...
[10:32:44.943] Searching for globals...
[10:32:44.944] - globals found: [3] ‘{’, ‘*’, ‘a’
[10:32:44.944] Searching for globals ... DONE
[10:32:44.944] Resolving globals: FALSE
[10:32:44.945] The total size of the 1 globals is 56 bytes (56 bytes)
[10:32:44.945] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[10:32:44.945] - globals: [1] ‘a’
[10:32:44.945] 
[10:32:44.945] getGlobalsAndPackages() ... DONE
[10:32:44.945] run() for ‘Future’ ...
[10:32:44.946] - state: ‘created’
[10:32:44.946] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:32:44.959] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:32:44.959] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:32:44.959]   - Field: ‘node’
[10:32:44.959]   - Field: ‘label’
[10:32:44.959]   - Field: ‘local’
[10:32:44.959]   - Field: ‘owner’
[10:32:44.959]   - Field: ‘envir’
[10:32:44.959]   - Field: ‘workers’
[10:32:44.960]   - Field: ‘packages’
[10:32:44.960]   - Field: ‘gc’
[10:32:44.960]   - Field: ‘conditions’
[10:32:44.960]   - Field: ‘persistent’
[10:32:44.960]   - Field: ‘expr’
[10:32:44.960]   - Field: ‘uuid’
[10:32:44.960]   - Field: ‘seed’
[10:32:44.960]   - Field: ‘version’
[10:32:44.960]   - Field: ‘result’
[10:32:44.960]   - Field: ‘asynchronous’
[10:32:44.960]   - Field: ‘calls’
[10:32:44.960]   - Field: ‘globals’
[10:32:44.961]   - Field: ‘stdout’
[10:32:44.961]   - Field: ‘earlySignal’
[10:32:44.961]   - Field: ‘lazy’
[10:32:44.961]   - Field: ‘state’
[10:32:44.961] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:32:44.961] - Launch lazy future ...
[10:32:44.961] Packages needed by the future expression (n = 0): <none>
[10:32:44.961] Packages needed by future strategies (n = 0): <none>
[10:32:44.962] {
[10:32:44.962]     {
[10:32:44.962]         {
[10:32:44.962]             ...future.startTime <- base::Sys.time()
[10:32:44.962]             {
[10:32:44.962]                 {
[10:32:44.962]                   {
[10:32:44.962]                     {
[10:32:44.962]                       base::local({
[10:32:44.962]                         has_future <- base::requireNamespace("future", 
[10:32:44.962]                           quietly = TRUE)
[10:32:44.962]                         if (has_future) {
[10:32:44.962]                           ns <- base::getNamespace("future")
[10:32:44.962]                           version <- ns[[".package"]][["version"]]
[10:32:44.962]                           if (is.null(version)) 
[10:32:44.962]                             version <- utils::packageVersion("future")
[10:32:44.962]                         }
[10:32:44.962]                         else {
[10:32:44.962]                           version <- NULL
[10:32:44.962]                         }
[10:32:44.962]                         if (!has_future || version < "1.8.0") {
[10:32:44.962]                           info <- base::c(r_version = base::gsub("R version ", 
[10:32:44.962]                             "", base::R.version$version.string), 
[10:32:44.962]                             platform = base::sprintf("%s (%s-bit)", 
[10:32:44.962]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:44.962]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:44.962]                               "release", "version")], collapse = " "), 
[10:32:44.962]                             hostname = base::Sys.info()[["nodename"]])
[10:32:44.962]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:32:44.962]                             info)
[10:32:44.962]                           info <- base::paste(info, collapse = "; ")
[10:32:44.962]                           if (!has_future) {
[10:32:44.962]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:44.962]                               info)
[10:32:44.962]                           }
[10:32:44.962]                           else {
[10:32:44.962]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:44.962]                               info, version)
[10:32:44.962]                           }
[10:32:44.962]                           base::stop(msg)
[10:32:44.962]                         }
[10:32:44.962]                       })
[10:32:44.962]                     }
[10:32:44.962]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:32:44.962]                     base::options(mc.cores = 1L)
[10:32:44.962]                   }
[10:32:44.962]                   ...future.strategy.old <- future::plan("list")
[10:32:44.962]                   options(future.plan = NULL)
[10:32:44.962]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:44.962]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:44.962]                 }
[10:32:44.962]                 ...future.workdir <- getwd()
[10:32:44.962]             }
[10:32:44.962]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:44.962]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:44.962]         }
[10:32:44.962]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:44.962]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:44.962]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:44.962]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:44.962]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:44.962]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:44.962]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:44.962]             base::names(...future.oldOptions))
[10:32:44.962]     }
[10:32:44.962]     if (FALSE) {
[10:32:44.962]     }
[10:32:44.962]     else {
[10:32:44.962]         if (TRUE) {
[10:32:44.962]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:44.962]                 open = "w")
[10:32:44.962]         }
[10:32:44.962]         else {
[10:32:44.962]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:44.962]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:44.962]         }
[10:32:44.962]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:44.962]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:44.962]             base::sink(type = "output", split = FALSE)
[10:32:44.962]             base::close(...future.stdout)
[10:32:44.962]         }, add = TRUE)
[10:32:44.962]     }
[10:32:44.962]     ...future.frame <- base::sys.nframe()
[10:32:44.962]     ...future.conditions <- base::list()
[10:32:44.962]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:44.962]     if (FALSE) {
[10:32:44.962]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:44.962]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:44.962]     }
[10:32:44.962]     ...future.result <- base::tryCatch({
[10:32:44.962]         base::withCallingHandlers({
[10:32:44.962]             ...future.value <- base::withVisible(base::local({
[10:32:44.962]                 ...future.makeSendCondition <- base::local({
[10:32:44.962]                   sendCondition <- NULL
[10:32:44.962]                   function(frame = 1L) {
[10:32:44.962]                     if (is.function(sendCondition)) 
[10:32:44.962]                       return(sendCondition)
[10:32:44.962]                     ns <- getNamespace("parallel")
[10:32:44.962]                     if (exists("sendData", mode = "function", 
[10:32:44.962]                       envir = ns)) {
[10:32:44.962]                       parallel_sendData <- get("sendData", mode = "function", 
[10:32:44.962]                         envir = ns)
[10:32:44.962]                       envir <- sys.frame(frame)
[10:32:44.962]                       master <- NULL
[10:32:44.962]                       while (!identical(envir, .GlobalEnv) && 
[10:32:44.962]                         !identical(envir, emptyenv())) {
[10:32:44.962]                         if (exists("master", mode = "list", envir = envir, 
[10:32:44.962]                           inherits = FALSE)) {
[10:32:44.962]                           master <- get("master", mode = "list", 
[10:32:44.962]                             envir = envir, inherits = FALSE)
[10:32:44.962]                           if (inherits(master, c("SOCKnode", 
[10:32:44.962]                             "SOCK0node"))) {
[10:32:44.962]                             sendCondition <<- function(cond) {
[10:32:44.962]                               data <- list(type = "VALUE", value = cond, 
[10:32:44.962]                                 success = TRUE)
[10:32:44.962]                               parallel_sendData(master, data)
[10:32:44.962]                             }
[10:32:44.962]                             return(sendCondition)
[10:32:44.962]                           }
[10:32:44.962]                         }
[10:32:44.962]                         frame <- frame + 1L
[10:32:44.962]                         envir <- sys.frame(frame)
[10:32:44.962]                       }
[10:32:44.962]                     }
[10:32:44.962]                     sendCondition <<- function(cond) NULL
[10:32:44.962]                   }
[10:32:44.962]                 })
[10:32:44.962]                 withCallingHandlers({
[10:32:44.962]                   {
[10:32:44.962]                     2 * a
[10:32:44.962]                   }
[10:32:44.962]                 }, immediateCondition = function(cond) {
[10:32:44.962]                   sendCondition <- ...future.makeSendCondition()
[10:32:44.962]                   sendCondition(cond)
[10:32:44.962]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:44.962]                   {
[10:32:44.962]                     inherits <- base::inherits
[10:32:44.962]                     invokeRestart <- base::invokeRestart
[10:32:44.962]                     is.null <- base::is.null
[10:32:44.962]                     muffled <- FALSE
[10:32:44.962]                     if (inherits(cond, "message")) {
[10:32:44.962]                       muffled <- grepl(pattern, "muffleMessage")
[10:32:44.962]                       if (muffled) 
[10:32:44.962]                         invokeRestart("muffleMessage")
[10:32:44.962]                     }
[10:32:44.962]                     else if (inherits(cond, "warning")) {
[10:32:44.962]                       muffled <- grepl(pattern, "muffleWarning")
[10:32:44.962]                       if (muffled) 
[10:32:44.962]                         invokeRestart("muffleWarning")
[10:32:44.962]                     }
[10:32:44.962]                     else if (inherits(cond, "condition")) {
[10:32:44.962]                       if (!is.null(pattern)) {
[10:32:44.962]                         computeRestarts <- base::computeRestarts
[10:32:44.962]                         grepl <- base::grepl
[10:32:44.962]                         restarts <- computeRestarts(cond)
[10:32:44.962]                         for (restart in restarts) {
[10:32:44.962]                           name <- restart$name
[10:32:44.962]                           if (is.null(name)) 
[10:32:44.962]                             next
[10:32:44.962]                           if (!grepl(pattern, name)) 
[10:32:44.962]                             next
[10:32:44.962]                           invokeRestart(restart)
[10:32:44.962]                           muffled <- TRUE
[10:32:44.962]                           break
[10:32:44.962]                         }
[10:32:44.962]                       }
[10:32:44.962]                     }
[10:32:44.962]                     invisible(muffled)
[10:32:44.962]                   }
[10:32:44.962]                   muffleCondition(cond)
[10:32:44.962]                 })
[10:32:44.962]             }))
[10:32:44.962]             future::FutureResult(value = ...future.value$value, 
[10:32:44.962]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:44.962]                   ...future.rng), globalenv = if (FALSE) 
[10:32:44.962]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:44.962]                     ...future.globalenv.names))
[10:32:44.962]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:44.962]         }, condition = base::local({
[10:32:44.962]             c <- base::c
[10:32:44.962]             inherits <- base::inherits
[10:32:44.962]             invokeRestart <- base::invokeRestart
[10:32:44.962]             length <- base::length
[10:32:44.962]             list <- base::list
[10:32:44.962]             seq.int <- base::seq.int
[10:32:44.962]             signalCondition <- base::signalCondition
[10:32:44.962]             sys.calls <- base::sys.calls
[10:32:44.962]             `[[` <- base::`[[`
[10:32:44.962]             `+` <- base::`+`
[10:32:44.962]             `<<-` <- base::`<<-`
[10:32:44.962]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:44.962]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:44.962]                   3L)]
[10:32:44.962]             }
[10:32:44.962]             function(cond) {
[10:32:44.962]                 is_error <- inherits(cond, "error")
[10:32:44.962]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:44.962]                   NULL)
[10:32:44.962]                 if (is_error) {
[10:32:44.962]                   sessionInformation <- function() {
[10:32:44.962]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:44.962]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:44.962]                       search = base::search(), system = base::Sys.info())
[10:32:44.962]                   }
[10:32:44.962]                   ...future.conditions[[length(...future.conditions) + 
[10:32:44.962]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:44.962]                     cond$call), session = sessionInformation(), 
[10:32:44.962]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:44.962]                   signalCondition(cond)
[10:32:44.962]                 }
[10:32:44.962]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:44.962]                 "immediateCondition"))) {
[10:32:44.962]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:44.962]                   ...future.conditions[[length(...future.conditions) + 
[10:32:44.962]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:44.962]                   if (TRUE && !signal) {
[10:32:44.962]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:44.962]                     {
[10:32:44.962]                       inherits <- base::inherits
[10:32:44.962]                       invokeRestart <- base::invokeRestart
[10:32:44.962]                       is.null <- base::is.null
[10:32:44.962]                       muffled <- FALSE
[10:32:44.962]                       if (inherits(cond, "message")) {
[10:32:44.962]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:44.962]                         if (muffled) 
[10:32:44.962]                           invokeRestart("muffleMessage")
[10:32:44.962]                       }
[10:32:44.962]                       else if (inherits(cond, "warning")) {
[10:32:44.962]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:44.962]                         if (muffled) 
[10:32:44.962]                           invokeRestart("muffleWarning")
[10:32:44.962]                       }
[10:32:44.962]                       else if (inherits(cond, "condition")) {
[10:32:44.962]                         if (!is.null(pattern)) {
[10:32:44.962]                           computeRestarts <- base::computeRestarts
[10:32:44.962]                           grepl <- base::grepl
[10:32:44.962]                           restarts <- computeRestarts(cond)
[10:32:44.962]                           for (restart in restarts) {
[10:32:44.962]                             name <- restart$name
[10:32:44.962]                             if (is.null(name)) 
[10:32:44.962]                               next
[10:32:44.962]                             if (!grepl(pattern, name)) 
[10:32:44.962]                               next
[10:32:44.962]                             invokeRestart(restart)
[10:32:44.962]                             muffled <- TRUE
[10:32:44.962]                             break
[10:32:44.962]                           }
[10:32:44.962]                         }
[10:32:44.962]                       }
[10:32:44.962]                       invisible(muffled)
[10:32:44.962]                     }
[10:32:44.962]                     muffleCondition(cond, pattern = "^muffle")
[10:32:44.962]                   }
[10:32:44.962]                 }
[10:32:44.962]                 else {
[10:32:44.962]                   if (TRUE) {
[10:32:44.962]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:44.962]                     {
[10:32:44.962]                       inherits <- base::inherits
[10:32:44.962]                       invokeRestart <- base::invokeRestart
[10:32:44.962]                       is.null <- base::is.null
[10:32:44.962]                       muffled <- FALSE
[10:32:44.962]                       if (inherits(cond, "message")) {
[10:32:44.962]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:44.962]                         if (muffled) 
[10:32:44.962]                           invokeRestart("muffleMessage")
[10:32:44.962]                       }
[10:32:44.962]                       else if (inherits(cond, "warning")) {
[10:32:44.962]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:44.962]                         if (muffled) 
[10:32:44.962]                           invokeRestart("muffleWarning")
[10:32:44.962]                       }
[10:32:44.962]                       else if (inherits(cond, "condition")) {
[10:32:44.962]                         if (!is.null(pattern)) {
[10:32:44.962]                           computeRestarts <- base::computeRestarts
[10:32:44.962]                           grepl <- base::grepl
[10:32:44.962]                           restarts <- computeRestarts(cond)
[10:32:44.962]                           for (restart in restarts) {
[10:32:44.962]                             name <- restart$name
[10:32:44.962]                             if (is.null(name)) 
[10:32:44.962]                               next
[10:32:44.962]                             if (!grepl(pattern, name)) 
[10:32:44.962]                               next
[10:32:44.962]                             invokeRestart(restart)
[10:32:44.962]                             muffled <- TRUE
[10:32:44.962]                             break
[10:32:44.962]                           }
[10:32:44.962]                         }
[10:32:44.962]                       }
[10:32:44.962]                       invisible(muffled)
[10:32:44.962]                     }
[10:32:44.962]                     muffleCondition(cond, pattern = "^muffle")
[10:32:44.962]                   }
[10:32:44.962]                 }
[10:32:44.962]             }
[10:32:44.962]         }))
[10:32:44.962]     }, error = function(ex) {
[10:32:44.962]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:44.962]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:44.962]                 ...future.rng), started = ...future.startTime, 
[10:32:44.962]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:44.962]             version = "1.8"), class = "FutureResult")
[10:32:44.962]     }, finally = {
[10:32:44.962]         if (!identical(...future.workdir, getwd())) 
[10:32:44.962]             setwd(...future.workdir)
[10:32:44.962]         {
[10:32:44.962]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:44.962]                 ...future.oldOptions$nwarnings <- NULL
[10:32:44.962]             }
[10:32:44.962]             base::options(...future.oldOptions)
[10:32:44.962]             if (.Platform$OS.type == "windows") {
[10:32:44.962]                 old_names <- names(...future.oldEnvVars)
[10:32:44.962]                 envs <- base::Sys.getenv()
[10:32:44.962]                 names <- names(envs)
[10:32:44.962]                 common <- intersect(names, old_names)
[10:32:44.962]                 added <- setdiff(names, old_names)
[10:32:44.962]                 removed <- setdiff(old_names, names)
[10:32:44.962]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:44.962]                   envs[common]]
[10:32:44.962]                 NAMES <- toupper(changed)
[10:32:44.962]                 args <- list()
[10:32:44.962]                 for (kk in seq_along(NAMES)) {
[10:32:44.962]                   name <- changed[[kk]]
[10:32:44.962]                   NAME <- NAMES[[kk]]
[10:32:44.962]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:44.962]                     next
[10:32:44.962]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:44.962]                 }
[10:32:44.962]                 NAMES <- toupper(added)
[10:32:44.962]                 for (kk in seq_along(NAMES)) {
[10:32:44.962]                   name <- added[[kk]]
[10:32:44.962]                   NAME <- NAMES[[kk]]
[10:32:44.962]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:44.962]                     next
[10:32:44.962]                   args[[name]] <- ""
[10:32:44.962]                 }
[10:32:44.962]                 NAMES <- toupper(removed)
[10:32:44.962]                 for (kk in seq_along(NAMES)) {
[10:32:44.962]                   name <- removed[[kk]]
[10:32:44.962]                   NAME <- NAMES[[kk]]
[10:32:44.962]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:44.962]                     next
[10:32:44.962]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:44.962]                 }
[10:32:44.962]                 if (length(args) > 0) 
[10:32:44.962]                   base::do.call(base::Sys.setenv, args = args)
[10:32:44.962]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:44.962]             }
[10:32:44.962]             else {
[10:32:44.962]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:44.962]             }
[10:32:44.962]             {
[10:32:44.962]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:44.962]                   0L) {
[10:32:44.962]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:44.962]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:44.962]                   base::options(opts)
[10:32:44.962]                 }
[10:32:44.962]                 {
[10:32:44.962]                   {
[10:32:44.962]                     base::options(mc.cores = ...future.mc.cores.old)
[10:32:44.962]                     NULL
[10:32:44.962]                   }
[10:32:44.962]                   options(future.plan = NULL)
[10:32:44.962]                   if (is.na(NA_character_)) 
[10:32:44.962]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:44.962]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:44.962]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:44.962]                     .init = FALSE)
[10:32:44.962]                 }
[10:32:44.962]             }
[10:32:44.962]         }
[10:32:44.962]     })
[10:32:44.962]     if (TRUE) {
[10:32:44.962]         base::sink(type = "output", split = FALSE)
[10:32:44.962]         if (TRUE) {
[10:32:44.962]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:44.962]         }
[10:32:44.962]         else {
[10:32:44.962]             ...future.result["stdout"] <- base::list(NULL)
[10:32:44.962]         }
[10:32:44.962]         base::close(...future.stdout)
[10:32:44.962]         ...future.stdout <- NULL
[10:32:44.962]     }
[10:32:44.962]     ...future.result$conditions <- ...future.conditions
[10:32:44.962]     ...future.result$finished <- base::Sys.time()
[10:32:44.962]     ...future.result
[10:32:44.962] }
[10:32:44.964] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[10:32:44.964] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[10:32:44.965] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[10:32:44.965] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[10:32:44.965] MultisessionFuture started
[10:32:44.965] - Launch lazy future ... done
[10:32:44.966] run() for ‘MultisessionFuture’ ... done
[10:32:44.966] result() for ClusterFuture ...
[10:32:44.966] receiveMessageFromWorker() for ClusterFuture ...
[10:32:44.966] - Validating connection of MultisessionFuture
[10:32:44.967] - received message: FutureResult
[10:32:44.967] - Received FutureResult
[10:32:44.967] - Erased future from FutureRegistry
[10:32:44.967] result() for ClusterFuture ...
[10:32:44.968] - result already collected: FutureResult
[10:32:44.968] result() for ClusterFuture ... done
[10:32:44.968] receiveMessageFromWorker() for ClusterFuture ... done
[10:32:44.968] result() for ClusterFuture ... done
[10:32:44.968] result() for ClusterFuture ...
[10:32:44.968] - result already collected: FutureResult
[10:32:44.968] result() for ClusterFuture ... done
[10:32:44.968] getGlobalsAndPackages() ...
[10:32:44.968] Searching for globals...
[10:32:44.969] - globals found: [3] ‘{’, ‘*’, ‘a’
[10:32:44.969] Searching for globals ... DONE
[10:32:44.969] Resolving globals: FALSE
[10:32:44.970] The total size of the 1 globals is 56 bytes (56 bytes)
[10:32:44.970] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[10:32:44.970] - globals: [1] ‘a’
[10:32:44.970] 
[10:32:44.970] getGlobalsAndPackages() ... DONE
[10:32:44.971] run() for ‘Future’ ...
[10:32:44.971] - state: ‘created’
[10:32:44.971] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:32:44.985] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:32:44.985] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:32:44.985]   - Field: ‘node’
[10:32:44.985]   - Field: ‘label’
[10:32:44.985]   - Field: ‘local’
[10:32:44.985]   - Field: ‘owner’
[10:32:44.985]   - Field: ‘envir’
[10:32:44.985]   - Field: ‘workers’
[10:32:44.985]   - Field: ‘packages’
[10:32:44.986]   - Field: ‘gc’
[10:32:44.986]   - Field: ‘conditions’
[10:32:44.986]   - Field: ‘persistent’
[10:32:44.986]   - Field: ‘expr’
[10:32:44.986]   - Field: ‘uuid’
[10:32:44.986]   - Field: ‘seed’
[10:32:44.986]   - Field: ‘version’
[10:32:44.986]   - Field: ‘result’
[10:32:44.986]   - Field: ‘asynchronous’
[10:32:44.986]   - Field: ‘calls’
[10:32:44.987]   - Field: ‘globals’
[10:32:44.987]   - Field: ‘stdout’
[10:32:44.987]   - Field: ‘earlySignal’
[10:32:44.987]   - Field: ‘lazy’
[10:32:44.987]   - Field: ‘state’
[10:32:44.987] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:32:44.987] - Launch lazy future ...
[10:32:44.987] Packages needed by the future expression (n = 0): <none>
[10:32:44.987] Packages needed by future strategies (n = 0): <none>
[10:32:44.988] {
[10:32:44.988]     {
[10:32:44.988]         {
[10:32:44.988]             ...future.startTime <- base::Sys.time()
[10:32:44.988]             {
[10:32:44.988]                 {
[10:32:44.988]                   {
[10:32:44.988]                     {
[10:32:44.988]                       base::local({
[10:32:44.988]                         has_future <- base::requireNamespace("future", 
[10:32:44.988]                           quietly = TRUE)
[10:32:44.988]                         if (has_future) {
[10:32:44.988]                           ns <- base::getNamespace("future")
[10:32:44.988]                           version <- ns[[".package"]][["version"]]
[10:32:44.988]                           if (is.null(version)) 
[10:32:44.988]                             version <- utils::packageVersion("future")
[10:32:44.988]                         }
[10:32:44.988]                         else {
[10:32:44.988]                           version <- NULL
[10:32:44.988]                         }
[10:32:44.988]                         if (!has_future || version < "1.8.0") {
[10:32:44.988]                           info <- base::c(r_version = base::gsub("R version ", 
[10:32:44.988]                             "", base::R.version$version.string), 
[10:32:44.988]                             platform = base::sprintf("%s (%s-bit)", 
[10:32:44.988]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:44.988]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:44.988]                               "release", "version")], collapse = " "), 
[10:32:44.988]                             hostname = base::Sys.info()[["nodename"]])
[10:32:44.988]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:32:44.988]                             info)
[10:32:44.988]                           info <- base::paste(info, collapse = "; ")
[10:32:44.988]                           if (!has_future) {
[10:32:44.988]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:44.988]                               info)
[10:32:44.988]                           }
[10:32:44.988]                           else {
[10:32:44.988]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:44.988]                               info, version)
[10:32:44.988]                           }
[10:32:44.988]                           base::stop(msg)
[10:32:44.988]                         }
[10:32:44.988]                       })
[10:32:44.988]                     }
[10:32:44.988]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:32:44.988]                     base::options(mc.cores = 1L)
[10:32:44.988]                   }
[10:32:44.988]                   ...future.strategy.old <- future::plan("list")
[10:32:44.988]                   options(future.plan = NULL)
[10:32:44.988]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:44.988]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:44.988]                 }
[10:32:44.988]                 ...future.workdir <- getwd()
[10:32:44.988]             }
[10:32:44.988]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:44.988]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:44.988]         }
[10:32:44.988]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:44.988]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:44.988]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:44.988]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:44.988]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:44.988]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:44.988]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:44.988]             base::names(...future.oldOptions))
[10:32:44.988]     }
[10:32:44.988]     if (FALSE) {
[10:32:44.988]     }
[10:32:44.988]     else {
[10:32:44.988]         if (TRUE) {
[10:32:44.988]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:44.988]                 open = "w")
[10:32:44.988]         }
[10:32:44.988]         else {
[10:32:44.988]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:44.988]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:44.988]         }
[10:32:44.988]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:44.988]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:44.988]             base::sink(type = "output", split = FALSE)
[10:32:44.988]             base::close(...future.stdout)
[10:32:44.988]         }, add = TRUE)
[10:32:44.988]     }
[10:32:44.988]     ...future.frame <- base::sys.nframe()
[10:32:44.988]     ...future.conditions <- base::list()
[10:32:44.988]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:44.988]     if (FALSE) {
[10:32:44.988]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:44.988]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:44.988]     }
[10:32:44.988]     ...future.result <- base::tryCatch({
[10:32:44.988]         base::withCallingHandlers({
[10:32:44.988]             ...future.value <- base::withVisible(base::local({
[10:32:44.988]                 ...future.makeSendCondition <- base::local({
[10:32:44.988]                   sendCondition <- NULL
[10:32:44.988]                   function(frame = 1L) {
[10:32:44.988]                     if (is.function(sendCondition)) 
[10:32:44.988]                       return(sendCondition)
[10:32:44.988]                     ns <- getNamespace("parallel")
[10:32:44.988]                     if (exists("sendData", mode = "function", 
[10:32:44.988]                       envir = ns)) {
[10:32:44.988]                       parallel_sendData <- get("sendData", mode = "function", 
[10:32:44.988]                         envir = ns)
[10:32:44.988]                       envir <- sys.frame(frame)
[10:32:44.988]                       master <- NULL
[10:32:44.988]                       while (!identical(envir, .GlobalEnv) && 
[10:32:44.988]                         !identical(envir, emptyenv())) {
[10:32:44.988]                         if (exists("master", mode = "list", envir = envir, 
[10:32:44.988]                           inherits = FALSE)) {
[10:32:44.988]                           master <- get("master", mode = "list", 
[10:32:44.988]                             envir = envir, inherits = FALSE)
[10:32:44.988]                           if (inherits(master, c("SOCKnode", 
[10:32:44.988]                             "SOCK0node"))) {
[10:32:44.988]                             sendCondition <<- function(cond) {
[10:32:44.988]                               data <- list(type = "VALUE", value = cond, 
[10:32:44.988]                                 success = TRUE)
[10:32:44.988]                               parallel_sendData(master, data)
[10:32:44.988]                             }
[10:32:44.988]                             return(sendCondition)
[10:32:44.988]                           }
[10:32:44.988]                         }
[10:32:44.988]                         frame <- frame + 1L
[10:32:44.988]                         envir <- sys.frame(frame)
[10:32:44.988]                       }
[10:32:44.988]                     }
[10:32:44.988]                     sendCondition <<- function(cond) NULL
[10:32:44.988]                   }
[10:32:44.988]                 })
[10:32:44.988]                 withCallingHandlers({
[10:32:44.988]                   {
[10:32:44.988]                     2 * a
[10:32:44.988]                   }
[10:32:44.988]                 }, immediateCondition = function(cond) {
[10:32:44.988]                   sendCondition <- ...future.makeSendCondition()
[10:32:44.988]                   sendCondition(cond)
[10:32:44.988]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:44.988]                   {
[10:32:44.988]                     inherits <- base::inherits
[10:32:44.988]                     invokeRestart <- base::invokeRestart
[10:32:44.988]                     is.null <- base::is.null
[10:32:44.988]                     muffled <- FALSE
[10:32:44.988]                     if (inherits(cond, "message")) {
[10:32:44.988]                       muffled <- grepl(pattern, "muffleMessage")
[10:32:44.988]                       if (muffled) 
[10:32:44.988]                         invokeRestart("muffleMessage")
[10:32:44.988]                     }
[10:32:44.988]                     else if (inherits(cond, "warning")) {
[10:32:44.988]                       muffled <- grepl(pattern, "muffleWarning")
[10:32:44.988]                       if (muffled) 
[10:32:44.988]                         invokeRestart("muffleWarning")
[10:32:44.988]                     }
[10:32:44.988]                     else if (inherits(cond, "condition")) {
[10:32:44.988]                       if (!is.null(pattern)) {
[10:32:44.988]                         computeRestarts <- base::computeRestarts
[10:32:44.988]                         grepl <- base::grepl
[10:32:44.988]                         restarts <- computeRestarts(cond)
[10:32:44.988]                         for (restart in restarts) {
[10:32:44.988]                           name <- restart$name
[10:32:44.988]                           if (is.null(name)) 
[10:32:44.988]                             next
[10:32:44.988]                           if (!grepl(pattern, name)) 
[10:32:44.988]                             next
[10:32:44.988]                           invokeRestart(restart)
[10:32:44.988]                           muffled <- TRUE
[10:32:44.988]                           break
[10:32:44.988]                         }
[10:32:44.988]                       }
[10:32:44.988]                     }
[10:32:44.988]                     invisible(muffled)
[10:32:44.988]                   }
[10:32:44.988]                   muffleCondition(cond)
[10:32:44.988]                 })
[10:32:44.988]             }))
[10:32:44.988]             future::FutureResult(value = ...future.value$value, 
[10:32:44.988]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:44.988]                   ...future.rng), globalenv = if (FALSE) 
[10:32:44.988]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:44.988]                     ...future.globalenv.names))
[10:32:44.988]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:44.988]         }, condition = base::local({
[10:32:44.988]             c <- base::c
[10:32:44.988]             inherits <- base::inherits
[10:32:44.988]             invokeRestart <- base::invokeRestart
[10:32:44.988]             length <- base::length
[10:32:44.988]             list <- base::list
[10:32:44.988]             seq.int <- base::seq.int
[10:32:44.988]             signalCondition <- base::signalCondition
[10:32:44.988]             sys.calls <- base::sys.calls
[10:32:44.988]             `[[` <- base::`[[`
[10:32:44.988]             `+` <- base::`+`
[10:32:44.988]             `<<-` <- base::`<<-`
[10:32:44.988]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:44.988]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:44.988]                   3L)]
[10:32:44.988]             }
[10:32:44.988]             function(cond) {
[10:32:44.988]                 is_error <- inherits(cond, "error")
[10:32:44.988]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:44.988]                   NULL)
[10:32:44.988]                 if (is_error) {
[10:32:44.988]                   sessionInformation <- function() {
[10:32:44.988]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:44.988]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:44.988]                       search = base::search(), system = base::Sys.info())
[10:32:44.988]                   }
[10:32:44.988]                   ...future.conditions[[length(...future.conditions) + 
[10:32:44.988]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:44.988]                     cond$call), session = sessionInformation(), 
[10:32:44.988]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:44.988]                   signalCondition(cond)
[10:32:44.988]                 }
[10:32:44.988]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:44.988]                 "immediateCondition"))) {
[10:32:44.988]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:44.988]                   ...future.conditions[[length(...future.conditions) + 
[10:32:44.988]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:44.988]                   if (TRUE && !signal) {
[10:32:44.988]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:44.988]                     {
[10:32:44.988]                       inherits <- base::inherits
[10:32:44.988]                       invokeRestart <- base::invokeRestart
[10:32:44.988]                       is.null <- base::is.null
[10:32:44.988]                       muffled <- FALSE
[10:32:44.988]                       if (inherits(cond, "message")) {
[10:32:44.988]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:44.988]                         if (muffled) 
[10:32:44.988]                           invokeRestart("muffleMessage")
[10:32:44.988]                       }
[10:32:44.988]                       else if (inherits(cond, "warning")) {
[10:32:44.988]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:44.988]                         if (muffled) 
[10:32:44.988]                           invokeRestart("muffleWarning")
[10:32:44.988]                       }
[10:32:44.988]                       else if (inherits(cond, "condition")) {
[10:32:44.988]                         if (!is.null(pattern)) {
[10:32:44.988]                           computeRestarts <- base::computeRestarts
[10:32:44.988]                           grepl <- base::grepl
[10:32:44.988]                           restarts <- computeRestarts(cond)
[10:32:44.988]                           for (restart in restarts) {
[10:32:44.988]                             name <- restart$name
[10:32:44.988]                             if (is.null(name)) 
[10:32:44.988]                               next
[10:32:44.988]                             if (!grepl(pattern, name)) 
[10:32:44.988]                               next
[10:32:44.988]                             invokeRestart(restart)
[10:32:44.988]                             muffled <- TRUE
[10:32:44.988]                             break
[10:32:44.988]                           }
[10:32:44.988]                         }
[10:32:44.988]                       }
[10:32:44.988]                       invisible(muffled)
[10:32:44.988]                     }
[10:32:44.988]                     muffleCondition(cond, pattern = "^muffle")
[10:32:44.988]                   }
[10:32:44.988]                 }
[10:32:44.988]                 else {
[10:32:44.988]                   if (TRUE) {
[10:32:44.988]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:44.988]                     {
[10:32:44.988]                       inherits <- base::inherits
[10:32:44.988]                       invokeRestart <- base::invokeRestart
[10:32:44.988]                       is.null <- base::is.null
[10:32:44.988]                       muffled <- FALSE
[10:32:44.988]                       if (inherits(cond, "message")) {
[10:32:44.988]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:44.988]                         if (muffled) 
[10:32:44.988]                           invokeRestart("muffleMessage")
[10:32:44.988]                       }
[10:32:44.988]                       else if (inherits(cond, "warning")) {
[10:32:44.988]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:44.988]                         if (muffled) 
[10:32:44.988]                           invokeRestart("muffleWarning")
[10:32:44.988]                       }
[10:32:44.988]                       else if (inherits(cond, "condition")) {
[10:32:44.988]                         if (!is.null(pattern)) {
[10:32:44.988]                           computeRestarts <- base::computeRestarts
[10:32:44.988]                           grepl <- base::grepl
[10:32:44.988]                           restarts <- computeRestarts(cond)
[10:32:44.988]                           for (restart in restarts) {
[10:32:44.988]                             name <- restart$name
[10:32:44.988]                             if (is.null(name)) 
[10:32:44.988]                               next
[10:32:44.988]                             if (!grepl(pattern, name)) 
[10:32:44.988]                               next
[10:32:44.988]                             invokeRestart(restart)
[10:32:44.988]                             muffled <- TRUE
[10:32:44.988]                             break
[10:32:44.988]                           }
[10:32:44.988]                         }
[10:32:44.988]                       }
[10:32:44.988]                       invisible(muffled)
[10:32:44.988]                     }
[10:32:44.988]                     muffleCondition(cond, pattern = "^muffle")
[10:32:44.988]                   }
[10:32:44.988]                 }
[10:32:44.988]             }
[10:32:44.988]         }))
[10:32:44.988]     }, error = function(ex) {
[10:32:44.988]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:44.988]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:44.988]                 ...future.rng), started = ...future.startTime, 
[10:32:44.988]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:44.988]             version = "1.8"), class = "FutureResult")
[10:32:44.988]     }, finally = {
[10:32:44.988]         if (!identical(...future.workdir, getwd())) 
[10:32:44.988]             setwd(...future.workdir)
[10:32:44.988]         {
[10:32:44.988]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:44.988]                 ...future.oldOptions$nwarnings <- NULL
[10:32:44.988]             }
[10:32:44.988]             base::options(...future.oldOptions)
[10:32:44.988]             if (.Platform$OS.type == "windows") {
[10:32:44.988]                 old_names <- names(...future.oldEnvVars)
[10:32:44.988]                 envs <- base::Sys.getenv()
[10:32:44.988]                 names <- names(envs)
[10:32:44.988]                 common <- intersect(names, old_names)
[10:32:44.988]                 added <- setdiff(names, old_names)
[10:32:44.988]                 removed <- setdiff(old_names, names)
[10:32:44.988]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:44.988]                   envs[common]]
[10:32:44.988]                 NAMES <- toupper(changed)
[10:32:44.988]                 args <- list()
[10:32:44.988]                 for (kk in seq_along(NAMES)) {
[10:32:44.988]                   name <- changed[[kk]]
[10:32:44.988]                   NAME <- NAMES[[kk]]
[10:32:44.988]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:44.988]                     next
[10:32:44.988]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:44.988]                 }
[10:32:44.988]                 NAMES <- toupper(added)
[10:32:44.988]                 for (kk in seq_along(NAMES)) {
[10:32:44.988]                   name <- added[[kk]]
[10:32:44.988]                   NAME <- NAMES[[kk]]
[10:32:44.988]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:44.988]                     next
[10:32:44.988]                   args[[name]] <- ""
[10:32:44.988]                 }
[10:32:44.988]                 NAMES <- toupper(removed)
[10:32:44.988]                 for (kk in seq_along(NAMES)) {
[10:32:44.988]                   name <- removed[[kk]]
[10:32:44.988]                   NAME <- NAMES[[kk]]
[10:32:44.988]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:44.988]                     next
[10:32:44.988]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:44.988]                 }
[10:32:44.988]                 if (length(args) > 0) 
[10:32:44.988]                   base::do.call(base::Sys.setenv, args = args)
[10:32:44.988]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:44.988]             }
[10:32:44.988]             else {
[10:32:44.988]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:44.988]             }
[10:32:44.988]             {
[10:32:44.988]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:44.988]                   0L) {
[10:32:44.988]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:44.988]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:44.988]                   base::options(opts)
[10:32:44.988]                 }
[10:32:44.988]                 {
[10:32:44.988]                   {
[10:32:44.988]                     base::options(mc.cores = ...future.mc.cores.old)
[10:32:44.988]                     NULL
[10:32:44.988]                   }
[10:32:44.988]                   options(future.plan = NULL)
[10:32:44.988]                   if (is.na(NA_character_)) 
[10:32:44.988]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:44.988]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:44.988]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:44.988]                     .init = FALSE)
[10:32:44.988]                 }
[10:32:44.988]             }
[10:32:44.988]         }
[10:32:44.988]     })
[10:32:44.988]     if (TRUE) {
[10:32:44.988]         base::sink(type = "output", split = FALSE)
[10:32:44.988]         if (TRUE) {
[10:32:44.988]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:44.988]         }
[10:32:44.988]         else {
[10:32:44.988]             ...future.result["stdout"] <- base::list(NULL)
[10:32:44.988]         }
[10:32:44.988]         base::close(...future.stdout)
[10:32:44.988]         ...future.stdout <- NULL
[10:32:44.988]     }
[10:32:44.988]     ...future.result$conditions <- ...future.conditions
[10:32:44.988]     ...future.result$finished <- base::Sys.time()
[10:32:44.988]     ...future.result
[10:32:44.988] }
[10:32:44.990] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[10:32:44.990] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[10:32:44.991] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[10:32:44.991] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[10:32:44.991] MultisessionFuture started
[10:32:44.992] - Launch lazy future ... done
[10:32:44.992] run() for ‘MultisessionFuture’ ... done
[10:32:44.992] result() for ClusterFuture ...
[10:32:44.992] receiveMessageFromWorker() for ClusterFuture ...
[10:32:44.992] - Validating connection of MultisessionFuture
[10:32:44.993] - received message: FutureResult
[10:32:44.993] - Received FutureResult
[10:32:44.993] - Erased future from FutureRegistry
[10:32:44.994] result() for ClusterFuture ...
[10:32:44.994] - result already collected: FutureResult
[10:32:44.994] result() for ClusterFuture ... done
[10:32:44.994] receiveMessageFromWorker() for ClusterFuture ... done
[10:32:44.994] result() for ClusterFuture ... done
[10:32:44.994] result() for ClusterFuture ...
[10:32:44.994] - result already collected: FutureResult
[10:32:44.994] result() for ClusterFuture ... done
[10:32:44.994] getGlobalsAndPackages() ...
[10:32:44.994] Searching for globals...
[10:32:44.995] - globals found: [3] ‘{’, ‘*’, ‘a’
[10:32:44.995] Searching for globals ... DONE
[10:32:44.995] Resolving globals: FALSE
[10:32:44.996] The total size of the 1 globals is 56 bytes (56 bytes)
[10:32:44.996] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[10:32:44.996] - globals: [1] ‘a’
[10:32:44.996] 
[10:32:44.996] getGlobalsAndPackages() ... DONE
[10:32:44.997] run() for ‘Future’ ...
[10:32:44.997] - state: ‘created’
[10:32:44.997] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:32:45.010] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:32:45.010] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:32:45.010]   - Field: ‘node’
[10:32:45.010]   - Field: ‘label’
[10:32:45.010]   - Field: ‘local’
[10:32:45.011]   - Field: ‘owner’
[10:32:45.011]   - Field: ‘envir’
[10:32:45.011]   - Field: ‘workers’
[10:32:45.011]   - Field: ‘packages’
[10:32:45.011]   - Field: ‘gc’
[10:32:45.011]   - Field: ‘conditions’
[10:32:45.011]   - Field: ‘persistent’
[10:32:45.011]   - Field: ‘expr’
[10:32:45.011]   - Field: ‘uuid’
[10:32:45.011]   - Field: ‘seed’
[10:32:45.011]   - Field: ‘version’
[10:32:45.012]   - Field: ‘result’
[10:32:45.012]   - Field: ‘asynchronous’
[10:32:45.012]   - Field: ‘calls’
[10:32:45.012]   - Field: ‘globals’
[10:32:45.012]   - Field: ‘stdout’
[10:32:45.012]   - Field: ‘earlySignal’
[10:32:45.012]   - Field: ‘lazy’
[10:32:45.012]   - Field: ‘state’
[10:32:45.012] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:32:45.012] - Launch lazy future ...
[10:32:45.013] Packages needed by the future expression (n = 0): <none>
[10:32:45.013] Packages needed by future strategies (n = 0): <none>
[10:32:45.013] {
[10:32:45.013]     {
[10:32:45.013]         {
[10:32:45.013]             ...future.startTime <- base::Sys.time()
[10:32:45.013]             {
[10:32:45.013]                 {
[10:32:45.013]                   {
[10:32:45.013]                     {
[10:32:45.013]                       base::local({
[10:32:45.013]                         has_future <- base::requireNamespace("future", 
[10:32:45.013]                           quietly = TRUE)
[10:32:45.013]                         if (has_future) {
[10:32:45.013]                           ns <- base::getNamespace("future")
[10:32:45.013]                           version <- ns[[".package"]][["version"]]
[10:32:45.013]                           if (is.null(version)) 
[10:32:45.013]                             version <- utils::packageVersion("future")
[10:32:45.013]                         }
[10:32:45.013]                         else {
[10:32:45.013]                           version <- NULL
[10:32:45.013]                         }
[10:32:45.013]                         if (!has_future || version < "1.8.0") {
[10:32:45.013]                           info <- base::c(r_version = base::gsub("R version ", 
[10:32:45.013]                             "", base::R.version$version.string), 
[10:32:45.013]                             platform = base::sprintf("%s (%s-bit)", 
[10:32:45.013]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:45.013]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:45.013]                               "release", "version")], collapse = " "), 
[10:32:45.013]                             hostname = base::Sys.info()[["nodename"]])
[10:32:45.013]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:32:45.013]                             info)
[10:32:45.013]                           info <- base::paste(info, collapse = "; ")
[10:32:45.013]                           if (!has_future) {
[10:32:45.013]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:45.013]                               info)
[10:32:45.013]                           }
[10:32:45.013]                           else {
[10:32:45.013]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:45.013]                               info, version)
[10:32:45.013]                           }
[10:32:45.013]                           base::stop(msg)
[10:32:45.013]                         }
[10:32:45.013]                       })
[10:32:45.013]                     }
[10:32:45.013]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:32:45.013]                     base::options(mc.cores = 1L)
[10:32:45.013]                   }
[10:32:45.013]                   ...future.strategy.old <- future::plan("list")
[10:32:45.013]                   options(future.plan = NULL)
[10:32:45.013]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:45.013]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:45.013]                 }
[10:32:45.013]                 ...future.workdir <- getwd()
[10:32:45.013]             }
[10:32:45.013]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:45.013]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:45.013]         }
[10:32:45.013]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:45.013]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:45.013]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:45.013]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:45.013]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:45.013]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:45.013]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:45.013]             base::names(...future.oldOptions))
[10:32:45.013]     }
[10:32:45.013]     if (FALSE) {
[10:32:45.013]     }
[10:32:45.013]     else {
[10:32:45.013]         if (TRUE) {
[10:32:45.013]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:45.013]                 open = "w")
[10:32:45.013]         }
[10:32:45.013]         else {
[10:32:45.013]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:45.013]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:45.013]         }
[10:32:45.013]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:45.013]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:45.013]             base::sink(type = "output", split = FALSE)
[10:32:45.013]             base::close(...future.stdout)
[10:32:45.013]         }, add = TRUE)
[10:32:45.013]     }
[10:32:45.013]     ...future.frame <- base::sys.nframe()
[10:32:45.013]     ...future.conditions <- base::list()
[10:32:45.013]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:45.013]     if (FALSE) {
[10:32:45.013]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:45.013]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:45.013]     }
[10:32:45.013]     ...future.result <- base::tryCatch({
[10:32:45.013]         base::withCallingHandlers({
[10:32:45.013]             ...future.value <- base::withVisible(base::local({
[10:32:45.013]                 ...future.makeSendCondition <- base::local({
[10:32:45.013]                   sendCondition <- NULL
[10:32:45.013]                   function(frame = 1L) {
[10:32:45.013]                     if (is.function(sendCondition)) 
[10:32:45.013]                       return(sendCondition)
[10:32:45.013]                     ns <- getNamespace("parallel")
[10:32:45.013]                     if (exists("sendData", mode = "function", 
[10:32:45.013]                       envir = ns)) {
[10:32:45.013]                       parallel_sendData <- get("sendData", mode = "function", 
[10:32:45.013]                         envir = ns)
[10:32:45.013]                       envir <- sys.frame(frame)
[10:32:45.013]                       master <- NULL
[10:32:45.013]                       while (!identical(envir, .GlobalEnv) && 
[10:32:45.013]                         !identical(envir, emptyenv())) {
[10:32:45.013]                         if (exists("master", mode = "list", envir = envir, 
[10:32:45.013]                           inherits = FALSE)) {
[10:32:45.013]                           master <- get("master", mode = "list", 
[10:32:45.013]                             envir = envir, inherits = FALSE)
[10:32:45.013]                           if (inherits(master, c("SOCKnode", 
[10:32:45.013]                             "SOCK0node"))) {
[10:32:45.013]                             sendCondition <<- function(cond) {
[10:32:45.013]                               data <- list(type = "VALUE", value = cond, 
[10:32:45.013]                                 success = TRUE)
[10:32:45.013]                               parallel_sendData(master, data)
[10:32:45.013]                             }
[10:32:45.013]                             return(sendCondition)
[10:32:45.013]                           }
[10:32:45.013]                         }
[10:32:45.013]                         frame <- frame + 1L
[10:32:45.013]                         envir <- sys.frame(frame)
[10:32:45.013]                       }
[10:32:45.013]                     }
[10:32:45.013]                     sendCondition <<- function(cond) NULL
[10:32:45.013]                   }
[10:32:45.013]                 })
[10:32:45.013]                 withCallingHandlers({
[10:32:45.013]                   {
[10:32:45.013]                     2 * a
[10:32:45.013]                   }
[10:32:45.013]                 }, immediateCondition = function(cond) {
[10:32:45.013]                   sendCondition <- ...future.makeSendCondition()
[10:32:45.013]                   sendCondition(cond)
[10:32:45.013]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:45.013]                   {
[10:32:45.013]                     inherits <- base::inherits
[10:32:45.013]                     invokeRestart <- base::invokeRestart
[10:32:45.013]                     is.null <- base::is.null
[10:32:45.013]                     muffled <- FALSE
[10:32:45.013]                     if (inherits(cond, "message")) {
[10:32:45.013]                       muffled <- grepl(pattern, "muffleMessage")
[10:32:45.013]                       if (muffled) 
[10:32:45.013]                         invokeRestart("muffleMessage")
[10:32:45.013]                     }
[10:32:45.013]                     else if (inherits(cond, "warning")) {
[10:32:45.013]                       muffled <- grepl(pattern, "muffleWarning")
[10:32:45.013]                       if (muffled) 
[10:32:45.013]                         invokeRestart("muffleWarning")
[10:32:45.013]                     }
[10:32:45.013]                     else if (inherits(cond, "condition")) {
[10:32:45.013]                       if (!is.null(pattern)) {
[10:32:45.013]                         computeRestarts <- base::computeRestarts
[10:32:45.013]                         grepl <- base::grepl
[10:32:45.013]                         restarts <- computeRestarts(cond)
[10:32:45.013]                         for (restart in restarts) {
[10:32:45.013]                           name <- restart$name
[10:32:45.013]                           if (is.null(name)) 
[10:32:45.013]                             next
[10:32:45.013]                           if (!grepl(pattern, name)) 
[10:32:45.013]                             next
[10:32:45.013]                           invokeRestart(restart)
[10:32:45.013]                           muffled <- TRUE
[10:32:45.013]                           break
[10:32:45.013]                         }
[10:32:45.013]                       }
[10:32:45.013]                     }
[10:32:45.013]                     invisible(muffled)
[10:32:45.013]                   }
[10:32:45.013]                   muffleCondition(cond)
[10:32:45.013]                 })
[10:32:45.013]             }))
[10:32:45.013]             future::FutureResult(value = ...future.value$value, 
[10:32:45.013]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:45.013]                   ...future.rng), globalenv = if (FALSE) 
[10:32:45.013]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:45.013]                     ...future.globalenv.names))
[10:32:45.013]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:45.013]         }, condition = base::local({
[10:32:45.013]             c <- base::c
[10:32:45.013]             inherits <- base::inherits
[10:32:45.013]             invokeRestart <- base::invokeRestart
[10:32:45.013]             length <- base::length
[10:32:45.013]             list <- base::list
[10:32:45.013]             seq.int <- base::seq.int
[10:32:45.013]             signalCondition <- base::signalCondition
[10:32:45.013]             sys.calls <- base::sys.calls
[10:32:45.013]             `[[` <- base::`[[`
[10:32:45.013]             `+` <- base::`+`
[10:32:45.013]             `<<-` <- base::`<<-`
[10:32:45.013]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:45.013]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:45.013]                   3L)]
[10:32:45.013]             }
[10:32:45.013]             function(cond) {
[10:32:45.013]                 is_error <- inherits(cond, "error")
[10:32:45.013]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:45.013]                   NULL)
[10:32:45.013]                 if (is_error) {
[10:32:45.013]                   sessionInformation <- function() {
[10:32:45.013]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:45.013]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:45.013]                       search = base::search(), system = base::Sys.info())
[10:32:45.013]                   }
[10:32:45.013]                   ...future.conditions[[length(...future.conditions) + 
[10:32:45.013]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:45.013]                     cond$call), session = sessionInformation(), 
[10:32:45.013]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:45.013]                   signalCondition(cond)
[10:32:45.013]                 }
[10:32:45.013]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:45.013]                 "immediateCondition"))) {
[10:32:45.013]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:45.013]                   ...future.conditions[[length(...future.conditions) + 
[10:32:45.013]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:45.013]                   if (TRUE && !signal) {
[10:32:45.013]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:45.013]                     {
[10:32:45.013]                       inherits <- base::inherits
[10:32:45.013]                       invokeRestart <- base::invokeRestart
[10:32:45.013]                       is.null <- base::is.null
[10:32:45.013]                       muffled <- FALSE
[10:32:45.013]                       if (inherits(cond, "message")) {
[10:32:45.013]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:45.013]                         if (muffled) 
[10:32:45.013]                           invokeRestart("muffleMessage")
[10:32:45.013]                       }
[10:32:45.013]                       else if (inherits(cond, "warning")) {
[10:32:45.013]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:45.013]                         if (muffled) 
[10:32:45.013]                           invokeRestart("muffleWarning")
[10:32:45.013]                       }
[10:32:45.013]                       else if (inherits(cond, "condition")) {
[10:32:45.013]                         if (!is.null(pattern)) {
[10:32:45.013]                           computeRestarts <- base::computeRestarts
[10:32:45.013]                           grepl <- base::grepl
[10:32:45.013]                           restarts <- computeRestarts(cond)
[10:32:45.013]                           for (restart in restarts) {
[10:32:45.013]                             name <- restart$name
[10:32:45.013]                             if (is.null(name)) 
[10:32:45.013]                               next
[10:32:45.013]                             if (!grepl(pattern, name)) 
[10:32:45.013]                               next
[10:32:45.013]                             invokeRestart(restart)
[10:32:45.013]                             muffled <- TRUE
[10:32:45.013]                             break
[10:32:45.013]                           }
[10:32:45.013]                         }
[10:32:45.013]                       }
[10:32:45.013]                       invisible(muffled)
[10:32:45.013]                     }
[10:32:45.013]                     muffleCondition(cond, pattern = "^muffle")
[10:32:45.013]                   }
[10:32:45.013]                 }
[10:32:45.013]                 else {
[10:32:45.013]                   if (TRUE) {
[10:32:45.013]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:45.013]                     {
[10:32:45.013]                       inherits <- base::inherits
[10:32:45.013]                       invokeRestart <- base::invokeRestart
[10:32:45.013]                       is.null <- base::is.null
[10:32:45.013]                       muffled <- FALSE
[10:32:45.013]                       if (inherits(cond, "message")) {
[10:32:45.013]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:45.013]                         if (muffled) 
[10:32:45.013]                           invokeRestart("muffleMessage")
[10:32:45.013]                       }
[10:32:45.013]                       else if (inherits(cond, "warning")) {
[10:32:45.013]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:45.013]                         if (muffled) 
[10:32:45.013]                           invokeRestart("muffleWarning")
[10:32:45.013]                       }
[10:32:45.013]                       else if (inherits(cond, "condition")) {
[10:32:45.013]                         if (!is.null(pattern)) {
[10:32:45.013]                           computeRestarts <- base::computeRestarts
[10:32:45.013]                           grepl <- base::grepl
[10:32:45.013]                           restarts <- computeRestarts(cond)
[10:32:45.013]                           for (restart in restarts) {
[10:32:45.013]                             name <- restart$name
[10:32:45.013]                             if (is.null(name)) 
[10:32:45.013]                               next
[10:32:45.013]                             if (!grepl(pattern, name)) 
[10:32:45.013]                               next
[10:32:45.013]                             invokeRestart(restart)
[10:32:45.013]                             muffled <- TRUE
[10:32:45.013]                             break
[10:32:45.013]                           }
[10:32:45.013]                         }
[10:32:45.013]                       }
[10:32:45.013]                       invisible(muffled)
[10:32:45.013]                     }
[10:32:45.013]                     muffleCondition(cond, pattern = "^muffle")
[10:32:45.013]                   }
[10:32:45.013]                 }
[10:32:45.013]             }
[10:32:45.013]         }))
[10:32:45.013]     }, error = function(ex) {
[10:32:45.013]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:45.013]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:45.013]                 ...future.rng), started = ...future.startTime, 
[10:32:45.013]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:45.013]             version = "1.8"), class = "FutureResult")
[10:32:45.013]     }, finally = {
[10:32:45.013]         if (!identical(...future.workdir, getwd())) 
[10:32:45.013]             setwd(...future.workdir)
[10:32:45.013]         {
[10:32:45.013]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:45.013]                 ...future.oldOptions$nwarnings <- NULL
[10:32:45.013]             }
[10:32:45.013]             base::options(...future.oldOptions)
[10:32:45.013]             if (.Platform$OS.type == "windows") {
[10:32:45.013]                 old_names <- names(...future.oldEnvVars)
[10:32:45.013]                 envs <- base::Sys.getenv()
[10:32:45.013]                 names <- names(envs)
[10:32:45.013]                 common <- intersect(names, old_names)
[10:32:45.013]                 added <- setdiff(names, old_names)
[10:32:45.013]                 removed <- setdiff(old_names, names)
[10:32:45.013]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:45.013]                   envs[common]]
[10:32:45.013]                 NAMES <- toupper(changed)
[10:32:45.013]                 args <- list()
[10:32:45.013]                 for (kk in seq_along(NAMES)) {
[10:32:45.013]                   name <- changed[[kk]]
[10:32:45.013]                   NAME <- NAMES[[kk]]
[10:32:45.013]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:45.013]                     next
[10:32:45.013]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:45.013]                 }
[10:32:45.013]                 NAMES <- toupper(added)
[10:32:45.013]                 for (kk in seq_along(NAMES)) {
[10:32:45.013]                   name <- added[[kk]]
[10:32:45.013]                   NAME <- NAMES[[kk]]
[10:32:45.013]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:45.013]                     next
[10:32:45.013]                   args[[name]] <- ""
[10:32:45.013]                 }
[10:32:45.013]                 NAMES <- toupper(removed)
[10:32:45.013]                 for (kk in seq_along(NAMES)) {
[10:32:45.013]                   name <- removed[[kk]]
[10:32:45.013]                   NAME <- NAMES[[kk]]
[10:32:45.013]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:45.013]                     next
[10:32:45.013]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:45.013]                 }
[10:32:45.013]                 if (length(args) > 0) 
[10:32:45.013]                   base::do.call(base::Sys.setenv, args = args)
[10:32:45.013]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:45.013]             }
[10:32:45.013]             else {
[10:32:45.013]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:45.013]             }
[10:32:45.013]             {
[10:32:45.013]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:45.013]                   0L) {
[10:32:45.013]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:45.013]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:45.013]                   base::options(opts)
[10:32:45.013]                 }
[10:32:45.013]                 {
[10:32:45.013]                   {
[10:32:45.013]                     base::options(mc.cores = ...future.mc.cores.old)
[10:32:45.013]                     NULL
[10:32:45.013]                   }
[10:32:45.013]                   options(future.plan = NULL)
[10:32:45.013]                   if (is.na(NA_character_)) 
[10:32:45.013]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:45.013]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:45.013]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:45.013]                     .init = FALSE)
[10:32:45.013]                 }
[10:32:45.013]             }
[10:32:45.013]         }
[10:32:45.013]     })
[10:32:45.013]     if (TRUE) {
[10:32:45.013]         base::sink(type = "output", split = FALSE)
[10:32:45.013]         if (TRUE) {
[10:32:45.013]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:45.013]         }
[10:32:45.013]         else {
[10:32:45.013]             ...future.result["stdout"] <- base::list(NULL)
[10:32:45.013]         }
[10:32:45.013]         base::close(...future.stdout)
[10:32:45.013]         ...future.stdout <- NULL
[10:32:45.013]     }
[10:32:45.013]     ...future.result$conditions <- ...future.conditions
[10:32:45.013]     ...future.result$finished <- base::Sys.time()
[10:32:45.013]     ...future.result
[10:32:45.013] }
[10:32:45.015] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[10:32:45.016] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[10:32:45.016] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[10:32:45.016] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[10:32:45.017] MultisessionFuture started
[10:32:45.017] - Launch lazy future ... done
[10:32:45.017] run() for ‘MultisessionFuture’ ... done
[10:32:45.017] result() for ClusterFuture ...
[10:32:45.017] receiveMessageFromWorker() for ClusterFuture ...
[10:32:45.017] - Validating connection of MultisessionFuture
[10:32:45.018] - received message: FutureResult
[10:32:45.019] - Received FutureResult
[10:32:45.019] - Erased future from FutureRegistry
[10:32:45.019] result() for ClusterFuture ...
[10:32:45.019] - result already collected: FutureResult
[10:32:45.019] result() for ClusterFuture ... done
[10:32:45.019] receiveMessageFromWorker() for ClusterFuture ... done
[10:32:45.019] result() for ClusterFuture ... done
[10:32:45.019] result() for ClusterFuture ...
[10:32:45.019] - result already collected: FutureResult
[10:32:45.019] result() for ClusterFuture ... done
*** futureAssign() with ‘multisession’ futures ... DONE
Testing with 2 cores ... DONE
> 
> message("*** futureAssign() - lazy = TRUE / FALSE ... DONE")
*** futureAssign() - lazy = TRUE / FALSE ... DONE
> 
> message("*** futureAssign() ... DONE")
*** futureAssign() ... DONE
> 
> source("incl/end.R")
[10:32:45.020] plan(): Setting new future strategy stack:
[10:32:45.020] List of future strategies:
[10:32:45.020] 1. FutureStrategy:
[10:32:45.020]    - args: function (..., envir = parent.frame())
[10:32:45.020]    - tweaked: FALSE
[10:32:45.020]    - call: future::plan(oplan)
[10:32:45.021] plan(): nbrOfWorkers() = 1
> 
