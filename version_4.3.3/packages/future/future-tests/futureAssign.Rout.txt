
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[13:36:27.509] plan(): Setting new future strategy stack:
[13:36:27.509] List of future strategies:
[13:36:27.509] 1. sequential:
[13:36:27.509]    - args: function (..., envir = parent.frame())
[13:36:27.509]    - tweaked: FALSE
[13:36:27.509]    - call: future::plan("sequential")
[13:36:27.523] plan(): nbrOfWorkers() = 1
> 
> message("*** futureAssign() ...")
*** futureAssign() ...
> 
> message("*** futureAssign() - sequential w/ lazy evaluation ...")
*** futureAssign() - sequential w/ lazy evaluation ...
> 
> delayedAssign("a", {
+   cat("Delayed assignment evaluated\n")
+   1
+ })
> 
> futureAssign("b", {
+   cat("Future assignment evaluated\n")
+   2
+ }, lazy = TRUE)
[13:36:27.534] getGlobalsAndPackages() ...
[13:36:27.534] Searching for globals...
[13:36:27.540] - globals found: [2] ‘{’, ‘cat’
[13:36:27.540] Searching for globals ... DONE
[13:36:27.540] Resolving globals: FALSE
[13:36:27.541] 
[13:36:27.541] 
[13:36:27.541] getGlobalsAndPackages() ... DONE
> 
> ## Because "lazy future" is used, the expression/value
> ## for 'b' will not be resolved at the point.  For other
> ## types of futures, it may already have been resolved
> cat(sprintf("b = %s\n", b))
[13:36:27.542] run() for ‘Future’ ...
[13:36:27.542] - state: ‘created’
[13:36:27.542] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:27.543] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:27.543] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:27.543]   - Field: ‘label’
[13:36:27.543]   - Field: ‘local’
[13:36:27.543]   - Field: ‘owner’
[13:36:27.543]   - Field: ‘envir’
[13:36:27.543]   - Field: ‘packages’
[13:36:27.543]   - Field: ‘gc’
[13:36:27.543]   - Field: ‘conditions’
[13:36:27.544]   - Field: ‘expr’
[13:36:27.544]   - Field: ‘uuid’
[13:36:27.544]   - Field: ‘seed’
[13:36:27.544]   - Field: ‘version’
[13:36:27.544]   - Field: ‘result’
[13:36:27.544]   - Field: ‘asynchronous’
[13:36:27.544]   - Field: ‘calls’
[13:36:27.544]   - Field: ‘globals’
[13:36:27.544]   - Field: ‘stdout’
[13:36:27.544]   - Field: ‘earlySignal’
[13:36:27.544]   - Field: ‘lazy’
[13:36:27.544]   - Field: ‘state’
[13:36:27.545] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:27.545] - Launch lazy future ...
[13:36:27.545] Packages needed by the future expression (n = 0): <none>
[13:36:27.546] Packages needed by future strategies (n = 0): <none>
[13:36:27.546] {
[13:36:27.546]     {
[13:36:27.546]         {
[13:36:27.546]             ...future.startTime <- base::Sys.time()
[13:36:27.546]             {
[13:36:27.546]                 {
[13:36:27.546]                   {
[13:36:27.546]                     base::local({
[13:36:27.546]                       has_future <- base::requireNamespace("future", 
[13:36:27.546]                         quietly = TRUE)
[13:36:27.546]                       if (has_future) {
[13:36:27.546]                         ns <- base::getNamespace("future")
[13:36:27.546]                         version <- ns[[".package"]][["version"]]
[13:36:27.546]                         if (is.null(version)) 
[13:36:27.546]                           version <- utils::packageVersion("future")
[13:36:27.546]                       }
[13:36:27.546]                       else {
[13:36:27.546]                         version <- NULL
[13:36:27.546]                       }
[13:36:27.546]                       if (!has_future || version < "1.8.0") {
[13:36:27.546]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:27.546]                           "", base::R.version$version.string), 
[13:36:27.546]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:27.546]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:27.546]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:27.546]                             "release", "version")], collapse = " "), 
[13:36:27.546]                           hostname = base::Sys.info()[["nodename"]])
[13:36:27.546]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:27.546]                           info)
[13:36:27.546]                         info <- base::paste(info, collapse = "; ")
[13:36:27.546]                         if (!has_future) {
[13:36:27.546]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:27.546]                             info)
[13:36:27.546]                         }
[13:36:27.546]                         else {
[13:36:27.546]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:27.546]                             info, version)
[13:36:27.546]                         }
[13:36:27.546]                         base::stop(msg)
[13:36:27.546]                       }
[13:36:27.546]                     })
[13:36:27.546]                   }
[13:36:27.546]                   ...future.strategy.old <- future::plan("list")
[13:36:27.546]                   options(future.plan = NULL)
[13:36:27.546]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:27.546]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:27.546]                 }
[13:36:27.546]                 ...future.workdir <- getwd()
[13:36:27.546]             }
[13:36:27.546]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:27.546]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:27.546]         }
[13:36:27.546]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:27.546]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:27.546]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:27.546]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:27.546]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:27.546]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:27.546]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:27.546]             base::names(...future.oldOptions))
[13:36:27.546]     }
[13:36:27.546]     if (FALSE) {
[13:36:27.546]     }
[13:36:27.546]     else {
[13:36:27.546]         if (TRUE) {
[13:36:27.546]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:27.546]                 open = "w")
[13:36:27.546]         }
[13:36:27.546]         else {
[13:36:27.546]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:27.546]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:27.546]         }
[13:36:27.546]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:27.546]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:27.546]             base::sink(type = "output", split = FALSE)
[13:36:27.546]             base::close(...future.stdout)
[13:36:27.546]         }, add = TRUE)
[13:36:27.546]     }
[13:36:27.546]     ...future.frame <- base::sys.nframe()
[13:36:27.546]     ...future.conditions <- base::list()
[13:36:27.546]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:27.546]     if (FALSE) {
[13:36:27.546]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:27.546]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:27.546]     }
[13:36:27.546]     ...future.result <- base::tryCatch({
[13:36:27.546]         base::withCallingHandlers({
[13:36:27.546]             ...future.value <- base::withVisible(base::local({
[13:36:27.546]                 cat("Future assignment evaluated\n")
[13:36:27.546]                 2
[13:36:27.546]             }))
[13:36:27.546]             future::FutureResult(value = ...future.value$value, 
[13:36:27.546]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:27.546]                   ...future.rng), globalenv = if (FALSE) 
[13:36:27.546]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:27.546]                     ...future.globalenv.names))
[13:36:27.546]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:27.546]         }, condition = base::local({
[13:36:27.546]             c <- base::c
[13:36:27.546]             inherits <- base::inherits
[13:36:27.546]             invokeRestart <- base::invokeRestart
[13:36:27.546]             length <- base::length
[13:36:27.546]             list <- base::list
[13:36:27.546]             seq.int <- base::seq.int
[13:36:27.546]             signalCondition <- base::signalCondition
[13:36:27.546]             sys.calls <- base::sys.calls
[13:36:27.546]             `[[` <- base::`[[`
[13:36:27.546]             `+` <- base::`+`
[13:36:27.546]             `<<-` <- base::`<<-`
[13:36:27.546]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:27.546]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:27.546]                   3L)]
[13:36:27.546]             }
[13:36:27.546]             function(cond) {
[13:36:27.546]                 is_error <- inherits(cond, "error")
[13:36:27.546]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:27.546]                   NULL)
[13:36:27.546]                 if (is_error) {
[13:36:27.546]                   sessionInformation <- function() {
[13:36:27.546]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:27.546]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:27.546]                       search = base::search(), system = base::Sys.info())
[13:36:27.546]                   }
[13:36:27.546]                   ...future.conditions[[length(...future.conditions) + 
[13:36:27.546]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:27.546]                     cond$call), session = sessionInformation(), 
[13:36:27.546]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:27.546]                   signalCondition(cond)
[13:36:27.546]                 }
[13:36:27.546]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:27.546]                 "immediateCondition"))) {
[13:36:27.546]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:27.546]                   ...future.conditions[[length(...future.conditions) + 
[13:36:27.546]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:27.546]                   if (TRUE && !signal) {
[13:36:27.546]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:27.546]                     {
[13:36:27.546]                       inherits <- base::inherits
[13:36:27.546]                       invokeRestart <- base::invokeRestart
[13:36:27.546]                       is.null <- base::is.null
[13:36:27.546]                       muffled <- FALSE
[13:36:27.546]                       if (inherits(cond, "message")) {
[13:36:27.546]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:27.546]                         if (muffled) 
[13:36:27.546]                           invokeRestart("muffleMessage")
[13:36:27.546]                       }
[13:36:27.546]                       else if (inherits(cond, "warning")) {
[13:36:27.546]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:27.546]                         if (muffled) 
[13:36:27.546]                           invokeRestart("muffleWarning")
[13:36:27.546]                       }
[13:36:27.546]                       else if (inherits(cond, "condition")) {
[13:36:27.546]                         if (!is.null(pattern)) {
[13:36:27.546]                           computeRestarts <- base::computeRestarts
[13:36:27.546]                           grepl <- base::grepl
[13:36:27.546]                           restarts <- computeRestarts(cond)
[13:36:27.546]                           for (restart in restarts) {
[13:36:27.546]                             name <- restart$name
[13:36:27.546]                             if (is.null(name)) 
[13:36:27.546]                               next
[13:36:27.546]                             if (!grepl(pattern, name)) 
[13:36:27.546]                               next
[13:36:27.546]                             invokeRestart(restart)
[13:36:27.546]                             muffled <- TRUE
[13:36:27.546]                             break
[13:36:27.546]                           }
[13:36:27.546]                         }
[13:36:27.546]                       }
[13:36:27.546]                       invisible(muffled)
[13:36:27.546]                     }
[13:36:27.546]                     muffleCondition(cond, pattern = "^muffle")
[13:36:27.546]                   }
[13:36:27.546]                 }
[13:36:27.546]                 else {
[13:36:27.546]                   if (TRUE) {
[13:36:27.546]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:27.546]                     {
[13:36:27.546]                       inherits <- base::inherits
[13:36:27.546]                       invokeRestart <- base::invokeRestart
[13:36:27.546]                       is.null <- base::is.null
[13:36:27.546]                       muffled <- FALSE
[13:36:27.546]                       if (inherits(cond, "message")) {
[13:36:27.546]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:27.546]                         if (muffled) 
[13:36:27.546]                           invokeRestart("muffleMessage")
[13:36:27.546]                       }
[13:36:27.546]                       else if (inherits(cond, "warning")) {
[13:36:27.546]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:27.546]                         if (muffled) 
[13:36:27.546]                           invokeRestart("muffleWarning")
[13:36:27.546]                       }
[13:36:27.546]                       else if (inherits(cond, "condition")) {
[13:36:27.546]                         if (!is.null(pattern)) {
[13:36:27.546]                           computeRestarts <- base::computeRestarts
[13:36:27.546]                           grepl <- base::grepl
[13:36:27.546]                           restarts <- computeRestarts(cond)
[13:36:27.546]                           for (restart in restarts) {
[13:36:27.546]                             name <- restart$name
[13:36:27.546]                             if (is.null(name)) 
[13:36:27.546]                               next
[13:36:27.546]                             if (!grepl(pattern, name)) 
[13:36:27.546]                               next
[13:36:27.546]                             invokeRestart(restart)
[13:36:27.546]                             muffled <- TRUE
[13:36:27.546]                             break
[13:36:27.546]                           }
[13:36:27.546]                         }
[13:36:27.546]                       }
[13:36:27.546]                       invisible(muffled)
[13:36:27.546]                     }
[13:36:27.546]                     muffleCondition(cond, pattern = "^muffle")
[13:36:27.546]                   }
[13:36:27.546]                 }
[13:36:27.546]             }
[13:36:27.546]         }))
[13:36:27.546]     }, error = function(ex) {
[13:36:27.546]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:27.546]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:27.546]                 ...future.rng), started = ...future.startTime, 
[13:36:27.546]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:27.546]             version = "1.8"), class = "FutureResult")
[13:36:27.546]     }, finally = {
[13:36:27.546]         if (!identical(...future.workdir, getwd())) 
[13:36:27.546]             setwd(...future.workdir)
[13:36:27.546]         {
[13:36:27.546]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:27.546]                 ...future.oldOptions$nwarnings <- NULL
[13:36:27.546]             }
[13:36:27.546]             base::options(...future.oldOptions)
[13:36:27.546]             if (.Platform$OS.type == "windows") {
[13:36:27.546]                 old_names <- names(...future.oldEnvVars)
[13:36:27.546]                 envs <- base::Sys.getenv()
[13:36:27.546]                 names <- names(envs)
[13:36:27.546]                 common <- intersect(names, old_names)
[13:36:27.546]                 added <- setdiff(names, old_names)
[13:36:27.546]                 removed <- setdiff(old_names, names)
[13:36:27.546]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:27.546]                   envs[common]]
[13:36:27.546]                 NAMES <- toupper(changed)
[13:36:27.546]                 args <- list()
[13:36:27.546]                 for (kk in seq_along(NAMES)) {
[13:36:27.546]                   name <- changed[[kk]]
[13:36:27.546]                   NAME <- NAMES[[kk]]
[13:36:27.546]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:27.546]                     next
[13:36:27.546]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:27.546]                 }
[13:36:27.546]                 NAMES <- toupper(added)
[13:36:27.546]                 for (kk in seq_along(NAMES)) {
[13:36:27.546]                   name <- added[[kk]]
[13:36:27.546]                   NAME <- NAMES[[kk]]
[13:36:27.546]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:27.546]                     next
[13:36:27.546]                   args[[name]] <- ""
[13:36:27.546]                 }
[13:36:27.546]                 NAMES <- toupper(removed)
[13:36:27.546]                 for (kk in seq_along(NAMES)) {
[13:36:27.546]                   name <- removed[[kk]]
[13:36:27.546]                   NAME <- NAMES[[kk]]
[13:36:27.546]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:27.546]                     next
[13:36:27.546]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:27.546]                 }
[13:36:27.546]                 if (length(args) > 0) 
[13:36:27.546]                   base::do.call(base::Sys.setenv, args = args)
[13:36:27.546]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:27.546]             }
[13:36:27.546]             else {
[13:36:27.546]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:27.546]             }
[13:36:27.546]             {
[13:36:27.546]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:27.546]                   0L) {
[13:36:27.546]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:27.546]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:27.546]                   base::options(opts)
[13:36:27.546]                 }
[13:36:27.546]                 {
[13:36:27.546]                   {
[13:36:27.546]                     NULL
[13:36:27.546]                     RNGkind("Mersenne-Twister")
[13:36:27.546]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:27.546]                       inherits = FALSE)
[13:36:27.546]                   }
[13:36:27.546]                   options(future.plan = NULL)
[13:36:27.546]                   if (is.na(NA_character_)) 
[13:36:27.546]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:27.546]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:27.546]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:27.546]                     .init = FALSE)
[13:36:27.546]                 }
[13:36:27.546]             }
[13:36:27.546]         }
[13:36:27.546]     })
[13:36:27.546]     if (TRUE) {
[13:36:27.546]         base::sink(type = "output", split = FALSE)
[13:36:27.546]         if (TRUE) {
[13:36:27.546]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:27.546]         }
[13:36:27.546]         else {
[13:36:27.546]             ...future.result["stdout"] <- base::list(NULL)
[13:36:27.546]         }
[13:36:27.546]         base::close(...future.stdout)
[13:36:27.546]         ...future.stdout <- NULL
[13:36:27.546]     }
[13:36:27.546]     ...future.result$conditions <- ...future.conditions
[13:36:27.546]     ...future.result$finished <- base::Sys.time()
[13:36:27.546]     ...future.result
[13:36:27.546] }
[13:36:27.548] plan(): Setting new future strategy stack:
[13:36:27.548] List of future strategies:
[13:36:27.548] 1. sequential:
[13:36:27.548]    - args: function (..., envir = parent.frame())
[13:36:27.548]    - tweaked: FALSE
[13:36:27.548]    - call: NULL
[13:36:27.549] plan(): nbrOfWorkers() = 1
[13:36:27.550] plan(): Setting new future strategy stack:
[13:36:27.550] List of future strategies:
[13:36:27.550] 1. sequential:
[13:36:27.550]    - args: function (..., envir = parent.frame())
[13:36:27.550]    - tweaked: FALSE
[13:36:27.550]    - call: future::plan("sequential")
[13:36:27.550] plan(): nbrOfWorkers() = 1
[13:36:27.550] SequentialFuture started (and completed)
[13:36:27.551] - Launch lazy future ... done
[13:36:27.551] run() for ‘SequentialFuture’ ... done
Future assignment evaluated
b = 2
> 
> ## The expression/value of 'a' is resolved at this point,
> ## because a delayed assignment (promise) was used.
> cat(sprintf("a = %s\n", a))
Delayed assignment evaluated
a = 1
> 
> stopifnot(identical(a, 1))
> stopifnot(identical(b, 2))
> 
> message("*** futureAssign() - sequential w/ lazy evaluation ... DONE")
*** futureAssign() - sequential w/ lazy evaluation ... DONE
> 
> 
> message("*** futureAssign() - lazy = TRUE / FALSE ...")
*** futureAssign() - lazy = TRUE / FALSE ...
> 
> for (cores in 1:availCores) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   message(sprintf("Testing with %d cores ...", cores))
+   options(mc.cores = cores)
+ 
+   for (strategy in supportedStrategies(cores)) {
+     message(sprintf("*** futureAssign() with %s futures ...", sQuote(strategy)))
+     plan(strategy)
+ 
+     ## Potential task name clashes
+     u <- new.env()
+     v <- new.env()
+     futureAssign("a", { 2 }, assign.env = u)
+     futureAssign("a", { 4 }, assign.env = v)
+     
+     cat(sprintf("u$a = %s\n", u$a))
+     cat(sprintf("v$a = %s\n", v$a))
+     
+     stopifnot(identical(u$a, 2))
+     stopifnot(identical(v$a, 4))
+     
+     
+     ## Global variables
+     a <- 1
+     futureAssign("b", { 2 * a })
+     a <- 2
+     stopifnot(b == 2)
+ 
+     ## Explicit lazy evaluation
+     for (lazy in c(FALSE, TRUE)) {
+       a <- 1
+       f <- futureAssign("b", { 2 * a }, lazy = lazy)
+       a <- 2
+       stopifnot(b == 2)
+       stopifnot(f$lazy == lazy || (strategy %in% c("multisession", "multicore") && cores == 1L))
+       
+       ## Set 'lazy' via disposable option
+       options(future.disposable = list(lazy = lazy))
+       a <- 1
+       f <- futureAssign("b", { 2 * a })
+       a <- 2
+       stopifnot(b == 2)
+       stopifnot(f$lazy == lazy || (strategy %in% c("multisession", "multicore") && cores == 1L))
+     }
+ 
+     message(sprintf("*** futureAssign() with %s futures ... DONE", sQuote(strategy)))
+   } # for (strategy in ...)
+ 
+   message(sprintf("Testing with %d cores ... DONE", cores))
+ } ## for (cores ...)
Testing with 1 cores ...
*** futureAssign() with ‘sequential’ futures ...
[13:36:27.575] plan(): Setting new future strategy stack:
[13:36:27.575] List of future strategies:
[13:36:27.575] 1. sequential:
[13:36:27.575]    - args: function (..., envir = parent.frame())
[13:36:27.575]    - tweaked: FALSE
[13:36:27.575]    - call: plan(strategy)
[13:36:27.587] plan(): nbrOfWorkers() = 1
[13:36:27.587] getGlobalsAndPackages() ...
[13:36:27.587] Searching for globals...
[13:36:27.587] - globals found: [1] ‘{’
[13:36:27.588] Searching for globals ... DONE
[13:36:27.588] Resolving globals: FALSE
[13:36:27.588] 
[13:36:27.588] 
[13:36:27.588] getGlobalsAndPackages() ... DONE
[13:36:27.588] run() for ‘Future’ ...
[13:36:27.588] - state: ‘created’
[13:36:27.588] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:27.589] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:27.589] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:27.589]   - Field: ‘label’
[13:36:27.589]   - Field: ‘local’
[13:36:27.589]   - Field: ‘owner’
[13:36:27.589]   - Field: ‘envir’
[13:36:27.589]   - Field: ‘packages’
[13:36:27.589]   - Field: ‘gc’
[13:36:27.589]   - Field: ‘conditions’
[13:36:27.590]   - Field: ‘expr’
[13:36:27.590]   - Field: ‘uuid’
[13:36:27.590]   - Field: ‘seed’
[13:36:27.590]   - Field: ‘version’
[13:36:27.590]   - Field: ‘result’
[13:36:27.590]   - Field: ‘asynchronous’
[13:36:27.590]   - Field: ‘calls’
[13:36:27.590]   - Field: ‘globals’
[13:36:27.590]   - Field: ‘stdout’
[13:36:27.590]   - Field: ‘earlySignal’
[13:36:27.590]   - Field: ‘lazy’
[13:36:27.591]   - Field: ‘state’
[13:36:27.591] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:27.591] - Launch lazy future ...
[13:36:27.591] Packages needed by the future expression (n = 0): <none>
[13:36:27.591] Packages needed by future strategies (n = 0): <none>
[13:36:27.591] {
[13:36:27.591]     {
[13:36:27.591]         {
[13:36:27.591]             ...future.startTime <- base::Sys.time()
[13:36:27.591]             {
[13:36:27.591]                 {
[13:36:27.591]                   {
[13:36:27.591]                     base::local({
[13:36:27.591]                       has_future <- base::requireNamespace("future", 
[13:36:27.591]                         quietly = TRUE)
[13:36:27.591]                       if (has_future) {
[13:36:27.591]                         ns <- base::getNamespace("future")
[13:36:27.591]                         version <- ns[[".package"]][["version"]]
[13:36:27.591]                         if (is.null(version)) 
[13:36:27.591]                           version <- utils::packageVersion("future")
[13:36:27.591]                       }
[13:36:27.591]                       else {
[13:36:27.591]                         version <- NULL
[13:36:27.591]                       }
[13:36:27.591]                       if (!has_future || version < "1.8.0") {
[13:36:27.591]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:27.591]                           "", base::R.version$version.string), 
[13:36:27.591]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:27.591]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:27.591]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:27.591]                             "release", "version")], collapse = " "), 
[13:36:27.591]                           hostname = base::Sys.info()[["nodename"]])
[13:36:27.591]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:27.591]                           info)
[13:36:27.591]                         info <- base::paste(info, collapse = "; ")
[13:36:27.591]                         if (!has_future) {
[13:36:27.591]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:27.591]                             info)
[13:36:27.591]                         }
[13:36:27.591]                         else {
[13:36:27.591]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:27.591]                             info, version)
[13:36:27.591]                         }
[13:36:27.591]                         base::stop(msg)
[13:36:27.591]                       }
[13:36:27.591]                     })
[13:36:27.591]                   }
[13:36:27.591]                   ...future.strategy.old <- future::plan("list")
[13:36:27.591]                   options(future.plan = NULL)
[13:36:27.591]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:27.591]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:27.591]                 }
[13:36:27.591]                 ...future.workdir <- getwd()
[13:36:27.591]             }
[13:36:27.591]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:27.591]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:27.591]         }
[13:36:27.591]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:27.591]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:27.591]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:27.591]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:27.591]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:27.591]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:27.591]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:27.591]             base::names(...future.oldOptions))
[13:36:27.591]     }
[13:36:27.591]     if (FALSE) {
[13:36:27.591]     }
[13:36:27.591]     else {
[13:36:27.591]         if (TRUE) {
[13:36:27.591]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:27.591]                 open = "w")
[13:36:27.591]         }
[13:36:27.591]         else {
[13:36:27.591]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:27.591]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:27.591]         }
[13:36:27.591]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:27.591]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:27.591]             base::sink(type = "output", split = FALSE)
[13:36:27.591]             base::close(...future.stdout)
[13:36:27.591]         }, add = TRUE)
[13:36:27.591]     }
[13:36:27.591]     ...future.frame <- base::sys.nframe()
[13:36:27.591]     ...future.conditions <- base::list()
[13:36:27.591]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:27.591]     if (FALSE) {
[13:36:27.591]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:27.591]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:27.591]     }
[13:36:27.591]     ...future.result <- base::tryCatch({
[13:36:27.591]         base::withCallingHandlers({
[13:36:27.591]             ...future.value <- base::withVisible(base::local({
[13:36:27.591]                 2
[13:36:27.591]             }))
[13:36:27.591]             future::FutureResult(value = ...future.value$value, 
[13:36:27.591]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:27.591]                   ...future.rng), globalenv = if (FALSE) 
[13:36:27.591]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:27.591]                     ...future.globalenv.names))
[13:36:27.591]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:27.591]         }, condition = base::local({
[13:36:27.591]             c <- base::c
[13:36:27.591]             inherits <- base::inherits
[13:36:27.591]             invokeRestart <- base::invokeRestart
[13:36:27.591]             length <- base::length
[13:36:27.591]             list <- base::list
[13:36:27.591]             seq.int <- base::seq.int
[13:36:27.591]             signalCondition <- base::signalCondition
[13:36:27.591]             sys.calls <- base::sys.calls
[13:36:27.591]             `[[` <- base::`[[`
[13:36:27.591]             `+` <- base::`+`
[13:36:27.591]             `<<-` <- base::`<<-`
[13:36:27.591]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:27.591]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:27.591]                   3L)]
[13:36:27.591]             }
[13:36:27.591]             function(cond) {
[13:36:27.591]                 is_error <- inherits(cond, "error")
[13:36:27.591]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:27.591]                   NULL)
[13:36:27.591]                 if (is_error) {
[13:36:27.591]                   sessionInformation <- function() {
[13:36:27.591]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:27.591]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:27.591]                       search = base::search(), system = base::Sys.info())
[13:36:27.591]                   }
[13:36:27.591]                   ...future.conditions[[length(...future.conditions) + 
[13:36:27.591]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:27.591]                     cond$call), session = sessionInformation(), 
[13:36:27.591]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:27.591]                   signalCondition(cond)
[13:36:27.591]                 }
[13:36:27.591]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:27.591]                 "immediateCondition"))) {
[13:36:27.591]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:27.591]                   ...future.conditions[[length(...future.conditions) + 
[13:36:27.591]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:27.591]                   if (TRUE && !signal) {
[13:36:27.591]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:27.591]                     {
[13:36:27.591]                       inherits <- base::inherits
[13:36:27.591]                       invokeRestart <- base::invokeRestart
[13:36:27.591]                       is.null <- base::is.null
[13:36:27.591]                       muffled <- FALSE
[13:36:27.591]                       if (inherits(cond, "message")) {
[13:36:27.591]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:27.591]                         if (muffled) 
[13:36:27.591]                           invokeRestart("muffleMessage")
[13:36:27.591]                       }
[13:36:27.591]                       else if (inherits(cond, "warning")) {
[13:36:27.591]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:27.591]                         if (muffled) 
[13:36:27.591]                           invokeRestart("muffleWarning")
[13:36:27.591]                       }
[13:36:27.591]                       else if (inherits(cond, "condition")) {
[13:36:27.591]                         if (!is.null(pattern)) {
[13:36:27.591]                           computeRestarts <- base::computeRestarts
[13:36:27.591]                           grepl <- base::grepl
[13:36:27.591]                           restarts <- computeRestarts(cond)
[13:36:27.591]                           for (restart in restarts) {
[13:36:27.591]                             name <- restart$name
[13:36:27.591]                             if (is.null(name)) 
[13:36:27.591]                               next
[13:36:27.591]                             if (!grepl(pattern, name)) 
[13:36:27.591]                               next
[13:36:27.591]                             invokeRestart(restart)
[13:36:27.591]                             muffled <- TRUE
[13:36:27.591]                             break
[13:36:27.591]                           }
[13:36:27.591]                         }
[13:36:27.591]                       }
[13:36:27.591]                       invisible(muffled)
[13:36:27.591]                     }
[13:36:27.591]                     muffleCondition(cond, pattern = "^muffle")
[13:36:27.591]                   }
[13:36:27.591]                 }
[13:36:27.591]                 else {
[13:36:27.591]                   if (TRUE) {
[13:36:27.591]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:27.591]                     {
[13:36:27.591]                       inherits <- base::inherits
[13:36:27.591]                       invokeRestart <- base::invokeRestart
[13:36:27.591]                       is.null <- base::is.null
[13:36:27.591]                       muffled <- FALSE
[13:36:27.591]                       if (inherits(cond, "message")) {
[13:36:27.591]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:27.591]                         if (muffled) 
[13:36:27.591]                           invokeRestart("muffleMessage")
[13:36:27.591]                       }
[13:36:27.591]                       else if (inherits(cond, "warning")) {
[13:36:27.591]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:27.591]                         if (muffled) 
[13:36:27.591]                           invokeRestart("muffleWarning")
[13:36:27.591]                       }
[13:36:27.591]                       else if (inherits(cond, "condition")) {
[13:36:27.591]                         if (!is.null(pattern)) {
[13:36:27.591]                           computeRestarts <- base::computeRestarts
[13:36:27.591]                           grepl <- base::grepl
[13:36:27.591]                           restarts <- computeRestarts(cond)
[13:36:27.591]                           for (restart in restarts) {
[13:36:27.591]                             name <- restart$name
[13:36:27.591]                             if (is.null(name)) 
[13:36:27.591]                               next
[13:36:27.591]                             if (!grepl(pattern, name)) 
[13:36:27.591]                               next
[13:36:27.591]                             invokeRestart(restart)
[13:36:27.591]                             muffled <- TRUE
[13:36:27.591]                             break
[13:36:27.591]                           }
[13:36:27.591]                         }
[13:36:27.591]                       }
[13:36:27.591]                       invisible(muffled)
[13:36:27.591]                     }
[13:36:27.591]                     muffleCondition(cond, pattern = "^muffle")
[13:36:27.591]                   }
[13:36:27.591]                 }
[13:36:27.591]             }
[13:36:27.591]         }))
[13:36:27.591]     }, error = function(ex) {
[13:36:27.591]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:27.591]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:27.591]                 ...future.rng), started = ...future.startTime, 
[13:36:27.591]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:27.591]             version = "1.8"), class = "FutureResult")
[13:36:27.591]     }, finally = {
[13:36:27.591]         if (!identical(...future.workdir, getwd())) 
[13:36:27.591]             setwd(...future.workdir)
[13:36:27.591]         {
[13:36:27.591]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:27.591]                 ...future.oldOptions$nwarnings <- NULL
[13:36:27.591]             }
[13:36:27.591]             base::options(...future.oldOptions)
[13:36:27.591]             if (.Platform$OS.type == "windows") {
[13:36:27.591]                 old_names <- names(...future.oldEnvVars)
[13:36:27.591]                 envs <- base::Sys.getenv()
[13:36:27.591]                 names <- names(envs)
[13:36:27.591]                 common <- intersect(names, old_names)
[13:36:27.591]                 added <- setdiff(names, old_names)
[13:36:27.591]                 removed <- setdiff(old_names, names)
[13:36:27.591]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:27.591]                   envs[common]]
[13:36:27.591]                 NAMES <- toupper(changed)
[13:36:27.591]                 args <- list()
[13:36:27.591]                 for (kk in seq_along(NAMES)) {
[13:36:27.591]                   name <- changed[[kk]]
[13:36:27.591]                   NAME <- NAMES[[kk]]
[13:36:27.591]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:27.591]                     next
[13:36:27.591]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:27.591]                 }
[13:36:27.591]                 NAMES <- toupper(added)
[13:36:27.591]                 for (kk in seq_along(NAMES)) {
[13:36:27.591]                   name <- added[[kk]]
[13:36:27.591]                   NAME <- NAMES[[kk]]
[13:36:27.591]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:27.591]                     next
[13:36:27.591]                   args[[name]] <- ""
[13:36:27.591]                 }
[13:36:27.591]                 NAMES <- toupper(removed)
[13:36:27.591]                 for (kk in seq_along(NAMES)) {
[13:36:27.591]                   name <- removed[[kk]]
[13:36:27.591]                   NAME <- NAMES[[kk]]
[13:36:27.591]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:27.591]                     next
[13:36:27.591]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:27.591]                 }
[13:36:27.591]                 if (length(args) > 0) 
[13:36:27.591]                   base::do.call(base::Sys.setenv, args = args)
[13:36:27.591]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:27.591]             }
[13:36:27.591]             else {
[13:36:27.591]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:27.591]             }
[13:36:27.591]             {
[13:36:27.591]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:27.591]                   0L) {
[13:36:27.591]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:27.591]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:27.591]                   base::options(opts)
[13:36:27.591]                 }
[13:36:27.591]                 {
[13:36:27.591]                   {
[13:36:27.591]                     NULL
[13:36:27.591]                     RNGkind("Mersenne-Twister")
[13:36:27.591]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:27.591]                       inherits = FALSE)
[13:36:27.591]                   }
[13:36:27.591]                   options(future.plan = NULL)
[13:36:27.591]                   if (is.na(NA_character_)) 
[13:36:27.591]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:27.591]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:27.591]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:27.591]                     .init = FALSE)
[13:36:27.591]                 }
[13:36:27.591]             }
[13:36:27.591]         }
[13:36:27.591]     })
[13:36:27.591]     if (TRUE) {
[13:36:27.591]         base::sink(type = "output", split = FALSE)
[13:36:27.591]         if (TRUE) {
[13:36:27.591]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:27.591]         }
[13:36:27.591]         else {
[13:36:27.591]             ...future.result["stdout"] <- base::list(NULL)
[13:36:27.591]         }
[13:36:27.591]         base::close(...future.stdout)
[13:36:27.591]         ...future.stdout <- NULL
[13:36:27.591]     }
[13:36:27.591]     ...future.result$conditions <- ...future.conditions
[13:36:27.591]     ...future.result$finished <- base::Sys.time()
[13:36:27.591]     ...future.result
[13:36:27.591] }
[13:36:27.593] plan(): Setting new future strategy stack:
[13:36:27.593] List of future strategies:
[13:36:27.593] 1. sequential:
[13:36:27.593]    - args: function (..., envir = parent.frame())
[13:36:27.593]    - tweaked: FALSE
[13:36:27.593]    - call: NULL
[13:36:27.593] plan(): nbrOfWorkers() = 1
[13:36:27.594] plan(): Setting new future strategy stack:
[13:36:27.594] List of future strategies:
[13:36:27.594] 1. sequential:
[13:36:27.594]    - args: function (..., envir = parent.frame())
[13:36:27.594]    - tweaked: FALSE
[13:36:27.594]    - call: plan(strategy)
[13:36:27.595] plan(): nbrOfWorkers() = 1
[13:36:27.595] SequentialFuture started (and completed)
[13:36:27.595] - Launch lazy future ... done
[13:36:27.595] run() for ‘SequentialFuture’ ... done
[13:36:27.595] getGlobalsAndPackages() ...
[13:36:27.595] Searching for globals...
[13:36:27.596] - globals found: [1] ‘{’
[13:36:27.596] Searching for globals ... DONE
[13:36:27.596] Resolving globals: FALSE
[13:36:27.596] 
[13:36:27.596] 
[13:36:27.596] getGlobalsAndPackages() ... DONE
[13:36:27.597] run() for ‘Future’ ...
[13:36:27.597] - state: ‘created’
[13:36:27.597] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:27.597] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:27.597] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:27.597]   - Field: ‘label’
[13:36:27.597]   - Field: ‘local’
[13:36:27.597]   - Field: ‘owner’
[13:36:27.597]   - Field: ‘envir’
[13:36:27.598]   - Field: ‘packages’
[13:36:27.598]   - Field: ‘gc’
[13:36:27.598]   - Field: ‘conditions’
[13:36:27.598]   - Field: ‘expr’
[13:36:27.598]   - Field: ‘uuid’
[13:36:27.598]   - Field: ‘seed’
[13:36:27.598]   - Field: ‘version’
[13:36:27.598]   - Field: ‘result’
[13:36:27.598]   - Field: ‘asynchronous’
[13:36:27.598]   - Field: ‘calls’
[13:36:27.598]   - Field: ‘globals’
[13:36:27.599]   - Field: ‘stdout’
[13:36:27.599]   - Field: ‘earlySignal’
[13:36:27.599]   - Field: ‘lazy’
[13:36:27.599]   - Field: ‘state’
[13:36:27.599] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:27.599] - Launch lazy future ...
[13:36:27.599] Packages needed by the future expression (n = 0): <none>
[13:36:27.599] Packages needed by future strategies (n = 0): <none>
[13:36:27.600] {
[13:36:27.600]     {
[13:36:27.600]         {
[13:36:27.600]             ...future.startTime <- base::Sys.time()
[13:36:27.600]             {
[13:36:27.600]                 {
[13:36:27.600]                   {
[13:36:27.600]                     base::local({
[13:36:27.600]                       has_future <- base::requireNamespace("future", 
[13:36:27.600]                         quietly = TRUE)
[13:36:27.600]                       if (has_future) {
[13:36:27.600]                         ns <- base::getNamespace("future")
[13:36:27.600]                         version <- ns[[".package"]][["version"]]
[13:36:27.600]                         if (is.null(version)) 
[13:36:27.600]                           version <- utils::packageVersion("future")
[13:36:27.600]                       }
[13:36:27.600]                       else {
[13:36:27.600]                         version <- NULL
[13:36:27.600]                       }
[13:36:27.600]                       if (!has_future || version < "1.8.0") {
[13:36:27.600]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:27.600]                           "", base::R.version$version.string), 
[13:36:27.600]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:27.600]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:27.600]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:27.600]                             "release", "version")], collapse = " "), 
[13:36:27.600]                           hostname = base::Sys.info()[["nodename"]])
[13:36:27.600]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:27.600]                           info)
[13:36:27.600]                         info <- base::paste(info, collapse = "; ")
[13:36:27.600]                         if (!has_future) {
[13:36:27.600]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:27.600]                             info)
[13:36:27.600]                         }
[13:36:27.600]                         else {
[13:36:27.600]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:27.600]                             info, version)
[13:36:27.600]                         }
[13:36:27.600]                         base::stop(msg)
[13:36:27.600]                       }
[13:36:27.600]                     })
[13:36:27.600]                   }
[13:36:27.600]                   ...future.strategy.old <- future::plan("list")
[13:36:27.600]                   options(future.plan = NULL)
[13:36:27.600]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:27.600]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:27.600]                 }
[13:36:27.600]                 ...future.workdir <- getwd()
[13:36:27.600]             }
[13:36:27.600]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:27.600]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:27.600]         }
[13:36:27.600]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:27.600]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:27.600]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:27.600]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:27.600]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:27.600]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:27.600]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:27.600]             base::names(...future.oldOptions))
[13:36:27.600]     }
[13:36:27.600]     if (FALSE) {
[13:36:27.600]     }
[13:36:27.600]     else {
[13:36:27.600]         if (TRUE) {
[13:36:27.600]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:27.600]                 open = "w")
[13:36:27.600]         }
[13:36:27.600]         else {
[13:36:27.600]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:27.600]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:27.600]         }
[13:36:27.600]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:27.600]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:27.600]             base::sink(type = "output", split = FALSE)
[13:36:27.600]             base::close(...future.stdout)
[13:36:27.600]         }, add = TRUE)
[13:36:27.600]     }
[13:36:27.600]     ...future.frame <- base::sys.nframe()
[13:36:27.600]     ...future.conditions <- base::list()
[13:36:27.600]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:27.600]     if (FALSE) {
[13:36:27.600]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:27.600]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:27.600]     }
[13:36:27.600]     ...future.result <- base::tryCatch({
[13:36:27.600]         base::withCallingHandlers({
[13:36:27.600]             ...future.value <- base::withVisible(base::local({
[13:36:27.600]                 4
[13:36:27.600]             }))
[13:36:27.600]             future::FutureResult(value = ...future.value$value, 
[13:36:27.600]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:27.600]                   ...future.rng), globalenv = if (FALSE) 
[13:36:27.600]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:27.600]                     ...future.globalenv.names))
[13:36:27.600]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:27.600]         }, condition = base::local({
[13:36:27.600]             c <- base::c
[13:36:27.600]             inherits <- base::inherits
[13:36:27.600]             invokeRestart <- base::invokeRestart
[13:36:27.600]             length <- base::length
[13:36:27.600]             list <- base::list
[13:36:27.600]             seq.int <- base::seq.int
[13:36:27.600]             signalCondition <- base::signalCondition
[13:36:27.600]             sys.calls <- base::sys.calls
[13:36:27.600]             `[[` <- base::`[[`
[13:36:27.600]             `+` <- base::`+`
[13:36:27.600]             `<<-` <- base::`<<-`
[13:36:27.600]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:27.600]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:27.600]                   3L)]
[13:36:27.600]             }
[13:36:27.600]             function(cond) {
[13:36:27.600]                 is_error <- inherits(cond, "error")
[13:36:27.600]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:27.600]                   NULL)
[13:36:27.600]                 if (is_error) {
[13:36:27.600]                   sessionInformation <- function() {
[13:36:27.600]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:27.600]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:27.600]                       search = base::search(), system = base::Sys.info())
[13:36:27.600]                   }
[13:36:27.600]                   ...future.conditions[[length(...future.conditions) + 
[13:36:27.600]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:27.600]                     cond$call), session = sessionInformation(), 
[13:36:27.600]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:27.600]                   signalCondition(cond)
[13:36:27.600]                 }
[13:36:27.600]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:27.600]                 "immediateCondition"))) {
[13:36:27.600]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:27.600]                   ...future.conditions[[length(...future.conditions) + 
[13:36:27.600]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:27.600]                   if (TRUE && !signal) {
[13:36:27.600]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:27.600]                     {
[13:36:27.600]                       inherits <- base::inherits
[13:36:27.600]                       invokeRestart <- base::invokeRestart
[13:36:27.600]                       is.null <- base::is.null
[13:36:27.600]                       muffled <- FALSE
[13:36:27.600]                       if (inherits(cond, "message")) {
[13:36:27.600]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:27.600]                         if (muffled) 
[13:36:27.600]                           invokeRestart("muffleMessage")
[13:36:27.600]                       }
[13:36:27.600]                       else if (inherits(cond, "warning")) {
[13:36:27.600]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:27.600]                         if (muffled) 
[13:36:27.600]                           invokeRestart("muffleWarning")
[13:36:27.600]                       }
[13:36:27.600]                       else if (inherits(cond, "condition")) {
[13:36:27.600]                         if (!is.null(pattern)) {
[13:36:27.600]                           computeRestarts <- base::computeRestarts
[13:36:27.600]                           grepl <- base::grepl
[13:36:27.600]                           restarts <- computeRestarts(cond)
[13:36:27.600]                           for (restart in restarts) {
[13:36:27.600]                             name <- restart$name
[13:36:27.600]                             if (is.null(name)) 
[13:36:27.600]                               next
[13:36:27.600]                             if (!grepl(pattern, name)) 
[13:36:27.600]                               next
[13:36:27.600]                             invokeRestart(restart)
[13:36:27.600]                             muffled <- TRUE
[13:36:27.600]                             break
[13:36:27.600]                           }
[13:36:27.600]                         }
[13:36:27.600]                       }
[13:36:27.600]                       invisible(muffled)
[13:36:27.600]                     }
[13:36:27.600]                     muffleCondition(cond, pattern = "^muffle")
[13:36:27.600]                   }
[13:36:27.600]                 }
[13:36:27.600]                 else {
[13:36:27.600]                   if (TRUE) {
[13:36:27.600]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:27.600]                     {
[13:36:27.600]                       inherits <- base::inherits
[13:36:27.600]                       invokeRestart <- base::invokeRestart
[13:36:27.600]                       is.null <- base::is.null
[13:36:27.600]                       muffled <- FALSE
[13:36:27.600]                       if (inherits(cond, "message")) {
[13:36:27.600]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:27.600]                         if (muffled) 
[13:36:27.600]                           invokeRestart("muffleMessage")
[13:36:27.600]                       }
[13:36:27.600]                       else if (inherits(cond, "warning")) {
[13:36:27.600]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:27.600]                         if (muffled) 
[13:36:27.600]                           invokeRestart("muffleWarning")
[13:36:27.600]                       }
[13:36:27.600]                       else if (inherits(cond, "condition")) {
[13:36:27.600]                         if (!is.null(pattern)) {
[13:36:27.600]                           computeRestarts <- base::computeRestarts
[13:36:27.600]                           grepl <- base::grepl
[13:36:27.600]                           restarts <- computeRestarts(cond)
[13:36:27.600]                           for (restart in restarts) {
[13:36:27.600]                             name <- restart$name
[13:36:27.600]                             if (is.null(name)) 
[13:36:27.600]                               next
[13:36:27.600]                             if (!grepl(pattern, name)) 
[13:36:27.600]                               next
[13:36:27.600]                             invokeRestart(restart)
[13:36:27.600]                             muffled <- TRUE
[13:36:27.600]                             break
[13:36:27.600]                           }
[13:36:27.600]                         }
[13:36:27.600]                       }
[13:36:27.600]                       invisible(muffled)
[13:36:27.600]                     }
[13:36:27.600]                     muffleCondition(cond, pattern = "^muffle")
[13:36:27.600]                   }
[13:36:27.600]                 }
[13:36:27.600]             }
[13:36:27.600]         }))
[13:36:27.600]     }, error = function(ex) {
[13:36:27.600]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:27.600]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:27.600]                 ...future.rng), started = ...future.startTime, 
[13:36:27.600]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:27.600]             version = "1.8"), class = "FutureResult")
[13:36:27.600]     }, finally = {
[13:36:27.600]         if (!identical(...future.workdir, getwd())) 
[13:36:27.600]             setwd(...future.workdir)
[13:36:27.600]         {
[13:36:27.600]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:27.600]                 ...future.oldOptions$nwarnings <- NULL
[13:36:27.600]             }
[13:36:27.600]             base::options(...future.oldOptions)
[13:36:27.600]             if (.Platform$OS.type == "windows") {
[13:36:27.600]                 old_names <- names(...future.oldEnvVars)
[13:36:27.600]                 envs <- base::Sys.getenv()
[13:36:27.600]                 names <- names(envs)
[13:36:27.600]                 common <- intersect(names, old_names)
[13:36:27.600]                 added <- setdiff(names, old_names)
[13:36:27.600]                 removed <- setdiff(old_names, names)
[13:36:27.600]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:27.600]                   envs[common]]
[13:36:27.600]                 NAMES <- toupper(changed)
[13:36:27.600]                 args <- list()
[13:36:27.600]                 for (kk in seq_along(NAMES)) {
[13:36:27.600]                   name <- changed[[kk]]
[13:36:27.600]                   NAME <- NAMES[[kk]]
[13:36:27.600]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:27.600]                     next
[13:36:27.600]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:27.600]                 }
[13:36:27.600]                 NAMES <- toupper(added)
[13:36:27.600]                 for (kk in seq_along(NAMES)) {
[13:36:27.600]                   name <- added[[kk]]
[13:36:27.600]                   NAME <- NAMES[[kk]]
[13:36:27.600]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:27.600]                     next
[13:36:27.600]                   args[[name]] <- ""
[13:36:27.600]                 }
[13:36:27.600]                 NAMES <- toupper(removed)
[13:36:27.600]                 for (kk in seq_along(NAMES)) {
[13:36:27.600]                   name <- removed[[kk]]
[13:36:27.600]                   NAME <- NAMES[[kk]]
[13:36:27.600]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:27.600]                     next
[13:36:27.600]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:27.600]                 }
[13:36:27.600]                 if (length(args) > 0) 
[13:36:27.600]                   base::do.call(base::Sys.setenv, args = args)
[13:36:27.600]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:27.600]             }
[13:36:27.600]             else {
[13:36:27.600]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:27.600]             }
[13:36:27.600]             {
[13:36:27.600]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:27.600]                   0L) {
[13:36:27.600]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:27.600]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:27.600]                   base::options(opts)
[13:36:27.600]                 }
[13:36:27.600]                 {
[13:36:27.600]                   {
[13:36:27.600]                     NULL
[13:36:27.600]                     RNGkind("Mersenne-Twister")
[13:36:27.600]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:27.600]                       inherits = FALSE)
[13:36:27.600]                   }
[13:36:27.600]                   options(future.plan = NULL)
[13:36:27.600]                   if (is.na(NA_character_)) 
[13:36:27.600]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:27.600]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:27.600]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:27.600]                     .init = FALSE)
[13:36:27.600]                 }
[13:36:27.600]             }
[13:36:27.600]         }
[13:36:27.600]     })
[13:36:27.600]     if (TRUE) {
[13:36:27.600]         base::sink(type = "output", split = FALSE)
[13:36:27.600]         if (TRUE) {
[13:36:27.600]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:27.600]         }
[13:36:27.600]         else {
[13:36:27.600]             ...future.result["stdout"] <- base::list(NULL)
[13:36:27.600]         }
[13:36:27.600]         base::close(...future.stdout)
[13:36:27.600]         ...future.stdout <- NULL
[13:36:27.600]     }
[13:36:27.600]     ...future.result$conditions <- ...future.conditions
[13:36:27.600]     ...future.result$finished <- base::Sys.time()
[13:36:27.600]     ...future.result
[13:36:27.600] }
[13:36:27.601] plan(): Setting new future strategy stack:
[13:36:27.601] List of future strategies:
[13:36:27.601] 1. sequential:
[13:36:27.601]    - args: function (..., envir = parent.frame())
[13:36:27.601]    - tweaked: FALSE
[13:36:27.601]    - call: NULL
[13:36:27.602] plan(): nbrOfWorkers() = 1
[13:36:27.602] plan(): Setting new future strategy stack:
[13:36:27.603] List of future strategies:
[13:36:27.603] 1. sequential:
[13:36:27.603]    - args: function (..., envir = parent.frame())
[13:36:27.603]    - tweaked: FALSE
[13:36:27.603]    - call: plan(strategy)
[13:36:27.603] plan(): nbrOfWorkers() = 1
[13:36:27.603] SequentialFuture started (and completed)
[13:36:27.603] - Launch lazy future ... done
[13:36:27.603] run() for ‘SequentialFuture’ ... done
u$a = 2
v$a = 4
[13:36:27.604] getGlobalsAndPackages() ...
[13:36:27.604] Searching for globals...
[13:36:27.604] - globals found: [3] ‘{’, ‘*’, ‘a’
[13:36:27.605] Searching for globals ... DONE
[13:36:27.605] Resolving globals: FALSE
[13:36:27.605] The total size of the 1 globals is 56 bytes (56 bytes)
[13:36:27.606] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[13:36:27.606] - globals: [1] ‘a’
[13:36:27.606] 
[13:36:27.606] getGlobalsAndPackages() ... DONE
[13:36:27.606] run() for ‘Future’ ...
[13:36:27.606] - state: ‘created’
[13:36:27.607] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:27.607] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:27.607] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:27.607]   - Field: ‘label’
[13:36:27.607]   - Field: ‘local’
[13:36:27.607]   - Field: ‘owner’
[13:36:27.607]   - Field: ‘envir’
[13:36:27.607]   - Field: ‘packages’
[13:36:27.608]   - Field: ‘gc’
[13:36:27.608]   - Field: ‘conditions’
[13:36:27.608]   - Field: ‘expr’
[13:36:27.608]   - Field: ‘uuid’
[13:36:27.608]   - Field: ‘seed’
[13:36:27.608]   - Field: ‘version’
[13:36:27.608]   - Field: ‘result’
[13:36:27.608]   - Field: ‘asynchronous’
[13:36:27.608]   - Field: ‘calls’
[13:36:27.608]   - Field: ‘globals’
[13:36:27.608]   - Field: ‘stdout’
[13:36:27.608]   - Field: ‘earlySignal’
[13:36:27.609]   - Field: ‘lazy’
[13:36:27.609]   - Field: ‘state’
[13:36:27.609] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:27.609] - Launch lazy future ...
[13:36:27.609] Packages needed by the future expression (n = 0): <none>
[13:36:27.609] Packages needed by future strategies (n = 0): <none>
[13:36:27.609] {
[13:36:27.609]     {
[13:36:27.609]         {
[13:36:27.609]             ...future.startTime <- base::Sys.time()
[13:36:27.609]             {
[13:36:27.609]                 {
[13:36:27.609]                   {
[13:36:27.609]                     base::local({
[13:36:27.609]                       has_future <- base::requireNamespace("future", 
[13:36:27.609]                         quietly = TRUE)
[13:36:27.609]                       if (has_future) {
[13:36:27.609]                         ns <- base::getNamespace("future")
[13:36:27.609]                         version <- ns[[".package"]][["version"]]
[13:36:27.609]                         if (is.null(version)) 
[13:36:27.609]                           version <- utils::packageVersion("future")
[13:36:27.609]                       }
[13:36:27.609]                       else {
[13:36:27.609]                         version <- NULL
[13:36:27.609]                       }
[13:36:27.609]                       if (!has_future || version < "1.8.0") {
[13:36:27.609]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:27.609]                           "", base::R.version$version.string), 
[13:36:27.609]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:27.609]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:27.609]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:27.609]                             "release", "version")], collapse = " "), 
[13:36:27.609]                           hostname = base::Sys.info()[["nodename"]])
[13:36:27.609]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:27.609]                           info)
[13:36:27.609]                         info <- base::paste(info, collapse = "; ")
[13:36:27.609]                         if (!has_future) {
[13:36:27.609]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:27.609]                             info)
[13:36:27.609]                         }
[13:36:27.609]                         else {
[13:36:27.609]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:27.609]                             info, version)
[13:36:27.609]                         }
[13:36:27.609]                         base::stop(msg)
[13:36:27.609]                       }
[13:36:27.609]                     })
[13:36:27.609]                   }
[13:36:27.609]                   ...future.strategy.old <- future::plan("list")
[13:36:27.609]                   options(future.plan = NULL)
[13:36:27.609]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:27.609]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:27.609]                 }
[13:36:27.609]                 ...future.workdir <- getwd()
[13:36:27.609]             }
[13:36:27.609]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:27.609]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:27.609]         }
[13:36:27.609]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:27.609]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:27.609]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:27.609]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:27.609]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:27.609]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:27.609]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:27.609]             base::names(...future.oldOptions))
[13:36:27.609]     }
[13:36:27.609]     if (FALSE) {
[13:36:27.609]     }
[13:36:27.609]     else {
[13:36:27.609]         if (TRUE) {
[13:36:27.609]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:27.609]                 open = "w")
[13:36:27.609]         }
[13:36:27.609]         else {
[13:36:27.609]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:27.609]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:27.609]         }
[13:36:27.609]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:27.609]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:27.609]             base::sink(type = "output", split = FALSE)
[13:36:27.609]             base::close(...future.stdout)
[13:36:27.609]         }, add = TRUE)
[13:36:27.609]     }
[13:36:27.609]     ...future.frame <- base::sys.nframe()
[13:36:27.609]     ...future.conditions <- base::list()
[13:36:27.609]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:27.609]     if (FALSE) {
[13:36:27.609]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:27.609]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:27.609]     }
[13:36:27.609]     ...future.result <- base::tryCatch({
[13:36:27.609]         base::withCallingHandlers({
[13:36:27.609]             ...future.value <- base::withVisible(base::local({
[13:36:27.609]                 2 * a
[13:36:27.609]             }))
[13:36:27.609]             future::FutureResult(value = ...future.value$value, 
[13:36:27.609]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:27.609]                   ...future.rng), globalenv = if (FALSE) 
[13:36:27.609]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:27.609]                     ...future.globalenv.names))
[13:36:27.609]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:27.609]         }, condition = base::local({
[13:36:27.609]             c <- base::c
[13:36:27.609]             inherits <- base::inherits
[13:36:27.609]             invokeRestart <- base::invokeRestart
[13:36:27.609]             length <- base::length
[13:36:27.609]             list <- base::list
[13:36:27.609]             seq.int <- base::seq.int
[13:36:27.609]             signalCondition <- base::signalCondition
[13:36:27.609]             sys.calls <- base::sys.calls
[13:36:27.609]             `[[` <- base::`[[`
[13:36:27.609]             `+` <- base::`+`
[13:36:27.609]             `<<-` <- base::`<<-`
[13:36:27.609]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:27.609]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:27.609]                   3L)]
[13:36:27.609]             }
[13:36:27.609]             function(cond) {
[13:36:27.609]                 is_error <- inherits(cond, "error")
[13:36:27.609]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:27.609]                   NULL)
[13:36:27.609]                 if (is_error) {
[13:36:27.609]                   sessionInformation <- function() {
[13:36:27.609]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:27.609]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:27.609]                       search = base::search(), system = base::Sys.info())
[13:36:27.609]                   }
[13:36:27.609]                   ...future.conditions[[length(...future.conditions) + 
[13:36:27.609]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:27.609]                     cond$call), session = sessionInformation(), 
[13:36:27.609]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:27.609]                   signalCondition(cond)
[13:36:27.609]                 }
[13:36:27.609]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:27.609]                 "immediateCondition"))) {
[13:36:27.609]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:27.609]                   ...future.conditions[[length(...future.conditions) + 
[13:36:27.609]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:27.609]                   if (TRUE && !signal) {
[13:36:27.609]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:27.609]                     {
[13:36:27.609]                       inherits <- base::inherits
[13:36:27.609]                       invokeRestart <- base::invokeRestart
[13:36:27.609]                       is.null <- base::is.null
[13:36:27.609]                       muffled <- FALSE
[13:36:27.609]                       if (inherits(cond, "message")) {
[13:36:27.609]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:27.609]                         if (muffled) 
[13:36:27.609]                           invokeRestart("muffleMessage")
[13:36:27.609]                       }
[13:36:27.609]                       else if (inherits(cond, "warning")) {
[13:36:27.609]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:27.609]                         if (muffled) 
[13:36:27.609]                           invokeRestart("muffleWarning")
[13:36:27.609]                       }
[13:36:27.609]                       else if (inherits(cond, "condition")) {
[13:36:27.609]                         if (!is.null(pattern)) {
[13:36:27.609]                           computeRestarts <- base::computeRestarts
[13:36:27.609]                           grepl <- base::grepl
[13:36:27.609]                           restarts <- computeRestarts(cond)
[13:36:27.609]                           for (restart in restarts) {
[13:36:27.609]                             name <- restart$name
[13:36:27.609]                             if (is.null(name)) 
[13:36:27.609]                               next
[13:36:27.609]                             if (!grepl(pattern, name)) 
[13:36:27.609]                               next
[13:36:27.609]                             invokeRestart(restart)
[13:36:27.609]                             muffled <- TRUE
[13:36:27.609]                             break
[13:36:27.609]                           }
[13:36:27.609]                         }
[13:36:27.609]                       }
[13:36:27.609]                       invisible(muffled)
[13:36:27.609]                     }
[13:36:27.609]                     muffleCondition(cond, pattern = "^muffle")
[13:36:27.609]                   }
[13:36:27.609]                 }
[13:36:27.609]                 else {
[13:36:27.609]                   if (TRUE) {
[13:36:27.609]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:27.609]                     {
[13:36:27.609]                       inherits <- base::inherits
[13:36:27.609]                       invokeRestart <- base::invokeRestart
[13:36:27.609]                       is.null <- base::is.null
[13:36:27.609]                       muffled <- FALSE
[13:36:27.609]                       if (inherits(cond, "message")) {
[13:36:27.609]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:27.609]                         if (muffled) 
[13:36:27.609]                           invokeRestart("muffleMessage")
[13:36:27.609]                       }
[13:36:27.609]                       else if (inherits(cond, "warning")) {
[13:36:27.609]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:27.609]                         if (muffled) 
[13:36:27.609]                           invokeRestart("muffleWarning")
[13:36:27.609]                       }
[13:36:27.609]                       else if (inherits(cond, "condition")) {
[13:36:27.609]                         if (!is.null(pattern)) {
[13:36:27.609]                           computeRestarts <- base::computeRestarts
[13:36:27.609]                           grepl <- base::grepl
[13:36:27.609]                           restarts <- computeRestarts(cond)
[13:36:27.609]                           for (restart in restarts) {
[13:36:27.609]                             name <- restart$name
[13:36:27.609]                             if (is.null(name)) 
[13:36:27.609]                               next
[13:36:27.609]                             if (!grepl(pattern, name)) 
[13:36:27.609]                               next
[13:36:27.609]                             invokeRestart(restart)
[13:36:27.609]                             muffled <- TRUE
[13:36:27.609]                             break
[13:36:27.609]                           }
[13:36:27.609]                         }
[13:36:27.609]                       }
[13:36:27.609]                       invisible(muffled)
[13:36:27.609]                     }
[13:36:27.609]                     muffleCondition(cond, pattern = "^muffle")
[13:36:27.609]                   }
[13:36:27.609]                 }
[13:36:27.609]             }
[13:36:27.609]         }))
[13:36:27.609]     }, error = function(ex) {
[13:36:27.609]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:27.609]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:27.609]                 ...future.rng), started = ...future.startTime, 
[13:36:27.609]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:27.609]             version = "1.8"), class = "FutureResult")
[13:36:27.609]     }, finally = {
[13:36:27.609]         if (!identical(...future.workdir, getwd())) 
[13:36:27.609]             setwd(...future.workdir)
[13:36:27.609]         {
[13:36:27.609]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:27.609]                 ...future.oldOptions$nwarnings <- NULL
[13:36:27.609]             }
[13:36:27.609]             base::options(...future.oldOptions)
[13:36:27.609]             if (.Platform$OS.type == "windows") {
[13:36:27.609]                 old_names <- names(...future.oldEnvVars)
[13:36:27.609]                 envs <- base::Sys.getenv()
[13:36:27.609]                 names <- names(envs)
[13:36:27.609]                 common <- intersect(names, old_names)
[13:36:27.609]                 added <- setdiff(names, old_names)
[13:36:27.609]                 removed <- setdiff(old_names, names)
[13:36:27.609]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:27.609]                   envs[common]]
[13:36:27.609]                 NAMES <- toupper(changed)
[13:36:27.609]                 args <- list()
[13:36:27.609]                 for (kk in seq_along(NAMES)) {
[13:36:27.609]                   name <- changed[[kk]]
[13:36:27.609]                   NAME <- NAMES[[kk]]
[13:36:27.609]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:27.609]                     next
[13:36:27.609]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:27.609]                 }
[13:36:27.609]                 NAMES <- toupper(added)
[13:36:27.609]                 for (kk in seq_along(NAMES)) {
[13:36:27.609]                   name <- added[[kk]]
[13:36:27.609]                   NAME <- NAMES[[kk]]
[13:36:27.609]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:27.609]                     next
[13:36:27.609]                   args[[name]] <- ""
[13:36:27.609]                 }
[13:36:27.609]                 NAMES <- toupper(removed)
[13:36:27.609]                 for (kk in seq_along(NAMES)) {
[13:36:27.609]                   name <- removed[[kk]]
[13:36:27.609]                   NAME <- NAMES[[kk]]
[13:36:27.609]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:27.609]                     next
[13:36:27.609]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:27.609]                 }
[13:36:27.609]                 if (length(args) > 0) 
[13:36:27.609]                   base::do.call(base::Sys.setenv, args = args)
[13:36:27.609]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:27.609]             }
[13:36:27.609]             else {
[13:36:27.609]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:27.609]             }
[13:36:27.609]             {
[13:36:27.609]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:27.609]                   0L) {
[13:36:27.609]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:27.609]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:27.609]                   base::options(opts)
[13:36:27.609]                 }
[13:36:27.609]                 {
[13:36:27.609]                   {
[13:36:27.609]                     NULL
[13:36:27.609]                     RNGkind("Mersenne-Twister")
[13:36:27.609]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:27.609]                       inherits = FALSE)
[13:36:27.609]                   }
[13:36:27.609]                   options(future.plan = NULL)
[13:36:27.609]                   if (is.na(NA_character_)) 
[13:36:27.609]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:27.609]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:27.609]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:27.609]                     .init = FALSE)
[13:36:27.609]                 }
[13:36:27.609]             }
[13:36:27.609]         }
[13:36:27.609]     })
[13:36:27.609]     if (TRUE) {
[13:36:27.609]         base::sink(type = "output", split = FALSE)
[13:36:27.609]         if (TRUE) {
[13:36:27.609]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:27.609]         }
[13:36:27.609]         else {
[13:36:27.609]             ...future.result["stdout"] <- base::list(NULL)
[13:36:27.609]         }
[13:36:27.609]         base::close(...future.stdout)
[13:36:27.609]         ...future.stdout <- NULL
[13:36:27.609]     }
[13:36:27.609]     ...future.result$conditions <- ...future.conditions
[13:36:27.609]     ...future.result$finished <- base::Sys.time()
[13:36:27.609]     ...future.result
[13:36:27.609] }
[13:36:27.611] assign_globals() ...
[13:36:27.611] List of 1
[13:36:27.611]  $ a: num 1
[13:36:27.611]  - attr(*, "where")=List of 1
[13:36:27.611]   ..$ a:<environment: R_EmptyEnv> 
[13:36:27.611]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:27.611]  - attr(*, "resolved")= logi FALSE
[13:36:27.611]  - attr(*, "total_size")= num 56
[13:36:27.611]  - attr(*, "already-done")= logi TRUE
[13:36:27.617] - copied ‘a’ to environment
[13:36:27.617] assign_globals() ... done
[13:36:27.617] plan(): Setting new future strategy stack:
[13:36:27.618] List of future strategies:
[13:36:27.618] 1. sequential:
[13:36:27.618]    - args: function (..., envir = parent.frame())
[13:36:27.618]    - tweaked: FALSE
[13:36:27.618]    - call: NULL
[13:36:27.618] plan(): nbrOfWorkers() = 1
[13:36:27.619] plan(): Setting new future strategy stack:
[13:36:27.619] List of future strategies:
[13:36:27.619] 1. sequential:
[13:36:27.619]    - args: function (..., envir = parent.frame())
[13:36:27.619]    - tweaked: FALSE
[13:36:27.619]    - call: plan(strategy)
[13:36:27.619] plan(): nbrOfWorkers() = 1
[13:36:27.619] SequentialFuture started (and completed)
[13:36:27.619] - Launch lazy future ... done
[13:36:27.619] run() for ‘SequentialFuture’ ... done
[13:36:27.620] getGlobalsAndPackages() ...
[13:36:27.620] Searching for globals...
[13:36:27.620] - globals found: [3] ‘{’, ‘*’, ‘a’
[13:36:27.621] Searching for globals ... DONE
[13:36:27.621] Resolving globals: FALSE
[13:36:27.621] The total size of the 1 globals is 56 bytes (56 bytes)
[13:36:27.621] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[13:36:27.621] - globals: [1] ‘a’
[13:36:27.621] 
[13:36:27.622] getGlobalsAndPackages() ... DONE
[13:36:27.622] run() for ‘Future’ ...
[13:36:27.622] - state: ‘created’
[13:36:27.622] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:27.622] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:27.622] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:27.622]   - Field: ‘label’
[13:36:27.623]   - Field: ‘local’
[13:36:27.623]   - Field: ‘owner’
[13:36:27.623]   - Field: ‘envir’
[13:36:27.623]   - Field: ‘packages’
[13:36:27.623]   - Field: ‘gc’
[13:36:27.623]   - Field: ‘conditions’
[13:36:27.623]   - Field: ‘expr’
[13:36:27.623]   - Field: ‘uuid’
[13:36:27.623]   - Field: ‘seed’
[13:36:27.623]   - Field: ‘version’
[13:36:27.623]   - Field: ‘result’
[13:36:27.623]   - Field: ‘asynchronous’
[13:36:27.624]   - Field: ‘calls’
[13:36:27.624]   - Field: ‘globals’
[13:36:27.624]   - Field: ‘stdout’
[13:36:27.624]   - Field: ‘earlySignal’
[13:36:27.624]   - Field: ‘lazy’
[13:36:27.624]   - Field: ‘state’
[13:36:27.624] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:27.624] - Launch lazy future ...
[13:36:27.624] Packages needed by the future expression (n = 0): <none>
[13:36:27.624] Packages needed by future strategies (n = 0): <none>
[13:36:27.625] {
[13:36:27.625]     {
[13:36:27.625]         {
[13:36:27.625]             ...future.startTime <- base::Sys.time()
[13:36:27.625]             {
[13:36:27.625]                 {
[13:36:27.625]                   {
[13:36:27.625]                     base::local({
[13:36:27.625]                       has_future <- base::requireNamespace("future", 
[13:36:27.625]                         quietly = TRUE)
[13:36:27.625]                       if (has_future) {
[13:36:27.625]                         ns <- base::getNamespace("future")
[13:36:27.625]                         version <- ns[[".package"]][["version"]]
[13:36:27.625]                         if (is.null(version)) 
[13:36:27.625]                           version <- utils::packageVersion("future")
[13:36:27.625]                       }
[13:36:27.625]                       else {
[13:36:27.625]                         version <- NULL
[13:36:27.625]                       }
[13:36:27.625]                       if (!has_future || version < "1.8.0") {
[13:36:27.625]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:27.625]                           "", base::R.version$version.string), 
[13:36:27.625]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:27.625]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:27.625]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:27.625]                             "release", "version")], collapse = " "), 
[13:36:27.625]                           hostname = base::Sys.info()[["nodename"]])
[13:36:27.625]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:27.625]                           info)
[13:36:27.625]                         info <- base::paste(info, collapse = "; ")
[13:36:27.625]                         if (!has_future) {
[13:36:27.625]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:27.625]                             info)
[13:36:27.625]                         }
[13:36:27.625]                         else {
[13:36:27.625]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:27.625]                             info, version)
[13:36:27.625]                         }
[13:36:27.625]                         base::stop(msg)
[13:36:27.625]                       }
[13:36:27.625]                     })
[13:36:27.625]                   }
[13:36:27.625]                   ...future.strategy.old <- future::plan("list")
[13:36:27.625]                   options(future.plan = NULL)
[13:36:27.625]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:27.625]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:27.625]                 }
[13:36:27.625]                 ...future.workdir <- getwd()
[13:36:27.625]             }
[13:36:27.625]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:27.625]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:27.625]         }
[13:36:27.625]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:27.625]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:27.625]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:27.625]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:27.625]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:27.625]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:27.625]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:27.625]             base::names(...future.oldOptions))
[13:36:27.625]     }
[13:36:27.625]     if (FALSE) {
[13:36:27.625]     }
[13:36:27.625]     else {
[13:36:27.625]         if (TRUE) {
[13:36:27.625]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:27.625]                 open = "w")
[13:36:27.625]         }
[13:36:27.625]         else {
[13:36:27.625]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:27.625]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:27.625]         }
[13:36:27.625]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:27.625]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:27.625]             base::sink(type = "output", split = FALSE)
[13:36:27.625]             base::close(...future.stdout)
[13:36:27.625]         }, add = TRUE)
[13:36:27.625]     }
[13:36:27.625]     ...future.frame <- base::sys.nframe()
[13:36:27.625]     ...future.conditions <- base::list()
[13:36:27.625]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:27.625]     if (FALSE) {
[13:36:27.625]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:27.625]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:27.625]     }
[13:36:27.625]     ...future.result <- base::tryCatch({
[13:36:27.625]         base::withCallingHandlers({
[13:36:27.625]             ...future.value <- base::withVisible(base::local({
[13:36:27.625]                 2 * a
[13:36:27.625]             }))
[13:36:27.625]             future::FutureResult(value = ...future.value$value, 
[13:36:27.625]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:27.625]                   ...future.rng), globalenv = if (FALSE) 
[13:36:27.625]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:27.625]                     ...future.globalenv.names))
[13:36:27.625]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:27.625]         }, condition = base::local({
[13:36:27.625]             c <- base::c
[13:36:27.625]             inherits <- base::inherits
[13:36:27.625]             invokeRestart <- base::invokeRestart
[13:36:27.625]             length <- base::length
[13:36:27.625]             list <- base::list
[13:36:27.625]             seq.int <- base::seq.int
[13:36:27.625]             signalCondition <- base::signalCondition
[13:36:27.625]             sys.calls <- base::sys.calls
[13:36:27.625]             `[[` <- base::`[[`
[13:36:27.625]             `+` <- base::`+`
[13:36:27.625]             `<<-` <- base::`<<-`
[13:36:27.625]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:27.625]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:27.625]                   3L)]
[13:36:27.625]             }
[13:36:27.625]             function(cond) {
[13:36:27.625]                 is_error <- inherits(cond, "error")
[13:36:27.625]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:27.625]                   NULL)
[13:36:27.625]                 if (is_error) {
[13:36:27.625]                   sessionInformation <- function() {
[13:36:27.625]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:27.625]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:27.625]                       search = base::search(), system = base::Sys.info())
[13:36:27.625]                   }
[13:36:27.625]                   ...future.conditions[[length(...future.conditions) + 
[13:36:27.625]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:27.625]                     cond$call), session = sessionInformation(), 
[13:36:27.625]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:27.625]                   signalCondition(cond)
[13:36:27.625]                 }
[13:36:27.625]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:27.625]                 "immediateCondition"))) {
[13:36:27.625]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:27.625]                   ...future.conditions[[length(...future.conditions) + 
[13:36:27.625]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:27.625]                   if (TRUE && !signal) {
[13:36:27.625]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:27.625]                     {
[13:36:27.625]                       inherits <- base::inherits
[13:36:27.625]                       invokeRestart <- base::invokeRestart
[13:36:27.625]                       is.null <- base::is.null
[13:36:27.625]                       muffled <- FALSE
[13:36:27.625]                       if (inherits(cond, "message")) {
[13:36:27.625]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:27.625]                         if (muffled) 
[13:36:27.625]                           invokeRestart("muffleMessage")
[13:36:27.625]                       }
[13:36:27.625]                       else if (inherits(cond, "warning")) {
[13:36:27.625]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:27.625]                         if (muffled) 
[13:36:27.625]                           invokeRestart("muffleWarning")
[13:36:27.625]                       }
[13:36:27.625]                       else if (inherits(cond, "condition")) {
[13:36:27.625]                         if (!is.null(pattern)) {
[13:36:27.625]                           computeRestarts <- base::computeRestarts
[13:36:27.625]                           grepl <- base::grepl
[13:36:27.625]                           restarts <- computeRestarts(cond)
[13:36:27.625]                           for (restart in restarts) {
[13:36:27.625]                             name <- restart$name
[13:36:27.625]                             if (is.null(name)) 
[13:36:27.625]                               next
[13:36:27.625]                             if (!grepl(pattern, name)) 
[13:36:27.625]                               next
[13:36:27.625]                             invokeRestart(restart)
[13:36:27.625]                             muffled <- TRUE
[13:36:27.625]                             break
[13:36:27.625]                           }
[13:36:27.625]                         }
[13:36:27.625]                       }
[13:36:27.625]                       invisible(muffled)
[13:36:27.625]                     }
[13:36:27.625]                     muffleCondition(cond, pattern = "^muffle")
[13:36:27.625]                   }
[13:36:27.625]                 }
[13:36:27.625]                 else {
[13:36:27.625]                   if (TRUE) {
[13:36:27.625]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:27.625]                     {
[13:36:27.625]                       inherits <- base::inherits
[13:36:27.625]                       invokeRestart <- base::invokeRestart
[13:36:27.625]                       is.null <- base::is.null
[13:36:27.625]                       muffled <- FALSE
[13:36:27.625]                       if (inherits(cond, "message")) {
[13:36:27.625]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:27.625]                         if (muffled) 
[13:36:27.625]                           invokeRestart("muffleMessage")
[13:36:27.625]                       }
[13:36:27.625]                       else if (inherits(cond, "warning")) {
[13:36:27.625]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:27.625]                         if (muffled) 
[13:36:27.625]                           invokeRestart("muffleWarning")
[13:36:27.625]                       }
[13:36:27.625]                       else if (inherits(cond, "condition")) {
[13:36:27.625]                         if (!is.null(pattern)) {
[13:36:27.625]                           computeRestarts <- base::computeRestarts
[13:36:27.625]                           grepl <- base::grepl
[13:36:27.625]                           restarts <- computeRestarts(cond)
[13:36:27.625]                           for (restart in restarts) {
[13:36:27.625]                             name <- restart$name
[13:36:27.625]                             if (is.null(name)) 
[13:36:27.625]                               next
[13:36:27.625]                             if (!grepl(pattern, name)) 
[13:36:27.625]                               next
[13:36:27.625]                             invokeRestart(restart)
[13:36:27.625]                             muffled <- TRUE
[13:36:27.625]                             break
[13:36:27.625]                           }
[13:36:27.625]                         }
[13:36:27.625]                       }
[13:36:27.625]                       invisible(muffled)
[13:36:27.625]                     }
[13:36:27.625]                     muffleCondition(cond, pattern = "^muffle")
[13:36:27.625]                   }
[13:36:27.625]                 }
[13:36:27.625]             }
[13:36:27.625]         }))
[13:36:27.625]     }, error = function(ex) {
[13:36:27.625]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:27.625]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:27.625]                 ...future.rng), started = ...future.startTime, 
[13:36:27.625]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:27.625]             version = "1.8"), class = "FutureResult")
[13:36:27.625]     }, finally = {
[13:36:27.625]         if (!identical(...future.workdir, getwd())) 
[13:36:27.625]             setwd(...future.workdir)
[13:36:27.625]         {
[13:36:27.625]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:27.625]                 ...future.oldOptions$nwarnings <- NULL
[13:36:27.625]             }
[13:36:27.625]             base::options(...future.oldOptions)
[13:36:27.625]             if (.Platform$OS.type == "windows") {
[13:36:27.625]                 old_names <- names(...future.oldEnvVars)
[13:36:27.625]                 envs <- base::Sys.getenv()
[13:36:27.625]                 names <- names(envs)
[13:36:27.625]                 common <- intersect(names, old_names)
[13:36:27.625]                 added <- setdiff(names, old_names)
[13:36:27.625]                 removed <- setdiff(old_names, names)
[13:36:27.625]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:27.625]                   envs[common]]
[13:36:27.625]                 NAMES <- toupper(changed)
[13:36:27.625]                 args <- list()
[13:36:27.625]                 for (kk in seq_along(NAMES)) {
[13:36:27.625]                   name <- changed[[kk]]
[13:36:27.625]                   NAME <- NAMES[[kk]]
[13:36:27.625]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:27.625]                     next
[13:36:27.625]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:27.625]                 }
[13:36:27.625]                 NAMES <- toupper(added)
[13:36:27.625]                 for (kk in seq_along(NAMES)) {
[13:36:27.625]                   name <- added[[kk]]
[13:36:27.625]                   NAME <- NAMES[[kk]]
[13:36:27.625]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:27.625]                     next
[13:36:27.625]                   args[[name]] <- ""
[13:36:27.625]                 }
[13:36:27.625]                 NAMES <- toupper(removed)
[13:36:27.625]                 for (kk in seq_along(NAMES)) {
[13:36:27.625]                   name <- removed[[kk]]
[13:36:27.625]                   NAME <- NAMES[[kk]]
[13:36:27.625]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:27.625]                     next
[13:36:27.625]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:27.625]                 }
[13:36:27.625]                 if (length(args) > 0) 
[13:36:27.625]                   base::do.call(base::Sys.setenv, args = args)
[13:36:27.625]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:27.625]             }
[13:36:27.625]             else {
[13:36:27.625]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:27.625]             }
[13:36:27.625]             {
[13:36:27.625]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:27.625]                   0L) {
[13:36:27.625]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:27.625]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:27.625]                   base::options(opts)
[13:36:27.625]                 }
[13:36:27.625]                 {
[13:36:27.625]                   {
[13:36:27.625]                     NULL
[13:36:27.625]                     RNGkind("Mersenne-Twister")
[13:36:27.625]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:27.625]                       inherits = FALSE)
[13:36:27.625]                   }
[13:36:27.625]                   options(future.plan = NULL)
[13:36:27.625]                   if (is.na(NA_character_)) 
[13:36:27.625]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:27.625]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:27.625]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:27.625]                     .init = FALSE)
[13:36:27.625]                 }
[13:36:27.625]             }
[13:36:27.625]         }
[13:36:27.625]     })
[13:36:27.625]     if (TRUE) {
[13:36:27.625]         base::sink(type = "output", split = FALSE)
[13:36:27.625]         if (TRUE) {
[13:36:27.625]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:27.625]         }
[13:36:27.625]         else {
[13:36:27.625]             ...future.result["stdout"] <- base::list(NULL)
[13:36:27.625]         }
[13:36:27.625]         base::close(...future.stdout)
[13:36:27.625]         ...future.stdout <- NULL
[13:36:27.625]     }
[13:36:27.625]     ...future.result$conditions <- ...future.conditions
[13:36:27.625]     ...future.result$finished <- base::Sys.time()
[13:36:27.625]     ...future.result
[13:36:27.625] }
[13:36:27.626] assign_globals() ...
[13:36:27.626] List of 1
[13:36:27.626]  $ a: num 1
[13:36:27.626]  - attr(*, "where")=List of 1
[13:36:27.626]   ..$ a:<environment: R_EmptyEnv> 
[13:36:27.626]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:27.626]  - attr(*, "resolved")= logi FALSE
[13:36:27.626]  - attr(*, "total_size")= num 56
[13:36:27.626]  - attr(*, "already-done")= logi TRUE
[13:36:27.629] - copied ‘a’ to environment
[13:36:27.629] assign_globals() ... done
[13:36:27.629] plan(): Setting new future strategy stack:
[13:36:27.629] List of future strategies:
[13:36:27.629] 1. sequential:
[13:36:27.629]    - args: function (..., envir = parent.frame())
[13:36:27.629]    - tweaked: FALSE
[13:36:27.629]    - call: NULL
[13:36:27.629] plan(): nbrOfWorkers() = 1
[13:36:27.630] plan(): Setting new future strategy stack:
[13:36:27.630] List of future strategies:
[13:36:27.630] 1. sequential:
[13:36:27.630]    - args: function (..., envir = parent.frame())
[13:36:27.630]    - tweaked: FALSE
[13:36:27.630]    - call: plan(strategy)
[13:36:27.631] plan(): nbrOfWorkers() = 1
[13:36:27.631] SequentialFuture started (and completed)
[13:36:27.631] - Launch lazy future ... done
[13:36:27.631] run() for ‘SequentialFuture’ ... done
[13:36:27.631] getGlobalsAndPackages() ...
[13:36:27.631] Searching for globals...
[13:36:27.632] - globals found: [3] ‘{’, ‘*’, ‘a’
[13:36:27.632] Searching for globals ... DONE
[13:36:27.632] Resolving globals: FALSE
[13:36:27.633] The total size of the 1 globals is 56 bytes (56 bytes)
[13:36:27.633] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[13:36:27.633] - globals: [1] ‘a’
[13:36:27.633] 
[13:36:27.633] getGlobalsAndPackages() ... DONE
[13:36:27.633] run() for ‘Future’ ...
[13:36:27.633] - state: ‘created’
[13:36:27.634] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:27.634] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:27.634] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:27.634]   - Field: ‘label’
[13:36:27.634]   - Field: ‘local’
[13:36:27.634]   - Field: ‘owner’
[13:36:27.634]   - Field: ‘envir’
[13:36:27.634]   - Field: ‘packages’
[13:36:27.634]   - Field: ‘gc’
[13:36:27.635]   - Field: ‘conditions’
[13:36:27.635]   - Field: ‘expr’
[13:36:27.635]   - Field: ‘uuid’
[13:36:27.635]   - Field: ‘seed’
[13:36:27.635]   - Field: ‘version’
[13:36:27.635]   - Field: ‘result’
[13:36:27.635]   - Field: ‘asynchronous’
[13:36:27.635]   - Field: ‘calls’
[13:36:27.635]   - Field: ‘globals’
[13:36:27.635]   - Field: ‘stdout’
[13:36:27.635]   - Field: ‘earlySignal’
[13:36:27.635]   - Field: ‘lazy’
[13:36:27.636]   - Field: ‘state’
[13:36:27.636] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:27.636] - Launch lazy future ...
[13:36:27.636] Packages needed by the future expression (n = 0): <none>
[13:36:27.636] Packages needed by future strategies (n = 0): <none>
[13:36:27.636] {
[13:36:27.636]     {
[13:36:27.636]         {
[13:36:27.636]             ...future.startTime <- base::Sys.time()
[13:36:27.636]             {
[13:36:27.636]                 {
[13:36:27.636]                   {
[13:36:27.636]                     base::local({
[13:36:27.636]                       has_future <- base::requireNamespace("future", 
[13:36:27.636]                         quietly = TRUE)
[13:36:27.636]                       if (has_future) {
[13:36:27.636]                         ns <- base::getNamespace("future")
[13:36:27.636]                         version <- ns[[".package"]][["version"]]
[13:36:27.636]                         if (is.null(version)) 
[13:36:27.636]                           version <- utils::packageVersion("future")
[13:36:27.636]                       }
[13:36:27.636]                       else {
[13:36:27.636]                         version <- NULL
[13:36:27.636]                       }
[13:36:27.636]                       if (!has_future || version < "1.8.0") {
[13:36:27.636]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:27.636]                           "", base::R.version$version.string), 
[13:36:27.636]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:27.636]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:27.636]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:27.636]                             "release", "version")], collapse = " "), 
[13:36:27.636]                           hostname = base::Sys.info()[["nodename"]])
[13:36:27.636]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:27.636]                           info)
[13:36:27.636]                         info <- base::paste(info, collapse = "; ")
[13:36:27.636]                         if (!has_future) {
[13:36:27.636]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:27.636]                             info)
[13:36:27.636]                         }
[13:36:27.636]                         else {
[13:36:27.636]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:27.636]                             info, version)
[13:36:27.636]                         }
[13:36:27.636]                         base::stop(msg)
[13:36:27.636]                       }
[13:36:27.636]                     })
[13:36:27.636]                   }
[13:36:27.636]                   ...future.strategy.old <- future::plan("list")
[13:36:27.636]                   options(future.plan = NULL)
[13:36:27.636]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:27.636]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:27.636]                 }
[13:36:27.636]                 ...future.workdir <- getwd()
[13:36:27.636]             }
[13:36:27.636]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:27.636]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:27.636]         }
[13:36:27.636]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:27.636]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:27.636]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:27.636]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:27.636]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:27.636]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:27.636]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:27.636]             base::names(...future.oldOptions))
[13:36:27.636]     }
[13:36:27.636]     if (FALSE) {
[13:36:27.636]     }
[13:36:27.636]     else {
[13:36:27.636]         if (TRUE) {
[13:36:27.636]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:27.636]                 open = "w")
[13:36:27.636]         }
[13:36:27.636]         else {
[13:36:27.636]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:27.636]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:27.636]         }
[13:36:27.636]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:27.636]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:27.636]             base::sink(type = "output", split = FALSE)
[13:36:27.636]             base::close(...future.stdout)
[13:36:27.636]         }, add = TRUE)
[13:36:27.636]     }
[13:36:27.636]     ...future.frame <- base::sys.nframe()
[13:36:27.636]     ...future.conditions <- base::list()
[13:36:27.636]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:27.636]     if (FALSE) {
[13:36:27.636]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:27.636]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:27.636]     }
[13:36:27.636]     ...future.result <- base::tryCatch({
[13:36:27.636]         base::withCallingHandlers({
[13:36:27.636]             ...future.value <- base::withVisible(base::local({
[13:36:27.636]                 2 * a
[13:36:27.636]             }))
[13:36:27.636]             future::FutureResult(value = ...future.value$value, 
[13:36:27.636]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:27.636]                   ...future.rng), globalenv = if (FALSE) 
[13:36:27.636]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:27.636]                     ...future.globalenv.names))
[13:36:27.636]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:27.636]         }, condition = base::local({
[13:36:27.636]             c <- base::c
[13:36:27.636]             inherits <- base::inherits
[13:36:27.636]             invokeRestart <- base::invokeRestart
[13:36:27.636]             length <- base::length
[13:36:27.636]             list <- base::list
[13:36:27.636]             seq.int <- base::seq.int
[13:36:27.636]             signalCondition <- base::signalCondition
[13:36:27.636]             sys.calls <- base::sys.calls
[13:36:27.636]             `[[` <- base::`[[`
[13:36:27.636]             `+` <- base::`+`
[13:36:27.636]             `<<-` <- base::`<<-`
[13:36:27.636]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:27.636]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:27.636]                   3L)]
[13:36:27.636]             }
[13:36:27.636]             function(cond) {
[13:36:27.636]                 is_error <- inherits(cond, "error")
[13:36:27.636]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:27.636]                   NULL)
[13:36:27.636]                 if (is_error) {
[13:36:27.636]                   sessionInformation <- function() {
[13:36:27.636]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:27.636]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:27.636]                       search = base::search(), system = base::Sys.info())
[13:36:27.636]                   }
[13:36:27.636]                   ...future.conditions[[length(...future.conditions) + 
[13:36:27.636]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:27.636]                     cond$call), session = sessionInformation(), 
[13:36:27.636]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:27.636]                   signalCondition(cond)
[13:36:27.636]                 }
[13:36:27.636]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:27.636]                 "immediateCondition"))) {
[13:36:27.636]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:27.636]                   ...future.conditions[[length(...future.conditions) + 
[13:36:27.636]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:27.636]                   if (TRUE && !signal) {
[13:36:27.636]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:27.636]                     {
[13:36:27.636]                       inherits <- base::inherits
[13:36:27.636]                       invokeRestart <- base::invokeRestart
[13:36:27.636]                       is.null <- base::is.null
[13:36:27.636]                       muffled <- FALSE
[13:36:27.636]                       if (inherits(cond, "message")) {
[13:36:27.636]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:27.636]                         if (muffled) 
[13:36:27.636]                           invokeRestart("muffleMessage")
[13:36:27.636]                       }
[13:36:27.636]                       else if (inherits(cond, "warning")) {
[13:36:27.636]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:27.636]                         if (muffled) 
[13:36:27.636]                           invokeRestart("muffleWarning")
[13:36:27.636]                       }
[13:36:27.636]                       else if (inherits(cond, "condition")) {
[13:36:27.636]                         if (!is.null(pattern)) {
[13:36:27.636]                           computeRestarts <- base::computeRestarts
[13:36:27.636]                           grepl <- base::grepl
[13:36:27.636]                           restarts <- computeRestarts(cond)
[13:36:27.636]                           for (restart in restarts) {
[13:36:27.636]                             name <- restart$name
[13:36:27.636]                             if (is.null(name)) 
[13:36:27.636]                               next
[13:36:27.636]                             if (!grepl(pattern, name)) 
[13:36:27.636]                               next
[13:36:27.636]                             invokeRestart(restart)
[13:36:27.636]                             muffled <- TRUE
[13:36:27.636]                             break
[13:36:27.636]                           }
[13:36:27.636]                         }
[13:36:27.636]                       }
[13:36:27.636]                       invisible(muffled)
[13:36:27.636]                     }
[13:36:27.636]                     muffleCondition(cond, pattern = "^muffle")
[13:36:27.636]                   }
[13:36:27.636]                 }
[13:36:27.636]                 else {
[13:36:27.636]                   if (TRUE) {
[13:36:27.636]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:27.636]                     {
[13:36:27.636]                       inherits <- base::inherits
[13:36:27.636]                       invokeRestart <- base::invokeRestart
[13:36:27.636]                       is.null <- base::is.null
[13:36:27.636]                       muffled <- FALSE
[13:36:27.636]                       if (inherits(cond, "message")) {
[13:36:27.636]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:27.636]                         if (muffled) 
[13:36:27.636]                           invokeRestart("muffleMessage")
[13:36:27.636]                       }
[13:36:27.636]                       else if (inherits(cond, "warning")) {
[13:36:27.636]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:27.636]                         if (muffled) 
[13:36:27.636]                           invokeRestart("muffleWarning")
[13:36:27.636]                       }
[13:36:27.636]                       else if (inherits(cond, "condition")) {
[13:36:27.636]                         if (!is.null(pattern)) {
[13:36:27.636]                           computeRestarts <- base::computeRestarts
[13:36:27.636]                           grepl <- base::grepl
[13:36:27.636]                           restarts <- computeRestarts(cond)
[13:36:27.636]                           for (restart in restarts) {
[13:36:27.636]                             name <- restart$name
[13:36:27.636]                             if (is.null(name)) 
[13:36:27.636]                               next
[13:36:27.636]                             if (!grepl(pattern, name)) 
[13:36:27.636]                               next
[13:36:27.636]                             invokeRestart(restart)
[13:36:27.636]                             muffled <- TRUE
[13:36:27.636]                             break
[13:36:27.636]                           }
[13:36:27.636]                         }
[13:36:27.636]                       }
[13:36:27.636]                       invisible(muffled)
[13:36:27.636]                     }
[13:36:27.636]                     muffleCondition(cond, pattern = "^muffle")
[13:36:27.636]                   }
[13:36:27.636]                 }
[13:36:27.636]             }
[13:36:27.636]         }))
[13:36:27.636]     }, error = function(ex) {
[13:36:27.636]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:27.636]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:27.636]                 ...future.rng), started = ...future.startTime, 
[13:36:27.636]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:27.636]             version = "1.8"), class = "FutureResult")
[13:36:27.636]     }, finally = {
[13:36:27.636]         if (!identical(...future.workdir, getwd())) 
[13:36:27.636]             setwd(...future.workdir)
[13:36:27.636]         {
[13:36:27.636]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:27.636]                 ...future.oldOptions$nwarnings <- NULL
[13:36:27.636]             }
[13:36:27.636]             base::options(...future.oldOptions)
[13:36:27.636]             if (.Platform$OS.type == "windows") {
[13:36:27.636]                 old_names <- names(...future.oldEnvVars)
[13:36:27.636]                 envs <- base::Sys.getenv()
[13:36:27.636]                 names <- names(envs)
[13:36:27.636]                 common <- intersect(names, old_names)
[13:36:27.636]                 added <- setdiff(names, old_names)
[13:36:27.636]                 removed <- setdiff(old_names, names)
[13:36:27.636]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:27.636]                   envs[common]]
[13:36:27.636]                 NAMES <- toupper(changed)
[13:36:27.636]                 args <- list()
[13:36:27.636]                 for (kk in seq_along(NAMES)) {
[13:36:27.636]                   name <- changed[[kk]]
[13:36:27.636]                   NAME <- NAMES[[kk]]
[13:36:27.636]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:27.636]                     next
[13:36:27.636]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:27.636]                 }
[13:36:27.636]                 NAMES <- toupper(added)
[13:36:27.636]                 for (kk in seq_along(NAMES)) {
[13:36:27.636]                   name <- added[[kk]]
[13:36:27.636]                   NAME <- NAMES[[kk]]
[13:36:27.636]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:27.636]                     next
[13:36:27.636]                   args[[name]] <- ""
[13:36:27.636]                 }
[13:36:27.636]                 NAMES <- toupper(removed)
[13:36:27.636]                 for (kk in seq_along(NAMES)) {
[13:36:27.636]                   name <- removed[[kk]]
[13:36:27.636]                   NAME <- NAMES[[kk]]
[13:36:27.636]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:27.636]                     next
[13:36:27.636]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:27.636]                 }
[13:36:27.636]                 if (length(args) > 0) 
[13:36:27.636]                   base::do.call(base::Sys.setenv, args = args)
[13:36:27.636]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:27.636]             }
[13:36:27.636]             else {
[13:36:27.636]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:27.636]             }
[13:36:27.636]             {
[13:36:27.636]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:27.636]                   0L) {
[13:36:27.636]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:27.636]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:27.636]                   base::options(opts)
[13:36:27.636]                 }
[13:36:27.636]                 {
[13:36:27.636]                   {
[13:36:27.636]                     NULL
[13:36:27.636]                     RNGkind("Mersenne-Twister")
[13:36:27.636]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:27.636]                       inherits = FALSE)
[13:36:27.636]                   }
[13:36:27.636]                   options(future.plan = NULL)
[13:36:27.636]                   if (is.na(NA_character_)) 
[13:36:27.636]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:27.636]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:27.636]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:27.636]                     .init = FALSE)
[13:36:27.636]                 }
[13:36:27.636]             }
[13:36:27.636]         }
[13:36:27.636]     })
[13:36:27.636]     if (TRUE) {
[13:36:27.636]         base::sink(type = "output", split = FALSE)
[13:36:27.636]         if (TRUE) {
[13:36:27.636]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:27.636]         }
[13:36:27.636]         else {
[13:36:27.636]             ...future.result["stdout"] <- base::list(NULL)
[13:36:27.636]         }
[13:36:27.636]         base::close(...future.stdout)
[13:36:27.636]         ...future.stdout <- NULL
[13:36:27.636]     }
[13:36:27.636]     ...future.result$conditions <- ...future.conditions
[13:36:27.636]     ...future.result$finished <- base::Sys.time()
[13:36:27.636]     ...future.result
[13:36:27.636] }
[13:36:27.638] assign_globals() ...
[13:36:27.638] List of 1
[13:36:27.638]  $ a: num 1
[13:36:27.638]  - attr(*, "where")=List of 1
[13:36:27.638]   ..$ a:<environment: R_EmptyEnv> 
[13:36:27.638]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:27.638]  - attr(*, "resolved")= logi FALSE
[13:36:27.638]  - attr(*, "total_size")= num 56
[13:36:27.638]  - attr(*, "already-done")= logi TRUE
[13:36:27.640] - copied ‘a’ to environment
[13:36:27.640] assign_globals() ... done
[13:36:27.641] plan(): Setting new future strategy stack:
[13:36:27.641] List of future strategies:
[13:36:27.641] 1. sequential:
[13:36:27.641]    - args: function (..., envir = parent.frame())
[13:36:27.641]    - tweaked: FALSE
[13:36:27.641]    - call: NULL
[13:36:27.641] plan(): nbrOfWorkers() = 1
[13:36:27.642] plan(): Setting new future strategy stack:
[13:36:27.643] List of future strategies:
[13:36:27.643] 1. sequential:
[13:36:27.643]    - args: function (..., envir = parent.frame())
[13:36:27.643]    - tweaked: FALSE
[13:36:27.643]    - call: plan(strategy)
[13:36:27.643] plan(): nbrOfWorkers() = 1
[13:36:27.643] SequentialFuture started (and completed)
[13:36:27.643] - Launch lazy future ... done
[13:36:27.643] run() for ‘SequentialFuture’ ... done
[13:36:27.644] getGlobalsAndPackages() ...
[13:36:27.644] Searching for globals...
[13:36:27.644] - globals found: [3] ‘{’, ‘*’, ‘a’
[13:36:27.645] Searching for globals ... DONE
[13:36:27.645] Resolving globals: FALSE
[13:36:27.645] The total size of the 1 globals is 56 bytes (56 bytes)
[13:36:27.645] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[13:36:27.645] - globals: [1] ‘a’
[13:36:27.646] 
[13:36:27.646] getGlobalsAndPackages() ... DONE
[13:36:27.646] run() for ‘Future’ ...
[13:36:27.646] - state: ‘created’
[13:36:27.646] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:27.646] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:27.646] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:27.647]   - Field: ‘label’
[13:36:27.647]   - Field: ‘local’
[13:36:27.647]   - Field: ‘owner’
[13:36:27.647]   - Field: ‘envir’
[13:36:27.647]   - Field: ‘packages’
[13:36:27.647]   - Field: ‘gc’
[13:36:27.647]   - Field: ‘conditions’
[13:36:27.647]   - Field: ‘expr’
[13:36:27.647]   - Field: ‘uuid’
[13:36:27.647]   - Field: ‘seed’
[13:36:27.647]   - Field: ‘version’
[13:36:27.648]   - Field: ‘result’
[13:36:27.648]   - Field: ‘asynchronous’
[13:36:27.648]   - Field: ‘calls’
[13:36:27.648]   - Field: ‘globals’
[13:36:27.648]   - Field: ‘stdout’
[13:36:27.648]   - Field: ‘earlySignal’
[13:36:27.648]   - Field: ‘lazy’
[13:36:27.648]   - Field: ‘state’
[13:36:27.648] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:27.648] - Launch lazy future ...
[13:36:27.648] Packages needed by the future expression (n = 0): <none>
[13:36:27.649] Packages needed by future strategies (n = 0): <none>
[13:36:27.649] {
[13:36:27.649]     {
[13:36:27.649]         {
[13:36:27.649]             ...future.startTime <- base::Sys.time()
[13:36:27.649]             {
[13:36:27.649]                 {
[13:36:27.649]                   {
[13:36:27.649]                     base::local({
[13:36:27.649]                       has_future <- base::requireNamespace("future", 
[13:36:27.649]                         quietly = TRUE)
[13:36:27.649]                       if (has_future) {
[13:36:27.649]                         ns <- base::getNamespace("future")
[13:36:27.649]                         version <- ns[[".package"]][["version"]]
[13:36:27.649]                         if (is.null(version)) 
[13:36:27.649]                           version <- utils::packageVersion("future")
[13:36:27.649]                       }
[13:36:27.649]                       else {
[13:36:27.649]                         version <- NULL
[13:36:27.649]                       }
[13:36:27.649]                       if (!has_future || version < "1.8.0") {
[13:36:27.649]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:27.649]                           "", base::R.version$version.string), 
[13:36:27.649]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:27.649]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:27.649]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:27.649]                             "release", "version")], collapse = " "), 
[13:36:27.649]                           hostname = base::Sys.info()[["nodename"]])
[13:36:27.649]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:27.649]                           info)
[13:36:27.649]                         info <- base::paste(info, collapse = "; ")
[13:36:27.649]                         if (!has_future) {
[13:36:27.649]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:27.649]                             info)
[13:36:27.649]                         }
[13:36:27.649]                         else {
[13:36:27.649]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:27.649]                             info, version)
[13:36:27.649]                         }
[13:36:27.649]                         base::stop(msg)
[13:36:27.649]                       }
[13:36:27.649]                     })
[13:36:27.649]                   }
[13:36:27.649]                   ...future.strategy.old <- future::plan("list")
[13:36:27.649]                   options(future.plan = NULL)
[13:36:27.649]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:27.649]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:27.649]                 }
[13:36:27.649]                 ...future.workdir <- getwd()
[13:36:27.649]             }
[13:36:27.649]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:27.649]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:27.649]         }
[13:36:27.649]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:27.649]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:27.649]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:27.649]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:27.649]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:27.649]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:27.649]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:27.649]             base::names(...future.oldOptions))
[13:36:27.649]     }
[13:36:27.649]     if (FALSE) {
[13:36:27.649]     }
[13:36:27.649]     else {
[13:36:27.649]         if (TRUE) {
[13:36:27.649]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:27.649]                 open = "w")
[13:36:27.649]         }
[13:36:27.649]         else {
[13:36:27.649]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:27.649]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:27.649]         }
[13:36:27.649]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:27.649]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:27.649]             base::sink(type = "output", split = FALSE)
[13:36:27.649]             base::close(...future.stdout)
[13:36:27.649]         }, add = TRUE)
[13:36:27.649]     }
[13:36:27.649]     ...future.frame <- base::sys.nframe()
[13:36:27.649]     ...future.conditions <- base::list()
[13:36:27.649]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:27.649]     if (FALSE) {
[13:36:27.649]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:27.649]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:27.649]     }
[13:36:27.649]     ...future.result <- base::tryCatch({
[13:36:27.649]         base::withCallingHandlers({
[13:36:27.649]             ...future.value <- base::withVisible(base::local({
[13:36:27.649]                 2 * a
[13:36:27.649]             }))
[13:36:27.649]             future::FutureResult(value = ...future.value$value, 
[13:36:27.649]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:27.649]                   ...future.rng), globalenv = if (FALSE) 
[13:36:27.649]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:27.649]                     ...future.globalenv.names))
[13:36:27.649]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:27.649]         }, condition = base::local({
[13:36:27.649]             c <- base::c
[13:36:27.649]             inherits <- base::inherits
[13:36:27.649]             invokeRestart <- base::invokeRestart
[13:36:27.649]             length <- base::length
[13:36:27.649]             list <- base::list
[13:36:27.649]             seq.int <- base::seq.int
[13:36:27.649]             signalCondition <- base::signalCondition
[13:36:27.649]             sys.calls <- base::sys.calls
[13:36:27.649]             `[[` <- base::`[[`
[13:36:27.649]             `+` <- base::`+`
[13:36:27.649]             `<<-` <- base::`<<-`
[13:36:27.649]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:27.649]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:27.649]                   3L)]
[13:36:27.649]             }
[13:36:27.649]             function(cond) {
[13:36:27.649]                 is_error <- inherits(cond, "error")
[13:36:27.649]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:27.649]                   NULL)
[13:36:27.649]                 if (is_error) {
[13:36:27.649]                   sessionInformation <- function() {
[13:36:27.649]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:27.649]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:27.649]                       search = base::search(), system = base::Sys.info())
[13:36:27.649]                   }
[13:36:27.649]                   ...future.conditions[[length(...future.conditions) + 
[13:36:27.649]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:27.649]                     cond$call), session = sessionInformation(), 
[13:36:27.649]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:27.649]                   signalCondition(cond)
[13:36:27.649]                 }
[13:36:27.649]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:27.649]                 "immediateCondition"))) {
[13:36:27.649]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:27.649]                   ...future.conditions[[length(...future.conditions) + 
[13:36:27.649]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:27.649]                   if (TRUE && !signal) {
[13:36:27.649]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:27.649]                     {
[13:36:27.649]                       inherits <- base::inherits
[13:36:27.649]                       invokeRestart <- base::invokeRestart
[13:36:27.649]                       is.null <- base::is.null
[13:36:27.649]                       muffled <- FALSE
[13:36:27.649]                       if (inherits(cond, "message")) {
[13:36:27.649]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:27.649]                         if (muffled) 
[13:36:27.649]                           invokeRestart("muffleMessage")
[13:36:27.649]                       }
[13:36:27.649]                       else if (inherits(cond, "warning")) {
[13:36:27.649]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:27.649]                         if (muffled) 
[13:36:27.649]                           invokeRestart("muffleWarning")
[13:36:27.649]                       }
[13:36:27.649]                       else if (inherits(cond, "condition")) {
[13:36:27.649]                         if (!is.null(pattern)) {
[13:36:27.649]                           computeRestarts <- base::computeRestarts
[13:36:27.649]                           grepl <- base::grepl
[13:36:27.649]                           restarts <- computeRestarts(cond)
[13:36:27.649]                           for (restart in restarts) {
[13:36:27.649]                             name <- restart$name
[13:36:27.649]                             if (is.null(name)) 
[13:36:27.649]                               next
[13:36:27.649]                             if (!grepl(pattern, name)) 
[13:36:27.649]                               next
[13:36:27.649]                             invokeRestart(restart)
[13:36:27.649]                             muffled <- TRUE
[13:36:27.649]                             break
[13:36:27.649]                           }
[13:36:27.649]                         }
[13:36:27.649]                       }
[13:36:27.649]                       invisible(muffled)
[13:36:27.649]                     }
[13:36:27.649]                     muffleCondition(cond, pattern = "^muffle")
[13:36:27.649]                   }
[13:36:27.649]                 }
[13:36:27.649]                 else {
[13:36:27.649]                   if (TRUE) {
[13:36:27.649]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:27.649]                     {
[13:36:27.649]                       inherits <- base::inherits
[13:36:27.649]                       invokeRestart <- base::invokeRestart
[13:36:27.649]                       is.null <- base::is.null
[13:36:27.649]                       muffled <- FALSE
[13:36:27.649]                       if (inherits(cond, "message")) {
[13:36:27.649]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:27.649]                         if (muffled) 
[13:36:27.649]                           invokeRestart("muffleMessage")
[13:36:27.649]                       }
[13:36:27.649]                       else if (inherits(cond, "warning")) {
[13:36:27.649]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:27.649]                         if (muffled) 
[13:36:27.649]                           invokeRestart("muffleWarning")
[13:36:27.649]                       }
[13:36:27.649]                       else if (inherits(cond, "condition")) {
[13:36:27.649]                         if (!is.null(pattern)) {
[13:36:27.649]                           computeRestarts <- base::computeRestarts
[13:36:27.649]                           grepl <- base::grepl
[13:36:27.649]                           restarts <- computeRestarts(cond)
[13:36:27.649]                           for (restart in restarts) {
[13:36:27.649]                             name <- restart$name
[13:36:27.649]                             if (is.null(name)) 
[13:36:27.649]                               next
[13:36:27.649]                             if (!grepl(pattern, name)) 
[13:36:27.649]                               next
[13:36:27.649]                             invokeRestart(restart)
[13:36:27.649]                             muffled <- TRUE
[13:36:27.649]                             break
[13:36:27.649]                           }
[13:36:27.649]                         }
[13:36:27.649]                       }
[13:36:27.649]                       invisible(muffled)
[13:36:27.649]                     }
[13:36:27.649]                     muffleCondition(cond, pattern = "^muffle")
[13:36:27.649]                   }
[13:36:27.649]                 }
[13:36:27.649]             }
[13:36:27.649]         }))
[13:36:27.649]     }, error = function(ex) {
[13:36:27.649]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:27.649]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:27.649]                 ...future.rng), started = ...future.startTime, 
[13:36:27.649]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:27.649]             version = "1.8"), class = "FutureResult")
[13:36:27.649]     }, finally = {
[13:36:27.649]         if (!identical(...future.workdir, getwd())) 
[13:36:27.649]             setwd(...future.workdir)
[13:36:27.649]         {
[13:36:27.649]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:27.649]                 ...future.oldOptions$nwarnings <- NULL
[13:36:27.649]             }
[13:36:27.649]             base::options(...future.oldOptions)
[13:36:27.649]             if (.Platform$OS.type == "windows") {
[13:36:27.649]                 old_names <- names(...future.oldEnvVars)
[13:36:27.649]                 envs <- base::Sys.getenv()
[13:36:27.649]                 names <- names(envs)
[13:36:27.649]                 common <- intersect(names, old_names)
[13:36:27.649]                 added <- setdiff(names, old_names)
[13:36:27.649]                 removed <- setdiff(old_names, names)
[13:36:27.649]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:27.649]                   envs[common]]
[13:36:27.649]                 NAMES <- toupper(changed)
[13:36:27.649]                 args <- list()
[13:36:27.649]                 for (kk in seq_along(NAMES)) {
[13:36:27.649]                   name <- changed[[kk]]
[13:36:27.649]                   NAME <- NAMES[[kk]]
[13:36:27.649]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:27.649]                     next
[13:36:27.649]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:27.649]                 }
[13:36:27.649]                 NAMES <- toupper(added)
[13:36:27.649]                 for (kk in seq_along(NAMES)) {
[13:36:27.649]                   name <- added[[kk]]
[13:36:27.649]                   NAME <- NAMES[[kk]]
[13:36:27.649]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:27.649]                     next
[13:36:27.649]                   args[[name]] <- ""
[13:36:27.649]                 }
[13:36:27.649]                 NAMES <- toupper(removed)
[13:36:27.649]                 for (kk in seq_along(NAMES)) {
[13:36:27.649]                   name <- removed[[kk]]
[13:36:27.649]                   NAME <- NAMES[[kk]]
[13:36:27.649]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:27.649]                     next
[13:36:27.649]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:27.649]                 }
[13:36:27.649]                 if (length(args) > 0) 
[13:36:27.649]                   base::do.call(base::Sys.setenv, args = args)
[13:36:27.649]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:27.649]             }
[13:36:27.649]             else {
[13:36:27.649]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:27.649]             }
[13:36:27.649]             {
[13:36:27.649]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:27.649]                   0L) {
[13:36:27.649]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:27.649]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:27.649]                   base::options(opts)
[13:36:27.649]                 }
[13:36:27.649]                 {
[13:36:27.649]                   {
[13:36:27.649]                     NULL
[13:36:27.649]                     RNGkind("Mersenne-Twister")
[13:36:27.649]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:27.649]                       inherits = FALSE)
[13:36:27.649]                   }
[13:36:27.649]                   options(future.plan = NULL)
[13:36:27.649]                   if (is.na(NA_character_)) 
[13:36:27.649]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:27.649]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:27.649]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:27.649]                     .init = FALSE)
[13:36:27.649]                 }
[13:36:27.649]             }
[13:36:27.649]         }
[13:36:27.649]     })
[13:36:27.649]     if (TRUE) {
[13:36:27.649]         base::sink(type = "output", split = FALSE)
[13:36:27.649]         if (TRUE) {
[13:36:27.649]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:27.649]         }
[13:36:27.649]         else {
[13:36:27.649]             ...future.result["stdout"] <- base::list(NULL)
[13:36:27.649]         }
[13:36:27.649]         base::close(...future.stdout)
[13:36:27.649]         ...future.stdout <- NULL
[13:36:27.649]     }
[13:36:27.649]     ...future.result$conditions <- ...future.conditions
[13:36:27.649]     ...future.result$finished <- base::Sys.time()
[13:36:27.649]     ...future.result
[13:36:27.649] }
[13:36:27.650] assign_globals() ...
[13:36:27.651] List of 1
[13:36:27.651]  $ a: num 1
[13:36:27.651]  - attr(*, "where")=List of 1
[13:36:27.651]   ..$ a:<environment: R_EmptyEnv> 
[13:36:27.651]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:27.651]  - attr(*, "resolved")= logi FALSE
[13:36:27.651]  - attr(*, "total_size")= num 56
[13:36:27.651]  - attr(*, "already-done")= logi TRUE
[13:36:27.653] - copied ‘a’ to environment
[13:36:27.653] assign_globals() ... done
[13:36:27.653] plan(): Setting new future strategy stack:
[13:36:27.653] List of future strategies:
[13:36:27.653] 1. sequential:
[13:36:27.653]    - args: function (..., envir = parent.frame())
[13:36:27.653]    - tweaked: FALSE
[13:36:27.653]    - call: NULL
[13:36:27.654] plan(): nbrOfWorkers() = 1
[13:36:27.654] plan(): Setting new future strategy stack:
[13:36:27.654] List of future strategies:
[13:36:27.654] 1. sequential:
[13:36:27.654]    - args: function (..., envir = parent.frame())
[13:36:27.654]    - tweaked: FALSE
[13:36:27.654]    - call: plan(strategy)
[13:36:27.655] plan(): nbrOfWorkers() = 1
[13:36:27.655] SequentialFuture started (and completed)
[13:36:27.655] - Launch lazy future ... done
[13:36:27.655] run() for ‘SequentialFuture’ ... done
[13:36:27.655] getGlobalsAndPackages() ...
[13:36:27.655] Searching for globals...
[13:36:27.656] - globals found: [3] ‘{’, ‘*’, ‘a’
[13:36:27.656] Searching for globals ... DONE
[13:36:27.656] Resolving globals: FALSE
[13:36:27.656] The total size of the 1 globals is 56 bytes (56 bytes)
[13:36:27.657] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[13:36:27.657] - globals: [1] ‘a’
[13:36:27.657] 
[13:36:27.657] getGlobalsAndPackages() ... DONE
[13:36:27.657] run() for ‘Future’ ...
[13:36:27.657] - state: ‘created’
[13:36:27.658] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:27.658] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:27.658] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:27.658]   - Field: ‘label’
[13:36:27.658]   - Field: ‘local’
[13:36:27.658]   - Field: ‘owner’
[13:36:27.658]   - Field: ‘envir’
[13:36:27.658]   - Field: ‘packages’
[13:36:27.658]   - Field: ‘gc’
[13:36:27.659]   - Field: ‘conditions’
[13:36:27.659]   - Field: ‘expr’
[13:36:27.659]   - Field: ‘uuid’
[13:36:27.659]   - Field: ‘seed’
[13:36:27.659]   - Field: ‘version’
[13:36:27.659]   - Field: ‘result’
[13:36:27.659]   - Field: ‘asynchronous’
[13:36:27.659]   - Field: ‘calls’
[13:36:27.659]   - Field: ‘globals’
[13:36:27.659]   - Field: ‘stdout’
[13:36:27.659]   - Field: ‘earlySignal’
[13:36:27.659]   - Field: ‘lazy’
[13:36:27.660]   - Field: ‘state’
[13:36:27.660] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:27.660] - Launch lazy future ...
[13:36:27.660] Packages needed by the future expression (n = 0): <none>
[13:36:27.660] Packages needed by future strategies (n = 0): <none>
[13:36:27.660] {
[13:36:27.660]     {
[13:36:27.660]         {
[13:36:27.660]             ...future.startTime <- base::Sys.time()
[13:36:27.660]             {
[13:36:27.660]                 {
[13:36:27.660]                   {
[13:36:27.660]                     base::local({
[13:36:27.660]                       has_future <- base::requireNamespace("future", 
[13:36:27.660]                         quietly = TRUE)
[13:36:27.660]                       if (has_future) {
[13:36:27.660]                         ns <- base::getNamespace("future")
[13:36:27.660]                         version <- ns[[".package"]][["version"]]
[13:36:27.660]                         if (is.null(version)) 
[13:36:27.660]                           version <- utils::packageVersion("future")
[13:36:27.660]                       }
[13:36:27.660]                       else {
[13:36:27.660]                         version <- NULL
[13:36:27.660]                       }
[13:36:27.660]                       if (!has_future || version < "1.8.0") {
[13:36:27.660]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:27.660]                           "", base::R.version$version.string), 
[13:36:27.660]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:27.660]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:27.660]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:27.660]                             "release", "version")], collapse = " "), 
[13:36:27.660]                           hostname = base::Sys.info()[["nodename"]])
[13:36:27.660]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:27.660]                           info)
[13:36:27.660]                         info <- base::paste(info, collapse = "; ")
[13:36:27.660]                         if (!has_future) {
[13:36:27.660]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:27.660]                             info)
[13:36:27.660]                         }
[13:36:27.660]                         else {
[13:36:27.660]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:27.660]                             info, version)
[13:36:27.660]                         }
[13:36:27.660]                         base::stop(msg)
[13:36:27.660]                       }
[13:36:27.660]                     })
[13:36:27.660]                   }
[13:36:27.660]                   ...future.strategy.old <- future::plan("list")
[13:36:27.660]                   options(future.plan = NULL)
[13:36:27.660]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:27.660]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:27.660]                 }
[13:36:27.660]                 ...future.workdir <- getwd()
[13:36:27.660]             }
[13:36:27.660]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:27.660]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:27.660]         }
[13:36:27.660]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:27.660]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:27.660]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:27.660]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:27.660]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:27.660]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:27.660]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:27.660]             base::names(...future.oldOptions))
[13:36:27.660]     }
[13:36:27.660]     if (FALSE) {
[13:36:27.660]     }
[13:36:27.660]     else {
[13:36:27.660]         if (TRUE) {
[13:36:27.660]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:27.660]                 open = "w")
[13:36:27.660]         }
[13:36:27.660]         else {
[13:36:27.660]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:27.660]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:27.660]         }
[13:36:27.660]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:27.660]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:27.660]             base::sink(type = "output", split = FALSE)
[13:36:27.660]             base::close(...future.stdout)
[13:36:27.660]         }, add = TRUE)
[13:36:27.660]     }
[13:36:27.660]     ...future.frame <- base::sys.nframe()
[13:36:27.660]     ...future.conditions <- base::list()
[13:36:27.660]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:27.660]     if (FALSE) {
[13:36:27.660]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:27.660]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:27.660]     }
[13:36:27.660]     ...future.result <- base::tryCatch({
[13:36:27.660]         base::withCallingHandlers({
[13:36:27.660]             ...future.value <- base::withVisible(base::local({
[13:36:27.660]                 2 * a
[13:36:27.660]             }))
[13:36:27.660]             future::FutureResult(value = ...future.value$value, 
[13:36:27.660]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:27.660]                   ...future.rng), globalenv = if (FALSE) 
[13:36:27.660]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:27.660]                     ...future.globalenv.names))
[13:36:27.660]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:27.660]         }, condition = base::local({
[13:36:27.660]             c <- base::c
[13:36:27.660]             inherits <- base::inherits
[13:36:27.660]             invokeRestart <- base::invokeRestart
[13:36:27.660]             length <- base::length
[13:36:27.660]             list <- base::list
[13:36:27.660]             seq.int <- base::seq.int
[13:36:27.660]             signalCondition <- base::signalCondition
[13:36:27.660]             sys.calls <- base::sys.calls
[13:36:27.660]             `[[` <- base::`[[`
[13:36:27.660]             `+` <- base::`+`
[13:36:27.660]             `<<-` <- base::`<<-`
[13:36:27.660]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:27.660]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:27.660]                   3L)]
[13:36:27.660]             }
[13:36:27.660]             function(cond) {
[13:36:27.660]                 is_error <- inherits(cond, "error")
[13:36:27.660]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:27.660]                   NULL)
[13:36:27.660]                 if (is_error) {
[13:36:27.660]                   sessionInformation <- function() {
[13:36:27.660]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:27.660]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:27.660]                       search = base::search(), system = base::Sys.info())
[13:36:27.660]                   }
[13:36:27.660]                   ...future.conditions[[length(...future.conditions) + 
[13:36:27.660]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:27.660]                     cond$call), session = sessionInformation(), 
[13:36:27.660]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:27.660]                   signalCondition(cond)
[13:36:27.660]                 }
[13:36:27.660]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:27.660]                 "immediateCondition"))) {
[13:36:27.660]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:27.660]                   ...future.conditions[[length(...future.conditions) + 
[13:36:27.660]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:27.660]                   if (TRUE && !signal) {
[13:36:27.660]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:27.660]                     {
[13:36:27.660]                       inherits <- base::inherits
[13:36:27.660]                       invokeRestart <- base::invokeRestart
[13:36:27.660]                       is.null <- base::is.null
[13:36:27.660]                       muffled <- FALSE
[13:36:27.660]                       if (inherits(cond, "message")) {
[13:36:27.660]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:27.660]                         if (muffled) 
[13:36:27.660]                           invokeRestart("muffleMessage")
[13:36:27.660]                       }
[13:36:27.660]                       else if (inherits(cond, "warning")) {
[13:36:27.660]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:27.660]                         if (muffled) 
[13:36:27.660]                           invokeRestart("muffleWarning")
[13:36:27.660]                       }
[13:36:27.660]                       else if (inherits(cond, "condition")) {
[13:36:27.660]                         if (!is.null(pattern)) {
[13:36:27.660]                           computeRestarts <- base::computeRestarts
[13:36:27.660]                           grepl <- base::grepl
[13:36:27.660]                           restarts <- computeRestarts(cond)
[13:36:27.660]                           for (restart in restarts) {
[13:36:27.660]                             name <- restart$name
[13:36:27.660]                             if (is.null(name)) 
[13:36:27.660]                               next
[13:36:27.660]                             if (!grepl(pattern, name)) 
[13:36:27.660]                               next
[13:36:27.660]                             invokeRestart(restart)
[13:36:27.660]                             muffled <- TRUE
[13:36:27.660]                             break
[13:36:27.660]                           }
[13:36:27.660]                         }
[13:36:27.660]                       }
[13:36:27.660]                       invisible(muffled)
[13:36:27.660]                     }
[13:36:27.660]                     muffleCondition(cond, pattern = "^muffle")
[13:36:27.660]                   }
[13:36:27.660]                 }
[13:36:27.660]                 else {
[13:36:27.660]                   if (TRUE) {
[13:36:27.660]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:27.660]                     {
[13:36:27.660]                       inherits <- base::inherits
[13:36:27.660]                       invokeRestart <- base::invokeRestart
[13:36:27.660]                       is.null <- base::is.null
[13:36:27.660]                       muffled <- FALSE
[13:36:27.660]                       if (inherits(cond, "message")) {
[13:36:27.660]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:27.660]                         if (muffled) 
[13:36:27.660]                           invokeRestart("muffleMessage")
[13:36:27.660]                       }
[13:36:27.660]                       else if (inherits(cond, "warning")) {
[13:36:27.660]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:27.660]                         if (muffled) 
[13:36:27.660]                           invokeRestart("muffleWarning")
[13:36:27.660]                       }
[13:36:27.660]                       else if (inherits(cond, "condition")) {
[13:36:27.660]                         if (!is.null(pattern)) {
[13:36:27.660]                           computeRestarts <- base::computeRestarts
[13:36:27.660]                           grepl <- base::grepl
[13:36:27.660]                           restarts <- computeRestarts(cond)
[13:36:27.660]                           for (restart in restarts) {
[13:36:27.660]                             name <- restart$name
[13:36:27.660]                             if (is.null(name)) 
[13:36:27.660]                               next
[13:36:27.660]                             if (!grepl(pattern, name)) 
[13:36:27.660]                               next
[13:36:27.660]                             invokeRestart(restart)
[13:36:27.660]                             muffled <- TRUE
[13:36:27.660]                             break
[13:36:27.660]                           }
[13:36:27.660]                         }
[13:36:27.660]                       }
[13:36:27.660]                       invisible(muffled)
[13:36:27.660]                     }
[13:36:27.660]                     muffleCondition(cond, pattern = "^muffle")
[13:36:27.660]                   }
[13:36:27.660]                 }
[13:36:27.660]             }
[13:36:27.660]         }))
[13:36:27.660]     }, error = function(ex) {
[13:36:27.660]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:27.660]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:27.660]                 ...future.rng), started = ...future.startTime, 
[13:36:27.660]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:27.660]             version = "1.8"), class = "FutureResult")
[13:36:27.660]     }, finally = {
[13:36:27.660]         if (!identical(...future.workdir, getwd())) 
[13:36:27.660]             setwd(...future.workdir)
[13:36:27.660]         {
[13:36:27.660]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:27.660]                 ...future.oldOptions$nwarnings <- NULL
[13:36:27.660]             }
[13:36:27.660]             base::options(...future.oldOptions)
[13:36:27.660]             if (.Platform$OS.type == "windows") {
[13:36:27.660]                 old_names <- names(...future.oldEnvVars)
[13:36:27.660]                 envs <- base::Sys.getenv()
[13:36:27.660]                 names <- names(envs)
[13:36:27.660]                 common <- intersect(names, old_names)
[13:36:27.660]                 added <- setdiff(names, old_names)
[13:36:27.660]                 removed <- setdiff(old_names, names)
[13:36:27.660]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:27.660]                   envs[common]]
[13:36:27.660]                 NAMES <- toupper(changed)
[13:36:27.660]                 args <- list()
[13:36:27.660]                 for (kk in seq_along(NAMES)) {
[13:36:27.660]                   name <- changed[[kk]]
[13:36:27.660]                   NAME <- NAMES[[kk]]
[13:36:27.660]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:27.660]                     next
[13:36:27.660]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:27.660]                 }
[13:36:27.660]                 NAMES <- toupper(added)
[13:36:27.660]                 for (kk in seq_along(NAMES)) {
[13:36:27.660]                   name <- added[[kk]]
[13:36:27.660]                   NAME <- NAMES[[kk]]
[13:36:27.660]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:27.660]                     next
[13:36:27.660]                   args[[name]] <- ""
[13:36:27.660]                 }
[13:36:27.660]                 NAMES <- toupper(removed)
[13:36:27.660]                 for (kk in seq_along(NAMES)) {
[13:36:27.660]                   name <- removed[[kk]]
[13:36:27.660]                   NAME <- NAMES[[kk]]
[13:36:27.660]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:27.660]                     next
[13:36:27.660]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:27.660]                 }
[13:36:27.660]                 if (length(args) > 0) 
[13:36:27.660]                   base::do.call(base::Sys.setenv, args = args)
[13:36:27.660]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:27.660]             }
[13:36:27.660]             else {
[13:36:27.660]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:27.660]             }
[13:36:27.660]             {
[13:36:27.660]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:27.660]                   0L) {
[13:36:27.660]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:27.660]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:27.660]                   base::options(opts)
[13:36:27.660]                 }
[13:36:27.660]                 {
[13:36:27.660]                   {
[13:36:27.660]                     NULL
[13:36:27.660]                     RNGkind("Mersenne-Twister")
[13:36:27.660]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:27.660]                       inherits = FALSE)
[13:36:27.660]                   }
[13:36:27.660]                   options(future.plan = NULL)
[13:36:27.660]                   if (is.na(NA_character_)) 
[13:36:27.660]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:27.660]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:27.660]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:27.660]                     .init = FALSE)
[13:36:27.660]                 }
[13:36:27.660]             }
[13:36:27.660]         }
[13:36:27.660]     })
[13:36:27.660]     if (TRUE) {
[13:36:27.660]         base::sink(type = "output", split = FALSE)
[13:36:27.660]         if (TRUE) {
[13:36:27.660]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:27.660]         }
[13:36:27.660]         else {
[13:36:27.660]             ...future.result["stdout"] <- base::list(NULL)
[13:36:27.660]         }
[13:36:27.660]         base::close(...future.stdout)
[13:36:27.660]         ...future.stdout <- NULL
[13:36:27.660]     }
[13:36:27.660]     ...future.result$conditions <- ...future.conditions
[13:36:27.660]     ...future.result$finished <- base::Sys.time()
[13:36:27.660]     ...future.result
[13:36:27.660] }
[13:36:27.662] assign_globals() ...
[13:36:27.662] List of 1
[13:36:27.662]  $ a: num 1
[13:36:27.662]  - attr(*, "where")=List of 1
[13:36:27.662]   ..$ a:<environment: R_EmptyEnv> 
[13:36:27.662]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:27.662]  - attr(*, "resolved")= logi FALSE
[13:36:27.662]  - attr(*, "total_size")= num 56
[13:36:27.662]  - attr(*, "already-done")= logi TRUE
[13:36:27.664] - copied ‘a’ to environment
[13:36:27.664] assign_globals() ... done
[13:36:27.665] plan(): Setting new future strategy stack:
[13:36:27.665] List of future strategies:
[13:36:27.665] 1. sequential:
[13:36:27.665]    - args: function (..., envir = parent.frame())
[13:36:27.665]    - tweaked: FALSE
[13:36:27.665]    - call: NULL
[13:36:27.665] plan(): nbrOfWorkers() = 1
[13:36:27.666] plan(): Setting new future strategy stack:
[13:36:27.666] List of future strategies:
[13:36:27.666] 1. sequential:
[13:36:27.666]    - args: function (..., envir = parent.frame())
[13:36:27.666]    - tweaked: FALSE
[13:36:27.666]    - call: plan(strategy)
[13:36:27.666] plan(): nbrOfWorkers() = 1
[13:36:27.666] SequentialFuture started (and completed)
[13:36:27.666] - Launch lazy future ... done
[13:36:27.666] run() for ‘SequentialFuture’ ... done
*** futureAssign() with ‘sequential’ futures ... DONE
Testing with 1 cores ... DONE
Testing with 2 cores ...
*** futureAssign() with ‘multicore’ futures ...
[13:36:27.672] plan(): Setting new future strategy stack:
[13:36:27.672] List of future strategies:
[13:36:27.672] 1. multicore:
[13:36:27.672]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:36:27.672]    - tweaked: FALSE
[13:36:27.672]    - call: plan(strategy)
[13:36:27.676] plan(): nbrOfWorkers() = 2
[13:36:27.676] getGlobalsAndPackages() ...
[13:36:27.676] Searching for globals...
[13:36:27.677] - globals found: [1] ‘{’
[13:36:27.677] Searching for globals ... DONE
[13:36:27.677] Resolving globals: FALSE
[13:36:27.677] 
[13:36:27.678] 
[13:36:27.678] getGlobalsAndPackages() ... DONE
[13:36:27.678] run() for ‘Future’ ...
[13:36:27.678] - state: ‘created’
[13:36:27.678] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:36:27.681] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:27.682] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:36:27.682]   - Field: ‘label’
[13:36:27.682]   - Field: ‘local’
[13:36:27.682]   - Field: ‘owner’
[13:36:27.682]   - Field: ‘envir’
[13:36:27.682]   - Field: ‘workers’
[13:36:27.682]   - Field: ‘packages’
[13:36:27.682]   - Field: ‘gc’
[13:36:27.682]   - Field: ‘job’
[13:36:27.682]   - Field: ‘conditions’
[13:36:27.683]   - Field: ‘expr’
[13:36:27.683]   - Field: ‘uuid’
[13:36:27.683]   - Field: ‘seed’
[13:36:27.683]   - Field: ‘version’
[13:36:27.683]   - Field: ‘result’
[13:36:27.683]   - Field: ‘asynchronous’
[13:36:27.683]   - Field: ‘calls’
[13:36:27.683]   - Field: ‘globals’
[13:36:27.683]   - Field: ‘stdout’
[13:36:27.683]   - Field: ‘earlySignal’
[13:36:27.683]   - Field: ‘lazy’
[13:36:27.683]   - Field: ‘state’
[13:36:27.684] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:36:27.684] - Launch lazy future ...
[13:36:27.685] Packages needed by the future expression (n = 0): <none>
[13:36:27.685] Packages needed by future strategies (n = 0): <none>
[13:36:27.685] {
[13:36:27.685]     {
[13:36:27.685]         {
[13:36:27.685]             ...future.startTime <- base::Sys.time()
[13:36:27.685]             {
[13:36:27.685]                 {
[13:36:27.685]                   {
[13:36:27.685]                     {
[13:36:27.685]                       base::local({
[13:36:27.685]                         has_future <- base::requireNamespace("future", 
[13:36:27.685]                           quietly = TRUE)
[13:36:27.685]                         if (has_future) {
[13:36:27.685]                           ns <- base::getNamespace("future")
[13:36:27.685]                           version <- ns[[".package"]][["version"]]
[13:36:27.685]                           if (is.null(version)) 
[13:36:27.685]                             version <- utils::packageVersion("future")
[13:36:27.685]                         }
[13:36:27.685]                         else {
[13:36:27.685]                           version <- NULL
[13:36:27.685]                         }
[13:36:27.685]                         if (!has_future || version < "1.8.0") {
[13:36:27.685]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:27.685]                             "", base::R.version$version.string), 
[13:36:27.685]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:27.685]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:27.685]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:27.685]                               "release", "version")], collapse = " "), 
[13:36:27.685]                             hostname = base::Sys.info()[["nodename"]])
[13:36:27.685]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:27.685]                             info)
[13:36:27.685]                           info <- base::paste(info, collapse = "; ")
[13:36:27.685]                           if (!has_future) {
[13:36:27.685]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:27.685]                               info)
[13:36:27.685]                           }
[13:36:27.685]                           else {
[13:36:27.685]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:27.685]                               info, version)
[13:36:27.685]                           }
[13:36:27.685]                           base::stop(msg)
[13:36:27.685]                         }
[13:36:27.685]                       })
[13:36:27.685]                     }
[13:36:27.685]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:27.685]                     base::options(mc.cores = 1L)
[13:36:27.685]                   }
[13:36:27.685]                   ...future.strategy.old <- future::plan("list")
[13:36:27.685]                   options(future.plan = NULL)
[13:36:27.685]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:27.685]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:27.685]                 }
[13:36:27.685]                 ...future.workdir <- getwd()
[13:36:27.685]             }
[13:36:27.685]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:27.685]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:27.685]         }
[13:36:27.685]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:27.685]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:27.685]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:27.685]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:27.685]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:27.685]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:27.685]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:27.685]             base::names(...future.oldOptions))
[13:36:27.685]     }
[13:36:27.685]     if (FALSE) {
[13:36:27.685]     }
[13:36:27.685]     else {
[13:36:27.685]         if (TRUE) {
[13:36:27.685]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:27.685]                 open = "w")
[13:36:27.685]         }
[13:36:27.685]         else {
[13:36:27.685]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:27.685]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:27.685]         }
[13:36:27.685]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:27.685]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:27.685]             base::sink(type = "output", split = FALSE)
[13:36:27.685]             base::close(...future.stdout)
[13:36:27.685]         }, add = TRUE)
[13:36:27.685]     }
[13:36:27.685]     ...future.frame <- base::sys.nframe()
[13:36:27.685]     ...future.conditions <- base::list()
[13:36:27.685]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:27.685]     if (FALSE) {
[13:36:27.685]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:27.685]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:27.685]     }
[13:36:27.685]     ...future.result <- base::tryCatch({
[13:36:27.685]         base::withCallingHandlers({
[13:36:27.685]             ...future.value <- base::withVisible(base::local({
[13:36:27.685]                 withCallingHandlers({
[13:36:27.685]                   {
[13:36:27.685]                     2
[13:36:27.685]                   }
[13:36:27.685]                 }, immediateCondition = function(cond) {
[13:36:27.685]                   save_rds <- function (object, pathname, ...) 
[13:36:27.685]                   {
[13:36:27.685]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:36:27.685]                     if (file_test("-f", pathname_tmp)) {
[13:36:27.685]                       fi_tmp <- file.info(pathname_tmp)
[13:36:27.685]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:36:27.685]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:27.685]                         fi_tmp[["mtime"]])
[13:36:27.685]                     }
[13:36:27.685]                     tryCatch({
[13:36:27.685]                       saveRDS(object, file = pathname_tmp, ...)
[13:36:27.685]                     }, error = function(ex) {
[13:36:27.685]                       msg <- conditionMessage(ex)
[13:36:27.685]                       fi_tmp <- file.info(pathname_tmp)
[13:36:27.685]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:36:27.685]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:27.685]                         fi_tmp[["mtime"]], msg)
[13:36:27.685]                       ex$message <- msg
[13:36:27.685]                       stop(ex)
[13:36:27.685]                     })
[13:36:27.685]                     stopifnot(file_test("-f", pathname_tmp))
[13:36:27.685]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:36:27.685]                     if (!res || file_test("-f", pathname_tmp)) {
[13:36:27.685]                       fi_tmp <- file.info(pathname_tmp)
[13:36:27.685]                       fi <- file.info(pathname)
[13:36:27.685]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:36:27.685]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:27.685]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:36:27.685]                         fi[["size"]], fi[["mtime"]])
[13:36:27.685]                       stop(msg)
[13:36:27.685]                     }
[13:36:27.685]                     invisible(pathname)
[13:36:27.685]                   }
[13:36:27.685]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:36:27.685]                     rootPath = tempdir()) 
[13:36:27.685]                   {
[13:36:27.685]                     obj <- list(time = Sys.time(), condition = cond)
[13:36:27.685]                     file <- tempfile(pattern = class(cond)[1], 
[13:36:27.685]                       tmpdir = path, fileext = ".rds")
[13:36:27.685]                     save_rds(obj, file)
[13:36:27.685]                   }
[13:36:27.685]                   saveImmediateCondition(cond, path = "/tmp/Rtmp4CDhtK/.future/immediateConditions")
[13:36:27.685]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:27.685]                   {
[13:36:27.685]                     inherits <- base::inherits
[13:36:27.685]                     invokeRestart <- base::invokeRestart
[13:36:27.685]                     is.null <- base::is.null
[13:36:27.685]                     muffled <- FALSE
[13:36:27.685]                     if (inherits(cond, "message")) {
[13:36:27.685]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:27.685]                       if (muffled) 
[13:36:27.685]                         invokeRestart("muffleMessage")
[13:36:27.685]                     }
[13:36:27.685]                     else if (inherits(cond, "warning")) {
[13:36:27.685]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:27.685]                       if (muffled) 
[13:36:27.685]                         invokeRestart("muffleWarning")
[13:36:27.685]                     }
[13:36:27.685]                     else if (inherits(cond, "condition")) {
[13:36:27.685]                       if (!is.null(pattern)) {
[13:36:27.685]                         computeRestarts <- base::computeRestarts
[13:36:27.685]                         grepl <- base::grepl
[13:36:27.685]                         restarts <- computeRestarts(cond)
[13:36:27.685]                         for (restart in restarts) {
[13:36:27.685]                           name <- restart$name
[13:36:27.685]                           if (is.null(name)) 
[13:36:27.685]                             next
[13:36:27.685]                           if (!grepl(pattern, name)) 
[13:36:27.685]                             next
[13:36:27.685]                           invokeRestart(restart)
[13:36:27.685]                           muffled <- TRUE
[13:36:27.685]                           break
[13:36:27.685]                         }
[13:36:27.685]                       }
[13:36:27.685]                     }
[13:36:27.685]                     invisible(muffled)
[13:36:27.685]                   }
[13:36:27.685]                   muffleCondition(cond)
[13:36:27.685]                 })
[13:36:27.685]             }))
[13:36:27.685]             future::FutureResult(value = ...future.value$value, 
[13:36:27.685]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:27.685]                   ...future.rng), globalenv = if (FALSE) 
[13:36:27.685]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:27.685]                     ...future.globalenv.names))
[13:36:27.685]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:27.685]         }, condition = base::local({
[13:36:27.685]             c <- base::c
[13:36:27.685]             inherits <- base::inherits
[13:36:27.685]             invokeRestart <- base::invokeRestart
[13:36:27.685]             length <- base::length
[13:36:27.685]             list <- base::list
[13:36:27.685]             seq.int <- base::seq.int
[13:36:27.685]             signalCondition <- base::signalCondition
[13:36:27.685]             sys.calls <- base::sys.calls
[13:36:27.685]             `[[` <- base::`[[`
[13:36:27.685]             `+` <- base::`+`
[13:36:27.685]             `<<-` <- base::`<<-`
[13:36:27.685]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:27.685]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:27.685]                   3L)]
[13:36:27.685]             }
[13:36:27.685]             function(cond) {
[13:36:27.685]                 is_error <- inherits(cond, "error")
[13:36:27.685]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:27.685]                   NULL)
[13:36:27.685]                 if (is_error) {
[13:36:27.685]                   sessionInformation <- function() {
[13:36:27.685]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:27.685]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:27.685]                       search = base::search(), system = base::Sys.info())
[13:36:27.685]                   }
[13:36:27.685]                   ...future.conditions[[length(...future.conditions) + 
[13:36:27.685]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:27.685]                     cond$call), session = sessionInformation(), 
[13:36:27.685]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:27.685]                   signalCondition(cond)
[13:36:27.685]                 }
[13:36:27.685]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:27.685]                 "immediateCondition"))) {
[13:36:27.685]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:27.685]                   ...future.conditions[[length(...future.conditions) + 
[13:36:27.685]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:27.685]                   if (TRUE && !signal) {
[13:36:27.685]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:27.685]                     {
[13:36:27.685]                       inherits <- base::inherits
[13:36:27.685]                       invokeRestart <- base::invokeRestart
[13:36:27.685]                       is.null <- base::is.null
[13:36:27.685]                       muffled <- FALSE
[13:36:27.685]                       if (inherits(cond, "message")) {
[13:36:27.685]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:27.685]                         if (muffled) 
[13:36:27.685]                           invokeRestart("muffleMessage")
[13:36:27.685]                       }
[13:36:27.685]                       else if (inherits(cond, "warning")) {
[13:36:27.685]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:27.685]                         if (muffled) 
[13:36:27.685]                           invokeRestart("muffleWarning")
[13:36:27.685]                       }
[13:36:27.685]                       else if (inherits(cond, "condition")) {
[13:36:27.685]                         if (!is.null(pattern)) {
[13:36:27.685]                           computeRestarts <- base::computeRestarts
[13:36:27.685]                           grepl <- base::grepl
[13:36:27.685]                           restarts <- computeRestarts(cond)
[13:36:27.685]                           for (restart in restarts) {
[13:36:27.685]                             name <- restart$name
[13:36:27.685]                             if (is.null(name)) 
[13:36:27.685]                               next
[13:36:27.685]                             if (!grepl(pattern, name)) 
[13:36:27.685]                               next
[13:36:27.685]                             invokeRestart(restart)
[13:36:27.685]                             muffled <- TRUE
[13:36:27.685]                             break
[13:36:27.685]                           }
[13:36:27.685]                         }
[13:36:27.685]                       }
[13:36:27.685]                       invisible(muffled)
[13:36:27.685]                     }
[13:36:27.685]                     muffleCondition(cond, pattern = "^muffle")
[13:36:27.685]                   }
[13:36:27.685]                 }
[13:36:27.685]                 else {
[13:36:27.685]                   if (TRUE) {
[13:36:27.685]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:27.685]                     {
[13:36:27.685]                       inherits <- base::inherits
[13:36:27.685]                       invokeRestart <- base::invokeRestart
[13:36:27.685]                       is.null <- base::is.null
[13:36:27.685]                       muffled <- FALSE
[13:36:27.685]                       if (inherits(cond, "message")) {
[13:36:27.685]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:27.685]                         if (muffled) 
[13:36:27.685]                           invokeRestart("muffleMessage")
[13:36:27.685]                       }
[13:36:27.685]                       else if (inherits(cond, "warning")) {
[13:36:27.685]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:27.685]                         if (muffled) 
[13:36:27.685]                           invokeRestart("muffleWarning")
[13:36:27.685]                       }
[13:36:27.685]                       else if (inherits(cond, "condition")) {
[13:36:27.685]                         if (!is.null(pattern)) {
[13:36:27.685]                           computeRestarts <- base::computeRestarts
[13:36:27.685]                           grepl <- base::grepl
[13:36:27.685]                           restarts <- computeRestarts(cond)
[13:36:27.685]                           for (restart in restarts) {
[13:36:27.685]                             name <- restart$name
[13:36:27.685]                             if (is.null(name)) 
[13:36:27.685]                               next
[13:36:27.685]                             if (!grepl(pattern, name)) 
[13:36:27.685]                               next
[13:36:27.685]                             invokeRestart(restart)
[13:36:27.685]                             muffled <- TRUE
[13:36:27.685]                             break
[13:36:27.685]                           }
[13:36:27.685]                         }
[13:36:27.685]                       }
[13:36:27.685]                       invisible(muffled)
[13:36:27.685]                     }
[13:36:27.685]                     muffleCondition(cond, pattern = "^muffle")
[13:36:27.685]                   }
[13:36:27.685]                 }
[13:36:27.685]             }
[13:36:27.685]         }))
[13:36:27.685]     }, error = function(ex) {
[13:36:27.685]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:27.685]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:27.685]                 ...future.rng), started = ...future.startTime, 
[13:36:27.685]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:27.685]             version = "1.8"), class = "FutureResult")
[13:36:27.685]     }, finally = {
[13:36:27.685]         if (!identical(...future.workdir, getwd())) 
[13:36:27.685]             setwd(...future.workdir)
[13:36:27.685]         {
[13:36:27.685]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:27.685]                 ...future.oldOptions$nwarnings <- NULL
[13:36:27.685]             }
[13:36:27.685]             base::options(...future.oldOptions)
[13:36:27.685]             if (.Platform$OS.type == "windows") {
[13:36:27.685]                 old_names <- names(...future.oldEnvVars)
[13:36:27.685]                 envs <- base::Sys.getenv()
[13:36:27.685]                 names <- names(envs)
[13:36:27.685]                 common <- intersect(names, old_names)
[13:36:27.685]                 added <- setdiff(names, old_names)
[13:36:27.685]                 removed <- setdiff(old_names, names)
[13:36:27.685]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:27.685]                   envs[common]]
[13:36:27.685]                 NAMES <- toupper(changed)
[13:36:27.685]                 args <- list()
[13:36:27.685]                 for (kk in seq_along(NAMES)) {
[13:36:27.685]                   name <- changed[[kk]]
[13:36:27.685]                   NAME <- NAMES[[kk]]
[13:36:27.685]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:27.685]                     next
[13:36:27.685]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:27.685]                 }
[13:36:27.685]                 NAMES <- toupper(added)
[13:36:27.685]                 for (kk in seq_along(NAMES)) {
[13:36:27.685]                   name <- added[[kk]]
[13:36:27.685]                   NAME <- NAMES[[kk]]
[13:36:27.685]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:27.685]                     next
[13:36:27.685]                   args[[name]] <- ""
[13:36:27.685]                 }
[13:36:27.685]                 NAMES <- toupper(removed)
[13:36:27.685]                 for (kk in seq_along(NAMES)) {
[13:36:27.685]                   name <- removed[[kk]]
[13:36:27.685]                   NAME <- NAMES[[kk]]
[13:36:27.685]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:27.685]                     next
[13:36:27.685]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:27.685]                 }
[13:36:27.685]                 if (length(args) > 0) 
[13:36:27.685]                   base::do.call(base::Sys.setenv, args = args)
[13:36:27.685]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:27.685]             }
[13:36:27.685]             else {
[13:36:27.685]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:27.685]             }
[13:36:27.685]             {
[13:36:27.685]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:27.685]                   0L) {
[13:36:27.685]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:27.685]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:27.685]                   base::options(opts)
[13:36:27.685]                 }
[13:36:27.685]                 {
[13:36:27.685]                   {
[13:36:27.685]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:27.685]                     NULL
[13:36:27.685]                   }
[13:36:27.685]                   options(future.plan = NULL)
[13:36:27.685]                   if (is.na(NA_character_)) 
[13:36:27.685]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:27.685]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:27.685]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:27.685]                     .init = FALSE)
[13:36:27.685]                 }
[13:36:27.685]             }
[13:36:27.685]         }
[13:36:27.685]     })
[13:36:27.685]     if (TRUE) {
[13:36:27.685]         base::sink(type = "output", split = FALSE)
[13:36:27.685]         if (TRUE) {
[13:36:27.685]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:27.685]         }
[13:36:27.685]         else {
[13:36:27.685]             ...future.result["stdout"] <- base::list(NULL)
[13:36:27.685]         }
[13:36:27.685]         base::close(...future.stdout)
[13:36:27.685]         ...future.stdout <- NULL
[13:36:27.685]     }
[13:36:27.685]     ...future.result$conditions <- ...future.conditions
[13:36:27.685]     ...future.result$finished <- base::Sys.time()
[13:36:27.685]     ...future.result
[13:36:27.685] }
[13:36:27.687] requestCore(): workers = 2
[13:36:27.690] MulticoreFuture started
[13:36:27.691] - Launch lazy future ... done
[13:36:27.691] run() for ‘MulticoreFuture’ ... done
[13:36:27.691] plan(): Setting new future strategy stack:
[13:36:27.691] getGlobalsAndPackages() ...
[13:36:27.692] Searching for globals...
[13:36:27.691] List of future strategies:
[13:36:27.691] 1. sequential:
[13:36:27.691]    - args: function (..., envir = parent.frame())
[13:36:27.691]    - tweaked: FALSE
[13:36:27.691]    - call: NULL
[13:36:27.692] plan(): nbrOfWorkers() = 1
[13:36:27.693] - globals found: [1] ‘{’
[13:36:27.694] Searching for globals ... DONE
[13:36:27.694] plan(): Setting new future strategy stack:
[13:36:27.694] Resolving globals: FALSE
[13:36:27.694] List of future strategies:
[13:36:27.694] 1. multicore:
[13:36:27.694]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:36:27.694]    - tweaked: FALSE
[13:36:27.694]    - call: plan(strategy)
[13:36:27.695] 
[13:36:27.695] 
[13:36:27.695] getGlobalsAndPackages() ... DONE
[13:36:27.695] run() for ‘Future’ ...
[13:36:27.696] - state: ‘created’
[13:36:27.696] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:36:27.699] plan(): nbrOfWorkers() = 2
[13:36:27.700] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:27.701] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:36:27.701]   - Field: ‘label’
[13:36:27.701]   - Field: ‘local’
[13:36:27.701]   - Field: ‘owner’
[13:36:27.701]   - Field: ‘envir’
[13:36:27.701]   - Field: ‘workers’
[13:36:27.701]   - Field: ‘packages’
[13:36:27.702]   - Field: ‘gc’
[13:36:27.702]   - Field: ‘job’
[13:36:27.702]   - Field: ‘conditions’
[13:36:27.702]   - Field: ‘expr’
[13:36:27.702]   - Field: ‘uuid’
[13:36:27.702]   - Field: ‘seed’
[13:36:27.703]   - Field: ‘version’
[13:36:27.703]   - Field: ‘result’
[13:36:27.703]   - Field: ‘asynchronous’
[13:36:27.703]   - Field: ‘calls’
[13:36:27.703]   - Field: ‘globals’
[13:36:27.703]   - Field: ‘stdout’
[13:36:27.703]   - Field: ‘earlySignal’
[13:36:27.704]   - Field: ‘lazy’
[13:36:27.704]   - Field: ‘state’
[13:36:27.704] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:36:27.704] - Launch lazy future ...
[13:36:27.704] Packages needed by the future expression (n = 0): <none>
[13:36:27.705] Packages needed by future strategies (n = 0): <none>
[13:36:27.705] {
[13:36:27.705]     {
[13:36:27.705]         {
[13:36:27.705]             ...future.startTime <- base::Sys.time()
[13:36:27.705]             {
[13:36:27.705]                 {
[13:36:27.705]                   {
[13:36:27.705]                     {
[13:36:27.705]                       base::local({
[13:36:27.705]                         has_future <- base::requireNamespace("future", 
[13:36:27.705]                           quietly = TRUE)
[13:36:27.705]                         if (has_future) {
[13:36:27.705]                           ns <- base::getNamespace("future")
[13:36:27.705]                           version <- ns[[".package"]][["version"]]
[13:36:27.705]                           if (is.null(version)) 
[13:36:27.705]                             version <- utils::packageVersion("future")
[13:36:27.705]                         }
[13:36:27.705]                         else {
[13:36:27.705]                           version <- NULL
[13:36:27.705]                         }
[13:36:27.705]                         if (!has_future || version < "1.8.0") {
[13:36:27.705]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:27.705]                             "", base::R.version$version.string), 
[13:36:27.705]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:27.705]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:27.705]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:27.705]                               "release", "version")], collapse = " "), 
[13:36:27.705]                             hostname = base::Sys.info()[["nodename"]])
[13:36:27.705]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:27.705]                             info)
[13:36:27.705]                           info <- base::paste(info, collapse = "; ")
[13:36:27.705]                           if (!has_future) {
[13:36:27.705]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:27.705]                               info)
[13:36:27.705]                           }
[13:36:27.705]                           else {
[13:36:27.705]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:27.705]                               info, version)
[13:36:27.705]                           }
[13:36:27.705]                           base::stop(msg)
[13:36:27.705]                         }
[13:36:27.705]                       })
[13:36:27.705]                     }
[13:36:27.705]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:27.705]                     base::options(mc.cores = 1L)
[13:36:27.705]                   }
[13:36:27.705]                   ...future.strategy.old <- future::plan("list")
[13:36:27.705]                   options(future.plan = NULL)
[13:36:27.705]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:27.705]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:27.705]                 }
[13:36:27.705]                 ...future.workdir <- getwd()
[13:36:27.705]             }
[13:36:27.705]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:27.705]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:27.705]         }
[13:36:27.705]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:27.705]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:27.705]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:27.705]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:27.705]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:27.705]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:27.705]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:27.705]             base::names(...future.oldOptions))
[13:36:27.705]     }
[13:36:27.705]     if (FALSE) {
[13:36:27.705]     }
[13:36:27.705]     else {
[13:36:27.705]         if (TRUE) {
[13:36:27.705]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:27.705]                 open = "w")
[13:36:27.705]         }
[13:36:27.705]         else {
[13:36:27.705]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:27.705]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:27.705]         }
[13:36:27.705]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:27.705]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:27.705]             base::sink(type = "output", split = FALSE)
[13:36:27.705]             base::close(...future.stdout)
[13:36:27.705]         }, add = TRUE)
[13:36:27.705]     }
[13:36:27.705]     ...future.frame <- base::sys.nframe()
[13:36:27.705]     ...future.conditions <- base::list()
[13:36:27.705]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:27.705]     if (FALSE) {
[13:36:27.705]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:27.705]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:27.705]     }
[13:36:27.705]     ...future.result <- base::tryCatch({
[13:36:27.705]         base::withCallingHandlers({
[13:36:27.705]             ...future.value <- base::withVisible(base::local({
[13:36:27.705]                 withCallingHandlers({
[13:36:27.705]                   {
[13:36:27.705]                     4
[13:36:27.705]                   }
[13:36:27.705]                 }, immediateCondition = function(cond) {
[13:36:27.705]                   save_rds <- function (object, pathname, ...) 
[13:36:27.705]                   {
[13:36:27.705]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:36:27.705]                     if (file_test("-f", pathname_tmp)) {
[13:36:27.705]                       fi_tmp <- file.info(pathname_tmp)
[13:36:27.705]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:36:27.705]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:27.705]                         fi_tmp[["mtime"]])
[13:36:27.705]                     }
[13:36:27.705]                     tryCatch({
[13:36:27.705]                       saveRDS(object, file = pathname_tmp, ...)
[13:36:27.705]                     }, error = function(ex) {
[13:36:27.705]                       msg <- conditionMessage(ex)
[13:36:27.705]                       fi_tmp <- file.info(pathname_tmp)
[13:36:27.705]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:36:27.705]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:27.705]                         fi_tmp[["mtime"]], msg)
[13:36:27.705]                       ex$message <- msg
[13:36:27.705]                       stop(ex)
[13:36:27.705]                     })
[13:36:27.705]                     stopifnot(file_test("-f", pathname_tmp))
[13:36:27.705]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:36:27.705]                     if (!res || file_test("-f", pathname_tmp)) {
[13:36:27.705]                       fi_tmp <- file.info(pathname_tmp)
[13:36:27.705]                       fi <- file.info(pathname)
[13:36:27.705]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:36:27.705]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:27.705]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:36:27.705]                         fi[["size"]], fi[["mtime"]])
[13:36:27.705]                       stop(msg)
[13:36:27.705]                     }
[13:36:27.705]                     invisible(pathname)
[13:36:27.705]                   }
[13:36:27.705]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:36:27.705]                     rootPath = tempdir()) 
[13:36:27.705]                   {
[13:36:27.705]                     obj <- list(time = Sys.time(), condition = cond)
[13:36:27.705]                     file <- tempfile(pattern = class(cond)[1], 
[13:36:27.705]                       tmpdir = path, fileext = ".rds")
[13:36:27.705]                     save_rds(obj, file)
[13:36:27.705]                   }
[13:36:27.705]                   saveImmediateCondition(cond, path = "/tmp/Rtmp4CDhtK/.future/immediateConditions")
[13:36:27.705]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:27.705]                   {
[13:36:27.705]                     inherits <- base::inherits
[13:36:27.705]                     invokeRestart <- base::invokeRestart
[13:36:27.705]                     is.null <- base::is.null
[13:36:27.705]                     muffled <- FALSE
[13:36:27.705]                     if (inherits(cond, "message")) {
[13:36:27.705]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:27.705]                       if (muffled) 
[13:36:27.705]                         invokeRestart("muffleMessage")
[13:36:27.705]                     }
[13:36:27.705]                     else if (inherits(cond, "warning")) {
[13:36:27.705]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:27.705]                       if (muffled) 
[13:36:27.705]                         invokeRestart("muffleWarning")
[13:36:27.705]                     }
[13:36:27.705]                     else if (inherits(cond, "condition")) {
[13:36:27.705]                       if (!is.null(pattern)) {
[13:36:27.705]                         computeRestarts <- base::computeRestarts
[13:36:27.705]                         grepl <- base::grepl
[13:36:27.705]                         restarts <- computeRestarts(cond)
[13:36:27.705]                         for (restart in restarts) {
[13:36:27.705]                           name <- restart$name
[13:36:27.705]                           if (is.null(name)) 
[13:36:27.705]                             next
[13:36:27.705]                           if (!grepl(pattern, name)) 
[13:36:27.705]                             next
[13:36:27.705]                           invokeRestart(restart)
[13:36:27.705]                           muffled <- TRUE
[13:36:27.705]                           break
[13:36:27.705]                         }
[13:36:27.705]                       }
[13:36:27.705]                     }
[13:36:27.705]                     invisible(muffled)
[13:36:27.705]                   }
[13:36:27.705]                   muffleCondition(cond)
[13:36:27.705]                 })
[13:36:27.705]             }))
[13:36:27.705]             future::FutureResult(value = ...future.value$value, 
[13:36:27.705]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:27.705]                   ...future.rng), globalenv = if (FALSE) 
[13:36:27.705]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:27.705]                     ...future.globalenv.names))
[13:36:27.705]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:27.705]         }, condition = base::local({
[13:36:27.705]             c <- base::c
[13:36:27.705]             inherits <- base::inherits
[13:36:27.705]             invokeRestart <- base::invokeRestart
[13:36:27.705]             length <- base::length
[13:36:27.705]             list <- base::list
[13:36:27.705]             seq.int <- base::seq.int
[13:36:27.705]             signalCondition <- base::signalCondition
[13:36:27.705]             sys.calls <- base::sys.calls
[13:36:27.705]             `[[` <- base::`[[`
[13:36:27.705]             `+` <- base::`+`
[13:36:27.705]             `<<-` <- base::`<<-`
[13:36:27.705]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:27.705]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:27.705]                   3L)]
[13:36:27.705]             }
[13:36:27.705]             function(cond) {
[13:36:27.705]                 is_error <- inherits(cond, "error")
[13:36:27.705]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:27.705]                   NULL)
[13:36:27.705]                 if (is_error) {
[13:36:27.705]                   sessionInformation <- function() {
[13:36:27.705]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:27.705]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:27.705]                       search = base::search(), system = base::Sys.info())
[13:36:27.705]                   }
[13:36:27.705]                   ...future.conditions[[length(...future.conditions) + 
[13:36:27.705]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:27.705]                     cond$call), session = sessionInformation(), 
[13:36:27.705]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:27.705]                   signalCondition(cond)
[13:36:27.705]                 }
[13:36:27.705]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:27.705]                 "immediateCondition"))) {
[13:36:27.705]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:27.705]                   ...future.conditions[[length(...future.conditions) + 
[13:36:27.705]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:27.705]                   if (TRUE && !signal) {
[13:36:27.705]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:27.705]                     {
[13:36:27.705]                       inherits <- base::inherits
[13:36:27.705]                       invokeRestart <- base::invokeRestart
[13:36:27.705]                       is.null <- base::is.null
[13:36:27.705]                       muffled <- FALSE
[13:36:27.705]                       if (inherits(cond, "message")) {
[13:36:27.705]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:27.705]                         if (muffled) 
[13:36:27.705]                           invokeRestart("muffleMessage")
[13:36:27.705]                       }
[13:36:27.705]                       else if (inherits(cond, "warning")) {
[13:36:27.705]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:27.705]                         if (muffled) 
[13:36:27.705]                           invokeRestart("muffleWarning")
[13:36:27.705]                       }
[13:36:27.705]                       else if (inherits(cond, "condition")) {
[13:36:27.705]                         if (!is.null(pattern)) {
[13:36:27.705]                           computeRestarts <- base::computeRestarts
[13:36:27.705]                           grepl <- base::grepl
[13:36:27.705]                           restarts <- computeRestarts(cond)
[13:36:27.705]                           for (restart in restarts) {
[13:36:27.705]                             name <- restart$name
[13:36:27.705]                             if (is.null(name)) 
[13:36:27.705]                               next
[13:36:27.705]                             if (!grepl(pattern, name)) 
[13:36:27.705]                               next
[13:36:27.705]                             invokeRestart(restart)
[13:36:27.705]                             muffled <- TRUE
[13:36:27.705]                             break
[13:36:27.705]                           }
[13:36:27.705]                         }
[13:36:27.705]                       }
[13:36:27.705]                       invisible(muffled)
[13:36:27.705]                     }
[13:36:27.705]                     muffleCondition(cond, pattern = "^muffle")
[13:36:27.705]                   }
[13:36:27.705]                 }
[13:36:27.705]                 else {
[13:36:27.705]                   if (TRUE) {
[13:36:27.705]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:27.705]                     {
[13:36:27.705]                       inherits <- base::inherits
[13:36:27.705]                       invokeRestart <- base::invokeRestart
[13:36:27.705]                       is.null <- base::is.null
[13:36:27.705]                       muffled <- FALSE
[13:36:27.705]                       if (inherits(cond, "message")) {
[13:36:27.705]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:27.705]                         if (muffled) 
[13:36:27.705]                           invokeRestart("muffleMessage")
[13:36:27.705]                       }
[13:36:27.705]                       else if (inherits(cond, "warning")) {
[13:36:27.705]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:27.705]                         if (muffled) 
[13:36:27.705]                           invokeRestart("muffleWarning")
[13:36:27.705]                       }
[13:36:27.705]                       else if (inherits(cond, "condition")) {
[13:36:27.705]                         if (!is.null(pattern)) {
[13:36:27.705]                           computeRestarts <- base::computeRestarts
[13:36:27.705]                           grepl <- base::grepl
[13:36:27.705]                           restarts <- computeRestarts(cond)
[13:36:27.705]                           for (restart in restarts) {
[13:36:27.705]                             name <- restart$name
[13:36:27.705]                             if (is.null(name)) 
[13:36:27.705]                               next
[13:36:27.705]                             if (!grepl(pattern, name)) 
[13:36:27.705]                               next
[13:36:27.705]                             invokeRestart(restart)
[13:36:27.705]                             muffled <- TRUE
[13:36:27.705]                             break
[13:36:27.705]                           }
[13:36:27.705]                         }
[13:36:27.705]                       }
[13:36:27.705]                       invisible(muffled)
[13:36:27.705]                     }
[13:36:27.705]                     muffleCondition(cond, pattern = "^muffle")
[13:36:27.705]                   }
[13:36:27.705]                 }
[13:36:27.705]             }
[13:36:27.705]         }))
[13:36:27.705]     }, error = function(ex) {
[13:36:27.705]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:27.705]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:27.705]                 ...future.rng), started = ...future.startTime, 
[13:36:27.705]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:27.705]             version = "1.8"), class = "FutureResult")
[13:36:27.705]     }, finally = {
[13:36:27.705]         if (!identical(...future.workdir, getwd())) 
[13:36:27.705]             setwd(...future.workdir)
[13:36:27.705]         {
[13:36:27.705]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:27.705]                 ...future.oldOptions$nwarnings <- NULL
[13:36:27.705]             }
[13:36:27.705]             base::options(...future.oldOptions)
[13:36:27.705]             if (.Platform$OS.type == "windows") {
[13:36:27.705]                 old_names <- names(...future.oldEnvVars)
[13:36:27.705]                 envs <- base::Sys.getenv()
[13:36:27.705]                 names <- names(envs)
[13:36:27.705]                 common <- intersect(names, old_names)
[13:36:27.705]                 added <- setdiff(names, old_names)
[13:36:27.705]                 removed <- setdiff(old_names, names)
[13:36:27.705]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:27.705]                   envs[common]]
[13:36:27.705]                 NAMES <- toupper(changed)
[13:36:27.705]                 args <- list()
[13:36:27.705]                 for (kk in seq_along(NAMES)) {
[13:36:27.705]                   name <- changed[[kk]]
[13:36:27.705]                   NAME <- NAMES[[kk]]
[13:36:27.705]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:27.705]                     next
[13:36:27.705]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:27.705]                 }
[13:36:27.705]                 NAMES <- toupper(added)
[13:36:27.705]                 for (kk in seq_along(NAMES)) {
[13:36:27.705]                   name <- added[[kk]]
[13:36:27.705]                   NAME <- NAMES[[kk]]
[13:36:27.705]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:27.705]                     next
[13:36:27.705]                   args[[name]] <- ""
[13:36:27.705]                 }
[13:36:27.705]                 NAMES <- toupper(removed)
[13:36:27.705]                 for (kk in seq_along(NAMES)) {
[13:36:27.705]                   name <- removed[[kk]]
[13:36:27.705]                   NAME <- NAMES[[kk]]
[13:36:27.705]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:27.705]                     next
[13:36:27.705]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:27.705]                 }
[13:36:27.705]                 if (length(args) > 0) 
[13:36:27.705]                   base::do.call(base::Sys.setenv, args = args)
[13:36:27.705]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:27.705]             }
[13:36:27.705]             else {
[13:36:27.705]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:27.705]             }
[13:36:27.705]             {
[13:36:27.705]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:27.705]                   0L) {
[13:36:27.705]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:27.705]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:27.705]                   base::options(opts)
[13:36:27.705]                 }
[13:36:27.705]                 {
[13:36:27.705]                   {
[13:36:27.705]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:27.705]                     NULL
[13:36:27.705]                   }
[13:36:27.705]                   options(future.plan = NULL)
[13:36:27.705]                   if (is.na(NA_character_)) 
[13:36:27.705]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:27.705]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:27.705]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:27.705]                     .init = FALSE)
[13:36:27.705]                 }
[13:36:27.705]             }
[13:36:27.705]         }
[13:36:27.705]     })
[13:36:27.705]     if (TRUE) {
[13:36:27.705]         base::sink(type = "output", split = FALSE)
[13:36:27.705]         if (TRUE) {
[13:36:27.705]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:27.705]         }
[13:36:27.705]         else {
[13:36:27.705]             ...future.result["stdout"] <- base::list(NULL)
[13:36:27.705]         }
[13:36:27.705]         base::close(...future.stdout)
[13:36:27.705]         ...future.stdout <- NULL
[13:36:27.705]     }
[13:36:27.705]     ...future.result$conditions <- ...future.conditions
[13:36:27.705]     ...future.result$finished <- base::Sys.time()
[13:36:27.705]     ...future.result
[13:36:27.705] }
[13:36:27.708] requestCore(): workers = 2
[13:36:27.714] MulticoreFuture started
[13:36:27.715] - Launch lazy future ... done
[13:36:27.715] run() for ‘MulticoreFuture’ ... done
[13:36:27.716] plan(): Setting new future strategy stack:
[13:36:27.716] result() for MulticoreFuture ...
[13:36:27.716] List of future strategies:
[13:36:27.716] 1. sequential:
[13:36:27.716]    - args: function (..., envir = parent.frame())
[13:36:27.716]    - tweaked: FALSE
[13:36:27.716]    - call: NULL
[13:36:27.717] plan(): nbrOfWorkers() = 1
[13:36:27.719] plan(): Setting new future strategy stack:
[13:36:27.719] result() for MulticoreFuture ...
[13:36:27.719] result() for MulticoreFuture ... done
[13:36:27.719] result() for MulticoreFuture ... done
[13:36:27.719] List of future strategies:
[13:36:27.719] 1. multicore:
[13:36:27.719]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:36:27.719]    - tweaked: FALSE
[13:36:27.719]    - call: plan(strategy)
[13:36:27.719] result() for MulticoreFuture ...
[13:36:27.724] result() for MulticoreFuture ... done
u$a = 2
[13:36:27.725] result() for MulticoreFuture ...
[13:36:27.728] plan(): nbrOfWorkers() = 2
[13:36:27.729] result() for MulticoreFuture ...
[13:36:27.729] result() for MulticoreFuture ... done
[13:36:27.729] result() for MulticoreFuture ... done
[13:36:27.729] result() for MulticoreFuture ...
[13:36:27.730] result() for MulticoreFuture ... done
v$a = 4
[13:36:27.730] getGlobalsAndPackages() ...
[13:36:27.730] Searching for globals...
[13:36:27.732] - globals found: [3] ‘{’, ‘*’, ‘a’
[13:36:27.732] Searching for globals ... DONE
[13:36:27.732] Resolving globals: FALSE
[13:36:27.732] The total size of the 1 globals is 56 bytes (56 bytes)
[13:36:27.733] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[13:36:27.733] - globals: [1] ‘a’
[13:36:27.733] 
[13:36:27.733] getGlobalsAndPackages() ... DONE
[13:36:27.734] run() for ‘Future’ ...
[13:36:27.734] - state: ‘created’
[13:36:27.734] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:36:27.738] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:27.738] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:36:27.738]   - Field: ‘label’
[13:36:27.738]   - Field: ‘local’
[13:36:27.738]   - Field: ‘owner’
[13:36:27.738]   - Field: ‘envir’
[13:36:27.739]   - Field: ‘workers’
[13:36:27.739]   - Field: ‘packages’
[13:36:27.739]   - Field: ‘gc’
[13:36:27.739]   - Field: ‘job’
[13:36:27.739]   - Field: ‘conditions’
[13:36:27.739]   - Field: ‘expr’
[13:36:27.739]   - Field: ‘uuid’
[13:36:27.739]   - Field: ‘seed’
[13:36:27.739]   - Field: ‘version’
[13:36:27.740]   - Field: ‘result’
[13:36:27.740]   - Field: ‘asynchronous’
[13:36:27.740]   - Field: ‘calls’
[13:36:27.740]   - Field: ‘globals’
[13:36:27.740]   - Field: ‘stdout’
[13:36:27.740]   - Field: ‘earlySignal’
[13:36:27.740]   - Field: ‘lazy’
[13:36:27.740]   - Field: ‘state’
[13:36:27.740] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:36:27.741] - Launch lazy future ...
[13:36:27.741] Packages needed by the future expression (n = 0): <none>
[13:36:27.741] Packages needed by future strategies (n = 0): <none>
[13:36:27.742] {
[13:36:27.742]     {
[13:36:27.742]         {
[13:36:27.742]             ...future.startTime <- base::Sys.time()
[13:36:27.742]             {
[13:36:27.742]                 {
[13:36:27.742]                   {
[13:36:27.742]                     {
[13:36:27.742]                       base::local({
[13:36:27.742]                         has_future <- base::requireNamespace("future", 
[13:36:27.742]                           quietly = TRUE)
[13:36:27.742]                         if (has_future) {
[13:36:27.742]                           ns <- base::getNamespace("future")
[13:36:27.742]                           version <- ns[[".package"]][["version"]]
[13:36:27.742]                           if (is.null(version)) 
[13:36:27.742]                             version <- utils::packageVersion("future")
[13:36:27.742]                         }
[13:36:27.742]                         else {
[13:36:27.742]                           version <- NULL
[13:36:27.742]                         }
[13:36:27.742]                         if (!has_future || version < "1.8.0") {
[13:36:27.742]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:27.742]                             "", base::R.version$version.string), 
[13:36:27.742]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:27.742]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:27.742]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:27.742]                               "release", "version")], collapse = " "), 
[13:36:27.742]                             hostname = base::Sys.info()[["nodename"]])
[13:36:27.742]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:27.742]                             info)
[13:36:27.742]                           info <- base::paste(info, collapse = "; ")
[13:36:27.742]                           if (!has_future) {
[13:36:27.742]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:27.742]                               info)
[13:36:27.742]                           }
[13:36:27.742]                           else {
[13:36:27.742]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:27.742]                               info, version)
[13:36:27.742]                           }
[13:36:27.742]                           base::stop(msg)
[13:36:27.742]                         }
[13:36:27.742]                       })
[13:36:27.742]                     }
[13:36:27.742]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:27.742]                     base::options(mc.cores = 1L)
[13:36:27.742]                   }
[13:36:27.742]                   ...future.strategy.old <- future::plan("list")
[13:36:27.742]                   options(future.plan = NULL)
[13:36:27.742]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:27.742]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:27.742]                 }
[13:36:27.742]                 ...future.workdir <- getwd()
[13:36:27.742]             }
[13:36:27.742]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:27.742]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:27.742]         }
[13:36:27.742]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:27.742]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:27.742]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:27.742]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:27.742]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:27.742]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:27.742]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:27.742]             base::names(...future.oldOptions))
[13:36:27.742]     }
[13:36:27.742]     if (FALSE) {
[13:36:27.742]     }
[13:36:27.742]     else {
[13:36:27.742]         if (TRUE) {
[13:36:27.742]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:27.742]                 open = "w")
[13:36:27.742]         }
[13:36:27.742]         else {
[13:36:27.742]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:27.742]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:27.742]         }
[13:36:27.742]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:27.742]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:27.742]             base::sink(type = "output", split = FALSE)
[13:36:27.742]             base::close(...future.stdout)
[13:36:27.742]         }, add = TRUE)
[13:36:27.742]     }
[13:36:27.742]     ...future.frame <- base::sys.nframe()
[13:36:27.742]     ...future.conditions <- base::list()
[13:36:27.742]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:27.742]     if (FALSE) {
[13:36:27.742]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:27.742]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:27.742]     }
[13:36:27.742]     ...future.result <- base::tryCatch({
[13:36:27.742]         base::withCallingHandlers({
[13:36:27.742]             ...future.value <- base::withVisible(base::local({
[13:36:27.742]                 withCallingHandlers({
[13:36:27.742]                   {
[13:36:27.742]                     2 * a
[13:36:27.742]                   }
[13:36:27.742]                 }, immediateCondition = function(cond) {
[13:36:27.742]                   save_rds <- function (object, pathname, ...) 
[13:36:27.742]                   {
[13:36:27.742]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:36:27.742]                     if (file_test("-f", pathname_tmp)) {
[13:36:27.742]                       fi_tmp <- file.info(pathname_tmp)
[13:36:27.742]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:36:27.742]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:27.742]                         fi_tmp[["mtime"]])
[13:36:27.742]                     }
[13:36:27.742]                     tryCatch({
[13:36:27.742]                       saveRDS(object, file = pathname_tmp, ...)
[13:36:27.742]                     }, error = function(ex) {
[13:36:27.742]                       msg <- conditionMessage(ex)
[13:36:27.742]                       fi_tmp <- file.info(pathname_tmp)
[13:36:27.742]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:36:27.742]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:27.742]                         fi_tmp[["mtime"]], msg)
[13:36:27.742]                       ex$message <- msg
[13:36:27.742]                       stop(ex)
[13:36:27.742]                     })
[13:36:27.742]                     stopifnot(file_test("-f", pathname_tmp))
[13:36:27.742]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:36:27.742]                     if (!res || file_test("-f", pathname_tmp)) {
[13:36:27.742]                       fi_tmp <- file.info(pathname_tmp)
[13:36:27.742]                       fi <- file.info(pathname)
[13:36:27.742]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:36:27.742]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:27.742]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:36:27.742]                         fi[["size"]], fi[["mtime"]])
[13:36:27.742]                       stop(msg)
[13:36:27.742]                     }
[13:36:27.742]                     invisible(pathname)
[13:36:27.742]                   }
[13:36:27.742]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:36:27.742]                     rootPath = tempdir()) 
[13:36:27.742]                   {
[13:36:27.742]                     obj <- list(time = Sys.time(), condition = cond)
[13:36:27.742]                     file <- tempfile(pattern = class(cond)[1], 
[13:36:27.742]                       tmpdir = path, fileext = ".rds")
[13:36:27.742]                     save_rds(obj, file)
[13:36:27.742]                   }
[13:36:27.742]                   saveImmediateCondition(cond, path = "/tmp/Rtmp4CDhtK/.future/immediateConditions")
[13:36:27.742]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:27.742]                   {
[13:36:27.742]                     inherits <- base::inherits
[13:36:27.742]                     invokeRestart <- base::invokeRestart
[13:36:27.742]                     is.null <- base::is.null
[13:36:27.742]                     muffled <- FALSE
[13:36:27.742]                     if (inherits(cond, "message")) {
[13:36:27.742]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:27.742]                       if (muffled) 
[13:36:27.742]                         invokeRestart("muffleMessage")
[13:36:27.742]                     }
[13:36:27.742]                     else if (inherits(cond, "warning")) {
[13:36:27.742]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:27.742]                       if (muffled) 
[13:36:27.742]                         invokeRestart("muffleWarning")
[13:36:27.742]                     }
[13:36:27.742]                     else if (inherits(cond, "condition")) {
[13:36:27.742]                       if (!is.null(pattern)) {
[13:36:27.742]                         computeRestarts <- base::computeRestarts
[13:36:27.742]                         grepl <- base::grepl
[13:36:27.742]                         restarts <- computeRestarts(cond)
[13:36:27.742]                         for (restart in restarts) {
[13:36:27.742]                           name <- restart$name
[13:36:27.742]                           if (is.null(name)) 
[13:36:27.742]                             next
[13:36:27.742]                           if (!grepl(pattern, name)) 
[13:36:27.742]                             next
[13:36:27.742]                           invokeRestart(restart)
[13:36:27.742]                           muffled <- TRUE
[13:36:27.742]                           break
[13:36:27.742]                         }
[13:36:27.742]                       }
[13:36:27.742]                     }
[13:36:27.742]                     invisible(muffled)
[13:36:27.742]                   }
[13:36:27.742]                   muffleCondition(cond)
[13:36:27.742]                 })
[13:36:27.742]             }))
[13:36:27.742]             future::FutureResult(value = ...future.value$value, 
[13:36:27.742]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:27.742]                   ...future.rng), globalenv = if (FALSE) 
[13:36:27.742]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:27.742]                     ...future.globalenv.names))
[13:36:27.742]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:27.742]         }, condition = base::local({
[13:36:27.742]             c <- base::c
[13:36:27.742]             inherits <- base::inherits
[13:36:27.742]             invokeRestart <- base::invokeRestart
[13:36:27.742]             length <- base::length
[13:36:27.742]             list <- base::list
[13:36:27.742]             seq.int <- base::seq.int
[13:36:27.742]             signalCondition <- base::signalCondition
[13:36:27.742]             sys.calls <- base::sys.calls
[13:36:27.742]             `[[` <- base::`[[`
[13:36:27.742]             `+` <- base::`+`
[13:36:27.742]             `<<-` <- base::`<<-`
[13:36:27.742]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:27.742]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:27.742]                   3L)]
[13:36:27.742]             }
[13:36:27.742]             function(cond) {
[13:36:27.742]                 is_error <- inherits(cond, "error")
[13:36:27.742]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:27.742]                   NULL)
[13:36:27.742]                 if (is_error) {
[13:36:27.742]                   sessionInformation <- function() {
[13:36:27.742]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:27.742]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:27.742]                       search = base::search(), system = base::Sys.info())
[13:36:27.742]                   }
[13:36:27.742]                   ...future.conditions[[length(...future.conditions) + 
[13:36:27.742]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:27.742]                     cond$call), session = sessionInformation(), 
[13:36:27.742]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:27.742]                   signalCondition(cond)
[13:36:27.742]                 }
[13:36:27.742]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:27.742]                 "immediateCondition"))) {
[13:36:27.742]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:27.742]                   ...future.conditions[[length(...future.conditions) + 
[13:36:27.742]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:27.742]                   if (TRUE && !signal) {
[13:36:27.742]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:27.742]                     {
[13:36:27.742]                       inherits <- base::inherits
[13:36:27.742]                       invokeRestart <- base::invokeRestart
[13:36:27.742]                       is.null <- base::is.null
[13:36:27.742]                       muffled <- FALSE
[13:36:27.742]                       if (inherits(cond, "message")) {
[13:36:27.742]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:27.742]                         if (muffled) 
[13:36:27.742]                           invokeRestart("muffleMessage")
[13:36:27.742]                       }
[13:36:27.742]                       else if (inherits(cond, "warning")) {
[13:36:27.742]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:27.742]                         if (muffled) 
[13:36:27.742]                           invokeRestart("muffleWarning")
[13:36:27.742]                       }
[13:36:27.742]                       else if (inherits(cond, "condition")) {
[13:36:27.742]                         if (!is.null(pattern)) {
[13:36:27.742]                           computeRestarts <- base::computeRestarts
[13:36:27.742]                           grepl <- base::grepl
[13:36:27.742]                           restarts <- computeRestarts(cond)
[13:36:27.742]                           for (restart in restarts) {
[13:36:27.742]                             name <- restart$name
[13:36:27.742]                             if (is.null(name)) 
[13:36:27.742]                               next
[13:36:27.742]                             if (!grepl(pattern, name)) 
[13:36:27.742]                               next
[13:36:27.742]                             invokeRestart(restart)
[13:36:27.742]                             muffled <- TRUE
[13:36:27.742]                             break
[13:36:27.742]                           }
[13:36:27.742]                         }
[13:36:27.742]                       }
[13:36:27.742]                       invisible(muffled)
[13:36:27.742]                     }
[13:36:27.742]                     muffleCondition(cond, pattern = "^muffle")
[13:36:27.742]                   }
[13:36:27.742]                 }
[13:36:27.742]                 else {
[13:36:27.742]                   if (TRUE) {
[13:36:27.742]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:27.742]                     {
[13:36:27.742]                       inherits <- base::inherits
[13:36:27.742]                       invokeRestart <- base::invokeRestart
[13:36:27.742]                       is.null <- base::is.null
[13:36:27.742]                       muffled <- FALSE
[13:36:27.742]                       if (inherits(cond, "message")) {
[13:36:27.742]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:27.742]                         if (muffled) 
[13:36:27.742]                           invokeRestart("muffleMessage")
[13:36:27.742]                       }
[13:36:27.742]                       else if (inherits(cond, "warning")) {
[13:36:27.742]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:27.742]                         if (muffled) 
[13:36:27.742]                           invokeRestart("muffleWarning")
[13:36:27.742]                       }
[13:36:27.742]                       else if (inherits(cond, "condition")) {
[13:36:27.742]                         if (!is.null(pattern)) {
[13:36:27.742]                           computeRestarts <- base::computeRestarts
[13:36:27.742]                           grepl <- base::grepl
[13:36:27.742]                           restarts <- computeRestarts(cond)
[13:36:27.742]                           for (restart in restarts) {
[13:36:27.742]                             name <- restart$name
[13:36:27.742]                             if (is.null(name)) 
[13:36:27.742]                               next
[13:36:27.742]                             if (!grepl(pattern, name)) 
[13:36:27.742]                               next
[13:36:27.742]                             invokeRestart(restart)
[13:36:27.742]                             muffled <- TRUE
[13:36:27.742]                             break
[13:36:27.742]                           }
[13:36:27.742]                         }
[13:36:27.742]                       }
[13:36:27.742]                       invisible(muffled)
[13:36:27.742]                     }
[13:36:27.742]                     muffleCondition(cond, pattern = "^muffle")
[13:36:27.742]                   }
[13:36:27.742]                 }
[13:36:27.742]             }
[13:36:27.742]         }))
[13:36:27.742]     }, error = function(ex) {
[13:36:27.742]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:27.742]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:27.742]                 ...future.rng), started = ...future.startTime, 
[13:36:27.742]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:27.742]             version = "1.8"), class = "FutureResult")
[13:36:27.742]     }, finally = {
[13:36:27.742]         if (!identical(...future.workdir, getwd())) 
[13:36:27.742]             setwd(...future.workdir)
[13:36:27.742]         {
[13:36:27.742]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:27.742]                 ...future.oldOptions$nwarnings <- NULL
[13:36:27.742]             }
[13:36:27.742]             base::options(...future.oldOptions)
[13:36:27.742]             if (.Platform$OS.type == "windows") {
[13:36:27.742]                 old_names <- names(...future.oldEnvVars)
[13:36:27.742]                 envs <- base::Sys.getenv()
[13:36:27.742]                 names <- names(envs)
[13:36:27.742]                 common <- intersect(names, old_names)
[13:36:27.742]                 added <- setdiff(names, old_names)
[13:36:27.742]                 removed <- setdiff(old_names, names)
[13:36:27.742]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:27.742]                   envs[common]]
[13:36:27.742]                 NAMES <- toupper(changed)
[13:36:27.742]                 args <- list()
[13:36:27.742]                 for (kk in seq_along(NAMES)) {
[13:36:27.742]                   name <- changed[[kk]]
[13:36:27.742]                   NAME <- NAMES[[kk]]
[13:36:27.742]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:27.742]                     next
[13:36:27.742]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:27.742]                 }
[13:36:27.742]                 NAMES <- toupper(added)
[13:36:27.742]                 for (kk in seq_along(NAMES)) {
[13:36:27.742]                   name <- added[[kk]]
[13:36:27.742]                   NAME <- NAMES[[kk]]
[13:36:27.742]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:27.742]                     next
[13:36:27.742]                   args[[name]] <- ""
[13:36:27.742]                 }
[13:36:27.742]                 NAMES <- toupper(removed)
[13:36:27.742]                 for (kk in seq_along(NAMES)) {
[13:36:27.742]                   name <- removed[[kk]]
[13:36:27.742]                   NAME <- NAMES[[kk]]
[13:36:27.742]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:27.742]                     next
[13:36:27.742]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:27.742]                 }
[13:36:27.742]                 if (length(args) > 0) 
[13:36:27.742]                   base::do.call(base::Sys.setenv, args = args)
[13:36:27.742]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:27.742]             }
[13:36:27.742]             else {
[13:36:27.742]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:27.742]             }
[13:36:27.742]             {
[13:36:27.742]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:27.742]                   0L) {
[13:36:27.742]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:27.742]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:27.742]                   base::options(opts)
[13:36:27.742]                 }
[13:36:27.742]                 {
[13:36:27.742]                   {
[13:36:27.742]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:27.742]                     NULL
[13:36:27.742]                   }
[13:36:27.742]                   options(future.plan = NULL)
[13:36:27.742]                   if (is.na(NA_character_)) 
[13:36:27.742]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:27.742]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:27.742]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:27.742]                     .init = FALSE)
[13:36:27.742]                 }
[13:36:27.742]             }
[13:36:27.742]         }
[13:36:27.742]     })
[13:36:27.742]     if (TRUE) {
[13:36:27.742]         base::sink(type = "output", split = FALSE)
[13:36:27.742]         if (TRUE) {
[13:36:27.742]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:27.742]         }
[13:36:27.742]         else {
[13:36:27.742]             ...future.result["stdout"] <- base::list(NULL)
[13:36:27.742]         }
[13:36:27.742]         base::close(...future.stdout)
[13:36:27.742]         ...future.stdout <- NULL
[13:36:27.742]     }
[13:36:27.742]     ...future.result$conditions <- ...future.conditions
[13:36:27.742]     ...future.result$finished <- base::Sys.time()
[13:36:27.742]     ...future.result
[13:36:27.742] }
[13:36:27.744] assign_globals() ...
[13:36:27.744] List of 1
[13:36:27.744]  $ a: num 1
[13:36:27.744]  - attr(*, "where")=List of 1
[13:36:27.744]   ..$ a:<environment: R_EmptyEnv> 
[13:36:27.744]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:27.744]  - attr(*, "resolved")= logi FALSE
[13:36:27.744]  - attr(*, "total_size")= num 56
[13:36:27.744]  - attr(*, "already-done")= logi TRUE
[13:36:27.747] - copied ‘a’ to environment
[13:36:27.747] assign_globals() ... done
[13:36:27.747] requestCore(): workers = 2
[13:36:27.749] MulticoreFuture started
[13:36:27.749] - Launch lazy future ... done
[13:36:27.750] run() for ‘MulticoreFuture’ ... done
[13:36:27.750] result() for MulticoreFuture ...
[13:36:27.750] plan(): Setting new future strategy stack:
[13:36:27.750] List of future strategies:
[13:36:27.750] 1. sequential:
[13:36:27.750]    - args: function (..., envir = parent.frame())
[13:36:27.750]    - tweaked: FALSE
[13:36:27.750]    - call: NULL
[13:36:27.751] plan(): nbrOfWorkers() = 1
[13:36:27.753] plan(): Setting new future strategy stack:
[13:36:27.753] List of future strategies:
[13:36:27.753] 1. multicore:
[13:36:27.753]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:36:27.753]    - tweaked: FALSE
[13:36:27.753]    - call: plan(strategy)
[13:36:27.758] plan(): nbrOfWorkers() = 2
[13:36:27.759] result() for MulticoreFuture ...
[13:36:27.759] result() for MulticoreFuture ... done
[13:36:27.759] result() for MulticoreFuture ... done
[13:36:27.760] result() for MulticoreFuture ...
[13:36:27.760] result() for MulticoreFuture ... done
[13:36:27.760] getGlobalsAndPackages() ...
[13:36:27.760] Searching for globals...
[13:36:27.761] - globals found: [3] ‘{’, ‘*’, ‘a’
[13:36:27.762] Searching for globals ... DONE
[13:36:27.762] Resolving globals: FALSE
[13:36:27.762] The total size of the 1 globals is 56 bytes (56 bytes)
[13:36:27.763] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[13:36:27.763] - globals: [1] ‘a’
[13:36:27.763] 
[13:36:27.763] getGlobalsAndPackages() ... DONE
[13:36:27.763] run() for ‘Future’ ...
[13:36:27.764] - state: ‘created’
[13:36:27.764] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:36:27.768] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:27.768] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:36:27.768]   - Field: ‘label’
[13:36:27.768]   - Field: ‘local’
[13:36:27.768]   - Field: ‘owner’
[13:36:27.768]   - Field: ‘envir’
[13:36:27.768]   - Field: ‘workers’
[13:36:27.769]   - Field: ‘packages’
[13:36:27.769]   - Field: ‘gc’
[13:36:27.769]   - Field: ‘job’
[13:36:27.769]   - Field: ‘conditions’
[13:36:27.769]   - Field: ‘expr’
[13:36:27.769]   - Field: ‘uuid’
[13:36:27.769]   - Field: ‘seed’
[13:36:27.769]   - Field: ‘version’
[13:36:27.769]   - Field: ‘result’
[13:36:27.770]   - Field: ‘asynchronous’
[13:36:27.770]   - Field: ‘calls’
[13:36:27.770]   - Field: ‘globals’
[13:36:27.770]   - Field: ‘stdout’
[13:36:27.770]   - Field: ‘earlySignal’
[13:36:27.770]   - Field: ‘lazy’
[13:36:27.770]   - Field: ‘state’
[13:36:27.770] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:36:27.770] - Launch lazy future ...
[13:36:27.771] Packages needed by the future expression (n = 0): <none>
[13:36:27.771] Packages needed by future strategies (n = 0): <none>
[13:36:27.771] {
[13:36:27.771]     {
[13:36:27.771]         {
[13:36:27.771]             ...future.startTime <- base::Sys.time()
[13:36:27.771]             {
[13:36:27.771]                 {
[13:36:27.771]                   {
[13:36:27.771]                     {
[13:36:27.771]                       base::local({
[13:36:27.771]                         has_future <- base::requireNamespace("future", 
[13:36:27.771]                           quietly = TRUE)
[13:36:27.771]                         if (has_future) {
[13:36:27.771]                           ns <- base::getNamespace("future")
[13:36:27.771]                           version <- ns[[".package"]][["version"]]
[13:36:27.771]                           if (is.null(version)) 
[13:36:27.771]                             version <- utils::packageVersion("future")
[13:36:27.771]                         }
[13:36:27.771]                         else {
[13:36:27.771]                           version <- NULL
[13:36:27.771]                         }
[13:36:27.771]                         if (!has_future || version < "1.8.0") {
[13:36:27.771]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:27.771]                             "", base::R.version$version.string), 
[13:36:27.771]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:27.771]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:27.771]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:27.771]                               "release", "version")], collapse = " "), 
[13:36:27.771]                             hostname = base::Sys.info()[["nodename"]])
[13:36:27.771]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:27.771]                             info)
[13:36:27.771]                           info <- base::paste(info, collapse = "; ")
[13:36:27.771]                           if (!has_future) {
[13:36:27.771]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:27.771]                               info)
[13:36:27.771]                           }
[13:36:27.771]                           else {
[13:36:27.771]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:27.771]                               info, version)
[13:36:27.771]                           }
[13:36:27.771]                           base::stop(msg)
[13:36:27.771]                         }
[13:36:27.771]                       })
[13:36:27.771]                     }
[13:36:27.771]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:27.771]                     base::options(mc.cores = 1L)
[13:36:27.771]                   }
[13:36:27.771]                   ...future.strategy.old <- future::plan("list")
[13:36:27.771]                   options(future.plan = NULL)
[13:36:27.771]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:27.771]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:27.771]                 }
[13:36:27.771]                 ...future.workdir <- getwd()
[13:36:27.771]             }
[13:36:27.771]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:27.771]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:27.771]         }
[13:36:27.771]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:27.771]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:27.771]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:27.771]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:27.771]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:27.771]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:27.771]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:27.771]             base::names(...future.oldOptions))
[13:36:27.771]     }
[13:36:27.771]     if (FALSE) {
[13:36:27.771]     }
[13:36:27.771]     else {
[13:36:27.771]         if (TRUE) {
[13:36:27.771]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:27.771]                 open = "w")
[13:36:27.771]         }
[13:36:27.771]         else {
[13:36:27.771]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:27.771]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:27.771]         }
[13:36:27.771]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:27.771]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:27.771]             base::sink(type = "output", split = FALSE)
[13:36:27.771]             base::close(...future.stdout)
[13:36:27.771]         }, add = TRUE)
[13:36:27.771]     }
[13:36:27.771]     ...future.frame <- base::sys.nframe()
[13:36:27.771]     ...future.conditions <- base::list()
[13:36:27.771]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:27.771]     if (FALSE) {
[13:36:27.771]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:27.771]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:27.771]     }
[13:36:27.771]     ...future.result <- base::tryCatch({
[13:36:27.771]         base::withCallingHandlers({
[13:36:27.771]             ...future.value <- base::withVisible(base::local({
[13:36:27.771]                 withCallingHandlers({
[13:36:27.771]                   {
[13:36:27.771]                     2 * a
[13:36:27.771]                   }
[13:36:27.771]                 }, immediateCondition = function(cond) {
[13:36:27.771]                   save_rds <- function (object, pathname, ...) 
[13:36:27.771]                   {
[13:36:27.771]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:36:27.771]                     if (file_test("-f", pathname_tmp)) {
[13:36:27.771]                       fi_tmp <- file.info(pathname_tmp)
[13:36:27.771]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:36:27.771]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:27.771]                         fi_tmp[["mtime"]])
[13:36:27.771]                     }
[13:36:27.771]                     tryCatch({
[13:36:27.771]                       saveRDS(object, file = pathname_tmp, ...)
[13:36:27.771]                     }, error = function(ex) {
[13:36:27.771]                       msg <- conditionMessage(ex)
[13:36:27.771]                       fi_tmp <- file.info(pathname_tmp)
[13:36:27.771]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:36:27.771]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:27.771]                         fi_tmp[["mtime"]], msg)
[13:36:27.771]                       ex$message <- msg
[13:36:27.771]                       stop(ex)
[13:36:27.771]                     })
[13:36:27.771]                     stopifnot(file_test("-f", pathname_tmp))
[13:36:27.771]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:36:27.771]                     if (!res || file_test("-f", pathname_tmp)) {
[13:36:27.771]                       fi_tmp <- file.info(pathname_tmp)
[13:36:27.771]                       fi <- file.info(pathname)
[13:36:27.771]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:36:27.771]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:27.771]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:36:27.771]                         fi[["size"]], fi[["mtime"]])
[13:36:27.771]                       stop(msg)
[13:36:27.771]                     }
[13:36:27.771]                     invisible(pathname)
[13:36:27.771]                   }
[13:36:27.771]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:36:27.771]                     rootPath = tempdir()) 
[13:36:27.771]                   {
[13:36:27.771]                     obj <- list(time = Sys.time(), condition = cond)
[13:36:27.771]                     file <- tempfile(pattern = class(cond)[1], 
[13:36:27.771]                       tmpdir = path, fileext = ".rds")
[13:36:27.771]                     save_rds(obj, file)
[13:36:27.771]                   }
[13:36:27.771]                   saveImmediateCondition(cond, path = "/tmp/Rtmp4CDhtK/.future/immediateConditions")
[13:36:27.771]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:27.771]                   {
[13:36:27.771]                     inherits <- base::inherits
[13:36:27.771]                     invokeRestart <- base::invokeRestart
[13:36:27.771]                     is.null <- base::is.null
[13:36:27.771]                     muffled <- FALSE
[13:36:27.771]                     if (inherits(cond, "message")) {
[13:36:27.771]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:27.771]                       if (muffled) 
[13:36:27.771]                         invokeRestart("muffleMessage")
[13:36:27.771]                     }
[13:36:27.771]                     else if (inherits(cond, "warning")) {
[13:36:27.771]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:27.771]                       if (muffled) 
[13:36:27.771]                         invokeRestart("muffleWarning")
[13:36:27.771]                     }
[13:36:27.771]                     else if (inherits(cond, "condition")) {
[13:36:27.771]                       if (!is.null(pattern)) {
[13:36:27.771]                         computeRestarts <- base::computeRestarts
[13:36:27.771]                         grepl <- base::grepl
[13:36:27.771]                         restarts <- computeRestarts(cond)
[13:36:27.771]                         for (restart in restarts) {
[13:36:27.771]                           name <- restart$name
[13:36:27.771]                           if (is.null(name)) 
[13:36:27.771]                             next
[13:36:27.771]                           if (!grepl(pattern, name)) 
[13:36:27.771]                             next
[13:36:27.771]                           invokeRestart(restart)
[13:36:27.771]                           muffled <- TRUE
[13:36:27.771]                           break
[13:36:27.771]                         }
[13:36:27.771]                       }
[13:36:27.771]                     }
[13:36:27.771]                     invisible(muffled)
[13:36:27.771]                   }
[13:36:27.771]                   muffleCondition(cond)
[13:36:27.771]                 })
[13:36:27.771]             }))
[13:36:27.771]             future::FutureResult(value = ...future.value$value, 
[13:36:27.771]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:27.771]                   ...future.rng), globalenv = if (FALSE) 
[13:36:27.771]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:27.771]                     ...future.globalenv.names))
[13:36:27.771]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:27.771]         }, condition = base::local({
[13:36:27.771]             c <- base::c
[13:36:27.771]             inherits <- base::inherits
[13:36:27.771]             invokeRestart <- base::invokeRestart
[13:36:27.771]             length <- base::length
[13:36:27.771]             list <- base::list
[13:36:27.771]             seq.int <- base::seq.int
[13:36:27.771]             signalCondition <- base::signalCondition
[13:36:27.771]             sys.calls <- base::sys.calls
[13:36:27.771]             `[[` <- base::`[[`
[13:36:27.771]             `+` <- base::`+`
[13:36:27.771]             `<<-` <- base::`<<-`
[13:36:27.771]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:27.771]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:27.771]                   3L)]
[13:36:27.771]             }
[13:36:27.771]             function(cond) {
[13:36:27.771]                 is_error <- inherits(cond, "error")
[13:36:27.771]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:27.771]                   NULL)
[13:36:27.771]                 if (is_error) {
[13:36:27.771]                   sessionInformation <- function() {
[13:36:27.771]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:27.771]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:27.771]                       search = base::search(), system = base::Sys.info())
[13:36:27.771]                   }
[13:36:27.771]                   ...future.conditions[[length(...future.conditions) + 
[13:36:27.771]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:27.771]                     cond$call), session = sessionInformation(), 
[13:36:27.771]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:27.771]                   signalCondition(cond)
[13:36:27.771]                 }
[13:36:27.771]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:27.771]                 "immediateCondition"))) {
[13:36:27.771]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:27.771]                   ...future.conditions[[length(...future.conditions) + 
[13:36:27.771]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:27.771]                   if (TRUE && !signal) {
[13:36:27.771]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:27.771]                     {
[13:36:27.771]                       inherits <- base::inherits
[13:36:27.771]                       invokeRestart <- base::invokeRestart
[13:36:27.771]                       is.null <- base::is.null
[13:36:27.771]                       muffled <- FALSE
[13:36:27.771]                       if (inherits(cond, "message")) {
[13:36:27.771]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:27.771]                         if (muffled) 
[13:36:27.771]                           invokeRestart("muffleMessage")
[13:36:27.771]                       }
[13:36:27.771]                       else if (inherits(cond, "warning")) {
[13:36:27.771]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:27.771]                         if (muffled) 
[13:36:27.771]                           invokeRestart("muffleWarning")
[13:36:27.771]                       }
[13:36:27.771]                       else if (inherits(cond, "condition")) {
[13:36:27.771]                         if (!is.null(pattern)) {
[13:36:27.771]                           computeRestarts <- base::computeRestarts
[13:36:27.771]                           grepl <- base::grepl
[13:36:27.771]                           restarts <- computeRestarts(cond)
[13:36:27.771]                           for (restart in restarts) {
[13:36:27.771]                             name <- restart$name
[13:36:27.771]                             if (is.null(name)) 
[13:36:27.771]                               next
[13:36:27.771]                             if (!grepl(pattern, name)) 
[13:36:27.771]                               next
[13:36:27.771]                             invokeRestart(restart)
[13:36:27.771]                             muffled <- TRUE
[13:36:27.771]                             break
[13:36:27.771]                           }
[13:36:27.771]                         }
[13:36:27.771]                       }
[13:36:27.771]                       invisible(muffled)
[13:36:27.771]                     }
[13:36:27.771]                     muffleCondition(cond, pattern = "^muffle")
[13:36:27.771]                   }
[13:36:27.771]                 }
[13:36:27.771]                 else {
[13:36:27.771]                   if (TRUE) {
[13:36:27.771]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:27.771]                     {
[13:36:27.771]                       inherits <- base::inherits
[13:36:27.771]                       invokeRestart <- base::invokeRestart
[13:36:27.771]                       is.null <- base::is.null
[13:36:27.771]                       muffled <- FALSE
[13:36:27.771]                       if (inherits(cond, "message")) {
[13:36:27.771]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:27.771]                         if (muffled) 
[13:36:27.771]                           invokeRestart("muffleMessage")
[13:36:27.771]                       }
[13:36:27.771]                       else if (inherits(cond, "warning")) {
[13:36:27.771]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:27.771]                         if (muffled) 
[13:36:27.771]                           invokeRestart("muffleWarning")
[13:36:27.771]                       }
[13:36:27.771]                       else if (inherits(cond, "condition")) {
[13:36:27.771]                         if (!is.null(pattern)) {
[13:36:27.771]                           computeRestarts <- base::computeRestarts
[13:36:27.771]                           grepl <- base::grepl
[13:36:27.771]                           restarts <- computeRestarts(cond)
[13:36:27.771]                           for (restart in restarts) {
[13:36:27.771]                             name <- restart$name
[13:36:27.771]                             if (is.null(name)) 
[13:36:27.771]                               next
[13:36:27.771]                             if (!grepl(pattern, name)) 
[13:36:27.771]                               next
[13:36:27.771]                             invokeRestart(restart)
[13:36:27.771]                             muffled <- TRUE
[13:36:27.771]                             break
[13:36:27.771]                           }
[13:36:27.771]                         }
[13:36:27.771]                       }
[13:36:27.771]                       invisible(muffled)
[13:36:27.771]                     }
[13:36:27.771]                     muffleCondition(cond, pattern = "^muffle")
[13:36:27.771]                   }
[13:36:27.771]                 }
[13:36:27.771]             }
[13:36:27.771]         }))
[13:36:27.771]     }, error = function(ex) {
[13:36:27.771]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:27.771]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:27.771]                 ...future.rng), started = ...future.startTime, 
[13:36:27.771]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:27.771]             version = "1.8"), class = "FutureResult")
[13:36:27.771]     }, finally = {
[13:36:27.771]         if (!identical(...future.workdir, getwd())) 
[13:36:27.771]             setwd(...future.workdir)
[13:36:27.771]         {
[13:36:27.771]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:27.771]                 ...future.oldOptions$nwarnings <- NULL
[13:36:27.771]             }
[13:36:27.771]             base::options(...future.oldOptions)
[13:36:27.771]             if (.Platform$OS.type == "windows") {
[13:36:27.771]                 old_names <- names(...future.oldEnvVars)
[13:36:27.771]                 envs <- base::Sys.getenv()
[13:36:27.771]                 names <- names(envs)
[13:36:27.771]                 common <- intersect(names, old_names)
[13:36:27.771]                 added <- setdiff(names, old_names)
[13:36:27.771]                 removed <- setdiff(old_names, names)
[13:36:27.771]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:27.771]                   envs[common]]
[13:36:27.771]                 NAMES <- toupper(changed)
[13:36:27.771]                 args <- list()
[13:36:27.771]                 for (kk in seq_along(NAMES)) {
[13:36:27.771]                   name <- changed[[kk]]
[13:36:27.771]                   NAME <- NAMES[[kk]]
[13:36:27.771]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:27.771]                     next
[13:36:27.771]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:27.771]                 }
[13:36:27.771]                 NAMES <- toupper(added)
[13:36:27.771]                 for (kk in seq_along(NAMES)) {
[13:36:27.771]                   name <- added[[kk]]
[13:36:27.771]                   NAME <- NAMES[[kk]]
[13:36:27.771]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:27.771]                     next
[13:36:27.771]                   args[[name]] <- ""
[13:36:27.771]                 }
[13:36:27.771]                 NAMES <- toupper(removed)
[13:36:27.771]                 for (kk in seq_along(NAMES)) {
[13:36:27.771]                   name <- removed[[kk]]
[13:36:27.771]                   NAME <- NAMES[[kk]]
[13:36:27.771]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:27.771]                     next
[13:36:27.771]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:27.771]                 }
[13:36:27.771]                 if (length(args) > 0) 
[13:36:27.771]                   base::do.call(base::Sys.setenv, args = args)
[13:36:27.771]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:27.771]             }
[13:36:27.771]             else {
[13:36:27.771]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:27.771]             }
[13:36:27.771]             {
[13:36:27.771]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:27.771]                   0L) {
[13:36:27.771]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:27.771]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:27.771]                   base::options(opts)
[13:36:27.771]                 }
[13:36:27.771]                 {
[13:36:27.771]                   {
[13:36:27.771]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:27.771]                     NULL
[13:36:27.771]                   }
[13:36:27.771]                   options(future.plan = NULL)
[13:36:27.771]                   if (is.na(NA_character_)) 
[13:36:27.771]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:27.771]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:27.771]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:27.771]                     .init = FALSE)
[13:36:27.771]                 }
[13:36:27.771]             }
[13:36:27.771]         }
[13:36:27.771]     })
[13:36:27.771]     if (TRUE) {
[13:36:27.771]         base::sink(type = "output", split = FALSE)
[13:36:27.771]         if (TRUE) {
[13:36:27.771]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:27.771]         }
[13:36:27.771]         else {
[13:36:27.771]             ...future.result["stdout"] <- base::list(NULL)
[13:36:27.771]         }
[13:36:27.771]         base::close(...future.stdout)
[13:36:27.771]         ...future.stdout <- NULL
[13:36:27.771]     }
[13:36:27.771]     ...future.result$conditions <- ...future.conditions
[13:36:27.771]     ...future.result$finished <- base::Sys.time()
[13:36:27.771]     ...future.result
[13:36:27.771] }
[13:36:27.774] assign_globals() ...
[13:36:27.774] List of 1
[13:36:27.774]  $ a: num 1
[13:36:27.774]  - attr(*, "where")=List of 1
[13:36:27.774]   ..$ a:<environment: R_EmptyEnv> 
[13:36:27.774]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:27.774]  - attr(*, "resolved")= logi FALSE
[13:36:27.774]  - attr(*, "total_size")= num 56
[13:36:27.774]  - attr(*, "already-done")= logi TRUE
[13:36:27.777] - copied ‘a’ to environment
[13:36:27.777] assign_globals() ... done
[13:36:27.777] requestCore(): workers = 2
[13:36:27.779] MulticoreFuture started
[13:36:27.779] - Launch lazy future ... done
[13:36:27.780] run() for ‘MulticoreFuture’ ... done
[13:36:27.780] result() for MulticoreFuture ...
[13:36:27.780] plan(): Setting new future strategy stack:
[13:36:27.780] List of future strategies:
[13:36:27.780] 1. sequential:
[13:36:27.780]    - args: function (..., envir = parent.frame())
[13:36:27.780]    - tweaked: FALSE
[13:36:27.780]    - call: NULL
[13:36:27.781] plan(): nbrOfWorkers() = 1
[13:36:27.788] plan(): Setting new future strategy stack:
[13:36:27.788] List of future strategies:
[13:36:27.788] 1. multicore:
[13:36:27.788]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:36:27.788]    - tweaked: FALSE
[13:36:27.788]    - call: plan(strategy)
[13:36:27.793] plan(): nbrOfWorkers() = 2
[13:36:27.796] result() for MulticoreFuture ...
[13:36:27.797] result() for MulticoreFuture ... done
[13:36:27.797] result() for MulticoreFuture ... done
[13:36:27.797] result() for MulticoreFuture ...
[13:36:27.797] result() for MulticoreFuture ... done
[13:36:27.797] getGlobalsAndPackages() ...
[13:36:27.797] Searching for globals...
[13:36:27.799] - globals found: [3] ‘{’, ‘*’, ‘a’
[13:36:27.799] Searching for globals ... DONE
[13:36:27.799] Resolving globals: FALSE
[13:36:27.800] The total size of the 1 globals is 56 bytes (56 bytes)
[13:36:27.800] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[13:36:27.800] - globals: [1] ‘a’
[13:36:27.801] 
[13:36:27.801] getGlobalsAndPackages() ... DONE
[13:36:27.801] run() for ‘Future’ ...
[13:36:27.801] - state: ‘created’
[13:36:27.801] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:36:27.805] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:27.805] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:36:27.806]   - Field: ‘label’
[13:36:27.806]   - Field: ‘local’
[13:36:27.806]   - Field: ‘owner’
[13:36:27.806]   - Field: ‘envir’
[13:36:27.806]   - Field: ‘workers’
[13:36:27.806]   - Field: ‘packages’
[13:36:27.806]   - Field: ‘gc’
[13:36:27.806]   - Field: ‘job’
[13:36:27.807]   - Field: ‘conditions’
[13:36:27.807]   - Field: ‘expr’
[13:36:27.807]   - Field: ‘uuid’
[13:36:27.807]   - Field: ‘seed’
[13:36:27.807]   - Field: ‘version’
[13:36:27.807]   - Field: ‘result’
[13:36:27.807]   - Field: ‘asynchronous’
[13:36:27.807]   - Field: ‘calls’
[13:36:27.807]   - Field: ‘globals’
[13:36:27.808]   - Field: ‘stdout’
[13:36:27.808]   - Field: ‘earlySignal’
[13:36:27.808]   - Field: ‘lazy’
[13:36:27.808]   - Field: ‘state’
[13:36:27.808] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:36:27.808] - Launch lazy future ...
[13:36:27.808] Packages needed by the future expression (n = 0): <none>
[13:36:27.809] Packages needed by future strategies (n = 0): <none>
[13:36:27.809] {
[13:36:27.809]     {
[13:36:27.809]         {
[13:36:27.809]             ...future.startTime <- base::Sys.time()
[13:36:27.809]             {
[13:36:27.809]                 {
[13:36:27.809]                   {
[13:36:27.809]                     {
[13:36:27.809]                       base::local({
[13:36:27.809]                         has_future <- base::requireNamespace("future", 
[13:36:27.809]                           quietly = TRUE)
[13:36:27.809]                         if (has_future) {
[13:36:27.809]                           ns <- base::getNamespace("future")
[13:36:27.809]                           version <- ns[[".package"]][["version"]]
[13:36:27.809]                           if (is.null(version)) 
[13:36:27.809]                             version <- utils::packageVersion("future")
[13:36:27.809]                         }
[13:36:27.809]                         else {
[13:36:27.809]                           version <- NULL
[13:36:27.809]                         }
[13:36:27.809]                         if (!has_future || version < "1.8.0") {
[13:36:27.809]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:27.809]                             "", base::R.version$version.string), 
[13:36:27.809]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:27.809]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:27.809]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:27.809]                               "release", "version")], collapse = " "), 
[13:36:27.809]                             hostname = base::Sys.info()[["nodename"]])
[13:36:27.809]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:27.809]                             info)
[13:36:27.809]                           info <- base::paste(info, collapse = "; ")
[13:36:27.809]                           if (!has_future) {
[13:36:27.809]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:27.809]                               info)
[13:36:27.809]                           }
[13:36:27.809]                           else {
[13:36:27.809]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:27.809]                               info, version)
[13:36:27.809]                           }
[13:36:27.809]                           base::stop(msg)
[13:36:27.809]                         }
[13:36:27.809]                       })
[13:36:27.809]                     }
[13:36:27.809]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:27.809]                     base::options(mc.cores = 1L)
[13:36:27.809]                   }
[13:36:27.809]                   ...future.strategy.old <- future::plan("list")
[13:36:27.809]                   options(future.plan = NULL)
[13:36:27.809]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:27.809]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:27.809]                 }
[13:36:27.809]                 ...future.workdir <- getwd()
[13:36:27.809]             }
[13:36:27.809]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:27.809]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:27.809]         }
[13:36:27.809]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:27.809]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:27.809]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:27.809]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:27.809]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:27.809]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:27.809]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:27.809]             base::names(...future.oldOptions))
[13:36:27.809]     }
[13:36:27.809]     if (FALSE) {
[13:36:27.809]     }
[13:36:27.809]     else {
[13:36:27.809]         if (TRUE) {
[13:36:27.809]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:27.809]                 open = "w")
[13:36:27.809]         }
[13:36:27.809]         else {
[13:36:27.809]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:27.809]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:27.809]         }
[13:36:27.809]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:27.809]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:27.809]             base::sink(type = "output", split = FALSE)
[13:36:27.809]             base::close(...future.stdout)
[13:36:27.809]         }, add = TRUE)
[13:36:27.809]     }
[13:36:27.809]     ...future.frame <- base::sys.nframe()
[13:36:27.809]     ...future.conditions <- base::list()
[13:36:27.809]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:27.809]     if (FALSE) {
[13:36:27.809]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:27.809]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:27.809]     }
[13:36:27.809]     ...future.result <- base::tryCatch({
[13:36:27.809]         base::withCallingHandlers({
[13:36:27.809]             ...future.value <- base::withVisible(base::local({
[13:36:27.809]                 withCallingHandlers({
[13:36:27.809]                   {
[13:36:27.809]                     2 * a
[13:36:27.809]                   }
[13:36:27.809]                 }, immediateCondition = function(cond) {
[13:36:27.809]                   save_rds <- function (object, pathname, ...) 
[13:36:27.809]                   {
[13:36:27.809]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:36:27.809]                     if (file_test("-f", pathname_tmp)) {
[13:36:27.809]                       fi_tmp <- file.info(pathname_tmp)
[13:36:27.809]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:36:27.809]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:27.809]                         fi_tmp[["mtime"]])
[13:36:27.809]                     }
[13:36:27.809]                     tryCatch({
[13:36:27.809]                       saveRDS(object, file = pathname_tmp, ...)
[13:36:27.809]                     }, error = function(ex) {
[13:36:27.809]                       msg <- conditionMessage(ex)
[13:36:27.809]                       fi_tmp <- file.info(pathname_tmp)
[13:36:27.809]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:36:27.809]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:27.809]                         fi_tmp[["mtime"]], msg)
[13:36:27.809]                       ex$message <- msg
[13:36:27.809]                       stop(ex)
[13:36:27.809]                     })
[13:36:27.809]                     stopifnot(file_test("-f", pathname_tmp))
[13:36:27.809]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:36:27.809]                     if (!res || file_test("-f", pathname_tmp)) {
[13:36:27.809]                       fi_tmp <- file.info(pathname_tmp)
[13:36:27.809]                       fi <- file.info(pathname)
[13:36:27.809]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:36:27.809]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:27.809]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:36:27.809]                         fi[["size"]], fi[["mtime"]])
[13:36:27.809]                       stop(msg)
[13:36:27.809]                     }
[13:36:27.809]                     invisible(pathname)
[13:36:27.809]                   }
[13:36:27.809]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:36:27.809]                     rootPath = tempdir()) 
[13:36:27.809]                   {
[13:36:27.809]                     obj <- list(time = Sys.time(), condition = cond)
[13:36:27.809]                     file <- tempfile(pattern = class(cond)[1], 
[13:36:27.809]                       tmpdir = path, fileext = ".rds")
[13:36:27.809]                     save_rds(obj, file)
[13:36:27.809]                   }
[13:36:27.809]                   saveImmediateCondition(cond, path = "/tmp/Rtmp4CDhtK/.future/immediateConditions")
[13:36:27.809]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:27.809]                   {
[13:36:27.809]                     inherits <- base::inherits
[13:36:27.809]                     invokeRestart <- base::invokeRestart
[13:36:27.809]                     is.null <- base::is.null
[13:36:27.809]                     muffled <- FALSE
[13:36:27.809]                     if (inherits(cond, "message")) {
[13:36:27.809]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:27.809]                       if (muffled) 
[13:36:27.809]                         invokeRestart("muffleMessage")
[13:36:27.809]                     }
[13:36:27.809]                     else if (inherits(cond, "warning")) {
[13:36:27.809]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:27.809]                       if (muffled) 
[13:36:27.809]                         invokeRestart("muffleWarning")
[13:36:27.809]                     }
[13:36:27.809]                     else if (inherits(cond, "condition")) {
[13:36:27.809]                       if (!is.null(pattern)) {
[13:36:27.809]                         computeRestarts <- base::computeRestarts
[13:36:27.809]                         grepl <- base::grepl
[13:36:27.809]                         restarts <- computeRestarts(cond)
[13:36:27.809]                         for (restart in restarts) {
[13:36:27.809]                           name <- restart$name
[13:36:27.809]                           if (is.null(name)) 
[13:36:27.809]                             next
[13:36:27.809]                           if (!grepl(pattern, name)) 
[13:36:27.809]                             next
[13:36:27.809]                           invokeRestart(restart)
[13:36:27.809]                           muffled <- TRUE
[13:36:27.809]                           break
[13:36:27.809]                         }
[13:36:27.809]                       }
[13:36:27.809]                     }
[13:36:27.809]                     invisible(muffled)
[13:36:27.809]                   }
[13:36:27.809]                   muffleCondition(cond)
[13:36:27.809]                 })
[13:36:27.809]             }))
[13:36:27.809]             future::FutureResult(value = ...future.value$value, 
[13:36:27.809]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:27.809]                   ...future.rng), globalenv = if (FALSE) 
[13:36:27.809]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:27.809]                     ...future.globalenv.names))
[13:36:27.809]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:27.809]         }, condition = base::local({
[13:36:27.809]             c <- base::c
[13:36:27.809]             inherits <- base::inherits
[13:36:27.809]             invokeRestart <- base::invokeRestart
[13:36:27.809]             length <- base::length
[13:36:27.809]             list <- base::list
[13:36:27.809]             seq.int <- base::seq.int
[13:36:27.809]             signalCondition <- base::signalCondition
[13:36:27.809]             sys.calls <- base::sys.calls
[13:36:27.809]             `[[` <- base::`[[`
[13:36:27.809]             `+` <- base::`+`
[13:36:27.809]             `<<-` <- base::`<<-`
[13:36:27.809]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:27.809]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:27.809]                   3L)]
[13:36:27.809]             }
[13:36:27.809]             function(cond) {
[13:36:27.809]                 is_error <- inherits(cond, "error")
[13:36:27.809]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:27.809]                   NULL)
[13:36:27.809]                 if (is_error) {
[13:36:27.809]                   sessionInformation <- function() {
[13:36:27.809]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:27.809]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:27.809]                       search = base::search(), system = base::Sys.info())
[13:36:27.809]                   }
[13:36:27.809]                   ...future.conditions[[length(...future.conditions) + 
[13:36:27.809]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:27.809]                     cond$call), session = sessionInformation(), 
[13:36:27.809]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:27.809]                   signalCondition(cond)
[13:36:27.809]                 }
[13:36:27.809]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:27.809]                 "immediateCondition"))) {
[13:36:27.809]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:27.809]                   ...future.conditions[[length(...future.conditions) + 
[13:36:27.809]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:27.809]                   if (TRUE && !signal) {
[13:36:27.809]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:27.809]                     {
[13:36:27.809]                       inherits <- base::inherits
[13:36:27.809]                       invokeRestart <- base::invokeRestart
[13:36:27.809]                       is.null <- base::is.null
[13:36:27.809]                       muffled <- FALSE
[13:36:27.809]                       if (inherits(cond, "message")) {
[13:36:27.809]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:27.809]                         if (muffled) 
[13:36:27.809]                           invokeRestart("muffleMessage")
[13:36:27.809]                       }
[13:36:27.809]                       else if (inherits(cond, "warning")) {
[13:36:27.809]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:27.809]                         if (muffled) 
[13:36:27.809]                           invokeRestart("muffleWarning")
[13:36:27.809]                       }
[13:36:27.809]                       else if (inherits(cond, "condition")) {
[13:36:27.809]                         if (!is.null(pattern)) {
[13:36:27.809]                           computeRestarts <- base::computeRestarts
[13:36:27.809]                           grepl <- base::grepl
[13:36:27.809]                           restarts <- computeRestarts(cond)
[13:36:27.809]                           for (restart in restarts) {
[13:36:27.809]                             name <- restart$name
[13:36:27.809]                             if (is.null(name)) 
[13:36:27.809]                               next
[13:36:27.809]                             if (!grepl(pattern, name)) 
[13:36:27.809]                               next
[13:36:27.809]                             invokeRestart(restart)
[13:36:27.809]                             muffled <- TRUE
[13:36:27.809]                             break
[13:36:27.809]                           }
[13:36:27.809]                         }
[13:36:27.809]                       }
[13:36:27.809]                       invisible(muffled)
[13:36:27.809]                     }
[13:36:27.809]                     muffleCondition(cond, pattern = "^muffle")
[13:36:27.809]                   }
[13:36:27.809]                 }
[13:36:27.809]                 else {
[13:36:27.809]                   if (TRUE) {
[13:36:27.809]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:27.809]                     {
[13:36:27.809]                       inherits <- base::inherits
[13:36:27.809]                       invokeRestart <- base::invokeRestart
[13:36:27.809]                       is.null <- base::is.null
[13:36:27.809]                       muffled <- FALSE
[13:36:27.809]                       if (inherits(cond, "message")) {
[13:36:27.809]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:27.809]                         if (muffled) 
[13:36:27.809]                           invokeRestart("muffleMessage")
[13:36:27.809]                       }
[13:36:27.809]                       else if (inherits(cond, "warning")) {
[13:36:27.809]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:27.809]                         if (muffled) 
[13:36:27.809]                           invokeRestart("muffleWarning")
[13:36:27.809]                       }
[13:36:27.809]                       else if (inherits(cond, "condition")) {
[13:36:27.809]                         if (!is.null(pattern)) {
[13:36:27.809]                           computeRestarts <- base::computeRestarts
[13:36:27.809]                           grepl <- base::grepl
[13:36:27.809]                           restarts <- computeRestarts(cond)
[13:36:27.809]                           for (restart in restarts) {
[13:36:27.809]                             name <- restart$name
[13:36:27.809]                             if (is.null(name)) 
[13:36:27.809]                               next
[13:36:27.809]                             if (!grepl(pattern, name)) 
[13:36:27.809]                               next
[13:36:27.809]                             invokeRestart(restart)
[13:36:27.809]                             muffled <- TRUE
[13:36:27.809]                             break
[13:36:27.809]                           }
[13:36:27.809]                         }
[13:36:27.809]                       }
[13:36:27.809]                       invisible(muffled)
[13:36:27.809]                     }
[13:36:27.809]                     muffleCondition(cond, pattern = "^muffle")
[13:36:27.809]                   }
[13:36:27.809]                 }
[13:36:27.809]             }
[13:36:27.809]         }))
[13:36:27.809]     }, error = function(ex) {
[13:36:27.809]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:27.809]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:27.809]                 ...future.rng), started = ...future.startTime, 
[13:36:27.809]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:27.809]             version = "1.8"), class = "FutureResult")
[13:36:27.809]     }, finally = {
[13:36:27.809]         if (!identical(...future.workdir, getwd())) 
[13:36:27.809]             setwd(...future.workdir)
[13:36:27.809]         {
[13:36:27.809]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:27.809]                 ...future.oldOptions$nwarnings <- NULL
[13:36:27.809]             }
[13:36:27.809]             base::options(...future.oldOptions)
[13:36:27.809]             if (.Platform$OS.type == "windows") {
[13:36:27.809]                 old_names <- names(...future.oldEnvVars)
[13:36:27.809]                 envs <- base::Sys.getenv()
[13:36:27.809]                 names <- names(envs)
[13:36:27.809]                 common <- intersect(names, old_names)
[13:36:27.809]                 added <- setdiff(names, old_names)
[13:36:27.809]                 removed <- setdiff(old_names, names)
[13:36:27.809]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:27.809]                   envs[common]]
[13:36:27.809]                 NAMES <- toupper(changed)
[13:36:27.809]                 args <- list()
[13:36:27.809]                 for (kk in seq_along(NAMES)) {
[13:36:27.809]                   name <- changed[[kk]]
[13:36:27.809]                   NAME <- NAMES[[kk]]
[13:36:27.809]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:27.809]                     next
[13:36:27.809]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:27.809]                 }
[13:36:27.809]                 NAMES <- toupper(added)
[13:36:27.809]                 for (kk in seq_along(NAMES)) {
[13:36:27.809]                   name <- added[[kk]]
[13:36:27.809]                   NAME <- NAMES[[kk]]
[13:36:27.809]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:27.809]                     next
[13:36:27.809]                   args[[name]] <- ""
[13:36:27.809]                 }
[13:36:27.809]                 NAMES <- toupper(removed)
[13:36:27.809]                 for (kk in seq_along(NAMES)) {
[13:36:27.809]                   name <- removed[[kk]]
[13:36:27.809]                   NAME <- NAMES[[kk]]
[13:36:27.809]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:27.809]                     next
[13:36:27.809]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:27.809]                 }
[13:36:27.809]                 if (length(args) > 0) 
[13:36:27.809]                   base::do.call(base::Sys.setenv, args = args)
[13:36:27.809]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:27.809]             }
[13:36:27.809]             else {
[13:36:27.809]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:27.809]             }
[13:36:27.809]             {
[13:36:27.809]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:27.809]                   0L) {
[13:36:27.809]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:27.809]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:27.809]                   base::options(opts)
[13:36:27.809]                 }
[13:36:27.809]                 {
[13:36:27.809]                   {
[13:36:27.809]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:27.809]                     NULL
[13:36:27.809]                   }
[13:36:27.809]                   options(future.plan = NULL)
[13:36:27.809]                   if (is.na(NA_character_)) 
[13:36:27.809]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:27.809]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:27.809]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:27.809]                     .init = FALSE)
[13:36:27.809]                 }
[13:36:27.809]             }
[13:36:27.809]         }
[13:36:27.809]     })
[13:36:27.809]     if (TRUE) {
[13:36:27.809]         base::sink(type = "output", split = FALSE)
[13:36:27.809]         if (TRUE) {
[13:36:27.809]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:27.809]         }
[13:36:27.809]         else {
[13:36:27.809]             ...future.result["stdout"] <- base::list(NULL)
[13:36:27.809]         }
[13:36:27.809]         base::close(...future.stdout)
[13:36:27.809]         ...future.stdout <- NULL
[13:36:27.809]     }
[13:36:27.809]     ...future.result$conditions <- ...future.conditions
[13:36:27.809]     ...future.result$finished <- base::Sys.time()
[13:36:27.809]     ...future.result
[13:36:27.809] }
[13:36:27.811] assign_globals() ...
[13:36:27.811] List of 1
[13:36:27.811]  $ a: num 1
[13:36:27.811]  - attr(*, "where")=List of 1
[13:36:27.811]   ..$ a:<environment: R_EmptyEnv> 
[13:36:27.811]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:27.811]  - attr(*, "resolved")= logi FALSE
[13:36:27.811]  - attr(*, "total_size")= num 56
[13:36:27.811]  - attr(*, "already-done")= logi TRUE
[13:36:27.814] - copied ‘a’ to environment
[13:36:27.815] assign_globals() ... done
[13:36:27.815] requestCore(): workers = 2
[13:36:27.816] MulticoreFuture started
[13:36:27.817] - Launch lazy future ... done
[13:36:27.817] run() for ‘MulticoreFuture’ ... done
[13:36:27.817] result() for MulticoreFuture ...
[13:36:27.818] plan(): Setting new future strategy stack:
[13:36:27.818] List of future strategies:
[13:36:27.818] 1. sequential:
[13:36:27.818]    - args: function (..., envir = parent.frame())
[13:36:27.818]    - tweaked: FALSE
[13:36:27.818]    - call: NULL
[13:36:27.819] plan(): nbrOfWorkers() = 1
[13:36:27.821] plan(): Setting new future strategy stack:
[13:36:27.821] List of future strategies:
[13:36:27.821] 1. multicore:
[13:36:27.821]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:36:27.821]    - tweaked: FALSE
[13:36:27.821]    - call: plan(strategy)
[13:36:27.826] plan(): nbrOfWorkers() = 2
[13:36:27.827] result() for MulticoreFuture ...
[13:36:27.827] result() for MulticoreFuture ... done
[13:36:27.827] result() for MulticoreFuture ... done
[13:36:27.827] result() for MulticoreFuture ...
[13:36:27.827] result() for MulticoreFuture ... done
[13:36:27.828] getGlobalsAndPackages() ...
[13:36:27.828] Searching for globals...
[13:36:27.829] - globals found: [3] ‘{’, ‘*’, ‘a’
[13:36:27.829] Searching for globals ... DONE
[13:36:27.829] Resolving globals: FALSE
[13:36:27.830] The total size of the 1 globals is 56 bytes (56 bytes)
[13:36:27.830] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[13:36:27.831] - globals: [1] ‘a’
[13:36:27.831] 
[13:36:27.831] getGlobalsAndPackages() ... DONE
[13:36:27.831] run() for ‘Future’ ...
[13:36:27.831] - state: ‘created’
[13:36:27.831] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:36:27.836] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:27.836] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:36:27.836]   - Field: ‘label’
[13:36:27.836]   - Field: ‘local’
[13:36:27.836]   - Field: ‘owner’
[13:36:27.836]   - Field: ‘envir’
[13:36:27.836]   - Field: ‘workers’
[13:36:27.836]   - Field: ‘packages’
[13:36:27.837]   - Field: ‘gc’
[13:36:27.837]   - Field: ‘job’
[13:36:27.837]   - Field: ‘conditions’
[13:36:27.837]   - Field: ‘expr’
[13:36:27.837]   - Field: ‘uuid’
[13:36:27.837]   - Field: ‘seed’
[13:36:27.837]   - Field: ‘version’
[13:36:27.837]   - Field: ‘result’
[13:36:27.838]   - Field: ‘asynchronous’
[13:36:27.838]   - Field: ‘calls’
[13:36:27.838]   - Field: ‘globals’
[13:36:27.838]   - Field: ‘stdout’
[13:36:27.838]   - Field: ‘earlySignal’
[13:36:27.838]   - Field: ‘lazy’
[13:36:27.838]   - Field: ‘state’
[13:36:27.838] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:36:27.838] - Launch lazy future ...
[13:36:27.839] Packages needed by the future expression (n = 0): <none>
[13:36:27.839] Packages needed by future strategies (n = 0): <none>
[13:36:27.839] {
[13:36:27.839]     {
[13:36:27.839]         {
[13:36:27.839]             ...future.startTime <- base::Sys.time()
[13:36:27.839]             {
[13:36:27.839]                 {
[13:36:27.839]                   {
[13:36:27.839]                     {
[13:36:27.839]                       base::local({
[13:36:27.839]                         has_future <- base::requireNamespace("future", 
[13:36:27.839]                           quietly = TRUE)
[13:36:27.839]                         if (has_future) {
[13:36:27.839]                           ns <- base::getNamespace("future")
[13:36:27.839]                           version <- ns[[".package"]][["version"]]
[13:36:27.839]                           if (is.null(version)) 
[13:36:27.839]                             version <- utils::packageVersion("future")
[13:36:27.839]                         }
[13:36:27.839]                         else {
[13:36:27.839]                           version <- NULL
[13:36:27.839]                         }
[13:36:27.839]                         if (!has_future || version < "1.8.0") {
[13:36:27.839]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:27.839]                             "", base::R.version$version.string), 
[13:36:27.839]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:27.839]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:27.839]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:27.839]                               "release", "version")], collapse = " "), 
[13:36:27.839]                             hostname = base::Sys.info()[["nodename"]])
[13:36:27.839]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:27.839]                             info)
[13:36:27.839]                           info <- base::paste(info, collapse = "; ")
[13:36:27.839]                           if (!has_future) {
[13:36:27.839]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:27.839]                               info)
[13:36:27.839]                           }
[13:36:27.839]                           else {
[13:36:27.839]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:27.839]                               info, version)
[13:36:27.839]                           }
[13:36:27.839]                           base::stop(msg)
[13:36:27.839]                         }
[13:36:27.839]                       })
[13:36:27.839]                     }
[13:36:27.839]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:27.839]                     base::options(mc.cores = 1L)
[13:36:27.839]                   }
[13:36:27.839]                   ...future.strategy.old <- future::plan("list")
[13:36:27.839]                   options(future.plan = NULL)
[13:36:27.839]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:27.839]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:27.839]                 }
[13:36:27.839]                 ...future.workdir <- getwd()
[13:36:27.839]             }
[13:36:27.839]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:27.839]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:27.839]         }
[13:36:27.839]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:27.839]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:27.839]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:27.839]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:27.839]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:27.839]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:27.839]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:27.839]             base::names(...future.oldOptions))
[13:36:27.839]     }
[13:36:27.839]     if (FALSE) {
[13:36:27.839]     }
[13:36:27.839]     else {
[13:36:27.839]         if (TRUE) {
[13:36:27.839]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:27.839]                 open = "w")
[13:36:27.839]         }
[13:36:27.839]         else {
[13:36:27.839]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:27.839]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:27.839]         }
[13:36:27.839]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:27.839]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:27.839]             base::sink(type = "output", split = FALSE)
[13:36:27.839]             base::close(...future.stdout)
[13:36:27.839]         }, add = TRUE)
[13:36:27.839]     }
[13:36:27.839]     ...future.frame <- base::sys.nframe()
[13:36:27.839]     ...future.conditions <- base::list()
[13:36:27.839]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:27.839]     if (FALSE) {
[13:36:27.839]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:27.839]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:27.839]     }
[13:36:27.839]     ...future.result <- base::tryCatch({
[13:36:27.839]         base::withCallingHandlers({
[13:36:27.839]             ...future.value <- base::withVisible(base::local({
[13:36:27.839]                 withCallingHandlers({
[13:36:27.839]                   {
[13:36:27.839]                     2 * a
[13:36:27.839]                   }
[13:36:27.839]                 }, immediateCondition = function(cond) {
[13:36:27.839]                   save_rds <- function (object, pathname, ...) 
[13:36:27.839]                   {
[13:36:27.839]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:36:27.839]                     if (file_test("-f", pathname_tmp)) {
[13:36:27.839]                       fi_tmp <- file.info(pathname_tmp)
[13:36:27.839]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:36:27.839]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:27.839]                         fi_tmp[["mtime"]])
[13:36:27.839]                     }
[13:36:27.839]                     tryCatch({
[13:36:27.839]                       saveRDS(object, file = pathname_tmp, ...)
[13:36:27.839]                     }, error = function(ex) {
[13:36:27.839]                       msg <- conditionMessage(ex)
[13:36:27.839]                       fi_tmp <- file.info(pathname_tmp)
[13:36:27.839]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:36:27.839]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:27.839]                         fi_tmp[["mtime"]], msg)
[13:36:27.839]                       ex$message <- msg
[13:36:27.839]                       stop(ex)
[13:36:27.839]                     })
[13:36:27.839]                     stopifnot(file_test("-f", pathname_tmp))
[13:36:27.839]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:36:27.839]                     if (!res || file_test("-f", pathname_tmp)) {
[13:36:27.839]                       fi_tmp <- file.info(pathname_tmp)
[13:36:27.839]                       fi <- file.info(pathname)
[13:36:27.839]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:36:27.839]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:27.839]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:36:27.839]                         fi[["size"]], fi[["mtime"]])
[13:36:27.839]                       stop(msg)
[13:36:27.839]                     }
[13:36:27.839]                     invisible(pathname)
[13:36:27.839]                   }
[13:36:27.839]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:36:27.839]                     rootPath = tempdir()) 
[13:36:27.839]                   {
[13:36:27.839]                     obj <- list(time = Sys.time(), condition = cond)
[13:36:27.839]                     file <- tempfile(pattern = class(cond)[1], 
[13:36:27.839]                       tmpdir = path, fileext = ".rds")
[13:36:27.839]                     save_rds(obj, file)
[13:36:27.839]                   }
[13:36:27.839]                   saveImmediateCondition(cond, path = "/tmp/Rtmp4CDhtK/.future/immediateConditions")
[13:36:27.839]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:27.839]                   {
[13:36:27.839]                     inherits <- base::inherits
[13:36:27.839]                     invokeRestart <- base::invokeRestart
[13:36:27.839]                     is.null <- base::is.null
[13:36:27.839]                     muffled <- FALSE
[13:36:27.839]                     if (inherits(cond, "message")) {
[13:36:27.839]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:27.839]                       if (muffled) 
[13:36:27.839]                         invokeRestart("muffleMessage")
[13:36:27.839]                     }
[13:36:27.839]                     else if (inherits(cond, "warning")) {
[13:36:27.839]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:27.839]                       if (muffled) 
[13:36:27.839]                         invokeRestart("muffleWarning")
[13:36:27.839]                     }
[13:36:27.839]                     else if (inherits(cond, "condition")) {
[13:36:27.839]                       if (!is.null(pattern)) {
[13:36:27.839]                         computeRestarts <- base::computeRestarts
[13:36:27.839]                         grepl <- base::grepl
[13:36:27.839]                         restarts <- computeRestarts(cond)
[13:36:27.839]                         for (restart in restarts) {
[13:36:27.839]                           name <- restart$name
[13:36:27.839]                           if (is.null(name)) 
[13:36:27.839]                             next
[13:36:27.839]                           if (!grepl(pattern, name)) 
[13:36:27.839]                             next
[13:36:27.839]                           invokeRestart(restart)
[13:36:27.839]                           muffled <- TRUE
[13:36:27.839]                           break
[13:36:27.839]                         }
[13:36:27.839]                       }
[13:36:27.839]                     }
[13:36:27.839]                     invisible(muffled)
[13:36:27.839]                   }
[13:36:27.839]                   muffleCondition(cond)
[13:36:27.839]                 })
[13:36:27.839]             }))
[13:36:27.839]             future::FutureResult(value = ...future.value$value, 
[13:36:27.839]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:27.839]                   ...future.rng), globalenv = if (FALSE) 
[13:36:27.839]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:27.839]                     ...future.globalenv.names))
[13:36:27.839]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:27.839]         }, condition = base::local({
[13:36:27.839]             c <- base::c
[13:36:27.839]             inherits <- base::inherits
[13:36:27.839]             invokeRestart <- base::invokeRestart
[13:36:27.839]             length <- base::length
[13:36:27.839]             list <- base::list
[13:36:27.839]             seq.int <- base::seq.int
[13:36:27.839]             signalCondition <- base::signalCondition
[13:36:27.839]             sys.calls <- base::sys.calls
[13:36:27.839]             `[[` <- base::`[[`
[13:36:27.839]             `+` <- base::`+`
[13:36:27.839]             `<<-` <- base::`<<-`
[13:36:27.839]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:27.839]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:27.839]                   3L)]
[13:36:27.839]             }
[13:36:27.839]             function(cond) {
[13:36:27.839]                 is_error <- inherits(cond, "error")
[13:36:27.839]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:27.839]                   NULL)
[13:36:27.839]                 if (is_error) {
[13:36:27.839]                   sessionInformation <- function() {
[13:36:27.839]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:27.839]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:27.839]                       search = base::search(), system = base::Sys.info())
[13:36:27.839]                   }
[13:36:27.839]                   ...future.conditions[[length(...future.conditions) + 
[13:36:27.839]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:27.839]                     cond$call), session = sessionInformation(), 
[13:36:27.839]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:27.839]                   signalCondition(cond)
[13:36:27.839]                 }
[13:36:27.839]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:27.839]                 "immediateCondition"))) {
[13:36:27.839]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:27.839]                   ...future.conditions[[length(...future.conditions) + 
[13:36:27.839]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:27.839]                   if (TRUE && !signal) {
[13:36:27.839]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:27.839]                     {
[13:36:27.839]                       inherits <- base::inherits
[13:36:27.839]                       invokeRestart <- base::invokeRestart
[13:36:27.839]                       is.null <- base::is.null
[13:36:27.839]                       muffled <- FALSE
[13:36:27.839]                       if (inherits(cond, "message")) {
[13:36:27.839]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:27.839]                         if (muffled) 
[13:36:27.839]                           invokeRestart("muffleMessage")
[13:36:27.839]                       }
[13:36:27.839]                       else if (inherits(cond, "warning")) {
[13:36:27.839]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:27.839]                         if (muffled) 
[13:36:27.839]                           invokeRestart("muffleWarning")
[13:36:27.839]                       }
[13:36:27.839]                       else if (inherits(cond, "condition")) {
[13:36:27.839]                         if (!is.null(pattern)) {
[13:36:27.839]                           computeRestarts <- base::computeRestarts
[13:36:27.839]                           grepl <- base::grepl
[13:36:27.839]                           restarts <- computeRestarts(cond)
[13:36:27.839]                           for (restart in restarts) {
[13:36:27.839]                             name <- restart$name
[13:36:27.839]                             if (is.null(name)) 
[13:36:27.839]                               next
[13:36:27.839]                             if (!grepl(pattern, name)) 
[13:36:27.839]                               next
[13:36:27.839]                             invokeRestart(restart)
[13:36:27.839]                             muffled <- TRUE
[13:36:27.839]                             break
[13:36:27.839]                           }
[13:36:27.839]                         }
[13:36:27.839]                       }
[13:36:27.839]                       invisible(muffled)
[13:36:27.839]                     }
[13:36:27.839]                     muffleCondition(cond, pattern = "^muffle")
[13:36:27.839]                   }
[13:36:27.839]                 }
[13:36:27.839]                 else {
[13:36:27.839]                   if (TRUE) {
[13:36:27.839]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:27.839]                     {
[13:36:27.839]                       inherits <- base::inherits
[13:36:27.839]                       invokeRestart <- base::invokeRestart
[13:36:27.839]                       is.null <- base::is.null
[13:36:27.839]                       muffled <- FALSE
[13:36:27.839]                       if (inherits(cond, "message")) {
[13:36:27.839]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:27.839]                         if (muffled) 
[13:36:27.839]                           invokeRestart("muffleMessage")
[13:36:27.839]                       }
[13:36:27.839]                       else if (inherits(cond, "warning")) {
[13:36:27.839]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:27.839]                         if (muffled) 
[13:36:27.839]                           invokeRestart("muffleWarning")
[13:36:27.839]                       }
[13:36:27.839]                       else if (inherits(cond, "condition")) {
[13:36:27.839]                         if (!is.null(pattern)) {
[13:36:27.839]                           computeRestarts <- base::computeRestarts
[13:36:27.839]                           grepl <- base::grepl
[13:36:27.839]                           restarts <- computeRestarts(cond)
[13:36:27.839]                           for (restart in restarts) {
[13:36:27.839]                             name <- restart$name
[13:36:27.839]                             if (is.null(name)) 
[13:36:27.839]                               next
[13:36:27.839]                             if (!grepl(pattern, name)) 
[13:36:27.839]                               next
[13:36:27.839]                             invokeRestart(restart)
[13:36:27.839]                             muffled <- TRUE
[13:36:27.839]                             break
[13:36:27.839]                           }
[13:36:27.839]                         }
[13:36:27.839]                       }
[13:36:27.839]                       invisible(muffled)
[13:36:27.839]                     }
[13:36:27.839]                     muffleCondition(cond, pattern = "^muffle")
[13:36:27.839]                   }
[13:36:27.839]                 }
[13:36:27.839]             }
[13:36:27.839]         }))
[13:36:27.839]     }, error = function(ex) {
[13:36:27.839]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:27.839]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:27.839]                 ...future.rng), started = ...future.startTime, 
[13:36:27.839]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:27.839]             version = "1.8"), class = "FutureResult")
[13:36:27.839]     }, finally = {
[13:36:27.839]         if (!identical(...future.workdir, getwd())) 
[13:36:27.839]             setwd(...future.workdir)
[13:36:27.839]         {
[13:36:27.839]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:27.839]                 ...future.oldOptions$nwarnings <- NULL
[13:36:27.839]             }
[13:36:27.839]             base::options(...future.oldOptions)
[13:36:27.839]             if (.Platform$OS.type == "windows") {
[13:36:27.839]                 old_names <- names(...future.oldEnvVars)
[13:36:27.839]                 envs <- base::Sys.getenv()
[13:36:27.839]                 names <- names(envs)
[13:36:27.839]                 common <- intersect(names, old_names)
[13:36:27.839]                 added <- setdiff(names, old_names)
[13:36:27.839]                 removed <- setdiff(old_names, names)
[13:36:27.839]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:27.839]                   envs[common]]
[13:36:27.839]                 NAMES <- toupper(changed)
[13:36:27.839]                 args <- list()
[13:36:27.839]                 for (kk in seq_along(NAMES)) {
[13:36:27.839]                   name <- changed[[kk]]
[13:36:27.839]                   NAME <- NAMES[[kk]]
[13:36:27.839]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:27.839]                     next
[13:36:27.839]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:27.839]                 }
[13:36:27.839]                 NAMES <- toupper(added)
[13:36:27.839]                 for (kk in seq_along(NAMES)) {
[13:36:27.839]                   name <- added[[kk]]
[13:36:27.839]                   NAME <- NAMES[[kk]]
[13:36:27.839]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:27.839]                     next
[13:36:27.839]                   args[[name]] <- ""
[13:36:27.839]                 }
[13:36:27.839]                 NAMES <- toupper(removed)
[13:36:27.839]                 for (kk in seq_along(NAMES)) {
[13:36:27.839]                   name <- removed[[kk]]
[13:36:27.839]                   NAME <- NAMES[[kk]]
[13:36:27.839]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:27.839]                     next
[13:36:27.839]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:27.839]                 }
[13:36:27.839]                 if (length(args) > 0) 
[13:36:27.839]                   base::do.call(base::Sys.setenv, args = args)
[13:36:27.839]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:27.839]             }
[13:36:27.839]             else {
[13:36:27.839]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:27.839]             }
[13:36:27.839]             {
[13:36:27.839]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:27.839]                   0L) {
[13:36:27.839]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:27.839]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:27.839]                   base::options(opts)
[13:36:27.839]                 }
[13:36:27.839]                 {
[13:36:27.839]                   {
[13:36:27.839]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:27.839]                     NULL
[13:36:27.839]                   }
[13:36:27.839]                   options(future.plan = NULL)
[13:36:27.839]                   if (is.na(NA_character_)) 
[13:36:27.839]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:27.839]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:27.839]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:27.839]                     .init = FALSE)
[13:36:27.839]                 }
[13:36:27.839]             }
[13:36:27.839]         }
[13:36:27.839]     })
[13:36:27.839]     if (TRUE) {
[13:36:27.839]         base::sink(type = "output", split = FALSE)
[13:36:27.839]         if (TRUE) {
[13:36:27.839]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:27.839]         }
[13:36:27.839]         else {
[13:36:27.839]             ...future.result["stdout"] <- base::list(NULL)
[13:36:27.839]         }
[13:36:27.839]         base::close(...future.stdout)
[13:36:27.839]         ...future.stdout <- NULL
[13:36:27.839]     }
[13:36:27.839]     ...future.result$conditions <- ...future.conditions
[13:36:27.839]     ...future.result$finished <- base::Sys.time()
[13:36:27.839]     ...future.result
[13:36:27.839] }
[13:36:27.842] assign_globals() ...
[13:36:27.842] List of 1
[13:36:27.842]  $ a: num 1
[13:36:27.842]  - attr(*, "where")=List of 1
[13:36:27.842]   ..$ a:<environment: R_EmptyEnv> 
[13:36:27.842]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:27.842]  - attr(*, "resolved")= logi FALSE
[13:36:27.842]  - attr(*, "total_size")= num 56
[13:36:27.842]  - attr(*, "already-done")= logi TRUE
[13:36:27.845] - copied ‘a’ to environment
[13:36:27.845] assign_globals() ... done
[13:36:27.845] requestCore(): workers = 2
[13:36:27.847] MulticoreFuture started
[13:36:27.848] - Launch lazy future ... done
[13:36:27.848] run() for ‘MulticoreFuture’ ... done
[13:36:27.848] result() for MulticoreFuture ...
[13:36:27.848] plan(): Setting new future strategy stack:
[13:36:27.848] List of future strategies:
[13:36:27.848] 1. sequential:
[13:36:27.848]    - args: function (..., envir = parent.frame())
[13:36:27.848]    - tweaked: FALSE
[13:36:27.848]    - call: NULL
[13:36:27.849] plan(): nbrOfWorkers() = 1
[13:36:27.856] plan(): Setting new future strategy stack:
[13:36:27.856] List of future strategies:
[13:36:27.856] 1. multicore:
[13:36:27.856]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:36:27.856]    - tweaked: FALSE
[13:36:27.856]    - call: plan(strategy)
[13:36:27.862] plan(): nbrOfWorkers() = 2
[13:36:27.863] result() for MulticoreFuture ...
[13:36:27.863] result() for MulticoreFuture ... done
[13:36:27.863] result() for MulticoreFuture ... done
[13:36:27.866] result() for MulticoreFuture ...
[13:36:27.866] result() for MulticoreFuture ... done
[13:36:27.866] getGlobalsAndPackages() ...
[13:36:27.867] Searching for globals...
[13:36:27.868] - globals found: [3] ‘{’, ‘*’, ‘a’
[13:36:27.868] Searching for globals ... DONE
[13:36:27.868] Resolving globals: FALSE
[13:36:27.869] The total size of the 1 globals is 56 bytes (56 bytes)
[13:36:27.869] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[13:36:27.870] - globals: [1] ‘a’
[13:36:27.870] 
[13:36:27.870] getGlobalsAndPackages() ... DONE
[13:36:27.870] run() for ‘Future’ ...
[13:36:27.870] - state: ‘created’
[13:36:27.871] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:36:27.874] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:27.874] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:36:27.875]   - Field: ‘label’
[13:36:27.875]   - Field: ‘local’
[13:36:27.875]   - Field: ‘owner’
[13:36:27.875]   - Field: ‘envir’
[13:36:27.875]   - Field: ‘workers’
[13:36:27.875]   - Field: ‘packages’
[13:36:27.875]   - Field: ‘gc’
[13:36:27.875]   - Field: ‘job’
[13:36:27.876]   - Field: ‘conditions’
[13:36:27.876]   - Field: ‘expr’
[13:36:27.876]   - Field: ‘uuid’
[13:36:27.876]   - Field: ‘seed’
[13:36:27.876]   - Field: ‘version’
[13:36:27.876]   - Field: ‘result’
[13:36:27.876]   - Field: ‘asynchronous’
[13:36:27.876]   - Field: ‘calls’
[13:36:27.877]   - Field: ‘globals’
[13:36:27.877]   - Field: ‘stdout’
[13:36:27.877]   - Field: ‘earlySignal’
[13:36:27.877]   - Field: ‘lazy’
[13:36:27.877]   - Field: ‘state’
[13:36:27.877] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:36:27.877] - Launch lazy future ...
[13:36:27.878] Packages needed by the future expression (n = 0): <none>
[13:36:27.878] Packages needed by future strategies (n = 0): <none>
[13:36:27.878] {
[13:36:27.878]     {
[13:36:27.878]         {
[13:36:27.878]             ...future.startTime <- base::Sys.time()
[13:36:27.878]             {
[13:36:27.878]                 {
[13:36:27.878]                   {
[13:36:27.878]                     {
[13:36:27.878]                       base::local({
[13:36:27.878]                         has_future <- base::requireNamespace("future", 
[13:36:27.878]                           quietly = TRUE)
[13:36:27.878]                         if (has_future) {
[13:36:27.878]                           ns <- base::getNamespace("future")
[13:36:27.878]                           version <- ns[[".package"]][["version"]]
[13:36:27.878]                           if (is.null(version)) 
[13:36:27.878]                             version <- utils::packageVersion("future")
[13:36:27.878]                         }
[13:36:27.878]                         else {
[13:36:27.878]                           version <- NULL
[13:36:27.878]                         }
[13:36:27.878]                         if (!has_future || version < "1.8.0") {
[13:36:27.878]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:27.878]                             "", base::R.version$version.string), 
[13:36:27.878]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:27.878]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:27.878]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:27.878]                               "release", "version")], collapse = " "), 
[13:36:27.878]                             hostname = base::Sys.info()[["nodename"]])
[13:36:27.878]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:27.878]                             info)
[13:36:27.878]                           info <- base::paste(info, collapse = "; ")
[13:36:27.878]                           if (!has_future) {
[13:36:27.878]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:27.878]                               info)
[13:36:27.878]                           }
[13:36:27.878]                           else {
[13:36:27.878]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:27.878]                               info, version)
[13:36:27.878]                           }
[13:36:27.878]                           base::stop(msg)
[13:36:27.878]                         }
[13:36:27.878]                       })
[13:36:27.878]                     }
[13:36:27.878]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:27.878]                     base::options(mc.cores = 1L)
[13:36:27.878]                   }
[13:36:27.878]                   ...future.strategy.old <- future::plan("list")
[13:36:27.878]                   options(future.plan = NULL)
[13:36:27.878]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:27.878]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:27.878]                 }
[13:36:27.878]                 ...future.workdir <- getwd()
[13:36:27.878]             }
[13:36:27.878]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:27.878]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:27.878]         }
[13:36:27.878]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:27.878]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:27.878]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:27.878]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:27.878]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:27.878]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:27.878]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:27.878]             base::names(...future.oldOptions))
[13:36:27.878]     }
[13:36:27.878]     if (FALSE) {
[13:36:27.878]     }
[13:36:27.878]     else {
[13:36:27.878]         if (TRUE) {
[13:36:27.878]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:27.878]                 open = "w")
[13:36:27.878]         }
[13:36:27.878]         else {
[13:36:27.878]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:27.878]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:27.878]         }
[13:36:27.878]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:27.878]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:27.878]             base::sink(type = "output", split = FALSE)
[13:36:27.878]             base::close(...future.stdout)
[13:36:27.878]         }, add = TRUE)
[13:36:27.878]     }
[13:36:27.878]     ...future.frame <- base::sys.nframe()
[13:36:27.878]     ...future.conditions <- base::list()
[13:36:27.878]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:27.878]     if (FALSE) {
[13:36:27.878]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:27.878]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:27.878]     }
[13:36:27.878]     ...future.result <- base::tryCatch({
[13:36:27.878]         base::withCallingHandlers({
[13:36:27.878]             ...future.value <- base::withVisible(base::local({
[13:36:27.878]                 withCallingHandlers({
[13:36:27.878]                   {
[13:36:27.878]                     2 * a
[13:36:27.878]                   }
[13:36:27.878]                 }, immediateCondition = function(cond) {
[13:36:27.878]                   save_rds <- function (object, pathname, ...) 
[13:36:27.878]                   {
[13:36:27.878]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:36:27.878]                     if (file_test("-f", pathname_tmp)) {
[13:36:27.878]                       fi_tmp <- file.info(pathname_tmp)
[13:36:27.878]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:36:27.878]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:27.878]                         fi_tmp[["mtime"]])
[13:36:27.878]                     }
[13:36:27.878]                     tryCatch({
[13:36:27.878]                       saveRDS(object, file = pathname_tmp, ...)
[13:36:27.878]                     }, error = function(ex) {
[13:36:27.878]                       msg <- conditionMessage(ex)
[13:36:27.878]                       fi_tmp <- file.info(pathname_tmp)
[13:36:27.878]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:36:27.878]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:27.878]                         fi_tmp[["mtime"]], msg)
[13:36:27.878]                       ex$message <- msg
[13:36:27.878]                       stop(ex)
[13:36:27.878]                     })
[13:36:27.878]                     stopifnot(file_test("-f", pathname_tmp))
[13:36:27.878]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:36:27.878]                     if (!res || file_test("-f", pathname_tmp)) {
[13:36:27.878]                       fi_tmp <- file.info(pathname_tmp)
[13:36:27.878]                       fi <- file.info(pathname)
[13:36:27.878]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:36:27.878]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:27.878]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:36:27.878]                         fi[["size"]], fi[["mtime"]])
[13:36:27.878]                       stop(msg)
[13:36:27.878]                     }
[13:36:27.878]                     invisible(pathname)
[13:36:27.878]                   }
[13:36:27.878]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:36:27.878]                     rootPath = tempdir()) 
[13:36:27.878]                   {
[13:36:27.878]                     obj <- list(time = Sys.time(), condition = cond)
[13:36:27.878]                     file <- tempfile(pattern = class(cond)[1], 
[13:36:27.878]                       tmpdir = path, fileext = ".rds")
[13:36:27.878]                     save_rds(obj, file)
[13:36:27.878]                   }
[13:36:27.878]                   saveImmediateCondition(cond, path = "/tmp/Rtmp4CDhtK/.future/immediateConditions")
[13:36:27.878]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:27.878]                   {
[13:36:27.878]                     inherits <- base::inherits
[13:36:27.878]                     invokeRestart <- base::invokeRestart
[13:36:27.878]                     is.null <- base::is.null
[13:36:27.878]                     muffled <- FALSE
[13:36:27.878]                     if (inherits(cond, "message")) {
[13:36:27.878]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:27.878]                       if (muffled) 
[13:36:27.878]                         invokeRestart("muffleMessage")
[13:36:27.878]                     }
[13:36:27.878]                     else if (inherits(cond, "warning")) {
[13:36:27.878]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:27.878]                       if (muffled) 
[13:36:27.878]                         invokeRestart("muffleWarning")
[13:36:27.878]                     }
[13:36:27.878]                     else if (inherits(cond, "condition")) {
[13:36:27.878]                       if (!is.null(pattern)) {
[13:36:27.878]                         computeRestarts <- base::computeRestarts
[13:36:27.878]                         grepl <- base::grepl
[13:36:27.878]                         restarts <- computeRestarts(cond)
[13:36:27.878]                         for (restart in restarts) {
[13:36:27.878]                           name <- restart$name
[13:36:27.878]                           if (is.null(name)) 
[13:36:27.878]                             next
[13:36:27.878]                           if (!grepl(pattern, name)) 
[13:36:27.878]                             next
[13:36:27.878]                           invokeRestart(restart)
[13:36:27.878]                           muffled <- TRUE
[13:36:27.878]                           break
[13:36:27.878]                         }
[13:36:27.878]                       }
[13:36:27.878]                     }
[13:36:27.878]                     invisible(muffled)
[13:36:27.878]                   }
[13:36:27.878]                   muffleCondition(cond)
[13:36:27.878]                 })
[13:36:27.878]             }))
[13:36:27.878]             future::FutureResult(value = ...future.value$value, 
[13:36:27.878]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:27.878]                   ...future.rng), globalenv = if (FALSE) 
[13:36:27.878]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:27.878]                     ...future.globalenv.names))
[13:36:27.878]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:27.878]         }, condition = base::local({
[13:36:27.878]             c <- base::c
[13:36:27.878]             inherits <- base::inherits
[13:36:27.878]             invokeRestart <- base::invokeRestart
[13:36:27.878]             length <- base::length
[13:36:27.878]             list <- base::list
[13:36:27.878]             seq.int <- base::seq.int
[13:36:27.878]             signalCondition <- base::signalCondition
[13:36:27.878]             sys.calls <- base::sys.calls
[13:36:27.878]             `[[` <- base::`[[`
[13:36:27.878]             `+` <- base::`+`
[13:36:27.878]             `<<-` <- base::`<<-`
[13:36:27.878]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:27.878]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:27.878]                   3L)]
[13:36:27.878]             }
[13:36:27.878]             function(cond) {
[13:36:27.878]                 is_error <- inherits(cond, "error")
[13:36:27.878]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:27.878]                   NULL)
[13:36:27.878]                 if (is_error) {
[13:36:27.878]                   sessionInformation <- function() {
[13:36:27.878]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:27.878]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:27.878]                       search = base::search(), system = base::Sys.info())
[13:36:27.878]                   }
[13:36:27.878]                   ...future.conditions[[length(...future.conditions) + 
[13:36:27.878]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:27.878]                     cond$call), session = sessionInformation(), 
[13:36:27.878]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:27.878]                   signalCondition(cond)
[13:36:27.878]                 }
[13:36:27.878]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:27.878]                 "immediateCondition"))) {
[13:36:27.878]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:27.878]                   ...future.conditions[[length(...future.conditions) + 
[13:36:27.878]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:27.878]                   if (TRUE && !signal) {
[13:36:27.878]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:27.878]                     {
[13:36:27.878]                       inherits <- base::inherits
[13:36:27.878]                       invokeRestart <- base::invokeRestart
[13:36:27.878]                       is.null <- base::is.null
[13:36:27.878]                       muffled <- FALSE
[13:36:27.878]                       if (inherits(cond, "message")) {
[13:36:27.878]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:27.878]                         if (muffled) 
[13:36:27.878]                           invokeRestart("muffleMessage")
[13:36:27.878]                       }
[13:36:27.878]                       else if (inherits(cond, "warning")) {
[13:36:27.878]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:27.878]                         if (muffled) 
[13:36:27.878]                           invokeRestart("muffleWarning")
[13:36:27.878]                       }
[13:36:27.878]                       else if (inherits(cond, "condition")) {
[13:36:27.878]                         if (!is.null(pattern)) {
[13:36:27.878]                           computeRestarts <- base::computeRestarts
[13:36:27.878]                           grepl <- base::grepl
[13:36:27.878]                           restarts <- computeRestarts(cond)
[13:36:27.878]                           for (restart in restarts) {
[13:36:27.878]                             name <- restart$name
[13:36:27.878]                             if (is.null(name)) 
[13:36:27.878]                               next
[13:36:27.878]                             if (!grepl(pattern, name)) 
[13:36:27.878]                               next
[13:36:27.878]                             invokeRestart(restart)
[13:36:27.878]                             muffled <- TRUE
[13:36:27.878]                             break
[13:36:27.878]                           }
[13:36:27.878]                         }
[13:36:27.878]                       }
[13:36:27.878]                       invisible(muffled)
[13:36:27.878]                     }
[13:36:27.878]                     muffleCondition(cond, pattern = "^muffle")
[13:36:27.878]                   }
[13:36:27.878]                 }
[13:36:27.878]                 else {
[13:36:27.878]                   if (TRUE) {
[13:36:27.878]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:27.878]                     {
[13:36:27.878]                       inherits <- base::inherits
[13:36:27.878]                       invokeRestart <- base::invokeRestart
[13:36:27.878]                       is.null <- base::is.null
[13:36:27.878]                       muffled <- FALSE
[13:36:27.878]                       if (inherits(cond, "message")) {
[13:36:27.878]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:27.878]                         if (muffled) 
[13:36:27.878]                           invokeRestart("muffleMessage")
[13:36:27.878]                       }
[13:36:27.878]                       else if (inherits(cond, "warning")) {
[13:36:27.878]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:27.878]                         if (muffled) 
[13:36:27.878]                           invokeRestart("muffleWarning")
[13:36:27.878]                       }
[13:36:27.878]                       else if (inherits(cond, "condition")) {
[13:36:27.878]                         if (!is.null(pattern)) {
[13:36:27.878]                           computeRestarts <- base::computeRestarts
[13:36:27.878]                           grepl <- base::grepl
[13:36:27.878]                           restarts <- computeRestarts(cond)
[13:36:27.878]                           for (restart in restarts) {
[13:36:27.878]                             name <- restart$name
[13:36:27.878]                             if (is.null(name)) 
[13:36:27.878]                               next
[13:36:27.878]                             if (!grepl(pattern, name)) 
[13:36:27.878]                               next
[13:36:27.878]                             invokeRestart(restart)
[13:36:27.878]                             muffled <- TRUE
[13:36:27.878]                             break
[13:36:27.878]                           }
[13:36:27.878]                         }
[13:36:27.878]                       }
[13:36:27.878]                       invisible(muffled)
[13:36:27.878]                     }
[13:36:27.878]                     muffleCondition(cond, pattern = "^muffle")
[13:36:27.878]                   }
[13:36:27.878]                 }
[13:36:27.878]             }
[13:36:27.878]         }))
[13:36:27.878]     }, error = function(ex) {
[13:36:27.878]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:27.878]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:27.878]                 ...future.rng), started = ...future.startTime, 
[13:36:27.878]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:27.878]             version = "1.8"), class = "FutureResult")
[13:36:27.878]     }, finally = {
[13:36:27.878]         if (!identical(...future.workdir, getwd())) 
[13:36:27.878]             setwd(...future.workdir)
[13:36:27.878]         {
[13:36:27.878]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:27.878]                 ...future.oldOptions$nwarnings <- NULL
[13:36:27.878]             }
[13:36:27.878]             base::options(...future.oldOptions)
[13:36:27.878]             if (.Platform$OS.type == "windows") {
[13:36:27.878]                 old_names <- names(...future.oldEnvVars)
[13:36:27.878]                 envs <- base::Sys.getenv()
[13:36:27.878]                 names <- names(envs)
[13:36:27.878]                 common <- intersect(names, old_names)
[13:36:27.878]                 added <- setdiff(names, old_names)
[13:36:27.878]                 removed <- setdiff(old_names, names)
[13:36:27.878]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:27.878]                   envs[common]]
[13:36:27.878]                 NAMES <- toupper(changed)
[13:36:27.878]                 args <- list()
[13:36:27.878]                 for (kk in seq_along(NAMES)) {
[13:36:27.878]                   name <- changed[[kk]]
[13:36:27.878]                   NAME <- NAMES[[kk]]
[13:36:27.878]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:27.878]                     next
[13:36:27.878]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:27.878]                 }
[13:36:27.878]                 NAMES <- toupper(added)
[13:36:27.878]                 for (kk in seq_along(NAMES)) {
[13:36:27.878]                   name <- added[[kk]]
[13:36:27.878]                   NAME <- NAMES[[kk]]
[13:36:27.878]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:27.878]                     next
[13:36:27.878]                   args[[name]] <- ""
[13:36:27.878]                 }
[13:36:27.878]                 NAMES <- toupper(removed)
[13:36:27.878]                 for (kk in seq_along(NAMES)) {
[13:36:27.878]                   name <- removed[[kk]]
[13:36:27.878]                   NAME <- NAMES[[kk]]
[13:36:27.878]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:27.878]                     next
[13:36:27.878]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:27.878]                 }
[13:36:27.878]                 if (length(args) > 0) 
[13:36:27.878]                   base::do.call(base::Sys.setenv, args = args)
[13:36:27.878]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:27.878]             }
[13:36:27.878]             else {
[13:36:27.878]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:27.878]             }
[13:36:27.878]             {
[13:36:27.878]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:27.878]                   0L) {
[13:36:27.878]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:27.878]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:27.878]                   base::options(opts)
[13:36:27.878]                 }
[13:36:27.878]                 {
[13:36:27.878]                   {
[13:36:27.878]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:27.878]                     NULL
[13:36:27.878]                   }
[13:36:27.878]                   options(future.plan = NULL)
[13:36:27.878]                   if (is.na(NA_character_)) 
[13:36:27.878]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:27.878]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:27.878]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:27.878]                     .init = FALSE)
[13:36:27.878]                 }
[13:36:27.878]             }
[13:36:27.878]         }
[13:36:27.878]     })
[13:36:27.878]     if (TRUE) {
[13:36:27.878]         base::sink(type = "output", split = FALSE)
[13:36:27.878]         if (TRUE) {
[13:36:27.878]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:27.878]         }
[13:36:27.878]         else {
[13:36:27.878]             ...future.result["stdout"] <- base::list(NULL)
[13:36:27.878]         }
[13:36:27.878]         base::close(...future.stdout)
[13:36:27.878]         ...future.stdout <- NULL
[13:36:27.878]     }
[13:36:27.878]     ...future.result$conditions <- ...future.conditions
[13:36:27.878]     ...future.result$finished <- base::Sys.time()
[13:36:27.878]     ...future.result
[13:36:27.878] }
[13:36:27.880] assign_globals() ...
[13:36:27.881] List of 1
[13:36:27.881]  $ a: num 1
[13:36:27.881]  - attr(*, "where")=List of 1
[13:36:27.881]   ..$ a:<environment: R_EmptyEnv> 
[13:36:27.881]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:27.881]  - attr(*, "resolved")= logi FALSE
[13:36:27.881]  - attr(*, "total_size")= num 56
[13:36:27.881]  - attr(*, "already-done")= logi TRUE
[13:36:27.884] - copied ‘a’ to environment
[13:36:27.884] assign_globals() ... done
[13:36:27.884] requestCore(): workers = 2
[13:36:27.886] MulticoreFuture started
[13:36:27.886] - Launch lazy future ... done
[13:36:27.886] run() for ‘MulticoreFuture’ ... done
[13:36:27.886] result() for MulticoreFuture ...
[13:36:27.887] plan(): Setting new future strategy stack:
[13:36:27.887] List of future strategies:
[13:36:27.887] 1. sequential:
[13:36:27.887]    - args: function (..., envir = parent.frame())
[13:36:27.887]    - tweaked: FALSE
[13:36:27.887]    - call: NULL
[13:36:27.888] plan(): nbrOfWorkers() = 1
[13:36:27.890] plan(): Setting new future strategy stack:
[13:36:27.890] List of future strategies:
[13:36:27.890] 1. multicore:
[13:36:27.890]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:36:27.890]    - tweaked: FALSE
[13:36:27.890]    - call: plan(strategy)
[13:36:27.895] plan(): nbrOfWorkers() = 2
[13:36:27.896] result() for MulticoreFuture ...
[13:36:27.896] result() for MulticoreFuture ... done
[13:36:27.896] result() for MulticoreFuture ... done
[13:36:27.896] result() for MulticoreFuture ...
[13:36:27.896] result() for MulticoreFuture ... done
*** futureAssign() with ‘multicore’ futures ... DONE
*** futureAssign() with ‘multisession’ futures ...
[13:36:27.897] plan(): Setting new future strategy stack:
[13:36:27.897] List of future strategies:
[13:36:27.897] 1. multisession:
[13:36:27.897]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:36:27.897]    - tweaked: FALSE
[13:36:27.897]    - call: plan(strategy)
[13:36:27.898] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:36:27.898] multisession:
[13:36:27.898] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:36:27.898] - tweaked: FALSE
[13:36:27.898] - call: plan(strategy)
[13:36:27.904] getGlobalsAndPackages() ...
[13:36:27.904] Not searching for globals
[13:36:27.905] - globals: [0] <none>
[13:36:27.905] getGlobalsAndPackages() ... DONE
[13:36:27.905] [local output] makeClusterPSOCK() ...
[13:36:27.948] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:36:27.949] [local output] Base port: 11361
[13:36:27.949] [local output] Getting setup options for 2 cluster nodes ...
[13:36:27.949] [local output]  - Node 1 of 2 ...
[13:36:27.950] [local output] localMachine=TRUE => revtunnel=FALSE

[13:36:27.950] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp4CDhtK/worker.rank=1.parallelly.parent=81942.1401626229f24.pid")), silent = TRUE)' -e 'file.exists("/tmp/Rtmp4CDhtK/worker.rank=1.parallelly.parent=81942.1401626229f24.pid")'’
[13:36:28.138] - Possible to infer worker's PID: TRUE
[13:36:28.138] [local output] Rscript port: 11361

[13:36:28.139] [local output]  - Node 2 of 2 ...
[13:36:28.139] [local output] localMachine=TRUE => revtunnel=FALSE

[13:36:28.140] [local output] Rscript port: 11361

[13:36:28.140] [local output] Getting setup options for 2 cluster nodes ... done
[13:36:28.140] [local output]  - Parallel setup requested for some PSOCK nodes
[13:36:28.141] [local output] Setting up PSOCK nodes in parallel
[13:36:28.141] List of 36
[13:36:28.141]  $ worker          : chr "localhost"
[13:36:28.141]   ..- attr(*, "localhost")= logi TRUE
[13:36:28.141]  $ master          : chr "localhost"
[13:36:28.141]  $ port            : int 11361
[13:36:28.141]  $ connectTimeout  : num 120
[13:36:28.141]  $ timeout         : num 2592000
[13:36:28.141]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:36:28.141]  $ homogeneous     : logi TRUE
[13:36:28.141]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:36:28.141]  $ rscript_envs    : NULL
[13:36:28.141]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:36:28.141]  $ rscript_startup : NULL
[13:36:28.141]  $ rscript_sh      : chr "sh"
[13:36:28.141]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:36:28.141]  $ methods         : logi TRUE
[13:36:28.141]  $ socketOptions   : chr "no-delay"
[13:36:28.141]  $ useXDR          : logi FALSE
[13:36:28.141]  $ outfile         : chr "/dev/null"
[13:36:28.141]  $ renice          : int NA
[13:36:28.141]  $ rshcmd          : NULL
[13:36:28.141]  $ user            : chr(0) 
[13:36:28.141]  $ revtunnel       : logi FALSE
[13:36:28.141]  $ rshlogfile      : NULL
[13:36:28.141]  $ rshopts         : chr(0) 
[13:36:28.141]  $ rank            : int 1
[13:36:28.141]  $ manual          : logi FALSE
[13:36:28.141]  $ dryrun          : logi FALSE
[13:36:28.141]  $ quiet           : logi FALSE
[13:36:28.141]  $ setup_strategy  : chr "parallel"
[13:36:28.141]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:36:28.141]  $ pidfile         : chr "/tmp/Rtmp4CDhtK/worker.rank=1.parallelly.parent=81942.1401626229f24.pid"
[13:36:28.141]  $ rshcmd_label    : NULL
[13:36:28.141]  $ rsh_call        : NULL
[13:36:28.141]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:36:28.141]  $ localMachine    : logi TRUE
[13:36:28.141]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:36:28.141]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:36:28.141]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:36:28.141]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:36:28.141]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:36:28.141]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:36:28.141]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:36:28.141]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:36:28.141]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:36:28.141]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:36:28.141]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:36:28.141]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:36:28.141]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:36:28.141]  $ arguments       :List of 28
[13:36:28.141]   ..$ worker          : chr "localhost"
[13:36:28.141]   ..$ master          : NULL
[13:36:28.141]   ..$ port            : int 11361
[13:36:28.141]   ..$ connectTimeout  : num 120
[13:36:28.141]   ..$ timeout         : num 2592000
[13:36:28.141]   ..$ rscript         : NULL
[13:36:28.141]   ..$ homogeneous     : NULL
[13:36:28.141]   ..$ rscript_args    : NULL
[13:36:28.141]   ..$ rscript_envs    : NULL
[13:36:28.141]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:36:28.141]   ..$ rscript_startup : NULL
[13:36:28.141]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:36:28.141]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:36:28.141]   ..$ methods         : logi TRUE
[13:36:28.141]   ..$ socketOptions   : chr "no-delay"
[13:36:28.141]   ..$ useXDR          : logi FALSE
[13:36:28.141]   ..$ outfile         : chr "/dev/null"
[13:36:28.141]   ..$ renice          : int NA
[13:36:28.141]   ..$ rshcmd          : NULL
[13:36:28.141]   ..$ user            : NULL
[13:36:28.141]   ..$ revtunnel       : logi NA
[13:36:28.141]   ..$ rshlogfile      : NULL
[13:36:28.141]   ..$ rshopts         : NULL
[13:36:28.141]   ..$ rank            : int 1
[13:36:28.141]   ..$ manual          : logi FALSE
[13:36:28.141]   ..$ dryrun          : logi FALSE
[13:36:28.141]   ..$ quiet           : logi FALSE
[13:36:28.141]   ..$ setup_strategy  : chr "parallel"
[13:36:28.141]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:36:28.158] [local output] System call to launch all workers:
[13:36:28.158] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp4CDhtK/worker.rank=1.parallelly.parent=81942.1401626229f24.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11361 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:36:28.158] [local output] Starting PSOCK main server
[13:36:28.164] [local output] Workers launched
[13:36:28.164] [local output] Waiting for workers to connect back
[13:36:28.164]  - [local output] 0 workers out of 2 ready
[13:36:28.413]  - [local output] 0 workers out of 2 ready
[13:36:28.414]  - [local output] 1 workers out of 2 ready
[13:36:28.433]  - [local output] 1 workers out of 2 ready
[13:36:28.433]  - [local output] 2 workers out of 2 ready
[13:36:28.434] [local output] Launching of workers completed
[13:36:28.434] [local output] Collecting session information from workers
[13:36:28.435] [local output]  - Worker #1 of 2
[13:36:28.435] [local output]  - Worker #2 of 2
[13:36:28.435] [local output] makeClusterPSOCK() ... done
[13:36:28.447] Packages needed by the future expression (n = 0): <none>
[13:36:28.447] Packages needed by future strategies (n = 0): <none>
[13:36:28.447] {
[13:36:28.447]     {
[13:36:28.447]         {
[13:36:28.447]             ...future.startTime <- base::Sys.time()
[13:36:28.447]             {
[13:36:28.447]                 {
[13:36:28.447]                   {
[13:36:28.447]                     {
[13:36:28.447]                       base::local({
[13:36:28.447]                         has_future <- base::requireNamespace("future", 
[13:36:28.447]                           quietly = TRUE)
[13:36:28.447]                         if (has_future) {
[13:36:28.447]                           ns <- base::getNamespace("future")
[13:36:28.447]                           version <- ns[[".package"]][["version"]]
[13:36:28.447]                           if (is.null(version)) 
[13:36:28.447]                             version <- utils::packageVersion("future")
[13:36:28.447]                         }
[13:36:28.447]                         else {
[13:36:28.447]                           version <- NULL
[13:36:28.447]                         }
[13:36:28.447]                         if (!has_future || version < "1.8.0") {
[13:36:28.447]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:28.447]                             "", base::R.version$version.string), 
[13:36:28.447]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:28.447]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:28.447]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:28.447]                               "release", "version")], collapse = " "), 
[13:36:28.447]                             hostname = base::Sys.info()[["nodename"]])
[13:36:28.447]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:28.447]                             info)
[13:36:28.447]                           info <- base::paste(info, collapse = "; ")
[13:36:28.447]                           if (!has_future) {
[13:36:28.447]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:28.447]                               info)
[13:36:28.447]                           }
[13:36:28.447]                           else {
[13:36:28.447]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:28.447]                               info, version)
[13:36:28.447]                           }
[13:36:28.447]                           base::stop(msg)
[13:36:28.447]                         }
[13:36:28.447]                       })
[13:36:28.447]                     }
[13:36:28.447]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:28.447]                     base::options(mc.cores = 1L)
[13:36:28.447]                   }
[13:36:28.447]                   ...future.strategy.old <- future::plan("list")
[13:36:28.447]                   options(future.plan = NULL)
[13:36:28.447]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:28.447]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:28.447]                 }
[13:36:28.447]                 ...future.workdir <- getwd()
[13:36:28.447]             }
[13:36:28.447]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:28.447]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:28.447]         }
[13:36:28.447]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:28.447]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:28.447]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:28.447]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:28.447]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:28.447]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:28.447]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:28.447]             base::names(...future.oldOptions))
[13:36:28.447]     }
[13:36:28.447]     if (FALSE) {
[13:36:28.447]     }
[13:36:28.447]     else {
[13:36:28.447]         if (TRUE) {
[13:36:28.447]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:28.447]                 open = "w")
[13:36:28.447]         }
[13:36:28.447]         else {
[13:36:28.447]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:28.447]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:28.447]         }
[13:36:28.447]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:28.447]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:28.447]             base::sink(type = "output", split = FALSE)
[13:36:28.447]             base::close(...future.stdout)
[13:36:28.447]         }, add = TRUE)
[13:36:28.447]     }
[13:36:28.447]     ...future.frame <- base::sys.nframe()
[13:36:28.447]     ...future.conditions <- base::list()
[13:36:28.447]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:28.447]     if (FALSE) {
[13:36:28.447]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:28.447]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:28.447]     }
[13:36:28.447]     ...future.result <- base::tryCatch({
[13:36:28.447]         base::withCallingHandlers({
[13:36:28.447]             ...future.value <- base::withVisible(base::local({
[13:36:28.447]                 ...future.makeSendCondition <- base::local({
[13:36:28.447]                   sendCondition <- NULL
[13:36:28.447]                   function(frame = 1L) {
[13:36:28.447]                     if (is.function(sendCondition)) 
[13:36:28.447]                       return(sendCondition)
[13:36:28.447]                     ns <- getNamespace("parallel")
[13:36:28.447]                     if (exists("sendData", mode = "function", 
[13:36:28.447]                       envir = ns)) {
[13:36:28.447]                       parallel_sendData <- get("sendData", mode = "function", 
[13:36:28.447]                         envir = ns)
[13:36:28.447]                       envir <- sys.frame(frame)
[13:36:28.447]                       master <- NULL
[13:36:28.447]                       while (!identical(envir, .GlobalEnv) && 
[13:36:28.447]                         !identical(envir, emptyenv())) {
[13:36:28.447]                         if (exists("master", mode = "list", envir = envir, 
[13:36:28.447]                           inherits = FALSE)) {
[13:36:28.447]                           master <- get("master", mode = "list", 
[13:36:28.447]                             envir = envir, inherits = FALSE)
[13:36:28.447]                           if (inherits(master, c("SOCKnode", 
[13:36:28.447]                             "SOCK0node"))) {
[13:36:28.447]                             sendCondition <<- function(cond) {
[13:36:28.447]                               data <- list(type = "VALUE", value = cond, 
[13:36:28.447]                                 success = TRUE)
[13:36:28.447]                               parallel_sendData(master, data)
[13:36:28.447]                             }
[13:36:28.447]                             return(sendCondition)
[13:36:28.447]                           }
[13:36:28.447]                         }
[13:36:28.447]                         frame <- frame + 1L
[13:36:28.447]                         envir <- sys.frame(frame)
[13:36:28.447]                       }
[13:36:28.447]                     }
[13:36:28.447]                     sendCondition <<- function(cond) NULL
[13:36:28.447]                   }
[13:36:28.447]                 })
[13:36:28.447]                 withCallingHandlers({
[13:36:28.447]                   NA
[13:36:28.447]                 }, immediateCondition = function(cond) {
[13:36:28.447]                   sendCondition <- ...future.makeSendCondition()
[13:36:28.447]                   sendCondition(cond)
[13:36:28.447]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:28.447]                   {
[13:36:28.447]                     inherits <- base::inherits
[13:36:28.447]                     invokeRestart <- base::invokeRestart
[13:36:28.447]                     is.null <- base::is.null
[13:36:28.447]                     muffled <- FALSE
[13:36:28.447]                     if (inherits(cond, "message")) {
[13:36:28.447]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:28.447]                       if (muffled) 
[13:36:28.447]                         invokeRestart("muffleMessage")
[13:36:28.447]                     }
[13:36:28.447]                     else if (inherits(cond, "warning")) {
[13:36:28.447]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:28.447]                       if (muffled) 
[13:36:28.447]                         invokeRestart("muffleWarning")
[13:36:28.447]                     }
[13:36:28.447]                     else if (inherits(cond, "condition")) {
[13:36:28.447]                       if (!is.null(pattern)) {
[13:36:28.447]                         computeRestarts <- base::computeRestarts
[13:36:28.447]                         grepl <- base::grepl
[13:36:28.447]                         restarts <- computeRestarts(cond)
[13:36:28.447]                         for (restart in restarts) {
[13:36:28.447]                           name <- restart$name
[13:36:28.447]                           if (is.null(name)) 
[13:36:28.447]                             next
[13:36:28.447]                           if (!grepl(pattern, name)) 
[13:36:28.447]                             next
[13:36:28.447]                           invokeRestart(restart)
[13:36:28.447]                           muffled <- TRUE
[13:36:28.447]                           break
[13:36:28.447]                         }
[13:36:28.447]                       }
[13:36:28.447]                     }
[13:36:28.447]                     invisible(muffled)
[13:36:28.447]                   }
[13:36:28.447]                   muffleCondition(cond)
[13:36:28.447]                 })
[13:36:28.447]             }))
[13:36:28.447]             future::FutureResult(value = ...future.value$value, 
[13:36:28.447]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:28.447]                   ...future.rng), globalenv = if (FALSE) 
[13:36:28.447]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:28.447]                     ...future.globalenv.names))
[13:36:28.447]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:28.447]         }, condition = base::local({
[13:36:28.447]             c <- base::c
[13:36:28.447]             inherits <- base::inherits
[13:36:28.447]             invokeRestart <- base::invokeRestart
[13:36:28.447]             length <- base::length
[13:36:28.447]             list <- base::list
[13:36:28.447]             seq.int <- base::seq.int
[13:36:28.447]             signalCondition <- base::signalCondition
[13:36:28.447]             sys.calls <- base::sys.calls
[13:36:28.447]             `[[` <- base::`[[`
[13:36:28.447]             `+` <- base::`+`
[13:36:28.447]             `<<-` <- base::`<<-`
[13:36:28.447]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:28.447]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:28.447]                   3L)]
[13:36:28.447]             }
[13:36:28.447]             function(cond) {
[13:36:28.447]                 is_error <- inherits(cond, "error")
[13:36:28.447]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:28.447]                   NULL)
[13:36:28.447]                 if (is_error) {
[13:36:28.447]                   sessionInformation <- function() {
[13:36:28.447]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:28.447]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:28.447]                       search = base::search(), system = base::Sys.info())
[13:36:28.447]                   }
[13:36:28.447]                   ...future.conditions[[length(...future.conditions) + 
[13:36:28.447]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:28.447]                     cond$call), session = sessionInformation(), 
[13:36:28.447]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:28.447]                   signalCondition(cond)
[13:36:28.447]                 }
[13:36:28.447]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:28.447]                 "immediateCondition"))) {
[13:36:28.447]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:28.447]                   ...future.conditions[[length(...future.conditions) + 
[13:36:28.447]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:28.447]                   if (TRUE && !signal) {
[13:36:28.447]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:28.447]                     {
[13:36:28.447]                       inherits <- base::inherits
[13:36:28.447]                       invokeRestart <- base::invokeRestart
[13:36:28.447]                       is.null <- base::is.null
[13:36:28.447]                       muffled <- FALSE
[13:36:28.447]                       if (inherits(cond, "message")) {
[13:36:28.447]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:28.447]                         if (muffled) 
[13:36:28.447]                           invokeRestart("muffleMessage")
[13:36:28.447]                       }
[13:36:28.447]                       else if (inherits(cond, "warning")) {
[13:36:28.447]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:28.447]                         if (muffled) 
[13:36:28.447]                           invokeRestart("muffleWarning")
[13:36:28.447]                       }
[13:36:28.447]                       else if (inherits(cond, "condition")) {
[13:36:28.447]                         if (!is.null(pattern)) {
[13:36:28.447]                           computeRestarts <- base::computeRestarts
[13:36:28.447]                           grepl <- base::grepl
[13:36:28.447]                           restarts <- computeRestarts(cond)
[13:36:28.447]                           for (restart in restarts) {
[13:36:28.447]                             name <- restart$name
[13:36:28.447]                             if (is.null(name)) 
[13:36:28.447]                               next
[13:36:28.447]                             if (!grepl(pattern, name)) 
[13:36:28.447]                               next
[13:36:28.447]                             invokeRestart(restart)
[13:36:28.447]                             muffled <- TRUE
[13:36:28.447]                             break
[13:36:28.447]                           }
[13:36:28.447]                         }
[13:36:28.447]                       }
[13:36:28.447]                       invisible(muffled)
[13:36:28.447]                     }
[13:36:28.447]                     muffleCondition(cond, pattern = "^muffle")
[13:36:28.447]                   }
[13:36:28.447]                 }
[13:36:28.447]                 else {
[13:36:28.447]                   if (TRUE) {
[13:36:28.447]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:28.447]                     {
[13:36:28.447]                       inherits <- base::inherits
[13:36:28.447]                       invokeRestart <- base::invokeRestart
[13:36:28.447]                       is.null <- base::is.null
[13:36:28.447]                       muffled <- FALSE
[13:36:28.447]                       if (inherits(cond, "message")) {
[13:36:28.447]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:28.447]                         if (muffled) 
[13:36:28.447]                           invokeRestart("muffleMessage")
[13:36:28.447]                       }
[13:36:28.447]                       else if (inherits(cond, "warning")) {
[13:36:28.447]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:28.447]                         if (muffled) 
[13:36:28.447]                           invokeRestart("muffleWarning")
[13:36:28.447]                       }
[13:36:28.447]                       else if (inherits(cond, "condition")) {
[13:36:28.447]                         if (!is.null(pattern)) {
[13:36:28.447]                           computeRestarts <- base::computeRestarts
[13:36:28.447]                           grepl <- base::grepl
[13:36:28.447]                           restarts <- computeRestarts(cond)
[13:36:28.447]                           for (restart in restarts) {
[13:36:28.447]                             name <- restart$name
[13:36:28.447]                             if (is.null(name)) 
[13:36:28.447]                               next
[13:36:28.447]                             if (!grepl(pattern, name)) 
[13:36:28.447]                               next
[13:36:28.447]                             invokeRestart(restart)
[13:36:28.447]                             muffled <- TRUE
[13:36:28.447]                             break
[13:36:28.447]                           }
[13:36:28.447]                         }
[13:36:28.447]                       }
[13:36:28.447]                       invisible(muffled)
[13:36:28.447]                     }
[13:36:28.447]                     muffleCondition(cond, pattern = "^muffle")
[13:36:28.447]                   }
[13:36:28.447]                 }
[13:36:28.447]             }
[13:36:28.447]         }))
[13:36:28.447]     }, error = function(ex) {
[13:36:28.447]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:28.447]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:28.447]                 ...future.rng), started = ...future.startTime, 
[13:36:28.447]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:28.447]             version = "1.8"), class = "FutureResult")
[13:36:28.447]     }, finally = {
[13:36:28.447]         if (!identical(...future.workdir, getwd())) 
[13:36:28.447]             setwd(...future.workdir)
[13:36:28.447]         {
[13:36:28.447]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:28.447]                 ...future.oldOptions$nwarnings <- NULL
[13:36:28.447]             }
[13:36:28.447]             base::options(...future.oldOptions)
[13:36:28.447]             if (.Platform$OS.type == "windows") {
[13:36:28.447]                 old_names <- names(...future.oldEnvVars)
[13:36:28.447]                 envs <- base::Sys.getenv()
[13:36:28.447]                 names <- names(envs)
[13:36:28.447]                 common <- intersect(names, old_names)
[13:36:28.447]                 added <- setdiff(names, old_names)
[13:36:28.447]                 removed <- setdiff(old_names, names)
[13:36:28.447]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:28.447]                   envs[common]]
[13:36:28.447]                 NAMES <- toupper(changed)
[13:36:28.447]                 args <- list()
[13:36:28.447]                 for (kk in seq_along(NAMES)) {
[13:36:28.447]                   name <- changed[[kk]]
[13:36:28.447]                   NAME <- NAMES[[kk]]
[13:36:28.447]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:28.447]                     next
[13:36:28.447]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:28.447]                 }
[13:36:28.447]                 NAMES <- toupper(added)
[13:36:28.447]                 for (kk in seq_along(NAMES)) {
[13:36:28.447]                   name <- added[[kk]]
[13:36:28.447]                   NAME <- NAMES[[kk]]
[13:36:28.447]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:28.447]                     next
[13:36:28.447]                   args[[name]] <- ""
[13:36:28.447]                 }
[13:36:28.447]                 NAMES <- toupper(removed)
[13:36:28.447]                 for (kk in seq_along(NAMES)) {
[13:36:28.447]                   name <- removed[[kk]]
[13:36:28.447]                   NAME <- NAMES[[kk]]
[13:36:28.447]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:28.447]                     next
[13:36:28.447]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:28.447]                 }
[13:36:28.447]                 if (length(args) > 0) 
[13:36:28.447]                   base::do.call(base::Sys.setenv, args = args)
[13:36:28.447]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:28.447]             }
[13:36:28.447]             else {
[13:36:28.447]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:28.447]             }
[13:36:28.447]             {
[13:36:28.447]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:28.447]                   0L) {
[13:36:28.447]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:28.447]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:28.447]                   base::options(opts)
[13:36:28.447]                 }
[13:36:28.447]                 {
[13:36:28.447]                   {
[13:36:28.447]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:28.447]                     NULL
[13:36:28.447]                   }
[13:36:28.447]                   options(future.plan = NULL)
[13:36:28.447]                   if (is.na(NA_character_)) 
[13:36:28.447]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:28.447]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:28.447]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:28.447]                     .init = FALSE)
[13:36:28.447]                 }
[13:36:28.447]             }
[13:36:28.447]         }
[13:36:28.447]     })
[13:36:28.447]     if (TRUE) {
[13:36:28.447]         base::sink(type = "output", split = FALSE)
[13:36:28.447]         if (TRUE) {
[13:36:28.447]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:28.447]         }
[13:36:28.447]         else {
[13:36:28.447]             ...future.result["stdout"] <- base::list(NULL)
[13:36:28.447]         }
[13:36:28.447]         base::close(...future.stdout)
[13:36:28.447]         ...future.stdout <- NULL
[13:36:28.447]     }
[13:36:28.447]     ...future.result$conditions <- ...future.conditions
[13:36:28.447]     ...future.result$finished <- base::Sys.time()
[13:36:28.447]     ...future.result
[13:36:28.447] }
[13:36:28.500] MultisessionFuture started
[13:36:28.500] result() for ClusterFuture ...
[13:36:28.501] receiveMessageFromWorker() for ClusterFuture ...
[13:36:28.501] - Validating connection of MultisessionFuture
[13:36:28.533] - received message: FutureResult
[13:36:28.533] - Received FutureResult
[13:36:28.533] - Erased future from FutureRegistry
[13:36:28.533] result() for ClusterFuture ...
[13:36:28.533] - result already collected: FutureResult
[13:36:28.534] result() for ClusterFuture ... done
[13:36:28.534] receiveMessageFromWorker() for ClusterFuture ... done
[13:36:28.534] result() for ClusterFuture ... done
[13:36:28.534] result() for ClusterFuture ...
[13:36:28.534] - result already collected: FutureResult
[13:36:28.534] result() for ClusterFuture ... done
[13:36:28.534] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:36:28.538] plan(): nbrOfWorkers() = 2
[13:36:28.539] getGlobalsAndPackages() ...
[13:36:28.539] Searching for globals...
[13:36:28.540] - globals found: [1] ‘{’
[13:36:28.540] Searching for globals ... DONE
[13:36:28.540] Resolving globals: FALSE
[13:36:28.540] 
[13:36:28.540] 
[13:36:28.540] getGlobalsAndPackages() ... DONE
[13:36:28.541] run() for ‘Future’ ...
[13:36:28.541] - state: ‘created’
[13:36:28.541] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:36:28.555] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:28.556] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:36:28.556]   - Field: ‘node’
[13:36:28.556]   - Field: ‘label’
[13:36:28.556]   - Field: ‘local’
[13:36:28.556]   - Field: ‘owner’
[13:36:28.556]   - Field: ‘envir’
[13:36:28.556]   - Field: ‘workers’
[13:36:28.556]   - Field: ‘packages’
[13:36:28.556]   - Field: ‘gc’
[13:36:28.556]   - Field: ‘conditions’
[13:36:28.557]   - Field: ‘persistent’
[13:36:28.557]   - Field: ‘expr’
[13:36:28.557]   - Field: ‘uuid’
[13:36:28.557]   - Field: ‘seed’
[13:36:28.557]   - Field: ‘version’
[13:36:28.557]   - Field: ‘result’
[13:36:28.557]   - Field: ‘asynchronous’
[13:36:28.557]   - Field: ‘calls’
[13:36:28.558]   - Field: ‘globals’
[13:36:28.558]   - Field: ‘stdout’
[13:36:28.558]   - Field: ‘earlySignal’
[13:36:28.558]   - Field: ‘lazy’
[13:36:28.558]   - Field: ‘state’
[13:36:28.558] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:36:28.558] - Launch lazy future ...
[13:36:28.559] Packages needed by the future expression (n = 0): <none>
[13:36:28.559] Packages needed by future strategies (n = 0): <none>
[13:36:28.559] {
[13:36:28.559]     {
[13:36:28.559]         {
[13:36:28.559]             ...future.startTime <- base::Sys.time()
[13:36:28.559]             {
[13:36:28.559]                 {
[13:36:28.559]                   {
[13:36:28.559]                     {
[13:36:28.559]                       base::local({
[13:36:28.559]                         has_future <- base::requireNamespace("future", 
[13:36:28.559]                           quietly = TRUE)
[13:36:28.559]                         if (has_future) {
[13:36:28.559]                           ns <- base::getNamespace("future")
[13:36:28.559]                           version <- ns[[".package"]][["version"]]
[13:36:28.559]                           if (is.null(version)) 
[13:36:28.559]                             version <- utils::packageVersion("future")
[13:36:28.559]                         }
[13:36:28.559]                         else {
[13:36:28.559]                           version <- NULL
[13:36:28.559]                         }
[13:36:28.559]                         if (!has_future || version < "1.8.0") {
[13:36:28.559]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:28.559]                             "", base::R.version$version.string), 
[13:36:28.559]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:28.559]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:28.559]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:28.559]                               "release", "version")], collapse = " "), 
[13:36:28.559]                             hostname = base::Sys.info()[["nodename"]])
[13:36:28.559]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:28.559]                             info)
[13:36:28.559]                           info <- base::paste(info, collapse = "; ")
[13:36:28.559]                           if (!has_future) {
[13:36:28.559]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:28.559]                               info)
[13:36:28.559]                           }
[13:36:28.559]                           else {
[13:36:28.559]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:28.559]                               info, version)
[13:36:28.559]                           }
[13:36:28.559]                           base::stop(msg)
[13:36:28.559]                         }
[13:36:28.559]                       })
[13:36:28.559]                     }
[13:36:28.559]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:28.559]                     base::options(mc.cores = 1L)
[13:36:28.559]                   }
[13:36:28.559]                   ...future.strategy.old <- future::plan("list")
[13:36:28.559]                   options(future.plan = NULL)
[13:36:28.559]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:28.559]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:28.559]                 }
[13:36:28.559]                 ...future.workdir <- getwd()
[13:36:28.559]             }
[13:36:28.559]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:28.559]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:28.559]         }
[13:36:28.559]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:28.559]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:28.559]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:28.559]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:28.559]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:28.559]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:28.559]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:28.559]             base::names(...future.oldOptions))
[13:36:28.559]     }
[13:36:28.559]     if (FALSE) {
[13:36:28.559]     }
[13:36:28.559]     else {
[13:36:28.559]         if (TRUE) {
[13:36:28.559]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:28.559]                 open = "w")
[13:36:28.559]         }
[13:36:28.559]         else {
[13:36:28.559]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:28.559]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:28.559]         }
[13:36:28.559]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:28.559]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:28.559]             base::sink(type = "output", split = FALSE)
[13:36:28.559]             base::close(...future.stdout)
[13:36:28.559]         }, add = TRUE)
[13:36:28.559]     }
[13:36:28.559]     ...future.frame <- base::sys.nframe()
[13:36:28.559]     ...future.conditions <- base::list()
[13:36:28.559]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:28.559]     if (FALSE) {
[13:36:28.559]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:28.559]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:28.559]     }
[13:36:28.559]     ...future.result <- base::tryCatch({
[13:36:28.559]         base::withCallingHandlers({
[13:36:28.559]             ...future.value <- base::withVisible(base::local({
[13:36:28.559]                 ...future.makeSendCondition <- base::local({
[13:36:28.559]                   sendCondition <- NULL
[13:36:28.559]                   function(frame = 1L) {
[13:36:28.559]                     if (is.function(sendCondition)) 
[13:36:28.559]                       return(sendCondition)
[13:36:28.559]                     ns <- getNamespace("parallel")
[13:36:28.559]                     if (exists("sendData", mode = "function", 
[13:36:28.559]                       envir = ns)) {
[13:36:28.559]                       parallel_sendData <- get("sendData", mode = "function", 
[13:36:28.559]                         envir = ns)
[13:36:28.559]                       envir <- sys.frame(frame)
[13:36:28.559]                       master <- NULL
[13:36:28.559]                       while (!identical(envir, .GlobalEnv) && 
[13:36:28.559]                         !identical(envir, emptyenv())) {
[13:36:28.559]                         if (exists("master", mode = "list", envir = envir, 
[13:36:28.559]                           inherits = FALSE)) {
[13:36:28.559]                           master <- get("master", mode = "list", 
[13:36:28.559]                             envir = envir, inherits = FALSE)
[13:36:28.559]                           if (inherits(master, c("SOCKnode", 
[13:36:28.559]                             "SOCK0node"))) {
[13:36:28.559]                             sendCondition <<- function(cond) {
[13:36:28.559]                               data <- list(type = "VALUE", value = cond, 
[13:36:28.559]                                 success = TRUE)
[13:36:28.559]                               parallel_sendData(master, data)
[13:36:28.559]                             }
[13:36:28.559]                             return(sendCondition)
[13:36:28.559]                           }
[13:36:28.559]                         }
[13:36:28.559]                         frame <- frame + 1L
[13:36:28.559]                         envir <- sys.frame(frame)
[13:36:28.559]                       }
[13:36:28.559]                     }
[13:36:28.559]                     sendCondition <<- function(cond) NULL
[13:36:28.559]                   }
[13:36:28.559]                 })
[13:36:28.559]                 withCallingHandlers({
[13:36:28.559]                   {
[13:36:28.559]                     2
[13:36:28.559]                   }
[13:36:28.559]                 }, immediateCondition = function(cond) {
[13:36:28.559]                   sendCondition <- ...future.makeSendCondition()
[13:36:28.559]                   sendCondition(cond)
[13:36:28.559]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:28.559]                   {
[13:36:28.559]                     inherits <- base::inherits
[13:36:28.559]                     invokeRestart <- base::invokeRestart
[13:36:28.559]                     is.null <- base::is.null
[13:36:28.559]                     muffled <- FALSE
[13:36:28.559]                     if (inherits(cond, "message")) {
[13:36:28.559]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:28.559]                       if (muffled) 
[13:36:28.559]                         invokeRestart("muffleMessage")
[13:36:28.559]                     }
[13:36:28.559]                     else if (inherits(cond, "warning")) {
[13:36:28.559]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:28.559]                       if (muffled) 
[13:36:28.559]                         invokeRestart("muffleWarning")
[13:36:28.559]                     }
[13:36:28.559]                     else if (inherits(cond, "condition")) {
[13:36:28.559]                       if (!is.null(pattern)) {
[13:36:28.559]                         computeRestarts <- base::computeRestarts
[13:36:28.559]                         grepl <- base::grepl
[13:36:28.559]                         restarts <- computeRestarts(cond)
[13:36:28.559]                         for (restart in restarts) {
[13:36:28.559]                           name <- restart$name
[13:36:28.559]                           if (is.null(name)) 
[13:36:28.559]                             next
[13:36:28.559]                           if (!grepl(pattern, name)) 
[13:36:28.559]                             next
[13:36:28.559]                           invokeRestart(restart)
[13:36:28.559]                           muffled <- TRUE
[13:36:28.559]                           break
[13:36:28.559]                         }
[13:36:28.559]                       }
[13:36:28.559]                     }
[13:36:28.559]                     invisible(muffled)
[13:36:28.559]                   }
[13:36:28.559]                   muffleCondition(cond)
[13:36:28.559]                 })
[13:36:28.559]             }))
[13:36:28.559]             future::FutureResult(value = ...future.value$value, 
[13:36:28.559]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:28.559]                   ...future.rng), globalenv = if (FALSE) 
[13:36:28.559]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:28.559]                     ...future.globalenv.names))
[13:36:28.559]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:28.559]         }, condition = base::local({
[13:36:28.559]             c <- base::c
[13:36:28.559]             inherits <- base::inherits
[13:36:28.559]             invokeRestart <- base::invokeRestart
[13:36:28.559]             length <- base::length
[13:36:28.559]             list <- base::list
[13:36:28.559]             seq.int <- base::seq.int
[13:36:28.559]             signalCondition <- base::signalCondition
[13:36:28.559]             sys.calls <- base::sys.calls
[13:36:28.559]             `[[` <- base::`[[`
[13:36:28.559]             `+` <- base::`+`
[13:36:28.559]             `<<-` <- base::`<<-`
[13:36:28.559]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:28.559]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:28.559]                   3L)]
[13:36:28.559]             }
[13:36:28.559]             function(cond) {
[13:36:28.559]                 is_error <- inherits(cond, "error")
[13:36:28.559]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:28.559]                   NULL)
[13:36:28.559]                 if (is_error) {
[13:36:28.559]                   sessionInformation <- function() {
[13:36:28.559]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:28.559]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:28.559]                       search = base::search(), system = base::Sys.info())
[13:36:28.559]                   }
[13:36:28.559]                   ...future.conditions[[length(...future.conditions) + 
[13:36:28.559]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:28.559]                     cond$call), session = sessionInformation(), 
[13:36:28.559]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:28.559]                   signalCondition(cond)
[13:36:28.559]                 }
[13:36:28.559]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:28.559]                 "immediateCondition"))) {
[13:36:28.559]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:28.559]                   ...future.conditions[[length(...future.conditions) + 
[13:36:28.559]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:28.559]                   if (TRUE && !signal) {
[13:36:28.559]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:28.559]                     {
[13:36:28.559]                       inherits <- base::inherits
[13:36:28.559]                       invokeRestart <- base::invokeRestart
[13:36:28.559]                       is.null <- base::is.null
[13:36:28.559]                       muffled <- FALSE
[13:36:28.559]                       if (inherits(cond, "message")) {
[13:36:28.559]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:28.559]                         if (muffled) 
[13:36:28.559]                           invokeRestart("muffleMessage")
[13:36:28.559]                       }
[13:36:28.559]                       else if (inherits(cond, "warning")) {
[13:36:28.559]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:28.559]                         if (muffled) 
[13:36:28.559]                           invokeRestart("muffleWarning")
[13:36:28.559]                       }
[13:36:28.559]                       else if (inherits(cond, "condition")) {
[13:36:28.559]                         if (!is.null(pattern)) {
[13:36:28.559]                           computeRestarts <- base::computeRestarts
[13:36:28.559]                           grepl <- base::grepl
[13:36:28.559]                           restarts <- computeRestarts(cond)
[13:36:28.559]                           for (restart in restarts) {
[13:36:28.559]                             name <- restart$name
[13:36:28.559]                             if (is.null(name)) 
[13:36:28.559]                               next
[13:36:28.559]                             if (!grepl(pattern, name)) 
[13:36:28.559]                               next
[13:36:28.559]                             invokeRestart(restart)
[13:36:28.559]                             muffled <- TRUE
[13:36:28.559]                             break
[13:36:28.559]                           }
[13:36:28.559]                         }
[13:36:28.559]                       }
[13:36:28.559]                       invisible(muffled)
[13:36:28.559]                     }
[13:36:28.559]                     muffleCondition(cond, pattern = "^muffle")
[13:36:28.559]                   }
[13:36:28.559]                 }
[13:36:28.559]                 else {
[13:36:28.559]                   if (TRUE) {
[13:36:28.559]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:28.559]                     {
[13:36:28.559]                       inherits <- base::inherits
[13:36:28.559]                       invokeRestart <- base::invokeRestart
[13:36:28.559]                       is.null <- base::is.null
[13:36:28.559]                       muffled <- FALSE
[13:36:28.559]                       if (inherits(cond, "message")) {
[13:36:28.559]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:28.559]                         if (muffled) 
[13:36:28.559]                           invokeRestart("muffleMessage")
[13:36:28.559]                       }
[13:36:28.559]                       else if (inherits(cond, "warning")) {
[13:36:28.559]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:28.559]                         if (muffled) 
[13:36:28.559]                           invokeRestart("muffleWarning")
[13:36:28.559]                       }
[13:36:28.559]                       else if (inherits(cond, "condition")) {
[13:36:28.559]                         if (!is.null(pattern)) {
[13:36:28.559]                           computeRestarts <- base::computeRestarts
[13:36:28.559]                           grepl <- base::grepl
[13:36:28.559]                           restarts <- computeRestarts(cond)
[13:36:28.559]                           for (restart in restarts) {
[13:36:28.559]                             name <- restart$name
[13:36:28.559]                             if (is.null(name)) 
[13:36:28.559]                               next
[13:36:28.559]                             if (!grepl(pattern, name)) 
[13:36:28.559]                               next
[13:36:28.559]                             invokeRestart(restart)
[13:36:28.559]                             muffled <- TRUE
[13:36:28.559]                             break
[13:36:28.559]                           }
[13:36:28.559]                         }
[13:36:28.559]                       }
[13:36:28.559]                       invisible(muffled)
[13:36:28.559]                     }
[13:36:28.559]                     muffleCondition(cond, pattern = "^muffle")
[13:36:28.559]                   }
[13:36:28.559]                 }
[13:36:28.559]             }
[13:36:28.559]         }))
[13:36:28.559]     }, error = function(ex) {
[13:36:28.559]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:28.559]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:28.559]                 ...future.rng), started = ...future.startTime, 
[13:36:28.559]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:28.559]             version = "1.8"), class = "FutureResult")
[13:36:28.559]     }, finally = {
[13:36:28.559]         if (!identical(...future.workdir, getwd())) 
[13:36:28.559]             setwd(...future.workdir)
[13:36:28.559]         {
[13:36:28.559]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:28.559]                 ...future.oldOptions$nwarnings <- NULL
[13:36:28.559]             }
[13:36:28.559]             base::options(...future.oldOptions)
[13:36:28.559]             if (.Platform$OS.type == "windows") {
[13:36:28.559]                 old_names <- names(...future.oldEnvVars)
[13:36:28.559]                 envs <- base::Sys.getenv()
[13:36:28.559]                 names <- names(envs)
[13:36:28.559]                 common <- intersect(names, old_names)
[13:36:28.559]                 added <- setdiff(names, old_names)
[13:36:28.559]                 removed <- setdiff(old_names, names)
[13:36:28.559]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:28.559]                   envs[common]]
[13:36:28.559]                 NAMES <- toupper(changed)
[13:36:28.559]                 args <- list()
[13:36:28.559]                 for (kk in seq_along(NAMES)) {
[13:36:28.559]                   name <- changed[[kk]]
[13:36:28.559]                   NAME <- NAMES[[kk]]
[13:36:28.559]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:28.559]                     next
[13:36:28.559]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:28.559]                 }
[13:36:28.559]                 NAMES <- toupper(added)
[13:36:28.559]                 for (kk in seq_along(NAMES)) {
[13:36:28.559]                   name <- added[[kk]]
[13:36:28.559]                   NAME <- NAMES[[kk]]
[13:36:28.559]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:28.559]                     next
[13:36:28.559]                   args[[name]] <- ""
[13:36:28.559]                 }
[13:36:28.559]                 NAMES <- toupper(removed)
[13:36:28.559]                 for (kk in seq_along(NAMES)) {
[13:36:28.559]                   name <- removed[[kk]]
[13:36:28.559]                   NAME <- NAMES[[kk]]
[13:36:28.559]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:28.559]                     next
[13:36:28.559]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:28.559]                 }
[13:36:28.559]                 if (length(args) > 0) 
[13:36:28.559]                   base::do.call(base::Sys.setenv, args = args)
[13:36:28.559]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:28.559]             }
[13:36:28.559]             else {
[13:36:28.559]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:28.559]             }
[13:36:28.559]             {
[13:36:28.559]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:28.559]                   0L) {
[13:36:28.559]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:28.559]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:28.559]                   base::options(opts)
[13:36:28.559]                 }
[13:36:28.559]                 {
[13:36:28.559]                   {
[13:36:28.559]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:28.559]                     NULL
[13:36:28.559]                   }
[13:36:28.559]                   options(future.plan = NULL)
[13:36:28.559]                   if (is.na(NA_character_)) 
[13:36:28.559]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:28.559]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:28.559]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:28.559]                     .init = FALSE)
[13:36:28.559]                 }
[13:36:28.559]             }
[13:36:28.559]         }
[13:36:28.559]     })
[13:36:28.559]     if (TRUE) {
[13:36:28.559]         base::sink(type = "output", split = FALSE)
[13:36:28.559]         if (TRUE) {
[13:36:28.559]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:28.559]         }
[13:36:28.559]         else {
[13:36:28.559]             ...future.result["stdout"] <- base::list(NULL)
[13:36:28.559]         }
[13:36:28.559]         base::close(...future.stdout)
[13:36:28.559]         ...future.stdout <- NULL
[13:36:28.559]     }
[13:36:28.559]     ...future.result$conditions <- ...future.conditions
[13:36:28.559]     ...future.result$finished <- base::Sys.time()
[13:36:28.559]     ...future.result
[13:36:28.559] }
[13:36:28.563] MultisessionFuture started
[13:36:28.563] - Launch lazy future ... done
[13:36:28.563] run() for ‘MultisessionFuture’ ... done
[13:36:28.563] getGlobalsAndPackages() ...
[13:36:28.563] Searching for globals...
[13:36:28.564] - globals found: [1] ‘{’
[13:36:28.564] Searching for globals ... DONE
[13:36:28.564] Resolving globals: FALSE
[13:36:28.565] 
[13:36:28.565] 
[13:36:28.565] getGlobalsAndPackages() ... DONE
[13:36:28.565] run() for ‘Future’ ...
[13:36:28.565] - state: ‘created’
[13:36:28.565] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:36:28.580] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:28.580] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:36:28.580]   - Field: ‘node’
[13:36:28.580]   - Field: ‘label’
[13:36:28.580]   - Field: ‘local’
[13:36:28.580]   - Field: ‘owner’
[13:36:28.580]   - Field: ‘envir’
[13:36:28.580]   - Field: ‘workers’
[13:36:28.580]   - Field: ‘packages’
[13:36:28.580]   - Field: ‘gc’
[13:36:28.581]   - Field: ‘conditions’
[13:36:28.581]   - Field: ‘persistent’
[13:36:28.581]   - Field: ‘expr’
[13:36:28.581]   - Field: ‘uuid’
[13:36:28.581]   - Field: ‘seed’
[13:36:28.581]   - Field: ‘version’
[13:36:28.581]   - Field: ‘result’
[13:36:28.581]   - Field: ‘asynchronous’
[13:36:28.581]   - Field: ‘calls’
[13:36:28.582]   - Field: ‘globals’
[13:36:28.582]   - Field: ‘stdout’
[13:36:28.582]   - Field: ‘earlySignal’
[13:36:28.582]   - Field: ‘lazy’
[13:36:28.582]   - Field: ‘state’
[13:36:28.582] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:36:28.582] - Launch lazy future ...
[13:36:28.583] Packages needed by the future expression (n = 0): <none>
[13:36:28.583] Packages needed by future strategies (n = 0): <none>
[13:36:28.583] {
[13:36:28.583]     {
[13:36:28.583]         {
[13:36:28.583]             ...future.startTime <- base::Sys.time()
[13:36:28.583]             {
[13:36:28.583]                 {
[13:36:28.583]                   {
[13:36:28.583]                     {
[13:36:28.583]                       base::local({
[13:36:28.583]                         has_future <- base::requireNamespace("future", 
[13:36:28.583]                           quietly = TRUE)
[13:36:28.583]                         if (has_future) {
[13:36:28.583]                           ns <- base::getNamespace("future")
[13:36:28.583]                           version <- ns[[".package"]][["version"]]
[13:36:28.583]                           if (is.null(version)) 
[13:36:28.583]                             version <- utils::packageVersion("future")
[13:36:28.583]                         }
[13:36:28.583]                         else {
[13:36:28.583]                           version <- NULL
[13:36:28.583]                         }
[13:36:28.583]                         if (!has_future || version < "1.8.0") {
[13:36:28.583]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:28.583]                             "", base::R.version$version.string), 
[13:36:28.583]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:28.583]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:28.583]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:28.583]                               "release", "version")], collapse = " "), 
[13:36:28.583]                             hostname = base::Sys.info()[["nodename"]])
[13:36:28.583]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:28.583]                             info)
[13:36:28.583]                           info <- base::paste(info, collapse = "; ")
[13:36:28.583]                           if (!has_future) {
[13:36:28.583]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:28.583]                               info)
[13:36:28.583]                           }
[13:36:28.583]                           else {
[13:36:28.583]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:28.583]                               info, version)
[13:36:28.583]                           }
[13:36:28.583]                           base::stop(msg)
[13:36:28.583]                         }
[13:36:28.583]                       })
[13:36:28.583]                     }
[13:36:28.583]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:28.583]                     base::options(mc.cores = 1L)
[13:36:28.583]                   }
[13:36:28.583]                   ...future.strategy.old <- future::plan("list")
[13:36:28.583]                   options(future.plan = NULL)
[13:36:28.583]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:28.583]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:28.583]                 }
[13:36:28.583]                 ...future.workdir <- getwd()
[13:36:28.583]             }
[13:36:28.583]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:28.583]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:28.583]         }
[13:36:28.583]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:28.583]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:28.583]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:28.583]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:28.583]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:28.583]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:28.583]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:28.583]             base::names(...future.oldOptions))
[13:36:28.583]     }
[13:36:28.583]     if (FALSE) {
[13:36:28.583]     }
[13:36:28.583]     else {
[13:36:28.583]         if (TRUE) {
[13:36:28.583]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:28.583]                 open = "w")
[13:36:28.583]         }
[13:36:28.583]         else {
[13:36:28.583]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:28.583]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:28.583]         }
[13:36:28.583]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:28.583]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:28.583]             base::sink(type = "output", split = FALSE)
[13:36:28.583]             base::close(...future.stdout)
[13:36:28.583]         }, add = TRUE)
[13:36:28.583]     }
[13:36:28.583]     ...future.frame <- base::sys.nframe()
[13:36:28.583]     ...future.conditions <- base::list()
[13:36:28.583]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:28.583]     if (FALSE) {
[13:36:28.583]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:28.583]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:28.583]     }
[13:36:28.583]     ...future.result <- base::tryCatch({
[13:36:28.583]         base::withCallingHandlers({
[13:36:28.583]             ...future.value <- base::withVisible(base::local({
[13:36:28.583]                 ...future.makeSendCondition <- base::local({
[13:36:28.583]                   sendCondition <- NULL
[13:36:28.583]                   function(frame = 1L) {
[13:36:28.583]                     if (is.function(sendCondition)) 
[13:36:28.583]                       return(sendCondition)
[13:36:28.583]                     ns <- getNamespace("parallel")
[13:36:28.583]                     if (exists("sendData", mode = "function", 
[13:36:28.583]                       envir = ns)) {
[13:36:28.583]                       parallel_sendData <- get("sendData", mode = "function", 
[13:36:28.583]                         envir = ns)
[13:36:28.583]                       envir <- sys.frame(frame)
[13:36:28.583]                       master <- NULL
[13:36:28.583]                       while (!identical(envir, .GlobalEnv) && 
[13:36:28.583]                         !identical(envir, emptyenv())) {
[13:36:28.583]                         if (exists("master", mode = "list", envir = envir, 
[13:36:28.583]                           inherits = FALSE)) {
[13:36:28.583]                           master <- get("master", mode = "list", 
[13:36:28.583]                             envir = envir, inherits = FALSE)
[13:36:28.583]                           if (inherits(master, c("SOCKnode", 
[13:36:28.583]                             "SOCK0node"))) {
[13:36:28.583]                             sendCondition <<- function(cond) {
[13:36:28.583]                               data <- list(type = "VALUE", value = cond, 
[13:36:28.583]                                 success = TRUE)
[13:36:28.583]                               parallel_sendData(master, data)
[13:36:28.583]                             }
[13:36:28.583]                             return(sendCondition)
[13:36:28.583]                           }
[13:36:28.583]                         }
[13:36:28.583]                         frame <- frame + 1L
[13:36:28.583]                         envir <- sys.frame(frame)
[13:36:28.583]                       }
[13:36:28.583]                     }
[13:36:28.583]                     sendCondition <<- function(cond) NULL
[13:36:28.583]                   }
[13:36:28.583]                 })
[13:36:28.583]                 withCallingHandlers({
[13:36:28.583]                   {
[13:36:28.583]                     4
[13:36:28.583]                   }
[13:36:28.583]                 }, immediateCondition = function(cond) {
[13:36:28.583]                   sendCondition <- ...future.makeSendCondition()
[13:36:28.583]                   sendCondition(cond)
[13:36:28.583]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:28.583]                   {
[13:36:28.583]                     inherits <- base::inherits
[13:36:28.583]                     invokeRestart <- base::invokeRestart
[13:36:28.583]                     is.null <- base::is.null
[13:36:28.583]                     muffled <- FALSE
[13:36:28.583]                     if (inherits(cond, "message")) {
[13:36:28.583]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:28.583]                       if (muffled) 
[13:36:28.583]                         invokeRestart("muffleMessage")
[13:36:28.583]                     }
[13:36:28.583]                     else if (inherits(cond, "warning")) {
[13:36:28.583]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:28.583]                       if (muffled) 
[13:36:28.583]                         invokeRestart("muffleWarning")
[13:36:28.583]                     }
[13:36:28.583]                     else if (inherits(cond, "condition")) {
[13:36:28.583]                       if (!is.null(pattern)) {
[13:36:28.583]                         computeRestarts <- base::computeRestarts
[13:36:28.583]                         grepl <- base::grepl
[13:36:28.583]                         restarts <- computeRestarts(cond)
[13:36:28.583]                         for (restart in restarts) {
[13:36:28.583]                           name <- restart$name
[13:36:28.583]                           if (is.null(name)) 
[13:36:28.583]                             next
[13:36:28.583]                           if (!grepl(pattern, name)) 
[13:36:28.583]                             next
[13:36:28.583]                           invokeRestart(restart)
[13:36:28.583]                           muffled <- TRUE
[13:36:28.583]                           break
[13:36:28.583]                         }
[13:36:28.583]                       }
[13:36:28.583]                     }
[13:36:28.583]                     invisible(muffled)
[13:36:28.583]                   }
[13:36:28.583]                   muffleCondition(cond)
[13:36:28.583]                 })
[13:36:28.583]             }))
[13:36:28.583]             future::FutureResult(value = ...future.value$value, 
[13:36:28.583]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:28.583]                   ...future.rng), globalenv = if (FALSE) 
[13:36:28.583]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:28.583]                     ...future.globalenv.names))
[13:36:28.583]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:28.583]         }, condition = base::local({
[13:36:28.583]             c <- base::c
[13:36:28.583]             inherits <- base::inherits
[13:36:28.583]             invokeRestart <- base::invokeRestart
[13:36:28.583]             length <- base::length
[13:36:28.583]             list <- base::list
[13:36:28.583]             seq.int <- base::seq.int
[13:36:28.583]             signalCondition <- base::signalCondition
[13:36:28.583]             sys.calls <- base::sys.calls
[13:36:28.583]             `[[` <- base::`[[`
[13:36:28.583]             `+` <- base::`+`
[13:36:28.583]             `<<-` <- base::`<<-`
[13:36:28.583]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:28.583]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:28.583]                   3L)]
[13:36:28.583]             }
[13:36:28.583]             function(cond) {
[13:36:28.583]                 is_error <- inherits(cond, "error")
[13:36:28.583]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:28.583]                   NULL)
[13:36:28.583]                 if (is_error) {
[13:36:28.583]                   sessionInformation <- function() {
[13:36:28.583]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:28.583]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:28.583]                       search = base::search(), system = base::Sys.info())
[13:36:28.583]                   }
[13:36:28.583]                   ...future.conditions[[length(...future.conditions) + 
[13:36:28.583]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:28.583]                     cond$call), session = sessionInformation(), 
[13:36:28.583]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:28.583]                   signalCondition(cond)
[13:36:28.583]                 }
[13:36:28.583]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:28.583]                 "immediateCondition"))) {
[13:36:28.583]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:28.583]                   ...future.conditions[[length(...future.conditions) + 
[13:36:28.583]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:28.583]                   if (TRUE && !signal) {
[13:36:28.583]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:28.583]                     {
[13:36:28.583]                       inherits <- base::inherits
[13:36:28.583]                       invokeRestart <- base::invokeRestart
[13:36:28.583]                       is.null <- base::is.null
[13:36:28.583]                       muffled <- FALSE
[13:36:28.583]                       if (inherits(cond, "message")) {
[13:36:28.583]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:28.583]                         if (muffled) 
[13:36:28.583]                           invokeRestart("muffleMessage")
[13:36:28.583]                       }
[13:36:28.583]                       else if (inherits(cond, "warning")) {
[13:36:28.583]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:28.583]                         if (muffled) 
[13:36:28.583]                           invokeRestart("muffleWarning")
[13:36:28.583]                       }
[13:36:28.583]                       else if (inherits(cond, "condition")) {
[13:36:28.583]                         if (!is.null(pattern)) {
[13:36:28.583]                           computeRestarts <- base::computeRestarts
[13:36:28.583]                           grepl <- base::grepl
[13:36:28.583]                           restarts <- computeRestarts(cond)
[13:36:28.583]                           for (restart in restarts) {
[13:36:28.583]                             name <- restart$name
[13:36:28.583]                             if (is.null(name)) 
[13:36:28.583]                               next
[13:36:28.583]                             if (!grepl(pattern, name)) 
[13:36:28.583]                               next
[13:36:28.583]                             invokeRestart(restart)
[13:36:28.583]                             muffled <- TRUE
[13:36:28.583]                             break
[13:36:28.583]                           }
[13:36:28.583]                         }
[13:36:28.583]                       }
[13:36:28.583]                       invisible(muffled)
[13:36:28.583]                     }
[13:36:28.583]                     muffleCondition(cond, pattern = "^muffle")
[13:36:28.583]                   }
[13:36:28.583]                 }
[13:36:28.583]                 else {
[13:36:28.583]                   if (TRUE) {
[13:36:28.583]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:28.583]                     {
[13:36:28.583]                       inherits <- base::inherits
[13:36:28.583]                       invokeRestart <- base::invokeRestart
[13:36:28.583]                       is.null <- base::is.null
[13:36:28.583]                       muffled <- FALSE
[13:36:28.583]                       if (inherits(cond, "message")) {
[13:36:28.583]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:28.583]                         if (muffled) 
[13:36:28.583]                           invokeRestart("muffleMessage")
[13:36:28.583]                       }
[13:36:28.583]                       else if (inherits(cond, "warning")) {
[13:36:28.583]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:28.583]                         if (muffled) 
[13:36:28.583]                           invokeRestart("muffleWarning")
[13:36:28.583]                       }
[13:36:28.583]                       else if (inherits(cond, "condition")) {
[13:36:28.583]                         if (!is.null(pattern)) {
[13:36:28.583]                           computeRestarts <- base::computeRestarts
[13:36:28.583]                           grepl <- base::grepl
[13:36:28.583]                           restarts <- computeRestarts(cond)
[13:36:28.583]                           for (restart in restarts) {
[13:36:28.583]                             name <- restart$name
[13:36:28.583]                             if (is.null(name)) 
[13:36:28.583]                               next
[13:36:28.583]                             if (!grepl(pattern, name)) 
[13:36:28.583]                               next
[13:36:28.583]                             invokeRestart(restart)
[13:36:28.583]                             muffled <- TRUE
[13:36:28.583]                             break
[13:36:28.583]                           }
[13:36:28.583]                         }
[13:36:28.583]                       }
[13:36:28.583]                       invisible(muffled)
[13:36:28.583]                     }
[13:36:28.583]                     muffleCondition(cond, pattern = "^muffle")
[13:36:28.583]                   }
[13:36:28.583]                 }
[13:36:28.583]             }
[13:36:28.583]         }))
[13:36:28.583]     }, error = function(ex) {
[13:36:28.583]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:28.583]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:28.583]                 ...future.rng), started = ...future.startTime, 
[13:36:28.583]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:28.583]             version = "1.8"), class = "FutureResult")
[13:36:28.583]     }, finally = {
[13:36:28.583]         if (!identical(...future.workdir, getwd())) 
[13:36:28.583]             setwd(...future.workdir)
[13:36:28.583]         {
[13:36:28.583]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:28.583]                 ...future.oldOptions$nwarnings <- NULL
[13:36:28.583]             }
[13:36:28.583]             base::options(...future.oldOptions)
[13:36:28.583]             if (.Platform$OS.type == "windows") {
[13:36:28.583]                 old_names <- names(...future.oldEnvVars)
[13:36:28.583]                 envs <- base::Sys.getenv()
[13:36:28.583]                 names <- names(envs)
[13:36:28.583]                 common <- intersect(names, old_names)
[13:36:28.583]                 added <- setdiff(names, old_names)
[13:36:28.583]                 removed <- setdiff(old_names, names)
[13:36:28.583]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:28.583]                   envs[common]]
[13:36:28.583]                 NAMES <- toupper(changed)
[13:36:28.583]                 args <- list()
[13:36:28.583]                 for (kk in seq_along(NAMES)) {
[13:36:28.583]                   name <- changed[[kk]]
[13:36:28.583]                   NAME <- NAMES[[kk]]
[13:36:28.583]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:28.583]                     next
[13:36:28.583]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:28.583]                 }
[13:36:28.583]                 NAMES <- toupper(added)
[13:36:28.583]                 for (kk in seq_along(NAMES)) {
[13:36:28.583]                   name <- added[[kk]]
[13:36:28.583]                   NAME <- NAMES[[kk]]
[13:36:28.583]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:28.583]                     next
[13:36:28.583]                   args[[name]] <- ""
[13:36:28.583]                 }
[13:36:28.583]                 NAMES <- toupper(removed)
[13:36:28.583]                 for (kk in seq_along(NAMES)) {
[13:36:28.583]                   name <- removed[[kk]]
[13:36:28.583]                   NAME <- NAMES[[kk]]
[13:36:28.583]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:28.583]                     next
[13:36:28.583]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:28.583]                 }
[13:36:28.583]                 if (length(args) > 0) 
[13:36:28.583]                   base::do.call(base::Sys.setenv, args = args)
[13:36:28.583]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:28.583]             }
[13:36:28.583]             else {
[13:36:28.583]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:28.583]             }
[13:36:28.583]             {
[13:36:28.583]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:28.583]                   0L) {
[13:36:28.583]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:28.583]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:28.583]                   base::options(opts)
[13:36:28.583]                 }
[13:36:28.583]                 {
[13:36:28.583]                   {
[13:36:28.583]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:28.583]                     NULL
[13:36:28.583]                   }
[13:36:28.583]                   options(future.plan = NULL)
[13:36:28.583]                   if (is.na(NA_character_)) 
[13:36:28.583]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:28.583]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:28.583]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:28.583]                     .init = FALSE)
[13:36:28.583]                 }
[13:36:28.583]             }
[13:36:28.583]         }
[13:36:28.583]     })
[13:36:28.583]     if (TRUE) {
[13:36:28.583]         base::sink(type = "output", split = FALSE)
[13:36:28.583]         if (TRUE) {
[13:36:28.583]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:28.583]         }
[13:36:28.583]         else {
[13:36:28.583]             ...future.result["stdout"] <- base::list(NULL)
[13:36:28.583]         }
[13:36:28.583]         base::close(...future.stdout)
[13:36:28.583]         ...future.stdout <- NULL
[13:36:28.583]     }
[13:36:28.583]     ...future.result$conditions <- ...future.conditions
[13:36:28.583]     ...future.result$finished <- base::Sys.time()
[13:36:28.583]     ...future.result
[13:36:28.583] }
[13:36:28.638] MultisessionFuture started
[13:36:28.638] - Launch lazy future ... done
[13:36:28.638] run() for ‘MultisessionFuture’ ... done
[13:36:28.639] result() for ClusterFuture ...
[13:36:28.639] receiveMessageFromWorker() for ClusterFuture ...
[13:36:28.639] - Validating connection of MultisessionFuture
[13:36:28.639] - received message: FutureResult
[13:36:28.640] - Received FutureResult
[13:36:28.640] - Erased future from FutureRegistry
[13:36:28.640] result() for ClusterFuture ...
[13:36:28.640] - result already collected: FutureResult
[13:36:28.640] result() for ClusterFuture ... done
[13:36:28.641] receiveMessageFromWorker() for ClusterFuture ... done
[13:36:28.641] result() for ClusterFuture ... done
[13:36:28.641] result() for ClusterFuture ...
[13:36:28.641] - result already collected: FutureResult
[13:36:28.641] result() for ClusterFuture ... done
u$a = 2
[13:36:28.642] result() for ClusterFuture ...
[13:36:28.642] receiveMessageFromWorker() for ClusterFuture ...
[13:36:28.642] - Validating connection of MultisessionFuture
[13:36:28.673] - received message: FutureResult
[13:36:28.673] - Received FutureResult
[13:36:28.673] - Erased future from FutureRegistry
[13:36:28.673] result() for ClusterFuture ...
[13:36:28.674] - result already collected: FutureResult
[13:36:28.674] result() for ClusterFuture ... done
[13:36:28.674] receiveMessageFromWorker() for ClusterFuture ... done
[13:36:28.674] result() for ClusterFuture ... done
[13:36:28.674] result() for ClusterFuture ...
[13:36:28.674] - result already collected: FutureResult
[13:36:28.674] result() for ClusterFuture ... done
v$a = 4
[13:36:28.675] getGlobalsAndPackages() ...
[13:36:28.675] Searching for globals...
[13:36:28.676] - globals found: [3] ‘{’, ‘*’, ‘a’
[13:36:28.676] Searching for globals ... DONE
[13:36:28.676] Resolving globals: FALSE
[13:36:28.677] The total size of the 1 globals is 56 bytes (56 bytes)
[13:36:28.677] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[13:36:28.677] - globals: [1] ‘a’
[13:36:28.677] 
[13:36:28.677] getGlobalsAndPackages() ... DONE
[13:36:28.678] run() for ‘Future’ ...
[13:36:28.678] - state: ‘created’
[13:36:28.678] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:36:28.693] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:28.693] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:36:28.693]   - Field: ‘node’
[13:36:28.693]   - Field: ‘label’
[13:36:28.693]   - Field: ‘local’
[13:36:28.694]   - Field: ‘owner’
[13:36:28.694]   - Field: ‘envir’
[13:36:28.694]   - Field: ‘workers’
[13:36:28.694]   - Field: ‘packages’
[13:36:28.694]   - Field: ‘gc’
[13:36:28.694]   - Field: ‘conditions’
[13:36:28.694]   - Field: ‘persistent’
[13:36:28.694]   - Field: ‘expr’
[13:36:28.694]   - Field: ‘uuid’
[13:36:28.695]   - Field: ‘seed’
[13:36:28.695]   - Field: ‘version’
[13:36:28.695]   - Field: ‘result’
[13:36:28.695]   - Field: ‘asynchronous’
[13:36:28.695]   - Field: ‘calls’
[13:36:28.695]   - Field: ‘globals’
[13:36:28.695]   - Field: ‘stdout’
[13:36:28.695]   - Field: ‘earlySignal’
[13:36:28.695]   - Field: ‘lazy’
[13:36:28.696]   - Field: ‘state’
[13:36:28.696] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:36:28.696] - Launch lazy future ...
[13:36:28.696] Packages needed by the future expression (n = 0): <none>
[13:36:28.696] Packages needed by future strategies (n = 0): <none>
[13:36:28.697] {
[13:36:28.697]     {
[13:36:28.697]         {
[13:36:28.697]             ...future.startTime <- base::Sys.time()
[13:36:28.697]             {
[13:36:28.697]                 {
[13:36:28.697]                   {
[13:36:28.697]                     {
[13:36:28.697]                       base::local({
[13:36:28.697]                         has_future <- base::requireNamespace("future", 
[13:36:28.697]                           quietly = TRUE)
[13:36:28.697]                         if (has_future) {
[13:36:28.697]                           ns <- base::getNamespace("future")
[13:36:28.697]                           version <- ns[[".package"]][["version"]]
[13:36:28.697]                           if (is.null(version)) 
[13:36:28.697]                             version <- utils::packageVersion("future")
[13:36:28.697]                         }
[13:36:28.697]                         else {
[13:36:28.697]                           version <- NULL
[13:36:28.697]                         }
[13:36:28.697]                         if (!has_future || version < "1.8.0") {
[13:36:28.697]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:28.697]                             "", base::R.version$version.string), 
[13:36:28.697]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:28.697]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:28.697]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:28.697]                               "release", "version")], collapse = " "), 
[13:36:28.697]                             hostname = base::Sys.info()[["nodename"]])
[13:36:28.697]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:28.697]                             info)
[13:36:28.697]                           info <- base::paste(info, collapse = "; ")
[13:36:28.697]                           if (!has_future) {
[13:36:28.697]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:28.697]                               info)
[13:36:28.697]                           }
[13:36:28.697]                           else {
[13:36:28.697]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:28.697]                               info, version)
[13:36:28.697]                           }
[13:36:28.697]                           base::stop(msg)
[13:36:28.697]                         }
[13:36:28.697]                       })
[13:36:28.697]                     }
[13:36:28.697]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:28.697]                     base::options(mc.cores = 1L)
[13:36:28.697]                   }
[13:36:28.697]                   ...future.strategy.old <- future::plan("list")
[13:36:28.697]                   options(future.plan = NULL)
[13:36:28.697]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:28.697]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:28.697]                 }
[13:36:28.697]                 ...future.workdir <- getwd()
[13:36:28.697]             }
[13:36:28.697]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:28.697]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:28.697]         }
[13:36:28.697]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:28.697]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:28.697]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:28.697]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:28.697]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:28.697]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:28.697]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:28.697]             base::names(...future.oldOptions))
[13:36:28.697]     }
[13:36:28.697]     if (FALSE) {
[13:36:28.697]     }
[13:36:28.697]     else {
[13:36:28.697]         if (TRUE) {
[13:36:28.697]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:28.697]                 open = "w")
[13:36:28.697]         }
[13:36:28.697]         else {
[13:36:28.697]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:28.697]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:28.697]         }
[13:36:28.697]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:28.697]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:28.697]             base::sink(type = "output", split = FALSE)
[13:36:28.697]             base::close(...future.stdout)
[13:36:28.697]         }, add = TRUE)
[13:36:28.697]     }
[13:36:28.697]     ...future.frame <- base::sys.nframe()
[13:36:28.697]     ...future.conditions <- base::list()
[13:36:28.697]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:28.697]     if (FALSE) {
[13:36:28.697]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:28.697]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:28.697]     }
[13:36:28.697]     ...future.result <- base::tryCatch({
[13:36:28.697]         base::withCallingHandlers({
[13:36:28.697]             ...future.value <- base::withVisible(base::local({
[13:36:28.697]                 ...future.makeSendCondition <- base::local({
[13:36:28.697]                   sendCondition <- NULL
[13:36:28.697]                   function(frame = 1L) {
[13:36:28.697]                     if (is.function(sendCondition)) 
[13:36:28.697]                       return(sendCondition)
[13:36:28.697]                     ns <- getNamespace("parallel")
[13:36:28.697]                     if (exists("sendData", mode = "function", 
[13:36:28.697]                       envir = ns)) {
[13:36:28.697]                       parallel_sendData <- get("sendData", mode = "function", 
[13:36:28.697]                         envir = ns)
[13:36:28.697]                       envir <- sys.frame(frame)
[13:36:28.697]                       master <- NULL
[13:36:28.697]                       while (!identical(envir, .GlobalEnv) && 
[13:36:28.697]                         !identical(envir, emptyenv())) {
[13:36:28.697]                         if (exists("master", mode = "list", envir = envir, 
[13:36:28.697]                           inherits = FALSE)) {
[13:36:28.697]                           master <- get("master", mode = "list", 
[13:36:28.697]                             envir = envir, inherits = FALSE)
[13:36:28.697]                           if (inherits(master, c("SOCKnode", 
[13:36:28.697]                             "SOCK0node"))) {
[13:36:28.697]                             sendCondition <<- function(cond) {
[13:36:28.697]                               data <- list(type = "VALUE", value = cond, 
[13:36:28.697]                                 success = TRUE)
[13:36:28.697]                               parallel_sendData(master, data)
[13:36:28.697]                             }
[13:36:28.697]                             return(sendCondition)
[13:36:28.697]                           }
[13:36:28.697]                         }
[13:36:28.697]                         frame <- frame + 1L
[13:36:28.697]                         envir <- sys.frame(frame)
[13:36:28.697]                       }
[13:36:28.697]                     }
[13:36:28.697]                     sendCondition <<- function(cond) NULL
[13:36:28.697]                   }
[13:36:28.697]                 })
[13:36:28.697]                 withCallingHandlers({
[13:36:28.697]                   {
[13:36:28.697]                     2 * a
[13:36:28.697]                   }
[13:36:28.697]                 }, immediateCondition = function(cond) {
[13:36:28.697]                   sendCondition <- ...future.makeSendCondition()
[13:36:28.697]                   sendCondition(cond)
[13:36:28.697]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:28.697]                   {
[13:36:28.697]                     inherits <- base::inherits
[13:36:28.697]                     invokeRestart <- base::invokeRestart
[13:36:28.697]                     is.null <- base::is.null
[13:36:28.697]                     muffled <- FALSE
[13:36:28.697]                     if (inherits(cond, "message")) {
[13:36:28.697]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:28.697]                       if (muffled) 
[13:36:28.697]                         invokeRestart("muffleMessage")
[13:36:28.697]                     }
[13:36:28.697]                     else if (inherits(cond, "warning")) {
[13:36:28.697]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:28.697]                       if (muffled) 
[13:36:28.697]                         invokeRestart("muffleWarning")
[13:36:28.697]                     }
[13:36:28.697]                     else if (inherits(cond, "condition")) {
[13:36:28.697]                       if (!is.null(pattern)) {
[13:36:28.697]                         computeRestarts <- base::computeRestarts
[13:36:28.697]                         grepl <- base::grepl
[13:36:28.697]                         restarts <- computeRestarts(cond)
[13:36:28.697]                         for (restart in restarts) {
[13:36:28.697]                           name <- restart$name
[13:36:28.697]                           if (is.null(name)) 
[13:36:28.697]                             next
[13:36:28.697]                           if (!grepl(pattern, name)) 
[13:36:28.697]                             next
[13:36:28.697]                           invokeRestart(restart)
[13:36:28.697]                           muffled <- TRUE
[13:36:28.697]                           break
[13:36:28.697]                         }
[13:36:28.697]                       }
[13:36:28.697]                     }
[13:36:28.697]                     invisible(muffled)
[13:36:28.697]                   }
[13:36:28.697]                   muffleCondition(cond)
[13:36:28.697]                 })
[13:36:28.697]             }))
[13:36:28.697]             future::FutureResult(value = ...future.value$value, 
[13:36:28.697]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:28.697]                   ...future.rng), globalenv = if (FALSE) 
[13:36:28.697]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:28.697]                     ...future.globalenv.names))
[13:36:28.697]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:28.697]         }, condition = base::local({
[13:36:28.697]             c <- base::c
[13:36:28.697]             inherits <- base::inherits
[13:36:28.697]             invokeRestart <- base::invokeRestart
[13:36:28.697]             length <- base::length
[13:36:28.697]             list <- base::list
[13:36:28.697]             seq.int <- base::seq.int
[13:36:28.697]             signalCondition <- base::signalCondition
[13:36:28.697]             sys.calls <- base::sys.calls
[13:36:28.697]             `[[` <- base::`[[`
[13:36:28.697]             `+` <- base::`+`
[13:36:28.697]             `<<-` <- base::`<<-`
[13:36:28.697]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:28.697]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:28.697]                   3L)]
[13:36:28.697]             }
[13:36:28.697]             function(cond) {
[13:36:28.697]                 is_error <- inherits(cond, "error")
[13:36:28.697]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:28.697]                   NULL)
[13:36:28.697]                 if (is_error) {
[13:36:28.697]                   sessionInformation <- function() {
[13:36:28.697]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:28.697]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:28.697]                       search = base::search(), system = base::Sys.info())
[13:36:28.697]                   }
[13:36:28.697]                   ...future.conditions[[length(...future.conditions) + 
[13:36:28.697]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:28.697]                     cond$call), session = sessionInformation(), 
[13:36:28.697]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:28.697]                   signalCondition(cond)
[13:36:28.697]                 }
[13:36:28.697]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:28.697]                 "immediateCondition"))) {
[13:36:28.697]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:28.697]                   ...future.conditions[[length(...future.conditions) + 
[13:36:28.697]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:28.697]                   if (TRUE && !signal) {
[13:36:28.697]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:28.697]                     {
[13:36:28.697]                       inherits <- base::inherits
[13:36:28.697]                       invokeRestart <- base::invokeRestart
[13:36:28.697]                       is.null <- base::is.null
[13:36:28.697]                       muffled <- FALSE
[13:36:28.697]                       if (inherits(cond, "message")) {
[13:36:28.697]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:28.697]                         if (muffled) 
[13:36:28.697]                           invokeRestart("muffleMessage")
[13:36:28.697]                       }
[13:36:28.697]                       else if (inherits(cond, "warning")) {
[13:36:28.697]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:28.697]                         if (muffled) 
[13:36:28.697]                           invokeRestart("muffleWarning")
[13:36:28.697]                       }
[13:36:28.697]                       else if (inherits(cond, "condition")) {
[13:36:28.697]                         if (!is.null(pattern)) {
[13:36:28.697]                           computeRestarts <- base::computeRestarts
[13:36:28.697]                           grepl <- base::grepl
[13:36:28.697]                           restarts <- computeRestarts(cond)
[13:36:28.697]                           for (restart in restarts) {
[13:36:28.697]                             name <- restart$name
[13:36:28.697]                             if (is.null(name)) 
[13:36:28.697]                               next
[13:36:28.697]                             if (!grepl(pattern, name)) 
[13:36:28.697]                               next
[13:36:28.697]                             invokeRestart(restart)
[13:36:28.697]                             muffled <- TRUE
[13:36:28.697]                             break
[13:36:28.697]                           }
[13:36:28.697]                         }
[13:36:28.697]                       }
[13:36:28.697]                       invisible(muffled)
[13:36:28.697]                     }
[13:36:28.697]                     muffleCondition(cond, pattern = "^muffle")
[13:36:28.697]                   }
[13:36:28.697]                 }
[13:36:28.697]                 else {
[13:36:28.697]                   if (TRUE) {
[13:36:28.697]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:28.697]                     {
[13:36:28.697]                       inherits <- base::inherits
[13:36:28.697]                       invokeRestart <- base::invokeRestart
[13:36:28.697]                       is.null <- base::is.null
[13:36:28.697]                       muffled <- FALSE
[13:36:28.697]                       if (inherits(cond, "message")) {
[13:36:28.697]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:28.697]                         if (muffled) 
[13:36:28.697]                           invokeRestart("muffleMessage")
[13:36:28.697]                       }
[13:36:28.697]                       else if (inherits(cond, "warning")) {
[13:36:28.697]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:28.697]                         if (muffled) 
[13:36:28.697]                           invokeRestart("muffleWarning")
[13:36:28.697]                       }
[13:36:28.697]                       else if (inherits(cond, "condition")) {
[13:36:28.697]                         if (!is.null(pattern)) {
[13:36:28.697]                           computeRestarts <- base::computeRestarts
[13:36:28.697]                           grepl <- base::grepl
[13:36:28.697]                           restarts <- computeRestarts(cond)
[13:36:28.697]                           for (restart in restarts) {
[13:36:28.697]                             name <- restart$name
[13:36:28.697]                             if (is.null(name)) 
[13:36:28.697]                               next
[13:36:28.697]                             if (!grepl(pattern, name)) 
[13:36:28.697]                               next
[13:36:28.697]                             invokeRestart(restart)
[13:36:28.697]                             muffled <- TRUE
[13:36:28.697]                             break
[13:36:28.697]                           }
[13:36:28.697]                         }
[13:36:28.697]                       }
[13:36:28.697]                       invisible(muffled)
[13:36:28.697]                     }
[13:36:28.697]                     muffleCondition(cond, pattern = "^muffle")
[13:36:28.697]                   }
[13:36:28.697]                 }
[13:36:28.697]             }
[13:36:28.697]         }))
[13:36:28.697]     }, error = function(ex) {
[13:36:28.697]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:28.697]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:28.697]                 ...future.rng), started = ...future.startTime, 
[13:36:28.697]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:28.697]             version = "1.8"), class = "FutureResult")
[13:36:28.697]     }, finally = {
[13:36:28.697]         if (!identical(...future.workdir, getwd())) 
[13:36:28.697]             setwd(...future.workdir)
[13:36:28.697]         {
[13:36:28.697]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:28.697]                 ...future.oldOptions$nwarnings <- NULL
[13:36:28.697]             }
[13:36:28.697]             base::options(...future.oldOptions)
[13:36:28.697]             if (.Platform$OS.type == "windows") {
[13:36:28.697]                 old_names <- names(...future.oldEnvVars)
[13:36:28.697]                 envs <- base::Sys.getenv()
[13:36:28.697]                 names <- names(envs)
[13:36:28.697]                 common <- intersect(names, old_names)
[13:36:28.697]                 added <- setdiff(names, old_names)
[13:36:28.697]                 removed <- setdiff(old_names, names)
[13:36:28.697]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:28.697]                   envs[common]]
[13:36:28.697]                 NAMES <- toupper(changed)
[13:36:28.697]                 args <- list()
[13:36:28.697]                 for (kk in seq_along(NAMES)) {
[13:36:28.697]                   name <- changed[[kk]]
[13:36:28.697]                   NAME <- NAMES[[kk]]
[13:36:28.697]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:28.697]                     next
[13:36:28.697]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:28.697]                 }
[13:36:28.697]                 NAMES <- toupper(added)
[13:36:28.697]                 for (kk in seq_along(NAMES)) {
[13:36:28.697]                   name <- added[[kk]]
[13:36:28.697]                   NAME <- NAMES[[kk]]
[13:36:28.697]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:28.697]                     next
[13:36:28.697]                   args[[name]] <- ""
[13:36:28.697]                 }
[13:36:28.697]                 NAMES <- toupper(removed)
[13:36:28.697]                 for (kk in seq_along(NAMES)) {
[13:36:28.697]                   name <- removed[[kk]]
[13:36:28.697]                   NAME <- NAMES[[kk]]
[13:36:28.697]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:28.697]                     next
[13:36:28.697]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:28.697]                 }
[13:36:28.697]                 if (length(args) > 0) 
[13:36:28.697]                   base::do.call(base::Sys.setenv, args = args)
[13:36:28.697]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:28.697]             }
[13:36:28.697]             else {
[13:36:28.697]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:28.697]             }
[13:36:28.697]             {
[13:36:28.697]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:28.697]                   0L) {
[13:36:28.697]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:28.697]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:28.697]                   base::options(opts)
[13:36:28.697]                 }
[13:36:28.697]                 {
[13:36:28.697]                   {
[13:36:28.697]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:28.697]                     NULL
[13:36:28.697]                   }
[13:36:28.697]                   options(future.plan = NULL)
[13:36:28.697]                   if (is.na(NA_character_)) 
[13:36:28.697]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:28.697]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:28.697]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:28.697]                     .init = FALSE)
[13:36:28.697]                 }
[13:36:28.697]             }
[13:36:28.697]         }
[13:36:28.697]     })
[13:36:28.697]     if (TRUE) {
[13:36:28.697]         base::sink(type = "output", split = FALSE)
[13:36:28.697]         if (TRUE) {
[13:36:28.697]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:28.697]         }
[13:36:28.697]         else {
[13:36:28.697]             ...future.result["stdout"] <- base::list(NULL)
[13:36:28.697]         }
[13:36:28.697]         base::close(...future.stdout)
[13:36:28.697]         ...future.stdout <- NULL
[13:36:28.697]     }
[13:36:28.697]     ...future.result$conditions <- ...future.conditions
[13:36:28.697]     ...future.result$finished <- base::Sys.time()
[13:36:28.697]     ...future.result
[13:36:28.697] }
[13:36:28.700] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[13:36:28.700] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[13:36:28.701] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[13:36:28.701] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[13:36:28.701] MultisessionFuture started
[13:36:28.701] - Launch lazy future ... done
[13:36:28.701] run() for ‘MultisessionFuture’ ... done
[13:36:28.702] result() for ClusterFuture ...
[13:36:28.702] receiveMessageFromWorker() for ClusterFuture ...
[13:36:28.702] - Validating connection of MultisessionFuture
[13:36:28.703] - received message: FutureResult
[13:36:28.703] - Received FutureResult
[13:36:28.703] - Erased future from FutureRegistry
[13:36:28.703] result() for ClusterFuture ...
[13:36:28.703] - result already collected: FutureResult
[13:36:28.704] result() for ClusterFuture ... done
[13:36:28.704] receiveMessageFromWorker() for ClusterFuture ... done
[13:36:28.704] result() for ClusterFuture ... done
[13:36:28.704] result() for ClusterFuture ...
[13:36:28.704] - result already collected: FutureResult
[13:36:28.704] result() for ClusterFuture ... done
[13:36:28.704] getGlobalsAndPackages() ...
[13:36:28.704] Searching for globals...
[13:36:28.706] - globals found: [3] ‘{’, ‘*’, ‘a’
[13:36:28.706] Searching for globals ... DONE
[13:36:28.706] Resolving globals: FALSE
[13:36:28.706] The total size of the 1 globals is 56 bytes (56 bytes)
[13:36:28.707] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[13:36:28.707] - globals: [1] ‘a’
[13:36:28.707] 
[13:36:28.707] getGlobalsAndPackages() ... DONE
[13:36:28.707] run() for ‘Future’ ...
[13:36:28.707] - state: ‘created’
[13:36:28.708] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:36:28.723] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:28.724] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:36:28.724]   - Field: ‘node’
[13:36:28.724]   - Field: ‘label’
[13:36:28.724]   - Field: ‘local’
[13:36:28.724]   - Field: ‘owner’
[13:36:28.724]   - Field: ‘envir’
[13:36:28.724]   - Field: ‘workers’
[13:36:28.724]   - Field: ‘packages’
[13:36:28.724]   - Field: ‘gc’
[13:36:28.724]   - Field: ‘conditions’
[13:36:28.725]   - Field: ‘persistent’
[13:36:28.725]   - Field: ‘expr’
[13:36:28.725]   - Field: ‘uuid’
[13:36:28.725]   - Field: ‘seed’
[13:36:28.725]   - Field: ‘version’
[13:36:28.725]   - Field: ‘result’
[13:36:28.725]   - Field: ‘asynchronous’
[13:36:28.725]   - Field: ‘calls’
[13:36:28.725]   - Field: ‘globals’
[13:36:28.725]   - Field: ‘stdout’
[13:36:28.725]   - Field: ‘earlySignal’
[13:36:28.725]   - Field: ‘lazy’
[13:36:28.726]   - Field: ‘state’
[13:36:28.726] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:36:28.726] - Launch lazy future ...
[13:36:28.726] Packages needed by the future expression (n = 0): <none>
[13:36:28.726] Packages needed by future strategies (n = 0): <none>
[13:36:28.727] {
[13:36:28.727]     {
[13:36:28.727]         {
[13:36:28.727]             ...future.startTime <- base::Sys.time()
[13:36:28.727]             {
[13:36:28.727]                 {
[13:36:28.727]                   {
[13:36:28.727]                     {
[13:36:28.727]                       base::local({
[13:36:28.727]                         has_future <- base::requireNamespace("future", 
[13:36:28.727]                           quietly = TRUE)
[13:36:28.727]                         if (has_future) {
[13:36:28.727]                           ns <- base::getNamespace("future")
[13:36:28.727]                           version <- ns[[".package"]][["version"]]
[13:36:28.727]                           if (is.null(version)) 
[13:36:28.727]                             version <- utils::packageVersion("future")
[13:36:28.727]                         }
[13:36:28.727]                         else {
[13:36:28.727]                           version <- NULL
[13:36:28.727]                         }
[13:36:28.727]                         if (!has_future || version < "1.8.0") {
[13:36:28.727]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:28.727]                             "", base::R.version$version.string), 
[13:36:28.727]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:28.727]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:28.727]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:28.727]                               "release", "version")], collapse = " "), 
[13:36:28.727]                             hostname = base::Sys.info()[["nodename"]])
[13:36:28.727]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:28.727]                             info)
[13:36:28.727]                           info <- base::paste(info, collapse = "; ")
[13:36:28.727]                           if (!has_future) {
[13:36:28.727]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:28.727]                               info)
[13:36:28.727]                           }
[13:36:28.727]                           else {
[13:36:28.727]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:28.727]                               info, version)
[13:36:28.727]                           }
[13:36:28.727]                           base::stop(msg)
[13:36:28.727]                         }
[13:36:28.727]                       })
[13:36:28.727]                     }
[13:36:28.727]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:28.727]                     base::options(mc.cores = 1L)
[13:36:28.727]                   }
[13:36:28.727]                   ...future.strategy.old <- future::plan("list")
[13:36:28.727]                   options(future.plan = NULL)
[13:36:28.727]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:28.727]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:28.727]                 }
[13:36:28.727]                 ...future.workdir <- getwd()
[13:36:28.727]             }
[13:36:28.727]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:28.727]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:28.727]         }
[13:36:28.727]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:28.727]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:28.727]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:28.727]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:28.727]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:28.727]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:28.727]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:28.727]             base::names(...future.oldOptions))
[13:36:28.727]     }
[13:36:28.727]     if (FALSE) {
[13:36:28.727]     }
[13:36:28.727]     else {
[13:36:28.727]         if (TRUE) {
[13:36:28.727]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:28.727]                 open = "w")
[13:36:28.727]         }
[13:36:28.727]         else {
[13:36:28.727]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:28.727]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:28.727]         }
[13:36:28.727]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:28.727]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:28.727]             base::sink(type = "output", split = FALSE)
[13:36:28.727]             base::close(...future.stdout)
[13:36:28.727]         }, add = TRUE)
[13:36:28.727]     }
[13:36:28.727]     ...future.frame <- base::sys.nframe()
[13:36:28.727]     ...future.conditions <- base::list()
[13:36:28.727]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:28.727]     if (FALSE) {
[13:36:28.727]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:28.727]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:28.727]     }
[13:36:28.727]     ...future.result <- base::tryCatch({
[13:36:28.727]         base::withCallingHandlers({
[13:36:28.727]             ...future.value <- base::withVisible(base::local({
[13:36:28.727]                 ...future.makeSendCondition <- base::local({
[13:36:28.727]                   sendCondition <- NULL
[13:36:28.727]                   function(frame = 1L) {
[13:36:28.727]                     if (is.function(sendCondition)) 
[13:36:28.727]                       return(sendCondition)
[13:36:28.727]                     ns <- getNamespace("parallel")
[13:36:28.727]                     if (exists("sendData", mode = "function", 
[13:36:28.727]                       envir = ns)) {
[13:36:28.727]                       parallel_sendData <- get("sendData", mode = "function", 
[13:36:28.727]                         envir = ns)
[13:36:28.727]                       envir <- sys.frame(frame)
[13:36:28.727]                       master <- NULL
[13:36:28.727]                       while (!identical(envir, .GlobalEnv) && 
[13:36:28.727]                         !identical(envir, emptyenv())) {
[13:36:28.727]                         if (exists("master", mode = "list", envir = envir, 
[13:36:28.727]                           inherits = FALSE)) {
[13:36:28.727]                           master <- get("master", mode = "list", 
[13:36:28.727]                             envir = envir, inherits = FALSE)
[13:36:28.727]                           if (inherits(master, c("SOCKnode", 
[13:36:28.727]                             "SOCK0node"))) {
[13:36:28.727]                             sendCondition <<- function(cond) {
[13:36:28.727]                               data <- list(type = "VALUE", value = cond, 
[13:36:28.727]                                 success = TRUE)
[13:36:28.727]                               parallel_sendData(master, data)
[13:36:28.727]                             }
[13:36:28.727]                             return(sendCondition)
[13:36:28.727]                           }
[13:36:28.727]                         }
[13:36:28.727]                         frame <- frame + 1L
[13:36:28.727]                         envir <- sys.frame(frame)
[13:36:28.727]                       }
[13:36:28.727]                     }
[13:36:28.727]                     sendCondition <<- function(cond) NULL
[13:36:28.727]                   }
[13:36:28.727]                 })
[13:36:28.727]                 withCallingHandlers({
[13:36:28.727]                   {
[13:36:28.727]                     2 * a
[13:36:28.727]                   }
[13:36:28.727]                 }, immediateCondition = function(cond) {
[13:36:28.727]                   sendCondition <- ...future.makeSendCondition()
[13:36:28.727]                   sendCondition(cond)
[13:36:28.727]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:28.727]                   {
[13:36:28.727]                     inherits <- base::inherits
[13:36:28.727]                     invokeRestart <- base::invokeRestart
[13:36:28.727]                     is.null <- base::is.null
[13:36:28.727]                     muffled <- FALSE
[13:36:28.727]                     if (inherits(cond, "message")) {
[13:36:28.727]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:28.727]                       if (muffled) 
[13:36:28.727]                         invokeRestart("muffleMessage")
[13:36:28.727]                     }
[13:36:28.727]                     else if (inherits(cond, "warning")) {
[13:36:28.727]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:28.727]                       if (muffled) 
[13:36:28.727]                         invokeRestart("muffleWarning")
[13:36:28.727]                     }
[13:36:28.727]                     else if (inherits(cond, "condition")) {
[13:36:28.727]                       if (!is.null(pattern)) {
[13:36:28.727]                         computeRestarts <- base::computeRestarts
[13:36:28.727]                         grepl <- base::grepl
[13:36:28.727]                         restarts <- computeRestarts(cond)
[13:36:28.727]                         for (restart in restarts) {
[13:36:28.727]                           name <- restart$name
[13:36:28.727]                           if (is.null(name)) 
[13:36:28.727]                             next
[13:36:28.727]                           if (!grepl(pattern, name)) 
[13:36:28.727]                             next
[13:36:28.727]                           invokeRestart(restart)
[13:36:28.727]                           muffled <- TRUE
[13:36:28.727]                           break
[13:36:28.727]                         }
[13:36:28.727]                       }
[13:36:28.727]                     }
[13:36:28.727]                     invisible(muffled)
[13:36:28.727]                   }
[13:36:28.727]                   muffleCondition(cond)
[13:36:28.727]                 })
[13:36:28.727]             }))
[13:36:28.727]             future::FutureResult(value = ...future.value$value, 
[13:36:28.727]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:28.727]                   ...future.rng), globalenv = if (FALSE) 
[13:36:28.727]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:28.727]                     ...future.globalenv.names))
[13:36:28.727]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:28.727]         }, condition = base::local({
[13:36:28.727]             c <- base::c
[13:36:28.727]             inherits <- base::inherits
[13:36:28.727]             invokeRestart <- base::invokeRestart
[13:36:28.727]             length <- base::length
[13:36:28.727]             list <- base::list
[13:36:28.727]             seq.int <- base::seq.int
[13:36:28.727]             signalCondition <- base::signalCondition
[13:36:28.727]             sys.calls <- base::sys.calls
[13:36:28.727]             `[[` <- base::`[[`
[13:36:28.727]             `+` <- base::`+`
[13:36:28.727]             `<<-` <- base::`<<-`
[13:36:28.727]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:28.727]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:28.727]                   3L)]
[13:36:28.727]             }
[13:36:28.727]             function(cond) {
[13:36:28.727]                 is_error <- inherits(cond, "error")
[13:36:28.727]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:28.727]                   NULL)
[13:36:28.727]                 if (is_error) {
[13:36:28.727]                   sessionInformation <- function() {
[13:36:28.727]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:28.727]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:28.727]                       search = base::search(), system = base::Sys.info())
[13:36:28.727]                   }
[13:36:28.727]                   ...future.conditions[[length(...future.conditions) + 
[13:36:28.727]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:28.727]                     cond$call), session = sessionInformation(), 
[13:36:28.727]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:28.727]                   signalCondition(cond)
[13:36:28.727]                 }
[13:36:28.727]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:28.727]                 "immediateCondition"))) {
[13:36:28.727]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:28.727]                   ...future.conditions[[length(...future.conditions) + 
[13:36:28.727]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:28.727]                   if (TRUE && !signal) {
[13:36:28.727]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:28.727]                     {
[13:36:28.727]                       inherits <- base::inherits
[13:36:28.727]                       invokeRestart <- base::invokeRestart
[13:36:28.727]                       is.null <- base::is.null
[13:36:28.727]                       muffled <- FALSE
[13:36:28.727]                       if (inherits(cond, "message")) {
[13:36:28.727]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:28.727]                         if (muffled) 
[13:36:28.727]                           invokeRestart("muffleMessage")
[13:36:28.727]                       }
[13:36:28.727]                       else if (inherits(cond, "warning")) {
[13:36:28.727]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:28.727]                         if (muffled) 
[13:36:28.727]                           invokeRestart("muffleWarning")
[13:36:28.727]                       }
[13:36:28.727]                       else if (inherits(cond, "condition")) {
[13:36:28.727]                         if (!is.null(pattern)) {
[13:36:28.727]                           computeRestarts <- base::computeRestarts
[13:36:28.727]                           grepl <- base::grepl
[13:36:28.727]                           restarts <- computeRestarts(cond)
[13:36:28.727]                           for (restart in restarts) {
[13:36:28.727]                             name <- restart$name
[13:36:28.727]                             if (is.null(name)) 
[13:36:28.727]                               next
[13:36:28.727]                             if (!grepl(pattern, name)) 
[13:36:28.727]                               next
[13:36:28.727]                             invokeRestart(restart)
[13:36:28.727]                             muffled <- TRUE
[13:36:28.727]                             break
[13:36:28.727]                           }
[13:36:28.727]                         }
[13:36:28.727]                       }
[13:36:28.727]                       invisible(muffled)
[13:36:28.727]                     }
[13:36:28.727]                     muffleCondition(cond, pattern = "^muffle")
[13:36:28.727]                   }
[13:36:28.727]                 }
[13:36:28.727]                 else {
[13:36:28.727]                   if (TRUE) {
[13:36:28.727]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:28.727]                     {
[13:36:28.727]                       inherits <- base::inherits
[13:36:28.727]                       invokeRestart <- base::invokeRestart
[13:36:28.727]                       is.null <- base::is.null
[13:36:28.727]                       muffled <- FALSE
[13:36:28.727]                       if (inherits(cond, "message")) {
[13:36:28.727]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:28.727]                         if (muffled) 
[13:36:28.727]                           invokeRestart("muffleMessage")
[13:36:28.727]                       }
[13:36:28.727]                       else if (inherits(cond, "warning")) {
[13:36:28.727]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:28.727]                         if (muffled) 
[13:36:28.727]                           invokeRestart("muffleWarning")
[13:36:28.727]                       }
[13:36:28.727]                       else if (inherits(cond, "condition")) {
[13:36:28.727]                         if (!is.null(pattern)) {
[13:36:28.727]                           computeRestarts <- base::computeRestarts
[13:36:28.727]                           grepl <- base::grepl
[13:36:28.727]                           restarts <- computeRestarts(cond)
[13:36:28.727]                           for (restart in restarts) {
[13:36:28.727]                             name <- restart$name
[13:36:28.727]                             if (is.null(name)) 
[13:36:28.727]                               next
[13:36:28.727]                             if (!grepl(pattern, name)) 
[13:36:28.727]                               next
[13:36:28.727]                             invokeRestart(restart)
[13:36:28.727]                             muffled <- TRUE
[13:36:28.727]                             break
[13:36:28.727]                           }
[13:36:28.727]                         }
[13:36:28.727]                       }
[13:36:28.727]                       invisible(muffled)
[13:36:28.727]                     }
[13:36:28.727]                     muffleCondition(cond, pattern = "^muffle")
[13:36:28.727]                   }
[13:36:28.727]                 }
[13:36:28.727]             }
[13:36:28.727]         }))
[13:36:28.727]     }, error = function(ex) {
[13:36:28.727]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:28.727]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:28.727]                 ...future.rng), started = ...future.startTime, 
[13:36:28.727]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:28.727]             version = "1.8"), class = "FutureResult")
[13:36:28.727]     }, finally = {
[13:36:28.727]         if (!identical(...future.workdir, getwd())) 
[13:36:28.727]             setwd(...future.workdir)
[13:36:28.727]         {
[13:36:28.727]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:28.727]                 ...future.oldOptions$nwarnings <- NULL
[13:36:28.727]             }
[13:36:28.727]             base::options(...future.oldOptions)
[13:36:28.727]             if (.Platform$OS.type == "windows") {
[13:36:28.727]                 old_names <- names(...future.oldEnvVars)
[13:36:28.727]                 envs <- base::Sys.getenv()
[13:36:28.727]                 names <- names(envs)
[13:36:28.727]                 common <- intersect(names, old_names)
[13:36:28.727]                 added <- setdiff(names, old_names)
[13:36:28.727]                 removed <- setdiff(old_names, names)
[13:36:28.727]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:28.727]                   envs[common]]
[13:36:28.727]                 NAMES <- toupper(changed)
[13:36:28.727]                 args <- list()
[13:36:28.727]                 for (kk in seq_along(NAMES)) {
[13:36:28.727]                   name <- changed[[kk]]
[13:36:28.727]                   NAME <- NAMES[[kk]]
[13:36:28.727]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:28.727]                     next
[13:36:28.727]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:28.727]                 }
[13:36:28.727]                 NAMES <- toupper(added)
[13:36:28.727]                 for (kk in seq_along(NAMES)) {
[13:36:28.727]                   name <- added[[kk]]
[13:36:28.727]                   NAME <- NAMES[[kk]]
[13:36:28.727]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:28.727]                     next
[13:36:28.727]                   args[[name]] <- ""
[13:36:28.727]                 }
[13:36:28.727]                 NAMES <- toupper(removed)
[13:36:28.727]                 for (kk in seq_along(NAMES)) {
[13:36:28.727]                   name <- removed[[kk]]
[13:36:28.727]                   NAME <- NAMES[[kk]]
[13:36:28.727]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:28.727]                     next
[13:36:28.727]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:28.727]                 }
[13:36:28.727]                 if (length(args) > 0) 
[13:36:28.727]                   base::do.call(base::Sys.setenv, args = args)
[13:36:28.727]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:28.727]             }
[13:36:28.727]             else {
[13:36:28.727]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:28.727]             }
[13:36:28.727]             {
[13:36:28.727]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:28.727]                   0L) {
[13:36:28.727]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:28.727]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:28.727]                   base::options(opts)
[13:36:28.727]                 }
[13:36:28.727]                 {
[13:36:28.727]                   {
[13:36:28.727]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:28.727]                     NULL
[13:36:28.727]                   }
[13:36:28.727]                   options(future.plan = NULL)
[13:36:28.727]                   if (is.na(NA_character_)) 
[13:36:28.727]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:28.727]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:28.727]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:28.727]                     .init = FALSE)
[13:36:28.727]                 }
[13:36:28.727]             }
[13:36:28.727]         }
[13:36:28.727]     })
[13:36:28.727]     if (TRUE) {
[13:36:28.727]         base::sink(type = "output", split = FALSE)
[13:36:28.727]         if (TRUE) {
[13:36:28.727]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:28.727]         }
[13:36:28.727]         else {
[13:36:28.727]             ...future.result["stdout"] <- base::list(NULL)
[13:36:28.727]         }
[13:36:28.727]         base::close(...future.stdout)
[13:36:28.727]         ...future.stdout <- NULL
[13:36:28.727]     }
[13:36:28.727]     ...future.result$conditions <- ...future.conditions
[13:36:28.727]     ...future.result$finished <- base::Sys.time()
[13:36:28.727]     ...future.result
[13:36:28.727] }
[13:36:28.729] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[13:36:28.729] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[13:36:28.729] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[13:36:28.730] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[13:36:28.730] MultisessionFuture started
[13:36:28.730] - Launch lazy future ... done
[13:36:28.730] run() for ‘MultisessionFuture’ ... done
[13:36:28.730] result() for ClusterFuture ...
[13:36:28.731] receiveMessageFromWorker() for ClusterFuture ...
[13:36:28.731] - Validating connection of MultisessionFuture
[13:36:28.732] - received message: FutureResult
[13:36:28.732] - Received FutureResult
[13:36:28.732] - Erased future from FutureRegistry
[13:36:28.732] result() for ClusterFuture ...
[13:36:28.732] - result already collected: FutureResult
[13:36:28.732] result() for ClusterFuture ... done
[13:36:28.732] receiveMessageFromWorker() for ClusterFuture ... done
[13:36:28.732] result() for ClusterFuture ... done
[13:36:28.732] result() for ClusterFuture ...
[13:36:28.732] - result already collected: FutureResult
[13:36:28.732] result() for ClusterFuture ... done
[13:36:28.733] getGlobalsAndPackages() ...
[13:36:28.733] Searching for globals...
[13:36:28.733] - globals found: [3] ‘{’, ‘*’, ‘a’
[13:36:28.734] Searching for globals ... DONE
[13:36:28.734] Resolving globals: FALSE
[13:36:28.734] The total size of the 1 globals is 56 bytes (56 bytes)
[13:36:28.734] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[13:36:28.735] - globals: [1] ‘a’
[13:36:28.735] 
[13:36:28.735] getGlobalsAndPackages() ... DONE
[13:36:28.735] run() for ‘Future’ ...
[13:36:28.735] - state: ‘created’
[13:36:28.735] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:36:28.749] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:28.749] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:36:28.749]   - Field: ‘node’
[13:36:28.749]   - Field: ‘label’
[13:36:28.749]   - Field: ‘local’
[13:36:28.749]   - Field: ‘owner’
[13:36:28.750]   - Field: ‘envir’
[13:36:28.750]   - Field: ‘workers’
[13:36:28.750]   - Field: ‘packages’
[13:36:28.750]   - Field: ‘gc’
[13:36:28.750]   - Field: ‘conditions’
[13:36:28.750]   - Field: ‘persistent’
[13:36:28.750]   - Field: ‘expr’
[13:36:28.750]   - Field: ‘uuid’
[13:36:28.750]   - Field: ‘seed’
[13:36:28.750]   - Field: ‘version’
[13:36:28.750]   - Field: ‘result’
[13:36:28.751]   - Field: ‘asynchronous’
[13:36:28.751]   - Field: ‘calls’
[13:36:28.751]   - Field: ‘globals’
[13:36:28.751]   - Field: ‘stdout’
[13:36:28.751]   - Field: ‘earlySignal’
[13:36:28.751]   - Field: ‘lazy’
[13:36:28.751]   - Field: ‘state’
[13:36:28.751] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:36:28.751] - Launch lazy future ...
[13:36:28.752] Packages needed by the future expression (n = 0): <none>
[13:36:28.752] Packages needed by future strategies (n = 0): <none>
[13:36:28.752] {
[13:36:28.752]     {
[13:36:28.752]         {
[13:36:28.752]             ...future.startTime <- base::Sys.time()
[13:36:28.752]             {
[13:36:28.752]                 {
[13:36:28.752]                   {
[13:36:28.752]                     {
[13:36:28.752]                       base::local({
[13:36:28.752]                         has_future <- base::requireNamespace("future", 
[13:36:28.752]                           quietly = TRUE)
[13:36:28.752]                         if (has_future) {
[13:36:28.752]                           ns <- base::getNamespace("future")
[13:36:28.752]                           version <- ns[[".package"]][["version"]]
[13:36:28.752]                           if (is.null(version)) 
[13:36:28.752]                             version <- utils::packageVersion("future")
[13:36:28.752]                         }
[13:36:28.752]                         else {
[13:36:28.752]                           version <- NULL
[13:36:28.752]                         }
[13:36:28.752]                         if (!has_future || version < "1.8.0") {
[13:36:28.752]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:28.752]                             "", base::R.version$version.string), 
[13:36:28.752]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:28.752]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:28.752]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:28.752]                               "release", "version")], collapse = " "), 
[13:36:28.752]                             hostname = base::Sys.info()[["nodename"]])
[13:36:28.752]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:28.752]                             info)
[13:36:28.752]                           info <- base::paste(info, collapse = "; ")
[13:36:28.752]                           if (!has_future) {
[13:36:28.752]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:28.752]                               info)
[13:36:28.752]                           }
[13:36:28.752]                           else {
[13:36:28.752]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:28.752]                               info, version)
[13:36:28.752]                           }
[13:36:28.752]                           base::stop(msg)
[13:36:28.752]                         }
[13:36:28.752]                       })
[13:36:28.752]                     }
[13:36:28.752]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:28.752]                     base::options(mc.cores = 1L)
[13:36:28.752]                   }
[13:36:28.752]                   ...future.strategy.old <- future::plan("list")
[13:36:28.752]                   options(future.plan = NULL)
[13:36:28.752]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:28.752]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:28.752]                 }
[13:36:28.752]                 ...future.workdir <- getwd()
[13:36:28.752]             }
[13:36:28.752]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:28.752]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:28.752]         }
[13:36:28.752]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:28.752]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:28.752]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:28.752]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:28.752]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:28.752]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:28.752]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:28.752]             base::names(...future.oldOptions))
[13:36:28.752]     }
[13:36:28.752]     if (FALSE) {
[13:36:28.752]     }
[13:36:28.752]     else {
[13:36:28.752]         if (TRUE) {
[13:36:28.752]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:28.752]                 open = "w")
[13:36:28.752]         }
[13:36:28.752]         else {
[13:36:28.752]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:28.752]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:28.752]         }
[13:36:28.752]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:28.752]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:28.752]             base::sink(type = "output", split = FALSE)
[13:36:28.752]             base::close(...future.stdout)
[13:36:28.752]         }, add = TRUE)
[13:36:28.752]     }
[13:36:28.752]     ...future.frame <- base::sys.nframe()
[13:36:28.752]     ...future.conditions <- base::list()
[13:36:28.752]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:28.752]     if (FALSE) {
[13:36:28.752]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:28.752]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:28.752]     }
[13:36:28.752]     ...future.result <- base::tryCatch({
[13:36:28.752]         base::withCallingHandlers({
[13:36:28.752]             ...future.value <- base::withVisible(base::local({
[13:36:28.752]                 ...future.makeSendCondition <- base::local({
[13:36:28.752]                   sendCondition <- NULL
[13:36:28.752]                   function(frame = 1L) {
[13:36:28.752]                     if (is.function(sendCondition)) 
[13:36:28.752]                       return(sendCondition)
[13:36:28.752]                     ns <- getNamespace("parallel")
[13:36:28.752]                     if (exists("sendData", mode = "function", 
[13:36:28.752]                       envir = ns)) {
[13:36:28.752]                       parallel_sendData <- get("sendData", mode = "function", 
[13:36:28.752]                         envir = ns)
[13:36:28.752]                       envir <- sys.frame(frame)
[13:36:28.752]                       master <- NULL
[13:36:28.752]                       while (!identical(envir, .GlobalEnv) && 
[13:36:28.752]                         !identical(envir, emptyenv())) {
[13:36:28.752]                         if (exists("master", mode = "list", envir = envir, 
[13:36:28.752]                           inherits = FALSE)) {
[13:36:28.752]                           master <- get("master", mode = "list", 
[13:36:28.752]                             envir = envir, inherits = FALSE)
[13:36:28.752]                           if (inherits(master, c("SOCKnode", 
[13:36:28.752]                             "SOCK0node"))) {
[13:36:28.752]                             sendCondition <<- function(cond) {
[13:36:28.752]                               data <- list(type = "VALUE", value = cond, 
[13:36:28.752]                                 success = TRUE)
[13:36:28.752]                               parallel_sendData(master, data)
[13:36:28.752]                             }
[13:36:28.752]                             return(sendCondition)
[13:36:28.752]                           }
[13:36:28.752]                         }
[13:36:28.752]                         frame <- frame + 1L
[13:36:28.752]                         envir <- sys.frame(frame)
[13:36:28.752]                       }
[13:36:28.752]                     }
[13:36:28.752]                     sendCondition <<- function(cond) NULL
[13:36:28.752]                   }
[13:36:28.752]                 })
[13:36:28.752]                 withCallingHandlers({
[13:36:28.752]                   {
[13:36:28.752]                     2 * a
[13:36:28.752]                   }
[13:36:28.752]                 }, immediateCondition = function(cond) {
[13:36:28.752]                   sendCondition <- ...future.makeSendCondition()
[13:36:28.752]                   sendCondition(cond)
[13:36:28.752]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:28.752]                   {
[13:36:28.752]                     inherits <- base::inherits
[13:36:28.752]                     invokeRestart <- base::invokeRestart
[13:36:28.752]                     is.null <- base::is.null
[13:36:28.752]                     muffled <- FALSE
[13:36:28.752]                     if (inherits(cond, "message")) {
[13:36:28.752]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:28.752]                       if (muffled) 
[13:36:28.752]                         invokeRestart("muffleMessage")
[13:36:28.752]                     }
[13:36:28.752]                     else if (inherits(cond, "warning")) {
[13:36:28.752]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:28.752]                       if (muffled) 
[13:36:28.752]                         invokeRestart("muffleWarning")
[13:36:28.752]                     }
[13:36:28.752]                     else if (inherits(cond, "condition")) {
[13:36:28.752]                       if (!is.null(pattern)) {
[13:36:28.752]                         computeRestarts <- base::computeRestarts
[13:36:28.752]                         grepl <- base::grepl
[13:36:28.752]                         restarts <- computeRestarts(cond)
[13:36:28.752]                         for (restart in restarts) {
[13:36:28.752]                           name <- restart$name
[13:36:28.752]                           if (is.null(name)) 
[13:36:28.752]                             next
[13:36:28.752]                           if (!grepl(pattern, name)) 
[13:36:28.752]                             next
[13:36:28.752]                           invokeRestart(restart)
[13:36:28.752]                           muffled <- TRUE
[13:36:28.752]                           break
[13:36:28.752]                         }
[13:36:28.752]                       }
[13:36:28.752]                     }
[13:36:28.752]                     invisible(muffled)
[13:36:28.752]                   }
[13:36:28.752]                   muffleCondition(cond)
[13:36:28.752]                 })
[13:36:28.752]             }))
[13:36:28.752]             future::FutureResult(value = ...future.value$value, 
[13:36:28.752]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:28.752]                   ...future.rng), globalenv = if (FALSE) 
[13:36:28.752]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:28.752]                     ...future.globalenv.names))
[13:36:28.752]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:28.752]         }, condition = base::local({
[13:36:28.752]             c <- base::c
[13:36:28.752]             inherits <- base::inherits
[13:36:28.752]             invokeRestart <- base::invokeRestart
[13:36:28.752]             length <- base::length
[13:36:28.752]             list <- base::list
[13:36:28.752]             seq.int <- base::seq.int
[13:36:28.752]             signalCondition <- base::signalCondition
[13:36:28.752]             sys.calls <- base::sys.calls
[13:36:28.752]             `[[` <- base::`[[`
[13:36:28.752]             `+` <- base::`+`
[13:36:28.752]             `<<-` <- base::`<<-`
[13:36:28.752]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:28.752]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:28.752]                   3L)]
[13:36:28.752]             }
[13:36:28.752]             function(cond) {
[13:36:28.752]                 is_error <- inherits(cond, "error")
[13:36:28.752]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:28.752]                   NULL)
[13:36:28.752]                 if (is_error) {
[13:36:28.752]                   sessionInformation <- function() {
[13:36:28.752]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:28.752]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:28.752]                       search = base::search(), system = base::Sys.info())
[13:36:28.752]                   }
[13:36:28.752]                   ...future.conditions[[length(...future.conditions) + 
[13:36:28.752]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:28.752]                     cond$call), session = sessionInformation(), 
[13:36:28.752]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:28.752]                   signalCondition(cond)
[13:36:28.752]                 }
[13:36:28.752]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:28.752]                 "immediateCondition"))) {
[13:36:28.752]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:28.752]                   ...future.conditions[[length(...future.conditions) + 
[13:36:28.752]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:28.752]                   if (TRUE && !signal) {
[13:36:28.752]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:28.752]                     {
[13:36:28.752]                       inherits <- base::inherits
[13:36:28.752]                       invokeRestart <- base::invokeRestart
[13:36:28.752]                       is.null <- base::is.null
[13:36:28.752]                       muffled <- FALSE
[13:36:28.752]                       if (inherits(cond, "message")) {
[13:36:28.752]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:28.752]                         if (muffled) 
[13:36:28.752]                           invokeRestart("muffleMessage")
[13:36:28.752]                       }
[13:36:28.752]                       else if (inherits(cond, "warning")) {
[13:36:28.752]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:28.752]                         if (muffled) 
[13:36:28.752]                           invokeRestart("muffleWarning")
[13:36:28.752]                       }
[13:36:28.752]                       else if (inherits(cond, "condition")) {
[13:36:28.752]                         if (!is.null(pattern)) {
[13:36:28.752]                           computeRestarts <- base::computeRestarts
[13:36:28.752]                           grepl <- base::grepl
[13:36:28.752]                           restarts <- computeRestarts(cond)
[13:36:28.752]                           for (restart in restarts) {
[13:36:28.752]                             name <- restart$name
[13:36:28.752]                             if (is.null(name)) 
[13:36:28.752]                               next
[13:36:28.752]                             if (!grepl(pattern, name)) 
[13:36:28.752]                               next
[13:36:28.752]                             invokeRestart(restart)
[13:36:28.752]                             muffled <- TRUE
[13:36:28.752]                             break
[13:36:28.752]                           }
[13:36:28.752]                         }
[13:36:28.752]                       }
[13:36:28.752]                       invisible(muffled)
[13:36:28.752]                     }
[13:36:28.752]                     muffleCondition(cond, pattern = "^muffle")
[13:36:28.752]                   }
[13:36:28.752]                 }
[13:36:28.752]                 else {
[13:36:28.752]                   if (TRUE) {
[13:36:28.752]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:28.752]                     {
[13:36:28.752]                       inherits <- base::inherits
[13:36:28.752]                       invokeRestart <- base::invokeRestart
[13:36:28.752]                       is.null <- base::is.null
[13:36:28.752]                       muffled <- FALSE
[13:36:28.752]                       if (inherits(cond, "message")) {
[13:36:28.752]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:28.752]                         if (muffled) 
[13:36:28.752]                           invokeRestart("muffleMessage")
[13:36:28.752]                       }
[13:36:28.752]                       else if (inherits(cond, "warning")) {
[13:36:28.752]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:28.752]                         if (muffled) 
[13:36:28.752]                           invokeRestart("muffleWarning")
[13:36:28.752]                       }
[13:36:28.752]                       else if (inherits(cond, "condition")) {
[13:36:28.752]                         if (!is.null(pattern)) {
[13:36:28.752]                           computeRestarts <- base::computeRestarts
[13:36:28.752]                           grepl <- base::grepl
[13:36:28.752]                           restarts <- computeRestarts(cond)
[13:36:28.752]                           for (restart in restarts) {
[13:36:28.752]                             name <- restart$name
[13:36:28.752]                             if (is.null(name)) 
[13:36:28.752]                               next
[13:36:28.752]                             if (!grepl(pattern, name)) 
[13:36:28.752]                               next
[13:36:28.752]                             invokeRestart(restart)
[13:36:28.752]                             muffled <- TRUE
[13:36:28.752]                             break
[13:36:28.752]                           }
[13:36:28.752]                         }
[13:36:28.752]                       }
[13:36:28.752]                       invisible(muffled)
[13:36:28.752]                     }
[13:36:28.752]                     muffleCondition(cond, pattern = "^muffle")
[13:36:28.752]                   }
[13:36:28.752]                 }
[13:36:28.752]             }
[13:36:28.752]         }))
[13:36:28.752]     }, error = function(ex) {
[13:36:28.752]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:28.752]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:28.752]                 ...future.rng), started = ...future.startTime, 
[13:36:28.752]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:28.752]             version = "1.8"), class = "FutureResult")
[13:36:28.752]     }, finally = {
[13:36:28.752]         if (!identical(...future.workdir, getwd())) 
[13:36:28.752]             setwd(...future.workdir)
[13:36:28.752]         {
[13:36:28.752]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:28.752]                 ...future.oldOptions$nwarnings <- NULL
[13:36:28.752]             }
[13:36:28.752]             base::options(...future.oldOptions)
[13:36:28.752]             if (.Platform$OS.type == "windows") {
[13:36:28.752]                 old_names <- names(...future.oldEnvVars)
[13:36:28.752]                 envs <- base::Sys.getenv()
[13:36:28.752]                 names <- names(envs)
[13:36:28.752]                 common <- intersect(names, old_names)
[13:36:28.752]                 added <- setdiff(names, old_names)
[13:36:28.752]                 removed <- setdiff(old_names, names)
[13:36:28.752]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:28.752]                   envs[common]]
[13:36:28.752]                 NAMES <- toupper(changed)
[13:36:28.752]                 args <- list()
[13:36:28.752]                 for (kk in seq_along(NAMES)) {
[13:36:28.752]                   name <- changed[[kk]]
[13:36:28.752]                   NAME <- NAMES[[kk]]
[13:36:28.752]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:28.752]                     next
[13:36:28.752]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:28.752]                 }
[13:36:28.752]                 NAMES <- toupper(added)
[13:36:28.752]                 for (kk in seq_along(NAMES)) {
[13:36:28.752]                   name <- added[[kk]]
[13:36:28.752]                   NAME <- NAMES[[kk]]
[13:36:28.752]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:28.752]                     next
[13:36:28.752]                   args[[name]] <- ""
[13:36:28.752]                 }
[13:36:28.752]                 NAMES <- toupper(removed)
[13:36:28.752]                 for (kk in seq_along(NAMES)) {
[13:36:28.752]                   name <- removed[[kk]]
[13:36:28.752]                   NAME <- NAMES[[kk]]
[13:36:28.752]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:28.752]                     next
[13:36:28.752]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:28.752]                 }
[13:36:28.752]                 if (length(args) > 0) 
[13:36:28.752]                   base::do.call(base::Sys.setenv, args = args)
[13:36:28.752]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:28.752]             }
[13:36:28.752]             else {
[13:36:28.752]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:28.752]             }
[13:36:28.752]             {
[13:36:28.752]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:28.752]                   0L) {
[13:36:28.752]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:28.752]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:28.752]                   base::options(opts)
[13:36:28.752]                 }
[13:36:28.752]                 {
[13:36:28.752]                   {
[13:36:28.752]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:28.752]                     NULL
[13:36:28.752]                   }
[13:36:28.752]                   options(future.plan = NULL)
[13:36:28.752]                   if (is.na(NA_character_)) 
[13:36:28.752]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:28.752]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:28.752]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:28.752]                     .init = FALSE)
[13:36:28.752]                 }
[13:36:28.752]             }
[13:36:28.752]         }
[13:36:28.752]     })
[13:36:28.752]     if (TRUE) {
[13:36:28.752]         base::sink(type = "output", split = FALSE)
[13:36:28.752]         if (TRUE) {
[13:36:28.752]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:28.752]         }
[13:36:28.752]         else {
[13:36:28.752]             ...future.result["stdout"] <- base::list(NULL)
[13:36:28.752]         }
[13:36:28.752]         base::close(...future.stdout)
[13:36:28.752]         ...future.stdout <- NULL
[13:36:28.752]     }
[13:36:28.752]     ...future.result$conditions <- ...future.conditions
[13:36:28.752]     ...future.result$finished <- base::Sys.time()
[13:36:28.752]     ...future.result
[13:36:28.752] }
[13:36:28.754] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[13:36:28.755] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[13:36:28.755] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[13:36:28.755] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[13:36:28.755] MultisessionFuture started
[13:36:28.756] - Launch lazy future ... done
[13:36:28.756] run() for ‘MultisessionFuture’ ... done
[13:36:28.756] result() for ClusterFuture ...
[13:36:28.756] receiveMessageFromWorker() for ClusterFuture ...
[13:36:28.756] - Validating connection of MultisessionFuture
[13:36:28.757] - received message: FutureResult
[13:36:28.757] - Received FutureResult
[13:36:28.757] - Erased future from FutureRegistry
[13:36:28.757] result() for ClusterFuture ...
[13:36:28.757] - result already collected: FutureResult
[13:36:28.757] result() for ClusterFuture ... done
[13:36:28.757] receiveMessageFromWorker() for ClusterFuture ... done
[13:36:28.757] result() for ClusterFuture ... done
[13:36:28.758] result() for ClusterFuture ...
[13:36:28.758] - result already collected: FutureResult
[13:36:28.758] result() for ClusterFuture ... done
[13:36:28.758] getGlobalsAndPackages() ...
[13:36:28.758] Searching for globals...
[13:36:28.759] - globals found: [3] ‘{’, ‘*’, ‘a’
[13:36:28.759] Searching for globals ... DONE
[13:36:28.759] Resolving globals: FALSE
[13:36:28.759] The total size of the 1 globals is 56 bytes (56 bytes)
[13:36:28.760] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[13:36:28.760] - globals: [1] ‘a’
[13:36:28.760] 
[13:36:28.760] getGlobalsAndPackages() ... DONE
[13:36:28.760] run() for ‘Future’ ...
[13:36:28.760] - state: ‘created’
[13:36:28.761] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:36:28.775] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:28.775] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:36:28.775]   - Field: ‘node’
[13:36:28.775]   - Field: ‘label’
[13:36:28.775]   - Field: ‘local’
[13:36:28.775]   - Field: ‘owner’
[13:36:28.775]   - Field: ‘envir’
[13:36:28.775]   - Field: ‘workers’
[13:36:28.776]   - Field: ‘packages’
[13:36:28.776]   - Field: ‘gc’
[13:36:28.776]   - Field: ‘conditions’
[13:36:28.776]   - Field: ‘persistent’
[13:36:28.776]   - Field: ‘expr’
[13:36:28.776]   - Field: ‘uuid’
[13:36:28.776]   - Field: ‘seed’
[13:36:28.776]   - Field: ‘version’
[13:36:28.776]   - Field: ‘result’
[13:36:28.776]   - Field: ‘asynchronous’
[13:36:28.776]   - Field: ‘calls’
[13:36:28.777]   - Field: ‘globals’
[13:36:28.777]   - Field: ‘stdout’
[13:36:28.777]   - Field: ‘earlySignal’
[13:36:28.777]   - Field: ‘lazy’
[13:36:28.777]   - Field: ‘state’
[13:36:28.777] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:36:28.777] - Launch lazy future ...
[13:36:28.777] Packages needed by the future expression (n = 0): <none>
[13:36:28.777] Packages needed by future strategies (n = 0): <none>
[13:36:28.778] {
[13:36:28.778]     {
[13:36:28.778]         {
[13:36:28.778]             ...future.startTime <- base::Sys.time()
[13:36:28.778]             {
[13:36:28.778]                 {
[13:36:28.778]                   {
[13:36:28.778]                     {
[13:36:28.778]                       base::local({
[13:36:28.778]                         has_future <- base::requireNamespace("future", 
[13:36:28.778]                           quietly = TRUE)
[13:36:28.778]                         if (has_future) {
[13:36:28.778]                           ns <- base::getNamespace("future")
[13:36:28.778]                           version <- ns[[".package"]][["version"]]
[13:36:28.778]                           if (is.null(version)) 
[13:36:28.778]                             version <- utils::packageVersion("future")
[13:36:28.778]                         }
[13:36:28.778]                         else {
[13:36:28.778]                           version <- NULL
[13:36:28.778]                         }
[13:36:28.778]                         if (!has_future || version < "1.8.0") {
[13:36:28.778]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:28.778]                             "", base::R.version$version.string), 
[13:36:28.778]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:28.778]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:28.778]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:28.778]                               "release", "version")], collapse = " "), 
[13:36:28.778]                             hostname = base::Sys.info()[["nodename"]])
[13:36:28.778]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:28.778]                             info)
[13:36:28.778]                           info <- base::paste(info, collapse = "; ")
[13:36:28.778]                           if (!has_future) {
[13:36:28.778]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:28.778]                               info)
[13:36:28.778]                           }
[13:36:28.778]                           else {
[13:36:28.778]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:28.778]                               info, version)
[13:36:28.778]                           }
[13:36:28.778]                           base::stop(msg)
[13:36:28.778]                         }
[13:36:28.778]                       })
[13:36:28.778]                     }
[13:36:28.778]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:28.778]                     base::options(mc.cores = 1L)
[13:36:28.778]                   }
[13:36:28.778]                   ...future.strategy.old <- future::plan("list")
[13:36:28.778]                   options(future.plan = NULL)
[13:36:28.778]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:28.778]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:28.778]                 }
[13:36:28.778]                 ...future.workdir <- getwd()
[13:36:28.778]             }
[13:36:28.778]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:28.778]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:28.778]         }
[13:36:28.778]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:28.778]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:28.778]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:28.778]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:28.778]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:28.778]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:28.778]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:28.778]             base::names(...future.oldOptions))
[13:36:28.778]     }
[13:36:28.778]     if (FALSE) {
[13:36:28.778]     }
[13:36:28.778]     else {
[13:36:28.778]         if (TRUE) {
[13:36:28.778]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:28.778]                 open = "w")
[13:36:28.778]         }
[13:36:28.778]         else {
[13:36:28.778]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:28.778]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:28.778]         }
[13:36:28.778]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:28.778]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:28.778]             base::sink(type = "output", split = FALSE)
[13:36:28.778]             base::close(...future.stdout)
[13:36:28.778]         }, add = TRUE)
[13:36:28.778]     }
[13:36:28.778]     ...future.frame <- base::sys.nframe()
[13:36:28.778]     ...future.conditions <- base::list()
[13:36:28.778]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:28.778]     if (FALSE) {
[13:36:28.778]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:28.778]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:28.778]     }
[13:36:28.778]     ...future.result <- base::tryCatch({
[13:36:28.778]         base::withCallingHandlers({
[13:36:28.778]             ...future.value <- base::withVisible(base::local({
[13:36:28.778]                 ...future.makeSendCondition <- base::local({
[13:36:28.778]                   sendCondition <- NULL
[13:36:28.778]                   function(frame = 1L) {
[13:36:28.778]                     if (is.function(sendCondition)) 
[13:36:28.778]                       return(sendCondition)
[13:36:28.778]                     ns <- getNamespace("parallel")
[13:36:28.778]                     if (exists("sendData", mode = "function", 
[13:36:28.778]                       envir = ns)) {
[13:36:28.778]                       parallel_sendData <- get("sendData", mode = "function", 
[13:36:28.778]                         envir = ns)
[13:36:28.778]                       envir <- sys.frame(frame)
[13:36:28.778]                       master <- NULL
[13:36:28.778]                       while (!identical(envir, .GlobalEnv) && 
[13:36:28.778]                         !identical(envir, emptyenv())) {
[13:36:28.778]                         if (exists("master", mode = "list", envir = envir, 
[13:36:28.778]                           inherits = FALSE)) {
[13:36:28.778]                           master <- get("master", mode = "list", 
[13:36:28.778]                             envir = envir, inherits = FALSE)
[13:36:28.778]                           if (inherits(master, c("SOCKnode", 
[13:36:28.778]                             "SOCK0node"))) {
[13:36:28.778]                             sendCondition <<- function(cond) {
[13:36:28.778]                               data <- list(type = "VALUE", value = cond, 
[13:36:28.778]                                 success = TRUE)
[13:36:28.778]                               parallel_sendData(master, data)
[13:36:28.778]                             }
[13:36:28.778]                             return(sendCondition)
[13:36:28.778]                           }
[13:36:28.778]                         }
[13:36:28.778]                         frame <- frame + 1L
[13:36:28.778]                         envir <- sys.frame(frame)
[13:36:28.778]                       }
[13:36:28.778]                     }
[13:36:28.778]                     sendCondition <<- function(cond) NULL
[13:36:28.778]                   }
[13:36:28.778]                 })
[13:36:28.778]                 withCallingHandlers({
[13:36:28.778]                   {
[13:36:28.778]                     2 * a
[13:36:28.778]                   }
[13:36:28.778]                 }, immediateCondition = function(cond) {
[13:36:28.778]                   sendCondition <- ...future.makeSendCondition()
[13:36:28.778]                   sendCondition(cond)
[13:36:28.778]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:28.778]                   {
[13:36:28.778]                     inherits <- base::inherits
[13:36:28.778]                     invokeRestart <- base::invokeRestart
[13:36:28.778]                     is.null <- base::is.null
[13:36:28.778]                     muffled <- FALSE
[13:36:28.778]                     if (inherits(cond, "message")) {
[13:36:28.778]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:28.778]                       if (muffled) 
[13:36:28.778]                         invokeRestart("muffleMessage")
[13:36:28.778]                     }
[13:36:28.778]                     else if (inherits(cond, "warning")) {
[13:36:28.778]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:28.778]                       if (muffled) 
[13:36:28.778]                         invokeRestart("muffleWarning")
[13:36:28.778]                     }
[13:36:28.778]                     else if (inherits(cond, "condition")) {
[13:36:28.778]                       if (!is.null(pattern)) {
[13:36:28.778]                         computeRestarts <- base::computeRestarts
[13:36:28.778]                         grepl <- base::grepl
[13:36:28.778]                         restarts <- computeRestarts(cond)
[13:36:28.778]                         for (restart in restarts) {
[13:36:28.778]                           name <- restart$name
[13:36:28.778]                           if (is.null(name)) 
[13:36:28.778]                             next
[13:36:28.778]                           if (!grepl(pattern, name)) 
[13:36:28.778]                             next
[13:36:28.778]                           invokeRestart(restart)
[13:36:28.778]                           muffled <- TRUE
[13:36:28.778]                           break
[13:36:28.778]                         }
[13:36:28.778]                       }
[13:36:28.778]                     }
[13:36:28.778]                     invisible(muffled)
[13:36:28.778]                   }
[13:36:28.778]                   muffleCondition(cond)
[13:36:28.778]                 })
[13:36:28.778]             }))
[13:36:28.778]             future::FutureResult(value = ...future.value$value, 
[13:36:28.778]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:28.778]                   ...future.rng), globalenv = if (FALSE) 
[13:36:28.778]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:28.778]                     ...future.globalenv.names))
[13:36:28.778]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:28.778]         }, condition = base::local({
[13:36:28.778]             c <- base::c
[13:36:28.778]             inherits <- base::inherits
[13:36:28.778]             invokeRestart <- base::invokeRestart
[13:36:28.778]             length <- base::length
[13:36:28.778]             list <- base::list
[13:36:28.778]             seq.int <- base::seq.int
[13:36:28.778]             signalCondition <- base::signalCondition
[13:36:28.778]             sys.calls <- base::sys.calls
[13:36:28.778]             `[[` <- base::`[[`
[13:36:28.778]             `+` <- base::`+`
[13:36:28.778]             `<<-` <- base::`<<-`
[13:36:28.778]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:28.778]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:28.778]                   3L)]
[13:36:28.778]             }
[13:36:28.778]             function(cond) {
[13:36:28.778]                 is_error <- inherits(cond, "error")
[13:36:28.778]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:28.778]                   NULL)
[13:36:28.778]                 if (is_error) {
[13:36:28.778]                   sessionInformation <- function() {
[13:36:28.778]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:28.778]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:28.778]                       search = base::search(), system = base::Sys.info())
[13:36:28.778]                   }
[13:36:28.778]                   ...future.conditions[[length(...future.conditions) + 
[13:36:28.778]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:28.778]                     cond$call), session = sessionInformation(), 
[13:36:28.778]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:28.778]                   signalCondition(cond)
[13:36:28.778]                 }
[13:36:28.778]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:28.778]                 "immediateCondition"))) {
[13:36:28.778]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:28.778]                   ...future.conditions[[length(...future.conditions) + 
[13:36:28.778]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:28.778]                   if (TRUE && !signal) {
[13:36:28.778]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:28.778]                     {
[13:36:28.778]                       inherits <- base::inherits
[13:36:28.778]                       invokeRestart <- base::invokeRestart
[13:36:28.778]                       is.null <- base::is.null
[13:36:28.778]                       muffled <- FALSE
[13:36:28.778]                       if (inherits(cond, "message")) {
[13:36:28.778]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:28.778]                         if (muffled) 
[13:36:28.778]                           invokeRestart("muffleMessage")
[13:36:28.778]                       }
[13:36:28.778]                       else if (inherits(cond, "warning")) {
[13:36:28.778]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:28.778]                         if (muffled) 
[13:36:28.778]                           invokeRestart("muffleWarning")
[13:36:28.778]                       }
[13:36:28.778]                       else if (inherits(cond, "condition")) {
[13:36:28.778]                         if (!is.null(pattern)) {
[13:36:28.778]                           computeRestarts <- base::computeRestarts
[13:36:28.778]                           grepl <- base::grepl
[13:36:28.778]                           restarts <- computeRestarts(cond)
[13:36:28.778]                           for (restart in restarts) {
[13:36:28.778]                             name <- restart$name
[13:36:28.778]                             if (is.null(name)) 
[13:36:28.778]                               next
[13:36:28.778]                             if (!grepl(pattern, name)) 
[13:36:28.778]                               next
[13:36:28.778]                             invokeRestart(restart)
[13:36:28.778]                             muffled <- TRUE
[13:36:28.778]                             break
[13:36:28.778]                           }
[13:36:28.778]                         }
[13:36:28.778]                       }
[13:36:28.778]                       invisible(muffled)
[13:36:28.778]                     }
[13:36:28.778]                     muffleCondition(cond, pattern = "^muffle")
[13:36:28.778]                   }
[13:36:28.778]                 }
[13:36:28.778]                 else {
[13:36:28.778]                   if (TRUE) {
[13:36:28.778]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:28.778]                     {
[13:36:28.778]                       inherits <- base::inherits
[13:36:28.778]                       invokeRestart <- base::invokeRestart
[13:36:28.778]                       is.null <- base::is.null
[13:36:28.778]                       muffled <- FALSE
[13:36:28.778]                       if (inherits(cond, "message")) {
[13:36:28.778]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:28.778]                         if (muffled) 
[13:36:28.778]                           invokeRestart("muffleMessage")
[13:36:28.778]                       }
[13:36:28.778]                       else if (inherits(cond, "warning")) {
[13:36:28.778]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:28.778]                         if (muffled) 
[13:36:28.778]                           invokeRestart("muffleWarning")
[13:36:28.778]                       }
[13:36:28.778]                       else if (inherits(cond, "condition")) {
[13:36:28.778]                         if (!is.null(pattern)) {
[13:36:28.778]                           computeRestarts <- base::computeRestarts
[13:36:28.778]                           grepl <- base::grepl
[13:36:28.778]                           restarts <- computeRestarts(cond)
[13:36:28.778]                           for (restart in restarts) {
[13:36:28.778]                             name <- restart$name
[13:36:28.778]                             if (is.null(name)) 
[13:36:28.778]                               next
[13:36:28.778]                             if (!grepl(pattern, name)) 
[13:36:28.778]                               next
[13:36:28.778]                             invokeRestart(restart)
[13:36:28.778]                             muffled <- TRUE
[13:36:28.778]                             break
[13:36:28.778]                           }
[13:36:28.778]                         }
[13:36:28.778]                       }
[13:36:28.778]                       invisible(muffled)
[13:36:28.778]                     }
[13:36:28.778]                     muffleCondition(cond, pattern = "^muffle")
[13:36:28.778]                   }
[13:36:28.778]                 }
[13:36:28.778]             }
[13:36:28.778]         }))
[13:36:28.778]     }, error = function(ex) {
[13:36:28.778]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:28.778]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:28.778]                 ...future.rng), started = ...future.startTime, 
[13:36:28.778]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:28.778]             version = "1.8"), class = "FutureResult")
[13:36:28.778]     }, finally = {
[13:36:28.778]         if (!identical(...future.workdir, getwd())) 
[13:36:28.778]             setwd(...future.workdir)
[13:36:28.778]         {
[13:36:28.778]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:28.778]                 ...future.oldOptions$nwarnings <- NULL
[13:36:28.778]             }
[13:36:28.778]             base::options(...future.oldOptions)
[13:36:28.778]             if (.Platform$OS.type == "windows") {
[13:36:28.778]                 old_names <- names(...future.oldEnvVars)
[13:36:28.778]                 envs <- base::Sys.getenv()
[13:36:28.778]                 names <- names(envs)
[13:36:28.778]                 common <- intersect(names, old_names)
[13:36:28.778]                 added <- setdiff(names, old_names)
[13:36:28.778]                 removed <- setdiff(old_names, names)
[13:36:28.778]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:28.778]                   envs[common]]
[13:36:28.778]                 NAMES <- toupper(changed)
[13:36:28.778]                 args <- list()
[13:36:28.778]                 for (kk in seq_along(NAMES)) {
[13:36:28.778]                   name <- changed[[kk]]
[13:36:28.778]                   NAME <- NAMES[[kk]]
[13:36:28.778]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:28.778]                     next
[13:36:28.778]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:28.778]                 }
[13:36:28.778]                 NAMES <- toupper(added)
[13:36:28.778]                 for (kk in seq_along(NAMES)) {
[13:36:28.778]                   name <- added[[kk]]
[13:36:28.778]                   NAME <- NAMES[[kk]]
[13:36:28.778]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:28.778]                     next
[13:36:28.778]                   args[[name]] <- ""
[13:36:28.778]                 }
[13:36:28.778]                 NAMES <- toupper(removed)
[13:36:28.778]                 for (kk in seq_along(NAMES)) {
[13:36:28.778]                   name <- removed[[kk]]
[13:36:28.778]                   NAME <- NAMES[[kk]]
[13:36:28.778]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:28.778]                     next
[13:36:28.778]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:28.778]                 }
[13:36:28.778]                 if (length(args) > 0) 
[13:36:28.778]                   base::do.call(base::Sys.setenv, args = args)
[13:36:28.778]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:28.778]             }
[13:36:28.778]             else {
[13:36:28.778]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:28.778]             }
[13:36:28.778]             {
[13:36:28.778]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:28.778]                   0L) {
[13:36:28.778]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:28.778]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:28.778]                   base::options(opts)
[13:36:28.778]                 }
[13:36:28.778]                 {
[13:36:28.778]                   {
[13:36:28.778]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:28.778]                     NULL
[13:36:28.778]                   }
[13:36:28.778]                   options(future.plan = NULL)
[13:36:28.778]                   if (is.na(NA_character_)) 
[13:36:28.778]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:28.778]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:28.778]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:28.778]                     .init = FALSE)
[13:36:28.778]                 }
[13:36:28.778]             }
[13:36:28.778]         }
[13:36:28.778]     })
[13:36:28.778]     if (TRUE) {
[13:36:28.778]         base::sink(type = "output", split = FALSE)
[13:36:28.778]         if (TRUE) {
[13:36:28.778]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:28.778]         }
[13:36:28.778]         else {
[13:36:28.778]             ...future.result["stdout"] <- base::list(NULL)
[13:36:28.778]         }
[13:36:28.778]         base::close(...future.stdout)
[13:36:28.778]         ...future.stdout <- NULL
[13:36:28.778]     }
[13:36:28.778]     ...future.result$conditions <- ...future.conditions
[13:36:28.778]     ...future.result$finished <- base::Sys.time()
[13:36:28.778]     ...future.result
[13:36:28.778] }
[13:36:28.780] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[13:36:28.780] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[13:36:28.781] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[13:36:28.781] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[13:36:28.781] MultisessionFuture started
[13:36:28.781] - Launch lazy future ... done
[13:36:28.782] run() for ‘MultisessionFuture’ ... done
[13:36:28.782] result() for ClusterFuture ...
[13:36:28.782] receiveMessageFromWorker() for ClusterFuture ...
[13:36:28.782] - Validating connection of MultisessionFuture
[13:36:28.783] - received message: FutureResult
[13:36:28.783] - Received FutureResult
[13:36:28.783] - Erased future from FutureRegistry
[13:36:28.783] result() for ClusterFuture ...
[13:36:28.783] - result already collected: FutureResult
[13:36:28.783] result() for ClusterFuture ... done
[13:36:28.783] receiveMessageFromWorker() for ClusterFuture ... done
[13:36:28.783] result() for ClusterFuture ... done
[13:36:28.784] result() for ClusterFuture ...
[13:36:28.784] - result already collected: FutureResult
[13:36:28.784] result() for ClusterFuture ... done
[13:36:28.784] getGlobalsAndPackages() ...
[13:36:28.784] Searching for globals...
[13:36:28.785] - globals found: [3] ‘{’, ‘*’, ‘a’
[13:36:28.785] Searching for globals ... DONE
[13:36:28.785] Resolving globals: FALSE
[13:36:28.785] The total size of the 1 globals is 56 bytes (56 bytes)
[13:36:28.786] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[13:36:28.786] - globals: [1] ‘a’
[13:36:28.786] 
[13:36:28.786] getGlobalsAndPackages() ... DONE
[13:36:28.786] run() for ‘Future’ ...
[13:36:28.786] - state: ‘created’
[13:36:28.786] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:36:28.800] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:28.800] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:36:28.800]   - Field: ‘node’
[13:36:28.800]   - Field: ‘label’
[13:36:28.800]   - Field: ‘local’
[13:36:28.800]   - Field: ‘owner’
[13:36:28.800]   - Field: ‘envir’
[13:36:28.800]   - Field: ‘workers’
[13:36:28.800]   - Field: ‘packages’
[13:36:28.801]   - Field: ‘gc’
[13:36:28.801]   - Field: ‘conditions’
[13:36:28.801]   - Field: ‘persistent’
[13:36:28.801]   - Field: ‘expr’
[13:36:28.801]   - Field: ‘uuid’
[13:36:28.801]   - Field: ‘seed’
[13:36:28.801]   - Field: ‘version’
[13:36:28.801]   - Field: ‘result’
[13:36:28.801]   - Field: ‘asynchronous’
[13:36:28.801]   - Field: ‘calls’
[13:36:28.801]   - Field: ‘globals’
[13:36:28.802]   - Field: ‘stdout’
[13:36:28.802]   - Field: ‘earlySignal’
[13:36:28.802]   - Field: ‘lazy’
[13:36:28.802]   - Field: ‘state’
[13:36:28.802] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:36:28.802] - Launch lazy future ...
[13:36:28.802] Packages needed by the future expression (n = 0): <none>
[13:36:28.802] Packages needed by future strategies (n = 0): <none>
[13:36:28.803] {
[13:36:28.803]     {
[13:36:28.803]         {
[13:36:28.803]             ...future.startTime <- base::Sys.time()
[13:36:28.803]             {
[13:36:28.803]                 {
[13:36:28.803]                   {
[13:36:28.803]                     {
[13:36:28.803]                       base::local({
[13:36:28.803]                         has_future <- base::requireNamespace("future", 
[13:36:28.803]                           quietly = TRUE)
[13:36:28.803]                         if (has_future) {
[13:36:28.803]                           ns <- base::getNamespace("future")
[13:36:28.803]                           version <- ns[[".package"]][["version"]]
[13:36:28.803]                           if (is.null(version)) 
[13:36:28.803]                             version <- utils::packageVersion("future")
[13:36:28.803]                         }
[13:36:28.803]                         else {
[13:36:28.803]                           version <- NULL
[13:36:28.803]                         }
[13:36:28.803]                         if (!has_future || version < "1.8.0") {
[13:36:28.803]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:28.803]                             "", base::R.version$version.string), 
[13:36:28.803]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:28.803]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:28.803]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:28.803]                               "release", "version")], collapse = " "), 
[13:36:28.803]                             hostname = base::Sys.info()[["nodename"]])
[13:36:28.803]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:28.803]                             info)
[13:36:28.803]                           info <- base::paste(info, collapse = "; ")
[13:36:28.803]                           if (!has_future) {
[13:36:28.803]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:28.803]                               info)
[13:36:28.803]                           }
[13:36:28.803]                           else {
[13:36:28.803]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:28.803]                               info, version)
[13:36:28.803]                           }
[13:36:28.803]                           base::stop(msg)
[13:36:28.803]                         }
[13:36:28.803]                       })
[13:36:28.803]                     }
[13:36:28.803]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:28.803]                     base::options(mc.cores = 1L)
[13:36:28.803]                   }
[13:36:28.803]                   ...future.strategy.old <- future::plan("list")
[13:36:28.803]                   options(future.plan = NULL)
[13:36:28.803]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:28.803]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:28.803]                 }
[13:36:28.803]                 ...future.workdir <- getwd()
[13:36:28.803]             }
[13:36:28.803]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:28.803]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:28.803]         }
[13:36:28.803]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:28.803]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:28.803]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:28.803]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:28.803]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:28.803]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:28.803]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:28.803]             base::names(...future.oldOptions))
[13:36:28.803]     }
[13:36:28.803]     if (FALSE) {
[13:36:28.803]     }
[13:36:28.803]     else {
[13:36:28.803]         if (TRUE) {
[13:36:28.803]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:28.803]                 open = "w")
[13:36:28.803]         }
[13:36:28.803]         else {
[13:36:28.803]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:28.803]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:28.803]         }
[13:36:28.803]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:28.803]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:28.803]             base::sink(type = "output", split = FALSE)
[13:36:28.803]             base::close(...future.stdout)
[13:36:28.803]         }, add = TRUE)
[13:36:28.803]     }
[13:36:28.803]     ...future.frame <- base::sys.nframe()
[13:36:28.803]     ...future.conditions <- base::list()
[13:36:28.803]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:28.803]     if (FALSE) {
[13:36:28.803]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:28.803]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:28.803]     }
[13:36:28.803]     ...future.result <- base::tryCatch({
[13:36:28.803]         base::withCallingHandlers({
[13:36:28.803]             ...future.value <- base::withVisible(base::local({
[13:36:28.803]                 ...future.makeSendCondition <- base::local({
[13:36:28.803]                   sendCondition <- NULL
[13:36:28.803]                   function(frame = 1L) {
[13:36:28.803]                     if (is.function(sendCondition)) 
[13:36:28.803]                       return(sendCondition)
[13:36:28.803]                     ns <- getNamespace("parallel")
[13:36:28.803]                     if (exists("sendData", mode = "function", 
[13:36:28.803]                       envir = ns)) {
[13:36:28.803]                       parallel_sendData <- get("sendData", mode = "function", 
[13:36:28.803]                         envir = ns)
[13:36:28.803]                       envir <- sys.frame(frame)
[13:36:28.803]                       master <- NULL
[13:36:28.803]                       while (!identical(envir, .GlobalEnv) && 
[13:36:28.803]                         !identical(envir, emptyenv())) {
[13:36:28.803]                         if (exists("master", mode = "list", envir = envir, 
[13:36:28.803]                           inherits = FALSE)) {
[13:36:28.803]                           master <- get("master", mode = "list", 
[13:36:28.803]                             envir = envir, inherits = FALSE)
[13:36:28.803]                           if (inherits(master, c("SOCKnode", 
[13:36:28.803]                             "SOCK0node"))) {
[13:36:28.803]                             sendCondition <<- function(cond) {
[13:36:28.803]                               data <- list(type = "VALUE", value = cond, 
[13:36:28.803]                                 success = TRUE)
[13:36:28.803]                               parallel_sendData(master, data)
[13:36:28.803]                             }
[13:36:28.803]                             return(sendCondition)
[13:36:28.803]                           }
[13:36:28.803]                         }
[13:36:28.803]                         frame <- frame + 1L
[13:36:28.803]                         envir <- sys.frame(frame)
[13:36:28.803]                       }
[13:36:28.803]                     }
[13:36:28.803]                     sendCondition <<- function(cond) NULL
[13:36:28.803]                   }
[13:36:28.803]                 })
[13:36:28.803]                 withCallingHandlers({
[13:36:28.803]                   {
[13:36:28.803]                     2 * a
[13:36:28.803]                   }
[13:36:28.803]                 }, immediateCondition = function(cond) {
[13:36:28.803]                   sendCondition <- ...future.makeSendCondition()
[13:36:28.803]                   sendCondition(cond)
[13:36:28.803]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:28.803]                   {
[13:36:28.803]                     inherits <- base::inherits
[13:36:28.803]                     invokeRestart <- base::invokeRestart
[13:36:28.803]                     is.null <- base::is.null
[13:36:28.803]                     muffled <- FALSE
[13:36:28.803]                     if (inherits(cond, "message")) {
[13:36:28.803]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:28.803]                       if (muffled) 
[13:36:28.803]                         invokeRestart("muffleMessage")
[13:36:28.803]                     }
[13:36:28.803]                     else if (inherits(cond, "warning")) {
[13:36:28.803]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:28.803]                       if (muffled) 
[13:36:28.803]                         invokeRestart("muffleWarning")
[13:36:28.803]                     }
[13:36:28.803]                     else if (inherits(cond, "condition")) {
[13:36:28.803]                       if (!is.null(pattern)) {
[13:36:28.803]                         computeRestarts <- base::computeRestarts
[13:36:28.803]                         grepl <- base::grepl
[13:36:28.803]                         restarts <- computeRestarts(cond)
[13:36:28.803]                         for (restart in restarts) {
[13:36:28.803]                           name <- restart$name
[13:36:28.803]                           if (is.null(name)) 
[13:36:28.803]                             next
[13:36:28.803]                           if (!grepl(pattern, name)) 
[13:36:28.803]                             next
[13:36:28.803]                           invokeRestart(restart)
[13:36:28.803]                           muffled <- TRUE
[13:36:28.803]                           break
[13:36:28.803]                         }
[13:36:28.803]                       }
[13:36:28.803]                     }
[13:36:28.803]                     invisible(muffled)
[13:36:28.803]                   }
[13:36:28.803]                   muffleCondition(cond)
[13:36:28.803]                 })
[13:36:28.803]             }))
[13:36:28.803]             future::FutureResult(value = ...future.value$value, 
[13:36:28.803]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:28.803]                   ...future.rng), globalenv = if (FALSE) 
[13:36:28.803]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:28.803]                     ...future.globalenv.names))
[13:36:28.803]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:28.803]         }, condition = base::local({
[13:36:28.803]             c <- base::c
[13:36:28.803]             inherits <- base::inherits
[13:36:28.803]             invokeRestart <- base::invokeRestart
[13:36:28.803]             length <- base::length
[13:36:28.803]             list <- base::list
[13:36:28.803]             seq.int <- base::seq.int
[13:36:28.803]             signalCondition <- base::signalCondition
[13:36:28.803]             sys.calls <- base::sys.calls
[13:36:28.803]             `[[` <- base::`[[`
[13:36:28.803]             `+` <- base::`+`
[13:36:28.803]             `<<-` <- base::`<<-`
[13:36:28.803]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:28.803]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:28.803]                   3L)]
[13:36:28.803]             }
[13:36:28.803]             function(cond) {
[13:36:28.803]                 is_error <- inherits(cond, "error")
[13:36:28.803]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:28.803]                   NULL)
[13:36:28.803]                 if (is_error) {
[13:36:28.803]                   sessionInformation <- function() {
[13:36:28.803]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:28.803]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:28.803]                       search = base::search(), system = base::Sys.info())
[13:36:28.803]                   }
[13:36:28.803]                   ...future.conditions[[length(...future.conditions) + 
[13:36:28.803]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:28.803]                     cond$call), session = sessionInformation(), 
[13:36:28.803]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:28.803]                   signalCondition(cond)
[13:36:28.803]                 }
[13:36:28.803]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:28.803]                 "immediateCondition"))) {
[13:36:28.803]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:28.803]                   ...future.conditions[[length(...future.conditions) + 
[13:36:28.803]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:28.803]                   if (TRUE && !signal) {
[13:36:28.803]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:28.803]                     {
[13:36:28.803]                       inherits <- base::inherits
[13:36:28.803]                       invokeRestart <- base::invokeRestart
[13:36:28.803]                       is.null <- base::is.null
[13:36:28.803]                       muffled <- FALSE
[13:36:28.803]                       if (inherits(cond, "message")) {
[13:36:28.803]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:28.803]                         if (muffled) 
[13:36:28.803]                           invokeRestart("muffleMessage")
[13:36:28.803]                       }
[13:36:28.803]                       else if (inherits(cond, "warning")) {
[13:36:28.803]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:28.803]                         if (muffled) 
[13:36:28.803]                           invokeRestart("muffleWarning")
[13:36:28.803]                       }
[13:36:28.803]                       else if (inherits(cond, "condition")) {
[13:36:28.803]                         if (!is.null(pattern)) {
[13:36:28.803]                           computeRestarts <- base::computeRestarts
[13:36:28.803]                           grepl <- base::grepl
[13:36:28.803]                           restarts <- computeRestarts(cond)
[13:36:28.803]                           for (restart in restarts) {
[13:36:28.803]                             name <- restart$name
[13:36:28.803]                             if (is.null(name)) 
[13:36:28.803]                               next
[13:36:28.803]                             if (!grepl(pattern, name)) 
[13:36:28.803]                               next
[13:36:28.803]                             invokeRestart(restart)
[13:36:28.803]                             muffled <- TRUE
[13:36:28.803]                             break
[13:36:28.803]                           }
[13:36:28.803]                         }
[13:36:28.803]                       }
[13:36:28.803]                       invisible(muffled)
[13:36:28.803]                     }
[13:36:28.803]                     muffleCondition(cond, pattern = "^muffle")
[13:36:28.803]                   }
[13:36:28.803]                 }
[13:36:28.803]                 else {
[13:36:28.803]                   if (TRUE) {
[13:36:28.803]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:28.803]                     {
[13:36:28.803]                       inherits <- base::inherits
[13:36:28.803]                       invokeRestart <- base::invokeRestart
[13:36:28.803]                       is.null <- base::is.null
[13:36:28.803]                       muffled <- FALSE
[13:36:28.803]                       if (inherits(cond, "message")) {
[13:36:28.803]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:28.803]                         if (muffled) 
[13:36:28.803]                           invokeRestart("muffleMessage")
[13:36:28.803]                       }
[13:36:28.803]                       else if (inherits(cond, "warning")) {
[13:36:28.803]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:28.803]                         if (muffled) 
[13:36:28.803]                           invokeRestart("muffleWarning")
[13:36:28.803]                       }
[13:36:28.803]                       else if (inherits(cond, "condition")) {
[13:36:28.803]                         if (!is.null(pattern)) {
[13:36:28.803]                           computeRestarts <- base::computeRestarts
[13:36:28.803]                           grepl <- base::grepl
[13:36:28.803]                           restarts <- computeRestarts(cond)
[13:36:28.803]                           for (restart in restarts) {
[13:36:28.803]                             name <- restart$name
[13:36:28.803]                             if (is.null(name)) 
[13:36:28.803]                               next
[13:36:28.803]                             if (!grepl(pattern, name)) 
[13:36:28.803]                               next
[13:36:28.803]                             invokeRestart(restart)
[13:36:28.803]                             muffled <- TRUE
[13:36:28.803]                             break
[13:36:28.803]                           }
[13:36:28.803]                         }
[13:36:28.803]                       }
[13:36:28.803]                       invisible(muffled)
[13:36:28.803]                     }
[13:36:28.803]                     muffleCondition(cond, pattern = "^muffle")
[13:36:28.803]                   }
[13:36:28.803]                 }
[13:36:28.803]             }
[13:36:28.803]         }))
[13:36:28.803]     }, error = function(ex) {
[13:36:28.803]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:28.803]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:28.803]                 ...future.rng), started = ...future.startTime, 
[13:36:28.803]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:28.803]             version = "1.8"), class = "FutureResult")
[13:36:28.803]     }, finally = {
[13:36:28.803]         if (!identical(...future.workdir, getwd())) 
[13:36:28.803]             setwd(...future.workdir)
[13:36:28.803]         {
[13:36:28.803]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:28.803]                 ...future.oldOptions$nwarnings <- NULL
[13:36:28.803]             }
[13:36:28.803]             base::options(...future.oldOptions)
[13:36:28.803]             if (.Platform$OS.type == "windows") {
[13:36:28.803]                 old_names <- names(...future.oldEnvVars)
[13:36:28.803]                 envs <- base::Sys.getenv()
[13:36:28.803]                 names <- names(envs)
[13:36:28.803]                 common <- intersect(names, old_names)
[13:36:28.803]                 added <- setdiff(names, old_names)
[13:36:28.803]                 removed <- setdiff(old_names, names)
[13:36:28.803]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:28.803]                   envs[common]]
[13:36:28.803]                 NAMES <- toupper(changed)
[13:36:28.803]                 args <- list()
[13:36:28.803]                 for (kk in seq_along(NAMES)) {
[13:36:28.803]                   name <- changed[[kk]]
[13:36:28.803]                   NAME <- NAMES[[kk]]
[13:36:28.803]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:28.803]                     next
[13:36:28.803]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:28.803]                 }
[13:36:28.803]                 NAMES <- toupper(added)
[13:36:28.803]                 for (kk in seq_along(NAMES)) {
[13:36:28.803]                   name <- added[[kk]]
[13:36:28.803]                   NAME <- NAMES[[kk]]
[13:36:28.803]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:28.803]                     next
[13:36:28.803]                   args[[name]] <- ""
[13:36:28.803]                 }
[13:36:28.803]                 NAMES <- toupper(removed)
[13:36:28.803]                 for (kk in seq_along(NAMES)) {
[13:36:28.803]                   name <- removed[[kk]]
[13:36:28.803]                   NAME <- NAMES[[kk]]
[13:36:28.803]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:28.803]                     next
[13:36:28.803]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:28.803]                 }
[13:36:28.803]                 if (length(args) > 0) 
[13:36:28.803]                   base::do.call(base::Sys.setenv, args = args)
[13:36:28.803]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:28.803]             }
[13:36:28.803]             else {
[13:36:28.803]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:28.803]             }
[13:36:28.803]             {
[13:36:28.803]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:28.803]                   0L) {
[13:36:28.803]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:28.803]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:28.803]                   base::options(opts)
[13:36:28.803]                 }
[13:36:28.803]                 {
[13:36:28.803]                   {
[13:36:28.803]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:28.803]                     NULL
[13:36:28.803]                   }
[13:36:28.803]                   options(future.plan = NULL)
[13:36:28.803]                   if (is.na(NA_character_)) 
[13:36:28.803]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:28.803]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:28.803]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:28.803]                     .init = FALSE)
[13:36:28.803]                 }
[13:36:28.803]             }
[13:36:28.803]         }
[13:36:28.803]     })
[13:36:28.803]     if (TRUE) {
[13:36:28.803]         base::sink(type = "output", split = FALSE)
[13:36:28.803]         if (TRUE) {
[13:36:28.803]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:28.803]         }
[13:36:28.803]         else {
[13:36:28.803]             ...future.result["stdout"] <- base::list(NULL)
[13:36:28.803]         }
[13:36:28.803]         base::close(...future.stdout)
[13:36:28.803]         ...future.stdout <- NULL
[13:36:28.803]     }
[13:36:28.803]     ...future.result$conditions <- ...future.conditions
[13:36:28.803]     ...future.result$finished <- base::Sys.time()
[13:36:28.803]     ...future.result
[13:36:28.803] }
[13:36:28.805] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[13:36:28.805] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[13:36:28.806] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[13:36:28.806] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[13:36:28.806] MultisessionFuture started
[13:36:28.806] - Launch lazy future ... done
[13:36:28.806] run() for ‘MultisessionFuture’ ... done
[13:36:28.806] result() for ClusterFuture ...
[13:36:28.807] receiveMessageFromWorker() for ClusterFuture ...
[13:36:28.807] - Validating connection of MultisessionFuture
[13:36:28.807] - received message: FutureResult
[13:36:28.808] - Received FutureResult
[13:36:28.808] - Erased future from FutureRegistry
[13:36:28.808] result() for ClusterFuture ...
[13:36:28.808] - result already collected: FutureResult
[13:36:28.808] result() for ClusterFuture ... done
[13:36:28.808] receiveMessageFromWorker() for ClusterFuture ... done
[13:36:28.808] result() for ClusterFuture ... done
[13:36:28.808] result() for ClusterFuture ...
[13:36:28.808] - result already collected: FutureResult
[13:36:28.808] result() for ClusterFuture ... done
*** futureAssign() with ‘multisession’ futures ... DONE
Testing with 2 cores ... DONE
> 
> message("*** futureAssign() - lazy = TRUE / FALSE ... DONE")
*** futureAssign() - lazy = TRUE / FALSE ... DONE
> 
> message("*** futureAssign() ... DONE")
*** futureAssign() ... DONE
> 
> source("incl/end.R")
[13:36:28.809] plan(): Setting new future strategy stack:
[13:36:28.809] List of future strategies:
[13:36:28.809] 1. FutureStrategy:
[13:36:28.809]    - args: function (..., envir = parent.frame())
[13:36:28.809]    - tweaked: FALSE
[13:36:28.809]    - call: future::plan(oplan)
[13:36:28.810] plan(): nbrOfWorkers() = 1
> 
