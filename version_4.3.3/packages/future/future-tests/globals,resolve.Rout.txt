
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[16:20:56.485] plan(): Setting new future strategy stack:
[16:20:56.486] List of future strategies:
[16:20:56.486] 1. sequential:
[16:20:56.486]    - args: function (..., envir = parent.frame())
[16:20:56.486]    - tweaked: FALSE
[16:20:56.486]    - call: future::plan("sequential")
[16:20:56.499] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> oopts <- c(oopts, options(future.globals.resolve = TRUE))
> setTimeLimit(cpu = 10, elapsed = 10, transient = TRUE)
> 
> message("*** Tricky use cases related to globals (part 2) ...")
*** Tricky use cases related to globals (part 2) ...
> 
> ## Allow for two background processes
> plan(multisession, workers = 2L)
[16:20:56.513] plan(): Setting new future strategy stack:
[16:20:56.513] List of future strategies:
[16:20:56.513] 1. multisession:
[16:20:56.513]    - args: function (..., workers = 2L, envir = parent.frame())
[16:20:56.513]    - tweaked: TRUE
[16:20:56.513]    - call: plan(multisession, workers = 2L)
[16:20:56.524] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[16:20:56.524] multisession:
[16:20:56.524] - args: function (..., workers = 2L, envir = parent.frame())
[16:20:56.524] - tweaked: TRUE
[16:20:56.524] - call: plan(multisession, workers = 2L)
Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[16:20:56.526] getGlobalsAndPackages() ...
[16:20:56.526] Not searching for globals
[16:20:56.526] - globals: [0] <none>
[16:20:56.526] getGlobalsAndPackages() ... DONE
[16:20:56.527] [local output] makeClusterPSOCK() ...
[16:20:56.556] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[16:20:56.557] [local output] Base port: 11584
[16:20:56.558] [local output] Getting setup options for 2 cluster nodes ...
[16:20:56.558] [local output]  - Node 1 of 2 ...
[16:20:56.558] [local output] localMachine=TRUE => revtunnel=FALSE

[16:20:56.559] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp0pLwvp/worker.rank=1.parallelly.parent=83268.145443369b68.pid")), silent = TRUE)' -e 'file.exists("/tmp/Rtmp0pLwvp/worker.rank=1.parallelly.parent=83268.145443369b68.pid")'’
[16:20:56.750] - Possible to infer worker's PID: TRUE
[16:20:56.751] [local output] Rscript port: 11584

[16:20:56.751] [local output]  - Node 2 of 2 ...
[16:20:56.751] [local output] localMachine=TRUE => revtunnel=FALSE

[16:20:56.752] [local output] Rscript port: 11584

[16:20:56.752] [local output] Getting setup options for 2 cluster nodes ... done
[16:20:56.752] [local output]  - Parallel setup requested for some PSOCK nodes
[16:20:56.753] [local output] Setting up PSOCK nodes in parallel
[16:20:56.753] List of 36
[16:20:56.753]  $ worker          : chr "localhost"
[16:20:56.753]   ..- attr(*, "localhost")= logi TRUE
[16:20:56.753]  $ master          : chr "localhost"
[16:20:56.753]  $ port            : int 11584
[16:20:56.753]  $ connectTimeout  : num 120
[16:20:56.753]  $ timeout         : num 2592000
[16:20:56.753]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[16:20:56.753]  $ homogeneous     : logi TRUE
[16:20:56.753]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[16:20:56.753]  $ rscript_envs    : NULL
[16:20:56.753]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:20:56.753]  $ rscript_startup : NULL
[16:20:56.753]  $ rscript_sh      : chr "sh"
[16:20:56.753]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:20:56.753]  $ methods         : logi TRUE
[16:20:56.753]  $ socketOptions   : chr "no-delay"
[16:20:56.753]  $ useXDR          : logi FALSE
[16:20:56.753]  $ outfile         : chr "/dev/null"
[16:20:56.753]  $ renice          : int NA
[16:20:56.753]  $ rshcmd          : NULL
[16:20:56.753]  $ user            : chr(0) 
[16:20:56.753]  $ revtunnel       : logi FALSE
[16:20:56.753]  $ rshlogfile      : NULL
[16:20:56.753]  $ rshopts         : chr(0) 
[16:20:56.753]  $ rank            : int 1
[16:20:56.753]  $ manual          : logi FALSE
[16:20:56.753]  $ dryrun          : logi FALSE
[16:20:56.753]  $ quiet           : logi FALSE
[16:20:56.753]  $ setup_strategy  : chr "parallel"
[16:20:56.753]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:20:56.753]  $ pidfile         : chr "/tmp/Rtmp0pLwvp/worker.rank=1.parallelly.parent=83268.145443369b68.pid"
[16:20:56.753]  $ rshcmd_label    : NULL
[16:20:56.753]  $ rsh_call        : NULL
[16:20:56.753]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:20:56.753]  $ localMachine    : logi TRUE
[16:20:56.753]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[16:20:56.753]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[16:20:56.753]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[16:20:56.753]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[16:20:56.753]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[16:20:56.753]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[16:20:56.753]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[16:20:56.753]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[16:20:56.753]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[16:20:56.753]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[16:20:56.753]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[16:20:56.753]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[16:20:56.753]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[16:20:56.753]  $ arguments       :List of 28
[16:20:56.753]   ..$ worker          : chr "localhost"
[16:20:56.753]   ..$ master          : NULL
[16:20:56.753]   ..$ port            : int 11584
[16:20:56.753]   ..$ connectTimeout  : num 120
[16:20:56.753]   ..$ timeout         : num 2592000
[16:20:56.753]   ..$ rscript         : NULL
[16:20:56.753]   ..$ homogeneous     : NULL
[16:20:56.753]   ..$ rscript_args    : NULL
[16:20:56.753]   ..$ rscript_envs    : NULL
[16:20:56.753]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:20:56.753]   ..$ rscript_startup : NULL
[16:20:56.753]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[16:20:56.753]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:20:56.753]   ..$ methods         : logi TRUE
[16:20:56.753]   ..$ socketOptions   : chr "no-delay"
[16:20:56.753]   ..$ useXDR          : logi FALSE
[16:20:56.753]   ..$ outfile         : chr "/dev/null"
[16:20:56.753]   ..$ renice          : int NA
[16:20:56.753]   ..$ rshcmd          : NULL
[16:20:56.753]   ..$ user            : NULL
[16:20:56.753]   ..$ revtunnel       : logi NA
[16:20:56.753]   ..$ rshlogfile      : NULL
[16:20:56.753]   ..$ rshopts         : NULL
[16:20:56.753]   ..$ rank            : int 1
[16:20:56.753]   ..$ manual          : logi FALSE
[16:20:56.753]   ..$ dryrun          : logi FALSE
[16:20:56.753]   ..$ quiet           : logi FALSE
[16:20:56.753]   ..$ setup_strategy  : chr "parallel"
[16:20:56.753]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[16:20:56.772] [local output] System call to launch all workers:
[16:20:56.772] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp0pLwvp/worker.rank=1.parallelly.parent=83268.145443369b68.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11584 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[16:20:56.772] [local output] Starting PSOCK main server
[16:20:56.778] [local output] Workers launched
[16:20:56.778] [local output] Waiting for workers to connect back
[16:20:56.778]  - [local output] 0 workers out of 2 ready
[16:20:57.022]  - [local output] 0 workers out of 2 ready
[16:20:57.023]  - [local output] 1 workers out of 2 ready
[16:20:57.023]  - [local output] 2 workers out of 2 ready
[16:20:57.023] [local output] Launching of workers completed
[16:20:57.023] [local output] Collecting session information from workers
[16:20:57.024] [local output]  - Worker #1 of 2
[16:20:57.025] [local output]  - Worker #2 of 2
[16:20:57.025] [local output] makeClusterPSOCK() ... done
[16:20:57.038] Packages needed by the future expression (n = 0): <none>
[16:20:57.038] Packages needed by future strategies (n = 0): <none>
[16:20:57.039] {
[16:20:57.039]     {
[16:20:57.039]         {
[16:20:57.039]             ...future.startTime <- base::Sys.time()
[16:20:57.039]             {
[16:20:57.039]                 {
[16:20:57.039]                   {
[16:20:57.039]                     {
[16:20:57.039]                       base::local({
[16:20:57.039]                         has_future <- base::requireNamespace("future", 
[16:20:57.039]                           quietly = TRUE)
[16:20:57.039]                         if (has_future) {
[16:20:57.039]                           ns <- base::getNamespace("future")
[16:20:57.039]                           version <- ns[[".package"]][["version"]]
[16:20:57.039]                           if (is.null(version)) 
[16:20:57.039]                             version <- utils::packageVersion("future")
[16:20:57.039]                         }
[16:20:57.039]                         else {
[16:20:57.039]                           version <- NULL
[16:20:57.039]                         }
[16:20:57.039]                         if (!has_future || version < "1.8.0") {
[16:20:57.039]                           info <- base::c(r_version = base::gsub("R version ", 
[16:20:57.039]                             "", base::R.version$version.string), 
[16:20:57.039]                             platform = base::sprintf("%s (%s-bit)", 
[16:20:57.039]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:57.039]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:57.039]                               "release", "version")], collapse = " "), 
[16:20:57.039]                             hostname = base::Sys.info()[["nodename"]])
[16:20:57.039]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:20:57.039]                             info)
[16:20:57.039]                           info <- base::paste(info, collapse = "; ")
[16:20:57.039]                           if (!has_future) {
[16:20:57.039]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:57.039]                               info)
[16:20:57.039]                           }
[16:20:57.039]                           else {
[16:20:57.039]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:57.039]                               info, version)
[16:20:57.039]                           }
[16:20:57.039]                           base::stop(msg)
[16:20:57.039]                         }
[16:20:57.039]                       })
[16:20:57.039]                     }
[16:20:57.039]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:57.039]                     base::options(mc.cores = 1L)
[16:20:57.039]                   }
[16:20:57.039]                   ...future.strategy.old <- future::plan("list")
[16:20:57.039]                   options(future.plan = NULL)
[16:20:57.039]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:57.039]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:57.039]                 }
[16:20:57.039]                 ...future.workdir <- getwd()
[16:20:57.039]             }
[16:20:57.039]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:57.039]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:57.039]         }
[16:20:57.039]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:57.039]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:57.039]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:57.039]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[16:20:57.039]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:57.039]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:57.039]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:57.039]             base::names(...future.oldOptions))
[16:20:57.039]     }
[16:20:57.039]     if (FALSE) {
[16:20:57.039]     }
[16:20:57.039]     else {
[16:20:57.039]         if (TRUE) {
[16:20:57.039]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:57.039]                 open = "w")
[16:20:57.039]         }
[16:20:57.039]         else {
[16:20:57.039]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:57.039]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:57.039]         }
[16:20:57.039]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:57.039]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:57.039]             base::sink(type = "output", split = FALSE)
[16:20:57.039]             base::close(...future.stdout)
[16:20:57.039]         }, add = TRUE)
[16:20:57.039]     }
[16:20:57.039]     ...future.frame <- base::sys.nframe()
[16:20:57.039]     ...future.conditions <- base::list()
[16:20:57.039]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:57.039]     if (FALSE) {
[16:20:57.039]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:57.039]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:57.039]     }
[16:20:57.039]     ...future.result <- base::tryCatch({
[16:20:57.039]         base::withCallingHandlers({
[16:20:57.039]             ...future.value <- base::withVisible(base::local({
[16:20:57.039]                 ...future.makeSendCondition <- base::local({
[16:20:57.039]                   sendCondition <- NULL
[16:20:57.039]                   function(frame = 1L) {
[16:20:57.039]                     if (is.function(sendCondition)) 
[16:20:57.039]                       return(sendCondition)
[16:20:57.039]                     ns <- getNamespace("parallel")
[16:20:57.039]                     if (exists("sendData", mode = "function", 
[16:20:57.039]                       envir = ns)) {
[16:20:57.039]                       parallel_sendData <- get("sendData", mode = "function", 
[16:20:57.039]                         envir = ns)
[16:20:57.039]                       envir <- sys.frame(frame)
[16:20:57.039]                       master <- NULL
[16:20:57.039]                       while (!identical(envir, .GlobalEnv) && 
[16:20:57.039]                         !identical(envir, emptyenv())) {
[16:20:57.039]                         if (exists("master", mode = "list", envir = envir, 
[16:20:57.039]                           inherits = FALSE)) {
[16:20:57.039]                           master <- get("master", mode = "list", 
[16:20:57.039]                             envir = envir, inherits = FALSE)
[16:20:57.039]                           if (inherits(master, c("SOCKnode", 
[16:20:57.039]                             "SOCK0node"))) {
[16:20:57.039]                             sendCondition <<- function(cond) {
[16:20:57.039]                               data <- list(type = "VALUE", value = cond, 
[16:20:57.039]                                 success = TRUE)
[16:20:57.039]                               parallel_sendData(master, data)
[16:20:57.039]                             }
[16:20:57.039]                             return(sendCondition)
[16:20:57.039]                           }
[16:20:57.039]                         }
[16:20:57.039]                         frame <- frame + 1L
[16:20:57.039]                         envir <- sys.frame(frame)
[16:20:57.039]                       }
[16:20:57.039]                     }
[16:20:57.039]                     sendCondition <<- function(cond) NULL
[16:20:57.039]                   }
[16:20:57.039]                 })
[16:20:57.039]                 withCallingHandlers({
[16:20:57.039]                   NA
[16:20:57.039]                 }, immediateCondition = function(cond) {
[16:20:57.039]                   sendCondition <- ...future.makeSendCondition()
[16:20:57.039]                   sendCondition(cond)
[16:20:57.039]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:57.039]                   {
[16:20:57.039]                     inherits <- base::inherits
[16:20:57.039]                     invokeRestart <- base::invokeRestart
[16:20:57.039]                     is.null <- base::is.null
[16:20:57.039]                     muffled <- FALSE
[16:20:57.039]                     if (inherits(cond, "message")) {
[16:20:57.039]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:57.039]                       if (muffled) 
[16:20:57.039]                         invokeRestart("muffleMessage")
[16:20:57.039]                     }
[16:20:57.039]                     else if (inherits(cond, "warning")) {
[16:20:57.039]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:57.039]                       if (muffled) 
[16:20:57.039]                         invokeRestart("muffleWarning")
[16:20:57.039]                     }
[16:20:57.039]                     else if (inherits(cond, "condition")) {
[16:20:57.039]                       if (!is.null(pattern)) {
[16:20:57.039]                         computeRestarts <- base::computeRestarts
[16:20:57.039]                         grepl <- base::grepl
[16:20:57.039]                         restarts <- computeRestarts(cond)
[16:20:57.039]                         for (restart in restarts) {
[16:20:57.039]                           name <- restart$name
[16:20:57.039]                           if (is.null(name)) 
[16:20:57.039]                             next
[16:20:57.039]                           if (!grepl(pattern, name)) 
[16:20:57.039]                             next
[16:20:57.039]                           invokeRestart(restart)
[16:20:57.039]                           muffled <- TRUE
[16:20:57.039]                           break
[16:20:57.039]                         }
[16:20:57.039]                       }
[16:20:57.039]                     }
[16:20:57.039]                     invisible(muffled)
[16:20:57.039]                   }
[16:20:57.039]                   muffleCondition(cond)
[16:20:57.039]                 })
[16:20:57.039]             }))
[16:20:57.039]             future::FutureResult(value = ...future.value$value, 
[16:20:57.039]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:57.039]                   ...future.rng), globalenv = if (FALSE) 
[16:20:57.039]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:57.039]                     ...future.globalenv.names))
[16:20:57.039]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:57.039]         }, condition = base::local({
[16:20:57.039]             c <- base::c
[16:20:57.039]             inherits <- base::inherits
[16:20:57.039]             invokeRestart <- base::invokeRestart
[16:20:57.039]             length <- base::length
[16:20:57.039]             list <- base::list
[16:20:57.039]             seq.int <- base::seq.int
[16:20:57.039]             signalCondition <- base::signalCondition
[16:20:57.039]             sys.calls <- base::sys.calls
[16:20:57.039]             `[[` <- base::`[[`
[16:20:57.039]             `+` <- base::`+`
[16:20:57.039]             `<<-` <- base::`<<-`
[16:20:57.039]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:57.039]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:57.039]                   3L)]
[16:20:57.039]             }
[16:20:57.039]             function(cond) {
[16:20:57.039]                 is_error <- inherits(cond, "error")
[16:20:57.039]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:57.039]                   NULL)
[16:20:57.039]                 if (is_error) {
[16:20:57.039]                   sessionInformation <- function() {
[16:20:57.039]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:57.039]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:57.039]                       search = base::search(), system = base::Sys.info())
[16:20:57.039]                   }
[16:20:57.039]                   ...future.conditions[[length(...future.conditions) + 
[16:20:57.039]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:57.039]                     cond$call), session = sessionInformation(), 
[16:20:57.039]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:57.039]                   signalCondition(cond)
[16:20:57.039]                 }
[16:20:57.039]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:57.039]                 "immediateCondition"))) {
[16:20:57.039]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:57.039]                   ...future.conditions[[length(...future.conditions) + 
[16:20:57.039]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:57.039]                   if (TRUE && !signal) {
[16:20:57.039]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:57.039]                     {
[16:20:57.039]                       inherits <- base::inherits
[16:20:57.039]                       invokeRestart <- base::invokeRestart
[16:20:57.039]                       is.null <- base::is.null
[16:20:57.039]                       muffled <- FALSE
[16:20:57.039]                       if (inherits(cond, "message")) {
[16:20:57.039]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:57.039]                         if (muffled) 
[16:20:57.039]                           invokeRestart("muffleMessage")
[16:20:57.039]                       }
[16:20:57.039]                       else if (inherits(cond, "warning")) {
[16:20:57.039]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:57.039]                         if (muffled) 
[16:20:57.039]                           invokeRestart("muffleWarning")
[16:20:57.039]                       }
[16:20:57.039]                       else if (inherits(cond, "condition")) {
[16:20:57.039]                         if (!is.null(pattern)) {
[16:20:57.039]                           computeRestarts <- base::computeRestarts
[16:20:57.039]                           grepl <- base::grepl
[16:20:57.039]                           restarts <- computeRestarts(cond)
[16:20:57.039]                           for (restart in restarts) {
[16:20:57.039]                             name <- restart$name
[16:20:57.039]                             if (is.null(name)) 
[16:20:57.039]                               next
[16:20:57.039]                             if (!grepl(pattern, name)) 
[16:20:57.039]                               next
[16:20:57.039]                             invokeRestart(restart)
[16:20:57.039]                             muffled <- TRUE
[16:20:57.039]                             break
[16:20:57.039]                           }
[16:20:57.039]                         }
[16:20:57.039]                       }
[16:20:57.039]                       invisible(muffled)
[16:20:57.039]                     }
[16:20:57.039]                     muffleCondition(cond, pattern = "^muffle")
[16:20:57.039]                   }
[16:20:57.039]                 }
[16:20:57.039]                 else {
[16:20:57.039]                   if (TRUE) {
[16:20:57.039]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:57.039]                     {
[16:20:57.039]                       inherits <- base::inherits
[16:20:57.039]                       invokeRestart <- base::invokeRestart
[16:20:57.039]                       is.null <- base::is.null
[16:20:57.039]                       muffled <- FALSE
[16:20:57.039]                       if (inherits(cond, "message")) {
[16:20:57.039]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:57.039]                         if (muffled) 
[16:20:57.039]                           invokeRestart("muffleMessage")
[16:20:57.039]                       }
[16:20:57.039]                       else if (inherits(cond, "warning")) {
[16:20:57.039]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:57.039]                         if (muffled) 
[16:20:57.039]                           invokeRestart("muffleWarning")
[16:20:57.039]                       }
[16:20:57.039]                       else if (inherits(cond, "condition")) {
[16:20:57.039]                         if (!is.null(pattern)) {
[16:20:57.039]                           computeRestarts <- base::computeRestarts
[16:20:57.039]                           grepl <- base::grepl
[16:20:57.039]                           restarts <- computeRestarts(cond)
[16:20:57.039]                           for (restart in restarts) {
[16:20:57.039]                             name <- restart$name
[16:20:57.039]                             if (is.null(name)) 
[16:20:57.039]                               next
[16:20:57.039]                             if (!grepl(pattern, name)) 
[16:20:57.039]                               next
[16:20:57.039]                             invokeRestart(restart)
[16:20:57.039]                             muffled <- TRUE
[16:20:57.039]                             break
[16:20:57.039]                           }
[16:20:57.039]                         }
[16:20:57.039]                       }
[16:20:57.039]                       invisible(muffled)
[16:20:57.039]                     }
[16:20:57.039]                     muffleCondition(cond, pattern = "^muffle")
[16:20:57.039]                   }
[16:20:57.039]                 }
[16:20:57.039]             }
[16:20:57.039]         }))
[16:20:57.039]     }, error = function(ex) {
[16:20:57.039]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:57.039]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:57.039]                 ...future.rng), started = ...future.startTime, 
[16:20:57.039]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:57.039]             version = "1.8"), class = "FutureResult")
[16:20:57.039]     }, finally = {
[16:20:57.039]         if (!identical(...future.workdir, getwd())) 
[16:20:57.039]             setwd(...future.workdir)
[16:20:57.039]         {
[16:20:57.039]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:57.039]                 ...future.oldOptions$nwarnings <- NULL
[16:20:57.039]             }
[16:20:57.039]             base::options(...future.oldOptions)
[16:20:57.039]             if (.Platform$OS.type == "windows") {
[16:20:57.039]                 old_names <- names(...future.oldEnvVars)
[16:20:57.039]                 envs <- base::Sys.getenv()
[16:20:57.039]                 names <- names(envs)
[16:20:57.039]                 common <- intersect(names, old_names)
[16:20:57.039]                 added <- setdiff(names, old_names)
[16:20:57.039]                 removed <- setdiff(old_names, names)
[16:20:57.039]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:57.039]                   envs[common]]
[16:20:57.039]                 NAMES <- toupper(changed)
[16:20:57.039]                 args <- list()
[16:20:57.039]                 for (kk in seq_along(NAMES)) {
[16:20:57.039]                   name <- changed[[kk]]
[16:20:57.039]                   NAME <- NAMES[[kk]]
[16:20:57.039]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:57.039]                     next
[16:20:57.039]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:57.039]                 }
[16:20:57.039]                 NAMES <- toupper(added)
[16:20:57.039]                 for (kk in seq_along(NAMES)) {
[16:20:57.039]                   name <- added[[kk]]
[16:20:57.039]                   NAME <- NAMES[[kk]]
[16:20:57.039]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:57.039]                     next
[16:20:57.039]                   args[[name]] <- ""
[16:20:57.039]                 }
[16:20:57.039]                 NAMES <- toupper(removed)
[16:20:57.039]                 for (kk in seq_along(NAMES)) {
[16:20:57.039]                   name <- removed[[kk]]
[16:20:57.039]                   NAME <- NAMES[[kk]]
[16:20:57.039]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:57.039]                     next
[16:20:57.039]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:57.039]                 }
[16:20:57.039]                 if (length(args) > 0) 
[16:20:57.039]                   base::do.call(base::Sys.setenv, args = args)
[16:20:57.039]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:57.039]             }
[16:20:57.039]             else {
[16:20:57.039]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:57.039]             }
[16:20:57.039]             {
[16:20:57.039]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:57.039]                   0L) {
[16:20:57.039]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:57.039]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:57.039]                   base::options(opts)
[16:20:57.039]                 }
[16:20:57.039]                 {
[16:20:57.039]                   {
[16:20:57.039]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:57.039]                     NULL
[16:20:57.039]                   }
[16:20:57.039]                   options(future.plan = NULL)
[16:20:57.039]                   if (is.na(NA_character_)) 
[16:20:57.039]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:57.039]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:57.039]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:57.039]                     .init = FALSE)
[16:20:57.039]                 }
[16:20:57.039]             }
[16:20:57.039]         }
[16:20:57.039]     })
[16:20:57.039]     if (TRUE) {
[16:20:57.039]         base::sink(type = "output", split = FALSE)
[16:20:57.039]         if (TRUE) {
[16:20:57.039]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:57.039]         }
[16:20:57.039]         else {
[16:20:57.039]             ...future.result["stdout"] <- base::list(NULL)
[16:20:57.039]         }
[16:20:57.039]         base::close(...future.stdout)
[16:20:57.039]         ...future.stdout <- NULL
[16:20:57.039]     }
[16:20:57.039]     ...future.result$conditions <- ...future.conditions
[16:20:57.039]     ...future.result$finished <- base::Sys.time()
[16:20:57.039]     ...future.result
[16:20:57.039] }
[16:20:57.091] MultisessionFuture started
[16:20:57.092] result() for ClusterFuture ...
[16:20:57.092] receiveMessageFromWorker() for ClusterFuture ...
[16:20:57.092] - Validating connection of MultisessionFuture
[16:20:57.125] - received message: FutureResult
[16:20:57.125] - Received FutureResult
[16:20:57.128] - Erased future from FutureRegistry
[16:20:57.129] result() for ClusterFuture ...
[16:20:57.129] - result already collected: FutureResult
[16:20:57.129] result() for ClusterFuture ... done
[16:20:57.129] receiveMessageFromWorker() for ClusterFuture ... done
[16:20:57.129] result() for ClusterFuture ... done
[16:20:57.129] result() for ClusterFuture ...
[16:20:57.129] - result already collected: FutureResult
[16:20:57.129] result() for ClusterFuture ... done
[16:20:57.130] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[16:20:57.130] plan(): nbrOfWorkers() = 2
> 
> env <- new.env()
> 
> ## Create future #1 (consumes background process #1)
> env$a %<-% { 5 }
Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[16:20:57.132] getGlobalsAndPackages() ...
[16:20:57.132] Searching for globals...
[16:20:57.136] - globals found: [1] ‘{’
[16:20:57.136] Searching for globals ... DONE
[16:20:57.136] Resolving globals: TRUE
[16:20:57.136] Resolving any globals that are futures ...
[16:20:57.136] - globals: [1] ‘{’
[16:20:57.136] Resolving any globals that are futures ... DONE
[16:20:57.137] 
[16:20:57.137] 
[16:20:57.137] getGlobalsAndPackages() ... DONE
[16:20:57.138] run() for ‘Future’ ...
[16:20:57.138] - state: ‘created’
[16:20:57.138] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:20:57.149] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:57.149] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:20:57.149]   - Field: ‘node’
[16:20:57.149]   - Field: ‘label’
[16:20:57.149]   - Field: ‘local’
[16:20:57.150]   - Field: ‘owner’
[16:20:57.150]   - Field: ‘envir’
[16:20:57.150]   - Field: ‘workers’
[16:20:57.150]   - Field: ‘packages’
[16:20:57.150]   - Field: ‘gc’
[16:20:57.150]   - Field: ‘conditions’
[16:20:57.150]   - Field: ‘persistent’
[16:20:57.150]   - Field: ‘expr’
[16:20:57.150]   - Field: ‘uuid’
[16:20:57.150]   - Field: ‘seed’
[16:20:57.151]   - Field: ‘version’
[16:20:57.151]   - Field: ‘result’
[16:20:57.151]   - Field: ‘asynchronous’
[16:20:57.151]   - Field: ‘calls’
[16:20:57.151]   - Field: ‘globals’
[16:20:57.151]   - Field: ‘stdout’
[16:20:57.151]   - Field: ‘earlySignal’
[16:20:57.151]   - Field: ‘lazy’
[16:20:57.152]   - Field: ‘state’
[16:20:57.152] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:20:57.152] - Launch lazy future ...
[16:20:57.152] Packages needed by the future expression (n = 0): <none>
[16:20:57.152] Packages needed by future strategies (n = 0): <none>
[16:20:57.153] {
[16:20:57.153]     {
[16:20:57.153]         {
[16:20:57.153]             ...future.startTime <- base::Sys.time()
[16:20:57.153]             {
[16:20:57.153]                 {
[16:20:57.153]                   {
[16:20:57.153]                     {
[16:20:57.153]                       base::local({
[16:20:57.153]                         has_future <- base::requireNamespace("future", 
[16:20:57.153]                           quietly = TRUE)
[16:20:57.153]                         if (has_future) {
[16:20:57.153]                           ns <- base::getNamespace("future")
[16:20:57.153]                           version <- ns[[".package"]][["version"]]
[16:20:57.153]                           if (is.null(version)) 
[16:20:57.153]                             version <- utils::packageVersion("future")
[16:20:57.153]                         }
[16:20:57.153]                         else {
[16:20:57.153]                           version <- NULL
[16:20:57.153]                         }
[16:20:57.153]                         if (!has_future || version < "1.8.0") {
[16:20:57.153]                           info <- base::c(r_version = base::gsub("R version ", 
[16:20:57.153]                             "", base::R.version$version.string), 
[16:20:57.153]                             platform = base::sprintf("%s (%s-bit)", 
[16:20:57.153]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:57.153]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:57.153]                               "release", "version")], collapse = " "), 
[16:20:57.153]                             hostname = base::Sys.info()[["nodename"]])
[16:20:57.153]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:20:57.153]                             info)
[16:20:57.153]                           info <- base::paste(info, collapse = "; ")
[16:20:57.153]                           if (!has_future) {
[16:20:57.153]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:57.153]                               info)
[16:20:57.153]                           }
[16:20:57.153]                           else {
[16:20:57.153]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:57.153]                               info, version)
[16:20:57.153]                           }
[16:20:57.153]                           base::stop(msg)
[16:20:57.153]                         }
[16:20:57.153]                       })
[16:20:57.153]                     }
[16:20:57.153]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:57.153]                     base::options(mc.cores = 1L)
[16:20:57.153]                   }
[16:20:57.153]                   ...future.strategy.old <- future::plan("list")
[16:20:57.153]                   options(future.plan = NULL)
[16:20:57.153]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:57.153]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:57.153]                 }
[16:20:57.153]                 ...future.workdir <- getwd()
[16:20:57.153]             }
[16:20:57.153]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:57.153]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:57.153]         }
[16:20:57.153]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:57.153]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:57.153]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:57.153]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[16:20:57.153]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:57.153]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:57.153]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:57.153]             base::names(...future.oldOptions))
[16:20:57.153]     }
[16:20:57.153]     if (FALSE) {
[16:20:57.153]     }
[16:20:57.153]     else {
[16:20:57.153]         if (TRUE) {
[16:20:57.153]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:57.153]                 open = "w")
[16:20:57.153]         }
[16:20:57.153]         else {
[16:20:57.153]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:57.153]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:57.153]         }
[16:20:57.153]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:57.153]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:57.153]             base::sink(type = "output", split = FALSE)
[16:20:57.153]             base::close(...future.stdout)
[16:20:57.153]         }, add = TRUE)
[16:20:57.153]     }
[16:20:57.153]     ...future.frame <- base::sys.nframe()
[16:20:57.153]     ...future.conditions <- base::list()
[16:20:57.153]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:57.153]     if (FALSE) {
[16:20:57.153]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:57.153]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:57.153]     }
[16:20:57.153]     ...future.result <- base::tryCatch({
[16:20:57.153]         base::withCallingHandlers({
[16:20:57.153]             ...future.value <- base::withVisible(base::local({
[16:20:57.153]                 ...future.makeSendCondition <- base::local({
[16:20:57.153]                   sendCondition <- NULL
[16:20:57.153]                   function(frame = 1L) {
[16:20:57.153]                     if (is.function(sendCondition)) 
[16:20:57.153]                       return(sendCondition)
[16:20:57.153]                     ns <- getNamespace("parallel")
[16:20:57.153]                     if (exists("sendData", mode = "function", 
[16:20:57.153]                       envir = ns)) {
[16:20:57.153]                       parallel_sendData <- get("sendData", mode = "function", 
[16:20:57.153]                         envir = ns)
[16:20:57.153]                       envir <- sys.frame(frame)
[16:20:57.153]                       master <- NULL
[16:20:57.153]                       while (!identical(envir, .GlobalEnv) && 
[16:20:57.153]                         !identical(envir, emptyenv())) {
[16:20:57.153]                         if (exists("master", mode = "list", envir = envir, 
[16:20:57.153]                           inherits = FALSE)) {
[16:20:57.153]                           master <- get("master", mode = "list", 
[16:20:57.153]                             envir = envir, inherits = FALSE)
[16:20:57.153]                           if (inherits(master, c("SOCKnode", 
[16:20:57.153]                             "SOCK0node"))) {
[16:20:57.153]                             sendCondition <<- function(cond) {
[16:20:57.153]                               data <- list(type = "VALUE", value = cond, 
[16:20:57.153]                                 success = TRUE)
[16:20:57.153]                               parallel_sendData(master, data)
[16:20:57.153]                             }
[16:20:57.153]                             return(sendCondition)
[16:20:57.153]                           }
[16:20:57.153]                         }
[16:20:57.153]                         frame <- frame + 1L
[16:20:57.153]                         envir <- sys.frame(frame)
[16:20:57.153]                       }
[16:20:57.153]                     }
[16:20:57.153]                     sendCondition <<- function(cond) NULL
[16:20:57.153]                   }
[16:20:57.153]                 })
[16:20:57.153]                 withCallingHandlers({
[16:20:57.153]                   {
[16:20:57.153]                     5
[16:20:57.153]                   }
[16:20:57.153]                 }, immediateCondition = function(cond) {
[16:20:57.153]                   sendCondition <- ...future.makeSendCondition()
[16:20:57.153]                   sendCondition(cond)
[16:20:57.153]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:57.153]                   {
[16:20:57.153]                     inherits <- base::inherits
[16:20:57.153]                     invokeRestart <- base::invokeRestart
[16:20:57.153]                     is.null <- base::is.null
[16:20:57.153]                     muffled <- FALSE
[16:20:57.153]                     if (inherits(cond, "message")) {
[16:20:57.153]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:57.153]                       if (muffled) 
[16:20:57.153]                         invokeRestart("muffleMessage")
[16:20:57.153]                     }
[16:20:57.153]                     else if (inherits(cond, "warning")) {
[16:20:57.153]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:57.153]                       if (muffled) 
[16:20:57.153]                         invokeRestart("muffleWarning")
[16:20:57.153]                     }
[16:20:57.153]                     else if (inherits(cond, "condition")) {
[16:20:57.153]                       if (!is.null(pattern)) {
[16:20:57.153]                         computeRestarts <- base::computeRestarts
[16:20:57.153]                         grepl <- base::grepl
[16:20:57.153]                         restarts <- computeRestarts(cond)
[16:20:57.153]                         for (restart in restarts) {
[16:20:57.153]                           name <- restart$name
[16:20:57.153]                           if (is.null(name)) 
[16:20:57.153]                             next
[16:20:57.153]                           if (!grepl(pattern, name)) 
[16:20:57.153]                             next
[16:20:57.153]                           invokeRestart(restart)
[16:20:57.153]                           muffled <- TRUE
[16:20:57.153]                           break
[16:20:57.153]                         }
[16:20:57.153]                       }
[16:20:57.153]                     }
[16:20:57.153]                     invisible(muffled)
[16:20:57.153]                   }
[16:20:57.153]                   muffleCondition(cond)
[16:20:57.153]                 })
[16:20:57.153]             }))
[16:20:57.153]             future::FutureResult(value = ...future.value$value, 
[16:20:57.153]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:57.153]                   ...future.rng), globalenv = if (FALSE) 
[16:20:57.153]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:57.153]                     ...future.globalenv.names))
[16:20:57.153]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:57.153]         }, condition = base::local({
[16:20:57.153]             c <- base::c
[16:20:57.153]             inherits <- base::inherits
[16:20:57.153]             invokeRestart <- base::invokeRestart
[16:20:57.153]             length <- base::length
[16:20:57.153]             list <- base::list
[16:20:57.153]             seq.int <- base::seq.int
[16:20:57.153]             signalCondition <- base::signalCondition
[16:20:57.153]             sys.calls <- base::sys.calls
[16:20:57.153]             `[[` <- base::`[[`
[16:20:57.153]             `+` <- base::`+`
[16:20:57.153]             `<<-` <- base::`<<-`
[16:20:57.153]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:57.153]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:57.153]                   3L)]
[16:20:57.153]             }
[16:20:57.153]             function(cond) {
[16:20:57.153]                 is_error <- inherits(cond, "error")
[16:20:57.153]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:57.153]                   NULL)
[16:20:57.153]                 if (is_error) {
[16:20:57.153]                   sessionInformation <- function() {
[16:20:57.153]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:57.153]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:57.153]                       search = base::search(), system = base::Sys.info())
[16:20:57.153]                   }
[16:20:57.153]                   ...future.conditions[[length(...future.conditions) + 
[16:20:57.153]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:57.153]                     cond$call), session = sessionInformation(), 
[16:20:57.153]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:57.153]                   signalCondition(cond)
[16:20:57.153]                 }
[16:20:57.153]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:57.153]                 "immediateCondition"))) {
[16:20:57.153]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:57.153]                   ...future.conditions[[length(...future.conditions) + 
[16:20:57.153]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:57.153]                   if (TRUE && !signal) {
[16:20:57.153]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:57.153]                     {
[16:20:57.153]                       inherits <- base::inherits
[16:20:57.153]                       invokeRestart <- base::invokeRestart
[16:20:57.153]                       is.null <- base::is.null
[16:20:57.153]                       muffled <- FALSE
[16:20:57.153]                       if (inherits(cond, "message")) {
[16:20:57.153]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:57.153]                         if (muffled) 
[16:20:57.153]                           invokeRestart("muffleMessage")
[16:20:57.153]                       }
[16:20:57.153]                       else if (inherits(cond, "warning")) {
[16:20:57.153]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:57.153]                         if (muffled) 
[16:20:57.153]                           invokeRestart("muffleWarning")
[16:20:57.153]                       }
[16:20:57.153]                       else if (inherits(cond, "condition")) {
[16:20:57.153]                         if (!is.null(pattern)) {
[16:20:57.153]                           computeRestarts <- base::computeRestarts
[16:20:57.153]                           grepl <- base::grepl
[16:20:57.153]                           restarts <- computeRestarts(cond)
[16:20:57.153]                           for (restart in restarts) {
[16:20:57.153]                             name <- restart$name
[16:20:57.153]                             if (is.null(name)) 
[16:20:57.153]                               next
[16:20:57.153]                             if (!grepl(pattern, name)) 
[16:20:57.153]                               next
[16:20:57.153]                             invokeRestart(restart)
[16:20:57.153]                             muffled <- TRUE
[16:20:57.153]                             break
[16:20:57.153]                           }
[16:20:57.153]                         }
[16:20:57.153]                       }
[16:20:57.153]                       invisible(muffled)
[16:20:57.153]                     }
[16:20:57.153]                     muffleCondition(cond, pattern = "^muffle")
[16:20:57.153]                   }
[16:20:57.153]                 }
[16:20:57.153]                 else {
[16:20:57.153]                   if (TRUE) {
[16:20:57.153]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:57.153]                     {
[16:20:57.153]                       inherits <- base::inherits
[16:20:57.153]                       invokeRestart <- base::invokeRestart
[16:20:57.153]                       is.null <- base::is.null
[16:20:57.153]                       muffled <- FALSE
[16:20:57.153]                       if (inherits(cond, "message")) {
[16:20:57.153]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:57.153]                         if (muffled) 
[16:20:57.153]                           invokeRestart("muffleMessage")
[16:20:57.153]                       }
[16:20:57.153]                       else if (inherits(cond, "warning")) {
[16:20:57.153]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:57.153]                         if (muffled) 
[16:20:57.153]                           invokeRestart("muffleWarning")
[16:20:57.153]                       }
[16:20:57.153]                       else if (inherits(cond, "condition")) {
[16:20:57.153]                         if (!is.null(pattern)) {
[16:20:57.153]                           computeRestarts <- base::computeRestarts
[16:20:57.153]                           grepl <- base::grepl
[16:20:57.153]                           restarts <- computeRestarts(cond)
[16:20:57.153]                           for (restart in restarts) {
[16:20:57.153]                             name <- restart$name
[16:20:57.153]                             if (is.null(name)) 
[16:20:57.153]                               next
[16:20:57.153]                             if (!grepl(pattern, name)) 
[16:20:57.153]                               next
[16:20:57.153]                             invokeRestart(restart)
[16:20:57.153]                             muffled <- TRUE
[16:20:57.153]                             break
[16:20:57.153]                           }
[16:20:57.153]                         }
[16:20:57.153]                       }
[16:20:57.153]                       invisible(muffled)
[16:20:57.153]                     }
[16:20:57.153]                     muffleCondition(cond, pattern = "^muffle")
[16:20:57.153]                   }
[16:20:57.153]                 }
[16:20:57.153]             }
[16:20:57.153]         }))
[16:20:57.153]     }, error = function(ex) {
[16:20:57.153]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:57.153]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:57.153]                 ...future.rng), started = ...future.startTime, 
[16:20:57.153]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:57.153]             version = "1.8"), class = "FutureResult")
[16:20:57.153]     }, finally = {
[16:20:57.153]         if (!identical(...future.workdir, getwd())) 
[16:20:57.153]             setwd(...future.workdir)
[16:20:57.153]         {
[16:20:57.153]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:57.153]                 ...future.oldOptions$nwarnings <- NULL
[16:20:57.153]             }
[16:20:57.153]             base::options(...future.oldOptions)
[16:20:57.153]             if (.Platform$OS.type == "windows") {
[16:20:57.153]                 old_names <- names(...future.oldEnvVars)
[16:20:57.153]                 envs <- base::Sys.getenv()
[16:20:57.153]                 names <- names(envs)
[16:20:57.153]                 common <- intersect(names, old_names)
[16:20:57.153]                 added <- setdiff(names, old_names)
[16:20:57.153]                 removed <- setdiff(old_names, names)
[16:20:57.153]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:57.153]                   envs[common]]
[16:20:57.153]                 NAMES <- toupper(changed)
[16:20:57.153]                 args <- list()
[16:20:57.153]                 for (kk in seq_along(NAMES)) {
[16:20:57.153]                   name <- changed[[kk]]
[16:20:57.153]                   NAME <- NAMES[[kk]]
[16:20:57.153]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:57.153]                     next
[16:20:57.153]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:57.153]                 }
[16:20:57.153]                 NAMES <- toupper(added)
[16:20:57.153]                 for (kk in seq_along(NAMES)) {
[16:20:57.153]                   name <- added[[kk]]
[16:20:57.153]                   NAME <- NAMES[[kk]]
[16:20:57.153]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:57.153]                     next
[16:20:57.153]                   args[[name]] <- ""
[16:20:57.153]                 }
[16:20:57.153]                 NAMES <- toupper(removed)
[16:20:57.153]                 for (kk in seq_along(NAMES)) {
[16:20:57.153]                   name <- removed[[kk]]
[16:20:57.153]                   NAME <- NAMES[[kk]]
[16:20:57.153]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:57.153]                     next
[16:20:57.153]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:57.153]                 }
[16:20:57.153]                 if (length(args) > 0) 
[16:20:57.153]                   base::do.call(base::Sys.setenv, args = args)
[16:20:57.153]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:57.153]             }
[16:20:57.153]             else {
[16:20:57.153]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:57.153]             }
[16:20:57.153]             {
[16:20:57.153]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:57.153]                   0L) {
[16:20:57.153]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:57.153]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:57.153]                   base::options(opts)
[16:20:57.153]                 }
[16:20:57.153]                 {
[16:20:57.153]                   {
[16:20:57.153]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:57.153]                     NULL
[16:20:57.153]                   }
[16:20:57.153]                   options(future.plan = NULL)
[16:20:57.153]                   if (is.na(NA_character_)) 
[16:20:57.153]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:57.153]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:57.153]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:57.153]                     .init = FALSE)
[16:20:57.153]                 }
[16:20:57.153]             }
[16:20:57.153]         }
[16:20:57.153]     })
[16:20:57.153]     if (TRUE) {
[16:20:57.153]         base::sink(type = "output", split = FALSE)
[16:20:57.153]         if (TRUE) {
[16:20:57.153]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:57.153]         }
[16:20:57.153]         else {
[16:20:57.153]             ...future.result["stdout"] <- base::list(NULL)
[16:20:57.153]         }
[16:20:57.153]         base::close(...future.stdout)
[16:20:57.153]         ...future.stdout <- NULL
[16:20:57.153]     }
[16:20:57.153]     ...future.result$conditions <- ...future.conditions
[16:20:57.153]     ...future.result$finished <- base::Sys.time()
[16:20:57.153]     ...future.result
[16:20:57.153] }
[16:20:57.156] MultisessionFuture started
[16:20:57.156] - Launch lazy future ... done
[16:20:57.156] run() for ‘MultisessionFuture’ ... done
> 
> ## Create future #2 (consumes background process #2)
> b %<-% { "a" }
Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[16:20:57.157] getGlobalsAndPackages() ...
[16:20:57.157] Searching for globals...
[16:20:57.158] - globals found: [1] ‘{’
[16:20:57.158] Searching for globals ... DONE
[16:20:57.158] Resolving globals: TRUE
[16:20:57.158] Resolving any globals that are futures ...
[16:20:57.158] - globals: [1] ‘{’
[16:20:57.158] Resolving any globals that are futures ... DONE
[16:20:57.159] 
[16:20:57.159] 
[16:20:57.159] getGlobalsAndPackages() ... DONE
[16:20:57.159] run() for ‘Future’ ...
[16:20:57.159] - state: ‘created’
[16:20:57.159] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:20:57.170] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:57.170] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:20:57.170]   - Field: ‘node’
[16:20:57.170]   - Field: ‘label’
[16:20:57.171]   - Field: ‘local’
[16:20:57.171]   - Field: ‘owner’
[16:20:57.171]   - Field: ‘envir’
[16:20:57.171]   - Field: ‘workers’
[16:20:57.171]   - Field: ‘packages’
[16:20:57.171]   - Field: ‘gc’
[16:20:57.171]   - Field: ‘conditions’
[16:20:57.171]   - Field: ‘persistent’
[16:20:57.171]   - Field: ‘expr’
[16:20:57.171]   - Field: ‘uuid’
[16:20:57.172]   - Field: ‘seed’
[16:20:57.172]   - Field: ‘version’
[16:20:57.172]   - Field: ‘result’
[16:20:57.172]   - Field: ‘asynchronous’
[16:20:57.172]   - Field: ‘calls’
[16:20:57.172]   - Field: ‘globals’
[16:20:57.172]   - Field: ‘stdout’
[16:20:57.172]   - Field: ‘earlySignal’
[16:20:57.173]   - Field: ‘lazy’
[16:20:57.173]   - Field: ‘state’
[16:20:57.173] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:20:57.173] - Launch lazy future ...
[16:20:57.173] Packages needed by the future expression (n = 0): <none>
[16:20:57.173] Packages needed by future strategies (n = 0): <none>
[16:20:57.174] {
[16:20:57.174]     {
[16:20:57.174]         {
[16:20:57.174]             ...future.startTime <- base::Sys.time()
[16:20:57.174]             {
[16:20:57.174]                 {
[16:20:57.174]                   {
[16:20:57.174]                     {
[16:20:57.174]                       base::local({
[16:20:57.174]                         has_future <- base::requireNamespace("future", 
[16:20:57.174]                           quietly = TRUE)
[16:20:57.174]                         if (has_future) {
[16:20:57.174]                           ns <- base::getNamespace("future")
[16:20:57.174]                           version <- ns[[".package"]][["version"]]
[16:20:57.174]                           if (is.null(version)) 
[16:20:57.174]                             version <- utils::packageVersion("future")
[16:20:57.174]                         }
[16:20:57.174]                         else {
[16:20:57.174]                           version <- NULL
[16:20:57.174]                         }
[16:20:57.174]                         if (!has_future || version < "1.8.0") {
[16:20:57.174]                           info <- base::c(r_version = base::gsub("R version ", 
[16:20:57.174]                             "", base::R.version$version.string), 
[16:20:57.174]                             platform = base::sprintf("%s (%s-bit)", 
[16:20:57.174]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:57.174]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:57.174]                               "release", "version")], collapse = " "), 
[16:20:57.174]                             hostname = base::Sys.info()[["nodename"]])
[16:20:57.174]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:20:57.174]                             info)
[16:20:57.174]                           info <- base::paste(info, collapse = "; ")
[16:20:57.174]                           if (!has_future) {
[16:20:57.174]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:57.174]                               info)
[16:20:57.174]                           }
[16:20:57.174]                           else {
[16:20:57.174]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:57.174]                               info, version)
[16:20:57.174]                           }
[16:20:57.174]                           base::stop(msg)
[16:20:57.174]                         }
[16:20:57.174]                       })
[16:20:57.174]                     }
[16:20:57.174]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:57.174]                     base::options(mc.cores = 1L)
[16:20:57.174]                   }
[16:20:57.174]                   ...future.strategy.old <- future::plan("list")
[16:20:57.174]                   options(future.plan = NULL)
[16:20:57.174]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:57.174]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:57.174]                 }
[16:20:57.174]                 ...future.workdir <- getwd()
[16:20:57.174]             }
[16:20:57.174]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:57.174]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:57.174]         }
[16:20:57.174]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:57.174]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:57.174]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:57.174]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[16:20:57.174]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:57.174]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:57.174]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:57.174]             base::names(...future.oldOptions))
[16:20:57.174]     }
[16:20:57.174]     if (FALSE) {
[16:20:57.174]     }
[16:20:57.174]     else {
[16:20:57.174]         if (TRUE) {
[16:20:57.174]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:57.174]                 open = "w")
[16:20:57.174]         }
[16:20:57.174]         else {
[16:20:57.174]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:57.174]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:57.174]         }
[16:20:57.174]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:57.174]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:57.174]             base::sink(type = "output", split = FALSE)
[16:20:57.174]             base::close(...future.stdout)
[16:20:57.174]         }, add = TRUE)
[16:20:57.174]     }
[16:20:57.174]     ...future.frame <- base::sys.nframe()
[16:20:57.174]     ...future.conditions <- base::list()
[16:20:57.174]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:57.174]     if (FALSE) {
[16:20:57.174]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:57.174]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:57.174]     }
[16:20:57.174]     ...future.result <- base::tryCatch({
[16:20:57.174]         base::withCallingHandlers({
[16:20:57.174]             ...future.value <- base::withVisible(base::local({
[16:20:57.174]                 ...future.makeSendCondition <- base::local({
[16:20:57.174]                   sendCondition <- NULL
[16:20:57.174]                   function(frame = 1L) {
[16:20:57.174]                     if (is.function(sendCondition)) 
[16:20:57.174]                       return(sendCondition)
[16:20:57.174]                     ns <- getNamespace("parallel")
[16:20:57.174]                     if (exists("sendData", mode = "function", 
[16:20:57.174]                       envir = ns)) {
[16:20:57.174]                       parallel_sendData <- get("sendData", mode = "function", 
[16:20:57.174]                         envir = ns)
[16:20:57.174]                       envir <- sys.frame(frame)
[16:20:57.174]                       master <- NULL
[16:20:57.174]                       while (!identical(envir, .GlobalEnv) && 
[16:20:57.174]                         !identical(envir, emptyenv())) {
[16:20:57.174]                         if (exists("master", mode = "list", envir = envir, 
[16:20:57.174]                           inherits = FALSE)) {
[16:20:57.174]                           master <- get("master", mode = "list", 
[16:20:57.174]                             envir = envir, inherits = FALSE)
[16:20:57.174]                           if (inherits(master, c("SOCKnode", 
[16:20:57.174]                             "SOCK0node"))) {
[16:20:57.174]                             sendCondition <<- function(cond) {
[16:20:57.174]                               data <- list(type = "VALUE", value = cond, 
[16:20:57.174]                                 success = TRUE)
[16:20:57.174]                               parallel_sendData(master, data)
[16:20:57.174]                             }
[16:20:57.174]                             return(sendCondition)
[16:20:57.174]                           }
[16:20:57.174]                         }
[16:20:57.174]                         frame <- frame + 1L
[16:20:57.174]                         envir <- sys.frame(frame)
[16:20:57.174]                       }
[16:20:57.174]                     }
[16:20:57.174]                     sendCondition <<- function(cond) NULL
[16:20:57.174]                   }
[16:20:57.174]                 })
[16:20:57.174]                 withCallingHandlers({
[16:20:57.174]                   {
[16:20:57.174]                     "a"
[16:20:57.174]                   }
[16:20:57.174]                 }, immediateCondition = function(cond) {
[16:20:57.174]                   sendCondition <- ...future.makeSendCondition()
[16:20:57.174]                   sendCondition(cond)
[16:20:57.174]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:57.174]                   {
[16:20:57.174]                     inherits <- base::inherits
[16:20:57.174]                     invokeRestart <- base::invokeRestart
[16:20:57.174]                     is.null <- base::is.null
[16:20:57.174]                     muffled <- FALSE
[16:20:57.174]                     if (inherits(cond, "message")) {
[16:20:57.174]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:57.174]                       if (muffled) 
[16:20:57.174]                         invokeRestart("muffleMessage")
[16:20:57.174]                     }
[16:20:57.174]                     else if (inherits(cond, "warning")) {
[16:20:57.174]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:57.174]                       if (muffled) 
[16:20:57.174]                         invokeRestart("muffleWarning")
[16:20:57.174]                     }
[16:20:57.174]                     else if (inherits(cond, "condition")) {
[16:20:57.174]                       if (!is.null(pattern)) {
[16:20:57.174]                         computeRestarts <- base::computeRestarts
[16:20:57.174]                         grepl <- base::grepl
[16:20:57.174]                         restarts <- computeRestarts(cond)
[16:20:57.174]                         for (restart in restarts) {
[16:20:57.174]                           name <- restart$name
[16:20:57.174]                           if (is.null(name)) 
[16:20:57.174]                             next
[16:20:57.174]                           if (!grepl(pattern, name)) 
[16:20:57.174]                             next
[16:20:57.174]                           invokeRestart(restart)
[16:20:57.174]                           muffled <- TRUE
[16:20:57.174]                           break
[16:20:57.174]                         }
[16:20:57.174]                       }
[16:20:57.174]                     }
[16:20:57.174]                     invisible(muffled)
[16:20:57.174]                   }
[16:20:57.174]                   muffleCondition(cond)
[16:20:57.174]                 })
[16:20:57.174]             }))
[16:20:57.174]             future::FutureResult(value = ...future.value$value, 
[16:20:57.174]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:57.174]                   ...future.rng), globalenv = if (FALSE) 
[16:20:57.174]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:57.174]                     ...future.globalenv.names))
[16:20:57.174]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:57.174]         }, condition = base::local({
[16:20:57.174]             c <- base::c
[16:20:57.174]             inherits <- base::inherits
[16:20:57.174]             invokeRestart <- base::invokeRestart
[16:20:57.174]             length <- base::length
[16:20:57.174]             list <- base::list
[16:20:57.174]             seq.int <- base::seq.int
[16:20:57.174]             signalCondition <- base::signalCondition
[16:20:57.174]             sys.calls <- base::sys.calls
[16:20:57.174]             `[[` <- base::`[[`
[16:20:57.174]             `+` <- base::`+`
[16:20:57.174]             `<<-` <- base::`<<-`
[16:20:57.174]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:57.174]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:57.174]                   3L)]
[16:20:57.174]             }
[16:20:57.174]             function(cond) {
[16:20:57.174]                 is_error <- inherits(cond, "error")
[16:20:57.174]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:57.174]                   NULL)
[16:20:57.174]                 if (is_error) {
[16:20:57.174]                   sessionInformation <- function() {
[16:20:57.174]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:57.174]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:57.174]                       search = base::search(), system = base::Sys.info())
[16:20:57.174]                   }
[16:20:57.174]                   ...future.conditions[[length(...future.conditions) + 
[16:20:57.174]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:57.174]                     cond$call), session = sessionInformation(), 
[16:20:57.174]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:57.174]                   signalCondition(cond)
[16:20:57.174]                 }
[16:20:57.174]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:57.174]                 "immediateCondition"))) {
[16:20:57.174]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:57.174]                   ...future.conditions[[length(...future.conditions) + 
[16:20:57.174]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:57.174]                   if (TRUE && !signal) {
[16:20:57.174]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:57.174]                     {
[16:20:57.174]                       inherits <- base::inherits
[16:20:57.174]                       invokeRestart <- base::invokeRestart
[16:20:57.174]                       is.null <- base::is.null
[16:20:57.174]                       muffled <- FALSE
[16:20:57.174]                       if (inherits(cond, "message")) {
[16:20:57.174]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:57.174]                         if (muffled) 
[16:20:57.174]                           invokeRestart("muffleMessage")
[16:20:57.174]                       }
[16:20:57.174]                       else if (inherits(cond, "warning")) {
[16:20:57.174]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:57.174]                         if (muffled) 
[16:20:57.174]                           invokeRestart("muffleWarning")
[16:20:57.174]                       }
[16:20:57.174]                       else if (inherits(cond, "condition")) {
[16:20:57.174]                         if (!is.null(pattern)) {
[16:20:57.174]                           computeRestarts <- base::computeRestarts
[16:20:57.174]                           grepl <- base::grepl
[16:20:57.174]                           restarts <- computeRestarts(cond)
[16:20:57.174]                           for (restart in restarts) {
[16:20:57.174]                             name <- restart$name
[16:20:57.174]                             if (is.null(name)) 
[16:20:57.174]                               next
[16:20:57.174]                             if (!grepl(pattern, name)) 
[16:20:57.174]                               next
[16:20:57.174]                             invokeRestart(restart)
[16:20:57.174]                             muffled <- TRUE
[16:20:57.174]                             break
[16:20:57.174]                           }
[16:20:57.174]                         }
[16:20:57.174]                       }
[16:20:57.174]                       invisible(muffled)
[16:20:57.174]                     }
[16:20:57.174]                     muffleCondition(cond, pattern = "^muffle")
[16:20:57.174]                   }
[16:20:57.174]                 }
[16:20:57.174]                 else {
[16:20:57.174]                   if (TRUE) {
[16:20:57.174]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:57.174]                     {
[16:20:57.174]                       inherits <- base::inherits
[16:20:57.174]                       invokeRestart <- base::invokeRestart
[16:20:57.174]                       is.null <- base::is.null
[16:20:57.174]                       muffled <- FALSE
[16:20:57.174]                       if (inherits(cond, "message")) {
[16:20:57.174]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:57.174]                         if (muffled) 
[16:20:57.174]                           invokeRestart("muffleMessage")
[16:20:57.174]                       }
[16:20:57.174]                       else if (inherits(cond, "warning")) {
[16:20:57.174]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:57.174]                         if (muffled) 
[16:20:57.174]                           invokeRestart("muffleWarning")
[16:20:57.174]                       }
[16:20:57.174]                       else if (inherits(cond, "condition")) {
[16:20:57.174]                         if (!is.null(pattern)) {
[16:20:57.174]                           computeRestarts <- base::computeRestarts
[16:20:57.174]                           grepl <- base::grepl
[16:20:57.174]                           restarts <- computeRestarts(cond)
[16:20:57.174]                           for (restart in restarts) {
[16:20:57.174]                             name <- restart$name
[16:20:57.174]                             if (is.null(name)) 
[16:20:57.174]                               next
[16:20:57.174]                             if (!grepl(pattern, name)) 
[16:20:57.174]                               next
[16:20:57.174]                             invokeRestart(restart)
[16:20:57.174]                             muffled <- TRUE
[16:20:57.174]                             break
[16:20:57.174]                           }
[16:20:57.174]                         }
[16:20:57.174]                       }
[16:20:57.174]                       invisible(muffled)
[16:20:57.174]                     }
[16:20:57.174]                     muffleCondition(cond, pattern = "^muffle")
[16:20:57.174]                   }
[16:20:57.174]                 }
[16:20:57.174]             }
[16:20:57.174]         }))
[16:20:57.174]     }, error = function(ex) {
[16:20:57.174]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:57.174]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:57.174]                 ...future.rng), started = ...future.startTime, 
[16:20:57.174]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:57.174]             version = "1.8"), class = "FutureResult")
[16:20:57.174]     }, finally = {
[16:20:57.174]         if (!identical(...future.workdir, getwd())) 
[16:20:57.174]             setwd(...future.workdir)
[16:20:57.174]         {
[16:20:57.174]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:57.174]                 ...future.oldOptions$nwarnings <- NULL
[16:20:57.174]             }
[16:20:57.174]             base::options(...future.oldOptions)
[16:20:57.174]             if (.Platform$OS.type == "windows") {
[16:20:57.174]                 old_names <- names(...future.oldEnvVars)
[16:20:57.174]                 envs <- base::Sys.getenv()
[16:20:57.174]                 names <- names(envs)
[16:20:57.174]                 common <- intersect(names, old_names)
[16:20:57.174]                 added <- setdiff(names, old_names)
[16:20:57.174]                 removed <- setdiff(old_names, names)
[16:20:57.174]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:57.174]                   envs[common]]
[16:20:57.174]                 NAMES <- toupper(changed)
[16:20:57.174]                 args <- list()
[16:20:57.174]                 for (kk in seq_along(NAMES)) {
[16:20:57.174]                   name <- changed[[kk]]
[16:20:57.174]                   NAME <- NAMES[[kk]]
[16:20:57.174]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:57.174]                     next
[16:20:57.174]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:57.174]                 }
[16:20:57.174]                 NAMES <- toupper(added)
[16:20:57.174]                 for (kk in seq_along(NAMES)) {
[16:20:57.174]                   name <- added[[kk]]
[16:20:57.174]                   NAME <- NAMES[[kk]]
[16:20:57.174]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:57.174]                     next
[16:20:57.174]                   args[[name]] <- ""
[16:20:57.174]                 }
[16:20:57.174]                 NAMES <- toupper(removed)
[16:20:57.174]                 for (kk in seq_along(NAMES)) {
[16:20:57.174]                   name <- removed[[kk]]
[16:20:57.174]                   NAME <- NAMES[[kk]]
[16:20:57.174]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:57.174]                     next
[16:20:57.174]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:57.174]                 }
[16:20:57.174]                 if (length(args) > 0) 
[16:20:57.174]                   base::do.call(base::Sys.setenv, args = args)
[16:20:57.174]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:57.174]             }
[16:20:57.174]             else {
[16:20:57.174]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:57.174]             }
[16:20:57.174]             {
[16:20:57.174]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:57.174]                   0L) {
[16:20:57.174]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:57.174]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:57.174]                   base::options(opts)
[16:20:57.174]                 }
[16:20:57.174]                 {
[16:20:57.174]                   {
[16:20:57.174]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:57.174]                     NULL
[16:20:57.174]                   }
[16:20:57.174]                   options(future.plan = NULL)
[16:20:57.174]                   if (is.na(NA_character_)) 
[16:20:57.174]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:57.174]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:57.174]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:57.174]                     .init = FALSE)
[16:20:57.174]                 }
[16:20:57.174]             }
[16:20:57.174]         }
[16:20:57.174]     })
[16:20:57.174]     if (TRUE) {
[16:20:57.174]         base::sink(type = "output", split = FALSE)
[16:20:57.174]         if (TRUE) {
[16:20:57.174]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:57.174]         }
[16:20:57.174]         else {
[16:20:57.174]             ...future.result["stdout"] <- base::list(NULL)
[16:20:57.174]         }
[16:20:57.174]         base::close(...future.stdout)
[16:20:57.174]         ...future.stdout <- NULL
[16:20:57.174]     }
[16:20:57.174]     ...future.result$conditions <- ...future.conditions
[16:20:57.174]     ...future.result$finished <- base::Sys.time()
[16:20:57.174]     ...future.result
[16:20:57.174] }
[16:20:57.227] MultisessionFuture started
[16:20:57.227] - Launch lazy future ... done
[16:20:57.227] run() for ‘MultisessionFuture’ ... done
> 
> ## Resolve future #2 (frees up background process #2)
> message(sprintf("b = %s\n", sQuote(b)))
[16:20:57.228] result() for ClusterFuture ...
[16:20:57.228] receiveMessageFromWorker() for ClusterFuture ...
[16:20:57.228] - Validating connection of MultisessionFuture
[16:20:57.260] - received message: FutureResult
[16:20:57.261] - Received FutureResult
[16:20:57.261] - Erased future from FutureRegistry
[16:20:57.264] result() for ClusterFuture ...
[16:20:57.264] - result already collected: FutureResult
[16:20:57.264] result() for ClusterFuture ... done
[16:20:57.264] receiveMessageFromWorker() for ClusterFuture ... done
[16:20:57.264] result() for ClusterFuture ... done
[16:20:57.264] result() for ClusterFuture ...
[16:20:57.264] - result already collected: FutureResult
[16:20:57.265] result() for ClusterFuture ... done
b = ‘a’

> 
> ## Create future #3 (consumes background process #2)
> ## THIS IS THE TRICKY PART:
> ## Two globals are identified `env` and `b` and both are resolved.
> ## However, object `env[[b]]` (here element `a` of environment `env`)
> ## is not touched and therefore not resolved (since it is a future)
> ## unless environment `env` is resolved recursively. (Issue #49)
> y %<-% { env[[b]] }
Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[16:20:57.265] getGlobalsAndPackages() ...
[16:20:57.265] Searching for globals...
[16:20:57.269] - globals found: [4] ‘{’, ‘[[’, ‘env’, ‘b’
[16:20:57.269] Searching for globals ... DONE
[16:20:57.269] Resolving globals: TRUE
[16:20:57.269] Resolving any globals that are futures ...
[16:20:57.270] - globals: [4] ‘{’, ‘[[’, ‘env’, ‘b’
[16:20:57.270] Resolving any globals that are futures ... DONE
[16:20:57.270] Resolving futures part of globals (recursively) ...
[16:20:57.271] resolve() on list ...
[16:20:57.271]  recursive: 99
[16:20:57.271]  length: 2
[16:20:57.271]  elements: ‘env’, ‘b’
[16:20:57.272] resolve() on environment ...
[16:20:57.272]  recursive: 98
[16:20:57.272]  elements: [1] ‘.future_a’, ‘a’
[16:20:57.273] receiveMessageFromWorker() for ClusterFuture ...
[16:20:57.273] - Validating connection of MultisessionFuture
[16:20:57.273] - received message: FutureResult
[16:20:57.273] - Received FutureResult
[16:20:57.273] - Erased future from FutureRegistry
[16:20:57.273] result() for ClusterFuture ...
[16:20:57.274] - result already collected: FutureResult
[16:20:57.274] result() for ClusterFuture ... done
[16:20:57.274] receiveMessageFromWorker() for ClusterFuture ... done
[16:20:57.274] Future #1
[16:20:57.274] result() for ClusterFuture ...
[16:20:57.274] - result already collected: FutureResult
[16:20:57.274] result() for ClusterFuture ... done
[16:20:57.274] result() for ClusterFuture ...
[16:20:57.274] - result already collected: FutureResult
[16:20:57.274] result() for ClusterFuture ... done
[16:20:57.275] A MultisessionFuture was resolved
[16:20:57.275]  length: 0 (resolved future 1)
[16:20:57.275] resolve() on environment ... DONE
[16:20:57.275]  length: 1 (resolved future 1)
[16:20:57.275]  length: 0 (resolved future 2)
[16:20:57.275] resolve() on list ... DONE
[16:20:57.275] - globals: [2] ‘env’, ‘b’
[16:20:57.275] Resolving futures part of globals (recursively) ... DONE
[16:20:57.276] The total size of the 2 globals is 4.29 KiB (4392 bytes)
[16:20:57.277] The total size of the 2 globals exported for future expression (‘{; env[[b]]; }’) is 4.29 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘env’ (4.18 KiB of class ‘environment’) and ‘b’ (112 bytes of class ‘character’)
[16:20:57.277] - globals: [2] ‘env’, ‘b’
[16:20:57.277] 
[16:20:57.277] getGlobalsAndPackages() ... DONE
[16:20:57.277] run() for ‘Future’ ...
[16:20:57.277] - state: ‘created’
[16:20:57.278] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:20:57.288] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:57.288] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:20:57.288]   - Field: ‘node’
[16:20:57.288]   - Field: ‘label’
[16:20:57.288]   - Field: ‘local’
[16:20:57.288]   - Field: ‘owner’
[16:20:57.289]   - Field: ‘envir’
[16:20:57.289]   - Field: ‘workers’
[16:20:57.289]   - Field: ‘packages’
[16:20:57.289]   - Field: ‘gc’
[16:20:57.289]   - Field: ‘conditions’
[16:20:57.289]   - Field: ‘persistent’
[16:20:57.289]   - Field: ‘expr’
[16:20:57.289]   - Field: ‘uuid’
[16:20:57.289]   - Field: ‘seed’
[16:20:57.289]   - Field: ‘version’
[16:20:57.290]   - Field: ‘result’
[16:20:57.290]   - Field: ‘asynchronous’
[16:20:57.290]   - Field: ‘calls’
[16:20:57.290]   - Field: ‘globals’
[16:20:57.290]   - Field: ‘stdout’
[16:20:57.290]   - Field: ‘earlySignal’
[16:20:57.290]   - Field: ‘lazy’
[16:20:57.290]   - Field: ‘state’
[16:20:57.290] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:20:57.290] - Launch lazy future ...
[16:20:57.291] Packages needed by the future expression (n = 0): <none>
[16:20:57.291] Packages needed by future strategies (n = 0): <none>
[16:20:57.291] {
[16:20:57.291]     {
[16:20:57.291]         {
[16:20:57.291]             ...future.startTime <- base::Sys.time()
[16:20:57.291]             {
[16:20:57.291]                 {
[16:20:57.291]                   {
[16:20:57.291]                     {
[16:20:57.291]                       base::local({
[16:20:57.291]                         has_future <- base::requireNamespace("future", 
[16:20:57.291]                           quietly = TRUE)
[16:20:57.291]                         if (has_future) {
[16:20:57.291]                           ns <- base::getNamespace("future")
[16:20:57.291]                           version <- ns[[".package"]][["version"]]
[16:20:57.291]                           if (is.null(version)) 
[16:20:57.291]                             version <- utils::packageVersion("future")
[16:20:57.291]                         }
[16:20:57.291]                         else {
[16:20:57.291]                           version <- NULL
[16:20:57.291]                         }
[16:20:57.291]                         if (!has_future || version < "1.8.0") {
[16:20:57.291]                           info <- base::c(r_version = base::gsub("R version ", 
[16:20:57.291]                             "", base::R.version$version.string), 
[16:20:57.291]                             platform = base::sprintf("%s (%s-bit)", 
[16:20:57.291]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:57.291]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:57.291]                               "release", "version")], collapse = " "), 
[16:20:57.291]                             hostname = base::Sys.info()[["nodename"]])
[16:20:57.291]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:20:57.291]                             info)
[16:20:57.291]                           info <- base::paste(info, collapse = "; ")
[16:20:57.291]                           if (!has_future) {
[16:20:57.291]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:57.291]                               info)
[16:20:57.291]                           }
[16:20:57.291]                           else {
[16:20:57.291]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:57.291]                               info, version)
[16:20:57.291]                           }
[16:20:57.291]                           base::stop(msg)
[16:20:57.291]                         }
[16:20:57.291]                       })
[16:20:57.291]                     }
[16:20:57.291]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:57.291]                     base::options(mc.cores = 1L)
[16:20:57.291]                   }
[16:20:57.291]                   ...future.strategy.old <- future::plan("list")
[16:20:57.291]                   options(future.plan = NULL)
[16:20:57.291]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:57.291]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:57.291]                 }
[16:20:57.291]                 ...future.workdir <- getwd()
[16:20:57.291]             }
[16:20:57.291]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:57.291]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:57.291]         }
[16:20:57.291]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:57.291]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:57.291]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:57.291]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[16:20:57.291]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:57.291]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:57.291]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:57.291]             base::names(...future.oldOptions))
[16:20:57.291]     }
[16:20:57.291]     if (FALSE) {
[16:20:57.291]     }
[16:20:57.291]     else {
[16:20:57.291]         if (TRUE) {
[16:20:57.291]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:57.291]                 open = "w")
[16:20:57.291]         }
[16:20:57.291]         else {
[16:20:57.291]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:57.291]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:57.291]         }
[16:20:57.291]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:57.291]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:57.291]             base::sink(type = "output", split = FALSE)
[16:20:57.291]             base::close(...future.stdout)
[16:20:57.291]         }, add = TRUE)
[16:20:57.291]     }
[16:20:57.291]     ...future.frame <- base::sys.nframe()
[16:20:57.291]     ...future.conditions <- base::list()
[16:20:57.291]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:57.291]     if (FALSE) {
[16:20:57.291]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:57.291]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:57.291]     }
[16:20:57.291]     ...future.result <- base::tryCatch({
[16:20:57.291]         base::withCallingHandlers({
[16:20:57.291]             ...future.value <- base::withVisible(base::local({
[16:20:57.291]                 ...future.makeSendCondition <- base::local({
[16:20:57.291]                   sendCondition <- NULL
[16:20:57.291]                   function(frame = 1L) {
[16:20:57.291]                     if (is.function(sendCondition)) 
[16:20:57.291]                       return(sendCondition)
[16:20:57.291]                     ns <- getNamespace("parallel")
[16:20:57.291]                     if (exists("sendData", mode = "function", 
[16:20:57.291]                       envir = ns)) {
[16:20:57.291]                       parallel_sendData <- get("sendData", mode = "function", 
[16:20:57.291]                         envir = ns)
[16:20:57.291]                       envir <- sys.frame(frame)
[16:20:57.291]                       master <- NULL
[16:20:57.291]                       while (!identical(envir, .GlobalEnv) && 
[16:20:57.291]                         !identical(envir, emptyenv())) {
[16:20:57.291]                         if (exists("master", mode = "list", envir = envir, 
[16:20:57.291]                           inherits = FALSE)) {
[16:20:57.291]                           master <- get("master", mode = "list", 
[16:20:57.291]                             envir = envir, inherits = FALSE)
[16:20:57.291]                           if (inherits(master, c("SOCKnode", 
[16:20:57.291]                             "SOCK0node"))) {
[16:20:57.291]                             sendCondition <<- function(cond) {
[16:20:57.291]                               data <- list(type = "VALUE", value = cond, 
[16:20:57.291]                                 success = TRUE)
[16:20:57.291]                               parallel_sendData(master, data)
[16:20:57.291]                             }
[16:20:57.291]                             return(sendCondition)
[16:20:57.291]                           }
[16:20:57.291]                         }
[16:20:57.291]                         frame <- frame + 1L
[16:20:57.291]                         envir <- sys.frame(frame)
[16:20:57.291]                       }
[16:20:57.291]                     }
[16:20:57.291]                     sendCondition <<- function(cond) NULL
[16:20:57.291]                   }
[16:20:57.291]                 })
[16:20:57.291]                 withCallingHandlers({
[16:20:57.291]                   {
[16:20:57.291]                     env[[b]]
[16:20:57.291]                   }
[16:20:57.291]                 }, immediateCondition = function(cond) {
[16:20:57.291]                   sendCondition <- ...future.makeSendCondition()
[16:20:57.291]                   sendCondition(cond)
[16:20:57.291]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:57.291]                   {
[16:20:57.291]                     inherits <- base::inherits
[16:20:57.291]                     invokeRestart <- base::invokeRestart
[16:20:57.291]                     is.null <- base::is.null
[16:20:57.291]                     muffled <- FALSE
[16:20:57.291]                     if (inherits(cond, "message")) {
[16:20:57.291]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:57.291]                       if (muffled) 
[16:20:57.291]                         invokeRestart("muffleMessage")
[16:20:57.291]                     }
[16:20:57.291]                     else if (inherits(cond, "warning")) {
[16:20:57.291]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:57.291]                       if (muffled) 
[16:20:57.291]                         invokeRestart("muffleWarning")
[16:20:57.291]                     }
[16:20:57.291]                     else if (inherits(cond, "condition")) {
[16:20:57.291]                       if (!is.null(pattern)) {
[16:20:57.291]                         computeRestarts <- base::computeRestarts
[16:20:57.291]                         grepl <- base::grepl
[16:20:57.291]                         restarts <- computeRestarts(cond)
[16:20:57.291]                         for (restart in restarts) {
[16:20:57.291]                           name <- restart$name
[16:20:57.291]                           if (is.null(name)) 
[16:20:57.291]                             next
[16:20:57.291]                           if (!grepl(pattern, name)) 
[16:20:57.291]                             next
[16:20:57.291]                           invokeRestart(restart)
[16:20:57.291]                           muffled <- TRUE
[16:20:57.291]                           break
[16:20:57.291]                         }
[16:20:57.291]                       }
[16:20:57.291]                     }
[16:20:57.291]                     invisible(muffled)
[16:20:57.291]                   }
[16:20:57.291]                   muffleCondition(cond)
[16:20:57.291]                 })
[16:20:57.291]             }))
[16:20:57.291]             future::FutureResult(value = ...future.value$value, 
[16:20:57.291]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:57.291]                   ...future.rng), globalenv = if (FALSE) 
[16:20:57.291]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:57.291]                     ...future.globalenv.names))
[16:20:57.291]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:57.291]         }, condition = base::local({
[16:20:57.291]             c <- base::c
[16:20:57.291]             inherits <- base::inherits
[16:20:57.291]             invokeRestart <- base::invokeRestart
[16:20:57.291]             length <- base::length
[16:20:57.291]             list <- base::list
[16:20:57.291]             seq.int <- base::seq.int
[16:20:57.291]             signalCondition <- base::signalCondition
[16:20:57.291]             sys.calls <- base::sys.calls
[16:20:57.291]             `[[` <- base::`[[`
[16:20:57.291]             `+` <- base::`+`
[16:20:57.291]             `<<-` <- base::`<<-`
[16:20:57.291]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:57.291]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:57.291]                   3L)]
[16:20:57.291]             }
[16:20:57.291]             function(cond) {
[16:20:57.291]                 is_error <- inherits(cond, "error")
[16:20:57.291]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:57.291]                   NULL)
[16:20:57.291]                 if (is_error) {
[16:20:57.291]                   sessionInformation <- function() {
[16:20:57.291]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:57.291]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:57.291]                       search = base::search(), system = base::Sys.info())
[16:20:57.291]                   }
[16:20:57.291]                   ...future.conditions[[length(...future.conditions) + 
[16:20:57.291]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:57.291]                     cond$call), session = sessionInformation(), 
[16:20:57.291]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:57.291]                   signalCondition(cond)
[16:20:57.291]                 }
[16:20:57.291]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:57.291]                 "immediateCondition"))) {
[16:20:57.291]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:57.291]                   ...future.conditions[[length(...future.conditions) + 
[16:20:57.291]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:57.291]                   if (TRUE && !signal) {
[16:20:57.291]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:57.291]                     {
[16:20:57.291]                       inherits <- base::inherits
[16:20:57.291]                       invokeRestart <- base::invokeRestart
[16:20:57.291]                       is.null <- base::is.null
[16:20:57.291]                       muffled <- FALSE
[16:20:57.291]                       if (inherits(cond, "message")) {
[16:20:57.291]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:57.291]                         if (muffled) 
[16:20:57.291]                           invokeRestart("muffleMessage")
[16:20:57.291]                       }
[16:20:57.291]                       else if (inherits(cond, "warning")) {
[16:20:57.291]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:57.291]                         if (muffled) 
[16:20:57.291]                           invokeRestart("muffleWarning")
[16:20:57.291]                       }
[16:20:57.291]                       else if (inherits(cond, "condition")) {
[16:20:57.291]                         if (!is.null(pattern)) {
[16:20:57.291]                           computeRestarts <- base::computeRestarts
[16:20:57.291]                           grepl <- base::grepl
[16:20:57.291]                           restarts <- computeRestarts(cond)
[16:20:57.291]                           for (restart in restarts) {
[16:20:57.291]                             name <- restart$name
[16:20:57.291]                             if (is.null(name)) 
[16:20:57.291]                               next
[16:20:57.291]                             if (!grepl(pattern, name)) 
[16:20:57.291]                               next
[16:20:57.291]                             invokeRestart(restart)
[16:20:57.291]                             muffled <- TRUE
[16:20:57.291]                             break
[16:20:57.291]                           }
[16:20:57.291]                         }
[16:20:57.291]                       }
[16:20:57.291]                       invisible(muffled)
[16:20:57.291]                     }
[16:20:57.291]                     muffleCondition(cond, pattern = "^muffle")
[16:20:57.291]                   }
[16:20:57.291]                 }
[16:20:57.291]                 else {
[16:20:57.291]                   if (TRUE) {
[16:20:57.291]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:57.291]                     {
[16:20:57.291]                       inherits <- base::inherits
[16:20:57.291]                       invokeRestart <- base::invokeRestart
[16:20:57.291]                       is.null <- base::is.null
[16:20:57.291]                       muffled <- FALSE
[16:20:57.291]                       if (inherits(cond, "message")) {
[16:20:57.291]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:57.291]                         if (muffled) 
[16:20:57.291]                           invokeRestart("muffleMessage")
[16:20:57.291]                       }
[16:20:57.291]                       else if (inherits(cond, "warning")) {
[16:20:57.291]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:57.291]                         if (muffled) 
[16:20:57.291]                           invokeRestart("muffleWarning")
[16:20:57.291]                       }
[16:20:57.291]                       else if (inherits(cond, "condition")) {
[16:20:57.291]                         if (!is.null(pattern)) {
[16:20:57.291]                           computeRestarts <- base::computeRestarts
[16:20:57.291]                           grepl <- base::grepl
[16:20:57.291]                           restarts <- computeRestarts(cond)
[16:20:57.291]                           for (restart in restarts) {
[16:20:57.291]                             name <- restart$name
[16:20:57.291]                             if (is.null(name)) 
[16:20:57.291]                               next
[16:20:57.291]                             if (!grepl(pattern, name)) 
[16:20:57.291]                               next
[16:20:57.291]                             invokeRestart(restart)
[16:20:57.291]                             muffled <- TRUE
[16:20:57.291]                             break
[16:20:57.291]                           }
[16:20:57.291]                         }
[16:20:57.291]                       }
[16:20:57.291]                       invisible(muffled)
[16:20:57.291]                     }
[16:20:57.291]                     muffleCondition(cond, pattern = "^muffle")
[16:20:57.291]                   }
[16:20:57.291]                 }
[16:20:57.291]             }
[16:20:57.291]         }))
[16:20:57.291]     }, error = function(ex) {
[16:20:57.291]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:57.291]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:57.291]                 ...future.rng), started = ...future.startTime, 
[16:20:57.291]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:57.291]             version = "1.8"), class = "FutureResult")
[16:20:57.291]     }, finally = {
[16:20:57.291]         if (!identical(...future.workdir, getwd())) 
[16:20:57.291]             setwd(...future.workdir)
[16:20:57.291]         {
[16:20:57.291]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:57.291]                 ...future.oldOptions$nwarnings <- NULL
[16:20:57.291]             }
[16:20:57.291]             base::options(...future.oldOptions)
[16:20:57.291]             if (.Platform$OS.type == "windows") {
[16:20:57.291]                 old_names <- names(...future.oldEnvVars)
[16:20:57.291]                 envs <- base::Sys.getenv()
[16:20:57.291]                 names <- names(envs)
[16:20:57.291]                 common <- intersect(names, old_names)
[16:20:57.291]                 added <- setdiff(names, old_names)
[16:20:57.291]                 removed <- setdiff(old_names, names)
[16:20:57.291]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:57.291]                   envs[common]]
[16:20:57.291]                 NAMES <- toupper(changed)
[16:20:57.291]                 args <- list()
[16:20:57.291]                 for (kk in seq_along(NAMES)) {
[16:20:57.291]                   name <- changed[[kk]]
[16:20:57.291]                   NAME <- NAMES[[kk]]
[16:20:57.291]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:57.291]                     next
[16:20:57.291]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:57.291]                 }
[16:20:57.291]                 NAMES <- toupper(added)
[16:20:57.291]                 for (kk in seq_along(NAMES)) {
[16:20:57.291]                   name <- added[[kk]]
[16:20:57.291]                   NAME <- NAMES[[kk]]
[16:20:57.291]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:57.291]                     next
[16:20:57.291]                   args[[name]] <- ""
[16:20:57.291]                 }
[16:20:57.291]                 NAMES <- toupper(removed)
[16:20:57.291]                 for (kk in seq_along(NAMES)) {
[16:20:57.291]                   name <- removed[[kk]]
[16:20:57.291]                   NAME <- NAMES[[kk]]
[16:20:57.291]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:57.291]                     next
[16:20:57.291]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:57.291]                 }
[16:20:57.291]                 if (length(args) > 0) 
[16:20:57.291]                   base::do.call(base::Sys.setenv, args = args)
[16:20:57.291]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:57.291]             }
[16:20:57.291]             else {
[16:20:57.291]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:57.291]             }
[16:20:57.291]             {
[16:20:57.291]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:57.291]                   0L) {
[16:20:57.291]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:57.291]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:57.291]                   base::options(opts)
[16:20:57.291]                 }
[16:20:57.291]                 {
[16:20:57.291]                   {
[16:20:57.291]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:57.291]                     NULL
[16:20:57.291]                   }
[16:20:57.291]                   options(future.plan = NULL)
[16:20:57.291]                   if (is.na(NA_character_)) 
[16:20:57.291]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:57.291]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:57.291]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:57.291]                     .init = FALSE)
[16:20:57.291]                 }
[16:20:57.291]             }
[16:20:57.291]         }
[16:20:57.291]     })
[16:20:57.291]     if (TRUE) {
[16:20:57.291]         base::sink(type = "output", split = FALSE)
[16:20:57.291]         if (TRUE) {
[16:20:57.291]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:57.291]         }
[16:20:57.291]         else {
[16:20:57.291]             ...future.result["stdout"] <- base::list(NULL)
[16:20:57.291]         }
[16:20:57.291]         base::close(...future.stdout)
[16:20:57.291]         ...future.stdout <- NULL
[16:20:57.291]     }
[16:20:57.291]     ...future.result$conditions <- ...future.conditions
[16:20:57.291]     ...future.result$finished <- base::Sys.time()
[16:20:57.291]     ...future.result
[16:20:57.291] }
[16:20:57.294] Exporting 2 global objects (4.29 KiB) to cluster node #1 ...
[16:20:57.294] Exporting ‘env’ (4.18 KiB) to cluster node #1 ...
[16:20:57.304] Exporting ‘env’ (4.18 KiB) to cluster node #1 ... DONE
[16:20:57.304] Exporting ‘b’ (112 bytes) to cluster node #1 ...
[16:20:57.305] Exporting ‘b’ (112 bytes) to cluster node #1 ... DONE
[16:20:57.305] Exporting 2 global objects (4.29 KiB) to cluster node #1 ... DONE
[16:20:57.305] MultisessionFuture started
[16:20:57.305] - Launch lazy future ... done
[16:20:57.305] run() for ‘MultisessionFuture’ ... done
> 
> ## Resolve future #3
> message(sprintf("y = %s\n", y))
[16:20:57.306] result() for ClusterFuture ...
[16:20:57.306] receiveMessageFromWorker() for ClusterFuture ...
[16:20:57.306] - Validating connection of MultisessionFuture
[16:20:57.351] - received message: FutureResult
[16:20:57.351] - Received FutureResult
[16:20:57.351] - Erased future from FutureRegistry
[16:20:57.351] result() for ClusterFuture ...
[16:20:57.351] - result already collected: FutureResult
[16:20:57.351] result() for ClusterFuture ... done
[16:20:57.351] receiveMessageFromWorker() for ClusterFuture ... done
[16:20:57.351] result() for ClusterFuture ... done
[16:20:57.352] result() for ClusterFuture ...
[16:20:57.352] - result already collected: FutureResult
[16:20:57.352] result() for ClusterFuture ... done
y = 5

> 
> ## Resolve future #1 if not already done
> str(as.list(env))
[16:20:57.352] result() for ClusterFuture ...
[16:20:57.352] - result already collected: FutureResult
[16:20:57.352] result() for ClusterFuture ... done
[16:20:57.352] result() for ClusterFuture ...
[16:20:57.352] - result already collected: FutureResult
[16:20:57.352] result() for ClusterFuture ... done
List of 1
 $ a: num 5
> 
> ## Create future #4
> ## Since future #1 is resolved it will work at this point
> y %<-% { env[[b]] }
Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[16:20:57.353] getGlobalsAndPackages() ...
[16:20:57.354] Searching for globals...
[16:20:57.354] - globals found: [4] ‘{’, ‘[[’, ‘env’, ‘b’
[16:20:57.355] Searching for globals ... DONE
[16:20:57.355] Resolving globals: TRUE
[16:20:57.355] Resolving any globals that are futures ...
[16:20:57.355] - globals: [4] ‘{’, ‘[[’, ‘env’, ‘b’
[16:20:57.355] Resolving any globals that are futures ... DONE
[16:20:57.355] Resolving futures part of globals (recursively) ...
[16:20:57.355] resolve() on list ...
[16:20:57.356]  recursive: 99
[16:20:57.356]  length: 2
[16:20:57.356]  elements: ‘env’, ‘b’
[16:20:57.356] resolve() on environment ...
[16:20:57.356]  recursive: 98
[16:20:57.356]  elements: [1] ‘a’
[16:20:57.356]  length: 0 (resolved future 1)
[16:20:57.357] resolve() on environment ... DONE
[16:20:57.357]  length: 1 (resolved future 1)
[16:20:57.357]  length: 0 (resolved future 2)
[16:20:57.357] resolve() on list ... DONE
[16:20:57.357] - globals: [2] ‘env’, ‘b’
[16:20:57.357] Resolving futures part of globals (recursively) ... DONE
[16:20:57.357] The total size of the 2 globals is 168 bytes (168 bytes)
[16:20:57.358] The total size of the 2 globals exported for future expression (‘{; env[[b]]; }’) is 168 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘b’ (112 bytes of class ‘character’) and ‘env’ (56 bytes of class ‘environment’)
[16:20:57.358] - globals: [2] ‘env’, ‘b’
[16:20:57.358] 
[16:20:57.358] getGlobalsAndPackages() ... DONE
[16:20:57.358] run() for ‘Future’ ...
[16:20:57.358] - state: ‘created’
[16:20:57.358] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:20:57.369] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:57.370] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:20:57.370]   - Field: ‘node’
[16:20:57.370]   - Field: ‘label’
[16:20:57.370]   - Field: ‘local’
[16:20:57.370]   - Field: ‘owner’
[16:20:57.370]   - Field: ‘envir’
[16:20:57.370]   - Field: ‘workers’
[16:20:57.370]   - Field: ‘packages’
[16:20:57.370]   - Field: ‘gc’
[16:20:57.371]   - Field: ‘conditions’
[16:20:57.371]   - Field: ‘persistent’
[16:20:57.371]   - Field: ‘expr’
[16:20:57.371]   - Field: ‘uuid’
[16:20:57.371]   - Field: ‘seed’
[16:20:57.371]   - Field: ‘version’
[16:20:57.371]   - Field: ‘result’
[16:20:57.371]   - Field: ‘asynchronous’
[16:20:57.371]   - Field: ‘calls’
[16:20:57.371]   - Field: ‘globals’
[16:20:57.371]   - Field: ‘stdout’
[16:20:57.372]   - Field: ‘earlySignal’
[16:20:57.372]   - Field: ‘lazy’
[16:20:57.372]   - Field: ‘state’
[16:20:57.372] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:20:57.372] - Launch lazy future ...
[16:20:57.372] Packages needed by the future expression (n = 0): <none>
[16:20:57.372] Packages needed by future strategies (n = 0): <none>
[16:20:57.373] {
[16:20:57.373]     {
[16:20:57.373]         {
[16:20:57.373]             ...future.startTime <- base::Sys.time()
[16:20:57.373]             {
[16:20:57.373]                 {
[16:20:57.373]                   {
[16:20:57.373]                     {
[16:20:57.373]                       base::local({
[16:20:57.373]                         has_future <- base::requireNamespace("future", 
[16:20:57.373]                           quietly = TRUE)
[16:20:57.373]                         if (has_future) {
[16:20:57.373]                           ns <- base::getNamespace("future")
[16:20:57.373]                           version <- ns[[".package"]][["version"]]
[16:20:57.373]                           if (is.null(version)) 
[16:20:57.373]                             version <- utils::packageVersion("future")
[16:20:57.373]                         }
[16:20:57.373]                         else {
[16:20:57.373]                           version <- NULL
[16:20:57.373]                         }
[16:20:57.373]                         if (!has_future || version < "1.8.0") {
[16:20:57.373]                           info <- base::c(r_version = base::gsub("R version ", 
[16:20:57.373]                             "", base::R.version$version.string), 
[16:20:57.373]                             platform = base::sprintf("%s (%s-bit)", 
[16:20:57.373]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:57.373]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:57.373]                               "release", "version")], collapse = " "), 
[16:20:57.373]                             hostname = base::Sys.info()[["nodename"]])
[16:20:57.373]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:20:57.373]                             info)
[16:20:57.373]                           info <- base::paste(info, collapse = "; ")
[16:20:57.373]                           if (!has_future) {
[16:20:57.373]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:57.373]                               info)
[16:20:57.373]                           }
[16:20:57.373]                           else {
[16:20:57.373]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:57.373]                               info, version)
[16:20:57.373]                           }
[16:20:57.373]                           base::stop(msg)
[16:20:57.373]                         }
[16:20:57.373]                       })
[16:20:57.373]                     }
[16:20:57.373]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:57.373]                     base::options(mc.cores = 1L)
[16:20:57.373]                   }
[16:20:57.373]                   ...future.strategy.old <- future::plan("list")
[16:20:57.373]                   options(future.plan = NULL)
[16:20:57.373]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:57.373]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:57.373]                 }
[16:20:57.373]                 ...future.workdir <- getwd()
[16:20:57.373]             }
[16:20:57.373]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:57.373]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:57.373]         }
[16:20:57.373]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:57.373]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:57.373]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:57.373]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[16:20:57.373]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:57.373]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:57.373]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:57.373]             base::names(...future.oldOptions))
[16:20:57.373]     }
[16:20:57.373]     if (FALSE) {
[16:20:57.373]     }
[16:20:57.373]     else {
[16:20:57.373]         if (TRUE) {
[16:20:57.373]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:57.373]                 open = "w")
[16:20:57.373]         }
[16:20:57.373]         else {
[16:20:57.373]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:57.373]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:57.373]         }
[16:20:57.373]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:57.373]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:57.373]             base::sink(type = "output", split = FALSE)
[16:20:57.373]             base::close(...future.stdout)
[16:20:57.373]         }, add = TRUE)
[16:20:57.373]     }
[16:20:57.373]     ...future.frame <- base::sys.nframe()
[16:20:57.373]     ...future.conditions <- base::list()
[16:20:57.373]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:57.373]     if (FALSE) {
[16:20:57.373]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:57.373]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:57.373]     }
[16:20:57.373]     ...future.result <- base::tryCatch({
[16:20:57.373]         base::withCallingHandlers({
[16:20:57.373]             ...future.value <- base::withVisible(base::local({
[16:20:57.373]                 ...future.makeSendCondition <- base::local({
[16:20:57.373]                   sendCondition <- NULL
[16:20:57.373]                   function(frame = 1L) {
[16:20:57.373]                     if (is.function(sendCondition)) 
[16:20:57.373]                       return(sendCondition)
[16:20:57.373]                     ns <- getNamespace("parallel")
[16:20:57.373]                     if (exists("sendData", mode = "function", 
[16:20:57.373]                       envir = ns)) {
[16:20:57.373]                       parallel_sendData <- get("sendData", mode = "function", 
[16:20:57.373]                         envir = ns)
[16:20:57.373]                       envir <- sys.frame(frame)
[16:20:57.373]                       master <- NULL
[16:20:57.373]                       while (!identical(envir, .GlobalEnv) && 
[16:20:57.373]                         !identical(envir, emptyenv())) {
[16:20:57.373]                         if (exists("master", mode = "list", envir = envir, 
[16:20:57.373]                           inherits = FALSE)) {
[16:20:57.373]                           master <- get("master", mode = "list", 
[16:20:57.373]                             envir = envir, inherits = FALSE)
[16:20:57.373]                           if (inherits(master, c("SOCKnode", 
[16:20:57.373]                             "SOCK0node"))) {
[16:20:57.373]                             sendCondition <<- function(cond) {
[16:20:57.373]                               data <- list(type = "VALUE", value = cond, 
[16:20:57.373]                                 success = TRUE)
[16:20:57.373]                               parallel_sendData(master, data)
[16:20:57.373]                             }
[16:20:57.373]                             return(sendCondition)
[16:20:57.373]                           }
[16:20:57.373]                         }
[16:20:57.373]                         frame <- frame + 1L
[16:20:57.373]                         envir <- sys.frame(frame)
[16:20:57.373]                       }
[16:20:57.373]                     }
[16:20:57.373]                     sendCondition <<- function(cond) NULL
[16:20:57.373]                   }
[16:20:57.373]                 })
[16:20:57.373]                 withCallingHandlers({
[16:20:57.373]                   {
[16:20:57.373]                     env[[b]]
[16:20:57.373]                   }
[16:20:57.373]                 }, immediateCondition = function(cond) {
[16:20:57.373]                   sendCondition <- ...future.makeSendCondition()
[16:20:57.373]                   sendCondition(cond)
[16:20:57.373]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:57.373]                   {
[16:20:57.373]                     inherits <- base::inherits
[16:20:57.373]                     invokeRestart <- base::invokeRestart
[16:20:57.373]                     is.null <- base::is.null
[16:20:57.373]                     muffled <- FALSE
[16:20:57.373]                     if (inherits(cond, "message")) {
[16:20:57.373]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:57.373]                       if (muffled) 
[16:20:57.373]                         invokeRestart("muffleMessage")
[16:20:57.373]                     }
[16:20:57.373]                     else if (inherits(cond, "warning")) {
[16:20:57.373]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:57.373]                       if (muffled) 
[16:20:57.373]                         invokeRestart("muffleWarning")
[16:20:57.373]                     }
[16:20:57.373]                     else if (inherits(cond, "condition")) {
[16:20:57.373]                       if (!is.null(pattern)) {
[16:20:57.373]                         computeRestarts <- base::computeRestarts
[16:20:57.373]                         grepl <- base::grepl
[16:20:57.373]                         restarts <- computeRestarts(cond)
[16:20:57.373]                         for (restart in restarts) {
[16:20:57.373]                           name <- restart$name
[16:20:57.373]                           if (is.null(name)) 
[16:20:57.373]                             next
[16:20:57.373]                           if (!grepl(pattern, name)) 
[16:20:57.373]                             next
[16:20:57.373]                           invokeRestart(restart)
[16:20:57.373]                           muffled <- TRUE
[16:20:57.373]                           break
[16:20:57.373]                         }
[16:20:57.373]                       }
[16:20:57.373]                     }
[16:20:57.373]                     invisible(muffled)
[16:20:57.373]                   }
[16:20:57.373]                   muffleCondition(cond)
[16:20:57.373]                 })
[16:20:57.373]             }))
[16:20:57.373]             future::FutureResult(value = ...future.value$value, 
[16:20:57.373]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:57.373]                   ...future.rng), globalenv = if (FALSE) 
[16:20:57.373]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:57.373]                     ...future.globalenv.names))
[16:20:57.373]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:57.373]         }, condition = base::local({
[16:20:57.373]             c <- base::c
[16:20:57.373]             inherits <- base::inherits
[16:20:57.373]             invokeRestart <- base::invokeRestart
[16:20:57.373]             length <- base::length
[16:20:57.373]             list <- base::list
[16:20:57.373]             seq.int <- base::seq.int
[16:20:57.373]             signalCondition <- base::signalCondition
[16:20:57.373]             sys.calls <- base::sys.calls
[16:20:57.373]             `[[` <- base::`[[`
[16:20:57.373]             `+` <- base::`+`
[16:20:57.373]             `<<-` <- base::`<<-`
[16:20:57.373]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:57.373]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:57.373]                   3L)]
[16:20:57.373]             }
[16:20:57.373]             function(cond) {
[16:20:57.373]                 is_error <- inherits(cond, "error")
[16:20:57.373]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:57.373]                   NULL)
[16:20:57.373]                 if (is_error) {
[16:20:57.373]                   sessionInformation <- function() {
[16:20:57.373]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:57.373]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:57.373]                       search = base::search(), system = base::Sys.info())
[16:20:57.373]                   }
[16:20:57.373]                   ...future.conditions[[length(...future.conditions) + 
[16:20:57.373]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:57.373]                     cond$call), session = sessionInformation(), 
[16:20:57.373]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:57.373]                   signalCondition(cond)
[16:20:57.373]                 }
[16:20:57.373]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:57.373]                 "immediateCondition"))) {
[16:20:57.373]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:57.373]                   ...future.conditions[[length(...future.conditions) + 
[16:20:57.373]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:57.373]                   if (TRUE && !signal) {
[16:20:57.373]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:57.373]                     {
[16:20:57.373]                       inherits <- base::inherits
[16:20:57.373]                       invokeRestart <- base::invokeRestart
[16:20:57.373]                       is.null <- base::is.null
[16:20:57.373]                       muffled <- FALSE
[16:20:57.373]                       if (inherits(cond, "message")) {
[16:20:57.373]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:57.373]                         if (muffled) 
[16:20:57.373]                           invokeRestart("muffleMessage")
[16:20:57.373]                       }
[16:20:57.373]                       else if (inherits(cond, "warning")) {
[16:20:57.373]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:57.373]                         if (muffled) 
[16:20:57.373]                           invokeRestart("muffleWarning")
[16:20:57.373]                       }
[16:20:57.373]                       else if (inherits(cond, "condition")) {
[16:20:57.373]                         if (!is.null(pattern)) {
[16:20:57.373]                           computeRestarts <- base::computeRestarts
[16:20:57.373]                           grepl <- base::grepl
[16:20:57.373]                           restarts <- computeRestarts(cond)
[16:20:57.373]                           for (restart in restarts) {
[16:20:57.373]                             name <- restart$name
[16:20:57.373]                             if (is.null(name)) 
[16:20:57.373]                               next
[16:20:57.373]                             if (!grepl(pattern, name)) 
[16:20:57.373]                               next
[16:20:57.373]                             invokeRestart(restart)
[16:20:57.373]                             muffled <- TRUE
[16:20:57.373]                             break
[16:20:57.373]                           }
[16:20:57.373]                         }
[16:20:57.373]                       }
[16:20:57.373]                       invisible(muffled)
[16:20:57.373]                     }
[16:20:57.373]                     muffleCondition(cond, pattern = "^muffle")
[16:20:57.373]                   }
[16:20:57.373]                 }
[16:20:57.373]                 else {
[16:20:57.373]                   if (TRUE) {
[16:20:57.373]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:57.373]                     {
[16:20:57.373]                       inherits <- base::inherits
[16:20:57.373]                       invokeRestart <- base::invokeRestart
[16:20:57.373]                       is.null <- base::is.null
[16:20:57.373]                       muffled <- FALSE
[16:20:57.373]                       if (inherits(cond, "message")) {
[16:20:57.373]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:57.373]                         if (muffled) 
[16:20:57.373]                           invokeRestart("muffleMessage")
[16:20:57.373]                       }
[16:20:57.373]                       else if (inherits(cond, "warning")) {
[16:20:57.373]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:57.373]                         if (muffled) 
[16:20:57.373]                           invokeRestart("muffleWarning")
[16:20:57.373]                       }
[16:20:57.373]                       else if (inherits(cond, "condition")) {
[16:20:57.373]                         if (!is.null(pattern)) {
[16:20:57.373]                           computeRestarts <- base::computeRestarts
[16:20:57.373]                           grepl <- base::grepl
[16:20:57.373]                           restarts <- computeRestarts(cond)
[16:20:57.373]                           for (restart in restarts) {
[16:20:57.373]                             name <- restart$name
[16:20:57.373]                             if (is.null(name)) 
[16:20:57.373]                               next
[16:20:57.373]                             if (!grepl(pattern, name)) 
[16:20:57.373]                               next
[16:20:57.373]                             invokeRestart(restart)
[16:20:57.373]                             muffled <- TRUE
[16:20:57.373]                             break
[16:20:57.373]                           }
[16:20:57.373]                         }
[16:20:57.373]                       }
[16:20:57.373]                       invisible(muffled)
[16:20:57.373]                     }
[16:20:57.373]                     muffleCondition(cond, pattern = "^muffle")
[16:20:57.373]                   }
[16:20:57.373]                 }
[16:20:57.373]             }
[16:20:57.373]         }))
[16:20:57.373]     }, error = function(ex) {
[16:20:57.373]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:57.373]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:57.373]                 ...future.rng), started = ...future.startTime, 
[16:20:57.373]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:57.373]             version = "1.8"), class = "FutureResult")
[16:20:57.373]     }, finally = {
[16:20:57.373]         if (!identical(...future.workdir, getwd())) 
[16:20:57.373]             setwd(...future.workdir)
[16:20:57.373]         {
[16:20:57.373]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:57.373]                 ...future.oldOptions$nwarnings <- NULL
[16:20:57.373]             }
[16:20:57.373]             base::options(...future.oldOptions)
[16:20:57.373]             if (.Platform$OS.type == "windows") {
[16:20:57.373]                 old_names <- names(...future.oldEnvVars)
[16:20:57.373]                 envs <- base::Sys.getenv()
[16:20:57.373]                 names <- names(envs)
[16:20:57.373]                 common <- intersect(names, old_names)
[16:20:57.373]                 added <- setdiff(names, old_names)
[16:20:57.373]                 removed <- setdiff(old_names, names)
[16:20:57.373]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:57.373]                   envs[common]]
[16:20:57.373]                 NAMES <- toupper(changed)
[16:20:57.373]                 args <- list()
[16:20:57.373]                 for (kk in seq_along(NAMES)) {
[16:20:57.373]                   name <- changed[[kk]]
[16:20:57.373]                   NAME <- NAMES[[kk]]
[16:20:57.373]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:57.373]                     next
[16:20:57.373]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:57.373]                 }
[16:20:57.373]                 NAMES <- toupper(added)
[16:20:57.373]                 for (kk in seq_along(NAMES)) {
[16:20:57.373]                   name <- added[[kk]]
[16:20:57.373]                   NAME <- NAMES[[kk]]
[16:20:57.373]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:57.373]                     next
[16:20:57.373]                   args[[name]] <- ""
[16:20:57.373]                 }
[16:20:57.373]                 NAMES <- toupper(removed)
[16:20:57.373]                 for (kk in seq_along(NAMES)) {
[16:20:57.373]                   name <- removed[[kk]]
[16:20:57.373]                   NAME <- NAMES[[kk]]
[16:20:57.373]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:57.373]                     next
[16:20:57.373]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:57.373]                 }
[16:20:57.373]                 if (length(args) > 0) 
[16:20:57.373]                   base::do.call(base::Sys.setenv, args = args)
[16:20:57.373]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:57.373]             }
[16:20:57.373]             else {
[16:20:57.373]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:57.373]             }
[16:20:57.373]             {
[16:20:57.373]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:57.373]                   0L) {
[16:20:57.373]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:57.373]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:57.373]                   base::options(opts)
[16:20:57.373]                 }
[16:20:57.373]                 {
[16:20:57.373]                   {
[16:20:57.373]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:57.373]                     NULL
[16:20:57.373]                   }
[16:20:57.373]                   options(future.plan = NULL)
[16:20:57.373]                   if (is.na(NA_character_)) 
[16:20:57.373]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:57.373]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:57.373]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:57.373]                     .init = FALSE)
[16:20:57.373]                 }
[16:20:57.373]             }
[16:20:57.373]         }
[16:20:57.373]     })
[16:20:57.373]     if (TRUE) {
[16:20:57.373]         base::sink(type = "output", split = FALSE)
[16:20:57.373]         if (TRUE) {
[16:20:57.373]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:57.373]         }
[16:20:57.373]         else {
[16:20:57.373]             ...future.result["stdout"] <- base::list(NULL)
[16:20:57.373]         }
[16:20:57.373]         base::close(...future.stdout)
[16:20:57.373]         ...future.stdout <- NULL
[16:20:57.373]     }
[16:20:57.373]     ...future.result$conditions <- ...future.conditions
[16:20:57.373]     ...future.result$finished <- base::Sys.time()
[16:20:57.373]     ...future.result
[16:20:57.373] }
[16:20:57.375] Exporting 2 global objects (168 bytes) to cluster node #1 ...
[16:20:57.375] Exporting ‘env’ (56 bytes) to cluster node #1 ...
[16:20:57.376] Exporting ‘env’ (56 bytes) to cluster node #1 ... DONE
[16:20:57.376] Exporting ‘b’ (112 bytes) to cluster node #1 ...
[16:20:57.376] Exporting ‘b’ (112 bytes) to cluster node #1 ... DONE
[16:20:57.376] Exporting 2 global objects (168 bytes) to cluster node #1 ... DONE
[16:20:57.377] MultisessionFuture started
[16:20:57.377] - Launch lazy future ... done
[16:20:57.377] run() for ‘MultisessionFuture’ ... done
> ## Resolve future #4
> message(sprintf("y = %s\n", y))
[16:20:57.377] result() for ClusterFuture ...
[16:20:57.377] receiveMessageFromWorker() for ClusterFuture ...
[16:20:57.377] - Validating connection of MultisessionFuture
[16:20:57.422] - received message: FutureResult
[16:20:57.422] - Received FutureResult
[16:20:57.422] - Erased future from FutureRegistry
[16:20:57.422] result() for ClusterFuture ...
[16:20:57.422] - result already collected: FutureResult
[16:20:57.423] result() for ClusterFuture ... done
[16:20:57.423] receiveMessageFromWorker() for ClusterFuture ... done
[16:20:57.423] result() for ClusterFuture ... done
[16:20:57.423] result() for ClusterFuture ...
[16:20:57.423] - result already collected: FutureResult
[16:20:57.423] result() for ClusterFuture ... done
y = 5

> 
> message("*** Tricky use cases related to globals (part 2) ... DONE")
*** Tricky use cases related to globals (part 2) ... DONE
> 
> ## Cleanup
> setTimeLimit()
> source("incl/end.R")
[16:20:57.424] plan(): Setting new future strategy stack:
[16:20:57.424] List of future strategies:
[16:20:57.424] 1. FutureStrategy:
[16:20:57.424]    - args: function (..., envir = parent.frame())
[16:20:57.424]    - tweaked: FALSE
[16:20:57.424]    - call: future::plan(oplan)
[16:20:57.425] plan(): nbrOfWorkers() = 1
> 
