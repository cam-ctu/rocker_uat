
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[10:33:05.245] plan(): Setting new future strategy stack:
[10:33:05.246] List of future strategies:
[10:33:05.246] 1. sequential:
[10:33:05.246]    - args: function (..., envir = parent.frame())
[10:33:05.246]    - tweaked: FALSE
[10:33:05.246]    - call: future::plan("sequential")
[10:33:05.260] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> oopts <- c(oopts, options(future.globals.resolve = TRUE))
> setTimeLimit(cpu = 10, elapsed = 10, transient = TRUE)
> 
> message("*** Tricky use cases related to globals (part 2) ...")
*** Tricky use cases related to globals (part 2) ...
> 
> ## Allow for two background processes
> plan(multisession, workers = 2L)
[10:33:05.274] plan(): Setting new future strategy stack:
[10:33:05.274] List of future strategies:
[10:33:05.274] 1. multisession:
[10:33:05.274]    - args: function (..., workers = 2L, envir = parent.frame())
[10:33:05.274]    - tweaked: TRUE
[10:33:05.274]    - call: plan(multisession, workers = 2L)
[10:33:05.285] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:33:05.285] multisession:
[10:33:05.285] - args: function (..., workers = 2L, envir = parent.frame())
[10:33:05.285] - tweaked: TRUE
[10:33:05.285] - call: plan(multisession, workers = 2L)
Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[10:33:05.287] getGlobalsAndPackages() ...
[10:33:05.287] Not searching for globals
[10:33:05.287] - globals: [0] <none>
[10:33:05.287] getGlobalsAndPackages() ... DONE
[10:33:05.288] [local output] makeClusterPSOCK() ...
[10:33:05.318] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[10:33:05.319] [local output] Base port: 11271
[10:33:05.319] [local output] Getting setup options for 2 cluster nodes ...
[10:33:05.319] [local output]  - Node 1 of 2 ...
[10:33:05.320] [local output] localMachine=TRUE => revtunnel=FALSE

[10:33:05.320] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp6XOw32/worker.rank=1.parallelly.parent=83531.1464b7a43051b.pid")), silent = TRUE)' -e 'file.exists("/tmp/Rtmp6XOw32/worker.rank=1.parallelly.parent=83531.1464b7a43051b.pid")'’
[10:33:05.507] - Possible to infer worker's PID: TRUE
[10:33:05.508] [local output] Rscript port: 11271

[10:33:05.508] [local output]  - Node 2 of 2 ...
[10:33:05.509] [local output] localMachine=TRUE => revtunnel=FALSE

[10:33:05.509] [local output] Rscript port: 11271

[10:33:05.509] [local output] Getting setup options for 2 cluster nodes ... done
[10:33:05.510] [local output]  - Parallel setup requested for some PSOCK nodes
[10:33:05.510] [local output] Setting up PSOCK nodes in parallel
[10:33:05.510] List of 36
[10:33:05.510]  $ worker          : chr "localhost"
[10:33:05.510]   ..- attr(*, "localhost")= logi TRUE
[10:33:05.510]  $ master          : chr "localhost"
[10:33:05.510]  $ port            : int 11271
[10:33:05.510]  $ connectTimeout  : num 120
[10:33:05.510]  $ timeout         : num 2592000
[10:33:05.510]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[10:33:05.510]  $ homogeneous     : logi TRUE
[10:33:05.510]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[10:33:05.510]  $ rscript_envs    : NULL
[10:33:05.510]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:33:05.510]  $ rscript_startup : NULL
[10:33:05.510]  $ rscript_sh      : chr "sh"
[10:33:05.510]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:33:05.510]  $ methods         : logi TRUE
[10:33:05.510]  $ socketOptions   : chr "no-delay"
[10:33:05.510]  $ useXDR          : logi FALSE
[10:33:05.510]  $ outfile         : chr "/dev/null"
[10:33:05.510]  $ renice          : int NA
[10:33:05.510]  $ rshcmd          : NULL
[10:33:05.510]  $ user            : chr(0) 
[10:33:05.510]  $ revtunnel       : logi FALSE
[10:33:05.510]  $ rshlogfile      : NULL
[10:33:05.510]  $ rshopts         : chr(0) 
[10:33:05.510]  $ rank            : int 1
[10:33:05.510]  $ manual          : logi FALSE
[10:33:05.510]  $ dryrun          : logi FALSE
[10:33:05.510]  $ quiet           : logi FALSE
[10:33:05.510]  $ setup_strategy  : chr "parallel"
[10:33:05.510]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:33:05.510]  $ pidfile         : chr "/tmp/Rtmp6XOw32/worker.rank=1.parallelly.parent=83531.1464b7a43051b.pid"
[10:33:05.510]  $ rshcmd_label    : NULL
[10:33:05.510]  $ rsh_call        : NULL
[10:33:05.510]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:33:05.510]  $ localMachine    : logi TRUE
[10:33:05.510]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[10:33:05.510]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[10:33:05.510]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[10:33:05.510]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[10:33:05.510]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[10:33:05.510]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[10:33:05.510]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[10:33:05.510]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[10:33:05.510]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[10:33:05.510]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[10:33:05.510]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[10:33:05.510]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[10:33:05.510]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[10:33:05.510]  $ arguments       :List of 28
[10:33:05.510]   ..$ worker          : chr "localhost"
[10:33:05.510]   ..$ master          : NULL
[10:33:05.510]   ..$ port            : int 11271
[10:33:05.510]   ..$ connectTimeout  : num 120
[10:33:05.510]   ..$ timeout         : num 2592000
[10:33:05.510]   ..$ rscript         : NULL
[10:33:05.510]   ..$ homogeneous     : NULL
[10:33:05.510]   ..$ rscript_args    : NULL
[10:33:05.510]   ..$ rscript_envs    : NULL
[10:33:05.510]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:33:05.510]   ..$ rscript_startup : NULL
[10:33:05.510]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[10:33:05.510]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:33:05.510]   ..$ methods         : logi TRUE
[10:33:05.510]   ..$ socketOptions   : chr "no-delay"
[10:33:05.510]   ..$ useXDR          : logi FALSE
[10:33:05.510]   ..$ outfile         : chr "/dev/null"
[10:33:05.510]   ..$ renice          : int NA
[10:33:05.510]   ..$ rshcmd          : NULL
[10:33:05.510]   ..$ user            : NULL
[10:33:05.510]   ..$ revtunnel       : logi NA
[10:33:05.510]   ..$ rshlogfile      : NULL
[10:33:05.510]   ..$ rshopts         : NULL
[10:33:05.510]   ..$ rank            : int 1
[10:33:05.510]   ..$ manual          : logi FALSE
[10:33:05.510]   ..$ dryrun          : logi FALSE
[10:33:05.510]   ..$ quiet           : logi FALSE
[10:33:05.510]   ..$ setup_strategy  : chr "parallel"
[10:33:05.510]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[10:33:05.529] [local output] System call to launch all workers:
[10:33:05.529] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp6XOw32/worker.rank=1.parallelly.parent=83531.1464b7a43051b.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11271 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[10:33:05.529] [local output] Starting PSOCK main server
[10:33:05.535] [local output] Workers launched
[10:33:05.535] [local output] Waiting for workers to connect back
[10:33:05.535]  - [local output] 0 workers out of 2 ready
[10:33:05.777]  - [local output] 0 workers out of 2 ready
[10:33:05.778]  - [local output] 1 workers out of 2 ready
[10:33:05.778]  - [local output] 2 workers out of 2 ready
[10:33:05.778] [local output] Launching of workers completed
[10:33:05.778] [local output] Collecting session information from workers
[10:33:05.779] [local output]  - Worker #1 of 2
[10:33:05.780] [local output]  - Worker #2 of 2
[10:33:05.780] [local output] makeClusterPSOCK() ... done
[10:33:05.793] Packages needed by the future expression (n = 0): <none>
[10:33:05.793] Packages needed by future strategies (n = 0): <none>
[10:33:05.794] {
[10:33:05.794]     {
[10:33:05.794]         {
[10:33:05.794]             ...future.startTime <- base::Sys.time()
[10:33:05.794]             {
[10:33:05.794]                 {
[10:33:05.794]                   {
[10:33:05.794]                     {
[10:33:05.794]                       base::local({
[10:33:05.794]                         has_future <- base::requireNamespace("future", 
[10:33:05.794]                           quietly = TRUE)
[10:33:05.794]                         if (has_future) {
[10:33:05.794]                           ns <- base::getNamespace("future")
[10:33:05.794]                           version <- ns[[".package"]][["version"]]
[10:33:05.794]                           if (is.null(version)) 
[10:33:05.794]                             version <- utils::packageVersion("future")
[10:33:05.794]                         }
[10:33:05.794]                         else {
[10:33:05.794]                           version <- NULL
[10:33:05.794]                         }
[10:33:05.794]                         if (!has_future || version < "1.8.0") {
[10:33:05.794]                           info <- base::c(r_version = base::gsub("R version ", 
[10:33:05.794]                             "", base::R.version$version.string), 
[10:33:05.794]                             platform = base::sprintf("%s (%s-bit)", 
[10:33:05.794]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:05.794]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:05.794]                               "release", "version")], collapse = " "), 
[10:33:05.794]                             hostname = base::Sys.info()[["nodename"]])
[10:33:05.794]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:33:05.794]                             info)
[10:33:05.794]                           info <- base::paste(info, collapse = "; ")
[10:33:05.794]                           if (!has_future) {
[10:33:05.794]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:05.794]                               info)
[10:33:05.794]                           }
[10:33:05.794]                           else {
[10:33:05.794]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:05.794]                               info, version)
[10:33:05.794]                           }
[10:33:05.794]                           base::stop(msg)
[10:33:05.794]                         }
[10:33:05.794]                       })
[10:33:05.794]                     }
[10:33:05.794]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:33:05.794]                     base::options(mc.cores = 1L)
[10:33:05.794]                   }
[10:33:05.794]                   ...future.strategy.old <- future::plan("list")
[10:33:05.794]                   options(future.plan = NULL)
[10:33:05.794]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:05.794]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:33:05.794]                 }
[10:33:05.794]                 ...future.workdir <- getwd()
[10:33:05.794]             }
[10:33:05.794]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:05.794]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:05.794]         }
[10:33:05.794]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:33:05.794]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:05.794]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:33:05.794]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[10:33:05.794]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:05.794]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:05.794]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:05.794]             base::names(...future.oldOptions))
[10:33:05.794]     }
[10:33:05.794]     if (FALSE) {
[10:33:05.794]     }
[10:33:05.794]     else {
[10:33:05.794]         if (TRUE) {
[10:33:05.794]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:05.794]                 open = "w")
[10:33:05.794]         }
[10:33:05.794]         else {
[10:33:05.794]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:05.794]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:05.794]         }
[10:33:05.794]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:05.794]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:05.794]             base::sink(type = "output", split = FALSE)
[10:33:05.794]             base::close(...future.stdout)
[10:33:05.794]         }, add = TRUE)
[10:33:05.794]     }
[10:33:05.794]     ...future.frame <- base::sys.nframe()
[10:33:05.794]     ...future.conditions <- base::list()
[10:33:05.794]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:05.794]     if (FALSE) {
[10:33:05.794]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:05.794]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:05.794]     }
[10:33:05.794]     ...future.result <- base::tryCatch({
[10:33:05.794]         base::withCallingHandlers({
[10:33:05.794]             ...future.value <- base::withVisible(base::local({
[10:33:05.794]                 ...future.makeSendCondition <- base::local({
[10:33:05.794]                   sendCondition <- NULL
[10:33:05.794]                   function(frame = 1L) {
[10:33:05.794]                     if (is.function(sendCondition)) 
[10:33:05.794]                       return(sendCondition)
[10:33:05.794]                     ns <- getNamespace("parallel")
[10:33:05.794]                     if (exists("sendData", mode = "function", 
[10:33:05.794]                       envir = ns)) {
[10:33:05.794]                       parallel_sendData <- get("sendData", mode = "function", 
[10:33:05.794]                         envir = ns)
[10:33:05.794]                       envir <- sys.frame(frame)
[10:33:05.794]                       master <- NULL
[10:33:05.794]                       while (!identical(envir, .GlobalEnv) && 
[10:33:05.794]                         !identical(envir, emptyenv())) {
[10:33:05.794]                         if (exists("master", mode = "list", envir = envir, 
[10:33:05.794]                           inherits = FALSE)) {
[10:33:05.794]                           master <- get("master", mode = "list", 
[10:33:05.794]                             envir = envir, inherits = FALSE)
[10:33:05.794]                           if (inherits(master, c("SOCKnode", 
[10:33:05.794]                             "SOCK0node"))) {
[10:33:05.794]                             sendCondition <<- function(cond) {
[10:33:05.794]                               data <- list(type = "VALUE", value = cond, 
[10:33:05.794]                                 success = TRUE)
[10:33:05.794]                               parallel_sendData(master, data)
[10:33:05.794]                             }
[10:33:05.794]                             return(sendCondition)
[10:33:05.794]                           }
[10:33:05.794]                         }
[10:33:05.794]                         frame <- frame + 1L
[10:33:05.794]                         envir <- sys.frame(frame)
[10:33:05.794]                       }
[10:33:05.794]                     }
[10:33:05.794]                     sendCondition <<- function(cond) NULL
[10:33:05.794]                   }
[10:33:05.794]                 })
[10:33:05.794]                 withCallingHandlers({
[10:33:05.794]                   NA
[10:33:05.794]                 }, immediateCondition = function(cond) {
[10:33:05.794]                   sendCondition <- ...future.makeSendCondition()
[10:33:05.794]                   sendCondition(cond)
[10:33:05.794]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:05.794]                   {
[10:33:05.794]                     inherits <- base::inherits
[10:33:05.794]                     invokeRestart <- base::invokeRestart
[10:33:05.794]                     is.null <- base::is.null
[10:33:05.794]                     muffled <- FALSE
[10:33:05.794]                     if (inherits(cond, "message")) {
[10:33:05.794]                       muffled <- grepl(pattern, "muffleMessage")
[10:33:05.794]                       if (muffled) 
[10:33:05.794]                         invokeRestart("muffleMessage")
[10:33:05.794]                     }
[10:33:05.794]                     else if (inherits(cond, "warning")) {
[10:33:05.794]                       muffled <- grepl(pattern, "muffleWarning")
[10:33:05.794]                       if (muffled) 
[10:33:05.794]                         invokeRestart("muffleWarning")
[10:33:05.794]                     }
[10:33:05.794]                     else if (inherits(cond, "condition")) {
[10:33:05.794]                       if (!is.null(pattern)) {
[10:33:05.794]                         computeRestarts <- base::computeRestarts
[10:33:05.794]                         grepl <- base::grepl
[10:33:05.794]                         restarts <- computeRestarts(cond)
[10:33:05.794]                         for (restart in restarts) {
[10:33:05.794]                           name <- restart$name
[10:33:05.794]                           if (is.null(name)) 
[10:33:05.794]                             next
[10:33:05.794]                           if (!grepl(pattern, name)) 
[10:33:05.794]                             next
[10:33:05.794]                           invokeRestart(restart)
[10:33:05.794]                           muffled <- TRUE
[10:33:05.794]                           break
[10:33:05.794]                         }
[10:33:05.794]                       }
[10:33:05.794]                     }
[10:33:05.794]                     invisible(muffled)
[10:33:05.794]                   }
[10:33:05.794]                   muffleCondition(cond)
[10:33:05.794]                 })
[10:33:05.794]             }))
[10:33:05.794]             future::FutureResult(value = ...future.value$value, 
[10:33:05.794]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:05.794]                   ...future.rng), globalenv = if (FALSE) 
[10:33:05.794]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:05.794]                     ...future.globalenv.names))
[10:33:05.794]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:05.794]         }, condition = base::local({
[10:33:05.794]             c <- base::c
[10:33:05.794]             inherits <- base::inherits
[10:33:05.794]             invokeRestart <- base::invokeRestart
[10:33:05.794]             length <- base::length
[10:33:05.794]             list <- base::list
[10:33:05.794]             seq.int <- base::seq.int
[10:33:05.794]             signalCondition <- base::signalCondition
[10:33:05.794]             sys.calls <- base::sys.calls
[10:33:05.794]             `[[` <- base::`[[`
[10:33:05.794]             `+` <- base::`+`
[10:33:05.794]             `<<-` <- base::`<<-`
[10:33:05.794]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:05.794]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:05.794]                   3L)]
[10:33:05.794]             }
[10:33:05.794]             function(cond) {
[10:33:05.794]                 is_error <- inherits(cond, "error")
[10:33:05.794]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:05.794]                   NULL)
[10:33:05.794]                 if (is_error) {
[10:33:05.794]                   sessionInformation <- function() {
[10:33:05.794]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:05.794]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:05.794]                       search = base::search(), system = base::Sys.info())
[10:33:05.794]                   }
[10:33:05.794]                   ...future.conditions[[length(...future.conditions) + 
[10:33:05.794]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:05.794]                     cond$call), session = sessionInformation(), 
[10:33:05.794]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:05.794]                   signalCondition(cond)
[10:33:05.794]                 }
[10:33:05.794]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:05.794]                 "immediateCondition"))) {
[10:33:05.794]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:05.794]                   ...future.conditions[[length(...future.conditions) + 
[10:33:05.794]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:05.794]                   if (TRUE && !signal) {
[10:33:05.794]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:05.794]                     {
[10:33:05.794]                       inherits <- base::inherits
[10:33:05.794]                       invokeRestart <- base::invokeRestart
[10:33:05.794]                       is.null <- base::is.null
[10:33:05.794]                       muffled <- FALSE
[10:33:05.794]                       if (inherits(cond, "message")) {
[10:33:05.794]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:05.794]                         if (muffled) 
[10:33:05.794]                           invokeRestart("muffleMessage")
[10:33:05.794]                       }
[10:33:05.794]                       else if (inherits(cond, "warning")) {
[10:33:05.794]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:05.794]                         if (muffled) 
[10:33:05.794]                           invokeRestart("muffleWarning")
[10:33:05.794]                       }
[10:33:05.794]                       else if (inherits(cond, "condition")) {
[10:33:05.794]                         if (!is.null(pattern)) {
[10:33:05.794]                           computeRestarts <- base::computeRestarts
[10:33:05.794]                           grepl <- base::grepl
[10:33:05.794]                           restarts <- computeRestarts(cond)
[10:33:05.794]                           for (restart in restarts) {
[10:33:05.794]                             name <- restart$name
[10:33:05.794]                             if (is.null(name)) 
[10:33:05.794]                               next
[10:33:05.794]                             if (!grepl(pattern, name)) 
[10:33:05.794]                               next
[10:33:05.794]                             invokeRestart(restart)
[10:33:05.794]                             muffled <- TRUE
[10:33:05.794]                             break
[10:33:05.794]                           }
[10:33:05.794]                         }
[10:33:05.794]                       }
[10:33:05.794]                       invisible(muffled)
[10:33:05.794]                     }
[10:33:05.794]                     muffleCondition(cond, pattern = "^muffle")
[10:33:05.794]                   }
[10:33:05.794]                 }
[10:33:05.794]                 else {
[10:33:05.794]                   if (TRUE) {
[10:33:05.794]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:05.794]                     {
[10:33:05.794]                       inherits <- base::inherits
[10:33:05.794]                       invokeRestart <- base::invokeRestart
[10:33:05.794]                       is.null <- base::is.null
[10:33:05.794]                       muffled <- FALSE
[10:33:05.794]                       if (inherits(cond, "message")) {
[10:33:05.794]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:05.794]                         if (muffled) 
[10:33:05.794]                           invokeRestart("muffleMessage")
[10:33:05.794]                       }
[10:33:05.794]                       else if (inherits(cond, "warning")) {
[10:33:05.794]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:05.794]                         if (muffled) 
[10:33:05.794]                           invokeRestart("muffleWarning")
[10:33:05.794]                       }
[10:33:05.794]                       else if (inherits(cond, "condition")) {
[10:33:05.794]                         if (!is.null(pattern)) {
[10:33:05.794]                           computeRestarts <- base::computeRestarts
[10:33:05.794]                           grepl <- base::grepl
[10:33:05.794]                           restarts <- computeRestarts(cond)
[10:33:05.794]                           for (restart in restarts) {
[10:33:05.794]                             name <- restart$name
[10:33:05.794]                             if (is.null(name)) 
[10:33:05.794]                               next
[10:33:05.794]                             if (!grepl(pattern, name)) 
[10:33:05.794]                               next
[10:33:05.794]                             invokeRestart(restart)
[10:33:05.794]                             muffled <- TRUE
[10:33:05.794]                             break
[10:33:05.794]                           }
[10:33:05.794]                         }
[10:33:05.794]                       }
[10:33:05.794]                       invisible(muffled)
[10:33:05.794]                     }
[10:33:05.794]                     muffleCondition(cond, pattern = "^muffle")
[10:33:05.794]                   }
[10:33:05.794]                 }
[10:33:05.794]             }
[10:33:05.794]         }))
[10:33:05.794]     }, error = function(ex) {
[10:33:05.794]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:05.794]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:05.794]                 ...future.rng), started = ...future.startTime, 
[10:33:05.794]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:05.794]             version = "1.8"), class = "FutureResult")
[10:33:05.794]     }, finally = {
[10:33:05.794]         if (!identical(...future.workdir, getwd())) 
[10:33:05.794]             setwd(...future.workdir)
[10:33:05.794]         {
[10:33:05.794]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:05.794]                 ...future.oldOptions$nwarnings <- NULL
[10:33:05.794]             }
[10:33:05.794]             base::options(...future.oldOptions)
[10:33:05.794]             if (.Platform$OS.type == "windows") {
[10:33:05.794]                 old_names <- names(...future.oldEnvVars)
[10:33:05.794]                 envs <- base::Sys.getenv()
[10:33:05.794]                 names <- names(envs)
[10:33:05.794]                 common <- intersect(names, old_names)
[10:33:05.794]                 added <- setdiff(names, old_names)
[10:33:05.794]                 removed <- setdiff(old_names, names)
[10:33:05.794]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:05.794]                   envs[common]]
[10:33:05.794]                 NAMES <- toupper(changed)
[10:33:05.794]                 args <- list()
[10:33:05.794]                 for (kk in seq_along(NAMES)) {
[10:33:05.794]                   name <- changed[[kk]]
[10:33:05.794]                   NAME <- NAMES[[kk]]
[10:33:05.794]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:05.794]                     next
[10:33:05.794]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:05.794]                 }
[10:33:05.794]                 NAMES <- toupper(added)
[10:33:05.794]                 for (kk in seq_along(NAMES)) {
[10:33:05.794]                   name <- added[[kk]]
[10:33:05.794]                   NAME <- NAMES[[kk]]
[10:33:05.794]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:05.794]                     next
[10:33:05.794]                   args[[name]] <- ""
[10:33:05.794]                 }
[10:33:05.794]                 NAMES <- toupper(removed)
[10:33:05.794]                 for (kk in seq_along(NAMES)) {
[10:33:05.794]                   name <- removed[[kk]]
[10:33:05.794]                   NAME <- NAMES[[kk]]
[10:33:05.794]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:05.794]                     next
[10:33:05.794]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:05.794]                 }
[10:33:05.794]                 if (length(args) > 0) 
[10:33:05.794]                   base::do.call(base::Sys.setenv, args = args)
[10:33:05.794]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:05.794]             }
[10:33:05.794]             else {
[10:33:05.794]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:05.794]             }
[10:33:05.794]             {
[10:33:05.794]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:05.794]                   0L) {
[10:33:05.794]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:05.794]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:05.794]                   base::options(opts)
[10:33:05.794]                 }
[10:33:05.794]                 {
[10:33:05.794]                   {
[10:33:05.794]                     base::options(mc.cores = ...future.mc.cores.old)
[10:33:05.794]                     NULL
[10:33:05.794]                   }
[10:33:05.794]                   options(future.plan = NULL)
[10:33:05.794]                   if (is.na(NA_character_)) 
[10:33:05.794]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:05.794]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:05.794]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:05.794]                     .init = FALSE)
[10:33:05.794]                 }
[10:33:05.794]             }
[10:33:05.794]         }
[10:33:05.794]     })
[10:33:05.794]     if (TRUE) {
[10:33:05.794]         base::sink(type = "output", split = FALSE)
[10:33:05.794]         if (TRUE) {
[10:33:05.794]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:05.794]         }
[10:33:05.794]         else {
[10:33:05.794]             ...future.result["stdout"] <- base::list(NULL)
[10:33:05.794]         }
[10:33:05.794]         base::close(...future.stdout)
[10:33:05.794]         ...future.stdout <- NULL
[10:33:05.794]     }
[10:33:05.794]     ...future.result$conditions <- ...future.conditions
[10:33:05.794]     ...future.result$finished <- base::Sys.time()
[10:33:05.794]     ...future.result
[10:33:05.794] }
[10:33:05.846] MultisessionFuture started
[10:33:05.846] result() for ClusterFuture ...
[10:33:05.847] receiveMessageFromWorker() for ClusterFuture ...
[10:33:05.847] - Validating connection of MultisessionFuture
[10:33:05.878] - received message: FutureResult
[10:33:05.879] - Received FutureResult
[10:33:05.881] - Erased future from FutureRegistry
[10:33:05.882] result() for ClusterFuture ...
[10:33:05.882] - result already collected: FutureResult
[10:33:05.882] result() for ClusterFuture ... done
[10:33:05.882] receiveMessageFromWorker() for ClusterFuture ... done
[10:33:05.882] result() for ClusterFuture ... done
[10:33:05.882] result() for ClusterFuture ...
[10:33:05.883] - result already collected: FutureResult
[10:33:05.883] result() for ClusterFuture ... done
[10:33:05.883] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[10:33:05.883] plan(): nbrOfWorkers() = 2
> 
> env <- new.env()
> 
> ## Create future #1 (consumes background process #1)
> env$a %<-% { 5 }
Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[10:33:05.885] getGlobalsAndPackages() ...
[10:33:05.885] Searching for globals...
[10:33:05.889] - globals found: [1] ‘{’
[10:33:05.889] Searching for globals ... DONE
[10:33:05.889] Resolving globals: TRUE
[10:33:05.889] Resolving any globals that are futures ...
[10:33:05.890] - globals: [1] ‘{’
[10:33:05.890] Resolving any globals that are futures ... DONE
[10:33:05.890] 
[10:33:05.890] 
[10:33:05.891] getGlobalsAndPackages() ... DONE
[10:33:05.891] run() for ‘Future’ ...
[10:33:05.891] - state: ‘created’
[10:33:05.891] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:33:05.903] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:33:05.903] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:33:05.903]   - Field: ‘node’
[10:33:05.903]   - Field: ‘label’
[10:33:05.903]   - Field: ‘local’
[10:33:05.903]   - Field: ‘owner’
[10:33:05.903]   - Field: ‘envir’
[10:33:05.903]   - Field: ‘workers’
[10:33:05.903]   - Field: ‘packages’
[10:33:05.904]   - Field: ‘gc’
[10:33:05.904]   - Field: ‘conditions’
[10:33:05.904]   - Field: ‘persistent’
[10:33:05.904]   - Field: ‘expr’
[10:33:05.904]   - Field: ‘uuid’
[10:33:05.904]   - Field: ‘seed’
[10:33:05.904]   - Field: ‘version’
[10:33:05.904]   - Field: ‘result’
[10:33:05.904]   - Field: ‘asynchronous’
[10:33:05.905]   - Field: ‘calls’
[10:33:05.905]   - Field: ‘globals’
[10:33:05.905]   - Field: ‘stdout’
[10:33:05.905]   - Field: ‘earlySignal’
[10:33:05.905]   - Field: ‘lazy’
[10:33:05.905]   - Field: ‘state’
[10:33:05.905] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:33:05.905] - Launch lazy future ...
[10:33:05.906] Packages needed by the future expression (n = 0): <none>
[10:33:05.906] Packages needed by future strategies (n = 0): <none>
[10:33:05.906] {
[10:33:05.906]     {
[10:33:05.906]         {
[10:33:05.906]             ...future.startTime <- base::Sys.time()
[10:33:05.906]             {
[10:33:05.906]                 {
[10:33:05.906]                   {
[10:33:05.906]                     {
[10:33:05.906]                       base::local({
[10:33:05.906]                         has_future <- base::requireNamespace("future", 
[10:33:05.906]                           quietly = TRUE)
[10:33:05.906]                         if (has_future) {
[10:33:05.906]                           ns <- base::getNamespace("future")
[10:33:05.906]                           version <- ns[[".package"]][["version"]]
[10:33:05.906]                           if (is.null(version)) 
[10:33:05.906]                             version <- utils::packageVersion("future")
[10:33:05.906]                         }
[10:33:05.906]                         else {
[10:33:05.906]                           version <- NULL
[10:33:05.906]                         }
[10:33:05.906]                         if (!has_future || version < "1.8.0") {
[10:33:05.906]                           info <- base::c(r_version = base::gsub("R version ", 
[10:33:05.906]                             "", base::R.version$version.string), 
[10:33:05.906]                             platform = base::sprintf("%s (%s-bit)", 
[10:33:05.906]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:05.906]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:05.906]                               "release", "version")], collapse = " "), 
[10:33:05.906]                             hostname = base::Sys.info()[["nodename"]])
[10:33:05.906]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:33:05.906]                             info)
[10:33:05.906]                           info <- base::paste(info, collapse = "; ")
[10:33:05.906]                           if (!has_future) {
[10:33:05.906]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:05.906]                               info)
[10:33:05.906]                           }
[10:33:05.906]                           else {
[10:33:05.906]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:05.906]                               info, version)
[10:33:05.906]                           }
[10:33:05.906]                           base::stop(msg)
[10:33:05.906]                         }
[10:33:05.906]                       })
[10:33:05.906]                     }
[10:33:05.906]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:33:05.906]                     base::options(mc.cores = 1L)
[10:33:05.906]                   }
[10:33:05.906]                   ...future.strategy.old <- future::plan("list")
[10:33:05.906]                   options(future.plan = NULL)
[10:33:05.906]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:05.906]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:33:05.906]                 }
[10:33:05.906]                 ...future.workdir <- getwd()
[10:33:05.906]             }
[10:33:05.906]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:05.906]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:05.906]         }
[10:33:05.906]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:33:05.906]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:05.906]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:33:05.906]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[10:33:05.906]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:05.906]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:05.906]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:05.906]             base::names(...future.oldOptions))
[10:33:05.906]     }
[10:33:05.906]     if (FALSE) {
[10:33:05.906]     }
[10:33:05.906]     else {
[10:33:05.906]         if (TRUE) {
[10:33:05.906]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:05.906]                 open = "w")
[10:33:05.906]         }
[10:33:05.906]         else {
[10:33:05.906]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:05.906]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:05.906]         }
[10:33:05.906]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:05.906]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:05.906]             base::sink(type = "output", split = FALSE)
[10:33:05.906]             base::close(...future.stdout)
[10:33:05.906]         }, add = TRUE)
[10:33:05.906]     }
[10:33:05.906]     ...future.frame <- base::sys.nframe()
[10:33:05.906]     ...future.conditions <- base::list()
[10:33:05.906]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:05.906]     if (FALSE) {
[10:33:05.906]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:05.906]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:05.906]     }
[10:33:05.906]     ...future.result <- base::tryCatch({
[10:33:05.906]         base::withCallingHandlers({
[10:33:05.906]             ...future.value <- base::withVisible(base::local({
[10:33:05.906]                 ...future.makeSendCondition <- base::local({
[10:33:05.906]                   sendCondition <- NULL
[10:33:05.906]                   function(frame = 1L) {
[10:33:05.906]                     if (is.function(sendCondition)) 
[10:33:05.906]                       return(sendCondition)
[10:33:05.906]                     ns <- getNamespace("parallel")
[10:33:05.906]                     if (exists("sendData", mode = "function", 
[10:33:05.906]                       envir = ns)) {
[10:33:05.906]                       parallel_sendData <- get("sendData", mode = "function", 
[10:33:05.906]                         envir = ns)
[10:33:05.906]                       envir <- sys.frame(frame)
[10:33:05.906]                       master <- NULL
[10:33:05.906]                       while (!identical(envir, .GlobalEnv) && 
[10:33:05.906]                         !identical(envir, emptyenv())) {
[10:33:05.906]                         if (exists("master", mode = "list", envir = envir, 
[10:33:05.906]                           inherits = FALSE)) {
[10:33:05.906]                           master <- get("master", mode = "list", 
[10:33:05.906]                             envir = envir, inherits = FALSE)
[10:33:05.906]                           if (inherits(master, c("SOCKnode", 
[10:33:05.906]                             "SOCK0node"))) {
[10:33:05.906]                             sendCondition <<- function(cond) {
[10:33:05.906]                               data <- list(type = "VALUE", value = cond, 
[10:33:05.906]                                 success = TRUE)
[10:33:05.906]                               parallel_sendData(master, data)
[10:33:05.906]                             }
[10:33:05.906]                             return(sendCondition)
[10:33:05.906]                           }
[10:33:05.906]                         }
[10:33:05.906]                         frame <- frame + 1L
[10:33:05.906]                         envir <- sys.frame(frame)
[10:33:05.906]                       }
[10:33:05.906]                     }
[10:33:05.906]                     sendCondition <<- function(cond) NULL
[10:33:05.906]                   }
[10:33:05.906]                 })
[10:33:05.906]                 withCallingHandlers({
[10:33:05.906]                   {
[10:33:05.906]                     5
[10:33:05.906]                   }
[10:33:05.906]                 }, immediateCondition = function(cond) {
[10:33:05.906]                   sendCondition <- ...future.makeSendCondition()
[10:33:05.906]                   sendCondition(cond)
[10:33:05.906]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:05.906]                   {
[10:33:05.906]                     inherits <- base::inherits
[10:33:05.906]                     invokeRestart <- base::invokeRestart
[10:33:05.906]                     is.null <- base::is.null
[10:33:05.906]                     muffled <- FALSE
[10:33:05.906]                     if (inherits(cond, "message")) {
[10:33:05.906]                       muffled <- grepl(pattern, "muffleMessage")
[10:33:05.906]                       if (muffled) 
[10:33:05.906]                         invokeRestart("muffleMessage")
[10:33:05.906]                     }
[10:33:05.906]                     else if (inherits(cond, "warning")) {
[10:33:05.906]                       muffled <- grepl(pattern, "muffleWarning")
[10:33:05.906]                       if (muffled) 
[10:33:05.906]                         invokeRestart("muffleWarning")
[10:33:05.906]                     }
[10:33:05.906]                     else if (inherits(cond, "condition")) {
[10:33:05.906]                       if (!is.null(pattern)) {
[10:33:05.906]                         computeRestarts <- base::computeRestarts
[10:33:05.906]                         grepl <- base::grepl
[10:33:05.906]                         restarts <- computeRestarts(cond)
[10:33:05.906]                         for (restart in restarts) {
[10:33:05.906]                           name <- restart$name
[10:33:05.906]                           if (is.null(name)) 
[10:33:05.906]                             next
[10:33:05.906]                           if (!grepl(pattern, name)) 
[10:33:05.906]                             next
[10:33:05.906]                           invokeRestart(restart)
[10:33:05.906]                           muffled <- TRUE
[10:33:05.906]                           break
[10:33:05.906]                         }
[10:33:05.906]                       }
[10:33:05.906]                     }
[10:33:05.906]                     invisible(muffled)
[10:33:05.906]                   }
[10:33:05.906]                   muffleCondition(cond)
[10:33:05.906]                 })
[10:33:05.906]             }))
[10:33:05.906]             future::FutureResult(value = ...future.value$value, 
[10:33:05.906]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:05.906]                   ...future.rng), globalenv = if (FALSE) 
[10:33:05.906]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:05.906]                     ...future.globalenv.names))
[10:33:05.906]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:05.906]         }, condition = base::local({
[10:33:05.906]             c <- base::c
[10:33:05.906]             inherits <- base::inherits
[10:33:05.906]             invokeRestart <- base::invokeRestart
[10:33:05.906]             length <- base::length
[10:33:05.906]             list <- base::list
[10:33:05.906]             seq.int <- base::seq.int
[10:33:05.906]             signalCondition <- base::signalCondition
[10:33:05.906]             sys.calls <- base::sys.calls
[10:33:05.906]             `[[` <- base::`[[`
[10:33:05.906]             `+` <- base::`+`
[10:33:05.906]             `<<-` <- base::`<<-`
[10:33:05.906]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:05.906]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:05.906]                   3L)]
[10:33:05.906]             }
[10:33:05.906]             function(cond) {
[10:33:05.906]                 is_error <- inherits(cond, "error")
[10:33:05.906]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:05.906]                   NULL)
[10:33:05.906]                 if (is_error) {
[10:33:05.906]                   sessionInformation <- function() {
[10:33:05.906]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:05.906]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:05.906]                       search = base::search(), system = base::Sys.info())
[10:33:05.906]                   }
[10:33:05.906]                   ...future.conditions[[length(...future.conditions) + 
[10:33:05.906]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:05.906]                     cond$call), session = sessionInformation(), 
[10:33:05.906]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:05.906]                   signalCondition(cond)
[10:33:05.906]                 }
[10:33:05.906]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:05.906]                 "immediateCondition"))) {
[10:33:05.906]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:05.906]                   ...future.conditions[[length(...future.conditions) + 
[10:33:05.906]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:05.906]                   if (TRUE && !signal) {
[10:33:05.906]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:05.906]                     {
[10:33:05.906]                       inherits <- base::inherits
[10:33:05.906]                       invokeRestart <- base::invokeRestart
[10:33:05.906]                       is.null <- base::is.null
[10:33:05.906]                       muffled <- FALSE
[10:33:05.906]                       if (inherits(cond, "message")) {
[10:33:05.906]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:05.906]                         if (muffled) 
[10:33:05.906]                           invokeRestart("muffleMessage")
[10:33:05.906]                       }
[10:33:05.906]                       else if (inherits(cond, "warning")) {
[10:33:05.906]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:05.906]                         if (muffled) 
[10:33:05.906]                           invokeRestart("muffleWarning")
[10:33:05.906]                       }
[10:33:05.906]                       else if (inherits(cond, "condition")) {
[10:33:05.906]                         if (!is.null(pattern)) {
[10:33:05.906]                           computeRestarts <- base::computeRestarts
[10:33:05.906]                           grepl <- base::grepl
[10:33:05.906]                           restarts <- computeRestarts(cond)
[10:33:05.906]                           for (restart in restarts) {
[10:33:05.906]                             name <- restart$name
[10:33:05.906]                             if (is.null(name)) 
[10:33:05.906]                               next
[10:33:05.906]                             if (!grepl(pattern, name)) 
[10:33:05.906]                               next
[10:33:05.906]                             invokeRestart(restart)
[10:33:05.906]                             muffled <- TRUE
[10:33:05.906]                             break
[10:33:05.906]                           }
[10:33:05.906]                         }
[10:33:05.906]                       }
[10:33:05.906]                       invisible(muffled)
[10:33:05.906]                     }
[10:33:05.906]                     muffleCondition(cond, pattern = "^muffle")
[10:33:05.906]                   }
[10:33:05.906]                 }
[10:33:05.906]                 else {
[10:33:05.906]                   if (TRUE) {
[10:33:05.906]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:05.906]                     {
[10:33:05.906]                       inherits <- base::inherits
[10:33:05.906]                       invokeRestart <- base::invokeRestart
[10:33:05.906]                       is.null <- base::is.null
[10:33:05.906]                       muffled <- FALSE
[10:33:05.906]                       if (inherits(cond, "message")) {
[10:33:05.906]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:05.906]                         if (muffled) 
[10:33:05.906]                           invokeRestart("muffleMessage")
[10:33:05.906]                       }
[10:33:05.906]                       else if (inherits(cond, "warning")) {
[10:33:05.906]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:05.906]                         if (muffled) 
[10:33:05.906]                           invokeRestart("muffleWarning")
[10:33:05.906]                       }
[10:33:05.906]                       else if (inherits(cond, "condition")) {
[10:33:05.906]                         if (!is.null(pattern)) {
[10:33:05.906]                           computeRestarts <- base::computeRestarts
[10:33:05.906]                           grepl <- base::grepl
[10:33:05.906]                           restarts <- computeRestarts(cond)
[10:33:05.906]                           for (restart in restarts) {
[10:33:05.906]                             name <- restart$name
[10:33:05.906]                             if (is.null(name)) 
[10:33:05.906]                               next
[10:33:05.906]                             if (!grepl(pattern, name)) 
[10:33:05.906]                               next
[10:33:05.906]                             invokeRestart(restart)
[10:33:05.906]                             muffled <- TRUE
[10:33:05.906]                             break
[10:33:05.906]                           }
[10:33:05.906]                         }
[10:33:05.906]                       }
[10:33:05.906]                       invisible(muffled)
[10:33:05.906]                     }
[10:33:05.906]                     muffleCondition(cond, pattern = "^muffle")
[10:33:05.906]                   }
[10:33:05.906]                 }
[10:33:05.906]             }
[10:33:05.906]         }))
[10:33:05.906]     }, error = function(ex) {
[10:33:05.906]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:05.906]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:05.906]                 ...future.rng), started = ...future.startTime, 
[10:33:05.906]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:05.906]             version = "1.8"), class = "FutureResult")
[10:33:05.906]     }, finally = {
[10:33:05.906]         if (!identical(...future.workdir, getwd())) 
[10:33:05.906]             setwd(...future.workdir)
[10:33:05.906]         {
[10:33:05.906]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:05.906]                 ...future.oldOptions$nwarnings <- NULL
[10:33:05.906]             }
[10:33:05.906]             base::options(...future.oldOptions)
[10:33:05.906]             if (.Platform$OS.type == "windows") {
[10:33:05.906]                 old_names <- names(...future.oldEnvVars)
[10:33:05.906]                 envs <- base::Sys.getenv()
[10:33:05.906]                 names <- names(envs)
[10:33:05.906]                 common <- intersect(names, old_names)
[10:33:05.906]                 added <- setdiff(names, old_names)
[10:33:05.906]                 removed <- setdiff(old_names, names)
[10:33:05.906]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:05.906]                   envs[common]]
[10:33:05.906]                 NAMES <- toupper(changed)
[10:33:05.906]                 args <- list()
[10:33:05.906]                 for (kk in seq_along(NAMES)) {
[10:33:05.906]                   name <- changed[[kk]]
[10:33:05.906]                   NAME <- NAMES[[kk]]
[10:33:05.906]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:05.906]                     next
[10:33:05.906]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:05.906]                 }
[10:33:05.906]                 NAMES <- toupper(added)
[10:33:05.906]                 for (kk in seq_along(NAMES)) {
[10:33:05.906]                   name <- added[[kk]]
[10:33:05.906]                   NAME <- NAMES[[kk]]
[10:33:05.906]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:05.906]                     next
[10:33:05.906]                   args[[name]] <- ""
[10:33:05.906]                 }
[10:33:05.906]                 NAMES <- toupper(removed)
[10:33:05.906]                 for (kk in seq_along(NAMES)) {
[10:33:05.906]                   name <- removed[[kk]]
[10:33:05.906]                   NAME <- NAMES[[kk]]
[10:33:05.906]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:05.906]                     next
[10:33:05.906]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:05.906]                 }
[10:33:05.906]                 if (length(args) > 0) 
[10:33:05.906]                   base::do.call(base::Sys.setenv, args = args)
[10:33:05.906]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:05.906]             }
[10:33:05.906]             else {
[10:33:05.906]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:05.906]             }
[10:33:05.906]             {
[10:33:05.906]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:05.906]                   0L) {
[10:33:05.906]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:05.906]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:05.906]                   base::options(opts)
[10:33:05.906]                 }
[10:33:05.906]                 {
[10:33:05.906]                   {
[10:33:05.906]                     base::options(mc.cores = ...future.mc.cores.old)
[10:33:05.906]                     NULL
[10:33:05.906]                   }
[10:33:05.906]                   options(future.plan = NULL)
[10:33:05.906]                   if (is.na(NA_character_)) 
[10:33:05.906]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:05.906]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:05.906]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:05.906]                     .init = FALSE)
[10:33:05.906]                 }
[10:33:05.906]             }
[10:33:05.906]         }
[10:33:05.906]     })
[10:33:05.906]     if (TRUE) {
[10:33:05.906]         base::sink(type = "output", split = FALSE)
[10:33:05.906]         if (TRUE) {
[10:33:05.906]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:05.906]         }
[10:33:05.906]         else {
[10:33:05.906]             ...future.result["stdout"] <- base::list(NULL)
[10:33:05.906]         }
[10:33:05.906]         base::close(...future.stdout)
[10:33:05.906]         ...future.stdout <- NULL
[10:33:05.906]     }
[10:33:05.906]     ...future.result$conditions <- ...future.conditions
[10:33:05.906]     ...future.result$finished <- base::Sys.time()
[10:33:05.906]     ...future.result
[10:33:05.906] }
[10:33:05.910] MultisessionFuture started
[10:33:05.910] - Launch lazy future ... done
[10:33:05.910] run() for ‘MultisessionFuture’ ... done
> 
> ## Create future #2 (consumes background process #2)
> b %<-% { "a" }
Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[10:33:05.911] getGlobalsAndPackages() ...
[10:33:05.911] Searching for globals...
[10:33:05.911] - globals found: [1] ‘{’
[10:33:05.912] Searching for globals ... DONE
[10:33:05.912] Resolving globals: TRUE
[10:33:05.912] Resolving any globals that are futures ...
[10:33:05.912] - globals: [1] ‘{’
[10:33:05.912] Resolving any globals that are futures ... DONE
[10:33:05.912] 
[10:33:05.913] 
[10:33:05.913] getGlobalsAndPackages() ... DONE
[10:33:05.913] run() for ‘Future’ ...
[10:33:05.913] - state: ‘created’
[10:33:05.913] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:33:05.924] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:33:05.924] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:33:05.924]   - Field: ‘node’
[10:33:05.925]   - Field: ‘label’
[10:33:05.925]   - Field: ‘local’
[10:33:05.925]   - Field: ‘owner’
[10:33:05.925]   - Field: ‘envir’
[10:33:05.925]   - Field: ‘workers’
[10:33:05.925]   - Field: ‘packages’
[10:33:05.925]   - Field: ‘gc’
[10:33:05.925]   - Field: ‘conditions’
[10:33:05.925]   - Field: ‘persistent’
[10:33:05.926]   - Field: ‘expr’
[10:33:05.926]   - Field: ‘uuid’
[10:33:05.926]   - Field: ‘seed’
[10:33:05.926]   - Field: ‘version’
[10:33:05.926]   - Field: ‘result’
[10:33:05.926]   - Field: ‘asynchronous’
[10:33:05.926]   - Field: ‘calls’
[10:33:05.926]   - Field: ‘globals’
[10:33:05.926]   - Field: ‘stdout’
[10:33:05.927]   - Field: ‘earlySignal’
[10:33:05.927]   - Field: ‘lazy’
[10:33:05.927]   - Field: ‘state’
[10:33:05.927] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:33:05.927] - Launch lazy future ...
[10:33:05.927] Packages needed by the future expression (n = 0): <none>
[10:33:05.928] Packages needed by future strategies (n = 0): <none>
[10:33:05.928] {
[10:33:05.928]     {
[10:33:05.928]         {
[10:33:05.928]             ...future.startTime <- base::Sys.time()
[10:33:05.928]             {
[10:33:05.928]                 {
[10:33:05.928]                   {
[10:33:05.928]                     {
[10:33:05.928]                       base::local({
[10:33:05.928]                         has_future <- base::requireNamespace("future", 
[10:33:05.928]                           quietly = TRUE)
[10:33:05.928]                         if (has_future) {
[10:33:05.928]                           ns <- base::getNamespace("future")
[10:33:05.928]                           version <- ns[[".package"]][["version"]]
[10:33:05.928]                           if (is.null(version)) 
[10:33:05.928]                             version <- utils::packageVersion("future")
[10:33:05.928]                         }
[10:33:05.928]                         else {
[10:33:05.928]                           version <- NULL
[10:33:05.928]                         }
[10:33:05.928]                         if (!has_future || version < "1.8.0") {
[10:33:05.928]                           info <- base::c(r_version = base::gsub("R version ", 
[10:33:05.928]                             "", base::R.version$version.string), 
[10:33:05.928]                             platform = base::sprintf("%s (%s-bit)", 
[10:33:05.928]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:05.928]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:05.928]                               "release", "version")], collapse = " "), 
[10:33:05.928]                             hostname = base::Sys.info()[["nodename"]])
[10:33:05.928]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:33:05.928]                             info)
[10:33:05.928]                           info <- base::paste(info, collapse = "; ")
[10:33:05.928]                           if (!has_future) {
[10:33:05.928]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:05.928]                               info)
[10:33:05.928]                           }
[10:33:05.928]                           else {
[10:33:05.928]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:05.928]                               info, version)
[10:33:05.928]                           }
[10:33:05.928]                           base::stop(msg)
[10:33:05.928]                         }
[10:33:05.928]                       })
[10:33:05.928]                     }
[10:33:05.928]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:33:05.928]                     base::options(mc.cores = 1L)
[10:33:05.928]                   }
[10:33:05.928]                   ...future.strategy.old <- future::plan("list")
[10:33:05.928]                   options(future.plan = NULL)
[10:33:05.928]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:05.928]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:33:05.928]                 }
[10:33:05.928]                 ...future.workdir <- getwd()
[10:33:05.928]             }
[10:33:05.928]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:05.928]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:05.928]         }
[10:33:05.928]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:33:05.928]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:05.928]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:33:05.928]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[10:33:05.928]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:05.928]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:05.928]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:05.928]             base::names(...future.oldOptions))
[10:33:05.928]     }
[10:33:05.928]     if (FALSE) {
[10:33:05.928]     }
[10:33:05.928]     else {
[10:33:05.928]         if (TRUE) {
[10:33:05.928]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:05.928]                 open = "w")
[10:33:05.928]         }
[10:33:05.928]         else {
[10:33:05.928]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:05.928]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:05.928]         }
[10:33:05.928]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:05.928]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:05.928]             base::sink(type = "output", split = FALSE)
[10:33:05.928]             base::close(...future.stdout)
[10:33:05.928]         }, add = TRUE)
[10:33:05.928]     }
[10:33:05.928]     ...future.frame <- base::sys.nframe()
[10:33:05.928]     ...future.conditions <- base::list()
[10:33:05.928]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:05.928]     if (FALSE) {
[10:33:05.928]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:05.928]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:05.928]     }
[10:33:05.928]     ...future.result <- base::tryCatch({
[10:33:05.928]         base::withCallingHandlers({
[10:33:05.928]             ...future.value <- base::withVisible(base::local({
[10:33:05.928]                 ...future.makeSendCondition <- base::local({
[10:33:05.928]                   sendCondition <- NULL
[10:33:05.928]                   function(frame = 1L) {
[10:33:05.928]                     if (is.function(sendCondition)) 
[10:33:05.928]                       return(sendCondition)
[10:33:05.928]                     ns <- getNamespace("parallel")
[10:33:05.928]                     if (exists("sendData", mode = "function", 
[10:33:05.928]                       envir = ns)) {
[10:33:05.928]                       parallel_sendData <- get("sendData", mode = "function", 
[10:33:05.928]                         envir = ns)
[10:33:05.928]                       envir <- sys.frame(frame)
[10:33:05.928]                       master <- NULL
[10:33:05.928]                       while (!identical(envir, .GlobalEnv) && 
[10:33:05.928]                         !identical(envir, emptyenv())) {
[10:33:05.928]                         if (exists("master", mode = "list", envir = envir, 
[10:33:05.928]                           inherits = FALSE)) {
[10:33:05.928]                           master <- get("master", mode = "list", 
[10:33:05.928]                             envir = envir, inherits = FALSE)
[10:33:05.928]                           if (inherits(master, c("SOCKnode", 
[10:33:05.928]                             "SOCK0node"))) {
[10:33:05.928]                             sendCondition <<- function(cond) {
[10:33:05.928]                               data <- list(type = "VALUE", value = cond, 
[10:33:05.928]                                 success = TRUE)
[10:33:05.928]                               parallel_sendData(master, data)
[10:33:05.928]                             }
[10:33:05.928]                             return(sendCondition)
[10:33:05.928]                           }
[10:33:05.928]                         }
[10:33:05.928]                         frame <- frame + 1L
[10:33:05.928]                         envir <- sys.frame(frame)
[10:33:05.928]                       }
[10:33:05.928]                     }
[10:33:05.928]                     sendCondition <<- function(cond) NULL
[10:33:05.928]                   }
[10:33:05.928]                 })
[10:33:05.928]                 withCallingHandlers({
[10:33:05.928]                   {
[10:33:05.928]                     "a"
[10:33:05.928]                   }
[10:33:05.928]                 }, immediateCondition = function(cond) {
[10:33:05.928]                   sendCondition <- ...future.makeSendCondition()
[10:33:05.928]                   sendCondition(cond)
[10:33:05.928]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:05.928]                   {
[10:33:05.928]                     inherits <- base::inherits
[10:33:05.928]                     invokeRestart <- base::invokeRestart
[10:33:05.928]                     is.null <- base::is.null
[10:33:05.928]                     muffled <- FALSE
[10:33:05.928]                     if (inherits(cond, "message")) {
[10:33:05.928]                       muffled <- grepl(pattern, "muffleMessage")
[10:33:05.928]                       if (muffled) 
[10:33:05.928]                         invokeRestart("muffleMessage")
[10:33:05.928]                     }
[10:33:05.928]                     else if (inherits(cond, "warning")) {
[10:33:05.928]                       muffled <- grepl(pattern, "muffleWarning")
[10:33:05.928]                       if (muffled) 
[10:33:05.928]                         invokeRestart("muffleWarning")
[10:33:05.928]                     }
[10:33:05.928]                     else if (inherits(cond, "condition")) {
[10:33:05.928]                       if (!is.null(pattern)) {
[10:33:05.928]                         computeRestarts <- base::computeRestarts
[10:33:05.928]                         grepl <- base::grepl
[10:33:05.928]                         restarts <- computeRestarts(cond)
[10:33:05.928]                         for (restart in restarts) {
[10:33:05.928]                           name <- restart$name
[10:33:05.928]                           if (is.null(name)) 
[10:33:05.928]                             next
[10:33:05.928]                           if (!grepl(pattern, name)) 
[10:33:05.928]                             next
[10:33:05.928]                           invokeRestart(restart)
[10:33:05.928]                           muffled <- TRUE
[10:33:05.928]                           break
[10:33:05.928]                         }
[10:33:05.928]                       }
[10:33:05.928]                     }
[10:33:05.928]                     invisible(muffled)
[10:33:05.928]                   }
[10:33:05.928]                   muffleCondition(cond)
[10:33:05.928]                 })
[10:33:05.928]             }))
[10:33:05.928]             future::FutureResult(value = ...future.value$value, 
[10:33:05.928]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:05.928]                   ...future.rng), globalenv = if (FALSE) 
[10:33:05.928]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:05.928]                     ...future.globalenv.names))
[10:33:05.928]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:05.928]         }, condition = base::local({
[10:33:05.928]             c <- base::c
[10:33:05.928]             inherits <- base::inherits
[10:33:05.928]             invokeRestart <- base::invokeRestart
[10:33:05.928]             length <- base::length
[10:33:05.928]             list <- base::list
[10:33:05.928]             seq.int <- base::seq.int
[10:33:05.928]             signalCondition <- base::signalCondition
[10:33:05.928]             sys.calls <- base::sys.calls
[10:33:05.928]             `[[` <- base::`[[`
[10:33:05.928]             `+` <- base::`+`
[10:33:05.928]             `<<-` <- base::`<<-`
[10:33:05.928]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:05.928]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:05.928]                   3L)]
[10:33:05.928]             }
[10:33:05.928]             function(cond) {
[10:33:05.928]                 is_error <- inherits(cond, "error")
[10:33:05.928]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:05.928]                   NULL)
[10:33:05.928]                 if (is_error) {
[10:33:05.928]                   sessionInformation <- function() {
[10:33:05.928]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:05.928]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:05.928]                       search = base::search(), system = base::Sys.info())
[10:33:05.928]                   }
[10:33:05.928]                   ...future.conditions[[length(...future.conditions) + 
[10:33:05.928]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:05.928]                     cond$call), session = sessionInformation(), 
[10:33:05.928]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:05.928]                   signalCondition(cond)
[10:33:05.928]                 }
[10:33:05.928]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:05.928]                 "immediateCondition"))) {
[10:33:05.928]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:05.928]                   ...future.conditions[[length(...future.conditions) + 
[10:33:05.928]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:05.928]                   if (TRUE && !signal) {
[10:33:05.928]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:05.928]                     {
[10:33:05.928]                       inherits <- base::inherits
[10:33:05.928]                       invokeRestart <- base::invokeRestart
[10:33:05.928]                       is.null <- base::is.null
[10:33:05.928]                       muffled <- FALSE
[10:33:05.928]                       if (inherits(cond, "message")) {
[10:33:05.928]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:05.928]                         if (muffled) 
[10:33:05.928]                           invokeRestart("muffleMessage")
[10:33:05.928]                       }
[10:33:05.928]                       else if (inherits(cond, "warning")) {
[10:33:05.928]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:05.928]                         if (muffled) 
[10:33:05.928]                           invokeRestart("muffleWarning")
[10:33:05.928]                       }
[10:33:05.928]                       else if (inherits(cond, "condition")) {
[10:33:05.928]                         if (!is.null(pattern)) {
[10:33:05.928]                           computeRestarts <- base::computeRestarts
[10:33:05.928]                           grepl <- base::grepl
[10:33:05.928]                           restarts <- computeRestarts(cond)
[10:33:05.928]                           for (restart in restarts) {
[10:33:05.928]                             name <- restart$name
[10:33:05.928]                             if (is.null(name)) 
[10:33:05.928]                               next
[10:33:05.928]                             if (!grepl(pattern, name)) 
[10:33:05.928]                               next
[10:33:05.928]                             invokeRestart(restart)
[10:33:05.928]                             muffled <- TRUE
[10:33:05.928]                             break
[10:33:05.928]                           }
[10:33:05.928]                         }
[10:33:05.928]                       }
[10:33:05.928]                       invisible(muffled)
[10:33:05.928]                     }
[10:33:05.928]                     muffleCondition(cond, pattern = "^muffle")
[10:33:05.928]                   }
[10:33:05.928]                 }
[10:33:05.928]                 else {
[10:33:05.928]                   if (TRUE) {
[10:33:05.928]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:05.928]                     {
[10:33:05.928]                       inherits <- base::inherits
[10:33:05.928]                       invokeRestart <- base::invokeRestart
[10:33:05.928]                       is.null <- base::is.null
[10:33:05.928]                       muffled <- FALSE
[10:33:05.928]                       if (inherits(cond, "message")) {
[10:33:05.928]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:05.928]                         if (muffled) 
[10:33:05.928]                           invokeRestart("muffleMessage")
[10:33:05.928]                       }
[10:33:05.928]                       else if (inherits(cond, "warning")) {
[10:33:05.928]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:05.928]                         if (muffled) 
[10:33:05.928]                           invokeRestart("muffleWarning")
[10:33:05.928]                       }
[10:33:05.928]                       else if (inherits(cond, "condition")) {
[10:33:05.928]                         if (!is.null(pattern)) {
[10:33:05.928]                           computeRestarts <- base::computeRestarts
[10:33:05.928]                           grepl <- base::grepl
[10:33:05.928]                           restarts <- computeRestarts(cond)
[10:33:05.928]                           for (restart in restarts) {
[10:33:05.928]                             name <- restart$name
[10:33:05.928]                             if (is.null(name)) 
[10:33:05.928]                               next
[10:33:05.928]                             if (!grepl(pattern, name)) 
[10:33:05.928]                               next
[10:33:05.928]                             invokeRestart(restart)
[10:33:05.928]                             muffled <- TRUE
[10:33:05.928]                             break
[10:33:05.928]                           }
[10:33:05.928]                         }
[10:33:05.928]                       }
[10:33:05.928]                       invisible(muffled)
[10:33:05.928]                     }
[10:33:05.928]                     muffleCondition(cond, pattern = "^muffle")
[10:33:05.928]                   }
[10:33:05.928]                 }
[10:33:05.928]             }
[10:33:05.928]         }))
[10:33:05.928]     }, error = function(ex) {
[10:33:05.928]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:05.928]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:05.928]                 ...future.rng), started = ...future.startTime, 
[10:33:05.928]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:05.928]             version = "1.8"), class = "FutureResult")
[10:33:05.928]     }, finally = {
[10:33:05.928]         if (!identical(...future.workdir, getwd())) 
[10:33:05.928]             setwd(...future.workdir)
[10:33:05.928]         {
[10:33:05.928]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:05.928]                 ...future.oldOptions$nwarnings <- NULL
[10:33:05.928]             }
[10:33:05.928]             base::options(...future.oldOptions)
[10:33:05.928]             if (.Platform$OS.type == "windows") {
[10:33:05.928]                 old_names <- names(...future.oldEnvVars)
[10:33:05.928]                 envs <- base::Sys.getenv()
[10:33:05.928]                 names <- names(envs)
[10:33:05.928]                 common <- intersect(names, old_names)
[10:33:05.928]                 added <- setdiff(names, old_names)
[10:33:05.928]                 removed <- setdiff(old_names, names)
[10:33:05.928]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:05.928]                   envs[common]]
[10:33:05.928]                 NAMES <- toupper(changed)
[10:33:05.928]                 args <- list()
[10:33:05.928]                 for (kk in seq_along(NAMES)) {
[10:33:05.928]                   name <- changed[[kk]]
[10:33:05.928]                   NAME <- NAMES[[kk]]
[10:33:05.928]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:05.928]                     next
[10:33:05.928]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:05.928]                 }
[10:33:05.928]                 NAMES <- toupper(added)
[10:33:05.928]                 for (kk in seq_along(NAMES)) {
[10:33:05.928]                   name <- added[[kk]]
[10:33:05.928]                   NAME <- NAMES[[kk]]
[10:33:05.928]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:05.928]                     next
[10:33:05.928]                   args[[name]] <- ""
[10:33:05.928]                 }
[10:33:05.928]                 NAMES <- toupper(removed)
[10:33:05.928]                 for (kk in seq_along(NAMES)) {
[10:33:05.928]                   name <- removed[[kk]]
[10:33:05.928]                   NAME <- NAMES[[kk]]
[10:33:05.928]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:05.928]                     next
[10:33:05.928]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:05.928]                 }
[10:33:05.928]                 if (length(args) > 0) 
[10:33:05.928]                   base::do.call(base::Sys.setenv, args = args)
[10:33:05.928]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:05.928]             }
[10:33:05.928]             else {
[10:33:05.928]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:05.928]             }
[10:33:05.928]             {
[10:33:05.928]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:05.928]                   0L) {
[10:33:05.928]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:05.928]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:05.928]                   base::options(opts)
[10:33:05.928]                 }
[10:33:05.928]                 {
[10:33:05.928]                   {
[10:33:05.928]                     base::options(mc.cores = ...future.mc.cores.old)
[10:33:05.928]                     NULL
[10:33:05.928]                   }
[10:33:05.928]                   options(future.plan = NULL)
[10:33:05.928]                   if (is.na(NA_character_)) 
[10:33:05.928]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:05.928]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:05.928]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:05.928]                     .init = FALSE)
[10:33:05.928]                 }
[10:33:05.928]             }
[10:33:05.928]         }
[10:33:05.928]     })
[10:33:05.928]     if (TRUE) {
[10:33:05.928]         base::sink(type = "output", split = FALSE)
[10:33:05.928]         if (TRUE) {
[10:33:05.928]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:05.928]         }
[10:33:05.928]         else {
[10:33:05.928]             ...future.result["stdout"] <- base::list(NULL)
[10:33:05.928]         }
[10:33:05.928]         base::close(...future.stdout)
[10:33:05.928]         ...future.stdout <- NULL
[10:33:05.928]     }
[10:33:05.928]     ...future.result$conditions <- ...future.conditions
[10:33:05.928]     ...future.result$finished <- base::Sys.time()
[10:33:05.928]     ...future.result
[10:33:05.928] }
[10:33:05.983] MultisessionFuture started
[10:33:05.983] - Launch lazy future ... done
[10:33:05.983] run() for ‘MultisessionFuture’ ... done
> 
> ## Resolve future #2 (frees up background process #2)
> message(sprintf("b = %s\n", sQuote(b)))
[10:33:05.984] result() for ClusterFuture ...
[10:33:05.984] receiveMessageFromWorker() for ClusterFuture ...
[10:33:05.984] - Validating connection of MultisessionFuture
[10:33:06.017] - received message: FutureResult
[10:33:06.017] - Received FutureResult
[10:33:06.017] - Erased future from FutureRegistry
[10:33:06.021] result() for ClusterFuture ...
[10:33:06.021] - result already collected: FutureResult
[10:33:06.021] result() for ClusterFuture ... done
[10:33:06.021] receiveMessageFromWorker() for ClusterFuture ... done
[10:33:06.021] result() for ClusterFuture ... done
[10:33:06.021] result() for ClusterFuture ...
[10:33:06.021] - result already collected: FutureResult
[10:33:06.021] result() for ClusterFuture ... done
b = ‘a’

> 
> ## Create future #3 (consumes background process #2)
> ## THIS IS THE TRICKY PART:
> ## Two globals are identified `env` and `b` and both are resolved.
> ## However, object `env[[b]]` (here element `a` of environment `env`)
> ## is not touched and therefore not resolved (since it is a future)
> ## unless environment `env` is resolved recursively. (Issue #49)
> y %<-% { env[[b]] }
Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[10:33:06.022] getGlobalsAndPackages() ...
[10:33:06.022] Searching for globals...
[10:33:06.026] - globals found: [4] ‘{’, ‘[[’, ‘env’, ‘b’
[10:33:06.026] Searching for globals ... DONE
[10:33:06.026] Resolving globals: TRUE
[10:33:06.026] Resolving any globals that are futures ...
[10:33:06.027] - globals: [4] ‘{’, ‘[[’, ‘env’, ‘b’
[10:33:06.027] Resolving any globals that are futures ... DONE
[10:33:06.027] Resolving futures part of globals (recursively) ...
[10:33:06.028] resolve() on list ...
[10:33:06.028]  recursive: 99
[10:33:06.028]  length: 2
[10:33:06.028]  elements: ‘env’, ‘b’
[10:33:06.029] resolve() on environment ...
[10:33:06.029]  recursive: 98
[10:33:06.029]  elements: [1] ‘.future_a’, ‘a’
[10:33:06.030] receiveMessageFromWorker() for ClusterFuture ...
[10:33:06.030] - Validating connection of MultisessionFuture
[10:33:06.030] - received message: FutureResult
[10:33:06.031] - Received FutureResult
[10:33:06.031] - Erased future from FutureRegistry
[10:33:06.031] result() for ClusterFuture ...
[10:33:06.031] - result already collected: FutureResult
[10:33:06.031] result() for ClusterFuture ... done
[10:33:06.031] receiveMessageFromWorker() for ClusterFuture ... done
[10:33:06.031] Future #1
[10:33:06.031] result() for ClusterFuture ...
[10:33:06.031] - result already collected: FutureResult
[10:33:06.031] result() for ClusterFuture ... done
[10:33:06.031] result() for ClusterFuture ...
[10:33:06.032] - result already collected: FutureResult
[10:33:06.032] result() for ClusterFuture ... done
[10:33:06.032] A MultisessionFuture was resolved
[10:33:06.032]  length: 0 (resolved future 1)
[10:33:06.032] resolve() on environment ... DONE
[10:33:06.032]  length: 1 (resolved future 1)
[10:33:06.032]  length: 0 (resolved future 2)
[10:33:06.032] resolve() on list ... DONE
[10:33:06.033] - globals: [2] ‘env’, ‘b’
[10:33:06.033] Resolving futures part of globals (recursively) ... DONE
[10:33:06.034] The total size of the 2 globals is 4.29 KiB (4392 bytes)
[10:33:06.034] The total size of the 2 globals exported for future expression (‘{; env[[b]]; }’) is 4.29 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘env’ (4.18 KiB of class ‘environment’) and ‘b’ (112 bytes of class ‘character’)
[10:33:06.034] - globals: [2] ‘env’, ‘b’
[10:33:06.034] 
[10:33:06.034] getGlobalsAndPackages() ... DONE
[10:33:06.035] run() for ‘Future’ ...
[10:33:06.035] - state: ‘created’
[10:33:06.035] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:33:06.046] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:33:06.046] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:33:06.046]   - Field: ‘node’
[10:33:06.046]   - Field: ‘label’
[10:33:06.046]   - Field: ‘local’
[10:33:06.046]   - Field: ‘owner’
[10:33:06.046]   - Field: ‘envir’
[10:33:06.046]   - Field: ‘workers’
[10:33:06.046]   - Field: ‘packages’
[10:33:06.046]   - Field: ‘gc’
[10:33:06.047]   - Field: ‘conditions’
[10:33:06.047]   - Field: ‘persistent’
[10:33:06.047]   - Field: ‘expr’
[10:33:06.047]   - Field: ‘uuid’
[10:33:06.047]   - Field: ‘seed’
[10:33:06.047]   - Field: ‘version’
[10:33:06.047]   - Field: ‘result’
[10:33:06.047]   - Field: ‘asynchronous’
[10:33:06.047]   - Field: ‘calls’
[10:33:06.047]   - Field: ‘globals’
[10:33:06.047]   - Field: ‘stdout’
[10:33:06.048]   - Field: ‘earlySignal’
[10:33:06.048]   - Field: ‘lazy’
[10:33:06.048]   - Field: ‘state’
[10:33:06.048] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:33:06.048] - Launch lazy future ...
[10:33:06.048] Packages needed by the future expression (n = 0): <none>
[10:33:06.048] Packages needed by future strategies (n = 0): <none>
[10:33:06.049] {
[10:33:06.049]     {
[10:33:06.049]         {
[10:33:06.049]             ...future.startTime <- base::Sys.time()
[10:33:06.049]             {
[10:33:06.049]                 {
[10:33:06.049]                   {
[10:33:06.049]                     {
[10:33:06.049]                       base::local({
[10:33:06.049]                         has_future <- base::requireNamespace("future", 
[10:33:06.049]                           quietly = TRUE)
[10:33:06.049]                         if (has_future) {
[10:33:06.049]                           ns <- base::getNamespace("future")
[10:33:06.049]                           version <- ns[[".package"]][["version"]]
[10:33:06.049]                           if (is.null(version)) 
[10:33:06.049]                             version <- utils::packageVersion("future")
[10:33:06.049]                         }
[10:33:06.049]                         else {
[10:33:06.049]                           version <- NULL
[10:33:06.049]                         }
[10:33:06.049]                         if (!has_future || version < "1.8.0") {
[10:33:06.049]                           info <- base::c(r_version = base::gsub("R version ", 
[10:33:06.049]                             "", base::R.version$version.string), 
[10:33:06.049]                             platform = base::sprintf("%s (%s-bit)", 
[10:33:06.049]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:06.049]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:06.049]                               "release", "version")], collapse = " "), 
[10:33:06.049]                             hostname = base::Sys.info()[["nodename"]])
[10:33:06.049]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:33:06.049]                             info)
[10:33:06.049]                           info <- base::paste(info, collapse = "; ")
[10:33:06.049]                           if (!has_future) {
[10:33:06.049]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:06.049]                               info)
[10:33:06.049]                           }
[10:33:06.049]                           else {
[10:33:06.049]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:06.049]                               info, version)
[10:33:06.049]                           }
[10:33:06.049]                           base::stop(msg)
[10:33:06.049]                         }
[10:33:06.049]                       })
[10:33:06.049]                     }
[10:33:06.049]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:33:06.049]                     base::options(mc.cores = 1L)
[10:33:06.049]                   }
[10:33:06.049]                   ...future.strategy.old <- future::plan("list")
[10:33:06.049]                   options(future.plan = NULL)
[10:33:06.049]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:06.049]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:33:06.049]                 }
[10:33:06.049]                 ...future.workdir <- getwd()
[10:33:06.049]             }
[10:33:06.049]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:06.049]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:06.049]         }
[10:33:06.049]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:33:06.049]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:06.049]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:33:06.049]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[10:33:06.049]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:06.049]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:06.049]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:06.049]             base::names(...future.oldOptions))
[10:33:06.049]     }
[10:33:06.049]     if (FALSE) {
[10:33:06.049]     }
[10:33:06.049]     else {
[10:33:06.049]         if (TRUE) {
[10:33:06.049]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:06.049]                 open = "w")
[10:33:06.049]         }
[10:33:06.049]         else {
[10:33:06.049]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:06.049]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:06.049]         }
[10:33:06.049]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:06.049]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:06.049]             base::sink(type = "output", split = FALSE)
[10:33:06.049]             base::close(...future.stdout)
[10:33:06.049]         }, add = TRUE)
[10:33:06.049]     }
[10:33:06.049]     ...future.frame <- base::sys.nframe()
[10:33:06.049]     ...future.conditions <- base::list()
[10:33:06.049]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:06.049]     if (FALSE) {
[10:33:06.049]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:06.049]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:06.049]     }
[10:33:06.049]     ...future.result <- base::tryCatch({
[10:33:06.049]         base::withCallingHandlers({
[10:33:06.049]             ...future.value <- base::withVisible(base::local({
[10:33:06.049]                 ...future.makeSendCondition <- base::local({
[10:33:06.049]                   sendCondition <- NULL
[10:33:06.049]                   function(frame = 1L) {
[10:33:06.049]                     if (is.function(sendCondition)) 
[10:33:06.049]                       return(sendCondition)
[10:33:06.049]                     ns <- getNamespace("parallel")
[10:33:06.049]                     if (exists("sendData", mode = "function", 
[10:33:06.049]                       envir = ns)) {
[10:33:06.049]                       parallel_sendData <- get("sendData", mode = "function", 
[10:33:06.049]                         envir = ns)
[10:33:06.049]                       envir <- sys.frame(frame)
[10:33:06.049]                       master <- NULL
[10:33:06.049]                       while (!identical(envir, .GlobalEnv) && 
[10:33:06.049]                         !identical(envir, emptyenv())) {
[10:33:06.049]                         if (exists("master", mode = "list", envir = envir, 
[10:33:06.049]                           inherits = FALSE)) {
[10:33:06.049]                           master <- get("master", mode = "list", 
[10:33:06.049]                             envir = envir, inherits = FALSE)
[10:33:06.049]                           if (inherits(master, c("SOCKnode", 
[10:33:06.049]                             "SOCK0node"))) {
[10:33:06.049]                             sendCondition <<- function(cond) {
[10:33:06.049]                               data <- list(type = "VALUE", value = cond, 
[10:33:06.049]                                 success = TRUE)
[10:33:06.049]                               parallel_sendData(master, data)
[10:33:06.049]                             }
[10:33:06.049]                             return(sendCondition)
[10:33:06.049]                           }
[10:33:06.049]                         }
[10:33:06.049]                         frame <- frame + 1L
[10:33:06.049]                         envir <- sys.frame(frame)
[10:33:06.049]                       }
[10:33:06.049]                     }
[10:33:06.049]                     sendCondition <<- function(cond) NULL
[10:33:06.049]                   }
[10:33:06.049]                 })
[10:33:06.049]                 withCallingHandlers({
[10:33:06.049]                   {
[10:33:06.049]                     env[[b]]
[10:33:06.049]                   }
[10:33:06.049]                 }, immediateCondition = function(cond) {
[10:33:06.049]                   sendCondition <- ...future.makeSendCondition()
[10:33:06.049]                   sendCondition(cond)
[10:33:06.049]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:06.049]                   {
[10:33:06.049]                     inherits <- base::inherits
[10:33:06.049]                     invokeRestart <- base::invokeRestart
[10:33:06.049]                     is.null <- base::is.null
[10:33:06.049]                     muffled <- FALSE
[10:33:06.049]                     if (inherits(cond, "message")) {
[10:33:06.049]                       muffled <- grepl(pattern, "muffleMessage")
[10:33:06.049]                       if (muffled) 
[10:33:06.049]                         invokeRestart("muffleMessage")
[10:33:06.049]                     }
[10:33:06.049]                     else if (inherits(cond, "warning")) {
[10:33:06.049]                       muffled <- grepl(pattern, "muffleWarning")
[10:33:06.049]                       if (muffled) 
[10:33:06.049]                         invokeRestart("muffleWarning")
[10:33:06.049]                     }
[10:33:06.049]                     else if (inherits(cond, "condition")) {
[10:33:06.049]                       if (!is.null(pattern)) {
[10:33:06.049]                         computeRestarts <- base::computeRestarts
[10:33:06.049]                         grepl <- base::grepl
[10:33:06.049]                         restarts <- computeRestarts(cond)
[10:33:06.049]                         for (restart in restarts) {
[10:33:06.049]                           name <- restart$name
[10:33:06.049]                           if (is.null(name)) 
[10:33:06.049]                             next
[10:33:06.049]                           if (!grepl(pattern, name)) 
[10:33:06.049]                             next
[10:33:06.049]                           invokeRestart(restart)
[10:33:06.049]                           muffled <- TRUE
[10:33:06.049]                           break
[10:33:06.049]                         }
[10:33:06.049]                       }
[10:33:06.049]                     }
[10:33:06.049]                     invisible(muffled)
[10:33:06.049]                   }
[10:33:06.049]                   muffleCondition(cond)
[10:33:06.049]                 })
[10:33:06.049]             }))
[10:33:06.049]             future::FutureResult(value = ...future.value$value, 
[10:33:06.049]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:06.049]                   ...future.rng), globalenv = if (FALSE) 
[10:33:06.049]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:06.049]                     ...future.globalenv.names))
[10:33:06.049]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:06.049]         }, condition = base::local({
[10:33:06.049]             c <- base::c
[10:33:06.049]             inherits <- base::inherits
[10:33:06.049]             invokeRestart <- base::invokeRestart
[10:33:06.049]             length <- base::length
[10:33:06.049]             list <- base::list
[10:33:06.049]             seq.int <- base::seq.int
[10:33:06.049]             signalCondition <- base::signalCondition
[10:33:06.049]             sys.calls <- base::sys.calls
[10:33:06.049]             `[[` <- base::`[[`
[10:33:06.049]             `+` <- base::`+`
[10:33:06.049]             `<<-` <- base::`<<-`
[10:33:06.049]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:06.049]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:06.049]                   3L)]
[10:33:06.049]             }
[10:33:06.049]             function(cond) {
[10:33:06.049]                 is_error <- inherits(cond, "error")
[10:33:06.049]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:06.049]                   NULL)
[10:33:06.049]                 if (is_error) {
[10:33:06.049]                   sessionInformation <- function() {
[10:33:06.049]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:06.049]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:06.049]                       search = base::search(), system = base::Sys.info())
[10:33:06.049]                   }
[10:33:06.049]                   ...future.conditions[[length(...future.conditions) + 
[10:33:06.049]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:06.049]                     cond$call), session = sessionInformation(), 
[10:33:06.049]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:06.049]                   signalCondition(cond)
[10:33:06.049]                 }
[10:33:06.049]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:06.049]                 "immediateCondition"))) {
[10:33:06.049]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:06.049]                   ...future.conditions[[length(...future.conditions) + 
[10:33:06.049]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:06.049]                   if (TRUE && !signal) {
[10:33:06.049]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:06.049]                     {
[10:33:06.049]                       inherits <- base::inherits
[10:33:06.049]                       invokeRestart <- base::invokeRestart
[10:33:06.049]                       is.null <- base::is.null
[10:33:06.049]                       muffled <- FALSE
[10:33:06.049]                       if (inherits(cond, "message")) {
[10:33:06.049]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:06.049]                         if (muffled) 
[10:33:06.049]                           invokeRestart("muffleMessage")
[10:33:06.049]                       }
[10:33:06.049]                       else if (inherits(cond, "warning")) {
[10:33:06.049]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:06.049]                         if (muffled) 
[10:33:06.049]                           invokeRestart("muffleWarning")
[10:33:06.049]                       }
[10:33:06.049]                       else if (inherits(cond, "condition")) {
[10:33:06.049]                         if (!is.null(pattern)) {
[10:33:06.049]                           computeRestarts <- base::computeRestarts
[10:33:06.049]                           grepl <- base::grepl
[10:33:06.049]                           restarts <- computeRestarts(cond)
[10:33:06.049]                           for (restart in restarts) {
[10:33:06.049]                             name <- restart$name
[10:33:06.049]                             if (is.null(name)) 
[10:33:06.049]                               next
[10:33:06.049]                             if (!grepl(pattern, name)) 
[10:33:06.049]                               next
[10:33:06.049]                             invokeRestart(restart)
[10:33:06.049]                             muffled <- TRUE
[10:33:06.049]                             break
[10:33:06.049]                           }
[10:33:06.049]                         }
[10:33:06.049]                       }
[10:33:06.049]                       invisible(muffled)
[10:33:06.049]                     }
[10:33:06.049]                     muffleCondition(cond, pattern = "^muffle")
[10:33:06.049]                   }
[10:33:06.049]                 }
[10:33:06.049]                 else {
[10:33:06.049]                   if (TRUE) {
[10:33:06.049]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:06.049]                     {
[10:33:06.049]                       inherits <- base::inherits
[10:33:06.049]                       invokeRestart <- base::invokeRestart
[10:33:06.049]                       is.null <- base::is.null
[10:33:06.049]                       muffled <- FALSE
[10:33:06.049]                       if (inherits(cond, "message")) {
[10:33:06.049]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:06.049]                         if (muffled) 
[10:33:06.049]                           invokeRestart("muffleMessage")
[10:33:06.049]                       }
[10:33:06.049]                       else if (inherits(cond, "warning")) {
[10:33:06.049]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:06.049]                         if (muffled) 
[10:33:06.049]                           invokeRestart("muffleWarning")
[10:33:06.049]                       }
[10:33:06.049]                       else if (inherits(cond, "condition")) {
[10:33:06.049]                         if (!is.null(pattern)) {
[10:33:06.049]                           computeRestarts <- base::computeRestarts
[10:33:06.049]                           grepl <- base::grepl
[10:33:06.049]                           restarts <- computeRestarts(cond)
[10:33:06.049]                           for (restart in restarts) {
[10:33:06.049]                             name <- restart$name
[10:33:06.049]                             if (is.null(name)) 
[10:33:06.049]                               next
[10:33:06.049]                             if (!grepl(pattern, name)) 
[10:33:06.049]                               next
[10:33:06.049]                             invokeRestart(restart)
[10:33:06.049]                             muffled <- TRUE
[10:33:06.049]                             break
[10:33:06.049]                           }
[10:33:06.049]                         }
[10:33:06.049]                       }
[10:33:06.049]                       invisible(muffled)
[10:33:06.049]                     }
[10:33:06.049]                     muffleCondition(cond, pattern = "^muffle")
[10:33:06.049]                   }
[10:33:06.049]                 }
[10:33:06.049]             }
[10:33:06.049]         }))
[10:33:06.049]     }, error = function(ex) {
[10:33:06.049]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:06.049]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:06.049]                 ...future.rng), started = ...future.startTime, 
[10:33:06.049]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:06.049]             version = "1.8"), class = "FutureResult")
[10:33:06.049]     }, finally = {
[10:33:06.049]         if (!identical(...future.workdir, getwd())) 
[10:33:06.049]             setwd(...future.workdir)
[10:33:06.049]         {
[10:33:06.049]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:06.049]                 ...future.oldOptions$nwarnings <- NULL
[10:33:06.049]             }
[10:33:06.049]             base::options(...future.oldOptions)
[10:33:06.049]             if (.Platform$OS.type == "windows") {
[10:33:06.049]                 old_names <- names(...future.oldEnvVars)
[10:33:06.049]                 envs <- base::Sys.getenv()
[10:33:06.049]                 names <- names(envs)
[10:33:06.049]                 common <- intersect(names, old_names)
[10:33:06.049]                 added <- setdiff(names, old_names)
[10:33:06.049]                 removed <- setdiff(old_names, names)
[10:33:06.049]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:06.049]                   envs[common]]
[10:33:06.049]                 NAMES <- toupper(changed)
[10:33:06.049]                 args <- list()
[10:33:06.049]                 for (kk in seq_along(NAMES)) {
[10:33:06.049]                   name <- changed[[kk]]
[10:33:06.049]                   NAME <- NAMES[[kk]]
[10:33:06.049]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:06.049]                     next
[10:33:06.049]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:06.049]                 }
[10:33:06.049]                 NAMES <- toupper(added)
[10:33:06.049]                 for (kk in seq_along(NAMES)) {
[10:33:06.049]                   name <- added[[kk]]
[10:33:06.049]                   NAME <- NAMES[[kk]]
[10:33:06.049]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:06.049]                     next
[10:33:06.049]                   args[[name]] <- ""
[10:33:06.049]                 }
[10:33:06.049]                 NAMES <- toupper(removed)
[10:33:06.049]                 for (kk in seq_along(NAMES)) {
[10:33:06.049]                   name <- removed[[kk]]
[10:33:06.049]                   NAME <- NAMES[[kk]]
[10:33:06.049]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:06.049]                     next
[10:33:06.049]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:06.049]                 }
[10:33:06.049]                 if (length(args) > 0) 
[10:33:06.049]                   base::do.call(base::Sys.setenv, args = args)
[10:33:06.049]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:06.049]             }
[10:33:06.049]             else {
[10:33:06.049]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:06.049]             }
[10:33:06.049]             {
[10:33:06.049]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:06.049]                   0L) {
[10:33:06.049]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:06.049]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:06.049]                   base::options(opts)
[10:33:06.049]                 }
[10:33:06.049]                 {
[10:33:06.049]                   {
[10:33:06.049]                     base::options(mc.cores = ...future.mc.cores.old)
[10:33:06.049]                     NULL
[10:33:06.049]                   }
[10:33:06.049]                   options(future.plan = NULL)
[10:33:06.049]                   if (is.na(NA_character_)) 
[10:33:06.049]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:06.049]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:06.049]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:06.049]                     .init = FALSE)
[10:33:06.049]                 }
[10:33:06.049]             }
[10:33:06.049]         }
[10:33:06.049]     })
[10:33:06.049]     if (TRUE) {
[10:33:06.049]         base::sink(type = "output", split = FALSE)
[10:33:06.049]         if (TRUE) {
[10:33:06.049]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:06.049]         }
[10:33:06.049]         else {
[10:33:06.049]             ...future.result["stdout"] <- base::list(NULL)
[10:33:06.049]         }
[10:33:06.049]         base::close(...future.stdout)
[10:33:06.049]         ...future.stdout <- NULL
[10:33:06.049]     }
[10:33:06.049]     ...future.result$conditions <- ...future.conditions
[10:33:06.049]     ...future.result$finished <- base::Sys.time()
[10:33:06.049]     ...future.result
[10:33:06.049] }
[10:33:06.051] Exporting 2 global objects (4.29 KiB) to cluster node #1 ...
[10:33:06.052] Exporting ‘env’ (4.18 KiB) to cluster node #1 ...
[10:33:06.062] Exporting ‘env’ (4.18 KiB) to cluster node #1 ... DONE
[10:33:06.062] Exporting ‘b’ (112 bytes) to cluster node #1 ...
[10:33:06.062] Exporting ‘b’ (112 bytes) to cluster node #1 ... DONE
[10:33:06.062] Exporting 2 global objects (4.29 KiB) to cluster node #1 ... DONE
[10:33:06.063] MultisessionFuture started
[10:33:06.063] - Launch lazy future ... done
[10:33:06.063] run() for ‘MultisessionFuture’ ... done
> 
> ## Resolve future #3
> message(sprintf("y = %s\n", y))
[10:33:06.063] result() for ClusterFuture ...
[10:33:06.063] receiveMessageFromWorker() for ClusterFuture ...
[10:33:06.064] - Validating connection of MultisessionFuture
[10:33:06.107] - received message: FutureResult
[10:33:06.108] - Received FutureResult
[10:33:06.108] - Erased future from FutureRegistry
[10:33:06.108] result() for ClusterFuture ...
[10:33:06.108] - result already collected: FutureResult
[10:33:06.108] result() for ClusterFuture ... done
[10:33:06.108] receiveMessageFromWorker() for ClusterFuture ... done
[10:33:06.108] result() for ClusterFuture ... done
[10:33:06.108] result() for ClusterFuture ...
[10:33:06.108] - result already collected: FutureResult
[10:33:06.108] result() for ClusterFuture ... done
y = 5

> 
> ## Resolve future #1 if not already done
> str(as.list(env))
[10:33:06.109] result() for ClusterFuture ...
[10:33:06.109] - result already collected: FutureResult
[10:33:06.109] result() for ClusterFuture ... done
[10:33:06.109] result() for ClusterFuture ...
[10:33:06.109] - result already collected: FutureResult
[10:33:06.109] result() for ClusterFuture ... done
List of 1
 $ a: num 5
> 
> ## Create future #4
> ## Since future #1 is resolved it will work at this point
> y %<-% { env[[b]] }
Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[10:33:06.110] getGlobalsAndPackages() ...
[10:33:06.110] Searching for globals...
[10:33:06.111] - globals found: [4] ‘{’, ‘[[’, ‘env’, ‘b’
[10:33:06.111] Searching for globals ... DONE
[10:33:06.112] Resolving globals: TRUE
[10:33:06.112] Resolving any globals that are futures ...
[10:33:06.112] - globals: [4] ‘{’, ‘[[’, ‘env’, ‘b’
[10:33:06.112] Resolving any globals that are futures ... DONE
[10:33:06.112] Resolving futures part of globals (recursively) ...
[10:33:06.112] resolve() on list ...
[10:33:06.113]  recursive: 99
[10:33:06.113]  length: 2
[10:33:06.113]  elements: ‘env’, ‘b’
[10:33:06.113] resolve() on environment ...
[10:33:06.113]  recursive: 98
[10:33:06.113]  elements: [1] ‘a’
[10:33:06.113]  length: 0 (resolved future 1)
[10:33:06.114] resolve() on environment ... DONE
[10:33:06.114]  length: 1 (resolved future 1)
[10:33:06.114]  length: 0 (resolved future 2)
[10:33:06.114] resolve() on list ... DONE
[10:33:06.114] - globals: [2] ‘env’, ‘b’
[10:33:06.114] Resolving futures part of globals (recursively) ... DONE
[10:33:06.114] The total size of the 2 globals is 168 bytes (168 bytes)
[10:33:06.115] The total size of the 2 globals exported for future expression (‘{; env[[b]]; }’) is 168 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘b’ (112 bytes of class ‘character’) and ‘env’ (56 bytes of class ‘environment’)
[10:33:06.115] - globals: [2] ‘env’, ‘b’
[10:33:06.115] 
[10:33:06.115] getGlobalsAndPackages() ... DONE
[10:33:06.115] run() for ‘Future’ ...
[10:33:06.115] - state: ‘created’
[10:33:06.116] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:33:06.127] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:33:06.127] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:33:06.127]   - Field: ‘node’
[10:33:06.127]   - Field: ‘label’
[10:33:06.127]   - Field: ‘local’
[10:33:06.128]   - Field: ‘owner’
[10:33:06.128]   - Field: ‘envir’
[10:33:06.128]   - Field: ‘workers’
[10:33:06.128]   - Field: ‘packages’
[10:33:06.128]   - Field: ‘gc’
[10:33:06.128]   - Field: ‘conditions’
[10:33:06.128]   - Field: ‘persistent’
[10:33:06.128]   - Field: ‘expr’
[10:33:06.128]   - Field: ‘uuid’
[10:33:06.128]   - Field: ‘seed’
[10:33:06.128]   - Field: ‘version’
[10:33:06.129]   - Field: ‘result’
[10:33:06.129]   - Field: ‘asynchronous’
[10:33:06.129]   - Field: ‘calls’
[10:33:06.129]   - Field: ‘globals’
[10:33:06.129]   - Field: ‘stdout’
[10:33:06.129]   - Field: ‘earlySignal’
[10:33:06.129]   - Field: ‘lazy’
[10:33:06.129]   - Field: ‘state’
[10:33:06.129] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:33:06.129] - Launch lazy future ...
[10:33:06.130] Packages needed by the future expression (n = 0): <none>
[10:33:06.130] Packages needed by future strategies (n = 0): <none>
[10:33:06.130] {
[10:33:06.130]     {
[10:33:06.130]         {
[10:33:06.130]             ...future.startTime <- base::Sys.time()
[10:33:06.130]             {
[10:33:06.130]                 {
[10:33:06.130]                   {
[10:33:06.130]                     {
[10:33:06.130]                       base::local({
[10:33:06.130]                         has_future <- base::requireNamespace("future", 
[10:33:06.130]                           quietly = TRUE)
[10:33:06.130]                         if (has_future) {
[10:33:06.130]                           ns <- base::getNamespace("future")
[10:33:06.130]                           version <- ns[[".package"]][["version"]]
[10:33:06.130]                           if (is.null(version)) 
[10:33:06.130]                             version <- utils::packageVersion("future")
[10:33:06.130]                         }
[10:33:06.130]                         else {
[10:33:06.130]                           version <- NULL
[10:33:06.130]                         }
[10:33:06.130]                         if (!has_future || version < "1.8.0") {
[10:33:06.130]                           info <- base::c(r_version = base::gsub("R version ", 
[10:33:06.130]                             "", base::R.version$version.string), 
[10:33:06.130]                             platform = base::sprintf("%s (%s-bit)", 
[10:33:06.130]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:06.130]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:06.130]                               "release", "version")], collapse = " "), 
[10:33:06.130]                             hostname = base::Sys.info()[["nodename"]])
[10:33:06.130]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:33:06.130]                             info)
[10:33:06.130]                           info <- base::paste(info, collapse = "; ")
[10:33:06.130]                           if (!has_future) {
[10:33:06.130]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:06.130]                               info)
[10:33:06.130]                           }
[10:33:06.130]                           else {
[10:33:06.130]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:06.130]                               info, version)
[10:33:06.130]                           }
[10:33:06.130]                           base::stop(msg)
[10:33:06.130]                         }
[10:33:06.130]                       })
[10:33:06.130]                     }
[10:33:06.130]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:33:06.130]                     base::options(mc.cores = 1L)
[10:33:06.130]                   }
[10:33:06.130]                   ...future.strategy.old <- future::plan("list")
[10:33:06.130]                   options(future.plan = NULL)
[10:33:06.130]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:06.130]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:33:06.130]                 }
[10:33:06.130]                 ...future.workdir <- getwd()
[10:33:06.130]             }
[10:33:06.130]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:06.130]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:06.130]         }
[10:33:06.130]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:33:06.130]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:06.130]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:33:06.130]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[10:33:06.130]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:06.130]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:06.130]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:06.130]             base::names(...future.oldOptions))
[10:33:06.130]     }
[10:33:06.130]     if (FALSE) {
[10:33:06.130]     }
[10:33:06.130]     else {
[10:33:06.130]         if (TRUE) {
[10:33:06.130]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:06.130]                 open = "w")
[10:33:06.130]         }
[10:33:06.130]         else {
[10:33:06.130]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:06.130]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:06.130]         }
[10:33:06.130]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:06.130]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:06.130]             base::sink(type = "output", split = FALSE)
[10:33:06.130]             base::close(...future.stdout)
[10:33:06.130]         }, add = TRUE)
[10:33:06.130]     }
[10:33:06.130]     ...future.frame <- base::sys.nframe()
[10:33:06.130]     ...future.conditions <- base::list()
[10:33:06.130]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:06.130]     if (FALSE) {
[10:33:06.130]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:06.130]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:06.130]     }
[10:33:06.130]     ...future.result <- base::tryCatch({
[10:33:06.130]         base::withCallingHandlers({
[10:33:06.130]             ...future.value <- base::withVisible(base::local({
[10:33:06.130]                 ...future.makeSendCondition <- base::local({
[10:33:06.130]                   sendCondition <- NULL
[10:33:06.130]                   function(frame = 1L) {
[10:33:06.130]                     if (is.function(sendCondition)) 
[10:33:06.130]                       return(sendCondition)
[10:33:06.130]                     ns <- getNamespace("parallel")
[10:33:06.130]                     if (exists("sendData", mode = "function", 
[10:33:06.130]                       envir = ns)) {
[10:33:06.130]                       parallel_sendData <- get("sendData", mode = "function", 
[10:33:06.130]                         envir = ns)
[10:33:06.130]                       envir <- sys.frame(frame)
[10:33:06.130]                       master <- NULL
[10:33:06.130]                       while (!identical(envir, .GlobalEnv) && 
[10:33:06.130]                         !identical(envir, emptyenv())) {
[10:33:06.130]                         if (exists("master", mode = "list", envir = envir, 
[10:33:06.130]                           inherits = FALSE)) {
[10:33:06.130]                           master <- get("master", mode = "list", 
[10:33:06.130]                             envir = envir, inherits = FALSE)
[10:33:06.130]                           if (inherits(master, c("SOCKnode", 
[10:33:06.130]                             "SOCK0node"))) {
[10:33:06.130]                             sendCondition <<- function(cond) {
[10:33:06.130]                               data <- list(type = "VALUE", value = cond, 
[10:33:06.130]                                 success = TRUE)
[10:33:06.130]                               parallel_sendData(master, data)
[10:33:06.130]                             }
[10:33:06.130]                             return(sendCondition)
[10:33:06.130]                           }
[10:33:06.130]                         }
[10:33:06.130]                         frame <- frame + 1L
[10:33:06.130]                         envir <- sys.frame(frame)
[10:33:06.130]                       }
[10:33:06.130]                     }
[10:33:06.130]                     sendCondition <<- function(cond) NULL
[10:33:06.130]                   }
[10:33:06.130]                 })
[10:33:06.130]                 withCallingHandlers({
[10:33:06.130]                   {
[10:33:06.130]                     env[[b]]
[10:33:06.130]                   }
[10:33:06.130]                 }, immediateCondition = function(cond) {
[10:33:06.130]                   sendCondition <- ...future.makeSendCondition()
[10:33:06.130]                   sendCondition(cond)
[10:33:06.130]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:06.130]                   {
[10:33:06.130]                     inherits <- base::inherits
[10:33:06.130]                     invokeRestart <- base::invokeRestart
[10:33:06.130]                     is.null <- base::is.null
[10:33:06.130]                     muffled <- FALSE
[10:33:06.130]                     if (inherits(cond, "message")) {
[10:33:06.130]                       muffled <- grepl(pattern, "muffleMessage")
[10:33:06.130]                       if (muffled) 
[10:33:06.130]                         invokeRestart("muffleMessage")
[10:33:06.130]                     }
[10:33:06.130]                     else if (inherits(cond, "warning")) {
[10:33:06.130]                       muffled <- grepl(pattern, "muffleWarning")
[10:33:06.130]                       if (muffled) 
[10:33:06.130]                         invokeRestart("muffleWarning")
[10:33:06.130]                     }
[10:33:06.130]                     else if (inherits(cond, "condition")) {
[10:33:06.130]                       if (!is.null(pattern)) {
[10:33:06.130]                         computeRestarts <- base::computeRestarts
[10:33:06.130]                         grepl <- base::grepl
[10:33:06.130]                         restarts <- computeRestarts(cond)
[10:33:06.130]                         for (restart in restarts) {
[10:33:06.130]                           name <- restart$name
[10:33:06.130]                           if (is.null(name)) 
[10:33:06.130]                             next
[10:33:06.130]                           if (!grepl(pattern, name)) 
[10:33:06.130]                             next
[10:33:06.130]                           invokeRestart(restart)
[10:33:06.130]                           muffled <- TRUE
[10:33:06.130]                           break
[10:33:06.130]                         }
[10:33:06.130]                       }
[10:33:06.130]                     }
[10:33:06.130]                     invisible(muffled)
[10:33:06.130]                   }
[10:33:06.130]                   muffleCondition(cond)
[10:33:06.130]                 })
[10:33:06.130]             }))
[10:33:06.130]             future::FutureResult(value = ...future.value$value, 
[10:33:06.130]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:06.130]                   ...future.rng), globalenv = if (FALSE) 
[10:33:06.130]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:06.130]                     ...future.globalenv.names))
[10:33:06.130]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:06.130]         }, condition = base::local({
[10:33:06.130]             c <- base::c
[10:33:06.130]             inherits <- base::inherits
[10:33:06.130]             invokeRestart <- base::invokeRestart
[10:33:06.130]             length <- base::length
[10:33:06.130]             list <- base::list
[10:33:06.130]             seq.int <- base::seq.int
[10:33:06.130]             signalCondition <- base::signalCondition
[10:33:06.130]             sys.calls <- base::sys.calls
[10:33:06.130]             `[[` <- base::`[[`
[10:33:06.130]             `+` <- base::`+`
[10:33:06.130]             `<<-` <- base::`<<-`
[10:33:06.130]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:06.130]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:06.130]                   3L)]
[10:33:06.130]             }
[10:33:06.130]             function(cond) {
[10:33:06.130]                 is_error <- inherits(cond, "error")
[10:33:06.130]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:06.130]                   NULL)
[10:33:06.130]                 if (is_error) {
[10:33:06.130]                   sessionInformation <- function() {
[10:33:06.130]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:06.130]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:06.130]                       search = base::search(), system = base::Sys.info())
[10:33:06.130]                   }
[10:33:06.130]                   ...future.conditions[[length(...future.conditions) + 
[10:33:06.130]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:06.130]                     cond$call), session = sessionInformation(), 
[10:33:06.130]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:06.130]                   signalCondition(cond)
[10:33:06.130]                 }
[10:33:06.130]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:06.130]                 "immediateCondition"))) {
[10:33:06.130]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:06.130]                   ...future.conditions[[length(...future.conditions) + 
[10:33:06.130]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:06.130]                   if (TRUE && !signal) {
[10:33:06.130]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:06.130]                     {
[10:33:06.130]                       inherits <- base::inherits
[10:33:06.130]                       invokeRestart <- base::invokeRestart
[10:33:06.130]                       is.null <- base::is.null
[10:33:06.130]                       muffled <- FALSE
[10:33:06.130]                       if (inherits(cond, "message")) {
[10:33:06.130]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:06.130]                         if (muffled) 
[10:33:06.130]                           invokeRestart("muffleMessage")
[10:33:06.130]                       }
[10:33:06.130]                       else if (inherits(cond, "warning")) {
[10:33:06.130]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:06.130]                         if (muffled) 
[10:33:06.130]                           invokeRestart("muffleWarning")
[10:33:06.130]                       }
[10:33:06.130]                       else if (inherits(cond, "condition")) {
[10:33:06.130]                         if (!is.null(pattern)) {
[10:33:06.130]                           computeRestarts <- base::computeRestarts
[10:33:06.130]                           grepl <- base::grepl
[10:33:06.130]                           restarts <- computeRestarts(cond)
[10:33:06.130]                           for (restart in restarts) {
[10:33:06.130]                             name <- restart$name
[10:33:06.130]                             if (is.null(name)) 
[10:33:06.130]                               next
[10:33:06.130]                             if (!grepl(pattern, name)) 
[10:33:06.130]                               next
[10:33:06.130]                             invokeRestart(restart)
[10:33:06.130]                             muffled <- TRUE
[10:33:06.130]                             break
[10:33:06.130]                           }
[10:33:06.130]                         }
[10:33:06.130]                       }
[10:33:06.130]                       invisible(muffled)
[10:33:06.130]                     }
[10:33:06.130]                     muffleCondition(cond, pattern = "^muffle")
[10:33:06.130]                   }
[10:33:06.130]                 }
[10:33:06.130]                 else {
[10:33:06.130]                   if (TRUE) {
[10:33:06.130]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:06.130]                     {
[10:33:06.130]                       inherits <- base::inherits
[10:33:06.130]                       invokeRestart <- base::invokeRestart
[10:33:06.130]                       is.null <- base::is.null
[10:33:06.130]                       muffled <- FALSE
[10:33:06.130]                       if (inherits(cond, "message")) {
[10:33:06.130]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:06.130]                         if (muffled) 
[10:33:06.130]                           invokeRestart("muffleMessage")
[10:33:06.130]                       }
[10:33:06.130]                       else if (inherits(cond, "warning")) {
[10:33:06.130]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:06.130]                         if (muffled) 
[10:33:06.130]                           invokeRestart("muffleWarning")
[10:33:06.130]                       }
[10:33:06.130]                       else if (inherits(cond, "condition")) {
[10:33:06.130]                         if (!is.null(pattern)) {
[10:33:06.130]                           computeRestarts <- base::computeRestarts
[10:33:06.130]                           grepl <- base::grepl
[10:33:06.130]                           restarts <- computeRestarts(cond)
[10:33:06.130]                           for (restart in restarts) {
[10:33:06.130]                             name <- restart$name
[10:33:06.130]                             if (is.null(name)) 
[10:33:06.130]                               next
[10:33:06.130]                             if (!grepl(pattern, name)) 
[10:33:06.130]                               next
[10:33:06.130]                             invokeRestart(restart)
[10:33:06.130]                             muffled <- TRUE
[10:33:06.130]                             break
[10:33:06.130]                           }
[10:33:06.130]                         }
[10:33:06.130]                       }
[10:33:06.130]                       invisible(muffled)
[10:33:06.130]                     }
[10:33:06.130]                     muffleCondition(cond, pattern = "^muffle")
[10:33:06.130]                   }
[10:33:06.130]                 }
[10:33:06.130]             }
[10:33:06.130]         }))
[10:33:06.130]     }, error = function(ex) {
[10:33:06.130]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:06.130]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:06.130]                 ...future.rng), started = ...future.startTime, 
[10:33:06.130]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:06.130]             version = "1.8"), class = "FutureResult")
[10:33:06.130]     }, finally = {
[10:33:06.130]         if (!identical(...future.workdir, getwd())) 
[10:33:06.130]             setwd(...future.workdir)
[10:33:06.130]         {
[10:33:06.130]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:06.130]                 ...future.oldOptions$nwarnings <- NULL
[10:33:06.130]             }
[10:33:06.130]             base::options(...future.oldOptions)
[10:33:06.130]             if (.Platform$OS.type == "windows") {
[10:33:06.130]                 old_names <- names(...future.oldEnvVars)
[10:33:06.130]                 envs <- base::Sys.getenv()
[10:33:06.130]                 names <- names(envs)
[10:33:06.130]                 common <- intersect(names, old_names)
[10:33:06.130]                 added <- setdiff(names, old_names)
[10:33:06.130]                 removed <- setdiff(old_names, names)
[10:33:06.130]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:06.130]                   envs[common]]
[10:33:06.130]                 NAMES <- toupper(changed)
[10:33:06.130]                 args <- list()
[10:33:06.130]                 for (kk in seq_along(NAMES)) {
[10:33:06.130]                   name <- changed[[kk]]
[10:33:06.130]                   NAME <- NAMES[[kk]]
[10:33:06.130]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:06.130]                     next
[10:33:06.130]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:06.130]                 }
[10:33:06.130]                 NAMES <- toupper(added)
[10:33:06.130]                 for (kk in seq_along(NAMES)) {
[10:33:06.130]                   name <- added[[kk]]
[10:33:06.130]                   NAME <- NAMES[[kk]]
[10:33:06.130]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:06.130]                     next
[10:33:06.130]                   args[[name]] <- ""
[10:33:06.130]                 }
[10:33:06.130]                 NAMES <- toupper(removed)
[10:33:06.130]                 for (kk in seq_along(NAMES)) {
[10:33:06.130]                   name <- removed[[kk]]
[10:33:06.130]                   NAME <- NAMES[[kk]]
[10:33:06.130]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:06.130]                     next
[10:33:06.130]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:06.130]                 }
[10:33:06.130]                 if (length(args) > 0) 
[10:33:06.130]                   base::do.call(base::Sys.setenv, args = args)
[10:33:06.130]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:06.130]             }
[10:33:06.130]             else {
[10:33:06.130]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:06.130]             }
[10:33:06.130]             {
[10:33:06.130]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:06.130]                   0L) {
[10:33:06.130]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:06.130]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:06.130]                   base::options(opts)
[10:33:06.130]                 }
[10:33:06.130]                 {
[10:33:06.130]                   {
[10:33:06.130]                     base::options(mc.cores = ...future.mc.cores.old)
[10:33:06.130]                     NULL
[10:33:06.130]                   }
[10:33:06.130]                   options(future.plan = NULL)
[10:33:06.130]                   if (is.na(NA_character_)) 
[10:33:06.130]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:06.130]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:06.130]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:06.130]                     .init = FALSE)
[10:33:06.130]                 }
[10:33:06.130]             }
[10:33:06.130]         }
[10:33:06.130]     })
[10:33:06.130]     if (TRUE) {
[10:33:06.130]         base::sink(type = "output", split = FALSE)
[10:33:06.130]         if (TRUE) {
[10:33:06.130]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:06.130]         }
[10:33:06.130]         else {
[10:33:06.130]             ...future.result["stdout"] <- base::list(NULL)
[10:33:06.130]         }
[10:33:06.130]         base::close(...future.stdout)
[10:33:06.130]         ...future.stdout <- NULL
[10:33:06.130]     }
[10:33:06.130]     ...future.result$conditions <- ...future.conditions
[10:33:06.130]     ...future.result$finished <- base::Sys.time()
[10:33:06.130]     ...future.result
[10:33:06.130] }
[10:33:06.133] Exporting 2 global objects (168 bytes) to cluster node #1 ...
[10:33:06.133] Exporting ‘env’ (56 bytes) to cluster node #1 ...
[10:33:06.133] Exporting ‘env’ (56 bytes) to cluster node #1 ... DONE
[10:33:06.133] Exporting ‘b’ (112 bytes) to cluster node #1 ...
[10:33:06.134] Exporting ‘b’ (112 bytes) to cluster node #1 ... DONE
[10:33:06.134] Exporting 2 global objects (168 bytes) to cluster node #1 ... DONE
[10:33:06.134] MultisessionFuture started
[10:33:06.134] - Launch lazy future ... done
[10:33:06.134] run() for ‘MultisessionFuture’ ... done
> ## Resolve future #4
> message(sprintf("y = %s\n", y))
[10:33:06.135] result() for ClusterFuture ...
[10:33:06.135] receiveMessageFromWorker() for ClusterFuture ...
[10:33:06.135] - Validating connection of MultisessionFuture
[10:33:06.178] - received message: FutureResult
[10:33:06.179] - Received FutureResult
[10:33:06.179] - Erased future from FutureRegistry
[10:33:06.179] result() for ClusterFuture ...
[10:33:06.179] - result already collected: FutureResult
[10:33:06.179] result() for ClusterFuture ... done
[10:33:06.179] receiveMessageFromWorker() for ClusterFuture ... done
[10:33:06.179] result() for ClusterFuture ... done
[10:33:06.179] result() for ClusterFuture ...
[10:33:06.179] - result already collected: FutureResult
[10:33:06.180] result() for ClusterFuture ... done
y = 5

> 
> message("*** Tricky use cases related to globals (part 2) ... DONE")
*** Tricky use cases related to globals (part 2) ... DONE
> 
> ## Cleanup
> setTimeLimit()
> source("incl/end.R")
[10:33:06.180] plan(): Setting new future strategy stack:
[10:33:06.180] List of future strategies:
[10:33:06.180] 1. FutureStrategy:
[10:33:06.180]    - args: function (..., envir = parent.frame())
[10:33:06.180]    - tweaked: FALSE
[10:33:06.180]    - call: future::plan(oplan)
[10:33:06.181] plan(): nbrOfWorkers() = 1
> 
