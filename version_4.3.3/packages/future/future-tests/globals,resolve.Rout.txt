
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[13:36:49.082] plan(): Setting new future strategy stack:
[13:36:49.083] List of future strategies:
[13:36:49.083] 1. sequential:
[13:36:49.083]    - args: function (..., envir = parent.frame())
[13:36:49.083]    - tweaked: FALSE
[13:36:49.083]    - call: future::plan("sequential")
[13:36:49.097] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> oopts <- c(oopts, options(future.globals.resolve = TRUE))
> setTimeLimit(cpu = 10, elapsed = 10, transient = TRUE)
> 
> message("*** Tricky use cases related to globals (part 2) ...")
*** Tricky use cases related to globals (part 2) ...
> 
> ## Allow for two background processes
> plan(multisession, workers = 2L)
[13:36:49.111] plan(): Setting new future strategy stack:
[13:36:49.111] List of future strategies:
[13:36:49.111] 1. multisession:
[13:36:49.111]    - args: function (..., workers = 2L, envir = parent.frame())
[13:36:49.111]    - tweaked: TRUE
[13:36:49.111]    - call: plan(multisession, workers = 2L)
[13:36:49.122] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:36:49.122] multisession:
[13:36:49.122] - args: function (..., workers = 2L, envir = parent.frame())
[13:36:49.122] - tweaked: TRUE
[13:36:49.122] - call: plan(multisession, workers = 2L)
Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[13:36:49.124] getGlobalsAndPackages() ...
[13:36:49.124] Not searching for globals
[13:36:49.124] - globals: [0] <none>
[13:36:49.124] getGlobalsAndPackages() ... DONE
[13:36:49.125] [local output] makeClusterPSOCK() ...
[13:36:49.154] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:36:49.155] [local output] Base port: 11331
[13:36:49.155] [local output] Getting setup options for 2 cluster nodes ...
[13:36:49.155] [local output]  - Node 1 of 2 ...
[13:36:49.156] [local output] localMachine=TRUE => revtunnel=FALSE

[13:36:49.156] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpoO2xIk/worker.rank=1.parallelly.parent=84369.149914070c65.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpoO2xIk/worker.rank=1.parallelly.parent=84369.149914070c65.pid")'’
[13:36:49.344] - Possible to infer worker's PID: TRUE
[13:36:49.344] [local output] Rscript port: 11331

[13:36:49.344] [local output]  - Node 2 of 2 ...
[13:36:49.345] [local output] localMachine=TRUE => revtunnel=FALSE

[13:36:49.345] [local output] Rscript port: 11331

[13:36:49.345] [local output] Getting setup options for 2 cluster nodes ... done
[13:36:49.346] [local output]  - Parallel setup requested for some PSOCK nodes
[13:36:49.346] [local output] Setting up PSOCK nodes in parallel
[13:36:49.346] List of 36
[13:36:49.346]  $ worker          : chr "localhost"
[13:36:49.346]   ..- attr(*, "localhost")= logi TRUE
[13:36:49.346]  $ master          : chr "localhost"
[13:36:49.346]  $ port            : int 11331
[13:36:49.346]  $ connectTimeout  : num 120
[13:36:49.346]  $ timeout         : num 2592000
[13:36:49.346]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:36:49.346]  $ homogeneous     : logi TRUE
[13:36:49.346]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:36:49.346]  $ rscript_envs    : NULL
[13:36:49.346]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:36:49.346]  $ rscript_startup : NULL
[13:36:49.346]  $ rscript_sh      : chr "sh"
[13:36:49.346]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:36:49.346]  $ methods         : logi TRUE
[13:36:49.346]  $ socketOptions   : chr "no-delay"
[13:36:49.346]  $ useXDR          : logi FALSE
[13:36:49.346]  $ outfile         : chr "/dev/null"
[13:36:49.346]  $ renice          : int NA
[13:36:49.346]  $ rshcmd          : NULL
[13:36:49.346]  $ user            : chr(0) 
[13:36:49.346]  $ revtunnel       : logi FALSE
[13:36:49.346]  $ rshlogfile      : NULL
[13:36:49.346]  $ rshopts         : chr(0) 
[13:36:49.346]  $ rank            : int 1
[13:36:49.346]  $ manual          : logi FALSE
[13:36:49.346]  $ dryrun          : logi FALSE
[13:36:49.346]  $ quiet           : logi FALSE
[13:36:49.346]  $ setup_strategy  : chr "parallel"
[13:36:49.346]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:36:49.346]  $ pidfile         : chr "/tmp/RtmpoO2xIk/worker.rank=1.parallelly.parent=84369.149914070c65.pid"
[13:36:49.346]  $ rshcmd_label    : NULL
[13:36:49.346]  $ rsh_call        : NULL
[13:36:49.346]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:36:49.346]  $ localMachine    : logi TRUE
[13:36:49.346]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:36:49.346]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:36:49.346]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:36:49.346]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:36:49.346]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:36:49.346]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:36:49.346]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:36:49.346]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:36:49.346]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:36:49.346]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:36:49.346]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:36:49.346]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:36:49.346]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:36:49.346]  $ arguments       :List of 28
[13:36:49.346]   ..$ worker          : chr "localhost"
[13:36:49.346]   ..$ master          : NULL
[13:36:49.346]   ..$ port            : int 11331
[13:36:49.346]   ..$ connectTimeout  : num 120
[13:36:49.346]   ..$ timeout         : num 2592000
[13:36:49.346]   ..$ rscript         : NULL
[13:36:49.346]   ..$ homogeneous     : NULL
[13:36:49.346]   ..$ rscript_args    : NULL
[13:36:49.346]   ..$ rscript_envs    : NULL
[13:36:49.346]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:36:49.346]   ..$ rscript_startup : NULL
[13:36:49.346]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:36:49.346]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:36:49.346]   ..$ methods         : logi TRUE
[13:36:49.346]   ..$ socketOptions   : chr "no-delay"
[13:36:49.346]   ..$ useXDR          : logi FALSE
[13:36:49.346]   ..$ outfile         : chr "/dev/null"
[13:36:49.346]   ..$ renice          : int NA
[13:36:49.346]   ..$ rshcmd          : NULL
[13:36:49.346]   ..$ user            : NULL
[13:36:49.346]   ..$ revtunnel       : logi NA
[13:36:49.346]   ..$ rshlogfile      : NULL
[13:36:49.346]   ..$ rshopts         : NULL
[13:36:49.346]   ..$ rank            : int 1
[13:36:49.346]   ..$ manual          : logi FALSE
[13:36:49.346]   ..$ dryrun          : logi FALSE
[13:36:49.346]   ..$ quiet           : logi FALSE
[13:36:49.346]   ..$ setup_strategy  : chr "parallel"
[13:36:49.346]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:36:49.365] [local output] System call to launch all workers:
[13:36:49.365] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpoO2xIk/worker.rank=1.parallelly.parent=84369.149914070c65.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11331 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:36:49.366] [local output] Starting PSOCK main server
[13:36:49.371] [local output] Workers launched
[13:36:49.371] [local output] Waiting for workers to connect back
[13:36:49.371]  - [local output] 0 workers out of 2 ready
[13:36:49.617]  - [local output] 0 workers out of 2 ready
[13:36:49.618]  - [local output] 1 workers out of 2 ready
[13:36:49.618]  - [local output] 1 workers out of 2 ready
[13:36:49.619]  - [local output] 2 workers out of 2 ready
[13:36:49.619] [local output] Launching of workers completed
[13:36:49.619] [local output] Collecting session information from workers
[13:36:49.620] [local output]  - Worker #1 of 2
[13:36:49.620] [local output]  - Worker #2 of 2
[13:36:49.620] [local output] makeClusterPSOCK() ... done
[13:36:49.634] Packages needed by the future expression (n = 0): <none>
[13:36:49.634] Packages needed by future strategies (n = 0): <none>
[13:36:49.635] {
[13:36:49.635]     {
[13:36:49.635]         {
[13:36:49.635]             ...future.startTime <- base::Sys.time()
[13:36:49.635]             {
[13:36:49.635]                 {
[13:36:49.635]                   {
[13:36:49.635]                     {
[13:36:49.635]                       base::local({
[13:36:49.635]                         has_future <- base::requireNamespace("future", 
[13:36:49.635]                           quietly = TRUE)
[13:36:49.635]                         if (has_future) {
[13:36:49.635]                           ns <- base::getNamespace("future")
[13:36:49.635]                           version <- ns[[".package"]][["version"]]
[13:36:49.635]                           if (is.null(version)) 
[13:36:49.635]                             version <- utils::packageVersion("future")
[13:36:49.635]                         }
[13:36:49.635]                         else {
[13:36:49.635]                           version <- NULL
[13:36:49.635]                         }
[13:36:49.635]                         if (!has_future || version < "1.8.0") {
[13:36:49.635]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:49.635]                             "", base::R.version$version.string), 
[13:36:49.635]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:49.635]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:49.635]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:49.635]                               "release", "version")], collapse = " "), 
[13:36:49.635]                             hostname = base::Sys.info()[["nodename"]])
[13:36:49.635]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:49.635]                             info)
[13:36:49.635]                           info <- base::paste(info, collapse = "; ")
[13:36:49.635]                           if (!has_future) {
[13:36:49.635]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:49.635]                               info)
[13:36:49.635]                           }
[13:36:49.635]                           else {
[13:36:49.635]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:49.635]                               info, version)
[13:36:49.635]                           }
[13:36:49.635]                           base::stop(msg)
[13:36:49.635]                         }
[13:36:49.635]                       })
[13:36:49.635]                     }
[13:36:49.635]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:49.635]                     base::options(mc.cores = 1L)
[13:36:49.635]                   }
[13:36:49.635]                   ...future.strategy.old <- future::plan("list")
[13:36:49.635]                   options(future.plan = NULL)
[13:36:49.635]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:49.635]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:49.635]                 }
[13:36:49.635]                 ...future.workdir <- getwd()
[13:36:49.635]             }
[13:36:49.635]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:49.635]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:49.635]         }
[13:36:49.635]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:49.635]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:49.635]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:49.635]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[13:36:49.635]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:49.635]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:49.635]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:49.635]             base::names(...future.oldOptions))
[13:36:49.635]     }
[13:36:49.635]     if (FALSE) {
[13:36:49.635]     }
[13:36:49.635]     else {
[13:36:49.635]         if (TRUE) {
[13:36:49.635]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:49.635]                 open = "w")
[13:36:49.635]         }
[13:36:49.635]         else {
[13:36:49.635]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:49.635]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:49.635]         }
[13:36:49.635]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:49.635]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:49.635]             base::sink(type = "output", split = FALSE)
[13:36:49.635]             base::close(...future.stdout)
[13:36:49.635]         }, add = TRUE)
[13:36:49.635]     }
[13:36:49.635]     ...future.frame <- base::sys.nframe()
[13:36:49.635]     ...future.conditions <- base::list()
[13:36:49.635]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:49.635]     if (FALSE) {
[13:36:49.635]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:49.635]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:49.635]     }
[13:36:49.635]     ...future.result <- base::tryCatch({
[13:36:49.635]         base::withCallingHandlers({
[13:36:49.635]             ...future.value <- base::withVisible(base::local({
[13:36:49.635]                 ...future.makeSendCondition <- base::local({
[13:36:49.635]                   sendCondition <- NULL
[13:36:49.635]                   function(frame = 1L) {
[13:36:49.635]                     if (is.function(sendCondition)) 
[13:36:49.635]                       return(sendCondition)
[13:36:49.635]                     ns <- getNamespace("parallel")
[13:36:49.635]                     if (exists("sendData", mode = "function", 
[13:36:49.635]                       envir = ns)) {
[13:36:49.635]                       parallel_sendData <- get("sendData", mode = "function", 
[13:36:49.635]                         envir = ns)
[13:36:49.635]                       envir <- sys.frame(frame)
[13:36:49.635]                       master <- NULL
[13:36:49.635]                       while (!identical(envir, .GlobalEnv) && 
[13:36:49.635]                         !identical(envir, emptyenv())) {
[13:36:49.635]                         if (exists("master", mode = "list", envir = envir, 
[13:36:49.635]                           inherits = FALSE)) {
[13:36:49.635]                           master <- get("master", mode = "list", 
[13:36:49.635]                             envir = envir, inherits = FALSE)
[13:36:49.635]                           if (inherits(master, c("SOCKnode", 
[13:36:49.635]                             "SOCK0node"))) {
[13:36:49.635]                             sendCondition <<- function(cond) {
[13:36:49.635]                               data <- list(type = "VALUE", value = cond, 
[13:36:49.635]                                 success = TRUE)
[13:36:49.635]                               parallel_sendData(master, data)
[13:36:49.635]                             }
[13:36:49.635]                             return(sendCondition)
[13:36:49.635]                           }
[13:36:49.635]                         }
[13:36:49.635]                         frame <- frame + 1L
[13:36:49.635]                         envir <- sys.frame(frame)
[13:36:49.635]                       }
[13:36:49.635]                     }
[13:36:49.635]                     sendCondition <<- function(cond) NULL
[13:36:49.635]                   }
[13:36:49.635]                 })
[13:36:49.635]                 withCallingHandlers({
[13:36:49.635]                   NA
[13:36:49.635]                 }, immediateCondition = function(cond) {
[13:36:49.635]                   sendCondition <- ...future.makeSendCondition()
[13:36:49.635]                   sendCondition(cond)
[13:36:49.635]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:49.635]                   {
[13:36:49.635]                     inherits <- base::inherits
[13:36:49.635]                     invokeRestart <- base::invokeRestart
[13:36:49.635]                     is.null <- base::is.null
[13:36:49.635]                     muffled <- FALSE
[13:36:49.635]                     if (inherits(cond, "message")) {
[13:36:49.635]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:49.635]                       if (muffled) 
[13:36:49.635]                         invokeRestart("muffleMessage")
[13:36:49.635]                     }
[13:36:49.635]                     else if (inherits(cond, "warning")) {
[13:36:49.635]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:49.635]                       if (muffled) 
[13:36:49.635]                         invokeRestart("muffleWarning")
[13:36:49.635]                     }
[13:36:49.635]                     else if (inherits(cond, "condition")) {
[13:36:49.635]                       if (!is.null(pattern)) {
[13:36:49.635]                         computeRestarts <- base::computeRestarts
[13:36:49.635]                         grepl <- base::grepl
[13:36:49.635]                         restarts <- computeRestarts(cond)
[13:36:49.635]                         for (restart in restarts) {
[13:36:49.635]                           name <- restart$name
[13:36:49.635]                           if (is.null(name)) 
[13:36:49.635]                             next
[13:36:49.635]                           if (!grepl(pattern, name)) 
[13:36:49.635]                             next
[13:36:49.635]                           invokeRestart(restart)
[13:36:49.635]                           muffled <- TRUE
[13:36:49.635]                           break
[13:36:49.635]                         }
[13:36:49.635]                       }
[13:36:49.635]                     }
[13:36:49.635]                     invisible(muffled)
[13:36:49.635]                   }
[13:36:49.635]                   muffleCondition(cond)
[13:36:49.635]                 })
[13:36:49.635]             }))
[13:36:49.635]             future::FutureResult(value = ...future.value$value, 
[13:36:49.635]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:49.635]                   ...future.rng), globalenv = if (FALSE) 
[13:36:49.635]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:49.635]                     ...future.globalenv.names))
[13:36:49.635]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:49.635]         }, condition = base::local({
[13:36:49.635]             c <- base::c
[13:36:49.635]             inherits <- base::inherits
[13:36:49.635]             invokeRestart <- base::invokeRestart
[13:36:49.635]             length <- base::length
[13:36:49.635]             list <- base::list
[13:36:49.635]             seq.int <- base::seq.int
[13:36:49.635]             signalCondition <- base::signalCondition
[13:36:49.635]             sys.calls <- base::sys.calls
[13:36:49.635]             `[[` <- base::`[[`
[13:36:49.635]             `+` <- base::`+`
[13:36:49.635]             `<<-` <- base::`<<-`
[13:36:49.635]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:49.635]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:49.635]                   3L)]
[13:36:49.635]             }
[13:36:49.635]             function(cond) {
[13:36:49.635]                 is_error <- inherits(cond, "error")
[13:36:49.635]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:49.635]                   NULL)
[13:36:49.635]                 if (is_error) {
[13:36:49.635]                   sessionInformation <- function() {
[13:36:49.635]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:49.635]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:49.635]                       search = base::search(), system = base::Sys.info())
[13:36:49.635]                   }
[13:36:49.635]                   ...future.conditions[[length(...future.conditions) + 
[13:36:49.635]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:49.635]                     cond$call), session = sessionInformation(), 
[13:36:49.635]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:49.635]                   signalCondition(cond)
[13:36:49.635]                 }
[13:36:49.635]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:49.635]                 "immediateCondition"))) {
[13:36:49.635]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:49.635]                   ...future.conditions[[length(...future.conditions) + 
[13:36:49.635]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:49.635]                   if (TRUE && !signal) {
[13:36:49.635]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:49.635]                     {
[13:36:49.635]                       inherits <- base::inherits
[13:36:49.635]                       invokeRestart <- base::invokeRestart
[13:36:49.635]                       is.null <- base::is.null
[13:36:49.635]                       muffled <- FALSE
[13:36:49.635]                       if (inherits(cond, "message")) {
[13:36:49.635]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:49.635]                         if (muffled) 
[13:36:49.635]                           invokeRestart("muffleMessage")
[13:36:49.635]                       }
[13:36:49.635]                       else if (inherits(cond, "warning")) {
[13:36:49.635]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:49.635]                         if (muffled) 
[13:36:49.635]                           invokeRestart("muffleWarning")
[13:36:49.635]                       }
[13:36:49.635]                       else if (inherits(cond, "condition")) {
[13:36:49.635]                         if (!is.null(pattern)) {
[13:36:49.635]                           computeRestarts <- base::computeRestarts
[13:36:49.635]                           grepl <- base::grepl
[13:36:49.635]                           restarts <- computeRestarts(cond)
[13:36:49.635]                           for (restart in restarts) {
[13:36:49.635]                             name <- restart$name
[13:36:49.635]                             if (is.null(name)) 
[13:36:49.635]                               next
[13:36:49.635]                             if (!grepl(pattern, name)) 
[13:36:49.635]                               next
[13:36:49.635]                             invokeRestart(restart)
[13:36:49.635]                             muffled <- TRUE
[13:36:49.635]                             break
[13:36:49.635]                           }
[13:36:49.635]                         }
[13:36:49.635]                       }
[13:36:49.635]                       invisible(muffled)
[13:36:49.635]                     }
[13:36:49.635]                     muffleCondition(cond, pattern = "^muffle")
[13:36:49.635]                   }
[13:36:49.635]                 }
[13:36:49.635]                 else {
[13:36:49.635]                   if (TRUE) {
[13:36:49.635]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:49.635]                     {
[13:36:49.635]                       inherits <- base::inherits
[13:36:49.635]                       invokeRestart <- base::invokeRestart
[13:36:49.635]                       is.null <- base::is.null
[13:36:49.635]                       muffled <- FALSE
[13:36:49.635]                       if (inherits(cond, "message")) {
[13:36:49.635]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:49.635]                         if (muffled) 
[13:36:49.635]                           invokeRestart("muffleMessage")
[13:36:49.635]                       }
[13:36:49.635]                       else if (inherits(cond, "warning")) {
[13:36:49.635]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:49.635]                         if (muffled) 
[13:36:49.635]                           invokeRestart("muffleWarning")
[13:36:49.635]                       }
[13:36:49.635]                       else if (inherits(cond, "condition")) {
[13:36:49.635]                         if (!is.null(pattern)) {
[13:36:49.635]                           computeRestarts <- base::computeRestarts
[13:36:49.635]                           grepl <- base::grepl
[13:36:49.635]                           restarts <- computeRestarts(cond)
[13:36:49.635]                           for (restart in restarts) {
[13:36:49.635]                             name <- restart$name
[13:36:49.635]                             if (is.null(name)) 
[13:36:49.635]                               next
[13:36:49.635]                             if (!grepl(pattern, name)) 
[13:36:49.635]                               next
[13:36:49.635]                             invokeRestart(restart)
[13:36:49.635]                             muffled <- TRUE
[13:36:49.635]                             break
[13:36:49.635]                           }
[13:36:49.635]                         }
[13:36:49.635]                       }
[13:36:49.635]                       invisible(muffled)
[13:36:49.635]                     }
[13:36:49.635]                     muffleCondition(cond, pattern = "^muffle")
[13:36:49.635]                   }
[13:36:49.635]                 }
[13:36:49.635]             }
[13:36:49.635]         }))
[13:36:49.635]     }, error = function(ex) {
[13:36:49.635]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:49.635]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:49.635]                 ...future.rng), started = ...future.startTime, 
[13:36:49.635]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:49.635]             version = "1.8"), class = "FutureResult")
[13:36:49.635]     }, finally = {
[13:36:49.635]         if (!identical(...future.workdir, getwd())) 
[13:36:49.635]             setwd(...future.workdir)
[13:36:49.635]         {
[13:36:49.635]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:49.635]                 ...future.oldOptions$nwarnings <- NULL
[13:36:49.635]             }
[13:36:49.635]             base::options(...future.oldOptions)
[13:36:49.635]             if (.Platform$OS.type == "windows") {
[13:36:49.635]                 old_names <- names(...future.oldEnvVars)
[13:36:49.635]                 envs <- base::Sys.getenv()
[13:36:49.635]                 names <- names(envs)
[13:36:49.635]                 common <- intersect(names, old_names)
[13:36:49.635]                 added <- setdiff(names, old_names)
[13:36:49.635]                 removed <- setdiff(old_names, names)
[13:36:49.635]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:49.635]                   envs[common]]
[13:36:49.635]                 NAMES <- toupper(changed)
[13:36:49.635]                 args <- list()
[13:36:49.635]                 for (kk in seq_along(NAMES)) {
[13:36:49.635]                   name <- changed[[kk]]
[13:36:49.635]                   NAME <- NAMES[[kk]]
[13:36:49.635]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:49.635]                     next
[13:36:49.635]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:49.635]                 }
[13:36:49.635]                 NAMES <- toupper(added)
[13:36:49.635]                 for (kk in seq_along(NAMES)) {
[13:36:49.635]                   name <- added[[kk]]
[13:36:49.635]                   NAME <- NAMES[[kk]]
[13:36:49.635]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:49.635]                     next
[13:36:49.635]                   args[[name]] <- ""
[13:36:49.635]                 }
[13:36:49.635]                 NAMES <- toupper(removed)
[13:36:49.635]                 for (kk in seq_along(NAMES)) {
[13:36:49.635]                   name <- removed[[kk]]
[13:36:49.635]                   NAME <- NAMES[[kk]]
[13:36:49.635]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:49.635]                     next
[13:36:49.635]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:49.635]                 }
[13:36:49.635]                 if (length(args) > 0) 
[13:36:49.635]                   base::do.call(base::Sys.setenv, args = args)
[13:36:49.635]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:49.635]             }
[13:36:49.635]             else {
[13:36:49.635]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:49.635]             }
[13:36:49.635]             {
[13:36:49.635]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:49.635]                   0L) {
[13:36:49.635]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:49.635]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:49.635]                   base::options(opts)
[13:36:49.635]                 }
[13:36:49.635]                 {
[13:36:49.635]                   {
[13:36:49.635]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:49.635]                     NULL
[13:36:49.635]                   }
[13:36:49.635]                   options(future.plan = NULL)
[13:36:49.635]                   if (is.na(NA_character_)) 
[13:36:49.635]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:49.635]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:49.635]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:49.635]                     .init = FALSE)
[13:36:49.635]                 }
[13:36:49.635]             }
[13:36:49.635]         }
[13:36:49.635]     })
[13:36:49.635]     if (TRUE) {
[13:36:49.635]         base::sink(type = "output", split = FALSE)
[13:36:49.635]         if (TRUE) {
[13:36:49.635]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:49.635]         }
[13:36:49.635]         else {
[13:36:49.635]             ...future.result["stdout"] <- base::list(NULL)
[13:36:49.635]         }
[13:36:49.635]         base::close(...future.stdout)
[13:36:49.635]         ...future.stdout <- NULL
[13:36:49.635]     }
[13:36:49.635]     ...future.result$conditions <- ...future.conditions
[13:36:49.635]     ...future.result$finished <- base::Sys.time()
[13:36:49.635]     ...future.result
[13:36:49.635] }
[13:36:49.687] MultisessionFuture started
[13:36:49.688] result() for ClusterFuture ...
[13:36:49.688] receiveMessageFromWorker() for ClusterFuture ...
[13:36:49.688] - Validating connection of MultisessionFuture
[13:36:49.720] - received message: FutureResult
[13:36:49.721] - Received FutureResult
[13:36:49.723] - Erased future from FutureRegistry
[13:36:49.724] result() for ClusterFuture ...
[13:36:49.724] - result already collected: FutureResult
[13:36:49.724] result() for ClusterFuture ... done
[13:36:49.724] receiveMessageFromWorker() for ClusterFuture ... done
[13:36:49.724] result() for ClusterFuture ... done
[13:36:49.724] result() for ClusterFuture ...
[13:36:49.725] - result already collected: FutureResult
[13:36:49.725] result() for ClusterFuture ... done
[13:36:49.725] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:36:49.725] plan(): nbrOfWorkers() = 2
> 
> env <- new.env()
> 
> ## Create future #1 (consumes background process #1)
> env$a %<-% { 5 }
Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[13:36:49.727] getGlobalsAndPackages() ...
[13:36:49.727] Searching for globals...
[13:36:49.731] - globals found: [1] ‘{’
[13:36:49.731] Searching for globals ... DONE
[13:36:49.731] Resolving globals: TRUE
[13:36:49.731] Resolving any globals that are futures ...
[13:36:49.732] - globals: [1] ‘{’
[13:36:49.732] Resolving any globals that are futures ... DONE
[13:36:49.732] 
[13:36:49.732] 
[13:36:49.733] getGlobalsAndPackages() ... DONE
[13:36:49.733] run() for ‘Future’ ...
[13:36:49.733] - state: ‘created’
[13:36:49.733] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:36:49.744] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:49.745] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:36:49.745]   - Field: ‘node’
[13:36:49.745]   - Field: ‘label’
[13:36:49.745]   - Field: ‘local’
[13:36:49.745]   - Field: ‘owner’
[13:36:49.745]   - Field: ‘envir’
[13:36:49.745]   - Field: ‘workers’
[13:36:49.745]   - Field: ‘packages’
[13:36:49.745]   - Field: ‘gc’
[13:36:49.746]   - Field: ‘conditions’
[13:36:49.746]   - Field: ‘persistent’
[13:36:49.746]   - Field: ‘expr’
[13:36:49.746]   - Field: ‘uuid’
[13:36:49.746]   - Field: ‘seed’
[13:36:49.746]   - Field: ‘version’
[13:36:49.746]   - Field: ‘result’
[13:36:49.746]   - Field: ‘asynchronous’
[13:36:49.747]   - Field: ‘calls’
[13:36:49.747]   - Field: ‘globals’
[13:36:49.747]   - Field: ‘stdout’
[13:36:49.747]   - Field: ‘earlySignal’
[13:36:49.747]   - Field: ‘lazy’
[13:36:49.747]   - Field: ‘state’
[13:36:49.747] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:36:49.747] - Launch lazy future ...
[13:36:49.748] Packages needed by the future expression (n = 0): <none>
[13:36:49.748] Packages needed by future strategies (n = 0): <none>
[13:36:49.748] {
[13:36:49.748]     {
[13:36:49.748]         {
[13:36:49.748]             ...future.startTime <- base::Sys.time()
[13:36:49.748]             {
[13:36:49.748]                 {
[13:36:49.748]                   {
[13:36:49.748]                     {
[13:36:49.748]                       base::local({
[13:36:49.748]                         has_future <- base::requireNamespace("future", 
[13:36:49.748]                           quietly = TRUE)
[13:36:49.748]                         if (has_future) {
[13:36:49.748]                           ns <- base::getNamespace("future")
[13:36:49.748]                           version <- ns[[".package"]][["version"]]
[13:36:49.748]                           if (is.null(version)) 
[13:36:49.748]                             version <- utils::packageVersion("future")
[13:36:49.748]                         }
[13:36:49.748]                         else {
[13:36:49.748]                           version <- NULL
[13:36:49.748]                         }
[13:36:49.748]                         if (!has_future || version < "1.8.0") {
[13:36:49.748]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:49.748]                             "", base::R.version$version.string), 
[13:36:49.748]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:49.748]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:49.748]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:49.748]                               "release", "version")], collapse = " "), 
[13:36:49.748]                             hostname = base::Sys.info()[["nodename"]])
[13:36:49.748]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:49.748]                             info)
[13:36:49.748]                           info <- base::paste(info, collapse = "; ")
[13:36:49.748]                           if (!has_future) {
[13:36:49.748]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:49.748]                               info)
[13:36:49.748]                           }
[13:36:49.748]                           else {
[13:36:49.748]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:49.748]                               info, version)
[13:36:49.748]                           }
[13:36:49.748]                           base::stop(msg)
[13:36:49.748]                         }
[13:36:49.748]                       })
[13:36:49.748]                     }
[13:36:49.748]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:49.748]                     base::options(mc.cores = 1L)
[13:36:49.748]                   }
[13:36:49.748]                   ...future.strategy.old <- future::plan("list")
[13:36:49.748]                   options(future.plan = NULL)
[13:36:49.748]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:49.748]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:49.748]                 }
[13:36:49.748]                 ...future.workdir <- getwd()
[13:36:49.748]             }
[13:36:49.748]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:49.748]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:49.748]         }
[13:36:49.748]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:49.748]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:49.748]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:49.748]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[13:36:49.748]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:49.748]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:49.748]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:49.748]             base::names(...future.oldOptions))
[13:36:49.748]     }
[13:36:49.748]     if (FALSE) {
[13:36:49.748]     }
[13:36:49.748]     else {
[13:36:49.748]         if (TRUE) {
[13:36:49.748]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:49.748]                 open = "w")
[13:36:49.748]         }
[13:36:49.748]         else {
[13:36:49.748]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:49.748]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:49.748]         }
[13:36:49.748]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:49.748]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:49.748]             base::sink(type = "output", split = FALSE)
[13:36:49.748]             base::close(...future.stdout)
[13:36:49.748]         }, add = TRUE)
[13:36:49.748]     }
[13:36:49.748]     ...future.frame <- base::sys.nframe()
[13:36:49.748]     ...future.conditions <- base::list()
[13:36:49.748]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:49.748]     if (FALSE) {
[13:36:49.748]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:49.748]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:49.748]     }
[13:36:49.748]     ...future.result <- base::tryCatch({
[13:36:49.748]         base::withCallingHandlers({
[13:36:49.748]             ...future.value <- base::withVisible(base::local({
[13:36:49.748]                 ...future.makeSendCondition <- base::local({
[13:36:49.748]                   sendCondition <- NULL
[13:36:49.748]                   function(frame = 1L) {
[13:36:49.748]                     if (is.function(sendCondition)) 
[13:36:49.748]                       return(sendCondition)
[13:36:49.748]                     ns <- getNamespace("parallel")
[13:36:49.748]                     if (exists("sendData", mode = "function", 
[13:36:49.748]                       envir = ns)) {
[13:36:49.748]                       parallel_sendData <- get("sendData", mode = "function", 
[13:36:49.748]                         envir = ns)
[13:36:49.748]                       envir <- sys.frame(frame)
[13:36:49.748]                       master <- NULL
[13:36:49.748]                       while (!identical(envir, .GlobalEnv) && 
[13:36:49.748]                         !identical(envir, emptyenv())) {
[13:36:49.748]                         if (exists("master", mode = "list", envir = envir, 
[13:36:49.748]                           inherits = FALSE)) {
[13:36:49.748]                           master <- get("master", mode = "list", 
[13:36:49.748]                             envir = envir, inherits = FALSE)
[13:36:49.748]                           if (inherits(master, c("SOCKnode", 
[13:36:49.748]                             "SOCK0node"))) {
[13:36:49.748]                             sendCondition <<- function(cond) {
[13:36:49.748]                               data <- list(type = "VALUE", value = cond, 
[13:36:49.748]                                 success = TRUE)
[13:36:49.748]                               parallel_sendData(master, data)
[13:36:49.748]                             }
[13:36:49.748]                             return(sendCondition)
[13:36:49.748]                           }
[13:36:49.748]                         }
[13:36:49.748]                         frame <- frame + 1L
[13:36:49.748]                         envir <- sys.frame(frame)
[13:36:49.748]                       }
[13:36:49.748]                     }
[13:36:49.748]                     sendCondition <<- function(cond) NULL
[13:36:49.748]                   }
[13:36:49.748]                 })
[13:36:49.748]                 withCallingHandlers({
[13:36:49.748]                   {
[13:36:49.748]                     5
[13:36:49.748]                   }
[13:36:49.748]                 }, immediateCondition = function(cond) {
[13:36:49.748]                   sendCondition <- ...future.makeSendCondition()
[13:36:49.748]                   sendCondition(cond)
[13:36:49.748]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:49.748]                   {
[13:36:49.748]                     inherits <- base::inherits
[13:36:49.748]                     invokeRestart <- base::invokeRestart
[13:36:49.748]                     is.null <- base::is.null
[13:36:49.748]                     muffled <- FALSE
[13:36:49.748]                     if (inherits(cond, "message")) {
[13:36:49.748]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:49.748]                       if (muffled) 
[13:36:49.748]                         invokeRestart("muffleMessage")
[13:36:49.748]                     }
[13:36:49.748]                     else if (inherits(cond, "warning")) {
[13:36:49.748]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:49.748]                       if (muffled) 
[13:36:49.748]                         invokeRestart("muffleWarning")
[13:36:49.748]                     }
[13:36:49.748]                     else if (inherits(cond, "condition")) {
[13:36:49.748]                       if (!is.null(pattern)) {
[13:36:49.748]                         computeRestarts <- base::computeRestarts
[13:36:49.748]                         grepl <- base::grepl
[13:36:49.748]                         restarts <- computeRestarts(cond)
[13:36:49.748]                         for (restart in restarts) {
[13:36:49.748]                           name <- restart$name
[13:36:49.748]                           if (is.null(name)) 
[13:36:49.748]                             next
[13:36:49.748]                           if (!grepl(pattern, name)) 
[13:36:49.748]                             next
[13:36:49.748]                           invokeRestart(restart)
[13:36:49.748]                           muffled <- TRUE
[13:36:49.748]                           break
[13:36:49.748]                         }
[13:36:49.748]                       }
[13:36:49.748]                     }
[13:36:49.748]                     invisible(muffled)
[13:36:49.748]                   }
[13:36:49.748]                   muffleCondition(cond)
[13:36:49.748]                 })
[13:36:49.748]             }))
[13:36:49.748]             future::FutureResult(value = ...future.value$value, 
[13:36:49.748]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:49.748]                   ...future.rng), globalenv = if (FALSE) 
[13:36:49.748]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:49.748]                     ...future.globalenv.names))
[13:36:49.748]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:49.748]         }, condition = base::local({
[13:36:49.748]             c <- base::c
[13:36:49.748]             inherits <- base::inherits
[13:36:49.748]             invokeRestart <- base::invokeRestart
[13:36:49.748]             length <- base::length
[13:36:49.748]             list <- base::list
[13:36:49.748]             seq.int <- base::seq.int
[13:36:49.748]             signalCondition <- base::signalCondition
[13:36:49.748]             sys.calls <- base::sys.calls
[13:36:49.748]             `[[` <- base::`[[`
[13:36:49.748]             `+` <- base::`+`
[13:36:49.748]             `<<-` <- base::`<<-`
[13:36:49.748]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:49.748]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:49.748]                   3L)]
[13:36:49.748]             }
[13:36:49.748]             function(cond) {
[13:36:49.748]                 is_error <- inherits(cond, "error")
[13:36:49.748]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:49.748]                   NULL)
[13:36:49.748]                 if (is_error) {
[13:36:49.748]                   sessionInformation <- function() {
[13:36:49.748]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:49.748]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:49.748]                       search = base::search(), system = base::Sys.info())
[13:36:49.748]                   }
[13:36:49.748]                   ...future.conditions[[length(...future.conditions) + 
[13:36:49.748]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:49.748]                     cond$call), session = sessionInformation(), 
[13:36:49.748]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:49.748]                   signalCondition(cond)
[13:36:49.748]                 }
[13:36:49.748]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:49.748]                 "immediateCondition"))) {
[13:36:49.748]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:49.748]                   ...future.conditions[[length(...future.conditions) + 
[13:36:49.748]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:49.748]                   if (TRUE && !signal) {
[13:36:49.748]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:49.748]                     {
[13:36:49.748]                       inherits <- base::inherits
[13:36:49.748]                       invokeRestart <- base::invokeRestart
[13:36:49.748]                       is.null <- base::is.null
[13:36:49.748]                       muffled <- FALSE
[13:36:49.748]                       if (inherits(cond, "message")) {
[13:36:49.748]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:49.748]                         if (muffled) 
[13:36:49.748]                           invokeRestart("muffleMessage")
[13:36:49.748]                       }
[13:36:49.748]                       else if (inherits(cond, "warning")) {
[13:36:49.748]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:49.748]                         if (muffled) 
[13:36:49.748]                           invokeRestart("muffleWarning")
[13:36:49.748]                       }
[13:36:49.748]                       else if (inherits(cond, "condition")) {
[13:36:49.748]                         if (!is.null(pattern)) {
[13:36:49.748]                           computeRestarts <- base::computeRestarts
[13:36:49.748]                           grepl <- base::grepl
[13:36:49.748]                           restarts <- computeRestarts(cond)
[13:36:49.748]                           for (restart in restarts) {
[13:36:49.748]                             name <- restart$name
[13:36:49.748]                             if (is.null(name)) 
[13:36:49.748]                               next
[13:36:49.748]                             if (!grepl(pattern, name)) 
[13:36:49.748]                               next
[13:36:49.748]                             invokeRestart(restart)
[13:36:49.748]                             muffled <- TRUE
[13:36:49.748]                             break
[13:36:49.748]                           }
[13:36:49.748]                         }
[13:36:49.748]                       }
[13:36:49.748]                       invisible(muffled)
[13:36:49.748]                     }
[13:36:49.748]                     muffleCondition(cond, pattern = "^muffle")
[13:36:49.748]                   }
[13:36:49.748]                 }
[13:36:49.748]                 else {
[13:36:49.748]                   if (TRUE) {
[13:36:49.748]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:49.748]                     {
[13:36:49.748]                       inherits <- base::inherits
[13:36:49.748]                       invokeRestart <- base::invokeRestart
[13:36:49.748]                       is.null <- base::is.null
[13:36:49.748]                       muffled <- FALSE
[13:36:49.748]                       if (inherits(cond, "message")) {
[13:36:49.748]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:49.748]                         if (muffled) 
[13:36:49.748]                           invokeRestart("muffleMessage")
[13:36:49.748]                       }
[13:36:49.748]                       else if (inherits(cond, "warning")) {
[13:36:49.748]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:49.748]                         if (muffled) 
[13:36:49.748]                           invokeRestart("muffleWarning")
[13:36:49.748]                       }
[13:36:49.748]                       else if (inherits(cond, "condition")) {
[13:36:49.748]                         if (!is.null(pattern)) {
[13:36:49.748]                           computeRestarts <- base::computeRestarts
[13:36:49.748]                           grepl <- base::grepl
[13:36:49.748]                           restarts <- computeRestarts(cond)
[13:36:49.748]                           for (restart in restarts) {
[13:36:49.748]                             name <- restart$name
[13:36:49.748]                             if (is.null(name)) 
[13:36:49.748]                               next
[13:36:49.748]                             if (!grepl(pattern, name)) 
[13:36:49.748]                               next
[13:36:49.748]                             invokeRestart(restart)
[13:36:49.748]                             muffled <- TRUE
[13:36:49.748]                             break
[13:36:49.748]                           }
[13:36:49.748]                         }
[13:36:49.748]                       }
[13:36:49.748]                       invisible(muffled)
[13:36:49.748]                     }
[13:36:49.748]                     muffleCondition(cond, pattern = "^muffle")
[13:36:49.748]                   }
[13:36:49.748]                 }
[13:36:49.748]             }
[13:36:49.748]         }))
[13:36:49.748]     }, error = function(ex) {
[13:36:49.748]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:49.748]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:49.748]                 ...future.rng), started = ...future.startTime, 
[13:36:49.748]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:49.748]             version = "1.8"), class = "FutureResult")
[13:36:49.748]     }, finally = {
[13:36:49.748]         if (!identical(...future.workdir, getwd())) 
[13:36:49.748]             setwd(...future.workdir)
[13:36:49.748]         {
[13:36:49.748]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:49.748]                 ...future.oldOptions$nwarnings <- NULL
[13:36:49.748]             }
[13:36:49.748]             base::options(...future.oldOptions)
[13:36:49.748]             if (.Platform$OS.type == "windows") {
[13:36:49.748]                 old_names <- names(...future.oldEnvVars)
[13:36:49.748]                 envs <- base::Sys.getenv()
[13:36:49.748]                 names <- names(envs)
[13:36:49.748]                 common <- intersect(names, old_names)
[13:36:49.748]                 added <- setdiff(names, old_names)
[13:36:49.748]                 removed <- setdiff(old_names, names)
[13:36:49.748]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:49.748]                   envs[common]]
[13:36:49.748]                 NAMES <- toupper(changed)
[13:36:49.748]                 args <- list()
[13:36:49.748]                 for (kk in seq_along(NAMES)) {
[13:36:49.748]                   name <- changed[[kk]]
[13:36:49.748]                   NAME <- NAMES[[kk]]
[13:36:49.748]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:49.748]                     next
[13:36:49.748]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:49.748]                 }
[13:36:49.748]                 NAMES <- toupper(added)
[13:36:49.748]                 for (kk in seq_along(NAMES)) {
[13:36:49.748]                   name <- added[[kk]]
[13:36:49.748]                   NAME <- NAMES[[kk]]
[13:36:49.748]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:49.748]                     next
[13:36:49.748]                   args[[name]] <- ""
[13:36:49.748]                 }
[13:36:49.748]                 NAMES <- toupper(removed)
[13:36:49.748]                 for (kk in seq_along(NAMES)) {
[13:36:49.748]                   name <- removed[[kk]]
[13:36:49.748]                   NAME <- NAMES[[kk]]
[13:36:49.748]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:49.748]                     next
[13:36:49.748]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:49.748]                 }
[13:36:49.748]                 if (length(args) > 0) 
[13:36:49.748]                   base::do.call(base::Sys.setenv, args = args)
[13:36:49.748]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:49.748]             }
[13:36:49.748]             else {
[13:36:49.748]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:49.748]             }
[13:36:49.748]             {
[13:36:49.748]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:49.748]                   0L) {
[13:36:49.748]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:49.748]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:49.748]                   base::options(opts)
[13:36:49.748]                 }
[13:36:49.748]                 {
[13:36:49.748]                   {
[13:36:49.748]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:49.748]                     NULL
[13:36:49.748]                   }
[13:36:49.748]                   options(future.plan = NULL)
[13:36:49.748]                   if (is.na(NA_character_)) 
[13:36:49.748]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:49.748]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:49.748]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:49.748]                     .init = FALSE)
[13:36:49.748]                 }
[13:36:49.748]             }
[13:36:49.748]         }
[13:36:49.748]     })
[13:36:49.748]     if (TRUE) {
[13:36:49.748]         base::sink(type = "output", split = FALSE)
[13:36:49.748]         if (TRUE) {
[13:36:49.748]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:49.748]         }
[13:36:49.748]         else {
[13:36:49.748]             ...future.result["stdout"] <- base::list(NULL)
[13:36:49.748]         }
[13:36:49.748]         base::close(...future.stdout)
[13:36:49.748]         ...future.stdout <- NULL
[13:36:49.748]     }
[13:36:49.748]     ...future.result$conditions <- ...future.conditions
[13:36:49.748]     ...future.result$finished <- base::Sys.time()
[13:36:49.748]     ...future.result
[13:36:49.748] }
[13:36:49.752] MultisessionFuture started
[13:36:49.752] - Launch lazy future ... done
[13:36:49.752] run() for ‘MultisessionFuture’ ... done
> 
> ## Create future #2 (consumes background process #2)
> b %<-% { "a" }
Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[13:36:49.753] getGlobalsAndPackages() ...
[13:36:49.753] Searching for globals...
[13:36:49.754] - globals found: [1] ‘{’
[13:36:49.754] Searching for globals ... DONE
[13:36:49.754] Resolving globals: TRUE
[13:36:49.755] Resolving any globals that are futures ...
[13:36:49.755] - globals: [1] ‘{’
[13:36:49.755] Resolving any globals that are futures ... DONE
[13:36:49.755] 
[13:36:49.755] 
[13:36:49.756] getGlobalsAndPackages() ... DONE
[13:36:49.756] run() for ‘Future’ ...
[13:36:49.756] - state: ‘created’
[13:36:49.756] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:36:49.768] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:49.768] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:36:49.768]   - Field: ‘node’
[13:36:49.768]   - Field: ‘label’
[13:36:49.768]   - Field: ‘local’
[13:36:49.768]   - Field: ‘owner’
[13:36:49.768]   - Field: ‘envir’
[13:36:49.768]   - Field: ‘workers’
[13:36:49.769]   - Field: ‘packages’
[13:36:49.769]   - Field: ‘gc’
[13:36:49.769]   - Field: ‘conditions’
[13:36:49.769]   - Field: ‘persistent’
[13:36:49.769]   - Field: ‘expr’
[13:36:49.769]   - Field: ‘uuid’
[13:36:49.769]   - Field: ‘seed’
[13:36:49.769]   - Field: ‘version’
[13:36:49.769]   - Field: ‘result’
[13:36:49.770]   - Field: ‘asynchronous’
[13:36:49.770]   - Field: ‘calls’
[13:36:49.770]   - Field: ‘globals’
[13:36:49.770]   - Field: ‘stdout’
[13:36:49.770]   - Field: ‘earlySignal’
[13:36:49.770]   - Field: ‘lazy’
[13:36:49.770]   - Field: ‘state’
[13:36:49.770] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:36:49.770] - Launch lazy future ...
[13:36:49.771] Packages needed by the future expression (n = 0): <none>
[13:36:49.771] Packages needed by future strategies (n = 0): <none>
[13:36:49.771] {
[13:36:49.771]     {
[13:36:49.771]         {
[13:36:49.771]             ...future.startTime <- base::Sys.time()
[13:36:49.771]             {
[13:36:49.771]                 {
[13:36:49.771]                   {
[13:36:49.771]                     {
[13:36:49.771]                       base::local({
[13:36:49.771]                         has_future <- base::requireNamespace("future", 
[13:36:49.771]                           quietly = TRUE)
[13:36:49.771]                         if (has_future) {
[13:36:49.771]                           ns <- base::getNamespace("future")
[13:36:49.771]                           version <- ns[[".package"]][["version"]]
[13:36:49.771]                           if (is.null(version)) 
[13:36:49.771]                             version <- utils::packageVersion("future")
[13:36:49.771]                         }
[13:36:49.771]                         else {
[13:36:49.771]                           version <- NULL
[13:36:49.771]                         }
[13:36:49.771]                         if (!has_future || version < "1.8.0") {
[13:36:49.771]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:49.771]                             "", base::R.version$version.string), 
[13:36:49.771]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:49.771]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:49.771]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:49.771]                               "release", "version")], collapse = " "), 
[13:36:49.771]                             hostname = base::Sys.info()[["nodename"]])
[13:36:49.771]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:49.771]                             info)
[13:36:49.771]                           info <- base::paste(info, collapse = "; ")
[13:36:49.771]                           if (!has_future) {
[13:36:49.771]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:49.771]                               info)
[13:36:49.771]                           }
[13:36:49.771]                           else {
[13:36:49.771]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:49.771]                               info, version)
[13:36:49.771]                           }
[13:36:49.771]                           base::stop(msg)
[13:36:49.771]                         }
[13:36:49.771]                       })
[13:36:49.771]                     }
[13:36:49.771]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:49.771]                     base::options(mc.cores = 1L)
[13:36:49.771]                   }
[13:36:49.771]                   ...future.strategy.old <- future::plan("list")
[13:36:49.771]                   options(future.plan = NULL)
[13:36:49.771]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:49.771]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:49.771]                 }
[13:36:49.771]                 ...future.workdir <- getwd()
[13:36:49.771]             }
[13:36:49.771]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:49.771]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:49.771]         }
[13:36:49.771]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:49.771]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:49.771]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:49.771]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[13:36:49.771]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:49.771]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:49.771]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:49.771]             base::names(...future.oldOptions))
[13:36:49.771]     }
[13:36:49.771]     if (FALSE) {
[13:36:49.771]     }
[13:36:49.771]     else {
[13:36:49.771]         if (TRUE) {
[13:36:49.771]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:49.771]                 open = "w")
[13:36:49.771]         }
[13:36:49.771]         else {
[13:36:49.771]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:49.771]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:49.771]         }
[13:36:49.771]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:49.771]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:49.771]             base::sink(type = "output", split = FALSE)
[13:36:49.771]             base::close(...future.stdout)
[13:36:49.771]         }, add = TRUE)
[13:36:49.771]     }
[13:36:49.771]     ...future.frame <- base::sys.nframe()
[13:36:49.771]     ...future.conditions <- base::list()
[13:36:49.771]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:49.771]     if (FALSE) {
[13:36:49.771]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:49.771]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:49.771]     }
[13:36:49.771]     ...future.result <- base::tryCatch({
[13:36:49.771]         base::withCallingHandlers({
[13:36:49.771]             ...future.value <- base::withVisible(base::local({
[13:36:49.771]                 ...future.makeSendCondition <- base::local({
[13:36:49.771]                   sendCondition <- NULL
[13:36:49.771]                   function(frame = 1L) {
[13:36:49.771]                     if (is.function(sendCondition)) 
[13:36:49.771]                       return(sendCondition)
[13:36:49.771]                     ns <- getNamespace("parallel")
[13:36:49.771]                     if (exists("sendData", mode = "function", 
[13:36:49.771]                       envir = ns)) {
[13:36:49.771]                       parallel_sendData <- get("sendData", mode = "function", 
[13:36:49.771]                         envir = ns)
[13:36:49.771]                       envir <- sys.frame(frame)
[13:36:49.771]                       master <- NULL
[13:36:49.771]                       while (!identical(envir, .GlobalEnv) && 
[13:36:49.771]                         !identical(envir, emptyenv())) {
[13:36:49.771]                         if (exists("master", mode = "list", envir = envir, 
[13:36:49.771]                           inherits = FALSE)) {
[13:36:49.771]                           master <- get("master", mode = "list", 
[13:36:49.771]                             envir = envir, inherits = FALSE)
[13:36:49.771]                           if (inherits(master, c("SOCKnode", 
[13:36:49.771]                             "SOCK0node"))) {
[13:36:49.771]                             sendCondition <<- function(cond) {
[13:36:49.771]                               data <- list(type = "VALUE", value = cond, 
[13:36:49.771]                                 success = TRUE)
[13:36:49.771]                               parallel_sendData(master, data)
[13:36:49.771]                             }
[13:36:49.771]                             return(sendCondition)
[13:36:49.771]                           }
[13:36:49.771]                         }
[13:36:49.771]                         frame <- frame + 1L
[13:36:49.771]                         envir <- sys.frame(frame)
[13:36:49.771]                       }
[13:36:49.771]                     }
[13:36:49.771]                     sendCondition <<- function(cond) NULL
[13:36:49.771]                   }
[13:36:49.771]                 })
[13:36:49.771]                 withCallingHandlers({
[13:36:49.771]                   {
[13:36:49.771]                     "a"
[13:36:49.771]                   }
[13:36:49.771]                 }, immediateCondition = function(cond) {
[13:36:49.771]                   sendCondition <- ...future.makeSendCondition()
[13:36:49.771]                   sendCondition(cond)
[13:36:49.771]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:49.771]                   {
[13:36:49.771]                     inherits <- base::inherits
[13:36:49.771]                     invokeRestart <- base::invokeRestart
[13:36:49.771]                     is.null <- base::is.null
[13:36:49.771]                     muffled <- FALSE
[13:36:49.771]                     if (inherits(cond, "message")) {
[13:36:49.771]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:49.771]                       if (muffled) 
[13:36:49.771]                         invokeRestart("muffleMessage")
[13:36:49.771]                     }
[13:36:49.771]                     else if (inherits(cond, "warning")) {
[13:36:49.771]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:49.771]                       if (muffled) 
[13:36:49.771]                         invokeRestart("muffleWarning")
[13:36:49.771]                     }
[13:36:49.771]                     else if (inherits(cond, "condition")) {
[13:36:49.771]                       if (!is.null(pattern)) {
[13:36:49.771]                         computeRestarts <- base::computeRestarts
[13:36:49.771]                         grepl <- base::grepl
[13:36:49.771]                         restarts <- computeRestarts(cond)
[13:36:49.771]                         for (restart in restarts) {
[13:36:49.771]                           name <- restart$name
[13:36:49.771]                           if (is.null(name)) 
[13:36:49.771]                             next
[13:36:49.771]                           if (!grepl(pattern, name)) 
[13:36:49.771]                             next
[13:36:49.771]                           invokeRestart(restart)
[13:36:49.771]                           muffled <- TRUE
[13:36:49.771]                           break
[13:36:49.771]                         }
[13:36:49.771]                       }
[13:36:49.771]                     }
[13:36:49.771]                     invisible(muffled)
[13:36:49.771]                   }
[13:36:49.771]                   muffleCondition(cond)
[13:36:49.771]                 })
[13:36:49.771]             }))
[13:36:49.771]             future::FutureResult(value = ...future.value$value, 
[13:36:49.771]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:49.771]                   ...future.rng), globalenv = if (FALSE) 
[13:36:49.771]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:49.771]                     ...future.globalenv.names))
[13:36:49.771]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:49.771]         }, condition = base::local({
[13:36:49.771]             c <- base::c
[13:36:49.771]             inherits <- base::inherits
[13:36:49.771]             invokeRestart <- base::invokeRestart
[13:36:49.771]             length <- base::length
[13:36:49.771]             list <- base::list
[13:36:49.771]             seq.int <- base::seq.int
[13:36:49.771]             signalCondition <- base::signalCondition
[13:36:49.771]             sys.calls <- base::sys.calls
[13:36:49.771]             `[[` <- base::`[[`
[13:36:49.771]             `+` <- base::`+`
[13:36:49.771]             `<<-` <- base::`<<-`
[13:36:49.771]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:49.771]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:49.771]                   3L)]
[13:36:49.771]             }
[13:36:49.771]             function(cond) {
[13:36:49.771]                 is_error <- inherits(cond, "error")
[13:36:49.771]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:49.771]                   NULL)
[13:36:49.771]                 if (is_error) {
[13:36:49.771]                   sessionInformation <- function() {
[13:36:49.771]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:49.771]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:49.771]                       search = base::search(), system = base::Sys.info())
[13:36:49.771]                   }
[13:36:49.771]                   ...future.conditions[[length(...future.conditions) + 
[13:36:49.771]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:49.771]                     cond$call), session = sessionInformation(), 
[13:36:49.771]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:49.771]                   signalCondition(cond)
[13:36:49.771]                 }
[13:36:49.771]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:49.771]                 "immediateCondition"))) {
[13:36:49.771]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:49.771]                   ...future.conditions[[length(...future.conditions) + 
[13:36:49.771]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:49.771]                   if (TRUE && !signal) {
[13:36:49.771]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:49.771]                     {
[13:36:49.771]                       inherits <- base::inherits
[13:36:49.771]                       invokeRestart <- base::invokeRestart
[13:36:49.771]                       is.null <- base::is.null
[13:36:49.771]                       muffled <- FALSE
[13:36:49.771]                       if (inherits(cond, "message")) {
[13:36:49.771]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:49.771]                         if (muffled) 
[13:36:49.771]                           invokeRestart("muffleMessage")
[13:36:49.771]                       }
[13:36:49.771]                       else if (inherits(cond, "warning")) {
[13:36:49.771]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:49.771]                         if (muffled) 
[13:36:49.771]                           invokeRestart("muffleWarning")
[13:36:49.771]                       }
[13:36:49.771]                       else if (inherits(cond, "condition")) {
[13:36:49.771]                         if (!is.null(pattern)) {
[13:36:49.771]                           computeRestarts <- base::computeRestarts
[13:36:49.771]                           grepl <- base::grepl
[13:36:49.771]                           restarts <- computeRestarts(cond)
[13:36:49.771]                           for (restart in restarts) {
[13:36:49.771]                             name <- restart$name
[13:36:49.771]                             if (is.null(name)) 
[13:36:49.771]                               next
[13:36:49.771]                             if (!grepl(pattern, name)) 
[13:36:49.771]                               next
[13:36:49.771]                             invokeRestart(restart)
[13:36:49.771]                             muffled <- TRUE
[13:36:49.771]                             break
[13:36:49.771]                           }
[13:36:49.771]                         }
[13:36:49.771]                       }
[13:36:49.771]                       invisible(muffled)
[13:36:49.771]                     }
[13:36:49.771]                     muffleCondition(cond, pattern = "^muffle")
[13:36:49.771]                   }
[13:36:49.771]                 }
[13:36:49.771]                 else {
[13:36:49.771]                   if (TRUE) {
[13:36:49.771]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:49.771]                     {
[13:36:49.771]                       inherits <- base::inherits
[13:36:49.771]                       invokeRestart <- base::invokeRestart
[13:36:49.771]                       is.null <- base::is.null
[13:36:49.771]                       muffled <- FALSE
[13:36:49.771]                       if (inherits(cond, "message")) {
[13:36:49.771]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:49.771]                         if (muffled) 
[13:36:49.771]                           invokeRestart("muffleMessage")
[13:36:49.771]                       }
[13:36:49.771]                       else if (inherits(cond, "warning")) {
[13:36:49.771]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:49.771]                         if (muffled) 
[13:36:49.771]                           invokeRestart("muffleWarning")
[13:36:49.771]                       }
[13:36:49.771]                       else if (inherits(cond, "condition")) {
[13:36:49.771]                         if (!is.null(pattern)) {
[13:36:49.771]                           computeRestarts <- base::computeRestarts
[13:36:49.771]                           grepl <- base::grepl
[13:36:49.771]                           restarts <- computeRestarts(cond)
[13:36:49.771]                           for (restart in restarts) {
[13:36:49.771]                             name <- restart$name
[13:36:49.771]                             if (is.null(name)) 
[13:36:49.771]                               next
[13:36:49.771]                             if (!grepl(pattern, name)) 
[13:36:49.771]                               next
[13:36:49.771]                             invokeRestart(restart)
[13:36:49.771]                             muffled <- TRUE
[13:36:49.771]                             break
[13:36:49.771]                           }
[13:36:49.771]                         }
[13:36:49.771]                       }
[13:36:49.771]                       invisible(muffled)
[13:36:49.771]                     }
[13:36:49.771]                     muffleCondition(cond, pattern = "^muffle")
[13:36:49.771]                   }
[13:36:49.771]                 }
[13:36:49.771]             }
[13:36:49.771]         }))
[13:36:49.771]     }, error = function(ex) {
[13:36:49.771]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:49.771]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:49.771]                 ...future.rng), started = ...future.startTime, 
[13:36:49.771]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:49.771]             version = "1.8"), class = "FutureResult")
[13:36:49.771]     }, finally = {
[13:36:49.771]         if (!identical(...future.workdir, getwd())) 
[13:36:49.771]             setwd(...future.workdir)
[13:36:49.771]         {
[13:36:49.771]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:49.771]                 ...future.oldOptions$nwarnings <- NULL
[13:36:49.771]             }
[13:36:49.771]             base::options(...future.oldOptions)
[13:36:49.771]             if (.Platform$OS.type == "windows") {
[13:36:49.771]                 old_names <- names(...future.oldEnvVars)
[13:36:49.771]                 envs <- base::Sys.getenv()
[13:36:49.771]                 names <- names(envs)
[13:36:49.771]                 common <- intersect(names, old_names)
[13:36:49.771]                 added <- setdiff(names, old_names)
[13:36:49.771]                 removed <- setdiff(old_names, names)
[13:36:49.771]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:49.771]                   envs[common]]
[13:36:49.771]                 NAMES <- toupper(changed)
[13:36:49.771]                 args <- list()
[13:36:49.771]                 for (kk in seq_along(NAMES)) {
[13:36:49.771]                   name <- changed[[kk]]
[13:36:49.771]                   NAME <- NAMES[[kk]]
[13:36:49.771]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:49.771]                     next
[13:36:49.771]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:49.771]                 }
[13:36:49.771]                 NAMES <- toupper(added)
[13:36:49.771]                 for (kk in seq_along(NAMES)) {
[13:36:49.771]                   name <- added[[kk]]
[13:36:49.771]                   NAME <- NAMES[[kk]]
[13:36:49.771]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:49.771]                     next
[13:36:49.771]                   args[[name]] <- ""
[13:36:49.771]                 }
[13:36:49.771]                 NAMES <- toupper(removed)
[13:36:49.771]                 for (kk in seq_along(NAMES)) {
[13:36:49.771]                   name <- removed[[kk]]
[13:36:49.771]                   NAME <- NAMES[[kk]]
[13:36:49.771]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:49.771]                     next
[13:36:49.771]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:49.771]                 }
[13:36:49.771]                 if (length(args) > 0) 
[13:36:49.771]                   base::do.call(base::Sys.setenv, args = args)
[13:36:49.771]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:49.771]             }
[13:36:49.771]             else {
[13:36:49.771]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:49.771]             }
[13:36:49.771]             {
[13:36:49.771]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:49.771]                   0L) {
[13:36:49.771]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:49.771]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:49.771]                   base::options(opts)
[13:36:49.771]                 }
[13:36:49.771]                 {
[13:36:49.771]                   {
[13:36:49.771]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:49.771]                     NULL
[13:36:49.771]                   }
[13:36:49.771]                   options(future.plan = NULL)
[13:36:49.771]                   if (is.na(NA_character_)) 
[13:36:49.771]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:49.771]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:49.771]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:49.771]                     .init = FALSE)
[13:36:49.771]                 }
[13:36:49.771]             }
[13:36:49.771]         }
[13:36:49.771]     })
[13:36:49.771]     if (TRUE) {
[13:36:49.771]         base::sink(type = "output", split = FALSE)
[13:36:49.771]         if (TRUE) {
[13:36:49.771]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:49.771]         }
[13:36:49.771]         else {
[13:36:49.771]             ...future.result["stdout"] <- base::list(NULL)
[13:36:49.771]         }
[13:36:49.771]         base::close(...future.stdout)
[13:36:49.771]         ...future.stdout <- NULL
[13:36:49.771]     }
[13:36:49.771]     ...future.result$conditions <- ...future.conditions
[13:36:49.771]     ...future.result$finished <- base::Sys.time()
[13:36:49.771]     ...future.result
[13:36:49.771] }
[13:36:49.826] MultisessionFuture started
[13:36:49.826] - Launch lazy future ... done
[13:36:49.826] run() for ‘MultisessionFuture’ ... done
> 
> ## Resolve future #2 (frees up background process #2)
> message(sprintf("b = %s\n", sQuote(b)))
[13:36:49.826] result() for ClusterFuture ...
[13:36:49.826] receiveMessageFromWorker() for ClusterFuture ...
[13:36:49.827] - Validating connection of MultisessionFuture
[13:36:49.859] - received message: FutureResult
[13:36:49.863] - Received FutureResult
[13:36:49.863] - Erased future from FutureRegistry
[13:36:49.863] result() for ClusterFuture ...
[13:36:49.863] - result already collected: FutureResult
[13:36:49.863] result() for ClusterFuture ... done
[13:36:49.863] receiveMessageFromWorker() for ClusterFuture ... done
[13:36:49.864] result() for ClusterFuture ... done
[13:36:49.864] result() for ClusterFuture ...
[13:36:49.864] - result already collected: FutureResult
[13:36:49.864] result() for ClusterFuture ... done
b = ‘a’

> 
> ## Create future #3 (consumes background process #2)
> ## THIS IS THE TRICKY PART:
> ## Two globals are identified `env` and `b` and both are resolved.
> ## However, object `env[[b]]` (here element `a` of environment `env`)
> ## is not touched and therefore not resolved (since it is a future)
> ## unless environment `env` is resolved recursively. (Issue #49)
> y %<-% { env[[b]] }
Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[13:36:49.864] getGlobalsAndPackages() ...
[13:36:49.865] Searching for globals...
[13:36:49.869] - globals found: [4] ‘{’, ‘[[’, ‘env’, ‘b’
[13:36:49.869] Searching for globals ... DONE
[13:36:49.869] Resolving globals: TRUE
[13:36:49.869] Resolving any globals that are futures ...
[13:36:49.869] - globals: [4] ‘{’, ‘[[’, ‘env’, ‘b’
[13:36:49.869] Resolving any globals that are futures ... DONE
[13:36:49.869] Resolving futures part of globals (recursively) ...
[13:36:49.870] resolve() on list ...
[13:36:49.870]  recursive: 99
[13:36:49.871]  length: 2
[13:36:49.871]  elements: ‘env’, ‘b’
[13:36:49.871] resolve() on environment ...
[13:36:49.871]  recursive: 98
[13:36:49.872]  elements: [1] ‘.future_a’, ‘a’
[13:36:49.872] receiveMessageFromWorker() for ClusterFuture ...
[13:36:49.873] - Validating connection of MultisessionFuture
[13:36:49.873] - received message: FutureResult
[13:36:49.873] - Received FutureResult
[13:36:49.873] - Erased future from FutureRegistry
[13:36:49.873] result() for ClusterFuture ...
[13:36:49.873] - result already collected: FutureResult
[13:36:49.873] result() for ClusterFuture ... done
[13:36:49.873] receiveMessageFromWorker() for ClusterFuture ... done
[13:36:49.873] Future #1
[13:36:49.874] result() for ClusterFuture ...
[13:36:49.874] - result already collected: FutureResult
[13:36:49.874] result() for ClusterFuture ... done
[13:36:49.874] result() for ClusterFuture ...
[13:36:49.874] - result already collected: FutureResult
[13:36:49.874] result() for ClusterFuture ... done
[13:36:49.874] A MultisessionFuture was resolved
[13:36:49.874]  length: 0 (resolved future 1)
[13:36:49.875] resolve() on environment ... DONE
[13:36:49.875]  length: 1 (resolved future 1)
[13:36:49.875]  length: 0 (resolved future 2)
[13:36:49.875] resolve() on list ... DONE
[13:36:49.875] - globals: [2] ‘env’, ‘b’
[13:36:49.875] Resolving futures part of globals (recursively) ... DONE
[13:36:49.876] The total size of the 2 globals is 4.29 KiB (4392 bytes)
[13:36:49.876] The total size of the 2 globals exported for future expression (‘{; env[[b]]; }’) is 4.29 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘env’ (4.18 KiB of class ‘environment’) and ‘b’ (112 bytes of class ‘character’)
[13:36:49.876] - globals: [2] ‘env’, ‘b’
[13:36:49.877] 
[13:36:49.877] getGlobalsAndPackages() ... DONE
[13:36:49.877] run() for ‘Future’ ...
[13:36:49.877] - state: ‘created’
[13:36:49.877] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:36:49.888] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:49.888] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:36:49.888]   - Field: ‘node’
[13:36:49.888]   - Field: ‘label’
[13:36:49.888]   - Field: ‘local’
[13:36:49.888]   - Field: ‘owner’
[13:36:49.888]   - Field: ‘envir’
[13:36:49.888]   - Field: ‘workers’
[13:36:49.888]   - Field: ‘packages’
[13:36:49.888]   - Field: ‘gc’
[13:36:49.889]   - Field: ‘conditions’
[13:36:49.889]   - Field: ‘persistent’
[13:36:49.889]   - Field: ‘expr’
[13:36:49.889]   - Field: ‘uuid’
[13:36:49.889]   - Field: ‘seed’
[13:36:49.889]   - Field: ‘version’
[13:36:49.889]   - Field: ‘result’
[13:36:49.889]   - Field: ‘asynchronous’
[13:36:49.889]   - Field: ‘calls’
[13:36:49.889]   - Field: ‘globals’
[13:36:49.889]   - Field: ‘stdout’
[13:36:49.890]   - Field: ‘earlySignal’
[13:36:49.890]   - Field: ‘lazy’
[13:36:49.890]   - Field: ‘state’
[13:36:49.890] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:36:49.890] - Launch lazy future ...
[13:36:49.890] Packages needed by the future expression (n = 0): <none>
[13:36:49.890] Packages needed by future strategies (n = 0): <none>
[13:36:49.891] {
[13:36:49.891]     {
[13:36:49.891]         {
[13:36:49.891]             ...future.startTime <- base::Sys.time()
[13:36:49.891]             {
[13:36:49.891]                 {
[13:36:49.891]                   {
[13:36:49.891]                     {
[13:36:49.891]                       base::local({
[13:36:49.891]                         has_future <- base::requireNamespace("future", 
[13:36:49.891]                           quietly = TRUE)
[13:36:49.891]                         if (has_future) {
[13:36:49.891]                           ns <- base::getNamespace("future")
[13:36:49.891]                           version <- ns[[".package"]][["version"]]
[13:36:49.891]                           if (is.null(version)) 
[13:36:49.891]                             version <- utils::packageVersion("future")
[13:36:49.891]                         }
[13:36:49.891]                         else {
[13:36:49.891]                           version <- NULL
[13:36:49.891]                         }
[13:36:49.891]                         if (!has_future || version < "1.8.0") {
[13:36:49.891]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:49.891]                             "", base::R.version$version.string), 
[13:36:49.891]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:49.891]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:49.891]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:49.891]                               "release", "version")], collapse = " "), 
[13:36:49.891]                             hostname = base::Sys.info()[["nodename"]])
[13:36:49.891]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:49.891]                             info)
[13:36:49.891]                           info <- base::paste(info, collapse = "; ")
[13:36:49.891]                           if (!has_future) {
[13:36:49.891]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:49.891]                               info)
[13:36:49.891]                           }
[13:36:49.891]                           else {
[13:36:49.891]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:49.891]                               info, version)
[13:36:49.891]                           }
[13:36:49.891]                           base::stop(msg)
[13:36:49.891]                         }
[13:36:49.891]                       })
[13:36:49.891]                     }
[13:36:49.891]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:49.891]                     base::options(mc.cores = 1L)
[13:36:49.891]                   }
[13:36:49.891]                   ...future.strategy.old <- future::plan("list")
[13:36:49.891]                   options(future.plan = NULL)
[13:36:49.891]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:49.891]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:49.891]                 }
[13:36:49.891]                 ...future.workdir <- getwd()
[13:36:49.891]             }
[13:36:49.891]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:49.891]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:49.891]         }
[13:36:49.891]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:49.891]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:49.891]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:49.891]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[13:36:49.891]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:49.891]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:49.891]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:49.891]             base::names(...future.oldOptions))
[13:36:49.891]     }
[13:36:49.891]     if (FALSE) {
[13:36:49.891]     }
[13:36:49.891]     else {
[13:36:49.891]         if (TRUE) {
[13:36:49.891]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:49.891]                 open = "w")
[13:36:49.891]         }
[13:36:49.891]         else {
[13:36:49.891]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:49.891]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:49.891]         }
[13:36:49.891]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:49.891]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:49.891]             base::sink(type = "output", split = FALSE)
[13:36:49.891]             base::close(...future.stdout)
[13:36:49.891]         }, add = TRUE)
[13:36:49.891]     }
[13:36:49.891]     ...future.frame <- base::sys.nframe()
[13:36:49.891]     ...future.conditions <- base::list()
[13:36:49.891]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:49.891]     if (FALSE) {
[13:36:49.891]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:49.891]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:49.891]     }
[13:36:49.891]     ...future.result <- base::tryCatch({
[13:36:49.891]         base::withCallingHandlers({
[13:36:49.891]             ...future.value <- base::withVisible(base::local({
[13:36:49.891]                 ...future.makeSendCondition <- base::local({
[13:36:49.891]                   sendCondition <- NULL
[13:36:49.891]                   function(frame = 1L) {
[13:36:49.891]                     if (is.function(sendCondition)) 
[13:36:49.891]                       return(sendCondition)
[13:36:49.891]                     ns <- getNamespace("parallel")
[13:36:49.891]                     if (exists("sendData", mode = "function", 
[13:36:49.891]                       envir = ns)) {
[13:36:49.891]                       parallel_sendData <- get("sendData", mode = "function", 
[13:36:49.891]                         envir = ns)
[13:36:49.891]                       envir <- sys.frame(frame)
[13:36:49.891]                       master <- NULL
[13:36:49.891]                       while (!identical(envir, .GlobalEnv) && 
[13:36:49.891]                         !identical(envir, emptyenv())) {
[13:36:49.891]                         if (exists("master", mode = "list", envir = envir, 
[13:36:49.891]                           inherits = FALSE)) {
[13:36:49.891]                           master <- get("master", mode = "list", 
[13:36:49.891]                             envir = envir, inherits = FALSE)
[13:36:49.891]                           if (inherits(master, c("SOCKnode", 
[13:36:49.891]                             "SOCK0node"))) {
[13:36:49.891]                             sendCondition <<- function(cond) {
[13:36:49.891]                               data <- list(type = "VALUE", value = cond, 
[13:36:49.891]                                 success = TRUE)
[13:36:49.891]                               parallel_sendData(master, data)
[13:36:49.891]                             }
[13:36:49.891]                             return(sendCondition)
[13:36:49.891]                           }
[13:36:49.891]                         }
[13:36:49.891]                         frame <- frame + 1L
[13:36:49.891]                         envir <- sys.frame(frame)
[13:36:49.891]                       }
[13:36:49.891]                     }
[13:36:49.891]                     sendCondition <<- function(cond) NULL
[13:36:49.891]                   }
[13:36:49.891]                 })
[13:36:49.891]                 withCallingHandlers({
[13:36:49.891]                   {
[13:36:49.891]                     env[[b]]
[13:36:49.891]                   }
[13:36:49.891]                 }, immediateCondition = function(cond) {
[13:36:49.891]                   sendCondition <- ...future.makeSendCondition()
[13:36:49.891]                   sendCondition(cond)
[13:36:49.891]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:49.891]                   {
[13:36:49.891]                     inherits <- base::inherits
[13:36:49.891]                     invokeRestart <- base::invokeRestart
[13:36:49.891]                     is.null <- base::is.null
[13:36:49.891]                     muffled <- FALSE
[13:36:49.891]                     if (inherits(cond, "message")) {
[13:36:49.891]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:49.891]                       if (muffled) 
[13:36:49.891]                         invokeRestart("muffleMessage")
[13:36:49.891]                     }
[13:36:49.891]                     else if (inherits(cond, "warning")) {
[13:36:49.891]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:49.891]                       if (muffled) 
[13:36:49.891]                         invokeRestart("muffleWarning")
[13:36:49.891]                     }
[13:36:49.891]                     else if (inherits(cond, "condition")) {
[13:36:49.891]                       if (!is.null(pattern)) {
[13:36:49.891]                         computeRestarts <- base::computeRestarts
[13:36:49.891]                         grepl <- base::grepl
[13:36:49.891]                         restarts <- computeRestarts(cond)
[13:36:49.891]                         for (restart in restarts) {
[13:36:49.891]                           name <- restart$name
[13:36:49.891]                           if (is.null(name)) 
[13:36:49.891]                             next
[13:36:49.891]                           if (!grepl(pattern, name)) 
[13:36:49.891]                             next
[13:36:49.891]                           invokeRestart(restart)
[13:36:49.891]                           muffled <- TRUE
[13:36:49.891]                           break
[13:36:49.891]                         }
[13:36:49.891]                       }
[13:36:49.891]                     }
[13:36:49.891]                     invisible(muffled)
[13:36:49.891]                   }
[13:36:49.891]                   muffleCondition(cond)
[13:36:49.891]                 })
[13:36:49.891]             }))
[13:36:49.891]             future::FutureResult(value = ...future.value$value, 
[13:36:49.891]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:49.891]                   ...future.rng), globalenv = if (FALSE) 
[13:36:49.891]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:49.891]                     ...future.globalenv.names))
[13:36:49.891]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:49.891]         }, condition = base::local({
[13:36:49.891]             c <- base::c
[13:36:49.891]             inherits <- base::inherits
[13:36:49.891]             invokeRestart <- base::invokeRestart
[13:36:49.891]             length <- base::length
[13:36:49.891]             list <- base::list
[13:36:49.891]             seq.int <- base::seq.int
[13:36:49.891]             signalCondition <- base::signalCondition
[13:36:49.891]             sys.calls <- base::sys.calls
[13:36:49.891]             `[[` <- base::`[[`
[13:36:49.891]             `+` <- base::`+`
[13:36:49.891]             `<<-` <- base::`<<-`
[13:36:49.891]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:49.891]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:49.891]                   3L)]
[13:36:49.891]             }
[13:36:49.891]             function(cond) {
[13:36:49.891]                 is_error <- inherits(cond, "error")
[13:36:49.891]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:49.891]                   NULL)
[13:36:49.891]                 if (is_error) {
[13:36:49.891]                   sessionInformation <- function() {
[13:36:49.891]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:49.891]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:49.891]                       search = base::search(), system = base::Sys.info())
[13:36:49.891]                   }
[13:36:49.891]                   ...future.conditions[[length(...future.conditions) + 
[13:36:49.891]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:49.891]                     cond$call), session = sessionInformation(), 
[13:36:49.891]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:49.891]                   signalCondition(cond)
[13:36:49.891]                 }
[13:36:49.891]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:49.891]                 "immediateCondition"))) {
[13:36:49.891]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:49.891]                   ...future.conditions[[length(...future.conditions) + 
[13:36:49.891]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:49.891]                   if (TRUE && !signal) {
[13:36:49.891]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:49.891]                     {
[13:36:49.891]                       inherits <- base::inherits
[13:36:49.891]                       invokeRestart <- base::invokeRestart
[13:36:49.891]                       is.null <- base::is.null
[13:36:49.891]                       muffled <- FALSE
[13:36:49.891]                       if (inherits(cond, "message")) {
[13:36:49.891]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:49.891]                         if (muffled) 
[13:36:49.891]                           invokeRestart("muffleMessage")
[13:36:49.891]                       }
[13:36:49.891]                       else if (inherits(cond, "warning")) {
[13:36:49.891]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:49.891]                         if (muffled) 
[13:36:49.891]                           invokeRestart("muffleWarning")
[13:36:49.891]                       }
[13:36:49.891]                       else if (inherits(cond, "condition")) {
[13:36:49.891]                         if (!is.null(pattern)) {
[13:36:49.891]                           computeRestarts <- base::computeRestarts
[13:36:49.891]                           grepl <- base::grepl
[13:36:49.891]                           restarts <- computeRestarts(cond)
[13:36:49.891]                           for (restart in restarts) {
[13:36:49.891]                             name <- restart$name
[13:36:49.891]                             if (is.null(name)) 
[13:36:49.891]                               next
[13:36:49.891]                             if (!grepl(pattern, name)) 
[13:36:49.891]                               next
[13:36:49.891]                             invokeRestart(restart)
[13:36:49.891]                             muffled <- TRUE
[13:36:49.891]                             break
[13:36:49.891]                           }
[13:36:49.891]                         }
[13:36:49.891]                       }
[13:36:49.891]                       invisible(muffled)
[13:36:49.891]                     }
[13:36:49.891]                     muffleCondition(cond, pattern = "^muffle")
[13:36:49.891]                   }
[13:36:49.891]                 }
[13:36:49.891]                 else {
[13:36:49.891]                   if (TRUE) {
[13:36:49.891]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:49.891]                     {
[13:36:49.891]                       inherits <- base::inherits
[13:36:49.891]                       invokeRestart <- base::invokeRestart
[13:36:49.891]                       is.null <- base::is.null
[13:36:49.891]                       muffled <- FALSE
[13:36:49.891]                       if (inherits(cond, "message")) {
[13:36:49.891]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:49.891]                         if (muffled) 
[13:36:49.891]                           invokeRestart("muffleMessage")
[13:36:49.891]                       }
[13:36:49.891]                       else if (inherits(cond, "warning")) {
[13:36:49.891]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:49.891]                         if (muffled) 
[13:36:49.891]                           invokeRestart("muffleWarning")
[13:36:49.891]                       }
[13:36:49.891]                       else if (inherits(cond, "condition")) {
[13:36:49.891]                         if (!is.null(pattern)) {
[13:36:49.891]                           computeRestarts <- base::computeRestarts
[13:36:49.891]                           grepl <- base::grepl
[13:36:49.891]                           restarts <- computeRestarts(cond)
[13:36:49.891]                           for (restart in restarts) {
[13:36:49.891]                             name <- restart$name
[13:36:49.891]                             if (is.null(name)) 
[13:36:49.891]                               next
[13:36:49.891]                             if (!grepl(pattern, name)) 
[13:36:49.891]                               next
[13:36:49.891]                             invokeRestart(restart)
[13:36:49.891]                             muffled <- TRUE
[13:36:49.891]                             break
[13:36:49.891]                           }
[13:36:49.891]                         }
[13:36:49.891]                       }
[13:36:49.891]                       invisible(muffled)
[13:36:49.891]                     }
[13:36:49.891]                     muffleCondition(cond, pattern = "^muffle")
[13:36:49.891]                   }
[13:36:49.891]                 }
[13:36:49.891]             }
[13:36:49.891]         }))
[13:36:49.891]     }, error = function(ex) {
[13:36:49.891]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:49.891]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:49.891]                 ...future.rng), started = ...future.startTime, 
[13:36:49.891]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:49.891]             version = "1.8"), class = "FutureResult")
[13:36:49.891]     }, finally = {
[13:36:49.891]         if (!identical(...future.workdir, getwd())) 
[13:36:49.891]             setwd(...future.workdir)
[13:36:49.891]         {
[13:36:49.891]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:49.891]                 ...future.oldOptions$nwarnings <- NULL
[13:36:49.891]             }
[13:36:49.891]             base::options(...future.oldOptions)
[13:36:49.891]             if (.Platform$OS.type == "windows") {
[13:36:49.891]                 old_names <- names(...future.oldEnvVars)
[13:36:49.891]                 envs <- base::Sys.getenv()
[13:36:49.891]                 names <- names(envs)
[13:36:49.891]                 common <- intersect(names, old_names)
[13:36:49.891]                 added <- setdiff(names, old_names)
[13:36:49.891]                 removed <- setdiff(old_names, names)
[13:36:49.891]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:49.891]                   envs[common]]
[13:36:49.891]                 NAMES <- toupper(changed)
[13:36:49.891]                 args <- list()
[13:36:49.891]                 for (kk in seq_along(NAMES)) {
[13:36:49.891]                   name <- changed[[kk]]
[13:36:49.891]                   NAME <- NAMES[[kk]]
[13:36:49.891]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:49.891]                     next
[13:36:49.891]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:49.891]                 }
[13:36:49.891]                 NAMES <- toupper(added)
[13:36:49.891]                 for (kk in seq_along(NAMES)) {
[13:36:49.891]                   name <- added[[kk]]
[13:36:49.891]                   NAME <- NAMES[[kk]]
[13:36:49.891]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:49.891]                     next
[13:36:49.891]                   args[[name]] <- ""
[13:36:49.891]                 }
[13:36:49.891]                 NAMES <- toupper(removed)
[13:36:49.891]                 for (kk in seq_along(NAMES)) {
[13:36:49.891]                   name <- removed[[kk]]
[13:36:49.891]                   NAME <- NAMES[[kk]]
[13:36:49.891]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:49.891]                     next
[13:36:49.891]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:49.891]                 }
[13:36:49.891]                 if (length(args) > 0) 
[13:36:49.891]                   base::do.call(base::Sys.setenv, args = args)
[13:36:49.891]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:49.891]             }
[13:36:49.891]             else {
[13:36:49.891]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:49.891]             }
[13:36:49.891]             {
[13:36:49.891]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:49.891]                   0L) {
[13:36:49.891]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:49.891]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:49.891]                   base::options(opts)
[13:36:49.891]                 }
[13:36:49.891]                 {
[13:36:49.891]                   {
[13:36:49.891]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:49.891]                     NULL
[13:36:49.891]                   }
[13:36:49.891]                   options(future.plan = NULL)
[13:36:49.891]                   if (is.na(NA_character_)) 
[13:36:49.891]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:49.891]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:49.891]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:49.891]                     .init = FALSE)
[13:36:49.891]                 }
[13:36:49.891]             }
[13:36:49.891]         }
[13:36:49.891]     })
[13:36:49.891]     if (TRUE) {
[13:36:49.891]         base::sink(type = "output", split = FALSE)
[13:36:49.891]         if (TRUE) {
[13:36:49.891]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:49.891]         }
[13:36:49.891]         else {
[13:36:49.891]             ...future.result["stdout"] <- base::list(NULL)
[13:36:49.891]         }
[13:36:49.891]         base::close(...future.stdout)
[13:36:49.891]         ...future.stdout <- NULL
[13:36:49.891]     }
[13:36:49.891]     ...future.result$conditions <- ...future.conditions
[13:36:49.891]     ...future.result$finished <- base::Sys.time()
[13:36:49.891]     ...future.result
[13:36:49.891] }
[13:36:49.893] Exporting 2 global objects (4.29 KiB) to cluster node #1 ...
[13:36:49.894] Exporting ‘env’ (4.18 KiB) to cluster node #1 ...
[13:36:49.904] Exporting ‘env’ (4.18 KiB) to cluster node #1 ... DONE
[13:36:49.904] Exporting ‘b’ (112 bytes) to cluster node #1 ...
[13:36:49.905] Exporting ‘b’ (112 bytes) to cluster node #1 ... DONE
[13:36:49.905] Exporting 2 global objects (4.29 KiB) to cluster node #1 ... DONE
[13:36:49.905] MultisessionFuture started
[13:36:49.906] - Launch lazy future ... done
[13:36:49.906] run() for ‘MultisessionFuture’ ... done
> 
> ## Resolve future #3
> message(sprintf("y = %s\n", y))
[13:36:49.906] result() for ClusterFuture ...
[13:36:49.906] receiveMessageFromWorker() for ClusterFuture ...
[13:36:49.906] - Validating connection of MultisessionFuture
[13:36:49.949] - received message: FutureResult
[13:36:49.949] - Received FutureResult
[13:36:49.949] - Erased future from FutureRegistry
[13:36:49.949] result() for ClusterFuture ...
[13:36:49.949] - result already collected: FutureResult
[13:36:49.949] result() for ClusterFuture ... done
[13:36:49.950] receiveMessageFromWorker() for ClusterFuture ... done
[13:36:49.950] result() for ClusterFuture ... done
[13:36:49.950] result() for ClusterFuture ...
[13:36:49.950] - result already collected: FutureResult
[13:36:49.950] result() for ClusterFuture ... done
y = 5

> 
> ## Resolve future #1 if not already done
> str(as.list(env))
[13:36:49.950] result() for ClusterFuture ...
[13:36:49.950] - result already collected: FutureResult
[13:36:49.950] result() for ClusterFuture ... done
[13:36:49.951] result() for ClusterFuture ...
[13:36:49.951] - result already collected: FutureResult
[13:36:49.951] result() for ClusterFuture ... done
List of 1
 $ a: num 5
> 
> ## Create future #4
> ## Since future #1 is resolved it will work at this point
> y %<-% { env[[b]] }
Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[13:36:49.952] getGlobalsAndPackages() ...
[13:36:49.952] Searching for globals...
[13:36:49.953] - globals found: [4] ‘{’, ‘[[’, ‘env’, ‘b’
[13:36:49.953] Searching for globals ... DONE
[13:36:49.953] Resolving globals: TRUE
[13:36:49.953] Resolving any globals that are futures ...
[13:36:49.953] - globals: [4] ‘{’, ‘[[’, ‘env’, ‘b’
[13:36:49.953] Resolving any globals that are futures ... DONE
[13:36:49.954] Resolving futures part of globals (recursively) ...
[13:36:49.954] resolve() on list ...
[13:36:49.954]  recursive: 99
[13:36:49.954]  length: 2
[13:36:49.954]  elements: ‘env’, ‘b’
[13:36:49.954] resolve() on environment ...
[13:36:49.954]  recursive: 98
[13:36:49.955]  elements: [1] ‘a’
[13:36:49.955]  length: 0 (resolved future 1)
[13:36:49.955] resolve() on environment ... DONE
[13:36:49.955]  length: 1 (resolved future 1)
[13:36:49.955]  length: 0 (resolved future 2)
[13:36:49.955] resolve() on list ... DONE
[13:36:49.955] - globals: [2] ‘env’, ‘b’
[13:36:49.955] Resolving futures part of globals (recursively) ... DONE
[13:36:49.956] The total size of the 2 globals is 168 bytes (168 bytes)
[13:36:49.956] The total size of the 2 globals exported for future expression (‘{; env[[b]]; }’) is 168 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘b’ (112 bytes of class ‘character’) and ‘env’ (56 bytes of class ‘environment’)
[13:36:49.956] - globals: [2] ‘env’, ‘b’
[13:36:49.956] 
[13:36:49.956] getGlobalsAndPackages() ... DONE
[13:36:49.956] run() for ‘Future’ ...
[13:36:49.957] - state: ‘created’
[13:36:49.957] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:36:49.969] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:49.969] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:36:49.969]   - Field: ‘node’
[13:36:49.969]   - Field: ‘label’
[13:36:49.969]   - Field: ‘local’
[13:36:49.969]   - Field: ‘owner’
[13:36:49.969]   - Field: ‘envir’
[13:36:49.969]   - Field: ‘workers’
[13:36:49.969]   - Field: ‘packages’
[13:36:49.970]   - Field: ‘gc’
[13:36:49.970]   - Field: ‘conditions’
[13:36:49.970]   - Field: ‘persistent’
[13:36:49.970]   - Field: ‘expr’
[13:36:49.970]   - Field: ‘uuid’
[13:36:49.970]   - Field: ‘seed’
[13:36:49.970]   - Field: ‘version’
[13:36:49.970]   - Field: ‘result’
[13:36:49.970]   - Field: ‘asynchronous’
[13:36:49.970]   - Field: ‘calls’
[13:36:49.970]   - Field: ‘globals’
[13:36:49.971]   - Field: ‘stdout’
[13:36:49.971]   - Field: ‘earlySignal’
[13:36:49.971]   - Field: ‘lazy’
[13:36:49.971]   - Field: ‘state’
[13:36:49.971] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:36:49.971] - Launch lazy future ...
[13:36:49.971] Packages needed by the future expression (n = 0): <none>
[13:36:49.971] Packages needed by future strategies (n = 0): <none>
[13:36:49.972] {
[13:36:49.972]     {
[13:36:49.972]         {
[13:36:49.972]             ...future.startTime <- base::Sys.time()
[13:36:49.972]             {
[13:36:49.972]                 {
[13:36:49.972]                   {
[13:36:49.972]                     {
[13:36:49.972]                       base::local({
[13:36:49.972]                         has_future <- base::requireNamespace("future", 
[13:36:49.972]                           quietly = TRUE)
[13:36:49.972]                         if (has_future) {
[13:36:49.972]                           ns <- base::getNamespace("future")
[13:36:49.972]                           version <- ns[[".package"]][["version"]]
[13:36:49.972]                           if (is.null(version)) 
[13:36:49.972]                             version <- utils::packageVersion("future")
[13:36:49.972]                         }
[13:36:49.972]                         else {
[13:36:49.972]                           version <- NULL
[13:36:49.972]                         }
[13:36:49.972]                         if (!has_future || version < "1.8.0") {
[13:36:49.972]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:49.972]                             "", base::R.version$version.string), 
[13:36:49.972]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:49.972]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:49.972]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:49.972]                               "release", "version")], collapse = " "), 
[13:36:49.972]                             hostname = base::Sys.info()[["nodename"]])
[13:36:49.972]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:49.972]                             info)
[13:36:49.972]                           info <- base::paste(info, collapse = "; ")
[13:36:49.972]                           if (!has_future) {
[13:36:49.972]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:49.972]                               info)
[13:36:49.972]                           }
[13:36:49.972]                           else {
[13:36:49.972]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:49.972]                               info, version)
[13:36:49.972]                           }
[13:36:49.972]                           base::stop(msg)
[13:36:49.972]                         }
[13:36:49.972]                       })
[13:36:49.972]                     }
[13:36:49.972]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:49.972]                     base::options(mc.cores = 1L)
[13:36:49.972]                   }
[13:36:49.972]                   ...future.strategy.old <- future::plan("list")
[13:36:49.972]                   options(future.plan = NULL)
[13:36:49.972]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:49.972]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:49.972]                 }
[13:36:49.972]                 ...future.workdir <- getwd()
[13:36:49.972]             }
[13:36:49.972]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:49.972]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:49.972]         }
[13:36:49.972]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:49.972]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:49.972]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:49.972]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[13:36:49.972]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:49.972]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:49.972]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:49.972]             base::names(...future.oldOptions))
[13:36:49.972]     }
[13:36:49.972]     if (FALSE) {
[13:36:49.972]     }
[13:36:49.972]     else {
[13:36:49.972]         if (TRUE) {
[13:36:49.972]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:49.972]                 open = "w")
[13:36:49.972]         }
[13:36:49.972]         else {
[13:36:49.972]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:49.972]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:49.972]         }
[13:36:49.972]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:49.972]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:49.972]             base::sink(type = "output", split = FALSE)
[13:36:49.972]             base::close(...future.stdout)
[13:36:49.972]         }, add = TRUE)
[13:36:49.972]     }
[13:36:49.972]     ...future.frame <- base::sys.nframe()
[13:36:49.972]     ...future.conditions <- base::list()
[13:36:49.972]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:49.972]     if (FALSE) {
[13:36:49.972]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:49.972]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:49.972]     }
[13:36:49.972]     ...future.result <- base::tryCatch({
[13:36:49.972]         base::withCallingHandlers({
[13:36:49.972]             ...future.value <- base::withVisible(base::local({
[13:36:49.972]                 ...future.makeSendCondition <- base::local({
[13:36:49.972]                   sendCondition <- NULL
[13:36:49.972]                   function(frame = 1L) {
[13:36:49.972]                     if (is.function(sendCondition)) 
[13:36:49.972]                       return(sendCondition)
[13:36:49.972]                     ns <- getNamespace("parallel")
[13:36:49.972]                     if (exists("sendData", mode = "function", 
[13:36:49.972]                       envir = ns)) {
[13:36:49.972]                       parallel_sendData <- get("sendData", mode = "function", 
[13:36:49.972]                         envir = ns)
[13:36:49.972]                       envir <- sys.frame(frame)
[13:36:49.972]                       master <- NULL
[13:36:49.972]                       while (!identical(envir, .GlobalEnv) && 
[13:36:49.972]                         !identical(envir, emptyenv())) {
[13:36:49.972]                         if (exists("master", mode = "list", envir = envir, 
[13:36:49.972]                           inherits = FALSE)) {
[13:36:49.972]                           master <- get("master", mode = "list", 
[13:36:49.972]                             envir = envir, inherits = FALSE)
[13:36:49.972]                           if (inherits(master, c("SOCKnode", 
[13:36:49.972]                             "SOCK0node"))) {
[13:36:49.972]                             sendCondition <<- function(cond) {
[13:36:49.972]                               data <- list(type = "VALUE", value = cond, 
[13:36:49.972]                                 success = TRUE)
[13:36:49.972]                               parallel_sendData(master, data)
[13:36:49.972]                             }
[13:36:49.972]                             return(sendCondition)
[13:36:49.972]                           }
[13:36:49.972]                         }
[13:36:49.972]                         frame <- frame + 1L
[13:36:49.972]                         envir <- sys.frame(frame)
[13:36:49.972]                       }
[13:36:49.972]                     }
[13:36:49.972]                     sendCondition <<- function(cond) NULL
[13:36:49.972]                   }
[13:36:49.972]                 })
[13:36:49.972]                 withCallingHandlers({
[13:36:49.972]                   {
[13:36:49.972]                     env[[b]]
[13:36:49.972]                   }
[13:36:49.972]                 }, immediateCondition = function(cond) {
[13:36:49.972]                   sendCondition <- ...future.makeSendCondition()
[13:36:49.972]                   sendCondition(cond)
[13:36:49.972]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:49.972]                   {
[13:36:49.972]                     inherits <- base::inherits
[13:36:49.972]                     invokeRestart <- base::invokeRestart
[13:36:49.972]                     is.null <- base::is.null
[13:36:49.972]                     muffled <- FALSE
[13:36:49.972]                     if (inherits(cond, "message")) {
[13:36:49.972]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:49.972]                       if (muffled) 
[13:36:49.972]                         invokeRestart("muffleMessage")
[13:36:49.972]                     }
[13:36:49.972]                     else if (inherits(cond, "warning")) {
[13:36:49.972]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:49.972]                       if (muffled) 
[13:36:49.972]                         invokeRestart("muffleWarning")
[13:36:49.972]                     }
[13:36:49.972]                     else if (inherits(cond, "condition")) {
[13:36:49.972]                       if (!is.null(pattern)) {
[13:36:49.972]                         computeRestarts <- base::computeRestarts
[13:36:49.972]                         grepl <- base::grepl
[13:36:49.972]                         restarts <- computeRestarts(cond)
[13:36:49.972]                         for (restart in restarts) {
[13:36:49.972]                           name <- restart$name
[13:36:49.972]                           if (is.null(name)) 
[13:36:49.972]                             next
[13:36:49.972]                           if (!grepl(pattern, name)) 
[13:36:49.972]                             next
[13:36:49.972]                           invokeRestart(restart)
[13:36:49.972]                           muffled <- TRUE
[13:36:49.972]                           break
[13:36:49.972]                         }
[13:36:49.972]                       }
[13:36:49.972]                     }
[13:36:49.972]                     invisible(muffled)
[13:36:49.972]                   }
[13:36:49.972]                   muffleCondition(cond)
[13:36:49.972]                 })
[13:36:49.972]             }))
[13:36:49.972]             future::FutureResult(value = ...future.value$value, 
[13:36:49.972]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:49.972]                   ...future.rng), globalenv = if (FALSE) 
[13:36:49.972]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:49.972]                     ...future.globalenv.names))
[13:36:49.972]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:49.972]         }, condition = base::local({
[13:36:49.972]             c <- base::c
[13:36:49.972]             inherits <- base::inherits
[13:36:49.972]             invokeRestart <- base::invokeRestart
[13:36:49.972]             length <- base::length
[13:36:49.972]             list <- base::list
[13:36:49.972]             seq.int <- base::seq.int
[13:36:49.972]             signalCondition <- base::signalCondition
[13:36:49.972]             sys.calls <- base::sys.calls
[13:36:49.972]             `[[` <- base::`[[`
[13:36:49.972]             `+` <- base::`+`
[13:36:49.972]             `<<-` <- base::`<<-`
[13:36:49.972]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:49.972]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:49.972]                   3L)]
[13:36:49.972]             }
[13:36:49.972]             function(cond) {
[13:36:49.972]                 is_error <- inherits(cond, "error")
[13:36:49.972]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:49.972]                   NULL)
[13:36:49.972]                 if (is_error) {
[13:36:49.972]                   sessionInformation <- function() {
[13:36:49.972]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:49.972]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:49.972]                       search = base::search(), system = base::Sys.info())
[13:36:49.972]                   }
[13:36:49.972]                   ...future.conditions[[length(...future.conditions) + 
[13:36:49.972]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:49.972]                     cond$call), session = sessionInformation(), 
[13:36:49.972]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:49.972]                   signalCondition(cond)
[13:36:49.972]                 }
[13:36:49.972]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:49.972]                 "immediateCondition"))) {
[13:36:49.972]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:49.972]                   ...future.conditions[[length(...future.conditions) + 
[13:36:49.972]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:49.972]                   if (TRUE && !signal) {
[13:36:49.972]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:49.972]                     {
[13:36:49.972]                       inherits <- base::inherits
[13:36:49.972]                       invokeRestart <- base::invokeRestart
[13:36:49.972]                       is.null <- base::is.null
[13:36:49.972]                       muffled <- FALSE
[13:36:49.972]                       if (inherits(cond, "message")) {
[13:36:49.972]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:49.972]                         if (muffled) 
[13:36:49.972]                           invokeRestart("muffleMessage")
[13:36:49.972]                       }
[13:36:49.972]                       else if (inherits(cond, "warning")) {
[13:36:49.972]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:49.972]                         if (muffled) 
[13:36:49.972]                           invokeRestart("muffleWarning")
[13:36:49.972]                       }
[13:36:49.972]                       else if (inherits(cond, "condition")) {
[13:36:49.972]                         if (!is.null(pattern)) {
[13:36:49.972]                           computeRestarts <- base::computeRestarts
[13:36:49.972]                           grepl <- base::grepl
[13:36:49.972]                           restarts <- computeRestarts(cond)
[13:36:49.972]                           for (restart in restarts) {
[13:36:49.972]                             name <- restart$name
[13:36:49.972]                             if (is.null(name)) 
[13:36:49.972]                               next
[13:36:49.972]                             if (!grepl(pattern, name)) 
[13:36:49.972]                               next
[13:36:49.972]                             invokeRestart(restart)
[13:36:49.972]                             muffled <- TRUE
[13:36:49.972]                             break
[13:36:49.972]                           }
[13:36:49.972]                         }
[13:36:49.972]                       }
[13:36:49.972]                       invisible(muffled)
[13:36:49.972]                     }
[13:36:49.972]                     muffleCondition(cond, pattern = "^muffle")
[13:36:49.972]                   }
[13:36:49.972]                 }
[13:36:49.972]                 else {
[13:36:49.972]                   if (TRUE) {
[13:36:49.972]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:49.972]                     {
[13:36:49.972]                       inherits <- base::inherits
[13:36:49.972]                       invokeRestart <- base::invokeRestart
[13:36:49.972]                       is.null <- base::is.null
[13:36:49.972]                       muffled <- FALSE
[13:36:49.972]                       if (inherits(cond, "message")) {
[13:36:49.972]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:49.972]                         if (muffled) 
[13:36:49.972]                           invokeRestart("muffleMessage")
[13:36:49.972]                       }
[13:36:49.972]                       else if (inherits(cond, "warning")) {
[13:36:49.972]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:49.972]                         if (muffled) 
[13:36:49.972]                           invokeRestart("muffleWarning")
[13:36:49.972]                       }
[13:36:49.972]                       else if (inherits(cond, "condition")) {
[13:36:49.972]                         if (!is.null(pattern)) {
[13:36:49.972]                           computeRestarts <- base::computeRestarts
[13:36:49.972]                           grepl <- base::grepl
[13:36:49.972]                           restarts <- computeRestarts(cond)
[13:36:49.972]                           for (restart in restarts) {
[13:36:49.972]                             name <- restart$name
[13:36:49.972]                             if (is.null(name)) 
[13:36:49.972]                               next
[13:36:49.972]                             if (!grepl(pattern, name)) 
[13:36:49.972]                               next
[13:36:49.972]                             invokeRestart(restart)
[13:36:49.972]                             muffled <- TRUE
[13:36:49.972]                             break
[13:36:49.972]                           }
[13:36:49.972]                         }
[13:36:49.972]                       }
[13:36:49.972]                       invisible(muffled)
[13:36:49.972]                     }
[13:36:49.972]                     muffleCondition(cond, pattern = "^muffle")
[13:36:49.972]                   }
[13:36:49.972]                 }
[13:36:49.972]             }
[13:36:49.972]         }))
[13:36:49.972]     }, error = function(ex) {
[13:36:49.972]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:49.972]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:49.972]                 ...future.rng), started = ...future.startTime, 
[13:36:49.972]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:49.972]             version = "1.8"), class = "FutureResult")
[13:36:49.972]     }, finally = {
[13:36:49.972]         if (!identical(...future.workdir, getwd())) 
[13:36:49.972]             setwd(...future.workdir)
[13:36:49.972]         {
[13:36:49.972]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:49.972]                 ...future.oldOptions$nwarnings <- NULL
[13:36:49.972]             }
[13:36:49.972]             base::options(...future.oldOptions)
[13:36:49.972]             if (.Platform$OS.type == "windows") {
[13:36:49.972]                 old_names <- names(...future.oldEnvVars)
[13:36:49.972]                 envs <- base::Sys.getenv()
[13:36:49.972]                 names <- names(envs)
[13:36:49.972]                 common <- intersect(names, old_names)
[13:36:49.972]                 added <- setdiff(names, old_names)
[13:36:49.972]                 removed <- setdiff(old_names, names)
[13:36:49.972]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:49.972]                   envs[common]]
[13:36:49.972]                 NAMES <- toupper(changed)
[13:36:49.972]                 args <- list()
[13:36:49.972]                 for (kk in seq_along(NAMES)) {
[13:36:49.972]                   name <- changed[[kk]]
[13:36:49.972]                   NAME <- NAMES[[kk]]
[13:36:49.972]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:49.972]                     next
[13:36:49.972]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:49.972]                 }
[13:36:49.972]                 NAMES <- toupper(added)
[13:36:49.972]                 for (kk in seq_along(NAMES)) {
[13:36:49.972]                   name <- added[[kk]]
[13:36:49.972]                   NAME <- NAMES[[kk]]
[13:36:49.972]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:49.972]                     next
[13:36:49.972]                   args[[name]] <- ""
[13:36:49.972]                 }
[13:36:49.972]                 NAMES <- toupper(removed)
[13:36:49.972]                 for (kk in seq_along(NAMES)) {
[13:36:49.972]                   name <- removed[[kk]]
[13:36:49.972]                   NAME <- NAMES[[kk]]
[13:36:49.972]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:49.972]                     next
[13:36:49.972]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:49.972]                 }
[13:36:49.972]                 if (length(args) > 0) 
[13:36:49.972]                   base::do.call(base::Sys.setenv, args = args)
[13:36:49.972]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:49.972]             }
[13:36:49.972]             else {
[13:36:49.972]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:49.972]             }
[13:36:49.972]             {
[13:36:49.972]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:49.972]                   0L) {
[13:36:49.972]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:49.972]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:49.972]                   base::options(opts)
[13:36:49.972]                 }
[13:36:49.972]                 {
[13:36:49.972]                   {
[13:36:49.972]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:49.972]                     NULL
[13:36:49.972]                   }
[13:36:49.972]                   options(future.plan = NULL)
[13:36:49.972]                   if (is.na(NA_character_)) 
[13:36:49.972]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:49.972]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:49.972]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:49.972]                     .init = FALSE)
[13:36:49.972]                 }
[13:36:49.972]             }
[13:36:49.972]         }
[13:36:49.972]     })
[13:36:49.972]     if (TRUE) {
[13:36:49.972]         base::sink(type = "output", split = FALSE)
[13:36:49.972]         if (TRUE) {
[13:36:49.972]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:49.972]         }
[13:36:49.972]         else {
[13:36:49.972]             ...future.result["stdout"] <- base::list(NULL)
[13:36:49.972]         }
[13:36:49.972]         base::close(...future.stdout)
[13:36:49.972]         ...future.stdout <- NULL
[13:36:49.972]     }
[13:36:49.972]     ...future.result$conditions <- ...future.conditions
[13:36:49.972]     ...future.result$finished <- base::Sys.time()
[13:36:49.972]     ...future.result
[13:36:49.972] }
[13:36:49.974] Exporting 2 global objects (168 bytes) to cluster node #1 ...
[13:36:49.974] Exporting ‘env’ (56 bytes) to cluster node #1 ...
[13:36:49.975] Exporting ‘env’ (56 bytes) to cluster node #1 ... DONE
[13:36:49.975] Exporting ‘b’ (112 bytes) to cluster node #1 ...
[13:36:49.975] Exporting ‘b’ (112 bytes) to cluster node #1 ... DONE
[13:36:49.975] Exporting 2 global objects (168 bytes) to cluster node #1 ... DONE
[13:36:49.976] MultisessionFuture started
[13:36:49.976] - Launch lazy future ... done
[13:36:49.976] run() for ‘MultisessionFuture’ ... done
> ## Resolve future #4
> message(sprintf("y = %s\n", y))
[13:36:49.976] result() for ClusterFuture ...
[13:36:49.976] receiveMessageFromWorker() for ClusterFuture ...
[13:36:49.977] - Validating connection of MultisessionFuture
[13:36:50.020] - received message: FutureResult
[13:36:50.020] - Received FutureResult
[13:36:50.020] - Erased future from FutureRegistry
[13:36:50.020] result() for ClusterFuture ...
[13:36:50.020] - result already collected: FutureResult
[13:36:50.021] result() for ClusterFuture ... done
[13:36:50.021] receiveMessageFromWorker() for ClusterFuture ... done
[13:36:50.021] result() for ClusterFuture ... done
[13:36:50.021] result() for ClusterFuture ...
[13:36:50.021] - result already collected: FutureResult
[13:36:50.021] result() for ClusterFuture ... done
y = 5

> 
> message("*** Tricky use cases related to globals (part 2) ... DONE")
*** Tricky use cases related to globals (part 2) ... DONE
> 
> ## Cleanup
> setTimeLimit()
> source("incl/end.R")
[13:36:50.022] plan(): Setting new future strategy stack:
[13:36:50.022] List of future strategies:
[13:36:50.022] 1. FutureStrategy:
[13:36:50.022]    - args: function (..., envir = parent.frame())
[13:36:50.022]    - tweaked: FALSE
[13:36:50.022]    - call: future::plan(oplan)
[13:36:50.023] plan(): nbrOfWorkers() = 1
> 
