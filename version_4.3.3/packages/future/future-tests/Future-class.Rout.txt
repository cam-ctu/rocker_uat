
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[16:20:28.223] plan(): Setting new future strategy stack:
[16:20:28.224] List of future strategies:
[16:20:28.224] 1. sequential:
[16:20:28.224]    - args: function (..., envir = parent.frame())
[16:20:28.224]    - tweaked: FALSE
[16:20:28.224]    - call: future::plan("sequential")
[16:20:28.239] plan(): nbrOfWorkers() = 1
> 
> message("*** Future class ...")
*** Future class ...
> 
> message("*** Future class - exception ...")
*** Future class - exception ...
> 
> f <- Future()
[16:20:28.250] getGlobalsAndPackages() ...
[16:20:28.250] 
[16:20:28.251] - globals: [0] <none>
[16:20:28.251] getGlobalsAndPackages() ... DONE
> print(f)
Future:
Label: ‘<none>’
Expression:
NULL
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 28ebb213-7157-0177-2c2f-da7eb4f10ed9
Class: ‘Future’, ‘environment’
> 
> res <- tryCatch(value(f), error = identity)
[16:20:28.252] run() for ‘Future’ ...
[16:20:28.252] - state: ‘created’
[16:20:28.253] run() for ‘Future’ ... done
> print(res)
<simpleError: ‘future$lazy’ is not TRUE>
> stopifnot(inherits(res, "error"))
> 
> ## Invalid seed
> res <- tryCatch(f <- Future(42, seed = 1:2), error = identity)
> stopifnot(inherits(res, "error"))
> 
> ## When no packages are exported
> foo <- structure(function(...) { Future(1) }, class = "future")
> plan(foo)
[16:20:28.256] plan(): Setting new future strategy stack:
[16:20:28.256] List of future strategies:
[16:20:28.256] 1. future:
[16:20:28.256]    - args: function (...)
[16:20:28.256]    - tweaked: FALSE
[16:20:28.256]    - call: plan(foo)
[16:20:28.267] plan(): nbrOfWorkers() = Inf
> f <- Future()
[16:20:28.267] getGlobalsAndPackages() ...
[16:20:28.267] 
[16:20:28.267] - globals: [0] <none>
[16:20:28.267] getGlobalsAndPackages() ... DONE
> expr <- getExpression(f)
[16:20:28.268] Packages needed by the future expression (n = 0): <none>
[16:20:28.268] Packages needed by future strategies (n = 0): <none>
[16:20:28.269] {
[16:20:28.269]     {
[16:20:28.269]         {
[16:20:28.269]             ...future.startTime <- base::Sys.time()
[16:20:28.269]             {
[16:20:28.269]                 {
[16:20:28.269]                   {
[16:20:28.269]                     base::local({
[16:20:28.269]                       has_future <- base::requireNamespace("future", 
[16:20:28.269]                         quietly = TRUE)
[16:20:28.269]                       if (has_future) {
[16:20:28.269]                         ns <- base::getNamespace("future")
[16:20:28.269]                         version <- ns[[".package"]][["version"]]
[16:20:28.269]                         if (is.null(version)) 
[16:20:28.269]                           version <- utils::packageVersion("future")
[16:20:28.269]                       }
[16:20:28.269]                       else {
[16:20:28.269]                         version <- NULL
[16:20:28.269]                       }
[16:20:28.269]                       if (!has_future || version < "1.8.0") {
[16:20:28.269]                         info <- base::c(r_version = base::gsub("R version ", 
[16:20:28.269]                           "", base::R.version$version.string), 
[16:20:28.269]                           platform = base::sprintf("%s (%s-bit)", 
[16:20:28.269]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:28.269]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:28.269]                             "release", "version")], collapse = " "), 
[16:20:28.269]                           hostname = base::Sys.info()[["nodename"]])
[16:20:28.269]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:20:28.269]                           info)
[16:20:28.269]                         info <- base::paste(info, collapse = "; ")
[16:20:28.269]                         if (!has_future) {
[16:20:28.269]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:28.269]                             info)
[16:20:28.269]                         }
[16:20:28.269]                         else {
[16:20:28.269]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:28.269]                             info, version)
[16:20:28.269]                         }
[16:20:28.269]                         base::stop(msg)
[16:20:28.269]                       }
[16:20:28.269]                     })
[16:20:28.269]                   }
[16:20:28.269]                   ...future.strategy.old <- future::plan("list")
[16:20:28.269]                   options(future.plan = NULL)
[16:20:28.269]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:28.269]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:28.269]                 }
[16:20:28.269]                 ...future.workdir <- getwd()
[16:20:28.269]             }
[16:20:28.269]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:28.269]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:28.269]         }
[16:20:28.269]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:28.269]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:28.269]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:28.269]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:28.269]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:28.269]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:28.269]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:28.269]             base::names(...future.oldOptions))
[16:20:28.269]     }
[16:20:28.269]     if (FALSE) {
[16:20:28.269]     }
[16:20:28.269]     else {
[16:20:28.269]         if (TRUE) {
[16:20:28.269]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:28.269]                 open = "w")
[16:20:28.269]         }
[16:20:28.269]         else {
[16:20:28.269]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:28.269]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:28.269]         }
[16:20:28.269]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:28.269]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:28.269]             base::sink(type = "output", split = FALSE)
[16:20:28.269]             base::close(...future.stdout)
[16:20:28.269]         }, add = TRUE)
[16:20:28.269]     }
[16:20:28.269]     ...future.frame <- base::sys.nframe()
[16:20:28.269]     ...future.conditions <- base::list()
[16:20:28.269]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:28.269]     if (FALSE) {
[16:20:28.269]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:28.269]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:28.269]     }
[16:20:28.269]     ...future.result <- base::tryCatch({
[16:20:28.269]         base::withCallingHandlers({
[16:20:28.269]             ...future.value <- base::withVisible(base::local(NULL))
[16:20:28.269]             future::FutureResult(value = ...future.value$value, 
[16:20:28.269]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:28.269]                   ...future.rng), globalenv = if (FALSE) 
[16:20:28.269]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:28.269]                     ...future.globalenv.names))
[16:20:28.269]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:28.269]         }, condition = base::local({
[16:20:28.269]             c <- base::c
[16:20:28.269]             inherits <- base::inherits
[16:20:28.269]             invokeRestart <- base::invokeRestart
[16:20:28.269]             length <- base::length
[16:20:28.269]             list <- base::list
[16:20:28.269]             seq.int <- base::seq.int
[16:20:28.269]             signalCondition <- base::signalCondition
[16:20:28.269]             sys.calls <- base::sys.calls
[16:20:28.269]             `[[` <- base::`[[`
[16:20:28.269]             `+` <- base::`+`
[16:20:28.269]             `<<-` <- base::`<<-`
[16:20:28.269]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:28.269]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:28.269]                   3L)]
[16:20:28.269]             }
[16:20:28.269]             function(cond) {
[16:20:28.269]                 is_error <- inherits(cond, "error")
[16:20:28.269]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:28.269]                   NULL)
[16:20:28.269]                 if (is_error) {
[16:20:28.269]                   sessionInformation <- function() {
[16:20:28.269]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:28.269]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:28.269]                       search = base::search(), system = base::Sys.info())
[16:20:28.269]                   }
[16:20:28.269]                   ...future.conditions[[length(...future.conditions) + 
[16:20:28.269]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:28.269]                     cond$call), session = sessionInformation(), 
[16:20:28.269]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:28.269]                   signalCondition(cond)
[16:20:28.269]                 }
[16:20:28.269]                 else if (!ignore && TRUE && inherits(cond, "condition")) {
[16:20:28.269]                   signal <- FALSE && inherits(cond, character(0))
[16:20:28.269]                   ...future.conditions[[length(...future.conditions) + 
[16:20:28.269]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:28.269]                   if (FALSE && !signal) {
[16:20:28.269]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:28.269]                     {
[16:20:28.269]                       inherits <- base::inherits
[16:20:28.269]                       invokeRestart <- base::invokeRestart
[16:20:28.269]                       is.null <- base::is.null
[16:20:28.269]                       muffled <- FALSE
[16:20:28.269]                       if (inherits(cond, "message")) {
[16:20:28.269]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:28.269]                         if (muffled) 
[16:20:28.269]                           invokeRestart("muffleMessage")
[16:20:28.269]                       }
[16:20:28.269]                       else if (inherits(cond, "warning")) {
[16:20:28.269]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:28.269]                         if (muffled) 
[16:20:28.269]                           invokeRestart("muffleWarning")
[16:20:28.269]                       }
[16:20:28.269]                       else if (inherits(cond, "condition")) {
[16:20:28.269]                         if (!is.null(pattern)) {
[16:20:28.269]                           computeRestarts <- base::computeRestarts
[16:20:28.269]                           grepl <- base::grepl
[16:20:28.269]                           restarts <- computeRestarts(cond)
[16:20:28.269]                           for (restart in restarts) {
[16:20:28.269]                             name <- restart$name
[16:20:28.269]                             if (is.null(name)) 
[16:20:28.269]                               next
[16:20:28.269]                             if (!grepl(pattern, name)) 
[16:20:28.269]                               next
[16:20:28.269]                             invokeRestart(restart)
[16:20:28.269]                             muffled <- TRUE
[16:20:28.269]                             break
[16:20:28.269]                           }
[16:20:28.269]                         }
[16:20:28.269]                       }
[16:20:28.269]                       invisible(muffled)
[16:20:28.269]                     }
[16:20:28.269]                     muffleCondition(cond, pattern = "^muffle")
[16:20:28.269]                   }
[16:20:28.269]                 }
[16:20:28.269]                 else {
[16:20:28.269]                   if (TRUE) {
[16:20:28.269]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:28.269]                     {
[16:20:28.269]                       inherits <- base::inherits
[16:20:28.269]                       invokeRestart <- base::invokeRestart
[16:20:28.269]                       is.null <- base::is.null
[16:20:28.269]                       muffled <- FALSE
[16:20:28.269]                       if (inherits(cond, "message")) {
[16:20:28.269]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:28.269]                         if (muffled) 
[16:20:28.269]                           invokeRestart("muffleMessage")
[16:20:28.269]                       }
[16:20:28.269]                       else if (inherits(cond, "warning")) {
[16:20:28.269]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:28.269]                         if (muffled) 
[16:20:28.269]                           invokeRestart("muffleWarning")
[16:20:28.269]                       }
[16:20:28.269]                       else if (inherits(cond, "condition")) {
[16:20:28.269]                         if (!is.null(pattern)) {
[16:20:28.269]                           computeRestarts <- base::computeRestarts
[16:20:28.269]                           grepl <- base::grepl
[16:20:28.269]                           restarts <- computeRestarts(cond)
[16:20:28.269]                           for (restart in restarts) {
[16:20:28.269]                             name <- restart$name
[16:20:28.269]                             if (is.null(name)) 
[16:20:28.269]                               next
[16:20:28.269]                             if (!grepl(pattern, name)) 
[16:20:28.269]                               next
[16:20:28.269]                             invokeRestart(restart)
[16:20:28.269]                             muffled <- TRUE
[16:20:28.269]                             break
[16:20:28.269]                           }
[16:20:28.269]                         }
[16:20:28.269]                       }
[16:20:28.269]                       invisible(muffled)
[16:20:28.269]                     }
[16:20:28.269]                     muffleCondition(cond, pattern = "^muffle")
[16:20:28.269]                   }
[16:20:28.269]                 }
[16:20:28.269]             }
[16:20:28.269]         }))
[16:20:28.269]     }, error = function(ex) {
[16:20:28.269]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:28.269]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:28.269]                 ...future.rng), started = ...future.startTime, 
[16:20:28.269]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:28.269]             version = "1.8"), class = "FutureResult")
[16:20:28.269]     }, finally = {
[16:20:28.269]         if (!identical(...future.workdir, getwd())) 
[16:20:28.269]             setwd(...future.workdir)
[16:20:28.269]         {
[16:20:28.269]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:28.269]                 ...future.oldOptions$nwarnings <- NULL
[16:20:28.269]             }
[16:20:28.269]             base::options(...future.oldOptions)
[16:20:28.269]             if (.Platform$OS.type == "windows") {
[16:20:28.269]                 old_names <- names(...future.oldEnvVars)
[16:20:28.269]                 envs <- base::Sys.getenv()
[16:20:28.269]                 names <- names(envs)
[16:20:28.269]                 common <- intersect(names, old_names)
[16:20:28.269]                 added <- setdiff(names, old_names)
[16:20:28.269]                 removed <- setdiff(old_names, names)
[16:20:28.269]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:28.269]                   envs[common]]
[16:20:28.269]                 NAMES <- toupper(changed)
[16:20:28.269]                 args <- list()
[16:20:28.269]                 for (kk in seq_along(NAMES)) {
[16:20:28.269]                   name <- changed[[kk]]
[16:20:28.269]                   NAME <- NAMES[[kk]]
[16:20:28.269]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:28.269]                     next
[16:20:28.269]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:28.269]                 }
[16:20:28.269]                 NAMES <- toupper(added)
[16:20:28.269]                 for (kk in seq_along(NAMES)) {
[16:20:28.269]                   name <- added[[kk]]
[16:20:28.269]                   NAME <- NAMES[[kk]]
[16:20:28.269]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:28.269]                     next
[16:20:28.269]                   args[[name]] <- ""
[16:20:28.269]                 }
[16:20:28.269]                 NAMES <- toupper(removed)
[16:20:28.269]                 for (kk in seq_along(NAMES)) {
[16:20:28.269]                   name <- removed[[kk]]
[16:20:28.269]                   NAME <- NAMES[[kk]]
[16:20:28.269]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:28.269]                     next
[16:20:28.269]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:28.269]                 }
[16:20:28.269]                 if (length(args) > 0) 
[16:20:28.269]                   base::do.call(base::Sys.setenv, args = args)
[16:20:28.269]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:28.269]             }
[16:20:28.269]             else {
[16:20:28.269]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:28.269]             }
[16:20:28.269]             {
[16:20:28.269]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:28.269]                   0L) {
[16:20:28.269]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:28.269]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:28.269]                   base::options(opts)
[16:20:28.269]                 }
[16:20:28.269]                 {
[16:20:28.269]                   NULL
[16:20:28.269]                   options(future.plan = NULL)
[16:20:28.269]                   if (is.na(NA_character_)) 
[16:20:28.269]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:28.269]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:28.269]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:28.269]                     .init = FALSE)
[16:20:28.269]                 }
[16:20:28.269]             }
[16:20:28.269]         }
[16:20:28.269]     })
[16:20:28.269]     if (TRUE) {
[16:20:28.269]         base::sink(type = "output", split = FALSE)
[16:20:28.269]         if (TRUE) {
[16:20:28.269]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:28.269]         }
[16:20:28.269]         else {
[16:20:28.269]             ...future.result["stdout"] <- base::list(NULL)
[16:20:28.269]         }
[16:20:28.269]         base::close(...future.stdout)
[16:20:28.269]         ...future.stdout <- NULL
[16:20:28.269]     }
[16:20:28.269]     ...future.result$conditions <- ...future.conditions
[16:20:28.269]     ...future.result$finished <- base::Sys.time()
[16:20:28.269]     ...future.result
[16:20:28.269] }
> print(expr)
{
    {
        {
            ...future.startTime <- base::Sys.time()
            {
                {
                  {
                    base::local({
                      has_future <- base::requireNamespace("future", 
                        quietly = TRUE)
                      if (has_future) {
                        ns <- base::getNamespace("future")
                        version <- ns[[".package"]][["version"]]
                        if (is.null(version)) 
                          version <- utils::packageVersion("future")
                      }
                      else {
                        version <- NULL
                      }
                      if (!has_future || version < "1.8.0") {
                        info <- base::c(r_version = base::gsub("R version ", 
                          "", base::R.version$version.string), 
                          platform = base::sprintf("%s (%s-bit)", 
                            base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
                          os = base::paste(base::Sys.info()[base::c("sysname", 
                            "release", "version")], collapse = " "), 
                          hostname = base::Sys.info()[["nodename"]])
                        info <- base::sprintf("%s: %s", base::names(info), 
                          info)
                        info <- base::paste(info, collapse = "; ")
                        if (!has_future) {
                          msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
                            info)
                        }
                        else {
                          msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
                            info, version)
                        }
                        base::stop(msg)
                      }
                    })
                  }
                  ...future.strategy.old <- future::plan("list")
                  options(future.plan = NULL)
                  Sys.unsetenv("R_FUTURE_PLAN")
                  future::plan("default", .cleanup = FALSE, .init = FALSE)
                }
                ...future.workdir <- getwd()
            }
            ...future.oldOptions <- base::as.list(base::.Options)
            ...future.oldEnvVars <- base::Sys.getenv()
        }
        base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
            future.globals.maxSize = NULL, future.globals.method = NULL, 
            future.globals.onMissing = NULL, future.globals.onReference = NULL, 
            future.globals.resolve = NULL, future.resolve.recursive = NULL, 
            future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
            future.stdout.windows.reencode = NULL, width = 80L)
        ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
            base::names(...future.oldOptions))
    }
    if (FALSE) {
    }
    else {
        if (TRUE) {
            ...future.stdout <- base::rawConnection(base::raw(0L), 
                open = "w")
        }
        else {
            ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
                windows = "NUL", "/dev/null"), open = "w")
        }
        base::sink(...future.stdout, type = "output", split = FALSE)
        base::on.exit(if (!base::is.null(...future.stdout)) {
            base::sink(type = "output", split = FALSE)
            base::close(...future.stdout)
        }, add = TRUE)
    }
    ...future.frame <- base::sys.nframe()
    ...future.conditions <- base::list()
    ...future.rng <- base::globalenv()$.Random.seed
    if (FALSE) {
        ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
            "...future.value", "...future.globalenv.names", ".Random.seed")
    }
    ...future.result <- base::tryCatch({
        base::withCallingHandlers({
            ...future.value <- base::withVisible(base::local(NULL))
            future::FutureResult(value = ...future.value$value, 
                visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
                  ...future.rng), globalenv = if (FALSE) 
                  list(added = base::setdiff(base::names(base::.GlobalEnv), 
                    ...future.globalenv.names))
                else NULL, started = ...future.startTime, version = "1.8")
        }, condition = base::local({
            c <- base::c
            inherits <- base::inherits
            invokeRestart <- base::invokeRestart
            length <- base::length
            list <- base::list
            seq.int <- base::seq.int
            signalCondition <- base::signalCondition
            sys.calls <- base::sys.calls
            `[[` <- base::`[[`
            `+` <- base::`+`
            `<<-` <- base::`<<-`
            sysCalls <- function(calls = sys.calls(), from = 1L) {
                calls[seq.int(from = from + 12L, to = length(calls) - 
                  3L)]
            }
            function(cond) {
                is_error <- inherits(cond, "error")
                ignore <- !is_error && !is.null(NULL) && inherits(cond, 
                  NULL)
                if (is_error) {
                  sessionInformation <- function() {
                    list(r = base::R.Version(), locale = base::Sys.getlocale(), 
                      rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
                      search = base::search(), system = base::Sys.info())
                  }
                  ...future.conditions[[length(...future.conditions) + 
                    1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
                    cond$call), session = sessionInformation(), 
                    timestamp = base::Sys.time(), signaled = 0L)
                  signalCondition(cond)
                }
                else if (!ignore && TRUE && inherits(cond, "condition")) {
                  signal <- FALSE && inherits(cond, character(0))
                  ...future.conditions[[length(...future.conditions) + 
                    1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
                  if (FALSE && !signal) {
                    muffleCondition <- function (cond, pattern = "^muffle") 
                    {
                      inherits <- base::inherits
                      invokeRestart <- base::invokeRestart
                      is.null <- base::is.null
                      muffled <- FALSE
                      if (inherits(cond, "message")) {
                        muffled <- grepl(pattern, "muffleMessage")
                        if (muffled) 
                          invokeRestart("muffleMessage")
                      }
                      else if (inherits(cond, "warning")) {
                        muffled <- grepl(pattern, "muffleWarning")
                        if (muffled) 
                          invokeRestart("muffleWarning")
                      }
                      else if (inherits(cond, "condition")) {
                        if (!is.null(pattern)) {
                          computeRestarts <- base::computeRestarts
                          grepl <- base::grepl
                          restarts <- computeRestarts(cond)
                          for (restart in restarts) {
                            name <- restart$name
                            if (is.null(name)) 
                              next
                            if (!grepl(pattern, name)) 
                              next
                            invokeRestart(restart)
                            muffled <- TRUE
                            break
                          }
                        }
                      }
                      invisible(muffled)
                    }
                    muffleCondition(cond, pattern = "^muffle")
                  }
                }
                else {
                  if (TRUE) {
                    muffleCondition <- function (cond, pattern = "^muffle") 
                    {
                      inherits <- base::inherits
                      invokeRestart <- base::invokeRestart
                      is.null <- base::is.null
                      muffled <- FALSE
                      if (inherits(cond, "message")) {
                        muffled <- grepl(pattern, "muffleMessage")
                        if (muffled) 
                          invokeRestart("muffleMessage")
                      }
                      else if (inherits(cond, "warning")) {
                        muffled <- grepl(pattern, "muffleWarning")
                        if (muffled) 
                          invokeRestart("muffleWarning")
                      }
                      else if (inherits(cond, "condition")) {
                        if (!is.null(pattern)) {
                          computeRestarts <- base::computeRestarts
                          grepl <- base::grepl
                          restarts <- computeRestarts(cond)
                          for (restart in restarts) {
                            name <- restart$name
                            if (is.null(name)) 
                              next
                            if (!grepl(pattern, name)) 
                              next
                            invokeRestart(restart)
                            muffled <- TRUE
                            break
                          }
                        }
                      }
                      invisible(muffled)
                    }
                    muffleCondition(cond, pattern = "^muffle")
                  }
                }
            }
        }))
    }, error = function(ex) {
        base::structure(base::list(value = NULL, visible = NULL, 
            conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
                ...future.rng), started = ...future.startTime, 
            finished = Sys.time(), session_uuid = NA_character_, 
            version = "1.8"), class = "FutureResult")
    }, finally = {
        if (!identical(...future.workdir, getwd())) 
            setwd(...future.workdir)
        {
            if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
                ...future.oldOptions$nwarnings <- NULL
            }
            base::options(...future.oldOptions)
            if (.Platform$OS.type == "windows") {
                old_names <- names(...future.oldEnvVars)
                envs <- base::Sys.getenv()
                names <- names(envs)
                common <- intersect(names, old_names)
                added <- setdiff(names, old_names)
                removed <- setdiff(old_names, names)
                changed <- common[...future.oldEnvVars[common] != 
                  envs[common]]
                NAMES <- toupper(changed)
                args <- list()
                for (kk in seq_along(NAMES)) {
                  name <- changed[[kk]]
                  NAME <- NAMES[[kk]]
                  if (name != NAME && is.element(NAME, old_names)) 
                    next
                  args[[name]] <- ...future.oldEnvVars[[name]]
                }
                NAMES <- toupper(added)
                for (kk in seq_along(NAMES)) {
                  name <- added[[kk]]
                  NAME <- NAMES[[kk]]
                  if (name != NAME && is.element(NAME, old_names)) 
                    next
                  args[[name]] <- ""
                }
                NAMES <- toupper(removed)
                for (kk in seq_along(NAMES)) {
                  name <- removed[[kk]]
                  NAME <- NAMES[[kk]]
                  if (name != NAME && is.element(NAME, old_names)) 
                    next
                  args[[name]] <- ...future.oldEnvVars[[name]]
                }
                if (length(args) > 0) 
                  base::do.call(base::Sys.setenv, args = args)
                args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
            }
            else {
                base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
            }
            {
                if (base::length(...future.futureOptionsAdded) > 
                  0L) {
                  opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
                  base::names(opts) <- ...future.futureOptionsAdded
                  base::options(opts)
                }
                {
                  NULL
                  options(future.plan = NULL)
                  if (is.na(NA_character_)) 
                    Sys.unsetenv("R_FUTURE_PLAN")
                  else Sys.setenv(R_FUTURE_PLAN = NA_character_)
                  future::plan(...future.strategy.old, .cleanup = FALSE, 
                    .init = FALSE)
                }
            }
        }
    })
    if (TRUE) {
        base::sink(type = "output", split = FALSE)
        if (TRUE) {
            ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
        }
        else {
            ...future.result["stdout"] <- base::list(NULL)
        }
        base::close(...future.stdout)
        ...future.stdout <- NULL
    }
    ...future.result$conditions <- ...future.conditions
    ...future.result$finished <- base::Sys.time()
    ...future.result
}
> stopifnot(is.call(expr))
> 
> clazzes <- list(
+   sequential = SequentialFuture,
+   multisession = function(...) MultisessionFuture(..., workers = 2L),
+   sequential = SequentialFuture
+ )
> if (supportsMulticore()) {
+   clazzes$multicore = function(...) MulticoreFuture(..., workers = 2L)
+ }
> 
> for (clazz in clazzes) {
+   ## Calling run() more than once
+   f <- clazz({ 42L })
+   print(f)
+   run(f)
+   res <- tryCatch(run(f), error = identity)
+   stopifnot(inherits(res, "error"))
+   v <- value(f)
+   print(v)
+   stopifnot(v == 42L)
+ 
+   ## Call value() without run()
+   f <- clazz({ 42L })
+   v <- value(f)
+   print(v)
+   stopifnot(v == 42L)
+ }
[16:20:28.281] getGlobalsAndPackages() ...
[16:20:28.282] Searching for globals...
[16:20:28.285] - globals found: [1] ‘{’
[16:20:28.285] Searching for globals ... DONE
[16:20:28.285] Resolving globals: FALSE
[16:20:28.286] 
[16:20:28.286] 
[16:20:28.286] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 28ebb213-7157-0177-2c2f-da7eb4f10ed9
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:20:28.287] Packages needed by the future expression (n = 0): <none>
[16:20:28.287] Packages needed by future strategies (n = 0): <none>
[16:20:28.287] {
[16:20:28.287]     {
[16:20:28.287]         {
[16:20:28.287]             ...future.startTime <- base::Sys.time()
[16:20:28.287]             {
[16:20:28.287]                 {
[16:20:28.287]                   {
[16:20:28.287]                     base::local({
[16:20:28.287]                       has_future <- base::requireNamespace("future", 
[16:20:28.287]                         quietly = TRUE)
[16:20:28.287]                       if (has_future) {
[16:20:28.287]                         ns <- base::getNamespace("future")
[16:20:28.287]                         version <- ns[[".package"]][["version"]]
[16:20:28.287]                         if (is.null(version)) 
[16:20:28.287]                           version <- utils::packageVersion("future")
[16:20:28.287]                       }
[16:20:28.287]                       else {
[16:20:28.287]                         version <- NULL
[16:20:28.287]                       }
[16:20:28.287]                       if (!has_future || version < "1.8.0") {
[16:20:28.287]                         info <- base::c(r_version = base::gsub("R version ", 
[16:20:28.287]                           "", base::R.version$version.string), 
[16:20:28.287]                           platform = base::sprintf("%s (%s-bit)", 
[16:20:28.287]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:28.287]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:28.287]                             "release", "version")], collapse = " "), 
[16:20:28.287]                           hostname = base::Sys.info()[["nodename"]])
[16:20:28.287]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:20:28.287]                           info)
[16:20:28.287]                         info <- base::paste(info, collapse = "; ")
[16:20:28.287]                         if (!has_future) {
[16:20:28.287]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:28.287]                             info)
[16:20:28.287]                         }
[16:20:28.287]                         else {
[16:20:28.287]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:28.287]                             info, version)
[16:20:28.287]                         }
[16:20:28.287]                         base::stop(msg)
[16:20:28.287]                       }
[16:20:28.287]                     })
[16:20:28.287]                   }
[16:20:28.287]                   ...future.strategy.old <- future::plan("list")
[16:20:28.287]                   options(future.plan = NULL)
[16:20:28.287]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:28.287]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:28.287]                 }
[16:20:28.287]                 ...future.workdir <- getwd()
[16:20:28.287]             }
[16:20:28.287]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:28.287]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:28.287]         }
[16:20:28.287]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:28.287]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:28.287]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:28.287]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:28.287]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:28.287]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:28.287]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:28.287]             base::names(...future.oldOptions))
[16:20:28.287]     }
[16:20:28.287]     if (FALSE) {
[16:20:28.287]     }
[16:20:28.287]     else {
[16:20:28.287]         if (TRUE) {
[16:20:28.287]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:28.287]                 open = "w")
[16:20:28.287]         }
[16:20:28.287]         else {
[16:20:28.287]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:28.287]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:28.287]         }
[16:20:28.287]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:28.287]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:28.287]             base::sink(type = "output", split = FALSE)
[16:20:28.287]             base::close(...future.stdout)
[16:20:28.287]         }, add = TRUE)
[16:20:28.287]     }
[16:20:28.287]     ...future.frame <- base::sys.nframe()
[16:20:28.287]     ...future.conditions <- base::list()
[16:20:28.287]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:28.287]     if (FALSE) {
[16:20:28.287]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:28.287]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:28.287]     }
[16:20:28.287]     ...future.result <- base::tryCatch({
[16:20:28.287]         base::withCallingHandlers({
[16:20:28.287]             ...future.value <- base::withVisible(base::local({
[16:20:28.287]                 42L
[16:20:28.287]             }))
[16:20:28.287]             future::FutureResult(value = ...future.value$value, 
[16:20:28.287]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:28.287]                   ...future.rng), globalenv = if (FALSE) 
[16:20:28.287]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:28.287]                     ...future.globalenv.names))
[16:20:28.287]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:28.287]         }, condition = base::local({
[16:20:28.287]             c <- base::c
[16:20:28.287]             inherits <- base::inherits
[16:20:28.287]             invokeRestart <- base::invokeRestart
[16:20:28.287]             length <- base::length
[16:20:28.287]             list <- base::list
[16:20:28.287]             seq.int <- base::seq.int
[16:20:28.287]             signalCondition <- base::signalCondition
[16:20:28.287]             sys.calls <- base::sys.calls
[16:20:28.287]             `[[` <- base::`[[`
[16:20:28.287]             `+` <- base::`+`
[16:20:28.287]             `<<-` <- base::`<<-`
[16:20:28.287]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:28.287]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:28.287]                   3L)]
[16:20:28.287]             }
[16:20:28.287]             function(cond) {
[16:20:28.287]                 is_error <- inherits(cond, "error")
[16:20:28.287]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:28.287]                   NULL)
[16:20:28.287]                 if (is_error) {
[16:20:28.287]                   sessionInformation <- function() {
[16:20:28.287]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:28.287]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:28.287]                       search = base::search(), system = base::Sys.info())
[16:20:28.287]                   }
[16:20:28.287]                   ...future.conditions[[length(...future.conditions) + 
[16:20:28.287]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:28.287]                     cond$call), session = sessionInformation(), 
[16:20:28.287]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:28.287]                   signalCondition(cond)
[16:20:28.287]                 }
[16:20:28.287]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:28.287]                 "immediateCondition"))) {
[16:20:28.287]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:28.287]                   ...future.conditions[[length(...future.conditions) + 
[16:20:28.287]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:28.287]                   if (TRUE && !signal) {
[16:20:28.287]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:28.287]                     {
[16:20:28.287]                       inherits <- base::inherits
[16:20:28.287]                       invokeRestart <- base::invokeRestart
[16:20:28.287]                       is.null <- base::is.null
[16:20:28.287]                       muffled <- FALSE
[16:20:28.287]                       if (inherits(cond, "message")) {
[16:20:28.287]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:28.287]                         if (muffled) 
[16:20:28.287]                           invokeRestart("muffleMessage")
[16:20:28.287]                       }
[16:20:28.287]                       else if (inherits(cond, "warning")) {
[16:20:28.287]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:28.287]                         if (muffled) 
[16:20:28.287]                           invokeRestart("muffleWarning")
[16:20:28.287]                       }
[16:20:28.287]                       else if (inherits(cond, "condition")) {
[16:20:28.287]                         if (!is.null(pattern)) {
[16:20:28.287]                           computeRestarts <- base::computeRestarts
[16:20:28.287]                           grepl <- base::grepl
[16:20:28.287]                           restarts <- computeRestarts(cond)
[16:20:28.287]                           for (restart in restarts) {
[16:20:28.287]                             name <- restart$name
[16:20:28.287]                             if (is.null(name)) 
[16:20:28.287]                               next
[16:20:28.287]                             if (!grepl(pattern, name)) 
[16:20:28.287]                               next
[16:20:28.287]                             invokeRestart(restart)
[16:20:28.287]                             muffled <- TRUE
[16:20:28.287]                             break
[16:20:28.287]                           }
[16:20:28.287]                         }
[16:20:28.287]                       }
[16:20:28.287]                       invisible(muffled)
[16:20:28.287]                     }
[16:20:28.287]                     muffleCondition(cond, pattern = "^muffle")
[16:20:28.287]                   }
[16:20:28.287]                 }
[16:20:28.287]                 else {
[16:20:28.287]                   if (TRUE) {
[16:20:28.287]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:28.287]                     {
[16:20:28.287]                       inherits <- base::inherits
[16:20:28.287]                       invokeRestart <- base::invokeRestart
[16:20:28.287]                       is.null <- base::is.null
[16:20:28.287]                       muffled <- FALSE
[16:20:28.287]                       if (inherits(cond, "message")) {
[16:20:28.287]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:28.287]                         if (muffled) 
[16:20:28.287]                           invokeRestart("muffleMessage")
[16:20:28.287]                       }
[16:20:28.287]                       else if (inherits(cond, "warning")) {
[16:20:28.287]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:28.287]                         if (muffled) 
[16:20:28.287]                           invokeRestart("muffleWarning")
[16:20:28.287]                       }
[16:20:28.287]                       else if (inherits(cond, "condition")) {
[16:20:28.287]                         if (!is.null(pattern)) {
[16:20:28.287]                           computeRestarts <- base::computeRestarts
[16:20:28.287]                           grepl <- base::grepl
[16:20:28.287]                           restarts <- computeRestarts(cond)
[16:20:28.287]                           for (restart in restarts) {
[16:20:28.287]                             name <- restart$name
[16:20:28.287]                             if (is.null(name)) 
[16:20:28.287]                               next
[16:20:28.287]                             if (!grepl(pattern, name)) 
[16:20:28.287]                               next
[16:20:28.287]                             invokeRestart(restart)
[16:20:28.287]                             muffled <- TRUE
[16:20:28.287]                             break
[16:20:28.287]                           }
[16:20:28.287]                         }
[16:20:28.287]                       }
[16:20:28.287]                       invisible(muffled)
[16:20:28.287]                     }
[16:20:28.287]                     muffleCondition(cond, pattern = "^muffle")
[16:20:28.287]                   }
[16:20:28.287]                 }
[16:20:28.287]             }
[16:20:28.287]         }))
[16:20:28.287]     }, error = function(ex) {
[16:20:28.287]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:28.287]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:28.287]                 ...future.rng), started = ...future.startTime, 
[16:20:28.287]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:28.287]             version = "1.8"), class = "FutureResult")
[16:20:28.287]     }, finally = {
[16:20:28.287]         if (!identical(...future.workdir, getwd())) 
[16:20:28.287]             setwd(...future.workdir)
[16:20:28.287]         {
[16:20:28.287]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:28.287]                 ...future.oldOptions$nwarnings <- NULL
[16:20:28.287]             }
[16:20:28.287]             base::options(...future.oldOptions)
[16:20:28.287]             if (.Platform$OS.type == "windows") {
[16:20:28.287]                 old_names <- names(...future.oldEnvVars)
[16:20:28.287]                 envs <- base::Sys.getenv()
[16:20:28.287]                 names <- names(envs)
[16:20:28.287]                 common <- intersect(names, old_names)
[16:20:28.287]                 added <- setdiff(names, old_names)
[16:20:28.287]                 removed <- setdiff(old_names, names)
[16:20:28.287]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:28.287]                   envs[common]]
[16:20:28.287]                 NAMES <- toupper(changed)
[16:20:28.287]                 args <- list()
[16:20:28.287]                 for (kk in seq_along(NAMES)) {
[16:20:28.287]                   name <- changed[[kk]]
[16:20:28.287]                   NAME <- NAMES[[kk]]
[16:20:28.287]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:28.287]                     next
[16:20:28.287]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:28.287]                 }
[16:20:28.287]                 NAMES <- toupper(added)
[16:20:28.287]                 for (kk in seq_along(NAMES)) {
[16:20:28.287]                   name <- added[[kk]]
[16:20:28.287]                   NAME <- NAMES[[kk]]
[16:20:28.287]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:28.287]                     next
[16:20:28.287]                   args[[name]] <- ""
[16:20:28.287]                 }
[16:20:28.287]                 NAMES <- toupper(removed)
[16:20:28.287]                 for (kk in seq_along(NAMES)) {
[16:20:28.287]                   name <- removed[[kk]]
[16:20:28.287]                   NAME <- NAMES[[kk]]
[16:20:28.287]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:28.287]                     next
[16:20:28.287]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:28.287]                 }
[16:20:28.287]                 if (length(args) > 0) 
[16:20:28.287]                   base::do.call(base::Sys.setenv, args = args)
[16:20:28.287]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:28.287]             }
[16:20:28.287]             else {
[16:20:28.287]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:28.287]             }
[16:20:28.287]             {
[16:20:28.287]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:28.287]                   0L) {
[16:20:28.287]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:28.287]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:28.287]                   base::options(opts)
[16:20:28.287]                 }
[16:20:28.287]                 {
[16:20:28.287]                   {
[16:20:28.287]                     NULL
[16:20:28.287]                     RNGkind("Mersenne-Twister")
[16:20:28.287]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:20:28.287]                       inherits = FALSE)
[16:20:28.287]                   }
[16:20:28.287]                   options(future.plan = NULL)
[16:20:28.287]                   if (is.na(NA_character_)) 
[16:20:28.287]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:28.287]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:28.287]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:28.287]                     .init = FALSE)
[16:20:28.287]                 }
[16:20:28.287]             }
[16:20:28.287]         }
[16:20:28.287]     })
[16:20:28.287]     if (TRUE) {
[16:20:28.287]         base::sink(type = "output", split = FALSE)
[16:20:28.287]         if (TRUE) {
[16:20:28.287]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:28.287]         }
[16:20:28.287]         else {
[16:20:28.287]             ...future.result["stdout"] <- base::list(NULL)
[16:20:28.287]         }
[16:20:28.287]         base::close(...future.stdout)
[16:20:28.287]         ...future.stdout <- NULL
[16:20:28.287]     }
[16:20:28.287]     ...future.result$conditions <- ...future.conditions
[16:20:28.287]     ...future.result$finished <- base::Sys.time()
[16:20:28.287]     ...future.result
[16:20:28.287] }
[16:20:28.289] plan(): Setting new future strategy stack:
[16:20:28.289] List of future strategies:
[16:20:28.289] 1. sequential:
[16:20:28.289]    - args: function (..., envir = parent.frame())
[16:20:28.289]    - tweaked: FALSE
[16:20:28.289]    - call: NULL
[16:20:28.290] plan(): nbrOfWorkers() = 1
[16:20:28.291] plan(): Setting new future strategy stack:
[16:20:28.291] List of future strategies:
[16:20:28.291] 1. future:
[16:20:28.291]    - args: function (...)
[16:20:28.291]    - tweaked: FALSE
[16:20:28.291]    - call: plan(foo)
[16:20:28.291] plan(): nbrOfWorkers() = Inf
[16:20:28.292] SequentialFuture started (and completed)
[1] 42
[16:20:28.292] getGlobalsAndPackages() ...
[16:20:28.292] Searching for globals...
[16:20:28.293] - globals found: [1] ‘{’
[16:20:28.293] Searching for globals ... DONE
[16:20:28.293] Resolving globals: FALSE
[16:20:28.293] 
[16:20:28.294] 
[16:20:28.294] getGlobalsAndPackages() ... DONE
[16:20:28.294] Packages needed by the future expression (n = 0): <none>
[16:20:28.294] Packages needed by future strategies (n = 0): <none>
[16:20:28.294] {
[16:20:28.294]     {
[16:20:28.294]         {
[16:20:28.294]             ...future.startTime <- base::Sys.time()
[16:20:28.294]             {
[16:20:28.294]                 {
[16:20:28.294]                   {
[16:20:28.294]                     base::local({
[16:20:28.294]                       has_future <- base::requireNamespace("future", 
[16:20:28.294]                         quietly = TRUE)
[16:20:28.294]                       if (has_future) {
[16:20:28.294]                         ns <- base::getNamespace("future")
[16:20:28.294]                         version <- ns[[".package"]][["version"]]
[16:20:28.294]                         if (is.null(version)) 
[16:20:28.294]                           version <- utils::packageVersion("future")
[16:20:28.294]                       }
[16:20:28.294]                       else {
[16:20:28.294]                         version <- NULL
[16:20:28.294]                       }
[16:20:28.294]                       if (!has_future || version < "1.8.0") {
[16:20:28.294]                         info <- base::c(r_version = base::gsub("R version ", 
[16:20:28.294]                           "", base::R.version$version.string), 
[16:20:28.294]                           platform = base::sprintf("%s (%s-bit)", 
[16:20:28.294]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:28.294]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:28.294]                             "release", "version")], collapse = " "), 
[16:20:28.294]                           hostname = base::Sys.info()[["nodename"]])
[16:20:28.294]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:20:28.294]                           info)
[16:20:28.294]                         info <- base::paste(info, collapse = "; ")
[16:20:28.294]                         if (!has_future) {
[16:20:28.294]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:28.294]                             info)
[16:20:28.294]                         }
[16:20:28.294]                         else {
[16:20:28.294]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:28.294]                             info, version)
[16:20:28.294]                         }
[16:20:28.294]                         base::stop(msg)
[16:20:28.294]                       }
[16:20:28.294]                     })
[16:20:28.294]                   }
[16:20:28.294]                   ...future.strategy.old <- future::plan("list")
[16:20:28.294]                   options(future.plan = NULL)
[16:20:28.294]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:28.294]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:28.294]                 }
[16:20:28.294]                 ...future.workdir <- getwd()
[16:20:28.294]             }
[16:20:28.294]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:28.294]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:28.294]         }
[16:20:28.294]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:28.294]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:28.294]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:28.294]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:28.294]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:28.294]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:28.294]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:28.294]             base::names(...future.oldOptions))
[16:20:28.294]     }
[16:20:28.294]     if (FALSE) {
[16:20:28.294]     }
[16:20:28.294]     else {
[16:20:28.294]         if (TRUE) {
[16:20:28.294]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:28.294]                 open = "w")
[16:20:28.294]         }
[16:20:28.294]         else {
[16:20:28.294]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:28.294]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:28.294]         }
[16:20:28.294]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:28.294]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:28.294]             base::sink(type = "output", split = FALSE)
[16:20:28.294]             base::close(...future.stdout)
[16:20:28.294]         }, add = TRUE)
[16:20:28.294]     }
[16:20:28.294]     ...future.frame <- base::sys.nframe()
[16:20:28.294]     ...future.conditions <- base::list()
[16:20:28.294]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:28.294]     if (FALSE) {
[16:20:28.294]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:28.294]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:28.294]     }
[16:20:28.294]     ...future.result <- base::tryCatch({
[16:20:28.294]         base::withCallingHandlers({
[16:20:28.294]             ...future.value <- base::withVisible(base::local({
[16:20:28.294]                 42L
[16:20:28.294]             }))
[16:20:28.294]             future::FutureResult(value = ...future.value$value, 
[16:20:28.294]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:28.294]                   ...future.rng), globalenv = if (FALSE) 
[16:20:28.294]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:28.294]                     ...future.globalenv.names))
[16:20:28.294]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:28.294]         }, condition = base::local({
[16:20:28.294]             c <- base::c
[16:20:28.294]             inherits <- base::inherits
[16:20:28.294]             invokeRestart <- base::invokeRestart
[16:20:28.294]             length <- base::length
[16:20:28.294]             list <- base::list
[16:20:28.294]             seq.int <- base::seq.int
[16:20:28.294]             signalCondition <- base::signalCondition
[16:20:28.294]             sys.calls <- base::sys.calls
[16:20:28.294]             `[[` <- base::`[[`
[16:20:28.294]             `+` <- base::`+`
[16:20:28.294]             `<<-` <- base::`<<-`
[16:20:28.294]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:28.294]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:28.294]                   3L)]
[16:20:28.294]             }
[16:20:28.294]             function(cond) {
[16:20:28.294]                 is_error <- inherits(cond, "error")
[16:20:28.294]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:28.294]                   NULL)
[16:20:28.294]                 if (is_error) {
[16:20:28.294]                   sessionInformation <- function() {
[16:20:28.294]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:28.294]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:28.294]                       search = base::search(), system = base::Sys.info())
[16:20:28.294]                   }
[16:20:28.294]                   ...future.conditions[[length(...future.conditions) + 
[16:20:28.294]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:28.294]                     cond$call), session = sessionInformation(), 
[16:20:28.294]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:28.294]                   signalCondition(cond)
[16:20:28.294]                 }
[16:20:28.294]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:28.294]                 "immediateCondition"))) {
[16:20:28.294]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:28.294]                   ...future.conditions[[length(...future.conditions) + 
[16:20:28.294]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:28.294]                   if (TRUE && !signal) {
[16:20:28.294]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:28.294]                     {
[16:20:28.294]                       inherits <- base::inherits
[16:20:28.294]                       invokeRestart <- base::invokeRestart
[16:20:28.294]                       is.null <- base::is.null
[16:20:28.294]                       muffled <- FALSE
[16:20:28.294]                       if (inherits(cond, "message")) {
[16:20:28.294]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:28.294]                         if (muffled) 
[16:20:28.294]                           invokeRestart("muffleMessage")
[16:20:28.294]                       }
[16:20:28.294]                       else if (inherits(cond, "warning")) {
[16:20:28.294]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:28.294]                         if (muffled) 
[16:20:28.294]                           invokeRestart("muffleWarning")
[16:20:28.294]                       }
[16:20:28.294]                       else if (inherits(cond, "condition")) {
[16:20:28.294]                         if (!is.null(pattern)) {
[16:20:28.294]                           computeRestarts <- base::computeRestarts
[16:20:28.294]                           grepl <- base::grepl
[16:20:28.294]                           restarts <- computeRestarts(cond)
[16:20:28.294]                           for (restart in restarts) {
[16:20:28.294]                             name <- restart$name
[16:20:28.294]                             if (is.null(name)) 
[16:20:28.294]                               next
[16:20:28.294]                             if (!grepl(pattern, name)) 
[16:20:28.294]                               next
[16:20:28.294]                             invokeRestart(restart)
[16:20:28.294]                             muffled <- TRUE
[16:20:28.294]                             break
[16:20:28.294]                           }
[16:20:28.294]                         }
[16:20:28.294]                       }
[16:20:28.294]                       invisible(muffled)
[16:20:28.294]                     }
[16:20:28.294]                     muffleCondition(cond, pattern = "^muffle")
[16:20:28.294]                   }
[16:20:28.294]                 }
[16:20:28.294]                 else {
[16:20:28.294]                   if (TRUE) {
[16:20:28.294]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:28.294]                     {
[16:20:28.294]                       inherits <- base::inherits
[16:20:28.294]                       invokeRestart <- base::invokeRestart
[16:20:28.294]                       is.null <- base::is.null
[16:20:28.294]                       muffled <- FALSE
[16:20:28.294]                       if (inherits(cond, "message")) {
[16:20:28.294]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:28.294]                         if (muffled) 
[16:20:28.294]                           invokeRestart("muffleMessage")
[16:20:28.294]                       }
[16:20:28.294]                       else if (inherits(cond, "warning")) {
[16:20:28.294]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:28.294]                         if (muffled) 
[16:20:28.294]                           invokeRestart("muffleWarning")
[16:20:28.294]                       }
[16:20:28.294]                       else if (inherits(cond, "condition")) {
[16:20:28.294]                         if (!is.null(pattern)) {
[16:20:28.294]                           computeRestarts <- base::computeRestarts
[16:20:28.294]                           grepl <- base::grepl
[16:20:28.294]                           restarts <- computeRestarts(cond)
[16:20:28.294]                           for (restart in restarts) {
[16:20:28.294]                             name <- restart$name
[16:20:28.294]                             if (is.null(name)) 
[16:20:28.294]                               next
[16:20:28.294]                             if (!grepl(pattern, name)) 
[16:20:28.294]                               next
[16:20:28.294]                             invokeRestart(restart)
[16:20:28.294]                             muffled <- TRUE
[16:20:28.294]                             break
[16:20:28.294]                           }
[16:20:28.294]                         }
[16:20:28.294]                       }
[16:20:28.294]                       invisible(muffled)
[16:20:28.294]                     }
[16:20:28.294]                     muffleCondition(cond, pattern = "^muffle")
[16:20:28.294]                   }
[16:20:28.294]                 }
[16:20:28.294]             }
[16:20:28.294]         }))
[16:20:28.294]     }, error = function(ex) {
[16:20:28.294]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:28.294]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:28.294]                 ...future.rng), started = ...future.startTime, 
[16:20:28.294]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:28.294]             version = "1.8"), class = "FutureResult")
[16:20:28.294]     }, finally = {
[16:20:28.294]         if (!identical(...future.workdir, getwd())) 
[16:20:28.294]             setwd(...future.workdir)
[16:20:28.294]         {
[16:20:28.294]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:28.294]                 ...future.oldOptions$nwarnings <- NULL
[16:20:28.294]             }
[16:20:28.294]             base::options(...future.oldOptions)
[16:20:28.294]             if (.Platform$OS.type == "windows") {
[16:20:28.294]                 old_names <- names(...future.oldEnvVars)
[16:20:28.294]                 envs <- base::Sys.getenv()
[16:20:28.294]                 names <- names(envs)
[16:20:28.294]                 common <- intersect(names, old_names)
[16:20:28.294]                 added <- setdiff(names, old_names)
[16:20:28.294]                 removed <- setdiff(old_names, names)
[16:20:28.294]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:28.294]                   envs[common]]
[16:20:28.294]                 NAMES <- toupper(changed)
[16:20:28.294]                 args <- list()
[16:20:28.294]                 for (kk in seq_along(NAMES)) {
[16:20:28.294]                   name <- changed[[kk]]
[16:20:28.294]                   NAME <- NAMES[[kk]]
[16:20:28.294]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:28.294]                     next
[16:20:28.294]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:28.294]                 }
[16:20:28.294]                 NAMES <- toupper(added)
[16:20:28.294]                 for (kk in seq_along(NAMES)) {
[16:20:28.294]                   name <- added[[kk]]
[16:20:28.294]                   NAME <- NAMES[[kk]]
[16:20:28.294]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:28.294]                     next
[16:20:28.294]                   args[[name]] <- ""
[16:20:28.294]                 }
[16:20:28.294]                 NAMES <- toupper(removed)
[16:20:28.294]                 for (kk in seq_along(NAMES)) {
[16:20:28.294]                   name <- removed[[kk]]
[16:20:28.294]                   NAME <- NAMES[[kk]]
[16:20:28.294]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:28.294]                     next
[16:20:28.294]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:28.294]                 }
[16:20:28.294]                 if (length(args) > 0) 
[16:20:28.294]                   base::do.call(base::Sys.setenv, args = args)
[16:20:28.294]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:28.294]             }
[16:20:28.294]             else {
[16:20:28.294]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:28.294]             }
[16:20:28.294]             {
[16:20:28.294]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:28.294]                   0L) {
[16:20:28.294]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:28.294]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:28.294]                   base::options(opts)
[16:20:28.294]                 }
[16:20:28.294]                 {
[16:20:28.294]                   {
[16:20:28.294]                     NULL
[16:20:28.294]                     RNGkind("Mersenne-Twister")
[16:20:28.294]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:20:28.294]                       inherits = FALSE)
[16:20:28.294]                   }
[16:20:28.294]                   options(future.plan = NULL)
[16:20:28.294]                   if (is.na(NA_character_)) 
[16:20:28.294]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:28.294]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:28.294]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:28.294]                     .init = FALSE)
[16:20:28.294]                 }
[16:20:28.294]             }
[16:20:28.294]         }
[16:20:28.294]     })
[16:20:28.294]     if (TRUE) {
[16:20:28.294]         base::sink(type = "output", split = FALSE)
[16:20:28.294]         if (TRUE) {
[16:20:28.294]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:28.294]         }
[16:20:28.294]         else {
[16:20:28.294]             ...future.result["stdout"] <- base::list(NULL)
[16:20:28.294]         }
[16:20:28.294]         base::close(...future.stdout)
[16:20:28.294]         ...future.stdout <- NULL
[16:20:28.294]     }
[16:20:28.294]     ...future.result$conditions <- ...future.conditions
[16:20:28.294]     ...future.result$finished <- base::Sys.time()
[16:20:28.294]     ...future.result
[16:20:28.294] }
[16:20:28.296] plan(): Setting new future strategy stack:
[16:20:28.296] List of future strategies:
[16:20:28.296] 1. sequential:
[16:20:28.296]    - args: function (..., envir = parent.frame())
[16:20:28.296]    - tweaked: FALSE
[16:20:28.296]    - call: NULL
[16:20:28.297] plan(): nbrOfWorkers() = 1
[16:20:28.297] plan(): Setting new future strategy stack:
[16:20:28.297] List of future strategies:
[16:20:28.297] 1. future:
[16:20:28.297]    - args: function (...)
[16:20:28.297]    - tweaked: FALSE
[16:20:28.297]    - call: plan(foo)
[16:20:28.298] plan(): nbrOfWorkers() = Inf
[16:20:28.298] SequentialFuture started (and completed)
[1] 42
[16:20:28.300] getGlobalsAndPackages() ...
[16:20:28.300] 
[16:20:28.300] - globals: [0] <none>
[16:20:28.300] getGlobalsAndPackages() ... DONE
[16:20:28.301] [local output] makeClusterPSOCK() ...
[16:20:28.336] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[16:20:28.337] [local output] Base port: 11199
[16:20:28.337] [local output] Getting setup options for 2 cluster nodes ...
[16:20:28.337] [local output]  - Node 1 of 2 ...
[16:20:28.338] [local output] localMachine=TRUE => revtunnel=FALSE

[16:20:28.338] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpWjeeQ5/worker.rank=1.parallelly.parent=80046.138aea11077c.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpWjeeQ5/worker.rank=1.parallelly.parent=80046.138aea11077c.pid")'’
[16:20:28.529] - Possible to infer worker's PID: TRUE
[16:20:28.530] [local output] Rscript port: 11199

[16:20:28.530] [local output]  - Node 2 of 2 ...
[16:20:28.530] [local output] localMachine=TRUE => revtunnel=FALSE

[16:20:28.531] [local output] Rscript port: 11199

[16:20:28.531] [local output] Getting setup options for 2 cluster nodes ... done
[16:20:28.531] [local output]  - Parallel setup requested for some PSOCK nodes
[16:20:28.532] [local output] Setting up PSOCK nodes in parallel
[16:20:28.532] List of 36
[16:20:28.532]  $ worker          : chr "localhost"
[16:20:28.532]   ..- attr(*, "localhost")= logi TRUE
[16:20:28.532]  $ master          : chr "localhost"
[16:20:28.532]  $ port            : int 11199
[16:20:28.532]  $ connectTimeout  : num 120
[16:20:28.532]  $ timeout         : num 2592000
[16:20:28.532]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[16:20:28.532]  $ homogeneous     : logi TRUE
[16:20:28.532]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[16:20:28.532]  $ rscript_envs    : NULL
[16:20:28.532]  $ rscript_libs    : NULL
[16:20:28.532]  $ rscript_startup : NULL
[16:20:28.532]  $ rscript_sh      : chr "sh"
[16:20:28.532]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:20:28.532]  $ methods         : logi TRUE
[16:20:28.532]  $ socketOptions   : chr "no-delay"
[16:20:28.532]  $ useXDR          : logi FALSE
[16:20:28.532]  $ outfile         : chr "/dev/null"
[16:20:28.532]  $ renice          : int NA
[16:20:28.532]  $ rshcmd          : NULL
[16:20:28.532]  $ user            : chr(0) 
[16:20:28.532]  $ revtunnel       : logi FALSE
[16:20:28.532]  $ rshlogfile      : NULL
[16:20:28.532]  $ rshopts         : chr(0) 
[16:20:28.532]  $ rank            : int 1
[16:20:28.532]  $ manual          : logi FALSE
[16:20:28.532]  $ dryrun          : logi FALSE
[16:20:28.532]  $ quiet           : logi FALSE
[16:20:28.532]  $ setup_strategy  : chr "parallel"
[16:20:28.532]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:20:28.532]  $ pidfile         : chr "/tmp/RtmpWjeeQ5/worker.rank=1.parallelly.parent=80046.138aea11077c.pid"
[16:20:28.532]  $ rshcmd_label    : NULL
[16:20:28.532]  $ rsh_call        : NULL
[16:20:28.532]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:20:28.532]  $ localMachine    : logi TRUE
[16:20:28.532]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[16:20:28.532]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[16:20:28.532]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[16:20:28.532]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[16:20:28.532]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[16:20:28.532]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[16:20:28.532]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[16:20:28.532]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[16:20:28.532]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[16:20:28.532]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[16:20:28.532]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[16:20:28.532]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[16:20:28.532]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[16:20:28.532]  $ arguments       :List of 28
[16:20:28.532]   ..$ worker          : chr "localhost"
[16:20:28.532]   ..$ master          : NULL
[16:20:28.532]   ..$ port            : int 11199
[16:20:28.532]   ..$ connectTimeout  : num 120
[16:20:28.532]   ..$ timeout         : num 2592000
[16:20:28.532]   ..$ rscript         : NULL
[16:20:28.532]   ..$ homogeneous     : NULL
[16:20:28.532]   ..$ rscript_args    : NULL
[16:20:28.532]   ..$ rscript_envs    : NULL
[16:20:28.532]   ..$ rscript_libs    : NULL
[16:20:28.532]   ..$ rscript_startup : NULL
[16:20:28.532]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[16:20:28.532]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:20:28.532]   ..$ methods         : logi TRUE
[16:20:28.532]   ..$ socketOptions   : chr "no-delay"
[16:20:28.532]   ..$ useXDR          : logi FALSE
[16:20:28.532]   ..$ outfile         : chr "/dev/null"
[16:20:28.532]   ..$ renice          : int NA
[16:20:28.532]   ..$ rshcmd          : NULL
[16:20:28.532]   ..$ user            : NULL
[16:20:28.532]   ..$ revtunnel       : logi NA
[16:20:28.532]   ..$ rshlogfile      : NULL
[16:20:28.532]   ..$ rshopts         : NULL
[16:20:28.532]   ..$ rank            : int 1
[16:20:28.532]   ..$ manual          : logi FALSE
[16:20:28.532]   ..$ dryrun          : logi FALSE
[16:20:28.532]   ..$ quiet           : logi FALSE
[16:20:28.532]   ..$ setup_strategy  : chr "parallel"
[16:20:28.532]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[16:20:28.548] [local output] System call to launch all workers:
[16:20:28.549] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpWjeeQ5/worker.rank=1.parallelly.parent=80046.138aea11077c.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11199 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[16:20:28.549] [local output] Starting PSOCK main server
[16:20:28.554] [local output] Workers launched
[16:20:28.555] [local output] Waiting for workers to connect back
[16:20:28.555]  - [local output] 0 workers out of 2 ready
[16:20:28.799]  - [local output] 0 workers out of 2 ready
[16:20:28.800]  - [local output] 1 workers out of 2 ready
[16:20:28.800]  - [local output] 2 workers out of 2 ready
[16:20:28.800] [local output] Launching of workers completed
[16:20:28.801] [local output] Collecting session information from workers
[16:20:28.801] [local output]  - Worker #1 of 2
[16:20:28.802] [local output]  - Worker #2 of 2
[16:20:28.802] [local output] makeClusterPSOCK() ... done
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: 0x56534025fdf8
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 28ebb213-7157-0177-2c2f-da7eb4f10ed9
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:28.815] Packages needed by the future expression (n = 0): <none>
[16:20:28.815] Packages needed by future strategies (n = 0): <none>
[16:20:28.815] {
[16:20:28.815]     {
[16:20:28.815]         {
[16:20:28.815]             ...future.startTime <- base::Sys.time()
[16:20:28.815]             {
[16:20:28.815]                 {
[16:20:28.815]                   {
[16:20:28.815]                     {
[16:20:28.815]                       base::local({
[16:20:28.815]                         has_future <- base::requireNamespace("future", 
[16:20:28.815]                           quietly = TRUE)
[16:20:28.815]                         if (has_future) {
[16:20:28.815]                           ns <- base::getNamespace("future")
[16:20:28.815]                           version <- ns[[".package"]][["version"]]
[16:20:28.815]                           if (is.null(version)) 
[16:20:28.815]                             version <- utils::packageVersion("future")
[16:20:28.815]                         }
[16:20:28.815]                         else {
[16:20:28.815]                           version <- NULL
[16:20:28.815]                         }
[16:20:28.815]                         if (!has_future || version < "1.8.0") {
[16:20:28.815]                           info <- base::c(r_version = base::gsub("R version ", 
[16:20:28.815]                             "", base::R.version$version.string), 
[16:20:28.815]                             platform = base::sprintf("%s (%s-bit)", 
[16:20:28.815]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:28.815]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:28.815]                               "release", "version")], collapse = " "), 
[16:20:28.815]                             hostname = base::Sys.info()[["nodename"]])
[16:20:28.815]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:20:28.815]                             info)
[16:20:28.815]                           info <- base::paste(info, collapse = "; ")
[16:20:28.815]                           if (!has_future) {
[16:20:28.815]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:28.815]                               info)
[16:20:28.815]                           }
[16:20:28.815]                           else {
[16:20:28.815]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:28.815]                               info, version)
[16:20:28.815]                           }
[16:20:28.815]                           base::stop(msg)
[16:20:28.815]                         }
[16:20:28.815]                       })
[16:20:28.815]                     }
[16:20:28.815]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:28.815]                     base::options(mc.cores = 1L)
[16:20:28.815]                   }
[16:20:28.815]                   ...future.strategy.old <- future::plan("list")
[16:20:28.815]                   options(future.plan = NULL)
[16:20:28.815]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:28.815]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:28.815]                 }
[16:20:28.815]                 ...future.workdir <- getwd()
[16:20:28.815]             }
[16:20:28.815]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:28.815]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:28.815]         }
[16:20:28.815]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:28.815]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:28.815]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:28.815]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:28.815]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:28.815]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:28.815]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:28.815]             base::names(...future.oldOptions))
[16:20:28.815]     }
[16:20:28.815]     if (FALSE) {
[16:20:28.815]     }
[16:20:28.815]     else {
[16:20:28.815]         if (TRUE) {
[16:20:28.815]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:28.815]                 open = "w")
[16:20:28.815]         }
[16:20:28.815]         else {
[16:20:28.815]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:28.815]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:28.815]         }
[16:20:28.815]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:28.815]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:28.815]             base::sink(type = "output", split = FALSE)
[16:20:28.815]             base::close(...future.stdout)
[16:20:28.815]         }, add = TRUE)
[16:20:28.815]     }
[16:20:28.815]     ...future.frame <- base::sys.nframe()
[16:20:28.815]     ...future.conditions <- base::list()
[16:20:28.815]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:28.815]     if (FALSE) {
[16:20:28.815]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:28.815]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:28.815]     }
[16:20:28.815]     ...future.result <- base::tryCatch({
[16:20:28.815]         base::withCallingHandlers({
[16:20:28.815]             ...future.value <- base::withVisible(base::local({
[16:20:28.815]                 ...future.makeSendCondition <- base::local({
[16:20:28.815]                   sendCondition <- NULL
[16:20:28.815]                   function(frame = 1L) {
[16:20:28.815]                     if (is.function(sendCondition)) 
[16:20:28.815]                       return(sendCondition)
[16:20:28.815]                     ns <- getNamespace("parallel")
[16:20:28.815]                     if (exists("sendData", mode = "function", 
[16:20:28.815]                       envir = ns)) {
[16:20:28.815]                       parallel_sendData <- get("sendData", mode = "function", 
[16:20:28.815]                         envir = ns)
[16:20:28.815]                       envir <- sys.frame(frame)
[16:20:28.815]                       master <- NULL
[16:20:28.815]                       while (!identical(envir, .GlobalEnv) && 
[16:20:28.815]                         !identical(envir, emptyenv())) {
[16:20:28.815]                         if (exists("master", mode = "list", envir = envir, 
[16:20:28.815]                           inherits = FALSE)) {
[16:20:28.815]                           master <- get("master", mode = "list", 
[16:20:28.815]                             envir = envir, inherits = FALSE)
[16:20:28.815]                           if (inherits(master, c("SOCKnode", 
[16:20:28.815]                             "SOCK0node"))) {
[16:20:28.815]                             sendCondition <<- function(cond) {
[16:20:28.815]                               data <- list(type = "VALUE", value = cond, 
[16:20:28.815]                                 success = TRUE)
[16:20:28.815]                               parallel_sendData(master, data)
[16:20:28.815]                             }
[16:20:28.815]                             return(sendCondition)
[16:20:28.815]                           }
[16:20:28.815]                         }
[16:20:28.815]                         frame <- frame + 1L
[16:20:28.815]                         envir <- sys.frame(frame)
[16:20:28.815]                       }
[16:20:28.815]                     }
[16:20:28.815]                     sendCondition <<- function(cond) NULL
[16:20:28.815]                   }
[16:20:28.815]                 })
[16:20:28.815]                 withCallingHandlers({
[16:20:28.815]                   {
[16:20:28.815]                     42L
[16:20:28.815]                   }
[16:20:28.815]                 }, immediateCondition = function(cond) {
[16:20:28.815]                   sendCondition <- ...future.makeSendCondition()
[16:20:28.815]                   sendCondition(cond)
[16:20:28.815]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:28.815]                   {
[16:20:28.815]                     inherits <- base::inherits
[16:20:28.815]                     invokeRestart <- base::invokeRestart
[16:20:28.815]                     is.null <- base::is.null
[16:20:28.815]                     muffled <- FALSE
[16:20:28.815]                     if (inherits(cond, "message")) {
[16:20:28.815]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:28.815]                       if (muffled) 
[16:20:28.815]                         invokeRestart("muffleMessage")
[16:20:28.815]                     }
[16:20:28.815]                     else if (inherits(cond, "warning")) {
[16:20:28.815]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:28.815]                       if (muffled) 
[16:20:28.815]                         invokeRestart("muffleWarning")
[16:20:28.815]                     }
[16:20:28.815]                     else if (inherits(cond, "condition")) {
[16:20:28.815]                       if (!is.null(pattern)) {
[16:20:28.815]                         computeRestarts <- base::computeRestarts
[16:20:28.815]                         grepl <- base::grepl
[16:20:28.815]                         restarts <- computeRestarts(cond)
[16:20:28.815]                         for (restart in restarts) {
[16:20:28.815]                           name <- restart$name
[16:20:28.815]                           if (is.null(name)) 
[16:20:28.815]                             next
[16:20:28.815]                           if (!grepl(pattern, name)) 
[16:20:28.815]                             next
[16:20:28.815]                           invokeRestart(restart)
[16:20:28.815]                           muffled <- TRUE
[16:20:28.815]                           break
[16:20:28.815]                         }
[16:20:28.815]                       }
[16:20:28.815]                     }
[16:20:28.815]                     invisible(muffled)
[16:20:28.815]                   }
[16:20:28.815]                   muffleCondition(cond)
[16:20:28.815]                 })
[16:20:28.815]             }))
[16:20:28.815]             future::FutureResult(value = ...future.value$value, 
[16:20:28.815]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:28.815]                   ...future.rng), globalenv = if (FALSE) 
[16:20:28.815]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:28.815]                     ...future.globalenv.names))
[16:20:28.815]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:28.815]         }, condition = base::local({
[16:20:28.815]             c <- base::c
[16:20:28.815]             inherits <- base::inherits
[16:20:28.815]             invokeRestart <- base::invokeRestart
[16:20:28.815]             length <- base::length
[16:20:28.815]             list <- base::list
[16:20:28.815]             seq.int <- base::seq.int
[16:20:28.815]             signalCondition <- base::signalCondition
[16:20:28.815]             sys.calls <- base::sys.calls
[16:20:28.815]             `[[` <- base::`[[`
[16:20:28.815]             `+` <- base::`+`
[16:20:28.815]             `<<-` <- base::`<<-`
[16:20:28.815]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:28.815]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:28.815]                   3L)]
[16:20:28.815]             }
[16:20:28.815]             function(cond) {
[16:20:28.815]                 is_error <- inherits(cond, "error")
[16:20:28.815]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:28.815]                   NULL)
[16:20:28.815]                 if (is_error) {
[16:20:28.815]                   sessionInformation <- function() {
[16:20:28.815]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:28.815]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:28.815]                       search = base::search(), system = base::Sys.info())
[16:20:28.815]                   }
[16:20:28.815]                   ...future.conditions[[length(...future.conditions) + 
[16:20:28.815]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:28.815]                     cond$call), session = sessionInformation(), 
[16:20:28.815]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:28.815]                   signalCondition(cond)
[16:20:28.815]                 }
[16:20:28.815]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:28.815]                 "immediateCondition"))) {
[16:20:28.815]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:28.815]                   ...future.conditions[[length(...future.conditions) + 
[16:20:28.815]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:28.815]                   if (TRUE && !signal) {
[16:20:28.815]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:28.815]                     {
[16:20:28.815]                       inherits <- base::inherits
[16:20:28.815]                       invokeRestart <- base::invokeRestart
[16:20:28.815]                       is.null <- base::is.null
[16:20:28.815]                       muffled <- FALSE
[16:20:28.815]                       if (inherits(cond, "message")) {
[16:20:28.815]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:28.815]                         if (muffled) 
[16:20:28.815]                           invokeRestart("muffleMessage")
[16:20:28.815]                       }
[16:20:28.815]                       else if (inherits(cond, "warning")) {
[16:20:28.815]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:28.815]                         if (muffled) 
[16:20:28.815]                           invokeRestart("muffleWarning")
[16:20:28.815]                       }
[16:20:28.815]                       else if (inherits(cond, "condition")) {
[16:20:28.815]                         if (!is.null(pattern)) {
[16:20:28.815]                           computeRestarts <- base::computeRestarts
[16:20:28.815]                           grepl <- base::grepl
[16:20:28.815]                           restarts <- computeRestarts(cond)
[16:20:28.815]                           for (restart in restarts) {
[16:20:28.815]                             name <- restart$name
[16:20:28.815]                             if (is.null(name)) 
[16:20:28.815]                               next
[16:20:28.815]                             if (!grepl(pattern, name)) 
[16:20:28.815]                               next
[16:20:28.815]                             invokeRestart(restart)
[16:20:28.815]                             muffled <- TRUE
[16:20:28.815]                             break
[16:20:28.815]                           }
[16:20:28.815]                         }
[16:20:28.815]                       }
[16:20:28.815]                       invisible(muffled)
[16:20:28.815]                     }
[16:20:28.815]                     muffleCondition(cond, pattern = "^muffle")
[16:20:28.815]                   }
[16:20:28.815]                 }
[16:20:28.815]                 else {
[16:20:28.815]                   if (TRUE) {
[16:20:28.815]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:28.815]                     {
[16:20:28.815]                       inherits <- base::inherits
[16:20:28.815]                       invokeRestart <- base::invokeRestart
[16:20:28.815]                       is.null <- base::is.null
[16:20:28.815]                       muffled <- FALSE
[16:20:28.815]                       if (inherits(cond, "message")) {
[16:20:28.815]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:28.815]                         if (muffled) 
[16:20:28.815]                           invokeRestart("muffleMessage")
[16:20:28.815]                       }
[16:20:28.815]                       else if (inherits(cond, "warning")) {
[16:20:28.815]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:28.815]                         if (muffled) 
[16:20:28.815]                           invokeRestart("muffleWarning")
[16:20:28.815]                       }
[16:20:28.815]                       else if (inherits(cond, "condition")) {
[16:20:28.815]                         if (!is.null(pattern)) {
[16:20:28.815]                           computeRestarts <- base::computeRestarts
[16:20:28.815]                           grepl <- base::grepl
[16:20:28.815]                           restarts <- computeRestarts(cond)
[16:20:28.815]                           for (restart in restarts) {
[16:20:28.815]                             name <- restart$name
[16:20:28.815]                             if (is.null(name)) 
[16:20:28.815]                               next
[16:20:28.815]                             if (!grepl(pattern, name)) 
[16:20:28.815]                               next
[16:20:28.815]                             invokeRestart(restart)
[16:20:28.815]                             muffled <- TRUE
[16:20:28.815]                             break
[16:20:28.815]                           }
[16:20:28.815]                         }
[16:20:28.815]                       }
[16:20:28.815]                       invisible(muffled)
[16:20:28.815]                     }
[16:20:28.815]                     muffleCondition(cond, pattern = "^muffle")
[16:20:28.815]                   }
[16:20:28.815]                 }
[16:20:28.815]             }
[16:20:28.815]         }))
[16:20:28.815]     }, error = function(ex) {
[16:20:28.815]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:28.815]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:28.815]                 ...future.rng), started = ...future.startTime, 
[16:20:28.815]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:28.815]             version = "1.8"), class = "FutureResult")
[16:20:28.815]     }, finally = {
[16:20:28.815]         if (!identical(...future.workdir, getwd())) 
[16:20:28.815]             setwd(...future.workdir)
[16:20:28.815]         {
[16:20:28.815]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:28.815]                 ...future.oldOptions$nwarnings <- NULL
[16:20:28.815]             }
[16:20:28.815]             base::options(...future.oldOptions)
[16:20:28.815]             if (.Platform$OS.type == "windows") {
[16:20:28.815]                 old_names <- names(...future.oldEnvVars)
[16:20:28.815]                 envs <- base::Sys.getenv()
[16:20:28.815]                 names <- names(envs)
[16:20:28.815]                 common <- intersect(names, old_names)
[16:20:28.815]                 added <- setdiff(names, old_names)
[16:20:28.815]                 removed <- setdiff(old_names, names)
[16:20:28.815]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:28.815]                   envs[common]]
[16:20:28.815]                 NAMES <- toupper(changed)
[16:20:28.815]                 args <- list()
[16:20:28.815]                 for (kk in seq_along(NAMES)) {
[16:20:28.815]                   name <- changed[[kk]]
[16:20:28.815]                   NAME <- NAMES[[kk]]
[16:20:28.815]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:28.815]                     next
[16:20:28.815]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:28.815]                 }
[16:20:28.815]                 NAMES <- toupper(added)
[16:20:28.815]                 for (kk in seq_along(NAMES)) {
[16:20:28.815]                   name <- added[[kk]]
[16:20:28.815]                   NAME <- NAMES[[kk]]
[16:20:28.815]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:28.815]                     next
[16:20:28.815]                   args[[name]] <- ""
[16:20:28.815]                 }
[16:20:28.815]                 NAMES <- toupper(removed)
[16:20:28.815]                 for (kk in seq_along(NAMES)) {
[16:20:28.815]                   name <- removed[[kk]]
[16:20:28.815]                   NAME <- NAMES[[kk]]
[16:20:28.815]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:28.815]                     next
[16:20:28.815]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:28.815]                 }
[16:20:28.815]                 if (length(args) > 0) 
[16:20:28.815]                   base::do.call(base::Sys.setenv, args = args)
[16:20:28.815]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:28.815]             }
[16:20:28.815]             else {
[16:20:28.815]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:28.815]             }
[16:20:28.815]             {
[16:20:28.815]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:28.815]                   0L) {
[16:20:28.815]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:28.815]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:28.815]                   base::options(opts)
[16:20:28.815]                 }
[16:20:28.815]                 {
[16:20:28.815]                   {
[16:20:28.815]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:28.815]                     NULL
[16:20:28.815]                   }
[16:20:28.815]                   options(future.plan = NULL)
[16:20:28.815]                   if (is.na(NA_character_)) 
[16:20:28.815]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:28.815]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:28.815]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:28.815]                     .init = FALSE)
[16:20:28.815]                 }
[16:20:28.815]             }
[16:20:28.815]         }
[16:20:28.815]     })
[16:20:28.815]     if (TRUE) {
[16:20:28.815]         base::sink(type = "output", split = FALSE)
[16:20:28.815]         if (TRUE) {
[16:20:28.815]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:28.815]         }
[16:20:28.815]         else {
[16:20:28.815]             ...future.result["stdout"] <- base::list(NULL)
[16:20:28.815]         }
[16:20:28.815]         base::close(...future.stdout)
[16:20:28.815]         ...future.stdout <- NULL
[16:20:28.815]     }
[16:20:28.815]     ...future.result$conditions <- ...future.conditions
[16:20:28.815]     ...future.result$finished <- base::Sys.time()
[16:20:28.815]     ...future.result
[16:20:28.815] }
[16:20:28.868] MultisessionFuture started
[16:20:28.868] result() for ClusterFuture ...
[16:20:28.869] receiveMessageFromWorker() for ClusterFuture ...
[16:20:28.869] - Validating connection of MultisessionFuture
[16:20:28.901] - received message: FutureResult
[16:20:28.901] - Received FutureResult
[16:20:28.905] - Erased future from FutureRegistry
[16:20:28.905] result() for ClusterFuture ...
[16:20:28.905] - result already collected: FutureResult
[16:20:28.905] result() for ClusterFuture ... done
[16:20:28.905] receiveMessageFromWorker() for ClusterFuture ... done
[16:20:28.905] result() for ClusterFuture ... done
[16:20:28.905] result() for ClusterFuture ...
[16:20:28.905] - result already collected: FutureResult
[16:20:28.906] result() for ClusterFuture ... done
[1] 42
[16:20:28.907] getGlobalsAndPackages() ...
[16:20:28.907] 
[16:20:28.907] - globals: [0] <none>
[16:20:28.907] getGlobalsAndPackages() ... DONE
[16:20:28.918] Packages needed by the future expression (n = 0): <none>
[16:20:28.918] Packages needed by future strategies (n = 0): <none>
[16:20:28.919] {
[16:20:28.919]     {
[16:20:28.919]         {
[16:20:28.919]             ...future.startTime <- base::Sys.time()
[16:20:28.919]             {
[16:20:28.919]                 {
[16:20:28.919]                   {
[16:20:28.919]                     {
[16:20:28.919]                       base::local({
[16:20:28.919]                         has_future <- base::requireNamespace("future", 
[16:20:28.919]                           quietly = TRUE)
[16:20:28.919]                         if (has_future) {
[16:20:28.919]                           ns <- base::getNamespace("future")
[16:20:28.919]                           version <- ns[[".package"]][["version"]]
[16:20:28.919]                           if (is.null(version)) 
[16:20:28.919]                             version <- utils::packageVersion("future")
[16:20:28.919]                         }
[16:20:28.919]                         else {
[16:20:28.919]                           version <- NULL
[16:20:28.919]                         }
[16:20:28.919]                         if (!has_future || version < "1.8.0") {
[16:20:28.919]                           info <- base::c(r_version = base::gsub("R version ", 
[16:20:28.919]                             "", base::R.version$version.string), 
[16:20:28.919]                             platform = base::sprintf("%s (%s-bit)", 
[16:20:28.919]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:28.919]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:28.919]                               "release", "version")], collapse = " "), 
[16:20:28.919]                             hostname = base::Sys.info()[["nodename"]])
[16:20:28.919]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:20:28.919]                             info)
[16:20:28.919]                           info <- base::paste(info, collapse = "; ")
[16:20:28.919]                           if (!has_future) {
[16:20:28.919]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:28.919]                               info)
[16:20:28.919]                           }
[16:20:28.919]                           else {
[16:20:28.919]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:28.919]                               info, version)
[16:20:28.919]                           }
[16:20:28.919]                           base::stop(msg)
[16:20:28.919]                         }
[16:20:28.919]                       })
[16:20:28.919]                     }
[16:20:28.919]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:28.919]                     base::options(mc.cores = 1L)
[16:20:28.919]                   }
[16:20:28.919]                   ...future.strategy.old <- future::plan("list")
[16:20:28.919]                   options(future.plan = NULL)
[16:20:28.919]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:28.919]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:28.919]                 }
[16:20:28.919]                 ...future.workdir <- getwd()
[16:20:28.919]             }
[16:20:28.919]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:28.919]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:28.919]         }
[16:20:28.919]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:28.919]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:28.919]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:28.919]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:28.919]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:28.919]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:28.919]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:28.919]             base::names(...future.oldOptions))
[16:20:28.919]     }
[16:20:28.919]     if (FALSE) {
[16:20:28.919]     }
[16:20:28.919]     else {
[16:20:28.919]         if (TRUE) {
[16:20:28.919]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:28.919]                 open = "w")
[16:20:28.919]         }
[16:20:28.919]         else {
[16:20:28.919]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:28.919]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:28.919]         }
[16:20:28.919]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:28.919]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:28.919]             base::sink(type = "output", split = FALSE)
[16:20:28.919]             base::close(...future.stdout)
[16:20:28.919]         }, add = TRUE)
[16:20:28.919]     }
[16:20:28.919]     ...future.frame <- base::sys.nframe()
[16:20:28.919]     ...future.conditions <- base::list()
[16:20:28.919]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:28.919]     if (FALSE) {
[16:20:28.919]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:28.919]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:28.919]     }
[16:20:28.919]     ...future.result <- base::tryCatch({
[16:20:28.919]         base::withCallingHandlers({
[16:20:28.919]             ...future.value <- base::withVisible(base::local({
[16:20:28.919]                 ...future.makeSendCondition <- base::local({
[16:20:28.919]                   sendCondition <- NULL
[16:20:28.919]                   function(frame = 1L) {
[16:20:28.919]                     if (is.function(sendCondition)) 
[16:20:28.919]                       return(sendCondition)
[16:20:28.919]                     ns <- getNamespace("parallel")
[16:20:28.919]                     if (exists("sendData", mode = "function", 
[16:20:28.919]                       envir = ns)) {
[16:20:28.919]                       parallel_sendData <- get("sendData", mode = "function", 
[16:20:28.919]                         envir = ns)
[16:20:28.919]                       envir <- sys.frame(frame)
[16:20:28.919]                       master <- NULL
[16:20:28.919]                       while (!identical(envir, .GlobalEnv) && 
[16:20:28.919]                         !identical(envir, emptyenv())) {
[16:20:28.919]                         if (exists("master", mode = "list", envir = envir, 
[16:20:28.919]                           inherits = FALSE)) {
[16:20:28.919]                           master <- get("master", mode = "list", 
[16:20:28.919]                             envir = envir, inherits = FALSE)
[16:20:28.919]                           if (inherits(master, c("SOCKnode", 
[16:20:28.919]                             "SOCK0node"))) {
[16:20:28.919]                             sendCondition <<- function(cond) {
[16:20:28.919]                               data <- list(type = "VALUE", value = cond, 
[16:20:28.919]                                 success = TRUE)
[16:20:28.919]                               parallel_sendData(master, data)
[16:20:28.919]                             }
[16:20:28.919]                             return(sendCondition)
[16:20:28.919]                           }
[16:20:28.919]                         }
[16:20:28.919]                         frame <- frame + 1L
[16:20:28.919]                         envir <- sys.frame(frame)
[16:20:28.919]                       }
[16:20:28.919]                     }
[16:20:28.919]                     sendCondition <<- function(cond) NULL
[16:20:28.919]                   }
[16:20:28.919]                 })
[16:20:28.919]                 withCallingHandlers({
[16:20:28.919]                   {
[16:20:28.919]                     42L
[16:20:28.919]                   }
[16:20:28.919]                 }, immediateCondition = function(cond) {
[16:20:28.919]                   sendCondition <- ...future.makeSendCondition()
[16:20:28.919]                   sendCondition(cond)
[16:20:28.919]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:28.919]                   {
[16:20:28.919]                     inherits <- base::inherits
[16:20:28.919]                     invokeRestart <- base::invokeRestart
[16:20:28.919]                     is.null <- base::is.null
[16:20:28.919]                     muffled <- FALSE
[16:20:28.919]                     if (inherits(cond, "message")) {
[16:20:28.919]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:28.919]                       if (muffled) 
[16:20:28.919]                         invokeRestart("muffleMessage")
[16:20:28.919]                     }
[16:20:28.919]                     else if (inherits(cond, "warning")) {
[16:20:28.919]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:28.919]                       if (muffled) 
[16:20:28.919]                         invokeRestart("muffleWarning")
[16:20:28.919]                     }
[16:20:28.919]                     else if (inherits(cond, "condition")) {
[16:20:28.919]                       if (!is.null(pattern)) {
[16:20:28.919]                         computeRestarts <- base::computeRestarts
[16:20:28.919]                         grepl <- base::grepl
[16:20:28.919]                         restarts <- computeRestarts(cond)
[16:20:28.919]                         for (restart in restarts) {
[16:20:28.919]                           name <- restart$name
[16:20:28.919]                           if (is.null(name)) 
[16:20:28.919]                             next
[16:20:28.919]                           if (!grepl(pattern, name)) 
[16:20:28.919]                             next
[16:20:28.919]                           invokeRestart(restart)
[16:20:28.919]                           muffled <- TRUE
[16:20:28.919]                           break
[16:20:28.919]                         }
[16:20:28.919]                       }
[16:20:28.919]                     }
[16:20:28.919]                     invisible(muffled)
[16:20:28.919]                   }
[16:20:28.919]                   muffleCondition(cond)
[16:20:28.919]                 })
[16:20:28.919]             }))
[16:20:28.919]             future::FutureResult(value = ...future.value$value, 
[16:20:28.919]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:28.919]                   ...future.rng), globalenv = if (FALSE) 
[16:20:28.919]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:28.919]                     ...future.globalenv.names))
[16:20:28.919]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:28.919]         }, condition = base::local({
[16:20:28.919]             c <- base::c
[16:20:28.919]             inherits <- base::inherits
[16:20:28.919]             invokeRestart <- base::invokeRestart
[16:20:28.919]             length <- base::length
[16:20:28.919]             list <- base::list
[16:20:28.919]             seq.int <- base::seq.int
[16:20:28.919]             signalCondition <- base::signalCondition
[16:20:28.919]             sys.calls <- base::sys.calls
[16:20:28.919]             `[[` <- base::`[[`
[16:20:28.919]             `+` <- base::`+`
[16:20:28.919]             `<<-` <- base::`<<-`
[16:20:28.919]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:28.919]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:28.919]                   3L)]
[16:20:28.919]             }
[16:20:28.919]             function(cond) {
[16:20:28.919]                 is_error <- inherits(cond, "error")
[16:20:28.919]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:28.919]                   NULL)
[16:20:28.919]                 if (is_error) {
[16:20:28.919]                   sessionInformation <- function() {
[16:20:28.919]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:28.919]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:28.919]                       search = base::search(), system = base::Sys.info())
[16:20:28.919]                   }
[16:20:28.919]                   ...future.conditions[[length(...future.conditions) + 
[16:20:28.919]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:28.919]                     cond$call), session = sessionInformation(), 
[16:20:28.919]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:28.919]                   signalCondition(cond)
[16:20:28.919]                 }
[16:20:28.919]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:28.919]                 "immediateCondition"))) {
[16:20:28.919]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:28.919]                   ...future.conditions[[length(...future.conditions) + 
[16:20:28.919]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:28.919]                   if (TRUE && !signal) {
[16:20:28.919]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:28.919]                     {
[16:20:28.919]                       inherits <- base::inherits
[16:20:28.919]                       invokeRestart <- base::invokeRestart
[16:20:28.919]                       is.null <- base::is.null
[16:20:28.919]                       muffled <- FALSE
[16:20:28.919]                       if (inherits(cond, "message")) {
[16:20:28.919]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:28.919]                         if (muffled) 
[16:20:28.919]                           invokeRestart("muffleMessage")
[16:20:28.919]                       }
[16:20:28.919]                       else if (inherits(cond, "warning")) {
[16:20:28.919]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:28.919]                         if (muffled) 
[16:20:28.919]                           invokeRestart("muffleWarning")
[16:20:28.919]                       }
[16:20:28.919]                       else if (inherits(cond, "condition")) {
[16:20:28.919]                         if (!is.null(pattern)) {
[16:20:28.919]                           computeRestarts <- base::computeRestarts
[16:20:28.919]                           grepl <- base::grepl
[16:20:28.919]                           restarts <- computeRestarts(cond)
[16:20:28.919]                           for (restart in restarts) {
[16:20:28.919]                             name <- restart$name
[16:20:28.919]                             if (is.null(name)) 
[16:20:28.919]                               next
[16:20:28.919]                             if (!grepl(pattern, name)) 
[16:20:28.919]                               next
[16:20:28.919]                             invokeRestart(restart)
[16:20:28.919]                             muffled <- TRUE
[16:20:28.919]                             break
[16:20:28.919]                           }
[16:20:28.919]                         }
[16:20:28.919]                       }
[16:20:28.919]                       invisible(muffled)
[16:20:28.919]                     }
[16:20:28.919]                     muffleCondition(cond, pattern = "^muffle")
[16:20:28.919]                   }
[16:20:28.919]                 }
[16:20:28.919]                 else {
[16:20:28.919]                   if (TRUE) {
[16:20:28.919]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:28.919]                     {
[16:20:28.919]                       inherits <- base::inherits
[16:20:28.919]                       invokeRestart <- base::invokeRestart
[16:20:28.919]                       is.null <- base::is.null
[16:20:28.919]                       muffled <- FALSE
[16:20:28.919]                       if (inherits(cond, "message")) {
[16:20:28.919]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:28.919]                         if (muffled) 
[16:20:28.919]                           invokeRestart("muffleMessage")
[16:20:28.919]                       }
[16:20:28.919]                       else if (inherits(cond, "warning")) {
[16:20:28.919]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:28.919]                         if (muffled) 
[16:20:28.919]                           invokeRestart("muffleWarning")
[16:20:28.919]                       }
[16:20:28.919]                       else if (inherits(cond, "condition")) {
[16:20:28.919]                         if (!is.null(pattern)) {
[16:20:28.919]                           computeRestarts <- base::computeRestarts
[16:20:28.919]                           grepl <- base::grepl
[16:20:28.919]                           restarts <- computeRestarts(cond)
[16:20:28.919]                           for (restart in restarts) {
[16:20:28.919]                             name <- restart$name
[16:20:28.919]                             if (is.null(name)) 
[16:20:28.919]                               next
[16:20:28.919]                             if (!grepl(pattern, name)) 
[16:20:28.919]                               next
[16:20:28.919]                             invokeRestart(restart)
[16:20:28.919]                             muffled <- TRUE
[16:20:28.919]                             break
[16:20:28.919]                           }
[16:20:28.919]                         }
[16:20:28.919]                       }
[16:20:28.919]                       invisible(muffled)
[16:20:28.919]                     }
[16:20:28.919]                     muffleCondition(cond, pattern = "^muffle")
[16:20:28.919]                   }
[16:20:28.919]                 }
[16:20:28.919]             }
[16:20:28.919]         }))
[16:20:28.919]     }, error = function(ex) {
[16:20:28.919]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:28.919]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:28.919]                 ...future.rng), started = ...future.startTime, 
[16:20:28.919]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:28.919]             version = "1.8"), class = "FutureResult")
[16:20:28.919]     }, finally = {
[16:20:28.919]         if (!identical(...future.workdir, getwd())) 
[16:20:28.919]             setwd(...future.workdir)
[16:20:28.919]         {
[16:20:28.919]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:28.919]                 ...future.oldOptions$nwarnings <- NULL
[16:20:28.919]             }
[16:20:28.919]             base::options(...future.oldOptions)
[16:20:28.919]             if (.Platform$OS.type == "windows") {
[16:20:28.919]                 old_names <- names(...future.oldEnvVars)
[16:20:28.919]                 envs <- base::Sys.getenv()
[16:20:28.919]                 names <- names(envs)
[16:20:28.919]                 common <- intersect(names, old_names)
[16:20:28.919]                 added <- setdiff(names, old_names)
[16:20:28.919]                 removed <- setdiff(old_names, names)
[16:20:28.919]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:28.919]                   envs[common]]
[16:20:28.919]                 NAMES <- toupper(changed)
[16:20:28.919]                 args <- list()
[16:20:28.919]                 for (kk in seq_along(NAMES)) {
[16:20:28.919]                   name <- changed[[kk]]
[16:20:28.919]                   NAME <- NAMES[[kk]]
[16:20:28.919]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:28.919]                     next
[16:20:28.919]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:28.919]                 }
[16:20:28.919]                 NAMES <- toupper(added)
[16:20:28.919]                 for (kk in seq_along(NAMES)) {
[16:20:28.919]                   name <- added[[kk]]
[16:20:28.919]                   NAME <- NAMES[[kk]]
[16:20:28.919]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:28.919]                     next
[16:20:28.919]                   args[[name]] <- ""
[16:20:28.919]                 }
[16:20:28.919]                 NAMES <- toupper(removed)
[16:20:28.919]                 for (kk in seq_along(NAMES)) {
[16:20:28.919]                   name <- removed[[kk]]
[16:20:28.919]                   NAME <- NAMES[[kk]]
[16:20:28.919]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:28.919]                     next
[16:20:28.919]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:28.919]                 }
[16:20:28.919]                 if (length(args) > 0) 
[16:20:28.919]                   base::do.call(base::Sys.setenv, args = args)
[16:20:28.919]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:28.919]             }
[16:20:28.919]             else {
[16:20:28.919]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:28.919]             }
[16:20:28.919]             {
[16:20:28.919]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:28.919]                   0L) {
[16:20:28.919]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:28.919]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:28.919]                   base::options(opts)
[16:20:28.919]                 }
[16:20:28.919]                 {
[16:20:28.919]                   {
[16:20:28.919]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:28.919]                     NULL
[16:20:28.919]                   }
[16:20:28.919]                   options(future.plan = NULL)
[16:20:28.919]                   if (is.na(NA_character_)) 
[16:20:28.919]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:28.919]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:28.919]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:28.919]                     .init = FALSE)
[16:20:28.919]                 }
[16:20:28.919]             }
[16:20:28.919]         }
[16:20:28.919]     })
[16:20:28.919]     if (TRUE) {
[16:20:28.919]         base::sink(type = "output", split = FALSE)
[16:20:28.919]         if (TRUE) {
[16:20:28.919]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:28.919]         }
[16:20:28.919]         else {
[16:20:28.919]             ...future.result["stdout"] <- base::list(NULL)
[16:20:28.919]         }
[16:20:28.919]         base::close(...future.stdout)
[16:20:28.919]         ...future.stdout <- NULL
[16:20:28.919]     }
[16:20:28.919]     ...future.result$conditions <- ...future.conditions
[16:20:28.919]     ...future.result$finished <- base::Sys.time()
[16:20:28.919]     ...future.result
[16:20:28.919] }
[16:20:28.922] MultisessionFuture started
[16:20:28.922] result() for ClusterFuture ...
[16:20:28.922] receiveMessageFromWorker() for ClusterFuture ...
[16:20:28.922] - Validating connection of MultisessionFuture
[16:20:28.926] - received message: FutureResult
[16:20:28.926] - Received FutureResult
[16:20:28.927] - Erased future from FutureRegistry
[16:20:28.927] result() for ClusterFuture ...
[16:20:28.927] - result already collected: FutureResult
[16:20:28.927] result() for ClusterFuture ... done
[16:20:28.927] receiveMessageFromWorker() for ClusterFuture ... done
[16:20:28.927] result() for ClusterFuture ... done
[16:20:28.927] result() for ClusterFuture ...
[16:20:28.928] - result already collected: FutureResult
[16:20:28.928] result() for ClusterFuture ... done
[1] 42
[16:20:28.928] getGlobalsAndPackages() ...
[16:20:28.928] Searching for globals...
[16:20:28.929] - globals found: [1] ‘{’
[16:20:28.929] Searching for globals ... DONE
[16:20:28.929] Resolving globals: FALSE
[16:20:28.929] 
[16:20:28.930] 
[16:20:28.930] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 28ebb213-7157-0177-2c2f-da7eb4f10ed9
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:20:28.930] Packages needed by the future expression (n = 0): <none>
[16:20:28.931] Packages needed by future strategies (n = 0): <none>
[16:20:28.931] {
[16:20:28.931]     {
[16:20:28.931]         {
[16:20:28.931]             ...future.startTime <- base::Sys.time()
[16:20:28.931]             {
[16:20:28.931]                 {
[16:20:28.931]                   {
[16:20:28.931]                     base::local({
[16:20:28.931]                       has_future <- base::requireNamespace("future", 
[16:20:28.931]                         quietly = TRUE)
[16:20:28.931]                       if (has_future) {
[16:20:28.931]                         ns <- base::getNamespace("future")
[16:20:28.931]                         version <- ns[[".package"]][["version"]]
[16:20:28.931]                         if (is.null(version)) 
[16:20:28.931]                           version <- utils::packageVersion("future")
[16:20:28.931]                       }
[16:20:28.931]                       else {
[16:20:28.931]                         version <- NULL
[16:20:28.931]                       }
[16:20:28.931]                       if (!has_future || version < "1.8.0") {
[16:20:28.931]                         info <- base::c(r_version = base::gsub("R version ", 
[16:20:28.931]                           "", base::R.version$version.string), 
[16:20:28.931]                           platform = base::sprintf("%s (%s-bit)", 
[16:20:28.931]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:28.931]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:28.931]                             "release", "version")], collapse = " "), 
[16:20:28.931]                           hostname = base::Sys.info()[["nodename"]])
[16:20:28.931]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:20:28.931]                           info)
[16:20:28.931]                         info <- base::paste(info, collapse = "; ")
[16:20:28.931]                         if (!has_future) {
[16:20:28.931]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:28.931]                             info)
[16:20:28.931]                         }
[16:20:28.931]                         else {
[16:20:28.931]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:28.931]                             info, version)
[16:20:28.931]                         }
[16:20:28.931]                         base::stop(msg)
[16:20:28.931]                       }
[16:20:28.931]                     })
[16:20:28.931]                   }
[16:20:28.931]                   ...future.strategy.old <- future::plan("list")
[16:20:28.931]                   options(future.plan = NULL)
[16:20:28.931]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:28.931]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:28.931]                 }
[16:20:28.931]                 ...future.workdir <- getwd()
[16:20:28.931]             }
[16:20:28.931]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:28.931]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:28.931]         }
[16:20:28.931]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:28.931]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:28.931]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:28.931]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:28.931]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:28.931]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:28.931]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:28.931]             base::names(...future.oldOptions))
[16:20:28.931]     }
[16:20:28.931]     if (FALSE) {
[16:20:28.931]     }
[16:20:28.931]     else {
[16:20:28.931]         if (TRUE) {
[16:20:28.931]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:28.931]                 open = "w")
[16:20:28.931]         }
[16:20:28.931]         else {
[16:20:28.931]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:28.931]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:28.931]         }
[16:20:28.931]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:28.931]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:28.931]             base::sink(type = "output", split = FALSE)
[16:20:28.931]             base::close(...future.stdout)
[16:20:28.931]         }, add = TRUE)
[16:20:28.931]     }
[16:20:28.931]     ...future.frame <- base::sys.nframe()
[16:20:28.931]     ...future.conditions <- base::list()
[16:20:28.931]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:28.931]     if (FALSE) {
[16:20:28.931]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:28.931]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:28.931]     }
[16:20:28.931]     ...future.result <- base::tryCatch({
[16:20:28.931]         base::withCallingHandlers({
[16:20:28.931]             ...future.value <- base::withVisible(base::local({
[16:20:28.931]                 42L
[16:20:28.931]             }))
[16:20:28.931]             future::FutureResult(value = ...future.value$value, 
[16:20:28.931]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:28.931]                   ...future.rng), globalenv = if (FALSE) 
[16:20:28.931]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:28.931]                     ...future.globalenv.names))
[16:20:28.931]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:28.931]         }, condition = base::local({
[16:20:28.931]             c <- base::c
[16:20:28.931]             inherits <- base::inherits
[16:20:28.931]             invokeRestart <- base::invokeRestart
[16:20:28.931]             length <- base::length
[16:20:28.931]             list <- base::list
[16:20:28.931]             seq.int <- base::seq.int
[16:20:28.931]             signalCondition <- base::signalCondition
[16:20:28.931]             sys.calls <- base::sys.calls
[16:20:28.931]             `[[` <- base::`[[`
[16:20:28.931]             `+` <- base::`+`
[16:20:28.931]             `<<-` <- base::`<<-`
[16:20:28.931]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:28.931]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:28.931]                   3L)]
[16:20:28.931]             }
[16:20:28.931]             function(cond) {
[16:20:28.931]                 is_error <- inherits(cond, "error")
[16:20:28.931]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:28.931]                   NULL)
[16:20:28.931]                 if (is_error) {
[16:20:28.931]                   sessionInformation <- function() {
[16:20:28.931]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:28.931]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:28.931]                       search = base::search(), system = base::Sys.info())
[16:20:28.931]                   }
[16:20:28.931]                   ...future.conditions[[length(...future.conditions) + 
[16:20:28.931]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:28.931]                     cond$call), session = sessionInformation(), 
[16:20:28.931]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:28.931]                   signalCondition(cond)
[16:20:28.931]                 }
[16:20:28.931]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:28.931]                 "immediateCondition"))) {
[16:20:28.931]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:28.931]                   ...future.conditions[[length(...future.conditions) + 
[16:20:28.931]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:28.931]                   if (TRUE && !signal) {
[16:20:28.931]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:28.931]                     {
[16:20:28.931]                       inherits <- base::inherits
[16:20:28.931]                       invokeRestart <- base::invokeRestart
[16:20:28.931]                       is.null <- base::is.null
[16:20:28.931]                       muffled <- FALSE
[16:20:28.931]                       if (inherits(cond, "message")) {
[16:20:28.931]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:28.931]                         if (muffled) 
[16:20:28.931]                           invokeRestart("muffleMessage")
[16:20:28.931]                       }
[16:20:28.931]                       else if (inherits(cond, "warning")) {
[16:20:28.931]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:28.931]                         if (muffled) 
[16:20:28.931]                           invokeRestart("muffleWarning")
[16:20:28.931]                       }
[16:20:28.931]                       else if (inherits(cond, "condition")) {
[16:20:28.931]                         if (!is.null(pattern)) {
[16:20:28.931]                           computeRestarts <- base::computeRestarts
[16:20:28.931]                           grepl <- base::grepl
[16:20:28.931]                           restarts <- computeRestarts(cond)
[16:20:28.931]                           for (restart in restarts) {
[16:20:28.931]                             name <- restart$name
[16:20:28.931]                             if (is.null(name)) 
[16:20:28.931]                               next
[16:20:28.931]                             if (!grepl(pattern, name)) 
[16:20:28.931]                               next
[16:20:28.931]                             invokeRestart(restart)
[16:20:28.931]                             muffled <- TRUE
[16:20:28.931]                             break
[16:20:28.931]                           }
[16:20:28.931]                         }
[16:20:28.931]                       }
[16:20:28.931]                       invisible(muffled)
[16:20:28.931]                     }
[16:20:28.931]                     muffleCondition(cond, pattern = "^muffle")
[16:20:28.931]                   }
[16:20:28.931]                 }
[16:20:28.931]                 else {
[16:20:28.931]                   if (TRUE) {
[16:20:28.931]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:28.931]                     {
[16:20:28.931]                       inherits <- base::inherits
[16:20:28.931]                       invokeRestart <- base::invokeRestart
[16:20:28.931]                       is.null <- base::is.null
[16:20:28.931]                       muffled <- FALSE
[16:20:28.931]                       if (inherits(cond, "message")) {
[16:20:28.931]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:28.931]                         if (muffled) 
[16:20:28.931]                           invokeRestart("muffleMessage")
[16:20:28.931]                       }
[16:20:28.931]                       else if (inherits(cond, "warning")) {
[16:20:28.931]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:28.931]                         if (muffled) 
[16:20:28.931]                           invokeRestart("muffleWarning")
[16:20:28.931]                       }
[16:20:28.931]                       else if (inherits(cond, "condition")) {
[16:20:28.931]                         if (!is.null(pattern)) {
[16:20:28.931]                           computeRestarts <- base::computeRestarts
[16:20:28.931]                           grepl <- base::grepl
[16:20:28.931]                           restarts <- computeRestarts(cond)
[16:20:28.931]                           for (restart in restarts) {
[16:20:28.931]                             name <- restart$name
[16:20:28.931]                             if (is.null(name)) 
[16:20:28.931]                               next
[16:20:28.931]                             if (!grepl(pattern, name)) 
[16:20:28.931]                               next
[16:20:28.931]                             invokeRestart(restart)
[16:20:28.931]                             muffled <- TRUE
[16:20:28.931]                             break
[16:20:28.931]                           }
[16:20:28.931]                         }
[16:20:28.931]                       }
[16:20:28.931]                       invisible(muffled)
[16:20:28.931]                     }
[16:20:28.931]                     muffleCondition(cond, pattern = "^muffle")
[16:20:28.931]                   }
[16:20:28.931]                 }
[16:20:28.931]             }
[16:20:28.931]         }))
[16:20:28.931]     }, error = function(ex) {
[16:20:28.931]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:28.931]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:28.931]                 ...future.rng), started = ...future.startTime, 
[16:20:28.931]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:28.931]             version = "1.8"), class = "FutureResult")
[16:20:28.931]     }, finally = {
[16:20:28.931]         if (!identical(...future.workdir, getwd())) 
[16:20:28.931]             setwd(...future.workdir)
[16:20:28.931]         {
[16:20:28.931]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:28.931]                 ...future.oldOptions$nwarnings <- NULL
[16:20:28.931]             }
[16:20:28.931]             base::options(...future.oldOptions)
[16:20:28.931]             if (.Platform$OS.type == "windows") {
[16:20:28.931]                 old_names <- names(...future.oldEnvVars)
[16:20:28.931]                 envs <- base::Sys.getenv()
[16:20:28.931]                 names <- names(envs)
[16:20:28.931]                 common <- intersect(names, old_names)
[16:20:28.931]                 added <- setdiff(names, old_names)
[16:20:28.931]                 removed <- setdiff(old_names, names)
[16:20:28.931]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:28.931]                   envs[common]]
[16:20:28.931]                 NAMES <- toupper(changed)
[16:20:28.931]                 args <- list()
[16:20:28.931]                 for (kk in seq_along(NAMES)) {
[16:20:28.931]                   name <- changed[[kk]]
[16:20:28.931]                   NAME <- NAMES[[kk]]
[16:20:28.931]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:28.931]                     next
[16:20:28.931]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:28.931]                 }
[16:20:28.931]                 NAMES <- toupper(added)
[16:20:28.931]                 for (kk in seq_along(NAMES)) {
[16:20:28.931]                   name <- added[[kk]]
[16:20:28.931]                   NAME <- NAMES[[kk]]
[16:20:28.931]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:28.931]                     next
[16:20:28.931]                   args[[name]] <- ""
[16:20:28.931]                 }
[16:20:28.931]                 NAMES <- toupper(removed)
[16:20:28.931]                 for (kk in seq_along(NAMES)) {
[16:20:28.931]                   name <- removed[[kk]]
[16:20:28.931]                   NAME <- NAMES[[kk]]
[16:20:28.931]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:28.931]                     next
[16:20:28.931]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:28.931]                 }
[16:20:28.931]                 if (length(args) > 0) 
[16:20:28.931]                   base::do.call(base::Sys.setenv, args = args)
[16:20:28.931]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:28.931]             }
[16:20:28.931]             else {
[16:20:28.931]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:28.931]             }
[16:20:28.931]             {
[16:20:28.931]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:28.931]                   0L) {
[16:20:28.931]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:28.931]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:28.931]                   base::options(opts)
[16:20:28.931]                 }
[16:20:28.931]                 {
[16:20:28.931]                   {
[16:20:28.931]                     NULL
[16:20:28.931]                     RNGkind("Mersenne-Twister")
[16:20:28.931]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:20:28.931]                       inherits = FALSE)
[16:20:28.931]                   }
[16:20:28.931]                   options(future.plan = NULL)
[16:20:28.931]                   if (is.na(NA_character_)) 
[16:20:28.931]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:28.931]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:28.931]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:28.931]                     .init = FALSE)
[16:20:28.931]                 }
[16:20:28.931]             }
[16:20:28.931]         }
[16:20:28.931]     })
[16:20:28.931]     if (TRUE) {
[16:20:28.931]         base::sink(type = "output", split = FALSE)
[16:20:28.931]         if (TRUE) {
[16:20:28.931]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:28.931]         }
[16:20:28.931]         else {
[16:20:28.931]             ...future.result["stdout"] <- base::list(NULL)
[16:20:28.931]         }
[16:20:28.931]         base::close(...future.stdout)
[16:20:28.931]         ...future.stdout <- NULL
[16:20:28.931]     }
[16:20:28.931]     ...future.result$conditions <- ...future.conditions
[16:20:28.931]     ...future.result$finished <- base::Sys.time()
[16:20:28.931]     ...future.result
[16:20:28.931] }
[16:20:28.933] plan(): Setting new future strategy stack:
[16:20:28.933] List of future strategies:
[16:20:28.933] 1. sequential:
[16:20:28.933]    - args: function (..., envir = parent.frame())
[16:20:28.933]    - tweaked: FALSE
[16:20:28.933]    - call: NULL
[16:20:28.934] plan(): nbrOfWorkers() = 1
[16:20:28.935] plan(): Setting new future strategy stack:
[16:20:28.935] List of future strategies:
[16:20:28.935] 1. future:
[16:20:28.935]    - args: function (...)
[16:20:28.935]    - tweaked: FALSE
[16:20:28.935]    - call: plan(foo)
[16:20:28.935] plan(): nbrOfWorkers() = Inf
[16:20:28.935] SequentialFuture started (and completed)
[1] 42
[16:20:28.936] getGlobalsAndPackages() ...
[16:20:28.936] Searching for globals...
[16:20:28.937] - globals found: [1] ‘{’
[16:20:28.937] Searching for globals ... DONE
[16:20:28.937] Resolving globals: FALSE
[16:20:28.937] 
[16:20:28.937] 
[16:20:28.937] getGlobalsAndPackages() ... DONE
[16:20:28.938] Packages needed by the future expression (n = 0): <none>
[16:20:28.938] Packages needed by future strategies (n = 0): <none>
[16:20:28.938] {
[16:20:28.938]     {
[16:20:28.938]         {
[16:20:28.938]             ...future.startTime <- base::Sys.time()
[16:20:28.938]             {
[16:20:28.938]                 {
[16:20:28.938]                   {
[16:20:28.938]                     base::local({
[16:20:28.938]                       has_future <- base::requireNamespace("future", 
[16:20:28.938]                         quietly = TRUE)
[16:20:28.938]                       if (has_future) {
[16:20:28.938]                         ns <- base::getNamespace("future")
[16:20:28.938]                         version <- ns[[".package"]][["version"]]
[16:20:28.938]                         if (is.null(version)) 
[16:20:28.938]                           version <- utils::packageVersion("future")
[16:20:28.938]                       }
[16:20:28.938]                       else {
[16:20:28.938]                         version <- NULL
[16:20:28.938]                       }
[16:20:28.938]                       if (!has_future || version < "1.8.0") {
[16:20:28.938]                         info <- base::c(r_version = base::gsub("R version ", 
[16:20:28.938]                           "", base::R.version$version.string), 
[16:20:28.938]                           platform = base::sprintf("%s (%s-bit)", 
[16:20:28.938]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:28.938]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:28.938]                             "release", "version")], collapse = " "), 
[16:20:28.938]                           hostname = base::Sys.info()[["nodename"]])
[16:20:28.938]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:20:28.938]                           info)
[16:20:28.938]                         info <- base::paste(info, collapse = "; ")
[16:20:28.938]                         if (!has_future) {
[16:20:28.938]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:28.938]                             info)
[16:20:28.938]                         }
[16:20:28.938]                         else {
[16:20:28.938]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:28.938]                             info, version)
[16:20:28.938]                         }
[16:20:28.938]                         base::stop(msg)
[16:20:28.938]                       }
[16:20:28.938]                     })
[16:20:28.938]                   }
[16:20:28.938]                   ...future.strategy.old <- future::plan("list")
[16:20:28.938]                   options(future.plan = NULL)
[16:20:28.938]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:28.938]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:28.938]                 }
[16:20:28.938]                 ...future.workdir <- getwd()
[16:20:28.938]             }
[16:20:28.938]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:28.938]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:28.938]         }
[16:20:28.938]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:28.938]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:28.938]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:28.938]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:28.938]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:28.938]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:28.938]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:28.938]             base::names(...future.oldOptions))
[16:20:28.938]     }
[16:20:28.938]     if (FALSE) {
[16:20:28.938]     }
[16:20:28.938]     else {
[16:20:28.938]         if (TRUE) {
[16:20:28.938]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:28.938]                 open = "w")
[16:20:28.938]         }
[16:20:28.938]         else {
[16:20:28.938]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:28.938]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:28.938]         }
[16:20:28.938]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:28.938]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:28.938]             base::sink(type = "output", split = FALSE)
[16:20:28.938]             base::close(...future.stdout)
[16:20:28.938]         }, add = TRUE)
[16:20:28.938]     }
[16:20:28.938]     ...future.frame <- base::sys.nframe()
[16:20:28.938]     ...future.conditions <- base::list()
[16:20:28.938]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:28.938]     if (FALSE) {
[16:20:28.938]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:28.938]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:28.938]     }
[16:20:28.938]     ...future.result <- base::tryCatch({
[16:20:28.938]         base::withCallingHandlers({
[16:20:28.938]             ...future.value <- base::withVisible(base::local({
[16:20:28.938]                 42L
[16:20:28.938]             }))
[16:20:28.938]             future::FutureResult(value = ...future.value$value, 
[16:20:28.938]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:28.938]                   ...future.rng), globalenv = if (FALSE) 
[16:20:28.938]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:28.938]                     ...future.globalenv.names))
[16:20:28.938]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:28.938]         }, condition = base::local({
[16:20:28.938]             c <- base::c
[16:20:28.938]             inherits <- base::inherits
[16:20:28.938]             invokeRestart <- base::invokeRestart
[16:20:28.938]             length <- base::length
[16:20:28.938]             list <- base::list
[16:20:28.938]             seq.int <- base::seq.int
[16:20:28.938]             signalCondition <- base::signalCondition
[16:20:28.938]             sys.calls <- base::sys.calls
[16:20:28.938]             `[[` <- base::`[[`
[16:20:28.938]             `+` <- base::`+`
[16:20:28.938]             `<<-` <- base::`<<-`
[16:20:28.938]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:28.938]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:28.938]                   3L)]
[16:20:28.938]             }
[16:20:28.938]             function(cond) {
[16:20:28.938]                 is_error <- inherits(cond, "error")
[16:20:28.938]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:28.938]                   NULL)
[16:20:28.938]                 if (is_error) {
[16:20:28.938]                   sessionInformation <- function() {
[16:20:28.938]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:28.938]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:28.938]                       search = base::search(), system = base::Sys.info())
[16:20:28.938]                   }
[16:20:28.938]                   ...future.conditions[[length(...future.conditions) + 
[16:20:28.938]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:28.938]                     cond$call), session = sessionInformation(), 
[16:20:28.938]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:28.938]                   signalCondition(cond)
[16:20:28.938]                 }
[16:20:28.938]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:28.938]                 "immediateCondition"))) {
[16:20:28.938]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:28.938]                   ...future.conditions[[length(...future.conditions) + 
[16:20:28.938]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:28.938]                   if (TRUE && !signal) {
[16:20:28.938]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:28.938]                     {
[16:20:28.938]                       inherits <- base::inherits
[16:20:28.938]                       invokeRestart <- base::invokeRestart
[16:20:28.938]                       is.null <- base::is.null
[16:20:28.938]                       muffled <- FALSE
[16:20:28.938]                       if (inherits(cond, "message")) {
[16:20:28.938]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:28.938]                         if (muffled) 
[16:20:28.938]                           invokeRestart("muffleMessage")
[16:20:28.938]                       }
[16:20:28.938]                       else if (inherits(cond, "warning")) {
[16:20:28.938]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:28.938]                         if (muffled) 
[16:20:28.938]                           invokeRestart("muffleWarning")
[16:20:28.938]                       }
[16:20:28.938]                       else if (inherits(cond, "condition")) {
[16:20:28.938]                         if (!is.null(pattern)) {
[16:20:28.938]                           computeRestarts <- base::computeRestarts
[16:20:28.938]                           grepl <- base::grepl
[16:20:28.938]                           restarts <- computeRestarts(cond)
[16:20:28.938]                           for (restart in restarts) {
[16:20:28.938]                             name <- restart$name
[16:20:28.938]                             if (is.null(name)) 
[16:20:28.938]                               next
[16:20:28.938]                             if (!grepl(pattern, name)) 
[16:20:28.938]                               next
[16:20:28.938]                             invokeRestart(restart)
[16:20:28.938]                             muffled <- TRUE
[16:20:28.938]                             break
[16:20:28.938]                           }
[16:20:28.938]                         }
[16:20:28.938]                       }
[16:20:28.938]                       invisible(muffled)
[16:20:28.938]                     }
[16:20:28.938]                     muffleCondition(cond, pattern = "^muffle")
[16:20:28.938]                   }
[16:20:28.938]                 }
[16:20:28.938]                 else {
[16:20:28.938]                   if (TRUE) {
[16:20:28.938]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:28.938]                     {
[16:20:28.938]                       inherits <- base::inherits
[16:20:28.938]                       invokeRestart <- base::invokeRestart
[16:20:28.938]                       is.null <- base::is.null
[16:20:28.938]                       muffled <- FALSE
[16:20:28.938]                       if (inherits(cond, "message")) {
[16:20:28.938]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:28.938]                         if (muffled) 
[16:20:28.938]                           invokeRestart("muffleMessage")
[16:20:28.938]                       }
[16:20:28.938]                       else if (inherits(cond, "warning")) {
[16:20:28.938]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:28.938]                         if (muffled) 
[16:20:28.938]                           invokeRestart("muffleWarning")
[16:20:28.938]                       }
[16:20:28.938]                       else if (inherits(cond, "condition")) {
[16:20:28.938]                         if (!is.null(pattern)) {
[16:20:28.938]                           computeRestarts <- base::computeRestarts
[16:20:28.938]                           grepl <- base::grepl
[16:20:28.938]                           restarts <- computeRestarts(cond)
[16:20:28.938]                           for (restart in restarts) {
[16:20:28.938]                             name <- restart$name
[16:20:28.938]                             if (is.null(name)) 
[16:20:28.938]                               next
[16:20:28.938]                             if (!grepl(pattern, name)) 
[16:20:28.938]                               next
[16:20:28.938]                             invokeRestart(restart)
[16:20:28.938]                             muffled <- TRUE
[16:20:28.938]                             break
[16:20:28.938]                           }
[16:20:28.938]                         }
[16:20:28.938]                       }
[16:20:28.938]                       invisible(muffled)
[16:20:28.938]                     }
[16:20:28.938]                     muffleCondition(cond, pattern = "^muffle")
[16:20:28.938]                   }
[16:20:28.938]                 }
[16:20:28.938]             }
[16:20:28.938]         }))
[16:20:28.938]     }, error = function(ex) {
[16:20:28.938]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:28.938]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:28.938]                 ...future.rng), started = ...future.startTime, 
[16:20:28.938]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:28.938]             version = "1.8"), class = "FutureResult")
[16:20:28.938]     }, finally = {
[16:20:28.938]         if (!identical(...future.workdir, getwd())) 
[16:20:28.938]             setwd(...future.workdir)
[16:20:28.938]         {
[16:20:28.938]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:28.938]                 ...future.oldOptions$nwarnings <- NULL
[16:20:28.938]             }
[16:20:28.938]             base::options(...future.oldOptions)
[16:20:28.938]             if (.Platform$OS.type == "windows") {
[16:20:28.938]                 old_names <- names(...future.oldEnvVars)
[16:20:28.938]                 envs <- base::Sys.getenv()
[16:20:28.938]                 names <- names(envs)
[16:20:28.938]                 common <- intersect(names, old_names)
[16:20:28.938]                 added <- setdiff(names, old_names)
[16:20:28.938]                 removed <- setdiff(old_names, names)
[16:20:28.938]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:28.938]                   envs[common]]
[16:20:28.938]                 NAMES <- toupper(changed)
[16:20:28.938]                 args <- list()
[16:20:28.938]                 for (kk in seq_along(NAMES)) {
[16:20:28.938]                   name <- changed[[kk]]
[16:20:28.938]                   NAME <- NAMES[[kk]]
[16:20:28.938]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:28.938]                     next
[16:20:28.938]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:28.938]                 }
[16:20:28.938]                 NAMES <- toupper(added)
[16:20:28.938]                 for (kk in seq_along(NAMES)) {
[16:20:28.938]                   name <- added[[kk]]
[16:20:28.938]                   NAME <- NAMES[[kk]]
[16:20:28.938]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:28.938]                     next
[16:20:28.938]                   args[[name]] <- ""
[16:20:28.938]                 }
[16:20:28.938]                 NAMES <- toupper(removed)
[16:20:28.938]                 for (kk in seq_along(NAMES)) {
[16:20:28.938]                   name <- removed[[kk]]
[16:20:28.938]                   NAME <- NAMES[[kk]]
[16:20:28.938]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:28.938]                     next
[16:20:28.938]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:28.938]                 }
[16:20:28.938]                 if (length(args) > 0) 
[16:20:28.938]                   base::do.call(base::Sys.setenv, args = args)
[16:20:28.938]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:28.938]             }
[16:20:28.938]             else {
[16:20:28.938]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:28.938]             }
[16:20:28.938]             {
[16:20:28.938]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:28.938]                   0L) {
[16:20:28.938]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:28.938]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:28.938]                   base::options(opts)
[16:20:28.938]                 }
[16:20:28.938]                 {
[16:20:28.938]                   {
[16:20:28.938]                     NULL
[16:20:28.938]                     RNGkind("Mersenne-Twister")
[16:20:28.938]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:20:28.938]                       inherits = FALSE)
[16:20:28.938]                   }
[16:20:28.938]                   options(future.plan = NULL)
[16:20:28.938]                   if (is.na(NA_character_)) 
[16:20:28.938]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:28.938]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:28.938]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:28.938]                     .init = FALSE)
[16:20:28.938]                 }
[16:20:28.938]             }
[16:20:28.938]         }
[16:20:28.938]     })
[16:20:28.938]     if (TRUE) {
[16:20:28.938]         base::sink(type = "output", split = FALSE)
[16:20:28.938]         if (TRUE) {
[16:20:28.938]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:28.938]         }
[16:20:28.938]         else {
[16:20:28.938]             ...future.result["stdout"] <- base::list(NULL)
[16:20:28.938]         }
[16:20:28.938]         base::close(...future.stdout)
[16:20:28.938]         ...future.stdout <- NULL
[16:20:28.938]     }
[16:20:28.938]     ...future.result$conditions <- ...future.conditions
[16:20:28.938]     ...future.result$finished <- base::Sys.time()
[16:20:28.938]     ...future.result
[16:20:28.938] }
[16:20:28.940] plan(): Setting new future strategy stack:
[16:20:28.940] List of future strategies:
[16:20:28.940] 1. sequential:
[16:20:28.940]    - args: function (..., envir = parent.frame())
[16:20:28.940]    - tweaked: FALSE
[16:20:28.940]    - call: NULL
[16:20:28.941] plan(): nbrOfWorkers() = 1
[16:20:28.942] plan(): Setting new future strategy stack:
[16:20:28.942] List of future strategies:
[16:20:28.942] 1. future:
[16:20:28.942]    - args: function (...)
[16:20:28.942]    - tweaked: FALSE
[16:20:28.942]    - call: plan(foo)
[16:20:28.942] plan(): nbrOfWorkers() = Inf
[16:20:28.942] SequentialFuture started (and completed)
[1] 42
[16:20:28.943] getGlobalsAndPackages() ...
[16:20:28.943] 
[16:20:28.943] - globals: [0] <none>
[16:20:28.943] getGlobalsAndPackages() ... DONE
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: 0x565341cd7c00
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 28ebb213-7157-0177-2c2f-da7eb4f10ed9
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:28.945] Packages needed by the future expression (n = 0): <none>
[16:20:28.945] Packages needed by future strategies (n = 0): <none>
[16:20:28.945] {
[16:20:28.945]     {
[16:20:28.945]         {
[16:20:28.945]             ...future.startTime <- base::Sys.time()
[16:20:28.945]             {
[16:20:28.945]                 {
[16:20:28.945]                   {
[16:20:28.945]                     {
[16:20:28.945]                       base::local({
[16:20:28.945]                         has_future <- base::requireNamespace("future", 
[16:20:28.945]                           quietly = TRUE)
[16:20:28.945]                         if (has_future) {
[16:20:28.945]                           ns <- base::getNamespace("future")
[16:20:28.945]                           version <- ns[[".package"]][["version"]]
[16:20:28.945]                           if (is.null(version)) 
[16:20:28.945]                             version <- utils::packageVersion("future")
[16:20:28.945]                         }
[16:20:28.945]                         else {
[16:20:28.945]                           version <- NULL
[16:20:28.945]                         }
[16:20:28.945]                         if (!has_future || version < "1.8.0") {
[16:20:28.945]                           info <- base::c(r_version = base::gsub("R version ", 
[16:20:28.945]                             "", base::R.version$version.string), 
[16:20:28.945]                             platform = base::sprintf("%s (%s-bit)", 
[16:20:28.945]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:28.945]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:28.945]                               "release", "version")], collapse = " "), 
[16:20:28.945]                             hostname = base::Sys.info()[["nodename"]])
[16:20:28.945]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:20:28.945]                             info)
[16:20:28.945]                           info <- base::paste(info, collapse = "; ")
[16:20:28.945]                           if (!has_future) {
[16:20:28.945]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:28.945]                               info)
[16:20:28.945]                           }
[16:20:28.945]                           else {
[16:20:28.945]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:28.945]                               info, version)
[16:20:28.945]                           }
[16:20:28.945]                           base::stop(msg)
[16:20:28.945]                         }
[16:20:28.945]                       })
[16:20:28.945]                     }
[16:20:28.945]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:28.945]                     base::options(mc.cores = 1L)
[16:20:28.945]                   }
[16:20:28.945]                   ...future.strategy.old <- future::plan("list")
[16:20:28.945]                   options(future.plan = NULL)
[16:20:28.945]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:28.945]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:28.945]                 }
[16:20:28.945]                 ...future.workdir <- getwd()
[16:20:28.945]             }
[16:20:28.945]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:28.945]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:28.945]         }
[16:20:28.945]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:28.945]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:28.945]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:28.945]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:28.945]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:28.945]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:28.945]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:28.945]             base::names(...future.oldOptions))
[16:20:28.945]     }
[16:20:28.945]     if (FALSE) {
[16:20:28.945]     }
[16:20:28.945]     else {
[16:20:28.945]         if (TRUE) {
[16:20:28.945]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:28.945]                 open = "w")
[16:20:28.945]         }
[16:20:28.945]         else {
[16:20:28.945]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:28.945]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:28.945]         }
[16:20:28.945]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:28.945]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:28.945]             base::sink(type = "output", split = FALSE)
[16:20:28.945]             base::close(...future.stdout)
[16:20:28.945]         }, add = TRUE)
[16:20:28.945]     }
[16:20:28.945]     ...future.frame <- base::sys.nframe()
[16:20:28.945]     ...future.conditions <- base::list()
[16:20:28.945]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:28.945]     if (FALSE) {
[16:20:28.945]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:28.945]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:28.945]     }
[16:20:28.945]     ...future.result <- base::tryCatch({
[16:20:28.945]         base::withCallingHandlers({
[16:20:28.945]             ...future.value <- base::withVisible(base::local({
[16:20:28.945]                 withCallingHandlers({
[16:20:28.945]                   {
[16:20:28.945]                     42L
[16:20:28.945]                   }
[16:20:28.945]                 }, immediateCondition = function(cond) {
[16:20:28.945]                   save_rds <- function (object, pathname, ...) 
[16:20:28.945]                   {
[16:20:28.945]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:20:28.945]                     if (file_test("-f", pathname_tmp)) {
[16:20:28.945]                       fi_tmp <- file.info(pathname_tmp)
[16:20:28.945]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:20:28.945]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:28.945]                         fi_tmp[["mtime"]])
[16:20:28.945]                     }
[16:20:28.945]                     tryCatch({
[16:20:28.945]                       saveRDS(object, file = pathname_tmp, ...)
[16:20:28.945]                     }, error = function(ex) {
[16:20:28.945]                       msg <- conditionMessage(ex)
[16:20:28.945]                       fi_tmp <- file.info(pathname_tmp)
[16:20:28.945]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:20:28.945]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:28.945]                         fi_tmp[["mtime"]], msg)
[16:20:28.945]                       ex$message <- msg
[16:20:28.945]                       stop(ex)
[16:20:28.945]                     })
[16:20:28.945]                     stopifnot(file_test("-f", pathname_tmp))
[16:20:28.945]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:20:28.945]                     if (!res || file_test("-f", pathname_tmp)) {
[16:20:28.945]                       fi_tmp <- file.info(pathname_tmp)
[16:20:28.945]                       fi <- file.info(pathname)
[16:20:28.945]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:20:28.945]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:28.945]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:20:28.945]                         fi[["size"]], fi[["mtime"]])
[16:20:28.945]                       stop(msg)
[16:20:28.945]                     }
[16:20:28.945]                     invisible(pathname)
[16:20:28.945]                   }
[16:20:28.945]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:20:28.945]                     rootPath = tempdir()) 
[16:20:28.945]                   {
[16:20:28.945]                     obj <- list(time = Sys.time(), condition = cond)
[16:20:28.945]                     file <- tempfile(pattern = class(cond)[1], 
[16:20:28.945]                       tmpdir = path, fileext = ".rds")
[16:20:28.945]                     save_rds(obj, file)
[16:20:28.945]                   }
[16:20:28.945]                   saveImmediateCondition(cond, path = "/tmp/RtmpWjeeQ5/.future/immediateConditions")
[16:20:28.945]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:28.945]                   {
[16:20:28.945]                     inherits <- base::inherits
[16:20:28.945]                     invokeRestart <- base::invokeRestart
[16:20:28.945]                     is.null <- base::is.null
[16:20:28.945]                     muffled <- FALSE
[16:20:28.945]                     if (inherits(cond, "message")) {
[16:20:28.945]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:28.945]                       if (muffled) 
[16:20:28.945]                         invokeRestart("muffleMessage")
[16:20:28.945]                     }
[16:20:28.945]                     else if (inherits(cond, "warning")) {
[16:20:28.945]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:28.945]                       if (muffled) 
[16:20:28.945]                         invokeRestart("muffleWarning")
[16:20:28.945]                     }
[16:20:28.945]                     else if (inherits(cond, "condition")) {
[16:20:28.945]                       if (!is.null(pattern)) {
[16:20:28.945]                         computeRestarts <- base::computeRestarts
[16:20:28.945]                         grepl <- base::grepl
[16:20:28.945]                         restarts <- computeRestarts(cond)
[16:20:28.945]                         for (restart in restarts) {
[16:20:28.945]                           name <- restart$name
[16:20:28.945]                           if (is.null(name)) 
[16:20:28.945]                             next
[16:20:28.945]                           if (!grepl(pattern, name)) 
[16:20:28.945]                             next
[16:20:28.945]                           invokeRestart(restart)
[16:20:28.945]                           muffled <- TRUE
[16:20:28.945]                           break
[16:20:28.945]                         }
[16:20:28.945]                       }
[16:20:28.945]                     }
[16:20:28.945]                     invisible(muffled)
[16:20:28.945]                   }
[16:20:28.945]                   muffleCondition(cond)
[16:20:28.945]                 })
[16:20:28.945]             }))
[16:20:28.945]             future::FutureResult(value = ...future.value$value, 
[16:20:28.945]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:28.945]                   ...future.rng), globalenv = if (FALSE) 
[16:20:28.945]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:28.945]                     ...future.globalenv.names))
[16:20:28.945]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:28.945]         }, condition = base::local({
[16:20:28.945]             c <- base::c
[16:20:28.945]             inherits <- base::inherits
[16:20:28.945]             invokeRestart <- base::invokeRestart
[16:20:28.945]             length <- base::length
[16:20:28.945]             list <- base::list
[16:20:28.945]             seq.int <- base::seq.int
[16:20:28.945]             signalCondition <- base::signalCondition
[16:20:28.945]             sys.calls <- base::sys.calls
[16:20:28.945]             `[[` <- base::`[[`
[16:20:28.945]             `+` <- base::`+`
[16:20:28.945]             `<<-` <- base::`<<-`
[16:20:28.945]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:28.945]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:28.945]                   3L)]
[16:20:28.945]             }
[16:20:28.945]             function(cond) {
[16:20:28.945]                 is_error <- inherits(cond, "error")
[16:20:28.945]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:28.945]                   NULL)
[16:20:28.945]                 if (is_error) {
[16:20:28.945]                   sessionInformation <- function() {
[16:20:28.945]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:28.945]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:28.945]                       search = base::search(), system = base::Sys.info())
[16:20:28.945]                   }
[16:20:28.945]                   ...future.conditions[[length(...future.conditions) + 
[16:20:28.945]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:28.945]                     cond$call), session = sessionInformation(), 
[16:20:28.945]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:28.945]                   signalCondition(cond)
[16:20:28.945]                 }
[16:20:28.945]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:28.945]                 "immediateCondition"))) {
[16:20:28.945]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:28.945]                   ...future.conditions[[length(...future.conditions) + 
[16:20:28.945]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:28.945]                   if (TRUE && !signal) {
[16:20:28.945]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:28.945]                     {
[16:20:28.945]                       inherits <- base::inherits
[16:20:28.945]                       invokeRestart <- base::invokeRestart
[16:20:28.945]                       is.null <- base::is.null
[16:20:28.945]                       muffled <- FALSE
[16:20:28.945]                       if (inherits(cond, "message")) {
[16:20:28.945]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:28.945]                         if (muffled) 
[16:20:28.945]                           invokeRestart("muffleMessage")
[16:20:28.945]                       }
[16:20:28.945]                       else if (inherits(cond, "warning")) {
[16:20:28.945]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:28.945]                         if (muffled) 
[16:20:28.945]                           invokeRestart("muffleWarning")
[16:20:28.945]                       }
[16:20:28.945]                       else if (inherits(cond, "condition")) {
[16:20:28.945]                         if (!is.null(pattern)) {
[16:20:28.945]                           computeRestarts <- base::computeRestarts
[16:20:28.945]                           grepl <- base::grepl
[16:20:28.945]                           restarts <- computeRestarts(cond)
[16:20:28.945]                           for (restart in restarts) {
[16:20:28.945]                             name <- restart$name
[16:20:28.945]                             if (is.null(name)) 
[16:20:28.945]                               next
[16:20:28.945]                             if (!grepl(pattern, name)) 
[16:20:28.945]                               next
[16:20:28.945]                             invokeRestart(restart)
[16:20:28.945]                             muffled <- TRUE
[16:20:28.945]                             break
[16:20:28.945]                           }
[16:20:28.945]                         }
[16:20:28.945]                       }
[16:20:28.945]                       invisible(muffled)
[16:20:28.945]                     }
[16:20:28.945]                     muffleCondition(cond, pattern = "^muffle")
[16:20:28.945]                   }
[16:20:28.945]                 }
[16:20:28.945]                 else {
[16:20:28.945]                   if (TRUE) {
[16:20:28.945]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:28.945]                     {
[16:20:28.945]                       inherits <- base::inherits
[16:20:28.945]                       invokeRestart <- base::invokeRestart
[16:20:28.945]                       is.null <- base::is.null
[16:20:28.945]                       muffled <- FALSE
[16:20:28.945]                       if (inherits(cond, "message")) {
[16:20:28.945]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:28.945]                         if (muffled) 
[16:20:28.945]                           invokeRestart("muffleMessage")
[16:20:28.945]                       }
[16:20:28.945]                       else if (inherits(cond, "warning")) {
[16:20:28.945]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:28.945]                         if (muffled) 
[16:20:28.945]                           invokeRestart("muffleWarning")
[16:20:28.945]                       }
[16:20:28.945]                       else if (inherits(cond, "condition")) {
[16:20:28.945]                         if (!is.null(pattern)) {
[16:20:28.945]                           computeRestarts <- base::computeRestarts
[16:20:28.945]                           grepl <- base::grepl
[16:20:28.945]                           restarts <- computeRestarts(cond)
[16:20:28.945]                           for (restart in restarts) {
[16:20:28.945]                             name <- restart$name
[16:20:28.945]                             if (is.null(name)) 
[16:20:28.945]                               next
[16:20:28.945]                             if (!grepl(pattern, name)) 
[16:20:28.945]                               next
[16:20:28.945]                             invokeRestart(restart)
[16:20:28.945]                             muffled <- TRUE
[16:20:28.945]                             break
[16:20:28.945]                           }
[16:20:28.945]                         }
[16:20:28.945]                       }
[16:20:28.945]                       invisible(muffled)
[16:20:28.945]                     }
[16:20:28.945]                     muffleCondition(cond, pattern = "^muffle")
[16:20:28.945]                   }
[16:20:28.945]                 }
[16:20:28.945]             }
[16:20:28.945]         }))
[16:20:28.945]     }, error = function(ex) {
[16:20:28.945]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:28.945]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:28.945]                 ...future.rng), started = ...future.startTime, 
[16:20:28.945]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:28.945]             version = "1.8"), class = "FutureResult")
[16:20:28.945]     }, finally = {
[16:20:28.945]         if (!identical(...future.workdir, getwd())) 
[16:20:28.945]             setwd(...future.workdir)
[16:20:28.945]         {
[16:20:28.945]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:28.945]                 ...future.oldOptions$nwarnings <- NULL
[16:20:28.945]             }
[16:20:28.945]             base::options(...future.oldOptions)
[16:20:28.945]             if (.Platform$OS.type == "windows") {
[16:20:28.945]                 old_names <- names(...future.oldEnvVars)
[16:20:28.945]                 envs <- base::Sys.getenv()
[16:20:28.945]                 names <- names(envs)
[16:20:28.945]                 common <- intersect(names, old_names)
[16:20:28.945]                 added <- setdiff(names, old_names)
[16:20:28.945]                 removed <- setdiff(old_names, names)
[16:20:28.945]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:28.945]                   envs[common]]
[16:20:28.945]                 NAMES <- toupper(changed)
[16:20:28.945]                 args <- list()
[16:20:28.945]                 for (kk in seq_along(NAMES)) {
[16:20:28.945]                   name <- changed[[kk]]
[16:20:28.945]                   NAME <- NAMES[[kk]]
[16:20:28.945]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:28.945]                     next
[16:20:28.945]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:28.945]                 }
[16:20:28.945]                 NAMES <- toupper(added)
[16:20:28.945]                 for (kk in seq_along(NAMES)) {
[16:20:28.945]                   name <- added[[kk]]
[16:20:28.945]                   NAME <- NAMES[[kk]]
[16:20:28.945]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:28.945]                     next
[16:20:28.945]                   args[[name]] <- ""
[16:20:28.945]                 }
[16:20:28.945]                 NAMES <- toupper(removed)
[16:20:28.945]                 for (kk in seq_along(NAMES)) {
[16:20:28.945]                   name <- removed[[kk]]
[16:20:28.945]                   NAME <- NAMES[[kk]]
[16:20:28.945]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:28.945]                     next
[16:20:28.945]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:28.945]                 }
[16:20:28.945]                 if (length(args) > 0) 
[16:20:28.945]                   base::do.call(base::Sys.setenv, args = args)
[16:20:28.945]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:28.945]             }
[16:20:28.945]             else {
[16:20:28.945]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:28.945]             }
[16:20:28.945]             {
[16:20:28.945]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:28.945]                   0L) {
[16:20:28.945]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:28.945]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:28.945]                   base::options(opts)
[16:20:28.945]                 }
[16:20:28.945]                 {
[16:20:28.945]                   {
[16:20:28.945]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:28.945]                     NULL
[16:20:28.945]                   }
[16:20:28.945]                   options(future.plan = NULL)
[16:20:28.945]                   if (is.na(NA_character_)) 
[16:20:28.945]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:28.945]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:28.945]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:28.945]                     .init = FALSE)
[16:20:28.945]                 }
[16:20:28.945]             }
[16:20:28.945]         }
[16:20:28.945]     })
[16:20:28.945]     if (TRUE) {
[16:20:28.945]         base::sink(type = "output", split = FALSE)
[16:20:28.945]         if (TRUE) {
[16:20:28.945]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:28.945]         }
[16:20:28.945]         else {
[16:20:28.945]             ...future.result["stdout"] <- base::list(NULL)
[16:20:28.945]         }
[16:20:28.945]         base::close(...future.stdout)
[16:20:28.945]         ...future.stdout <- NULL
[16:20:28.945]     }
[16:20:28.945]     ...future.result$conditions <- ...future.conditions
[16:20:28.945]     ...future.result$finished <- base::Sys.time()
[16:20:28.945]     ...future.result
[16:20:28.945] }
[16:20:28.948] requestCore(): workers = 2
[16:20:28.951] MulticoreFuture started
[16:20:28.952] plan(): Setting new future strategy stack:
[16:20:28.953] result() for MulticoreFuture ...
[16:20:28.953] List of future strategies:
[16:20:28.953] 1. sequential:
[16:20:28.953]    - args: function (..., envir = parent.frame())
[16:20:28.953]    - tweaked: FALSE
[16:20:28.953]    - call: NULL
[16:20:28.954] plan(): nbrOfWorkers() = 1
[16:20:28.956] plan(): Setting new future strategy stack:
[16:20:28.956] List of future strategies:
[16:20:28.956] 1. future:
[16:20:28.956]    - args: function (...)
[16:20:28.956]    - tweaked: FALSE
[16:20:28.956]    - call: plan(foo)
[16:20:28.956] plan(): nbrOfWorkers() = Inf
[16:20:28.957] result() for MulticoreFuture ...
[16:20:28.958] result() for MulticoreFuture ... done
[16:20:28.958] result() for MulticoreFuture ... done
[16:20:28.958] result() for MulticoreFuture ...
[16:20:28.958] result() for MulticoreFuture ... done
[1] 42
[16:20:28.960] getGlobalsAndPackages() ...
[16:20:28.960] 
[16:20:28.960] - globals: [0] <none>
[16:20:28.960] getGlobalsAndPackages() ... DONE
[16:20:28.961] Packages needed by the future expression (n = 0): <none>
[16:20:28.961] Packages needed by future strategies (n = 0): <none>
[16:20:28.962] {
[16:20:28.962]     {
[16:20:28.962]         {
[16:20:28.962]             ...future.startTime <- base::Sys.time()
[16:20:28.962]             {
[16:20:28.962]                 {
[16:20:28.962]                   {
[16:20:28.962]                     {
[16:20:28.962]                       base::local({
[16:20:28.962]                         has_future <- base::requireNamespace("future", 
[16:20:28.962]                           quietly = TRUE)
[16:20:28.962]                         if (has_future) {
[16:20:28.962]                           ns <- base::getNamespace("future")
[16:20:28.962]                           version <- ns[[".package"]][["version"]]
[16:20:28.962]                           if (is.null(version)) 
[16:20:28.962]                             version <- utils::packageVersion("future")
[16:20:28.962]                         }
[16:20:28.962]                         else {
[16:20:28.962]                           version <- NULL
[16:20:28.962]                         }
[16:20:28.962]                         if (!has_future || version < "1.8.0") {
[16:20:28.962]                           info <- base::c(r_version = base::gsub("R version ", 
[16:20:28.962]                             "", base::R.version$version.string), 
[16:20:28.962]                             platform = base::sprintf("%s (%s-bit)", 
[16:20:28.962]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:28.962]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:28.962]                               "release", "version")], collapse = " "), 
[16:20:28.962]                             hostname = base::Sys.info()[["nodename"]])
[16:20:28.962]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:20:28.962]                             info)
[16:20:28.962]                           info <- base::paste(info, collapse = "; ")
[16:20:28.962]                           if (!has_future) {
[16:20:28.962]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:28.962]                               info)
[16:20:28.962]                           }
[16:20:28.962]                           else {
[16:20:28.962]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:28.962]                               info, version)
[16:20:28.962]                           }
[16:20:28.962]                           base::stop(msg)
[16:20:28.962]                         }
[16:20:28.962]                       })
[16:20:28.962]                     }
[16:20:28.962]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:28.962]                     base::options(mc.cores = 1L)
[16:20:28.962]                   }
[16:20:28.962]                   ...future.strategy.old <- future::plan("list")
[16:20:28.962]                   options(future.plan = NULL)
[16:20:28.962]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:28.962]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:28.962]                 }
[16:20:28.962]                 ...future.workdir <- getwd()
[16:20:28.962]             }
[16:20:28.962]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:28.962]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:28.962]         }
[16:20:28.962]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:28.962]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:28.962]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:28.962]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:28.962]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:28.962]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:28.962]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:28.962]             base::names(...future.oldOptions))
[16:20:28.962]     }
[16:20:28.962]     if (FALSE) {
[16:20:28.962]     }
[16:20:28.962]     else {
[16:20:28.962]         if (TRUE) {
[16:20:28.962]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:28.962]                 open = "w")
[16:20:28.962]         }
[16:20:28.962]         else {
[16:20:28.962]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:28.962]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:28.962]         }
[16:20:28.962]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:28.962]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:28.962]             base::sink(type = "output", split = FALSE)
[16:20:28.962]             base::close(...future.stdout)
[16:20:28.962]         }, add = TRUE)
[16:20:28.962]     }
[16:20:28.962]     ...future.frame <- base::sys.nframe()
[16:20:28.962]     ...future.conditions <- base::list()
[16:20:28.962]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:28.962]     if (FALSE) {
[16:20:28.962]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:28.962]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:28.962]     }
[16:20:28.962]     ...future.result <- base::tryCatch({
[16:20:28.962]         base::withCallingHandlers({
[16:20:28.962]             ...future.value <- base::withVisible(base::local({
[16:20:28.962]                 withCallingHandlers({
[16:20:28.962]                   {
[16:20:28.962]                     42L
[16:20:28.962]                   }
[16:20:28.962]                 }, immediateCondition = function(cond) {
[16:20:28.962]                   save_rds <- function (object, pathname, ...) 
[16:20:28.962]                   {
[16:20:28.962]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:20:28.962]                     if (file_test("-f", pathname_tmp)) {
[16:20:28.962]                       fi_tmp <- file.info(pathname_tmp)
[16:20:28.962]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:20:28.962]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:28.962]                         fi_tmp[["mtime"]])
[16:20:28.962]                     }
[16:20:28.962]                     tryCatch({
[16:20:28.962]                       saveRDS(object, file = pathname_tmp, ...)
[16:20:28.962]                     }, error = function(ex) {
[16:20:28.962]                       msg <- conditionMessage(ex)
[16:20:28.962]                       fi_tmp <- file.info(pathname_tmp)
[16:20:28.962]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:20:28.962]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:28.962]                         fi_tmp[["mtime"]], msg)
[16:20:28.962]                       ex$message <- msg
[16:20:28.962]                       stop(ex)
[16:20:28.962]                     })
[16:20:28.962]                     stopifnot(file_test("-f", pathname_tmp))
[16:20:28.962]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:20:28.962]                     if (!res || file_test("-f", pathname_tmp)) {
[16:20:28.962]                       fi_tmp <- file.info(pathname_tmp)
[16:20:28.962]                       fi <- file.info(pathname)
[16:20:28.962]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:20:28.962]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:28.962]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:20:28.962]                         fi[["size"]], fi[["mtime"]])
[16:20:28.962]                       stop(msg)
[16:20:28.962]                     }
[16:20:28.962]                     invisible(pathname)
[16:20:28.962]                   }
[16:20:28.962]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:20:28.962]                     rootPath = tempdir()) 
[16:20:28.962]                   {
[16:20:28.962]                     obj <- list(time = Sys.time(), condition = cond)
[16:20:28.962]                     file <- tempfile(pattern = class(cond)[1], 
[16:20:28.962]                       tmpdir = path, fileext = ".rds")
[16:20:28.962]                     save_rds(obj, file)
[16:20:28.962]                   }
[16:20:28.962]                   saveImmediateCondition(cond, path = "/tmp/RtmpWjeeQ5/.future/immediateConditions")
[16:20:28.962]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:28.962]                   {
[16:20:28.962]                     inherits <- base::inherits
[16:20:28.962]                     invokeRestart <- base::invokeRestart
[16:20:28.962]                     is.null <- base::is.null
[16:20:28.962]                     muffled <- FALSE
[16:20:28.962]                     if (inherits(cond, "message")) {
[16:20:28.962]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:28.962]                       if (muffled) 
[16:20:28.962]                         invokeRestart("muffleMessage")
[16:20:28.962]                     }
[16:20:28.962]                     else if (inherits(cond, "warning")) {
[16:20:28.962]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:28.962]                       if (muffled) 
[16:20:28.962]                         invokeRestart("muffleWarning")
[16:20:28.962]                     }
[16:20:28.962]                     else if (inherits(cond, "condition")) {
[16:20:28.962]                       if (!is.null(pattern)) {
[16:20:28.962]                         computeRestarts <- base::computeRestarts
[16:20:28.962]                         grepl <- base::grepl
[16:20:28.962]                         restarts <- computeRestarts(cond)
[16:20:28.962]                         for (restart in restarts) {
[16:20:28.962]                           name <- restart$name
[16:20:28.962]                           if (is.null(name)) 
[16:20:28.962]                             next
[16:20:28.962]                           if (!grepl(pattern, name)) 
[16:20:28.962]                             next
[16:20:28.962]                           invokeRestart(restart)
[16:20:28.962]                           muffled <- TRUE
[16:20:28.962]                           break
[16:20:28.962]                         }
[16:20:28.962]                       }
[16:20:28.962]                     }
[16:20:28.962]                     invisible(muffled)
[16:20:28.962]                   }
[16:20:28.962]                   muffleCondition(cond)
[16:20:28.962]                 })
[16:20:28.962]             }))
[16:20:28.962]             future::FutureResult(value = ...future.value$value, 
[16:20:28.962]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:28.962]                   ...future.rng), globalenv = if (FALSE) 
[16:20:28.962]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:28.962]                     ...future.globalenv.names))
[16:20:28.962]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:28.962]         }, condition = base::local({
[16:20:28.962]             c <- base::c
[16:20:28.962]             inherits <- base::inherits
[16:20:28.962]             invokeRestart <- base::invokeRestart
[16:20:28.962]             length <- base::length
[16:20:28.962]             list <- base::list
[16:20:28.962]             seq.int <- base::seq.int
[16:20:28.962]             signalCondition <- base::signalCondition
[16:20:28.962]             sys.calls <- base::sys.calls
[16:20:28.962]             `[[` <- base::`[[`
[16:20:28.962]             `+` <- base::`+`
[16:20:28.962]             `<<-` <- base::`<<-`
[16:20:28.962]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:28.962]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:28.962]                   3L)]
[16:20:28.962]             }
[16:20:28.962]             function(cond) {
[16:20:28.962]                 is_error <- inherits(cond, "error")
[16:20:28.962]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:28.962]                   NULL)
[16:20:28.962]                 if (is_error) {
[16:20:28.962]                   sessionInformation <- function() {
[16:20:28.962]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:28.962]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:28.962]                       search = base::search(), system = base::Sys.info())
[16:20:28.962]                   }
[16:20:28.962]                   ...future.conditions[[length(...future.conditions) + 
[16:20:28.962]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:28.962]                     cond$call), session = sessionInformation(), 
[16:20:28.962]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:28.962]                   signalCondition(cond)
[16:20:28.962]                 }
[16:20:28.962]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:28.962]                 "immediateCondition"))) {
[16:20:28.962]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:28.962]                   ...future.conditions[[length(...future.conditions) + 
[16:20:28.962]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:28.962]                   if (TRUE && !signal) {
[16:20:28.962]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:28.962]                     {
[16:20:28.962]                       inherits <- base::inherits
[16:20:28.962]                       invokeRestart <- base::invokeRestart
[16:20:28.962]                       is.null <- base::is.null
[16:20:28.962]                       muffled <- FALSE
[16:20:28.962]                       if (inherits(cond, "message")) {
[16:20:28.962]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:28.962]                         if (muffled) 
[16:20:28.962]                           invokeRestart("muffleMessage")
[16:20:28.962]                       }
[16:20:28.962]                       else if (inherits(cond, "warning")) {
[16:20:28.962]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:28.962]                         if (muffled) 
[16:20:28.962]                           invokeRestart("muffleWarning")
[16:20:28.962]                       }
[16:20:28.962]                       else if (inherits(cond, "condition")) {
[16:20:28.962]                         if (!is.null(pattern)) {
[16:20:28.962]                           computeRestarts <- base::computeRestarts
[16:20:28.962]                           grepl <- base::grepl
[16:20:28.962]                           restarts <- computeRestarts(cond)
[16:20:28.962]                           for (restart in restarts) {
[16:20:28.962]                             name <- restart$name
[16:20:28.962]                             if (is.null(name)) 
[16:20:28.962]                               next
[16:20:28.962]                             if (!grepl(pattern, name)) 
[16:20:28.962]                               next
[16:20:28.962]                             invokeRestart(restart)
[16:20:28.962]                             muffled <- TRUE
[16:20:28.962]                             break
[16:20:28.962]                           }
[16:20:28.962]                         }
[16:20:28.962]                       }
[16:20:28.962]                       invisible(muffled)
[16:20:28.962]                     }
[16:20:28.962]                     muffleCondition(cond, pattern = "^muffle")
[16:20:28.962]                   }
[16:20:28.962]                 }
[16:20:28.962]                 else {
[16:20:28.962]                   if (TRUE) {
[16:20:28.962]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:28.962]                     {
[16:20:28.962]                       inherits <- base::inherits
[16:20:28.962]                       invokeRestart <- base::invokeRestart
[16:20:28.962]                       is.null <- base::is.null
[16:20:28.962]                       muffled <- FALSE
[16:20:28.962]                       if (inherits(cond, "message")) {
[16:20:28.962]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:28.962]                         if (muffled) 
[16:20:28.962]                           invokeRestart("muffleMessage")
[16:20:28.962]                       }
[16:20:28.962]                       else if (inherits(cond, "warning")) {
[16:20:28.962]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:28.962]                         if (muffled) 
[16:20:28.962]                           invokeRestart("muffleWarning")
[16:20:28.962]                       }
[16:20:28.962]                       else if (inherits(cond, "condition")) {
[16:20:28.962]                         if (!is.null(pattern)) {
[16:20:28.962]                           computeRestarts <- base::computeRestarts
[16:20:28.962]                           grepl <- base::grepl
[16:20:28.962]                           restarts <- computeRestarts(cond)
[16:20:28.962]                           for (restart in restarts) {
[16:20:28.962]                             name <- restart$name
[16:20:28.962]                             if (is.null(name)) 
[16:20:28.962]                               next
[16:20:28.962]                             if (!grepl(pattern, name)) 
[16:20:28.962]                               next
[16:20:28.962]                             invokeRestart(restart)
[16:20:28.962]                             muffled <- TRUE
[16:20:28.962]                             break
[16:20:28.962]                           }
[16:20:28.962]                         }
[16:20:28.962]                       }
[16:20:28.962]                       invisible(muffled)
[16:20:28.962]                     }
[16:20:28.962]                     muffleCondition(cond, pattern = "^muffle")
[16:20:28.962]                   }
[16:20:28.962]                 }
[16:20:28.962]             }
[16:20:28.962]         }))
[16:20:28.962]     }, error = function(ex) {
[16:20:28.962]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:28.962]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:28.962]                 ...future.rng), started = ...future.startTime, 
[16:20:28.962]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:28.962]             version = "1.8"), class = "FutureResult")
[16:20:28.962]     }, finally = {
[16:20:28.962]         if (!identical(...future.workdir, getwd())) 
[16:20:28.962]             setwd(...future.workdir)
[16:20:28.962]         {
[16:20:28.962]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:28.962]                 ...future.oldOptions$nwarnings <- NULL
[16:20:28.962]             }
[16:20:28.962]             base::options(...future.oldOptions)
[16:20:28.962]             if (.Platform$OS.type == "windows") {
[16:20:28.962]                 old_names <- names(...future.oldEnvVars)
[16:20:28.962]                 envs <- base::Sys.getenv()
[16:20:28.962]                 names <- names(envs)
[16:20:28.962]                 common <- intersect(names, old_names)
[16:20:28.962]                 added <- setdiff(names, old_names)
[16:20:28.962]                 removed <- setdiff(old_names, names)
[16:20:28.962]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:28.962]                   envs[common]]
[16:20:28.962]                 NAMES <- toupper(changed)
[16:20:28.962]                 args <- list()
[16:20:28.962]                 for (kk in seq_along(NAMES)) {
[16:20:28.962]                   name <- changed[[kk]]
[16:20:28.962]                   NAME <- NAMES[[kk]]
[16:20:28.962]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:28.962]                     next
[16:20:28.962]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:28.962]                 }
[16:20:28.962]                 NAMES <- toupper(added)
[16:20:28.962]                 for (kk in seq_along(NAMES)) {
[16:20:28.962]                   name <- added[[kk]]
[16:20:28.962]                   NAME <- NAMES[[kk]]
[16:20:28.962]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:28.962]                     next
[16:20:28.962]                   args[[name]] <- ""
[16:20:28.962]                 }
[16:20:28.962]                 NAMES <- toupper(removed)
[16:20:28.962]                 for (kk in seq_along(NAMES)) {
[16:20:28.962]                   name <- removed[[kk]]
[16:20:28.962]                   NAME <- NAMES[[kk]]
[16:20:28.962]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:28.962]                     next
[16:20:28.962]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:28.962]                 }
[16:20:28.962]                 if (length(args) > 0) 
[16:20:28.962]                   base::do.call(base::Sys.setenv, args = args)
[16:20:28.962]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:28.962]             }
[16:20:28.962]             else {
[16:20:28.962]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:28.962]             }
[16:20:28.962]             {
[16:20:28.962]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:28.962]                   0L) {
[16:20:28.962]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:28.962]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:28.962]                   base::options(opts)
[16:20:28.962]                 }
[16:20:28.962]                 {
[16:20:28.962]                   {
[16:20:28.962]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:28.962]                     NULL
[16:20:28.962]                   }
[16:20:28.962]                   options(future.plan = NULL)
[16:20:28.962]                   if (is.na(NA_character_)) 
[16:20:28.962]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:28.962]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:28.962]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:28.962]                     .init = FALSE)
[16:20:28.962]                 }
[16:20:28.962]             }
[16:20:28.962]         }
[16:20:28.962]     })
[16:20:28.962]     if (TRUE) {
[16:20:28.962]         base::sink(type = "output", split = FALSE)
[16:20:28.962]         if (TRUE) {
[16:20:28.962]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:28.962]         }
[16:20:28.962]         else {
[16:20:28.962]             ...future.result["stdout"] <- base::list(NULL)
[16:20:28.962]         }
[16:20:28.962]         base::close(...future.stdout)
[16:20:28.962]         ...future.stdout <- NULL
[16:20:28.962]     }
[16:20:28.962]     ...future.result$conditions <- ...future.conditions
[16:20:28.962]     ...future.result$finished <- base::Sys.time()
[16:20:28.962]     ...future.result
[16:20:28.962] }
[16:20:28.964] requestCore(): workers = 2
[16:20:28.966] MulticoreFuture started
[16:20:28.967] result() for MulticoreFuture ...
[16:20:28.967] plan(): Setting new future strategy stack:
[16:20:28.967] List of future strategies:
[16:20:28.967] 1. sequential:
[16:20:28.967]    - args: function (..., envir = parent.frame())
[16:20:28.967]    - tweaked: FALSE
[16:20:28.967]    - call: NULL
[16:20:28.968] plan(): nbrOfWorkers() = 1
[16:20:28.970] plan(): Setting new future strategy stack:
[16:20:28.970] List of future strategies:
[16:20:28.970] 1. future:
[16:20:28.970]    - args: function (...)
[16:20:28.970]    - tweaked: FALSE
[16:20:28.970]    - call: plan(foo)
[16:20:28.971] plan(): nbrOfWorkers() = Inf
[16:20:28.971] result() for MulticoreFuture ...
[16:20:28.972] result() for MulticoreFuture ... done
[16:20:28.972] result() for MulticoreFuture ... done
[16:20:28.972] result() for MulticoreFuture ...
[16:20:28.972] result() for MulticoreFuture ... done
[1] 42
> 
> message("*** Future class - exception ... DONE")
*** Future class - exception ... DONE
> 
> message("*** Future class ... DONE")
*** Future class ... DONE
> 
> source("incl/end.R")
[16:20:28.973] plan(): Setting new future strategy stack:
[16:20:28.973] List of future strategies:
[16:20:28.973] 1. FutureStrategy:
[16:20:28.973]    - args: function (..., envir = parent.frame())
[16:20:28.973]    - tweaked: FALSE
[16:20:28.973]    - call: future::plan(oplan)
[16:20:28.974] plan(): nbrOfWorkers() = 1
> 
