
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[10:32:37.210] plan(): Setting new future strategy stack:
[10:32:37.211] List of future strategies:
[10:32:37.211] 1. sequential:
[10:32:37.211]    - args: function (..., envir = parent.frame())
[10:32:37.211]    - tweaked: FALSE
[10:32:37.211]    - call: future::plan("sequential")
[10:32:37.224] plan(): nbrOfWorkers() = 1
> 
> message("*** Future class ...")
*** Future class ...
> 
> message("*** Future class - exception ...")
*** Future class - exception ...
> 
> f <- Future()
[10:32:37.235] getGlobalsAndPackages() ...
[10:32:37.235] 
[10:32:37.235] - globals: [0] <none>
[10:32:37.236] getGlobalsAndPackages() ... DONE
> print(f)
Future:
Label: ‘<none>’
Expression:
NULL
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 7c75f986-c4e2-313c-9860-2165731bfddf
Class: ‘Future’, ‘environment’
> 
> res <- tryCatch(value(f), error = identity)
[10:32:37.237] run() for ‘Future’ ...
[10:32:37.237] - state: ‘created’
[10:32:37.237] run() for ‘Future’ ... done
> print(res)
<simpleError: ‘future$lazy’ is not TRUE>
> stopifnot(inherits(res, "error"))
> 
> ## Invalid seed
> res <- tryCatch(f <- Future(42, seed = 1:2), error = identity)
> stopifnot(inherits(res, "error"))
> 
> ## When no packages are exported
> foo <- structure(function(...) { Future(1) }, class = "future")
> plan(foo)
[10:32:37.240] plan(): Setting new future strategy stack:
[10:32:37.240] List of future strategies:
[10:32:37.240] 1. future:
[10:32:37.240]    - args: function (...)
[10:32:37.240]    - tweaked: FALSE
[10:32:37.240]    - call: plan(foo)
[10:32:37.251] plan(): nbrOfWorkers() = Inf
> f <- Future()
[10:32:37.251] getGlobalsAndPackages() ...
[10:32:37.251] 
[10:32:37.251] - globals: [0] <none>
[10:32:37.251] getGlobalsAndPackages() ... DONE
> expr <- getExpression(f)
[10:32:37.252] Packages needed by the future expression (n = 0): <none>
[10:32:37.252] Packages needed by future strategies (n = 0): <none>
[10:32:37.253] {
[10:32:37.253]     {
[10:32:37.253]         {
[10:32:37.253]             ...future.startTime <- base::Sys.time()
[10:32:37.253]             {
[10:32:37.253]                 {
[10:32:37.253]                   {
[10:32:37.253]                     base::local({
[10:32:37.253]                       has_future <- base::requireNamespace("future", 
[10:32:37.253]                         quietly = TRUE)
[10:32:37.253]                       if (has_future) {
[10:32:37.253]                         ns <- base::getNamespace("future")
[10:32:37.253]                         version <- ns[[".package"]][["version"]]
[10:32:37.253]                         if (is.null(version)) 
[10:32:37.253]                           version <- utils::packageVersion("future")
[10:32:37.253]                       }
[10:32:37.253]                       else {
[10:32:37.253]                         version <- NULL
[10:32:37.253]                       }
[10:32:37.253]                       if (!has_future || version < "1.8.0") {
[10:32:37.253]                         info <- base::c(r_version = base::gsub("R version ", 
[10:32:37.253]                           "", base::R.version$version.string), 
[10:32:37.253]                           platform = base::sprintf("%s (%s-bit)", 
[10:32:37.253]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:37.253]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:37.253]                             "release", "version")], collapse = " "), 
[10:32:37.253]                           hostname = base::Sys.info()[["nodename"]])
[10:32:37.253]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:32:37.253]                           info)
[10:32:37.253]                         info <- base::paste(info, collapse = "; ")
[10:32:37.253]                         if (!has_future) {
[10:32:37.253]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:37.253]                             info)
[10:32:37.253]                         }
[10:32:37.253]                         else {
[10:32:37.253]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:37.253]                             info, version)
[10:32:37.253]                         }
[10:32:37.253]                         base::stop(msg)
[10:32:37.253]                       }
[10:32:37.253]                     })
[10:32:37.253]                   }
[10:32:37.253]                   ...future.strategy.old <- future::plan("list")
[10:32:37.253]                   options(future.plan = NULL)
[10:32:37.253]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:37.253]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:37.253]                 }
[10:32:37.253]                 ...future.workdir <- getwd()
[10:32:37.253]             }
[10:32:37.253]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:37.253]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:37.253]         }
[10:32:37.253]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:37.253]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:37.253]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:37.253]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:37.253]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:37.253]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:37.253]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:37.253]             base::names(...future.oldOptions))
[10:32:37.253]     }
[10:32:37.253]     if (FALSE) {
[10:32:37.253]     }
[10:32:37.253]     else {
[10:32:37.253]         if (TRUE) {
[10:32:37.253]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:37.253]                 open = "w")
[10:32:37.253]         }
[10:32:37.253]         else {
[10:32:37.253]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:37.253]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:37.253]         }
[10:32:37.253]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:37.253]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:37.253]             base::sink(type = "output", split = FALSE)
[10:32:37.253]             base::close(...future.stdout)
[10:32:37.253]         }, add = TRUE)
[10:32:37.253]     }
[10:32:37.253]     ...future.frame <- base::sys.nframe()
[10:32:37.253]     ...future.conditions <- base::list()
[10:32:37.253]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:37.253]     if (FALSE) {
[10:32:37.253]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:37.253]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:37.253]     }
[10:32:37.253]     ...future.result <- base::tryCatch({
[10:32:37.253]         base::withCallingHandlers({
[10:32:37.253]             ...future.value <- base::withVisible(base::local(NULL))
[10:32:37.253]             future::FutureResult(value = ...future.value$value, 
[10:32:37.253]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:37.253]                   ...future.rng), globalenv = if (FALSE) 
[10:32:37.253]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:37.253]                     ...future.globalenv.names))
[10:32:37.253]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:37.253]         }, condition = base::local({
[10:32:37.253]             c <- base::c
[10:32:37.253]             inherits <- base::inherits
[10:32:37.253]             invokeRestart <- base::invokeRestart
[10:32:37.253]             length <- base::length
[10:32:37.253]             list <- base::list
[10:32:37.253]             seq.int <- base::seq.int
[10:32:37.253]             signalCondition <- base::signalCondition
[10:32:37.253]             sys.calls <- base::sys.calls
[10:32:37.253]             `[[` <- base::`[[`
[10:32:37.253]             `+` <- base::`+`
[10:32:37.253]             `<<-` <- base::`<<-`
[10:32:37.253]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:37.253]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:37.253]                   3L)]
[10:32:37.253]             }
[10:32:37.253]             function(cond) {
[10:32:37.253]                 is_error <- inherits(cond, "error")
[10:32:37.253]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:37.253]                   NULL)
[10:32:37.253]                 if (is_error) {
[10:32:37.253]                   sessionInformation <- function() {
[10:32:37.253]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:37.253]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:37.253]                       search = base::search(), system = base::Sys.info())
[10:32:37.253]                   }
[10:32:37.253]                   ...future.conditions[[length(...future.conditions) + 
[10:32:37.253]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:37.253]                     cond$call), session = sessionInformation(), 
[10:32:37.253]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:37.253]                   signalCondition(cond)
[10:32:37.253]                 }
[10:32:37.253]                 else if (!ignore && TRUE && inherits(cond, "condition")) {
[10:32:37.253]                   signal <- FALSE && inherits(cond, character(0))
[10:32:37.253]                   ...future.conditions[[length(...future.conditions) + 
[10:32:37.253]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:37.253]                   if (FALSE && !signal) {
[10:32:37.253]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:37.253]                     {
[10:32:37.253]                       inherits <- base::inherits
[10:32:37.253]                       invokeRestart <- base::invokeRestart
[10:32:37.253]                       is.null <- base::is.null
[10:32:37.253]                       muffled <- FALSE
[10:32:37.253]                       if (inherits(cond, "message")) {
[10:32:37.253]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:37.253]                         if (muffled) 
[10:32:37.253]                           invokeRestart("muffleMessage")
[10:32:37.253]                       }
[10:32:37.253]                       else if (inherits(cond, "warning")) {
[10:32:37.253]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:37.253]                         if (muffled) 
[10:32:37.253]                           invokeRestart("muffleWarning")
[10:32:37.253]                       }
[10:32:37.253]                       else if (inherits(cond, "condition")) {
[10:32:37.253]                         if (!is.null(pattern)) {
[10:32:37.253]                           computeRestarts <- base::computeRestarts
[10:32:37.253]                           grepl <- base::grepl
[10:32:37.253]                           restarts <- computeRestarts(cond)
[10:32:37.253]                           for (restart in restarts) {
[10:32:37.253]                             name <- restart$name
[10:32:37.253]                             if (is.null(name)) 
[10:32:37.253]                               next
[10:32:37.253]                             if (!grepl(pattern, name)) 
[10:32:37.253]                               next
[10:32:37.253]                             invokeRestart(restart)
[10:32:37.253]                             muffled <- TRUE
[10:32:37.253]                             break
[10:32:37.253]                           }
[10:32:37.253]                         }
[10:32:37.253]                       }
[10:32:37.253]                       invisible(muffled)
[10:32:37.253]                     }
[10:32:37.253]                     muffleCondition(cond, pattern = "^muffle")
[10:32:37.253]                   }
[10:32:37.253]                 }
[10:32:37.253]                 else {
[10:32:37.253]                   if (TRUE) {
[10:32:37.253]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:37.253]                     {
[10:32:37.253]                       inherits <- base::inherits
[10:32:37.253]                       invokeRestart <- base::invokeRestart
[10:32:37.253]                       is.null <- base::is.null
[10:32:37.253]                       muffled <- FALSE
[10:32:37.253]                       if (inherits(cond, "message")) {
[10:32:37.253]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:37.253]                         if (muffled) 
[10:32:37.253]                           invokeRestart("muffleMessage")
[10:32:37.253]                       }
[10:32:37.253]                       else if (inherits(cond, "warning")) {
[10:32:37.253]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:37.253]                         if (muffled) 
[10:32:37.253]                           invokeRestart("muffleWarning")
[10:32:37.253]                       }
[10:32:37.253]                       else if (inherits(cond, "condition")) {
[10:32:37.253]                         if (!is.null(pattern)) {
[10:32:37.253]                           computeRestarts <- base::computeRestarts
[10:32:37.253]                           grepl <- base::grepl
[10:32:37.253]                           restarts <- computeRestarts(cond)
[10:32:37.253]                           for (restart in restarts) {
[10:32:37.253]                             name <- restart$name
[10:32:37.253]                             if (is.null(name)) 
[10:32:37.253]                               next
[10:32:37.253]                             if (!grepl(pattern, name)) 
[10:32:37.253]                               next
[10:32:37.253]                             invokeRestart(restart)
[10:32:37.253]                             muffled <- TRUE
[10:32:37.253]                             break
[10:32:37.253]                           }
[10:32:37.253]                         }
[10:32:37.253]                       }
[10:32:37.253]                       invisible(muffled)
[10:32:37.253]                     }
[10:32:37.253]                     muffleCondition(cond, pattern = "^muffle")
[10:32:37.253]                   }
[10:32:37.253]                 }
[10:32:37.253]             }
[10:32:37.253]         }))
[10:32:37.253]     }, error = function(ex) {
[10:32:37.253]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:37.253]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:37.253]                 ...future.rng), started = ...future.startTime, 
[10:32:37.253]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:37.253]             version = "1.8"), class = "FutureResult")
[10:32:37.253]     }, finally = {
[10:32:37.253]         if (!identical(...future.workdir, getwd())) 
[10:32:37.253]             setwd(...future.workdir)
[10:32:37.253]         {
[10:32:37.253]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:37.253]                 ...future.oldOptions$nwarnings <- NULL
[10:32:37.253]             }
[10:32:37.253]             base::options(...future.oldOptions)
[10:32:37.253]             if (.Platform$OS.type == "windows") {
[10:32:37.253]                 old_names <- names(...future.oldEnvVars)
[10:32:37.253]                 envs <- base::Sys.getenv()
[10:32:37.253]                 names <- names(envs)
[10:32:37.253]                 common <- intersect(names, old_names)
[10:32:37.253]                 added <- setdiff(names, old_names)
[10:32:37.253]                 removed <- setdiff(old_names, names)
[10:32:37.253]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:37.253]                   envs[common]]
[10:32:37.253]                 NAMES <- toupper(changed)
[10:32:37.253]                 args <- list()
[10:32:37.253]                 for (kk in seq_along(NAMES)) {
[10:32:37.253]                   name <- changed[[kk]]
[10:32:37.253]                   NAME <- NAMES[[kk]]
[10:32:37.253]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:37.253]                     next
[10:32:37.253]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:37.253]                 }
[10:32:37.253]                 NAMES <- toupper(added)
[10:32:37.253]                 for (kk in seq_along(NAMES)) {
[10:32:37.253]                   name <- added[[kk]]
[10:32:37.253]                   NAME <- NAMES[[kk]]
[10:32:37.253]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:37.253]                     next
[10:32:37.253]                   args[[name]] <- ""
[10:32:37.253]                 }
[10:32:37.253]                 NAMES <- toupper(removed)
[10:32:37.253]                 for (kk in seq_along(NAMES)) {
[10:32:37.253]                   name <- removed[[kk]]
[10:32:37.253]                   NAME <- NAMES[[kk]]
[10:32:37.253]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:37.253]                     next
[10:32:37.253]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:37.253]                 }
[10:32:37.253]                 if (length(args) > 0) 
[10:32:37.253]                   base::do.call(base::Sys.setenv, args = args)
[10:32:37.253]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:37.253]             }
[10:32:37.253]             else {
[10:32:37.253]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:37.253]             }
[10:32:37.253]             {
[10:32:37.253]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:37.253]                   0L) {
[10:32:37.253]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:37.253]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:37.253]                   base::options(opts)
[10:32:37.253]                 }
[10:32:37.253]                 {
[10:32:37.253]                   NULL
[10:32:37.253]                   options(future.plan = NULL)
[10:32:37.253]                   if (is.na(NA_character_)) 
[10:32:37.253]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:37.253]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:37.253]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:37.253]                     .init = FALSE)
[10:32:37.253]                 }
[10:32:37.253]             }
[10:32:37.253]         }
[10:32:37.253]     })
[10:32:37.253]     if (TRUE) {
[10:32:37.253]         base::sink(type = "output", split = FALSE)
[10:32:37.253]         if (TRUE) {
[10:32:37.253]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:37.253]         }
[10:32:37.253]         else {
[10:32:37.253]             ...future.result["stdout"] <- base::list(NULL)
[10:32:37.253]         }
[10:32:37.253]         base::close(...future.stdout)
[10:32:37.253]         ...future.stdout <- NULL
[10:32:37.253]     }
[10:32:37.253]     ...future.result$conditions <- ...future.conditions
[10:32:37.253]     ...future.result$finished <- base::Sys.time()
[10:32:37.253]     ...future.result
[10:32:37.253] }
> print(expr)
{
    {
        {
            ...future.startTime <- base::Sys.time()
            {
                {
                  {
                    base::local({
                      has_future <- base::requireNamespace("future", 
                        quietly = TRUE)
                      if (has_future) {
                        ns <- base::getNamespace("future")
                        version <- ns[[".package"]][["version"]]
                        if (is.null(version)) 
                          version <- utils::packageVersion("future")
                      }
                      else {
                        version <- NULL
                      }
                      if (!has_future || version < "1.8.0") {
                        info <- base::c(r_version = base::gsub("R version ", 
                          "", base::R.version$version.string), 
                          platform = base::sprintf("%s (%s-bit)", 
                            base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
                          os = base::paste(base::Sys.info()[base::c("sysname", 
                            "release", "version")], collapse = " "), 
                          hostname = base::Sys.info()[["nodename"]])
                        info <- base::sprintf("%s: %s", base::names(info), 
                          info)
                        info <- base::paste(info, collapse = "; ")
                        if (!has_future) {
                          msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
                            info)
                        }
                        else {
                          msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
                            info, version)
                        }
                        base::stop(msg)
                      }
                    })
                  }
                  ...future.strategy.old <- future::plan("list")
                  options(future.plan = NULL)
                  Sys.unsetenv("R_FUTURE_PLAN")
                  future::plan("default", .cleanup = FALSE, .init = FALSE)
                }
                ...future.workdir <- getwd()
            }
            ...future.oldOptions <- base::as.list(base::.Options)
            ...future.oldEnvVars <- base::Sys.getenv()
        }
        base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
            future.globals.maxSize = NULL, future.globals.method = NULL, 
            future.globals.onMissing = NULL, future.globals.onReference = NULL, 
            future.globals.resolve = NULL, future.resolve.recursive = NULL, 
            future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
            future.stdout.windows.reencode = NULL, width = 80L)
        ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
            base::names(...future.oldOptions))
    }
    if (FALSE) {
    }
    else {
        if (TRUE) {
            ...future.stdout <- base::rawConnection(base::raw(0L), 
                open = "w")
        }
        else {
            ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
                windows = "NUL", "/dev/null"), open = "w")
        }
        base::sink(...future.stdout, type = "output", split = FALSE)
        base::on.exit(if (!base::is.null(...future.stdout)) {
            base::sink(type = "output", split = FALSE)
            base::close(...future.stdout)
        }, add = TRUE)
    }
    ...future.frame <- base::sys.nframe()
    ...future.conditions <- base::list()
    ...future.rng <- base::globalenv()$.Random.seed
    if (FALSE) {
        ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
            "...future.value", "...future.globalenv.names", ".Random.seed")
    }
    ...future.result <- base::tryCatch({
        base::withCallingHandlers({
            ...future.value <- base::withVisible(base::local(NULL))
            future::FutureResult(value = ...future.value$value, 
                visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
                  ...future.rng), globalenv = if (FALSE) 
                  list(added = base::setdiff(base::names(base::.GlobalEnv), 
                    ...future.globalenv.names))
                else NULL, started = ...future.startTime, version = "1.8")
        }, condition = base::local({
            c <- base::c
            inherits <- base::inherits
            invokeRestart <- base::invokeRestart
            length <- base::length
            list <- base::list
            seq.int <- base::seq.int
            signalCondition <- base::signalCondition
            sys.calls <- base::sys.calls
            `[[` <- base::`[[`
            `+` <- base::`+`
            `<<-` <- base::`<<-`
            sysCalls <- function(calls = sys.calls(), from = 1L) {
                calls[seq.int(from = from + 12L, to = length(calls) - 
                  3L)]
            }
            function(cond) {
                is_error <- inherits(cond, "error")
                ignore <- !is_error && !is.null(NULL) && inherits(cond, 
                  NULL)
                if (is_error) {
                  sessionInformation <- function() {
                    list(r = base::R.Version(), locale = base::Sys.getlocale(), 
                      rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
                      search = base::search(), system = base::Sys.info())
                  }
                  ...future.conditions[[length(...future.conditions) + 
                    1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
                    cond$call), session = sessionInformation(), 
                    timestamp = base::Sys.time(), signaled = 0L)
                  signalCondition(cond)
                }
                else if (!ignore && TRUE && inherits(cond, "condition")) {
                  signal <- FALSE && inherits(cond, character(0))
                  ...future.conditions[[length(...future.conditions) + 
                    1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
                  if (FALSE && !signal) {
                    muffleCondition <- function (cond, pattern = "^muffle") 
                    {
                      inherits <- base::inherits
                      invokeRestart <- base::invokeRestart
                      is.null <- base::is.null
                      muffled <- FALSE
                      if (inherits(cond, "message")) {
                        muffled <- grepl(pattern, "muffleMessage")
                        if (muffled) 
                          invokeRestart("muffleMessage")
                      }
                      else if (inherits(cond, "warning")) {
                        muffled <- grepl(pattern, "muffleWarning")
                        if (muffled) 
                          invokeRestart("muffleWarning")
                      }
                      else if (inherits(cond, "condition")) {
                        if (!is.null(pattern)) {
                          computeRestarts <- base::computeRestarts
                          grepl <- base::grepl
                          restarts <- computeRestarts(cond)
                          for (restart in restarts) {
                            name <- restart$name
                            if (is.null(name)) 
                              next
                            if (!grepl(pattern, name)) 
                              next
                            invokeRestart(restart)
                            muffled <- TRUE
                            break
                          }
                        }
                      }
                      invisible(muffled)
                    }
                    muffleCondition(cond, pattern = "^muffle")
                  }
                }
                else {
                  if (TRUE) {
                    muffleCondition <- function (cond, pattern = "^muffle") 
                    {
                      inherits <- base::inherits
                      invokeRestart <- base::invokeRestart
                      is.null <- base::is.null
                      muffled <- FALSE
                      if (inherits(cond, "message")) {
                        muffled <- grepl(pattern, "muffleMessage")
                        if (muffled) 
                          invokeRestart("muffleMessage")
                      }
                      else if (inherits(cond, "warning")) {
                        muffled <- grepl(pattern, "muffleWarning")
                        if (muffled) 
                          invokeRestart("muffleWarning")
                      }
                      else if (inherits(cond, "condition")) {
                        if (!is.null(pattern)) {
                          computeRestarts <- base::computeRestarts
                          grepl <- base::grepl
                          restarts <- computeRestarts(cond)
                          for (restart in restarts) {
                            name <- restart$name
                            if (is.null(name)) 
                              next
                            if (!grepl(pattern, name)) 
                              next
                            invokeRestart(restart)
                            muffled <- TRUE
                            break
                          }
                        }
                      }
                      invisible(muffled)
                    }
                    muffleCondition(cond, pattern = "^muffle")
                  }
                }
            }
        }))
    }, error = function(ex) {
        base::structure(base::list(value = NULL, visible = NULL, 
            conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
                ...future.rng), started = ...future.startTime, 
            finished = Sys.time(), session_uuid = NA_character_, 
            version = "1.8"), class = "FutureResult")
    }, finally = {
        if (!identical(...future.workdir, getwd())) 
            setwd(...future.workdir)
        {
            if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
                ...future.oldOptions$nwarnings <- NULL
            }
            base::options(...future.oldOptions)
            if (.Platform$OS.type == "windows") {
                old_names <- names(...future.oldEnvVars)
                envs <- base::Sys.getenv()
                names <- names(envs)
                common <- intersect(names, old_names)
                added <- setdiff(names, old_names)
                removed <- setdiff(old_names, names)
                changed <- common[...future.oldEnvVars[common] != 
                  envs[common]]
                NAMES <- toupper(changed)
                args <- list()
                for (kk in seq_along(NAMES)) {
                  name <- changed[[kk]]
                  NAME <- NAMES[[kk]]
                  if (name != NAME && is.element(NAME, old_names)) 
                    next
                  args[[name]] <- ...future.oldEnvVars[[name]]
                }
                NAMES <- toupper(added)
                for (kk in seq_along(NAMES)) {
                  name <- added[[kk]]
                  NAME <- NAMES[[kk]]
                  if (name != NAME && is.element(NAME, old_names)) 
                    next
                  args[[name]] <- ""
                }
                NAMES <- toupper(removed)
                for (kk in seq_along(NAMES)) {
                  name <- removed[[kk]]
                  NAME <- NAMES[[kk]]
                  if (name != NAME && is.element(NAME, old_names)) 
                    next
                  args[[name]] <- ...future.oldEnvVars[[name]]
                }
                if (length(args) > 0) 
                  base::do.call(base::Sys.setenv, args = args)
                args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
            }
            else {
                base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
            }
            {
                if (base::length(...future.futureOptionsAdded) > 
                  0L) {
                  opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
                  base::names(opts) <- ...future.futureOptionsAdded
                  base::options(opts)
                }
                {
                  NULL
                  options(future.plan = NULL)
                  if (is.na(NA_character_)) 
                    Sys.unsetenv("R_FUTURE_PLAN")
                  else Sys.setenv(R_FUTURE_PLAN = NA_character_)
                  future::plan(...future.strategy.old, .cleanup = FALSE, 
                    .init = FALSE)
                }
            }
        }
    })
    if (TRUE) {
        base::sink(type = "output", split = FALSE)
        if (TRUE) {
            ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
        }
        else {
            ...future.result["stdout"] <- base::list(NULL)
        }
        base::close(...future.stdout)
        ...future.stdout <- NULL
    }
    ...future.result$conditions <- ...future.conditions
    ...future.result$finished <- base::Sys.time()
    ...future.result
}
> stopifnot(is.call(expr))
> 
> clazzes <- list(
+   sequential = SequentialFuture,
+   multisession = function(...) MultisessionFuture(..., workers = 2L),
+   sequential = SequentialFuture
+ )
> if (supportsMulticore()) {
+   clazzes$multicore = function(...) MulticoreFuture(..., workers = 2L)
+ }
> 
> for (clazz in clazzes) {
+   ## Calling run() more than once
+   f <- clazz({ 42L })
+   print(f)
+   run(f)
+   res <- tryCatch(run(f), error = identity)
+   stopifnot(inherits(res, "error"))
+   v <- value(f)
+   print(v)
+   stopifnot(v == 42L)
+ 
+   ## Call value() without run()
+   f <- clazz({ 42L })
+   v <- value(f)
+   print(v)
+   stopifnot(v == 42L)
+ }
[10:32:37.265] getGlobalsAndPackages() ...
[10:32:37.265] Searching for globals...
[10:32:37.268] - globals found: [1] ‘{’
[10:32:37.268] Searching for globals ... DONE
[10:32:37.268] Resolving globals: FALSE
[10:32:37.268] 
[10:32:37.269] 
[10:32:37.269] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 7c75f986-c4e2-313c-9860-2165731bfddf
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:32:37.270] Packages needed by the future expression (n = 0): <none>
[10:32:37.270] Packages needed by future strategies (n = 0): <none>
[10:32:37.270] {
[10:32:37.270]     {
[10:32:37.270]         {
[10:32:37.270]             ...future.startTime <- base::Sys.time()
[10:32:37.270]             {
[10:32:37.270]                 {
[10:32:37.270]                   {
[10:32:37.270]                     base::local({
[10:32:37.270]                       has_future <- base::requireNamespace("future", 
[10:32:37.270]                         quietly = TRUE)
[10:32:37.270]                       if (has_future) {
[10:32:37.270]                         ns <- base::getNamespace("future")
[10:32:37.270]                         version <- ns[[".package"]][["version"]]
[10:32:37.270]                         if (is.null(version)) 
[10:32:37.270]                           version <- utils::packageVersion("future")
[10:32:37.270]                       }
[10:32:37.270]                       else {
[10:32:37.270]                         version <- NULL
[10:32:37.270]                       }
[10:32:37.270]                       if (!has_future || version < "1.8.0") {
[10:32:37.270]                         info <- base::c(r_version = base::gsub("R version ", 
[10:32:37.270]                           "", base::R.version$version.string), 
[10:32:37.270]                           platform = base::sprintf("%s (%s-bit)", 
[10:32:37.270]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:37.270]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:37.270]                             "release", "version")], collapse = " "), 
[10:32:37.270]                           hostname = base::Sys.info()[["nodename"]])
[10:32:37.270]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:32:37.270]                           info)
[10:32:37.270]                         info <- base::paste(info, collapse = "; ")
[10:32:37.270]                         if (!has_future) {
[10:32:37.270]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:37.270]                             info)
[10:32:37.270]                         }
[10:32:37.270]                         else {
[10:32:37.270]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:37.270]                             info, version)
[10:32:37.270]                         }
[10:32:37.270]                         base::stop(msg)
[10:32:37.270]                       }
[10:32:37.270]                     })
[10:32:37.270]                   }
[10:32:37.270]                   ...future.strategy.old <- future::plan("list")
[10:32:37.270]                   options(future.plan = NULL)
[10:32:37.270]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:37.270]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:37.270]                 }
[10:32:37.270]                 ...future.workdir <- getwd()
[10:32:37.270]             }
[10:32:37.270]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:37.270]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:37.270]         }
[10:32:37.270]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:37.270]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:37.270]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:37.270]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:37.270]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:37.270]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:37.270]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:37.270]             base::names(...future.oldOptions))
[10:32:37.270]     }
[10:32:37.270]     if (FALSE) {
[10:32:37.270]     }
[10:32:37.270]     else {
[10:32:37.270]         if (TRUE) {
[10:32:37.270]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:37.270]                 open = "w")
[10:32:37.270]         }
[10:32:37.270]         else {
[10:32:37.270]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:37.270]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:37.270]         }
[10:32:37.270]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:37.270]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:37.270]             base::sink(type = "output", split = FALSE)
[10:32:37.270]             base::close(...future.stdout)
[10:32:37.270]         }, add = TRUE)
[10:32:37.270]     }
[10:32:37.270]     ...future.frame <- base::sys.nframe()
[10:32:37.270]     ...future.conditions <- base::list()
[10:32:37.270]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:37.270]     if (FALSE) {
[10:32:37.270]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:37.270]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:37.270]     }
[10:32:37.270]     ...future.result <- base::tryCatch({
[10:32:37.270]         base::withCallingHandlers({
[10:32:37.270]             ...future.value <- base::withVisible(base::local({
[10:32:37.270]                 42L
[10:32:37.270]             }))
[10:32:37.270]             future::FutureResult(value = ...future.value$value, 
[10:32:37.270]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:37.270]                   ...future.rng), globalenv = if (FALSE) 
[10:32:37.270]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:37.270]                     ...future.globalenv.names))
[10:32:37.270]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:37.270]         }, condition = base::local({
[10:32:37.270]             c <- base::c
[10:32:37.270]             inherits <- base::inherits
[10:32:37.270]             invokeRestart <- base::invokeRestart
[10:32:37.270]             length <- base::length
[10:32:37.270]             list <- base::list
[10:32:37.270]             seq.int <- base::seq.int
[10:32:37.270]             signalCondition <- base::signalCondition
[10:32:37.270]             sys.calls <- base::sys.calls
[10:32:37.270]             `[[` <- base::`[[`
[10:32:37.270]             `+` <- base::`+`
[10:32:37.270]             `<<-` <- base::`<<-`
[10:32:37.270]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:37.270]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:37.270]                   3L)]
[10:32:37.270]             }
[10:32:37.270]             function(cond) {
[10:32:37.270]                 is_error <- inherits(cond, "error")
[10:32:37.270]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:37.270]                   NULL)
[10:32:37.270]                 if (is_error) {
[10:32:37.270]                   sessionInformation <- function() {
[10:32:37.270]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:37.270]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:37.270]                       search = base::search(), system = base::Sys.info())
[10:32:37.270]                   }
[10:32:37.270]                   ...future.conditions[[length(...future.conditions) + 
[10:32:37.270]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:37.270]                     cond$call), session = sessionInformation(), 
[10:32:37.270]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:37.270]                   signalCondition(cond)
[10:32:37.270]                 }
[10:32:37.270]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:37.270]                 "immediateCondition"))) {
[10:32:37.270]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:37.270]                   ...future.conditions[[length(...future.conditions) + 
[10:32:37.270]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:37.270]                   if (TRUE && !signal) {
[10:32:37.270]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:37.270]                     {
[10:32:37.270]                       inherits <- base::inherits
[10:32:37.270]                       invokeRestart <- base::invokeRestart
[10:32:37.270]                       is.null <- base::is.null
[10:32:37.270]                       muffled <- FALSE
[10:32:37.270]                       if (inherits(cond, "message")) {
[10:32:37.270]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:37.270]                         if (muffled) 
[10:32:37.270]                           invokeRestart("muffleMessage")
[10:32:37.270]                       }
[10:32:37.270]                       else if (inherits(cond, "warning")) {
[10:32:37.270]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:37.270]                         if (muffled) 
[10:32:37.270]                           invokeRestart("muffleWarning")
[10:32:37.270]                       }
[10:32:37.270]                       else if (inherits(cond, "condition")) {
[10:32:37.270]                         if (!is.null(pattern)) {
[10:32:37.270]                           computeRestarts <- base::computeRestarts
[10:32:37.270]                           grepl <- base::grepl
[10:32:37.270]                           restarts <- computeRestarts(cond)
[10:32:37.270]                           for (restart in restarts) {
[10:32:37.270]                             name <- restart$name
[10:32:37.270]                             if (is.null(name)) 
[10:32:37.270]                               next
[10:32:37.270]                             if (!grepl(pattern, name)) 
[10:32:37.270]                               next
[10:32:37.270]                             invokeRestart(restart)
[10:32:37.270]                             muffled <- TRUE
[10:32:37.270]                             break
[10:32:37.270]                           }
[10:32:37.270]                         }
[10:32:37.270]                       }
[10:32:37.270]                       invisible(muffled)
[10:32:37.270]                     }
[10:32:37.270]                     muffleCondition(cond, pattern = "^muffle")
[10:32:37.270]                   }
[10:32:37.270]                 }
[10:32:37.270]                 else {
[10:32:37.270]                   if (TRUE) {
[10:32:37.270]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:37.270]                     {
[10:32:37.270]                       inherits <- base::inherits
[10:32:37.270]                       invokeRestart <- base::invokeRestart
[10:32:37.270]                       is.null <- base::is.null
[10:32:37.270]                       muffled <- FALSE
[10:32:37.270]                       if (inherits(cond, "message")) {
[10:32:37.270]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:37.270]                         if (muffled) 
[10:32:37.270]                           invokeRestart("muffleMessage")
[10:32:37.270]                       }
[10:32:37.270]                       else if (inherits(cond, "warning")) {
[10:32:37.270]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:37.270]                         if (muffled) 
[10:32:37.270]                           invokeRestart("muffleWarning")
[10:32:37.270]                       }
[10:32:37.270]                       else if (inherits(cond, "condition")) {
[10:32:37.270]                         if (!is.null(pattern)) {
[10:32:37.270]                           computeRestarts <- base::computeRestarts
[10:32:37.270]                           grepl <- base::grepl
[10:32:37.270]                           restarts <- computeRestarts(cond)
[10:32:37.270]                           for (restart in restarts) {
[10:32:37.270]                             name <- restart$name
[10:32:37.270]                             if (is.null(name)) 
[10:32:37.270]                               next
[10:32:37.270]                             if (!grepl(pattern, name)) 
[10:32:37.270]                               next
[10:32:37.270]                             invokeRestart(restart)
[10:32:37.270]                             muffled <- TRUE
[10:32:37.270]                             break
[10:32:37.270]                           }
[10:32:37.270]                         }
[10:32:37.270]                       }
[10:32:37.270]                       invisible(muffled)
[10:32:37.270]                     }
[10:32:37.270]                     muffleCondition(cond, pattern = "^muffle")
[10:32:37.270]                   }
[10:32:37.270]                 }
[10:32:37.270]             }
[10:32:37.270]         }))
[10:32:37.270]     }, error = function(ex) {
[10:32:37.270]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:37.270]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:37.270]                 ...future.rng), started = ...future.startTime, 
[10:32:37.270]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:37.270]             version = "1.8"), class = "FutureResult")
[10:32:37.270]     }, finally = {
[10:32:37.270]         if (!identical(...future.workdir, getwd())) 
[10:32:37.270]             setwd(...future.workdir)
[10:32:37.270]         {
[10:32:37.270]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:37.270]                 ...future.oldOptions$nwarnings <- NULL
[10:32:37.270]             }
[10:32:37.270]             base::options(...future.oldOptions)
[10:32:37.270]             if (.Platform$OS.type == "windows") {
[10:32:37.270]                 old_names <- names(...future.oldEnvVars)
[10:32:37.270]                 envs <- base::Sys.getenv()
[10:32:37.270]                 names <- names(envs)
[10:32:37.270]                 common <- intersect(names, old_names)
[10:32:37.270]                 added <- setdiff(names, old_names)
[10:32:37.270]                 removed <- setdiff(old_names, names)
[10:32:37.270]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:37.270]                   envs[common]]
[10:32:37.270]                 NAMES <- toupper(changed)
[10:32:37.270]                 args <- list()
[10:32:37.270]                 for (kk in seq_along(NAMES)) {
[10:32:37.270]                   name <- changed[[kk]]
[10:32:37.270]                   NAME <- NAMES[[kk]]
[10:32:37.270]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:37.270]                     next
[10:32:37.270]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:37.270]                 }
[10:32:37.270]                 NAMES <- toupper(added)
[10:32:37.270]                 for (kk in seq_along(NAMES)) {
[10:32:37.270]                   name <- added[[kk]]
[10:32:37.270]                   NAME <- NAMES[[kk]]
[10:32:37.270]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:37.270]                     next
[10:32:37.270]                   args[[name]] <- ""
[10:32:37.270]                 }
[10:32:37.270]                 NAMES <- toupper(removed)
[10:32:37.270]                 for (kk in seq_along(NAMES)) {
[10:32:37.270]                   name <- removed[[kk]]
[10:32:37.270]                   NAME <- NAMES[[kk]]
[10:32:37.270]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:37.270]                     next
[10:32:37.270]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:37.270]                 }
[10:32:37.270]                 if (length(args) > 0) 
[10:32:37.270]                   base::do.call(base::Sys.setenv, args = args)
[10:32:37.270]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:37.270]             }
[10:32:37.270]             else {
[10:32:37.270]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:37.270]             }
[10:32:37.270]             {
[10:32:37.270]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:37.270]                   0L) {
[10:32:37.270]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:37.270]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:37.270]                   base::options(opts)
[10:32:37.270]                 }
[10:32:37.270]                 {
[10:32:37.270]                   {
[10:32:37.270]                     NULL
[10:32:37.270]                     RNGkind("Mersenne-Twister")
[10:32:37.270]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:32:37.270]                       inherits = FALSE)
[10:32:37.270]                   }
[10:32:37.270]                   options(future.plan = NULL)
[10:32:37.270]                   if (is.na(NA_character_)) 
[10:32:37.270]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:37.270]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:37.270]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:37.270]                     .init = FALSE)
[10:32:37.270]                 }
[10:32:37.270]             }
[10:32:37.270]         }
[10:32:37.270]     })
[10:32:37.270]     if (TRUE) {
[10:32:37.270]         base::sink(type = "output", split = FALSE)
[10:32:37.270]         if (TRUE) {
[10:32:37.270]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:37.270]         }
[10:32:37.270]         else {
[10:32:37.270]             ...future.result["stdout"] <- base::list(NULL)
[10:32:37.270]         }
[10:32:37.270]         base::close(...future.stdout)
[10:32:37.270]         ...future.stdout <- NULL
[10:32:37.270]     }
[10:32:37.270]     ...future.result$conditions <- ...future.conditions
[10:32:37.270]     ...future.result$finished <- base::Sys.time()
[10:32:37.270]     ...future.result
[10:32:37.270] }
[10:32:37.272] plan(): Setting new future strategy stack:
[10:32:37.272] List of future strategies:
[10:32:37.272] 1. sequential:
[10:32:37.272]    - args: function (..., envir = parent.frame())
[10:32:37.272]    - tweaked: FALSE
[10:32:37.272]    - call: NULL
[10:32:37.272] plan(): nbrOfWorkers() = 1
[10:32:37.273] plan(): Setting new future strategy stack:
[10:32:37.273] List of future strategies:
[10:32:37.273] 1. future:
[10:32:37.273]    - args: function (...)
[10:32:37.273]    - tweaked: FALSE
[10:32:37.273]    - call: plan(foo)
[10:32:37.274] plan(): nbrOfWorkers() = Inf
[10:32:37.274] SequentialFuture started (and completed)
[1] 42
[10:32:37.275] getGlobalsAndPackages() ...
[10:32:37.275] Searching for globals...
[10:32:37.275] - globals found: [1] ‘{’
[10:32:37.275] Searching for globals ... DONE
[10:32:37.276] Resolving globals: FALSE
[10:32:37.276] 
[10:32:37.276] 
[10:32:37.276] getGlobalsAndPackages() ... DONE
[10:32:37.276] Packages needed by the future expression (n = 0): <none>
[10:32:37.276] Packages needed by future strategies (n = 0): <none>
[10:32:37.277] {
[10:32:37.277]     {
[10:32:37.277]         {
[10:32:37.277]             ...future.startTime <- base::Sys.time()
[10:32:37.277]             {
[10:32:37.277]                 {
[10:32:37.277]                   {
[10:32:37.277]                     base::local({
[10:32:37.277]                       has_future <- base::requireNamespace("future", 
[10:32:37.277]                         quietly = TRUE)
[10:32:37.277]                       if (has_future) {
[10:32:37.277]                         ns <- base::getNamespace("future")
[10:32:37.277]                         version <- ns[[".package"]][["version"]]
[10:32:37.277]                         if (is.null(version)) 
[10:32:37.277]                           version <- utils::packageVersion("future")
[10:32:37.277]                       }
[10:32:37.277]                       else {
[10:32:37.277]                         version <- NULL
[10:32:37.277]                       }
[10:32:37.277]                       if (!has_future || version < "1.8.0") {
[10:32:37.277]                         info <- base::c(r_version = base::gsub("R version ", 
[10:32:37.277]                           "", base::R.version$version.string), 
[10:32:37.277]                           platform = base::sprintf("%s (%s-bit)", 
[10:32:37.277]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:37.277]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:37.277]                             "release", "version")], collapse = " "), 
[10:32:37.277]                           hostname = base::Sys.info()[["nodename"]])
[10:32:37.277]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:32:37.277]                           info)
[10:32:37.277]                         info <- base::paste(info, collapse = "; ")
[10:32:37.277]                         if (!has_future) {
[10:32:37.277]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:37.277]                             info)
[10:32:37.277]                         }
[10:32:37.277]                         else {
[10:32:37.277]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:37.277]                             info, version)
[10:32:37.277]                         }
[10:32:37.277]                         base::stop(msg)
[10:32:37.277]                       }
[10:32:37.277]                     })
[10:32:37.277]                   }
[10:32:37.277]                   ...future.strategy.old <- future::plan("list")
[10:32:37.277]                   options(future.plan = NULL)
[10:32:37.277]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:37.277]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:37.277]                 }
[10:32:37.277]                 ...future.workdir <- getwd()
[10:32:37.277]             }
[10:32:37.277]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:37.277]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:37.277]         }
[10:32:37.277]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:37.277]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:37.277]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:37.277]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:37.277]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:37.277]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:37.277]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:37.277]             base::names(...future.oldOptions))
[10:32:37.277]     }
[10:32:37.277]     if (FALSE) {
[10:32:37.277]     }
[10:32:37.277]     else {
[10:32:37.277]         if (TRUE) {
[10:32:37.277]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:37.277]                 open = "w")
[10:32:37.277]         }
[10:32:37.277]         else {
[10:32:37.277]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:37.277]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:37.277]         }
[10:32:37.277]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:37.277]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:37.277]             base::sink(type = "output", split = FALSE)
[10:32:37.277]             base::close(...future.stdout)
[10:32:37.277]         }, add = TRUE)
[10:32:37.277]     }
[10:32:37.277]     ...future.frame <- base::sys.nframe()
[10:32:37.277]     ...future.conditions <- base::list()
[10:32:37.277]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:37.277]     if (FALSE) {
[10:32:37.277]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:37.277]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:37.277]     }
[10:32:37.277]     ...future.result <- base::tryCatch({
[10:32:37.277]         base::withCallingHandlers({
[10:32:37.277]             ...future.value <- base::withVisible(base::local({
[10:32:37.277]                 42L
[10:32:37.277]             }))
[10:32:37.277]             future::FutureResult(value = ...future.value$value, 
[10:32:37.277]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:37.277]                   ...future.rng), globalenv = if (FALSE) 
[10:32:37.277]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:37.277]                     ...future.globalenv.names))
[10:32:37.277]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:37.277]         }, condition = base::local({
[10:32:37.277]             c <- base::c
[10:32:37.277]             inherits <- base::inherits
[10:32:37.277]             invokeRestart <- base::invokeRestart
[10:32:37.277]             length <- base::length
[10:32:37.277]             list <- base::list
[10:32:37.277]             seq.int <- base::seq.int
[10:32:37.277]             signalCondition <- base::signalCondition
[10:32:37.277]             sys.calls <- base::sys.calls
[10:32:37.277]             `[[` <- base::`[[`
[10:32:37.277]             `+` <- base::`+`
[10:32:37.277]             `<<-` <- base::`<<-`
[10:32:37.277]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:37.277]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:37.277]                   3L)]
[10:32:37.277]             }
[10:32:37.277]             function(cond) {
[10:32:37.277]                 is_error <- inherits(cond, "error")
[10:32:37.277]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:37.277]                   NULL)
[10:32:37.277]                 if (is_error) {
[10:32:37.277]                   sessionInformation <- function() {
[10:32:37.277]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:37.277]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:37.277]                       search = base::search(), system = base::Sys.info())
[10:32:37.277]                   }
[10:32:37.277]                   ...future.conditions[[length(...future.conditions) + 
[10:32:37.277]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:37.277]                     cond$call), session = sessionInformation(), 
[10:32:37.277]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:37.277]                   signalCondition(cond)
[10:32:37.277]                 }
[10:32:37.277]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:37.277]                 "immediateCondition"))) {
[10:32:37.277]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:37.277]                   ...future.conditions[[length(...future.conditions) + 
[10:32:37.277]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:37.277]                   if (TRUE && !signal) {
[10:32:37.277]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:37.277]                     {
[10:32:37.277]                       inherits <- base::inherits
[10:32:37.277]                       invokeRestart <- base::invokeRestart
[10:32:37.277]                       is.null <- base::is.null
[10:32:37.277]                       muffled <- FALSE
[10:32:37.277]                       if (inherits(cond, "message")) {
[10:32:37.277]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:37.277]                         if (muffled) 
[10:32:37.277]                           invokeRestart("muffleMessage")
[10:32:37.277]                       }
[10:32:37.277]                       else if (inherits(cond, "warning")) {
[10:32:37.277]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:37.277]                         if (muffled) 
[10:32:37.277]                           invokeRestart("muffleWarning")
[10:32:37.277]                       }
[10:32:37.277]                       else if (inherits(cond, "condition")) {
[10:32:37.277]                         if (!is.null(pattern)) {
[10:32:37.277]                           computeRestarts <- base::computeRestarts
[10:32:37.277]                           grepl <- base::grepl
[10:32:37.277]                           restarts <- computeRestarts(cond)
[10:32:37.277]                           for (restart in restarts) {
[10:32:37.277]                             name <- restart$name
[10:32:37.277]                             if (is.null(name)) 
[10:32:37.277]                               next
[10:32:37.277]                             if (!grepl(pattern, name)) 
[10:32:37.277]                               next
[10:32:37.277]                             invokeRestart(restart)
[10:32:37.277]                             muffled <- TRUE
[10:32:37.277]                             break
[10:32:37.277]                           }
[10:32:37.277]                         }
[10:32:37.277]                       }
[10:32:37.277]                       invisible(muffled)
[10:32:37.277]                     }
[10:32:37.277]                     muffleCondition(cond, pattern = "^muffle")
[10:32:37.277]                   }
[10:32:37.277]                 }
[10:32:37.277]                 else {
[10:32:37.277]                   if (TRUE) {
[10:32:37.277]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:37.277]                     {
[10:32:37.277]                       inherits <- base::inherits
[10:32:37.277]                       invokeRestart <- base::invokeRestart
[10:32:37.277]                       is.null <- base::is.null
[10:32:37.277]                       muffled <- FALSE
[10:32:37.277]                       if (inherits(cond, "message")) {
[10:32:37.277]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:37.277]                         if (muffled) 
[10:32:37.277]                           invokeRestart("muffleMessage")
[10:32:37.277]                       }
[10:32:37.277]                       else if (inherits(cond, "warning")) {
[10:32:37.277]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:37.277]                         if (muffled) 
[10:32:37.277]                           invokeRestart("muffleWarning")
[10:32:37.277]                       }
[10:32:37.277]                       else if (inherits(cond, "condition")) {
[10:32:37.277]                         if (!is.null(pattern)) {
[10:32:37.277]                           computeRestarts <- base::computeRestarts
[10:32:37.277]                           grepl <- base::grepl
[10:32:37.277]                           restarts <- computeRestarts(cond)
[10:32:37.277]                           for (restart in restarts) {
[10:32:37.277]                             name <- restart$name
[10:32:37.277]                             if (is.null(name)) 
[10:32:37.277]                               next
[10:32:37.277]                             if (!grepl(pattern, name)) 
[10:32:37.277]                               next
[10:32:37.277]                             invokeRestart(restart)
[10:32:37.277]                             muffled <- TRUE
[10:32:37.277]                             break
[10:32:37.277]                           }
[10:32:37.277]                         }
[10:32:37.277]                       }
[10:32:37.277]                       invisible(muffled)
[10:32:37.277]                     }
[10:32:37.277]                     muffleCondition(cond, pattern = "^muffle")
[10:32:37.277]                   }
[10:32:37.277]                 }
[10:32:37.277]             }
[10:32:37.277]         }))
[10:32:37.277]     }, error = function(ex) {
[10:32:37.277]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:37.277]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:37.277]                 ...future.rng), started = ...future.startTime, 
[10:32:37.277]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:37.277]             version = "1.8"), class = "FutureResult")
[10:32:37.277]     }, finally = {
[10:32:37.277]         if (!identical(...future.workdir, getwd())) 
[10:32:37.277]             setwd(...future.workdir)
[10:32:37.277]         {
[10:32:37.277]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:37.277]                 ...future.oldOptions$nwarnings <- NULL
[10:32:37.277]             }
[10:32:37.277]             base::options(...future.oldOptions)
[10:32:37.277]             if (.Platform$OS.type == "windows") {
[10:32:37.277]                 old_names <- names(...future.oldEnvVars)
[10:32:37.277]                 envs <- base::Sys.getenv()
[10:32:37.277]                 names <- names(envs)
[10:32:37.277]                 common <- intersect(names, old_names)
[10:32:37.277]                 added <- setdiff(names, old_names)
[10:32:37.277]                 removed <- setdiff(old_names, names)
[10:32:37.277]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:37.277]                   envs[common]]
[10:32:37.277]                 NAMES <- toupper(changed)
[10:32:37.277]                 args <- list()
[10:32:37.277]                 for (kk in seq_along(NAMES)) {
[10:32:37.277]                   name <- changed[[kk]]
[10:32:37.277]                   NAME <- NAMES[[kk]]
[10:32:37.277]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:37.277]                     next
[10:32:37.277]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:37.277]                 }
[10:32:37.277]                 NAMES <- toupper(added)
[10:32:37.277]                 for (kk in seq_along(NAMES)) {
[10:32:37.277]                   name <- added[[kk]]
[10:32:37.277]                   NAME <- NAMES[[kk]]
[10:32:37.277]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:37.277]                     next
[10:32:37.277]                   args[[name]] <- ""
[10:32:37.277]                 }
[10:32:37.277]                 NAMES <- toupper(removed)
[10:32:37.277]                 for (kk in seq_along(NAMES)) {
[10:32:37.277]                   name <- removed[[kk]]
[10:32:37.277]                   NAME <- NAMES[[kk]]
[10:32:37.277]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:37.277]                     next
[10:32:37.277]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:37.277]                 }
[10:32:37.277]                 if (length(args) > 0) 
[10:32:37.277]                   base::do.call(base::Sys.setenv, args = args)
[10:32:37.277]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:37.277]             }
[10:32:37.277]             else {
[10:32:37.277]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:37.277]             }
[10:32:37.277]             {
[10:32:37.277]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:37.277]                   0L) {
[10:32:37.277]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:37.277]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:37.277]                   base::options(opts)
[10:32:37.277]                 }
[10:32:37.277]                 {
[10:32:37.277]                   {
[10:32:37.277]                     NULL
[10:32:37.277]                     RNGkind("Mersenne-Twister")
[10:32:37.277]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:32:37.277]                       inherits = FALSE)
[10:32:37.277]                   }
[10:32:37.277]                   options(future.plan = NULL)
[10:32:37.277]                   if (is.na(NA_character_)) 
[10:32:37.277]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:37.277]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:37.277]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:37.277]                     .init = FALSE)
[10:32:37.277]                 }
[10:32:37.277]             }
[10:32:37.277]         }
[10:32:37.277]     })
[10:32:37.277]     if (TRUE) {
[10:32:37.277]         base::sink(type = "output", split = FALSE)
[10:32:37.277]         if (TRUE) {
[10:32:37.277]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:37.277]         }
[10:32:37.277]         else {
[10:32:37.277]             ...future.result["stdout"] <- base::list(NULL)
[10:32:37.277]         }
[10:32:37.277]         base::close(...future.stdout)
[10:32:37.277]         ...future.stdout <- NULL
[10:32:37.277]     }
[10:32:37.277]     ...future.result$conditions <- ...future.conditions
[10:32:37.277]     ...future.result$finished <- base::Sys.time()
[10:32:37.277]     ...future.result
[10:32:37.277] }
[10:32:37.278] plan(): Setting new future strategy stack:
[10:32:37.278] List of future strategies:
[10:32:37.278] 1. sequential:
[10:32:37.278]    - args: function (..., envir = parent.frame())
[10:32:37.278]    - tweaked: FALSE
[10:32:37.278]    - call: NULL
[10:32:37.279] plan(): nbrOfWorkers() = 1
[10:32:37.279] plan(): Setting new future strategy stack:
[10:32:37.280] List of future strategies:
[10:32:37.280] 1. future:
[10:32:37.280]    - args: function (...)
[10:32:37.280]    - tweaked: FALSE
[10:32:37.280]    - call: plan(foo)
[10:32:37.280] plan(): nbrOfWorkers() = Inf
[10:32:37.280] SequentialFuture started (and completed)
[1] 42
[10:32:37.282] getGlobalsAndPackages() ...
[10:32:37.282] 
[10:32:37.282] - globals: [0] <none>
[10:32:37.282] getGlobalsAndPackages() ... DONE
[10:32:37.283] [local output] makeClusterPSOCK() ...
[10:32:37.314] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[10:32:37.315] [local output] Base port: 11536
[10:32:37.315] [local output] Getting setup options for 2 cluster nodes ...
[10:32:37.316] [local output]  - Node 1 of 2 ...
[10:32:37.316] [local output] localMachine=TRUE => revtunnel=FALSE

[10:32:37.317] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpE5H5XX/worker.rank=1.parallelly.parent=80309.139b5747efac0.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpE5H5XX/worker.rank=1.parallelly.parent=80309.139b5747efac0.pid")'’
[10:32:37.502] - Possible to infer worker's PID: TRUE
[10:32:37.503] [local output] Rscript port: 11536

[10:32:37.503] [local output]  - Node 2 of 2 ...
[10:32:37.503] [local output] localMachine=TRUE => revtunnel=FALSE

[10:32:37.504] [local output] Rscript port: 11536

[10:32:37.504] [local output] Getting setup options for 2 cluster nodes ... done
[10:32:37.504] [local output]  - Parallel setup requested for some PSOCK nodes
[10:32:37.505] [local output] Setting up PSOCK nodes in parallel
[10:32:37.505] List of 36
[10:32:37.505]  $ worker          : chr "localhost"
[10:32:37.505]   ..- attr(*, "localhost")= logi TRUE
[10:32:37.505]  $ master          : chr "localhost"
[10:32:37.505]  $ port            : int 11536
[10:32:37.505]  $ connectTimeout  : num 120
[10:32:37.505]  $ timeout         : num 2592000
[10:32:37.505]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[10:32:37.505]  $ homogeneous     : logi TRUE
[10:32:37.505]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[10:32:37.505]  $ rscript_envs    : NULL
[10:32:37.505]  $ rscript_libs    : NULL
[10:32:37.505]  $ rscript_startup : NULL
[10:32:37.505]  $ rscript_sh      : chr "sh"
[10:32:37.505]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:32:37.505]  $ methods         : logi TRUE
[10:32:37.505]  $ socketOptions   : chr "no-delay"
[10:32:37.505]  $ useXDR          : logi FALSE
[10:32:37.505]  $ outfile         : chr "/dev/null"
[10:32:37.505]  $ renice          : int NA
[10:32:37.505]  $ rshcmd          : NULL
[10:32:37.505]  $ user            : chr(0) 
[10:32:37.505]  $ revtunnel       : logi FALSE
[10:32:37.505]  $ rshlogfile      : NULL
[10:32:37.505]  $ rshopts         : chr(0) 
[10:32:37.505]  $ rank            : int 1
[10:32:37.505]  $ manual          : logi FALSE
[10:32:37.505]  $ dryrun          : logi FALSE
[10:32:37.505]  $ quiet           : logi FALSE
[10:32:37.505]  $ setup_strategy  : chr "parallel"
[10:32:37.505]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:32:37.505]  $ pidfile         : chr "/tmp/RtmpE5H5XX/worker.rank=1.parallelly.parent=80309.139b5747efac0.pid"
[10:32:37.505]  $ rshcmd_label    : NULL
[10:32:37.505]  $ rsh_call        : NULL
[10:32:37.505]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:32:37.505]  $ localMachine    : logi TRUE
[10:32:37.505]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[10:32:37.505]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[10:32:37.505]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[10:32:37.505]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[10:32:37.505]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[10:32:37.505]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[10:32:37.505]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[10:32:37.505]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[10:32:37.505]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[10:32:37.505]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[10:32:37.505]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[10:32:37.505]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[10:32:37.505]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[10:32:37.505]  $ arguments       :List of 28
[10:32:37.505]   ..$ worker          : chr "localhost"
[10:32:37.505]   ..$ master          : NULL
[10:32:37.505]   ..$ port            : int 11536
[10:32:37.505]   ..$ connectTimeout  : num 120
[10:32:37.505]   ..$ timeout         : num 2592000
[10:32:37.505]   ..$ rscript         : NULL
[10:32:37.505]   ..$ homogeneous     : NULL
[10:32:37.505]   ..$ rscript_args    : NULL
[10:32:37.505]   ..$ rscript_envs    : NULL
[10:32:37.505]   ..$ rscript_libs    : NULL
[10:32:37.505]   ..$ rscript_startup : NULL
[10:32:37.505]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[10:32:37.505]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:32:37.505]   ..$ methods         : logi TRUE
[10:32:37.505]   ..$ socketOptions   : chr "no-delay"
[10:32:37.505]   ..$ useXDR          : logi FALSE
[10:32:37.505]   ..$ outfile         : chr "/dev/null"
[10:32:37.505]   ..$ renice          : int NA
[10:32:37.505]   ..$ rshcmd          : NULL
[10:32:37.505]   ..$ user            : NULL
[10:32:37.505]   ..$ revtunnel       : logi NA
[10:32:37.505]   ..$ rshlogfile      : NULL
[10:32:37.505]   ..$ rshopts         : NULL
[10:32:37.505]   ..$ rank            : int 1
[10:32:37.505]   ..$ manual          : logi FALSE
[10:32:37.505]   ..$ dryrun          : logi FALSE
[10:32:37.505]   ..$ quiet           : logi FALSE
[10:32:37.505]   ..$ setup_strategy  : chr "parallel"
[10:32:37.505]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[10:32:37.521] [local output] System call to launch all workers:
[10:32:37.521] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpE5H5XX/worker.rank=1.parallelly.parent=80309.139b5747efac0.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11536 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[10:32:37.521] [local output] Starting PSOCK main server
[10:32:37.527] [local output] Workers launched
[10:32:37.527] [local output] Waiting for workers to connect back
[10:32:37.527]  - [local output] 0 workers out of 2 ready
[10:32:37.765]  - [local output] 0 workers out of 2 ready
[10:32:37.766]  - [local output] 1 workers out of 2 ready
[10:32:37.771]  - [local output] 1 workers out of 2 ready
[10:32:37.771]  - [local output] 2 workers out of 2 ready
[10:32:37.771] [local output] Launching of workers completed
[10:32:37.771] [local output] Collecting session information from workers
[10:32:37.772] [local output]  - Worker #1 of 2
[10:32:37.773] [local output]  - Worker #2 of 2
[10:32:37.773] [local output] makeClusterPSOCK() ... done
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: 0x557ba9904df8
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 7c75f986-c4e2-313c-9860-2165731bfddf
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:32:37.786] Packages needed by the future expression (n = 0): <none>
[10:32:37.786] Packages needed by future strategies (n = 0): <none>
[10:32:37.786] {
[10:32:37.786]     {
[10:32:37.786]         {
[10:32:37.786]             ...future.startTime <- base::Sys.time()
[10:32:37.786]             {
[10:32:37.786]                 {
[10:32:37.786]                   {
[10:32:37.786]                     {
[10:32:37.786]                       base::local({
[10:32:37.786]                         has_future <- base::requireNamespace("future", 
[10:32:37.786]                           quietly = TRUE)
[10:32:37.786]                         if (has_future) {
[10:32:37.786]                           ns <- base::getNamespace("future")
[10:32:37.786]                           version <- ns[[".package"]][["version"]]
[10:32:37.786]                           if (is.null(version)) 
[10:32:37.786]                             version <- utils::packageVersion("future")
[10:32:37.786]                         }
[10:32:37.786]                         else {
[10:32:37.786]                           version <- NULL
[10:32:37.786]                         }
[10:32:37.786]                         if (!has_future || version < "1.8.0") {
[10:32:37.786]                           info <- base::c(r_version = base::gsub("R version ", 
[10:32:37.786]                             "", base::R.version$version.string), 
[10:32:37.786]                             platform = base::sprintf("%s (%s-bit)", 
[10:32:37.786]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:37.786]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:37.786]                               "release", "version")], collapse = " "), 
[10:32:37.786]                             hostname = base::Sys.info()[["nodename"]])
[10:32:37.786]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:32:37.786]                             info)
[10:32:37.786]                           info <- base::paste(info, collapse = "; ")
[10:32:37.786]                           if (!has_future) {
[10:32:37.786]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:37.786]                               info)
[10:32:37.786]                           }
[10:32:37.786]                           else {
[10:32:37.786]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:37.786]                               info, version)
[10:32:37.786]                           }
[10:32:37.786]                           base::stop(msg)
[10:32:37.786]                         }
[10:32:37.786]                       })
[10:32:37.786]                     }
[10:32:37.786]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:32:37.786]                     base::options(mc.cores = 1L)
[10:32:37.786]                   }
[10:32:37.786]                   ...future.strategy.old <- future::plan("list")
[10:32:37.786]                   options(future.plan = NULL)
[10:32:37.786]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:37.786]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:37.786]                 }
[10:32:37.786]                 ...future.workdir <- getwd()
[10:32:37.786]             }
[10:32:37.786]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:37.786]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:37.786]         }
[10:32:37.786]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:37.786]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:37.786]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:37.786]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:37.786]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:37.786]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:37.786]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:37.786]             base::names(...future.oldOptions))
[10:32:37.786]     }
[10:32:37.786]     if (FALSE) {
[10:32:37.786]     }
[10:32:37.786]     else {
[10:32:37.786]         if (TRUE) {
[10:32:37.786]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:37.786]                 open = "w")
[10:32:37.786]         }
[10:32:37.786]         else {
[10:32:37.786]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:37.786]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:37.786]         }
[10:32:37.786]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:37.786]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:37.786]             base::sink(type = "output", split = FALSE)
[10:32:37.786]             base::close(...future.stdout)
[10:32:37.786]         }, add = TRUE)
[10:32:37.786]     }
[10:32:37.786]     ...future.frame <- base::sys.nframe()
[10:32:37.786]     ...future.conditions <- base::list()
[10:32:37.786]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:37.786]     if (FALSE) {
[10:32:37.786]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:37.786]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:37.786]     }
[10:32:37.786]     ...future.result <- base::tryCatch({
[10:32:37.786]         base::withCallingHandlers({
[10:32:37.786]             ...future.value <- base::withVisible(base::local({
[10:32:37.786]                 ...future.makeSendCondition <- base::local({
[10:32:37.786]                   sendCondition <- NULL
[10:32:37.786]                   function(frame = 1L) {
[10:32:37.786]                     if (is.function(sendCondition)) 
[10:32:37.786]                       return(sendCondition)
[10:32:37.786]                     ns <- getNamespace("parallel")
[10:32:37.786]                     if (exists("sendData", mode = "function", 
[10:32:37.786]                       envir = ns)) {
[10:32:37.786]                       parallel_sendData <- get("sendData", mode = "function", 
[10:32:37.786]                         envir = ns)
[10:32:37.786]                       envir <- sys.frame(frame)
[10:32:37.786]                       master <- NULL
[10:32:37.786]                       while (!identical(envir, .GlobalEnv) && 
[10:32:37.786]                         !identical(envir, emptyenv())) {
[10:32:37.786]                         if (exists("master", mode = "list", envir = envir, 
[10:32:37.786]                           inherits = FALSE)) {
[10:32:37.786]                           master <- get("master", mode = "list", 
[10:32:37.786]                             envir = envir, inherits = FALSE)
[10:32:37.786]                           if (inherits(master, c("SOCKnode", 
[10:32:37.786]                             "SOCK0node"))) {
[10:32:37.786]                             sendCondition <<- function(cond) {
[10:32:37.786]                               data <- list(type = "VALUE", value = cond, 
[10:32:37.786]                                 success = TRUE)
[10:32:37.786]                               parallel_sendData(master, data)
[10:32:37.786]                             }
[10:32:37.786]                             return(sendCondition)
[10:32:37.786]                           }
[10:32:37.786]                         }
[10:32:37.786]                         frame <- frame + 1L
[10:32:37.786]                         envir <- sys.frame(frame)
[10:32:37.786]                       }
[10:32:37.786]                     }
[10:32:37.786]                     sendCondition <<- function(cond) NULL
[10:32:37.786]                   }
[10:32:37.786]                 })
[10:32:37.786]                 withCallingHandlers({
[10:32:37.786]                   {
[10:32:37.786]                     42L
[10:32:37.786]                   }
[10:32:37.786]                 }, immediateCondition = function(cond) {
[10:32:37.786]                   sendCondition <- ...future.makeSendCondition()
[10:32:37.786]                   sendCondition(cond)
[10:32:37.786]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:37.786]                   {
[10:32:37.786]                     inherits <- base::inherits
[10:32:37.786]                     invokeRestart <- base::invokeRestart
[10:32:37.786]                     is.null <- base::is.null
[10:32:37.786]                     muffled <- FALSE
[10:32:37.786]                     if (inherits(cond, "message")) {
[10:32:37.786]                       muffled <- grepl(pattern, "muffleMessage")
[10:32:37.786]                       if (muffled) 
[10:32:37.786]                         invokeRestart("muffleMessage")
[10:32:37.786]                     }
[10:32:37.786]                     else if (inherits(cond, "warning")) {
[10:32:37.786]                       muffled <- grepl(pattern, "muffleWarning")
[10:32:37.786]                       if (muffled) 
[10:32:37.786]                         invokeRestart("muffleWarning")
[10:32:37.786]                     }
[10:32:37.786]                     else if (inherits(cond, "condition")) {
[10:32:37.786]                       if (!is.null(pattern)) {
[10:32:37.786]                         computeRestarts <- base::computeRestarts
[10:32:37.786]                         grepl <- base::grepl
[10:32:37.786]                         restarts <- computeRestarts(cond)
[10:32:37.786]                         for (restart in restarts) {
[10:32:37.786]                           name <- restart$name
[10:32:37.786]                           if (is.null(name)) 
[10:32:37.786]                             next
[10:32:37.786]                           if (!grepl(pattern, name)) 
[10:32:37.786]                             next
[10:32:37.786]                           invokeRestart(restart)
[10:32:37.786]                           muffled <- TRUE
[10:32:37.786]                           break
[10:32:37.786]                         }
[10:32:37.786]                       }
[10:32:37.786]                     }
[10:32:37.786]                     invisible(muffled)
[10:32:37.786]                   }
[10:32:37.786]                   muffleCondition(cond)
[10:32:37.786]                 })
[10:32:37.786]             }))
[10:32:37.786]             future::FutureResult(value = ...future.value$value, 
[10:32:37.786]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:37.786]                   ...future.rng), globalenv = if (FALSE) 
[10:32:37.786]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:37.786]                     ...future.globalenv.names))
[10:32:37.786]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:37.786]         }, condition = base::local({
[10:32:37.786]             c <- base::c
[10:32:37.786]             inherits <- base::inherits
[10:32:37.786]             invokeRestart <- base::invokeRestart
[10:32:37.786]             length <- base::length
[10:32:37.786]             list <- base::list
[10:32:37.786]             seq.int <- base::seq.int
[10:32:37.786]             signalCondition <- base::signalCondition
[10:32:37.786]             sys.calls <- base::sys.calls
[10:32:37.786]             `[[` <- base::`[[`
[10:32:37.786]             `+` <- base::`+`
[10:32:37.786]             `<<-` <- base::`<<-`
[10:32:37.786]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:37.786]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:37.786]                   3L)]
[10:32:37.786]             }
[10:32:37.786]             function(cond) {
[10:32:37.786]                 is_error <- inherits(cond, "error")
[10:32:37.786]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:37.786]                   NULL)
[10:32:37.786]                 if (is_error) {
[10:32:37.786]                   sessionInformation <- function() {
[10:32:37.786]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:37.786]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:37.786]                       search = base::search(), system = base::Sys.info())
[10:32:37.786]                   }
[10:32:37.786]                   ...future.conditions[[length(...future.conditions) + 
[10:32:37.786]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:37.786]                     cond$call), session = sessionInformation(), 
[10:32:37.786]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:37.786]                   signalCondition(cond)
[10:32:37.786]                 }
[10:32:37.786]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:37.786]                 "immediateCondition"))) {
[10:32:37.786]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:37.786]                   ...future.conditions[[length(...future.conditions) + 
[10:32:37.786]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:37.786]                   if (TRUE && !signal) {
[10:32:37.786]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:37.786]                     {
[10:32:37.786]                       inherits <- base::inherits
[10:32:37.786]                       invokeRestart <- base::invokeRestart
[10:32:37.786]                       is.null <- base::is.null
[10:32:37.786]                       muffled <- FALSE
[10:32:37.786]                       if (inherits(cond, "message")) {
[10:32:37.786]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:37.786]                         if (muffled) 
[10:32:37.786]                           invokeRestart("muffleMessage")
[10:32:37.786]                       }
[10:32:37.786]                       else if (inherits(cond, "warning")) {
[10:32:37.786]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:37.786]                         if (muffled) 
[10:32:37.786]                           invokeRestart("muffleWarning")
[10:32:37.786]                       }
[10:32:37.786]                       else if (inherits(cond, "condition")) {
[10:32:37.786]                         if (!is.null(pattern)) {
[10:32:37.786]                           computeRestarts <- base::computeRestarts
[10:32:37.786]                           grepl <- base::grepl
[10:32:37.786]                           restarts <- computeRestarts(cond)
[10:32:37.786]                           for (restart in restarts) {
[10:32:37.786]                             name <- restart$name
[10:32:37.786]                             if (is.null(name)) 
[10:32:37.786]                               next
[10:32:37.786]                             if (!grepl(pattern, name)) 
[10:32:37.786]                               next
[10:32:37.786]                             invokeRestart(restart)
[10:32:37.786]                             muffled <- TRUE
[10:32:37.786]                             break
[10:32:37.786]                           }
[10:32:37.786]                         }
[10:32:37.786]                       }
[10:32:37.786]                       invisible(muffled)
[10:32:37.786]                     }
[10:32:37.786]                     muffleCondition(cond, pattern = "^muffle")
[10:32:37.786]                   }
[10:32:37.786]                 }
[10:32:37.786]                 else {
[10:32:37.786]                   if (TRUE) {
[10:32:37.786]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:37.786]                     {
[10:32:37.786]                       inherits <- base::inherits
[10:32:37.786]                       invokeRestart <- base::invokeRestart
[10:32:37.786]                       is.null <- base::is.null
[10:32:37.786]                       muffled <- FALSE
[10:32:37.786]                       if (inherits(cond, "message")) {
[10:32:37.786]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:37.786]                         if (muffled) 
[10:32:37.786]                           invokeRestart("muffleMessage")
[10:32:37.786]                       }
[10:32:37.786]                       else if (inherits(cond, "warning")) {
[10:32:37.786]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:37.786]                         if (muffled) 
[10:32:37.786]                           invokeRestart("muffleWarning")
[10:32:37.786]                       }
[10:32:37.786]                       else if (inherits(cond, "condition")) {
[10:32:37.786]                         if (!is.null(pattern)) {
[10:32:37.786]                           computeRestarts <- base::computeRestarts
[10:32:37.786]                           grepl <- base::grepl
[10:32:37.786]                           restarts <- computeRestarts(cond)
[10:32:37.786]                           for (restart in restarts) {
[10:32:37.786]                             name <- restart$name
[10:32:37.786]                             if (is.null(name)) 
[10:32:37.786]                               next
[10:32:37.786]                             if (!grepl(pattern, name)) 
[10:32:37.786]                               next
[10:32:37.786]                             invokeRestart(restart)
[10:32:37.786]                             muffled <- TRUE
[10:32:37.786]                             break
[10:32:37.786]                           }
[10:32:37.786]                         }
[10:32:37.786]                       }
[10:32:37.786]                       invisible(muffled)
[10:32:37.786]                     }
[10:32:37.786]                     muffleCondition(cond, pattern = "^muffle")
[10:32:37.786]                   }
[10:32:37.786]                 }
[10:32:37.786]             }
[10:32:37.786]         }))
[10:32:37.786]     }, error = function(ex) {
[10:32:37.786]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:37.786]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:37.786]                 ...future.rng), started = ...future.startTime, 
[10:32:37.786]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:37.786]             version = "1.8"), class = "FutureResult")
[10:32:37.786]     }, finally = {
[10:32:37.786]         if (!identical(...future.workdir, getwd())) 
[10:32:37.786]             setwd(...future.workdir)
[10:32:37.786]         {
[10:32:37.786]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:37.786]                 ...future.oldOptions$nwarnings <- NULL
[10:32:37.786]             }
[10:32:37.786]             base::options(...future.oldOptions)
[10:32:37.786]             if (.Platform$OS.type == "windows") {
[10:32:37.786]                 old_names <- names(...future.oldEnvVars)
[10:32:37.786]                 envs <- base::Sys.getenv()
[10:32:37.786]                 names <- names(envs)
[10:32:37.786]                 common <- intersect(names, old_names)
[10:32:37.786]                 added <- setdiff(names, old_names)
[10:32:37.786]                 removed <- setdiff(old_names, names)
[10:32:37.786]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:37.786]                   envs[common]]
[10:32:37.786]                 NAMES <- toupper(changed)
[10:32:37.786]                 args <- list()
[10:32:37.786]                 for (kk in seq_along(NAMES)) {
[10:32:37.786]                   name <- changed[[kk]]
[10:32:37.786]                   NAME <- NAMES[[kk]]
[10:32:37.786]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:37.786]                     next
[10:32:37.786]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:37.786]                 }
[10:32:37.786]                 NAMES <- toupper(added)
[10:32:37.786]                 for (kk in seq_along(NAMES)) {
[10:32:37.786]                   name <- added[[kk]]
[10:32:37.786]                   NAME <- NAMES[[kk]]
[10:32:37.786]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:37.786]                     next
[10:32:37.786]                   args[[name]] <- ""
[10:32:37.786]                 }
[10:32:37.786]                 NAMES <- toupper(removed)
[10:32:37.786]                 for (kk in seq_along(NAMES)) {
[10:32:37.786]                   name <- removed[[kk]]
[10:32:37.786]                   NAME <- NAMES[[kk]]
[10:32:37.786]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:37.786]                     next
[10:32:37.786]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:37.786]                 }
[10:32:37.786]                 if (length(args) > 0) 
[10:32:37.786]                   base::do.call(base::Sys.setenv, args = args)
[10:32:37.786]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:37.786]             }
[10:32:37.786]             else {
[10:32:37.786]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:37.786]             }
[10:32:37.786]             {
[10:32:37.786]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:37.786]                   0L) {
[10:32:37.786]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:37.786]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:37.786]                   base::options(opts)
[10:32:37.786]                 }
[10:32:37.786]                 {
[10:32:37.786]                   {
[10:32:37.786]                     base::options(mc.cores = ...future.mc.cores.old)
[10:32:37.786]                     NULL
[10:32:37.786]                   }
[10:32:37.786]                   options(future.plan = NULL)
[10:32:37.786]                   if (is.na(NA_character_)) 
[10:32:37.786]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:37.786]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:37.786]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:37.786]                     .init = FALSE)
[10:32:37.786]                 }
[10:32:37.786]             }
[10:32:37.786]         }
[10:32:37.786]     })
[10:32:37.786]     if (TRUE) {
[10:32:37.786]         base::sink(type = "output", split = FALSE)
[10:32:37.786]         if (TRUE) {
[10:32:37.786]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:37.786]         }
[10:32:37.786]         else {
[10:32:37.786]             ...future.result["stdout"] <- base::list(NULL)
[10:32:37.786]         }
[10:32:37.786]         base::close(...future.stdout)
[10:32:37.786]         ...future.stdout <- NULL
[10:32:37.786]     }
[10:32:37.786]     ...future.result$conditions <- ...future.conditions
[10:32:37.786]     ...future.result$finished <- base::Sys.time()
[10:32:37.786]     ...future.result
[10:32:37.786] }
[10:32:37.839] MultisessionFuture started
[10:32:37.840] result() for ClusterFuture ...
[10:32:37.840] receiveMessageFromWorker() for ClusterFuture ...
[10:32:37.841] - Validating connection of MultisessionFuture
[10:32:37.873] - received message: FutureResult
[10:32:37.873] - Received FutureResult
[10:32:37.876] - Erased future from FutureRegistry
[10:32:37.876] result() for ClusterFuture ...
[10:32:37.876] - result already collected: FutureResult
[10:32:37.876] result() for ClusterFuture ... done
[10:32:37.877] receiveMessageFromWorker() for ClusterFuture ... done
[10:32:37.877] result() for ClusterFuture ... done
[10:32:37.877] result() for ClusterFuture ...
[10:32:37.877] - result already collected: FutureResult
[10:32:37.877] result() for ClusterFuture ... done
[1] 42
[10:32:37.878] getGlobalsAndPackages() ...
[10:32:37.878] 
[10:32:37.879] - globals: [0] <none>
[10:32:37.879] getGlobalsAndPackages() ... DONE
[10:32:37.890] Packages needed by the future expression (n = 0): <none>
[10:32:37.890] Packages needed by future strategies (n = 0): <none>
[10:32:37.890] {
[10:32:37.890]     {
[10:32:37.890]         {
[10:32:37.890]             ...future.startTime <- base::Sys.time()
[10:32:37.890]             {
[10:32:37.890]                 {
[10:32:37.890]                   {
[10:32:37.890]                     {
[10:32:37.890]                       base::local({
[10:32:37.890]                         has_future <- base::requireNamespace("future", 
[10:32:37.890]                           quietly = TRUE)
[10:32:37.890]                         if (has_future) {
[10:32:37.890]                           ns <- base::getNamespace("future")
[10:32:37.890]                           version <- ns[[".package"]][["version"]]
[10:32:37.890]                           if (is.null(version)) 
[10:32:37.890]                             version <- utils::packageVersion("future")
[10:32:37.890]                         }
[10:32:37.890]                         else {
[10:32:37.890]                           version <- NULL
[10:32:37.890]                         }
[10:32:37.890]                         if (!has_future || version < "1.8.0") {
[10:32:37.890]                           info <- base::c(r_version = base::gsub("R version ", 
[10:32:37.890]                             "", base::R.version$version.string), 
[10:32:37.890]                             platform = base::sprintf("%s (%s-bit)", 
[10:32:37.890]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:37.890]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:37.890]                               "release", "version")], collapse = " "), 
[10:32:37.890]                             hostname = base::Sys.info()[["nodename"]])
[10:32:37.890]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:32:37.890]                             info)
[10:32:37.890]                           info <- base::paste(info, collapse = "; ")
[10:32:37.890]                           if (!has_future) {
[10:32:37.890]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:37.890]                               info)
[10:32:37.890]                           }
[10:32:37.890]                           else {
[10:32:37.890]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:37.890]                               info, version)
[10:32:37.890]                           }
[10:32:37.890]                           base::stop(msg)
[10:32:37.890]                         }
[10:32:37.890]                       })
[10:32:37.890]                     }
[10:32:37.890]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:32:37.890]                     base::options(mc.cores = 1L)
[10:32:37.890]                   }
[10:32:37.890]                   ...future.strategy.old <- future::plan("list")
[10:32:37.890]                   options(future.plan = NULL)
[10:32:37.890]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:37.890]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:37.890]                 }
[10:32:37.890]                 ...future.workdir <- getwd()
[10:32:37.890]             }
[10:32:37.890]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:37.890]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:37.890]         }
[10:32:37.890]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:37.890]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:37.890]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:37.890]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:37.890]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:37.890]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:37.890]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:37.890]             base::names(...future.oldOptions))
[10:32:37.890]     }
[10:32:37.890]     if (FALSE) {
[10:32:37.890]     }
[10:32:37.890]     else {
[10:32:37.890]         if (TRUE) {
[10:32:37.890]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:37.890]                 open = "w")
[10:32:37.890]         }
[10:32:37.890]         else {
[10:32:37.890]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:37.890]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:37.890]         }
[10:32:37.890]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:37.890]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:37.890]             base::sink(type = "output", split = FALSE)
[10:32:37.890]             base::close(...future.stdout)
[10:32:37.890]         }, add = TRUE)
[10:32:37.890]     }
[10:32:37.890]     ...future.frame <- base::sys.nframe()
[10:32:37.890]     ...future.conditions <- base::list()
[10:32:37.890]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:37.890]     if (FALSE) {
[10:32:37.890]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:37.890]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:37.890]     }
[10:32:37.890]     ...future.result <- base::tryCatch({
[10:32:37.890]         base::withCallingHandlers({
[10:32:37.890]             ...future.value <- base::withVisible(base::local({
[10:32:37.890]                 ...future.makeSendCondition <- base::local({
[10:32:37.890]                   sendCondition <- NULL
[10:32:37.890]                   function(frame = 1L) {
[10:32:37.890]                     if (is.function(sendCondition)) 
[10:32:37.890]                       return(sendCondition)
[10:32:37.890]                     ns <- getNamespace("parallel")
[10:32:37.890]                     if (exists("sendData", mode = "function", 
[10:32:37.890]                       envir = ns)) {
[10:32:37.890]                       parallel_sendData <- get("sendData", mode = "function", 
[10:32:37.890]                         envir = ns)
[10:32:37.890]                       envir <- sys.frame(frame)
[10:32:37.890]                       master <- NULL
[10:32:37.890]                       while (!identical(envir, .GlobalEnv) && 
[10:32:37.890]                         !identical(envir, emptyenv())) {
[10:32:37.890]                         if (exists("master", mode = "list", envir = envir, 
[10:32:37.890]                           inherits = FALSE)) {
[10:32:37.890]                           master <- get("master", mode = "list", 
[10:32:37.890]                             envir = envir, inherits = FALSE)
[10:32:37.890]                           if (inherits(master, c("SOCKnode", 
[10:32:37.890]                             "SOCK0node"))) {
[10:32:37.890]                             sendCondition <<- function(cond) {
[10:32:37.890]                               data <- list(type = "VALUE", value = cond, 
[10:32:37.890]                                 success = TRUE)
[10:32:37.890]                               parallel_sendData(master, data)
[10:32:37.890]                             }
[10:32:37.890]                             return(sendCondition)
[10:32:37.890]                           }
[10:32:37.890]                         }
[10:32:37.890]                         frame <- frame + 1L
[10:32:37.890]                         envir <- sys.frame(frame)
[10:32:37.890]                       }
[10:32:37.890]                     }
[10:32:37.890]                     sendCondition <<- function(cond) NULL
[10:32:37.890]                   }
[10:32:37.890]                 })
[10:32:37.890]                 withCallingHandlers({
[10:32:37.890]                   {
[10:32:37.890]                     42L
[10:32:37.890]                   }
[10:32:37.890]                 }, immediateCondition = function(cond) {
[10:32:37.890]                   sendCondition <- ...future.makeSendCondition()
[10:32:37.890]                   sendCondition(cond)
[10:32:37.890]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:37.890]                   {
[10:32:37.890]                     inherits <- base::inherits
[10:32:37.890]                     invokeRestart <- base::invokeRestart
[10:32:37.890]                     is.null <- base::is.null
[10:32:37.890]                     muffled <- FALSE
[10:32:37.890]                     if (inherits(cond, "message")) {
[10:32:37.890]                       muffled <- grepl(pattern, "muffleMessage")
[10:32:37.890]                       if (muffled) 
[10:32:37.890]                         invokeRestart("muffleMessage")
[10:32:37.890]                     }
[10:32:37.890]                     else if (inherits(cond, "warning")) {
[10:32:37.890]                       muffled <- grepl(pattern, "muffleWarning")
[10:32:37.890]                       if (muffled) 
[10:32:37.890]                         invokeRestart("muffleWarning")
[10:32:37.890]                     }
[10:32:37.890]                     else if (inherits(cond, "condition")) {
[10:32:37.890]                       if (!is.null(pattern)) {
[10:32:37.890]                         computeRestarts <- base::computeRestarts
[10:32:37.890]                         grepl <- base::grepl
[10:32:37.890]                         restarts <- computeRestarts(cond)
[10:32:37.890]                         for (restart in restarts) {
[10:32:37.890]                           name <- restart$name
[10:32:37.890]                           if (is.null(name)) 
[10:32:37.890]                             next
[10:32:37.890]                           if (!grepl(pattern, name)) 
[10:32:37.890]                             next
[10:32:37.890]                           invokeRestart(restart)
[10:32:37.890]                           muffled <- TRUE
[10:32:37.890]                           break
[10:32:37.890]                         }
[10:32:37.890]                       }
[10:32:37.890]                     }
[10:32:37.890]                     invisible(muffled)
[10:32:37.890]                   }
[10:32:37.890]                   muffleCondition(cond)
[10:32:37.890]                 })
[10:32:37.890]             }))
[10:32:37.890]             future::FutureResult(value = ...future.value$value, 
[10:32:37.890]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:37.890]                   ...future.rng), globalenv = if (FALSE) 
[10:32:37.890]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:37.890]                     ...future.globalenv.names))
[10:32:37.890]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:37.890]         }, condition = base::local({
[10:32:37.890]             c <- base::c
[10:32:37.890]             inherits <- base::inherits
[10:32:37.890]             invokeRestart <- base::invokeRestart
[10:32:37.890]             length <- base::length
[10:32:37.890]             list <- base::list
[10:32:37.890]             seq.int <- base::seq.int
[10:32:37.890]             signalCondition <- base::signalCondition
[10:32:37.890]             sys.calls <- base::sys.calls
[10:32:37.890]             `[[` <- base::`[[`
[10:32:37.890]             `+` <- base::`+`
[10:32:37.890]             `<<-` <- base::`<<-`
[10:32:37.890]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:37.890]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:37.890]                   3L)]
[10:32:37.890]             }
[10:32:37.890]             function(cond) {
[10:32:37.890]                 is_error <- inherits(cond, "error")
[10:32:37.890]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:37.890]                   NULL)
[10:32:37.890]                 if (is_error) {
[10:32:37.890]                   sessionInformation <- function() {
[10:32:37.890]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:37.890]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:37.890]                       search = base::search(), system = base::Sys.info())
[10:32:37.890]                   }
[10:32:37.890]                   ...future.conditions[[length(...future.conditions) + 
[10:32:37.890]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:37.890]                     cond$call), session = sessionInformation(), 
[10:32:37.890]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:37.890]                   signalCondition(cond)
[10:32:37.890]                 }
[10:32:37.890]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:37.890]                 "immediateCondition"))) {
[10:32:37.890]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:37.890]                   ...future.conditions[[length(...future.conditions) + 
[10:32:37.890]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:37.890]                   if (TRUE && !signal) {
[10:32:37.890]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:37.890]                     {
[10:32:37.890]                       inherits <- base::inherits
[10:32:37.890]                       invokeRestart <- base::invokeRestart
[10:32:37.890]                       is.null <- base::is.null
[10:32:37.890]                       muffled <- FALSE
[10:32:37.890]                       if (inherits(cond, "message")) {
[10:32:37.890]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:37.890]                         if (muffled) 
[10:32:37.890]                           invokeRestart("muffleMessage")
[10:32:37.890]                       }
[10:32:37.890]                       else if (inherits(cond, "warning")) {
[10:32:37.890]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:37.890]                         if (muffled) 
[10:32:37.890]                           invokeRestart("muffleWarning")
[10:32:37.890]                       }
[10:32:37.890]                       else if (inherits(cond, "condition")) {
[10:32:37.890]                         if (!is.null(pattern)) {
[10:32:37.890]                           computeRestarts <- base::computeRestarts
[10:32:37.890]                           grepl <- base::grepl
[10:32:37.890]                           restarts <- computeRestarts(cond)
[10:32:37.890]                           for (restart in restarts) {
[10:32:37.890]                             name <- restart$name
[10:32:37.890]                             if (is.null(name)) 
[10:32:37.890]                               next
[10:32:37.890]                             if (!grepl(pattern, name)) 
[10:32:37.890]                               next
[10:32:37.890]                             invokeRestart(restart)
[10:32:37.890]                             muffled <- TRUE
[10:32:37.890]                             break
[10:32:37.890]                           }
[10:32:37.890]                         }
[10:32:37.890]                       }
[10:32:37.890]                       invisible(muffled)
[10:32:37.890]                     }
[10:32:37.890]                     muffleCondition(cond, pattern = "^muffle")
[10:32:37.890]                   }
[10:32:37.890]                 }
[10:32:37.890]                 else {
[10:32:37.890]                   if (TRUE) {
[10:32:37.890]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:37.890]                     {
[10:32:37.890]                       inherits <- base::inherits
[10:32:37.890]                       invokeRestart <- base::invokeRestart
[10:32:37.890]                       is.null <- base::is.null
[10:32:37.890]                       muffled <- FALSE
[10:32:37.890]                       if (inherits(cond, "message")) {
[10:32:37.890]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:37.890]                         if (muffled) 
[10:32:37.890]                           invokeRestart("muffleMessage")
[10:32:37.890]                       }
[10:32:37.890]                       else if (inherits(cond, "warning")) {
[10:32:37.890]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:37.890]                         if (muffled) 
[10:32:37.890]                           invokeRestart("muffleWarning")
[10:32:37.890]                       }
[10:32:37.890]                       else if (inherits(cond, "condition")) {
[10:32:37.890]                         if (!is.null(pattern)) {
[10:32:37.890]                           computeRestarts <- base::computeRestarts
[10:32:37.890]                           grepl <- base::grepl
[10:32:37.890]                           restarts <- computeRestarts(cond)
[10:32:37.890]                           for (restart in restarts) {
[10:32:37.890]                             name <- restart$name
[10:32:37.890]                             if (is.null(name)) 
[10:32:37.890]                               next
[10:32:37.890]                             if (!grepl(pattern, name)) 
[10:32:37.890]                               next
[10:32:37.890]                             invokeRestart(restart)
[10:32:37.890]                             muffled <- TRUE
[10:32:37.890]                             break
[10:32:37.890]                           }
[10:32:37.890]                         }
[10:32:37.890]                       }
[10:32:37.890]                       invisible(muffled)
[10:32:37.890]                     }
[10:32:37.890]                     muffleCondition(cond, pattern = "^muffle")
[10:32:37.890]                   }
[10:32:37.890]                 }
[10:32:37.890]             }
[10:32:37.890]         }))
[10:32:37.890]     }, error = function(ex) {
[10:32:37.890]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:37.890]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:37.890]                 ...future.rng), started = ...future.startTime, 
[10:32:37.890]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:37.890]             version = "1.8"), class = "FutureResult")
[10:32:37.890]     }, finally = {
[10:32:37.890]         if (!identical(...future.workdir, getwd())) 
[10:32:37.890]             setwd(...future.workdir)
[10:32:37.890]         {
[10:32:37.890]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:37.890]                 ...future.oldOptions$nwarnings <- NULL
[10:32:37.890]             }
[10:32:37.890]             base::options(...future.oldOptions)
[10:32:37.890]             if (.Platform$OS.type == "windows") {
[10:32:37.890]                 old_names <- names(...future.oldEnvVars)
[10:32:37.890]                 envs <- base::Sys.getenv()
[10:32:37.890]                 names <- names(envs)
[10:32:37.890]                 common <- intersect(names, old_names)
[10:32:37.890]                 added <- setdiff(names, old_names)
[10:32:37.890]                 removed <- setdiff(old_names, names)
[10:32:37.890]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:37.890]                   envs[common]]
[10:32:37.890]                 NAMES <- toupper(changed)
[10:32:37.890]                 args <- list()
[10:32:37.890]                 for (kk in seq_along(NAMES)) {
[10:32:37.890]                   name <- changed[[kk]]
[10:32:37.890]                   NAME <- NAMES[[kk]]
[10:32:37.890]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:37.890]                     next
[10:32:37.890]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:37.890]                 }
[10:32:37.890]                 NAMES <- toupper(added)
[10:32:37.890]                 for (kk in seq_along(NAMES)) {
[10:32:37.890]                   name <- added[[kk]]
[10:32:37.890]                   NAME <- NAMES[[kk]]
[10:32:37.890]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:37.890]                     next
[10:32:37.890]                   args[[name]] <- ""
[10:32:37.890]                 }
[10:32:37.890]                 NAMES <- toupper(removed)
[10:32:37.890]                 for (kk in seq_along(NAMES)) {
[10:32:37.890]                   name <- removed[[kk]]
[10:32:37.890]                   NAME <- NAMES[[kk]]
[10:32:37.890]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:37.890]                     next
[10:32:37.890]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:37.890]                 }
[10:32:37.890]                 if (length(args) > 0) 
[10:32:37.890]                   base::do.call(base::Sys.setenv, args = args)
[10:32:37.890]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:37.890]             }
[10:32:37.890]             else {
[10:32:37.890]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:37.890]             }
[10:32:37.890]             {
[10:32:37.890]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:37.890]                   0L) {
[10:32:37.890]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:37.890]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:37.890]                   base::options(opts)
[10:32:37.890]                 }
[10:32:37.890]                 {
[10:32:37.890]                   {
[10:32:37.890]                     base::options(mc.cores = ...future.mc.cores.old)
[10:32:37.890]                     NULL
[10:32:37.890]                   }
[10:32:37.890]                   options(future.plan = NULL)
[10:32:37.890]                   if (is.na(NA_character_)) 
[10:32:37.890]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:37.890]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:37.890]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:37.890]                     .init = FALSE)
[10:32:37.890]                 }
[10:32:37.890]             }
[10:32:37.890]         }
[10:32:37.890]     })
[10:32:37.890]     if (TRUE) {
[10:32:37.890]         base::sink(type = "output", split = FALSE)
[10:32:37.890]         if (TRUE) {
[10:32:37.890]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:37.890]         }
[10:32:37.890]         else {
[10:32:37.890]             ...future.result["stdout"] <- base::list(NULL)
[10:32:37.890]         }
[10:32:37.890]         base::close(...future.stdout)
[10:32:37.890]         ...future.stdout <- NULL
[10:32:37.890]     }
[10:32:37.890]     ...future.result$conditions <- ...future.conditions
[10:32:37.890]     ...future.result$finished <- base::Sys.time()
[10:32:37.890]     ...future.result
[10:32:37.890] }
[10:32:37.894] MultisessionFuture started
[10:32:37.894] result() for ClusterFuture ...
[10:32:37.894] receiveMessageFromWorker() for ClusterFuture ...
[10:32:37.894] - Validating connection of MultisessionFuture
[10:32:37.898] - received message: FutureResult
[10:32:37.899] - Received FutureResult
[10:32:37.899] - Erased future from FutureRegistry
[10:32:37.899] result() for ClusterFuture ...
[10:32:37.899] - result already collected: FutureResult
[10:32:37.899] result() for ClusterFuture ... done
[10:32:37.899] receiveMessageFromWorker() for ClusterFuture ... done
[10:32:37.899] result() for ClusterFuture ... done
[10:32:37.900] result() for ClusterFuture ...
[10:32:37.900] - result already collected: FutureResult
[10:32:37.900] result() for ClusterFuture ... done
[1] 42
[10:32:37.900] getGlobalsAndPackages() ...
[10:32:37.900] Searching for globals...
[10:32:37.901] - globals found: [1] ‘{’
[10:32:37.901] Searching for globals ... DONE
[10:32:37.901] Resolving globals: FALSE
[10:32:37.901] 
[10:32:37.902] 
[10:32:37.902] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 7c75f986-c4e2-313c-9860-2165731bfddf
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:32:37.902] Packages needed by the future expression (n = 0): <none>
[10:32:37.903] Packages needed by future strategies (n = 0): <none>
[10:32:37.903] {
[10:32:37.903]     {
[10:32:37.903]         {
[10:32:37.903]             ...future.startTime <- base::Sys.time()
[10:32:37.903]             {
[10:32:37.903]                 {
[10:32:37.903]                   {
[10:32:37.903]                     base::local({
[10:32:37.903]                       has_future <- base::requireNamespace("future", 
[10:32:37.903]                         quietly = TRUE)
[10:32:37.903]                       if (has_future) {
[10:32:37.903]                         ns <- base::getNamespace("future")
[10:32:37.903]                         version <- ns[[".package"]][["version"]]
[10:32:37.903]                         if (is.null(version)) 
[10:32:37.903]                           version <- utils::packageVersion("future")
[10:32:37.903]                       }
[10:32:37.903]                       else {
[10:32:37.903]                         version <- NULL
[10:32:37.903]                       }
[10:32:37.903]                       if (!has_future || version < "1.8.0") {
[10:32:37.903]                         info <- base::c(r_version = base::gsub("R version ", 
[10:32:37.903]                           "", base::R.version$version.string), 
[10:32:37.903]                           platform = base::sprintf("%s (%s-bit)", 
[10:32:37.903]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:37.903]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:37.903]                             "release", "version")], collapse = " "), 
[10:32:37.903]                           hostname = base::Sys.info()[["nodename"]])
[10:32:37.903]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:32:37.903]                           info)
[10:32:37.903]                         info <- base::paste(info, collapse = "; ")
[10:32:37.903]                         if (!has_future) {
[10:32:37.903]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:37.903]                             info)
[10:32:37.903]                         }
[10:32:37.903]                         else {
[10:32:37.903]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:37.903]                             info, version)
[10:32:37.903]                         }
[10:32:37.903]                         base::stop(msg)
[10:32:37.903]                       }
[10:32:37.903]                     })
[10:32:37.903]                   }
[10:32:37.903]                   ...future.strategy.old <- future::plan("list")
[10:32:37.903]                   options(future.plan = NULL)
[10:32:37.903]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:37.903]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:37.903]                 }
[10:32:37.903]                 ...future.workdir <- getwd()
[10:32:37.903]             }
[10:32:37.903]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:37.903]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:37.903]         }
[10:32:37.903]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:37.903]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:37.903]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:37.903]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:37.903]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:37.903]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:37.903]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:37.903]             base::names(...future.oldOptions))
[10:32:37.903]     }
[10:32:37.903]     if (FALSE) {
[10:32:37.903]     }
[10:32:37.903]     else {
[10:32:37.903]         if (TRUE) {
[10:32:37.903]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:37.903]                 open = "w")
[10:32:37.903]         }
[10:32:37.903]         else {
[10:32:37.903]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:37.903]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:37.903]         }
[10:32:37.903]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:37.903]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:37.903]             base::sink(type = "output", split = FALSE)
[10:32:37.903]             base::close(...future.stdout)
[10:32:37.903]         }, add = TRUE)
[10:32:37.903]     }
[10:32:37.903]     ...future.frame <- base::sys.nframe()
[10:32:37.903]     ...future.conditions <- base::list()
[10:32:37.903]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:37.903]     if (FALSE) {
[10:32:37.903]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:37.903]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:37.903]     }
[10:32:37.903]     ...future.result <- base::tryCatch({
[10:32:37.903]         base::withCallingHandlers({
[10:32:37.903]             ...future.value <- base::withVisible(base::local({
[10:32:37.903]                 42L
[10:32:37.903]             }))
[10:32:37.903]             future::FutureResult(value = ...future.value$value, 
[10:32:37.903]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:37.903]                   ...future.rng), globalenv = if (FALSE) 
[10:32:37.903]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:37.903]                     ...future.globalenv.names))
[10:32:37.903]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:37.903]         }, condition = base::local({
[10:32:37.903]             c <- base::c
[10:32:37.903]             inherits <- base::inherits
[10:32:37.903]             invokeRestart <- base::invokeRestart
[10:32:37.903]             length <- base::length
[10:32:37.903]             list <- base::list
[10:32:37.903]             seq.int <- base::seq.int
[10:32:37.903]             signalCondition <- base::signalCondition
[10:32:37.903]             sys.calls <- base::sys.calls
[10:32:37.903]             `[[` <- base::`[[`
[10:32:37.903]             `+` <- base::`+`
[10:32:37.903]             `<<-` <- base::`<<-`
[10:32:37.903]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:37.903]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:37.903]                   3L)]
[10:32:37.903]             }
[10:32:37.903]             function(cond) {
[10:32:37.903]                 is_error <- inherits(cond, "error")
[10:32:37.903]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:37.903]                   NULL)
[10:32:37.903]                 if (is_error) {
[10:32:37.903]                   sessionInformation <- function() {
[10:32:37.903]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:37.903]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:37.903]                       search = base::search(), system = base::Sys.info())
[10:32:37.903]                   }
[10:32:37.903]                   ...future.conditions[[length(...future.conditions) + 
[10:32:37.903]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:37.903]                     cond$call), session = sessionInformation(), 
[10:32:37.903]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:37.903]                   signalCondition(cond)
[10:32:37.903]                 }
[10:32:37.903]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:37.903]                 "immediateCondition"))) {
[10:32:37.903]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:37.903]                   ...future.conditions[[length(...future.conditions) + 
[10:32:37.903]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:37.903]                   if (TRUE && !signal) {
[10:32:37.903]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:37.903]                     {
[10:32:37.903]                       inherits <- base::inherits
[10:32:37.903]                       invokeRestart <- base::invokeRestart
[10:32:37.903]                       is.null <- base::is.null
[10:32:37.903]                       muffled <- FALSE
[10:32:37.903]                       if (inherits(cond, "message")) {
[10:32:37.903]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:37.903]                         if (muffled) 
[10:32:37.903]                           invokeRestart("muffleMessage")
[10:32:37.903]                       }
[10:32:37.903]                       else if (inherits(cond, "warning")) {
[10:32:37.903]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:37.903]                         if (muffled) 
[10:32:37.903]                           invokeRestart("muffleWarning")
[10:32:37.903]                       }
[10:32:37.903]                       else if (inherits(cond, "condition")) {
[10:32:37.903]                         if (!is.null(pattern)) {
[10:32:37.903]                           computeRestarts <- base::computeRestarts
[10:32:37.903]                           grepl <- base::grepl
[10:32:37.903]                           restarts <- computeRestarts(cond)
[10:32:37.903]                           for (restart in restarts) {
[10:32:37.903]                             name <- restart$name
[10:32:37.903]                             if (is.null(name)) 
[10:32:37.903]                               next
[10:32:37.903]                             if (!grepl(pattern, name)) 
[10:32:37.903]                               next
[10:32:37.903]                             invokeRestart(restart)
[10:32:37.903]                             muffled <- TRUE
[10:32:37.903]                             break
[10:32:37.903]                           }
[10:32:37.903]                         }
[10:32:37.903]                       }
[10:32:37.903]                       invisible(muffled)
[10:32:37.903]                     }
[10:32:37.903]                     muffleCondition(cond, pattern = "^muffle")
[10:32:37.903]                   }
[10:32:37.903]                 }
[10:32:37.903]                 else {
[10:32:37.903]                   if (TRUE) {
[10:32:37.903]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:37.903]                     {
[10:32:37.903]                       inherits <- base::inherits
[10:32:37.903]                       invokeRestart <- base::invokeRestart
[10:32:37.903]                       is.null <- base::is.null
[10:32:37.903]                       muffled <- FALSE
[10:32:37.903]                       if (inherits(cond, "message")) {
[10:32:37.903]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:37.903]                         if (muffled) 
[10:32:37.903]                           invokeRestart("muffleMessage")
[10:32:37.903]                       }
[10:32:37.903]                       else if (inherits(cond, "warning")) {
[10:32:37.903]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:37.903]                         if (muffled) 
[10:32:37.903]                           invokeRestart("muffleWarning")
[10:32:37.903]                       }
[10:32:37.903]                       else if (inherits(cond, "condition")) {
[10:32:37.903]                         if (!is.null(pattern)) {
[10:32:37.903]                           computeRestarts <- base::computeRestarts
[10:32:37.903]                           grepl <- base::grepl
[10:32:37.903]                           restarts <- computeRestarts(cond)
[10:32:37.903]                           for (restart in restarts) {
[10:32:37.903]                             name <- restart$name
[10:32:37.903]                             if (is.null(name)) 
[10:32:37.903]                               next
[10:32:37.903]                             if (!grepl(pattern, name)) 
[10:32:37.903]                               next
[10:32:37.903]                             invokeRestart(restart)
[10:32:37.903]                             muffled <- TRUE
[10:32:37.903]                             break
[10:32:37.903]                           }
[10:32:37.903]                         }
[10:32:37.903]                       }
[10:32:37.903]                       invisible(muffled)
[10:32:37.903]                     }
[10:32:37.903]                     muffleCondition(cond, pattern = "^muffle")
[10:32:37.903]                   }
[10:32:37.903]                 }
[10:32:37.903]             }
[10:32:37.903]         }))
[10:32:37.903]     }, error = function(ex) {
[10:32:37.903]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:37.903]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:37.903]                 ...future.rng), started = ...future.startTime, 
[10:32:37.903]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:37.903]             version = "1.8"), class = "FutureResult")
[10:32:37.903]     }, finally = {
[10:32:37.903]         if (!identical(...future.workdir, getwd())) 
[10:32:37.903]             setwd(...future.workdir)
[10:32:37.903]         {
[10:32:37.903]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:37.903]                 ...future.oldOptions$nwarnings <- NULL
[10:32:37.903]             }
[10:32:37.903]             base::options(...future.oldOptions)
[10:32:37.903]             if (.Platform$OS.type == "windows") {
[10:32:37.903]                 old_names <- names(...future.oldEnvVars)
[10:32:37.903]                 envs <- base::Sys.getenv()
[10:32:37.903]                 names <- names(envs)
[10:32:37.903]                 common <- intersect(names, old_names)
[10:32:37.903]                 added <- setdiff(names, old_names)
[10:32:37.903]                 removed <- setdiff(old_names, names)
[10:32:37.903]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:37.903]                   envs[common]]
[10:32:37.903]                 NAMES <- toupper(changed)
[10:32:37.903]                 args <- list()
[10:32:37.903]                 for (kk in seq_along(NAMES)) {
[10:32:37.903]                   name <- changed[[kk]]
[10:32:37.903]                   NAME <- NAMES[[kk]]
[10:32:37.903]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:37.903]                     next
[10:32:37.903]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:37.903]                 }
[10:32:37.903]                 NAMES <- toupper(added)
[10:32:37.903]                 for (kk in seq_along(NAMES)) {
[10:32:37.903]                   name <- added[[kk]]
[10:32:37.903]                   NAME <- NAMES[[kk]]
[10:32:37.903]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:37.903]                     next
[10:32:37.903]                   args[[name]] <- ""
[10:32:37.903]                 }
[10:32:37.903]                 NAMES <- toupper(removed)
[10:32:37.903]                 for (kk in seq_along(NAMES)) {
[10:32:37.903]                   name <- removed[[kk]]
[10:32:37.903]                   NAME <- NAMES[[kk]]
[10:32:37.903]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:37.903]                     next
[10:32:37.903]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:37.903]                 }
[10:32:37.903]                 if (length(args) > 0) 
[10:32:37.903]                   base::do.call(base::Sys.setenv, args = args)
[10:32:37.903]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:37.903]             }
[10:32:37.903]             else {
[10:32:37.903]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:37.903]             }
[10:32:37.903]             {
[10:32:37.903]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:37.903]                   0L) {
[10:32:37.903]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:37.903]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:37.903]                   base::options(opts)
[10:32:37.903]                 }
[10:32:37.903]                 {
[10:32:37.903]                   {
[10:32:37.903]                     NULL
[10:32:37.903]                     RNGkind("Mersenne-Twister")
[10:32:37.903]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:32:37.903]                       inherits = FALSE)
[10:32:37.903]                   }
[10:32:37.903]                   options(future.plan = NULL)
[10:32:37.903]                   if (is.na(NA_character_)) 
[10:32:37.903]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:37.903]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:37.903]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:37.903]                     .init = FALSE)
[10:32:37.903]                 }
[10:32:37.903]             }
[10:32:37.903]         }
[10:32:37.903]     })
[10:32:37.903]     if (TRUE) {
[10:32:37.903]         base::sink(type = "output", split = FALSE)
[10:32:37.903]         if (TRUE) {
[10:32:37.903]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:37.903]         }
[10:32:37.903]         else {
[10:32:37.903]             ...future.result["stdout"] <- base::list(NULL)
[10:32:37.903]         }
[10:32:37.903]         base::close(...future.stdout)
[10:32:37.903]         ...future.stdout <- NULL
[10:32:37.903]     }
[10:32:37.903]     ...future.result$conditions <- ...future.conditions
[10:32:37.903]     ...future.result$finished <- base::Sys.time()
[10:32:37.903]     ...future.result
[10:32:37.903] }
[10:32:37.905] plan(): Setting new future strategy stack:
[10:32:37.905] List of future strategies:
[10:32:37.905] 1. sequential:
[10:32:37.905]    - args: function (..., envir = parent.frame())
[10:32:37.905]    - tweaked: FALSE
[10:32:37.905]    - call: NULL
[10:32:37.906] plan(): nbrOfWorkers() = 1
[10:32:37.907] plan(): Setting new future strategy stack:
[10:32:37.907] List of future strategies:
[10:32:37.907] 1. future:
[10:32:37.907]    - args: function (...)
[10:32:37.907]    - tweaked: FALSE
[10:32:37.907]    - call: plan(foo)
[10:32:37.907] plan(): nbrOfWorkers() = Inf
[10:32:37.907] SequentialFuture started (and completed)
[1] 42
[10:32:37.908] getGlobalsAndPackages() ...
[10:32:37.908] Searching for globals...
[10:32:37.908] - globals found: [1] ‘{’
[10:32:37.909] Searching for globals ... DONE
[10:32:37.909] Resolving globals: FALSE
[10:32:37.909] 
[10:32:37.909] 
[10:32:37.909] getGlobalsAndPackages() ... DONE
[10:32:37.910] Packages needed by the future expression (n = 0): <none>
[10:32:37.910] Packages needed by future strategies (n = 0): <none>
[10:32:37.910] {
[10:32:37.910]     {
[10:32:37.910]         {
[10:32:37.910]             ...future.startTime <- base::Sys.time()
[10:32:37.910]             {
[10:32:37.910]                 {
[10:32:37.910]                   {
[10:32:37.910]                     base::local({
[10:32:37.910]                       has_future <- base::requireNamespace("future", 
[10:32:37.910]                         quietly = TRUE)
[10:32:37.910]                       if (has_future) {
[10:32:37.910]                         ns <- base::getNamespace("future")
[10:32:37.910]                         version <- ns[[".package"]][["version"]]
[10:32:37.910]                         if (is.null(version)) 
[10:32:37.910]                           version <- utils::packageVersion("future")
[10:32:37.910]                       }
[10:32:37.910]                       else {
[10:32:37.910]                         version <- NULL
[10:32:37.910]                       }
[10:32:37.910]                       if (!has_future || version < "1.8.0") {
[10:32:37.910]                         info <- base::c(r_version = base::gsub("R version ", 
[10:32:37.910]                           "", base::R.version$version.string), 
[10:32:37.910]                           platform = base::sprintf("%s (%s-bit)", 
[10:32:37.910]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:37.910]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:37.910]                             "release", "version")], collapse = " "), 
[10:32:37.910]                           hostname = base::Sys.info()[["nodename"]])
[10:32:37.910]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:32:37.910]                           info)
[10:32:37.910]                         info <- base::paste(info, collapse = "; ")
[10:32:37.910]                         if (!has_future) {
[10:32:37.910]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:37.910]                             info)
[10:32:37.910]                         }
[10:32:37.910]                         else {
[10:32:37.910]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:37.910]                             info, version)
[10:32:37.910]                         }
[10:32:37.910]                         base::stop(msg)
[10:32:37.910]                       }
[10:32:37.910]                     })
[10:32:37.910]                   }
[10:32:37.910]                   ...future.strategy.old <- future::plan("list")
[10:32:37.910]                   options(future.plan = NULL)
[10:32:37.910]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:37.910]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:37.910]                 }
[10:32:37.910]                 ...future.workdir <- getwd()
[10:32:37.910]             }
[10:32:37.910]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:37.910]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:37.910]         }
[10:32:37.910]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:37.910]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:37.910]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:37.910]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:37.910]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:37.910]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:37.910]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:37.910]             base::names(...future.oldOptions))
[10:32:37.910]     }
[10:32:37.910]     if (FALSE) {
[10:32:37.910]     }
[10:32:37.910]     else {
[10:32:37.910]         if (TRUE) {
[10:32:37.910]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:37.910]                 open = "w")
[10:32:37.910]         }
[10:32:37.910]         else {
[10:32:37.910]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:37.910]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:37.910]         }
[10:32:37.910]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:37.910]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:37.910]             base::sink(type = "output", split = FALSE)
[10:32:37.910]             base::close(...future.stdout)
[10:32:37.910]         }, add = TRUE)
[10:32:37.910]     }
[10:32:37.910]     ...future.frame <- base::sys.nframe()
[10:32:37.910]     ...future.conditions <- base::list()
[10:32:37.910]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:37.910]     if (FALSE) {
[10:32:37.910]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:37.910]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:37.910]     }
[10:32:37.910]     ...future.result <- base::tryCatch({
[10:32:37.910]         base::withCallingHandlers({
[10:32:37.910]             ...future.value <- base::withVisible(base::local({
[10:32:37.910]                 42L
[10:32:37.910]             }))
[10:32:37.910]             future::FutureResult(value = ...future.value$value, 
[10:32:37.910]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:37.910]                   ...future.rng), globalenv = if (FALSE) 
[10:32:37.910]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:37.910]                     ...future.globalenv.names))
[10:32:37.910]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:37.910]         }, condition = base::local({
[10:32:37.910]             c <- base::c
[10:32:37.910]             inherits <- base::inherits
[10:32:37.910]             invokeRestart <- base::invokeRestart
[10:32:37.910]             length <- base::length
[10:32:37.910]             list <- base::list
[10:32:37.910]             seq.int <- base::seq.int
[10:32:37.910]             signalCondition <- base::signalCondition
[10:32:37.910]             sys.calls <- base::sys.calls
[10:32:37.910]             `[[` <- base::`[[`
[10:32:37.910]             `+` <- base::`+`
[10:32:37.910]             `<<-` <- base::`<<-`
[10:32:37.910]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:37.910]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:37.910]                   3L)]
[10:32:37.910]             }
[10:32:37.910]             function(cond) {
[10:32:37.910]                 is_error <- inherits(cond, "error")
[10:32:37.910]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:37.910]                   NULL)
[10:32:37.910]                 if (is_error) {
[10:32:37.910]                   sessionInformation <- function() {
[10:32:37.910]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:37.910]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:37.910]                       search = base::search(), system = base::Sys.info())
[10:32:37.910]                   }
[10:32:37.910]                   ...future.conditions[[length(...future.conditions) + 
[10:32:37.910]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:37.910]                     cond$call), session = sessionInformation(), 
[10:32:37.910]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:37.910]                   signalCondition(cond)
[10:32:37.910]                 }
[10:32:37.910]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:37.910]                 "immediateCondition"))) {
[10:32:37.910]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:37.910]                   ...future.conditions[[length(...future.conditions) + 
[10:32:37.910]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:37.910]                   if (TRUE && !signal) {
[10:32:37.910]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:37.910]                     {
[10:32:37.910]                       inherits <- base::inherits
[10:32:37.910]                       invokeRestart <- base::invokeRestart
[10:32:37.910]                       is.null <- base::is.null
[10:32:37.910]                       muffled <- FALSE
[10:32:37.910]                       if (inherits(cond, "message")) {
[10:32:37.910]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:37.910]                         if (muffled) 
[10:32:37.910]                           invokeRestart("muffleMessage")
[10:32:37.910]                       }
[10:32:37.910]                       else if (inherits(cond, "warning")) {
[10:32:37.910]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:37.910]                         if (muffled) 
[10:32:37.910]                           invokeRestart("muffleWarning")
[10:32:37.910]                       }
[10:32:37.910]                       else if (inherits(cond, "condition")) {
[10:32:37.910]                         if (!is.null(pattern)) {
[10:32:37.910]                           computeRestarts <- base::computeRestarts
[10:32:37.910]                           grepl <- base::grepl
[10:32:37.910]                           restarts <- computeRestarts(cond)
[10:32:37.910]                           for (restart in restarts) {
[10:32:37.910]                             name <- restart$name
[10:32:37.910]                             if (is.null(name)) 
[10:32:37.910]                               next
[10:32:37.910]                             if (!grepl(pattern, name)) 
[10:32:37.910]                               next
[10:32:37.910]                             invokeRestart(restart)
[10:32:37.910]                             muffled <- TRUE
[10:32:37.910]                             break
[10:32:37.910]                           }
[10:32:37.910]                         }
[10:32:37.910]                       }
[10:32:37.910]                       invisible(muffled)
[10:32:37.910]                     }
[10:32:37.910]                     muffleCondition(cond, pattern = "^muffle")
[10:32:37.910]                   }
[10:32:37.910]                 }
[10:32:37.910]                 else {
[10:32:37.910]                   if (TRUE) {
[10:32:37.910]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:37.910]                     {
[10:32:37.910]                       inherits <- base::inherits
[10:32:37.910]                       invokeRestart <- base::invokeRestart
[10:32:37.910]                       is.null <- base::is.null
[10:32:37.910]                       muffled <- FALSE
[10:32:37.910]                       if (inherits(cond, "message")) {
[10:32:37.910]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:37.910]                         if (muffled) 
[10:32:37.910]                           invokeRestart("muffleMessage")
[10:32:37.910]                       }
[10:32:37.910]                       else if (inherits(cond, "warning")) {
[10:32:37.910]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:37.910]                         if (muffled) 
[10:32:37.910]                           invokeRestart("muffleWarning")
[10:32:37.910]                       }
[10:32:37.910]                       else if (inherits(cond, "condition")) {
[10:32:37.910]                         if (!is.null(pattern)) {
[10:32:37.910]                           computeRestarts <- base::computeRestarts
[10:32:37.910]                           grepl <- base::grepl
[10:32:37.910]                           restarts <- computeRestarts(cond)
[10:32:37.910]                           for (restart in restarts) {
[10:32:37.910]                             name <- restart$name
[10:32:37.910]                             if (is.null(name)) 
[10:32:37.910]                               next
[10:32:37.910]                             if (!grepl(pattern, name)) 
[10:32:37.910]                               next
[10:32:37.910]                             invokeRestart(restart)
[10:32:37.910]                             muffled <- TRUE
[10:32:37.910]                             break
[10:32:37.910]                           }
[10:32:37.910]                         }
[10:32:37.910]                       }
[10:32:37.910]                       invisible(muffled)
[10:32:37.910]                     }
[10:32:37.910]                     muffleCondition(cond, pattern = "^muffle")
[10:32:37.910]                   }
[10:32:37.910]                 }
[10:32:37.910]             }
[10:32:37.910]         }))
[10:32:37.910]     }, error = function(ex) {
[10:32:37.910]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:37.910]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:37.910]                 ...future.rng), started = ...future.startTime, 
[10:32:37.910]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:37.910]             version = "1.8"), class = "FutureResult")
[10:32:37.910]     }, finally = {
[10:32:37.910]         if (!identical(...future.workdir, getwd())) 
[10:32:37.910]             setwd(...future.workdir)
[10:32:37.910]         {
[10:32:37.910]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:37.910]                 ...future.oldOptions$nwarnings <- NULL
[10:32:37.910]             }
[10:32:37.910]             base::options(...future.oldOptions)
[10:32:37.910]             if (.Platform$OS.type == "windows") {
[10:32:37.910]                 old_names <- names(...future.oldEnvVars)
[10:32:37.910]                 envs <- base::Sys.getenv()
[10:32:37.910]                 names <- names(envs)
[10:32:37.910]                 common <- intersect(names, old_names)
[10:32:37.910]                 added <- setdiff(names, old_names)
[10:32:37.910]                 removed <- setdiff(old_names, names)
[10:32:37.910]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:37.910]                   envs[common]]
[10:32:37.910]                 NAMES <- toupper(changed)
[10:32:37.910]                 args <- list()
[10:32:37.910]                 for (kk in seq_along(NAMES)) {
[10:32:37.910]                   name <- changed[[kk]]
[10:32:37.910]                   NAME <- NAMES[[kk]]
[10:32:37.910]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:37.910]                     next
[10:32:37.910]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:37.910]                 }
[10:32:37.910]                 NAMES <- toupper(added)
[10:32:37.910]                 for (kk in seq_along(NAMES)) {
[10:32:37.910]                   name <- added[[kk]]
[10:32:37.910]                   NAME <- NAMES[[kk]]
[10:32:37.910]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:37.910]                     next
[10:32:37.910]                   args[[name]] <- ""
[10:32:37.910]                 }
[10:32:37.910]                 NAMES <- toupper(removed)
[10:32:37.910]                 for (kk in seq_along(NAMES)) {
[10:32:37.910]                   name <- removed[[kk]]
[10:32:37.910]                   NAME <- NAMES[[kk]]
[10:32:37.910]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:37.910]                     next
[10:32:37.910]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:37.910]                 }
[10:32:37.910]                 if (length(args) > 0) 
[10:32:37.910]                   base::do.call(base::Sys.setenv, args = args)
[10:32:37.910]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:37.910]             }
[10:32:37.910]             else {
[10:32:37.910]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:37.910]             }
[10:32:37.910]             {
[10:32:37.910]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:37.910]                   0L) {
[10:32:37.910]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:37.910]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:37.910]                   base::options(opts)
[10:32:37.910]                 }
[10:32:37.910]                 {
[10:32:37.910]                   {
[10:32:37.910]                     NULL
[10:32:37.910]                     RNGkind("Mersenne-Twister")
[10:32:37.910]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:32:37.910]                       inherits = FALSE)
[10:32:37.910]                   }
[10:32:37.910]                   options(future.plan = NULL)
[10:32:37.910]                   if (is.na(NA_character_)) 
[10:32:37.910]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:37.910]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:37.910]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:37.910]                     .init = FALSE)
[10:32:37.910]                 }
[10:32:37.910]             }
[10:32:37.910]         }
[10:32:37.910]     })
[10:32:37.910]     if (TRUE) {
[10:32:37.910]         base::sink(type = "output", split = FALSE)
[10:32:37.910]         if (TRUE) {
[10:32:37.910]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:37.910]         }
[10:32:37.910]         else {
[10:32:37.910]             ...future.result["stdout"] <- base::list(NULL)
[10:32:37.910]         }
[10:32:37.910]         base::close(...future.stdout)
[10:32:37.910]         ...future.stdout <- NULL
[10:32:37.910]     }
[10:32:37.910]     ...future.result$conditions <- ...future.conditions
[10:32:37.910]     ...future.result$finished <- base::Sys.time()
[10:32:37.910]     ...future.result
[10:32:37.910] }
[10:32:37.912] plan(): Setting new future strategy stack:
[10:32:37.912] List of future strategies:
[10:32:37.912] 1. sequential:
[10:32:37.912]    - args: function (..., envir = parent.frame())
[10:32:37.912]    - tweaked: FALSE
[10:32:37.912]    - call: NULL
[10:32:37.913] plan(): nbrOfWorkers() = 1
[10:32:37.914] plan(): Setting new future strategy stack:
[10:32:37.914] List of future strategies:
[10:32:37.914] 1. future:
[10:32:37.914]    - args: function (...)
[10:32:37.914]    - tweaked: FALSE
[10:32:37.914]    - call: plan(foo)
[10:32:37.914] plan(): nbrOfWorkers() = Inf
[10:32:37.914] SequentialFuture started (and completed)
[1] 42
[10:32:37.915] getGlobalsAndPackages() ...
[10:32:37.915] 
[10:32:37.915] - globals: [0] <none>
[10:32:37.915] getGlobalsAndPackages() ... DONE
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: 0x557bab3894c8
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 7c75f986-c4e2-313c-9860-2165731bfddf
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:32:37.917] Packages needed by the future expression (n = 0): <none>
[10:32:37.917] Packages needed by future strategies (n = 0): <none>
[10:32:37.917] {
[10:32:37.917]     {
[10:32:37.917]         {
[10:32:37.917]             ...future.startTime <- base::Sys.time()
[10:32:37.917]             {
[10:32:37.917]                 {
[10:32:37.917]                   {
[10:32:37.917]                     {
[10:32:37.917]                       base::local({
[10:32:37.917]                         has_future <- base::requireNamespace("future", 
[10:32:37.917]                           quietly = TRUE)
[10:32:37.917]                         if (has_future) {
[10:32:37.917]                           ns <- base::getNamespace("future")
[10:32:37.917]                           version <- ns[[".package"]][["version"]]
[10:32:37.917]                           if (is.null(version)) 
[10:32:37.917]                             version <- utils::packageVersion("future")
[10:32:37.917]                         }
[10:32:37.917]                         else {
[10:32:37.917]                           version <- NULL
[10:32:37.917]                         }
[10:32:37.917]                         if (!has_future || version < "1.8.0") {
[10:32:37.917]                           info <- base::c(r_version = base::gsub("R version ", 
[10:32:37.917]                             "", base::R.version$version.string), 
[10:32:37.917]                             platform = base::sprintf("%s (%s-bit)", 
[10:32:37.917]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:37.917]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:37.917]                               "release", "version")], collapse = " "), 
[10:32:37.917]                             hostname = base::Sys.info()[["nodename"]])
[10:32:37.917]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:32:37.917]                             info)
[10:32:37.917]                           info <- base::paste(info, collapse = "; ")
[10:32:37.917]                           if (!has_future) {
[10:32:37.917]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:37.917]                               info)
[10:32:37.917]                           }
[10:32:37.917]                           else {
[10:32:37.917]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:37.917]                               info, version)
[10:32:37.917]                           }
[10:32:37.917]                           base::stop(msg)
[10:32:37.917]                         }
[10:32:37.917]                       })
[10:32:37.917]                     }
[10:32:37.917]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:32:37.917]                     base::options(mc.cores = 1L)
[10:32:37.917]                   }
[10:32:37.917]                   ...future.strategy.old <- future::plan("list")
[10:32:37.917]                   options(future.plan = NULL)
[10:32:37.917]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:37.917]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:37.917]                 }
[10:32:37.917]                 ...future.workdir <- getwd()
[10:32:37.917]             }
[10:32:37.917]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:37.917]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:37.917]         }
[10:32:37.917]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:37.917]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:37.917]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:37.917]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:37.917]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:37.917]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:37.917]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:37.917]             base::names(...future.oldOptions))
[10:32:37.917]     }
[10:32:37.917]     if (FALSE) {
[10:32:37.917]     }
[10:32:37.917]     else {
[10:32:37.917]         if (TRUE) {
[10:32:37.917]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:37.917]                 open = "w")
[10:32:37.917]         }
[10:32:37.917]         else {
[10:32:37.917]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:37.917]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:37.917]         }
[10:32:37.917]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:37.917]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:37.917]             base::sink(type = "output", split = FALSE)
[10:32:37.917]             base::close(...future.stdout)
[10:32:37.917]         }, add = TRUE)
[10:32:37.917]     }
[10:32:37.917]     ...future.frame <- base::sys.nframe()
[10:32:37.917]     ...future.conditions <- base::list()
[10:32:37.917]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:37.917]     if (FALSE) {
[10:32:37.917]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:37.917]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:37.917]     }
[10:32:37.917]     ...future.result <- base::tryCatch({
[10:32:37.917]         base::withCallingHandlers({
[10:32:37.917]             ...future.value <- base::withVisible(base::local({
[10:32:37.917]                 withCallingHandlers({
[10:32:37.917]                   {
[10:32:37.917]                     42L
[10:32:37.917]                   }
[10:32:37.917]                 }, immediateCondition = function(cond) {
[10:32:37.917]                   save_rds <- function (object, pathname, ...) 
[10:32:37.917]                   {
[10:32:37.917]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:32:37.917]                     if (file_test("-f", pathname_tmp)) {
[10:32:37.917]                       fi_tmp <- file.info(pathname_tmp)
[10:32:37.917]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:32:37.917]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:32:37.917]                         fi_tmp[["mtime"]])
[10:32:37.917]                     }
[10:32:37.917]                     tryCatch({
[10:32:37.917]                       saveRDS(object, file = pathname_tmp, ...)
[10:32:37.917]                     }, error = function(ex) {
[10:32:37.917]                       msg <- conditionMessage(ex)
[10:32:37.917]                       fi_tmp <- file.info(pathname_tmp)
[10:32:37.917]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:32:37.917]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:32:37.917]                         fi_tmp[["mtime"]], msg)
[10:32:37.917]                       ex$message <- msg
[10:32:37.917]                       stop(ex)
[10:32:37.917]                     })
[10:32:37.917]                     stopifnot(file_test("-f", pathname_tmp))
[10:32:37.917]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:32:37.917]                     if (!res || file_test("-f", pathname_tmp)) {
[10:32:37.917]                       fi_tmp <- file.info(pathname_tmp)
[10:32:37.917]                       fi <- file.info(pathname)
[10:32:37.917]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:32:37.917]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:32:37.917]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:32:37.917]                         fi[["size"]], fi[["mtime"]])
[10:32:37.917]                       stop(msg)
[10:32:37.917]                     }
[10:32:37.917]                     invisible(pathname)
[10:32:37.917]                   }
[10:32:37.917]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:32:37.917]                     rootPath = tempdir()) 
[10:32:37.917]                   {
[10:32:37.917]                     obj <- list(time = Sys.time(), condition = cond)
[10:32:37.917]                     file <- tempfile(pattern = class(cond)[1], 
[10:32:37.917]                       tmpdir = path, fileext = ".rds")
[10:32:37.917]                     save_rds(obj, file)
[10:32:37.917]                   }
[10:32:37.917]                   saveImmediateCondition(cond, path = "/tmp/RtmpE5H5XX/.future/immediateConditions")
[10:32:37.917]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:37.917]                   {
[10:32:37.917]                     inherits <- base::inherits
[10:32:37.917]                     invokeRestart <- base::invokeRestart
[10:32:37.917]                     is.null <- base::is.null
[10:32:37.917]                     muffled <- FALSE
[10:32:37.917]                     if (inherits(cond, "message")) {
[10:32:37.917]                       muffled <- grepl(pattern, "muffleMessage")
[10:32:37.917]                       if (muffled) 
[10:32:37.917]                         invokeRestart("muffleMessage")
[10:32:37.917]                     }
[10:32:37.917]                     else if (inherits(cond, "warning")) {
[10:32:37.917]                       muffled <- grepl(pattern, "muffleWarning")
[10:32:37.917]                       if (muffled) 
[10:32:37.917]                         invokeRestart("muffleWarning")
[10:32:37.917]                     }
[10:32:37.917]                     else if (inherits(cond, "condition")) {
[10:32:37.917]                       if (!is.null(pattern)) {
[10:32:37.917]                         computeRestarts <- base::computeRestarts
[10:32:37.917]                         grepl <- base::grepl
[10:32:37.917]                         restarts <- computeRestarts(cond)
[10:32:37.917]                         for (restart in restarts) {
[10:32:37.917]                           name <- restart$name
[10:32:37.917]                           if (is.null(name)) 
[10:32:37.917]                             next
[10:32:37.917]                           if (!grepl(pattern, name)) 
[10:32:37.917]                             next
[10:32:37.917]                           invokeRestart(restart)
[10:32:37.917]                           muffled <- TRUE
[10:32:37.917]                           break
[10:32:37.917]                         }
[10:32:37.917]                       }
[10:32:37.917]                     }
[10:32:37.917]                     invisible(muffled)
[10:32:37.917]                   }
[10:32:37.917]                   muffleCondition(cond)
[10:32:37.917]                 })
[10:32:37.917]             }))
[10:32:37.917]             future::FutureResult(value = ...future.value$value, 
[10:32:37.917]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:37.917]                   ...future.rng), globalenv = if (FALSE) 
[10:32:37.917]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:37.917]                     ...future.globalenv.names))
[10:32:37.917]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:37.917]         }, condition = base::local({
[10:32:37.917]             c <- base::c
[10:32:37.917]             inherits <- base::inherits
[10:32:37.917]             invokeRestart <- base::invokeRestart
[10:32:37.917]             length <- base::length
[10:32:37.917]             list <- base::list
[10:32:37.917]             seq.int <- base::seq.int
[10:32:37.917]             signalCondition <- base::signalCondition
[10:32:37.917]             sys.calls <- base::sys.calls
[10:32:37.917]             `[[` <- base::`[[`
[10:32:37.917]             `+` <- base::`+`
[10:32:37.917]             `<<-` <- base::`<<-`
[10:32:37.917]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:37.917]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:37.917]                   3L)]
[10:32:37.917]             }
[10:32:37.917]             function(cond) {
[10:32:37.917]                 is_error <- inherits(cond, "error")
[10:32:37.917]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:37.917]                   NULL)
[10:32:37.917]                 if (is_error) {
[10:32:37.917]                   sessionInformation <- function() {
[10:32:37.917]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:37.917]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:37.917]                       search = base::search(), system = base::Sys.info())
[10:32:37.917]                   }
[10:32:37.917]                   ...future.conditions[[length(...future.conditions) + 
[10:32:37.917]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:37.917]                     cond$call), session = sessionInformation(), 
[10:32:37.917]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:37.917]                   signalCondition(cond)
[10:32:37.917]                 }
[10:32:37.917]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:37.917]                 "immediateCondition"))) {
[10:32:37.917]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:37.917]                   ...future.conditions[[length(...future.conditions) + 
[10:32:37.917]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:37.917]                   if (TRUE && !signal) {
[10:32:37.917]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:37.917]                     {
[10:32:37.917]                       inherits <- base::inherits
[10:32:37.917]                       invokeRestart <- base::invokeRestart
[10:32:37.917]                       is.null <- base::is.null
[10:32:37.917]                       muffled <- FALSE
[10:32:37.917]                       if (inherits(cond, "message")) {
[10:32:37.917]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:37.917]                         if (muffled) 
[10:32:37.917]                           invokeRestart("muffleMessage")
[10:32:37.917]                       }
[10:32:37.917]                       else if (inherits(cond, "warning")) {
[10:32:37.917]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:37.917]                         if (muffled) 
[10:32:37.917]                           invokeRestart("muffleWarning")
[10:32:37.917]                       }
[10:32:37.917]                       else if (inherits(cond, "condition")) {
[10:32:37.917]                         if (!is.null(pattern)) {
[10:32:37.917]                           computeRestarts <- base::computeRestarts
[10:32:37.917]                           grepl <- base::grepl
[10:32:37.917]                           restarts <- computeRestarts(cond)
[10:32:37.917]                           for (restart in restarts) {
[10:32:37.917]                             name <- restart$name
[10:32:37.917]                             if (is.null(name)) 
[10:32:37.917]                               next
[10:32:37.917]                             if (!grepl(pattern, name)) 
[10:32:37.917]                               next
[10:32:37.917]                             invokeRestart(restart)
[10:32:37.917]                             muffled <- TRUE
[10:32:37.917]                             break
[10:32:37.917]                           }
[10:32:37.917]                         }
[10:32:37.917]                       }
[10:32:37.917]                       invisible(muffled)
[10:32:37.917]                     }
[10:32:37.917]                     muffleCondition(cond, pattern = "^muffle")
[10:32:37.917]                   }
[10:32:37.917]                 }
[10:32:37.917]                 else {
[10:32:37.917]                   if (TRUE) {
[10:32:37.917]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:37.917]                     {
[10:32:37.917]                       inherits <- base::inherits
[10:32:37.917]                       invokeRestart <- base::invokeRestart
[10:32:37.917]                       is.null <- base::is.null
[10:32:37.917]                       muffled <- FALSE
[10:32:37.917]                       if (inherits(cond, "message")) {
[10:32:37.917]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:37.917]                         if (muffled) 
[10:32:37.917]                           invokeRestart("muffleMessage")
[10:32:37.917]                       }
[10:32:37.917]                       else if (inherits(cond, "warning")) {
[10:32:37.917]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:37.917]                         if (muffled) 
[10:32:37.917]                           invokeRestart("muffleWarning")
[10:32:37.917]                       }
[10:32:37.917]                       else if (inherits(cond, "condition")) {
[10:32:37.917]                         if (!is.null(pattern)) {
[10:32:37.917]                           computeRestarts <- base::computeRestarts
[10:32:37.917]                           grepl <- base::grepl
[10:32:37.917]                           restarts <- computeRestarts(cond)
[10:32:37.917]                           for (restart in restarts) {
[10:32:37.917]                             name <- restart$name
[10:32:37.917]                             if (is.null(name)) 
[10:32:37.917]                               next
[10:32:37.917]                             if (!grepl(pattern, name)) 
[10:32:37.917]                               next
[10:32:37.917]                             invokeRestart(restart)
[10:32:37.917]                             muffled <- TRUE
[10:32:37.917]                             break
[10:32:37.917]                           }
[10:32:37.917]                         }
[10:32:37.917]                       }
[10:32:37.917]                       invisible(muffled)
[10:32:37.917]                     }
[10:32:37.917]                     muffleCondition(cond, pattern = "^muffle")
[10:32:37.917]                   }
[10:32:37.917]                 }
[10:32:37.917]             }
[10:32:37.917]         }))
[10:32:37.917]     }, error = function(ex) {
[10:32:37.917]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:37.917]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:37.917]                 ...future.rng), started = ...future.startTime, 
[10:32:37.917]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:37.917]             version = "1.8"), class = "FutureResult")
[10:32:37.917]     }, finally = {
[10:32:37.917]         if (!identical(...future.workdir, getwd())) 
[10:32:37.917]             setwd(...future.workdir)
[10:32:37.917]         {
[10:32:37.917]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:37.917]                 ...future.oldOptions$nwarnings <- NULL
[10:32:37.917]             }
[10:32:37.917]             base::options(...future.oldOptions)
[10:32:37.917]             if (.Platform$OS.type == "windows") {
[10:32:37.917]                 old_names <- names(...future.oldEnvVars)
[10:32:37.917]                 envs <- base::Sys.getenv()
[10:32:37.917]                 names <- names(envs)
[10:32:37.917]                 common <- intersect(names, old_names)
[10:32:37.917]                 added <- setdiff(names, old_names)
[10:32:37.917]                 removed <- setdiff(old_names, names)
[10:32:37.917]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:37.917]                   envs[common]]
[10:32:37.917]                 NAMES <- toupper(changed)
[10:32:37.917]                 args <- list()
[10:32:37.917]                 for (kk in seq_along(NAMES)) {
[10:32:37.917]                   name <- changed[[kk]]
[10:32:37.917]                   NAME <- NAMES[[kk]]
[10:32:37.917]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:37.917]                     next
[10:32:37.917]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:37.917]                 }
[10:32:37.917]                 NAMES <- toupper(added)
[10:32:37.917]                 for (kk in seq_along(NAMES)) {
[10:32:37.917]                   name <- added[[kk]]
[10:32:37.917]                   NAME <- NAMES[[kk]]
[10:32:37.917]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:37.917]                     next
[10:32:37.917]                   args[[name]] <- ""
[10:32:37.917]                 }
[10:32:37.917]                 NAMES <- toupper(removed)
[10:32:37.917]                 for (kk in seq_along(NAMES)) {
[10:32:37.917]                   name <- removed[[kk]]
[10:32:37.917]                   NAME <- NAMES[[kk]]
[10:32:37.917]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:37.917]                     next
[10:32:37.917]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:37.917]                 }
[10:32:37.917]                 if (length(args) > 0) 
[10:32:37.917]                   base::do.call(base::Sys.setenv, args = args)
[10:32:37.917]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:37.917]             }
[10:32:37.917]             else {
[10:32:37.917]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:37.917]             }
[10:32:37.917]             {
[10:32:37.917]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:37.917]                   0L) {
[10:32:37.917]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:37.917]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:37.917]                   base::options(opts)
[10:32:37.917]                 }
[10:32:37.917]                 {
[10:32:37.917]                   {
[10:32:37.917]                     base::options(mc.cores = ...future.mc.cores.old)
[10:32:37.917]                     NULL
[10:32:37.917]                   }
[10:32:37.917]                   options(future.plan = NULL)
[10:32:37.917]                   if (is.na(NA_character_)) 
[10:32:37.917]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:37.917]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:37.917]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:37.917]                     .init = FALSE)
[10:32:37.917]                 }
[10:32:37.917]             }
[10:32:37.917]         }
[10:32:37.917]     })
[10:32:37.917]     if (TRUE) {
[10:32:37.917]         base::sink(type = "output", split = FALSE)
[10:32:37.917]         if (TRUE) {
[10:32:37.917]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:37.917]         }
[10:32:37.917]         else {
[10:32:37.917]             ...future.result["stdout"] <- base::list(NULL)
[10:32:37.917]         }
[10:32:37.917]         base::close(...future.stdout)
[10:32:37.917]         ...future.stdout <- NULL
[10:32:37.917]     }
[10:32:37.917]     ...future.result$conditions <- ...future.conditions
[10:32:37.917]     ...future.result$finished <- base::Sys.time()
[10:32:37.917]     ...future.result
[10:32:37.917] }
[10:32:37.920] requestCore(): workers = 2
[10:32:37.923] MulticoreFuture started
[10:32:37.924] plan(): Setting new future strategy stack:
[10:32:37.924] List of future strategies:
[10:32:37.924] 1. sequential:
[10:32:37.924]    - args: function (..., envir = parent.frame())
[10:32:37.924]    - tweaked: FALSE
[10:32:37.924]    - call: NULL
[10:32:37.925] result() for MulticoreFuture ...
[10:32:37.925] plan(): nbrOfWorkers() = 1
[10:32:37.926] plan(): Setting new future strategy stack:
[10:32:37.927] List of future strategies:
[10:32:37.927] 1. future:
[10:32:37.927]    - args: function (...)
[10:32:37.927]    - tweaked: FALSE
[10:32:37.927]    - call: plan(foo)
[10:32:37.927] plan(): nbrOfWorkers() = Inf
[10:32:37.928] result() for MulticoreFuture ...
[10:32:37.928] result() for MulticoreFuture ... done
[10:32:37.929] result() for MulticoreFuture ... done
[10:32:37.929] result() for MulticoreFuture ...
[10:32:37.929] result() for MulticoreFuture ... done
[1] 42
[10:32:37.930] getGlobalsAndPackages() ...
[10:32:37.930] 
[10:32:37.931] - globals: [0] <none>
[10:32:37.931] getGlobalsAndPackages() ... DONE
[10:32:37.931] Packages needed by the future expression (n = 0): <none>
[10:32:37.931] Packages needed by future strategies (n = 0): <none>
[10:32:37.932] {
[10:32:37.932]     {
[10:32:37.932]         {
[10:32:37.932]             ...future.startTime <- base::Sys.time()
[10:32:37.932]             {
[10:32:37.932]                 {
[10:32:37.932]                   {
[10:32:37.932]                     {
[10:32:37.932]                       base::local({
[10:32:37.932]                         has_future <- base::requireNamespace("future", 
[10:32:37.932]                           quietly = TRUE)
[10:32:37.932]                         if (has_future) {
[10:32:37.932]                           ns <- base::getNamespace("future")
[10:32:37.932]                           version <- ns[[".package"]][["version"]]
[10:32:37.932]                           if (is.null(version)) 
[10:32:37.932]                             version <- utils::packageVersion("future")
[10:32:37.932]                         }
[10:32:37.932]                         else {
[10:32:37.932]                           version <- NULL
[10:32:37.932]                         }
[10:32:37.932]                         if (!has_future || version < "1.8.0") {
[10:32:37.932]                           info <- base::c(r_version = base::gsub("R version ", 
[10:32:37.932]                             "", base::R.version$version.string), 
[10:32:37.932]                             platform = base::sprintf("%s (%s-bit)", 
[10:32:37.932]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:37.932]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:37.932]                               "release", "version")], collapse = " "), 
[10:32:37.932]                             hostname = base::Sys.info()[["nodename"]])
[10:32:37.932]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:32:37.932]                             info)
[10:32:37.932]                           info <- base::paste(info, collapse = "; ")
[10:32:37.932]                           if (!has_future) {
[10:32:37.932]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:37.932]                               info)
[10:32:37.932]                           }
[10:32:37.932]                           else {
[10:32:37.932]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:37.932]                               info, version)
[10:32:37.932]                           }
[10:32:37.932]                           base::stop(msg)
[10:32:37.932]                         }
[10:32:37.932]                       })
[10:32:37.932]                     }
[10:32:37.932]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:32:37.932]                     base::options(mc.cores = 1L)
[10:32:37.932]                   }
[10:32:37.932]                   ...future.strategy.old <- future::plan("list")
[10:32:37.932]                   options(future.plan = NULL)
[10:32:37.932]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:37.932]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:37.932]                 }
[10:32:37.932]                 ...future.workdir <- getwd()
[10:32:37.932]             }
[10:32:37.932]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:37.932]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:37.932]         }
[10:32:37.932]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:37.932]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:37.932]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:37.932]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:37.932]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:37.932]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:37.932]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:37.932]             base::names(...future.oldOptions))
[10:32:37.932]     }
[10:32:37.932]     if (FALSE) {
[10:32:37.932]     }
[10:32:37.932]     else {
[10:32:37.932]         if (TRUE) {
[10:32:37.932]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:37.932]                 open = "w")
[10:32:37.932]         }
[10:32:37.932]         else {
[10:32:37.932]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:37.932]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:37.932]         }
[10:32:37.932]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:37.932]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:37.932]             base::sink(type = "output", split = FALSE)
[10:32:37.932]             base::close(...future.stdout)
[10:32:37.932]         }, add = TRUE)
[10:32:37.932]     }
[10:32:37.932]     ...future.frame <- base::sys.nframe()
[10:32:37.932]     ...future.conditions <- base::list()
[10:32:37.932]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:37.932]     if (FALSE) {
[10:32:37.932]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:37.932]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:37.932]     }
[10:32:37.932]     ...future.result <- base::tryCatch({
[10:32:37.932]         base::withCallingHandlers({
[10:32:37.932]             ...future.value <- base::withVisible(base::local({
[10:32:37.932]                 withCallingHandlers({
[10:32:37.932]                   {
[10:32:37.932]                     42L
[10:32:37.932]                   }
[10:32:37.932]                 }, immediateCondition = function(cond) {
[10:32:37.932]                   save_rds <- function (object, pathname, ...) 
[10:32:37.932]                   {
[10:32:37.932]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:32:37.932]                     if (file_test("-f", pathname_tmp)) {
[10:32:37.932]                       fi_tmp <- file.info(pathname_tmp)
[10:32:37.932]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:32:37.932]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:32:37.932]                         fi_tmp[["mtime"]])
[10:32:37.932]                     }
[10:32:37.932]                     tryCatch({
[10:32:37.932]                       saveRDS(object, file = pathname_tmp, ...)
[10:32:37.932]                     }, error = function(ex) {
[10:32:37.932]                       msg <- conditionMessage(ex)
[10:32:37.932]                       fi_tmp <- file.info(pathname_tmp)
[10:32:37.932]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:32:37.932]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:32:37.932]                         fi_tmp[["mtime"]], msg)
[10:32:37.932]                       ex$message <- msg
[10:32:37.932]                       stop(ex)
[10:32:37.932]                     })
[10:32:37.932]                     stopifnot(file_test("-f", pathname_tmp))
[10:32:37.932]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:32:37.932]                     if (!res || file_test("-f", pathname_tmp)) {
[10:32:37.932]                       fi_tmp <- file.info(pathname_tmp)
[10:32:37.932]                       fi <- file.info(pathname)
[10:32:37.932]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:32:37.932]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:32:37.932]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:32:37.932]                         fi[["size"]], fi[["mtime"]])
[10:32:37.932]                       stop(msg)
[10:32:37.932]                     }
[10:32:37.932]                     invisible(pathname)
[10:32:37.932]                   }
[10:32:37.932]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:32:37.932]                     rootPath = tempdir()) 
[10:32:37.932]                   {
[10:32:37.932]                     obj <- list(time = Sys.time(), condition = cond)
[10:32:37.932]                     file <- tempfile(pattern = class(cond)[1], 
[10:32:37.932]                       tmpdir = path, fileext = ".rds")
[10:32:37.932]                     save_rds(obj, file)
[10:32:37.932]                   }
[10:32:37.932]                   saveImmediateCondition(cond, path = "/tmp/RtmpE5H5XX/.future/immediateConditions")
[10:32:37.932]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:37.932]                   {
[10:32:37.932]                     inherits <- base::inherits
[10:32:37.932]                     invokeRestart <- base::invokeRestart
[10:32:37.932]                     is.null <- base::is.null
[10:32:37.932]                     muffled <- FALSE
[10:32:37.932]                     if (inherits(cond, "message")) {
[10:32:37.932]                       muffled <- grepl(pattern, "muffleMessage")
[10:32:37.932]                       if (muffled) 
[10:32:37.932]                         invokeRestart("muffleMessage")
[10:32:37.932]                     }
[10:32:37.932]                     else if (inherits(cond, "warning")) {
[10:32:37.932]                       muffled <- grepl(pattern, "muffleWarning")
[10:32:37.932]                       if (muffled) 
[10:32:37.932]                         invokeRestart("muffleWarning")
[10:32:37.932]                     }
[10:32:37.932]                     else if (inherits(cond, "condition")) {
[10:32:37.932]                       if (!is.null(pattern)) {
[10:32:37.932]                         computeRestarts <- base::computeRestarts
[10:32:37.932]                         grepl <- base::grepl
[10:32:37.932]                         restarts <- computeRestarts(cond)
[10:32:37.932]                         for (restart in restarts) {
[10:32:37.932]                           name <- restart$name
[10:32:37.932]                           if (is.null(name)) 
[10:32:37.932]                             next
[10:32:37.932]                           if (!grepl(pattern, name)) 
[10:32:37.932]                             next
[10:32:37.932]                           invokeRestart(restart)
[10:32:37.932]                           muffled <- TRUE
[10:32:37.932]                           break
[10:32:37.932]                         }
[10:32:37.932]                       }
[10:32:37.932]                     }
[10:32:37.932]                     invisible(muffled)
[10:32:37.932]                   }
[10:32:37.932]                   muffleCondition(cond)
[10:32:37.932]                 })
[10:32:37.932]             }))
[10:32:37.932]             future::FutureResult(value = ...future.value$value, 
[10:32:37.932]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:37.932]                   ...future.rng), globalenv = if (FALSE) 
[10:32:37.932]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:37.932]                     ...future.globalenv.names))
[10:32:37.932]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:37.932]         }, condition = base::local({
[10:32:37.932]             c <- base::c
[10:32:37.932]             inherits <- base::inherits
[10:32:37.932]             invokeRestart <- base::invokeRestart
[10:32:37.932]             length <- base::length
[10:32:37.932]             list <- base::list
[10:32:37.932]             seq.int <- base::seq.int
[10:32:37.932]             signalCondition <- base::signalCondition
[10:32:37.932]             sys.calls <- base::sys.calls
[10:32:37.932]             `[[` <- base::`[[`
[10:32:37.932]             `+` <- base::`+`
[10:32:37.932]             `<<-` <- base::`<<-`
[10:32:37.932]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:37.932]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:37.932]                   3L)]
[10:32:37.932]             }
[10:32:37.932]             function(cond) {
[10:32:37.932]                 is_error <- inherits(cond, "error")
[10:32:37.932]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:37.932]                   NULL)
[10:32:37.932]                 if (is_error) {
[10:32:37.932]                   sessionInformation <- function() {
[10:32:37.932]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:37.932]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:37.932]                       search = base::search(), system = base::Sys.info())
[10:32:37.932]                   }
[10:32:37.932]                   ...future.conditions[[length(...future.conditions) + 
[10:32:37.932]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:37.932]                     cond$call), session = sessionInformation(), 
[10:32:37.932]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:37.932]                   signalCondition(cond)
[10:32:37.932]                 }
[10:32:37.932]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:37.932]                 "immediateCondition"))) {
[10:32:37.932]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:37.932]                   ...future.conditions[[length(...future.conditions) + 
[10:32:37.932]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:37.932]                   if (TRUE && !signal) {
[10:32:37.932]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:37.932]                     {
[10:32:37.932]                       inherits <- base::inherits
[10:32:37.932]                       invokeRestart <- base::invokeRestart
[10:32:37.932]                       is.null <- base::is.null
[10:32:37.932]                       muffled <- FALSE
[10:32:37.932]                       if (inherits(cond, "message")) {
[10:32:37.932]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:37.932]                         if (muffled) 
[10:32:37.932]                           invokeRestart("muffleMessage")
[10:32:37.932]                       }
[10:32:37.932]                       else if (inherits(cond, "warning")) {
[10:32:37.932]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:37.932]                         if (muffled) 
[10:32:37.932]                           invokeRestart("muffleWarning")
[10:32:37.932]                       }
[10:32:37.932]                       else if (inherits(cond, "condition")) {
[10:32:37.932]                         if (!is.null(pattern)) {
[10:32:37.932]                           computeRestarts <- base::computeRestarts
[10:32:37.932]                           grepl <- base::grepl
[10:32:37.932]                           restarts <- computeRestarts(cond)
[10:32:37.932]                           for (restart in restarts) {
[10:32:37.932]                             name <- restart$name
[10:32:37.932]                             if (is.null(name)) 
[10:32:37.932]                               next
[10:32:37.932]                             if (!grepl(pattern, name)) 
[10:32:37.932]                               next
[10:32:37.932]                             invokeRestart(restart)
[10:32:37.932]                             muffled <- TRUE
[10:32:37.932]                             break
[10:32:37.932]                           }
[10:32:37.932]                         }
[10:32:37.932]                       }
[10:32:37.932]                       invisible(muffled)
[10:32:37.932]                     }
[10:32:37.932]                     muffleCondition(cond, pattern = "^muffle")
[10:32:37.932]                   }
[10:32:37.932]                 }
[10:32:37.932]                 else {
[10:32:37.932]                   if (TRUE) {
[10:32:37.932]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:37.932]                     {
[10:32:37.932]                       inherits <- base::inherits
[10:32:37.932]                       invokeRestart <- base::invokeRestart
[10:32:37.932]                       is.null <- base::is.null
[10:32:37.932]                       muffled <- FALSE
[10:32:37.932]                       if (inherits(cond, "message")) {
[10:32:37.932]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:37.932]                         if (muffled) 
[10:32:37.932]                           invokeRestart("muffleMessage")
[10:32:37.932]                       }
[10:32:37.932]                       else if (inherits(cond, "warning")) {
[10:32:37.932]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:37.932]                         if (muffled) 
[10:32:37.932]                           invokeRestart("muffleWarning")
[10:32:37.932]                       }
[10:32:37.932]                       else if (inherits(cond, "condition")) {
[10:32:37.932]                         if (!is.null(pattern)) {
[10:32:37.932]                           computeRestarts <- base::computeRestarts
[10:32:37.932]                           grepl <- base::grepl
[10:32:37.932]                           restarts <- computeRestarts(cond)
[10:32:37.932]                           for (restart in restarts) {
[10:32:37.932]                             name <- restart$name
[10:32:37.932]                             if (is.null(name)) 
[10:32:37.932]                               next
[10:32:37.932]                             if (!grepl(pattern, name)) 
[10:32:37.932]                               next
[10:32:37.932]                             invokeRestart(restart)
[10:32:37.932]                             muffled <- TRUE
[10:32:37.932]                             break
[10:32:37.932]                           }
[10:32:37.932]                         }
[10:32:37.932]                       }
[10:32:37.932]                       invisible(muffled)
[10:32:37.932]                     }
[10:32:37.932]                     muffleCondition(cond, pattern = "^muffle")
[10:32:37.932]                   }
[10:32:37.932]                 }
[10:32:37.932]             }
[10:32:37.932]         }))
[10:32:37.932]     }, error = function(ex) {
[10:32:37.932]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:37.932]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:37.932]                 ...future.rng), started = ...future.startTime, 
[10:32:37.932]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:37.932]             version = "1.8"), class = "FutureResult")
[10:32:37.932]     }, finally = {
[10:32:37.932]         if (!identical(...future.workdir, getwd())) 
[10:32:37.932]             setwd(...future.workdir)
[10:32:37.932]         {
[10:32:37.932]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:37.932]                 ...future.oldOptions$nwarnings <- NULL
[10:32:37.932]             }
[10:32:37.932]             base::options(...future.oldOptions)
[10:32:37.932]             if (.Platform$OS.type == "windows") {
[10:32:37.932]                 old_names <- names(...future.oldEnvVars)
[10:32:37.932]                 envs <- base::Sys.getenv()
[10:32:37.932]                 names <- names(envs)
[10:32:37.932]                 common <- intersect(names, old_names)
[10:32:37.932]                 added <- setdiff(names, old_names)
[10:32:37.932]                 removed <- setdiff(old_names, names)
[10:32:37.932]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:37.932]                   envs[common]]
[10:32:37.932]                 NAMES <- toupper(changed)
[10:32:37.932]                 args <- list()
[10:32:37.932]                 for (kk in seq_along(NAMES)) {
[10:32:37.932]                   name <- changed[[kk]]
[10:32:37.932]                   NAME <- NAMES[[kk]]
[10:32:37.932]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:37.932]                     next
[10:32:37.932]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:37.932]                 }
[10:32:37.932]                 NAMES <- toupper(added)
[10:32:37.932]                 for (kk in seq_along(NAMES)) {
[10:32:37.932]                   name <- added[[kk]]
[10:32:37.932]                   NAME <- NAMES[[kk]]
[10:32:37.932]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:37.932]                     next
[10:32:37.932]                   args[[name]] <- ""
[10:32:37.932]                 }
[10:32:37.932]                 NAMES <- toupper(removed)
[10:32:37.932]                 for (kk in seq_along(NAMES)) {
[10:32:37.932]                   name <- removed[[kk]]
[10:32:37.932]                   NAME <- NAMES[[kk]]
[10:32:37.932]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:37.932]                     next
[10:32:37.932]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:37.932]                 }
[10:32:37.932]                 if (length(args) > 0) 
[10:32:37.932]                   base::do.call(base::Sys.setenv, args = args)
[10:32:37.932]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:37.932]             }
[10:32:37.932]             else {
[10:32:37.932]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:37.932]             }
[10:32:37.932]             {
[10:32:37.932]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:37.932]                   0L) {
[10:32:37.932]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:37.932]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:37.932]                   base::options(opts)
[10:32:37.932]                 }
[10:32:37.932]                 {
[10:32:37.932]                   {
[10:32:37.932]                     base::options(mc.cores = ...future.mc.cores.old)
[10:32:37.932]                     NULL
[10:32:37.932]                   }
[10:32:37.932]                   options(future.plan = NULL)
[10:32:37.932]                   if (is.na(NA_character_)) 
[10:32:37.932]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:37.932]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:37.932]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:37.932]                     .init = FALSE)
[10:32:37.932]                 }
[10:32:37.932]             }
[10:32:37.932]         }
[10:32:37.932]     })
[10:32:37.932]     if (TRUE) {
[10:32:37.932]         base::sink(type = "output", split = FALSE)
[10:32:37.932]         if (TRUE) {
[10:32:37.932]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:37.932]         }
[10:32:37.932]         else {
[10:32:37.932]             ...future.result["stdout"] <- base::list(NULL)
[10:32:37.932]         }
[10:32:37.932]         base::close(...future.stdout)
[10:32:37.932]         ...future.stdout <- NULL
[10:32:37.932]     }
[10:32:37.932]     ...future.result$conditions <- ...future.conditions
[10:32:37.932]     ...future.result$finished <- base::Sys.time()
[10:32:37.932]     ...future.result
[10:32:37.932] }
[10:32:37.934] requestCore(): workers = 2
[10:32:37.937] MulticoreFuture started
[10:32:37.937] result() for MulticoreFuture ...
[10:32:37.937] plan(): Setting new future strategy stack:
[10:32:37.938] List of future strategies:
[10:32:37.938] 1. sequential:
[10:32:37.938]    - args: function (..., envir = parent.frame())
[10:32:37.938]    - tweaked: FALSE
[10:32:37.938]    - call: NULL
[10:32:37.938] plan(): nbrOfWorkers() = 1
[10:32:37.940] plan(): Setting new future strategy stack:
[10:32:37.940] List of future strategies:
[10:32:37.940] 1. future:
[10:32:37.940]    - args: function (...)
[10:32:37.940]    - tweaked: FALSE
[10:32:37.940]    - call: plan(foo)
[10:32:37.941] plan(): nbrOfWorkers() = Inf
[10:32:37.942] result() for MulticoreFuture ...
[10:32:37.942] result() for MulticoreFuture ... done
[10:32:37.942] result() for MulticoreFuture ... done
[10:32:37.942] result() for MulticoreFuture ...
[10:32:37.942] result() for MulticoreFuture ... done
[1] 42
> 
> message("*** Future class - exception ... DONE")
*** Future class - exception ... DONE
> 
> message("*** Future class ... DONE")
*** Future class ... DONE
> 
> source("incl/end.R")
[10:32:37.943] plan(): Setting new future strategy stack:
[10:32:37.943] List of future strategies:
[10:32:37.943] 1. FutureStrategy:
[10:32:37.943]    - args: function (..., envir = parent.frame())
[10:32:37.943]    - tweaked: FALSE
[10:32:37.943]    - call: future::plan(oplan)
[10:32:37.944] plan(): nbrOfWorkers() = 1
> 
