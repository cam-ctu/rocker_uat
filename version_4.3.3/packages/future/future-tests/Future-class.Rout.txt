
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[13:36:20.981] plan(): Setting new future strategy stack:
[13:36:20.982] List of future strategies:
[13:36:20.982] 1. sequential:
[13:36:20.982]    - args: function (..., envir = parent.frame())
[13:36:20.982]    - tweaked: FALSE
[13:36:20.982]    - call: future::plan("sequential")
[13:36:20.995] plan(): nbrOfWorkers() = 1
> 
> message("*** Future class ...")
*** Future class ...
> 
> message("*** Future class - exception ...")
*** Future class - exception ...
> 
> f <- Future()
[13:36:21.006] getGlobalsAndPackages() ...
[13:36:21.007] 
[13:36:21.007] - globals: [0] <none>
[13:36:21.007] getGlobalsAndPackages() ... DONE
> print(f)
Future:
Label: ‘<none>’
Expression:
NULL
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 5ea7c1a0-3c78-7b84-7b57-f31976200d2a
Class: ‘Future’, ‘environment’
> 
> res <- tryCatch(value(f), error = identity)
[13:36:21.008] run() for ‘Future’ ...
[13:36:21.009] - state: ‘created’
[13:36:21.009] run() for ‘Future’ ... done
> print(res)
<simpleError: ‘future$lazy’ is not TRUE>
> stopifnot(inherits(res, "error"))
> 
> ## Invalid seed
> res <- tryCatch(f <- Future(42, seed = 1:2), error = identity)
> stopifnot(inherits(res, "error"))
> 
> ## When no packages are exported
> foo <- structure(function(...) { Future(1) }, class = "future")
> plan(foo)
[13:36:21.012] plan(): Setting new future strategy stack:
[13:36:21.012] List of future strategies:
[13:36:21.012] 1. future:
[13:36:21.012]    - args: function (...)
[13:36:21.012]    - tweaked: FALSE
[13:36:21.012]    - call: plan(foo)
[13:36:21.022] plan(): nbrOfWorkers() = Inf
> f <- Future()
[13:36:21.022] getGlobalsAndPackages() ...
[13:36:21.023] 
[13:36:21.023] - globals: [0] <none>
[13:36:21.023] getGlobalsAndPackages() ... DONE
> expr <- getExpression(f)
[13:36:21.023] Packages needed by the future expression (n = 0): <none>
[13:36:21.023] Packages needed by future strategies (n = 0): <none>
[13:36:21.024] {
[13:36:21.024]     {
[13:36:21.024]         {
[13:36:21.024]             ...future.startTime <- base::Sys.time()
[13:36:21.024]             {
[13:36:21.024]                 {
[13:36:21.024]                   {
[13:36:21.024]                     base::local({
[13:36:21.024]                       has_future <- base::requireNamespace("future", 
[13:36:21.024]                         quietly = TRUE)
[13:36:21.024]                       if (has_future) {
[13:36:21.024]                         ns <- base::getNamespace("future")
[13:36:21.024]                         version <- ns[[".package"]][["version"]]
[13:36:21.024]                         if (is.null(version)) 
[13:36:21.024]                           version <- utils::packageVersion("future")
[13:36:21.024]                       }
[13:36:21.024]                       else {
[13:36:21.024]                         version <- NULL
[13:36:21.024]                       }
[13:36:21.024]                       if (!has_future || version < "1.8.0") {
[13:36:21.024]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:21.024]                           "", base::R.version$version.string), 
[13:36:21.024]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:21.024]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:21.024]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:21.024]                             "release", "version")], collapse = " "), 
[13:36:21.024]                           hostname = base::Sys.info()[["nodename"]])
[13:36:21.024]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:21.024]                           info)
[13:36:21.024]                         info <- base::paste(info, collapse = "; ")
[13:36:21.024]                         if (!has_future) {
[13:36:21.024]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:21.024]                             info)
[13:36:21.024]                         }
[13:36:21.024]                         else {
[13:36:21.024]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:21.024]                             info, version)
[13:36:21.024]                         }
[13:36:21.024]                         base::stop(msg)
[13:36:21.024]                       }
[13:36:21.024]                     })
[13:36:21.024]                   }
[13:36:21.024]                   ...future.strategy.old <- future::plan("list")
[13:36:21.024]                   options(future.plan = NULL)
[13:36:21.024]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:21.024]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:21.024]                 }
[13:36:21.024]                 ...future.workdir <- getwd()
[13:36:21.024]             }
[13:36:21.024]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:21.024]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:21.024]         }
[13:36:21.024]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:21.024]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:21.024]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:21.024]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:21.024]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:21.024]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:21.024]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:21.024]             base::names(...future.oldOptions))
[13:36:21.024]     }
[13:36:21.024]     if (FALSE) {
[13:36:21.024]     }
[13:36:21.024]     else {
[13:36:21.024]         if (TRUE) {
[13:36:21.024]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:21.024]                 open = "w")
[13:36:21.024]         }
[13:36:21.024]         else {
[13:36:21.024]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:21.024]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:21.024]         }
[13:36:21.024]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:21.024]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:21.024]             base::sink(type = "output", split = FALSE)
[13:36:21.024]             base::close(...future.stdout)
[13:36:21.024]         }, add = TRUE)
[13:36:21.024]     }
[13:36:21.024]     ...future.frame <- base::sys.nframe()
[13:36:21.024]     ...future.conditions <- base::list()
[13:36:21.024]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:21.024]     if (FALSE) {
[13:36:21.024]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:21.024]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:21.024]     }
[13:36:21.024]     ...future.result <- base::tryCatch({
[13:36:21.024]         base::withCallingHandlers({
[13:36:21.024]             ...future.value <- base::withVisible(base::local(NULL))
[13:36:21.024]             future::FutureResult(value = ...future.value$value, 
[13:36:21.024]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:21.024]                   ...future.rng), globalenv = if (FALSE) 
[13:36:21.024]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:21.024]                     ...future.globalenv.names))
[13:36:21.024]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:21.024]         }, condition = base::local({
[13:36:21.024]             c <- base::c
[13:36:21.024]             inherits <- base::inherits
[13:36:21.024]             invokeRestart <- base::invokeRestart
[13:36:21.024]             length <- base::length
[13:36:21.024]             list <- base::list
[13:36:21.024]             seq.int <- base::seq.int
[13:36:21.024]             signalCondition <- base::signalCondition
[13:36:21.024]             sys.calls <- base::sys.calls
[13:36:21.024]             `[[` <- base::`[[`
[13:36:21.024]             `+` <- base::`+`
[13:36:21.024]             `<<-` <- base::`<<-`
[13:36:21.024]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:21.024]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:21.024]                   3L)]
[13:36:21.024]             }
[13:36:21.024]             function(cond) {
[13:36:21.024]                 is_error <- inherits(cond, "error")
[13:36:21.024]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:21.024]                   NULL)
[13:36:21.024]                 if (is_error) {
[13:36:21.024]                   sessionInformation <- function() {
[13:36:21.024]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:21.024]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:21.024]                       search = base::search(), system = base::Sys.info())
[13:36:21.024]                   }
[13:36:21.024]                   ...future.conditions[[length(...future.conditions) + 
[13:36:21.024]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:21.024]                     cond$call), session = sessionInformation(), 
[13:36:21.024]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:21.024]                   signalCondition(cond)
[13:36:21.024]                 }
[13:36:21.024]                 else if (!ignore && TRUE && inherits(cond, "condition")) {
[13:36:21.024]                   signal <- FALSE && inherits(cond, character(0))
[13:36:21.024]                   ...future.conditions[[length(...future.conditions) + 
[13:36:21.024]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:21.024]                   if (FALSE && !signal) {
[13:36:21.024]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:21.024]                     {
[13:36:21.024]                       inherits <- base::inherits
[13:36:21.024]                       invokeRestart <- base::invokeRestart
[13:36:21.024]                       is.null <- base::is.null
[13:36:21.024]                       muffled <- FALSE
[13:36:21.024]                       if (inherits(cond, "message")) {
[13:36:21.024]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:21.024]                         if (muffled) 
[13:36:21.024]                           invokeRestart("muffleMessage")
[13:36:21.024]                       }
[13:36:21.024]                       else if (inherits(cond, "warning")) {
[13:36:21.024]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:21.024]                         if (muffled) 
[13:36:21.024]                           invokeRestart("muffleWarning")
[13:36:21.024]                       }
[13:36:21.024]                       else if (inherits(cond, "condition")) {
[13:36:21.024]                         if (!is.null(pattern)) {
[13:36:21.024]                           computeRestarts <- base::computeRestarts
[13:36:21.024]                           grepl <- base::grepl
[13:36:21.024]                           restarts <- computeRestarts(cond)
[13:36:21.024]                           for (restart in restarts) {
[13:36:21.024]                             name <- restart$name
[13:36:21.024]                             if (is.null(name)) 
[13:36:21.024]                               next
[13:36:21.024]                             if (!grepl(pattern, name)) 
[13:36:21.024]                               next
[13:36:21.024]                             invokeRestart(restart)
[13:36:21.024]                             muffled <- TRUE
[13:36:21.024]                             break
[13:36:21.024]                           }
[13:36:21.024]                         }
[13:36:21.024]                       }
[13:36:21.024]                       invisible(muffled)
[13:36:21.024]                     }
[13:36:21.024]                     muffleCondition(cond, pattern = "^muffle")
[13:36:21.024]                   }
[13:36:21.024]                 }
[13:36:21.024]                 else {
[13:36:21.024]                   if (TRUE) {
[13:36:21.024]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:21.024]                     {
[13:36:21.024]                       inherits <- base::inherits
[13:36:21.024]                       invokeRestart <- base::invokeRestart
[13:36:21.024]                       is.null <- base::is.null
[13:36:21.024]                       muffled <- FALSE
[13:36:21.024]                       if (inherits(cond, "message")) {
[13:36:21.024]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:21.024]                         if (muffled) 
[13:36:21.024]                           invokeRestart("muffleMessage")
[13:36:21.024]                       }
[13:36:21.024]                       else if (inherits(cond, "warning")) {
[13:36:21.024]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:21.024]                         if (muffled) 
[13:36:21.024]                           invokeRestart("muffleWarning")
[13:36:21.024]                       }
[13:36:21.024]                       else if (inherits(cond, "condition")) {
[13:36:21.024]                         if (!is.null(pattern)) {
[13:36:21.024]                           computeRestarts <- base::computeRestarts
[13:36:21.024]                           grepl <- base::grepl
[13:36:21.024]                           restarts <- computeRestarts(cond)
[13:36:21.024]                           for (restart in restarts) {
[13:36:21.024]                             name <- restart$name
[13:36:21.024]                             if (is.null(name)) 
[13:36:21.024]                               next
[13:36:21.024]                             if (!grepl(pattern, name)) 
[13:36:21.024]                               next
[13:36:21.024]                             invokeRestart(restart)
[13:36:21.024]                             muffled <- TRUE
[13:36:21.024]                             break
[13:36:21.024]                           }
[13:36:21.024]                         }
[13:36:21.024]                       }
[13:36:21.024]                       invisible(muffled)
[13:36:21.024]                     }
[13:36:21.024]                     muffleCondition(cond, pattern = "^muffle")
[13:36:21.024]                   }
[13:36:21.024]                 }
[13:36:21.024]             }
[13:36:21.024]         }))
[13:36:21.024]     }, error = function(ex) {
[13:36:21.024]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:21.024]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:21.024]                 ...future.rng), started = ...future.startTime, 
[13:36:21.024]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:21.024]             version = "1.8"), class = "FutureResult")
[13:36:21.024]     }, finally = {
[13:36:21.024]         if (!identical(...future.workdir, getwd())) 
[13:36:21.024]             setwd(...future.workdir)
[13:36:21.024]         {
[13:36:21.024]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:21.024]                 ...future.oldOptions$nwarnings <- NULL
[13:36:21.024]             }
[13:36:21.024]             base::options(...future.oldOptions)
[13:36:21.024]             if (.Platform$OS.type == "windows") {
[13:36:21.024]                 old_names <- names(...future.oldEnvVars)
[13:36:21.024]                 envs <- base::Sys.getenv()
[13:36:21.024]                 names <- names(envs)
[13:36:21.024]                 common <- intersect(names, old_names)
[13:36:21.024]                 added <- setdiff(names, old_names)
[13:36:21.024]                 removed <- setdiff(old_names, names)
[13:36:21.024]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:21.024]                   envs[common]]
[13:36:21.024]                 NAMES <- toupper(changed)
[13:36:21.024]                 args <- list()
[13:36:21.024]                 for (kk in seq_along(NAMES)) {
[13:36:21.024]                   name <- changed[[kk]]
[13:36:21.024]                   NAME <- NAMES[[kk]]
[13:36:21.024]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:21.024]                     next
[13:36:21.024]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:21.024]                 }
[13:36:21.024]                 NAMES <- toupper(added)
[13:36:21.024]                 for (kk in seq_along(NAMES)) {
[13:36:21.024]                   name <- added[[kk]]
[13:36:21.024]                   NAME <- NAMES[[kk]]
[13:36:21.024]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:21.024]                     next
[13:36:21.024]                   args[[name]] <- ""
[13:36:21.024]                 }
[13:36:21.024]                 NAMES <- toupper(removed)
[13:36:21.024]                 for (kk in seq_along(NAMES)) {
[13:36:21.024]                   name <- removed[[kk]]
[13:36:21.024]                   NAME <- NAMES[[kk]]
[13:36:21.024]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:21.024]                     next
[13:36:21.024]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:21.024]                 }
[13:36:21.024]                 if (length(args) > 0) 
[13:36:21.024]                   base::do.call(base::Sys.setenv, args = args)
[13:36:21.024]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:21.024]             }
[13:36:21.024]             else {
[13:36:21.024]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:21.024]             }
[13:36:21.024]             {
[13:36:21.024]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:21.024]                   0L) {
[13:36:21.024]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:21.024]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:21.024]                   base::options(opts)
[13:36:21.024]                 }
[13:36:21.024]                 {
[13:36:21.024]                   NULL
[13:36:21.024]                   options(future.plan = NULL)
[13:36:21.024]                   if (is.na(NA_character_)) 
[13:36:21.024]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:21.024]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:21.024]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:21.024]                     .init = FALSE)
[13:36:21.024]                 }
[13:36:21.024]             }
[13:36:21.024]         }
[13:36:21.024]     })
[13:36:21.024]     if (TRUE) {
[13:36:21.024]         base::sink(type = "output", split = FALSE)
[13:36:21.024]         if (TRUE) {
[13:36:21.024]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:21.024]         }
[13:36:21.024]         else {
[13:36:21.024]             ...future.result["stdout"] <- base::list(NULL)
[13:36:21.024]         }
[13:36:21.024]         base::close(...future.stdout)
[13:36:21.024]         ...future.stdout <- NULL
[13:36:21.024]     }
[13:36:21.024]     ...future.result$conditions <- ...future.conditions
[13:36:21.024]     ...future.result$finished <- base::Sys.time()
[13:36:21.024]     ...future.result
[13:36:21.024] }
> print(expr)
{
    {
        {
            ...future.startTime <- base::Sys.time()
            {
                {
                  {
                    base::local({
                      has_future <- base::requireNamespace("future", 
                        quietly = TRUE)
                      if (has_future) {
                        ns <- base::getNamespace("future")
                        version <- ns[[".package"]][["version"]]
                        if (is.null(version)) 
                          version <- utils::packageVersion("future")
                      }
                      else {
                        version <- NULL
                      }
                      if (!has_future || version < "1.8.0") {
                        info <- base::c(r_version = base::gsub("R version ", 
                          "", base::R.version$version.string), 
                          platform = base::sprintf("%s (%s-bit)", 
                            base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
                          os = base::paste(base::Sys.info()[base::c("sysname", 
                            "release", "version")], collapse = " "), 
                          hostname = base::Sys.info()[["nodename"]])
                        info <- base::sprintf("%s: %s", base::names(info), 
                          info)
                        info <- base::paste(info, collapse = "; ")
                        if (!has_future) {
                          msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
                            info)
                        }
                        else {
                          msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
                            info, version)
                        }
                        base::stop(msg)
                      }
                    })
                  }
                  ...future.strategy.old <- future::plan("list")
                  options(future.plan = NULL)
                  Sys.unsetenv("R_FUTURE_PLAN")
                  future::plan("default", .cleanup = FALSE, .init = FALSE)
                }
                ...future.workdir <- getwd()
            }
            ...future.oldOptions <- base::as.list(base::.Options)
            ...future.oldEnvVars <- base::Sys.getenv()
        }
        base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
            future.globals.maxSize = NULL, future.globals.method = NULL, 
            future.globals.onMissing = NULL, future.globals.onReference = NULL, 
            future.globals.resolve = NULL, future.resolve.recursive = NULL, 
            future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
            future.stdout.windows.reencode = NULL, width = 80L)
        ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
            base::names(...future.oldOptions))
    }
    if (FALSE) {
    }
    else {
        if (TRUE) {
            ...future.stdout <- base::rawConnection(base::raw(0L), 
                open = "w")
        }
        else {
            ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
                windows = "NUL", "/dev/null"), open = "w")
        }
        base::sink(...future.stdout, type = "output", split = FALSE)
        base::on.exit(if (!base::is.null(...future.stdout)) {
            base::sink(type = "output", split = FALSE)
            base::close(...future.stdout)
        }, add = TRUE)
    }
    ...future.frame <- base::sys.nframe()
    ...future.conditions <- base::list()
    ...future.rng <- base::globalenv()$.Random.seed
    if (FALSE) {
        ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
            "...future.value", "...future.globalenv.names", ".Random.seed")
    }
    ...future.result <- base::tryCatch({
        base::withCallingHandlers({
            ...future.value <- base::withVisible(base::local(NULL))
            future::FutureResult(value = ...future.value$value, 
                visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
                  ...future.rng), globalenv = if (FALSE) 
                  list(added = base::setdiff(base::names(base::.GlobalEnv), 
                    ...future.globalenv.names))
                else NULL, started = ...future.startTime, version = "1.8")
        }, condition = base::local({
            c <- base::c
            inherits <- base::inherits
            invokeRestart <- base::invokeRestart
            length <- base::length
            list <- base::list
            seq.int <- base::seq.int
            signalCondition <- base::signalCondition
            sys.calls <- base::sys.calls
            `[[` <- base::`[[`
            `+` <- base::`+`
            `<<-` <- base::`<<-`
            sysCalls <- function(calls = sys.calls(), from = 1L) {
                calls[seq.int(from = from + 12L, to = length(calls) - 
                  3L)]
            }
            function(cond) {
                is_error <- inherits(cond, "error")
                ignore <- !is_error && !is.null(NULL) && inherits(cond, 
                  NULL)
                if (is_error) {
                  sessionInformation <- function() {
                    list(r = base::R.Version(), locale = base::Sys.getlocale(), 
                      rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
                      search = base::search(), system = base::Sys.info())
                  }
                  ...future.conditions[[length(...future.conditions) + 
                    1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
                    cond$call), session = sessionInformation(), 
                    timestamp = base::Sys.time(), signaled = 0L)
                  signalCondition(cond)
                }
                else if (!ignore && TRUE && inherits(cond, "condition")) {
                  signal <- FALSE && inherits(cond, character(0))
                  ...future.conditions[[length(...future.conditions) + 
                    1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
                  if (FALSE && !signal) {
                    muffleCondition <- function (cond, pattern = "^muffle") 
                    {
                      inherits <- base::inherits
                      invokeRestart <- base::invokeRestart
                      is.null <- base::is.null
                      muffled <- FALSE
                      if (inherits(cond, "message")) {
                        muffled <- grepl(pattern, "muffleMessage")
                        if (muffled) 
                          invokeRestart("muffleMessage")
                      }
                      else if (inherits(cond, "warning")) {
                        muffled <- grepl(pattern, "muffleWarning")
                        if (muffled) 
                          invokeRestart("muffleWarning")
                      }
                      else if (inherits(cond, "condition")) {
                        if (!is.null(pattern)) {
                          computeRestarts <- base::computeRestarts
                          grepl <- base::grepl
                          restarts <- computeRestarts(cond)
                          for (restart in restarts) {
                            name <- restart$name
                            if (is.null(name)) 
                              next
                            if (!grepl(pattern, name)) 
                              next
                            invokeRestart(restart)
                            muffled <- TRUE
                            break
                          }
                        }
                      }
                      invisible(muffled)
                    }
                    muffleCondition(cond, pattern = "^muffle")
                  }
                }
                else {
                  if (TRUE) {
                    muffleCondition <- function (cond, pattern = "^muffle") 
                    {
                      inherits <- base::inherits
                      invokeRestart <- base::invokeRestart
                      is.null <- base::is.null
                      muffled <- FALSE
                      if (inherits(cond, "message")) {
                        muffled <- grepl(pattern, "muffleMessage")
                        if (muffled) 
                          invokeRestart("muffleMessage")
                      }
                      else if (inherits(cond, "warning")) {
                        muffled <- grepl(pattern, "muffleWarning")
                        if (muffled) 
                          invokeRestart("muffleWarning")
                      }
                      else if (inherits(cond, "condition")) {
                        if (!is.null(pattern)) {
                          computeRestarts <- base::computeRestarts
                          grepl <- base::grepl
                          restarts <- computeRestarts(cond)
                          for (restart in restarts) {
                            name <- restart$name
                            if (is.null(name)) 
                              next
                            if (!grepl(pattern, name)) 
                              next
                            invokeRestart(restart)
                            muffled <- TRUE
                            break
                          }
                        }
                      }
                      invisible(muffled)
                    }
                    muffleCondition(cond, pattern = "^muffle")
                  }
                }
            }
        }))
    }, error = function(ex) {
        base::structure(base::list(value = NULL, visible = NULL, 
            conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
                ...future.rng), started = ...future.startTime, 
            finished = Sys.time(), session_uuid = NA_character_, 
            version = "1.8"), class = "FutureResult")
    }, finally = {
        if (!identical(...future.workdir, getwd())) 
            setwd(...future.workdir)
        {
            if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
                ...future.oldOptions$nwarnings <- NULL
            }
            base::options(...future.oldOptions)
            if (.Platform$OS.type == "windows") {
                old_names <- names(...future.oldEnvVars)
                envs <- base::Sys.getenv()
                names <- names(envs)
                common <- intersect(names, old_names)
                added <- setdiff(names, old_names)
                removed <- setdiff(old_names, names)
                changed <- common[...future.oldEnvVars[common] != 
                  envs[common]]
                NAMES <- toupper(changed)
                args <- list()
                for (kk in seq_along(NAMES)) {
                  name <- changed[[kk]]
                  NAME <- NAMES[[kk]]
                  if (name != NAME && is.element(NAME, old_names)) 
                    next
                  args[[name]] <- ...future.oldEnvVars[[name]]
                }
                NAMES <- toupper(added)
                for (kk in seq_along(NAMES)) {
                  name <- added[[kk]]
                  NAME <- NAMES[[kk]]
                  if (name != NAME && is.element(NAME, old_names)) 
                    next
                  args[[name]] <- ""
                }
                NAMES <- toupper(removed)
                for (kk in seq_along(NAMES)) {
                  name <- removed[[kk]]
                  NAME <- NAMES[[kk]]
                  if (name != NAME && is.element(NAME, old_names)) 
                    next
                  args[[name]] <- ...future.oldEnvVars[[name]]
                }
                if (length(args) > 0) 
                  base::do.call(base::Sys.setenv, args = args)
                args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
            }
            else {
                base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
            }
            {
                if (base::length(...future.futureOptionsAdded) > 
                  0L) {
                  opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
                  base::names(opts) <- ...future.futureOptionsAdded
                  base::options(opts)
                }
                {
                  NULL
                  options(future.plan = NULL)
                  if (is.na(NA_character_)) 
                    Sys.unsetenv("R_FUTURE_PLAN")
                  else Sys.setenv(R_FUTURE_PLAN = NA_character_)
                  future::plan(...future.strategy.old, .cleanup = FALSE, 
                    .init = FALSE)
                }
            }
        }
    })
    if (TRUE) {
        base::sink(type = "output", split = FALSE)
        if (TRUE) {
            ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
        }
        else {
            ...future.result["stdout"] <- base::list(NULL)
        }
        base::close(...future.stdout)
        ...future.stdout <- NULL
    }
    ...future.result$conditions <- ...future.conditions
    ...future.result$finished <- base::Sys.time()
    ...future.result
}
> stopifnot(is.call(expr))
> 
> clazzes <- list(
+   sequential = SequentialFuture,
+   multisession = function(...) MultisessionFuture(..., workers = 2L),
+   sequential = SequentialFuture
+ )
> if (supportsMulticore()) {
+   clazzes$multicore = function(...) MulticoreFuture(..., workers = 2L)
+ }
> 
> for (clazz in clazzes) {
+   ## Calling run() more than once
+   f <- clazz({ 42L })
+   print(f)
+   run(f)
+   res <- tryCatch(run(f), error = identity)
+   stopifnot(inherits(res, "error"))
+   v <- value(f)
+   print(v)
+   stopifnot(v == 42L)
+ 
+   ## Call value() without run()
+   f <- clazz({ 42L })
+   v <- value(f)
+   print(v)
+   stopifnot(v == 42L)
+ }
[13:36:21.036] getGlobalsAndPackages() ...
[13:36:21.036] Searching for globals...
[13:36:21.039] - globals found: [1] ‘{’
[13:36:21.039] Searching for globals ... DONE
[13:36:21.039] Resolving globals: FALSE
[13:36:21.040] 
[13:36:21.040] 
[13:36:21.040] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 5ea7c1a0-3c78-7b84-7b57-f31976200d2a
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:21.041] Packages needed by the future expression (n = 0): <none>
[13:36:21.041] Packages needed by future strategies (n = 0): <none>
[13:36:21.041] {
[13:36:21.041]     {
[13:36:21.041]         {
[13:36:21.041]             ...future.startTime <- base::Sys.time()
[13:36:21.041]             {
[13:36:21.041]                 {
[13:36:21.041]                   {
[13:36:21.041]                     base::local({
[13:36:21.041]                       has_future <- base::requireNamespace("future", 
[13:36:21.041]                         quietly = TRUE)
[13:36:21.041]                       if (has_future) {
[13:36:21.041]                         ns <- base::getNamespace("future")
[13:36:21.041]                         version <- ns[[".package"]][["version"]]
[13:36:21.041]                         if (is.null(version)) 
[13:36:21.041]                           version <- utils::packageVersion("future")
[13:36:21.041]                       }
[13:36:21.041]                       else {
[13:36:21.041]                         version <- NULL
[13:36:21.041]                       }
[13:36:21.041]                       if (!has_future || version < "1.8.0") {
[13:36:21.041]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:21.041]                           "", base::R.version$version.string), 
[13:36:21.041]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:21.041]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:21.041]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:21.041]                             "release", "version")], collapse = " "), 
[13:36:21.041]                           hostname = base::Sys.info()[["nodename"]])
[13:36:21.041]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:21.041]                           info)
[13:36:21.041]                         info <- base::paste(info, collapse = "; ")
[13:36:21.041]                         if (!has_future) {
[13:36:21.041]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:21.041]                             info)
[13:36:21.041]                         }
[13:36:21.041]                         else {
[13:36:21.041]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:21.041]                             info, version)
[13:36:21.041]                         }
[13:36:21.041]                         base::stop(msg)
[13:36:21.041]                       }
[13:36:21.041]                     })
[13:36:21.041]                   }
[13:36:21.041]                   ...future.strategy.old <- future::plan("list")
[13:36:21.041]                   options(future.plan = NULL)
[13:36:21.041]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:21.041]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:21.041]                 }
[13:36:21.041]                 ...future.workdir <- getwd()
[13:36:21.041]             }
[13:36:21.041]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:21.041]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:21.041]         }
[13:36:21.041]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:21.041]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:21.041]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:21.041]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:21.041]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:21.041]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:21.041]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:21.041]             base::names(...future.oldOptions))
[13:36:21.041]     }
[13:36:21.041]     if (FALSE) {
[13:36:21.041]     }
[13:36:21.041]     else {
[13:36:21.041]         if (TRUE) {
[13:36:21.041]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:21.041]                 open = "w")
[13:36:21.041]         }
[13:36:21.041]         else {
[13:36:21.041]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:21.041]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:21.041]         }
[13:36:21.041]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:21.041]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:21.041]             base::sink(type = "output", split = FALSE)
[13:36:21.041]             base::close(...future.stdout)
[13:36:21.041]         }, add = TRUE)
[13:36:21.041]     }
[13:36:21.041]     ...future.frame <- base::sys.nframe()
[13:36:21.041]     ...future.conditions <- base::list()
[13:36:21.041]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:21.041]     if (FALSE) {
[13:36:21.041]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:21.041]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:21.041]     }
[13:36:21.041]     ...future.result <- base::tryCatch({
[13:36:21.041]         base::withCallingHandlers({
[13:36:21.041]             ...future.value <- base::withVisible(base::local({
[13:36:21.041]                 42L
[13:36:21.041]             }))
[13:36:21.041]             future::FutureResult(value = ...future.value$value, 
[13:36:21.041]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:21.041]                   ...future.rng), globalenv = if (FALSE) 
[13:36:21.041]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:21.041]                     ...future.globalenv.names))
[13:36:21.041]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:21.041]         }, condition = base::local({
[13:36:21.041]             c <- base::c
[13:36:21.041]             inherits <- base::inherits
[13:36:21.041]             invokeRestart <- base::invokeRestart
[13:36:21.041]             length <- base::length
[13:36:21.041]             list <- base::list
[13:36:21.041]             seq.int <- base::seq.int
[13:36:21.041]             signalCondition <- base::signalCondition
[13:36:21.041]             sys.calls <- base::sys.calls
[13:36:21.041]             `[[` <- base::`[[`
[13:36:21.041]             `+` <- base::`+`
[13:36:21.041]             `<<-` <- base::`<<-`
[13:36:21.041]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:21.041]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:21.041]                   3L)]
[13:36:21.041]             }
[13:36:21.041]             function(cond) {
[13:36:21.041]                 is_error <- inherits(cond, "error")
[13:36:21.041]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:21.041]                   NULL)
[13:36:21.041]                 if (is_error) {
[13:36:21.041]                   sessionInformation <- function() {
[13:36:21.041]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:21.041]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:21.041]                       search = base::search(), system = base::Sys.info())
[13:36:21.041]                   }
[13:36:21.041]                   ...future.conditions[[length(...future.conditions) + 
[13:36:21.041]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:21.041]                     cond$call), session = sessionInformation(), 
[13:36:21.041]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:21.041]                   signalCondition(cond)
[13:36:21.041]                 }
[13:36:21.041]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:21.041]                 "immediateCondition"))) {
[13:36:21.041]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:21.041]                   ...future.conditions[[length(...future.conditions) + 
[13:36:21.041]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:21.041]                   if (TRUE && !signal) {
[13:36:21.041]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:21.041]                     {
[13:36:21.041]                       inherits <- base::inherits
[13:36:21.041]                       invokeRestart <- base::invokeRestart
[13:36:21.041]                       is.null <- base::is.null
[13:36:21.041]                       muffled <- FALSE
[13:36:21.041]                       if (inherits(cond, "message")) {
[13:36:21.041]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:21.041]                         if (muffled) 
[13:36:21.041]                           invokeRestart("muffleMessage")
[13:36:21.041]                       }
[13:36:21.041]                       else if (inherits(cond, "warning")) {
[13:36:21.041]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:21.041]                         if (muffled) 
[13:36:21.041]                           invokeRestart("muffleWarning")
[13:36:21.041]                       }
[13:36:21.041]                       else if (inherits(cond, "condition")) {
[13:36:21.041]                         if (!is.null(pattern)) {
[13:36:21.041]                           computeRestarts <- base::computeRestarts
[13:36:21.041]                           grepl <- base::grepl
[13:36:21.041]                           restarts <- computeRestarts(cond)
[13:36:21.041]                           for (restart in restarts) {
[13:36:21.041]                             name <- restart$name
[13:36:21.041]                             if (is.null(name)) 
[13:36:21.041]                               next
[13:36:21.041]                             if (!grepl(pattern, name)) 
[13:36:21.041]                               next
[13:36:21.041]                             invokeRestart(restart)
[13:36:21.041]                             muffled <- TRUE
[13:36:21.041]                             break
[13:36:21.041]                           }
[13:36:21.041]                         }
[13:36:21.041]                       }
[13:36:21.041]                       invisible(muffled)
[13:36:21.041]                     }
[13:36:21.041]                     muffleCondition(cond, pattern = "^muffle")
[13:36:21.041]                   }
[13:36:21.041]                 }
[13:36:21.041]                 else {
[13:36:21.041]                   if (TRUE) {
[13:36:21.041]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:21.041]                     {
[13:36:21.041]                       inherits <- base::inherits
[13:36:21.041]                       invokeRestart <- base::invokeRestart
[13:36:21.041]                       is.null <- base::is.null
[13:36:21.041]                       muffled <- FALSE
[13:36:21.041]                       if (inherits(cond, "message")) {
[13:36:21.041]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:21.041]                         if (muffled) 
[13:36:21.041]                           invokeRestart("muffleMessage")
[13:36:21.041]                       }
[13:36:21.041]                       else if (inherits(cond, "warning")) {
[13:36:21.041]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:21.041]                         if (muffled) 
[13:36:21.041]                           invokeRestart("muffleWarning")
[13:36:21.041]                       }
[13:36:21.041]                       else if (inherits(cond, "condition")) {
[13:36:21.041]                         if (!is.null(pattern)) {
[13:36:21.041]                           computeRestarts <- base::computeRestarts
[13:36:21.041]                           grepl <- base::grepl
[13:36:21.041]                           restarts <- computeRestarts(cond)
[13:36:21.041]                           for (restart in restarts) {
[13:36:21.041]                             name <- restart$name
[13:36:21.041]                             if (is.null(name)) 
[13:36:21.041]                               next
[13:36:21.041]                             if (!grepl(pattern, name)) 
[13:36:21.041]                               next
[13:36:21.041]                             invokeRestart(restart)
[13:36:21.041]                             muffled <- TRUE
[13:36:21.041]                             break
[13:36:21.041]                           }
[13:36:21.041]                         }
[13:36:21.041]                       }
[13:36:21.041]                       invisible(muffled)
[13:36:21.041]                     }
[13:36:21.041]                     muffleCondition(cond, pattern = "^muffle")
[13:36:21.041]                   }
[13:36:21.041]                 }
[13:36:21.041]             }
[13:36:21.041]         }))
[13:36:21.041]     }, error = function(ex) {
[13:36:21.041]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:21.041]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:21.041]                 ...future.rng), started = ...future.startTime, 
[13:36:21.041]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:21.041]             version = "1.8"), class = "FutureResult")
[13:36:21.041]     }, finally = {
[13:36:21.041]         if (!identical(...future.workdir, getwd())) 
[13:36:21.041]             setwd(...future.workdir)
[13:36:21.041]         {
[13:36:21.041]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:21.041]                 ...future.oldOptions$nwarnings <- NULL
[13:36:21.041]             }
[13:36:21.041]             base::options(...future.oldOptions)
[13:36:21.041]             if (.Platform$OS.type == "windows") {
[13:36:21.041]                 old_names <- names(...future.oldEnvVars)
[13:36:21.041]                 envs <- base::Sys.getenv()
[13:36:21.041]                 names <- names(envs)
[13:36:21.041]                 common <- intersect(names, old_names)
[13:36:21.041]                 added <- setdiff(names, old_names)
[13:36:21.041]                 removed <- setdiff(old_names, names)
[13:36:21.041]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:21.041]                   envs[common]]
[13:36:21.041]                 NAMES <- toupper(changed)
[13:36:21.041]                 args <- list()
[13:36:21.041]                 for (kk in seq_along(NAMES)) {
[13:36:21.041]                   name <- changed[[kk]]
[13:36:21.041]                   NAME <- NAMES[[kk]]
[13:36:21.041]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:21.041]                     next
[13:36:21.041]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:21.041]                 }
[13:36:21.041]                 NAMES <- toupper(added)
[13:36:21.041]                 for (kk in seq_along(NAMES)) {
[13:36:21.041]                   name <- added[[kk]]
[13:36:21.041]                   NAME <- NAMES[[kk]]
[13:36:21.041]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:21.041]                     next
[13:36:21.041]                   args[[name]] <- ""
[13:36:21.041]                 }
[13:36:21.041]                 NAMES <- toupper(removed)
[13:36:21.041]                 for (kk in seq_along(NAMES)) {
[13:36:21.041]                   name <- removed[[kk]]
[13:36:21.041]                   NAME <- NAMES[[kk]]
[13:36:21.041]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:21.041]                     next
[13:36:21.041]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:21.041]                 }
[13:36:21.041]                 if (length(args) > 0) 
[13:36:21.041]                   base::do.call(base::Sys.setenv, args = args)
[13:36:21.041]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:21.041]             }
[13:36:21.041]             else {
[13:36:21.041]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:21.041]             }
[13:36:21.041]             {
[13:36:21.041]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:21.041]                   0L) {
[13:36:21.041]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:21.041]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:21.041]                   base::options(opts)
[13:36:21.041]                 }
[13:36:21.041]                 {
[13:36:21.041]                   {
[13:36:21.041]                     NULL
[13:36:21.041]                     RNGkind("Mersenne-Twister")
[13:36:21.041]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:21.041]                       inherits = FALSE)
[13:36:21.041]                   }
[13:36:21.041]                   options(future.plan = NULL)
[13:36:21.041]                   if (is.na(NA_character_)) 
[13:36:21.041]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:21.041]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:21.041]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:21.041]                     .init = FALSE)
[13:36:21.041]                 }
[13:36:21.041]             }
[13:36:21.041]         }
[13:36:21.041]     })
[13:36:21.041]     if (TRUE) {
[13:36:21.041]         base::sink(type = "output", split = FALSE)
[13:36:21.041]         if (TRUE) {
[13:36:21.041]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:21.041]         }
[13:36:21.041]         else {
[13:36:21.041]             ...future.result["stdout"] <- base::list(NULL)
[13:36:21.041]         }
[13:36:21.041]         base::close(...future.stdout)
[13:36:21.041]         ...future.stdout <- NULL
[13:36:21.041]     }
[13:36:21.041]     ...future.result$conditions <- ...future.conditions
[13:36:21.041]     ...future.result$finished <- base::Sys.time()
[13:36:21.041]     ...future.result
[13:36:21.041] }
[13:36:21.043] plan(): Setting new future strategy stack:
[13:36:21.043] List of future strategies:
[13:36:21.043] 1. sequential:
[13:36:21.043]    - args: function (..., envir = parent.frame())
[13:36:21.043]    - tweaked: FALSE
[13:36:21.043]    - call: NULL
[13:36:21.044] plan(): nbrOfWorkers() = 1
[13:36:21.045] plan(): Setting new future strategy stack:
[13:36:21.045] List of future strategies:
[13:36:21.045] 1. future:
[13:36:21.045]    - args: function (...)
[13:36:21.045]    - tweaked: FALSE
[13:36:21.045]    - call: plan(foo)
[13:36:21.045] plan(): nbrOfWorkers() = Inf
[13:36:21.045] SequentialFuture started (and completed)
[1] 42
[13:36:21.046] getGlobalsAndPackages() ...
[13:36:21.046] Searching for globals...
[13:36:21.047] - globals found: [1] ‘{’
[13:36:21.047] Searching for globals ... DONE
[13:36:21.047] Resolving globals: FALSE
[13:36:21.047] 
[13:36:21.047] 
[13:36:21.047] getGlobalsAndPackages() ... DONE
[13:36:21.048] Packages needed by the future expression (n = 0): <none>
[13:36:21.048] Packages needed by future strategies (n = 0): <none>
[13:36:21.048] {
[13:36:21.048]     {
[13:36:21.048]         {
[13:36:21.048]             ...future.startTime <- base::Sys.time()
[13:36:21.048]             {
[13:36:21.048]                 {
[13:36:21.048]                   {
[13:36:21.048]                     base::local({
[13:36:21.048]                       has_future <- base::requireNamespace("future", 
[13:36:21.048]                         quietly = TRUE)
[13:36:21.048]                       if (has_future) {
[13:36:21.048]                         ns <- base::getNamespace("future")
[13:36:21.048]                         version <- ns[[".package"]][["version"]]
[13:36:21.048]                         if (is.null(version)) 
[13:36:21.048]                           version <- utils::packageVersion("future")
[13:36:21.048]                       }
[13:36:21.048]                       else {
[13:36:21.048]                         version <- NULL
[13:36:21.048]                       }
[13:36:21.048]                       if (!has_future || version < "1.8.0") {
[13:36:21.048]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:21.048]                           "", base::R.version$version.string), 
[13:36:21.048]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:21.048]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:21.048]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:21.048]                             "release", "version")], collapse = " "), 
[13:36:21.048]                           hostname = base::Sys.info()[["nodename"]])
[13:36:21.048]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:21.048]                           info)
[13:36:21.048]                         info <- base::paste(info, collapse = "; ")
[13:36:21.048]                         if (!has_future) {
[13:36:21.048]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:21.048]                             info)
[13:36:21.048]                         }
[13:36:21.048]                         else {
[13:36:21.048]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:21.048]                             info, version)
[13:36:21.048]                         }
[13:36:21.048]                         base::stop(msg)
[13:36:21.048]                       }
[13:36:21.048]                     })
[13:36:21.048]                   }
[13:36:21.048]                   ...future.strategy.old <- future::plan("list")
[13:36:21.048]                   options(future.plan = NULL)
[13:36:21.048]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:21.048]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:21.048]                 }
[13:36:21.048]                 ...future.workdir <- getwd()
[13:36:21.048]             }
[13:36:21.048]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:21.048]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:21.048]         }
[13:36:21.048]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:21.048]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:21.048]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:21.048]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:21.048]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:21.048]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:21.048]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:21.048]             base::names(...future.oldOptions))
[13:36:21.048]     }
[13:36:21.048]     if (FALSE) {
[13:36:21.048]     }
[13:36:21.048]     else {
[13:36:21.048]         if (TRUE) {
[13:36:21.048]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:21.048]                 open = "w")
[13:36:21.048]         }
[13:36:21.048]         else {
[13:36:21.048]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:21.048]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:21.048]         }
[13:36:21.048]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:21.048]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:21.048]             base::sink(type = "output", split = FALSE)
[13:36:21.048]             base::close(...future.stdout)
[13:36:21.048]         }, add = TRUE)
[13:36:21.048]     }
[13:36:21.048]     ...future.frame <- base::sys.nframe()
[13:36:21.048]     ...future.conditions <- base::list()
[13:36:21.048]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:21.048]     if (FALSE) {
[13:36:21.048]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:21.048]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:21.048]     }
[13:36:21.048]     ...future.result <- base::tryCatch({
[13:36:21.048]         base::withCallingHandlers({
[13:36:21.048]             ...future.value <- base::withVisible(base::local({
[13:36:21.048]                 42L
[13:36:21.048]             }))
[13:36:21.048]             future::FutureResult(value = ...future.value$value, 
[13:36:21.048]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:21.048]                   ...future.rng), globalenv = if (FALSE) 
[13:36:21.048]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:21.048]                     ...future.globalenv.names))
[13:36:21.048]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:21.048]         }, condition = base::local({
[13:36:21.048]             c <- base::c
[13:36:21.048]             inherits <- base::inherits
[13:36:21.048]             invokeRestart <- base::invokeRestart
[13:36:21.048]             length <- base::length
[13:36:21.048]             list <- base::list
[13:36:21.048]             seq.int <- base::seq.int
[13:36:21.048]             signalCondition <- base::signalCondition
[13:36:21.048]             sys.calls <- base::sys.calls
[13:36:21.048]             `[[` <- base::`[[`
[13:36:21.048]             `+` <- base::`+`
[13:36:21.048]             `<<-` <- base::`<<-`
[13:36:21.048]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:21.048]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:21.048]                   3L)]
[13:36:21.048]             }
[13:36:21.048]             function(cond) {
[13:36:21.048]                 is_error <- inherits(cond, "error")
[13:36:21.048]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:21.048]                   NULL)
[13:36:21.048]                 if (is_error) {
[13:36:21.048]                   sessionInformation <- function() {
[13:36:21.048]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:21.048]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:21.048]                       search = base::search(), system = base::Sys.info())
[13:36:21.048]                   }
[13:36:21.048]                   ...future.conditions[[length(...future.conditions) + 
[13:36:21.048]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:21.048]                     cond$call), session = sessionInformation(), 
[13:36:21.048]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:21.048]                   signalCondition(cond)
[13:36:21.048]                 }
[13:36:21.048]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:21.048]                 "immediateCondition"))) {
[13:36:21.048]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:21.048]                   ...future.conditions[[length(...future.conditions) + 
[13:36:21.048]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:21.048]                   if (TRUE && !signal) {
[13:36:21.048]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:21.048]                     {
[13:36:21.048]                       inherits <- base::inherits
[13:36:21.048]                       invokeRestart <- base::invokeRestart
[13:36:21.048]                       is.null <- base::is.null
[13:36:21.048]                       muffled <- FALSE
[13:36:21.048]                       if (inherits(cond, "message")) {
[13:36:21.048]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:21.048]                         if (muffled) 
[13:36:21.048]                           invokeRestart("muffleMessage")
[13:36:21.048]                       }
[13:36:21.048]                       else if (inherits(cond, "warning")) {
[13:36:21.048]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:21.048]                         if (muffled) 
[13:36:21.048]                           invokeRestart("muffleWarning")
[13:36:21.048]                       }
[13:36:21.048]                       else if (inherits(cond, "condition")) {
[13:36:21.048]                         if (!is.null(pattern)) {
[13:36:21.048]                           computeRestarts <- base::computeRestarts
[13:36:21.048]                           grepl <- base::grepl
[13:36:21.048]                           restarts <- computeRestarts(cond)
[13:36:21.048]                           for (restart in restarts) {
[13:36:21.048]                             name <- restart$name
[13:36:21.048]                             if (is.null(name)) 
[13:36:21.048]                               next
[13:36:21.048]                             if (!grepl(pattern, name)) 
[13:36:21.048]                               next
[13:36:21.048]                             invokeRestart(restart)
[13:36:21.048]                             muffled <- TRUE
[13:36:21.048]                             break
[13:36:21.048]                           }
[13:36:21.048]                         }
[13:36:21.048]                       }
[13:36:21.048]                       invisible(muffled)
[13:36:21.048]                     }
[13:36:21.048]                     muffleCondition(cond, pattern = "^muffle")
[13:36:21.048]                   }
[13:36:21.048]                 }
[13:36:21.048]                 else {
[13:36:21.048]                   if (TRUE) {
[13:36:21.048]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:21.048]                     {
[13:36:21.048]                       inherits <- base::inherits
[13:36:21.048]                       invokeRestart <- base::invokeRestart
[13:36:21.048]                       is.null <- base::is.null
[13:36:21.048]                       muffled <- FALSE
[13:36:21.048]                       if (inherits(cond, "message")) {
[13:36:21.048]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:21.048]                         if (muffled) 
[13:36:21.048]                           invokeRestart("muffleMessage")
[13:36:21.048]                       }
[13:36:21.048]                       else if (inherits(cond, "warning")) {
[13:36:21.048]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:21.048]                         if (muffled) 
[13:36:21.048]                           invokeRestart("muffleWarning")
[13:36:21.048]                       }
[13:36:21.048]                       else if (inherits(cond, "condition")) {
[13:36:21.048]                         if (!is.null(pattern)) {
[13:36:21.048]                           computeRestarts <- base::computeRestarts
[13:36:21.048]                           grepl <- base::grepl
[13:36:21.048]                           restarts <- computeRestarts(cond)
[13:36:21.048]                           for (restart in restarts) {
[13:36:21.048]                             name <- restart$name
[13:36:21.048]                             if (is.null(name)) 
[13:36:21.048]                               next
[13:36:21.048]                             if (!grepl(pattern, name)) 
[13:36:21.048]                               next
[13:36:21.048]                             invokeRestart(restart)
[13:36:21.048]                             muffled <- TRUE
[13:36:21.048]                             break
[13:36:21.048]                           }
[13:36:21.048]                         }
[13:36:21.048]                       }
[13:36:21.048]                       invisible(muffled)
[13:36:21.048]                     }
[13:36:21.048]                     muffleCondition(cond, pattern = "^muffle")
[13:36:21.048]                   }
[13:36:21.048]                 }
[13:36:21.048]             }
[13:36:21.048]         }))
[13:36:21.048]     }, error = function(ex) {
[13:36:21.048]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:21.048]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:21.048]                 ...future.rng), started = ...future.startTime, 
[13:36:21.048]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:21.048]             version = "1.8"), class = "FutureResult")
[13:36:21.048]     }, finally = {
[13:36:21.048]         if (!identical(...future.workdir, getwd())) 
[13:36:21.048]             setwd(...future.workdir)
[13:36:21.048]         {
[13:36:21.048]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:21.048]                 ...future.oldOptions$nwarnings <- NULL
[13:36:21.048]             }
[13:36:21.048]             base::options(...future.oldOptions)
[13:36:21.048]             if (.Platform$OS.type == "windows") {
[13:36:21.048]                 old_names <- names(...future.oldEnvVars)
[13:36:21.048]                 envs <- base::Sys.getenv()
[13:36:21.048]                 names <- names(envs)
[13:36:21.048]                 common <- intersect(names, old_names)
[13:36:21.048]                 added <- setdiff(names, old_names)
[13:36:21.048]                 removed <- setdiff(old_names, names)
[13:36:21.048]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:21.048]                   envs[common]]
[13:36:21.048]                 NAMES <- toupper(changed)
[13:36:21.048]                 args <- list()
[13:36:21.048]                 for (kk in seq_along(NAMES)) {
[13:36:21.048]                   name <- changed[[kk]]
[13:36:21.048]                   NAME <- NAMES[[kk]]
[13:36:21.048]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:21.048]                     next
[13:36:21.048]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:21.048]                 }
[13:36:21.048]                 NAMES <- toupper(added)
[13:36:21.048]                 for (kk in seq_along(NAMES)) {
[13:36:21.048]                   name <- added[[kk]]
[13:36:21.048]                   NAME <- NAMES[[kk]]
[13:36:21.048]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:21.048]                     next
[13:36:21.048]                   args[[name]] <- ""
[13:36:21.048]                 }
[13:36:21.048]                 NAMES <- toupper(removed)
[13:36:21.048]                 for (kk in seq_along(NAMES)) {
[13:36:21.048]                   name <- removed[[kk]]
[13:36:21.048]                   NAME <- NAMES[[kk]]
[13:36:21.048]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:21.048]                     next
[13:36:21.048]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:21.048]                 }
[13:36:21.048]                 if (length(args) > 0) 
[13:36:21.048]                   base::do.call(base::Sys.setenv, args = args)
[13:36:21.048]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:21.048]             }
[13:36:21.048]             else {
[13:36:21.048]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:21.048]             }
[13:36:21.048]             {
[13:36:21.048]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:21.048]                   0L) {
[13:36:21.048]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:21.048]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:21.048]                   base::options(opts)
[13:36:21.048]                 }
[13:36:21.048]                 {
[13:36:21.048]                   {
[13:36:21.048]                     NULL
[13:36:21.048]                     RNGkind("Mersenne-Twister")
[13:36:21.048]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:21.048]                       inherits = FALSE)
[13:36:21.048]                   }
[13:36:21.048]                   options(future.plan = NULL)
[13:36:21.048]                   if (is.na(NA_character_)) 
[13:36:21.048]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:21.048]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:21.048]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:21.048]                     .init = FALSE)
[13:36:21.048]                 }
[13:36:21.048]             }
[13:36:21.048]         }
[13:36:21.048]     })
[13:36:21.048]     if (TRUE) {
[13:36:21.048]         base::sink(type = "output", split = FALSE)
[13:36:21.048]         if (TRUE) {
[13:36:21.048]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:21.048]         }
[13:36:21.048]         else {
[13:36:21.048]             ...future.result["stdout"] <- base::list(NULL)
[13:36:21.048]         }
[13:36:21.048]         base::close(...future.stdout)
[13:36:21.048]         ...future.stdout <- NULL
[13:36:21.048]     }
[13:36:21.048]     ...future.result$conditions <- ...future.conditions
[13:36:21.048]     ...future.result$finished <- base::Sys.time()
[13:36:21.048]     ...future.result
[13:36:21.048] }
[13:36:21.050] plan(): Setting new future strategy stack:
[13:36:21.050] List of future strategies:
[13:36:21.050] 1. sequential:
[13:36:21.050]    - args: function (..., envir = parent.frame())
[13:36:21.050]    - tweaked: FALSE
[13:36:21.050]    - call: NULL
[13:36:21.050] plan(): nbrOfWorkers() = 1
[13:36:21.051] plan(): Setting new future strategy stack:
[13:36:21.051] List of future strategies:
[13:36:21.051] 1. future:
[13:36:21.051]    - args: function (...)
[13:36:21.051]    - tweaked: FALSE
[13:36:21.051]    - call: plan(foo)
[13:36:21.051] plan(): nbrOfWorkers() = Inf
[13:36:21.052] SequentialFuture started (and completed)
[1] 42
[13:36:21.054] getGlobalsAndPackages() ...
[13:36:21.054] 
[13:36:21.054] - globals: [0] <none>
[13:36:21.054] getGlobalsAndPackages() ... DONE
[13:36:21.054] [local output] makeClusterPSOCK() ...
[13:36:21.087] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:36:21.088] [local output] Base port: 11890
[13:36:21.088] [local output] Getting setup options for 2 cluster nodes ...
[13:36:21.088] [local output]  - Node 1 of 2 ...
[13:36:21.089] [local output] localMachine=TRUE => revtunnel=FALSE

[13:36:21.090] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmpi9fE9D/worker.rank=1.parallelly.parent=81147.13cfb6738ca12.pid")), silent = TRUE)' -e 'file.exists("/tmp/Rtmpi9fE9D/worker.rank=1.parallelly.parent=81147.13cfb6738ca12.pid")'’
[13:36:21.278] - Possible to infer worker's PID: TRUE
[13:36:21.278] [local output] Rscript port: 11890

[13:36:21.279] [local output]  - Node 2 of 2 ...
[13:36:21.279] [local output] localMachine=TRUE => revtunnel=FALSE

[13:36:21.280] [local output] Rscript port: 11890

[13:36:21.280] [local output] Getting setup options for 2 cluster nodes ... done
[13:36:21.280] [local output]  - Parallel setup requested for some PSOCK nodes
[13:36:21.280] [local output] Setting up PSOCK nodes in parallel
[13:36:21.281] List of 36
[13:36:21.281]  $ worker          : chr "localhost"
[13:36:21.281]   ..- attr(*, "localhost")= logi TRUE
[13:36:21.281]  $ master          : chr "localhost"
[13:36:21.281]  $ port            : int 11890
[13:36:21.281]  $ connectTimeout  : num 120
[13:36:21.281]  $ timeout         : num 2592000
[13:36:21.281]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:36:21.281]  $ homogeneous     : logi TRUE
[13:36:21.281]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:36:21.281]  $ rscript_envs    : NULL
[13:36:21.281]  $ rscript_libs    : NULL
[13:36:21.281]  $ rscript_startup : NULL
[13:36:21.281]  $ rscript_sh      : chr "sh"
[13:36:21.281]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:36:21.281]  $ methods         : logi TRUE
[13:36:21.281]  $ socketOptions   : chr "no-delay"
[13:36:21.281]  $ useXDR          : logi FALSE
[13:36:21.281]  $ outfile         : chr "/dev/null"
[13:36:21.281]  $ renice          : int NA
[13:36:21.281]  $ rshcmd          : NULL
[13:36:21.281]  $ user            : chr(0) 
[13:36:21.281]  $ revtunnel       : logi FALSE
[13:36:21.281]  $ rshlogfile      : NULL
[13:36:21.281]  $ rshopts         : chr(0) 
[13:36:21.281]  $ rank            : int 1
[13:36:21.281]  $ manual          : logi FALSE
[13:36:21.281]  $ dryrun          : logi FALSE
[13:36:21.281]  $ quiet           : logi FALSE
[13:36:21.281]  $ setup_strategy  : chr "parallel"
[13:36:21.281]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:36:21.281]  $ pidfile         : chr "/tmp/Rtmpi9fE9D/worker.rank=1.parallelly.parent=81147.13cfb6738ca12.pid"
[13:36:21.281]  $ rshcmd_label    : NULL
[13:36:21.281]  $ rsh_call        : NULL
[13:36:21.281]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:36:21.281]  $ localMachine    : logi TRUE
[13:36:21.281]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:36:21.281]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:36:21.281]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:36:21.281]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:36:21.281]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:36:21.281]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:36:21.281]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:36:21.281]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:36:21.281]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:36:21.281]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:36:21.281]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:36:21.281]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:36:21.281]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:36:21.281]  $ arguments       :List of 28
[13:36:21.281]   ..$ worker          : chr "localhost"
[13:36:21.281]   ..$ master          : NULL
[13:36:21.281]   ..$ port            : int 11890
[13:36:21.281]   ..$ connectTimeout  : num 120
[13:36:21.281]   ..$ timeout         : num 2592000
[13:36:21.281]   ..$ rscript         : NULL
[13:36:21.281]   ..$ homogeneous     : NULL
[13:36:21.281]   ..$ rscript_args    : NULL
[13:36:21.281]   ..$ rscript_envs    : NULL
[13:36:21.281]   ..$ rscript_libs    : NULL
[13:36:21.281]   ..$ rscript_startup : NULL
[13:36:21.281]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:36:21.281]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:36:21.281]   ..$ methods         : logi TRUE
[13:36:21.281]   ..$ socketOptions   : chr "no-delay"
[13:36:21.281]   ..$ useXDR          : logi FALSE
[13:36:21.281]   ..$ outfile         : chr "/dev/null"
[13:36:21.281]   ..$ renice          : int NA
[13:36:21.281]   ..$ rshcmd          : NULL
[13:36:21.281]   ..$ user            : NULL
[13:36:21.281]   ..$ revtunnel       : logi NA
[13:36:21.281]   ..$ rshlogfile      : NULL
[13:36:21.281]   ..$ rshopts         : NULL
[13:36:21.281]   ..$ rank            : int 1
[13:36:21.281]   ..$ manual          : logi FALSE
[13:36:21.281]   ..$ dryrun          : logi FALSE
[13:36:21.281]   ..$ quiet           : logi FALSE
[13:36:21.281]   ..$ setup_strategy  : chr "parallel"
[13:36:21.281]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:36:21.297] [local output] System call to launch all workers:
[13:36:21.297] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmpi9fE9D/worker.rank=1.parallelly.parent=81147.13cfb6738ca12.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11890 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:36:21.297] [local output] Starting PSOCK main server
[13:36:21.303] [local output] Workers launched
[13:36:21.304] [local output] Waiting for workers to connect back
[13:36:21.304]  - [local output] 0 workers out of 2 ready
[13:36:21.544]  - [local output] 0 workers out of 2 ready
[13:36:21.545]  - [local output] 1 workers out of 2 ready
[13:36:21.545]  - [local output] 2 workers out of 2 ready
[13:36:21.545] [local output] Launching of workers completed
[13:36:21.546] [local output] Collecting session information from workers
[13:36:21.546] [local output]  - Worker #1 of 2
[13:36:21.547] [local output]  - Worker #2 of 2
[13:36:21.547] [local output] makeClusterPSOCK() ... done
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: 0x5631e44addc0
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 5ea7c1a0-3c78-7b84-7b57-f31976200d2a
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:21.560] Packages needed by the future expression (n = 0): <none>
[13:36:21.560] Packages needed by future strategies (n = 0): <none>
[13:36:21.560] {
[13:36:21.560]     {
[13:36:21.560]         {
[13:36:21.560]             ...future.startTime <- base::Sys.time()
[13:36:21.560]             {
[13:36:21.560]                 {
[13:36:21.560]                   {
[13:36:21.560]                     {
[13:36:21.560]                       base::local({
[13:36:21.560]                         has_future <- base::requireNamespace("future", 
[13:36:21.560]                           quietly = TRUE)
[13:36:21.560]                         if (has_future) {
[13:36:21.560]                           ns <- base::getNamespace("future")
[13:36:21.560]                           version <- ns[[".package"]][["version"]]
[13:36:21.560]                           if (is.null(version)) 
[13:36:21.560]                             version <- utils::packageVersion("future")
[13:36:21.560]                         }
[13:36:21.560]                         else {
[13:36:21.560]                           version <- NULL
[13:36:21.560]                         }
[13:36:21.560]                         if (!has_future || version < "1.8.0") {
[13:36:21.560]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:21.560]                             "", base::R.version$version.string), 
[13:36:21.560]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:21.560]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:21.560]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:21.560]                               "release", "version")], collapse = " "), 
[13:36:21.560]                             hostname = base::Sys.info()[["nodename"]])
[13:36:21.560]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:21.560]                             info)
[13:36:21.560]                           info <- base::paste(info, collapse = "; ")
[13:36:21.560]                           if (!has_future) {
[13:36:21.560]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:21.560]                               info)
[13:36:21.560]                           }
[13:36:21.560]                           else {
[13:36:21.560]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:21.560]                               info, version)
[13:36:21.560]                           }
[13:36:21.560]                           base::stop(msg)
[13:36:21.560]                         }
[13:36:21.560]                       })
[13:36:21.560]                     }
[13:36:21.560]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:21.560]                     base::options(mc.cores = 1L)
[13:36:21.560]                   }
[13:36:21.560]                   ...future.strategy.old <- future::plan("list")
[13:36:21.560]                   options(future.plan = NULL)
[13:36:21.560]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:21.560]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:21.560]                 }
[13:36:21.560]                 ...future.workdir <- getwd()
[13:36:21.560]             }
[13:36:21.560]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:21.560]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:21.560]         }
[13:36:21.560]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:21.560]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:21.560]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:21.560]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:21.560]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:21.560]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:21.560]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:21.560]             base::names(...future.oldOptions))
[13:36:21.560]     }
[13:36:21.560]     if (FALSE) {
[13:36:21.560]     }
[13:36:21.560]     else {
[13:36:21.560]         if (TRUE) {
[13:36:21.560]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:21.560]                 open = "w")
[13:36:21.560]         }
[13:36:21.560]         else {
[13:36:21.560]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:21.560]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:21.560]         }
[13:36:21.560]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:21.560]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:21.560]             base::sink(type = "output", split = FALSE)
[13:36:21.560]             base::close(...future.stdout)
[13:36:21.560]         }, add = TRUE)
[13:36:21.560]     }
[13:36:21.560]     ...future.frame <- base::sys.nframe()
[13:36:21.560]     ...future.conditions <- base::list()
[13:36:21.560]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:21.560]     if (FALSE) {
[13:36:21.560]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:21.560]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:21.560]     }
[13:36:21.560]     ...future.result <- base::tryCatch({
[13:36:21.560]         base::withCallingHandlers({
[13:36:21.560]             ...future.value <- base::withVisible(base::local({
[13:36:21.560]                 ...future.makeSendCondition <- base::local({
[13:36:21.560]                   sendCondition <- NULL
[13:36:21.560]                   function(frame = 1L) {
[13:36:21.560]                     if (is.function(sendCondition)) 
[13:36:21.560]                       return(sendCondition)
[13:36:21.560]                     ns <- getNamespace("parallel")
[13:36:21.560]                     if (exists("sendData", mode = "function", 
[13:36:21.560]                       envir = ns)) {
[13:36:21.560]                       parallel_sendData <- get("sendData", mode = "function", 
[13:36:21.560]                         envir = ns)
[13:36:21.560]                       envir <- sys.frame(frame)
[13:36:21.560]                       master <- NULL
[13:36:21.560]                       while (!identical(envir, .GlobalEnv) && 
[13:36:21.560]                         !identical(envir, emptyenv())) {
[13:36:21.560]                         if (exists("master", mode = "list", envir = envir, 
[13:36:21.560]                           inherits = FALSE)) {
[13:36:21.560]                           master <- get("master", mode = "list", 
[13:36:21.560]                             envir = envir, inherits = FALSE)
[13:36:21.560]                           if (inherits(master, c("SOCKnode", 
[13:36:21.560]                             "SOCK0node"))) {
[13:36:21.560]                             sendCondition <<- function(cond) {
[13:36:21.560]                               data <- list(type = "VALUE", value = cond, 
[13:36:21.560]                                 success = TRUE)
[13:36:21.560]                               parallel_sendData(master, data)
[13:36:21.560]                             }
[13:36:21.560]                             return(sendCondition)
[13:36:21.560]                           }
[13:36:21.560]                         }
[13:36:21.560]                         frame <- frame + 1L
[13:36:21.560]                         envir <- sys.frame(frame)
[13:36:21.560]                       }
[13:36:21.560]                     }
[13:36:21.560]                     sendCondition <<- function(cond) NULL
[13:36:21.560]                   }
[13:36:21.560]                 })
[13:36:21.560]                 withCallingHandlers({
[13:36:21.560]                   {
[13:36:21.560]                     42L
[13:36:21.560]                   }
[13:36:21.560]                 }, immediateCondition = function(cond) {
[13:36:21.560]                   sendCondition <- ...future.makeSendCondition()
[13:36:21.560]                   sendCondition(cond)
[13:36:21.560]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:21.560]                   {
[13:36:21.560]                     inherits <- base::inherits
[13:36:21.560]                     invokeRestart <- base::invokeRestart
[13:36:21.560]                     is.null <- base::is.null
[13:36:21.560]                     muffled <- FALSE
[13:36:21.560]                     if (inherits(cond, "message")) {
[13:36:21.560]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:21.560]                       if (muffled) 
[13:36:21.560]                         invokeRestart("muffleMessage")
[13:36:21.560]                     }
[13:36:21.560]                     else if (inherits(cond, "warning")) {
[13:36:21.560]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:21.560]                       if (muffled) 
[13:36:21.560]                         invokeRestart("muffleWarning")
[13:36:21.560]                     }
[13:36:21.560]                     else if (inherits(cond, "condition")) {
[13:36:21.560]                       if (!is.null(pattern)) {
[13:36:21.560]                         computeRestarts <- base::computeRestarts
[13:36:21.560]                         grepl <- base::grepl
[13:36:21.560]                         restarts <- computeRestarts(cond)
[13:36:21.560]                         for (restart in restarts) {
[13:36:21.560]                           name <- restart$name
[13:36:21.560]                           if (is.null(name)) 
[13:36:21.560]                             next
[13:36:21.560]                           if (!grepl(pattern, name)) 
[13:36:21.560]                             next
[13:36:21.560]                           invokeRestart(restart)
[13:36:21.560]                           muffled <- TRUE
[13:36:21.560]                           break
[13:36:21.560]                         }
[13:36:21.560]                       }
[13:36:21.560]                     }
[13:36:21.560]                     invisible(muffled)
[13:36:21.560]                   }
[13:36:21.560]                   muffleCondition(cond)
[13:36:21.560]                 })
[13:36:21.560]             }))
[13:36:21.560]             future::FutureResult(value = ...future.value$value, 
[13:36:21.560]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:21.560]                   ...future.rng), globalenv = if (FALSE) 
[13:36:21.560]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:21.560]                     ...future.globalenv.names))
[13:36:21.560]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:21.560]         }, condition = base::local({
[13:36:21.560]             c <- base::c
[13:36:21.560]             inherits <- base::inherits
[13:36:21.560]             invokeRestart <- base::invokeRestart
[13:36:21.560]             length <- base::length
[13:36:21.560]             list <- base::list
[13:36:21.560]             seq.int <- base::seq.int
[13:36:21.560]             signalCondition <- base::signalCondition
[13:36:21.560]             sys.calls <- base::sys.calls
[13:36:21.560]             `[[` <- base::`[[`
[13:36:21.560]             `+` <- base::`+`
[13:36:21.560]             `<<-` <- base::`<<-`
[13:36:21.560]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:21.560]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:21.560]                   3L)]
[13:36:21.560]             }
[13:36:21.560]             function(cond) {
[13:36:21.560]                 is_error <- inherits(cond, "error")
[13:36:21.560]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:21.560]                   NULL)
[13:36:21.560]                 if (is_error) {
[13:36:21.560]                   sessionInformation <- function() {
[13:36:21.560]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:21.560]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:21.560]                       search = base::search(), system = base::Sys.info())
[13:36:21.560]                   }
[13:36:21.560]                   ...future.conditions[[length(...future.conditions) + 
[13:36:21.560]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:21.560]                     cond$call), session = sessionInformation(), 
[13:36:21.560]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:21.560]                   signalCondition(cond)
[13:36:21.560]                 }
[13:36:21.560]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:21.560]                 "immediateCondition"))) {
[13:36:21.560]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:21.560]                   ...future.conditions[[length(...future.conditions) + 
[13:36:21.560]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:21.560]                   if (TRUE && !signal) {
[13:36:21.560]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:21.560]                     {
[13:36:21.560]                       inherits <- base::inherits
[13:36:21.560]                       invokeRestart <- base::invokeRestart
[13:36:21.560]                       is.null <- base::is.null
[13:36:21.560]                       muffled <- FALSE
[13:36:21.560]                       if (inherits(cond, "message")) {
[13:36:21.560]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:21.560]                         if (muffled) 
[13:36:21.560]                           invokeRestart("muffleMessage")
[13:36:21.560]                       }
[13:36:21.560]                       else if (inherits(cond, "warning")) {
[13:36:21.560]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:21.560]                         if (muffled) 
[13:36:21.560]                           invokeRestart("muffleWarning")
[13:36:21.560]                       }
[13:36:21.560]                       else if (inherits(cond, "condition")) {
[13:36:21.560]                         if (!is.null(pattern)) {
[13:36:21.560]                           computeRestarts <- base::computeRestarts
[13:36:21.560]                           grepl <- base::grepl
[13:36:21.560]                           restarts <- computeRestarts(cond)
[13:36:21.560]                           for (restart in restarts) {
[13:36:21.560]                             name <- restart$name
[13:36:21.560]                             if (is.null(name)) 
[13:36:21.560]                               next
[13:36:21.560]                             if (!grepl(pattern, name)) 
[13:36:21.560]                               next
[13:36:21.560]                             invokeRestart(restart)
[13:36:21.560]                             muffled <- TRUE
[13:36:21.560]                             break
[13:36:21.560]                           }
[13:36:21.560]                         }
[13:36:21.560]                       }
[13:36:21.560]                       invisible(muffled)
[13:36:21.560]                     }
[13:36:21.560]                     muffleCondition(cond, pattern = "^muffle")
[13:36:21.560]                   }
[13:36:21.560]                 }
[13:36:21.560]                 else {
[13:36:21.560]                   if (TRUE) {
[13:36:21.560]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:21.560]                     {
[13:36:21.560]                       inherits <- base::inherits
[13:36:21.560]                       invokeRestart <- base::invokeRestart
[13:36:21.560]                       is.null <- base::is.null
[13:36:21.560]                       muffled <- FALSE
[13:36:21.560]                       if (inherits(cond, "message")) {
[13:36:21.560]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:21.560]                         if (muffled) 
[13:36:21.560]                           invokeRestart("muffleMessage")
[13:36:21.560]                       }
[13:36:21.560]                       else if (inherits(cond, "warning")) {
[13:36:21.560]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:21.560]                         if (muffled) 
[13:36:21.560]                           invokeRestart("muffleWarning")
[13:36:21.560]                       }
[13:36:21.560]                       else if (inherits(cond, "condition")) {
[13:36:21.560]                         if (!is.null(pattern)) {
[13:36:21.560]                           computeRestarts <- base::computeRestarts
[13:36:21.560]                           grepl <- base::grepl
[13:36:21.560]                           restarts <- computeRestarts(cond)
[13:36:21.560]                           for (restart in restarts) {
[13:36:21.560]                             name <- restart$name
[13:36:21.560]                             if (is.null(name)) 
[13:36:21.560]                               next
[13:36:21.560]                             if (!grepl(pattern, name)) 
[13:36:21.560]                               next
[13:36:21.560]                             invokeRestart(restart)
[13:36:21.560]                             muffled <- TRUE
[13:36:21.560]                             break
[13:36:21.560]                           }
[13:36:21.560]                         }
[13:36:21.560]                       }
[13:36:21.560]                       invisible(muffled)
[13:36:21.560]                     }
[13:36:21.560]                     muffleCondition(cond, pattern = "^muffle")
[13:36:21.560]                   }
[13:36:21.560]                 }
[13:36:21.560]             }
[13:36:21.560]         }))
[13:36:21.560]     }, error = function(ex) {
[13:36:21.560]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:21.560]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:21.560]                 ...future.rng), started = ...future.startTime, 
[13:36:21.560]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:21.560]             version = "1.8"), class = "FutureResult")
[13:36:21.560]     }, finally = {
[13:36:21.560]         if (!identical(...future.workdir, getwd())) 
[13:36:21.560]             setwd(...future.workdir)
[13:36:21.560]         {
[13:36:21.560]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:21.560]                 ...future.oldOptions$nwarnings <- NULL
[13:36:21.560]             }
[13:36:21.560]             base::options(...future.oldOptions)
[13:36:21.560]             if (.Platform$OS.type == "windows") {
[13:36:21.560]                 old_names <- names(...future.oldEnvVars)
[13:36:21.560]                 envs <- base::Sys.getenv()
[13:36:21.560]                 names <- names(envs)
[13:36:21.560]                 common <- intersect(names, old_names)
[13:36:21.560]                 added <- setdiff(names, old_names)
[13:36:21.560]                 removed <- setdiff(old_names, names)
[13:36:21.560]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:21.560]                   envs[common]]
[13:36:21.560]                 NAMES <- toupper(changed)
[13:36:21.560]                 args <- list()
[13:36:21.560]                 for (kk in seq_along(NAMES)) {
[13:36:21.560]                   name <- changed[[kk]]
[13:36:21.560]                   NAME <- NAMES[[kk]]
[13:36:21.560]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:21.560]                     next
[13:36:21.560]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:21.560]                 }
[13:36:21.560]                 NAMES <- toupper(added)
[13:36:21.560]                 for (kk in seq_along(NAMES)) {
[13:36:21.560]                   name <- added[[kk]]
[13:36:21.560]                   NAME <- NAMES[[kk]]
[13:36:21.560]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:21.560]                     next
[13:36:21.560]                   args[[name]] <- ""
[13:36:21.560]                 }
[13:36:21.560]                 NAMES <- toupper(removed)
[13:36:21.560]                 for (kk in seq_along(NAMES)) {
[13:36:21.560]                   name <- removed[[kk]]
[13:36:21.560]                   NAME <- NAMES[[kk]]
[13:36:21.560]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:21.560]                     next
[13:36:21.560]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:21.560]                 }
[13:36:21.560]                 if (length(args) > 0) 
[13:36:21.560]                   base::do.call(base::Sys.setenv, args = args)
[13:36:21.560]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:21.560]             }
[13:36:21.560]             else {
[13:36:21.560]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:21.560]             }
[13:36:21.560]             {
[13:36:21.560]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:21.560]                   0L) {
[13:36:21.560]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:21.560]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:21.560]                   base::options(opts)
[13:36:21.560]                 }
[13:36:21.560]                 {
[13:36:21.560]                   {
[13:36:21.560]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:21.560]                     NULL
[13:36:21.560]                   }
[13:36:21.560]                   options(future.plan = NULL)
[13:36:21.560]                   if (is.na(NA_character_)) 
[13:36:21.560]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:21.560]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:21.560]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:21.560]                     .init = FALSE)
[13:36:21.560]                 }
[13:36:21.560]             }
[13:36:21.560]         }
[13:36:21.560]     })
[13:36:21.560]     if (TRUE) {
[13:36:21.560]         base::sink(type = "output", split = FALSE)
[13:36:21.560]         if (TRUE) {
[13:36:21.560]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:21.560]         }
[13:36:21.560]         else {
[13:36:21.560]             ...future.result["stdout"] <- base::list(NULL)
[13:36:21.560]         }
[13:36:21.560]         base::close(...future.stdout)
[13:36:21.560]         ...future.stdout <- NULL
[13:36:21.560]     }
[13:36:21.560]     ...future.result$conditions <- ...future.conditions
[13:36:21.560]     ...future.result$finished <- base::Sys.time()
[13:36:21.560]     ...future.result
[13:36:21.560] }
[13:36:21.615] MultisessionFuture started
[13:36:21.615] result() for ClusterFuture ...
[13:36:21.616] receiveMessageFromWorker() for ClusterFuture ...
[13:36:21.616] - Validating connection of MultisessionFuture
[13:36:21.649] - received message: FutureResult
[13:36:21.649] - Received FutureResult
[13:36:21.652] - Erased future from FutureRegistry
[13:36:21.652] result() for ClusterFuture ...
[13:36:21.652] - result already collected: FutureResult
[13:36:21.653] result() for ClusterFuture ... done
[13:36:21.653] receiveMessageFromWorker() for ClusterFuture ... done
[13:36:21.653] result() for ClusterFuture ... done
[13:36:21.653] result() for ClusterFuture ...
[13:36:21.653] - result already collected: FutureResult
[13:36:21.653] result() for ClusterFuture ... done
[1] 42
[13:36:21.654] getGlobalsAndPackages() ...
[13:36:21.654] 
[13:36:21.655] - globals: [0] <none>
[13:36:21.655] getGlobalsAndPackages() ... DONE
[13:36:21.666] Packages needed by the future expression (n = 0): <none>
[13:36:21.666] Packages needed by future strategies (n = 0): <none>
[13:36:21.667] {
[13:36:21.667]     {
[13:36:21.667]         {
[13:36:21.667]             ...future.startTime <- base::Sys.time()
[13:36:21.667]             {
[13:36:21.667]                 {
[13:36:21.667]                   {
[13:36:21.667]                     {
[13:36:21.667]                       base::local({
[13:36:21.667]                         has_future <- base::requireNamespace("future", 
[13:36:21.667]                           quietly = TRUE)
[13:36:21.667]                         if (has_future) {
[13:36:21.667]                           ns <- base::getNamespace("future")
[13:36:21.667]                           version <- ns[[".package"]][["version"]]
[13:36:21.667]                           if (is.null(version)) 
[13:36:21.667]                             version <- utils::packageVersion("future")
[13:36:21.667]                         }
[13:36:21.667]                         else {
[13:36:21.667]                           version <- NULL
[13:36:21.667]                         }
[13:36:21.667]                         if (!has_future || version < "1.8.0") {
[13:36:21.667]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:21.667]                             "", base::R.version$version.string), 
[13:36:21.667]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:21.667]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:21.667]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:21.667]                               "release", "version")], collapse = " "), 
[13:36:21.667]                             hostname = base::Sys.info()[["nodename"]])
[13:36:21.667]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:21.667]                             info)
[13:36:21.667]                           info <- base::paste(info, collapse = "; ")
[13:36:21.667]                           if (!has_future) {
[13:36:21.667]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:21.667]                               info)
[13:36:21.667]                           }
[13:36:21.667]                           else {
[13:36:21.667]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:21.667]                               info, version)
[13:36:21.667]                           }
[13:36:21.667]                           base::stop(msg)
[13:36:21.667]                         }
[13:36:21.667]                       })
[13:36:21.667]                     }
[13:36:21.667]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:21.667]                     base::options(mc.cores = 1L)
[13:36:21.667]                   }
[13:36:21.667]                   ...future.strategy.old <- future::plan("list")
[13:36:21.667]                   options(future.plan = NULL)
[13:36:21.667]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:21.667]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:21.667]                 }
[13:36:21.667]                 ...future.workdir <- getwd()
[13:36:21.667]             }
[13:36:21.667]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:21.667]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:21.667]         }
[13:36:21.667]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:21.667]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:21.667]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:21.667]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:21.667]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:21.667]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:21.667]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:21.667]             base::names(...future.oldOptions))
[13:36:21.667]     }
[13:36:21.667]     if (FALSE) {
[13:36:21.667]     }
[13:36:21.667]     else {
[13:36:21.667]         if (TRUE) {
[13:36:21.667]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:21.667]                 open = "w")
[13:36:21.667]         }
[13:36:21.667]         else {
[13:36:21.667]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:21.667]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:21.667]         }
[13:36:21.667]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:21.667]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:21.667]             base::sink(type = "output", split = FALSE)
[13:36:21.667]             base::close(...future.stdout)
[13:36:21.667]         }, add = TRUE)
[13:36:21.667]     }
[13:36:21.667]     ...future.frame <- base::sys.nframe()
[13:36:21.667]     ...future.conditions <- base::list()
[13:36:21.667]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:21.667]     if (FALSE) {
[13:36:21.667]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:21.667]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:21.667]     }
[13:36:21.667]     ...future.result <- base::tryCatch({
[13:36:21.667]         base::withCallingHandlers({
[13:36:21.667]             ...future.value <- base::withVisible(base::local({
[13:36:21.667]                 ...future.makeSendCondition <- base::local({
[13:36:21.667]                   sendCondition <- NULL
[13:36:21.667]                   function(frame = 1L) {
[13:36:21.667]                     if (is.function(sendCondition)) 
[13:36:21.667]                       return(sendCondition)
[13:36:21.667]                     ns <- getNamespace("parallel")
[13:36:21.667]                     if (exists("sendData", mode = "function", 
[13:36:21.667]                       envir = ns)) {
[13:36:21.667]                       parallel_sendData <- get("sendData", mode = "function", 
[13:36:21.667]                         envir = ns)
[13:36:21.667]                       envir <- sys.frame(frame)
[13:36:21.667]                       master <- NULL
[13:36:21.667]                       while (!identical(envir, .GlobalEnv) && 
[13:36:21.667]                         !identical(envir, emptyenv())) {
[13:36:21.667]                         if (exists("master", mode = "list", envir = envir, 
[13:36:21.667]                           inherits = FALSE)) {
[13:36:21.667]                           master <- get("master", mode = "list", 
[13:36:21.667]                             envir = envir, inherits = FALSE)
[13:36:21.667]                           if (inherits(master, c("SOCKnode", 
[13:36:21.667]                             "SOCK0node"))) {
[13:36:21.667]                             sendCondition <<- function(cond) {
[13:36:21.667]                               data <- list(type = "VALUE", value = cond, 
[13:36:21.667]                                 success = TRUE)
[13:36:21.667]                               parallel_sendData(master, data)
[13:36:21.667]                             }
[13:36:21.667]                             return(sendCondition)
[13:36:21.667]                           }
[13:36:21.667]                         }
[13:36:21.667]                         frame <- frame + 1L
[13:36:21.667]                         envir <- sys.frame(frame)
[13:36:21.667]                       }
[13:36:21.667]                     }
[13:36:21.667]                     sendCondition <<- function(cond) NULL
[13:36:21.667]                   }
[13:36:21.667]                 })
[13:36:21.667]                 withCallingHandlers({
[13:36:21.667]                   {
[13:36:21.667]                     42L
[13:36:21.667]                   }
[13:36:21.667]                 }, immediateCondition = function(cond) {
[13:36:21.667]                   sendCondition <- ...future.makeSendCondition()
[13:36:21.667]                   sendCondition(cond)
[13:36:21.667]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:21.667]                   {
[13:36:21.667]                     inherits <- base::inherits
[13:36:21.667]                     invokeRestart <- base::invokeRestart
[13:36:21.667]                     is.null <- base::is.null
[13:36:21.667]                     muffled <- FALSE
[13:36:21.667]                     if (inherits(cond, "message")) {
[13:36:21.667]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:21.667]                       if (muffled) 
[13:36:21.667]                         invokeRestart("muffleMessage")
[13:36:21.667]                     }
[13:36:21.667]                     else if (inherits(cond, "warning")) {
[13:36:21.667]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:21.667]                       if (muffled) 
[13:36:21.667]                         invokeRestart("muffleWarning")
[13:36:21.667]                     }
[13:36:21.667]                     else if (inherits(cond, "condition")) {
[13:36:21.667]                       if (!is.null(pattern)) {
[13:36:21.667]                         computeRestarts <- base::computeRestarts
[13:36:21.667]                         grepl <- base::grepl
[13:36:21.667]                         restarts <- computeRestarts(cond)
[13:36:21.667]                         for (restart in restarts) {
[13:36:21.667]                           name <- restart$name
[13:36:21.667]                           if (is.null(name)) 
[13:36:21.667]                             next
[13:36:21.667]                           if (!grepl(pattern, name)) 
[13:36:21.667]                             next
[13:36:21.667]                           invokeRestart(restart)
[13:36:21.667]                           muffled <- TRUE
[13:36:21.667]                           break
[13:36:21.667]                         }
[13:36:21.667]                       }
[13:36:21.667]                     }
[13:36:21.667]                     invisible(muffled)
[13:36:21.667]                   }
[13:36:21.667]                   muffleCondition(cond)
[13:36:21.667]                 })
[13:36:21.667]             }))
[13:36:21.667]             future::FutureResult(value = ...future.value$value, 
[13:36:21.667]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:21.667]                   ...future.rng), globalenv = if (FALSE) 
[13:36:21.667]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:21.667]                     ...future.globalenv.names))
[13:36:21.667]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:21.667]         }, condition = base::local({
[13:36:21.667]             c <- base::c
[13:36:21.667]             inherits <- base::inherits
[13:36:21.667]             invokeRestart <- base::invokeRestart
[13:36:21.667]             length <- base::length
[13:36:21.667]             list <- base::list
[13:36:21.667]             seq.int <- base::seq.int
[13:36:21.667]             signalCondition <- base::signalCondition
[13:36:21.667]             sys.calls <- base::sys.calls
[13:36:21.667]             `[[` <- base::`[[`
[13:36:21.667]             `+` <- base::`+`
[13:36:21.667]             `<<-` <- base::`<<-`
[13:36:21.667]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:21.667]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:21.667]                   3L)]
[13:36:21.667]             }
[13:36:21.667]             function(cond) {
[13:36:21.667]                 is_error <- inherits(cond, "error")
[13:36:21.667]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:21.667]                   NULL)
[13:36:21.667]                 if (is_error) {
[13:36:21.667]                   sessionInformation <- function() {
[13:36:21.667]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:21.667]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:21.667]                       search = base::search(), system = base::Sys.info())
[13:36:21.667]                   }
[13:36:21.667]                   ...future.conditions[[length(...future.conditions) + 
[13:36:21.667]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:21.667]                     cond$call), session = sessionInformation(), 
[13:36:21.667]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:21.667]                   signalCondition(cond)
[13:36:21.667]                 }
[13:36:21.667]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:21.667]                 "immediateCondition"))) {
[13:36:21.667]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:21.667]                   ...future.conditions[[length(...future.conditions) + 
[13:36:21.667]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:21.667]                   if (TRUE && !signal) {
[13:36:21.667]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:21.667]                     {
[13:36:21.667]                       inherits <- base::inherits
[13:36:21.667]                       invokeRestart <- base::invokeRestart
[13:36:21.667]                       is.null <- base::is.null
[13:36:21.667]                       muffled <- FALSE
[13:36:21.667]                       if (inherits(cond, "message")) {
[13:36:21.667]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:21.667]                         if (muffled) 
[13:36:21.667]                           invokeRestart("muffleMessage")
[13:36:21.667]                       }
[13:36:21.667]                       else if (inherits(cond, "warning")) {
[13:36:21.667]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:21.667]                         if (muffled) 
[13:36:21.667]                           invokeRestart("muffleWarning")
[13:36:21.667]                       }
[13:36:21.667]                       else if (inherits(cond, "condition")) {
[13:36:21.667]                         if (!is.null(pattern)) {
[13:36:21.667]                           computeRestarts <- base::computeRestarts
[13:36:21.667]                           grepl <- base::grepl
[13:36:21.667]                           restarts <- computeRestarts(cond)
[13:36:21.667]                           for (restart in restarts) {
[13:36:21.667]                             name <- restart$name
[13:36:21.667]                             if (is.null(name)) 
[13:36:21.667]                               next
[13:36:21.667]                             if (!grepl(pattern, name)) 
[13:36:21.667]                               next
[13:36:21.667]                             invokeRestart(restart)
[13:36:21.667]                             muffled <- TRUE
[13:36:21.667]                             break
[13:36:21.667]                           }
[13:36:21.667]                         }
[13:36:21.667]                       }
[13:36:21.667]                       invisible(muffled)
[13:36:21.667]                     }
[13:36:21.667]                     muffleCondition(cond, pattern = "^muffle")
[13:36:21.667]                   }
[13:36:21.667]                 }
[13:36:21.667]                 else {
[13:36:21.667]                   if (TRUE) {
[13:36:21.667]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:21.667]                     {
[13:36:21.667]                       inherits <- base::inherits
[13:36:21.667]                       invokeRestart <- base::invokeRestart
[13:36:21.667]                       is.null <- base::is.null
[13:36:21.667]                       muffled <- FALSE
[13:36:21.667]                       if (inherits(cond, "message")) {
[13:36:21.667]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:21.667]                         if (muffled) 
[13:36:21.667]                           invokeRestart("muffleMessage")
[13:36:21.667]                       }
[13:36:21.667]                       else if (inherits(cond, "warning")) {
[13:36:21.667]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:21.667]                         if (muffled) 
[13:36:21.667]                           invokeRestart("muffleWarning")
[13:36:21.667]                       }
[13:36:21.667]                       else if (inherits(cond, "condition")) {
[13:36:21.667]                         if (!is.null(pattern)) {
[13:36:21.667]                           computeRestarts <- base::computeRestarts
[13:36:21.667]                           grepl <- base::grepl
[13:36:21.667]                           restarts <- computeRestarts(cond)
[13:36:21.667]                           for (restart in restarts) {
[13:36:21.667]                             name <- restart$name
[13:36:21.667]                             if (is.null(name)) 
[13:36:21.667]                               next
[13:36:21.667]                             if (!grepl(pattern, name)) 
[13:36:21.667]                               next
[13:36:21.667]                             invokeRestart(restart)
[13:36:21.667]                             muffled <- TRUE
[13:36:21.667]                             break
[13:36:21.667]                           }
[13:36:21.667]                         }
[13:36:21.667]                       }
[13:36:21.667]                       invisible(muffled)
[13:36:21.667]                     }
[13:36:21.667]                     muffleCondition(cond, pattern = "^muffle")
[13:36:21.667]                   }
[13:36:21.667]                 }
[13:36:21.667]             }
[13:36:21.667]         }))
[13:36:21.667]     }, error = function(ex) {
[13:36:21.667]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:21.667]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:21.667]                 ...future.rng), started = ...future.startTime, 
[13:36:21.667]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:21.667]             version = "1.8"), class = "FutureResult")
[13:36:21.667]     }, finally = {
[13:36:21.667]         if (!identical(...future.workdir, getwd())) 
[13:36:21.667]             setwd(...future.workdir)
[13:36:21.667]         {
[13:36:21.667]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:21.667]                 ...future.oldOptions$nwarnings <- NULL
[13:36:21.667]             }
[13:36:21.667]             base::options(...future.oldOptions)
[13:36:21.667]             if (.Platform$OS.type == "windows") {
[13:36:21.667]                 old_names <- names(...future.oldEnvVars)
[13:36:21.667]                 envs <- base::Sys.getenv()
[13:36:21.667]                 names <- names(envs)
[13:36:21.667]                 common <- intersect(names, old_names)
[13:36:21.667]                 added <- setdiff(names, old_names)
[13:36:21.667]                 removed <- setdiff(old_names, names)
[13:36:21.667]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:21.667]                   envs[common]]
[13:36:21.667]                 NAMES <- toupper(changed)
[13:36:21.667]                 args <- list()
[13:36:21.667]                 for (kk in seq_along(NAMES)) {
[13:36:21.667]                   name <- changed[[kk]]
[13:36:21.667]                   NAME <- NAMES[[kk]]
[13:36:21.667]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:21.667]                     next
[13:36:21.667]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:21.667]                 }
[13:36:21.667]                 NAMES <- toupper(added)
[13:36:21.667]                 for (kk in seq_along(NAMES)) {
[13:36:21.667]                   name <- added[[kk]]
[13:36:21.667]                   NAME <- NAMES[[kk]]
[13:36:21.667]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:21.667]                     next
[13:36:21.667]                   args[[name]] <- ""
[13:36:21.667]                 }
[13:36:21.667]                 NAMES <- toupper(removed)
[13:36:21.667]                 for (kk in seq_along(NAMES)) {
[13:36:21.667]                   name <- removed[[kk]]
[13:36:21.667]                   NAME <- NAMES[[kk]]
[13:36:21.667]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:21.667]                     next
[13:36:21.667]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:21.667]                 }
[13:36:21.667]                 if (length(args) > 0) 
[13:36:21.667]                   base::do.call(base::Sys.setenv, args = args)
[13:36:21.667]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:21.667]             }
[13:36:21.667]             else {
[13:36:21.667]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:21.667]             }
[13:36:21.667]             {
[13:36:21.667]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:21.667]                   0L) {
[13:36:21.667]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:21.667]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:21.667]                   base::options(opts)
[13:36:21.667]                 }
[13:36:21.667]                 {
[13:36:21.667]                   {
[13:36:21.667]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:21.667]                     NULL
[13:36:21.667]                   }
[13:36:21.667]                   options(future.plan = NULL)
[13:36:21.667]                   if (is.na(NA_character_)) 
[13:36:21.667]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:21.667]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:21.667]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:21.667]                     .init = FALSE)
[13:36:21.667]                 }
[13:36:21.667]             }
[13:36:21.667]         }
[13:36:21.667]     })
[13:36:21.667]     if (TRUE) {
[13:36:21.667]         base::sink(type = "output", split = FALSE)
[13:36:21.667]         if (TRUE) {
[13:36:21.667]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:21.667]         }
[13:36:21.667]         else {
[13:36:21.667]             ...future.result["stdout"] <- base::list(NULL)
[13:36:21.667]         }
[13:36:21.667]         base::close(...future.stdout)
[13:36:21.667]         ...future.stdout <- NULL
[13:36:21.667]     }
[13:36:21.667]     ...future.result$conditions <- ...future.conditions
[13:36:21.667]     ...future.result$finished <- base::Sys.time()
[13:36:21.667]     ...future.result
[13:36:21.667] }
[13:36:21.670] MultisessionFuture started
[13:36:21.670] result() for ClusterFuture ...
[13:36:21.670] receiveMessageFromWorker() for ClusterFuture ...
[13:36:21.670] - Validating connection of MultisessionFuture
[13:36:21.675] - received message: FutureResult
[13:36:21.675] - Received FutureResult
[13:36:21.675] - Erased future from FutureRegistry
[13:36:21.675] result() for ClusterFuture ...
[13:36:21.675] - result already collected: FutureResult
[13:36:21.676] result() for ClusterFuture ... done
[13:36:21.676] receiveMessageFromWorker() for ClusterFuture ... done
[13:36:21.676] result() for ClusterFuture ... done
[13:36:21.676] result() for ClusterFuture ...
[13:36:21.676] - result already collected: FutureResult
[13:36:21.676] result() for ClusterFuture ... done
[1] 42
[13:36:21.676] getGlobalsAndPackages() ...
[13:36:21.676] Searching for globals...
[13:36:21.677] - globals found: [1] ‘{’
[13:36:21.677] Searching for globals ... DONE
[13:36:21.678] Resolving globals: FALSE
[13:36:21.678] 
[13:36:21.678] 
[13:36:21.678] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 5ea7c1a0-3c78-7b84-7b57-f31976200d2a
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:21.679] Packages needed by the future expression (n = 0): <none>
[13:36:21.679] Packages needed by future strategies (n = 0): <none>
[13:36:21.680] {
[13:36:21.680]     {
[13:36:21.680]         {
[13:36:21.680]             ...future.startTime <- base::Sys.time()
[13:36:21.680]             {
[13:36:21.680]                 {
[13:36:21.680]                   {
[13:36:21.680]                     base::local({
[13:36:21.680]                       has_future <- base::requireNamespace("future", 
[13:36:21.680]                         quietly = TRUE)
[13:36:21.680]                       if (has_future) {
[13:36:21.680]                         ns <- base::getNamespace("future")
[13:36:21.680]                         version <- ns[[".package"]][["version"]]
[13:36:21.680]                         if (is.null(version)) 
[13:36:21.680]                           version <- utils::packageVersion("future")
[13:36:21.680]                       }
[13:36:21.680]                       else {
[13:36:21.680]                         version <- NULL
[13:36:21.680]                       }
[13:36:21.680]                       if (!has_future || version < "1.8.0") {
[13:36:21.680]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:21.680]                           "", base::R.version$version.string), 
[13:36:21.680]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:21.680]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:21.680]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:21.680]                             "release", "version")], collapse = " "), 
[13:36:21.680]                           hostname = base::Sys.info()[["nodename"]])
[13:36:21.680]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:21.680]                           info)
[13:36:21.680]                         info <- base::paste(info, collapse = "; ")
[13:36:21.680]                         if (!has_future) {
[13:36:21.680]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:21.680]                             info)
[13:36:21.680]                         }
[13:36:21.680]                         else {
[13:36:21.680]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:21.680]                             info, version)
[13:36:21.680]                         }
[13:36:21.680]                         base::stop(msg)
[13:36:21.680]                       }
[13:36:21.680]                     })
[13:36:21.680]                   }
[13:36:21.680]                   ...future.strategy.old <- future::plan("list")
[13:36:21.680]                   options(future.plan = NULL)
[13:36:21.680]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:21.680]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:21.680]                 }
[13:36:21.680]                 ...future.workdir <- getwd()
[13:36:21.680]             }
[13:36:21.680]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:21.680]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:21.680]         }
[13:36:21.680]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:21.680]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:21.680]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:21.680]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:21.680]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:21.680]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:21.680]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:21.680]             base::names(...future.oldOptions))
[13:36:21.680]     }
[13:36:21.680]     if (FALSE) {
[13:36:21.680]     }
[13:36:21.680]     else {
[13:36:21.680]         if (TRUE) {
[13:36:21.680]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:21.680]                 open = "w")
[13:36:21.680]         }
[13:36:21.680]         else {
[13:36:21.680]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:21.680]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:21.680]         }
[13:36:21.680]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:21.680]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:21.680]             base::sink(type = "output", split = FALSE)
[13:36:21.680]             base::close(...future.stdout)
[13:36:21.680]         }, add = TRUE)
[13:36:21.680]     }
[13:36:21.680]     ...future.frame <- base::sys.nframe()
[13:36:21.680]     ...future.conditions <- base::list()
[13:36:21.680]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:21.680]     if (FALSE) {
[13:36:21.680]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:21.680]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:21.680]     }
[13:36:21.680]     ...future.result <- base::tryCatch({
[13:36:21.680]         base::withCallingHandlers({
[13:36:21.680]             ...future.value <- base::withVisible(base::local({
[13:36:21.680]                 42L
[13:36:21.680]             }))
[13:36:21.680]             future::FutureResult(value = ...future.value$value, 
[13:36:21.680]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:21.680]                   ...future.rng), globalenv = if (FALSE) 
[13:36:21.680]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:21.680]                     ...future.globalenv.names))
[13:36:21.680]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:21.680]         }, condition = base::local({
[13:36:21.680]             c <- base::c
[13:36:21.680]             inherits <- base::inherits
[13:36:21.680]             invokeRestart <- base::invokeRestart
[13:36:21.680]             length <- base::length
[13:36:21.680]             list <- base::list
[13:36:21.680]             seq.int <- base::seq.int
[13:36:21.680]             signalCondition <- base::signalCondition
[13:36:21.680]             sys.calls <- base::sys.calls
[13:36:21.680]             `[[` <- base::`[[`
[13:36:21.680]             `+` <- base::`+`
[13:36:21.680]             `<<-` <- base::`<<-`
[13:36:21.680]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:21.680]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:21.680]                   3L)]
[13:36:21.680]             }
[13:36:21.680]             function(cond) {
[13:36:21.680]                 is_error <- inherits(cond, "error")
[13:36:21.680]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:21.680]                   NULL)
[13:36:21.680]                 if (is_error) {
[13:36:21.680]                   sessionInformation <- function() {
[13:36:21.680]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:21.680]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:21.680]                       search = base::search(), system = base::Sys.info())
[13:36:21.680]                   }
[13:36:21.680]                   ...future.conditions[[length(...future.conditions) + 
[13:36:21.680]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:21.680]                     cond$call), session = sessionInformation(), 
[13:36:21.680]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:21.680]                   signalCondition(cond)
[13:36:21.680]                 }
[13:36:21.680]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:21.680]                 "immediateCondition"))) {
[13:36:21.680]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:21.680]                   ...future.conditions[[length(...future.conditions) + 
[13:36:21.680]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:21.680]                   if (TRUE && !signal) {
[13:36:21.680]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:21.680]                     {
[13:36:21.680]                       inherits <- base::inherits
[13:36:21.680]                       invokeRestart <- base::invokeRestart
[13:36:21.680]                       is.null <- base::is.null
[13:36:21.680]                       muffled <- FALSE
[13:36:21.680]                       if (inherits(cond, "message")) {
[13:36:21.680]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:21.680]                         if (muffled) 
[13:36:21.680]                           invokeRestart("muffleMessage")
[13:36:21.680]                       }
[13:36:21.680]                       else if (inherits(cond, "warning")) {
[13:36:21.680]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:21.680]                         if (muffled) 
[13:36:21.680]                           invokeRestart("muffleWarning")
[13:36:21.680]                       }
[13:36:21.680]                       else if (inherits(cond, "condition")) {
[13:36:21.680]                         if (!is.null(pattern)) {
[13:36:21.680]                           computeRestarts <- base::computeRestarts
[13:36:21.680]                           grepl <- base::grepl
[13:36:21.680]                           restarts <- computeRestarts(cond)
[13:36:21.680]                           for (restart in restarts) {
[13:36:21.680]                             name <- restart$name
[13:36:21.680]                             if (is.null(name)) 
[13:36:21.680]                               next
[13:36:21.680]                             if (!grepl(pattern, name)) 
[13:36:21.680]                               next
[13:36:21.680]                             invokeRestart(restart)
[13:36:21.680]                             muffled <- TRUE
[13:36:21.680]                             break
[13:36:21.680]                           }
[13:36:21.680]                         }
[13:36:21.680]                       }
[13:36:21.680]                       invisible(muffled)
[13:36:21.680]                     }
[13:36:21.680]                     muffleCondition(cond, pattern = "^muffle")
[13:36:21.680]                   }
[13:36:21.680]                 }
[13:36:21.680]                 else {
[13:36:21.680]                   if (TRUE) {
[13:36:21.680]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:21.680]                     {
[13:36:21.680]                       inherits <- base::inherits
[13:36:21.680]                       invokeRestart <- base::invokeRestart
[13:36:21.680]                       is.null <- base::is.null
[13:36:21.680]                       muffled <- FALSE
[13:36:21.680]                       if (inherits(cond, "message")) {
[13:36:21.680]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:21.680]                         if (muffled) 
[13:36:21.680]                           invokeRestart("muffleMessage")
[13:36:21.680]                       }
[13:36:21.680]                       else if (inherits(cond, "warning")) {
[13:36:21.680]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:21.680]                         if (muffled) 
[13:36:21.680]                           invokeRestart("muffleWarning")
[13:36:21.680]                       }
[13:36:21.680]                       else if (inherits(cond, "condition")) {
[13:36:21.680]                         if (!is.null(pattern)) {
[13:36:21.680]                           computeRestarts <- base::computeRestarts
[13:36:21.680]                           grepl <- base::grepl
[13:36:21.680]                           restarts <- computeRestarts(cond)
[13:36:21.680]                           for (restart in restarts) {
[13:36:21.680]                             name <- restart$name
[13:36:21.680]                             if (is.null(name)) 
[13:36:21.680]                               next
[13:36:21.680]                             if (!grepl(pattern, name)) 
[13:36:21.680]                               next
[13:36:21.680]                             invokeRestart(restart)
[13:36:21.680]                             muffled <- TRUE
[13:36:21.680]                             break
[13:36:21.680]                           }
[13:36:21.680]                         }
[13:36:21.680]                       }
[13:36:21.680]                       invisible(muffled)
[13:36:21.680]                     }
[13:36:21.680]                     muffleCondition(cond, pattern = "^muffle")
[13:36:21.680]                   }
[13:36:21.680]                 }
[13:36:21.680]             }
[13:36:21.680]         }))
[13:36:21.680]     }, error = function(ex) {
[13:36:21.680]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:21.680]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:21.680]                 ...future.rng), started = ...future.startTime, 
[13:36:21.680]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:21.680]             version = "1.8"), class = "FutureResult")
[13:36:21.680]     }, finally = {
[13:36:21.680]         if (!identical(...future.workdir, getwd())) 
[13:36:21.680]             setwd(...future.workdir)
[13:36:21.680]         {
[13:36:21.680]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:21.680]                 ...future.oldOptions$nwarnings <- NULL
[13:36:21.680]             }
[13:36:21.680]             base::options(...future.oldOptions)
[13:36:21.680]             if (.Platform$OS.type == "windows") {
[13:36:21.680]                 old_names <- names(...future.oldEnvVars)
[13:36:21.680]                 envs <- base::Sys.getenv()
[13:36:21.680]                 names <- names(envs)
[13:36:21.680]                 common <- intersect(names, old_names)
[13:36:21.680]                 added <- setdiff(names, old_names)
[13:36:21.680]                 removed <- setdiff(old_names, names)
[13:36:21.680]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:21.680]                   envs[common]]
[13:36:21.680]                 NAMES <- toupper(changed)
[13:36:21.680]                 args <- list()
[13:36:21.680]                 for (kk in seq_along(NAMES)) {
[13:36:21.680]                   name <- changed[[kk]]
[13:36:21.680]                   NAME <- NAMES[[kk]]
[13:36:21.680]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:21.680]                     next
[13:36:21.680]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:21.680]                 }
[13:36:21.680]                 NAMES <- toupper(added)
[13:36:21.680]                 for (kk in seq_along(NAMES)) {
[13:36:21.680]                   name <- added[[kk]]
[13:36:21.680]                   NAME <- NAMES[[kk]]
[13:36:21.680]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:21.680]                     next
[13:36:21.680]                   args[[name]] <- ""
[13:36:21.680]                 }
[13:36:21.680]                 NAMES <- toupper(removed)
[13:36:21.680]                 for (kk in seq_along(NAMES)) {
[13:36:21.680]                   name <- removed[[kk]]
[13:36:21.680]                   NAME <- NAMES[[kk]]
[13:36:21.680]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:21.680]                     next
[13:36:21.680]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:21.680]                 }
[13:36:21.680]                 if (length(args) > 0) 
[13:36:21.680]                   base::do.call(base::Sys.setenv, args = args)
[13:36:21.680]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:21.680]             }
[13:36:21.680]             else {
[13:36:21.680]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:21.680]             }
[13:36:21.680]             {
[13:36:21.680]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:21.680]                   0L) {
[13:36:21.680]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:21.680]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:21.680]                   base::options(opts)
[13:36:21.680]                 }
[13:36:21.680]                 {
[13:36:21.680]                   {
[13:36:21.680]                     NULL
[13:36:21.680]                     RNGkind("Mersenne-Twister")
[13:36:21.680]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:21.680]                       inherits = FALSE)
[13:36:21.680]                   }
[13:36:21.680]                   options(future.plan = NULL)
[13:36:21.680]                   if (is.na(NA_character_)) 
[13:36:21.680]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:21.680]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:21.680]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:21.680]                     .init = FALSE)
[13:36:21.680]                 }
[13:36:21.680]             }
[13:36:21.680]         }
[13:36:21.680]     })
[13:36:21.680]     if (TRUE) {
[13:36:21.680]         base::sink(type = "output", split = FALSE)
[13:36:21.680]         if (TRUE) {
[13:36:21.680]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:21.680]         }
[13:36:21.680]         else {
[13:36:21.680]             ...future.result["stdout"] <- base::list(NULL)
[13:36:21.680]         }
[13:36:21.680]         base::close(...future.stdout)
[13:36:21.680]         ...future.stdout <- NULL
[13:36:21.680]     }
[13:36:21.680]     ...future.result$conditions <- ...future.conditions
[13:36:21.680]     ...future.result$finished <- base::Sys.time()
[13:36:21.680]     ...future.result
[13:36:21.680] }
[13:36:21.682] plan(): Setting new future strategy stack:
[13:36:21.682] List of future strategies:
[13:36:21.682] 1. sequential:
[13:36:21.682]    - args: function (..., envir = parent.frame())
[13:36:21.682]    - tweaked: FALSE
[13:36:21.682]    - call: NULL
[13:36:21.682] plan(): nbrOfWorkers() = 1
[13:36:21.683] plan(): Setting new future strategy stack:
[13:36:21.683] List of future strategies:
[13:36:21.683] 1. future:
[13:36:21.683]    - args: function (...)
[13:36:21.683]    - tweaked: FALSE
[13:36:21.683]    - call: plan(foo)
[13:36:21.684] plan(): nbrOfWorkers() = Inf
[13:36:21.684] SequentialFuture started (and completed)
[1] 42
[13:36:21.684] getGlobalsAndPackages() ...
[13:36:21.684] Searching for globals...
[13:36:21.685] - globals found: [1] ‘{’
[13:36:21.685] Searching for globals ... DONE
[13:36:21.685] Resolving globals: FALSE
[13:36:21.686] 
[13:36:21.686] 
[13:36:21.686] getGlobalsAndPackages() ... DONE
[13:36:21.686] Packages needed by the future expression (n = 0): <none>
[13:36:21.687] Packages needed by future strategies (n = 0): <none>
[13:36:21.687] {
[13:36:21.687]     {
[13:36:21.687]         {
[13:36:21.687]             ...future.startTime <- base::Sys.time()
[13:36:21.687]             {
[13:36:21.687]                 {
[13:36:21.687]                   {
[13:36:21.687]                     base::local({
[13:36:21.687]                       has_future <- base::requireNamespace("future", 
[13:36:21.687]                         quietly = TRUE)
[13:36:21.687]                       if (has_future) {
[13:36:21.687]                         ns <- base::getNamespace("future")
[13:36:21.687]                         version <- ns[[".package"]][["version"]]
[13:36:21.687]                         if (is.null(version)) 
[13:36:21.687]                           version <- utils::packageVersion("future")
[13:36:21.687]                       }
[13:36:21.687]                       else {
[13:36:21.687]                         version <- NULL
[13:36:21.687]                       }
[13:36:21.687]                       if (!has_future || version < "1.8.0") {
[13:36:21.687]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:21.687]                           "", base::R.version$version.string), 
[13:36:21.687]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:21.687]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:21.687]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:21.687]                             "release", "version")], collapse = " "), 
[13:36:21.687]                           hostname = base::Sys.info()[["nodename"]])
[13:36:21.687]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:21.687]                           info)
[13:36:21.687]                         info <- base::paste(info, collapse = "; ")
[13:36:21.687]                         if (!has_future) {
[13:36:21.687]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:21.687]                             info)
[13:36:21.687]                         }
[13:36:21.687]                         else {
[13:36:21.687]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:21.687]                             info, version)
[13:36:21.687]                         }
[13:36:21.687]                         base::stop(msg)
[13:36:21.687]                       }
[13:36:21.687]                     })
[13:36:21.687]                   }
[13:36:21.687]                   ...future.strategy.old <- future::plan("list")
[13:36:21.687]                   options(future.plan = NULL)
[13:36:21.687]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:21.687]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:21.687]                 }
[13:36:21.687]                 ...future.workdir <- getwd()
[13:36:21.687]             }
[13:36:21.687]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:21.687]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:21.687]         }
[13:36:21.687]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:21.687]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:21.687]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:21.687]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:21.687]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:21.687]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:21.687]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:21.687]             base::names(...future.oldOptions))
[13:36:21.687]     }
[13:36:21.687]     if (FALSE) {
[13:36:21.687]     }
[13:36:21.687]     else {
[13:36:21.687]         if (TRUE) {
[13:36:21.687]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:21.687]                 open = "w")
[13:36:21.687]         }
[13:36:21.687]         else {
[13:36:21.687]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:21.687]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:21.687]         }
[13:36:21.687]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:21.687]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:21.687]             base::sink(type = "output", split = FALSE)
[13:36:21.687]             base::close(...future.stdout)
[13:36:21.687]         }, add = TRUE)
[13:36:21.687]     }
[13:36:21.687]     ...future.frame <- base::sys.nframe()
[13:36:21.687]     ...future.conditions <- base::list()
[13:36:21.687]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:21.687]     if (FALSE) {
[13:36:21.687]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:21.687]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:21.687]     }
[13:36:21.687]     ...future.result <- base::tryCatch({
[13:36:21.687]         base::withCallingHandlers({
[13:36:21.687]             ...future.value <- base::withVisible(base::local({
[13:36:21.687]                 42L
[13:36:21.687]             }))
[13:36:21.687]             future::FutureResult(value = ...future.value$value, 
[13:36:21.687]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:21.687]                   ...future.rng), globalenv = if (FALSE) 
[13:36:21.687]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:21.687]                     ...future.globalenv.names))
[13:36:21.687]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:21.687]         }, condition = base::local({
[13:36:21.687]             c <- base::c
[13:36:21.687]             inherits <- base::inherits
[13:36:21.687]             invokeRestart <- base::invokeRestart
[13:36:21.687]             length <- base::length
[13:36:21.687]             list <- base::list
[13:36:21.687]             seq.int <- base::seq.int
[13:36:21.687]             signalCondition <- base::signalCondition
[13:36:21.687]             sys.calls <- base::sys.calls
[13:36:21.687]             `[[` <- base::`[[`
[13:36:21.687]             `+` <- base::`+`
[13:36:21.687]             `<<-` <- base::`<<-`
[13:36:21.687]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:21.687]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:21.687]                   3L)]
[13:36:21.687]             }
[13:36:21.687]             function(cond) {
[13:36:21.687]                 is_error <- inherits(cond, "error")
[13:36:21.687]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:21.687]                   NULL)
[13:36:21.687]                 if (is_error) {
[13:36:21.687]                   sessionInformation <- function() {
[13:36:21.687]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:21.687]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:21.687]                       search = base::search(), system = base::Sys.info())
[13:36:21.687]                   }
[13:36:21.687]                   ...future.conditions[[length(...future.conditions) + 
[13:36:21.687]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:21.687]                     cond$call), session = sessionInformation(), 
[13:36:21.687]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:21.687]                   signalCondition(cond)
[13:36:21.687]                 }
[13:36:21.687]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:21.687]                 "immediateCondition"))) {
[13:36:21.687]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:21.687]                   ...future.conditions[[length(...future.conditions) + 
[13:36:21.687]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:21.687]                   if (TRUE && !signal) {
[13:36:21.687]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:21.687]                     {
[13:36:21.687]                       inherits <- base::inherits
[13:36:21.687]                       invokeRestart <- base::invokeRestart
[13:36:21.687]                       is.null <- base::is.null
[13:36:21.687]                       muffled <- FALSE
[13:36:21.687]                       if (inherits(cond, "message")) {
[13:36:21.687]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:21.687]                         if (muffled) 
[13:36:21.687]                           invokeRestart("muffleMessage")
[13:36:21.687]                       }
[13:36:21.687]                       else if (inherits(cond, "warning")) {
[13:36:21.687]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:21.687]                         if (muffled) 
[13:36:21.687]                           invokeRestart("muffleWarning")
[13:36:21.687]                       }
[13:36:21.687]                       else if (inherits(cond, "condition")) {
[13:36:21.687]                         if (!is.null(pattern)) {
[13:36:21.687]                           computeRestarts <- base::computeRestarts
[13:36:21.687]                           grepl <- base::grepl
[13:36:21.687]                           restarts <- computeRestarts(cond)
[13:36:21.687]                           for (restart in restarts) {
[13:36:21.687]                             name <- restart$name
[13:36:21.687]                             if (is.null(name)) 
[13:36:21.687]                               next
[13:36:21.687]                             if (!grepl(pattern, name)) 
[13:36:21.687]                               next
[13:36:21.687]                             invokeRestart(restart)
[13:36:21.687]                             muffled <- TRUE
[13:36:21.687]                             break
[13:36:21.687]                           }
[13:36:21.687]                         }
[13:36:21.687]                       }
[13:36:21.687]                       invisible(muffled)
[13:36:21.687]                     }
[13:36:21.687]                     muffleCondition(cond, pattern = "^muffle")
[13:36:21.687]                   }
[13:36:21.687]                 }
[13:36:21.687]                 else {
[13:36:21.687]                   if (TRUE) {
[13:36:21.687]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:21.687]                     {
[13:36:21.687]                       inherits <- base::inherits
[13:36:21.687]                       invokeRestart <- base::invokeRestart
[13:36:21.687]                       is.null <- base::is.null
[13:36:21.687]                       muffled <- FALSE
[13:36:21.687]                       if (inherits(cond, "message")) {
[13:36:21.687]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:21.687]                         if (muffled) 
[13:36:21.687]                           invokeRestart("muffleMessage")
[13:36:21.687]                       }
[13:36:21.687]                       else if (inherits(cond, "warning")) {
[13:36:21.687]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:21.687]                         if (muffled) 
[13:36:21.687]                           invokeRestart("muffleWarning")
[13:36:21.687]                       }
[13:36:21.687]                       else if (inherits(cond, "condition")) {
[13:36:21.687]                         if (!is.null(pattern)) {
[13:36:21.687]                           computeRestarts <- base::computeRestarts
[13:36:21.687]                           grepl <- base::grepl
[13:36:21.687]                           restarts <- computeRestarts(cond)
[13:36:21.687]                           for (restart in restarts) {
[13:36:21.687]                             name <- restart$name
[13:36:21.687]                             if (is.null(name)) 
[13:36:21.687]                               next
[13:36:21.687]                             if (!grepl(pattern, name)) 
[13:36:21.687]                               next
[13:36:21.687]                             invokeRestart(restart)
[13:36:21.687]                             muffled <- TRUE
[13:36:21.687]                             break
[13:36:21.687]                           }
[13:36:21.687]                         }
[13:36:21.687]                       }
[13:36:21.687]                       invisible(muffled)
[13:36:21.687]                     }
[13:36:21.687]                     muffleCondition(cond, pattern = "^muffle")
[13:36:21.687]                   }
[13:36:21.687]                 }
[13:36:21.687]             }
[13:36:21.687]         }))
[13:36:21.687]     }, error = function(ex) {
[13:36:21.687]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:21.687]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:21.687]                 ...future.rng), started = ...future.startTime, 
[13:36:21.687]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:21.687]             version = "1.8"), class = "FutureResult")
[13:36:21.687]     }, finally = {
[13:36:21.687]         if (!identical(...future.workdir, getwd())) 
[13:36:21.687]             setwd(...future.workdir)
[13:36:21.687]         {
[13:36:21.687]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:21.687]                 ...future.oldOptions$nwarnings <- NULL
[13:36:21.687]             }
[13:36:21.687]             base::options(...future.oldOptions)
[13:36:21.687]             if (.Platform$OS.type == "windows") {
[13:36:21.687]                 old_names <- names(...future.oldEnvVars)
[13:36:21.687]                 envs <- base::Sys.getenv()
[13:36:21.687]                 names <- names(envs)
[13:36:21.687]                 common <- intersect(names, old_names)
[13:36:21.687]                 added <- setdiff(names, old_names)
[13:36:21.687]                 removed <- setdiff(old_names, names)
[13:36:21.687]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:21.687]                   envs[common]]
[13:36:21.687]                 NAMES <- toupper(changed)
[13:36:21.687]                 args <- list()
[13:36:21.687]                 for (kk in seq_along(NAMES)) {
[13:36:21.687]                   name <- changed[[kk]]
[13:36:21.687]                   NAME <- NAMES[[kk]]
[13:36:21.687]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:21.687]                     next
[13:36:21.687]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:21.687]                 }
[13:36:21.687]                 NAMES <- toupper(added)
[13:36:21.687]                 for (kk in seq_along(NAMES)) {
[13:36:21.687]                   name <- added[[kk]]
[13:36:21.687]                   NAME <- NAMES[[kk]]
[13:36:21.687]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:21.687]                     next
[13:36:21.687]                   args[[name]] <- ""
[13:36:21.687]                 }
[13:36:21.687]                 NAMES <- toupper(removed)
[13:36:21.687]                 for (kk in seq_along(NAMES)) {
[13:36:21.687]                   name <- removed[[kk]]
[13:36:21.687]                   NAME <- NAMES[[kk]]
[13:36:21.687]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:21.687]                     next
[13:36:21.687]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:21.687]                 }
[13:36:21.687]                 if (length(args) > 0) 
[13:36:21.687]                   base::do.call(base::Sys.setenv, args = args)
[13:36:21.687]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:21.687]             }
[13:36:21.687]             else {
[13:36:21.687]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:21.687]             }
[13:36:21.687]             {
[13:36:21.687]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:21.687]                   0L) {
[13:36:21.687]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:21.687]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:21.687]                   base::options(opts)
[13:36:21.687]                 }
[13:36:21.687]                 {
[13:36:21.687]                   {
[13:36:21.687]                     NULL
[13:36:21.687]                     RNGkind("Mersenne-Twister")
[13:36:21.687]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:21.687]                       inherits = FALSE)
[13:36:21.687]                   }
[13:36:21.687]                   options(future.plan = NULL)
[13:36:21.687]                   if (is.na(NA_character_)) 
[13:36:21.687]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:21.687]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:21.687]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:21.687]                     .init = FALSE)
[13:36:21.687]                 }
[13:36:21.687]             }
[13:36:21.687]         }
[13:36:21.687]     })
[13:36:21.687]     if (TRUE) {
[13:36:21.687]         base::sink(type = "output", split = FALSE)
[13:36:21.687]         if (TRUE) {
[13:36:21.687]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:21.687]         }
[13:36:21.687]         else {
[13:36:21.687]             ...future.result["stdout"] <- base::list(NULL)
[13:36:21.687]         }
[13:36:21.687]         base::close(...future.stdout)
[13:36:21.687]         ...future.stdout <- NULL
[13:36:21.687]     }
[13:36:21.687]     ...future.result$conditions <- ...future.conditions
[13:36:21.687]     ...future.result$finished <- base::Sys.time()
[13:36:21.687]     ...future.result
[13:36:21.687] }
[13:36:21.689] plan(): Setting new future strategy stack:
[13:36:21.689] List of future strategies:
[13:36:21.689] 1. sequential:
[13:36:21.689]    - args: function (..., envir = parent.frame())
[13:36:21.689]    - tweaked: FALSE
[13:36:21.689]    - call: NULL
[13:36:21.690] plan(): nbrOfWorkers() = 1
[13:36:21.690] plan(): Setting new future strategy stack:
[13:36:21.691] List of future strategies:
[13:36:21.691] 1. future:
[13:36:21.691]    - args: function (...)
[13:36:21.691]    - tweaked: FALSE
[13:36:21.691]    - call: plan(foo)
[13:36:21.691] plan(): nbrOfWorkers() = Inf
[13:36:21.691] SequentialFuture started (and completed)
[1] 42
[13:36:21.692] getGlobalsAndPackages() ...
[13:36:21.692] 
[13:36:21.692] - globals: [0] <none>
[13:36:21.692] getGlobalsAndPackages() ... DONE
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: 0x5631e5f260c0
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 5ea7c1a0-3c78-7b84-7b57-f31976200d2a
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:21.694] Packages needed by the future expression (n = 0): <none>
[13:36:21.694] Packages needed by future strategies (n = 0): <none>
[13:36:21.695] {
[13:36:21.695]     {
[13:36:21.695]         {
[13:36:21.695]             ...future.startTime <- base::Sys.time()
[13:36:21.695]             {
[13:36:21.695]                 {
[13:36:21.695]                   {
[13:36:21.695]                     {
[13:36:21.695]                       base::local({
[13:36:21.695]                         has_future <- base::requireNamespace("future", 
[13:36:21.695]                           quietly = TRUE)
[13:36:21.695]                         if (has_future) {
[13:36:21.695]                           ns <- base::getNamespace("future")
[13:36:21.695]                           version <- ns[[".package"]][["version"]]
[13:36:21.695]                           if (is.null(version)) 
[13:36:21.695]                             version <- utils::packageVersion("future")
[13:36:21.695]                         }
[13:36:21.695]                         else {
[13:36:21.695]                           version <- NULL
[13:36:21.695]                         }
[13:36:21.695]                         if (!has_future || version < "1.8.0") {
[13:36:21.695]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:21.695]                             "", base::R.version$version.string), 
[13:36:21.695]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:21.695]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:21.695]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:21.695]                               "release", "version")], collapse = " "), 
[13:36:21.695]                             hostname = base::Sys.info()[["nodename"]])
[13:36:21.695]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:21.695]                             info)
[13:36:21.695]                           info <- base::paste(info, collapse = "; ")
[13:36:21.695]                           if (!has_future) {
[13:36:21.695]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:21.695]                               info)
[13:36:21.695]                           }
[13:36:21.695]                           else {
[13:36:21.695]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:21.695]                               info, version)
[13:36:21.695]                           }
[13:36:21.695]                           base::stop(msg)
[13:36:21.695]                         }
[13:36:21.695]                       })
[13:36:21.695]                     }
[13:36:21.695]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:21.695]                     base::options(mc.cores = 1L)
[13:36:21.695]                   }
[13:36:21.695]                   ...future.strategy.old <- future::plan("list")
[13:36:21.695]                   options(future.plan = NULL)
[13:36:21.695]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:21.695]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:21.695]                 }
[13:36:21.695]                 ...future.workdir <- getwd()
[13:36:21.695]             }
[13:36:21.695]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:21.695]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:21.695]         }
[13:36:21.695]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:21.695]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:21.695]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:21.695]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:21.695]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:21.695]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:21.695]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:21.695]             base::names(...future.oldOptions))
[13:36:21.695]     }
[13:36:21.695]     if (FALSE) {
[13:36:21.695]     }
[13:36:21.695]     else {
[13:36:21.695]         if (TRUE) {
[13:36:21.695]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:21.695]                 open = "w")
[13:36:21.695]         }
[13:36:21.695]         else {
[13:36:21.695]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:21.695]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:21.695]         }
[13:36:21.695]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:21.695]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:21.695]             base::sink(type = "output", split = FALSE)
[13:36:21.695]             base::close(...future.stdout)
[13:36:21.695]         }, add = TRUE)
[13:36:21.695]     }
[13:36:21.695]     ...future.frame <- base::sys.nframe()
[13:36:21.695]     ...future.conditions <- base::list()
[13:36:21.695]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:21.695]     if (FALSE) {
[13:36:21.695]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:21.695]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:21.695]     }
[13:36:21.695]     ...future.result <- base::tryCatch({
[13:36:21.695]         base::withCallingHandlers({
[13:36:21.695]             ...future.value <- base::withVisible(base::local({
[13:36:21.695]                 withCallingHandlers({
[13:36:21.695]                   {
[13:36:21.695]                     42L
[13:36:21.695]                   }
[13:36:21.695]                 }, immediateCondition = function(cond) {
[13:36:21.695]                   save_rds <- function (object, pathname, ...) 
[13:36:21.695]                   {
[13:36:21.695]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:36:21.695]                     if (file_test("-f", pathname_tmp)) {
[13:36:21.695]                       fi_tmp <- file.info(pathname_tmp)
[13:36:21.695]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:36:21.695]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:21.695]                         fi_tmp[["mtime"]])
[13:36:21.695]                     }
[13:36:21.695]                     tryCatch({
[13:36:21.695]                       saveRDS(object, file = pathname_tmp, ...)
[13:36:21.695]                     }, error = function(ex) {
[13:36:21.695]                       msg <- conditionMessage(ex)
[13:36:21.695]                       fi_tmp <- file.info(pathname_tmp)
[13:36:21.695]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:36:21.695]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:21.695]                         fi_tmp[["mtime"]], msg)
[13:36:21.695]                       ex$message <- msg
[13:36:21.695]                       stop(ex)
[13:36:21.695]                     })
[13:36:21.695]                     stopifnot(file_test("-f", pathname_tmp))
[13:36:21.695]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:36:21.695]                     if (!res || file_test("-f", pathname_tmp)) {
[13:36:21.695]                       fi_tmp <- file.info(pathname_tmp)
[13:36:21.695]                       fi <- file.info(pathname)
[13:36:21.695]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:36:21.695]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:21.695]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:36:21.695]                         fi[["size"]], fi[["mtime"]])
[13:36:21.695]                       stop(msg)
[13:36:21.695]                     }
[13:36:21.695]                     invisible(pathname)
[13:36:21.695]                   }
[13:36:21.695]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:36:21.695]                     rootPath = tempdir()) 
[13:36:21.695]                   {
[13:36:21.695]                     obj <- list(time = Sys.time(), condition = cond)
[13:36:21.695]                     file <- tempfile(pattern = class(cond)[1], 
[13:36:21.695]                       tmpdir = path, fileext = ".rds")
[13:36:21.695]                     save_rds(obj, file)
[13:36:21.695]                   }
[13:36:21.695]                   saveImmediateCondition(cond, path = "/tmp/Rtmpi9fE9D/.future/immediateConditions")
[13:36:21.695]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:21.695]                   {
[13:36:21.695]                     inherits <- base::inherits
[13:36:21.695]                     invokeRestart <- base::invokeRestart
[13:36:21.695]                     is.null <- base::is.null
[13:36:21.695]                     muffled <- FALSE
[13:36:21.695]                     if (inherits(cond, "message")) {
[13:36:21.695]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:21.695]                       if (muffled) 
[13:36:21.695]                         invokeRestart("muffleMessage")
[13:36:21.695]                     }
[13:36:21.695]                     else if (inherits(cond, "warning")) {
[13:36:21.695]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:21.695]                       if (muffled) 
[13:36:21.695]                         invokeRestart("muffleWarning")
[13:36:21.695]                     }
[13:36:21.695]                     else if (inherits(cond, "condition")) {
[13:36:21.695]                       if (!is.null(pattern)) {
[13:36:21.695]                         computeRestarts <- base::computeRestarts
[13:36:21.695]                         grepl <- base::grepl
[13:36:21.695]                         restarts <- computeRestarts(cond)
[13:36:21.695]                         for (restart in restarts) {
[13:36:21.695]                           name <- restart$name
[13:36:21.695]                           if (is.null(name)) 
[13:36:21.695]                             next
[13:36:21.695]                           if (!grepl(pattern, name)) 
[13:36:21.695]                             next
[13:36:21.695]                           invokeRestart(restart)
[13:36:21.695]                           muffled <- TRUE
[13:36:21.695]                           break
[13:36:21.695]                         }
[13:36:21.695]                       }
[13:36:21.695]                     }
[13:36:21.695]                     invisible(muffled)
[13:36:21.695]                   }
[13:36:21.695]                   muffleCondition(cond)
[13:36:21.695]                 })
[13:36:21.695]             }))
[13:36:21.695]             future::FutureResult(value = ...future.value$value, 
[13:36:21.695]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:21.695]                   ...future.rng), globalenv = if (FALSE) 
[13:36:21.695]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:21.695]                     ...future.globalenv.names))
[13:36:21.695]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:21.695]         }, condition = base::local({
[13:36:21.695]             c <- base::c
[13:36:21.695]             inherits <- base::inherits
[13:36:21.695]             invokeRestart <- base::invokeRestart
[13:36:21.695]             length <- base::length
[13:36:21.695]             list <- base::list
[13:36:21.695]             seq.int <- base::seq.int
[13:36:21.695]             signalCondition <- base::signalCondition
[13:36:21.695]             sys.calls <- base::sys.calls
[13:36:21.695]             `[[` <- base::`[[`
[13:36:21.695]             `+` <- base::`+`
[13:36:21.695]             `<<-` <- base::`<<-`
[13:36:21.695]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:21.695]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:21.695]                   3L)]
[13:36:21.695]             }
[13:36:21.695]             function(cond) {
[13:36:21.695]                 is_error <- inherits(cond, "error")
[13:36:21.695]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:21.695]                   NULL)
[13:36:21.695]                 if (is_error) {
[13:36:21.695]                   sessionInformation <- function() {
[13:36:21.695]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:21.695]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:21.695]                       search = base::search(), system = base::Sys.info())
[13:36:21.695]                   }
[13:36:21.695]                   ...future.conditions[[length(...future.conditions) + 
[13:36:21.695]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:21.695]                     cond$call), session = sessionInformation(), 
[13:36:21.695]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:21.695]                   signalCondition(cond)
[13:36:21.695]                 }
[13:36:21.695]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:21.695]                 "immediateCondition"))) {
[13:36:21.695]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:21.695]                   ...future.conditions[[length(...future.conditions) + 
[13:36:21.695]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:21.695]                   if (TRUE && !signal) {
[13:36:21.695]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:21.695]                     {
[13:36:21.695]                       inherits <- base::inherits
[13:36:21.695]                       invokeRestart <- base::invokeRestart
[13:36:21.695]                       is.null <- base::is.null
[13:36:21.695]                       muffled <- FALSE
[13:36:21.695]                       if (inherits(cond, "message")) {
[13:36:21.695]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:21.695]                         if (muffled) 
[13:36:21.695]                           invokeRestart("muffleMessage")
[13:36:21.695]                       }
[13:36:21.695]                       else if (inherits(cond, "warning")) {
[13:36:21.695]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:21.695]                         if (muffled) 
[13:36:21.695]                           invokeRestart("muffleWarning")
[13:36:21.695]                       }
[13:36:21.695]                       else if (inherits(cond, "condition")) {
[13:36:21.695]                         if (!is.null(pattern)) {
[13:36:21.695]                           computeRestarts <- base::computeRestarts
[13:36:21.695]                           grepl <- base::grepl
[13:36:21.695]                           restarts <- computeRestarts(cond)
[13:36:21.695]                           for (restart in restarts) {
[13:36:21.695]                             name <- restart$name
[13:36:21.695]                             if (is.null(name)) 
[13:36:21.695]                               next
[13:36:21.695]                             if (!grepl(pattern, name)) 
[13:36:21.695]                               next
[13:36:21.695]                             invokeRestart(restart)
[13:36:21.695]                             muffled <- TRUE
[13:36:21.695]                             break
[13:36:21.695]                           }
[13:36:21.695]                         }
[13:36:21.695]                       }
[13:36:21.695]                       invisible(muffled)
[13:36:21.695]                     }
[13:36:21.695]                     muffleCondition(cond, pattern = "^muffle")
[13:36:21.695]                   }
[13:36:21.695]                 }
[13:36:21.695]                 else {
[13:36:21.695]                   if (TRUE) {
[13:36:21.695]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:21.695]                     {
[13:36:21.695]                       inherits <- base::inherits
[13:36:21.695]                       invokeRestart <- base::invokeRestart
[13:36:21.695]                       is.null <- base::is.null
[13:36:21.695]                       muffled <- FALSE
[13:36:21.695]                       if (inherits(cond, "message")) {
[13:36:21.695]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:21.695]                         if (muffled) 
[13:36:21.695]                           invokeRestart("muffleMessage")
[13:36:21.695]                       }
[13:36:21.695]                       else if (inherits(cond, "warning")) {
[13:36:21.695]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:21.695]                         if (muffled) 
[13:36:21.695]                           invokeRestart("muffleWarning")
[13:36:21.695]                       }
[13:36:21.695]                       else if (inherits(cond, "condition")) {
[13:36:21.695]                         if (!is.null(pattern)) {
[13:36:21.695]                           computeRestarts <- base::computeRestarts
[13:36:21.695]                           grepl <- base::grepl
[13:36:21.695]                           restarts <- computeRestarts(cond)
[13:36:21.695]                           for (restart in restarts) {
[13:36:21.695]                             name <- restart$name
[13:36:21.695]                             if (is.null(name)) 
[13:36:21.695]                               next
[13:36:21.695]                             if (!grepl(pattern, name)) 
[13:36:21.695]                               next
[13:36:21.695]                             invokeRestart(restart)
[13:36:21.695]                             muffled <- TRUE
[13:36:21.695]                             break
[13:36:21.695]                           }
[13:36:21.695]                         }
[13:36:21.695]                       }
[13:36:21.695]                       invisible(muffled)
[13:36:21.695]                     }
[13:36:21.695]                     muffleCondition(cond, pattern = "^muffle")
[13:36:21.695]                   }
[13:36:21.695]                 }
[13:36:21.695]             }
[13:36:21.695]         }))
[13:36:21.695]     }, error = function(ex) {
[13:36:21.695]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:21.695]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:21.695]                 ...future.rng), started = ...future.startTime, 
[13:36:21.695]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:21.695]             version = "1.8"), class = "FutureResult")
[13:36:21.695]     }, finally = {
[13:36:21.695]         if (!identical(...future.workdir, getwd())) 
[13:36:21.695]             setwd(...future.workdir)
[13:36:21.695]         {
[13:36:21.695]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:21.695]                 ...future.oldOptions$nwarnings <- NULL
[13:36:21.695]             }
[13:36:21.695]             base::options(...future.oldOptions)
[13:36:21.695]             if (.Platform$OS.type == "windows") {
[13:36:21.695]                 old_names <- names(...future.oldEnvVars)
[13:36:21.695]                 envs <- base::Sys.getenv()
[13:36:21.695]                 names <- names(envs)
[13:36:21.695]                 common <- intersect(names, old_names)
[13:36:21.695]                 added <- setdiff(names, old_names)
[13:36:21.695]                 removed <- setdiff(old_names, names)
[13:36:21.695]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:21.695]                   envs[common]]
[13:36:21.695]                 NAMES <- toupper(changed)
[13:36:21.695]                 args <- list()
[13:36:21.695]                 for (kk in seq_along(NAMES)) {
[13:36:21.695]                   name <- changed[[kk]]
[13:36:21.695]                   NAME <- NAMES[[kk]]
[13:36:21.695]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:21.695]                     next
[13:36:21.695]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:21.695]                 }
[13:36:21.695]                 NAMES <- toupper(added)
[13:36:21.695]                 for (kk in seq_along(NAMES)) {
[13:36:21.695]                   name <- added[[kk]]
[13:36:21.695]                   NAME <- NAMES[[kk]]
[13:36:21.695]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:21.695]                     next
[13:36:21.695]                   args[[name]] <- ""
[13:36:21.695]                 }
[13:36:21.695]                 NAMES <- toupper(removed)
[13:36:21.695]                 for (kk in seq_along(NAMES)) {
[13:36:21.695]                   name <- removed[[kk]]
[13:36:21.695]                   NAME <- NAMES[[kk]]
[13:36:21.695]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:21.695]                     next
[13:36:21.695]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:21.695]                 }
[13:36:21.695]                 if (length(args) > 0) 
[13:36:21.695]                   base::do.call(base::Sys.setenv, args = args)
[13:36:21.695]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:21.695]             }
[13:36:21.695]             else {
[13:36:21.695]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:21.695]             }
[13:36:21.695]             {
[13:36:21.695]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:21.695]                   0L) {
[13:36:21.695]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:21.695]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:21.695]                   base::options(opts)
[13:36:21.695]                 }
[13:36:21.695]                 {
[13:36:21.695]                   {
[13:36:21.695]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:21.695]                     NULL
[13:36:21.695]                   }
[13:36:21.695]                   options(future.plan = NULL)
[13:36:21.695]                   if (is.na(NA_character_)) 
[13:36:21.695]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:21.695]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:21.695]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:21.695]                     .init = FALSE)
[13:36:21.695]                 }
[13:36:21.695]             }
[13:36:21.695]         }
[13:36:21.695]     })
[13:36:21.695]     if (TRUE) {
[13:36:21.695]         base::sink(type = "output", split = FALSE)
[13:36:21.695]         if (TRUE) {
[13:36:21.695]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:21.695]         }
[13:36:21.695]         else {
[13:36:21.695]             ...future.result["stdout"] <- base::list(NULL)
[13:36:21.695]         }
[13:36:21.695]         base::close(...future.stdout)
[13:36:21.695]         ...future.stdout <- NULL
[13:36:21.695]     }
[13:36:21.695]     ...future.result$conditions <- ...future.conditions
[13:36:21.695]     ...future.result$finished <- base::Sys.time()
[13:36:21.695]     ...future.result
[13:36:21.695] }
[13:36:21.697] requestCore(): workers = 2
[13:36:21.700] MulticoreFuture started
[13:36:21.701] plan(): Setting new future strategy stack:
[13:36:21.701] List of future strategies:
[13:36:21.701] 1. sequential:
[13:36:21.701]    - args: function (..., envir = parent.frame())
[13:36:21.701]    - tweaked: FALSE
[13:36:21.701]    - call: NULL
[13:36:21.702] result() for MulticoreFuture ...
[13:36:21.702] plan(): nbrOfWorkers() = 1
[13:36:21.704] plan(): Setting new future strategy stack:
[13:36:21.704] List of future strategies:
[13:36:21.704] 1. future:
[13:36:21.704]    - args: function (...)
[13:36:21.704]    - tweaked: FALSE
[13:36:21.704]    - call: plan(foo)
[13:36:21.705] plan(): nbrOfWorkers() = Inf
[13:36:21.706] result() for MulticoreFuture ...
[13:36:21.706] result() for MulticoreFuture ... done
[13:36:21.706] result() for MulticoreFuture ... done
[13:36:21.706] result() for MulticoreFuture ...
[13:36:21.707] result() for MulticoreFuture ... done
[1] 42
[13:36:21.708] getGlobalsAndPackages() ...
[13:36:21.708] 
[13:36:21.708] - globals: [0] <none>
[13:36:21.708] getGlobalsAndPackages() ... DONE
[13:36:21.709] Packages needed by the future expression (n = 0): <none>
[13:36:21.709] Packages needed by future strategies (n = 0): <none>
[13:36:21.710] {
[13:36:21.710]     {
[13:36:21.710]         {
[13:36:21.710]             ...future.startTime <- base::Sys.time()
[13:36:21.710]             {
[13:36:21.710]                 {
[13:36:21.710]                   {
[13:36:21.710]                     {
[13:36:21.710]                       base::local({
[13:36:21.710]                         has_future <- base::requireNamespace("future", 
[13:36:21.710]                           quietly = TRUE)
[13:36:21.710]                         if (has_future) {
[13:36:21.710]                           ns <- base::getNamespace("future")
[13:36:21.710]                           version <- ns[[".package"]][["version"]]
[13:36:21.710]                           if (is.null(version)) 
[13:36:21.710]                             version <- utils::packageVersion("future")
[13:36:21.710]                         }
[13:36:21.710]                         else {
[13:36:21.710]                           version <- NULL
[13:36:21.710]                         }
[13:36:21.710]                         if (!has_future || version < "1.8.0") {
[13:36:21.710]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:21.710]                             "", base::R.version$version.string), 
[13:36:21.710]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:21.710]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:21.710]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:21.710]                               "release", "version")], collapse = " "), 
[13:36:21.710]                             hostname = base::Sys.info()[["nodename"]])
[13:36:21.710]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:21.710]                             info)
[13:36:21.710]                           info <- base::paste(info, collapse = "; ")
[13:36:21.710]                           if (!has_future) {
[13:36:21.710]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:21.710]                               info)
[13:36:21.710]                           }
[13:36:21.710]                           else {
[13:36:21.710]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:21.710]                               info, version)
[13:36:21.710]                           }
[13:36:21.710]                           base::stop(msg)
[13:36:21.710]                         }
[13:36:21.710]                       })
[13:36:21.710]                     }
[13:36:21.710]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:21.710]                     base::options(mc.cores = 1L)
[13:36:21.710]                   }
[13:36:21.710]                   ...future.strategy.old <- future::plan("list")
[13:36:21.710]                   options(future.plan = NULL)
[13:36:21.710]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:21.710]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:21.710]                 }
[13:36:21.710]                 ...future.workdir <- getwd()
[13:36:21.710]             }
[13:36:21.710]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:21.710]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:21.710]         }
[13:36:21.710]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:21.710]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:21.710]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:21.710]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:21.710]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:21.710]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:21.710]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:21.710]             base::names(...future.oldOptions))
[13:36:21.710]     }
[13:36:21.710]     if (FALSE) {
[13:36:21.710]     }
[13:36:21.710]     else {
[13:36:21.710]         if (TRUE) {
[13:36:21.710]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:21.710]                 open = "w")
[13:36:21.710]         }
[13:36:21.710]         else {
[13:36:21.710]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:21.710]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:21.710]         }
[13:36:21.710]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:21.710]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:21.710]             base::sink(type = "output", split = FALSE)
[13:36:21.710]             base::close(...future.stdout)
[13:36:21.710]         }, add = TRUE)
[13:36:21.710]     }
[13:36:21.710]     ...future.frame <- base::sys.nframe()
[13:36:21.710]     ...future.conditions <- base::list()
[13:36:21.710]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:21.710]     if (FALSE) {
[13:36:21.710]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:21.710]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:21.710]     }
[13:36:21.710]     ...future.result <- base::tryCatch({
[13:36:21.710]         base::withCallingHandlers({
[13:36:21.710]             ...future.value <- base::withVisible(base::local({
[13:36:21.710]                 withCallingHandlers({
[13:36:21.710]                   {
[13:36:21.710]                     42L
[13:36:21.710]                   }
[13:36:21.710]                 }, immediateCondition = function(cond) {
[13:36:21.710]                   save_rds <- function (object, pathname, ...) 
[13:36:21.710]                   {
[13:36:21.710]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:36:21.710]                     if (file_test("-f", pathname_tmp)) {
[13:36:21.710]                       fi_tmp <- file.info(pathname_tmp)
[13:36:21.710]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:36:21.710]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:21.710]                         fi_tmp[["mtime"]])
[13:36:21.710]                     }
[13:36:21.710]                     tryCatch({
[13:36:21.710]                       saveRDS(object, file = pathname_tmp, ...)
[13:36:21.710]                     }, error = function(ex) {
[13:36:21.710]                       msg <- conditionMessage(ex)
[13:36:21.710]                       fi_tmp <- file.info(pathname_tmp)
[13:36:21.710]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:36:21.710]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:21.710]                         fi_tmp[["mtime"]], msg)
[13:36:21.710]                       ex$message <- msg
[13:36:21.710]                       stop(ex)
[13:36:21.710]                     })
[13:36:21.710]                     stopifnot(file_test("-f", pathname_tmp))
[13:36:21.710]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:36:21.710]                     if (!res || file_test("-f", pathname_tmp)) {
[13:36:21.710]                       fi_tmp <- file.info(pathname_tmp)
[13:36:21.710]                       fi <- file.info(pathname)
[13:36:21.710]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:36:21.710]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:21.710]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:36:21.710]                         fi[["size"]], fi[["mtime"]])
[13:36:21.710]                       stop(msg)
[13:36:21.710]                     }
[13:36:21.710]                     invisible(pathname)
[13:36:21.710]                   }
[13:36:21.710]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:36:21.710]                     rootPath = tempdir()) 
[13:36:21.710]                   {
[13:36:21.710]                     obj <- list(time = Sys.time(), condition = cond)
[13:36:21.710]                     file <- tempfile(pattern = class(cond)[1], 
[13:36:21.710]                       tmpdir = path, fileext = ".rds")
[13:36:21.710]                     save_rds(obj, file)
[13:36:21.710]                   }
[13:36:21.710]                   saveImmediateCondition(cond, path = "/tmp/Rtmpi9fE9D/.future/immediateConditions")
[13:36:21.710]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:21.710]                   {
[13:36:21.710]                     inherits <- base::inherits
[13:36:21.710]                     invokeRestart <- base::invokeRestart
[13:36:21.710]                     is.null <- base::is.null
[13:36:21.710]                     muffled <- FALSE
[13:36:21.710]                     if (inherits(cond, "message")) {
[13:36:21.710]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:21.710]                       if (muffled) 
[13:36:21.710]                         invokeRestart("muffleMessage")
[13:36:21.710]                     }
[13:36:21.710]                     else if (inherits(cond, "warning")) {
[13:36:21.710]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:21.710]                       if (muffled) 
[13:36:21.710]                         invokeRestart("muffleWarning")
[13:36:21.710]                     }
[13:36:21.710]                     else if (inherits(cond, "condition")) {
[13:36:21.710]                       if (!is.null(pattern)) {
[13:36:21.710]                         computeRestarts <- base::computeRestarts
[13:36:21.710]                         grepl <- base::grepl
[13:36:21.710]                         restarts <- computeRestarts(cond)
[13:36:21.710]                         for (restart in restarts) {
[13:36:21.710]                           name <- restart$name
[13:36:21.710]                           if (is.null(name)) 
[13:36:21.710]                             next
[13:36:21.710]                           if (!grepl(pattern, name)) 
[13:36:21.710]                             next
[13:36:21.710]                           invokeRestart(restart)
[13:36:21.710]                           muffled <- TRUE
[13:36:21.710]                           break
[13:36:21.710]                         }
[13:36:21.710]                       }
[13:36:21.710]                     }
[13:36:21.710]                     invisible(muffled)
[13:36:21.710]                   }
[13:36:21.710]                   muffleCondition(cond)
[13:36:21.710]                 })
[13:36:21.710]             }))
[13:36:21.710]             future::FutureResult(value = ...future.value$value, 
[13:36:21.710]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:21.710]                   ...future.rng), globalenv = if (FALSE) 
[13:36:21.710]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:21.710]                     ...future.globalenv.names))
[13:36:21.710]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:21.710]         }, condition = base::local({
[13:36:21.710]             c <- base::c
[13:36:21.710]             inherits <- base::inherits
[13:36:21.710]             invokeRestart <- base::invokeRestart
[13:36:21.710]             length <- base::length
[13:36:21.710]             list <- base::list
[13:36:21.710]             seq.int <- base::seq.int
[13:36:21.710]             signalCondition <- base::signalCondition
[13:36:21.710]             sys.calls <- base::sys.calls
[13:36:21.710]             `[[` <- base::`[[`
[13:36:21.710]             `+` <- base::`+`
[13:36:21.710]             `<<-` <- base::`<<-`
[13:36:21.710]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:21.710]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:21.710]                   3L)]
[13:36:21.710]             }
[13:36:21.710]             function(cond) {
[13:36:21.710]                 is_error <- inherits(cond, "error")
[13:36:21.710]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:21.710]                   NULL)
[13:36:21.710]                 if (is_error) {
[13:36:21.710]                   sessionInformation <- function() {
[13:36:21.710]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:21.710]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:21.710]                       search = base::search(), system = base::Sys.info())
[13:36:21.710]                   }
[13:36:21.710]                   ...future.conditions[[length(...future.conditions) + 
[13:36:21.710]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:21.710]                     cond$call), session = sessionInformation(), 
[13:36:21.710]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:21.710]                   signalCondition(cond)
[13:36:21.710]                 }
[13:36:21.710]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:21.710]                 "immediateCondition"))) {
[13:36:21.710]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:21.710]                   ...future.conditions[[length(...future.conditions) + 
[13:36:21.710]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:21.710]                   if (TRUE && !signal) {
[13:36:21.710]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:21.710]                     {
[13:36:21.710]                       inherits <- base::inherits
[13:36:21.710]                       invokeRestart <- base::invokeRestart
[13:36:21.710]                       is.null <- base::is.null
[13:36:21.710]                       muffled <- FALSE
[13:36:21.710]                       if (inherits(cond, "message")) {
[13:36:21.710]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:21.710]                         if (muffled) 
[13:36:21.710]                           invokeRestart("muffleMessage")
[13:36:21.710]                       }
[13:36:21.710]                       else if (inherits(cond, "warning")) {
[13:36:21.710]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:21.710]                         if (muffled) 
[13:36:21.710]                           invokeRestart("muffleWarning")
[13:36:21.710]                       }
[13:36:21.710]                       else if (inherits(cond, "condition")) {
[13:36:21.710]                         if (!is.null(pattern)) {
[13:36:21.710]                           computeRestarts <- base::computeRestarts
[13:36:21.710]                           grepl <- base::grepl
[13:36:21.710]                           restarts <- computeRestarts(cond)
[13:36:21.710]                           for (restart in restarts) {
[13:36:21.710]                             name <- restart$name
[13:36:21.710]                             if (is.null(name)) 
[13:36:21.710]                               next
[13:36:21.710]                             if (!grepl(pattern, name)) 
[13:36:21.710]                               next
[13:36:21.710]                             invokeRestart(restart)
[13:36:21.710]                             muffled <- TRUE
[13:36:21.710]                             break
[13:36:21.710]                           }
[13:36:21.710]                         }
[13:36:21.710]                       }
[13:36:21.710]                       invisible(muffled)
[13:36:21.710]                     }
[13:36:21.710]                     muffleCondition(cond, pattern = "^muffle")
[13:36:21.710]                   }
[13:36:21.710]                 }
[13:36:21.710]                 else {
[13:36:21.710]                   if (TRUE) {
[13:36:21.710]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:21.710]                     {
[13:36:21.710]                       inherits <- base::inherits
[13:36:21.710]                       invokeRestart <- base::invokeRestart
[13:36:21.710]                       is.null <- base::is.null
[13:36:21.710]                       muffled <- FALSE
[13:36:21.710]                       if (inherits(cond, "message")) {
[13:36:21.710]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:21.710]                         if (muffled) 
[13:36:21.710]                           invokeRestart("muffleMessage")
[13:36:21.710]                       }
[13:36:21.710]                       else if (inherits(cond, "warning")) {
[13:36:21.710]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:21.710]                         if (muffled) 
[13:36:21.710]                           invokeRestart("muffleWarning")
[13:36:21.710]                       }
[13:36:21.710]                       else if (inherits(cond, "condition")) {
[13:36:21.710]                         if (!is.null(pattern)) {
[13:36:21.710]                           computeRestarts <- base::computeRestarts
[13:36:21.710]                           grepl <- base::grepl
[13:36:21.710]                           restarts <- computeRestarts(cond)
[13:36:21.710]                           for (restart in restarts) {
[13:36:21.710]                             name <- restart$name
[13:36:21.710]                             if (is.null(name)) 
[13:36:21.710]                               next
[13:36:21.710]                             if (!grepl(pattern, name)) 
[13:36:21.710]                               next
[13:36:21.710]                             invokeRestart(restart)
[13:36:21.710]                             muffled <- TRUE
[13:36:21.710]                             break
[13:36:21.710]                           }
[13:36:21.710]                         }
[13:36:21.710]                       }
[13:36:21.710]                       invisible(muffled)
[13:36:21.710]                     }
[13:36:21.710]                     muffleCondition(cond, pattern = "^muffle")
[13:36:21.710]                   }
[13:36:21.710]                 }
[13:36:21.710]             }
[13:36:21.710]         }))
[13:36:21.710]     }, error = function(ex) {
[13:36:21.710]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:21.710]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:21.710]                 ...future.rng), started = ...future.startTime, 
[13:36:21.710]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:21.710]             version = "1.8"), class = "FutureResult")
[13:36:21.710]     }, finally = {
[13:36:21.710]         if (!identical(...future.workdir, getwd())) 
[13:36:21.710]             setwd(...future.workdir)
[13:36:21.710]         {
[13:36:21.710]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:21.710]                 ...future.oldOptions$nwarnings <- NULL
[13:36:21.710]             }
[13:36:21.710]             base::options(...future.oldOptions)
[13:36:21.710]             if (.Platform$OS.type == "windows") {
[13:36:21.710]                 old_names <- names(...future.oldEnvVars)
[13:36:21.710]                 envs <- base::Sys.getenv()
[13:36:21.710]                 names <- names(envs)
[13:36:21.710]                 common <- intersect(names, old_names)
[13:36:21.710]                 added <- setdiff(names, old_names)
[13:36:21.710]                 removed <- setdiff(old_names, names)
[13:36:21.710]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:21.710]                   envs[common]]
[13:36:21.710]                 NAMES <- toupper(changed)
[13:36:21.710]                 args <- list()
[13:36:21.710]                 for (kk in seq_along(NAMES)) {
[13:36:21.710]                   name <- changed[[kk]]
[13:36:21.710]                   NAME <- NAMES[[kk]]
[13:36:21.710]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:21.710]                     next
[13:36:21.710]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:21.710]                 }
[13:36:21.710]                 NAMES <- toupper(added)
[13:36:21.710]                 for (kk in seq_along(NAMES)) {
[13:36:21.710]                   name <- added[[kk]]
[13:36:21.710]                   NAME <- NAMES[[kk]]
[13:36:21.710]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:21.710]                     next
[13:36:21.710]                   args[[name]] <- ""
[13:36:21.710]                 }
[13:36:21.710]                 NAMES <- toupper(removed)
[13:36:21.710]                 for (kk in seq_along(NAMES)) {
[13:36:21.710]                   name <- removed[[kk]]
[13:36:21.710]                   NAME <- NAMES[[kk]]
[13:36:21.710]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:21.710]                     next
[13:36:21.710]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:21.710]                 }
[13:36:21.710]                 if (length(args) > 0) 
[13:36:21.710]                   base::do.call(base::Sys.setenv, args = args)
[13:36:21.710]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:21.710]             }
[13:36:21.710]             else {
[13:36:21.710]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:21.710]             }
[13:36:21.710]             {
[13:36:21.710]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:21.710]                   0L) {
[13:36:21.710]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:21.710]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:21.710]                   base::options(opts)
[13:36:21.710]                 }
[13:36:21.710]                 {
[13:36:21.710]                   {
[13:36:21.710]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:21.710]                     NULL
[13:36:21.710]                   }
[13:36:21.710]                   options(future.plan = NULL)
[13:36:21.710]                   if (is.na(NA_character_)) 
[13:36:21.710]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:21.710]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:21.710]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:21.710]                     .init = FALSE)
[13:36:21.710]                 }
[13:36:21.710]             }
[13:36:21.710]         }
[13:36:21.710]     })
[13:36:21.710]     if (TRUE) {
[13:36:21.710]         base::sink(type = "output", split = FALSE)
[13:36:21.710]         if (TRUE) {
[13:36:21.710]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:21.710]         }
[13:36:21.710]         else {
[13:36:21.710]             ...future.result["stdout"] <- base::list(NULL)
[13:36:21.710]         }
[13:36:21.710]         base::close(...future.stdout)
[13:36:21.710]         ...future.stdout <- NULL
[13:36:21.710]     }
[13:36:21.710]     ...future.result$conditions <- ...future.conditions
[13:36:21.710]     ...future.result$finished <- base::Sys.time()
[13:36:21.710]     ...future.result
[13:36:21.710] }
[13:36:21.712] requestCore(): workers = 2
[13:36:21.715] MulticoreFuture started
[13:36:21.715] result() for MulticoreFuture ...
[13:36:21.716] plan(): Setting new future strategy stack:
[13:36:21.716] List of future strategies:
[13:36:21.716] 1. sequential:
[13:36:21.716]    - args: function (..., envir = parent.frame())
[13:36:21.716]    - tweaked: FALSE
[13:36:21.716]    - call: NULL
[13:36:21.717] plan(): nbrOfWorkers() = 1
[13:36:21.718] plan(): Setting new future strategy stack:
[13:36:21.719] List of future strategies:
[13:36:21.719] 1. future:
[13:36:21.719]    - args: function (...)
[13:36:21.719]    - tweaked: FALSE
[13:36:21.719]    - call: plan(foo)
[13:36:21.719] plan(): nbrOfWorkers() = Inf
[13:36:21.720] result() for MulticoreFuture ...
[13:36:21.720] result() for MulticoreFuture ... done
[13:36:21.720] result() for MulticoreFuture ... done
[13:36:21.720] result() for MulticoreFuture ...
[13:36:21.721] result() for MulticoreFuture ... done
[1] 42
> 
> message("*** Future class - exception ... DONE")
*** Future class - exception ... DONE
> 
> message("*** Future class ... DONE")
*** Future class ... DONE
> 
> source("incl/end.R")
[13:36:21.722] plan(): Setting new future strategy stack:
[13:36:21.722] List of future strategies:
[13:36:21.722] 1. FutureStrategy:
[13:36:21.722]    - args: function (..., envir = parent.frame())
[13:36:21.722]    - tweaked: FALSE
[13:36:21.722]    - call: future::plan(oplan)
[13:36:21.723] plan(): nbrOfWorkers() = 1
> 
