
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[10:33:25.420] plan(): Setting new future strategy stack:
[10:33:25.421] List of future strategies:
[10:33:25.421] 1. sequential:
[10:33:25.421]    - args: function (..., envir = parent.frame())
[10:33:25.421]    - tweaked: FALSE
[10:33:25.421]    - call: future::plan("sequential")
[10:33:25.434] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> message("*** multisession() ...")
*** multisession() ...
> 
> for (cores in 1:availCores) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   message(sprintf("Testing with %d cores ...", cores))
+   options(mc.cores = cores)
+ 
+   ## No global variables
+   f <- multisession({
+     42L
+   })
+   print(f)
+   stopifnot(inherits(f, "ClusterFuture") || (inherits(f, "SequentialFuture") && f$lazy))
+ 
+   print(resolved(f))
+   y <- value(f)
+   print(y)
+   stopifnot(y == 42L)
+ 
+ 
+   ## A global variable
+   a <- 0
+   f <- multisession({
+     b <- 3
+     c <- 2
+     a * b * c
+   }, globals = TRUE)
+   print(f)
+ 
+ 
+   ## A multisession future is evaluated in a separate
+   ## R session process.  Changing the value of a global
+   ## variable should not affect the result of the
+   ## future.
+   a <- 7  ## Make sure globals are frozen
+   v <- value(f)
+   print(v)
+   stopifnot(v == 0)
+ 
+ 
+   message("*** multisession() with globals and blocking")
+   x <- listenv()
+   for (ii in 2:1) {
+     message(sprintf(" - Creating multisession future #%d ...", ii))
+     x[[ii]] <- multisession({ ii }, globals = TRUE)
+   }
+   message(sprintf(" - Resolving %d multisession futures", length(x)))
+   v <- sapply(x, FUN = value)
+   stopifnot(all(v == 1:2))
+ 
+ 
+   message("*** multisession() - workers inherit .libPaths()")
+ 
+   libs <- value(future(.libPaths()))
+   str(list(
+     main = .libPaths(),
+     workers = libs
+   ))
+   stopifnot(identical(libs, .libPaths()))
+ 
+   message("*** multisession() and errors")
+   f <- multisession({
+     stop("Whoops!")
+     1
+   })
+   print(f)
+   v <- value(f, signal = FALSE)
+   print(v)
+   stopifnot(inherits(v, "simpleError"))
+ 
+   res <- try(value(f), silent = TRUE)
+   print(res)
+   stopifnot(inherits(res, "try-error"))
+ 
+   ## Error is repeated
+   res <- try(value(f), silent = TRUE)
+   print(res)
+   stopifnot(inherits(res, "try-error"))
+ 
+   ## Custom error class
+   f <- multisession({
+     stop(structure(list(message = "boom"),
+                    class = c("MyError", "error", "condition")))
+   })
+   print(f)
+   v <- value(f, signal = FALSE)
+   print(v)
+   stopifnot(inherits(v, "error"), inherits(v, "MyError"))
+ 
+   ## Make sure error is signaled
+   res <- tryCatch(value(f), error = identity)
+   stopifnot(inherits(res, "error"))
+ 
+   ## Issue #200: Custom condition class attributes are lost
+   ## https://github.com/HenrikBengtsson/Wishlist-for-R/issues/57
+   ## stopifnot(inherits(res, "MyError"))    
+ 
+   message(sprintf("Testing with %d cores ... DONE", cores))
+ } ## for (cores ...)
Testing with 1 cores ...
[10:33:25.485] getGlobalsAndPackages() ...
[10:33:25.485] Searching for globals...
[10:33:25.488] - globals found: [1] ‘{’
[10:33:25.488] Searching for globals ... DONE
[10:33:25.489] Resolving globals: FALSE
[10:33:25.489] 
[10:33:25.489] 
[10:33:25.489] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: TRUE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 387602f3-bd1b-4a3f-3d8d-305a236eb3bb
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:33:25.491] Packages needed by the future expression (n = 0): <none>
[10:33:25.491] Packages needed by future strategies (n = 0): <none>
[10:33:25.492] {
[10:33:25.492]     {
[10:33:25.492]         {
[10:33:25.492]             ...future.startTime <- base::Sys.time()
[10:33:25.492]             {
[10:33:25.492]                 {
[10:33:25.492]                   {
[10:33:25.492]                     base::local({
[10:33:25.492]                       has_future <- base::requireNamespace("future", 
[10:33:25.492]                         quietly = TRUE)
[10:33:25.492]                       if (has_future) {
[10:33:25.492]                         ns <- base::getNamespace("future")
[10:33:25.492]                         version <- ns[[".package"]][["version"]]
[10:33:25.492]                         if (is.null(version)) 
[10:33:25.492]                           version <- utils::packageVersion("future")
[10:33:25.492]                       }
[10:33:25.492]                       else {
[10:33:25.492]                         version <- NULL
[10:33:25.492]                       }
[10:33:25.492]                       if (!has_future || version < "1.8.0") {
[10:33:25.492]                         info <- base::c(r_version = base::gsub("R version ", 
[10:33:25.492]                           "", base::R.version$version.string), 
[10:33:25.492]                           platform = base::sprintf("%s (%s-bit)", 
[10:33:25.492]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:25.492]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:25.492]                             "release", "version")], collapse = " "), 
[10:33:25.492]                           hostname = base::Sys.info()[["nodename"]])
[10:33:25.492]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:33:25.492]                           info)
[10:33:25.492]                         info <- base::paste(info, collapse = "; ")
[10:33:25.492]                         if (!has_future) {
[10:33:25.492]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:25.492]                             info)
[10:33:25.492]                         }
[10:33:25.492]                         else {
[10:33:25.492]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:25.492]                             info, version)
[10:33:25.492]                         }
[10:33:25.492]                         base::stop(msg)
[10:33:25.492]                       }
[10:33:25.492]                     })
[10:33:25.492]                   }
[10:33:25.492]                   ...future.strategy.old <- future::plan("list")
[10:33:25.492]                   options(future.plan = NULL)
[10:33:25.492]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:25.492]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:33:25.492]                 }
[10:33:25.492]                 ...future.workdir <- getwd()
[10:33:25.492]             }
[10:33:25.492]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:25.492]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:25.492]         }
[10:33:25.492]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:33:25.492]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:25.492]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:33:25.492]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:33:25.492]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:25.492]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:25.492]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:25.492]             base::names(...future.oldOptions))
[10:33:25.492]     }
[10:33:25.492]     if (FALSE) {
[10:33:25.492]     }
[10:33:25.492]     else {
[10:33:25.492]         if (TRUE) {
[10:33:25.492]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:25.492]                 open = "w")
[10:33:25.492]         }
[10:33:25.492]         else {
[10:33:25.492]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:25.492]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:25.492]         }
[10:33:25.492]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:25.492]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:25.492]             base::sink(type = "output", split = FALSE)
[10:33:25.492]             base::close(...future.stdout)
[10:33:25.492]         }, add = TRUE)
[10:33:25.492]     }
[10:33:25.492]     ...future.frame <- base::sys.nframe()
[10:33:25.492]     ...future.conditions <- base::list()
[10:33:25.492]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:25.492]     if (FALSE) {
[10:33:25.492]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:25.492]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:25.492]     }
[10:33:25.492]     ...future.result <- base::tryCatch({
[10:33:25.492]         base::withCallingHandlers({
[10:33:25.492]             ...future.value <- base::withVisible(base::local({
[10:33:25.492]                 42L
[10:33:25.492]             }))
[10:33:25.492]             future::FutureResult(value = ...future.value$value, 
[10:33:25.492]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:25.492]                   ...future.rng), globalenv = if (FALSE) 
[10:33:25.492]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:25.492]                     ...future.globalenv.names))
[10:33:25.492]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:25.492]         }, condition = base::local({
[10:33:25.492]             c <- base::c
[10:33:25.492]             inherits <- base::inherits
[10:33:25.492]             invokeRestart <- base::invokeRestart
[10:33:25.492]             length <- base::length
[10:33:25.492]             list <- base::list
[10:33:25.492]             seq.int <- base::seq.int
[10:33:25.492]             signalCondition <- base::signalCondition
[10:33:25.492]             sys.calls <- base::sys.calls
[10:33:25.492]             `[[` <- base::`[[`
[10:33:25.492]             `+` <- base::`+`
[10:33:25.492]             `<<-` <- base::`<<-`
[10:33:25.492]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:25.492]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:25.492]                   3L)]
[10:33:25.492]             }
[10:33:25.492]             function(cond) {
[10:33:25.492]                 is_error <- inherits(cond, "error")
[10:33:25.492]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:25.492]                   NULL)
[10:33:25.492]                 if (is_error) {
[10:33:25.492]                   sessionInformation <- function() {
[10:33:25.492]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:25.492]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:25.492]                       search = base::search(), system = base::Sys.info())
[10:33:25.492]                   }
[10:33:25.492]                   ...future.conditions[[length(...future.conditions) + 
[10:33:25.492]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:25.492]                     cond$call), session = sessionInformation(), 
[10:33:25.492]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:25.492]                   signalCondition(cond)
[10:33:25.492]                 }
[10:33:25.492]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:25.492]                 "immediateCondition"))) {
[10:33:25.492]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:25.492]                   ...future.conditions[[length(...future.conditions) + 
[10:33:25.492]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:25.492]                   if (TRUE && !signal) {
[10:33:25.492]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:25.492]                     {
[10:33:25.492]                       inherits <- base::inherits
[10:33:25.492]                       invokeRestart <- base::invokeRestart
[10:33:25.492]                       is.null <- base::is.null
[10:33:25.492]                       muffled <- FALSE
[10:33:25.492]                       if (inherits(cond, "message")) {
[10:33:25.492]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:25.492]                         if (muffled) 
[10:33:25.492]                           invokeRestart("muffleMessage")
[10:33:25.492]                       }
[10:33:25.492]                       else if (inherits(cond, "warning")) {
[10:33:25.492]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:25.492]                         if (muffled) 
[10:33:25.492]                           invokeRestart("muffleWarning")
[10:33:25.492]                       }
[10:33:25.492]                       else if (inherits(cond, "condition")) {
[10:33:25.492]                         if (!is.null(pattern)) {
[10:33:25.492]                           computeRestarts <- base::computeRestarts
[10:33:25.492]                           grepl <- base::grepl
[10:33:25.492]                           restarts <- computeRestarts(cond)
[10:33:25.492]                           for (restart in restarts) {
[10:33:25.492]                             name <- restart$name
[10:33:25.492]                             if (is.null(name)) 
[10:33:25.492]                               next
[10:33:25.492]                             if (!grepl(pattern, name)) 
[10:33:25.492]                               next
[10:33:25.492]                             invokeRestart(restart)
[10:33:25.492]                             muffled <- TRUE
[10:33:25.492]                             break
[10:33:25.492]                           }
[10:33:25.492]                         }
[10:33:25.492]                       }
[10:33:25.492]                       invisible(muffled)
[10:33:25.492]                     }
[10:33:25.492]                     muffleCondition(cond, pattern = "^muffle")
[10:33:25.492]                   }
[10:33:25.492]                 }
[10:33:25.492]                 else {
[10:33:25.492]                   if (TRUE) {
[10:33:25.492]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:25.492]                     {
[10:33:25.492]                       inherits <- base::inherits
[10:33:25.492]                       invokeRestart <- base::invokeRestart
[10:33:25.492]                       is.null <- base::is.null
[10:33:25.492]                       muffled <- FALSE
[10:33:25.492]                       if (inherits(cond, "message")) {
[10:33:25.492]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:25.492]                         if (muffled) 
[10:33:25.492]                           invokeRestart("muffleMessage")
[10:33:25.492]                       }
[10:33:25.492]                       else if (inherits(cond, "warning")) {
[10:33:25.492]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:25.492]                         if (muffled) 
[10:33:25.492]                           invokeRestart("muffleWarning")
[10:33:25.492]                       }
[10:33:25.492]                       else if (inherits(cond, "condition")) {
[10:33:25.492]                         if (!is.null(pattern)) {
[10:33:25.492]                           computeRestarts <- base::computeRestarts
[10:33:25.492]                           grepl <- base::grepl
[10:33:25.492]                           restarts <- computeRestarts(cond)
[10:33:25.492]                           for (restart in restarts) {
[10:33:25.492]                             name <- restart$name
[10:33:25.492]                             if (is.null(name)) 
[10:33:25.492]                               next
[10:33:25.492]                             if (!grepl(pattern, name)) 
[10:33:25.492]                               next
[10:33:25.492]                             invokeRestart(restart)
[10:33:25.492]                             muffled <- TRUE
[10:33:25.492]                             break
[10:33:25.492]                           }
[10:33:25.492]                         }
[10:33:25.492]                       }
[10:33:25.492]                       invisible(muffled)
[10:33:25.492]                     }
[10:33:25.492]                     muffleCondition(cond, pattern = "^muffle")
[10:33:25.492]                   }
[10:33:25.492]                 }
[10:33:25.492]             }
[10:33:25.492]         }))
[10:33:25.492]     }, error = function(ex) {
[10:33:25.492]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:25.492]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:25.492]                 ...future.rng), started = ...future.startTime, 
[10:33:25.492]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:25.492]             version = "1.8"), class = "FutureResult")
[10:33:25.492]     }, finally = {
[10:33:25.492]         if (!identical(...future.workdir, getwd())) 
[10:33:25.492]             setwd(...future.workdir)
[10:33:25.492]         {
[10:33:25.492]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:25.492]                 ...future.oldOptions$nwarnings <- NULL
[10:33:25.492]             }
[10:33:25.492]             base::options(...future.oldOptions)
[10:33:25.492]             if (.Platform$OS.type == "windows") {
[10:33:25.492]                 old_names <- names(...future.oldEnvVars)
[10:33:25.492]                 envs <- base::Sys.getenv()
[10:33:25.492]                 names <- names(envs)
[10:33:25.492]                 common <- intersect(names, old_names)
[10:33:25.492]                 added <- setdiff(names, old_names)
[10:33:25.492]                 removed <- setdiff(old_names, names)
[10:33:25.492]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:25.492]                   envs[common]]
[10:33:25.492]                 NAMES <- toupper(changed)
[10:33:25.492]                 args <- list()
[10:33:25.492]                 for (kk in seq_along(NAMES)) {
[10:33:25.492]                   name <- changed[[kk]]
[10:33:25.492]                   NAME <- NAMES[[kk]]
[10:33:25.492]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:25.492]                     next
[10:33:25.492]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:25.492]                 }
[10:33:25.492]                 NAMES <- toupper(added)
[10:33:25.492]                 for (kk in seq_along(NAMES)) {
[10:33:25.492]                   name <- added[[kk]]
[10:33:25.492]                   NAME <- NAMES[[kk]]
[10:33:25.492]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:25.492]                     next
[10:33:25.492]                   args[[name]] <- ""
[10:33:25.492]                 }
[10:33:25.492]                 NAMES <- toupper(removed)
[10:33:25.492]                 for (kk in seq_along(NAMES)) {
[10:33:25.492]                   name <- removed[[kk]]
[10:33:25.492]                   NAME <- NAMES[[kk]]
[10:33:25.492]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:25.492]                     next
[10:33:25.492]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:25.492]                 }
[10:33:25.492]                 if (length(args) > 0) 
[10:33:25.492]                   base::do.call(base::Sys.setenv, args = args)
[10:33:25.492]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:25.492]             }
[10:33:25.492]             else {
[10:33:25.492]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:25.492]             }
[10:33:25.492]             {
[10:33:25.492]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:25.492]                   0L) {
[10:33:25.492]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:25.492]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:25.492]                   base::options(opts)
[10:33:25.492]                 }
[10:33:25.492]                 {
[10:33:25.492]                   {
[10:33:25.492]                     NULL
[10:33:25.492]                     RNGkind("Mersenne-Twister")
[10:33:25.492]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:33:25.492]                       inherits = FALSE)
[10:33:25.492]                   }
[10:33:25.492]                   options(future.plan = NULL)
[10:33:25.492]                   if (is.na(NA_character_)) 
[10:33:25.492]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:25.492]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:25.492]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:25.492]                     .init = FALSE)
[10:33:25.492]                 }
[10:33:25.492]             }
[10:33:25.492]         }
[10:33:25.492]     })
[10:33:25.492]     if (TRUE) {
[10:33:25.492]         base::sink(type = "output", split = FALSE)
[10:33:25.492]         if (TRUE) {
[10:33:25.492]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:25.492]         }
[10:33:25.492]         else {
[10:33:25.492]             ...future.result["stdout"] <- base::list(NULL)
[10:33:25.492]         }
[10:33:25.492]         base::close(...future.stdout)
[10:33:25.492]         ...future.stdout <- NULL
[10:33:25.492]     }
[10:33:25.492]     ...future.result$conditions <- ...future.conditions
[10:33:25.492]     ...future.result$finished <- base::Sys.time()
[10:33:25.492]     ...future.result
[10:33:25.492] }
[10:33:25.494] plan(): Setting new future strategy stack:
[10:33:25.494] List of future strategies:
[10:33:25.494] 1. sequential:
[10:33:25.494]    - args: function (..., envir = parent.frame())
[10:33:25.494]    - tweaked: FALSE
[10:33:25.494]    - call: NULL
[10:33:25.494] plan(): nbrOfWorkers() = 1
[10:33:25.495] plan(): Setting new future strategy stack:
[10:33:25.495] List of future strategies:
[10:33:25.495] 1. sequential:
[10:33:25.495]    - args: function (..., envir = parent.frame())
[10:33:25.495]    - tweaked: FALSE
[10:33:25.495]    - call: future::plan("sequential")
[10:33:25.496] plan(): nbrOfWorkers() = 1
[10:33:25.496] SequentialFuture started (and completed)
[10:33:25.497] resolved() for ‘SequentialFuture’ ...
[10:33:25.497] - state: ‘finished’
[10:33:25.497] - run: TRUE
[10:33:25.497] - result: ‘FutureResult’
[10:33:25.497] resolved() for ‘SequentialFuture’ ... done
[1] TRUE
[1] 42
[10:33:25.500] getGlobalsAndPackages() ...
[10:33:25.500] Searching for globals...
[10:33:25.505] - globals found: [4] ‘{’, ‘<-’, ‘*’, ‘a’
[10:33:25.505] Searching for globals ... DONE
[10:33:25.505] Resolving globals: FALSE
[10:33:25.508] The total size of the 1 globals is 56 bytes (56 bytes)
[10:33:25.508] The total size of the 1 globals exported for future expression (‘{; b <- 3; c <- 2; a * b * c; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[10:33:25.508] - globals: [1] ‘a’
[10:33:25.508] 
[10:33:25.508] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    b <- 3
    c <- 2
    a * b * c
}
Lazy evaluation: TRUE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 56 bytes (numeric ‘a’ of 56 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 387602f3-bd1b-4a3f-3d8d-305a236eb3bb
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:33:25.509] Packages needed by the future expression (n = 0): <none>
[10:33:25.509] Packages needed by future strategies (n = 0): <none>
[10:33:25.510] {
[10:33:25.510]     {
[10:33:25.510]         {
[10:33:25.510]             ...future.startTime <- base::Sys.time()
[10:33:25.510]             {
[10:33:25.510]                 {
[10:33:25.510]                   {
[10:33:25.510]                     base::local({
[10:33:25.510]                       has_future <- base::requireNamespace("future", 
[10:33:25.510]                         quietly = TRUE)
[10:33:25.510]                       if (has_future) {
[10:33:25.510]                         ns <- base::getNamespace("future")
[10:33:25.510]                         version <- ns[[".package"]][["version"]]
[10:33:25.510]                         if (is.null(version)) 
[10:33:25.510]                           version <- utils::packageVersion("future")
[10:33:25.510]                       }
[10:33:25.510]                       else {
[10:33:25.510]                         version <- NULL
[10:33:25.510]                       }
[10:33:25.510]                       if (!has_future || version < "1.8.0") {
[10:33:25.510]                         info <- base::c(r_version = base::gsub("R version ", 
[10:33:25.510]                           "", base::R.version$version.string), 
[10:33:25.510]                           platform = base::sprintf("%s (%s-bit)", 
[10:33:25.510]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:25.510]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:25.510]                             "release", "version")], collapse = " "), 
[10:33:25.510]                           hostname = base::Sys.info()[["nodename"]])
[10:33:25.510]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:33:25.510]                           info)
[10:33:25.510]                         info <- base::paste(info, collapse = "; ")
[10:33:25.510]                         if (!has_future) {
[10:33:25.510]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:25.510]                             info)
[10:33:25.510]                         }
[10:33:25.510]                         else {
[10:33:25.510]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:25.510]                             info, version)
[10:33:25.510]                         }
[10:33:25.510]                         base::stop(msg)
[10:33:25.510]                       }
[10:33:25.510]                     })
[10:33:25.510]                   }
[10:33:25.510]                   ...future.strategy.old <- future::plan("list")
[10:33:25.510]                   options(future.plan = NULL)
[10:33:25.510]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:25.510]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:33:25.510]                 }
[10:33:25.510]                 ...future.workdir <- getwd()
[10:33:25.510]             }
[10:33:25.510]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:25.510]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:25.510]         }
[10:33:25.510]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:33:25.510]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:25.510]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:33:25.510]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:33:25.510]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:25.510]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:25.510]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:25.510]             base::names(...future.oldOptions))
[10:33:25.510]     }
[10:33:25.510]     if (FALSE) {
[10:33:25.510]     }
[10:33:25.510]     else {
[10:33:25.510]         if (TRUE) {
[10:33:25.510]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:25.510]                 open = "w")
[10:33:25.510]         }
[10:33:25.510]         else {
[10:33:25.510]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:25.510]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:25.510]         }
[10:33:25.510]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:25.510]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:25.510]             base::sink(type = "output", split = FALSE)
[10:33:25.510]             base::close(...future.stdout)
[10:33:25.510]         }, add = TRUE)
[10:33:25.510]     }
[10:33:25.510]     ...future.frame <- base::sys.nframe()
[10:33:25.510]     ...future.conditions <- base::list()
[10:33:25.510]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:25.510]     if (FALSE) {
[10:33:25.510]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:25.510]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:25.510]     }
[10:33:25.510]     ...future.result <- base::tryCatch({
[10:33:25.510]         base::withCallingHandlers({
[10:33:25.510]             ...future.value <- base::withVisible(base::local({
[10:33:25.510]                 b <- 3
[10:33:25.510]                 c <- 2
[10:33:25.510]                 a * b * c
[10:33:25.510]             }))
[10:33:25.510]             future::FutureResult(value = ...future.value$value, 
[10:33:25.510]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:25.510]                   ...future.rng), globalenv = if (FALSE) 
[10:33:25.510]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:25.510]                     ...future.globalenv.names))
[10:33:25.510]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:25.510]         }, condition = base::local({
[10:33:25.510]             c <- base::c
[10:33:25.510]             inherits <- base::inherits
[10:33:25.510]             invokeRestart <- base::invokeRestart
[10:33:25.510]             length <- base::length
[10:33:25.510]             list <- base::list
[10:33:25.510]             seq.int <- base::seq.int
[10:33:25.510]             signalCondition <- base::signalCondition
[10:33:25.510]             sys.calls <- base::sys.calls
[10:33:25.510]             `[[` <- base::`[[`
[10:33:25.510]             `+` <- base::`+`
[10:33:25.510]             `<<-` <- base::`<<-`
[10:33:25.510]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:25.510]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:25.510]                   3L)]
[10:33:25.510]             }
[10:33:25.510]             function(cond) {
[10:33:25.510]                 is_error <- inherits(cond, "error")
[10:33:25.510]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:25.510]                   NULL)
[10:33:25.510]                 if (is_error) {
[10:33:25.510]                   sessionInformation <- function() {
[10:33:25.510]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:25.510]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:25.510]                       search = base::search(), system = base::Sys.info())
[10:33:25.510]                   }
[10:33:25.510]                   ...future.conditions[[length(...future.conditions) + 
[10:33:25.510]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:25.510]                     cond$call), session = sessionInformation(), 
[10:33:25.510]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:25.510]                   signalCondition(cond)
[10:33:25.510]                 }
[10:33:25.510]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:25.510]                 "immediateCondition"))) {
[10:33:25.510]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:25.510]                   ...future.conditions[[length(...future.conditions) + 
[10:33:25.510]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:25.510]                   if (TRUE && !signal) {
[10:33:25.510]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:25.510]                     {
[10:33:25.510]                       inherits <- base::inherits
[10:33:25.510]                       invokeRestart <- base::invokeRestart
[10:33:25.510]                       is.null <- base::is.null
[10:33:25.510]                       muffled <- FALSE
[10:33:25.510]                       if (inherits(cond, "message")) {
[10:33:25.510]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:25.510]                         if (muffled) 
[10:33:25.510]                           invokeRestart("muffleMessage")
[10:33:25.510]                       }
[10:33:25.510]                       else if (inherits(cond, "warning")) {
[10:33:25.510]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:25.510]                         if (muffled) 
[10:33:25.510]                           invokeRestart("muffleWarning")
[10:33:25.510]                       }
[10:33:25.510]                       else if (inherits(cond, "condition")) {
[10:33:25.510]                         if (!is.null(pattern)) {
[10:33:25.510]                           computeRestarts <- base::computeRestarts
[10:33:25.510]                           grepl <- base::grepl
[10:33:25.510]                           restarts <- computeRestarts(cond)
[10:33:25.510]                           for (restart in restarts) {
[10:33:25.510]                             name <- restart$name
[10:33:25.510]                             if (is.null(name)) 
[10:33:25.510]                               next
[10:33:25.510]                             if (!grepl(pattern, name)) 
[10:33:25.510]                               next
[10:33:25.510]                             invokeRestart(restart)
[10:33:25.510]                             muffled <- TRUE
[10:33:25.510]                             break
[10:33:25.510]                           }
[10:33:25.510]                         }
[10:33:25.510]                       }
[10:33:25.510]                       invisible(muffled)
[10:33:25.510]                     }
[10:33:25.510]                     muffleCondition(cond, pattern = "^muffle")
[10:33:25.510]                   }
[10:33:25.510]                 }
[10:33:25.510]                 else {
[10:33:25.510]                   if (TRUE) {
[10:33:25.510]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:25.510]                     {
[10:33:25.510]                       inherits <- base::inherits
[10:33:25.510]                       invokeRestart <- base::invokeRestart
[10:33:25.510]                       is.null <- base::is.null
[10:33:25.510]                       muffled <- FALSE
[10:33:25.510]                       if (inherits(cond, "message")) {
[10:33:25.510]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:25.510]                         if (muffled) 
[10:33:25.510]                           invokeRestart("muffleMessage")
[10:33:25.510]                       }
[10:33:25.510]                       else if (inherits(cond, "warning")) {
[10:33:25.510]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:25.510]                         if (muffled) 
[10:33:25.510]                           invokeRestart("muffleWarning")
[10:33:25.510]                       }
[10:33:25.510]                       else if (inherits(cond, "condition")) {
[10:33:25.510]                         if (!is.null(pattern)) {
[10:33:25.510]                           computeRestarts <- base::computeRestarts
[10:33:25.510]                           grepl <- base::grepl
[10:33:25.510]                           restarts <- computeRestarts(cond)
[10:33:25.510]                           for (restart in restarts) {
[10:33:25.510]                             name <- restart$name
[10:33:25.510]                             if (is.null(name)) 
[10:33:25.510]                               next
[10:33:25.510]                             if (!grepl(pattern, name)) 
[10:33:25.510]                               next
[10:33:25.510]                             invokeRestart(restart)
[10:33:25.510]                             muffled <- TRUE
[10:33:25.510]                             break
[10:33:25.510]                           }
[10:33:25.510]                         }
[10:33:25.510]                       }
[10:33:25.510]                       invisible(muffled)
[10:33:25.510]                     }
[10:33:25.510]                     muffleCondition(cond, pattern = "^muffle")
[10:33:25.510]                   }
[10:33:25.510]                 }
[10:33:25.510]             }
[10:33:25.510]         }))
[10:33:25.510]     }, error = function(ex) {
[10:33:25.510]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:25.510]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:25.510]                 ...future.rng), started = ...future.startTime, 
[10:33:25.510]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:25.510]             version = "1.8"), class = "FutureResult")
[10:33:25.510]     }, finally = {
[10:33:25.510]         if (!identical(...future.workdir, getwd())) 
[10:33:25.510]             setwd(...future.workdir)
[10:33:25.510]         {
[10:33:25.510]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:25.510]                 ...future.oldOptions$nwarnings <- NULL
[10:33:25.510]             }
[10:33:25.510]             base::options(...future.oldOptions)
[10:33:25.510]             if (.Platform$OS.type == "windows") {
[10:33:25.510]                 old_names <- names(...future.oldEnvVars)
[10:33:25.510]                 envs <- base::Sys.getenv()
[10:33:25.510]                 names <- names(envs)
[10:33:25.510]                 common <- intersect(names, old_names)
[10:33:25.510]                 added <- setdiff(names, old_names)
[10:33:25.510]                 removed <- setdiff(old_names, names)
[10:33:25.510]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:25.510]                   envs[common]]
[10:33:25.510]                 NAMES <- toupper(changed)
[10:33:25.510]                 args <- list()
[10:33:25.510]                 for (kk in seq_along(NAMES)) {
[10:33:25.510]                   name <- changed[[kk]]
[10:33:25.510]                   NAME <- NAMES[[kk]]
[10:33:25.510]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:25.510]                     next
[10:33:25.510]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:25.510]                 }
[10:33:25.510]                 NAMES <- toupper(added)
[10:33:25.510]                 for (kk in seq_along(NAMES)) {
[10:33:25.510]                   name <- added[[kk]]
[10:33:25.510]                   NAME <- NAMES[[kk]]
[10:33:25.510]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:25.510]                     next
[10:33:25.510]                   args[[name]] <- ""
[10:33:25.510]                 }
[10:33:25.510]                 NAMES <- toupper(removed)
[10:33:25.510]                 for (kk in seq_along(NAMES)) {
[10:33:25.510]                   name <- removed[[kk]]
[10:33:25.510]                   NAME <- NAMES[[kk]]
[10:33:25.510]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:25.510]                     next
[10:33:25.510]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:25.510]                 }
[10:33:25.510]                 if (length(args) > 0) 
[10:33:25.510]                   base::do.call(base::Sys.setenv, args = args)
[10:33:25.510]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:25.510]             }
[10:33:25.510]             else {
[10:33:25.510]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:25.510]             }
[10:33:25.510]             {
[10:33:25.510]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:25.510]                   0L) {
[10:33:25.510]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:25.510]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:25.510]                   base::options(opts)
[10:33:25.510]                 }
[10:33:25.510]                 {
[10:33:25.510]                   {
[10:33:25.510]                     NULL
[10:33:25.510]                     RNGkind("Mersenne-Twister")
[10:33:25.510]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:33:25.510]                       inherits = FALSE)
[10:33:25.510]                   }
[10:33:25.510]                   options(future.plan = NULL)
[10:33:25.510]                   if (is.na(NA_character_)) 
[10:33:25.510]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:25.510]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:25.510]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:25.510]                     .init = FALSE)
[10:33:25.510]                 }
[10:33:25.510]             }
[10:33:25.510]         }
[10:33:25.510]     })
[10:33:25.510]     if (TRUE) {
[10:33:25.510]         base::sink(type = "output", split = FALSE)
[10:33:25.510]         if (TRUE) {
[10:33:25.510]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:25.510]         }
[10:33:25.510]         else {
[10:33:25.510]             ...future.result["stdout"] <- base::list(NULL)
[10:33:25.510]         }
[10:33:25.510]         base::close(...future.stdout)
[10:33:25.510]         ...future.stdout <- NULL
[10:33:25.510]     }
[10:33:25.510]     ...future.result$conditions <- ...future.conditions
[10:33:25.510]     ...future.result$finished <- base::Sys.time()
[10:33:25.510]     ...future.result
[10:33:25.510] }
[10:33:25.511] assign_globals() ...
[10:33:25.512] List of 1
[10:33:25.512]  $ a: num 0
[10:33:25.512]  - attr(*, "where")=List of 1
[10:33:25.512]   ..$ a:<environment: R_EmptyEnv> 
[10:33:25.512]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:33:25.512]  - attr(*, "resolved")= logi FALSE
[10:33:25.512]  - attr(*, "total_size")= num 56
[10:33:25.516] - copied ‘a’ to environment
[10:33:25.516] assign_globals() ... done
[10:33:25.516] plan(): Setting new future strategy stack:
[10:33:25.516] List of future strategies:
[10:33:25.516] 1. sequential:
[10:33:25.516]    - args: function (..., envir = parent.frame())
[10:33:25.516]    - tweaked: FALSE
[10:33:25.516]    - call: NULL
[10:33:25.517] plan(): nbrOfWorkers() = 1
[10:33:25.517] plan(): Setting new future strategy stack:
[10:33:25.518] List of future strategies:
[10:33:25.518] 1. sequential:
[10:33:25.518]    - args: function (..., envir = parent.frame())
[10:33:25.518]    - tweaked: FALSE
[10:33:25.518]    - call: future::plan("sequential")
[10:33:25.518] plan(): nbrOfWorkers() = 1
[10:33:25.518] SequentialFuture started (and completed)
[1] 0
*** multisession() with globals and blocking
 - Creating multisession future #2 ...
[10:33:25.521] getGlobalsAndPackages() ...
[10:33:25.522] Searching for globals...
[10:33:25.522] - globals found: [2] ‘{’, ‘ii’
[10:33:25.522] Searching for globals ... DONE
[10:33:25.522] Resolving globals: FALSE
[10:33:25.523] The total size of the 1 globals is 56 bytes (56 bytes)
[10:33:25.523] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[10:33:25.523] - globals: [1] ‘ii’
[10:33:25.523] 
[10:33:25.523] getGlobalsAndPackages() ... DONE
 - Creating multisession future #1 ...
[10:33:25.527] getGlobalsAndPackages() ...
[10:33:25.527] Searching for globals...
[10:33:25.528] - globals found: [2] ‘{’, ‘ii’
[10:33:25.528] Searching for globals ... DONE
[10:33:25.528] Resolving globals: FALSE
[10:33:25.528] The total size of the 1 globals is 56 bytes (56 bytes)
[10:33:25.528] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[10:33:25.529] - globals: [1] ‘ii’
[10:33:25.529] 
[10:33:25.529] getGlobalsAndPackages() ... DONE
 - Resolving 2 multisession futures
[10:33:25.529] Packages needed by the future expression (n = 0): <none>
[10:33:25.530] Packages needed by future strategies (n = 0): <none>
[10:33:25.530] {
[10:33:25.530]     {
[10:33:25.530]         {
[10:33:25.530]             ...future.startTime <- base::Sys.time()
[10:33:25.530]             {
[10:33:25.530]                 {
[10:33:25.530]                   {
[10:33:25.530]                     base::local({
[10:33:25.530]                       has_future <- base::requireNamespace("future", 
[10:33:25.530]                         quietly = TRUE)
[10:33:25.530]                       if (has_future) {
[10:33:25.530]                         ns <- base::getNamespace("future")
[10:33:25.530]                         version <- ns[[".package"]][["version"]]
[10:33:25.530]                         if (is.null(version)) 
[10:33:25.530]                           version <- utils::packageVersion("future")
[10:33:25.530]                       }
[10:33:25.530]                       else {
[10:33:25.530]                         version <- NULL
[10:33:25.530]                       }
[10:33:25.530]                       if (!has_future || version < "1.8.0") {
[10:33:25.530]                         info <- base::c(r_version = base::gsub("R version ", 
[10:33:25.530]                           "", base::R.version$version.string), 
[10:33:25.530]                           platform = base::sprintf("%s (%s-bit)", 
[10:33:25.530]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:25.530]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:25.530]                             "release", "version")], collapse = " "), 
[10:33:25.530]                           hostname = base::Sys.info()[["nodename"]])
[10:33:25.530]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:33:25.530]                           info)
[10:33:25.530]                         info <- base::paste(info, collapse = "; ")
[10:33:25.530]                         if (!has_future) {
[10:33:25.530]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:25.530]                             info)
[10:33:25.530]                         }
[10:33:25.530]                         else {
[10:33:25.530]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:25.530]                             info, version)
[10:33:25.530]                         }
[10:33:25.530]                         base::stop(msg)
[10:33:25.530]                       }
[10:33:25.530]                     })
[10:33:25.530]                   }
[10:33:25.530]                   ...future.strategy.old <- future::plan("list")
[10:33:25.530]                   options(future.plan = NULL)
[10:33:25.530]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:25.530]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:33:25.530]                 }
[10:33:25.530]                 ...future.workdir <- getwd()
[10:33:25.530]             }
[10:33:25.530]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:25.530]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:25.530]         }
[10:33:25.530]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:33:25.530]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:25.530]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:33:25.530]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:33:25.530]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:25.530]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:25.530]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:25.530]             base::names(...future.oldOptions))
[10:33:25.530]     }
[10:33:25.530]     if (FALSE) {
[10:33:25.530]     }
[10:33:25.530]     else {
[10:33:25.530]         if (TRUE) {
[10:33:25.530]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:25.530]                 open = "w")
[10:33:25.530]         }
[10:33:25.530]         else {
[10:33:25.530]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:25.530]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:25.530]         }
[10:33:25.530]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:25.530]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:25.530]             base::sink(type = "output", split = FALSE)
[10:33:25.530]             base::close(...future.stdout)
[10:33:25.530]         }, add = TRUE)
[10:33:25.530]     }
[10:33:25.530]     ...future.frame <- base::sys.nframe()
[10:33:25.530]     ...future.conditions <- base::list()
[10:33:25.530]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:25.530]     if (FALSE) {
[10:33:25.530]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:25.530]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:25.530]     }
[10:33:25.530]     ...future.result <- base::tryCatch({
[10:33:25.530]         base::withCallingHandlers({
[10:33:25.530]             ...future.value <- base::withVisible(base::local({
[10:33:25.530]                 ii
[10:33:25.530]             }))
[10:33:25.530]             future::FutureResult(value = ...future.value$value, 
[10:33:25.530]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:25.530]                   ...future.rng), globalenv = if (FALSE) 
[10:33:25.530]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:25.530]                     ...future.globalenv.names))
[10:33:25.530]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:25.530]         }, condition = base::local({
[10:33:25.530]             c <- base::c
[10:33:25.530]             inherits <- base::inherits
[10:33:25.530]             invokeRestart <- base::invokeRestart
[10:33:25.530]             length <- base::length
[10:33:25.530]             list <- base::list
[10:33:25.530]             seq.int <- base::seq.int
[10:33:25.530]             signalCondition <- base::signalCondition
[10:33:25.530]             sys.calls <- base::sys.calls
[10:33:25.530]             `[[` <- base::`[[`
[10:33:25.530]             `+` <- base::`+`
[10:33:25.530]             `<<-` <- base::`<<-`
[10:33:25.530]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:25.530]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:25.530]                   3L)]
[10:33:25.530]             }
[10:33:25.530]             function(cond) {
[10:33:25.530]                 is_error <- inherits(cond, "error")
[10:33:25.530]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:25.530]                   NULL)
[10:33:25.530]                 if (is_error) {
[10:33:25.530]                   sessionInformation <- function() {
[10:33:25.530]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:25.530]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:25.530]                       search = base::search(), system = base::Sys.info())
[10:33:25.530]                   }
[10:33:25.530]                   ...future.conditions[[length(...future.conditions) + 
[10:33:25.530]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:25.530]                     cond$call), session = sessionInformation(), 
[10:33:25.530]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:25.530]                   signalCondition(cond)
[10:33:25.530]                 }
[10:33:25.530]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:25.530]                 "immediateCondition"))) {
[10:33:25.530]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:25.530]                   ...future.conditions[[length(...future.conditions) + 
[10:33:25.530]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:25.530]                   if (TRUE && !signal) {
[10:33:25.530]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:25.530]                     {
[10:33:25.530]                       inherits <- base::inherits
[10:33:25.530]                       invokeRestart <- base::invokeRestart
[10:33:25.530]                       is.null <- base::is.null
[10:33:25.530]                       muffled <- FALSE
[10:33:25.530]                       if (inherits(cond, "message")) {
[10:33:25.530]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:25.530]                         if (muffled) 
[10:33:25.530]                           invokeRestart("muffleMessage")
[10:33:25.530]                       }
[10:33:25.530]                       else if (inherits(cond, "warning")) {
[10:33:25.530]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:25.530]                         if (muffled) 
[10:33:25.530]                           invokeRestart("muffleWarning")
[10:33:25.530]                       }
[10:33:25.530]                       else if (inherits(cond, "condition")) {
[10:33:25.530]                         if (!is.null(pattern)) {
[10:33:25.530]                           computeRestarts <- base::computeRestarts
[10:33:25.530]                           grepl <- base::grepl
[10:33:25.530]                           restarts <- computeRestarts(cond)
[10:33:25.530]                           for (restart in restarts) {
[10:33:25.530]                             name <- restart$name
[10:33:25.530]                             if (is.null(name)) 
[10:33:25.530]                               next
[10:33:25.530]                             if (!grepl(pattern, name)) 
[10:33:25.530]                               next
[10:33:25.530]                             invokeRestart(restart)
[10:33:25.530]                             muffled <- TRUE
[10:33:25.530]                             break
[10:33:25.530]                           }
[10:33:25.530]                         }
[10:33:25.530]                       }
[10:33:25.530]                       invisible(muffled)
[10:33:25.530]                     }
[10:33:25.530]                     muffleCondition(cond, pattern = "^muffle")
[10:33:25.530]                   }
[10:33:25.530]                 }
[10:33:25.530]                 else {
[10:33:25.530]                   if (TRUE) {
[10:33:25.530]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:25.530]                     {
[10:33:25.530]                       inherits <- base::inherits
[10:33:25.530]                       invokeRestart <- base::invokeRestart
[10:33:25.530]                       is.null <- base::is.null
[10:33:25.530]                       muffled <- FALSE
[10:33:25.530]                       if (inherits(cond, "message")) {
[10:33:25.530]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:25.530]                         if (muffled) 
[10:33:25.530]                           invokeRestart("muffleMessage")
[10:33:25.530]                       }
[10:33:25.530]                       else if (inherits(cond, "warning")) {
[10:33:25.530]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:25.530]                         if (muffled) 
[10:33:25.530]                           invokeRestart("muffleWarning")
[10:33:25.530]                       }
[10:33:25.530]                       else if (inherits(cond, "condition")) {
[10:33:25.530]                         if (!is.null(pattern)) {
[10:33:25.530]                           computeRestarts <- base::computeRestarts
[10:33:25.530]                           grepl <- base::grepl
[10:33:25.530]                           restarts <- computeRestarts(cond)
[10:33:25.530]                           for (restart in restarts) {
[10:33:25.530]                             name <- restart$name
[10:33:25.530]                             if (is.null(name)) 
[10:33:25.530]                               next
[10:33:25.530]                             if (!grepl(pattern, name)) 
[10:33:25.530]                               next
[10:33:25.530]                             invokeRestart(restart)
[10:33:25.530]                             muffled <- TRUE
[10:33:25.530]                             break
[10:33:25.530]                           }
[10:33:25.530]                         }
[10:33:25.530]                       }
[10:33:25.530]                       invisible(muffled)
[10:33:25.530]                     }
[10:33:25.530]                     muffleCondition(cond, pattern = "^muffle")
[10:33:25.530]                   }
[10:33:25.530]                 }
[10:33:25.530]             }
[10:33:25.530]         }))
[10:33:25.530]     }, error = function(ex) {
[10:33:25.530]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:25.530]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:25.530]                 ...future.rng), started = ...future.startTime, 
[10:33:25.530]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:25.530]             version = "1.8"), class = "FutureResult")
[10:33:25.530]     }, finally = {
[10:33:25.530]         if (!identical(...future.workdir, getwd())) 
[10:33:25.530]             setwd(...future.workdir)
[10:33:25.530]         {
[10:33:25.530]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:25.530]                 ...future.oldOptions$nwarnings <- NULL
[10:33:25.530]             }
[10:33:25.530]             base::options(...future.oldOptions)
[10:33:25.530]             if (.Platform$OS.type == "windows") {
[10:33:25.530]                 old_names <- names(...future.oldEnvVars)
[10:33:25.530]                 envs <- base::Sys.getenv()
[10:33:25.530]                 names <- names(envs)
[10:33:25.530]                 common <- intersect(names, old_names)
[10:33:25.530]                 added <- setdiff(names, old_names)
[10:33:25.530]                 removed <- setdiff(old_names, names)
[10:33:25.530]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:25.530]                   envs[common]]
[10:33:25.530]                 NAMES <- toupper(changed)
[10:33:25.530]                 args <- list()
[10:33:25.530]                 for (kk in seq_along(NAMES)) {
[10:33:25.530]                   name <- changed[[kk]]
[10:33:25.530]                   NAME <- NAMES[[kk]]
[10:33:25.530]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:25.530]                     next
[10:33:25.530]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:25.530]                 }
[10:33:25.530]                 NAMES <- toupper(added)
[10:33:25.530]                 for (kk in seq_along(NAMES)) {
[10:33:25.530]                   name <- added[[kk]]
[10:33:25.530]                   NAME <- NAMES[[kk]]
[10:33:25.530]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:25.530]                     next
[10:33:25.530]                   args[[name]] <- ""
[10:33:25.530]                 }
[10:33:25.530]                 NAMES <- toupper(removed)
[10:33:25.530]                 for (kk in seq_along(NAMES)) {
[10:33:25.530]                   name <- removed[[kk]]
[10:33:25.530]                   NAME <- NAMES[[kk]]
[10:33:25.530]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:25.530]                     next
[10:33:25.530]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:25.530]                 }
[10:33:25.530]                 if (length(args) > 0) 
[10:33:25.530]                   base::do.call(base::Sys.setenv, args = args)
[10:33:25.530]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:25.530]             }
[10:33:25.530]             else {
[10:33:25.530]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:25.530]             }
[10:33:25.530]             {
[10:33:25.530]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:25.530]                   0L) {
[10:33:25.530]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:25.530]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:25.530]                   base::options(opts)
[10:33:25.530]                 }
[10:33:25.530]                 {
[10:33:25.530]                   {
[10:33:25.530]                     NULL
[10:33:25.530]                     RNGkind("Mersenne-Twister")
[10:33:25.530]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:33:25.530]                       inherits = FALSE)
[10:33:25.530]                   }
[10:33:25.530]                   options(future.plan = NULL)
[10:33:25.530]                   if (is.na(NA_character_)) 
[10:33:25.530]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:25.530]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:25.530]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:25.530]                     .init = FALSE)
[10:33:25.530]                 }
[10:33:25.530]             }
[10:33:25.530]         }
[10:33:25.530]     })
[10:33:25.530]     if (TRUE) {
[10:33:25.530]         base::sink(type = "output", split = FALSE)
[10:33:25.530]         if (TRUE) {
[10:33:25.530]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:25.530]         }
[10:33:25.530]         else {
[10:33:25.530]             ...future.result["stdout"] <- base::list(NULL)
[10:33:25.530]         }
[10:33:25.530]         base::close(...future.stdout)
[10:33:25.530]         ...future.stdout <- NULL
[10:33:25.530]     }
[10:33:25.530]     ...future.result$conditions <- ...future.conditions
[10:33:25.530]     ...future.result$finished <- base::Sys.time()
[10:33:25.530]     ...future.result
[10:33:25.530] }
[10:33:25.531] assign_globals() ...
[10:33:25.531] List of 1
[10:33:25.531]  $ ii: int 1
[10:33:25.531]  - attr(*, "where")=List of 1
[10:33:25.531]   ..$ ii:<environment: R_EmptyEnv> 
[10:33:25.531]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:33:25.531]  - attr(*, "resolved")= logi FALSE
[10:33:25.531]  - attr(*, "total_size")= num 56
[10:33:25.534] - copied ‘ii’ to environment
[10:33:25.534] assign_globals() ... done
[10:33:25.534] plan(): Setting new future strategy stack:
[10:33:25.534] List of future strategies:
[10:33:25.534] 1. sequential:
[10:33:25.534]    - args: function (..., envir = parent.frame())
[10:33:25.534]    - tweaked: FALSE
[10:33:25.534]    - call: NULL
[10:33:25.534] plan(): nbrOfWorkers() = 1
[10:33:25.535] plan(): Setting new future strategy stack:
[10:33:25.535] List of future strategies:
[10:33:25.535] 1. sequential:
[10:33:25.535]    - args: function (..., envir = parent.frame())
[10:33:25.535]    - tweaked: FALSE
[10:33:25.535]    - call: future::plan("sequential")
[10:33:25.535] plan(): nbrOfWorkers() = 1
[10:33:25.536] SequentialFuture started (and completed)
[10:33:25.536] Packages needed by the future expression (n = 0): <none>
[10:33:25.536] Packages needed by future strategies (n = 0): <none>
[10:33:25.536] {
[10:33:25.536]     {
[10:33:25.536]         {
[10:33:25.536]             ...future.startTime <- base::Sys.time()
[10:33:25.536]             {
[10:33:25.536]                 {
[10:33:25.536]                   {
[10:33:25.536]                     base::local({
[10:33:25.536]                       has_future <- base::requireNamespace("future", 
[10:33:25.536]                         quietly = TRUE)
[10:33:25.536]                       if (has_future) {
[10:33:25.536]                         ns <- base::getNamespace("future")
[10:33:25.536]                         version <- ns[[".package"]][["version"]]
[10:33:25.536]                         if (is.null(version)) 
[10:33:25.536]                           version <- utils::packageVersion("future")
[10:33:25.536]                       }
[10:33:25.536]                       else {
[10:33:25.536]                         version <- NULL
[10:33:25.536]                       }
[10:33:25.536]                       if (!has_future || version < "1.8.0") {
[10:33:25.536]                         info <- base::c(r_version = base::gsub("R version ", 
[10:33:25.536]                           "", base::R.version$version.string), 
[10:33:25.536]                           platform = base::sprintf("%s (%s-bit)", 
[10:33:25.536]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:25.536]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:25.536]                             "release", "version")], collapse = " "), 
[10:33:25.536]                           hostname = base::Sys.info()[["nodename"]])
[10:33:25.536]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:33:25.536]                           info)
[10:33:25.536]                         info <- base::paste(info, collapse = "; ")
[10:33:25.536]                         if (!has_future) {
[10:33:25.536]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:25.536]                             info)
[10:33:25.536]                         }
[10:33:25.536]                         else {
[10:33:25.536]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:25.536]                             info, version)
[10:33:25.536]                         }
[10:33:25.536]                         base::stop(msg)
[10:33:25.536]                       }
[10:33:25.536]                     })
[10:33:25.536]                   }
[10:33:25.536]                   ...future.strategy.old <- future::plan("list")
[10:33:25.536]                   options(future.plan = NULL)
[10:33:25.536]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:25.536]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:33:25.536]                 }
[10:33:25.536]                 ...future.workdir <- getwd()
[10:33:25.536]             }
[10:33:25.536]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:25.536]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:25.536]         }
[10:33:25.536]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:33:25.536]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:25.536]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:33:25.536]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:33:25.536]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:25.536]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:25.536]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:25.536]             base::names(...future.oldOptions))
[10:33:25.536]     }
[10:33:25.536]     if (FALSE) {
[10:33:25.536]     }
[10:33:25.536]     else {
[10:33:25.536]         if (TRUE) {
[10:33:25.536]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:25.536]                 open = "w")
[10:33:25.536]         }
[10:33:25.536]         else {
[10:33:25.536]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:25.536]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:25.536]         }
[10:33:25.536]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:25.536]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:25.536]             base::sink(type = "output", split = FALSE)
[10:33:25.536]             base::close(...future.stdout)
[10:33:25.536]         }, add = TRUE)
[10:33:25.536]     }
[10:33:25.536]     ...future.frame <- base::sys.nframe()
[10:33:25.536]     ...future.conditions <- base::list()
[10:33:25.536]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:25.536]     if (FALSE) {
[10:33:25.536]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:25.536]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:25.536]     }
[10:33:25.536]     ...future.result <- base::tryCatch({
[10:33:25.536]         base::withCallingHandlers({
[10:33:25.536]             ...future.value <- base::withVisible(base::local({
[10:33:25.536]                 ii
[10:33:25.536]             }))
[10:33:25.536]             future::FutureResult(value = ...future.value$value, 
[10:33:25.536]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:25.536]                   ...future.rng), globalenv = if (FALSE) 
[10:33:25.536]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:25.536]                     ...future.globalenv.names))
[10:33:25.536]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:25.536]         }, condition = base::local({
[10:33:25.536]             c <- base::c
[10:33:25.536]             inherits <- base::inherits
[10:33:25.536]             invokeRestart <- base::invokeRestart
[10:33:25.536]             length <- base::length
[10:33:25.536]             list <- base::list
[10:33:25.536]             seq.int <- base::seq.int
[10:33:25.536]             signalCondition <- base::signalCondition
[10:33:25.536]             sys.calls <- base::sys.calls
[10:33:25.536]             `[[` <- base::`[[`
[10:33:25.536]             `+` <- base::`+`
[10:33:25.536]             `<<-` <- base::`<<-`
[10:33:25.536]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:25.536]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:25.536]                   3L)]
[10:33:25.536]             }
[10:33:25.536]             function(cond) {
[10:33:25.536]                 is_error <- inherits(cond, "error")
[10:33:25.536]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:25.536]                   NULL)
[10:33:25.536]                 if (is_error) {
[10:33:25.536]                   sessionInformation <- function() {
[10:33:25.536]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:25.536]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:25.536]                       search = base::search(), system = base::Sys.info())
[10:33:25.536]                   }
[10:33:25.536]                   ...future.conditions[[length(...future.conditions) + 
[10:33:25.536]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:25.536]                     cond$call), session = sessionInformation(), 
[10:33:25.536]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:25.536]                   signalCondition(cond)
[10:33:25.536]                 }
[10:33:25.536]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:25.536]                 "immediateCondition"))) {
[10:33:25.536]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:25.536]                   ...future.conditions[[length(...future.conditions) + 
[10:33:25.536]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:25.536]                   if (TRUE && !signal) {
[10:33:25.536]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:25.536]                     {
[10:33:25.536]                       inherits <- base::inherits
[10:33:25.536]                       invokeRestart <- base::invokeRestart
[10:33:25.536]                       is.null <- base::is.null
[10:33:25.536]                       muffled <- FALSE
[10:33:25.536]                       if (inherits(cond, "message")) {
[10:33:25.536]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:25.536]                         if (muffled) 
[10:33:25.536]                           invokeRestart("muffleMessage")
[10:33:25.536]                       }
[10:33:25.536]                       else if (inherits(cond, "warning")) {
[10:33:25.536]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:25.536]                         if (muffled) 
[10:33:25.536]                           invokeRestart("muffleWarning")
[10:33:25.536]                       }
[10:33:25.536]                       else if (inherits(cond, "condition")) {
[10:33:25.536]                         if (!is.null(pattern)) {
[10:33:25.536]                           computeRestarts <- base::computeRestarts
[10:33:25.536]                           grepl <- base::grepl
[10:33:25.536]                           restarts <- computeRestarts(cond)
[10:33:25.536]                           for (restart in restarts) {
[10:33:25.536]                             name <- restart$name
[10:33:25.536]                             if (is.null(name)) 
[10:33:25.536]                               next
[10:33:25.536]                             if (!grepl(pattern, name)) 
[10:33:25.536]                               next
[10:33:25.536]                             invokeRestart(restart)
[10:33:25.536]                             muffled <- TRUE
[10:33:25.536]                             break
[10:33:25.536]                           }
[10:33:25.536]                         }
[10:33:25.536]                       }
[10:33:25.536]                       invisible(muffled)
[10:33:25.536]                     }
[10:33:25.536]                     muffleCondition(cond, pattern = "^muffle")
[10:33:25.536]                   }
[10:33:25.536]                 }
[10:33:25.536]                 else {
[10:33:25.536]                   if (TRUE) {
[10:33:25.536]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:25.536]                     {
[10:33:25.536]                       inherits <- base::inherits
[10:33:25.536]                       invokeRestart <- base::invokeRestart
[10:33:25.536]                       is.null <- base::is.null
[10:33:25.536]                       muffled <- FALSE
[10:33:25.536]                       if (inherits(cond, "message")) {
[10:33:25.536]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:25.536]                         if (muffled) 
[10:33:25.536]                           invokeRestart("muffleMessage")
[10:33:25.536]                       }
[10:33:25.536]                       else if (inherits(cond, "warning")) {
[10:33:25.536]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:25.536]                         if (muffled) 
[10:33:25.536]                           invokeRestart("muffleWarning")
[10:33:25.536]                       }
[10:33:25.536]                       else if (inherits(cond, "condition")) {
[10:33:25.536]                         if (!is.null(pattern)) {
[10:33:25.536]                           computeRestarts <- base::computeRestarts
[10:33:25.536]                           grepl <- base::grepl
[10:33:25.536]                           restarts <- computeRestarts(cond)
[10:33:25.536]                           for (restart in restarts) {
[10:33:25.536]                             name <- restart$name
[10:33:25.536]                             if (is.null(name)) 
[10:33:25.536]                               next
[10:33:25.536]                             if (!grepl(pattern, name)) 
[10:33:25.536]                               next
[10:33:25.536]                             invokeRestart(restart)
[10:33:25.536]                             muffled <- TRUE
[10:33:25.536]                             break
[10:33:25.536]                           }
[10:33:25.536]                         }
[10:33:25.536]                       }
[10:33:25.536]                       invisible(muffled)
[10:33:25.536]                     }
[10:33:25.536]                     muffleCondition(cond, pattern = "^muffle")
[10:33:25.536]                   }
[10:33:25.536]                 }
[10:33:25.536]             }
[10:33:25.536]         }))
[10:33:25.536]     }, error = function(ex) {
[10:33:25.536]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:25.536]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:25.536]                 ...future.rng), started = ...future.startTime, 
[10:33:25.536]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:25.536]             version = "1.8"), class = "FutureResult")
[10:33:25.536]     }, finally = {
[10:33:25.536]         if (!identical(...future.workdir, getwd())) 
[10:33:25.536]             setwd(...future.workdir)
[10:33:25.536]         {
[10:33:25.536]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:25.536]                 ...future.oldOptions$nwarnings <- NULL
[10:33:25.536]             }
[10:33:25.536]             base::options(...future.oldOptions)
[10:33:25.536]             if (.Platform$OS.type == "windows") {
[10:33:25.536]                 old_names <- names(...future.oldEnvVars)
[10:33:25.536]                 envs <- base::Sys.getenv()
[10:33:25.536]                 names <- names(envs)
[10:33:25.536]                 common <- intersect(names, old_names)
[10:33:25.536]                 added <- setdiff(names, old_names)
[10:33:25.536]                 removed <- setdiff(old_names, names)
[10:33:25.536]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:25.536]                   envs[common]]
[10:33:25.536]                 NAMES <- toupper(changed)
[10:33:25.536]                 args <- list()
[10:33:25.536]                 for (kk in seq_along(NAMES)) {
[10:33:25.536]                   name <- changed[[kk]]
[10:33:25.536]                   NAME <- NAMES[[kk]]
[10:33:25.536]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:25.536]                     next
[10:33:25.536]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:25.536]                 }
[10:33:25.536]                 NAMES <- toupper(added)
[10:33:25.536]                 for (kk in seq_along(NAMES)) {
[10:33:25.536]                   name <- added[[kk]]
[10:33:25.536]                   NAME <- NAMES[[kk]]
[10:33:25.536]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:25.536]                     next
[10:33:25.536]                   args[[name]] <- ""
[10:33:25.536]                 }
[10:33:25.536]                 NAMES <- toupper(removed)
[10:33:25.536]                 for (kk in seq_along(NAMES)) {
[10:33:25.536]                   name <- removed[[kk]]
[10:33:25.536]                   NAME <- NAMES[[kk]]
[10:33:25.536]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:25.536]                     next
[10:33:25.536]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:25.536]                 }
[10:33:25.536]                 if (length(args) > 0) 
[10:33:25.536]                   base::do.call(base::Sys.setenv, args = args)
[10:33:25.536]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:25.536]             }
[10:33:25.536]             else {
[10:33:25.536]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:25.536]             }
[10:33:25.536]             {
[10:33:25.536]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:25.536]                   0L) {
[10:33:25.536]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:25.536]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:25.536]                   base::options(opts)
[10:33:25.536]                 }
[10:33:25.536]                 {
[10:33:25.536]                   {
[10:33:25.536]                     NULL
[10:33:25.536]                     RNGkind("Mersenne-Twister")
[10:33:25.536]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:33:25.536]                       inherits = FALSE)
[10:33:25.536]                   }
[10:33:25.536]                   options(future.plan = NULL)
[10:33:25.536]                   if (is.na(NA_character_)) 
[10:33:25.536]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:25.536]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:25.536]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:25.536]                     .init = FALSE)
[10:33:25.536]                 }
[10:33:25.536]             }
[10:33:25.536]         }
[10:33:25.536]     })
[10:33:25.536]     if (TRUE) {
[10:33:25.536]         base::sink(type = "output", split = FALSE)
[10:33:25.536]         if (TRUE) {
[10:33:25.536]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:25.536]         }
[10:33:25.536]         else {
[10:33:25.536]             ...future.result["stdout"] <- base::list(NULL)
[10:33:25.536]         }
[10:33:25.536]         base::close(...future.stdout)
[10:33:25.536]         ...future.stdout <- NULL
[10:33:25.536]     }
[10:33:25.536]     ...future.result$conditions <- ...future.conditions
[10:33:25.536]     ...future.result$finished <- base::Sys.time()
[10:33:25.536]     ...future.result
[10:33:25.536] }
[10:33:25.538] assign_globals() ...
[10:33:25.538] List of 1
[10:33:25.538]  $ ii: int 2
[10:33:25.538]  - attr(*, "where")=List of 1
[10:33:25.538]   ..$ ii:<environment: R_EmptyEnv> 
[10:33:25.538]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:33:25.538]  - attr(*, "resolved")= logi FALSE
[10:33:25.538]  - attr(*, "total_size")= num 56
[10:33:25.540] - copied ‘ii’ to environment
[10:33:25.540] assign_globals() ... done
[10:33:25.540] plan(): Setting new future strategy stack:
[10:33:25.540] List of future strategies:
[10:33:25.540] 1. sequential:
[10:33:25.540]    - args: function (..., envir = parent.frame())
[10:33:25.540]    - tweaked: FALSE
[10:33:25.540]    - call: NULL
[10:33:25.541] plan(): nbrOfWorkers() = 1
[10:33:25.541] plan(): Setting new future strategy stack:
[10:33:25.542] List of future strategies:
[10:33:25.542] 1. sequential:
[10:33:25.542]    - args: function (..., envir = parent.frame())
[10:33:25.542]    - tweaked: FALSE
[10:33:25.542]    - call: future::plan("sequential")
[10:33:25.542] plan(): nbrOfWorkers() = 1
[10:33:25.542] SequentialFuture started (and completed)
*** multisession() - workers inherit .libPaths()
[10:33:25.542] getGlobalsAndPackages() ...
[10:33:25.542] Searching for globals...
[10:33:25.543] - globals found: [1] ‘.libPaths’
[10:33:25.543] Searching for globals ... DONE
[10:33:25.543] Resolving globals: FALSE
[10:33:25.543] 
[10:33:25.543] 
[10:33:25.543] getGlobalsAndPackages() ... DONE
[10:33:25.544] run() for ‘Future’ ...
[10:33:25.544] - state: ‘created’
[10:33:25.544] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:33:25.546] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:33:25.546] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:33:25.546]   - Field: ‘label’
[10:33:25.546]   - Field: ‘local’
[10:33:25.546]   - Field: ‘owner’
[10:33:25.546]   - Field: ‘envir’
[10:33:25.546]   - Field: ‘packages’
[10:33:25.546]   - Field: ‘gc’
[10:33:25.547]   - Field: ‘conditions’
[10:33:25.547]   - Field: ‘expr’
[10:33:25.547]   - Field: ‘uuid’
[10:33:25.547]   - Field: ‘seed’
[10:33:25.547]   - Field: ‘version’
[10:33:25.547]   - Field: ‘result’
[10:33:25.547]   - Field: ‘asynchronous’
[10:33:25.547]   - Field: ‘calls’
[10:33:25.547]   - Field: ‘globals’
[10:33:25.547]   - Field: ‘stdout’
[10:33:25.547]   - Field: ‘earlySignal’
[10:33:25.547]   - Field: ‘lazy’
[10:33:25.548]   - Field: ‘state’
[10:33:25.548] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:33:25.548] - Launch lazy future ...
[10:33:25.548] Packages needed by the future expression (n = 0): <none>
[10:33:25.548] Packages needed by future strategies (n = 0): <none>
[10:33:25.548] {
[10:33:25.548]     {
[10:33:25.548]         {
[10:33:25.548]             ...future.startTime <- base::Sys.time()
[10:33:25.548]             {
[10:33:25.548]                 {
[10:33:25.548]                   {
[10:33:25.548]                     base::local({
[10:33:25.548]                       has_future <- base::requireNamespace("future", 
[10:33:25.548]                         quietly = TRUE)
[10:33:25.548]                       if (has_future) {
[10:33:25.548]                         ns <- base::getNamespace("future")
[10:33:25.548]                         version <- ns[[".package"]][["version"]]
[10:33:25.548]                         if (is.null(version)) 
[10:33:25.548]                           version <- utils::packageVersion("future")
[10:33:25.548]                       }
[10:33:25.548]                       else {
[10:33:25.548]                         version <- NULL
[10:33:25.548]                       }
[10:33:25.548]                       if (!has_future || version < "1.8.0") {
[10:33:25.548]                         info <- base::c(r_version = base::gsub("R version ", 
[10:33:25.548]                           "", base::R.version$version.string), 
[10:33:25.548]                           platform = base::sprintf("%s (%s-bit)", 
[10:33:25.548]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:25.548]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:25.548]                             "release", "version")], collapse = " "), 
[10:33:25.548]                           hostname = base::Sys.info()[["nodename"]])
[10:33:25.548]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:33:25.548]                           info)
[10:33:25.548]                         info <- base::paste(info, collapse = "; ")
[10:33:25.548]                         if (!has_future) {
[10:33:25.548]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:25.548]                             info)
[10:33:25.548]                         }
[10:33:25.548]                         else {
[10:33:25.548]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:25.548]                             info, version)
[10:33:25.548]                         }
[10:33:25.548]                         base::stop(msg)
[10:33:25.548]                       }
[10:33:25.548]                     })
[10:33:25.548]                   }
[10:33:25.548]                   ...future.strategy.old <- future::plan("list")
[10:33:25.548]                   options(future.plan = NULL)
[10:33:25.548]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:25.548]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:33:25.548]                 }
[10:33:25.548]                 ...future.workdir <- getwd()
[10:33:25.548]             }
[10:33:25.548]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:25.548]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:25.548]         }
[10:33:25.548]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:33:25.548]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:25.548]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:33:25.548]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:33:25.548]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:25.548]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:25.548]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:25.548]             base::names(...future.oldOptions))
[10:33:25.548]     }
[10:33:25.548]     if (FALSE) {
[10:33:25.548]     }
[10:33:25.548]     else {
[10:33:25.548]         if (TRUE) {
[10:33:25.548]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:25.548]                 open = "w")
[10:33:25.548]         }
[10:33:25.548]         else {
[10:33:25.548]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:25.548]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:25.548]         }
[10:33:25.548]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:25.548]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:25.548]             base::sink(type = "output", split = FALSE)
[10:33:25.548]             base::close(...future.stdout)
[10:33:25.548]         }, add = TRUE)
[10:33:25.548]     }
[10:33:25.548]     ...future.frame <- base::sys.nframe()
[10:33:25.548]     ...future.conditions <- base::list()
[10:33:25.548]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:25.548]     if (FALSE) {
[10:33:25.548]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:25.548]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:25.548]     }
[10:33:25.548]     ...future.result <- base::tryCatch({
[10:33:25.548]         base::withCallingHandlers({
[10:33:25.548]             ...future.value <- base::withVisible(base::local(.libPaths()))
[10:33:25.548]             future::FutureResult(value = ...future.value$value, 
[10:33:25.548]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:25.548]                   ...future.rng), globalenv = if (FALSE) 
[10:33:25.548]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:25.548]                     ...future.globalenv.names))
[10:33:25.548]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:25.548]         }, condition = base::local({
[10:33:25.548]             c <- base::c
[10:33:25.548]             inherits <- base::inherits
[10:33:25.548]             invokeRestart <- base::invokeRestart
[10:33:25.548]             length <- base::length
[10:33:25.548]             list <- base::list
[10:33:25.548]             seq.int <- base::seq.int
[10:33:25.548]             signalCondition <- base::signalCondition
[10:33:25.548]             sys.calls <- base::sys.calls
[10:33:25.548]             `[[` <- base::`[[`
[10:33:25.548]             `+` <- base::`+`
[10:33:25.548]             `<<-` <- base::`<<-`
[10:33:25.548]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:25.548]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:25.548]                   3L)]
[10:33:25.548]             }
[10:33:25.548]             function(cond) {
[10:33:25.548]                 is_error <- inherits(cond, "error")
[10:33:25.548]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:25.548]                   NULL)
[10:33:25.548]                 if (is_error) {
[10:33:25.548]                   sessionInformation <- function() {
[10:33:25.548]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:25.548]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:25.548]                       search = base::search(), system = base::Sys.info())
[10:33:25.548]                   }
[10:33:25.548]                   ...future.conditions[[length(...future.conditions) + 
[10:33:25.548]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:25.548]                     cond$call), session = sessionInformation(), 
[10:33:25.548]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:25.548]                   signalCondition(cond)
[10:33:25.548]                 }
[10:33:25.548]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:25.548]                 "immediateCondition"))) {
[10:33:25.548]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:25.548]                   ...future.conditions[[length(...future.conditions) + 
[10:33:25.548]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:25.548]                   if (TRUE && !signal) {
[10:33:25.548]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:25.548]                     {
[10:33:25.548]                       inherits <- base::inherits
[10:33:25.548]                       invokeRestart <- base::invokeRestart
[10:33:25.548]                       is.null <- base::is.null
[10:33:25.548]                       muffled <- FALSE
[10:33:25.548]                       if (inherits(cond, "message")) {
[10:33:25.548]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:25.548]                         if (muffled) 
[10:33:25.548]                           invokeRestart("muffleMessage")
[10:33:25.548]                       }
[10:33:25.548]                       else if (inherits(cond, "warning")) {
[10:33:25.548]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:25.548]                         if (muffled) 
[10:33:25.548]                           invokeRestart("muffleWarning")
[10:33:25.548]                       }
[10:33:25.548]                       else if (inherits(cond, "condition")) {
[10:33:25.548]                         if (!is.null(pattern)) {
[10:33:25.548]                           computeRestarts <- base::computeRestarts
[10:33:25.548]                           grepl <- base::grepl
[10:33:25.548]                           restarts <- computeRestarts(cond)
[10:33:25.548]                           for (restart in restarts) {
[10:33:25.548]                             name <- restart$name
[10:33:25.548]                             if (is.null(name)) 
[10:33:25.548]                               next
[10:33:25.548]                             if (!grepl(pattern, name)) 
[10:33:25.548]                               next
[10:33:25.548]                             invokeRestart(restart)
[10:33:25.548]                             muffled <- TRUE
[10:33:25.548]                             break
[10:33:25.548]                           }
[10:33:25.548]                         }
[10:33:25.548]                       }
[10:33:25.548]                       invisible(muffled)
[10:33:25.548]                     }
[10:33:25.548]                     muffleCondition(cond, pattern = "^muffle")
[10:33:25.548]                   }
[10:33:25.548]                 }
[10:33:25.548]                 else {
[10:33:25.548]                   if (TRUE) {
[10:33:25.548]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:25.548]                     {
[10:33:25.548]                       inherits <- base::inherits
[10:33:25.548]                       invokeRestart <- base::invokeRestart
[10:33:25.548]                       is.null <- base::is.null
[10:33:25.548]                       muffled <- FALSE
[10:33:25.548]                       if (inherits(cond, "message")) {
[10:33:25.548]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:25.548]                         if (muffled) 
[10:33:25.548]                           invokeRestart("muffleMessage")
[10:33:25.548]                       }
[10:33:25.548]                       else if (inherits(cond, "warning")) {
[10:33:25.548]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:25.548]                         if (muffled) 
[10:33:25.548]                           invokeRestart("muffleWarning")
[10:33:25.548]                       }
[10:33:25.548]                       else if (inherits(cond, "condition")) {
[10:33:25.548]                         if (!is.null(pattern)) {
[10:33:25.548]                           computeRestarts <- base::computeRestarts
[10:33:25.548]                           grepl <- base::grepl
[10:33:25.548]                           restarts <- computeRestarts(cond)
[10:33:25.548]                           for (restart in restarts) {
[10:33:25.548]                             name <- restart$name
[10:33:25.548]                             if (is.null(name)) 
[10:33:25.548]                               next
[10:33:25.548]                             if (!grepl(pattern, name)) 
[10:33:25.548]                               next
[10:33:25.548]                             invokeRestart(restart)
[10:33:25.548]                             muffled <- TRUE
[10:33:25.548]                             break
[10:33:25.548]                           }
[10:33:25.548]                         }
[10:33:25.548]                       }
[10:33:25.548]                       invisible(muffled)
[10:33:25.548]                     }
[10:33:25.548]                     muffleCondition(cond, pattern = "^muffle")
[10:33:25.548]                   }
[10:33:25.548]                 }
[10:33:25.548]             }
[10:33:25.548]         }))
[10:33:25.548]     }, error = function(ex) {
[10:33:25.548]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:25.548]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:25.548]                 ...future.rng), started = ...future.startTime, 
[10:33:25.548]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:25.548]             version = "1.8"), class = "FutureResult")
[10:33:25.548]     }, finally = {
[10:33:25.548]         if (!identical(...future.workdir, getwd())) 
[10:33:25.548]             setwd(...future.workdir)
[10:33:25.548]         {
[10:33:25.548]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:25.548]                 ...future.oldOptions$nwarnings <- NULL
[10:33:25.548]             }
[10:33:25.548]             base::options(...future.oldOptions)
[10:33:25.548]             if (.Platform$OS.type == "windows") {
[10:33:25.548]                 old_names <- names(...future.oldEnvVars)
[10:33:25.548]                 envs <- base::Sys.getenv()
[10:33:25.548]                 names <- names(envs)
[10:33:25.548]                 common <- intersect(names, old_names)
[10:33:25.548]                 added <- setdiff(names, old_names)
[10:33:25.548]                 removed <- setdiff(old_names, names)
[10:33:25.548]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:25.548]                   envs[common]]
[10:33:25.548]                 NAMES <- toupper(changed)
[10:33:25.548]                 args <- list()
[10:33:25.548]                 for (kk in seq_along(NAMES)) {
[10:33:25.548]                   name <- changed[[kk]]
[10:33:25.548]                   NAME <- NAMES[[kk]]
[10:33:25.548]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:25.548]                     next
[10:33:25.548]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:25.548]                 }
[10:33:25.548]                 NAMES <- toupper(added)
[10:33:25.548]                 for (kk in seq_along(NAMES)) {
[10:33:25.548]                   name <- added[[kk]]
[10:33:25.548]                   NAME <- NAMES[[kk]]
[10:33:25.548]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:25.548]                     next
[10:33:25.548]                   args[[name]] <- ""
[10:33:25.548]                 }
[10:33:25.548]                 NAMES <- toupper(removed)
[10:33:25.548]                 for (kk in seq_along(NAMES)) {
[10:33:25.548]                   name <- removed[[kk]]
[10:33:25.548]                   NAME <- NAMES[[kk]]
[10:33:25.548]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:25.548]                     next
[10:33:25.548]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:25.548]                 }
[10:33:25.548]                 if (length(args) > 0) 
[10:33:25.548]                   base::do.call(base::Sys.setenv, args = args)
[10:33:25.548]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:25.548]             }
[10:33:25.548]             else {
[10:33:25.548]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:25.548]             }
[10:33:25.548]             {
[10:33:25.548]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:25.548]                   0L) {
[10:33:25.548]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:25.548]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:25.548]                   base::options(opts)
[10:33:25.548]                 }
[10:33:25.548]                 {
[10:33:25.548]                   {
[10:33:25.548]                     NULL
[10:33:25.548]                     RNGkind("Mersenne-Twister")
[10:33:25.548]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:33:25.548]                       inherits = FALSE)
[10:33:25.548]                   }
[10:33:25.548]                   options(future.plan = NULL)
[10:33:25.548]                   if (is.na(NA_character_)) 
[10:33:25.548]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:25.548]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:25.548]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:25.548]                     .init = FALSE)
[10:33:25.548]                 }
[10:33:25.548]             }
[10:33:25.548]         }
[10:33:25.548]     })
[10:33:25.548]     if (TRUE) {
[10:33:25.548]         base::sink(type = "output", split = FALSE)
[10:33:25.548]         if (TRUE) {
[10:33:25.548]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:25.548]         }
[10:33:25.548]         else {
[10:33:25.548]             ...future.result["stdout"] <- base::list(NULL)
[10:33:25.548]         }
[10:33:25.548]         base::close(...future.stdout)
[10:33:25.548]         ...future.stdout <- NULL
[10:33:25.548]     }
[10:33:25.548]     ...future.result$conditions <- ...future.conditions
[10:33:25.548]     ...future.result$finished <- base::Sys.time()
[10:33:25.548]     ...future.result
[10:33:25.548] }
[10:33:25.550] plan(): Setting new future strategy stack:
[10:33:25.550] List of future strategies:
[10:33:25.550] 1. sequential:
[10:33:25.550]    - args: function (..., envir = parent.frame())
[10:33:25.550]    - tweaked: FALSE
[10:33:25.550]    - call: NULL
[10:33:25.551] plan(): nbrOfWorkers() = 1
[10:33:25.551] plan(): Setting new future strategy stack:
[10:33:25.551] List of future strategies:
[10:33:25.551] 1. sequential:
[10:33:25.551]    - args: function (..., envir = parent.frame())
[10:33:25.551]    - tweaked: FALSE
[10:33:25.551]    - call: future::plan("sequential")
[10:33:25.552] plan(): nbrOfWorkers() = 1
[10:33:25.552] SequentialFuture started (and completed)
[10:33:25.552] - Launch lazy future ... done
[10:33:25.552] run() for ‘SequentialFuture’ ... done
List of 2
 $ main   : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
 $ workers: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
*** multisession() and errors
[10:33:25.556] getGlobalsAndPackages() ...
[10:33:25.556] Searching for globals...
[10:33:25.557] - globals found: [2] ‘{’, ‘stop’
[10:33:25.557] Searching for globals ... DONE
[10:33:25.557] Resolving globals: FALSE
[10:33:25.558] 
[10:33:25.558] 
[10:33:25.558] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    stop("Whoops!")
    1
}
Lazy evaluation: TRUE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 387602f3-bd1b-4a3f-3d8d-305a236eb3bb
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:33:25.558] Packages needed by the future expression (n = 0): <none>
[10:33:25.559] Packages needed by future strategies (n = 0): <none>
[10:33:25.559] {
[10:33:25.559]     {
[10:33:25.559]         {
[10:33:25.559]             ...future.startTime <- base::Sys.time()
[10:33:25.559]             {
[10:33:25.559]                 {
[10:33:25.559]                   {
[10:33:25.559]                     base::local({
[10:33:25.559]                       has_future <- base::requireNamespace("future", 
[10:33:25.559]                         quietly = TRUE)
[10:33:25.559]                       if (has_future) {
[10:33:25.559]                         ns <- base::getNamespace("future")
[10:33:25.559]                         version <- ns[[".package"]][["version"]]
[10:33:25.559]                         if (is.null(version)) 
[10:33:25.559]                           version <- utils::packageVersion("future")
[10:33:25.559]                       }
[10:33:25.559]                       else {
[10:33:25.559]                         version <- NULL
[10:33:25.559]                       }
[10:33:25.559]                       if (!has_future || version < "1.8.0") {
[10:33:25.559]                         info <- base::c(r_version = base::gsub("R version ", 
[10:33:25.559]                           "", base::R.version$version.string), 
[10:33:25.559]                           platform = base::sprintf("%s (%s-bit)", 
[10:33:25.559]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:25.559]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:25.559]                             "release", "version")], collapse = " "), 
[10:33:25.559]                           hostname = base::Sys.info()[["nodename"]])
[10:33:25.559]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:33:25.559]                           info)
[10:33:25.559]                         info <- base::paste(info, collapse = "; ")
[10:33:25.559]                         if (!has_future) {
[10:33:25.559]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:25.559]                             info)
[10:33:25.559]                         }
[10:33:25.559]                         else {
[10:33:25.559]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:25.559]                             info, version)
[10:33:25.559]                         }
[10:33:25.559]                         base::stop(msg)
[10:33:25.559]                       }
[10:33:25.559]                     })
[10:33:25.559]                   }
[10:33:25.559]                   ...future.strategy.old <- future::plan("list")
[10:33:25.559]                   options(future.plan = NULL)
[10:33:25.559]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:25.559]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:33:25.559]                 }
[10:33:25.559]                 ...future.workdir <- getwd()
[10:33:25.559]             }
[10:33:25.559]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:25.559]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:25.559]         }
[10:33:25.559]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:33:25.559]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:25.559]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:33:25.559]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:33:25.559]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:25.559]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:25.559]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:25.559]             base::names(...future.oldOptions))
[10:33:25.559]     }
[10:33:25.559]     if (FALSE) {
[10:33:25.559]     }
[10:33:25.559]     else {
[10:33:25.559]         if (TRUE) {
[10:33:25.559]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:25.559]                 open = "w")
[10:33:25.559]         }
[10:33:25.559]         else {
[10:33:25.559]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:25.559]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:25.559]         }
[10:33:25.559]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:25.559]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:25.559]             base::sink(type = "output", split = FALSE)
[10:33:25.559]             base::close(...future.stdout)
[10:33:25.559]         }, add = TRUE)
[10:33:25.559]     }
[10:33:25.559]     ...future.frame <- base::sys.nframe()
[10:33:25.559]     ...future.conditions <- base::list()
[10:33:25.559]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:25.559]     if (FALSE) {
[10:33:25.559]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:25.559]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:25.559]     }
[10:33:25.559]     ...future.result <- base::tryCatch({
[10:33:25.559]         base::withCallingHandlers({
[10:33:25.559]             ...future.value <- base::withVisible(base::local({
[10:33:25.559]                 stop("Whoops!")
[10:33:25.559]                 1
[10:33:25.559]             }))
[10:33:25.559]             future::FutureResult(value = ...future.value$value, 
[10:33:25.559]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:25.559]                   ...future.rng), globalenv = if (FALSE) 
[10:33:25.559]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:25.559]                     ...future.globalenv.names))
[10:33:25.559]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:25.559]         }, condition = base::local({
[10:33:25.559]             c <- base::c
[10:33:25.559]             inherits <- base::inherits
[10:33:25.559]             invokeRestart <- base::invokeRestart
[10:33:25.559]             length <- base::length
[10:33:25.559]             list <- base::list
[10:33:25.559]             seq.int <- base::seq.int
[10:33:25.559]             signalCondition <- base::signalCondition
[10:33:25.559]             sys.calls <- base::sys.calls
[10:33:25.559]             `[[` <- base::`[[`
[10:33:25.559]             `+` <- base::`+`
[10:33:25.559]             `<<-` <- base::`<<-`
[10:33:25.559]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:25.559]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:25.559]                   3L)]
[10:33:25.559]             }
[10:33:25.559]             function(cond) {
[10:33:25.559]                 is_error <- inherits(cond, "error")
[10:33:25.559]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:25.559]                   NULL)
[10:33:25.559]                 if (is_error) {
[10:33:25.559]                   sessionInformation <- function() {
[10:33:25.559]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:25.559]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:25.559]                       search = base::search(), system = base::Sys.info())
[10:33:25.559]                   }
[10:33:25.559]                   ...future.conditions[[length(...future.conditions) + 
[10:33:25.559]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:25.559]                     cond$call), session = sessionInformation(), 
[10:33:25.559]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:25.559]                   signalCondition(cond)
[10:33:25.559]                 }
[10:33:25.559]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:25.559]                 "immediateCondition"))) {
[10:33:25.559]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:25.559]                   ...future.conditions[[length(...future.conditions) + 
[10:33:25.559]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:25.559]                   if (TRUE && !signal) {
[10:33:25.559]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:25.559]                     {
[10:33:25.559]                       inherits <- base::inherits
[10:33:25.559]                       invokeRestart <- base::invokeRestart
[10:33:25.559]                       is.null <- base::is.null
[10:33:25.559]                       muffled <- FALSE
[10:33:25.559]                       if (inherits(cond, "message")) {
[10:33:25.559]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:25.559]                         if (muffled) 
[10:33:25.559]                           invokeRestart("muffleMessage")
[10:33:25.559]                       }
[10:33:25.559]                       else if (inherits(cond, "warning")) {
[10:33:25.559]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:25.559]                         if (muffled) 
[10:33:25.559]                           invokeRestart("muffleWarning")
[10:33:25.559]                       }
[10:33:25.559]                       else if (inherits(cond, "condition")) {
[10:33:25.559]                         if (!is.null(pattern)) {
[10:33:25.559]                           computeRestarts <- base::computeRestarts
[10:33:25.559]                           grepl <- base::grepl
[10:33:25.559]                           restarts <- computeRestarts(cond)
[10:33:25.559]                           for (restart in restarts) {
[10:33:25.559]                             name <- restart$name
[10:33:25.559]                             if (is.null(name)) 
[10:33:25.559]                               next
[10:33:25.559]                             if (!grepl(pattern, name)) 
[10:33:25.559]                               next
[10:33:25.559]                             invokeRestart(restart)
[10:33:25.559]                             muffled <- TRUE
[10:33:25.559]                             break
[10:33:25.559]                           }
[10:33:25.559]                         }
[10:33:25.559]                       }
[10:33:25.559]                       invisible(muffled)
[10:33:25.559]                     }
[10:33:25.559]                     muffleCondition(cond, pattern = "^muffle")
[10:33:25.559]                   }
[10:33:25.559]                 }
[10:33:25.559]                 else {
[10:33:25.559]                   if (TRUE) {
[10:33:25.559]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:25.559]                     {
[10:33:25.559]                       inherits <- base::inherits
[10:33:25.559]                       invokeRestart <- base::invokeRestart
[10:33:25.559]                       is.null <- base::is.null
[10:33:25.559]                       muffled <- FALSE
[10:33:25.559]                       if (inherits(cond, "message")) {
[10:33:25.559]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:25.559]                         if (muffled) 
[10:33:25.559]                           invokeRestart("muffleMessage")
[10:33:25.559]                       }
[10:33:25.559]                       else if (inherits(cond, "warning")) {
[10:33:25.559]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:25.559]                         if (muffled) 
[10:33:25.559]                           invokeRestart("muffleWarning")
[10:33:25.559]                       }
[10:33:25.559]                       else if (inherits(cond, "condition")) {
[10:33:25.559]                         if (!is.null(pattern)) {
[10:33:25.559]                           computeRestarts <- base::computeRestarts
[10:33:25.559]                           grepl <- base::grepl
[10:33:25.559]                           restarts <- computeRestarts(cond)
[10:33:25.559]                           for (restart in restarts) {
[10:33:25.559]                             name <- restart$name
[10:33:25.559]                             if (is.null(name)) 
[10:33:25.559]                               next
[10:33:25.559]                             if (!grepl(pattern, name)) 
[10:33:25.559]                               next
[10:33:25.559]                             invokeRestart(restart)
[10:33:25.559]                             muffled <- TRUE
[10:33:25.559]                             break
[10:33:25.559]                           }
[10:33:25.559]                         }
[10:33:25.559]                       }
[10:33:25.559]                       invisible(muffled)
[10:33:25.559]                     }
[10:33:25.559]                     muffleCondition(cond, pattern = "^muffle")
[10:33:25.559]                   }
[10:33:25.559]                 }
[10:33:25.559]             }
[10:33:25.559]         }))
[10:33:25.559]     }, error = function(ex) {
[10:33:25.559]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:25.559]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:25.559]                 ...future.rng), started = ...future.startTime, 
[10:33:25.559]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:25.559]             version = "1.8"), class = "FutureResult")
[10:33:25.559]     }, finally = {
[10:33:25.559]         if (!identical(...future.workdir, getwd())) 
[10:33:25.559]             setwd(...future.workdir)
[10:33:25.559]         {
[10:33:25.559]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:25.559]                 ...future.oldOptions$nwarnings <- NULL
[10:33:25.559]             }
[10:33:25.559]             base::options(...future.oldOptions)
[10:33:25.559]             if (.Platform$OS.type == "windows") {
[10:33:25.559]                 old_names <- names(...future.oldEnvVars)
[10:33:25.559]                 envs <- base::Sys.getenv()
[10:33:25.559]                 names <- names(envs)
[10:33:25.559]                 common <- intersect(names, old_names)
[10:33:25.559]                 added <- setdiff(names, old_names)
[10:33:25.559]                 removed <- setdiff(old_names, names)
[10:33:25.559]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:25.559]                   envs[common]]
[10:33:25.559]                 NAMES <- toupper(changed)
[10:33:25.559]                 args <- list()
[10:33:25.559]                 for (kk in seq_along(NAMES)) {
[10:33:25.559]                   name <- changed[[kk]]
[10:33:25.559]                   NAME <- NAMES[[kk]]
[10:33:25.559]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:25.559]                     next
[10:33:25.559]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:25.559]                 }
[10:33:25.559]                 NAMES <- toupper(added)
[10:33:25.559]                 for (kk in seq_along(NAMES)) {
[10:33:25.559]                   name <- added[[kk]]
[10:33:25.559]                   NAME <- NAMES[[kk]]
[10:33:25.559]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:25.559]                     next
[10:33:25.559]                   args[[name]] <- ""
[10:33:25.559]                 }
[10:33:25.559]                 NAMES <- toupper(removed)
[10:33:25.559]                 for (kk in seq_along(NAMES)) {
[10:33:25.559]                   name <- removed[[kk]]
[10:33:25.559]                   NAME <- NAMES[[kk]]
[10:33:25.559]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:25.559]                     next
[10:33:25.559]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:25.559]                 }
[10:33:25.559]                 if (length(args) > 0) 
[10:33:25.559]                   base::do.call(base::Sys.setenv, args = args)
[10:33:25.559]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:25.559]             }
[10:33:25.559]             else {
[10:33:25.559]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:25.559]             }
[10:33:25.559]             {
[10:33:25.559]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:25.559]                   0L) {
[10:33:25.559]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:25.559]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:25.559]                   base::options(opts)
[10:33:25.559]                 }
[10:33:25.559]                 {
[10:33:25.559]                   {
[10:33:25.559]                     NULL
[10:33:25.559]                     RNGkind("Mersenne-Twister")
[10:33:25.559]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:33:25.559]                       inherits = FALSE)
[10:33:25.559]                   }
[10:33:25.559]                   options(future.plan = NULL)
[10:33:25.559]                   if (is.na(NA_character_)) 
[10:33:25.559]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:25.559]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:25.559]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:25.559]                     .init = FALSE)
[10:33:25.559]                 }
[10:33:25.559]             }
[10:33:25.559]         }
[10:33:25.559]     })
[10:33:25.559]     if (TRUE) {
[10:33:25.559]         base::sink(type = "output", split = FALSE)
[10:33:25.559]         if (TRUE) {
[10:33:25.559]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:25.559]         }
[10:33:25.559]         else {
[10:33:25.559]             ...future.result["stdout"] <- base::list(NULL)
[10:33:25.559]         }
[10:33:25.559]         base::close(...future.stdout)
[10:33:25.559]         ...future.stdout <- NULL
[10:33:25.559]     }
[10:33:25.559]     ...future.result$conditions <- ...future.conditions
[10:33:25.559]     ...future.result$finished <- base::Sys.time()
[10:33:25.559]     ...future.result
[10:33:25.559] }
[10:33:25.561] plan(): Setting new future strategy stack:
[10:33:25.561] List of future strategies:
[10:33:25.561] 1. sequential:
[10:33:25.561]    - args: function (..., envir = parent.frame())
[10:33:25.561]    - tweaked: FALSE
[10:33:25.561]    - call: NULL
[10:33:25.561] plan(): nbrOfWorkers() = 1
[10:33:25.562] plan(): Setting new future strategy stack:
[10:33:25.562] List of future strategies:
[10:33:25.562] 1. sequential:
[10:33:25.562]    - args: function (..., envir = parent.frame())
[10:33:25.562]    - tweaked: FALSE
[10:33:25.562]    - call: future::plan("sequential")
[10:33:25.562] plan(): nbrOfWorkers() = 1
[10:33:25.563] SequentialFuture started (and completed)
[10:33:25.563] signalConditions() ...
[10:33:25.563]  - include = ‘immediateCondition’
[10:33:25.563]  - exclude = 
[10:33:25.563]  - resignal = FALSE
[10:33:25.563]  - Number of conditions: 1
[10:33:25.563] signalConditions() ... done
[10:33:25.563] signalConditions() ...
[10:33:25.563]  - include = ‘immediateCondition’
[10:33:25.563]  - exclude = 
[10:33:25.564]  - resignal = FALSE
[10:33:25.564]  - Number of conditions: 1
[10:33:25.564] signalConditions() ... done
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[10:33:25.564] signalConditions() ...
[10:33:25.564]  - include = ‘immediateCondition’
[10:33:25.564]  - exclude = 
[10:33:25.564]  - resignal = FALSE
[10:33:25.564]  - Number of conditions: 1
[10:33:25.564] signalConditions() ... done
[10:33:25.565] Future state: ‘finished’
[10:33:25.565] signalConditions() ...
[10:33:25.565]  - include = ‘condition’
[10:33:25.565]  - exclude = ‘immediateCondition’
[10:33:25.565]  - resignal = TRUE
[10:33:25.565]  - Number of conditions: 1
[10:33:25.565]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[10:33:25.565] signalConditions() ... done
[1] "Error in eval(quote({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[10:33:25.566] signalConditions() ...
[10:33:25.566]  - include = ‘immediateCondition’
[10:33:25.566]  - exclude = 
[10:33:25.566]  - resignal = FALSE
[10:33:25.566]  - Number of conditions: 1
[10:33:25.566] signalConditions() ... done
[10:33:25.566] Future state: ‘finished’
[10:33:25.566] signalConditions() ...
[10:33:25.566]  - include = ‘condition’
[10:33:25.566]  - exclude = ‘immediateCondition’
[10:33:25.566]  - resignal = TRUE
[10:33:25.567]  - Number of conditions: 1
[10:33:25.567]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[10:33:25.567] signalConditions() ... done
[1] "Error in eval(quote({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[10:33:25.570] getGlobalsAndPackages() ...
[10:33:25.570] Searching for globals...
[10:33:25.571] - globals found: [5] ‘{’, ‘stop’, ‘structure’, ‘list’, ‘c’
[10:33:25.571] Searching for globals ... DONE
[10:33:25.572] Resolving globals: FALSE
[10:33:25.572] 
[10:33:25.572] 
[10:33:25.572] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    stop(structure(list(message = "boom"), class = c("MyError", 
        "error", "condition")))
}
Lazy evaluation: TRUE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 387602f3-bd1b-4a3f-3d8d-305a236eb3bb
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:33:25.573] Packages needed by the future expression (n = 0): <none>
[10:33:25.573] Packages needed by future strategies (n = 0): <none>
[10:33:25.573] {
[10:33:25.573]     {
[10:33:25.573]         {
[10:33:25.573]             ...future.startTime <- base::Sys.time()
[10:33:25.573]             {
[10:33:25.573]                 {
[10:33:25.573]                   {
[10:33:25.573]                     base::local({
[10:33:25.573]                       has_future <- base::requireNamespace("future", 
[10:33:25.573]                         quietly = TRUE)
[10:33:25.573]                       if (has_future) {
[10:33:25.573]                         ns <- base::getNamespace("future")
[10:33:25.573]                         version <- ns[[".package"]][["version"]]
[10:33:25.573]                         if (is.null(version)) 
[10:33:25.573]                           version <- utils::packageVersion("future")
[10:33:25.573]                       }
[10:33:25.573]                       else {
[10:33:25.573]                         version <- NULL
[10:33:25.573]                       }
[10:33:25.573]                       if (!has_future || version < "1.8.0") {
[10:33:25.573]                         info <- base::c(r_version = base::gsub("R version ", 
[10:33:25.573]                           "", base::R.version$version.string), 
[10:33:25.573]                           platform = base::sprintf("%s (%s-bit)", 
[10:33:25.573]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:25.573]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:25.573]                             "release", "version")], collapse = " "), 
[10:33:25.573]                           hostname = base::Sys.info()[["nodename"]])
[10:33:25.573]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:33:25.573]                           info)
[10:33:25.573]                         info <- base::paste(info, collapse = "; ")
[10:33:25.573]                         if (!has_future) {
[10:33:25.573]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:25.573]                             info)
[10:33:25.573]                         }
[10:33:25.573]                         else {
[10:33:25.573]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:25.573]                             info, version)
[10:33:25.573]                         }
[10:33:25.573]                         base::stop(msg)
[10:33:25.573]                       }
[10:33:25.573]                     })
[10:33:25.573]                   }
[10:33:25.573]                   ...future.strategy.old <- future::plan("list")
[10:33:25.573]                   options(future.plan = NULL)
[10:33:25.573]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:25.573]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:33:25.573]                 }
[10:33:25.573]                 ...future.workdir <- getwd()
[10:33:25.573]             }
[10:33:25.573]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:25.573]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:25.573]         }
[10:33:25.573]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:33:25.573]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:25.573]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:33:25.573]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:33:25.573]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:25.573]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:25.573]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:25.573]             base::names(...future.oldOptions))
[10:33:25.573]     }
[10:33:25.573]     if (FALSE) {
[10:33:25.573]     }
[10:33:25.573]     else {
[10:33:25.573]         if (TRUE) {
[10:33:25.573]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:25.573]                 open = "w")
[10:33:25.573]         }
[10:33:25.573]         else {
[10:33:25.573]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:25.573]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:25.573]         }
[10:33:25.573]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:25.573]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:25.573]             base::sink(type = "output", split = FALSE)
[10:33:25.573]             base::close(...future.stdout)
[10:33:25.573]         }, add = TRUE)
[10:33:25.573]     }
[10:33:25.573]     ...future.frame <- base::sys.nframe()
[10:33:25.573]     ...future.conditions <- base::list()
[10:33:25.573]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:25.573]     if (FALSE) {
[10:33:25.573]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:25.573]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:25.573]     }
[10:33:25.573]     ...future.result <- base::tryCatch({
[10:33:25.573]         base::withCallingHandlers({
[10:33:25.573]             ...future.value <- base::withVisible(base::local({
[10:33:25.573]                 stop(structure(list(message = "boom"), class = c("MyError", 
[10:33:25.573]                   "error", "condition")))
[10:33:25.573]             }))
[10:33:25.573]             future::FutureResult(value = ...future.value$value, 
[10:33:25.573]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:25.573]                   ...future.rng), globalenv = if (FALSE) 
[10:33:25.573]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:25.573]                     ...future.globalenv.names))
[10:33:25.573]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:25.573]         }, condition = base::local({
[10:33:25.573]             c <- base::c
[10:33:25.573]             inherits <- base::inherits
[10:33:25.573]             invokeRestart <- base::invokeRestart
[10:33:25.573]             length <- base::length
[10:33:25.573]             list <- base::list
[10:33:25.573]             seq.int <- base::seq.int
[10:33:25.573]             signalCondition <- base::signalCondition
[10:33:25.573]             sys.calls <- base::sys.calls
[10:33:25.573]             `[[` <- base::`[[`
[10:33:25.573]             `+` <- base::`+`
[10:33:25.573]             `<<-` <- base::`<<-`
[10:33:25.573]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:25.573]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:25.573]                   3L)]
[10:33:25.573]             }
[10:33:25.573]             function(cond) {
[10:33:25.573]                 is_error <- inherits(cond, "error")
[10:33:25.573]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:25.573]                   NULL)
[10:33:25.573]                 if (is_error) {
[10:33:25.573]                   sessionInformation <- function() {
[10:33:25.573]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:25.573]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:25.573]                       search = base::search(), system = base::Sys.info())
[10:33:25.573]                   }
[10:33:25.573]                   ...future.conditions[[length(...future.conditions) + 
[10:33:25.573]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:25.573]                     cond$call), session = sessionInformation(), 
[10:33:25.573]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:25.573]                   signalCondition(cond)
[10:33:25.573]                 }
[10:33:25.573]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:25.573]                 "immediateCondition"))) {
[10:33:25.573]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:25.573]                   ...future.conditions[[length(...future.conditions) + 
[10:33:25.573]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:25.573]                   if (TRUE && !signal) {
[10:33:25.573]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:25.573]                     {
[10:33:25.573]                       inherits <- base::inherits
[10:33:25.573]                       invokeRestart <- base::invokeRestart
[10:33:25.573]                       is.null <- base::is.null
[10:33:25.573]                       muffled <- FALSE
[10:33:25.573]                       if (inherits(cond, "message")) {
[10:33:25.573]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:25.573]                         if (muffled) 
[10:33:25.573]                           invokeRestart("muffleMessage")
[10:33:25.573]                       }
[10:33:25.573]                       else if (inherits(cond, "warning")) {
[10:33:25.573]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:25.573]                         if (muffled) 
[10:33:25.573]                           invokeRestart("muffleWarning")
[10:33:25.573]                       }
[10:33:25.573]                       else if (inherits(cond, "condition")) {
[10:33:25.573]                         if (!is.null(pattern)) {
[10:33:25.573]                           computeRestarts <- base::computeRestarts
[10:33:25.573]                           grepl <- base::grepl
[10:33:25.573]                           restarts <- computeRestarts(cond)
[10:33:25.573]                           for (restart in restarts) {
[10:33:25.573]                             name <- restart$name
[10:33:25.573]                             if (is.null(name)) 
[10:33:25.573]                               next
[10:33:25.573]                             if (!grepl(pattern, name)) 
[10:33:25.573]                               next
[10:33:25.573]                             invokeRestart(restart)
[10:33:25.573]                             muffled <- TRUE
[10:33:25.573]                             break
[10:33:25.573]                           }
[10:33:25.573]                         }
[10:33:25.573]                       }
[10:33:25.573]                       invisible(muffled)
[10:33:25.573]                     }
[10:33:25.573]                     muffleCondition(cond, pattern = "^muffle")
[10:33:25.573]                   }
[10:33:25.573]                 }
[10:33:25.573]                 else {
[10:33:25.573]                   if (TRUE) {
[10:33:25.573]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:25.573]                     {
[10:33:25.573]                       inherits <- base::inherits
[10:33:25.573]                       invokeRestart <- base::invokeRestart
[10:33:25.573]                       is.null <- base::is.null
[10:33:25.573]                       muffled <- FALSE
[10:33:25.573]                       if (inherits(cond, "message")) {
[10:33:25.573]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:25.573]                         if (muffled) 
[10:33:25.573]                           invokeRestart("muffleMessage")
[10:33:25.573]                       }
[10:33:25.573]                       else if (inherits(cond, "warning")) {
[10:33:25.573]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:25.573]                         if (muffled) 
[10:33:25.573]                           invokeRestart("muffleWarning")
[10:33:25.573]                       }
[10:33:25.573]                       else if (inherits(cond, "condition")) {
[10:33:25.573]                         if (!is.null(pattern)) {
[10:33:25.573]                           computeRestarts <- base::computeRestarts
[10:33:25.573]                           grepl <- base::grepl
[10:33:25.573]                           restarts <- computeRestarts(cond)
[10:33:25.573]                           for (restart in restarts) {
[10:33:25.573]                             name <- restart$name
[10:33:25.573]                             if (is.null(name)) 
[10:33:25.573]                               next
[10:33:25.573]                             if (!grepl(pattern, name)) 
[10:33:25.573]                               next
[10:33:25.573]                             invokeRestart(restart)
[10:33:25.573]                             muffled <- TRUE
[10:33:25.573]                             break
[10:33:25.573]                           }
[10:33:25.573]                         }
[10:33:25.573]                       }
[10:33:25.573]                       invisible(muffled)
[10:33:25.573]                     }
[10:33:25.573]                     muffleCondition(cond, pattern = "^muffle")
[10:33:25.573]                   }
[10:33:25.573]                 }
[10:33:25.573]             }
[10:33:25.573]         }))
[10:33:25.573]     }, error = function(ex) {
[10:33:25.573]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:25.573]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:25.573]                 ...future.rng), started = ...future.startTime, 
[10:33:25.573]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:25.573]             version = "1.8"), class = "FutureResult")
[10:33:25.573]     }, finally = {
[10:33:25.573]         if (!identical(...future.workdir, getwd())) 
[10:33:25.573]             setwd(...future.workdir)
[10:33:25.573]         {
[10:33:25.573]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:25.573]                 ...future.oldOptions$nwarnings <- NULL
[10:33:25.573]             }
[10:33:25.573]             base::options(...future.oldOptions)
[10:33:25.573]             if (.Platform$OS.type == "windows") {
[10:33:25.573]                 old_names <- names(...future.oldEnvVars)
[10:33:25.573]                 envs <- base::Sys.getenv()
[10:33:25.573]                 names <- names(envs)
[10:33:25.573]                 common <- intersect(names, old_names)
[10:33:25.573]                 added <- setdiff(names, old_names)
[10:33:25.573]                 removed <- setdiff(old_names, names)
[10:33:25.573]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:25.573]                   envs[common]]
[10:33:25.573]                 NAMES <- toupper(changed)
[10:33:25.573]                 args <- list()
[10:33:25.573]                 for (kk in seq_along(NAMES)) {
[10:33:25.573]                   name <- changed[[kk]]
[10:33:25.573]                   NAME <- NAMES[[kk]]
[10:33:25.573]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:25.573]                     next
[10:33:25.573]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:25.573]                 }
[10:33:25.573]                 NAMES <- toupper(added)
[10:33:25.573]                 for (kk in seq_along(NAMES)) {
[10:33:25.573]                   name <- added[[kk]]
[10:33:25.573]                   NAME <- NAMES[[kk]]
[10:33:25.573]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:25.573]                     next
[10:33:25.573]                   args[[name]] <- ""
[10:33:25.573]                 }
[10:33:25.573]                 NAMES <- toupper(removed)
[10:33:25.573]                 for (kk in seq_along(NAMES)) {
[10:33:25.573]                   name <- removed[[kk]]
[10:33:25.573]                   NAME <- NAMES[[kk]]
[10:33:25.573]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:25.573]                     next
[10:33:25.573]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:25.573]                 }
[10:33:25.573]                 if (length(args) > 0) 
[10:33:25.573]                   base::do.call(base::Sys.setenv, args = args)
[10:33:25.573]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:25.573]             }
[10:33:25.573]             else {
[10:33:25.573]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:25.573]             }
[10:33:25.573]             {
[10:33:25.573]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:25.573]                   0L) {
[10:33:25.573]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:25.573]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:25.573]                   base::options(opts)
[10:33:25.573]                 }
[10:33:25.573]                 {
[10:33:25.573]                   {
[10:33:25.573]                     NULL
[10:33:25.573]                     RNGkind("Mersenne-Twister")
[10:33:25.573]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:33:25.573]                       inherits = FALSE)
[10:33:25.573]                   }
[10:33:25.573]                   options(future.plan = NULL)
[10:33:25.573]                   if (is.na(NA_character_)) 
[10:33:25.573]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:25.573]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:25.573]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:25.573]                     .init = FALSE)
[10:33:25.573]                 }
[10:33:25.573]             }
[10:33:25.573]         }
[10:33:25.573]     })
[10:33:25.573]     if (TRUE) {
[10:33:25.573]         base::sink(type = "output", split = FALSE)
[10:33:25.573]         if (TRUE) {
[10:33:25.573]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:25.573]         }
[10:33:25.573]         else {
[10:33:25.573]             ...future.result["stdout"] <- base::list(NULL)
[10:33:25.573]         }
[10:33:25.573]         base::close(...future.stdout)
[10:33:25.573]         ...future.stdout <- NULL
[10:33:25.573]     }
[10:33:25.573]     ...future.result$conditions <- ...future.conditions
[10:33:25.573]     ...future.result$finished <- base::Sys.time()
[10:33:25.573]     ...future.result
[10:33:25.573] }
[10:33:25.575] plan(): Setting new future strategy stack:
[10:33:25.575] List of future strategies:
[10:33:25.575] 1. sequential:
[10:33:25.575]    - args: function (..., envir = parent.frame())
[10:33:25.575]    - tweaked: FALSE
[10:33:25.575]    - call: NULL
[10:33:25.575] plan(): nbrOfWorkers() = 1
[10:33:25.576] plan(): Setting new future strategy stack:
[10:33:25.576] List of future strategies:
[10:33:25.576] 1. sequential:
[10:33:25.576]    - args: function (..., envir = parent.frame())
[10:33:25.576]    - tweaked: FALSE
[10:33:25.576]    - call: future::plan("sequential")
[10:33:25.577] plan(): nbrOfWorkers() = 1
[10:33:25.577] SequentialFuture started (and completed)
[10:33:25.577] signalConditions() ...
[10:33:25.577]  - include = ‘immediateCondition’
[10:33:25.577]  - exclude = 
[10:33:25.577]  - resignal = FALSE
[10:33:25.577]  - Number of conditions: 1
[10:33:25.577] signalConditions() ... done
[10:33:25.578] signalConditions() ...
[10:33:25.578]  - include = ‘immediateCondition’
[10:33:25.578]  - exclude = 
[10:33:25.578]  - resignal = FALSE
[10:33:25.578]  - Number of conditions: 1
[10:33:25.578] signalConditions() ... done
<MyError: boom>
[10:33:25.578] signalConditions() ...
[10:33:25.578]  - include = ‘immediateCondition’
[10:33:25.578]  - exclude = 
[10:33:25.578]  - resignal = FALSE
[10:33:25.579]  - Number of conditions: 1
[10:33:25.579] signalConditions() ... done
[10:33:25.579] Future state: ‘finished’
[10:33:25.579] signalConditions() ...
[10:33:25.579]  - include = ‘condition’
[10:33:25.579]  - exclude = ‘immediateCondition’
[10:33:25.579]  - resignal = TRUE
[10:33:25.581]  - Number of conditions: 1
[10:33:25.581]  - Condition #1: ‘MyError’, ‘error’, ‘condition’
[10:33:25.581] signalConditions() ... done
Testing with 1 cores ... DONE
Testing with 2 cores ...
[10:33:25.586] getGlobalsAndPackages() ...
[10:33:25.587] 
[10:33:25.587] - globals: [0] <none>
[10:33:25.587] getGlobalsAndPackages() ... DONE
[10:33:25.587] [local output] makeClusterPSOCK() ...
[10:33:25.622] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[10:33:25.623] [local output] Base port: 11433
[10:33:25.624] [local output] Getting setup options for 2 cluster nodes ...
[10:33:25.624] [local output]  - Node 1 of 2 ...
[10:33:25.624] [local output] localMachine=TRUE => revtunnel=FALSE

[10:33:25.625] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpaAVBkE/worker.rank=1.parallelly.parent=85325.14d4d2cd2b972.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpaAVBkE/worker.rank=1.parallelly.parent=85325.14d4d2cd2b972.pid")'’
[10:33:25.812] - Possible to infer worker's PID: TRUE
[10:33:25.813] [local output] Rscript port: 11433

[10:33:25.813] [local output]  - Node 2 of 2 ...
[10:33:25.813] [local output] localMachine=TRUE => revtunnel=FALSE

[10:33:25.814] [local output] Rscript port: 11433

[10:33:25.814] [local output] Getting setup options for 2 cluster nodes ... done
[10:33:25.814] [local output]  - Parallel setup requested for some PSOCK nodes
[10:33:25.815] [local output] Setting up PSOCK nodes in parallel
[10:33:25.815] List of 36
[10:33:25.815]  $ worker          : chr "localhost"
[10:33:25.815]   ..- attr(*, "localhost")= logi TRUE
[10:33:25.815]  $ master          : chr "localhost"
[10:33:25.815]  $ port            : int 11433
[10:33:25.815]  $ connectTimeout  : num 120
[10:33:25.815]  $ timeout         : num 2592000
[10:33:25.815]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[10:33:25.815]  $ homogeneous     : logi TRUE
[10:33:25.815]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[10:33:25.815]  $ rscript_envs    : NULL
[10:33:25.815]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:33:25.815]  $ rscript_startup : NULL
[10:33:25.815]  $ rscript_sh      : chr "sh"
[10:33:25.815]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:33:25.815]  $ methods         : logi TRUE
[10:33:25.815]  $ socketOptions   : chr "no-delay"
[10:33:25.815]  $ useXDR          : logi FALSE
[10:33:25.815]  $ outfile         : chr "/dev/null"
[10:33:25.815]  $ renice          : int NA
[10:33:25.815]  $ rshcmd          : NULL
[10:33:25.815]  $ user            : chr(0) 
[10:33:25.815]  $ revtunnel       : logi FALSE
[10:33:25.815]  $ rshlogfile      : NULL
[10:33:25.815]  $ rshopts         : chr(0) 
[10:33:25.815]  $ rank            : int 1
[10:33:25.815]  $ manual          : logi FALSE
[10:33:25.815]  $ dryrun          : logi FALSE
[10:33:25.815]  $ quiet           : logi FALSE
[10:33:25.815]  $ setup_strategy  : chr "parallel"
[10:33:25.815]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:33:25.815]  $ pidfile         : chr "/tmp/RtmpaAVBkE/worker.rank=1.parallelly.parent=85325.14d4d2cd2b972.pid"
[10:33:25.815]  $ rshcmd_label    : NULL
[10:33:25.815]  $ rsh_call        : NULL
[10:33:25.815]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:33:25.815]  $ localMachine    : logi TRUE
[10:33:25.815]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[10:33:25.815]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[10:33:25.815]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[10:33:25.815]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[10:33:25.815]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[10:33:25.815]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[10:33:25.815]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[10:33:25.815]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[10:33:25.815]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[10:33:25.815]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[10:33:25.815]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[10:33:25.815]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[10:33:25.815]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[10:33:25.815]  $ arguments       :List of 28
[10:33:25.815]   ..$ worker          : chr "localhost"
[10:33:25.815]   ..$ master          : NULL
[10:33:25.815]   ..$ port            : int 11433
[10:33:25.815]   ..$ connectTimeout  : num 120
[10:33:25.815]   ..$ timeout         : num 2592000
[10:33:25.815]   ..$ rscript         : NULL
[10:33:25.815]   ..$ homogeneous     : NULL
[10:33:25.815]   ..$ rscript_args    : NULL
[10:33:25.815]   ..$ rscript_envs    : NULL
[10:33:25.815]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:33:25.815]   ..$ rscript_startup : NULL
[10:33:25.815]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[10:33:25.815]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:33:25.815]   ..$ methods         : logi TRUE
[10:33:25.815]   ..$ socketOptions   : chr "no-delay"
[10:33:25.815]   ..$ useXDR          : logi FALSE
[10:33:25.815]   ..$ outfile         : chr "/dev/null"
[10:33:25.815]   ..$ renice          : int NA
[10:33:25.815]   ..$ rshcmd          : NULL
[10:33:25.815]   ..$ user            : NULL
[10:33:25.815]   ..$ revtunnel       : logi NA
[10:33:25.815]   ..$ rshlogfile      : NULL
[10:33:25.815]   ..$ rshopts         : NULL
[10:33:25.815]   ..$ rank            : int 1
[10:33:25.815]   ..$ manual          : logi FALSE
[10:33:25.815]   ..$ dryrun          : logi FALSE
[10:33:25.815]   ..$ quiet           : logi FALSE
[10:33:25.815]   ..$ setup_strategy  : chr "parallel"
[10:33:25.815]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[10:33:25.832] [local output] System call to launch all workers:
[10:33:25.832] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpaAVBkE/worker.rank=1.parallelly.parent=85325.14d4d2cd2b972.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11433 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[10:33:25.832] [local output] Starting PSOCK main server
[10:33:25.837] [local output] Workers launched
[10:33:25.838] [local output] Waiting for workers to connect back
[10:33:25.838]  - [local output] 0 workers out of 2 ready
[10:33:26.081]  - [local output] 0 workers out of 2 ready
[10:33:26.082]  - [local output] 1 workers out of 2 ready
[10:33:26.082]  - [local output] 2 workers out of 2 ready
[10:33:26.082] [local output] Launching of workers completed
[10:33:26.082] [local output] Collecting session information from workers
[10:33:26.083] [local output]  - Worker #1 of 2
[10:33:26.084] [local output]  - Worker #2 of 2
[10:33:26.084] [local output] makeClusterPSOCK() ... done
[10:33:26.096] Packages needed by the future expression (n = 0): <none>
[10:33:26.096] Packages needed by future strategies (n = 0): <none>
[10:33:26.096] {
[10:33:26.096]     {
[10:33:26.096]         {
[10:33:26.096]             ...future.startTime <- base::Sys.time()
[10:33:26.096]             {
[10:33:26.096]                 {
[10:33:26.096]                   {
[10:33:26.096]                     {
[10:33:26.096]                       base::local({
[10:33:26.096]                         has_future <- base::requireNamespace("future", 
[10:33:26.096]                           quietly = TRUE)
[10:33:26.096]                         if (has_future) {
[10:33:26.096]                           ns <- base::getNamespace("future")
[10:33:26.096]                           version <- ns[[".package"]][["version"]]
[10:33:26.096]                           if (is.null(version)) 
[10:33:26.096]                             version <- utils::packageVersion("future")
[10:33:26.096]                         }
[10:33:26.096]                         else {
[10:33:26.096]                           version <- NULL
[10:33:26.096]                         }
[10:33:26.096]                         if (!has_future || version < "1.8.0") {
[10:33:26.096]                           info <- base::c(r_version = base::gsub("R version ", 
[10:33:26.096]                             "", base::R.version$version.string), 
[10:33:26.096]                             platform = base::sprintf("%s (%s-bit)", 
[10:33:26.096]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:26.096]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:26.096]                               "release", "version")], collapse = " "), 
[10:33:26.096]                             hostname = base::Sys.info()[["nodename"]])
[10:33:26.096]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:33:26.096]                             info)
[10:33:26.096]                           info <- base::paste(info, collapse = "; ")
[10:33:26.096]                           if (!has_future) {
[10:33:26.096]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:26.096]                               info)
[10:33:26.096]                           }
[10:33:26.096]                           else {
[10:33:26.096]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:26.096]                               info, version)
[10:33:26.096]                           }
[10:33:26.096]                           base::stop(msg)
[10:33:26.096]                         }
[10:33:26.096]                       })
[10:33:26.096]                     }
[10:33:26.096]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:33:26.096]                     base::options(mc.cores = 1L)
[10:33:26.096]                   }
[10:33:26.096]                   ...future.strategy.old <- future::plan("list")
[10:33:26.096]                   options(future.plan = NULL)
[10:33:26.096]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:26.096]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:33:26.096]                 }
[10:33:26.096]                 ...future.workdir <- getwd()
[10:33:26.096]             }
[10:33:26.096]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:26.096]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:26.096]         }
[10:33:26.096]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:33:26.096]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:26.096]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:33:26.096]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:33:26.096]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:26.096]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:26.096]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:26.096]             base::names(...future.oldOptions))
[10:33:26.096]     }
[10:33:26.096]     if (FALSE) {
[10:33:26.096]     }
[10:33:26.096]     else {
[10:33:26.096]         if (TRUE) {
[10:33:26.096]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:26.096]                 open = "w")
[10:33:26.096]         }
[10:33:26.096]         else {
[10:33:26.096]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:26.096]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:26.096]         }
[10:33:26.096]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:26.096]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:26.096]             base::sink(type = "output", split = FALSE)
[10:33:26.096]             base::close(...future.stdout)
[10:33:26.096]         }, add = TRUE)
[10:33:26.096]     }
[10:33:26.096]     ...future.frame <- base::sys.nframe()
[10:33:26.096]     ...future.conditions <- base::list()
[10:33:26.096]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:26.096]     if (FALSE) {
[10:33:26.096]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:26.096]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:26.096]     }
[10:33:26.096]     ...future.result <- base::tryCatch({
[10:33:26.096]         base::withCallingHandlers({
[10:33:26.096]             ...future.value <- base::withVisible(base::local({
[10:33:26.096]                 ...future.makeSendCondition <- base::local({
[10:33:26.096]                   sendCondition <- NULL
[10:33:26.096]                   function(frame = 1L) {
[10:33:26.096]                     if (is.function(sendCondition)) 
[10:33:26.096]                       return(sendCondition)
[10:33:26.096]                     ns <- getNamespace("parallel")
[10:33:26.096]                     if (exists("sendData", mode = "function", 
[10:33:26.096]                       envir = ns)) {
[10:33:26.096]                       parallel_sendData <- get("sendData", mode = "function", 
[10:33:26.096]                         envir = ns)
[10:33:26.096]                       envir <- sys.frame(frame)
[10:33:26.096]                       master <- NULL
[10:33:26.096]                       while (!identical(envir, .GlobalEnv) && 
[10:33:26.096]                         !identical(envir, emptyenv())) {
[10:33:26.096]                         if (exists("master", mode = "list", envir = envir, 
[10:33:26.096]                           inherits = FALSE)) {
[10:33:26.096]                           master <- get("master", mode = "list", 
[10:33:26.096]                             envir = envir, inherits = FALSE)
[10:33:26.096]                           if (inherits(master, c("SOCKnode", 
[10:33:26.096]                             "SOCK0node"))) {
[10:33:26.096]                             sendCondition <<- function(cond) {
[10:33:26.096]                               data <- list(type = "VALUE", value = cond, 
[10:33:26.096]                                 success = TRUE)
[10:33:26.096]                               parallel_sendData(master, data)
[10:33:26.096]                             }
[10:33:26.096]                             return(sendCondition)
[10:33:26.096]                           }
[10:33:26.096]                         }
[10:33:26.096]                         frame <- frame + 1L
[10:33:26.096]                         envir <- sys.frame(frame)
[10:33:26.096]                       }
[10:33:26.096]                     }
[10:33:26.096]                     sendCondition <<- function(cond) NULL
[10:33:26.096]                   }
[10:33:26.096]                 })
[10:33:26.096]                 withCallingHandlers({
[10:33:26.096]                   {
[10:33:26.096]                     42L
[10:33:26.096]                   }
[10:33:26.096]                 }, immediateCondition = function(cond) {
[10:33:26.096]                   sendCondition <- ...future.makeSendCondition()
[10:33:26.096]                   sendCondition(cond)
[10:33:26.096]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:26.096]                   {
[10:33:26.096]                     inherits <- base::inherits
[10:33:26.096]                     invokeRestart <- base::invokeRestart
[10:33:26.096]                     is.null <- base::is.null
[10:33:26.096]                     muffled <- FALSE
[10:33:26.096]                     if (inherits(cond, "message")) {
[10:33:26.096]                       muffled <- grepl(pattern, "muffleMessage")
[10:33:26.096]                       if (muffled) 
[10:33:26.096]                         invokeRestart("muffleMessage")
[10:33:26.096]                     }
[10:33:26.096]                     else if (inherits(cond, "warning")) {
[10:33:26.096]                       muffled <- grepl(pattern, "muffleWarning")
[10:33:26.096]                       if (muffled) 
[10:33:26.096]                         invokeRestart("muffleWarning")
[10:33:26.096]                     }
[10:33:26.096]                     else if (inherits(cond, "condition")) {
[10:33:26.096]                       if (!is.null(pattern)) {
[10:33:26.096]                         computeRestarts <- base::computeRestarts
[10:33:26.096]                         grepl <- base::grepl
[10:33:26.096]                         restarts <- computeRestarts(cond)
[10:33:26.096]                         for (restart in restarts) {
[10:33:26.096]                           name <- restart$name
[10:33:26.096]                           if (is.null(name)) 
[10:33:26.096]                             next
[10:33:26.096]                           if (!grepl(pattern, name)) 
[10:33:26.096]                             next
[10:33:26.096]                           invokeRestart(restart)
[10:33:26.096]                           muffled <- TRUE
[10:33:26.096]                           break
[10:33:26.096]                         }
[10:33:26.096]                       }
[10:33:26.096]                     }
[10:33:26.096]                     invisible(muffled)
[10:33:26.096]                   }
[10:33:26.096]                   muffleCondition(cond)
[10:33:26.096]                 })
[10:33:26.096]             }))
[10:33:26.096]             future::FutureResult(value = ...future.value$value, 
[10:33:26.096]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:26.096]                   ...future.rng), globalenv = if (FALSE) 
[10:33:26.096]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:26.096]                     ...future.globalenv.names))
[10:33:26.096]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:26.096]         }, condition = base::local({
[10:33:26.096]             c <- base::c
[10:33:26.096]             inherits <- base::inherits
[10:33:26.096]             invokeRestart <- base::invokeRestart
[10:33:26.096]             length <- base::length
[10:33:26.096]             list <- base::list
[10:33:26.096]             seq.int <- base::seq.int
[10:33:26.096]             signalCondition <- base::signalCondition
[10:33:26.096]             sys.calls <- base::sys.calls
[10:33:26.096]             `[[` <- base::`[[`
[10:33:26.096]             `+` <- base::`+`
[10:33:26.096]             `<<-` <- base::`<<-`
[10:33:26.096]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:26.096]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:26.096]                   3L)]
[10:33:26.096]             }
[10:33:26.096]             function(cond) {
[10:33:26.096]                 is_error <- inherits(cond, "error")
[10:33:26.096]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:26.096]                   NULL)
[10:33:26.096]                 if (is_error) {
[10:33:26.096]                   sessionInformation <- function() {
[10:33:26.096]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:26.096]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:26.096]                       search = base::search(), system = base::Sys.info())
[10:33:26.096]                   }
[10:33:26.096]                   ...future.conditions[[length(...future.conditions) + 
[10:33:26.096]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:26.096]                     cond$call), session = sessionInformation(), 
[10:33:26.096]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:26.096]                   signalCondition(cond)
[10:33:26.096]                 }
[10:33:26.096]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:26.096]                 "immediateCondition"))) {
[10:33:26.096]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:26.096]                   ...future.conditions[[length(...future.conditions) + 
[10:33:26.096]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:26.096]                   if (TRUE && !signal) {
[10:33:26.096]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:26.096]                     {
[10:33:26.096]                       inherits <- base::inherits
[10:33:26.096]                       invokeRestart <- base::invokeRestart
[10:33:26.096]                       is.null <- base::is.null
[10:33:26.096]                       muffled <- FALSE
[10:33:26.096]                       if (inherits(cond, "message")) {
[10:33:26.096]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:26.096]                         if (muffled) 
[10:33:26.096]                           invokeRestart("muffleMessage")
[10:33:26.096]                       }
[10:33:26.096]                       else if (inherits(cond, "warning")) {
[10:33:26.096]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:26.096]                         if (muffled) 
[10:33:26.096]                           invokeRestart("muffleWarning")
[10:33:26.096]                       }
[10:33:26.096]                       else if (inherits(cond, "condition")) {
[10:33:26.096]                         if (!is.null(pattern)) {
[10:33:26.096]                           computeRestarts <- base::computeRestarts
[10:33:26.096]                           grepl <- base::grepl
[10:33:26.096]                           restarts <- computeRestarts(cond)
[10:33:26.096]                           for (restart in restarts) {
[10:33:26.096]                             name <- restart$name
[10:33:26.096]                             if (is.null(name)) 
[10:33:26.096]                               next
[10:33:26.096]                             if (!grepl(pattern, name)) 
[10:33:26.096]                               next
[10:33:26.096]                             invokeRestart(restart)
[10:33:26.096]                             muffled <- TRUE
[10:33:26.096]                             break
[10:33:26.096]                           }
[10:33:26.096]                         }
[10:33:26.096]                       }
[10:33:26.096]                       invisible(muffled)
[10:33:26.096]                     }
[10:33:26.096]                     muffleCondition(cond, pattern = "^muffle")
[10:33:26.096]                   }
[10:33:26.096]                 }
[10:33:26.096]                 else {
[10:33:26.096]                   if (TRUE) {
[10:33:26.096]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:26.096]                     {
[10:33:26.096]                       inherits <- base::inherits
[10:33:26.096]                       invokeRestart <- base::invokeRestart
[10:33:26.096]                       is.null <- base::is.null
[10:33:26.096]                       muffled <- FALSE
[10:33:26.096]                       if (inherits(cond, "message")) {
[10:33:26.096]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:26.096]                         if (muffled) 
[10:33:26.096]                           invokeRestart("muffleMessage")
[10:33:26.096]                       }
[10:33:26.096]                       else if (inherits(cond, "warning")) {
[10:33:26.096]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:26.096]                         if (muffled) 
[10:33:26.096]                           invokeRestart("muffleWarning")
[10:33:26.096]                       }
[10:33:26.096]                       else if (inherits(cond, "condition")) {
[10:33:26.096]                         if (!is.null(pattern)) {
[10:33:26.096]                           computeRestarts <- base::computeRestarts
[10:33:26.096]                           grepl <- base::grepl
[10:33:26.096]                           restarts <- computeRestarts(cond)
[10:33:26.096]                           for (restart in restarts) {
[10:33:26.096]                             name <- restart$name
[10:33:26.096]                             if (is.null(name)) 
[10:33:26.096]                               next
[10:33:26.096]                             if (!grepl(pattern, name)) 
[10:33:26.096]                               next
[10:33:26.096]                             invokeRestart(restart)
[10:33:26.096]                             muffled <- TRUE
[10:33:26.096]                             break
[10:33:26.096]                           }
[10:33:26.096]                         }
[10:33:26.096]                       }
[10:33:26.096]                       invisible(muffled)
[10:33:26.096]                     }
[10:33:26.096]                     muffleCondition(cond, pattern = "^muffle")
[10:33:26.096]                   }
[10:33:26.096]                 }
[10:33:26.096]             }
[10:33:26.096]         }))
[10:33:26.096]     }, error = function(ex) {
[10:33:26.096]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:26.096]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:26.096]                 ...future.rng), started = ...future.startTime, 
[10:33:26.096]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:26.096]             version = "1.8"), class = "FutureResult")
[10:33:26.096]     }, finally = {
[10:33:26.096]         if (!identical(...future.workdir, getwd())) 
[10:33:26.096]             setwd(...future.workdir)
[10:33:26.096]         {
[10:33:26.096]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:26.096]                 ...future.oldOptions$nwarnings <- NULL
[10:33:26.096]             }
[10:33:26.096]             base::options(...future.oldOptions)
[10:33:26.096]             if (.Platform$OS.type == "windows") {
[10:33:26.096]                 old_names <- names(...future.oldEnvVars)
[10:33:26.096]                 envs <- base::Sys.getenv()
[10:33:26.096]                 names <- names(envs)
[10:33:26.096]                 common <- intersect(names, old_names)
[10:33:26.096]                 added <- setdiff(names, old_names)
[10:33:26.096]                 removed <- setdiff(old_names, names)
[10:33:26.096]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:26.096]                   envs[common]]
[10:33:26.096]                 NAMES <- toupper(changed)
[10:33:26.096]                 args <- list()
[10:33:26.096]                 for (kk in seq_along(NAMES)) {
[10:33:26.096]                   name <- changed[[kk]]
[10:33:26.096]                   NAME <- NAMES[[kk]]
[10:33:26.096]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:26.096]                     next
[10:33:26.096]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:26.096]                 }
[10:33:26.096]                 NAMES <- toupper(added)
[10:33:26.096]                 for (kk in seq_along(NAMES)) {
[10:33:26.096]                   name <- added[[kk]]
[10:33:26.096]                   NAME <- NAMES[[kk]]
[10:33:26.096]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:26.096]                     next
[10:33:26.096]                   args[[name]] <- ""
[10:33:26.096]                 }
[10:33:26.096]                 NAMES <- toupper(removed)
[10:33:26.096]                 for (kk in seq_along(NAMES)) {
[10:33:26.096]                   name <- removed[[kk]]
[10:33:26.096]                   NAME <- NAMES[[kk]]
[10:33:26.096]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:26.096]                     next
[10:33:26.096]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:26.096]                 }
[10:33:26.096]                 if (length(args) > 0) 
[10:33:26.096]                   base::do.call(base::Sys.setenv, args = args)
[10:33:26.096]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:26.096]             }
[10:33:26.096]             else {
[10:33:26.096]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:26.096]             }
[10:33:26.096]             {
[10:33:26.096]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:26.096]                   0L) {
[10:33:26.096]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:26.096]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:26.096]                   base::options(opts)
[10:33:26.096]                 }
[10:33:26.096]                 {
[10:33:26.096]                   {
[10:33:26.096]                     base::options(mc.cores = ...future.mc.cores.old)
[10:33:26.096]                     NULL
[10:33:26.096]                   }
[10:33:26.096]                   options(future.plan = NULL)
[10:33:26.096]                   if (is.na(NA_character_)) 
[10:33:26.096]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:26.096]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:26.096]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:26.096]                     .init = FALSE)
[10:33:26.096]                 }
[10:33:26.096]             }
[10:33:26.096]         }
[10:33:26.096]     })
[10:33:26.096]     if (TRUE) {
[10:33:26.096]         base::sink(type = "output", split = FALSE)
[10:33:26.096]         if (TRUE) {
[10:33:26.096]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:26.096]         }
[10:33:26.096]         else {
[10:33:26.096]             ...future.result["stdout"] <- base::list(NULL)
[10:33:26.096]         }
[10:33:26.096]         base::close(...future.stdout)
[10:33:26.096]         ...future.stdout <- NULL
[10:33:26.096]     }
[10:33:26.096]     ...future.result$conditions <- ...future.conditions
[10:33:26.096]     ...future.result$finished <- base::Sys.time()
[10:33:26.096]     ...future.result
[10:33:26.096] }
[10:33:26.151] MultisessionFuture started
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 387602f3-bd1b-4a3f-3d8d-305a236eb3bb
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[1] FALSE
[10:33:26.174] result() for ClusterFuture ...
[10:33:26.175] receiveMessageFromWorker() for ClusterFuture ...
[10:33:26.176] - Validating connection of MultisessionFuture
[10:33:26.186] - received message: FutureResult
[10:33:26.187] - Received FutureResult
[10:33:26.190] - Erased future from FutureRegistry
[10:33:26.190] result() for ClusterFuture ...
[10:33:26.190] - result already collected: FutureResult
[10:33:26.190] result() for ClusterFuture ... done
[10:33:26.190] receiveMessageFromWorker() for ClusterFuture ... done
[10:33:26.190] result() for ClusterFuture ... done
[10:33:26.190] result() for ClusterFuture ...
[10:33:26.190] - result already collected: FutureResult
[10:33:26.191] result() for ClusterFuture ... done
[1] 42
[10:33:26.195] getGlobalsAndPackages() ...
[10:33:26.195] Searching for globals...
[10:33:26.197] - globals found: [4] ‘{’, ‘<-’, ‘*’, ‘a’
[10:33:26.197] Searching for globals ... DONE
[10:33:26.197] Resolving globals: FALSE
[10:33:26.198] The total size of the 1 globals is 56 bytes (56 bytes)
[10:33:26.198] The total size of the 1 globals exported for future expression (‘{; b <- 3; c <- 2; a * b * c; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[10:33:26.198] - globals: [1] ‘a’
[10:33:26.199] 
[10:33:26.199] getGlobalsAndPackages() ... DONE
[10:33:26.211] Packages needed by the future expression (n = 0): <none>
[10:33:26.211] Packages needed by future strategies (n = 0): <none>
[10:33:26.211] {
[10:33:26.211]     {
[10:33:26.211]         {
[10:33:26.211]             ...future.startTime <- base::Sys.time()
[10:33:26.211]             {
[10:33:26.211]                 {
[10:33:26.211]                   {
[10:33:26.211]                     {
[10:33:26.211]                       base::local({
[10:33:26.211]                         has_future <- base::requireNamespace("future", 
[10:33:26.211]                           quietly = TRUE)
[10:33:26.211]                         if (has_future) {
[10:33:26.211]                           ns <- base::getNamespace("future")
[10:33:26.211]                           version <- ns[[".package"]][["version"]]
[10:33:26.211]                           if (is.null(version)) 
[10:33:26.211]                             version <- utils::packageVersion("future")
[10:33:26.211]                         }
[10:33:26.211]                         else {
[10:33:26.211]                           version <- NULL
[10:33:26.211]                         }
[10:33:26.211]                         if (!has_future || version < "1.8.0") {
[10:33:26.211]                           info <- base::c(r_version = base::gsub("R version ", 
[10:33:26.211]                             "", base::R.version$version.string), 
[10:33:26.211]                             platform = base::sprintf("%s (%s-bit)", 
[10:33:26.211]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:26.211]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:26.211]                               "release", "version")], collapse = " "), 
[10:33:26.211]                             hostname = base::Sys.info()[["nodename"]])
[10:33:26.211]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:33:26.211]                             info)
[10:33:26.211]                           info <- base::paste(info, collapse = "; ")
[10:33:26.211]                           if (!has_future) {
[10:33:26.211]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:26.211]                               info)
[10:33:26.211]                           }
[10:33:26.211]                           else {
[10:33:26.211]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:26.211]                               info, version)
[10:33:26.211]                           }
[10:33:26.211]                           base::stop(msg)
[10:33:26.211]                         }
[10:33:26.211]                       })
[10:33:26.211]                     }
[10:33:26.211]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:33:26.211]                     base::options(mc.cores = 1L)
[10:33:26.211]                   }
[10:33:26.211]                   ...future.strategy.old <- future::plan("list")
[10:33:26.211]                   options(future.plan = NULL)
[10:33:26.211]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:26.211]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:33:26.211]                 }
[10:33:26.211]                 ...future.workdir <- getwd()
[10:33:26.211]             }
[10:33:26.211]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:26.211]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:26.211]         }
[10:33:26.211]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:33:26.211]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:26.211]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:33:26.211]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:33:26.211]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:26.211]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:26.211]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:26.211]             base::names(...future.oldOptions))
[10:33:26.211]     }
[10:33:26.211]     if (FALSE) {
[10:33:26.211]     }
[10:33:26.211]     else {
[10:33:26.211]         if (TRUE) {
[10:33:26.211]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:26.211]                 open = "w")
[10:33:26.211]         }
[10:33:26.211]         else {
[10:33:26.211]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:26.211]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:26.211]         }
[10:33:26.211]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:26.211]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:26.211]             base::sink(type = "output", split = FALSE)
[10:33:26.211]             base::close(...future.stdout)
[10:33:26.211]         }, add = TRUE)
[10:33:26.211]     }
[10:33:26.211]     ...future.frame <- base::sys.nframe()
[10:33:26.211]     ...future.conditions <- base::list()
[10:33:26.211]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:26.211]     if (FALSE) {
[10:33:26.211]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:26.211]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:26.211]     }
[10:33:26.211]     ...future.result <- base::tryCatch({
[10:33:26.211]         base::withCallingHandlers({
[10:33:26.211]             ...future.value <- base::withVisible(base::local({
[10:33:26.211]                 ...future.makeSendCondition <- base::local({
[10:33:26.211]                   sendCondition <- NULL
[10:33:26.211]                   function(frame = 1L) {
[10:33:26.211]                     if (is.function(sendCondition)) 
[10:33:26.211]                       return(sendCondition)
[10:33:26.211]                     ns <- getNamespace("parallel")
[10:33:26.211]                     if (exists("sendData", mode = "function", 
[10:33:26.211]                       envir = ns)) {
[10:33:26.211]                       parallel_sendData <- get("sendData", mode = "function", 
[10:33:26.211]                         envir = ns)
[10:33:26.211]                       envir <- sys.frame(frame)
[10:33:26.211]                       master <- NULL
[10:33:26.211]                       while (!identical(envir, .GlobalEnv) && 
[10:33:26.211]                         !identical(envir, emptyenv())) {
[10:33:26.211]                         if (exists("master", mode = "list", envir = envir, 
[10:33:26.211]                           inherits = FALSE)) {
[10:33:26.211]                           master <- get("master", mode = "list", 
[10:33:26.211]                             envir = envir, inherits = FALSE)
[10:33:26.211]                           if (inherits(master, c("SOCKnode", 
[10:33:26.211]                             "SOCK0node"))) {
[10:33:26.211]                             sendCondition <<- function(cond) {
[10:33:26.211]                               data <- list(type = "VALUE", value = cond, 
[10:33:26.211]                                 success = TRUE)
[10:33:26.211]                               parallel_sendData(master, data)
[10:33:26.211]                             }
[10:33:26.211]                             return(sendCondition)
[10:33:26.211]                           }
[10:33:26.211]                         }
[10:33:26.211]                         frame <- frame + 1L
[10:33:26.211]                         envir <- sys.frame(frame)
[10:33:26.211]                       }
[10:33:26.211]                     }
[10:33:26.211]                     sendCondition <<- function(cond) NULL
[10:33:26.211]                   }
[10:33:26.211]                 })
[10:33:26.211]                 withCallingHandlers({
[10:33:26.211]                   {
[10:33:26.211]                     b <- 3
[10:33:26.211]                     c <- 2
[10:33:26.211]                     a * b * c
[10:33:26.211]                   }
[10:33:26.211]                 }, immediateCondition = function(cond) {
[10:33:26.211]                   sendCondition <- ...future.makeSendCondition()
[10:33:26.211]                   sendCondition(cond)
[10:33:26.211]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:26.211]                   {
[10:33:26.211]                     inherits <- base::inherits
[10:33:26.211]                     invokeRestart <- base::invokeRestart
[10:33:26.211]                     is.null <- base::is.null
[10:33:26.211]                     muffled <- FALSE
[10:33:26.211]                     if (inherits(cond, "message")) {
[10:33:26.211]                       muffled <- grepl(pattern, "muffleMessage")
[10:33:26.211]                       if (muffled) 
[10:33:26.211]                         invokeRestart("muffleMessage")
[10:33:26.211]                     }
[10:33:26.211]                     else if (inherits(cond, "warning")) {
[10:33:26.211]                       muffled <- grepl(pattern, "muffleWarning")
[10:33:26.211]                       if (muffled) 
[10:33:26.211]                         invokeRestart("muffleWarning")
[10:33:26.211]                     }
[10:33:26.211]                     else if (inherits(cond, "condition")) {
[10:33:26.211]                       if (!is.null(pattern)) {
[10:33:26.211]                         computeRestarts <- base::computeRestarts
[10:33:26.211]                         grepl <- base::grepl
[10:33:26.211]                         restarts <- computeRestarts(cond)
[10:33:26.211]                         for (restart in restarts) {
[10:33:26.211]                           name <- restart$name
[10:33:26.211]                           if (is.null(name)) 
[10:33:26.211]                             next
[10:33:26.211]                           if (!grepl(pattern, name)) 
[10:33:26.211]                             next
[10:33:26.211]                           invokeRestart(restart)
[10:33:26.211]                           muffled <- TRUE
[10:33:26.211]                           break
[10:33:26.211]                         }
[10:33:26.211]                       }
[10:33:26.211]                     }
[10:33:26.211]                     invisible(muffled)
[10:33:26.211]                   }
[10:33:26.211]                   muffleCondition(cond)
[10:33:26.211]                 })
[10:33:26.211]             }))
[10:33:26.211]             future::FutureResult(value = ...future.value$value, 
[10:33:26.211]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:26.211]                   ...future.rng), globalenv = if (FALSE) 
[10:33:26.211]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:26.211]                     ...future.globalenv.names))
[10:33:26.211]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:26.211]         }, condition = base::local({
[10:33:26.211]             c <- base::c
[10:33:26.211]             inherits <- base::inherits
[10:33:26.211]             invokeRestart <- base::invokeRestart
[10:33:26.211]             length <- base::length
[10:33:26.211]             list <- base::list
[10:33:26.211]             seq.int <- base::seq.int
[10:33:26.211]             signalCondition <- base::signalCondition
[10:33:26.211]             sys.calls <- base::sys.calls
[10:33:26.211]             `[[` <- base::`[[`
[10:33:26.211]             `+` <- base::`+`
[10:33:26.211]             `<<-` <- base::`<<-`
[10:33:26.211]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:26.211]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:26.211]                   3L)]
[10:33:26.211]             }
[10:33:26.211]             function(cond) {
[10:33:26.211]                 is_error <- inherits(cond, "error")
[10:33:26.211]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:26.211]                   NULL)
[10:33:26.211]                 if (is_error) {
[10:33:26.211]                   sessionInformation <- function() {
[10:33:26.211]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:26.211]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:26.211]                       search = base::search(), system = base::Sys.info())
[10:33:26.211]                   }
[10:33:26.211]                   ...future.conditions[[length(...future.conditions) + 
[10:33:26.211]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:26.211]                     cond$call), session = sessionInformation(), 
[10:33:26.211]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:26.211]                   signalCondition(cond)
[10:33:26.211]                 }
[10:33:26.211]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:26.211]                 "immediateCondition"))) {
[10:33:26.211]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:26.211]                   ...future.conditions[[length(...future.conditions) + 
[10:33:26.211]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:26.211]                   if (TRUE && !signal) {
[10:33:26.211]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:26.211]                     {
[10:33:26.211]                       inherits <- base::inherits
[10:33:26.211]                       invokeRestart <- base::invokeRestart
[10:33:26.211]                       is.null <- base::is.null
[10:33:26.211]                       muffled <- FALSE
[10:33:26.211]                       if (inherits(cond, "message")) {
[10:33:26.211]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:26.211]                         if (muffled) 
[10:33:26.211]                           invokeRestart("muffleMessage")
[10:33:26.211]                       }
[10:33:26.211]                       else if (inherits(cond, "warning")) {
[10:33:26.211]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:26.211]                         if (muffled) 
[10:33:26.211]                           invokeRestart("muffleWarning")
[10:33:26.211]                       }
[10:33:26.211]                       else if (inherits(cond, "condition")) {
[10:33:26.211]                         if (!is.null(pattern)) {
[10:33:26.211]                           computeRestarts <- base::computeRestarts
[10:33:26.211]                           grepl <- base::grepl
[10:33:26.211]                           restarts <- computeRestarts(cond)
[10:33:26.211]                           for (restart in restarts) {
[10:33:26.211]                             name <- restart$name
[10:33:26.211]                             if (is.null(name)) 
[10:33:26.211]                               next
[10:33:26.211]                             if (!grepl(pattern, name)) 
[10:33:26.211]                               next
[10:33:26.211]                             invokeRestart(restart)
[10:33:26.211]                             muffled <- TRUE
[10:33:26.211]                             break
[10:33:26.211]                           }
[10:33:26.211]                         }
[10:33:26.211]                       }
[10:33:26.211]                       invisible(muffled)
[10:33:26.211]                     }
[10:33:26.211]                     muffleCondition(cond, pattern = "^muffle")
[10:33:26.211]                   }
[10:33:26.211]                 }
[10:33:26.211]                 else {
[10:33:26.211]                   if (TRUE) {
[10:33:26.211]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:26.211]                     {
[10:33:26.211]                       inherits <- base::inherits
[10:33:26.211]                       invokeRestart <- base::invokeRestart
[10:33:26.211]                       is.null <- base::is.null
[10:33:26.211]                       muffled <- FALSE
[10:33:26.211]                       if (inherits(cond, "message")) {
[10:33:26.211]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:26.211]                         if (muffled) 
[10:33:26.211]                           invokeRestart("muffleMessage")
[10:33:26.211]                       }
[10:33:26.211]                       else if (inherits(cond, "warning")) {
[10:33:26.211]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:26.211]                         if (muffled) 
[10:33:26.211]                           invokeRestart("muffleWarning")
[10:33:26.211]                       }
[10:33:26.211]                       else if (inherits(cond, "condition")) {
[10:33:26.211]                         if (!is.null(pattern)) {
[10:33:26.211]                           computeRestarts <- base::computeRestarts
[10:33:26.211]                           grepl <- base::grepl
[10:33:26.211]                           restarts <- computeRestarts(cond)
[10:33:26.211]                           for (restart in restarts) {
[10:33:26.211]                             name <- restart$name
[10:33:26.211]                             if (is.null(name)) 
[10:33:26.211]                               next
[10:33:26.211]                             if (!grepl(pattern, name)) 
[10:33:26.211]                               next
[10:33:26.211]                             invokeRestart(restart)
[10:33:26.211]                             muffled <- TRUE
[10:33:26.211]                             break
[10:33:26.211]                           }
[10:33:26.211]                         }
[10:33:26.211]                       }
[10:33:26.211]                       invisible(muffled)
[10:33:26.211]                     }
[10:33:26.211]                     muffleCondition(cond, pattern = "^muffle")
[10:33:26.211]                   }
[10:33:26.211]                 }
[10:33:26.211]             }
[10:33:26.211]         }))
[10:33:26.211]     }, error = function(ex) {
[10:33:26.211]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:26.211]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:26.211]                 ...future.rng), started = ...future.startTime, 
[10:33:26.211]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:26.211]             version = "1.8"), class = "FutureResult")
[10:33:26.211]     }, finally = {
[10:33:26.211]         if (!identical(...future.workdir, getwd())) 
[10:33:26.211]             setwd(...future.workdir)
[10:33:26.211]         {
[10:33:26.211]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:26.211]                 ...future.oldOptions$nwarnings <- NULL
[10:33:26.211]             }
[10:33:26.211]             base::options(...future.oldOptions)
[10:33:26.211]             if (.Platform$OS.type == "windows") {
[10:33:26.211]                 old_names <- names(...future.oldEnvVars)
[10:33:26.211]                 envs <- base::Sys.getenv()
[10:33:26.211]                 names <- names(envs)
[10:33:26.211]                 common <- intersect(names, old_names)
[10:33:26.211]                 added <- setdiff(names, old_names)
[10:33:26.211]                 removed <- setdiff(old_names, names)
[10:33:26.211]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:26.211]                   envs[common]]
[10:33:26.211]                 NAMES <- toupper(changed)
[10:33:26.211]                 args <- list()
[10:33:26.211]                 for (kk in seq_along(NAMES)) {
[10:33:26.211]                   name <- changed[[kk]]
[10:33:26.211]                   NAME <- NAMES[[kk]]
[10:33:26.211]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:26.211]                     next
[10:33:26.211]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:26.211]                 }
[10:33:26.211]                 NAMES <- toupper(added)
[10:33:26.211]                 for (kk in seq_along(NAMES)) {
[10:33:26.211]                   name <- added[[kk]]
[10:33:26.211]                   NAME <- NAMES[[kk]]
[10:33:26.211]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:26.211]                     next
[10:33:26.211]                   args[[name]] <- ""
[10:33:26.211]                 }
[10:33:26.211]                 NAMES <- toupper(removed)
[10:33:26.211]                 for (kk in seq_along(NAMES)) {
[10:33:26.211]                   name <- removed[[kk]]
[10:33:26.211]                   NAME <- NAMES[[kk]]
[10:33:26.211]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:26.211]                     next
[10:33:26.211]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:26.211]                 }
[10:33:26.211]                 if (length(args) > 0) 
[10:33:26.211]                   base::do.call(base::Sys.setenv, args = args)
[10:33:26.211]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:26.211]             }
[10:33:26.211]             else {
[10:33:26.211]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:26.211]             }
[10:33:26.211]             {
[10:33:26.211]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:26.211]                   0L) {
[10:33:26.211]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:26.211]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:26.211]                   base::options(opts)
[10:33:26.211]                 }
[10:33:26.211]                 {
[10:33:26.211]                   {
[10:33:26.211]                     base::options(mc.cores = ...future.mc.cores.old)
[10:33:26.211]                     NULL
[10:33:26.211]                   }
[10:33:26.211]                   options(future.plan = NULL)
[10:33:26.211]                   if (is.na(NA_character_)) 
[10:33:26.211]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:26.211]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:26.211]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:26.211]                     .init = FALSE)
[10:33:26.211]                 }
[10:33:26.211]             }
[10:33:26.211]         }
[10:33:26.211]     })
[10:33:26.211]     if (TRUE) {
[10:33:26.211]         base::sink(type = "output", split = FALSE)
[10:33:26.211]         if (TRUE) {
[10:33:26.211]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:26.211]         }
[10:33:26.211]         else {
[10:33:26.211]             ...future.result["stdout"] <- base::list(NULL)
[10:33:26.211]         }
[10:33:26.211]         base::close(...future.stdout)
[10:33:26.211]         ...future.stdout <- NULL
[10:33:26.211]     }
[10:33:26.211]     ...future.result$conditions <- ...future.conditions
[10:33:26.211]     ...future.result$finished <- base::Sys.time()
[10:33:26.211]     ...future.result
[10:33:26.211] }
[10:33:26.214] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[10:33:26.214] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[10:33:26.215] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[10:33:26.215] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[10:33:26.216] MultisessionFuture started
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    b <- 3
    c <- 2
    a * b * c
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 56 bytes (numeric ‘a’ of 56 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:33:26.221] receiveMessageFromWorker() for ClusterFuture ...
[10:33:26.221] - Validating connection of MultisessionFuture
[10:33:26.221] - received message: FutureResult
[10:33:26.221] - Received FutureResult
[10:33:26.221] - Erased future from FutureRegistry
[10:33:26.221] result() for ClusterFuture ...
[10:33:26.222] - result already collected: FutureResult
[10:33:26.222] result() for ClusterFuture ... done
[10:33:26.222] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 387602f3-bd1b-4a3f-3d8d-305a236eb3bb
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:33:26.222] result() for ClusterFuture ...
[10:33:26.222] - result already collected: FutureResult
[10:33:26.222] result() for ClusterFuture ... done
[10:33:26.222] result() for ClusterFuture ...
[10:33:26.222] - result already collected: FutureResult
[10:33:26.223] result() for ClusterFuture ... done
[1] 0
*** multisession() with globals and blocking
 - Creating multisession future #2 ...
[10:33:26.226] getGlobalsAndPackages() ...
[10:33:26.226] Searching for globals...
[10:33:26.227] - globals found: [2] ‘{’, ‘ii’
[10:33:26.227] Searching for globals ... DONE
[10:33:26.228] Resolving globals: FALSE
[10:33:26.228] The total size of the 1 globals is 56 bytes (56 bytes)
[10:33:26.228] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[10:33:26.229] - globals: [1] ‘ii’
[10:33:26.229] 
[10:33:26.229] getGlobalsAndPackages() ... DONE
[10:33:26.240] Packages needed by the future expression (n = 0): <none>
[10:33:26.240] Packages needed by future strategies (n = 0): <none>
[10:33:26.241] {
[10:33:26.241]     {
[10:33:26.241]         {
[10:33:26.241]             ...future.startTime <- base::Sys.time()
[10:33:26.241]             {
[10:33:26.241]                 {
[10:33:26.241]                   {
[10:33:26.241]                     {
[10:33:26.241]                       base::local({
[10:33:26.241]                         has_future <- base::requireNamespace("future", 
[10:33:26.241]                           quietly = TRUE)
[10:33:26.241]                         if (has_future) {
[10:33:26.241]                           ns <- base::getNamespace("future")
[10:33:26.241]                           version <- ns[[".package"]][["version"]]
[10:33:26.241]                           if (is.null(version)) 
[10:33:26.241]                             version <- utils::packageVersion("future")
[10:33:26.241]                         }
[10:33:26.241]                         else {
[10:33:26.241]                           version <- NULL
[10:33:26.241]                         }
[10:33:26.241]                         if (!has_future || version < "1.8.0") {
[10:33:26.241]                           info <- base::c(r_version = base::gsub("R version ", 
[10:33:26.241]                             "", base::R.version$version.string), 
[10:33:26.241]                             platform = base::sprintf("%s (%s-bit)", 
[10:33:26.241]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:26.241]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:26.241]                               "release", "version")], collapse = " "), 
[10:33:26.241]                             hostname = base::Sys.info()[["nodename"]])
[10:33:26.241]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:33:26.241]                             info)
[10:33:26.241]                           info <- base::paste(info, collapse = "; ")
[10:33:26.241]                           if (!has_future) {
[10:33:26.241]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:26.241]                               info)
[10:33:26.241]                           }
[10:33:26.241]                           else {
[10:33:26.241]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:26.241]                               info, version)
[10:33:26.241]                           }
[10:33:26.241]                           base::stop(msg)
[10:33:26.241]                         }
[10:33:26.241]                       })
[10:33:26.241]                     }
[10:33:26.241]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:33:26.241]                     base::options(mc.cores = 1L)
[10:33:26.241]                   }
[10:33:26.241]                   ...future.strategy.old <- future::plan("list")
[10:33:26.241]                   options(future.plan = NULL)
[10:33:26.241]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:26.241]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:33:26.241]                 }
[10:33:26.241]                 ...future.workdir <- getwd()
[10:33:26.241]             }
[10:33:26.241]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:26.241]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:26.241]         }
[10:33:26.241]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:33:26.241]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:26.241]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:33:26.241]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:33:26.241]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:26.241]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:26.241]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:26.241]             base::names(...future.oldOptions))
[10:33:26.241]     }
[10:33:26.241]     if (FALSE) {
[10:33:26.241]     }
[10:33:26.241]     else {
[10:33:26.241]         if (TRUE) {
[10:33:26.241]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:26.241]                 open = "w")
[10:33:26.241]         }
[10:33:26.241]         else {
[10:33:26.241]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:26.241]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:26.241]         }
[10:33:26.241]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:26.241]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:26.241]             base::sink(type = "output", split = FALSE)
[10:33:26.241]             base::close(...future.stdout)
[10:33:26.241]         }, add = TRUE)
[10:33:26.241]     }
[10:33:26.241]     ...future.frame <- base::sys.nframe()
[10:33:26.241]     ...future.conditions <- base::list()
[10:33:26.241]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:26.241]     if (FALSE) {
[10:33:26.241]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:26.241]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:26.241]     }
[10:33:26.241]     ...future.result <- base::tryCatch({
[10:33:26.241]         base::withCallingHandlers({
[10:33:26.241]             ...future.value <- base::withVisible(base::local({
[10:33:26.241]                 ...future.makeSendCondition <- base::local({
[10:33:26.241]                   sendCondition <- NULL
[10:33:26.241]                   function(frame = 1L) {
[10:33:26.241]                     if (is.function(sendCondition)) 
[10:33:26.241]                       return(sendCondition)
[10:33:26.241]                     ns <- getNamespace("parallel")
[10:33:26.241]                     if (exists("sendData", mode = "function", 
[10:33:26.241]                       envir = ns)) {
[10:33:26.241]                       parallel_sendData <- get("sendData", mode = "function", 
[10:33:26.241]                         envir = ns)
[10:33:26.241]                       envir <- sys.frame(frame)
[10:33:26.241]                       master <- NULL
[10:33:26.241]                       while (!identical(envir, .GlobalEnv) && 
[10:33:26.241]                         !identical(envir, emptyenv())) {
[10:33:26.241]                         if (exists("master", mode = "list", envir = envir, 
[10:33:26.241]                           inherits = FALSE)) {
[10:33:26.241]                           master <- get("master", mode = "list", 
[10:33:26.241]                             envir = envir, inherits = FALSE)
[10:33:26.241]                           if (inherits(master, c("SOCKnode", 
[10:33:26.241]                             "SOCK0node"))) {
[10:33:26.241]                             sendCondition <<- function(cond) {
[10:33:26.241]                               data <- list(type = "VALUE", value = cond, 
[10:33:26.241]                                 success = TRUE)
[10:33:26.241]                               parallel_sendData(master, data)
[10:33:26.241]                             }
[10:33:26.241]                             return(sendCondition)
[10:33:26.241]                           }
[10:33:26.241]                         }
[10:33:26.241]                         frame <- frame + 1L
[10:33:26.241]                         envir <- sys.frame(frame)
[10:33:26.241]                       }
[10:33:26.241]                     }
[10:33:26.241]                     sendCondition <<- function(cond) NULL
[10:33:26.241]                   }
[10:33:26.241]                 })
[10:33:26.241]                 withCallingHandlers({
[10:33:26.241]                   {
[10:33:26.241]                     ii
[10:33:26.241]                   }
[10:33:26.241]                 }, immediateCondition = function(cond) {
[10:33:26.241]                   sendCondition <- ...future.makeSendCondition()
[10:33:26.241]                   sendCondition(cond)
[10:33:26.241]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:26.241]                   {
[10:33:26.241]                     inherits <- base::inherits
[10:33:26.241]                     invokeRestart <- base::invokeRestart
[10:33:26.241]                     is.null <- base::is.null
[10:33:26.241]                     muffled <- FALSE
[10:33:26.241]                     if (inherits(cond, "message")) {
[10:33:26.241]                       muffled <- grepl(pattern, "muffleMessage")
[10:33:26.241]                       if (muffled) 
[10:33:26.241]                         invokeRestart("muffleMessage")
[10:33:26.241]                     }
[10:33:26.241]                     else if (inherits(cond, "warning")) {
[10:33:26.241]                       muffled <- grepl(pattern, "muffleWarning")
[10:33:26.241]                       if (muffled) 
[10:33:26.241]                         invokeRestart("muffleWarning")
[10:33:26.241]                     }
[10:33:26.241]                     else if (inherits(cond, "condition")) {
[10:33:26.241]                       if (!is.null(pattern)) {
[10:33:26.241]                         computeRestarts <- base::computeRestarts
[10:33:26.241]                         grepl <- base::grepl
[10:33:26.241]                         restarts <- computeRestarts(cond)
[10:33:26.241]                         for (restart in restarts) {
[10:33:26.241]                           name <- restart$name
[10:33:26.241]                           if (is.null(name)) 
[10:33:26.241]                             next
[10:33:26.241]                           if (!grepl(pattern, name)) 
[10:33:26.241]                             next
[10:33:26.241]                           invokeRestart(restart)
[10:33:26.241]                           muffled <- TRUE
[10:33:26.241]                           break
[10:33:26.241]                         }
[10:33:26.241]                       }
[10:33:26.241]                     }
[10:33:26.241]                     invisible(muffled)
[10:33:26.241]                   }
[10:33:26.241]                   muffleCondition(cond)
[10:33:26.241]                 })
[10:33:26.241]             }))
[10:33:26.241]             future::FutureResult(value = ...future.value$value, 
[10:33:26.241]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:26.241]                   ...future.rng), globalenv = if (FALSE) 
[10:33:26.241]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:26.241]                     ...future.globalenv.names))
[10:33:26.241]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:26.241]         }, condition = base::local({
[10:33:26.241]             c <- base::c
[10:33:26.241]             inherits <- base::inherits
[10:33:26.241]             invokeRestart <- base::invokeRestart
[10:33:26.241]             length <- base::length
[10:33:26.241]             list <- base::list
[10:33:26.241]             seq.int <- base::seq.int
[10:33:26.241]             signalCondition <- base::signalCondition
[10:33:26.241]             sys.calls <- base::sys.calls
[10:33:26.241]             `[[` <- base::`[[`
[10:33:26.241]             `+` <- base::`+`
[10:33:26.241]             `<<-` <- base::`<<-`
[10:33:26.241]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:26.241]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:26.241]                   3L)]
[10:33:26.241]             }
[10:33:26.241]             function(cond) {
[10:33:26.241]                 is_error <- inherits(cond, "error")
[10:33:26.241]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:26.241]                   NULL)
[10:33:26.241]                 if (is_error) {
[10:33:26.241]                   sessionInformation <- function() {
[10:33:26.241]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:26.241]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:26.241]                       search = base::search(), system = base::Sys.info())
[10:33:26.241]                   }
[10:33:26.241]                   ...future.conditions[[length(...future.conditions) + 
[10:33:26.241]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:26.241]                     cond$call), session = sessionInformation(), 
[10:33:26.241]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:26.241]                   signalCondition(cond)
[10:33:26.241]                 }
[10:33:26.241]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:26.241]                 "immediateCondition"))) {
[10:33:26.241]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:26.241]                   ...future.conditions[[length(...future.conditions) + 
[10:33:26.241]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:26.241]                   if (TRUE && !signal) {
[10:33:26.241]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:26.241]                     {
[10:33:26.241]                       inherits <- base::inherits
[10:33:26.241]                       invokeRestart <- base::invokeRestart
[10:33:26.241]                       is.null <- base::is.null
[10:33:26.241]                       muffled <- FALSE
[10:33:26.241]                       if (inherits(cond, "message")) {
[10:33:26.241]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:26.241]                         if (muffled) 
[10:33:26.241]                           invokeRestart("muffleMessage")
[10:33:26.241]                       }
[10:33:26.241]                       else if (inherits(cond, "warning")) {
[10:33:26.241]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:26.241]                         if (muffled) 
[10:33:26.241]                           invokeRestart("muffleWarning")
[10:33:26.241]                       }
[10:33:26.241]                       else if (inherits(cond, "condition")) {
[10:33:26.241]                         if (!is.null(pattern)) {
[10:33:26.241]                           computeRestarts <- base::computeRestarts
[10:33:26.241]                           grepl <- base::grepl
[10:33:26.241]                           restarts <- computeRestarts(cond)
[10:33:26.241]                           for (restart in restarts) {
[10:33:26.241]                             name <- restart$name
[10:33:26.241]                             if (is.null(name)) 
[10:33:26.241]                               next
[10:33:26.241]                             if (!grepl(pattern, name)) 
[10:33:26.241]                               next
[10:33:26.241]                             invokeRestart(restart)
[10:33:26.241]                             muffled <- TRUE
[10:33:26.241]                             break
[10:33:26.241]                           }
[10:33:26.241]                         }
[10:33:26.241]                       }
[10:33:26.241]                       invisible(muffled)
[10:33:26.241]                     }
[10:33:26.241]                     muffleCondition(cond, pattern = "^muffle")
[10:33:26.241]                   }
[10:33:26.241]                 }
[10:33:26.241]                 else {
[10:33:26.241]                   if (TRUE) {
[10:33:26.241]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:26.241]                     {
[10:33:26.241]                       inherits <- base::inherits
[10:33:26.241]                       invokeRestart <- base::invokeRestart
[10:33:26.241]                       is.null <- base::is.null
[10:33:26.241]                       muffled <- FALSE
[10:33:26.241]                       if (inherits(cond, "message")) {
[10:33:26.241]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:26.241]                         if (muffled) 
[10:33:26.241]                           invokeRestart("muffleMessage")
[10:33:26.241]                       }
[10:33:26.241]                       else if (inherits(cond, "warning")) {
[10:33:26.241]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:26.241]                         if (muffled) 
[10:33:26.241]                           invokeRestart("muffleWarning")
[10:33:26.241]                       }
[10:33:26.241]                       else if (inherits(cond, "condition")) {
[10:33:26.241]                         if (!is.null(pattern)) {
[10:33:26.241]                           computeRestarts <- base::computeRestarts
[10:33:26.241]                           grepl <- base::grepl
[10:33:26.241]                           restarts <- computeRestarts(cond)
[10:33:26.241]                           for (restart in restarts) {
[10:33:26.241]                             name <- restart$name
[10:33:26.241]                             if (is.null(name)) 
[10:33:26.241]                               next
[10:33:26.241]                             if (!grepl(pattern, name)) 
[10:33:26.241]                               next
[10:33:26.241]                             invokeRestart(restart)
[10:33:26.241]                             muffled <- TRUE
[10:33:26.241]                             break
[10:33:26.241]                           }
[10:33:26.241]                         }
[10:33:26.241]                       }
[10:33:26.241]                       invisible(muffled)
[10:33:26.241]                     }
[10:33:26.241]                     muffleCondition(cond, pattern = "^muffle")
[10:33:26.241]                   }
[10:33:26.241]                 }
[10:33:26.241]             }
[10:33:26.241]         }))
[10:33:26.241]     }, error = function(ex) {
[10:33:26.241]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:26.241]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:26.241]                 ...future.rng), started = ...future.startTime, 
[10:33:26.241]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:26.241]             version = "1.8"), class = "FutureResult")
[10:33:26.241]     }, finally = {
[10:33:26.241]         if (!identical(...future.workdir, getwd())) 
[10:33:26.241]             setwd(...future.workdir)
[10:33:26.241]         {
[10:33:26.241]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:26.241]                 ...future.oldOptions$nwarnings <- NULL
[10:33:26.241]             }
[10:33:26.241]             base::options(...future.oldOptions)
[10:33:26.241]             if (.Platform$OS.type == "windows") {
[10:33:26.241]                 old_names <- names(...future.oldEnvVars)
[10:33:26.241]                 envs <- base::Sys.getenv()
[10:33:26.241]                 names <- names(envs)
[10:33:26.241]                 common <- intersect(names, old_names)
[10:33:26.241]                 added <- setdiff(names, old_names)
[10:33:26.241]                 removed <- setdiff(old_names, names)
[10:33:26.241]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:26.241]                   envs[common]]
[10:33:26.241]                 NAMES <- toupper(changed)
[10:33:26.241]                 args <- list()
[10:33:26.241]                 for (kk in seq_along(NAMES)) {
[10:33:26.241]                   name <- changed[[kk]]
[10:33:26.241]                   NAME <- NAMES[[kk]]
[10:33:26.241]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:26.241]                     next
[10:33:26.241]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:26.241]                 }
[10:33:26.241]                 NAMES <- toupper(added)
[10:33:26.241]                 for (kk in seq_along(NAMES)) {
[10:33:26.241]                   name <- added[[kk]]
[10:33:26.241]                   NAME <- NAMES[[kk]]
[10:33:26.241]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:26.241]                     next
[10:33:26.241]                   args[[name]] <- ""
[10:33:26.241]                 }
[10:33:26.241]                 NAMES <- toupper(removed)
[10:33:26.241]                 for (kk in seq_along(NAMES)) {
[10:33:26.241]                   name <- removed[[kk]]
[10:33:26.241]                   NAME <- NAMES[[kk]]
[10:33:26.241]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:26.241]                     next
[10:33:26.241]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:26.241]                 }
[10:33:26.241]                 if (length(args) > 0) 
[10:33:26.241]                   base::do.call(base::Sys.setenv, args = args)
[10:33:26.241]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:26.241]             }
[10:33:26.241]             else {
[10:33:26.241]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:26.241]             }
[10:33:26.241]             {
[10:33:26.241]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:26.241]                   0L) {
[10:33:26.241]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:26.241]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:26.241]                   base::options(opts)
[10:33:26.241]                 }
[10:33:26.241]                 {
[10:33:26.241]                   {
[10:33:26.241]                     base::options(mc.cores = ...future.mc.cores.old)
[10:33:26.241]                     NULL
[10:33:26.241]                   }
[10:33:26.241]                   options(future.plan = NULL)
[10:33:26.241]                   if (is.na(NA_character_)) 
[10:33:26.241]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:26.241]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:26.241]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:26.241]                     .init = FALSE)
[10:33:26.241]                 }
[10:33:26.241]             }
[10:33:26.241]         }
[10:33:26.241]     })
[10:33:26.241]     if (TRUE) {
[10:33:26.241]         base::sink(type = "output", split = FALSE)
[10:33:26.241]         if (TRUE) {
[10:33:26.241]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:26.241]         }
[10:33:26.241]         else {
[10:33:26.241]             ...future.result["stdout"] <- base::list(NULL)
[10:33:26.241]         }
[10:33:26.241]         base::close(...future.stdout)
[10:33:26.241]         ...future.stdout <- NULL
[10:33:26.241]     }
[10:33:26.241]     ...future.result$conditions <- ...future.conditions
[10:33:26.241]     ...future.result$finished <- base::Sys.time()
[10:33:26.241]     ...future.result
[10:33:26.241] }
[10:33:26.243] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[10:33:26.244] Exporting ‘ii’ (56 bytes) to cluster node #1 ...
[10:33:26.244] Exporting ‘ii’ (56 bytes) to cluster node #1 ... DONE
[10:33:26.244] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[10:33:26.245] MultisessionFuture started
 - Creating multisession future #1 ...
[10:33:26.248] getGlobalsAndPackages() ...
[10:33:26.248] Searching for globals...
[10:33:26.249] - globals found: [2] ‘{’, ‘ii’
[10:33:26.250] Searching for globals ... DONE
[10:33:26.250] Resolving globals: FALSE
[10:33:26.250] The total size of the 1 globals is 56 bytes (56 bytes)
[10:33:26.250] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[10:33:26.251] - globals: [1] ‘ii’
[10:33:26.251] 
[10:33:26.251] getGlobalsAndPackages() ... DONE
[10:33:26.262] Packages needed by the future expression (n = 0): <none>
[10:33:26.262] Packages needed by future strategies (n = 0): <none>
[10:33:26.262] {
[10:33:26.262]     {
[10:33:26.262]         {
[10:33:26.262]             ...future.startTime <- base::Sys.time()
[10:33:26.262]             {
[10:33:26.262]                 {
[10:33:26.262]                   {
[10:33:26.262]                     {
[10:33:26.262]                       base::local({
[10:33:26.262]                         has_future <- base::requireNamespace("future", 
[10:33:26.262]                           quietly = TRUE)
[10:33:26.262]                         if (has_future) {
[10:33:26.262]                           ns <- base::getNamespace("future")
[10:33:26.262]                           version <- ns[[".package"]][["version"]]
[10:33:26.262]                           if (is.null(version)) 
[10:33:26.262]                             version <- utils::packageVersion("future")
[10:33:26.262]                         }
[10:33:26.262]                         else {
[10:33:26.262]                           version <- NULL
[10:33:26.262]                         }
[10:33:26.262]                         if (!has_future || version < "1.8.0") {
[10:33:26.262]                           info <- base::c(r_version = base::gsub("R version ", 
[10:33:26.262]                             "", base::R.version$version.string), 
[10:33:26.262]                             platform = base::sprintf("%s (%s-bit)", 
[10:33:26.262]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:26.262]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:26.262]                               "release", "version")], collapse = " "), 
[10:33:26.262]                             hostname = base::Sys.info()[["nodename"]])
[10:33:26.262]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:33:26.262]                             info)
[10:33:26.262]                           info <- base::paste(info, collapse = "; ")
[10:33:26.262]                           if (!has_future) {
[10:33:26.262]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:26.262]                               info)
[10:33:26.262]                           }
[10:33:26.262]                           else {
[10:33:26.262]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:26.262]                               info, version)
[10:33:26.262]                           }
[10:33:26.262]                           base::stop(msg)
[10:33:26.262]                         }
[10:33:26.262]                       })
[10:33:26.262]                     }
[10:33:26.262]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:33:26.262]                     base::options(mc.cores = 1L)
[10:33:26.262]                   }
[10:33:26.262]                   ...future.strategy.old <- future::plan("list")
[10:33:26.262]                   options(future.plan = NULL)
[10:33:26.262]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:26.262]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:33:26.262]                 }
[10:33:26.262]                 ...future.workdir <- getwd()
[10:33:26.262]             }
[10:33:26.262]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:26.262]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:26.262]         }
[10:33:26.262]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:33:26.262]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:26.262]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:33:26.262]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:33:26.262]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:26.262]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:26.262]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:26.262]             base::names(...future.oldOptions))
[10:33:26.262]     }
[10:33:26.262]     if (FALSE) {
[10:33:26.262]     }
[10:33:26.262]     else {
[10:33:26.262]         if (TRUE) {
[10:33:26.262]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:26.262]                 open = "w")
[10:33:26.262]         }
[10:33:26.262]         else {
[10:33:26.262]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:26.262]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:26.262]         }
[10:33:26.262]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:26.262]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:26.262]             base::sink(type = "output", split = FALSE)
[10:33:26.262]             base::close(...future.stdout)
[10:33:26.262]         }, add = TRUE)
[10:33:26.262]     }
[10:33:26.262]     ...future.frame <- base::sys.nframe()
[10:33:26.262]     ...future.conditions <- base::list()
[10:33:26.262]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:26.262]     if (FALSE) {
[10:33:26.262]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:26.262]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:26.262]     }
[10:33:26.262]     ...future.result <- base::tryCatch({
[10:33:26.262]         base::withCallingHandlers({
[10:33:26.262]             ...future.value <- base::withVisible(base::local({
[10:33:26.262]                 ...future.makeSendCondition <- base::local({
[10:33:26.262]                   sendCondition <- NULL
[10:33:26.262]                   function(frame = 1L) {
[10:33:26.262]                     if (is.function(sendCondition)) 
[10:33:26.262]                       return(sendCondition)
[10:33:26.262]                     ns <- getNamespace("parallel")
[10:33:26.262]                     if (exists("sendData", mode = "function", 
[10:33:26.262]                       envir = ns)) {
[10:33:26.262]                       parallel_sendData <- get("sendData", mode = "function", 
[10:33:26.262]                         envir = ns)
[10:33:26.262]                       envir <- sys.frame(frame)
[10:33:26.262]                       master <- NULL
[10:33:26.262]                       while (!identical(envir, .GlobalEnv) && 
[10:33:26.262]                         !identical(envir, emptyenv())) {
[10:33:26.262]                         if (exists("master", mode = "list", envir = envir, 
[10:33:26.262]                           inherits = FALSE)) {
[10:33:26.262]                           master <- get("master", mode = "list", 
[10:33:26.262]                             envir = envir, inherits = FALSE)
[10:33:26.262]                           if (inherits(master, c("SOCKnode", 
[10:33:26.262]                             "SOCK0node"))) {
[10:33:26.262]                             sendCondition <<- function(cond) {
[10:33:26.262]                               data <- list(type = "VALUE", value = cond, 
[10:33:26.262]                                 success = TRUE)
[10:33:26.262]                               parallel_sendData(master, data)
[10:33:26.262]                             }
[10:33:26.262]                             return(sendCondition)
[10:33:26.262]                           }
[10:33:26.262]                         }
[10:33:26.262]                         frame <- frame + 1L
[10:33:26.262]                         envir <- sys.frame(frame)
[10:33:26.262]                       }
[10:33:26.262]                     }
[10:33:26.262]                     sendCondition <<- function(cond) NULL
[10:33:26.262]                   }
[10:33:26.262]                 })
[10:33:26.262]                 withCallingHandlers({
[10:33:26.262]                   {
[10:33:26.262]                     ii
[10:33:26.262]                   }
[10:33:26.262]                 }, immediateCondition = function(cond) {
[10:33:26.262]                   sendCondition <- ...future.makeSendCondition()
[10:33:26.262]                   sendCondition(cond)
[10:33:26.262]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:26.262]                   {
[10:33:26.262]                     inherits <- base::inherits
[10:33:26.262]                     invokeRestart <- base::invokeRestart
[10:33:26.262]                     is.null <- base::is.null
[10:33:26.262]                     muffled <- FALSE
[10:33:26.262]                     if (inherits(cond, "message")) {
[10:33:26.262]                       muffled <- grepl(pattern, "muffleMessage")
[10:33:26.262]                       if (muffled) 
[10:33:26.262]                         invokeRestart("muffleMessage")
[10:33:26.262]                     }
[10:33:26.262]                     else if (inherits(cond, "warning")) {
[10:33:26.262]                       muffled <- grepl(pattern, "muffleWarning")
[10:33:26.262]                       if (muffled) 
[10:33:26.262]                         invokeRestart("muffleWarning")
[10:33:26.262]                     }
[10:33:26.262]                     else if (inherits(cond, "condition")) {
[10:33:26.262]                       if (!is.null(pattern)) {
[10:33:26.262]                         computeRestarts <- base::computeRestarts
[10:33:26.262]                         grepl <- base::grepl
[10:33:26.262]                         restarts <- computeRestarts(cond)
[10:33:26.262]                         for (restart in restarts) {
[10:33:26.262]                           name <- restart$name
[10:33:26.262]                           if (is.null(name)) 
[10:33:26.262]                             next
[10:33:26.262]                           if (!grepl(pattern, name)) 
[10:33:26.262]                             next
[10:33:26.262]                           invokeRestart(restart)
[10:33:26.262]                           muffled <- TRUE
[10:33:26.262]                           break
[10:33:26.262]                         }
[10:33:26.262]                       }
[10:33:26.262]                     }
[10:33:26.262]                     invisible(muffled)
[10:33:26.262]                   }
[10:33:26.262]                   muffleCondition(cond)
[10:33:26.262]                 })
[10:33:26.262]             }))
[10:33:26.262]             future::FutureResult(value = ...future.value$value, 
[10:33:26.262]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:26.262]                   ...future.rng), globalenv = if (FALSE) 
[10:33:26.262]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:26.262]                     ...future.globalenv.names))
[10:33:26.262]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:26.262]         }, condition = base::local({
[10:33:26.262]             c <- base::c
[10:33:26.262]             inherits <- base::inherits
[10:33:26.262]             invokeRestart <- base::invokeRestart
[10:33:26.262]             length <- base::length
[10:33:26.262]             list <- base::list
[10:33:26.262]             seq.int <- base::seq.int
[10:33:26.262]             signalCondition <- base::signalCondition
[10:33:26.262]             sys.calls <- base::sys.calls
[10:33:26.262]             `[[` <- base::`[[`
[10:33:26.262]             `+` <- base::`+`
[10:33:26.262]             `<<-` <- base::`<<-`
[10:33:26.262]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:26.262]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:26.262]                   3L)]
[10:33:26.262]             }
[10:33:26.262]             function(cond) {
[10:33:26.262]                 is_error <- inherits(cond, "error")
[10:33:26.262]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:26.262]                   NULL)
[10:33:26.262]                 if (is_error) {
[10:33:26.262]                   sessionInformation <- function() {
[10:33:26.262]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:26.262]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:26.262]                       search = base::search(), system = base::Sys.info())
[10:33:26.262]                   }
[10:33:26.262]                   ...future.conditions[[length(...future.conditions) + 
[10:33:26.262]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:26.262]                     cond$call), session = sessionInformation(), 
[10:33:26.262]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:26.262]                   signalCondition(cond)
[10:33:26.262]                 }
[10:33:26.262]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:26.262]                 "immediateCondition"))) {
[10:33:26.262]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:26.262]                   ...future.conditions[[length(...future.conditions) + 
[10:33:26.262]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:26.262]                   if (TRUE && !signal) {
[10:33:26.262]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:26.262]                     {
[10:33:26.262]                       inherits <- base::inherits
[10:33:26.262]                       invokeRestart <- base::invokeRestart
[10:33:26.262]                       is.null <- base::is.null
[10:33:26.262]                       muffled <- FALSE
[10:33:26.262]                       if (inherits(cond, "message")) {
[10:33:26.262]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:26.262]                         if (muffled) 
[10:33:26.262]                           invokeRestart("muffleMessage")
[10:33:26.262]                       }
[10:33:26.262]                       else if (inherits(cond, "warning")) {
[10:33:26.262]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:26.262]                         if (muffled) 
[10:33:26.262]                           invokeRestart("muffleWarning")
[10:33:26.262]                       }
[10:33:26.262]                       else if (inherits(cond, "condition")) {
[10:33:26.262]                         if (!is.null(pattern)) {
[10:33:26.262]                           computeRestarts <- base::computeRestarts
[10:33:26.262]                           grepl <- base::grepl
[10:33:26.262]                           restarts <- computeRestarts(cond)
[10:33:26.262]                           for (restart in restarts) {
[10:33:26.262]                             name <- restart$name
[10:33:26.262]                             if (is.null(name)) 
[10:33:26.262]                               next
[10:33:26.262]                             if (!grepl(pattern, name)) 
[10:33:26.262]                               next
[10:33:26.262]                             invokeRestart(restart)
[10:33:26.262]                             muffled <- TRUE
[10:33:26.262]                             break
[10:33:26.262]                           }
[10:33:26.262]                         }
[10:33:26.262]                       }
[10:33:26.262]                       invisible(muffled)
[10:33:26.262]                     }
[10:33:26.262]                     muffleCondition(cond, pattern = "^muffle")
[10:33:26.262]                   }
[10:33:26.262]                 }
[10:33:26.262]                 else {
[10:33:26.262]                   if (TRUE) {
[10:33:26.262]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:26.262]                     {
[10:33:26.262]                       inherits <- base::inherits
[10:33:26.262]                       invokeRestart <- base::invokeRestart
[10:33:26.262]                       is.null <- base::is.null
[10:33:26.262]                       muffled <- FALSE
[10:33:26.262]                       if (inherits(cond, "message")) {
[10:33:26.262]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:26.262]                         if (muffled) 
[10:33:26.262]                           invokeRestart("muffleMessage")
[10:33:26.262]                       }
[10:33:26.262]                       else if (inherits(cond, "warning")) {
[10:33:26.262]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:26.262]                         if (muffled) 
[10:33:26.262]                           invokeRestart("muffleWarning")
[10:33:26.262]                       }
[10:33:26.262]                       else if (inherits(cond, "condition")) {
[10:33:26.262]                         if (!is.null(pattern)) {
[10:33:26.262]                           computeRestarts <- base::computeRestarts
[10:33:26.262]                           grepl <- base::grepl
[10:33:26.262]                           restarts <- computeRestarts(cond)
[10:33:26.262]                           for (restart in restarts) {
[10:33:26.262]                             name <- restart$name
[10:33:26.262]                             if (is.null(name)) 
[10:33:26.262]                               next
[10:33:26.262]                             if (!grepl(pattern, name)) 
[10:33:26.262]                               next
[10:33:26.262]                             invokeRestart(restart)
[10:33:26.262]                             muffled <- TRUE
[10:33:26.262]                             break
[10:33:26.262]                           }
[10:33:26.262]                         }
[10:33:26.262]                       }
[10:33:26.262]                       invisible(muffled)
[10:33:26.262]                     }
[10:33:26.262]                     muffleCondition(cond, pattern = "^muffle")
[10:33:26.262]                   }
[10:33:26.262]                 }
[10:33:26.262]             }
[10:33:26.262]         }))
[10:33:26.262]     }, error = function(ex) {
[10:33:26.262]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:26.262]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:26.262]                 ...future.rng), started = ...future.startTime, 
[10:33:26.262]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:26.262]             version = "1.8"), class = "FutureResult")
[10:33:26.262]     }, finally = {
[10:33:26.262]         if (!identical(...future.workdir, getwd())) 
[10:33:26.262]             setwd(...future.workdir)
[10:33:26.262]         {
[10:33:26.262]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:26.262]                 ...future.oldOptions$nwarnings <- NULL
[10:33:26.262]             }
[10:33:26.262]             base::options(...future.oldOptions)
[10:33:26.262]             if (.Platform$OS.type == "windows") {
[10:33:26.262]                 old_names <- names(...future.oldEnvVars)
[10:33:26.262]                 envs <- base::Sys.getenv()
[10:33:26.262]                 names <- names(envs)
[10:33:26.262]                 common <- intersect(names, old_names)
[10:33:26.262]                 added <- setdiff(names, old_names)
[10:33:26.262]                 removed <- setdiff(old_names, names)
[10:33:26.262]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:26.262]                   envs[common]]
[10:33:26.262]                 NAMES <- toupper(changed)
[10:33:26.262]                 args <- list()
[10:33:26.262]                 for (kk in seq_along(NAMES)) {
[10:33:26.262]                   name <- changed[[kk]]
[10:33:26.262]                   NAME <- NAMES[[kk]]
[10:33:26.262]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:26.262]                     next
[10:33:26.262]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:26.262]                 }
[10:33:26.262]                 NAMES <- toupper(added)
[10:33:26.262]                 for (kk in seq_along(NAMES)) {
[10:33:26.262]                   name <- added[[kk]]
[10:33:26.262]                   NAME <- NAMES[[kk]]
[10:33:26.262]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:26.262]                     next
[10:33:26.262]                   args[[name]] <- ""
[10:33:26.262]                 }
[10:33:26.262]                 NAMES <- toupper(removed)
[10:33:26.262]                 for (kk in seq_along(NAMES)) {
[10:33:26.262]                   name <- removed[[kk]]
[10:33:26.262]                   NAME <- NAMES[[kk]]
[10:33:26.262]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:26.262]                     next
[10:33:26.262]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:26.262]                 }
[10:33:26.262]                 if (length(args) > 0) 
[10:33:26.262]                   base::do.call(base::Sys.setenv, args = args)
[10:33:26.262]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:26.262]             }
[10:33:26.262]             else {
[10:33:26.262]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:26.262]             }
[10:33:26.262]             {
[10:33:26.262]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:26.262]                   0L) {
[10:33:26.262]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:26.262]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:26.262]                   base::options(opts)
[10:33:26.262]                 }
[10:33:26.262]                 {
[10:33:26.262]                   {
[10:33:26.262]                     base::options(mc.cores = ...future.mc.cores.old)
[10:33:26.262]                     NULL
[10:33:26.262]                   }
[10:33:26.262]                   options(future.plan = NULL)
[10:33:26.262]                   if (is.na(NA_character_)) 
[10:33:26.262]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:26.262]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:26.262]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:26.262]                     .init = FALSE)
[10:33:26.262]                 }
[10:33:26.262]             }
[10:33:26.262]         }
[10:33:26.262]     })
[10:33:26.262]     if (TRUE) {
[10:33:26.262]         base::sink(type = "output", split = FALSE)
[10:33:26.262]         if (TRUE) {
[10:33:26.262]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:26.262]         }
[10:33:26.262]         else {
[10:33:26.262]             ...future.result["stdout"] <- base::list(NULL)
[10:33:26.262]         }
[10:33:26.262]         base::close(...future.stdout)
[10:33:26.262]         ...future.stdout <- NULL
[10:33:26.262]     }
[10:33:26.262]     ...future.result$conditions <- ...future.conditions
[10:33:26.262]     ...future.result$finished <- base::Sys.time()
[10:33:26.262]     ...future.result
[10:33:26.262] }
[10:33:26.316] Exporting 1 global objects (56 bytes) to cluster node #2 ...
[10:33:26.316] Exporting ‘ii’ (56 bytes) to cluster node #2 ...
[10:33:26.316] Exporting ‘ii’ (56 bytes) to cluster node #2 ... DONE
[10:33:26.317] Exporting 1 global objects (56 bytes) to cluster node #2 ... DONE
[10:33:26.317] MultisessionFuture started
 - Resolving 2 multisession futures
[10:33:26.318] result() for ClusterFuture ...
[10:33:26.318] receiveMessageFromWorker() for ClusterFuture ...
[10:33:26.318] - Validating connection of MultisessionFuture
[10:33:26.351] - received message: FutureResult
[10:33:26.351] - Received FutureResult
[10:33:26.351] - Erased future from FutureRegistry
[10:33:26.351] result() for ClusterFuture ...
[10:33:26.352] - result already collected: FutureResult
[10:33:26.352] result() for ClusterFuture ... done
[10:33:26.352] receiveMessageFromWorker() for ClusterFuture ... done
[10:33:26.352] result() for ClusterFuture ... done
[10:33:26.352] result() for ClusterFuture ...
[10:33:26.352] - result already collected: FutureResult
[10:33:26.352] result() for ClusterFuture ... done
[10:33:26.353] result() for ClusterFuture ...
[10:33:26.353] receiveMessageFromWorker() for ClusterFuture ...
[10:33:26.353] - Validating connection of MultisessionFuture
[10:33:26.353] - received message: FutureResult
[10:33:26.353] - Received FutureResult
[10:33:26.353] - Erased future from FutureRegistry
[10:33:26.353] result() for ClusterFuture ...
[10:33:26.353] - result already collected: FutureResult
[10:33:26.354] result() for ClusterFuture ... done
[10:33:26.354] receiveMessageFromWorker() for ClusterFuture ... done
[10:33:26.354] result() for ClusterFuture ... done
[10:33:26.354] result() for ClusterFuture ...
[10:33:26.354] - result already collected: FutureResult
[10:33:26.354] result() for ClusterFuture ... done
*** multisession() - workers inherit .libPaths()
[10:33:26.354] getGlobalsAndPackages() ...
[10:33:26.355] Searching for globals...
[10:33:26.355] - globals found: [1] ‘.libPaths’
[10:33:26.355] Searching for globals ... DONE
[10:33:26.355] Resolving globals: FALSE
[10:33:26.356] 
[10:33:26.356] 
[10:33:26.356] getGlobalsAndPackages() ... DONE
[10:33:26.356] run() for ‘Future’ ...
[10:33:26.356] - state: ‘created’
[10:33:26.357] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:33:26.357] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:33:26.357] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:33:26.357]   - Field: ‘label’
[10:33:26.357]   - Field: ‘local’
[10:33:26.358]   - Field: ‘owner’
[10:33:26.358]   - Field: ‘envir’
[10:33:26.358]   - Field: ‘packages’
[10:33:26.358]   - Field: ‘gc’
[10:33:26.358]   - Field: ‘conditions’
[10:33:26.358]   - Field: ‘expr’
[10:33:26.358]   - Field: ‘uuid’
[10:33:26.358]   - Field: ‘seed’
[10:33:26.358]   - Field: ‘version’
[10:33:26.359]   - Field: ‘result’
[10:33:26.359]   - Field: ‘asynchronous’
[10:33:26.359]   - Field: ‘calls’
[10:33:26.359]   - Field: ‘globals’
[10:33:26.359]   - Field: ‘stdout’
[10:33:26.359]   - Field: ‘earlySignal’
[10:33:26.359]   - Field: ‘lazy’
[10:33:26.359]   - Field: ‘state’
[10:33:26.359] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:33:26.360] - Launch lazy future ...
[10:33:26.360] Packages needed by the future expression (n = 0): <none>
[10:33:26.360] Packages needed by future strategies (n = 0): <none>
[10:33:26.361] {
[10:33:26.361]     {
[10:33:26.361]         {
[10:33:26.361]             ...future.startTime <- base::Sys.time()
[10:33:26.361]             {
[10:33:26.361]                 {
[10:33:26.361]                   {
[10:33:26.361]                     base::local({
[10:33:26.361]                       has_future <- base::requireNamespace("future", 
[10:33:26.361]                         quietly = TRUE)
[10:33:26.361]                       if (has_future) {
[10:33:26.361]                         ns <- base::getNamespace("future")
[10:33:26.361]                         version <- ns[[".package"]][["version"]]
[10:33:26.361]                         if (is.null(version)) 
[10:33:26.361]                           version <- utils::packageVersion("future")
[10:33:26.361]                       }
[10:33:26.361]                       else {
[10:33:26.361]                         version <- NULL
[10:33:26.361]                       }
[10:33:26.361]                       if (!has_future || version < "1.8.0") {
[10:33:26.361]                         info <- base::c(r_version = base::gsub("R version ", 
[10:33:26.361]                           "", base::R.version$version.string), 
[10:33:26.361]                           platform = base::sprintf("%s (%s-bit)", 
[10:33:26.361]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:26.361]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:26.361]                             "release", "version")], collapse = " "), 
[10:33:26.361]                           hostname = base::Sys.info()[["nodename"]])
[10:33:26.361]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:33:26.361]                           info)
[10:33:26.361]                         info <- base::paste(info, collapse = "; ")
[10:33:26.361]                         if (!has_future) {
[10:33:26.361]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:26.361]                             info)
[10:33:26.361]                         }
[10:33:26.361]                         else {
[10:33:26.361]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:26.361]                             info, version)
[10:33:26.361]                         }
[10:33:26.361]                         base::stop(msg)
[10:33:26.361]                       }
[10:33:26.361]                     })
[10:33:26.361]                   }
[10:33:26.361]                   ...future.strategy.old <- future::plan("list")
[10:33:26.361]                   options(future.plan = NULL)
[10:33:26.361]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:26.361]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:33:26.361]                 }
[10:33:26.361]                 ...future.workdir <- getwd()
[10:33:26.361]             }
[10:33:26.361]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:26.361]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:26.361]         }
[10:33:26.361]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:33:26.361]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:26.361]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:33:26.361]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:33:26.361]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:26.361]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:26.361]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:26.361]             base::names(...future.oldOptions))
[10:33:26.361]     }
[10:33:26.361]     if (FALSE) {
[10:33:26.361]     }
[10:33:26.361]     else {
[10:33:26.361]         if (TRUE) {
[10:33:26.361]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:26.361]                 open = "w")
[10:33:26.361]         }
[10:33:26.361]         else {
[10:33:26.361]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:26.361]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:26.361]         }
[10:33:26.361]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:26.361]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:26.361]             base::sink(type = "output", split = FALSE)
[10:33:26.361]             base::close(...future.stdout)
[10:33:26.361]         }, add = TRUE)
[10:33:26.361]     }
[10:33:26.361]     ...future.frame <- base::sys.nframe()
[10:33:26.361]     ...future.conditions <- base::list()
[10:33:26.361]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:26.361]     if (FALSE) {
[10:33:26.361]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:26.361]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:26.361]     }
[10:33:26.361]     ...future.result <- base::tryCatch({
[10:33:26.361]         base::withCallingHandlers({
[10:33:26.361]             ...future.value <- base::withVisible(base::local(.libPaths()))
[10:33:26.361]             future::FutureResult(value = ...future.value$value, 
[10:33:26.361]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:26.361]                   ...future.rng), globalenv = if (FALSE) 
[10:33:26.361]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:26.361]                     ...future.globalenv.names))
[10:33:26.361]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:26.361]         }, condition = base::local({
[10:33:26.361]             c <- base::c
[10:33:26.361]             inherits <- base::inherits
[10:33:26.361]             invokeRestart <- base::invokeRestart
[10:33:26.361]             length <- base::length
[10:33:26.361]             list <- base::list
[10:33:26.361]             seq.int <- base::seq.int
[10:33:26.361]             signalCondition <- base::signalCondition
[10:33:26.361]             sys.calls <- base::sys.calls
[10:33:26.361]             `[[` <- base::`[[`
[10:33:26.361]             `+` <- base::`+`
[10:33:26.361]             `<<-` <- base::`<<-`
[10:33:26.361]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:26.361]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:26.361]                   3L)]
[10:33:26.361]             }
[10:33:26.361]             function(cond) {
[10:33:26.361]                 is_error <- inherits(cond, "error")
[10:33:26.361]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:26.361]                   NULL)
[10:33:26.361]                 if (is_error) {
[10:33:26.361]                   sessionInformation <- function() {
[10:33:26.361]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:26.361]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:26.361]                       search = base::search(), system = base::Sys.info())
[10:33:26.361]                   }
[10:33:26.361]                   ...future.conditions[[length(...future.conditions) + 
[10:33:26.361]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:26.361]                     cond$call), session = sessionInformation(), 
[10:33:26.361]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:26.361]                   signalCondition(cond)
[10:33:26.361]                 }
[10:33:26.361]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:26.361]                 "immediateCondition"))) {
[10:33:26.361]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:26.361]                   ...future.conditions[[length(...future.conditions) + 
[10:33:26.361]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:26.361]                   if (TRUE && !signal) {
[10:33:26.361]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:26.361]                     {
[10:33:26.361]                       inherits <- base::inherits
[10:33:26.361]                       invokeRestart <- base::invokeRestart
[10:33:26.361]                       is.null <- base::is.null
[10:33:26.361]                       muffled <- FALSE
[10:33:26.361]                       if (inherits(cond, "message")) {
[10:33:26.361]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:26.361]                         if (muffled) 
[10:33:26.361]                           invokeRestart("muffleMessage")
[10:33:26.361]                       }
[10:33:26.361]                       else if (inherits(cond, "warning")) {
[10:33:26.361]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:26.361]                         if (muffled) 
[10:33:26.361]                           invokeRestart("muffleWarning")
[10:33:26.361]                       }
[10:33:26.361]                       else if (inherits(cond, "condition")) {
[10:33:26.361]                         if (!is.null(pattern)) {
[10:33:26.361]                           computeRestarts <- base::computeRestarts
[10:33:26.361]                           grepl <- base::grepl
[10:33:26.361]                           restarts <- computeRestarts(cond)
[10:33:26.361]                           for (restart in restarts) {
[10:33:26.361]                             name <- restart$name
[10:33:26.361]                             if (is.null(name)) 
[10:33:26.361]                               next
[10:33:26.361]                             if (!grepl(pattern, name)) 
[10:33:26.361]                               next
[10:33:26.361]                             invokeRestart(restart)
[10:33:26.361]                             muffled <- TRUE
[10:33:26.361]                             break
[10:33:26.361]                           }
[10:33:26.361]                         }
[10:33:26.361]                       }
[10:33:26.361]                       invisible(muffled)
[10:33:26.361]                     }
[10:33:26.361]                     muffleCondition(cond, pattern = "^muffle")
[10:33:26.361]                   }
[10:33:26.361]                 }
[10:33:26.361]                 else {
[10:33:26.361]                   if (TRUE) {
[10:33:26.361]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:26.361]                     {
[10:33:26.361]                       inherits <- base::inherits
[10:33:26.361]                       invokeRestart <- base::invokeRestart
[10:33:26.361]                       is.null <- base::is.null
[10:33:26.361]                       muffled <- FALSE
[10:33:26.361]                       if (inherits(cond, "message")) {
[10:33:26.361]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:26.361]                         if (muffled) 
[10:33:26.361]                           invokeRestart("muffleMessage")
[10:33:26.361]                       }
[10:33:26.361]                       else if (inherits(cond, "warning")) {
[10:33:26.361]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:26.361]                         if (muffled) 
[10:33:26.361]                           invokeRestart("muffleWarning")
[10:33:26.361]                       }
[10:33:26.361]                       else if (inherits(cond, "condition")) {
[10:33:26.361]                         if (!is.null(pattern)) {
[10:33:26.361]                           computeRestarts <- base::computeRestarts
[10:33:26.361]                           grepl <- base::grepl
[10:33:26.361]                           restarts <- computeRestarts(cond)
[10:33:26.361]                           for (restart in restarts) {
[10:33:26.361]                             name <- restart$name
[10:33:26.361]                             if (is.null(name)) 
[10:33:26.361]                               next
[10:33:26.361]                             if (!grepl(pattern, name)) 
[10:33:26.361]                               next
[10:33:26.361]                             invokeRestart(restart)
[10:33:26.361]                             muffled <- TRUE
[10:33:26.361]                             break
[10:33:26.361]                           }
[10:33:26.361]                         }
[10:33:26.361]                       }
[10:33:26.361]                       invisible(muffled)
[10:33:26.361]                     }
[10:33:26.361]                     muffleCondition(cond, pattern = "^muffle")
[10:33:26.361]                   }
[10:33:26.361]                 }
[10:33:26.361]             }
[10:33:26.361]         }))
[10:33:26.361]     }, error = function(ex) {
[10:33:26.361]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:26.361]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:26.361]                 ...future.rng), started = ...future.startTime, 
[10:33:26.361]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:26.361]             version = "1.8"), class = "FutureResult")
[10:33:26.361]     }, finally = {
[10:33:26.361]         if (!identical(...future.workdir, getwd())) 
[10:33:26.361]             setwd(...future.workdir)
[10:33:26.361]         {
[10:33:26.361]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:26.361]                 ...future.oldOptions$nwarnings <- NULL
[10:33:26.361]             }
[10:33:26.361]             base::options(...future.oldOptions)
[10:33:26.361]             if (.Platform$OS.type == "windows") {
[10:33:26.361]                 old_names <- names(...future.oldEnvVars)
[10:33:26.361]                 envs <- base::Sys.getenv()
[10:33:26.361]                 names <- names(envs)
[10:33:26.361]                 common <- intersect(names, old_names)
[10:33:26.361]                 added <- setdiff(names, old_names)
[10:33:26.361]                 removed <- setdiff(old_names, names)
[10:33:26.361]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:26.361]                   envs[common]]
[10:33:26.361]                 NAMES <- toupper(changed)
[10:33:26.361]                 args <- list()
[10:33:26.361]                 for (kk in seq_along(NAMES)) {
[10:33:26.361]                   name <- changed[[kk]]
[10:33:26.361]                   NAME <- NAMES[[kk]]
[10:33:26.361]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:26.361]                     next
[10:33:26.361]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:26.361]                 }
[10:33:26.361]                 NAMES <- toupper(added)
[10:33:26.361]                 for (kk in seq_along(NAMES)) {
[10:33:26.361]                   name <- added[[kk]]
[10:33:26.361]                   NAME <- NAMES[[kk]]
[10:33:26.361]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:26.361]                     next
[10:33:26.361]                   args[[name]] <- ""
[10:33:26.361]                 }
[10:33:26.361]                 NAMES <- toupper(removed)
[10:33:26.361]                 for (kk in seq_along(NAMES)) {
[10:33:26.361]                   name <- removed[[kk]]
[10:33:26.361]                   NAME <- NAMES[[kk]]
[10:33:26.361]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:26.361]                     next
[10:33:26.361]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:26.361]                 }
[10:33:26.361]                 if (length(args) > 0) 
[10:33:26.361]                   base::do.call(base::Sys.setenv, args = args)
[10:33:26.361]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:26.361]             }
[10:33:26.361]             else {
[10:33:26.361]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:26.361]             }
[10:33:26.361]             {
[10:33:26.361]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:26.361]                   0L) {
[10:33:26.361]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:26.361]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:26.361]                   base::options(opts)
[10:33:26.361]                 }
[10:33:26.361]                 {
[10:33:26.361]                   {
[10:33:26.361]                     NULL
[10:33:26.361]                     RNGkind("Mersenne-Twister")
[10:33:26.361]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:33:26.361]                       inherits = FALSE)
[10:33:26.361]                   }
[10:33:26.361]                   options(future.plan = NULL)
[10:33:26.361]                   if (is.na(NA_character_)) 
[10:33:26.361]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:26.361]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:26.361]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:26.361]                     .init = FALSE)
[10:33:26.361]                 }
[10:33:26.361]             }
[10:33:26.361]         }
[10:33:26.361]     })
[10:33:26.361]     if (TRUE) {
[10:33:26.361]         base::sink(type = "output", split = FALSE)
[10:33:26.361]         if (TRUE) {
[10:33:26.361]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:26.361]         }
[10:33:26.361]         else {
[10:33:26.361]             ...future.result["stdout"] <- base::list(NULL)
[10:33:26.361]         }
[10:33:26.361]         base::close(...future.stdout)
[10:33:26.361]         ...future.stdout <- NULL
[10:33:26.361]     }
[10:33:26.361]     ...future.result$conditions <- ...future.conditions
[10:33:26.361]     ...future.result$finished <- base::Sys.time()
[10:33:26.361]     ...future.result
[10:33:26.361] }
[10:33:26.363] plan(): Setting new future strategy stack:
[10:33:26.363] List of future strategies:
[10:33:26.363] 1. sequential:
[10:33:26.363]    - args: function (..., envir = parent.frame())
[10:33:26.363]    - tweaked: FALSE
[10:33:26.363]    - call: NULL
[10:33:26.366] plan(): nbrOfWorkers() = 1
[10:33:26.366] plan(): Setting new future strategy stack:
[10:33:26.366] List of future strategies:
[10:33:26.366] 1. sequential:
[10:33:26.366]    - args: function (..., envir = parent.frame())
[10:33:26.366]    - tweaked: FALSE
[10:33:26.366]    - call: future::plan("sequential")
[10:33:26.367] plan(): nbrOfWorkers() = 1
[10:33:26.367] SequentialFuture started (and completed)
[10:33:26.367] - Launch lazy future ... done
[10:33:26.367] run() for ‘SequentialFuture’ ... done
List of 2
 $ main   : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
 $ workers: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
*** multisession() and errors
[10:33:26.372] getGlobalsAndPackages() ...
[10:33:26.372] 
[10:33:26.372] - globals: [0] <none>
[10:33:26.372] getGlobalsAndPackages() ... DONE
[10:33:26.383] Packages needed by the future expression (n = 0): <none>
[10:33:26.383] Packages needed by future strategies (n = 0): <none>
[10:33:26.383] {
[10:33:26.383]     {
[10:33:26.383]         {
[10:33:26.383]             ...future.startTime <- base::Sys.time()
[10:33:26.383]             {
[10:33:26.383]                 {
[10:33:26.383]                   {
[10:33:26.383]                     {
[10:33:26.383]                       base::local({
[10:33:26.383]                         has_future <- base::requireNamespace("future", 
[10:33:26.383]                           quietly = TRUE)
[10:33:26.383]                         if (has_future) {
[10:33:26.383]                           ns <- base::getNamespace("future")
[10:33:26.383]                           version <- ns[[".package"]][["version"]]
[10:33:26.383]                           if (is.null(version)) 
[10:33:26.383]                             version <- utils::packageVersion("future")
[10:33:26.383]                         }
[10:33:26.383]                         else {
[10:33:26.383]                           version <- NULL
[10:33:26.383]                         }
[10:33:26.383]                         if (!has_future || version < "1.8.0") {
[10:33:26.383]                           info <- base::c(r_version = base::gsub("R version ", 
[10:33:26.383]                             "", base::R.version$version.string), 
[10:33:26.383]                             platform = base::sprintf("%s (%s-bit)", 
[10:33:26.383]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:26.383]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:26.383]                               "release", "version")], collapse = " "), 
[10:33:26.383]                             hostname = base::Sys.info()[["nodename"]])
[10:33:26.383]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:33:26.383]                             info)
[10:33:26.383]                           info <- base::paste(info, collapse = "; ")
[10:33:26.383]                           if (!has_future) {
[10:33:26.383]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:26.383]                               info)
[10:33:26.383]                           }
[10:33:26.383]                           else {
[10:33:26.383]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:26.383]                               info, version)
[10:33:26.383]                           }
[10:33:26.383]                           base::stop(msg)
[10:33:26.383]                         }
[10:33:26.383]                       })
[10:33:26.383]                     }
[10:33:26.383]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:33:26.383]                     base::options(mc.cores = 1L)
[10:33:26.383]                   }
[10:33:26.383]                   ...future.strategy.old <- future::plan("list")
[10:33:26.383]                   options(future.plan = NULL)
[10:33:26.383]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:26.383]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:33:26.383]                 }
[10:33:26.383]                 ...future.workdir <- getwd()
[10:33:26.383]             }
[10:33:26.383]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:26.383]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:26.383]         }
[10:33:26.383]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:33:26.383]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:26.383]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:33:26.383]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:33:26.383]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:26.383]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:26.383]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:26.383]             base::names(...future.oldOptions))
[10:33:26.383]     }
[10:33:26.383]     if (FALSE) {
[10:33:26.383]     }
[10:33:26.383]     else {
[10:33:26.383]         if (TRUE) {
[10:33:26.383]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:26.383]                 open = "w")
[10:33:26.383]         }
[10:33:26.383]         else {
[10:33:26.383]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:26.383]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:26.383]         }
[10:33:26.383]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:26.383]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:26.383]             base::sink(type = "output", split = FALSE)
[10:33:26.383]             base::close(...future.stdout)
[10:33:26.383]         }, add = TRUE)
[10:33:26.383]     }
[10:33:26.383]     ...future.frame <- base::sys.nframe()
[10:33:26.383]     ...future.conditions <- base::list()
[10:33:26.383]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:26.383]     if (FALSE) {
[10:33:26.383]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:26.383]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:26.383]     }
[10:33:26.383]     ...future.result <- base::tryCatch({
[10:33:26.383]         base::withCallingHandlers({
[10:33:26.383]             ...future.value <- base::withVisible(base::local({
[10:33:26.383]                 ...future.makeSendCondition <- base::local({
[10:33:26.383]                   sendCondition <- NULL
[10:33:26.383]                   function(frame = 1L) {
[10:33:26.383]                     if (is.function(sendCondition)) 
[10:33:26.383]                       return(sendCondition)
[10:33:26.383]                     ns <- getNamespace("parallel")
[10:33:26.383]                     if (exists("sendData", mode = "function", 
[10:33:26.383]                       envir = ns)) {
[10:33:26.383]                       parallel_sendData <- get("sendData", mode = "function", 
[10:33:26.383]                         envir = ns)
[10:33:26.383]                       envir <- sys.frame(frame)
[10:33:26.383]                       master <- NULL
[10:33:26.383]                       while (!identical(envir, .GlobalEnv) && 
[10:33:26.383]                         !identical(envir, emptyenv())) {
[10:33:26.383]                         if (exists("master", mode = "list", envir = envir, 
[10:33:26.383]                           inherits = FALSE)) {
[10:33:26.383]                           master <- get("master", mode = "list", 
[10:33:26.383]                             envir = envir, inherits = FALSE)
[10:33:26.383]                           if (inherits(master, c("SOCKnode", 
[10:33:26.383]                             "SOCK0node"))) {
[10:33:26.383]                             sendCondition <<- function(cond) {
[10:33:26.383]                               data <- list(type = "VALUE", value = cond, 
[10:33:26.383]                                 success = TRUE)
[10:33:26.383]                               parallel_sendData(master, data)
[10:33:26.383]                             }
[10:33:26.383]                             return(sendCondition)
[10:33:26.383]                           }
[10:33:26.383]                         }
[10:33:26.383]                         frame <- frame + 1L
[10:33:26.383]                         envir <- sys.frame(frame)
[10:33:26.383]                       }
[10:33:26.383]                     }
[10:33:26.383]                     sendCondition <<- function(cond) NULL
[10:33:26.383]                   }
[10:33:26.383]                 })
[10:33:26.383]                 withCallingHandlers({
[10:33:26.383]                   {
[10:33:26.383]                     stop("Whoops!")
[10:33:26.383]                     1
[10:33:26.383]                   }
[10:33:26.383]                 }, immediateCondition = function(cond) {
[10:33:26.383]                   sendCondition <- ...future.makeSendCondition()
[10:33:26.383]                   sendCondition(cond)
[10:33:26.383]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:26.383]                   {
[10:33:26.383]                     inherits <- base::inherits
[10:33:26.383]                     invokeRestart <- base::invokeRestart
[10:33:26.383]                     is.null <- base::is.null
[10:33:26.383]                     muffled <- FALSE
[10:33:26.383]                     if (inherits(cond, "message")) {
[10:33:26.383]                       muffled <- grepl(pattern, "muffleMessage")
[10:33:26.383]                       if (muffled) 
[10:33:26.383]                         invokeRestart("muffleMessage")
[10:33:26.383]                     }
[10:33:26.383]                     else if (inherits(cond, "warning")) {
[10:33:26.383]                       muffled <- grepl(pattern, "muffleWarning")
[10:33:26.383]                       if (muffled) 
[10:33:26.383]                         invokeRestart("muffleWarning")
[10:33:26.383]                     }
[10:33:26.383]                     else if (inherits(cond, "condition")) {
[10:33:26.383]                       if (!is.null(pattern)) {
[10:33:26.383]                         computeRestarts <- base::computeRestarts
[10:33:26.383]                         grepl <- base::grepl
[10:33:26.383]                         restarts <- computeRestarts(cond)
[10:33:26.383]                         for (restart in restarts) {
[10:33:26.383]                           name <- restart$name
[10:33:26.383]                           if (is.null(name)) 
[10:33:26.383]                             next
[10:33:26.383]                           if (!grepl(pattern, name)) 
[10:33:26.383]                             next
[10:33:26.383]                           invokeRestart(restart)
[10:33:26.383]                           muffled <- TRUE
[10:33:26.383]                           break
[10:33:26.383]                         }
[10:33:26.383]                       }
[10:33:26.383]                     }
[10:33:26.383]                     invisible(muffled)
[10:33:26.383]                   }
[10:33:26.383]                   muffleCondition(cond)
[10:33:26.383]                 })
[10:33:26.383]             }))
[10:33:26.383]             future::FutureResult(value = ...future.value$value, 
[10:33:26.383]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:26.383]                   ...future.rng), globalenv = if (FALSE) 
[10:33:26.383]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:26.383]                     ...future.globalenv.names))
[10:33:26.383]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:26.383]         }, condition = base::local({
[10:33:26.383]             c <- base::c
[10:33:26.383]             inherits <- base::inherits
[10:33:26.383]             invokeRestart <- base::invokeRestart
[10:33:26.383]             length <- base::length
[10:33:26.383]             list <- base::list
[10:33:26.383]             seq.int <- base::seq.int
[10:33:26.383]             signalCondition <- base::signalCondition
[10:33:26.383]             sys.calls <- base::sys.calls
[10:33:26.383]             `[[` <- base::`[[`
[10:33:26.383]             `+` <- base::`+`
[10:33:26.383]             `<<-` <- base::`<<-`
[10:33:26.383]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:26.383]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:26.383]                   3L)]
[10:33:26.383]             }
[10:33:26.383]             function(cond) {
[10:33:26.383]                 is_error <- inherits(cond, "error")
[10:33:26.383]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:26.383]                   NULL)
[10:33:26.383]                 if (is_error) {
[10:33:26.383]                   sessionInformation <- function() {
[10:33:26.383]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:26.383]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:26.383]                       search = base::search(), system = base::Sys.info())
[10:33:26.383]                   }
[10:33:26.383]                   ...future.conditions[[length(...future.conditions) + 
[10:33:26.383]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:26.383]                     cond$call), session = sessionInformation(), 
[10:33:26.383]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:26.383]                   signalCondition(cond)
[10:33:26.383]                 }
[10:33:26.383]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:26.383]                 "immediateCondition"))) {
[10:33:26.383]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:26.383]                   ...future.conditions[[length(...future.conditions) + 
[10:33:26.383]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:26.383]                   if (TRUE && !signal) {
[10:33:26.383]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:26.383]                     {
[10:33:26.383]                       inherits <- base::inherits
[10:33:26.383]                       invokeRestart <- base::invokeRestart
[10:33:26.383]                       is.null <- base::is.null
[10:33:26.383]                       muffled <- FALSE
[10:33:26.383]                       if (inherits(cond, "message")) {
[10:33:26.383]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:26.383]                         if (muffled) 
[10:33:26.383]                           invokeRestart("muffleMessage")
[10:33:26.383]                       }
[10:33:26.383]                       else if (inherits(cond, "warning")) {
[10:33:26.383]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:26.383]                         if (muffled) 
[10:33:26.383]                           invokeRestart("muffleWarning")
[10:33:26.383]                       }
[10:33:26.383]                       else if (inherits(cond, "condition")) {
[10:33:26.383]                         if (!is.null(pattern)) {
[10:33:26.383]                           computeRestarts <- base::computeRestarts
[10:33:26.383]                           grepl <- base::grepl
[10:33:26.383]                           restarts <- computeRestarts(cond)
[10:33:26.383]                           for (restart in restarts) {
[10:33:26.383]                             name <- restart$name
[10:33:26.383]                             if (is.null(name)) 
[10:33:26.383]                               next
[10:33:26.383]                             if (!grepl(pattern, name)) 
[10:33:26.383]                               next
[10:33:26.383]                             invokeRestart(restart)
[10:33:26.383]                             muffled <- TRUE
[10:33:26.383]                             break
[10:33:26.383]                           }
[10:33:26.383]                         }
[10:33:26.383]                       }
[10:33:26.383]                       invisible(muffled)
[10:33:26.383]                     }
[10:33:26.383]                     muffleCondition(cond, pattern = "^muffle")
[10:33:26.383]                   }
[10:33:26.383]                 }
[10:33:26.383]                 else {
[10:33:26.383]                   if (TRUE) {
[10:33:26.383]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:26.383]                     {
[10:33:26.383]                       inherits <- base::inherits
[10:33:26.383]                       invokeRestart <- base::invokeRestart
[10:33:26.383]                       is.null <- base::is.null
[10:33:26.383]                       muffled <- FALSE
[10:33:26.383]                       if (inherits(cond, "message")) {
[10:33:26.383]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:26.383]                         if (muffled) 
[10:33:26.383]                           invokeRestart("muffleMessage")
[10:33:26.383]                       }
[10:33:26.383]                       else if (inherits(cond, "warning")) {
[10:33:26.383]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:26.383]                         if (muffled) 
[10:33:26.383]                           invokeRestart("muffleWarning")
[10:33:26.383]                       }
[10:33:26.383]                       else if (inherits(cond, "condition")) {
[10:33:26.383]                         if (!is.null(pattern)) {
[10:33:26.383]                           computeRestarts <- base::computeRestarts
[10:33:26.383]                           grepl <- base::grepl
[10:33:26.383]                           restarts <- computeRestarts(cond)
[10:33:26.383]                           for (restart in restarts) {
[10:33:26.383]                             name <- restart$name
[10:33:26.383]                             if (is.null(name)) 
[10:33:26.383]                               next
[10:33:26.383]                             if (!grepl(pattern, name)) 
[10:33:26.383]                               next
[10:33:26.383]                             invokeRestart(restart)
[10:33:26.383]                             muffled <- TRUE
[10:33:26.383]                             break
[10:33:26.383]                           }
[10:33:26.383]                         }
[10:33:26.383]                       }
[10:33:26.383]                       invisible(muffled)
[10:33:26.383]                     }
[10:33:26.383]                     muffleCondition(cond, pattern = "^muffle")
[10:33:26.383]                   }
[10:33:26.383]                 }
[10:33:26.383]             }
[10:33:26.383]         }))
[10:33:26.383]     }, error = function(ex) {
[10:33:26.383]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:26.383]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:26.383]                 ...future.rng), started = ...future.startTime, 
[10:33:26.383]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:26.383]             version = "1.8"), class = "FutureResult")
[10:33:26.383]     }, finally = {
[10:33:26.383]         if (!identical(...future.workdir, getwd())) 
[10:33:26.383]             setwd(...future.workdir)
[10:33:26.383]         {
[10:33:26.383]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:26.383]                 ...future.oldOptions$nwarnings <- NULL
[10:33:26.383]             }
[10:33:26.383]             base::options(...future.oldOptions)
[10:33:26.383]             if (.Platform$OS.type == "windows") {
[10:33:26.383]                 old_names <- names(...future.oldEnvVars)
[10:33:26.383]                 envs <- base::Sys.getenv()
[10:33:26.383]                 names <- names(envs)
[10:33:26.383]                 common <- intersect(names, old_names)
[10:33:26.383]                 added <- setdiff(names, old_names)
[10:33:26.383]                 removed <- setdiff(old_names, names)
[10:33:26.383]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:26.383]                   envs[common]]
[10:33:26.383]                 NAMES <- toupper(changed)
[10:33:26.383]                 args <- list()
[10:33:26.383]                 for (kk in seq_along(NAMES)) {
[10:33:26.383]                   name <- changed[[kk]]
[10:33:26.383]                   NAME <- NAMES[[kk]]
[10:33:26.383]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:26.383]                     next
[10:33:26.383]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:26.383]                 }
[10:33:26.383]                 NAMES <- toupper(added)
[10:33:26.383]                 for (kk in seq_along(NAMES)) {
[10:33:26.383]                   name <- added[[kk]]
[10:33:26.383]                   NAME <- NAMES[[kk]]
[10:33:26.383]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:26.383]                     next
[10:33:26.383]                   args[[name]] <- ""
[10:33:26.383]                 }
[10:33:26.383]                 NAMES <- toupper(removed)
[10:33:26.383]                 for (kk in seq_along(NAMES)) {
[10:33:26.383]                   name <- removed[[kk]]
[10:33:26.383]                   NAME <- NAMES[[kk]]
[10:33:26.383]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:26.383]                     next
[10:33:26.383]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:26.383]                 }
[10:33:26.383]                 if (length(args) > 0) 
[10:33:26.383]                   base::do.call(base::Sys.setenv, args = args)
[10:33:26.383]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:26.383]             }
[10:33:26.383]             else {
[10:33:26.383]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:26.383]             }
[10:33:26.383]             {
[10:33:26.383]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:26.383]                   0L) {
[10:33:26.383]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:26.383]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:26.383]                   base::options(opts)
[10:33:26.383]                 }
[10:33:26.383]                 {
[10:33:26.383]                   {
[10:33:26.383]                     base::options(mc.cores = ...future.mc.cores.old)
[10:33:26.383]                     NULL
[10:33:26.383]                   }
[10:33:26.383]                   options(future.plan = NULL)
[10:33:26.383]                   if (is.na(NA_character_)) 
[10:33:26.383]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:26.383]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:26.383]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:26.383]                     .init = FALSE)
[10:33:26.383]                 }
[10:33:26.383]             }
[10:33:26.383]         }
[10:33:26.383]     })
[10:33:26.383]     if (TRUE) {
[10:33:26.383]         base::sink(type = "output", split = FALSE)
[10:33:26.383]         if (TRUE) {
[10:33:26.383]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:26.383]         }
[10:33:26.383]         else {
[10:33:26.383]             ...future.result["stdout"] <- base::list(NULL)
[10:33:26.383]         }
[10:33:26.383]         base::close(...future.stdout)
[10:33:26.383]         ...future.stdout <- NULL
[10:33:26.383]     }
[10:33:26.383]     ...future.result$conditions <- ...future.conditions
[10:33:26.383]     ...future.result$finished <- base::Sys.time()
[10:33:26.383]     ...future.result
[10:33:26.383] }
[10:33:26.386] MultisessionFuture started
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    stop("Whoops!")
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:33:26.388] receiveMessageFromWorker() for ClusterFuture ...
[10:33:26.388] - Validating connection of MultisessionFuture
[10:33:26.389] - received message: FutureResult
[10:33:26.389] - Received FutureResult
[10:33:26.389] - Erased future from FutureRegistry
[10:33:26.389] result() for ClusterFuture ...
[10:33:26.389] - result already collected: FutureResult
[10:33:26.389] result() for ClusterFuture ... done
[10:33:26.389] signalConditions() ...
[10:33:26.389]  - include = ‘immediateCondition’
[10:33:26.389]  - exclude = 
[10:33:26.390]  - resignal = FALSE
[10:33:26.390]  - Number of conditions: 1
[10:33:26.390] signalConditions() ... done
[10:33:26.390] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 387602f3-bd1b-4a3f-3d8d-305a236eb3bb
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:33:26.390] result() for ClusterFuture ...
[10:33:26.390] - result already collected: FutureResult
[10:33:26.390] result() for ClusterFuture ... done
[10:33:26.390] result() for ClusterFuture ...
[10:33:26.390] - result already collected: FutureResult
[10:33:26.390] result() for ClusterFuture ... done
[10:33:26.391] signalConditions() ...
[10:33:26.391]  - include = ‘immediateCondition’
[10:33:26.391]  - exclude = 
[10:33:26.391]  - resignal = FALSE
[10:33:26.391]  - Number of conditions: 1
[10:33:26.391] signalConditions() ... done
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    sendCondition <- ...future.makeSendCondition()    sendCondition(cond)    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[10:33:26.391] result() for ClusterFuture ...
[10:33:26.391] - result already collected: FutureResult
[10:33:26.392] result() for ClusterFuture ... done
[10:33:26.392] result() for ClusterFuture ...
[10:33:26.392] - result already collected: FutureResult
[10:33:26.392] result() for ClusterFuture ... done
[10:33:26.392] signalConditions() ...
[10:33:26.392]  - include = ‘immediateCondition’
[10:33:26.392]  - exclude = 
[10:33:26.392]  - resignal = FALSE
[10:33:26.392]  - Number of conditions: 1
[10:33:26.392] signalConditions() ... done
[10:33:26.392] Future state: ‘finished’
[10:33:26.392] result() for ClusterFuture ...
[10:33:26.393] - result already collected: FutureResult
[10:33:26.393] result() for ClusterFuture ... done
[10:33:26.393] signalConditions() ...
[10:33:26.393]  - include = ‘condition’
[10:33:26.393]  - exclude = ‘immediateCondition’
[10:33:26.393]  - resignal = TRUE
[10:33:26.393]  - Number of conditions: 1
[10:33:26.393]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[10:33:26.393] signalConditions() ... done
[1] "Error in withCallingHandlers({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    sendCondition <- ...future.makeSendCondition()    sendCondition(cond)    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[10:33:26.394] result() for ClusterFuture ...
[10:33:26.394] - result already collected: FutureResult
[10:33:26.394] result() for ClusterFuture ... done
[10:33:26.394] result() for ClusterFuture ...
[10:33:26.394] - result already collected: FutureResult
[10:33:26.394] result() for ClusterFuture ... done
[10:33:26.394] signalConditions() ...
[10:33:26.394]  - include = ‘immediateCondition’
[10:33:26.394]  - exclude = 
[10:33:26.395]  - resignal = FALSE
[10:33:26.395]  - Number of conditions: 1
[10:33:26.395] signalConditions() ... done
[10:33:26.395] Future state: ‘finished’
[10:33:26.395] result() for ClusterFuture ...
[10:33:26.395] - result already collected: FutureResult
[10:33:26.395] result() for ClusterFuture ... done
[10:33:26.395] signalConditions() ...
[10:33:26.395]  - include = ‘condition’
[10:33:26.395]  - exclude = ‘immediateCondition’
[10:33:26.395]  - resignal = TRUE
[10:33:26.396]  - Number of conditions: 1
[10:33:26.396]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[10:33:26.396] signalConditions() ... done
[1] "Error in withCallingHandlers({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    sendCondition <- ...future.makeSendCondition()    sendCondition(cond)    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[10:33:26.399] getGlobalsAndPackages() ...
[10:33:26.399] 
[10:33:26.400] - globals: [0] <none>
[10:33:26.400] getGlobalsAndPackages() ... DONE
[10:33:26.410] Packages needed by the future expression (n = 0): <none>
[10:33:26.411] Packages needed by future strategies (n = 0): <none>
[10:33:26.411] {
[10:33:26.411]     {
[10:33:26.411]         {
[10:33:26.411]             ...future.startTime <- base::Sys.time()
[10:33:26.411]             {
[10:33:26.411]                 {
[10:33:26.411]                   {
[10:33:26.411]                     {
[10:33:26.411]                       base::local({
[10:33:26.411]                         has_future <- base::requireNamespace("future", 
[10:33:26.411]                           quietly = TRUE)
[10:33:26.411]                         if (has_future) {
[10:33:26.411]                           ns <- base::getNamespace("future")
[10:33:26.411]                           version <- ns[[".package"]][["version"]]
[10:33:26.411]                           if (is.null(version)) 
[10:33:26.411]                             version <- utils::packageVersion("future")
[10:33:26.411]                         }
[10:33:26.411]                         else {
[10:33:26.411]                           version <- NULL
[10:33:26.411]                         }
[10:33:26.411]                         if (!has_future || version < "1.8.0") {
[10:33:26.411]                           info <- base::c(r_version = base::gsub("R version ", 
[10:33:26.411]                             "", base::R.version$version.string), 
[10:33:26.411]                             platform = base::sprintf("%s (%s-bit)", 
[10:33:26.411]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:26.411]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:26.411]                               "release", "version")], collapse = " "), 
[10:33:26.411]                             hostname = base::Sys.info()[["nodename"]])
[10:33:26.411]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:33:26.411]                             info)
[10:33:26.411]                           info <- base::paste(info, collapse = "; ")
[10:33:26.411]                           if (!has_future) {
[10:33:26.411]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:26.411]                               info)
[10:33:26.411]                           }
[10:33:26.411]                           else {
[10:33:26.411]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:26.411]                               info, version)
[10:33:26.411]                           }
[10:33:26.411]                           base::stop(msg)
[10:33:26.411]                         }
[10:33:26.411]                       })
[10:33:26.411]                     }
[10:33:26.411]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:33:26.411]                     base::options(mc.cores = 1L)
[10:33:26.411]                   }
[10:33:26.411]                   ...future.strategy.old <- future::plan("list")
[10:33:26.411]                   options(future.plan = NULL)
[10:33:26.411]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:26.411]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:33:26.411]                 }
[10:33:26.411]                 ...future.workdir <- getwd()
[10:33:26.411]             }
[10:33:26.411]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:26.411]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:26.411]         }
[10:33:26.411]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:33:26.411]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:26.411]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:33:26.411]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:33:26.411]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:26.411]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:26.411]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:26.411]             base::names(...future.oldOptions))
[10:33:26.411]     }
[10:33:26.411]     if (FALSE) {
[10:33:26.411]     }
[10:33:26.411]     else {
[10:33:26.411]         if (TRUE) {
[10:33:26.411]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:26.411]                 open = "w")
[10:33:26.411]         }
[10:33:26.411]         else {
[10:33:26.411]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:26.411]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:26.411]         }
[10:33:26.411]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:26.411]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:26.411]             base::sink(type = "output", split = FALSE)
[10:33:26.411]             base::close(...future.stdout)
[10:33:26.411]         }, add = TRUE)
[10:33:26.411]     }
[10:33:26.411]     ...future.frame <- base::sys.nframe()
[10:33:26.411]     ...future.conditions <- base::list()
[10:33:26.411]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:26.411]     if (FALSE) {
[10:33:26.411]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:26.411]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:26.411]     }
[10:33:26.411]     ...future.result <- base::tryCatch({
[10:33:26.411]         base::withCallingHandlers({
[10:33:26.411]             ...future.value <- base::withVisible(base::local({
[10:33:26.411]                 ...future.makeSendCondition <- base::local({
[10:33:26.411]                   sendCondition <- NULL
[10:33:26.411]                   function(frame = 1L) {
[10:33:26.411]                     if (is.function(sendCondition)) 
[10:33:26.411]                       return(sendCondition)
[10:33:26.411]                     ns <- getNamespace("parallel")
[10:33:26.411]                     if (exists("sendData", mode = "function", 
[10:33:26.411]                       envir = ns)) {
[10:33:26.411]                       parallel_sendData <- get("sendData", mode = "function", 
[10:33:26.411]                         envir = ns)
[10:33:26.411]                       envir <- sys.frame(frame)
[10:33:26.411]                       master <- NULL
[10:33:26.411]                       while (!identical(envir, .GlobalEnv) && 
[10:33:26.411]                         !identical(envir, emptyenv())) {
[10:33:26.411]                         if (exists("master", mode = "list", envir = envir, 
[10:33:26.411]                           inherits = FALSE)) {
[10:33:26.411]                           master <- get("master", mode = "list", 
[10:33:26.411]                             envir = envir, inherits = FALSE)
[10:33:26.411]                           if (inherits(master, c("SOCKnode", 
[10:33:26.411]                             "SOCK0node"))) {
[10:33:26.411]                             sendCondition <<- function(cond) {
[10:33:26.411]                               data <- list(type = "VALUE", value = cond, 
[10:33:26.411]                                 success = TRUE)
[10:33:26.411]                               parallel_sendData(master, data)
[10:33:26.411]                             }
[10:33:26.411]                             return(sendCondition)
[10:33:26.411]                           }
[10:33:26.411]                         }
[10:33:26.411]                         frame <- frame + 1L
[10:33:26.411]                         envir <- sys.frame(frame)
[10:33:26.411]                       }
[10:33:26.411]                     }
[10:33:26.411]                     sendCondition <<- function(cond) NULL
[10:33:26.411]                   }
[10:33:26.411]                 })
[10:33:26.411]                 withCallingHandlers({
[10:33:26.411]                   {
[10:33:26.411]                     stop(structure(list(message = "boom"), class = c("MyError", 
[10:33:26.411]                       "error", "condition")))
[10:33:26.411]                   }
[10:33:26.411]                 }, immediateCondition = function(cond) {
[10:33:26.411]                   sendCondition <- ...future.makeSendCondition()
[10:33:26.411]                   sendCondition(cond)
[10:33:26.411]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:26.411]                   {
[10:33:26.411]                     inherits <- base::inherits
[10:33:26.411]                     invokeRestart <- base::invokeRestart
[10:33:26.411]                     is.null <- base::is.null
[10:33:26.411]                     muffled <- FALSE
[10:33:26.411]                     if (inherits(cond, "message")) {
[10:33:26.411]                       muffled <- grepl(pattern, "muffleMessage")
[10:33:26.411]                       if (muffled) 
[10:33:26.411]                         invokeRestart("muffleMessage")
[10:33:26.411]                     }
[10:33:26.411]                     else if (inherits(cond, "warning")) {
[10:33:26.411]                       muffled <- grepl(pattern, "muffleWarning")
[10:33:26.411]                       if (muffled) 
[10:33:26.411]                         invokeRestart("muffleWarning")
[10:33:26.411]                     }
[10:33:26.411]                     else if (inherits(cond, "condition")) {
[10:33:26.411]                       if (!is.null(pattern)) {
[10:33:26.411]                         computeRestarts <- base::computeRestarts
[10:33:26.411]                         grepl <- base::grepl
[10:33:26.411]                         restarts <- computeRestarts(cond)
[10:33:26.411]                         for (restart in restarts) {
[10:33:26.411]                           name <- restart$name
[10:33:26.411]                           if (is.null(name)) 
[10:33:26.411]                             next
[10:33:26.411]                           if (!grepl(pattern, name)) 
[10:33:26.411]                             next
[10:33:26.411]                           invokeRestart(restart)
[10:33:26.411]                           muffled <- TRUE
[10:33:26.411]                           break
[10:33:26.411]                         }
[10:33:26.411]                       }
[10:33:26.411]                     }
[10:33:26.411]                     invisible(muffled)
[10:33:26.411]                   }
[10:33:26.411]                   muffleCondition(cond)
[10:33:26.411]                 })
[10:33:26.411]             }))
[10:33:26.411]             future::FutureResult(value = ...future.value$value, 
[10:33:26.411]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:26.411]                   ...future.rng), globalenv = if (FALSE) 
[10:33:26.411]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:26.411]                     ...future.globalenv.names))
[10:33:26.411]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:26.411]         }, condition = base::local({
[10:33:26.411]             c <- base::c
[10:33:26.411]             inherits <- base::inherits
[10:33:26.411]             invokeRestart <- base::invokeRestart
[10:33:26.411]             length <- base::length
[10:33:26.411]             list <- base::list
[10:33:26.411]             seq.int <- base::seq.int
[10:33:26.411]             signalCondition <- base::signalCondition
[10:33:26.411]             sys.calls <- base::sys.calls
[10:33:26.411]             `[[` <- base::`[[`
[10:33:26.411]             `+` <- base::`+`
[10:33:26.411]             `<<-` <- base::`<<-`
[10:33:26.411]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:26.411]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:26.411]                   3L)]
[10:33:26.411]             }
[10:33:26.411]             function(cond) {
[10:33:26.411]                 is_error <- inherits(cond, "error")
[10:33:26.411]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:26.411]                   NULL)
[10:33:26.411]                 if (is_error) {
[10:33:26.411]                   sessionInformation <- function() {
[10:33:26.411]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:26.411]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:26.411]                       search = base::search(), system = base::Sys.info())
[10:33:26.411]                   }
[10:33:26.411]                   ...future.conditions[[length(...future.conditions) + 
[10:33:26.411]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:26.411]                     cond$call), session = sessionInformation(), 
[10:33:26.411]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:26.411]                   signalCondition(cond)
[10:33:26.411]                 }
[10:33:26.411]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:26.411]                 "immediateCondition"))) {
[10:33:26.411]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:26.411]                   ...future.conditions[[length(...future.conditions) + 
[10:33:26.411]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:26.411]                   if (TRUE && !signal) {
[10:33:26.411]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:26.411]                     {
[10:33:26.411]                       inherits <- base::inherits
[10:33:26.411]                       invokeRestart <- base::invokeRestart
[10:33:26.411]                       is.null <- base::is.null
[10:33:26.411]                       muffled <- FALSE
[10:33:26.411]                       if (inherits(cond, "message")) {
[10:33:26.411]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:26.411]                         if (muffled) 
[10:33:26.411]                           invokeRestart("muffleMessage")
[10:33:26.411]                       }
[10:33:26.411]                       else if (inherits(cond, "warning")) {
[10:33:26.411]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:26.411]                         if (muffled) 
[10:33:26.411]                           invokeRestart("muffleWarning")
[10:33:26.411]                       }
[10:33:26.411]                       else if (inherits(cond, "condition")) {
[10:33:26.411]                         if (!is.null(pattern)) {
[10:33:26.411]                           computeRestarts <- base::computeRestarts
[10:33:26.411]                           grepl <- base::grepl
[10:33:26.411]                           restarts <- computeRestarts(cond)
[10:33:26.411]                           for (restart in restarts) {
[10:33:26.411]                             name <- restart$name
[10:33:26.411]                             if (is.null(name)) 
[10:33:26.411]                               next
[10:33:26.411]                             if (!grepl(pattern, name)) 
[10:33:26.411]                               next
[10:33:26.411]                             invokeRestart(restart)
[10:33:26.411]                             muffled <- TRUE
[10:33:26.411]                             break
[10:33:26.411]                           }
[10:33:26.411]                         }
[10:33:26.411]                       }
[10:33:26.411]                       invisible(muffled)
[10:33:26.411]                     }
[10:33:26.411]                     muffleCondition(cond, pattern = "^muffle")
[10:33:26.411]                   }
[10:33:26.411]                 }
[10:33:26.411]                 else {
[10:33:26.411]                   if (TRUE) {
[10:33:26.411]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:26.411]                     {
[10:33:26.411]                       inherits <- base::inherits
[10:33:26.411]                       invokeRestart <- base::invokeRestart
[10:33:26.411]                       is.null <- base::is.null
[10:33:26.411]                       muffled <- FALSE
[10:33:26.411]                       if (inherits(cond, "message")) {
[10:33:26.411]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:26.411]                         if (muffled) 
[10:33:26.411]                           invokeRestart("muffleMessage")
[10:33:26.411]                       }
[10:33:26.411]                       else if (inherits(cond, "warning")) {
[10:33:26.411]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:26.411]                         if (muffled) 
[10:33:26.411]                           invokeRestart("muffleWarning")
[10:33:26.411]                       }
[10:33:26.411]                       else if (inherits(cond, "condition")) {
[10:33:26.411]                         if (!is.null(pattern)) {
[10:33:26.411]                           computeRestarts <- base::computeRestarts
[10:33:26.411]                           grepl <- base::grepl
[10:33:26.411]                           restarts <- computeRestarts(cond)
[10:33:26.411]                           for (restart in restarts) {
[10:33:26.411]                             name <- restart$name
[10:33:26.411]                             if (is.null(name)) 
[10:33:26.411]                               next
[10:33:26.411]                             if (!grepl(pattern, name)) 
[10:33:26.411]                               next
[10:33:26.411]                             invokeRestart(restart)
[10:33:26.411]                             muffled <- TRUE
[10:33:26.411]                             break
[10:33:26.411]                           }
[10:33:26.411]                         }
[10:33:26.411]                       }
[10:33:26.411]                       invisible(muffled)
[10:33:26.411]                     }
[10:33:26.411]                     muffleCondition(cond, pattern = "^muffle")
[10:33:26.411]                   }
[10:33:26.411]                 }
[10:33:26.411]             }
[10:33:26.411]         }))
[10:33:26.411]     }, error = function(ex) {
[10:33:26.411]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:26.411]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:26.411]                 ...future.rng), started = ...future.startTime, 
[10:33:26.411]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:26.411]             version = "1.8"), class = "FutureResult")
[10:33:26.411]     }, finally = {
[10:33:26.411]         if (!identical(...future.workdir, getwd())) 
[10:33:26.411]             setwd(...future.workdir)
[10:33:26.411]         {
[10:33:26.411]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:26.411]                 ...future.oldOptions$nwarnings <- NULL
[10:33:26.411]             }
[10:33:26.411]             base::options(...future.oldOptions)
[10:33:26.411]             if (.Platform$OS.type == "windows") {
[10:33:26.411]                 old_names <- names(...future.oldEnvVars)
[10:33:26.411]                 envs <- base::Sys.getenv()
[10:33:26.411]                 names <- names(envs)
[10:33:26.411]                 common <- intersect(names, old_names)
[10:33:26.411]                 added <- setdiff(names, old_names)
[10:33:26.411]                 removed <- setdiff(old_names, names)
[10:33:26.411]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:26.411]                   envs[common]]
[10:33:26.411]                 NAMES <- toupper(changed)
[10:33:26.411]                 args <- list()
[10:33:26.411]                 for (kk in seq_along(NAMES)) {
[10:33:26.411]                   name <- changed[[kk]]
[10:33:26.411]                   NAME <- NAMES[[kk]]
[10:33:26.411]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:26.411]                     next
[10:33:26.411]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:26.411]                 }
[10:33:26.411]                 NAMES <- toupper(added)
[10:33:26.411]                 for (kk in seq_along(NAMES)) {
[10:33:26.411]                   name <- added[[kk]]
[10:33:26.411]                   NAME <- NAMES[[kk]]
[10:33:26.411]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:26.411]                     next
[10:33:26.411]                   args[[name]] <- ""
[10:33:26.411]                 }
[10:33:26.411]                 NAMES <- toupper(removed)
[10:33:26.411]                 for (kk in seq_along(NAMES)) {
[10:33:26.411]                   name <- removed[[kk]]
[10:33:26.411]                   NAME <- NAMES[[kk]]
[10:33:26.411]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:26.411]                     next
[10:33:26.411]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:26.411]                 }
[10:33:26.411]                 if (length(args) > 0) 
[10:33:26.411]                   base::do.call(base::Sys.setenv, args = args)
[10:33:26.411]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:26.411]             }
[10:33:26.411]             else {
[10:33:26.411]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:26.411]             }
[10:33:26.411]             {
[10:33:26.411]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:26.411]                   0L) {
[10:33:26.411]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:26.411]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:26.411]                   base::options(opts)
[10:33:26.411]                 }
[10:33:26.411]                 {
[10:33:26.411]                   {
[10:33:26.411]                     base::options(mc.cores = ...future.mc.cores.old)
[10:33:26.411]                     NULL
[10:33:26.411]                   }
[10:33:26.411]                   options(future.plan = NULL)
[10:33:26.411]                   if (is.na(NA_character_)) 
[10:33:26.411]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:26.411]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:26.411]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:26.411]                     .init = FALSE)
[10:33:26.411]                 }
[10:33:26.411]             }
[10:33:26.411]         }
[10:33:26.411]     })
[10:33:26.411]     if (TRUE) {
[10:33:26.411]         base::sink(type = "output", split = FALSE)
[10:33:26.411]         if (TRUE) {
[10:33:26.411]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:26.411]         }
[10:33:26.411]         else {
[10:33:26.411]             ...future.result["stdout"] <- base::list(NULL)
[10:33:26.411]         }
[10:33:26.411]         base::close(...future.stdout)
[10:33:26.411]         ...future.stdout <- NULL
[10:33:26.411]     }
[10:33:26.411]     ...future.result$conditions <- ...future.conditions
[10:33:26.411]     ...future.result$finished <- base::Sys.time()
[10:33:26.411]     ...future.result
[10:33:26.411] }
[10:33:26.414] MultisessionFuture started
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    stop(structure(list(message = "boom"), class = c("MyError", 
        "error", "condition")))
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:33:26.415] receiveMessageFromWorker() for ClusterFuture ...
[10:33:26.415] - Validating connection of MultisessionFuture
[10:33:26.416] - received message: FutureResult
[10:33:26.416] - Received FutureResult
[10:33:26.416] - Erased future from FutureRegistry
[10:33:26.416] result() for ClusterFuture ...
[10:33:26.416] - result already collected: FutureResult
[10:33:26.416] result() for ClusterFuture ... done
[10:33:26.416] signalConditions() ...
[10:33:26.416]  - include = ‘immediateCondition’
[10:33:26.417]  - exclude = 
[10:33:26.417]  - resignal = FALSE
[10:33:26.417]  - Number of conditions: 1
[10:33:26.417] signalConditions() ... done
[10:33:26.417] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 387602f3-bd1b-4a3f-3d8d-305a236eb3bb
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:33:26.417] result() for ClusterFuture ...
[10:33:26.417] - result already collected: FutureResult
[10:33:26.417] result() for ClusterFuture ... done
[10:33:26.417] result() for ClusterFuture ...
[10:33:26.418] - result already collected: FutureResult
[10:33:26.418] result() for ClusterFuture ... done
[10:33:26.418] signalConditions() ...
[10:33:26.418]  - include = ‘immediateCondition’
[10:33:26.418]  - exclude = 
[10:33:26.418]  - resignal = FALSE
[10:33:26.418]  - Number of conditions: 1
[10:33:26.418] signalConditions() ... done
<MyError: boom>
[10:33:26.418] result() for ClusterFuture ...
[10:33:26.418] - result already collected: FutureResult
[10:33:26.418] result() for ClusterFuture ... done
[10:33:26.419] result() for ClusterFuture ...
[10:33:26.419] - result already collected: FutureResult
[10:33:26.419] result() for ClusterFuture ... done
[10:33:26.419] signalConditions() ...
[10:33:26.419]  - include = ‘immediateCondition’
[10:33:26.419]  - exclude = 
[10:33:26.419]  - resignal = FALSE
[10:33:26.419]  - Number of conditions: 1
[10:33:26.419] signalConditions() ... done
[10:33:26.419] Future state: ‘finished’
[10:33:26.419] result() for ClusterFuture ...
[10:33:26.420] - result already collected: FutureResult
[10:33:26.420] result() for ClusterFuture ... done
[10:33:26.420] signalConditions() ...
[10:33:26.420]  - include = ‘condition’
[10:33:26.420]  - exclude = ‘immediateCondition’
[10:33:26.420]  - resignal = TRUE
[10:33:26.420]  - Number of conditions: 1
[10:33:26.420]  - Condition #1: ‘MyError’, ‘error’, ‘condition’
[10:33:26.420] signalConditions() ... done
Testing with 2 cores ... DONE
> 
> 
> message("*** multisession() - too large globals ...")
*** multisession() - too large globals ...
> ooptsT <- options(future.globals.maxSize = object.size(1:1014))
> 
> limit <- getOption("future.globals.maxSize")
> cat(sprintf("Max total size of globals: %g bytes\n", limit))
Max total size of globals: 4104 bytes
> 
> for (workers in unique(c(1L, availableCores()))) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   message("Max number of sessions: ", workers)
+ 
+   ## A large object
+   a <- 1:1014
+   yTruth <- sum(a)
+   size <- object.size(a)
+   cat(sprintf("a: %g bytes\n", size))
+   f <- multisession({ sum(a) }, globals = TRUE, workers = workers)
+   print(f)
+   rm(list = "a")
+   v <- value(f)
+   print(v)
+   stopifnot(v == yTruth)
+ 
+ 
+   ## A too large object
+   a <- 1:1015
+   yTruth <- sum(a)
+   size <- object.size(a)
+   cat(sprintf("a: %g bytes\n", size))
+   res <- try(f <- multisession({ sum(a) }, globals = TRUE, workers = workers), silent = TRUE)
+   rm(list = "a")
+   stopifnot(inherits(res, "try-error"))
+ } ## for (workers in ...)
Max number of sessions: 1
a: 4104 bytes
[10:33:26.436] getGlobalsAndPackages() ...
[10:33:26.436] Searching for globals...
[10:33:26.437] - globals found: [3] ‘{’, ‘sum’, ‘a’
[10:33:26.437] Searching for globals ... DONE
[10:33:26.437] Resolving globals: FALSE
[10:33:26.438] The total size of the 1 globals is 4.01 KiB (4104 bytes)
[10:33:26.438] The total size of the 1 globals exported for future expression (‘{; sum(a); }’) is 4.01 KiB.. This exceeds the maximum allowed size of 4.01 KiB (option 'future.globals.maxSize'). There is one global: ‘a’ (4.01 KiB of class ‘numeric’)
[10:33:26.438] - globals: [1] ‘a’
[10:33:26.438] 
[10:33:26.438] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    sum(a)
}
Lazy evaluation: TRUE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 4.01 KiB (integer ‘a’ of 4.01 KiB)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 387602f3-bd1b-4a3f-3d8d-305a236eb3bb
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:33:26.439] Packages needed by the future expression (n = 0): <none>
[10:33:26.439] Packages needed by future strategies (n = 0): <none>
[10:33:26.440] {
[10:33:26.440]     {
[10:33:26.440]         {
[10:33:26.440]             ...future.startTime <- base::Sys.time()
[10:33:26.440]             {
[10:33:26.440]                 {
[10:33:26.440]                   {
[10:33:26.440]                     base::local({
[10:33:26.440]                       has_future <- base::requireNamespace("future", 
[10:33:26.440]                         quietly = TRUE)
[10:33:26.440]                       if (has_future) {
[10:33:26.440]                         ns <- base::getNamespace("future")
[10:33:26.440]                         version <- ns[[".package"]][["version"]]
[10:33:26.440]                         if (is.null(version)) 
[10:33:26.440]                           version <- utils::packageVersion("future")
[10:33:26.440]                       }
[10:33:26.440]                       else {
[10:33:26.440]                         version <- NULL
[10:33:26.440]                       }
[10:33:26.440]                       if (!has_future || version < "1.8.0") {
[10:33:26.440]                         info <- base::c(r_version = base::gsub("R version ", 
[10:33:26.440]                           "", base::R.version$version.string), 
[10:33:26.440]                           platform = base::sprintf("%s (%s-bit)", 
[10:33:26.440]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:26.440]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:26.440]                             "release", "version")], collapse = " "), 
[10:33:26.440]                           hostname = base::Sys.info()[["nodename"]])
[10:33:26.440]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:33:26.440]                           info)
[10:33:26.440]                         info <- base::paste(info, collapse = "; ")
[10:33:26.440]                         if (!has_future) {
[10:33:26.440]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:26.440]                             info)
[10:33:26.440]                         }
[10:33:26.440]                         else {
[10:33:26.440]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:26.440]                             info, version)
[10:33:26.440]                         }
[10:33:26.440]                         base::stop(msg)
[10:33:26.440]                       }
[10:33:26.440]                     })
[10:33:26.440]                   }
[10:33:26.440]                   ...future.strategy.old <- future::plan("list")
[10:33:26.440]                   options(future.plan = NULL)
[10:33:26.440]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:26.440]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:33:26.440]                 }
[10:33:26.440]                 ...future.workdir <- getwd()
[10:33:26.440]             }
[10:33:26.440]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:26.440]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:26.440]         }
[10:33:26.440]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:33:26.440]             future.globals.maxSize = 4104, future.globals.method = NULL, 
[10:33:26.440]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:33:26.440]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:33:26.440]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:26.440]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:26.440]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:26.440]             base::names(...future.oldOptions))
[10:33:26.440]     }
[10:33:26.440]     if (FALSE) {
[10:33:26.440]     }
[10:33:26.440]     else {
[10:33:26.440]         if (TRUE) {
[10:33:26.440]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:26.440]                 open = "w")
[10:33:26.440]         }
[10:33:26.440]         else {
[10:33:26.440]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:26.440]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:26.440]         }
[10:33:26.440]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:26.440]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:26.440]             base::sink(type = "output", split = FALSE)
[10:33:26.440]             base::close(...future.stdout)
[10:33:26.440]         }, add = TRUE)
[10:33:26.440]     }
[10:33:26.440]     ...future.frame <- base::sys.nframe()
[10:33:26.440]     ...future.conditions <- base::list()
[10:33:26.440]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:26.440]     if (FALSE) {
[10:33:26.440]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:26.440]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:26.440]     }
[10:33:26.440]     ...future.result <- base::tryCatch({
[10:33:26.440]         base::withCallingHandlers({
[10:33:26.440]             ...future.value <- base::withVisible(base::local({
[10:33:26.440]                 sum(a)
[10:33:26.440]             }))
[10:33:26.440]             future::FutureResult(value = ...future.value$value, 
[10:33:26.440]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:26.440]                   ...future.rng), globalenv = if (FALSE) 
[10:33:26.440]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:26.440]                     ...future.globalenv.names))
[10:33:26.440]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:26.440]         }, condition = base::local({
[10:33:26.440]             c <- base::c
[10:33:26.440]             inherits <- base::inherits
[10:33:26.440]             invokeRestart <- base::invokeRestart
[10:33:26.440]             length <- base::length
[10:33:26.440]             list <- base::list
[10:33:26.440]             seq.int <- base::seq.int
[10:33:26.440]             signalCondition <- base::signalCondition
[10:33:26.440]             sys.calls <- base::sys.calls
[10:33:26.440]             `[[` <- base::`[[`
[10:33:26.440]             `+` <- base::`+`
[10:33:26.440]             `<<-` <- base::`<<-`
[10:33:26.440]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:26.440]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:26.440]                   3L)]
[10:33:26.440]             }
[10:33:26.440]             function(cond) {
[10:33:26.440]                 is_error <- inherits(cond, "error")
[10:33:26.440]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:26.440]                   NULL)
[10:33:26.440]                 if (is_error) {
[10:33:26.440]                   sessionInformation <- function() {
[10:33:26.440]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:26.440]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:26.440]                       search = base::search(), system = base::Sys.info())
[10:33:26.440]                   }
[10:33:26.440]                   ...future.conditions[[length(...future.conditions) + 
[10:33:26.440]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:26.440]                     cond$call), session = sessionInformation(), 
[10:33:26.440]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:26.440]                   signalCondition(cond)
[10:33:26.440]                 }
[10:33:26.440]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:26.440]                 "immediateCondition"))) {
[10:33:26.440]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:26.440]                   ...future.conditions[[length(...future.conditions) + 
[10:33:26.440]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:26.440]                   if (TRUE && !signal) {
[10:33:26.440]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:26.440]                     {
[10:33:26.440]                       inherits <- base::inherits
[10:33:26.440]                       invokeRestart <- base::invokeRestart
[10:33:26.440]                       is.null <- base::is.null
[10:33:26.440]                       muffled <- FALSE
[10:33:26.440]                       if (inherits(cond, "message")) {
[10:33:26.440]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:26.440]                         if (muffled) 
[10:33:26.440]                           invokeRestart("muffleMessage")
[10:33:26.440]                       }
[10:33:26.440]                       else if (inherits(cond, "warning")) {
[10:33:26.440]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:26.440]                         if (muffled) 
[10:33:26.440]                           invokeRestart("muffleWarning")
[10:33:26.440]                       }
[10:33:26.440]                       else if (inherits(cond, "condition")) {
[10:33:26.440]                         if (!is.null(pattern)) {
[10:33:26.440]                           computeRestarts <- base::computeRestarts
[10:33:26.440]                           grepl <- base::grepl
[10:33:26.440]                           restarts <- computeRestarts(cond)
[10:33:26.440]                           for (restart in restarts) {
[10:33:26.440]                             name <- restart$name
[10:33:26.440]                             if (is.null(name)) 
[10:33:26.440]                               next
[10:33:26.440]                             if (!grepl(pattern, name)) 
[10:33:26.440]                               next
[10:33:26.440]                             invokeRestart(restart)
[10:33:26.440]                             muffled <- TRUE
[10:33:26.440]                             break
[10:33:26.440]                           }
[10:33:26.440]                         }
[10:33:26.440]                       }
[10:33:26.440]                       invisible(muffled)
[10:33:26.440]                     }
[10:33:26.440]                     muffleCondition(cond, pattern = "^muffle")
[10:33:26.440]                   }
[10:33:26.440]                 }
[10:33:26.440]                 else {
[10:33:26.440]                   if (TRUE) {
[10:33:26.440]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:26.440]                     {
[10:33:26.440]                       inherits <- base::inherits
[10:33:26.440]                       invokeRestart <- base::invokeRestart
[10:33:26.440]                       is.null <- base::is.null
[10:33:26.440]                       muffled <- FALSE
[10:33:26.440]                       if (inherits(cond, "message")) {
[10:33:26.440]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:26.440]                         if (muffled) 
[10:33:26.440]                           invokeRestart("muffleMessage")
[10:33:26.440]                       }
[10:33:26.440]                       else if (inherits(cond, "warning")) {
[10:33:26.440]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:26.440]                         if (muffled) 
[10:33:26.440]                           invokeRestart("muffleWarning")
[10:33:26.440]                       }
[10:33:26.440]                       else if (inherits(cond, "condition")) {
[10:33:26.440]                         if (!is.null(pattern)) {
[10:33:26.440]                           computeRestarts <- base::computeRestarts
[10:33:26.440]                           grepl <- base::grepl
[10:33:26.440]                           restarts <- computeRestarts(cond)
[10:33:26.440]                           for (restart in restarts) {
[10:33:26.440]                             name <- restart$name
[10:33:26.440]                             if (is.null(name)) 
[10:33:26.440]                               next
[10:33:26.440]                             if (!grepl(pattern, name)) 
[10:33:26.440]                               next
[10:33:26.440]                             invokeRestart(restart)
[10:33:26.440]                             muffled <- TRUE
[10:33:26.440]                             break
[10:33:26.440]                           }
[10:33:26.440]                         }
[10:33:26.440]                       }
[10:33:26.440]                       invisible(muffled)
[10:33:26.440]                     }
[10:33:26.440]                     muffleCondition(cond, pattern = "^muffle")
[10:33:26.440]                   }
[10:33:26.440]                 }
[10:33:26.440]             }
[10:33:26.440]         }))
[10:33:26.440]     }, error = function(ex) {
[10:33:26.440]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:26.440]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:26.440]                 ...future.rng), started = ...future.startTime, 
[10:33:26.440]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:26.440]             version = "1.8"), class = "FutureResult")
[10:33:26.440]     }, finally = {
[10:33:26.440]         if (!identical(...future.workdir, getwd())) 
[10:33:26.440]             setwd(...future.workdir)
[10:33:26.440]         {
[10:33:26.440]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:26.440]                 ...future.oldOptions$nwarnings <- NULL
[10:33:26.440]             }
[10:33:26.440]             base::options(...future.oldOptions)
[10:33:26.440]             if (.Platform$OS.type == "windows") {
[10:33:26.440]                 old_names <- names(...future.oldEnvVars)
[10:33:26.440]                 envs <- base::Sys.getenv()
[10:33:26.440]                 names <- names(envs)
[10:33:26.440]                 common <- intersect(names, old_names)
[10:33:26.440]                 added <- setdiff(names, old_names)
[10:33:26.440]                 removed <- setdiff(old_names, names)
[10:33:26.440]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:26.440]                   envs[common]]
[10:33:26.440]                 NAMES <- toupper(changed)
[10:33:26.440]                 args <- list()
[10:33:26.440]                 for (kk in seq_along(NAMES)) {
[10:33:26.440]                   name <- changed[[kk]]
[10:33:26.440]                   NAME <- NAMES[[kk]]
[10:33:26.440]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:26.440]                     next
[10:33:26.440]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:26.440]                 }
[10:33:26.440]                 NAMES <- toupper(added)
[10:33:26.440]                 for (kk in seq_along(NAMES)) {
[10:33:26.440]                   name <- added[[kk]]
[10:33:26.440]                   NAME <- NAMES[[kk]]
[10:33:26.440]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:26.440]                     next
[10:33:26.440]                   args[[name]] <- ""
[10:33:26.440]                 }
[10:33:26.440]                 NAMES <- toupper(removed)
[10:33:26.440]                 for (kk in seq_along(NAMES)) {
[10:33:26.440]                   name <- removed[[kk]]
[10:33:26.440]                   NAME <- NAMES[[kk]]
[10:33:26.440]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:26.440]                     next
[10:33:26.440]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:26.440]                 }
[10:33:26.440]                 if (length(args) > 0) 
[10:33:26.440]                   base::do.call(base::Sys.setenv, args = args)
[10:33:26.440]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:26.440]             }
[10:33:26.440]             else {
[10:33:26.440]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:26.440]             }
[10:33:26.440]             {
[10:33:26.440]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:26.440]                   0L) {
[10:33:26.440]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:26.440]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:26.440]                   base::options(opts)
[10:33:26.440]                 }
[10:33:26.440]                 {
[10:33:26.440]                   {
[10:33:26.440]                     NULL
[10:33:26.440]                     RNGkind("Mersenne-Twister")
[10:33:26.440]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:33:26.440]                       inherits = FALSE)
[10:33:26.440]                   }
[10:33:26.440]                   options(future.plan = NULL)
[10:33:26.440]                   if (is.na(NA_character_)) 
[10:33:26.440]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:26.440]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:26.440]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:26.440]                     .init = FALSE)
[10:33:26.440]                 }
[10:33:26.440]             }
[10:33:26.440]         }
[10:33:26.440]     })
[10:33:26.440]     if (TRUE) {
[10:33:26.440]         base::sink(type = "output", split = FALSE)
[10:33:26.440]         if (TRUE) {
[10:33:26.440]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:26.440]         }
[10:33:26.440]         else {
[10:33:26.440]             ...future.result["stdout"] <- base::list(NULL)
[10:33:26.440]         }
[10:33:26.440]         base::close(...future.stdout)
[10:33:26.440]         ...future.stdout <- NULL
[10:33:26.440]     }
[10:33:26.440]     ...future.result$conditions <- ...future.conditions
[10:33:26.440]     ...future.result$finished <- base::Sys.time()
[10:33:26.440]     ...future.result
[10:33:26.440] }
[10:33:26.441] assign_globals() ...
[10:33:26.441] List of 1
[10:33:26.441]  $ a: int [1:1014] 1 2 3 4 5 6 7 8 9 10 ...
[10:33:26.441]  - attr(*, "where")=List of 1
[10:33:26.441]   ..$ a:<environment: R_EmptyEnv> 
[10:33:26.441]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:33:26.441]  - attr(*, "resolved")= logi FALSE
[10:33:26.441]  - attr(*, "total_size")= num 4104
[10:33:26.444] - copied ‘a’ to environment
[10:33:26.444] assign_globals() ... done
[10:33:26.444] plan(): Setting new future strategy stack:
[10:33:26.444] List of future strategies:
[10:33:26.444] 1. sequential:
[10:33:26.444]    - args: function (..., envir = parent.frame())
[10:33:26.444]    - tweaked: FALSE
[10:33:26.444]    - call: NULL
[10:33:26.444] plan(): nbrOfWorkers() = 1
[10:33:26.445] plan(): Setting new future strategy stack:
[10:33:26.445] List of future strategies:
[10:33:26.445] 1. sequential:
[10:33:26.445]    - args: function (..., envir = parent.frame())
[10:33:26.445]    - tweaked: FALSE
[10:33:26.445]    - call: future::plan("sequential")
[10:33:26.446] plan(): nbrOfWorkers() = 1
[10:33:26.446] SequentialFuture started (and completed)
[1] 514605
a: 4112 bytes
[10:33:26.446] getGlobalsAndPackages() ...
[10:33:26.446] Searching for globals...
[10:33:26.447] - globals found: [3] ‘{’, ‘sum’, ‘a’
[10:33:26.447] Searching for globals ... DONE
[10:33:26.447] Resolving globals: FALSE
[10:33:26.447] The total size of the 1 globals is 4.02 KiB (4112 bytes)
[10:33:26.448] The total size of the 1 globals exported for future expression (‘{; sum(a); }’) is 4.02 KiB.. This exceeds the maximum allowed size of 4.01 KiB (option 'future.globals.maxSize'). There is one global: ‘a’ (4.02 KiB of class ‘numeric’)
Max number of sessions: 2
a: 4104 bytes
[10:33:26.448] getGlobalsAndPackages() ...
[10:33:26.448] Searching for globals...
[10:33:26.449] - globals found: [3] ‘{’, ‘sum’, ‘a’
[10:33:26.449] Searching for globals ... DONE
[10:33:26.449] Resolving globals: FALSE
[10:33:26.450] The total size of the 1 globals is 4.01 KiB (4104 bytes)
[10:33:26.450] The total size of the 1 globals exported for future expression (‘{; sum(a); }’) is 4.01 KiB.. This exceeds the maximum allowed size of 4.01 KiB (option 'future.globals.maxSize'). There is one global: ‘a’ (4.01 KiB of class ‘numeric’)
[10:33:26.450] - globals: [1] ‘a’
[10:33:26.450] 
[10:33:26.450] getGlobalsAndPackages() ... DONE
[10:33:26.461] Packages needed by the future expression (n = 0): <none>
[10:33:26.461] Packages needed by future strategies (n = 0): <none>
[10:33:26.461] {
[10:33:26.461]     {
[10:33:26.461]         {
[10:33:26.461]             ...future.startTime <- base::Sys.time()
[10:33:26.461]             {
[10:33:26.461]                 {
[10:33:26.461]                   {
[10:33:26.461]                     {
[10:33:26.461]                       base::local({
[10:33:26.461]                         has_future <- base::requireNamespace("future", 
[10:33:26.461]                           quietly = TRUE)
[10:33:26.461]                         if (has_future) {
[10:33:26.461]                           ns <- base::getNamespace("future")
[10:33:26.461]                           version <- ns[[".package"]][["version"]]
[10:33:26.461]                           if (is.null(version)) 
[10:33:26.461]                             version <- utils::packageVersion("future")
[10:33:26.461]                         }
[10:33:26.461]                         else {
[10:33:26.461]                           version <- NULL
[10:33:26.461]                         }
[10:33:26.461]                         if (!has_future || version < "1.8.0") {
[10:33:26.461]                           info <- base::c(r_version = base::gsub("R version ", 
[10:33:26.461]                             "", base::R.version$version.string), 
[10:33:26.461]                             platform = base::sprintf("%s (%s-bit)", 
[10:33:26.461]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:26.461]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:26.461]                               "release", "version")], collapse = " "), 
[10:33:26.461]                             hostname = base::Sys.info()[["nodename"]])
[10:33:26.461]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:33:26.461]                             info)
[10:33:26.461]                           info <- base::paste(info, collapse = "; ")
[10:33:26.461]                           if (!has_future) {
[10:33:26.461]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:26.461]                               info)
[10:33:26.461]                           }
[10:33:26.461]                           else {
[10:33:26.461]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:26.461]                               info, version)
[10:33:26.461]                           }
[10:33:26.461]                           base::stop(msg)
[10:33:26.461]                         }
[10:33:26.461]                       })
[10:33:26.461]                     }
[10:33:26.461]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:33:26.461]                     base::options(mc.cores = 1L)
[10:33:26.461]                   }
[10:33:26.461]                   ...future.strategy.old <- future::plan("list")
[10:33:26.461]                   options(future.plan = NULL)
[10:33:26.461]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:26.461]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:33:26.461]                 }
[10:33:26.461]                 ...future.workdir <- getwd()
[10:33:26.461]             }
[10:33:26.461]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:26.461]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:26.461]         }
[10:33:26.461]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:33:26.461]             future.globals.maxSize = 4104, future.globals.method = NULL, 
[10:33:26.461]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:33:26.461]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:33:26.461]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:26.461]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:26.461]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:26.461]             base::names(...future.oldOptions))
[10:33:26.461]     }
[10:33:26.461]     if (FALSE) {
[10:33:26.461]     }
[10:33:26.461]     else {
[10:33:26.461]         if (TRUE) {
[10:33:26.461]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:26.461]                 open = "w")
[10:33:26.461]         }
[10:33:26.461]         else {
[10:33:26.461]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:26.461]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:26.461]         }
[10:33:26.461]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:26.461]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:26.461]             base::sink(type = "output", split = FALSE)
[10:33:26.461]             base::close(...future.stdout)
[10:33:26.461]         }, add = TRUE)
[10:33:26.461]     }
[10:33:26.461]     ...future.frame <- base::sys.nframe()
[10:33:26.461]     ...future.conditions <- base::list()
[10:33:26.461]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:26.461]     if (FALSE) {
[10:33:26.461]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:26.461]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:26.461]     }
[10:33:26.461]     ...future.result <- base::tryCatch({
[10:33:26.461]         base::withCallingHandlers({
[10:33:26.461]             ...future.value <- base::withVisible(base::local({
[10:33:26.461]                 ...future.makeSendCondition <- base::local({
[10:33:26.461]                   sendCondition <- NULL
[10:33:26.461]                   function(frame = 1L) {
[10:33:26.461]                     if (is.function(sendCondition)) 
[10:33:26.461]                       return(sendCondition)
[10:33:26.461]                     ns <- getNamespace("parallel")
[10:33:26.461]                     if (exists("sendData", mode = "function", 
[10:33:26.461]                       envir = ns)) {
[10:33:26.461]                       parallel_sendData <- get("sendData", mode = "function", 
[10:33:26.461]                         envir = ns)
[10:33:26.461]                       envir <- sys.frame(frame)
[10:33:26.461]                       master <- NULL
[10:33:26.461]                       while (!identical(envir, .GlobalEnv) && 
[10:33:26.461]                         !identical(envir, emptyenv())) {
[10:33:26.461]                         if (exists("master", mode = "list", envir = envir, 
[10:33:26.461]                           inherits = FALSE)) {
[10:33:26.461]                           master <- get("master", mode = "list", 
[10:33:26.461]                             envir = envir, inherits = FALSE)
[10:33:26.461]                           if (inherits(master, c("SOCKnode", 
[10:33:26.461]                             "SOCK0node"))) {
[10:33:26.461]                             sendCondition <<- function(cond) {
[10:33:26.461]                               data <- list(type = "VALUE", value = cond, 
[10:33:26.461]                                 success = TRUE)
[10:33:26.461]                               parallel_sendData(master, data)
[10:33:26.461]                             }
[10:33:26.461]                             return(sendCondition)
[10:33:26.461]                           }
[10:33:26.461]                         }
[10:33:26.461]                         frame <- frame + 1L
[10:33:26.461]                         envir <- sys.frame(frame)
[10:33:26.461]                       }
[10:33:26.461]                     }
[10:33:26.461]                     sendCondition <<- function(cond) NULL
[10:33:26.461]                   }
[10:33:26.461]                 })
[10:33:26.461]                 withCallingHandlers({
[10:33:26.461]                   {
[10:33:26.461]                     sum(a)
[10:33:26.461]                   }
[10:33:26.461]                 }, immediateCondition = function(cond) {
[10:33:26.461]                   sendCondition <- ...future.makeSendCondition()
[10:33:26.461]                   sendCondition(cond)
[10:33:26.461]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:26.461]                   {
[10:33:26.461]                     inherits <- base::inherits
[10:33:26.461]                     invokeRestart <- base::invokeRestart
[10:33:26.461]                     is.null <- base::is.null
[10:33:26.461]                     muffled <- FALSE
[10:33:26.461]                     if (inherits(cond, "message")) {
[10:33:26.461]                       muffled <- grepl(pattern, "muffleMessage")
[10:33:26.461]                       if (muffled) 
[10:33:26.461]                         invokeRestart("muffleMessage")
[10:33:26.461]                     }
[10:33:26.461]                     else if (inherits(cond, "warning")) {
[10:33:26.461]                       muffled <- grepl(pattern, "muffleWarning")
[10:33:26.461]                       if (muffled) 
[10:33:26.461]                         invokeRestart("muffleWarning")
[10:33:26.461]                     }
[10:33:26.461]                     else if (inherits(cond, "condition")) {
[10:33:26.461]                       if (!is.null(pattern)) {
[10:33:26.461]                         computeRestarts <- base::computeRestarts
[10:33:26.461]                         grepl <- base::grepl
[10:33:26.461]                         restarts <- computeRestarts(cond)
[10:33:26.461]                         for (restart in restarts) {
[10:33:26.461]                           name <- restart$name
[10:33:26.461]                           if (is.null(name)) 
[10:33:26.461]                             next
[10:33:26.461]                           if (!grepl(pattern, name)) 
[10:33:26.461]                             next
[10:33:26.461]                           invokeRestart(restart)
[10:33:26.461]                           muffled <- TRUE
[10:33:26.461]                           break
[10:33:26.461]                         }
[10:33:26.461]                       }
[10:33:26.461]                     }
[10:33:26.461]                     invisible(muffled)
[10:33:26.461]                   }
[10:33:26.461]                   muffleCondition(cond)
[10:33:26.461]                 })
[10:33:26.461]             }))
[10:33:26.461]             future::FutureResult(value = ...future.value$value, 
[10:33:26.461]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:26.461]                   ...future.rng), globalenv = if (FALSE) 
[10:33:26.461]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:26.461]                     ...future.globalenv.names))
[10:33:26.461]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:26.461]         }, condition = base::local({
[10:33:26.461]             c <- base::c
[10:33:26.461]             inherits <- base::inherits
[10:33:26.461]             invokeRestart <- base::invokeRestart
[10:33:26.461]             length <- base::length
[10:33:26.461]             list <- base::list
[10:33:26.461]             seq.int <- base::seq.int
[10:33:26.461]             signalCondition <- base::signalCondition
[10:33:26.461]             sys.calls <- base::sys.calls
[10:33:26.461]             `[[` <- base::`[[`
[10:33:26.461]             `+` <- base::`+`
[10:33:26.461]             `<<-` <- base::`<<-`
[10:33:26.461]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:26.461]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:26.461]                   3L)]
[10:33:26.461]             }
[10:33:26.461]             function(cond) {
[10:33:26.461]                 is_error <- inherits(cond, "error")
[10:33:26.461]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:26.461]                   NULL)
[10:33:26.461]                 if (is_error) {
[10:33:26.461]                   sessionInformation <- function() {
[10:33:26.461]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:26.461]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:26.461]                       search = base::search(), system = base::Sys.info())
[10:33:26.461]                   }
[10:33:26.461]                   ...future.conditions[[length(...future.conditions) + 
[10:33:26.461]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:26.461]                     cond$call), session = sessionInformation(), 
[10:33:26.461]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:26.461]                   signalCondition(cond)
[10:33:26.461]                 }
[10:33:26.461]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:26.461]                 "immediateCondition"))) {
[10:33:26.461]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:26.461]                   ...future.conditions[[length(...future.conditions) + 
[10:33:26.461]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:26.461]                   if (TRUE && !signal) {
[10:33:26.461]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:26.461]                     {
[10:33:26.461]                       inherits <- base::inherits
[10:33:26.461]                       invokeRestart <- base::invokeRestart
[10:33:26.461]                       is.null <- base::is.null
[10:33:26.461]                       muffled <- FALSE
[10:33:26.461]                       if (inherits(cond, "message")) {
[10:33:26.461]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:26.461]                         if (muffled) 
[10:33:26.461]                           invokeRestart("muffleMessage")
[10:33:26.461]                       }
[10:33:26.461]                       else if (inherits(cond, "warning")) {
[10:33:26.461]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:26.461]                         if (muffled) 
[10:33:26.461]                           invokeRestart("muffleWarning")
[10:33:26.461]                       }
[10:33:26.461]                       else if (inherits(cond, "condition")) {
[10:33:26.461]                         if (!is.null(pattern)) {
[10:33:26.461]                           computeRestarts <- base::computeRestarts
[10:33:26.461]                           grepl <- base::grepl
[10:33:26.461]                           restarts <- computeRestarts(cond)
[10:33:26.461]                           for (restart in restarts) {
[10:33:26.461]                             name <- restart$name
[10:33:26.461]                             if (is.null(name)) 
[10:33:26.461]                               next
[10:33:26.461]                             if (!grepl(pattern, name)) 
[10:33:26.461]                               next
[10:33:26.461]                             invokeRestart(restart)
[10:33:26.461]                             muffled <- TRUE
[10:33:26.461]                             break
[10:33:26.461]                           }
[10:33:26.461]                         }
[10:33:26.461]                       }
[10:33:26.461]                       invisible(muffled)
[10:33:26.461]                     }
[10:33:26.461]                     muffleCondition(cond, pattern = "^muffle")
[10:33:26.461]                   }
[10:33:26.461]                 }
[10:33:26.461]                 else {
[10:33:26.461]                   if (TRUE) {
[10:33:26.461]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:26.461]                     {
[10:33:26.461]                       inherits <- base::inherits
[10:33:26.461]                       invokeRestart <- base::invokeRestart
[10:33:26.461]                       is.null <- base::is.null
[10:33:26.461]                       muffled <- FALSE
[10:33:26.461]                       if (inherits(cond, "message")) {
[10:33:26.461]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:26.461]                         if (muffled) 
[10:33:26.461]                           invokeRestart("muffleMessage")
[10:33:26.461]                       }
[10:33:26.461]                       else if (inherits(cond, "warning")) {
[10:33:26.461]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:26.461]                         if (muffled) 
[10:33:26.461]                           invokeRestart("muffleWarning")
[10:33:26.461]                       }
[10:33:26.461]                       else if (inherits(cond, "condition")) {
[10:33:26.461]                         if (!is.null(pattern)) {
[10:33:26.461]                           computeRestarts <- base::computeRestarts
[10:33:26.461]                           grepl <- base::grepl
[10:33:26.461]                           restarts <- computeRestarts(cond)
[10:33:26.461]                           for (restart in restarts) {
[10:33:26.461]                             name <- restart$name
[10:33:26.461]                             if (is.null(name)) 
[10:33:26.461]                               next
[10:33:26.461]                             if (!grepl(pattern, name)) 
[10:33:26.461]                               next
[10:33:26.461]                             invokeRestart(restart)
[10:33:26.461]                             muffled <- TRUE
[10:33:26.461]                             break
[10:33:26.461]                           }
[10:33:26.461]                         }
[10:33:26.461]                       }
[10:33:26.461]                       invisible(muffled)
[10:33:26.461]                     }
[10:33:26.461]                     muffleCondition(cond, pattern = "^muffle")
[10:33:26.461]                   }
[10:33:26.461]                 }
[10:33:26.461]             }
[10:33:26.461]         }))
[10:33:26.461]     }, error = function(ex) {
[10:33:26.461]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:26.461]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:26.461]                 ...future.rng), started = ...future.startTime, 
[10:33:26.461]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:26.461]             version = "1.8"), class = "FutureResult")
[10:33:26.461]     }, finally = {
[10:33:26.461]         if (!identical(...future.workdir, getwd())) 
[10:33:26.461]             setwd(...future.workdir)
[10:33:26.461]         {
[10:33:26.461]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:26.461]                 ...future.oldOptions$nwarnings <- NULL
[10:33:26.461]             }
[10:33:26.461]             base::options(...future.oldOptions)
[10:33:26.461]             if (.Platform$OS.type == "windows") {
[10:33:26.461]                 old_names <- names(...future.oldEnvVars)
[10:33:26.461]                 envs <- base::Sys.getenv()
[10:33:26.461]                 names <- names(envs)
[10:33:26.461]                 common <- intersect(names, old_names)
[10:33:26.461]                 added <- setdiff(names, old_names)
[10:33:26.461]                 removed <- setdiff(old_names, names)
[10:33:26.461]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:26.461]                   envs[common]]
[10:33:26.461]                 NAMES <- toupper(changed)
[10:33:26.461]                 args <- list()
[10:33:26.461]                 for (kk in seq_along(NAMES)) {
[10:33:26.461]                   name <- changed[[kk]]
[10:33:26.461]                   NAME <- NAMES[[kk]]
[10:33:26.461]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:26.461]                     next
[10:33:26.461]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:26.461]                 }
[10:33:26.461]                 NAMES <- toupper(added)
[10:33:26.461]                 for (kk in seq_along(NAMES)) {
[10:33:26.461]                   name <- added[[kk]]
[10:33:26.461]                   NAME <- NAMES[[kk]]
[10:33:26.461]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:26.461]                     next
[10:33:26.461]                   args[[name]] <- ""
[10:33:26.461]                 }
[10:33:26.461]                 NAMES <- toupper(removed)
[10:33:26.461]                 for (kk in seq_along(NAMES)) {
[10:33:26.461]                   name <- removed[[kk]]
[10:33:26.461]                   NAME <- NAMES[[kk]]
[10:33:26.461]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:26.461]                     next
[10:33:26.461]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:26.461]                 }
[10:33:26.461]                 if (length(args) > 0) 
[10:33:26.461]                   base::do.call(base::Sys.setenv, args = args)
[10:33:26.461]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:26.461]             }
[10:33:26.461]             else {
[10:33:26.461]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:26.461]             }
[10:33:26.461]             {
[10:33:26.461]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:26.461]                   0L) {
[10:33:26.461]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:26.461]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:26.461]                   base::options(opts)
[10:33:26.461]                 }
[10:33:26.461]                 {
[10:33:26.461]                   {
[10:33:26.461]                     base::options(mc.cores = ...future.mc.cores.old)
[10:33:26.461]                     NULL
[10:33:26.461]                   }
[10:33:26.461]                   options(future.plan = NULL)
[10:33:26.461]                   if (is.na(NA_character_)) 
[10:33:26.461]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:26.461]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:26.461]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:26.461]                     .init = FALSE)
[10:33:26.461]                 }
[10:33:26.461]             }
[10:33:26.461]         }
[10:33:26.461]     })
[10:33:26.461]     if (TRUE) {
[10:33:26.461]         base::sink(type = "output", split = FALSE)
[10:33:26.461]         if (TRUE) {
[10:33:26.461]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:26.461]         }
[10:33:26.461]         else {
[10:33:26.461]             ...future.result["stdout"] <- base::list(NULL)
[10:33:26.461]         }
[10:33:26.461]         base::close(...future.stdout)
[10:33:26.461]         ...future.stdout <- NULL
[10:33:26.461]     }
[10:33:26.461]     ...future.result$conditions <- ...future.conditions
[10:33:26.461]     ...future.result$finished <- base::Sys.time()
[10:33:26.461]     ...future.result
[10:33:26.461] }
[10:33:26.464] Exporting 1 global objects (4.01 KiB) to cluster node #1 ...
[10:33:26.464] Exporting ‘a’ (4.01 KiB) to cluster node #1 ...
[10:33:26.464] Exporting ‘a’ (4.01 KiB) to cluster node #1 ... DONE
[10:33:26.464] Exporting 1 global objects (4.01 KiB) to cluster node #1 ... DONE
[10:33:26.465] MultisessionFuture started
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    sum(a)
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 4.01 KiB (integer ‘a’ of 4.01 KiB)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:33:26.466] receiveMessageFromWorker() for ClusterFuture ...
[10:33:26.467] - Validating connection of MultisessionFuture
[10:33:26.467] - received message: FutureResult
[10:33:26.467] - Received FutureResult
[10:33:26.467] - Erased future from FutureRegistry
[10:33:26.467] result() for ClusterFuture ...
[10:33:26.467] - result already collected: FutureResult
[10:33:26.467] result() for ClusterFuture ... done
[10:33:26.467] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 387602f3-bd1b-4a3f-3d8d-305a236eb3bb
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:33:26.468] result() for ClusterFuture ...
[10:33:26.468] - result already collected: FutureResult
[10:33:26.468] result() for ClusterFuture ... done
[10:33:26.468] result() for ClusterFuture ...
[10:33:26.468] - result already collected: FutureResult
[10:33:26.468] result() for ClusterFuture ... done
[1] 514605
a: 4112 bytes
[10:33:26.468] getGlobalsAndPackages() ...
[10:33:26.468] Searching for globals...
[10:33:26.469] - globals found: [3] ‘{’, ‘sum’, ‘a’
[10:33:26.469] Searching for globals ... DONE
[10:33:26.469] Resolving globals: FALSE
[10:33:26.470] The total size of the 1 globals is 4.02 KiB (4112 bytes)
[10:33:26.470] The total size of the 1 globals exported for future expression (‘{; sum(a); }’) is 4.02 KiB.. This exceeds the maximum allowed size of 4.01 KiB (option 'future.globals.maxSize'). There is one global: ‘a’ (4.02 KiB of class ‘numeric’)
> 
> ## Undo options changed in this test
> options(ooptsT)
> 
> message("*** multisession() - too large globals ... DONE")
*** multisession() - too large globals ... DONE
> 
> message("*** multisession(..., workers = 1L) ...")
*** multisession(..., workers = 1L) ...
> 
> a <- 2
> b <- 3
> yTruth <- a * b
> 
> f <- multisession({ a * b }, globals = TRUE, workers = 1L)
[10:33:26.471] getGlobalsAndPackages() ...
[10:33:26.471] Searching for globals...
[10:33:26.471] - globals found: [4] ‘{’, ‘*’, ‘a’, ‘b’
[10:33:26.472] Searching for globals ... DONE
[10:33:26.472] Resolving globals: FALSE
[10:33:26.472] The total size of the 2 globals is 112 bytes (112 bytes)
[10:33:26.472] The total size of the 2 globals exported for future expression (‘{; a * b; }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘a’ (56 bytes of class ‘numeric’) and ‘b’ (56 bytes of class ‘numeric’)
[10:33:26.472] - globals: [2] ‘a’, ‘b’
[10:33:26.473] 
[10:33:26.473] getGlobalsAndPackages() ... DONE
> rm(list = c("a", "b"))
> 
> v <- value(f)
[10:33:26.473] Packages needed by the future expression (n = 0): <none>
[10:33:26.473] Packages needed by future strategies (n = 0): <none>
[10:33:26.474] {
[10:33:26.474]     {
[10:33:26.474]         {
[10:33:26.474]             ...future.startTime <- base::Sys.time()
[10:33:26.474]             {
[10:33:26.474]                 {
[10:33:26.474]                   {
[10:33:26.474]                     base::local({
[10:33:26.474]                       has_future <- base::requireNamespace("future", 
[10:33:26.474]                         quietly = TRUE)
[10:33:26.474]                       if (has_future) {
[10:33:26.474]                         ns <- base::getNamespace("future")
[10:33:26.474]                         version <- ns[[".package"]][["version"]]
[10:33:26.474]                         if (is.null(version)) 
[10:33:26.474]                           version <- utils::packageVersion("future")
[10:33:26.474]                       }
[10:33:26.474]                       else {
[10:33:26.474]                         version <- NULL
[10:33:26.474]                       }
[10:33:26.474]                       if (!has_future || version < "1.8.0") {
[10:33:26.474]                         info <- base::c(r_version = base::gsub("R version ", 
[10:33:26.474]                           "", base::R.version$version.string), 
[10:33:26.474]                           platform = base::sprintf("%s (%s-bit)", 
[10:33:26.474]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:26.474]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:26.474]                             "release", "version")], collapse = " "), 
[10:33:26.474]                           hostname = base::Sys.info()[["nodename"]])
[10:33:26.474]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:33:26.474]                           info)
[10:33:26.474]                         info <- base::paste(info, collapse = "; ")
[10:33:26.474]                         if (!has_future) {
[10:33:26.474]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:26.474]                             info)
[10:33:26.474]                         }
[10:33:26.474]                         else {
[10:33:26.474]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:26.474]                             info, version)
[10:33:26.474]                         }
[10:33:26.474]                         base::stop(msg)
[10:33:26.474]                       }
[10:33:26.474]                     })
[10:33:26.474]                   }
[10:33:26.474]                   ...future.strategy.old <- future::plan("list")
[10:33:26.474]                   options(future.plan = NULL)
[10:33:26.474]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:26.474]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:33:26.474]                 }
[10:33:26.474]                 ...future.workdir <- getwd()
[10:33:26.474]             }
[10:33:26.474]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:26.474]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:26.474]         }
[10:33:26.474]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:33:26.474]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:26.474]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:33:26.474]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:33:26.474]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:26.474]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:26.474]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:26.474]             base::names(...future.oldOptions))
[10:33:26.474]     }
[10:33:26.474]     if (FALSE) {
[10:33:26.474]     }
[10:33:26.474]     else {
[10:33:26.474]         if (TRUE) {
[10:33:26.474]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:26.474]                 open = "w")
[10:33:26.474]         }
[10:33:26.474]         else {
[10:33:26.474]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:26.474]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:26.474]         }
[10:33:26.474]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:26.474]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:26.474]             base::sink(type = "output", split = FALSE)
[10:33:26.474]             base::close(...future.stdout)
[10:33:26.474]         }, add = TRUE)
[10:33:26.474]     }
[10:33:26.474]     ...future.frame <- base::sys.nframe()
[10:33:26.474]     ...future.conditions <- base::list()
[10:33:26.474]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:26.474]     if (FALSE) {
[10:33:26.474]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:26.474]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:26.474]     }
[10:33:26.474]     ...future.result <- base::tryCatch({
[10:33:26.474]         base::withCallingHandlers({
[10:33:26.474]             ...future.value <- base::withVisible(base::local({
[10:33:26.474]                 a * b
[10:33:26.474]             }))
[10:33:26.474]             future::FutureResult(value = ...future.value$value, 
[10:33:26.474]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:26.474]                   ...future.rng), globalenv = if (FALSE) 
[10:33:26.474]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:26.474]                     ...future.globalenv.names))
[10:33:26.474]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:26.474]         }, condition = base::local({
[10:33:26.474]             c <- base::c
[10:33:26.474]             inherits <- base::inherits
[10:33:26.474]             invokeRestart <- base::invokeRestart
[10:33:26.474]             length <- base::length
[10:33:26.474]             list <- base::list
[10:33:26.474]             seq.int <- base::seq.int
[10:33:26.474]             signalCondition <- base::signalCondition
[10:33:26.474]             sys.calls <- base::sys.calls
[10:33:26.474]             `[[` <- base::`[[`
[10:33:26.474]             `+` <- base::`+`
[10:33:26.474]             `<<-` <- base::`<<-`
[10:33:26.474]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:26.474]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:26.474]                   3L)]
[10:33:26.474]             }
[10:33:26.474]             function(cond) {
[10:33:26.474]                 is_error <- inherits(cond, "error")
[10:33:26.474]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:26.474]                   NULL)
[10:33:26.474]                 if (is_error) {
[10:33:26.474]                   sessionInformation <- function() {
[10:33:26.474]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:26.474]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:26.474]                       search = base::search(), system = base::Sys.info())
[10:33:26.474]                   }
[10:33:26.474]                   ...future.conditions[[length(...future.conditions) + 
[10:33:26.474]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:26.474]                     cond$call), session = sessionInformation(), 
[10:33:26.474]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:26.474]                   signalCondition(cond)
[10:33:26.474]                 }
[10:33:26.474]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:26.474]                 "immediateCondition"))) {
[10:33:26.474]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:26.474]                   ...future.conditions[[length(...future.conditions) + 
[10:33:26.474]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:26.474]                   if (TRUE && !signal) {
[10:33:26.474]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:26.474]                     {
[10:33:26.474]                       inherits <- base::inherits
[10:33:26.474]                       invokeRestart <- base::invokeRestart
[10:33:26.474]                       is.null <- base::is.null
[10:33:26.474]                       muffled <- FALSE
[10:33:26.474]                       if (inherits(cond, "message")) {
[10:33:26.474]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:26.474]                         if (muffled) 
[10:33:26.474]                           invokeRestart("muffleMessage")
[10:33:26.474]                       }
[10:33:26.474]                       else if (inherits(cond, "warning")) {
[10:33:26.474]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:26.474]                         if (muffled) 
[10:33:26.474]                           invokeRestart("muffleWarning")
[10:33:26.474]                       }
[10:33:26.474]                       else if (inherits(cond, "condition")) {
[10:33:26.474]                         if (!is.null(pattern)) {
[10:33:26.474]                           computeRestarts <- base::computeRestarts
[10:33:26.474]                           grepl <- base::grepl
[10:33:26.474]                           restarts <- computeRestarts(cond)
[10:33:26.474]                           for (restart in restarts) {
[10:33:26.474]                             name <- restart$name
[10:33:26.474]                             if (is.null(name)) 
[10:33:26.474]                               next
[10:33:26.474]                             if (!grepl(pattern, name)) 
[10:33:26.474]                               next
[10:33:26.474]                             invokeRestart(restart)
[10:33:26.474]                             muffled <- TRUE
[10:33:26.474]                             break
[10:33:26.474]                           }
[10:33:26.474]                         }
[10:33:26.474]                       }
[10:33:26.474]                       invisible(muffled)
[10:33:26.474]                     }
[10:33:26.474]                     muffleCondition(cond, pattern = "^muffle")
[10:33:26.474]                   }
[10:33:26.474]                 }
[10:33:26.474]                 else {
[10:33:26.474]                   if (TRUE) {
[10:33:26.474]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:26.474]                     {
[10:33:26.474]                       inherits <- base::inherits
[10:33:26.474]                       invokeRestart <- base::invokeRestart
[10:33:26.474]                       is.null <- base::is.null
[10:33:26.474]                       muffled <- FALSE
[10:33:26.474]                       if (inherits(cond, "message")) {
[10:33:26.474]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:26.474]                         if (muffled) 
[10:33:26.474]                           invokeRestart("muffleMessage")
[10:33:26.474]                       }
[10:33:26.474]                       else if (inherits(cond, "warning")) {
[10:33:26.474]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:26.474]                         if (muffled) 
[10:33:26.474]                           invokeRestart("muffleWarning")
[10:33:26.474]                       }
[10:33:26.474]                       else if (inherits(cond, "condition")) {
[10:33:26.474]                         if (!is.null(pattern)) {
[10:33:26.474]                           computeRestarts <- base::computeRestarts
[10:33:26.474]                           grepl <- base::grepl
[10:33:26.474]                           restarts <- computeRestarts(cond)
[10:33:26.474]                           for (restart in restarts) {
[10:33:26.474]                             name <- restart$name
[10:33:26.474]                             if (is.null(name)) 
[10:33:26.474]                               next
[10:33:26.474]                             if (!grepl(pattern, name)) 
[10:33:26.474]                               next
[10:33:26.474]                             invokeRestart(restart)
[10:33:26.474]                             muffled <- TRUE
[10:33:26.474]                             break
[10:33:26.474]                           }
[10:33:26.474]                         }
[10:33:26.474]                       }
[10:33:26.474]                       invisible(muffled)
[10:33:26.474]                     }
[10:33:26.474]                     muffleCondition(cond, pattern = "^muffle")
[10:33:26.474]                   }
[10:33:26.474]                 }
[10:33:26.474]             }
[10:33:26.474]         }))
[10:33:26.474]     }, error = function(ex) {
[10:33:26.474]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:26.474]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:26.474]                 ...future.rng), started = ...future.startTime, 
[10:33:26.474]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:26.474]             version = "1.8"), class = "FutureResult")
[10:33:26.474]     }, finally = {
[10:33:26.474]         if (!identical(...future.workdir, getwd())) 
[10:33:26.474]             setwd(...future.workdir)
[10:33:26.474]         {
[10:33:26.474]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:26.474]                 ...future.oldOptions$nwarnings <- NULL
[10:33:26.474]             }
[10:33:26.474]             base::options(...future.oldOptions)
[10:33:26.474]             if (.Platform$OS.type == "windows") {
[10:33:26.474]                 old_names <- names(...future.oldEnvVars)
[10:33:26.474]                 envs <- base::Sys.getenv()
[10:33:26.474]                 names <- names(envs)
[10:33:26.474]                 common <- intersect(names, old_names)
[10:33:26.474]                 added <- setdiff(names, old_names)
[10:33:26.474]                 removed <- setdiff(old_names, names)
[10:33:26.474]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:26.474]                   envs[common]]
[10:33:26.474]                 NAMES <- toupper(changed)
[10:33:26.474]                 args <- list()
[10:33:26.474]                 for (kk in seq_along(NAMES)) {
[10:33:26.474]                   name <- changed[[kk]]
[10:33:26.474]                   NAME <- NAMES[[kk]]
[10:33:26.474]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:26.474]                     next
[10:33:26.474]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:26.474]                 }
[10:33:26.474]                 NAMES <- toupper(added)
[10:33:26.474]                 for (kk in seq_along(NAMES)) {
[10:33:26.474]                   name <- added[[kk]]
[10:33:26.474]                   NAME <- NAMES[[kk]]
[10:33:26.474]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:26.474]                     next
[10:33:26.474]                   args[[name]] <- ""
[10:33:26.474]                 }
[10:33:26.474]                 NAMES <- toupper(removed)
[10:33:26.474]                 for (kk in seq_along(NAMES)) {
[10:33:26.474]                   name <- removed[[kk]]
[10:33:26.474]                   NAME <- NAMES[[kk]]
[10:33:26.474]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:26.474]                     next
[10:33:26.474]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:26.474]                 }
[10:33:26.474]                 if (length(args) > 0) 
[10:33:26.474]                   base::do.call(base::Sys.setenv, args = args)
[10:33:26.474]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:26.474]             }
[10:33:26.474]             else {
[10:33:26.474]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:26.474]             }
[10:33:26.474]             {
[10:33:26.474]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:26.474]                   0L) {
[10:33:26.474]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:26.474]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:26.474]                   base::options(opts)
[10:33:26.474]                 }
[10:33:26.474]                 {
[10:33:26.474]                   {
[10:33:26.474]                     NULL
[10:33:26.474]                     RNGkind("Mersenne-Twister")
[10:33:26.474]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:33:26.474]                       inherits = FALSE)
[10:33:26.474]                   }
[10:33:26.474]                   options(future.plan = NULL)
[10:33:26.474]                   if (is.na(NA_character_)) 
[10:33:26.474]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:26.474]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:26.474]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:26.474]                     .init = FALSE)
[10:33:26.474]                 }
[10:33:26.474]             }
[10:33:26.474]         }
[10:33:26.474]     })
[10:33:26.474]     if (TRUE) {
[10:33:26.474]         base::sink(type = "output", split = FALSE)
[10:33:26.474]         if (TRUE) {
[10:33:26.474]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:26.474]         }
[10:33:26.474]         else {
[10:33:26.474]             ...future.result["stdout"] <- base::list(NULL)
[10:33:26.474]         }
[10:33:26.474]         base::close(...future.stdout)
[10:33:26.474]         ...future.stdout <- NULL
[10:33:26.474]     }
[10:33:26.474]     ...future.result$conditions <- ...future.conditions
[10:33:26.474]     ...future.result$finished <- base::Sys.time()
[10:33:26.474]     ...future.result
[10:33:26.474] }
[10:33:26.475] assign_globals() ...
[10:33:26.475] List of 2
[10:33:26.475]  $ a: num 2
[10:33:26.475]  $ b: num 3
[10:33:26.475]  - attr(*, "where")=List of 2
[10:33:26.475]   ..$ a:<environment: R_EmptyEnv> 
[10:33:26.475]   ..$ b:<environment: R_EmptyEnv> 
[10:33:26.475]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:33:26.475]  - attr(*, "resolved")= logi FALSE
[10:33:26.475]  - attr(*, "total_size")= num 112
[10:33:26.479] - copied ‘a’ to environment
[10:33:26.480] - copied ‘b’ to environment
[10:33:26.480] assign_globals() ... done
[10:33:26.480] plan(): Setting new future strategy stack:
[10:33:26.480] List of future strategies:
[10:33:26.480] 1. sequential:
[10:33:26.480]    - args: function (..., envir = parent.frame())
[10:33:26.480]    - tweaked: FALSE
[10:33:26.480]    - call: NULL
[10:33:26.480] plan(): nbrOfWorkers() = 1
[10:33:26.481] plan(): Setting new future strategy stack:
[10:33:26.481] List of future strategies:
[10:33:26.481] 1. sequential:
[10:33:26.481]    - args: function (..., envir = parent.frame())
[10:33:26.481]    - tweaked: FALSE
[10:33:26.481]    - call: future::plan("sequential")
[10:33:26.482] plan(): nbrOfWorkers() = 1
[10:33:26.482] SequentialFuture started (and completed)
> print(v)
[1] 6
> stopifnot(v == yTruth)
> 
> message("*** multisession(..., workers = 1L) ... DONE")
*** multisession(..., workers = 1L) ... DONE
> 
> message("*** multisession(..., gc = TRUE) ...")
*** multisession(..., gc = TRUE) ...
> plan(multisession, workers = 2L)
[10:33:26.483] plan(): Setting new future strategy stack:
[10:33:26.483] List of future strategies:
[10:33:26.483] 1. multisession:
[10:33:26.483]    - args: function (..., workers = 2L, envir = parent.frame())
[10:33:26.483]    - tweaked: TRUE
[10:33:26.483]    - call: plan(multisession, workers = 2L)
[10:33:26.495] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:33:26.495] multisession:
[10:33:26.495] - args: function (..., workers = 2L, envir = parent.frame())
[10:33:26.495] - tweaked: TRUE
[10:33:26.495] - call: plan(multisession, workers = 2L)
[10:33:26.495] getGlobalsAndPackages() ...
[10:33:26.495] Not searching for globals
[10:33:26.496] - globals: [0] <none>
[10:33:26.496] getGlobalsAndPackages() ... DONE
[10:33:26.496] [local output] makeClusterPSOCK() ...
[10:33:26.499] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[10:33:26.500] [local output] Base port: 11314
[10:33:26.500] [local output] Getting setup options for 2 cluster nodes ...
[10:33:26.500] [local output]  - Node 1 of 2 ...
[10:33:26.500] [local output] localMachine=TRUE => revtunnel=FALSE

[10:33:26.501] [local output] Rscript port: 11314

[10:33:26.501] [local output]  - Node 2 of 2 ...
[10:33:26.502] [local output] localMachine=TRUE => revtunnel=FALSE

[10:33:26.502] [local output] Rscript port: 11314

[10:33:26.502] [local output] Getting setup options for 2 cluster nodes ... done
[10:33:26.502] [local output]  - Parallel setup requested for some PSOCK nodes
[10:33:26.503] [local output] Setting up PSOCK nodes in parallel
[10:33:26.503] List of 36
[10:33:26.503]  $ worker          : chr "localhost"
[10:33:26.503]   ..- attr(*, "localhost")= logi TRUE
[10:33:26.503]  $ master          : chr "localhost"
[10:33:26.503]  $ port            : int 11314
[10:33:26.503]  $ connectTimeout  : num 120
[10:33:26.503]  $ timeout         : num 2592000
[10:33:26.503]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[10:33:26.503]  $ homogeneous     : logi TRUE
[10:33:26.503]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[10:33:26.503]  $ rscript_envs    : NULL
[10:33:26.503]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:33:26.503]  $ rscript_startup : NULL
[10:33:26.503]  $ rscript_sh      : chr "sh"
[10:33:26.503]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:33:26.503]  $ methods         : logi TRUE
[10:33:26.503]  $ socketOptions   : chr "no-delay"
[10:33:26.503]  $ useXDR          : logi FALSE
[10:33:26.503]  $ outfile         : chr "/dev/null"
[10:33:26.503]  $ renice          : int NA
[10:33:26.503]  $ rshcmd          : NULL
[10:33:26.503]  $ user            : chr(0) 
[10:33:26.503]  $ revtunnel       : logi FALSE
[10:33:26.503]  $ rshlogfile      : NULL
[10:33:26.503]  $ rshopts         : chr(0) 
[10:33:26.503]  $ rank            : int 1
[10:33:26.503]  $ manual          : logi FALSE
[10:33:26.503]  $ dryrun          : logi FALSE
[10:33:26.503]  $ quiet           : logi FALSE
[10:33:26.503]  $ setup_strategy  : chr "parallel"
[10:33:26.503]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:33:26.503]  $ pidfile         : chr "/tmp/RtmpaAVBkE/worker.rank=1.parallelly.parent=85325.14d4d504e3aa9.pid"
[10:33:26.503]  $ rshcmd_label    : NULL
[10:33:26.503]  $ rsh_call        : NULL
[10:33:26.503]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:33:26.503]  $ localMachine    : logi TRUE
[10:33:26.503]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[10:33:26.503]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[10:33:26.503]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[10:33:26.503]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[10:33:26.503]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[10:33:26.503]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[10:33:26.503]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[10:33:26.503]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[10:33:26.503]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[10:33:26.503]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[10:33:26.503]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[10:33:26.503]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[10:33:26.503]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[10:33:26.503]  $ arguments       :List of 28
[10:33:26.503]   ..$ worker          : chr "localhost"
[10:33:26.503]   ..$ master          : NULL
[10:33:26.503]   ..$ port            : int 11314
[10:33:26.503]   ..$ connectTimeout  : num 120
[10:33:26.503]   ..$ timeout         : num 2592000
[10:33:26.503]   ..$ rscript         : NULL
[10:33:26.503]   ..$ homogeneous     : NULL
[10:33:26.503]   ..$ rscript_args    : NULL
[10:33:26.503]   ..$ rscript_envs    : NULL
[10:33:26.503]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:33:26.503]   ..$ rscript_startup : NULL
[10:33:26.503]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[10:33:26.503]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:33:26.503]   ..$ methods         : logi TRUE
[10:33:26.503]   ..$ socketOptions   : chr "no-delay"
[10:33:26.503]   ..$ useXDR          : logi FALSE
[10:33:26.503]   ..$ outfile         : chr "/dev/null"
[10:33:26.503]   ..$ renice          : int NA
[10:33:26.503]   ..$ rshcmd          : NULL
[10:33:26.503]   ..$ user            : NULL
[10:33:26.503]   ..$ revtunnel       : logi NA
[10:33:26.503]   ..$ rshlogfile      : NULL
[10:33:26.503]   ..$ rshopts         : NULL
[10:33:26.503]   ..$ rank            : int 1
[10:33:26.503]   ..$ manual          : logi FALSE
[10:33:26.503]   ..$ dryrun          : logi FALSE
[10:33:26.503]   ..$ quiet           : logi FALSE
[10:33:26.503]   ..$ setup_strategy  : chr "parallel"
[10:33:26.503]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[10:33:26.519] [local output] System call to launch all workers:
[10:33:26.520] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpaAVBkE/worker.rank=1.parallelly.parent=85325.14d4d504e3aa9.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11314 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[10:33:26.520] [local output] Starting PSOCK main server
[10:33:26.521] [local output] Workers launched
[10:33:26.521] [local output] Waiting for workers to connect back
[10:33:26.521]  - [local output] 0 workers out of 2 ready
[10:33:26.760]  - [local output] 0 workers out of 2 ready
[10:33:26.760]  - [local output] 1 workers out of 2 ready
[10:33:26.772]  - [local output] 1 workers out of 2 ready
[10:33:26.772]  - [local output] 2 workers out of 2 ready
[10:33:26.772] [local output] Launching of workers completed
[10:33:26.772] [local output] Collecting session information from workers
[10:33:26.773] [local output]  - Worker #1 of 2
[10:33:26.773] [local output]  - Worker #2 of 2
[10:33:26.773] [local output] makeClusterPSOCK() ... done
[10:33:26.784] Packages needed by the future expression (n = 0): <none>
[10:33:26.784] Packages needed by future strategies (n = 0): <none>
[10:33:26.785] {
[10:33:26.785]     {
[10:33:26.785]         {
[10:33:26.785]             ...future.startTime <- base::Sys.time()
[10:33:26.785]             {
[10:33:26.785]                 {
[10:33:26.785]                   {
[10:33:26.785]                     {
[10:33:26.785]                       base::local({
[10:33:26.785]                         has_future <- base::requireNamespace("future", 
[10:33:26.785]                           quietly = TRUE)
[10:33:26.785]                         if (has_future) {
[10:33:26.785]                           ns <- base::getNamespace("future")
[10:33:26.785]                           version <- ns[[".package"]][["version"]]
[10:33:26.785]                           if (is.null(version)) 
[10:33:26.785]                             version <- utils::packageVersion("future")
[10:33:26.785]                         }
[10:33:26.785]                         else {
[10:33:26.785]                           version <- NULL
[10:33:26.785]                         }
[10:33:26.785]                         if (!has_future || version < "1.8.0") {
[10:33:26.785]                           info <- base::c(r_version = base::gsub("R version ", 
[10:33:26.785]                             "", base::R.version$version.string), 
[10:33:26.785]                             platform = base::sprintf("%s (%s-bit)", 
[10:33:26.785]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:26.785]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:26.785]                               "release", "version")], collapse = " "), 
[10:33:26.785]                             hostname = base::Sys.info()[["nodename"]])
[10:33:26.785]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:33:26.785]                             info)
[10:33:26.785]                           info <- base::paste(info, collapse = "; ")
[10:33:26.785]                           if (!has_future) {
[10:33:26.785]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:26.785]                               info)
[10:33:26.785]                           }
[10:33:26.785]                           else {
[10:33:26.785]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:26.785]                               info, version)
[10:33:26.785]                           }
[10:33:26.785]                           base::stop(msg)
[10:33:26.785]                         }
[10:33:26.785]                       })
[10:33:26.785]                     }
[10:33:26.785]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:33:26.785]                     base::options(mc.cores = 1L)
[10:33:26.785]                   }
[10:33:26.785]                   ...future.strategy.old <- future::plan("list")
[10:33:26.785]                   options(future.plan = NULL)
[10:33:26.785]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:26.785]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:33:26.785]                 }
[10:33:26.785]                 ...future.workdir <- getwd()
[10:33:26.785]             }
[10:33:26.785]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:26.785]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:26.785]         }
[10:33:26.785]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:33:26.785]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:26.785]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:33:26.785]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:33:26.785]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:26.785]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:26.785]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:26.785]             base::names(...future.oldOptions))
[10:33:26.785]     }
[10:33:26.785]     if (FALSE) {
[10:33:26.785]     }
[10:33:26.785]     else {
[10:33:26.785]         if (TRUE) {
[10:33:26.785]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:26.785]                 open = "w")
[10:33:26.785]         }
[10:33:26.785]         else {
[10:33:26.785]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:26.785]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:26.785]         }
[10:33:26.785]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:26.785]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:26.785]             base::sink(type = "output", split = FALSE)
[10:33:26.785]             base::close(...future.stdout)
[10:33:26.785]         }, add = TRUE)
[10:33:26.785]     }
[10:33:26.785]     ...future.frame <- base::sys.nframe()
[10:33:26.785]     ...future.conditions <- base::list()
[10:33:26.785]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:26.785]     if (FALSE) {
[10:33:26.785]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:26.785]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:26.785]     }
[10:33:26.785]     ...future.result <- base::tryCatch({
[10:33:26.785]         base::withCallingHandlers({
[10:33:26.785]             ...future.value <- base::withVisible(base::local({
[10:33:26.785]                 ...future.makeSendCondition <- base::local({
[10:33:26.785]                   sendCondition <- NULL
[10:33:26.785]                   function(frame = 1L) {
[10:33:26.785]                     if (is.function(sendCondition)) 
[10:33:26.785]                       return(sendCondition)
[10:33:26.785]                     ns <- getNamespace("parallel")
[10:33:26.785]                     if (exists("sendData", mode = "function", 
[10:33:26.785]                       envir = ns)) {
[10:33:26.785]                       parallel_sendData <- get("sendData", mode = "function", 
[10:33:26.785]                         envir = ns)
[10:33:26.785]                       envir <- sys.frame(frame)
[10:33:26.785]                       master <- NULL
[10:33:26.785]                       while (!identical(envir, .GlobalEnv) && 
[10:33:26.785]                         !identical(envir, emptyenv())) {
[10:33:26.785]                         if (exists("master", mode = "list", envir = envir, 
[10:33:26.785]                           inherits = FALSE)) {
[10:33:26.785]                           master <- get("master", mode = "list", 
[10:33:26.785]                             envir = envir, inherits = FALSE)
[10:33:26.785]                           if (inherits(master, c("SOCKnode", 
[10:33:26.785]                             "SOCK0node"))) {
[10:33:26.785]                             sendCondition <<- function(cond) {
[10:33:26.785]                               data <- list(type = "VALUE", value = cond, 
[10:33:26.785]                                 success = TRUE)
[10:33:26.785]                               parallel_sendData(master, data)
[10:33:26.785]                             }
[10:33:26.785]                             return(sendCondition)
[10:33:26.785]                           }
[10:33:26.785]                         }
[10:33:26.785]                         frame <- frame + 1L
[10:33:26.785]                         envir <- sys.frame(frame)
[10:33:26.785]                       }
[10:33:26.785]                     }
[10:33:26.785]                     sendCondition <<- function(cond) NULL
[10:33:26.785]                   }
[10:33:26.785]                 })
[10:33:26.785]                 withCallingHandlers({
[10:33:26.785]                   NA
[10:33:26.785]                 }, immediateCondition = function(cond) {
[10:33:26.785]                   sendCondition <- ...future.makeSendCondition()
[10:33:26.785]                   sendCondition(cond)
[10:33:26.785]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:26.785]                   {
[10:33:26.785]                     inherits <- base::inherits
[10:33:26.785]                     invokeRestart <- base::invokeRestart
[10:33:26.785]                     is.null <- base::is.null
[10:33:26.785]                     muffled <- FALSE
[10:33:26.785]                     if (inherits(cond, "message")) {
[10:33:26.785]                       muffled <- grepl(pattern, "muffleMessage")
[10:33:26.785]                       if (muffled) 
[10:33:26.785]                         invokeRestart("muffleMessage")
[10:33:26.785]                     }
[10:33:26.785]                     else if (inherits(cond, "warning")) {
[10:33:26.785]                       muffled <- grepl(pattern, "muffleWarning")
[10:33:26.785]                       if (muffled) 
[10:33:26.785]                         invokeRestart("muffleWarning")
[10:33:26.785]                     }
[10:33:26.785]                     else if (inherits(cond, "condition")) {
[10:33:26.785]                       if (!is.null(pattern)) {
[10:33:26.785]                         computeRestarts <- base::computeRestarts
[10:33:26.785]                         grepl <- base::grepl
[10:33:26.785]                         restarts <- computeRestarts(cond)
[10:33:26.785]                         for (restart in restarts) {
[10:33:26.785]                           name <- restart$name
[10:33:26.785]                           if (is.null(name)) 
[10:33:26.785]                             next
[10:33:26.785]                           if (!grepl(pattern, name)) 
[10:33:26.785]                             next
[10:33:26.785]                           invokeRestart(restart)
[10:33:26.785]                           muffled <- TRUE
[10:33:26.785]                           break
[10:33:26.785]                         }
[10:33:26.785]                       }
[10:33:26.785]                     }
[10:33:26.785]                     invisible(muffled)
[10:33:26.785]                   }
[10:33:26.785]                   muffleCondition(cond)
[10:33:26.785]                 })
[10:33:26.785]             }))
[10:33:26.785]             future::FutureResult(value = ...future.value$value, 
[10:33:26.785]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:26.785]                   ...future.rng), globalenv = if (FALSE) 
[10:33:26.785]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:26.785]                     ...future.globalenv.names))
[10:33:26.785]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:26.785]         }, condition = base::local({
[10:33:26.785]             c <- base::c
[10:33:26.785]             inherits <- base::inherits
[10:33:26.785]             invokeRestart <- base::invokeRestart
[10:33:26.785]             length <- base::length
[10:33:26.785]             list <- base::list
[10:33:26.785]             seq.int <- base::seq.int
[10:33:26.785]             signalCondition <- base::signalCondition
[10:33:26.785]             sys.calls <- base::sys.calls
[10:33:26.785]             `[[` <- base::`[[`
[10:33:26.785]             `+` <- base::`+`
[10:33:26.785]             `<<-` <- base::`<<-`
[10:33:26.785]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:26.785]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:26.785]                   3L)]
[10:33:26.785]             }
[10:33:26.785]             function(cond) {
[10:33:26.785]                 is_error <- inherits(cond, "error")
[10:33:26.785]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:26.785]                   NULL)
[10:33:26.785]                 if (is_error) {
[10:33:26.785]                   sessionInformation <- function() {
[10:33:26.785]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:26.785]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:26.785]                       search = base::search(), system = base::Sys.info())
[10:33:26.785]                   }
[10:33:26.785]                   ...future.conditions[[length(...future.conditions) + 
[10:33:26.785]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:26.785]                     cond$call), session = sessionInformation(), 
[10:33:26.785]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:26.785]                   signalCondition(cond)
[10:33:26.785]                 }
[10:33:26.785]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:26.785]                 "immediateCondition"))) {
[10:33:26.785]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:26.785]                   ...future.conditions[[length(...future.conditions) + 
[10:33:26.785]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:26.785]                   if (TRUE && !signal) {
[10:33:26.785]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:26.785]                     {
[10:33:26.785]                       inherits <- base::inherits
[10:33:26.785]                       invokeRestart <- base::invokeRestart
[10:33:26.785]                       is.null <- base::is.null
[10:33:26.785]                       muffled <- FALSE
[10:33:26.785]                       if (inherits(cond, "message")) {
[10:33:26.785]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:26.785]                         if (muffled) 
[10:33:26.785]                           invokeRestart("muffleMessage")
[10:33:26.785]                       }
[10:33:26.785]                       else if (inherits(cond, "warning")) {
[10:33:26.785]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:26.785]                         if (muffled) 
[10:33:26.785]                           invokeRestart("muffleWarning")
[10:33:26.785]                       }
[10:33:26.785]                       else if (inherits(cond, "condition")) {
[10:33:26.785]                         if (!is.null(pattern)) {
[10:33:26.785]                           computeRestarts <- base::computeRestarts
[10:33:26.785]                           grepl <- base::grepl
[10:33:26.785]                           restarts <- computeRestarts(cond)
[10:33:26.785]                           for (restart in restarts) {
[10:33:26.785]                             name <- restart$name
[10:33:26.785]                             if (is.null(name)) 
[10:33:26.785]                               next
[10:33:26.785]                             if (!grepl(pattern, name)) 
[10:33:26.785]                               next
[10:33:26.785]                             invokeRestart(restart)
[10:33:26.785]                             muffled <- TRUE
[10:33:26.785]                             break
[10:33:26.785]                           }
[10:33:26.785]                         }
[10:33:26.785]                       }
[10:33:26.785]                       invisible(muffled)
[10:33:26.785]                     }
[10:33:26.785]                     muffleCondition(cond, pattern = "^muffle")
[10:33:26.785]                   }
[10:33:26.785]                 }
[10:33:26.785]                 else {
[10:33:26.785]                   if (TRUE) {
[10:33:26.785]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:26.785]                     {
[10:33:26.785]                       inherits <- base::inherits
[10:33:26.785]                       invokeRestart <- base::invokeRestart
[10:33:26.785]                       is.null <- base::is.null
[10:33:26.785]                       muffled <- FALSE
[10:33:26.785]                       if (inherits(cond, "message")) {
[10:33:26.785]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:26.785]                         if (muffled) 
[10:33:26.785]                           invokeRestart("muffleMessage")
[10:33:26.785]                       }
[10:33:26.785]                       else if (inherits(cond, "warning")) {
[10:33:26.785]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:26.785]                         if (muffled) 
[10:33:26.785]                           invokeRestart("muffleWarning")
[10:33:26.785]                       }
[10:33:26.785]                       else if (inherits(cond, "condition")) {
[10:33:26.785]                         if (!is.null(pattern)) {
[10:33:26.785]                           computeRestarts <- base::computeRestarts
[10:33:26.785]                           grepl <- base::grepl
[10:33:26.785]                           restarts <- computeRestarts(cond)
[10:33:26.785]                           for (restart in restarts) {
[10:33:26.785]                             name <- restart$name
[10:33:26.785]                             if (is.null(name)) 
[10:33:26.785]                               next
[10:33:26.785]                             if (!grepl(pattern, name)) 
[10:33:26.785]                               next
[10:33:26.785]                             invokeRestart(restart)
[10:33:26.785]                             muffled <- TRUE
[10:33:26.785]                             break
[10:33:26.785]                           }
[10:33:26.785]                         }
[10:33:26.785]                       }
[10:33:26.785]                       invisible(muffled)
[10:33:26.785]                     }
[10:33:26.785]                     muffleCondition(cond, pattern = "^muffle")
[10:33:26.785]                   }
[10:33:26.785]                 }
[10:33:26.785]             }
[10:33:26.785]         }))
[10:33:26.785]     }, error = function(ex) {
[10:33:26.785]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:26.785]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:26.785]                 ...future.rng), started = ...future.startTime, 
[10:33:26.785]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:26.785]             version = "1.8"), class = "FutureResult")
[10:33:26.785]     }, finally = {
[10:33:26.785]         if (!identical(...future.workdir, getwd())) 
[10:33:26.785]             setwd(...future.workdir)
[10:33:26.785]         {
[10:33:26.785]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:26.785]                 ...future.oldOptions$nwarnings <- NULL
[10:33:26.785]             }
[10:33:26.785]             base::options(...future.oldOptions)
[10:33:26.785]             if (.Platform$OS.type == "windows") {
[10:33:26.785]                 old_names <- names(...future.oldEnvVars)
[10:33:26.785]                 envs <- base::Sys.getenv()
[10:33:26.785]                 names <- names(envs)
[10:33:26.785]                 common <- intersect(names, old_names)
[10:33:26.785]                 added <- setdiff(names, old_names)
[10:33:26.785]                 removed <- setdiff(old_names, names)
[10:33:26.785]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:26.785]                   envs[common]]
[10:33:26.785]                 NAMES <- toupper(changed)
[10:33:26.785]                 args <- list()
[10:33:26.785]                 for (kk in seq_along(NAMES)) {
[10:33:26.785]                   name <- changed[[kk]]
[10:33:26.785]                   NAME <- NAMES[[kk]]
[10:33:26.785]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:26.785]                     next
[10:33:26.785]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:26.785]                 }
[10:33:26.785]                 NAMES <- toupper(added)
[10:33:26.785]                 for (kk in seq_along(NAMES)) {
[10:33:26.785]                   name <- added[[kk]]
[10:33:26.785]                   NAME <- NAMES[[kk]]
[10:33:26.785]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:26.785]                     next
[10:33:26.785]                   args[[name]] <- ""
[10:33:26.785]                 }
[10:33:26.785]                 NAMES <- toupper(removed)
[10:33:26.785]                 for (kk in seq_along(NAMES)) {
[10:33:26.785]                   name <- removed[[kk]]
[10:33:26.785]                   NAME <- NAMES[[kk]]
[10:33:26.785]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:26.785]                     next
[10:33:26.785]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:26.785]                 }
[10:33:26.785]                 if (length(args) > 0) 
[10:33:26.785]                   base::do.call(base::Sys.setenv, args = args)
[10:33:26.785]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:26.785]             }
[10:33:26.785]             else {
[10:33:26.785]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:26.785]             }
[10:33:26.785]             {
[10:33:26.785]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:26.785]                   0L) {
[10:33:26.785]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:26.785]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:26.785]                   base::options(opts)
[10:33:26.785]                 }
[10:33:26.785]                 {
[10:33:26.785]                   {
[10:33:26.785]                     base::options(mc.cores = ...future.mc.cores.old)
[10:33:26.785]                     NULL
[10:33:26.785]                   }
[10:33:26.785]                   options(future.plan = NULL)
[10:33:26.785]                   if (is.na(NA_character_)) 
[10:33:26.785]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:26.785]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:26.785]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:26.785]                     .init = FALSE)
[10:33:26.785]                 }
[10:33:26.785]             }
[10:33:26.785]         }
[10:33:26.785]     })
[10:33:26.785]     if (TRUE) {
[10:33:26.785]         base::sink(type = "output", split = FALSE)
[10:33:26.785]         if (TRUE) {
[10:33:26.785]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:26.785]         }
[10:33:26.785]         else {
[10:33:26.785]             ...future.result["stdout"] <- base::list(NULL)
[10:33:26.785]         }
[10:33:26.785]         base::close(...future.stdout)
[10:33:26.785]         ...future.stdout <- NULL
[10:33:26.785]     }
[10:33:26.785]     ...future.result$conditions <- ...future.conditions
[10:33:26.785]     ...future.result$finished <- base::Sys.time()
[10:33:26.785]     ...future.result
[10:33:26.785] }
[10:33:26.837] MultisessionFuture started
[10:33:26.838] result() for ClusterFuture ...
[10:33:26.838] receiveMessageFromWorker() for ClusterFuture ...
[10:33:26.838] - Validating connection of MultisessionFuture
[10:33:26.871] - received message: FutureResult
[10:33:26.871] - Received FutureResult
[10:33:26.871] - Erased future from FutureRegistry
[10:33:26.872] result() for ClusterFuture ...
[10:33:26.872] - result already collected: FutureResult
[10:33:26.872] result() for ClusterFuture ... done
[10:33:26.872] receiveMessageFromWorker() for ClusterFuture ... done
[10:33:26.872] result() for ClusterFuture ... done
[10:33:26.872] result() for ClusterFuture ...
[10:33:26.872] - result already collected: FutureResult
[10:33:26.872] result() for ClusterFuture ... done
[10:33:26.872] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[10:33:26.873] plan(): nbrOfWorkers() = 2
> 
> f <- future({ gc() })
[10:33:26.873] getGlobalsAndPackages() ...
[10:33:26.873] Searching for globals...
[10:33:26.874] - globals found: [2] ‘{’, ‘gc’
[10:33:26.874] Searching for globals ... DONE
[10:33:26.874] Resolving globals: FALSE
[10:33:26.874] 
[10:33:26.875] 
[10:33:26.875] getGlobalsAndPackages() ... DONE
[10:33:26.875] run() for ‘Future’ ...
[10:33:26.875] - state: ‘created’
[10:33:26.875] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:33:26.886] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:33:26.886] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:33:26.886]   - Field: ‘node’
[10:33:26.886]   - Field: ‘label’
[10:33:26.886]   - Field: ‘local’
[10:33:26.886]   - Field: ‘owner’
[10:33:26.886]   - Field: ‘envir’
[10:33:26.886]   - Field: ‘workers’
[10:33:26.887]   - Field: ‘packages’
[10:33:26.887]   - Field: ‘gc’
[10:33:26.887]   - Field: ‘conditions’
[10:33:26.887]   - Field: ‘persistent’
[10:33:26.887]   - Field: ‘expr’
[10:33:26.887]   - Field: ‘uuid’
[10:33:26.887]   - Field: ‘seed’
[10:33:26.887]   - Field: ‘version’
[10:33:26.887]   - Field: ‘result’
[10:33:26.887]   - Field: ‘asynchronous’
[10:33:26.887]   - Field: ‘calls’
[10:33:26.888]   - Field: ‘globals’
[10:33:26.888]   - Field: ‘stdout’
[10:33:26.888]   - Field: ‘earlySignal’
[10:33:26.888]   - Field: ‘lazy’
[10:33:26.888]   - Field: ‘state’
[10:33:26.888] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:33:26.888] - Launch lazy future ...
[10:33:26.888] Packages needed by the future expression (n = 0): <none>
[10:33:26.888] Packages needed by future strategies (n = 0): <none>
[10:33:26.889] {
[10:33:26.889]     {
[10:33:26.889]         {
[10:33:26.889]             ...future.startTime <- base::Sys.time()
[10:33:26.889]             {
[10:33:26.889]                 {
[10:33:26.889]                   {
[10:33:26.889]                     {
[10:33:26.889]                       base::local({
[10:33:26.889]                         has_future <- base::requireNamespace("future", 
[10:33:26.889]                           quietly = TRUE)
[10:33:26.889]                         if (has_future) {
[10:33:26.889]                           ns <- base::getNamespace("future")
[10:33:26.889]                           version <- ns[[".package"]][["version"]]
[10:33:26.889]                           if (is.null(version)) 
[10:33:26.889]                             version <- utils::packageVersion("future")
[10:33:26.889]                         }
[10:33:26.889]                         else {
[10:33:26.889]                           version <- NULL
[10:33:26.889]                         }
[10:33:26.889]                         if (!has_future || version < "1.8.0") {
[10:33:26.889]                           info <- base::c(r_version = base::gsub("R version ", 
[10:33:26.889]                             "", base::R.version$version.string), 
[10:33:26.889]                             platform = base::sprintf("%s (%s-bit)", 
[10:33:26.889]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:26.889]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:26.889]                               "release", "version")], collapse = " "), 
[10:33:26.889]                             hostname = base::Sys.info()[["nodename"]])
[10:33:26.889]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:33:26.889]                             info)
[10:33:26.889]                           info <- base::paste(info, collapse = "; ")
[10:33:26.889]                           if (!has_future) {
[10:33:26.889]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:26.889]                               info)
[10:33:26.889]                           }
[10:33:26.889]                           else {
[10:33:26.889]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:26.889]                               info, version)
[10:33:26.889]                           }
[10:33:26.889]                           base::stop(msg)
[10:33:26.889]                         }
[10:33:26.889]                       })
[10:33:26.889]                     }
[10:33:26.889]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:33:26.889]                     base::options(mc.cores = 1L)
[10:33:26.889]                   }
[10:33:26.889]                   ...future.strategy.old <- future::plan("list")
[10:33:26.889]                   options(future.plan = NULL)
[10:33:26.889]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:26.889]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:33:26.889]                 }
[10:33:26.889]                 ...future.workdir <- getwd()
[10:33:26.889]             }
[10:33:26.889]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:26.889]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:26.889]         }
[10:33:26.889]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:33:26.889]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:26.889]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:33:26.889]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:33:26.889]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:26.889]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:26.889]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:26.889]             base::names(...future.oldOptions))
[10:33:26.889]     }
[10:33:26.889]     if (FALSE) {
[10:33:26.889]     }
[10:33:26.889]     else {
[10:33:26.889]         if (TRUE) {
[10:33:26.889]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:26.889]                 open = "w")
[10:33:26.889]         }
[10:33:26.889]         else {
[10:33:26.889]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:26.889]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:26.889]         }
[10:33:26.889]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:26.889]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:26.889]             base::sink(type = "output", split = FALSE)
[10:33:26.889]             base::close(...future.stdout)
[10:33:26.889]         }, add = TRUE)
[10:33:26.889]     }
[10:33:26.889]     ...future.frame <- base::sys.nframe()
[10:33:26.889]     ...future.conditions <- base::list()
[10:33:26.889]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:26.889]     if (FALSE) {
[10:33:26.889]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:26.889]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:26.889]     }
[10:33:26.889]     ...future.result <- base::tryCatch({
[10:33:26.889]         base::withCallingHandlers({
[10:33:26.889]             ...future.value <- base::withVisible(base::local({
[10:33:26.889]                 ...future.makeSendCondition <- base::local({
[10:33:26.889]                   sendCondition <- NULL
[10:33:26.889]                   function(frame = 1L) {
[10:33:26.889]                     if (is.function(sendCondition)) 
[10:33:26.889]                       return(sendCondition)
[10:33:26.889]                     ns <- getNamespace("parallel")
[10:33:26.889]                     if (exists("sendData", mode = "function", 
[10:33:26.889]                       envir = ns)) {
[10:33:26.889]                       parallel_sendData <- get("sendData", mode = "function", 
[10:33:26.889]                         envir = ns)
[10:33:26.889]                       envir <- sys.frame(frame)
[10:33:26.889]                       master <- NULL
[10:33:26.889]                       while (!identical(envir, .GlobalEnv) && 
[10:33:26.889]                         !identical(envir, emptyenv())) {
[10:33:26.889]                         if (exists("master", mode = "list", envir = envir, 
[10:33:26.889]                           inherits = FALSE)) {
[10:33:26.889]                           master <- get("master", mode = "list", 
[10:33:26.889]                             envir = envir, inherits = FALSE)
[10:33:26.889]                           if (inherits(master, c("SOCKnode", 
[10:33:26.889]                             "SOCK0node"))) {
[10:33:26.889]                             sendCondition <<- function(cond) {
[10:33:26.889]                               data <- list(type = "VALUE", value = cond, 
[10:33:26.889]                                 success = TRUE)
[10:33:26.889]                               parallel_sendData(master, data)
[10:33:26.889]                             }
[10:33:26.889]                             return(sendCondition)
[10:33:26.889]                           }
[10:33:26.889]                         }
[10:33:26.889]                         frame <- frame + 1L
[10:33:26.889]                         envir <- sys.frame(frame)
[10:33:26.889]                       }
[10:33:26.889]                     }
[10:33:26.889]                     sendCondition <<- function(cond) NULL
[10:33:26.889]                   }
[10:33:26.889]                 })
[10:33:26.889]                 withCallingHandlers({
[10:33:26.889]                   {
[10:33:26.889]                     gc()
[10:33:26.889]                   }
[10:33:26.889]                 }, immediateCondition = function(cond) {
[10:33:26.889]                   sendCondition <- ...future.makeSendCondition()
[10:33:26.889]                   sendCondition(cond)
[10:33:26.889]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:26.889]                   {
[10:33:26.889]                     inherits <- base::inherits
[10:33:26.889]                     invokeRestart <- base::invokeRestart
[10:33:26.889]                     is.null <- base::is.null
[10:33:26.889]                     muffled <- FALSE
[10:33:26.889]                     if (inherits(cond, "message")) {
[10:33:26.889]                       muffled <- grepl(pattern, "muffleMessage")
[10:33:26.889]                       if (muffled) 
[10:33:26.889]                         invokeRestart("muffleMessage")
[10:33:26.889]                     }
[10:33:26.889]                     else if (inherits(cond, "warning")) {
[10:33:26.889]                       muffled <- grepl(pattern, "muffleWarning")
[10:33:26.889]                       if (muffled) 
[10:33:26.889]                         invokeRestart("muffleWarning")
[10:33:26.889]                     }
[10:33:26.889]                     else if (inherits(cond, "condition")) {
[10:33:26.889]                       if (!is.null(pattern)) {
[10:33:26.889]                         computeRestarts <- base::computeRestarts
[10:33:26.889]                         grepl <- base::grepl
[10:33:26.889]                         restarts <- computeRestarts(cond)
[10:33:26.889]                         for (restart in restarts) {
[10:33:26.889]                           name <- restart$name
[10:33:26.889]                           if (is.null(name)) 
[10:33:26.889]                             next
[10:33:26.889]                           if (!grepl(pattern, name)) 
[10:33:26.889]                             next
[10:33:26.889]                           invokeRestart(restart)
[10:33:26.889]                           muffled <- TRUE
[10:33:26.889]                           break
[10:33:26.889]                         }
[10:33:26.889]                       }
[10:33:26.889]                     }
[10:33:26.889]                     invisible(muffled)
[10:33:26.889]                   }
[10:33:26.889]                   muffleCondition(cond)
[10:33:26.889]                 })
[10:33:26.889]             }))
[10:33:26.889]             future::FutureResult(value = ...future.value$value, 
[10:33:26.889]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:26.889]                   ...future.rng), globalenv = if (FALSE) 
[10:33:26.889]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:26.889]                     ...future.globalenv.names))
[10:33:26.889]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:26.889]         }, condition = base::local({
[10:33:26.889]             c <- base::c
[10:33:26.889]             inherits <- base::inherits
[10:33:26.889]             invokeRestart <- base::invokeRestart
[10:33:26.889]             length <- base::length
[10:33:26.889]             list <- base::list
[10:33:26.889]             seq.int <- base::seq.int
[10:33:26.889]             signalCondition <- base::signalCondition
[10:33:26.889]             sys.calls <- base::sys.calls
[10:33:26.889]             `[[` <- base::`[[`
[10:33:26.889]             `+` <- base::`+`
[10:33:26.889]             `<<-` <- base::`<<-`
[10:33:26.889]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:26.889]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:26.889]                   3L)]
[10:33:26.889]             }
[10:33:26.889]             function(cond) {
[10:33:26.889]                 is_error <- inherits(cond, "error")
[10:33:26.889]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:26.889]                   NULL)
[10:33:26.889]                 if (is_error) {
[10:33:26.889]                   sessionInformation <- function() {
[10:33:26.889]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:26.889]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:26.889]                       search = base::search(), system = base::Sys.info())
[10:33:26.889]                   }
[10:33:26.889]                   ...future.conditions[[length(...future.conditions) + 
[10:33:26.889]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:26.889]                     cond$call), session = sessionInformation(), 
[10:33:26.889]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:26.889]                   signalCondition(cond)
[10:33:26.889]                 }
[10:33:26.889]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:26.889]                 "immediateCondition"))) {
[10:33:26.889]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:26.889]                   ...future.conditions[[length(...future.conditions) + 
[10:33:26.889]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:26.889]                   if (TRUE && !signal) {
[10:33:26.889]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:26.889]                     {
[10:33:26.889]                       inherits <- base::inherits
[10:33:26.889]                       invokeRestart <- base::invokeRestart
[10:33:26.889]                       is.null <- base::is.null
[10:33:26.889]                       muffled <- FALSE
[10:33:26.889]                       if (inherits(cond, "message")) {
[10:33:26.889]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:26.889]                         if (muffled) 
[10:33:26.889]                           invokeRestart("muffleMessage")
[10:33:26.889]                       }
[10:33:26.889]                       else if (inherits(cond, "warning")) {
[10:33:26.889]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:26.889]                         if (muffled) 
[10:33:26.889]                           invokeRestart("muffleWarning")
[10:33:26.889]                       }
[10:33:26.889]                       else if (inherits(cond, "condition")) {
[10:33:26.889]                         if (!is.null(pattern)) {
[10:33:26.889]                           computeRestarts <- base::computeRestarts
[10:33:26.889]                           grepl <- base::grepl
[10:33:26.889]                           restarts <- computeRestarts(cond)
[10:33:26.889]                           for (restart in restarts) {
[10:33:26.889]                             name <- restart$name
[10:33:26.889]                             if (is.null(name)) 
[10:33:26.889]                               next
[10:33:26.889]                             if (!grepl(pattern, name)) 
[10:33:26.889]                               next
[10:33:26.889]                             invokeRestart(restart)
[10:33:26.889]                             muffled <- TRUE
[10:33:26.889]                             break
[10:33:26.889]                           }
[10:33:26.889]                         }
[10:33:26.889]                       }
[10:33:26.889]                       invisible(muffled)
[10:33:26.889]                     }
[10:33:26.889]                     muffleCondition(cond, pattern = "^muffle")
[10:33:26.889]                   }
[10:33:26.889]                 }
[10:33:26.889]                 else {
[10:33:26.889]                   if (TRUE) {
[10:33:26.889]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:26.889]                     {
[10:33:26.889]                       inherits <- base::inherits
[10:33:26.889]                       invokeRestart <- base::invokeRestart
[10:33:26.889]                       is.null <- base::is.null
[10:33:26.889]                       muffled <- FALSE
[10:33:26.889]                       if (inherits(cond, "message")) {
[10:33:26.889]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:26.889]                         if (muffled) 
[10:33:26.889]                           invokeRestart("muffleMessage")
[10:33:26.889]                       }
[10:33:26.889]                       else if (inherits(cond, "warning")) {
[10:33:26.889]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:26.889]                         if (muffled) 
[10:33:26.889]                           invokeRestart("muffleWarning")
[10:33:26.889]                       }
[10:33:26.889]                       else if (inherits(cond, "condition")) {
[10:33:26.889]                         if (!is.null(pattern)) {
[10:33:26.889]                           computeRestarts <- base::computeRestarts
[10:33:26.889]                           grepl <- base::grepl
[10:33:26.889]                           restarts <- computeRestarts(cond)
[10:33:26.889]                           for (restart in restarts) {
[10:33:26.889]                             name <- restart$name
[10:33:26.889]                             if (is.null(name)) 
[10:33:26.889]                               next
[10:33:26.889]                             if (!grepl(pattern, name)) 
[10:33:26.889]                               next
[10:33:26.889]                             invokeRestart(restart)
[10:33:26.889]                             muffled <- TRUE
[10:33:26.889]                             break
[10:33:26.889]                           }
[10:33:26.889]                         }
[10:33:26.889]                       }
[10:33:26.889]                       invisible(muffled)
[10:33:26.889]                     }
[10:33:26.889]                     muffleCondition(cond, pattern = "^muffle")
[10:33:26.889]                   }
[10:33:26.889]                 }
[10:33:26.889]             }
[10:33:26.889]         }))
[10:33:26.889]     }, error = function(ex) {
[10:33:26.889]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:26.889]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:26.889]                 ...future.rng), started = ...future.startTime, 
[10:33:26.889]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:26.889]             version = "1.8"), class = "FutureResult")
[10:33:26.889]     }, finally = {
[10:33:26.889]         if (!identical(...future.workdir, getwd())) 
[10:33:26.889]             setwd(...future.workdir)
[10:33:26.889]         {
[10:33:26.889]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:26.889]                 ...future.oldOptions$nwarnings <- NULL
[10:33:26.889]             }
[10:33:26.889]             base::options(...future.oldOptions)
[10:33:26.889]             if (.Platform$OS.type == "windows") {
[10:33:26.889]                 old_names <- names(...future.oldEnvVars)
[10:33:26.889]                 envs <- base::Sys.getenv()
[10:33:26.889]                 names <- names(envs)
[10:33:26.889]                 common <- intersect(names, old_names)
[10:33:26.889]                 added <- setdiff(names, old_names)
[10:33:26.889]                 removed <- setdiff(old_names, names)
[10:33:26.889]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:26.889]                   envs[common]]
[10:33:26.889]                 NAMES <- toupper(changed)
[10:33:26.889]                 args <- list()
[10:33:26.889]                 for (kk in seq_along(NAMES)) {
[10:33:26.889]                   name <- changed[[kk]]
[10:33:26.889]                   NAME <- NAMES[[kk]]
[10:33:26.889]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:26.889]                     next
[10:33:26.889]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:26.889]                 }
[10:33:26.889]                 NAMES <- toupper(added)
[10:33:26.889]                 for (kk in seq_along(NAMES)) {
[10:33:26.889]                   name <- added[[kk]]
[10:33:26.889]                   NAME <- NAMES[[kk]]
[10:33:26.889]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:26.889]                     next
[10:33:26.889]                   args[[name]] <- ""
[10:33:26.889]                 }
[10:33:26.889]                 NAMES <- toupper(removed)
[10:33:26.889]                 for (kk in seq_along(NAMES)) {
[10:33:26.889]                   name <- removed[[kk]]
[10:33:26.889]                   NAME <- NAMES[[kk]]
[10:33:26.889]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:26.889]                     next
[10:33:26.889]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:26.889]                 }
[10:33:26.889]                 if (length(args) > 0) 
[10:33:26.889]                   base::do.call(base::Sys.setenv, args = args)
[10:33:26.889]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:26.889]             }
[10:33:26.889]             else {
[10:33:26.889]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:26.889]             }
[10:33:26.889]             {
[10:33:26.889]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:26.889]                   0L) {
[10:33:26.889]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:26.889]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:26.889]                   base::options(opts)
[10:33:26.889]                 }
[10:33:26.889]                 {
[10:33:26.889]                   {
[10:33:26.889]                     base::options(mc.cores = ...future.mc.cores.old)
[10:33:26.889]                     NULL
[10:33:26.889]                   }
[10:33:26.889]                   options(future.plan = NULL)
[10:33:26.889]                   if (is.na(NA_character_)) 
[10:33:26.889]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:26.889]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:26.889]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:26.889]                     .init = FALSE)
[10:33:26.889]                 }
[10:33:26.889]             }
[10:33:26.889]         }
[10:33:26.889]     })
[10:33:26.889]     if (TRUE) {
[10:33:26.889]         base::sink(type = "output", split = FALSE)
[10:33:26.889]         if (TRUE) {
[10:33:26.889]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:26.889]         }
[10:33:26.889]         else {
[10:33:26.889]             ...future.result["stdout"] <- base::list(NULL)
[10:33:26.889]         }
[10:33:26.889]         base::close(...future.stdout)
[10:33:26.889]         ...future.stdout <- NULL
[10:33:26.889]     }
[10:33:26.889]     ...future.result$conditions <- ...future.conditions
[10:33:26.889]     ...future.result$finished <- base::Sys.time()
[10:33:26.889]     ...future.result
[10:33:26.889] }
[10:33:26.892] MultisessionFuture started
[10:33:26.892] - Launch lazy future ... done
[10:33:26.892] run() for ‘MultisessionFuture’ ... done
> v <- value(f)
[10:33:26.893] result() for ClusterFuture ...
[10:33:26.893] receiveMessageFromWorker() for ClusterFuture ...
[10:33:26.893] - Validating connection of MultisessionFuture
[10:33:26.919] - received message: FutureResult
[10:33:26.920] - Received FutureResult
[10:33:26.920] - Erased future from FutureRegistry
[10:33:26.920] result() for ClusterFuture ...
[10:33:26.920] - result already collected: FutureResult
[10:33:26.920] result() for ClusterFuture ... done
[10:33:26.920] receiveMessageFromWorker() for ClusterFuture ... done
[10:33:26.920] result() for ClusterFuture ... done
[10:33:26.920] result() for ClusterFuture ...
[10:33:26.921] - result already collected: FutureResult
[10:33:26.921] result() for ClusterFuture ... done
> print(v)
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 394778 21.1     664331 35.5   664331 35.5
Vcells 703836  5.4    8388608 64.0  1814363 13.9
> 
> f <- future({ integer(10e6) })
[10:33:26.921] getGlobalsAndPackages() ...
[10:33:26.921] Searching for globals...
[10:33:26.922] - globals found: [2] ‘{’, ‘integer’
[10:33:26.922] Searching for globals ... DONE
[10:33:26.922] Resolving globals: FALSE
[10:33:26.922] 
[10:33:26.923] 
[10:33:26.923] getGlobalsAndPackages() ... DONE
[10:33:26.923] run() for ‘Future’ ...
[10:33:26.923] - state: ‘created’
[10:33:26.923] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:33:26.934] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:33:26.934] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:33:26.934]   - Field: ‘node’
[10:33:26.934]   - Field: ‘label’
[10:33:26.934]   - Field: ‘local’
[10:33:26.934]   - Field: ‘owner’
[10:33:26.934]   - Field: ‘envir’
[10:33:26.935]   - Field: ‘workers’
[10:33:26.935]   - Field: ‘packages’
[10:33:26.935]   - Field: ‘gc’
[10:33:26.935]   - Field: ‘conditions’
[10:33:26.935]   - Field: ‘persistent’
[10:33:26.935]   - Field: ‘expr’
[10:33:26.937]   - Field: ‘uuid’
[10:33:26.937]   - Field: ‘seed’
[10:33:26.937]   - Field: ‘version’
[10:33:26.937]   - Field: ‘result’
[10:33:26.937]   - Field: ‘asynchronous’
[10:33:26.937]   - Field: ‘calls’
[10:33:26.938]   - Field: ‘globals’
[10:33:26.938]   - Field: ‘stdout’
[10:33:26.938]   - Field: ‘earlySignal’
[10:33:26.938]   - Field: ‘lazy’
[10:33:26.938]   - Field: ‘state’
[10:33:26.938] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:33:26.938] - Launch lazy future ...
[10:33:26.938] Packages needed by the future expression (n = 0): <none>
[10:33:26.938] Packages needed by future strategies (n = 0): <none>
[10:33:26.939] {
[10:33:26.939]     {
[10:33:26.939]         {
[10:33:26.939]             ...future.startTime <- base::Sys.time()
[10:33:26.939]             {
[10:33:26.939]                 {
[10:33:26.939]                   {
[10:33:26.939]                     {
[10:33:26.939]                       base::local({
[10:33:26.939]                         has_future <- base::requireNamespace("future", 
[10:33:26.939]                           quietly = TRUE)
[10:33:26.939]                         if (has_future) {
[10:33:26.939]                           ns <- base::getNamespace("future")
[10:33:26.939]                           version <- ns[[".package"]][["version"]]
[10:33:26.939]                           if (is.null(version)) 
[10:33:26.939]                             version <- utils::packageVersion("future")
[10:33:26.939]                         }
[10:33:26.939]                         else {
[10:33:26.939]                           version <- NULL
[10:33:26.939]                         }
[10:33:26.939]                         if (!has_future || version < "1.8.0") {
[10:33:26.939]                           info <- base::c(r_version = base::gsub("R version ", 
[10:33:26.939]                             "", base::R.version$version.string), 
[10:33:26.939]                             platform = base::sprintf("%s (%s-bit)", 
[10:33:26.939]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:26.939]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:26.939]                               "release", "version")], collapse = " "), 
[10:33:26.939]                             hostname = base::Sys.info()[["nodename"]])
[10:33:26.939]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:33:26.939]                             info)
[10:33:26.939]                           info <- base::paste(info, collapse = "; ")
[10:33:26.939]                           if (!has_future) {
[10:33:26.939]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:26.939]                               info)
[10:33:26.939]                           }
[10:33:26.939]                           else {
[10:33:26.939]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:26.939]                               info, version)
[10:33:26.939]                           }
[10:33:26.939]                           base::stop(msg)
[10:33:26.939]                         }
[10:33:26.939]                       })
[10:33:26.939]                     }
[10:33:26.939]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:33:26.939]                     base::options(mc.cores = 1L)
[10:33:26.939]                   }
[10:33:26.939]                   ...future.strategy.old <- future::plan("list")
[10:33:26.939]                   options(future.plan = NULL)
[10:33:26.939]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:26.939]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:33:26.939]                 }
[10:33:26.939]                 ...future.workdir <- getwd()
[10:33:26.939]             }
[10:33:26.939]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:26.939]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:26.939]         }
[10:33:26.939]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:33:26.939]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:26.939]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:33:26.939]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:33:26.939]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:26.939]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:26.939]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:26.939]             base::names(...future.oldOptions))
[10:33:26.939]     }
[10:33:26.939]     if (FALSE) {
[10:33:26.939]     }
[10:33:26.939]     else {
[10:33:26.939]         if (TRUE) {
[10:33:26.939]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:26.939]                 open = "w")
[10:33:26.939]         }
[10:33:26.939]         else {
[10:33:26.939]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:26.939]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:26.939]         }
[10:33:26.939]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:26.939]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:26.939]             base::sink(type = "output", split = FALSE)
[10:33:26.939]             base::close(...future.stdout)
[10:33:26.939]         }, add = TRUE)
[10:33:26.939]     }
[10:33:26.939]     ...future.frame <- base::sys.nframe()
[10:33:26.939]     ...future.conditions <- base::list()
[10:33:26.939]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:26.939]     if (FALSE) {
[10:33:26.939]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:26.939]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:26.939]     }
[10:33:26.939]     ...future.result <- base::tryCatch({
[10:33:26.939]         base::withCallingHandlers({
[10:33:26.939]             ...future.value <- base::withVisible(base::local({
[10:33:26.939]                 ...future.makeSendCondition <- base::local({
[10:33:26.939]                   sendCondition <- NULL
[10:33:26.939]                   function(frame = 1L) {
[10:33:26.939]                     if (is.function(sendCondition)) 
[10:33:26.939]                       return(sendCondition)
[10:33:26.939]                     ns <- getNamespace("parallel")
[10:33:26.939]                     if (exists("sendData", mode = "function", 
[10:33:26.939]                       envir = ns)) {
[10:33:26.939]                       parallel_sendData <- get("sendData", mode = "function", 
[10:33:26.939]                         envir = ns)
[10:33:26.939]                       envir <- sys.frame(frame)
[10:33:26.939]                       master <- NULL
[10:33:26.939]                       while (!identical(envir, .GlobalEnv) && 
[10:33:26.939]                         !identical(envir, emptyenv())) {
[10:33:26.939]                         if (exists("master", mode = "list", envir = envir, 
[10:33:26.939]                           inherits = FALSE)) {
[10:33:26.939]                           master <- get("master", mode = "list", 
[10:33:26.939]                             envir = envir, inherits = FALSE)
[10:33:26.939]                           if (inherits(master, c("SOCKnode", 
[10:33:26.939]                             "SOCK0node"))) {
[10:33:26.939]                             sendCondition <<- function(cond) {
[10:33:26.939]                               data <- list(type = "VALUE", value = cond, 
[10:33:26.939]                                 success = TRUE)
[10:33:26.939]                               parallel_sendData(master, data)
[10:33:26.939]                             }
[10:33:26.939]                             return(sendCondition)
[10:33:26.939]                           }
[10:33:26.939]                         }
[10:33:26.939]                         frame <- frame + 1L
[10:33:26.939]                         envir <- sys.frame(frame)
[10:33:26.939]                       }
[10:33:26.939]                     }
[10:33:26.939]                     sendCondition <<- function(cond) NULL
[10:33:26.939]                   }
[10:33:26.939]                 })
[10:33:26.939]                 withCallingHandlers({
[10:33:26.939]                   {
[10:33:26.939]                     integer(1e+07)
[10:33:26.939]                   }
[10:33:26.939]                 }, immediateCondition = function(cond) {
[10:33:26.939]                   sendCondition <- ...future.makeSendCondition()
[10:33:26.939]                   sendCondition(cond)
[10:33:26.939]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:26.939]                   {
[10:33:26.939]                     inherits <- base::inherits
[10:33:26.939]                     invokeRestart <- base::invokeRestart
[10:33:26.939]                     is.null <- base::is.null
[10:33:26.939]                     muffled <- FALSE
[10:33:26.939]                     if (inherits(cond, "message")) {
[10:33:26.939]                       muffled <- grepl(pattern, "muffleMessage")
[10:33:26.939]                       if (muffled) 
[10:33:26.939]                         invokeRestart("muffleMessage")
[10:33:26.939]                     }
[10:33:26.939]                     else if (inherits(cond, "warning")) {
[10:33:26.939]                       muffled <- grepl(pattern, "muffleWarning")
[10:33:26.939]                       if (muffled) 
[10:33:26.939]                         invokeRestart("muffleWarning")
[10:33:26.939]                     }
[10:33:26.939]                     else if (inherits(cond, "condition")) {
[10:33:26.939]                       if (!is.null(pattern)) {
[10:33:26.939]                         computeRestarts <- base::computeRestarts
[10:33:26.939]                         grepl <- base::grepl
[10:33:26.939]                         restarts <- computeRestarts(cond)
[10:33:26.939]                         for (restart in restarts) {
[10:33:26.939]                           name <- restart$name
[10:33:26.939]                           if (is.null(name)) 
[10:33:26.939]                             next
[10:33:26.939]                           if (!grepl(pattern, name)) 
[10:33:26.939]                             next
[10:33:26.939]                           invokeRestart(restart)
[10:33:26.939]                           muffled <- TRUE
[10:33:26.939]                           break
[10:33:26.939]                         }
[10:33:26.939]                       }
[10:33:26.939]                     }
[10:33:26.939]                     invisible(muffled)
[10:33:26.939]                   }
[10:33:26.939]                   muffleCondition(cond)
[10:33:26.939]                 })
[10:33:26.939]             }))
[10:33:26.939]             future::FutureResult(value = ...future.value$value, 
[10:33:26.939]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:26.939]                   ...future.rng), globalenv = if (FALSE) 
[10:33:26.939]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:26.939]                     ...future.globalenv.names))
[10:33:26.939]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:26.939]         }, condition = base::local({
[10:33:26.939]             c <- base::c
[10:33:26.939]             inherits <- base::inherits
[10:33:26.939]             invokeRestart <- base::invokeRestart
[10:33:26.939]             length <- base::length
[10:33:26.939]             list <- base::list
[10:33:26.939]             seq.int <- base::seq.int
[10:33:26.939]             signalCondition <- base::signalCondition
[10:33:26.939]             sys.calls <- base::sys.calls
[10:33:26.939]             `[[` <- base::`[[`
[10:33:26.939]             `+` <- base::`+`
[10:33:26.939]             `<<-` <- base::`<<-`
[10:33:26.939]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:26.939]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:26.939]                   3L)]
[10:33:26.939]             }
[10:33:26.939]             function(cond) {
[10:33:26.939]                 is_error <- inherits(cond, "error")
[10:33:26.939]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:26.939]                   NULL)
[10:33:26.939]                 if (is_error) {
[10:33:26.939]                   sessionInformation <- function() {
[10:33:26.939]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:26.939]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:26.939]                       search = base::search(), system = base::Sys.info())
[10:33:26.939]                   }
[10:33:26.939]                   ...future.conditions[[length(...future.conditions) + 
[10:33:26.939]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:26.939]                     cond$call), session = sessionInformation(), 
[10:33:26.939]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:26.939]                   signalCondition(cond)
[10:33:26.939]                 }
[10:33:26.939]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:26.939]                 "immediateCondition"))) {
[10:33:26.939]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:26.939]                   ...future.conditions[[length(...future.conditions) + 
[10:33:26.939]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:26.939]                   if (TRUE && !signal) {
[10:33:26.939]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:26.939]                     {
[10:33:26.939]                       inherits <- base::inherits
[10:33:26.939]                       invokeRestart <- base::invokeRestart
[10:33:26.939]                       is.null <- base::is.null
[10:33:26.939]                       muffled <- FALSE
[10:33:26.939]                       if (inherits(cond, "message")) {
[10:33:26.939]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:26.939]                         if (muffled) 
[10:33:26.939]                           invokeRestart("muffleMessage")
[10:33:26.939]                       }
[10:33:26.939]                       else if (inherits(cond, "warning")) {
[10:33:26.939]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:26.939]                         if (muffled) 
[10:33:26.939]                           invokeRestart("muffleWarning")
[10:33:26.939]                       }
[10:33:26.939]                       else if (inherits(cond, "condition")) {
[10:33:26.939]                         if (!is.null(pattern)) {
[10:33:26.939]                           computeRestarts <- base::computeRestarts
[10:33:26.939]                           grepl <- base::grepl
[10:33:26.939]                           restarts <- computeRestarts(cond)
[10:33:26.939]                           for (restart in restarts) {
[10:33:26.939]                             name <- restart$name
[10:33:26.939]                             if (is.null(name)) 
[10:33:26.939]                               next
[10:33:26.939]                             if (!grepl(pattern, name)) 
[10:33:26.939]                               next
[10:33:26.939]                             invokeRestart(restart)
[10:33:26.939]                             muffled <- TRUE
[10:33:26.939]                             break
[10:33:26.939]                           }
[10:33:26.939]                         }
[10:33:26.939]                       }
[10:33:26.939]                       invisible(muffled)
[10:33:26.939]                     }
[10:33:26.939]                     muffleCondition(cond, pattern = "^muffle")
[10:33:26.939]                   }
[10:33:26.939]                 }
[10:33:26.939]                 else {
[10:33:26.939]                   if (TRUE) {
[10:33:26.939]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:26.939]                     {
[10:33:26.939]                       inherits <- base::inherits
[10:33:26.939]                       invokeRestart <- base::invokeRestart
[10:33:26.939]                       is.null <- base::is.null
[10:33:26.939]                       muffled <- FALSE
[10:33:26.939]                       if (inherits(cond, "message")) {
[10:33:26.939]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:26.939]                         if (muffled) 
[10:33:26.939]                           invokeRestart("muffleMessage")
[10:33:26.939]                       }
[10:33:26.939]                       else if (inherits(cond, "warning")) {
[10:33:26.939]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:26.939]                         if (muffled) 
[10:33:26.939]                           invokeRestart("muffleWarning")
[10:33:26.939]                       }
[10:33:26.939]                       else if (inherits(cond, "condition")) {
[10:33:26.939]                         if (!is.null(pattern)) {
[10:33:26.939]                           computeRestarts <- base::computeRestarts
[10:33:26.939]                           grepl <- base::grepl
[10:33:26.939]                           restarts <- computeRestarts(cond)
[10:33:26.939]                           for (restart in restarts) {
[10:33:26.939]                             name <- restart$name
[10:33:26.939]                             if (is.null(name)) 
[10:33:26.939]                               next
[10:33:26.939]                             if (!grepl(pattern, name)) 
[10:33:26.939]                               next
[10:33:26.939]                             invokeRestart(restart)
[10:33:26.939]                             muffled <- TRUE
[10:33:26.939]                             break
[10:33:26.939]                           }
[10:33:26.939]                         }
[10:33:26.939]                       }
[10:33:26.939]                       invisible(muffled)
[10:33:26.939]                     }
[10:33:26.939]                     muffleCondition(cond, pattern = "^muffle")
[10:33:26.939]                   }
[10:33:26.939]                 }
[10:33:26.939]             }
[10:33:26.939]         }))
[10:33:26.939]     }, error = function(ex) {
[10:33:26.939]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:26.939]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:26.939]                 ...future.rng), started = ...future.startTime, 
[10:33:26.939]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:26.939]             version = "1.8"), class = "FutureResult")
[10:33:26.939]     }, finally = {
[10:33:26.939]         if (!identical(...future.workdir, getwd())) 
[10:33:26.939]             setwd(...future.workdir)
[10:33:26.939]         {
[10:33:26.939]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:26.939]                 ...future.oldOptions$nwarnings <- NULL
[10:33:26.939]             }
[10:33:26.939]             base::options(...future.oldOptions)
[10:33:26.939]             if (.Platform$OS.type == "windows") {
[10:33:26.939]                 old_names <- names(...future.oldEnvVars)
[10:33:26.939]                 envs <- base::Sys.getenv()
[10:33:26.939]                 names <- names(envs)
[10:33:26.939]                 common <- intersect(names, old_names)
[10:33:26.939]                 added <- setdiff(names, old_names)
[10:33:26.939]                 removed <- setdiff(old_names, names)
[10:33:26.939]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:26.939]                   envs[common]]
[10:33:26.939]                 NAMES <- toupper(changed)
[10:33:26.939]                 args <- list()
[10:33:26.939]                 for (kk in seq_along(NAMES)) {
[10:33:26.939]                   name <- changed[[kk]]
[10:33:26.939]                   NAME <- NAMES[[kk]]
[10:33:26.939]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:26.939]                     next
[10:33:26.939]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:26.939]                 }
[10:33:26.939]                 NAMES <- toupper(added)
[10:33:26.939]                 for (kk in seq_along(NAMES)) {
[10:33:26.939]                   name <- added[[kk]]
[10:33:26.939]                   NAME <- NAMES[[kk]]
[10:33:26.939]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:26.939]                     next
[10:33:26.939]                   args[[name]] <- ""
[10:33:26.939]                 }
[10:33:26.939]                 NAMES <- toupper(removed)
[10:33:26.939]                 for (kk in seq_along(NAMES)) {
[10:33:26.939]                   name <- removed[[kk]]
[10:33:26.939]                   NAME <- NAMES[[kk]]
[10:33:26.939]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:26.939]                     next
[10:33:26.939]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:26.939]                 }
[10:33:26.939]                 if (length(args) > 0) 
[10:33:26.939]                   base::do.call(base::Sys.setenv, args = args)
[10:33:26.939]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:26.939]             }
[10:33:26.939]             else {
[10:33:26.939]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:26.939]             }
[10:33:26.939]             {
[10:33:26.939]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:26.939]                   0L) {
[10:33:26.939]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:26.939]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:26.939]                   base::options(opts)
[10:33:26.939]                 }
[10:33:26.939]                 {
[10:33:26.939]                   {
[10:33:26.939]                     base::options(mc.cores = ...future.mc.cores.old)
[10:33:26.939]                     NULL
[10:33:26.939]                   }
[10:33:26.939]                   options(future.plan = NULL)
[10:33:26.939]                   if (is.na(NA_character_)) 
[10:33:26.939]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:26.939]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:26.939]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:26.939]                     .init = FALSE)
[10:33:26.939]                 }
[10:33:26.939]             }
[10:33:26.939]         }
[10:33:26.939]     })
[10:33:26.939]     if (TRUE) {
[10:33:26.939]         base::sink(type = "output", split = FALSE)
[10:33:26.939]         if (TRUE) {
[10:33:26.939]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:26.939]         }
[10:33:26.939]         else {
[10:33:26.939]             ...future.result["stdout"] <- base::list(NULL)
[10:33:26.939]         }
[10:33:26.939]         base::close(...future.stdout)
[10:33:26.939]         ...future.stdout <- NULL
[10:33:26.939]     }
[10:33:26.939]     ...future.result$conditions <- ...future.conditions
[10:33:26.939]     ...future.result$finished <- base::Sys.time()
[10:33:26.939]     ...future.result
[10:33:26.939] }
[10:33:26.942] MultisessionFuture started
[10:33:26.942] - Launch lazy future ... done
[10:33:26.942] run() for ‘MultisessionFuture’ ... done
> v <- value(f)
[10:33:26.942] result() for ClusterFuture ...
[10:33:26.942] receiveMessageFromWorker() for ClusterFuture ...
[10:33:26.943] - Validating connection of MultisessionFuture
[10:33:27.002] - received message: FutureResult
[10:33:27.002] - Received FutureResult
[10:33:27.002] - Erased future from FutureRegistry
[10:33:27.002] result() for ClusterFuture ...
[10:33:27.002] - result already collected: FutureResult
[10:33:27.003] result() for ClusterFuture ... done
[10:33:27.003] receiveMessageFromWorker() for ClusterFuture ... done
[10:33:27.003] result() for ClusterFuture ... done
[10:33:27.003] result() for ClusterFuture ...
[10:33:27.003] - result already collected: FutureResult
[10:33:27.003] result() for ClusterFuture ... done
> str(v)
 int [1:10000000] 0 0 0 0 0 0 0 0 0 0 ...
> 
> f <- future({ gc() })
[10:33:27.004] getGlobalsAndPackages() ...
[10:33:27.004] Searching for globals...
[10:33:27.004] - globals found: [2] ‘{’, ‘gc’
[10:33:27.005] Searching for globals ... DONE
[10:33:27.005] Resolving globals: FALSE
[10:33:27.005] 
[10:33:27.005] 
[10:33:27.005] getGlobalsAndPackages() ... DONE
[10:33:27.005] run() for ‘Future’ ...
[10:33:27.006] - state: ‘created’
[10:33:27.006] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:33:27.017] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:33:27.017] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:33:27.017]   - Field: ‘node’
[10:33:27.017]   - Field: ‘label’
[10:33:27.017]   - Field: ‘local’
[10:33:27.017]   - Field: ‘owner’
[10:33:27.017]   - Field: ‘envir’
[10:33:27.017]   - Field: ‘workers’
[10:33:27.018]   - Field: ‘packages’
[10:33:27.018]   - Field: ‘gc’
[10:33:27.018]   - Field: ‘conditions’
[10:33:27.018]   - Field: ‘persistent’
[10:33:27.018]   - Field: ‘expr’
[10:33:27.018]   - Field: ‘uuid’
[10:33:27.018]   - Field: ‘seed’
[10:33:27.018]   - Field: ‘version’
[10:33:27.018]   - Field: ‘result’
[10:33:27.018]   - Field: ‘asynchronous’
[10:33:27.018]   - Field: ‘calls’
[10:33:27.019]   - Field: ‘globals’
[10:33:27.019]   - Field: ‘stdout’
[10:33:27.019]   - Field: ‘earlySignal’
[10:33:27.019]   - Field: ‘lazy’
[10:33:27.019]   - Field: ‘state’
[10:33:27.019] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:33:27.019] - Launch lazy future ...
[10:33:27.019] Packages needed by the future expression (n = 0): <none>
[10:33:27.019] Packages needed by future strategies (n = 0): <none>
[10:33:27.020] {
[10:33:27.020]     {
[10:33:27.020]         {
[10:33:27.020]             ...future.startTime <- base::Sys.time()
[10:33:27.020]             {
[10:33:27.020]                 {
[10:33:27.020]                   {
[10:33:27.020]                     {
[10:33:27.020]                       base::local({
[10:33:27.020]                         has_future <- base::requireNamespace("future", 
[10:33:27.020]                           quietly = TRUE)
[10:33:27.020]                         if (has_future) {
[10:33:27.020]                           ns <- base::getNamespace("future")
[10:33:27.020]                           version <- ns[[".package"]][["version"]]
[10:33:27.020]                           if (is.null(version)) 
[10:33:27.020]                             version <- utils::packageVersion("future")
[10:33:27.020]                         }
[10:33:27.020]                         else {
[10:33:27.020]                           version <- NULL
[10:33:27.020]                         }
[10:33:27.020]                         if (!has_future || version < "1.8.0") {
[10:33:27.020]                           info <- base::c(r_version = base::gsub("R version ", 
[10:33:27.020]                             "", base::R.version$version.string), 
[10:33:27.020]                             platform = base::sprintf("%s (%s-bit)", 
[10:33:27.020]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:27.020]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:27.020]                               "release", "version")], collapse = " "), 
[10:33:27.020]                             hostname = base::Sys.info()[["nodename"]])
[10:33:27.020]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:33:27.020]                             info)
[10:33:27.020]                           info <- base::paste(info, collapse = "; ")
[10:33:27.020]                           if (!has_future) {
[10:33:27.020]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:27.020]                               info)
[10:33:27.020]                           }
[10:33:27.020]                           else {
[10:33:27.020]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:27.020]                               info, version)
[10:33:27.020]                           }
[10:33:27.020]                           base::stop(msg)
[10:33:27.020]                         }
[10:33:27.020]                       })
[10:33:27.020]                     }
[10:33:27.020]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:33:27.020]                     base::options(mc.cores = 1L)
[10:33:27.020]                   }
[10:33:27.020]                   ...future.strategy.old <- future::plan("list")
[10:33:27.020]                   options(future.plan = NULL)
[10:33:27.020]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:27.020]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:33:27.020]                 }
[10:33:27.020]                 ...future.workdir <- getwd()
[10:33:27.020]             }
[10:33:27.020]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:27.020]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:27.020]         }
[10:33:27.020]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:33:27.020]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:27.020]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:33:27.020]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:33:27.020]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:27.020]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:27.020]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:27.020]             base::names(...future.oldOptions))
[10:33:27.020]     }
[10:33:27.020]     if (FALSE) {
[10:33:27.020]     }
[10:33:27.020]     else {
[10:33:27.020]         if (TRUE) {
[10:33:27.020]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:27.020]                 open = "w")
[10:33:27.020]         }
[10:33:27.020]         else {
[10:33:27.020]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:27.020]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:27.020]         }
[10:33:27.020]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:27.020]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:27.020]             base::sink(type = "output", split = FALSE)
[10:33:27.020]             base::close(...future.stdout)
[10:33:27.020]         }, add = TRUE)
[10:33:27.020]     }
[10:33:27.020]     ...future.frame <- base::sys.nframe()
[10:33:27.020]     ...future.conditions <- base::list()
[10:33:27.020]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:27.020]     if (FALSE) {
[10:33:27.020]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:27.020]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:27.020]     }
[10:33:27.020]     ...future.result <- base::tryCatch({
[10:33:27.020]         base::withCallingHandlers({
[10:33:27.020]             ...future.value <- base::withVisible(base::local({
[10:33:27.020]                 ...future.makeSendCondition <- base::local({
[10:33:27.020]                   sendCondition <- NULL
[10:33:27.020]                   function(frame = 1L) {
[10:33:27.020]                     if (is.function(sendCondition)) 
[10:33:27.020]                       return(sendCondition)
[10:33:27.020]                     ns <- getNamespace("parallel")
[10:33:27.020]                     if (exists("sendData", mode = "function", 
[10:33:27.020]                       envir = ns)) {
[10:33:27.020]                       parallel_sendData <- get("sendData", mode = "function", 
[10:33:27.020]                         envir = ns)
[10:33:27.020]                       envir <- sys.frame(frame)
[10:33:27.020]                       master <- NULL
[10:33:27.020]                       while (!identical(envir, .GlobalEnv) && 
[10:33:27.020]                         !identical(envir, emptyenv())) {
[10:33:27.020]                         if (exists("master", mode = "list", envir = envir, 
[10:33:27.020]                           inherits = FALSE)) {
[10:33:27.020]                           master <- get("master", mode = "list", 
[10:33:27.020]                             envir = envir, inherits = FALSE)
[10:33:27.020]                           if (inherits(master, c("SOCKnode", 
[10:33:27.020]                             "SOCK0node"))) {
[10:33:27.020]                             sendCondition <<- function(cond) {
[10:33:27.020]                               data <- list(type = "VALUE", value = cond, 
[10:33:27.020]                                 success = TRUE)
[10:33:27.020]                               parallel_sendData(master, data)
[10:33:27.020]                             }
[10:33:27.020]                             return(sendCondition)
[10:33:27.020]                           }
[10:33:27.020]                         }
[10:33:27.020]                         frame <- frame + 1L
[10:33:27.020]                         envir <- sys.frame(frame)
[10:33:27.020]                       }
[10:33:27.020]                     }
[10:33:27.020]                     sendCondition <<- function(cond) NULL
[10:33:27.020]                   }
[10:33:27.020]                 })
[10:33:27.020]                 withCallingHandlers({
[10:33:27.020]                   {
[10:33:27.020]                     gc()
[10:33:27.020]                   }
[10:33:27.020]                 }, immediateCondition = function(cond) {
[10:33:27.020]                   sendCondition <- ...future.makeSendCondition()
[10:33:27.020]                   sendCondition(cond)
[10:33:27.020]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:27.020]                   {
[10:33:27.020]                     inherits <- base::inherits
[10:33:27.020]                     invokeRestart <- base::invokeRestart
[10:33:27.020]                     is.null <- base::is.null
[10:33:27.020]                     muffled <- FALSE
[10:33:27.020]                     if (inherits(cond, "message")) {
[10:33:27.020]                       muffled <- grepl(pattern, "muffleMessage")
[10:33:27.020]                       if (muffled) 
[10:33:27.020]                         invokeRestart("muffleMessage")
[10:33:27.020]                     }
[10:33:27.020]                     else if (inherits(cond, "warning")) {
[10:33:27.020]                       muffled <- grepl(pattern, "muffleWarning")
[10:33:27.020]                       if (muffled) 
[10:33:27.020]                         invokeRestart("muffleWarning")
[10:33:27.020]                     }
[10:33:27.020]                     else if (inherits(cond, "condition")) {
[10:33:27.020]                       if (!is.null(pattern)) {
[10:33:27.020]                         computeRestarts <- base::computeRestarts
[10:33:27.020]                         grepl <- base::grepl
[10:33:27.020]                         restarts <- computeRestarts(cond)
[10:33:27.020]                         for (restart in restarts) {
[10:33:27.020]                           name <- restart$name
[10:33:27.020]                           if (is.null(name)) 
[10:33:27.020]                             next
[10:33:27.020]                           if (!grepl(pattern, name)) 
[10:33:27.020]                             next
[10:33:27.020]                           invokeRestart(restart)
[10:33:27.020]                           muffled <- TRUE
[10:33:27.020]                           break
[10:33:27.020]                         }
[10:33:27.020]                       }
[10:33:27.020]                     }
[10:33:27.020]                     invisible(muffled)
[10:33:27.020]                   }
[10:33:27.020]                   muffleCondition(cond)
[10:33:27.020]                 })
[10:33:27.020]             }))
[10:33:27.020]             future::FutureResult(value = ...future.value$value, 
[10:33:27.020]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:27.020]                   ...future.rng), globalenv = if (FALSE) 
[10:33:27.020]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:27.020]                     ...future.globalenv.names))
[10:33:27.020]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:27.020]         }, condition = base::local({
[10:33:27.020]             c <- base::c
[10:33:27.020]             inherits <- base::inherits
[10:33:27.020]             invokeRestart <- base::invokeRestart
[10:33:27.020]             length <- base::length
[10:33:27.020]             list <- base::list
[10:33:27.020]             seq.int <- base::seq.int
[10:33:27.020]             signalCondition <- base::signalCondition
[10:33:27.020]             sys.calls <- base::sys.calls
[10:33:27.020]             `[[` <- base::`[[`
[10:33:27.020]             `+` <- base::`+`
[10:33:27.020]             `<<-` <- base::`<<-`
[10:33:27.020]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:27.020]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:27.020]                   3L)]
[10:33:27.020]             }
[10:33:27.020]             function(cond) {
[10:33:27.020]                 is_error <- inherits(cond, "error")
[10:33:27.020]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:27.020]                   NULL)
[10:33:27.020]                 if (is_error) {
[10:33:27.020]                   sessionInformation <- function() {
[10:33:27.020]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:27.020]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:27.020]                       search = base::search(), system = base::Sys.info())
[10:33:27.020]                   }
[10:33:27.020]                   ...future.conditions[[length(...future.conditions) + 
[10:33:27.020]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:27.020]                     cond$call), session = sessionInformation(), 
[10:33:27.020]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:27.020]                   signalCondition(cond)
[10:33:27.020]                 }
[10:33:27.020]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:27.020]                 "immediateCondition"))) {
[10:33:27.020]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:27.020]                   ...future.conditions[[length(...future.conditions) + 
[10:33:27.020]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:27.020]                   if (TRUE && !signal) {
[10:33:27.020]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:27.020]                     {
[10:33:27.020]                       inherits <- base::inherits
[10:33:27.020]                       invokeRestart <- base::invokeRestart
[10:33:27.020]                       is.null <- base::is.null
[10:33:27.020]                       muffled <- FALSE
[10:33:27.020]                       if (inherits(cond, "message")) {
[10:33:27.020]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:27.020]                         if (muffled) 
[10:33:27.020]                           invokeRestart("muffleMessage")
[10:33:27.020]                       }
[10:33:27.020]                       else if (inherits(cond, "warning")) {
[10:33:27.020]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:27.020]                         if (muffled) 
[10:33:27.020]                           invokeRestart("muffleWarning")
[10:33:27.020]                       }
[10:33:27.020]                       else if (inherits(cond, "condition")) {
[10:33:27.020]                         if (!is.null(pattern)) {
[10:33:27.020]                           computeRestarts <- base::computeRestarts
[10:33:27.020]                           grepl <- base::grepl
[10:33:27.020]                           restarts <- computeRestarts(cond)
[10:33:27.020]                           for (restart in restarts) {
[10:33:27.020]                             name <- restart$name
[10:33:27.020]                             if (is.null(name)) 
[10:33:27.020]                               next
[10:33:27.020]                             if (!grepl(pattern, name)) 
[10:33:27.020]                               next
[10:33:27.020]                             invokeRestart(restart)
[10:33:27.020]                             muffled <- TRUE
[10:33:27.020]                             break
[10:33:27.020]                           }
[10:33:27.020]                         }
[10:33:27.020]                       }
[10:33:27.020]                       invisible(muffled)
[10:33:27.020]                     }
[10:33:27.020]                     muffleCondition(cond, pattern = "^muffle")
[10:33:27.020]                   }
[10:33:27.020]                 }
[10:33:27.020]                 else {
[10:33:27.020]                   if (TRUE) {
[10:33:27.020]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:27.020]                     {
[10:33:27.020]                       inherits <- base::inherits
[10:33:27.020]                       invokeRestart <- base::invokeRestart
[10:33:27.020]                       is.null <- base::is.null
[10:33:27.020]                       muffled <- FALSE
[10:33:27.020]                       if (inherits(cond, "message")) {
[10:33:27.020]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:27.020]                         if (muffled) 
[10:33:27.020]                           invokeRestart("muffleMessage")
[10:33:27.020]                       }
[10:33:27.020]                       else if (inherits(cond, "warning")) {
[10:33:27.020]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:27.020]                         if (muffled) 
[10:33:27.020]                           invokeRestart("muffleWarning")
[10:33:27.020]                       }
[10:33:27.020]                       else if (inherits(cond, "condition")) {
[10:33:27.020]                         if (!is.null(pattern)) {
[10:33:27.020]                           computeRestarts <- base::computeRestarts
[10:33:27.020]                           grepl <- base::grepl
[10:33:27.020]                           restarts <- computeRestarts(cond)
[10:33:27.020]                           for (restart in restarts) {
[10:33:27.020]                             name <- restart$name
[10:33:27.020]                             if (is.null(name)) 
[10:33:27.020]                               next
[10:33:27.020]                             if (!grepl(pattern, name)) 
[10:33:27.020]                               next
[10:33:27.020]                             invokeRestart(restart)
[10:33:27.020]                             muffled <- TRUE
[10:33:27.020]                             break
[10:33:27.020]                           }
[10:33:27.020]                         }
[10:33:27.020]                       }
[10:33:27.020]                       invisible(muffled)
[10:33:27.020]                     }
[10:33:27.020]                     muffleCondition(cond, pattern = "^muffle")
[10:33:27.020]                   }
[10:33:27.020]                 }
[10:33:27.020]             }
[10:33:27.020]         }))
[10:33:27.020]     }, error = function(ex) {
[10:33:27.020]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:27.020]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:27.020]                 ...future.rng), started = ...future.startTime, 
[10:33:27.020]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:27.020]             version = "1.8"), class = "FutureResult")
[10:33:27.020]     }, finally = {
[10:33:27.020]         if (!identical(...future.workdir, getwd())) 
[10:33:27.020]             setwd(...future.workdir)
[10:33:27.020]         {
[10:33:27.020]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:27.020]                 ...future.oldOptions$nwarnings <- NULL
[10:33:27.020]             }
[10:33:27.020]             base::options(...future.oldOptions)
[10:33:27.020]             if (.Platform$OS.type == "windows") {
[10:33:27.020]                 old_names <- names(...future.oldEnvVars)
[10:33:27.020]                 envs <- base::Sys.getenv()
[10:33:27.020]                 names <- names(envs)
[10:33:27.020]                 common <- intersect(names, old_names)
[10:33:27.020]                 added <- setdiff(names, old_names)
[10:33:27.020]                 removed <- setdiff(old_names, names)
[10:33:27.020]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:27.020]                   envs[common]]
[10:33:27.020]                 NAMES <- toupper(changed)
[10:33:27.020]                 args <- list()
[10:33:27.020]                 for (kk in seq_along(NAMES)) {
[10:33:27.020]                   name <- changed[[kk]]
[10:33:27.020]                   NAME <- NAMES[[kk]]
[10:33:27.020]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:27.020]                     next
[10:33:27.020]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:27.020]                 }
[10:33:27.020]                 NAMES <- toupper(added)
[10:33:27.020]                 for (kk in seq_along(NAMES)) {
[10:33:27.020]                   name <- added[[kk]]
[10:33:27.020]                   NAME <- NAMES[[kk]]
[10:33:27.020]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:27.020]                     next
[10:33:27.020]                   args[[name]] <- ""
[10:33:27.020]                 }
[10:33:27.020]                 NAMES <- toupper(removed)
[10:33:27.020]                 for (kk in seq_along(NAMES)) {
[10:33:27.020]                   name <- removed[[kk]]
[10:33:27.020]                   NAME <- NAMES[[kk]]
[10:33:27.020]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:27.020]                     next
[10:33:27.020]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:27.020]                 }
[10:33:27.020]                 if (length(args) > 0) 
[10:33:27.020]                   base::do.call(base::Sys.setenv, args = args)
[10:33:27.020]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:27.020]             }
[10:33:27.020]             else {
[10:33:27.020]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:27.020]             }
[10:33:27.020]             {
[10:33:27.020]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:27.020]                   0L) {
[10:33:27.020]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:27.020]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:27.020]                   base::options(opts)
[10:33:27.020]                 }
[10:33:27.020]                 {
[10:33:27.020]                   {
[10:33:27.020]                     base::options(mc.cores = ...future.mc.cores.old)
[10:33:27.020]                     NULL
[10:33:27.020]                   }
[10:33:27.020]                   options(future.plan = NULL)
[10:33:27.020]                   if (is.na(NA_character_)) 
[10:33:27.020]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:27.020]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:27.020]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:27.020]                     .init = FALSE)
[10:33:27.020]                 }
[10:33:27.020]             }
[10:33:27.020]         }
[10:33:27.020]     })
[10:33:27.020]     if (TRUE) {
[10:33:27.020]         base::sink(type = "output", split = FALSE)
[10:33:27.020]         if (TRUE) {
[10:33:27.020]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:27.020]         }
[10:33:27.020]         else {
[10:33:27.020]             ...future.result["stdout"] <- base::list(NULL)
[10:33:27.020]         }
[10:33:27.020]         base::close(...future.stdout)
[10:33:27.020]         ...future.stdout <- NULL
[10:33:27.020]     }
[10:33:27.020]     ...future.result$conditions <- ...future.conditions
[10:33:27.020]     ...future.result$finished <- base::Sys.time()
[10:33:27.020]     ...future.result
[10:33:27.020] }
[10:33:27.023] MultisessionFuture started
[10:33:27.023] - Launch lazy future ... done
[10:33:27.023] run() for ‘MultisessionFuture’ ... done
> v <- value(f)
[10:33:27.023] result() for ClusterFuture ...
[10:33:27.024] receiveMessageFromWorker() for ClusterFuture ...
[10:33:27.024] - Validating connection of MultisessionFuture
[10:33:27.049] - received message: FutureResult
[10:33:27.049] - Received FutureResult
[10:33:27.049] - Erased future from FutureRegistry
[10:33:27.049] result() for ClusterFuture ...
[10:33:27.050] - result already collected: FutureResult
[10:33:27.050] result() for ClusterFuture ... done
[10:33:27.050] receiveMessageFromWorker() for ClusterFuture ... done
[10:33:27.050] result() for ClusterFuture ... done
[10:33:27.050] result() for ClusterFuture ...
[10:33:27.050] - result already collected: FutureResult
[10:33:27.050] result() for ClusterFuture ... done
> print(v)
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 394773 21.1     664331 35.5   664331 35.5
Vcells 703826  5.4    8388608 64.0  5725749 43.7
> 
> f <- future({ integer(10e6) }, gc = TRUE)
[10:33:27.050] getGlobalsAndPackages() ...
[10:33:27.051] Searching for globals...
[10:33:27.051] - globals found: [2] ‘{’, ‘integer’
[10:33:27.051] Searching for globals ... DONE
[10:33:27.052] Resolving globals: FALSE
[10:33:27.052] 
[10:33:27.052] 
[10:33:27.052] getGlobalsAndPackages() ... DONE
[10:33:27.052] run() for ‘Future’ ...
[10:33:27.052] - state: ‘created’
[10:33:27.053] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:33:27.063] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:33:27.063] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:33:27.063]   - Field: ‘node’
[10:33:27.063]   - Field: ‘label’
[10:33:27.063]   - Field: ‘local’
[10:33:27.064]   - Field: ‘owner’
[10:33:27.064]   - Field: ‘envir’
[10:33:27.064]   - Field: ‘workers’
[10:33:27.064]   - Field: ‘packages’
[10:33:27.064]   - Field: ‘gc’
[10:33:27.064]   - Field: ‘conditions’
[10:33:27.064]   - Field: ‘persistent’
[10:33:27.064]   - Field: ‘expr’
[10:33:27.064]   - Field: ‘uuid’
[10:33:27.064]   - Field: ‘seed’
[10:33:27.064]   - Field: ‘version’
[10:33:27.065]   - Field: ‘result’
[10:33:27.065]   - Field: ‘asynchronous’
[10:33:27.065]   - Field: ‘calls’
[10:33:27.065]   - Field: ‘globals’
[10:33:27.065]   - Field: ‘stdout’
[10:33:27.065]   - Field: ‘earlySignal’
[10:33:27.065]   - Field: ‘lazy’
[10:33:27.065]   - Field: ‘state’
[10:33:27.065] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:33:27.065] - Launch lazy future ...
[10:33:27.066] Packages needed by the future expression (n = 0): <none>
[10:33:27.066] Packages needed by future strategies (n = 0): <none>
[10:33:27.066] {
[10:33:27.066]     {
[10:33:27.066]         {
[10:33:27.066]             ...future.startTime <- base::Sys.time()
[10:33:27.066]             {
[10:33:27.066]                 {
[10:33:27.066]                   {
[10:33:27.066]                     {
[10:33:27.066]                       base::local({
[10:33:27.066]                         has_future <- base::requireNamespace("future", 
[10:33:27.066]                           quietly = TRUE)
[10:33:27.066]                         if (has_future) {
[10:33:27.066]                           ns <- base::getNamespace("future")
[10:33:27.066]                           version <- ns[[".package"]][["version"]]
[10:33:27.066]                           if (is.null(version)) 
[10:33:27.066]                             version <- utils::packageVersion("future")
[10:33:27.066]                         }
[10:33:27.066]                         else {
[10:33:27.066]                           version <- NULL
[10:33:27.066]                         }
[10:33:27.066]                         if (!has_future || version < "1.8.0") {
[10:33:27.066]                           info <- base::c(r_version = base::gsub("R version ", 
[10:33:27.066]                             "", base::R.version$version.string), 
[10:33:27.066]                             platform = base::sprintf("%s (%s-bit)", 
[10:33:27.066]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:27.066]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:27.066]                               "release", "version")], collapse = " "), 
[10:33:27.066]                             hostname = base::Sys.info()[["nodename"]])
[10:33:27.066]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:33:27.066]                             info)
[10:33:27.066]                           info <- base::paste(info, collapse = "; ")
[10:33:27.066]                           if (!has_future) {
[10:33:27.066]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:27.066]                               info)
[10:33:27.066]                           }
[10:33:27.066]                           else {
[10:33:27.066]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:27.066]                               info, version)
[10:33:27.066]                           }
[10:33:27.066]                           base::stop(msg)
[10:33:27.066]                         }
[10:33:27.066]                       })
[10:33:27.066]                     }
[10:33:27.066]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:33:27.066]                     base::options(mc.cores = 1L)
[10:33:27.066]                   }
[10:33:27.066]                   ...future.strategy.old <- future::plan("list")
[10:33:27.066]                   options(future.plan = NULL)
[10:33:27.066]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:27.066]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:33:27.066]                 }
[10:33:27.066]                 ...future.workdir <- getwd()
[10:33:27.066]             }
[10:33:27.066]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:27.066]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:27.066]         }
[10:33:27.066]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:33:27.066]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:27.066]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:33:27.066]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:33:27.066]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:27.066]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:27.066]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:27.066]             base::names(...future.oldOptions))
[10:33:27.066]     }
[10:33:27.066]     if (FALSE) {
[10:33:27.066]     }
[10:33:27.066]     else {
[10:33:27.066]         if (TRUE) {
[10:33:27.066]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:27.066]                 open = "w")
[10:33:27.066]         }
[10:33:27.066]         else {
[10:33:27.066]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:27.066]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:27.066]         }
[10:33:27.066]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:27.066]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:27.066]             base::sink(type = "output", split = FALSE)
[10:33:27.066]             base::close(...future.stdout)
[10:33:27.066]         }, add = TRUE)
[10:33:27.066]     }
[10:33:27.066]     ...future.frame <- base::sys.nframe()
[10:33:27.066]     ...future.conditions <- base::list()
[10:33:27.066]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:27.066]     if (FALSE) {
[10:33:27.066]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:27.066]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:27.066]     }
[10:33:27.066]     ...future.result <- base::tryCatch({
[10:33:27.066]         base::withCallingHandlers({
[10:33:27.066]             ...future.value <- base::withVisible(base::local({
[10:33:27.066]                 ...future.makeSendCondition <- base::local({
[10:33:27.066]                   sendCondition <- NULL
[10:33:27.066]                   function(frame = 1L) {
[10:33:27.066]                     if (is.function(sendCondition)) 
[10:33:27.066]                       return(sendCondition)
[10:33:27.066]                     ns <- getNamespace("parallel")
[10:33:27.066]                     if (exists("sendData", mode = "function", 
[10:33:27.066]                       envir = ns)) {
[10:33:27.066]                       parallel_sendData <- get("sendData", mode = "function", 
[10:33:27.066]                         envir = ns)
[10:33:27.066]                       envir <- sys.frame(frame)
[10:33:27.066]                       master <- NULL
[10:33:27.066]                       while (!identical(envir, .GlobalEnv) && 
[10:33:27.066]                         !identical(envir, emptyenv())) {
[10:33:27.066]                         if (exists("master", mode = "list", envir = envir, 
[10:33:27.066]                           inherits = FALSE)) {
[10:33:27.066]                           master <- get("master", mode = "list", 
[10:33:27.066]                             envir = envir, inherits = FALSE)
[10:33:27.066]                           if (inherits(master, c("SOCKnode", 
[10:33:27.066]                             "SOCK0node"))) {
[10:33:27.066]                             sendCondition <<- function(cond) {
[10:33:27.066]                               data <- list(type = "VALUE", value = cond, 
[10:33:27.066]                                 success = TRUE)
[10:33:27.066]                               parallel_sendData(master, data)
[10:33:27.066]                             }
[10:33:27.066]                             return(sendCondition)
[10:33:27.066]                           }
[10:33:27.066]                         }
[10:33:27.066]                         frame <- frame + 1L
[10:33:27.066]                         envir <- sys.frame(frame)
[10:33:27.066]                       }
[10:33:27.066]                     }
[10:33:27.066]                     sendCondition <<- function(cond) NULL
[10:33:27.066]                   }
[10:33:27.066]                 })
[10:33:27.066]                 withCallingHandlers({
[10:33:27.066]                   {
[10:33:27.066]                     integer(1e+07)
[10:33:27.066]                   }
[10:33:27.066]                 }, immediateCondition = function(cond) {
[10:33:27.066]                   sendCondition <- ...future.makeSendCondition()
[10:33:27.066]                   sendCondition(cond)
[10:33:27.066]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:27.066]                   {
[10:33:27.066]                     inherits <- base::inherits
[10:33:27.066]                     invokeRestart <- base::invokeRestart
[10:33:27.066]                     is.null <- base::is.null
[10:33:27.066]                     muffled <- FALSE
[10:33:27.066]                     if (inherits(cond, "message")) {
[10:33:27.066]                       muffled <- grepl(pattern, "muffleMessage")
[10:33:27.066]                       if (muffled) 
[10:33:27.066]                         invokeRestart("muffleMessage")
[10:33:27.066]                     }
[10:33:27.066]                     else if (inherits(cond, "warning")) {
[10:33:27.066]                       muffled <- grepl(pattern, "muffleWarning")
[10:33:27.066]                       if (muffled) 
[10:33:27.066]                         invokeRestart("muffleWarning")
[10:33:27.066]                     }
[10:33:27.066]                     else if (inherits(cond, "condition")) {
[10:33:27.066]                       if (!is.null(pattern)) {
[10:33:27.066]                         computeRestarts <- base::computeRestarts
[10:33:27.066]                         grepl <- base::grepl
[10:33:27.066]                         restarts <- computeRestarts(cond)
[10:33:27.066]                         for (restart in restarts) {
[10:33:27.066]                           name <- restart$name
[10:33:27.066]                           if (is.null(name)) 
[10:33:27.066]                             next
[10:33:27.066]                           if (!grepl(pattern, name)) 
[10:33:27.066]                             next
[10:33:27.066]                           invokeRestart(restart)
[10:33:27.066]                           muffled <- TRUE
[10:33:27.066]                           break
[10:33:27.066]                         }
[10:33:27.066]                       }
[10:33:27.066]                     }
[10:33:27.066]                     invisible(muffled)
[10:33:27.066]                   }
[10:33:27.066]                   muffleCondition(cond)
[10:33:27.066]                 })
[10:33:27.066]             }))
[10:33:27.066]             future::FutureResult(value = ...future.value$value, 
[10:33:27.066]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:27.066]                   ...future.rng), globalenv = if (FALSE) 
[10:33:27.066]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:27.066]                     ...future.globalenv.names))
[10:33:27.066]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:27.066]         }, condition = base::local({
[10:33:27.066]             c <- base::c
[10:33:27.066]             inherits <- base::inherits
[10:33:27.066]             invokeRestart <- base::invokeRestart
[10:33:27.066]             length <- base::length
[10:33:27.066]             list <- base::list
[10:33:27.066]             seq.int <- base::seq.int
[10:33:27.066]             signalCondition <- base::signalCondition
[10:33:27.066]             sys.calls <- base::sys.calls
[10:33:27.066]             `[[` <- base::`[[`
[10:33:27.066]             `+` <- base::`+`
[10:33:27.066]             `<<-` <- base::`<<-`
[10:33:27.066]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:27.066]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:27.066]                   3L)]
[10:33:27.066]             }
[10:33:27.066]             function(cond) {
[10:33:27.066]                 is_error <- inherits(cond, "error")
[10:33:27.066]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:27.066]                   NULL)
[10:33:27.066]                 if (is_error) {
[10:33:27.066]                   sessionInformation <- function() {
[10:33:27.066]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:27.066]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:27.066]                       search = base::search(), system = base::Sys.info())
[10:33:27.066]                   }
[10:33:27.066]                   ...future.conditions[[length(...future.conditions) + 
[10:33:27.066]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:27.066]                     cond$call), session = sessionInformation(), 
[10:33:27.066]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:27.066]                   signalCondition(cond)
[10:33:27.066]                 }
[10:33:27.066]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:27.066]                 "immediateCondition"))) {
[10:33:27.066]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:27.066]                   ...future.conditions[[length(...future.conditions) + 
[10:33:27.066]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:27.066]                   if (TRUE && !signal) {
[10:33:27.066]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:27.066]                     {
[10:33:27.066]                       inherits <- base::inherits
[10:33:27.066]                       invokeRestart <- base::invokeRestart
[10:33:27.066]                       is.null <- base::is.null
[10:33:27.066]                       muffled <- FALSE
[10:33:27.066]                       if (inherits(cond, "message")) {
[10:33:27.066]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:27.066]                         if (muffled) 
[10:33:27.066]                           invokeRestart("muffleMessage")
[10:33:27.066]                       }
[10:33:27.066]                       else if (inherits(cond, "warning")) {
[10:33:27.066]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:27.066]                         if (muffled) 
[10:33:27.066]                           invokeRestart("muffleWarning")
[10:33:27.066]                       }
[10:33:27.066]                       else if (inherits(cond, "condition")) {
[10:33:27.066]                         if (!is.null(pattern)) {
[10:33:27.066]                           computeRestarts <- base::computeRestarts
[10:33:27.066]                           grepl <- base::grepl
[10:33:27.066]                           restarts <- computeRestarts(cond)
[10:33:27.066]                           for (restart in restarts) {
[10:33:27.066]                             name <- restart$name
[10:33:27.066]                             if (is.null(name)) 
[10:33:27.066]                               next
[10:33:27.066]                             if (!grepl(pattern, name)) 
[10:33:27.066]                               next
[10:33:27.066]                             invokeRestart(restart)
[10:33:27.066]                             muffled <- TRUE
[10:33:27.066]                             break
[10:33:27.066]                           }
[10:33:27.066]                         }
[10:33:27.066]                       }
[10:33:27.066]                       invisible(muffled)
[10:33:27.066]                     }
[10:33:27.066]                     muffleCondition(cond, pattern = "^muffle")
[10:33:27.066]                   }
[10:33:27.066]                 }
[10:33:27.066]                 else {
[10:33:27.066]                   if (TRUE) {
[10:33:27.066]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:27.066]                     {
[10:33:27.066]                       inherits <- base::inherits
[10:33:27.066]                       invokeRestart <- base::invokeRestart
[10:33:27.066]                       is.null <- base::is.null
[10:33:27.066]                       muffled <- FALSE
[10:33:27.066]                       if (inherits(cond, "message")) {
[10:33:27.066]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:27.066]                         if (muffled) 
[10:33:27.066]                           invokeRestart("muffleMessage")
[10:33:27.066]                       }
[10:33:27.066]                       else if (inherits(cond, "warning")) {
[10:33:27.066]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:27.066]                         if (muffled) 
[10:33:27.066]                           invokeRestart("muffleWarning")
[10:33:27.066]                       }
[10:33:27.066]                       else if (inherits(cond, "condition")) {
[10:33:27.066]                         if (!is.null(pattern)) {
[10:33:27.066]                           computeRestarts <- base::computeRestarts
[10:33:27.066]                           grepl <- base::grepl
[10:33:27.066]                           restarts <- computeRestarts(cond)
[10:33:27.066]                           for (restart in restarts) {
[10:33:27.066]                             name <- restart$name
[10:33:27.066]                             if (is.null(name)) 
[10:33:27.066]                               next
[10:33:27.066]                             if (!grepl(pattern, name)) 
[10:33:27.066]                               next
[10:33:27.066]                             invokeRestart(restart)
[10:33:27.066]                             muffled <- TRUE
[10:33:27.066]                             break
[10:33:27.066]                           }
[10:33:27.066]                         }
[10:33:27.066]                       }
[10:33:27.066]                       invisible(muffled)
[10:33:27.066]                     }
[10:33:27.066]                     muffleCondition(cond, pattern = "^muffle")
[10:33:27.066]                   }
[10:33:27.066]                 }
[10:33:27.066]             }
[10:33:27.066]         }))
[10:33:27.066]     }, error = function(ex) {
[10:33:27.066]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:27.066]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:27.066]                 ...future.rng), started = ...future.startTime, 
[10:33:27.066]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:27.066]             version = "1.8"), class = "FutureResult")
[10:33:27.066]     }, finally = {
[10:33:27.066]         if (!identical(...future.workdir, getwd())) 
[10:33:27.066]             setwd(...future.workdir)
[10:33:27.066]         {
[10:33:27.066]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:27.066]                 ...future.oldOptions$nwarnings <- NULL
[10:33:27.066]             }
[10:33:27.066]             base::options(...future.oldOptions)
[10:33:27.066]             if (.Platform$OS.type == "windows") {
[10:33:27.066]                 old_names <- names(...future.oldEnvVars)
[10:33:27.066]                 envs <- base::Sys.getenv()
[10:33:27.066]                 names <- names(envs)
[10:33:27.066]                 common <- intersect(names, old_names)
[10:33:27.066]                 added <- setdiff(names, old_names)
[10:33:27.066]                 removed <- setdiff(old_names, names)
[10:33:27.066]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:27.066]                   envs[common]]
[10:33:27.066]                 NAMES <- toupper(changed)
[10:33:27.066]                 args <- list()
[10:33:27.066]                 for (kk in seq_along(NAMES)) {
[10:33:27.066]                   name <- changed[[kk]]
[10:33:27.066]                   NAME <- NAMES[[kk]]
[10:33:27.066]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:27.066]                     next
[10:33:27.066]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:27.066]                 }
[10:33:27.066]                 NAMES <- toupper(added)
[10:33:27.066]                 for (kk in seq_along(NAMES)) {
[10:33:27.066]                   name <- added[[kk]]
[10:33:27.066]                   NAME <- NAMES[[kk]]
[10:33:27.066]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:27.066]                     next
[10:33:27.066]                   args[[name]] <- ""
[10:33:27.066]                 }
[10:33:27.066]                 NAMES <- toupper(removed)
[10:33:27.066]                 for (kk in seq_along(NAMES)) {
[10:33:27.066]                   name <- removed[[kk]]
[10:33:27.066]                   NAME <- NAMES[[kk]]
[10:33:27.066]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:27.066]                     next
[10:33:27.066]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:27.066]                 }
[10:33:27.066]                 if (length(args) > 0) 
[10:33:27.066]                   base::do.call(base::Sys.setenv, args = args)
[10:33:27.066]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:27.066]             }
[10:33:27.066]             else {
[10:33:27.066]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:27.066]             }
[10:33:27.066]             {
[10:33:27.066]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:27.066]                   0L) {
[10:33:27.066]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:27.066]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:27.066]                   base::options(opts)
[10:33:27.066]                 }
[10:33:27.066]                 {
[10:33:27.066]                   {
[10:33:27.066]                     base::options(mc.cores = ...future.mc.cores.old)
[10:33:27.066]                     NULL
[10:33:27.066]                   }
[10:33:27.066]                   options(future.plan = NULL)
[10:33:27.066]                   if (is.na(NA_character_)) 
[10:33:27.066]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:27.066]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:27.066]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:27.066]                     .init = FALSE)
[10:33:27.066]                 }
[10:33:27.066]             }
[10:33:27.066]         }
[10:33:27.066]     })
[10:33:27.066]     if (TRUE) {
[10:33:27.066]         base::sink(type = "output", split = FALSE)
[10:33:27.066]         if (TRUE) {
[10:33:27.066]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:27.066]         }
[10:33:27.066]         else {
[10:33:27.066]             ...future.result["stdout"] <- base::list(NULL)
[10:33:27.066]         }
[10:33:27.066]         base::close(...future.stdout)
[10:33:27.066]         ...future.stdout <- NULL
[10:33:27.066]     }
[10:33:27.066]     ...future.result$conditions <- ...future.conditions
[10:33:27.066]     ...future.result$finished <- base::Sys.time()
[10:33:27.066]     ...future.result
[10:33:27.066] }
[10:33:27.069] MultisessionFuture started
[10:33:27.069] - Launch lazy future ... done
[10:33:27.070] run() for ‘MultisessionFuture’ ... done
> v <- value(f)
[10:33:27.070] result() for ClusterFuture ...
[10:33:27.070] receiveMessageFromWorker() for ClusterFuture ...
[10:33:27.070] - Validating connection of MultisessionFuture
[10:33:27.147] - received message: FutureResult
[10:33:27.147] - Received FutureResult
[10:33:27.147] - Erased future from FutureRegistry
[10:33:27.148] result() for ClusterFuture ...
[10:33:27.148] - result already collected: FutureResult
[10:33:27.148] result() for ClusterFuture ... done
[10:33:27.148] - Garbage collecting worker ...
[10:33:27.371] - Garbage collecting worker ... done
[10:33:27.371] receiveMessageFromWorker() for ClusterFuture ... done
[10:33:27.371] result() for ClusterFuture ... done
[10:33:27.371] result() for ClusterFuture ...
[10:33:27.372] - result already collected: FutureResult
[10:33:27.372] result() for ClusterFuture ... done
> str(v)
 int [1:10000000] 0 0 0 0 0 0 0 0 0 0 ...
> 
> f <- future({ gc() })
[10:33:27.372] getGlobalsAndPackages() ...
[10:33:27.372] Searching for globals...
[10:33:27.373] - globals found: [2] ‘{’, ‘gc’
[10:33:27.373] Searching for globals ... DONE
[10:33:27.374] Resolving globals: FALSE
[10:33:27.374] 
[10:33:27.374] 
[10:33:27.374] getGlobalsAndPackages() ... DONE
[10:33:27.374] run() for ‘Future’ ...
[10:33:27.374] - state: ‘created’
[10:33:27.375] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:33:27.385] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:33:27.386] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:33:27.386]   - Field: ‘node’
[10:33:27.386]   - Field: ‘label’
[10:33:27.386]   - Field: ‘local’
[10:33:27.386]   - Field: ‘owner’
[10:33:27.386]   - Field: ‘envir’
[10:33:27.386]   - Field: ‘workers’
[10:33:27.386]   - Field: ‘packages’
[10:33:27.386]   - Field: ‘gc’
[10:33:27.386]   - Field: ‘conditions’
[10:33:27.387]   - Field: ‘persistent’
[10:33:27.387]   - Field: ‘expr’
[10:33:27.387]   - Field: ‘uuid’
[10:33:27.387]   - Field: ‘seed’
[10:33:27.387]   - Field: ‘version’
[10:33:27.387]   - Field: ‘result’
[10:33:27.387]   - Field: ‘asynchronous’
[10:33:27.387]   - Field: ‘calls’
[10:33:27.387]   - Field: ‘globals’
[10:33:27.387]   - Field: ‘stdout’
[10:33:27.387]   - Field: ‘earlySignal’
[10:33:27.388]   - Field: ‘lazy’
[10:33:27.388]   - Field: ‘state’
[10:33:27.388] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:33:27.388] - Launch lazy future ...
[10:33:27.388] Packages needed by the future expression (n = 0): <none>
[10:33:27.388] Packages needed by future strategies (n = 0): <none>
[10:33:27.389] {
[10:33:27.389]     {
[10:33:27.389]         {
[10:33:27.389]             ...future.startTime <- base::Sys.time()
[10:33:27.389]             {
[10:33:27.389]                 {
[10:33:27.389]                   {
[10:33:27.389]                     {
[10:33:27.389]                       base::local({
[10:33:27.389]                         has_future <- base::requireNamespace("future", 
[10:33:27.389]                           quietly = TRUE)
[10:33:27.389]                         if (has_future) {
[10:33:27.389]                           ns <- base::getNamespace("future")
[10:33:27.389]                           version <- ns[[".package"]][["version"]]
[10:33:27.389]                           if (is.null(version)) 
[10:33:27.389]                             version <- utils::packageVersion("future")
[10:33:27.389]                         }
[10:33:27.389]                         else {
[10:33:27.389]                           version <- NULL
[10:33:27.389]                         }
[10:33:27.389]                         if (!has_future || version < "1.8.0") {
[10:33:27.389]                           info <- base::c(r_version = base::gsub("R version ", 
[10:33:27.389]                             "", base::R.version$version.string), 
[10:33:27.389]                             platform = base::sprintf("%s (%s-bit)", 
[10:33:27.389]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:27.389]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:27.389]                               "release", "version")], collapse = " "), 
[10:33:27.389]                             hostname = base::Sys.info()[["nodename"]])
[10:33:27.389]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:33:27.389]                             info)
[10:33:27.389]                           info <- base::paste(info, collapse = "; ")
[10:33:27.389]                           if (!has_future) {
[10:33:27.389]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:27.389]                               info)
[10:33:27.389]                           }
[10:33:27.389]                           else {
[10:33:27.389]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:27.389]                               info, version)
[10:33:27.389]                           }
[10:33:27.389]                           base::stop(msg)
[10:33:27.389]                         }
[10:33:27.389]                       })
[10:33:27.389]                     }
[10:33:27.389]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:33:27.389]                     base::options(mc.cores = 1L)
[10:33:27.389]                   }
[10:33:27.389]                   ...future.strategy.old <- future::plan("list")
[10:33:27.389]                   options(future.plan = NULL)
[10:33:27.389]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:27.389]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:33:27.389]                 }
[10:33:27.389]                 ...future.workdir <- getwd()
[10:33:27.389]             }
[10:33:27.389]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:27.389]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:27.389]         }
[10:33:27.389]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:33:27.389]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:27.389]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:33:27.389]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:33:27.389]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:27.389]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:27.389]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:27.389]             base::names(...future.oldOptions))
[10:33:27.389]     }
[10:33:27.389]     if (FALSE) {
[10:33:27.389]     }
[10:33:27.389]     else {
[10:33:27.389]         if (TRUE) {
[10:33:27.389]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:27.389]                 open = "w")
[10:33:27.389]         }
[10:33:27.389]         else {
[10:33:27.389]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:27.389]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:27.389]         }
[10:33:27.389]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:27.389]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:27.389]             base::sink(type = "output", split = FALSE)
[10:33:27.389]             base::close(...future.stdout)
[10:33:27.389]         }, add = TRUE)
[10:33:27.389]     }
[10:33:27.389]     ...future.frame <- base::sys.nframe()
[10:33:27.389]     ...future.conditions <- base::list()
[10:33:27.389]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:27.389]     if (FALSE) {
[10:33:27.389]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:27.389]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:27.389]     }
[10:33:27.389]     ...future.result <- base::tryCatch({
[10:33:27.389]         base::withCallingHandlers({
[10:33:27.389]             ...future.value <- base::withVisible(base::local({
[10:33:27.389]                 ...future.makeSendCondition <- base::local({
[10:33:27.389]                   sendCondition <- NULL
[10:33:27.389]                   function(frame = 1L) {
[10:33:27.389]                     if (is.function(sendCondition)) 
[10:33:27.389]                       return(sendCondition)
[10:33:27.389]                     ns <- getNamespace("parallel")
[10:33:27.389]                     if (exists("sendData", mode = "function", 
[10:33:27.389]                       envir = ns)) {
[10:33:27.389]                       parallel_sendData <- get("sendData", mode = "function", 
[10:33:27.389]                         envir = ns)
[10:33:27.389]                       envir <- sys.frame(frame)
[10:33:27.389]                       master <- NULL
[10:33:27.389]                       while (!identical(envir, .GlobalEnv) && 
[10:33:27.389]                         !identical(envir, emptyenv())) {
[10:33:27.389]                         if (exists("master", mode = "list", envir = envir, 
[10:33:27.389]                           inherits = FALSE)) {
[10:33:27.389]                           master <- get("master", mode = "list", 
[10:33:27.389]                             envir = envir, inherits = FALSE)
[10:33:27.389]                           if (inherits(master, c("SOCKnode", 
[10:33:27.389]                             "SOCK0node"))) {
[10:33:27.389]                             sendCondition <<- function(cond) {
[10:33:27.389]                               data <- list(type = "VALUE", value = cond, 
[10:33:27.389]                                 success = TRUE)
[10:33:27.389]                               parallel_sendData(master, data)
[10:33:27.389]                             }
[10:33:27.389]                             return(sendCondition)
[10:33:27.389]                           }
[10:33:27.389]                         }
[10:33:27.389]                         frame <- frame + 1L
[10:33:27.389]                         envir <- sys.frame(frame)
[10:33:27.389]                       }
[10:33:27.389]                     }
[10:33:27.389]                     sendCondition <<- function(cond) NULL
[10:33:27.389]                   }
[10:33:27.389]                 })
[10:33:27.389]                 withCallingHandlers({
[10:33:27.389]                   {
[10:33:27.389]                     gc()
[10:33:27.389]                   }
[10:33:27.389]                 }, immediateCondition = function(cond) {
[10:33:27.389]                   sendCondition <- ...future.makeSendCondition()
[10:33:27.389]                   sendCondition(cond)
[10:33:27.389]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:27.389]                   {
[10:33:27.389]                     inherits <- base::inherits
[10:33:27.389]                     invokeRestart <- base::invokeRestart
[10:33:27.389]                     is.null <- base::is.null
[10:33:27.389]                     muffled <- FALSE
[10:33:27.389]                     if (inherits(cond, "message")) {
[10:33:27.389]                       muffled <- grepl(pattern, "muffleMessage")
[10:33:27.389]                       if (muffled) 
[10:33:27.389]                         invokeRestart("muffleMessage")
[10:33:27.389]                     }
[10:33:27.389]                     else if (inherits(cond, "warning")) {
[10:33:27.389]                       muffled <- grepl(pattern, "muffleWarning")
[10:33:27.389]                       if (muffled) 
[10:33:27.389]                         invokeRestart("muffleWarning")
[10:33:27.389]                     }
[10:33:27.389]                     else if (inherits(cond, "condition")) {
[10:33:27.389]                       if (!is.null(pattern)) {
[10:33:27.389]                         computeRestarts <- base::computeRestarts
[10:33:27.389]                         grepl <- base::grepl
[10:33:27.389]                         restarts <- computeRestarts(cond)
[10:33:27.389]                         for (restart in restarts) {
[10:33:27.389]                           name <- restart$name
[10:33:27.389]                           if (is.null(name)) 
[10:33:27.389]                             next
[10:33:27.389]                           if (!grepl(pattern, name)) 
[10:33:27.389]                             next
[10:33:27.389]                           invokeRestart(restart)
[10:33:27.389]                           muffled <- TRUE
[10:33:27.389]                           break
[10:33:27.389]                         }
[10:33:27.389]                       }
[10:33:27.389]                     }
[10:33:27.389]                     invisible(muffled)
[10:33:27.389]                   }
[10:33:27.389]                   muffleCondition(cond)
[10:33:27.389]                 })
[10:33:27.389]             }))
[10:33:27.389]             future::FutureResult(value = ...future.value$value, 
[10:33:27.389]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:27.389]                   ...future.rng), globalenv = if (FALSE) 
[10:33:27.389]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:27.389]                     ...future.globalenv.names))
[10:33:27.389]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:27.389]         }, condition = base::local({
[10:33:27.389]             c <- base::c
[10:33:27.389]             inherits <- base::inherits
[10:33:27.389]             invokeRestart <- base::invokeRestart
[10:33:27.389]             length <- base::length
[10:33:27.389]             list <- base::list
[10:33:27.389]             seq.int <- base::seq.int
[10:33:27.389]             signalCondition <- base::signalCondition
[10:33:27.389]             sys.calls <- base::sys.calls
[10:33:27.389]             `[[` <- base::`[[`
[10:33:27.389]             `+` <- base::`+`
[10:33:27.389]             `<<-` <- base::`<<-`
[10:33:27.389]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:27.389]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:27.389]                   3L)]
[10:33:27.389]             }
[10:33:27.389]             function(cond) {
[10:33:27.389]                 is_error <- inherits(cond, "error")
[10:33:27.389]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:27.389]                   NULL)
[10:33:27.389]                 if (is_error) {
[10:33:27.389]                   sessionInformation <- function() {
[10:33:27.389]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:27.389]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:27.389]                       search = base::search(), system = base::Sys.info())
[10:33:27.389]                   }
[10:33:27.389]                   ...future.conditions[[length(...future.conditions) + 
[10:33:27.389]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:27.389]                     cond$call), session = sessionInformation(), 
[10:33:27.389]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:27.389]                   signalCondition(cond)
[10:33:27.389]                 }
[10:33:27.389]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:27.389]                 "immediateCondition"))) {
[10:33:27.389]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:27.389]                   ...future.conditions[[length(...future.conditions) + 
[10:33:27.389]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:27.389]                   if (TRUE && !signal) {
[10:33:27.389]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:27.389]                     {
[10:33:27.389]                       inherits <- base::inherits
[10:33:27.389]                       invokeRestart <- base::invokeRestart
[10:33:27.389]                       is.null <- base::is.null
[10:33:27.389]                       muffled <- FALSE
[10:33:27.389]                       if (inherits(cond, "message")) {
[10:33:27.389]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:27.389]                         if (muffled) 
[10:33:27.389]                           invokeRestart("muffleMessage")
[10:33:27.389]                       }
[10:33:27.389]                       else if (inherits(cond, "warning")) {
[10:33:27.389]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:27.389]                         if (muffled) 
[10:33:27.389]                           invokeRestart("muffleWarning")
[10:33:27.389]                       }
[10:33:27.389]                       else if (inherits(cond, "condition")) {
[10:33:27.389]                         if (!is.null(pattern)) {
[10:33:27.389]                           computeRestarts <- base::computeRestarts
[10:33:27.389]                           grepl <- base::grepl
[10:33:27.389]                           restarts <- computeRestarts(cond)
[10:33:27.389]                           for (restart in restarts) {
[10:33:27.389]                             name <- restart$name
[10:33:27.389]                             if (is.null(name)) 
[10:33:27.389]                               next
[10:33:27.389]                             if (!grepl(pattern, name)) 
[10:33:27.389]                               next
[10:33:27.389]                             invokeRestart(restart)
[10:33:27.389]                             muffled <- TRUE
[10:33:27.389]                             break
[10:33:27.389]                           }
[10:33:27.389]                         }
[10:33:27.389]                       }
[10:33:27.389]                       invisible(muffled)
[10:33:27.389]                     }
[10:33:27.389]                     muffleCondition(cond, pattern = "^muffle")
[10:33:27.389]                   }
[10:33:27.389]                 }
[10:33:27.389]                 else {
[10:33:27.389]                   if (TRUE) {
[10:33:27.389]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:27.389]                     {
[10:33:27.389]                       inherits <- base::inherits
[10:33:27.389]                       invokeRestart <- base::invokeRestart
[10:33:27.389]                       is.null <- base::is.null
[10:33:27.389]                       muffled <- FALSE
[10:33:27.389]                       if (inherits(cond, "message")) {
[10:33:27.389]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:27.389]                         if (muffled) 
[10:33:27.389]                           invokeRestart("muffleMessage")
[10:33:27.389]                       }
[10:33:27.389]                       else if (inherits(cond, "warning")) {
[10:33:27.389]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:27.389]                         if (muffled) 
[10:33:27.389]                           invokeRestart("muffleWarning")
[10:33:27.389]                       }
[10:33:27.389]                       else if (inherits(cond, "condition")) {
[10:33:27.389]                         if (!is.null(pattern)) {
[10:33:27.389]                           computeRestarts <- base::computeRestarts
[10:33:27.389]                           grepl <- base::grepl
[10:33:27.389]                           restarts <- computeRestarts(cond)
[10:33:27.389]                           for (restart in restarts) {
[10:33:27.389]                             name <- restart$name
[10:33:27.389]                             if (is.null(name)) 
[10:33:27.389]                               next
[10:33:27.389]                             if (!grepl(pattern, name)) 
[10:33:27.389]                               next
[10:33:27.389]                             invokeRestart(restart)
[10:33:27.389]                             muffled <- TRUE
[10:33:27.389]                             break
[10:33:27.389]                           }
[10:33:27.389]                         }
[10:33:27.389]                       }
[10:33:27.389]                       invisible(muffled)
[10:33:27.389]                     }
[10:33:27.389]                     muffleCondition(cond, pattern = "^muffle")
[10:33:27.389]                   }
[10:33:27.389]                 }
[10:33:27.389]             }
[10:33:27.389]         }))
[10:33:27.389]     }, error = function(ex) {
[10:33:27.389]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:27.389]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:27.389]                 ...future.rng), started = ...future.startTime, 
[10:33:27.389]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:27.389]             version = "1.8"), class = "FutureResult")
[10:33:27.389]     }, finally = {
[10:33:27.389]         if (!identical(...future.workdir, getwd())) 
[10:33:27.389]             setwd(...future.workdir)
[10:33:27.389]         {
[10:33:27.389]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:27.389]                 ...future.oldOptions$nwarnings <- NULL
[10:33:27.389]             }
[10:33:27.389]             base::options(...future.oldOptions)
[10:33:27.389]             if (.Platform$OS.type == "windows") {
[10:33:27.389]                 old_names <- names(...future.oldEnvVars)
[10:33:27.389]                 envs <- base::Sys.getenv()
[10:33:27.389]                 names <- names(envs)
[10:33:27.389]                 common <- intersect(names, old_names)
[10:33:27.389]                 added <- setdiff(names, old_names)
[10:33:27.389]                 removed <- setdiff(old_names, names)
[10:33:27.389]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:27.389]                   envs[common]]
[10:33:27.389]                 NAMES <- toupper(changed)
[10:33:27.389]                 args <- list()
[10:33:27.389]                 for (kk in seq_along(NAMES)) {
[10:33:27.389]                   name <- changed[[kk]]
[10:33:27.389]                   NAME <- NAMES[[kk]]
[10:33:27.389]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:27.389]                     next
[10:33:27.389]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:27.389]                 }
[10:33:27.389]                 NAMES <- toupper(added)
[10:33:27.389]                 for (kk in seq_along(NAMES)) {
[10:33:27.389]                   name <- added[[kk]]
[10:33:27.389]                   NAME <- NAMES[[kk]]
[10:33:27.389]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:27.389]                     next
[10:33:27.389]                   args[[name]] <- ""
[10:33:27.389]                 }
[10:33:27.389]                 NAMES <- toupper(removed)
[10:33:27.389]                 for (kk in seq_along(NAMES)) {
[10:33:27.389]                   name <- removed[[kk]]
[10:33:27.389]                   NAME <- NAMES[[kk]]
[10:33:27.389]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:27.389]                     next
[10:33:27.389]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:27.389]                 }
[10:33:27.389]                 if (length(args) > 0) 
[10:33:27.389]                   base::do.call(base::Sys.setenv, args = args)
[10:33:27.389]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:27.389]             }
[10:33:27.389]             else {
[10:33:27.389]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:27.389]             }
[10:33:27.389]             {
[10:33:27.389]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:27.389]                   0L) {
[10:33:27.389]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:27.389]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:27.389]                   base::options(opts)
[10:33:27.389]                 }
[10:33:27.389]                 {
[10:33:27.389]                   {
[10:33:27.389]                     base::options(mc.cores = ...future.mc.cores.old)
[10:33:27.389]                     NULL
[10:33:27.389]                   }
[10:33:27.389]                   options(future.plan = NULL)
[10:33:27.389]                   if (is.na(NA_character_)) 
[10:33:27.389]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:27.389]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:27.389]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:27.389]                     .init = FALSE)
[10:33:27.389]                 }
[10:33:27.389]             }
[10:33:27.389]         }
[10:33:27.389]     })
[10:33:27.389]     if (TRUE) {
[10:33:27.389]         base::sink(type = "output", split = FALSE)
[10:33:27.389]         if (TRUE) {
[10:33:27.389]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:27.389]         }
[10:33:27.389]         else {
[10:33:27.389]             ...future.result["stdout"] <- base::list(NULL)
[10:33:27.389]         }
[10:33:27.389]         base::close(...future.stdout)
[10:33:27.389]         ...future.stdout <- NULL
[10:33:27.389]     }
[10:33:27.389]     ...future.result$conditions <- ...future.conditions
[10:33:27.389]     ...future.result$finished <- base::Sys.time()
[10:33:27.389]     ...future.result
[10:33:27.389] }
[10:33:27.391] MultisessionFuture started
[10:33:27.392] - Launch lazy future ... done
[10:33:27.392] run() for ‘MultisessionFuture’ ... done
> v <- value(f)
[10:33:27.392] result() for ClusterFuture ...
[10:33:27.392] receiveMessageFromWorker() for ClusterFuture ...
[10:33:27.392] - Validating connection of MultisessionFuture
[10:33:27.455] - received message: FutureResult
[10:33:27.455] - Received FutureResult
[10:33:27.456] - Erased future from FutureRegistry
[10:33:27.456] result() for ClusterFuture ...
[10:33:27.456] - result already collected: FutureResult
[10:33:27.456] result() for ClusterFuture ... done
[10:33:27.456] receiveMessageFromWorker() for ClusterFuture ... done
[10:33:27.456] result() for ClusterFuture ... done
[10:33:27.456] result() for ClusterFuture ...
[10:33:27.456] - result already collected: FutureResult
[10:33:27.456] result() for ClusterFuture ... done
> print(v)
         used (Mb) gc trigger  (Mb) max used  (Mb)
Ncells 394918 21.1     878051  46.9   664331  35.5
Vcells 703915  5.4   13457143 102.7 15780323 120.4
> 
> message("*** multisession(..., gc = TRUE) ... TRUE")
*** multisession(..., gc = TRUE) ... TRUE
> 
> 
> message("*** multisession(...) - stopping with plan() change ...")
*** multisession(...) - stopping with plan() change ...
>   
> plan(multisession, workers = 2L)
[10:33:27.457] plan(): Setting new future strategy stack:
[10:33:27.457] List of future strategies:
[10:33:27.457] 1. multisession:
[10:33:27.457]    - args: function (..., workers = 2L, envir = parent.frame())
[10:33:27.457]    - tweaked: TRUE
[10:33:27.457]    - call: plan(multisession, workers = 2L)
[10:33:27.458] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:33:27.458] multisession:
[10:33:27.458] - args: function (..., workers = 2L, envir = parent.frame())
[10:33:27.458] - tweaked: TRUE
[10:33:27.458] - call: plan(multisession, workers = 2L)
[10:33:27.459] getGlobalsAndPackages() ...
[10:33:27.459] Not searching for globals
[10:33:27.459] - globals: [0] <none>
[10:33:27.459] getGlobalsAndPackages() ... DONE
[10:33:27.460] [local output] makeClusterPSOCK() ...
[10:33:27.464] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[10:33:27.464] [local output] Base port: 11858
[10:33:27.464] [local output] Getting setup options for 2 cluster nodes ...
[10:33:27.464] [local output]  - Node 1 of 2 ...
[10:33:27.465] [local output] localMachine=TRUE => revtunnel=FALSE

[10:33:27.465] [local output] Rscript port: 11858

[10:33:27.466] [local output]  - Node 2 of 2 ...
[10:33:27.466] [local output] localMachine=TRUE => revtunnel=FALSE

[10:33:27.466] [local output] Rscript port: 11858

[10:33:27.467] [local output] Getting setup options for 2 cluster nodes ... done
[10:33:27.467] [local output]  - Parallel setup requested for some PSOCK nodes
[10:33:27.467] [local output] Setting up PSOCK nodes in parallel
[10:33:27.467] List of 36
[10:33:27.467]  $ worker          : chr "localhost"
[10:33:27.467]   ..- attr(*, "localhost")= logi TRUE
[10:33:27.467]  $ master          : chr "localhost"
[10:33:27.467]  $ port            : int 11858
[10:33:27.467]  $ connectTimeout  : num 120
[10:33:27.467]  $ timeout         : num 2592000
[10:33:27.467]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[10:33:27.467]  $ homogeneous     : logi TRUE
[10:33:27.467]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[10:33:27.467]  $ rscript_envs    : NULL
[10:33:27.467]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:33:27.467]  $ rscript_startup : NULL
[10:33:27.467]  $ rscript_sh      : chr "sh"
[10:33:27.467]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:33:27.467]  $ methods         : logi TRUE
[10:33:27.467]  $ socketOptions   : chr "no-delay"
[10:33:27.467]  $ useXDR          : logi FALSE
[10:33:27.467]  $ outfile         : chr "/dev/null"
[10:33:27.467]  $ renice          : int NA
[10:33:27.467]  $ rshcmd          : NULL
[10:33:27.467]  $ user            : chr(0) 
[10:33:27.467]  $ revtunnel       : logi FALSE
[10:33:27.467]  $ rshlogfile      : NULL
[10:33:27.467]  $ rshopts         : chr(0) 
[10:33:27.467]  $ rank            : int 1
[10:33:27.467]  $ manual          : logi FALSE
[10:33:27.467]  $ dryrun          : logi FALSE
[10:33:27.467]  $ quiet           : logi FALSE
[10:33:27.467]  $ setup_strategy  : chr "parallel"
[10:33:27.467]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:33:27.467]  $ pidfile         : chr "/tmp/RtmpaAVBkE/worker.rank=1.parallelly.parent=85325.14d4d6d87cdb0.pid"
[10:33:27.467]  $ rshcmd_label    : NULL
[10:33:27.467]  $ rsh_call        : NULL
[10:33:27.467]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:33:27.467]  $ localMachine    : logi TRUE
[10:33:27.467]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[10:33:27.467]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[10:33:27.467]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[10:33:27.467]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[10:33:27.467]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[10:33:27.467]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[10:33:27.467]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[10:33:27.467]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[10:33:27.467]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[10:33:27.467]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[10:33:27.467]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[10:33:27.467]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[10:33:27.467]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[10:33:27.467]  $ arguments       :List of 28
[10:33:27.467]   ..$ worker          : chr "localhost"
[10:33:27.467]   ..$ master          : NULL
[10:33:27.467]   ..$ port            : int 11858
[10:33:27.467]   ..$ connectTimeout  : num 120
[10:33:27.467]   ..$ timeout         : num 2592000
[10:33:27.467]   ..$ rscript         : NULL
[10:33:27.467]   ..$ homogeneous     : NULL
[10:33:27.467]   ..$ rscript_args    : NULL
[10:33:27.467]   ..$ rscript_envs    : NULL
[10:33:27.467]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:33:27.467]   ..$ rscript_startup : NULL
[10:33:27.467]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[10:33:27.467]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:33:27.467]   ..$ methods         : logi TRUE
[10:33:27.467]   ..$ socketOptions   : chr "no-delay"
[10:33:27.467]   ..$ useXDR          : logi FALSE
[10:33:27.467]   ..$ outfile         : chr "/dev/null"
[10:33:27.467]   ..$ renice          : int NA
[10:33:27.467]   ..$ rshcmd          : NULL
[10:33:27.467]   ..$ user            : NULL
[10:33:27.467]   ..$ revtunnel       : logi NA
[10:33:27.467]   ..$ rshlogfile      : NULL
[10:33:27.467]   ..$ rshopts         : NULL
[10:33:27.467]   ..$ rank            : int 1
[10:33:27.467]   ..$ manual          : logi FALSE
[10:33:27.467]   ..$ dryrun          : logi FALSE
[10:33:27.467]   ..$ quiet           : logi FALSE
[10:33:27.467]   ..$ setup_strategy  : chr "parallel"
[10:33:27.467]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[10:33:27.485] [local output] System call to launch all workers:
[10:33:27.485] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpaAVBkE/worker.rank=1.parallelly.parent=85325.14d4d6d87cdb0.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11858 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[10:33:27.485] [local output] Starting PSOCK main server
[10:33:27.486] [local output] Workers launched
[10:33:27.486] [local output] Waiting for workers to connect back
[10:33:27.487]  - [local output] 0 workers out of 2 ready
[10:33:27.736]  - [local output] 0 workers out of 2 ready
[10:33:27.737]  - [local output] 1 workers out of 2 ready
[10:33:27.738]  - [local output] 1 workers out of 2 ready
[10:33:27.739]  - [local output] 2 workers out of 2 ready
[10:33:27.739] [local output] Launching of workers completed
[10:33:27.739] [local output] Collecting session information from workers
[10:33:27.740] [local output]  - Worker #1 of 2
[10:33:27.740] [local output]  - Worker #2 of 2
[10:33:27.740] [local output] makeClusterPSOCK() ... done
[10:33:27.751] Packages needed by the future expression (n = 0): <none>
[10:33:27.751] Packages needed by future strategies (n = 0): <none>
[10:33:27.751] {
[10:33:27.751]     {
[10:33:27.751]         {
[10:33:27.751]             ...future.startTime <- base::Sys.time()
[10:33:27.751]             {
[10:33:27.751]                 {
[10:33:27.751]                   {
[10:33:27.751]                     {
[10:33:27.751]                       base::local({
[10:33:27.751]                         has_future <- base::requireNamespace("future", 
[10:33:27.751]                           quietly = TRUE)
[10:33:27.751]                         if (has_future) {
[10:33:27.751]                           ns <- base::getNamespace("future")
[10:33:27.751]                           version <- ns[[".package"]][["version"]]
[10:33:27.751]                           if (is.null(version)) 
[10:33:27.751]                             version <- utils::packageVersion("future")
[10:33:27.751]                         }
[10:33:27.751]                         else {
[10:33:27.751]                           version <- NULL
[10:33:27.751]                         }
[10:33:27.751]                         if (!has_future || version < "1.8.0") {
[10:33:27.751]                           info <- base::c(r_version = base::gsub("R version ", 
[10:33:27.751]                             "", base::R.version$version.string), 
[10:33:27.751]                             platform = base::sprintf("%s (%s-bit)", 
[10:33:27.751]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:27.751]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:27.751]                               "release", "version")], collapse = " "), 
[10:33:27.751]                             hostname = base::Sys.info()[["nodename"]])
[10:33:27.751]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:33:27.751]                             info)
[10:33:27.751]                           info <- base::paste(info, collapse = "; ")
[10:33:27.751]                           if (!has_future) {
[10:33:27.751]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:27.751]                               info)
[10:33:27.751]                           }
[10:33:27.751]                           else {
[10:33:27.751]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:27.751]                               info, version)
[10:33:27.751]                           }
[10:33:27.751]                           base::stop(msg)
[10:33:27.751]                         }
[10:33:27.751]                       })
[10:33:27.751]                     }
[10:33:27.751]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:33:27.751]                     base::options(mc.cores = 1L)
[10:33:27.751]                   }
[10:33:27.751]                   ...future.strategy.old <- future::plan("list")
[10:33:27.751]                   options(future.plan = NULL)
[10:33:27.751]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:27.751]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:33:27.751]                 }
[10:33:27.751]                 ...future.workdir <- getwd()
[10:33:27.751]             }
[10:33:27.751]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:27.751]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:27.751]         }
[10:33:27.751]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:33:27.751]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:27.751]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:33:27.751]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:33:27.751]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:27.751]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:27.751]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:27.751]             base::names(...future.oldOptions))
[10:33:27.751]     }
[10:33:27.751]     if (FALSE) {
[10:33:27.751]     }
[10:33:27.751]     else {
[10:33:27.751]         if (TRUE) {
[10:33:27.751]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:27.751]                 open = "w")
[10:33:27.751]         }
[10:33:27.751]         else {
[10:33:27.751]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:27.751]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:27.751]         }
[10:33:27.751]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:27.751]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:27.751]             base::sink(type = "output", split = FALSE)
[10:33:27.751]             base::close(...future.stdout)
[10:33:27.751]         }, add = TRUE)
[10:33:27.751]     }
[10:33:27.751]     ...future.frame <- base::sys.nframe()
[10:33:27.751]     ...future.conditions <- base::list()
[10:33:27.751]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:27.751]     if (FALSE) {
[10:33:27.751]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:27.751]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:27.751]     }
[10:33:27.751]     ...future.result <- base::tryCatch({
[10:33:27.751]         base::withCallingHandlers({
[10:33:27.751]             ...future.value <- base::withVisible(base::local({
[10:33:27.751]                 ...future.makeSendCondition <- base::local({
[10:33:27.751]                   sendCondition <- NULL
[10:33:27.751]                   function(frame = 1L) {
[10:33:27.751]                     if (is.function(sendCondition)) 
[10:33:27.751]                       return(sendCondition)
[10:33:27.751]                     ns <- getNamespace("parallel")
[10:33:27.751]                     if (exists("sendData", mode = "function", 
[10:33:27.751]                       envir = ns)) {
[10:33:27.751]                       parallel_sendData <- get("sendData", mode = "function", 
[10:33:27.751]                         envir = ns)
[10:33:27.751]                       envir <- sys.frame(frame)
[10:33:27.751]                       master <- NULL
[10:33:27.751]                       while (!identical(envir, .GlobalEnv) && 
[10:33:27.751]                         !identical(envir, emptyenv())) {
[10:33:27.751]                         if (exists("master", mode = "list", envir = envir, 
[10:33:27.751]                           inherits = FALSE)) {
[10:33:27.751]                           master <- get("master", mode = "list", 
[10:33:27.751]                             envir = envir, inherits = FALSE)
[10:33:27.751]                           if (inherits(master, c("SOCKnode", 
[10:33:27.751]                             "SOCK0node"))) {
[10:33:27.751]                             sendCondition <<- function(cond) {
[10:33:27.751]                               data <- list(type = "VALUE", value = cond, 
[10:33:27.751]                                 success = TRUE)
[10:33:27.751]                               parallel_sendData(master, data)
[10:33:27.751]                             }
[10:33:27.751]                             return(sendCondition)
[10:33:27.751]                           }
[10:33:27.751]                         }
[10:33:27.751]                         frame <- frame + 1L
[10:33:27.751]                         envir <- sys.frame(frame)
[10:33:27.751]                       }
[10:33:27.751]                     }
[10:33:27.751]                     sendCondition <<- function(cond) NULL
[10:33:27.751]                   }
[10:33:27.751]                 })
[10:33:27.751]                 withCallingHandlers({
[10:33:27.751]                   NA
[10:33:27.751]                 }, immediateCondition = function(cond) {
[10:33:27.751]                   sendCondition <- ...future.makeSendCondition()
[10:33:27.751]                   sendCondition(cond)
[10:33:27.751]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:27.751]                   {
[10:33:27.751]                     inherits <- base::inherits
[10:33:27.751]                     invokeRestart <- base::invokeRestart
[10:33:27.751]                     is.null <- base::is.null
[10:33:27.751]                     muffled <- FALSE
[10:33:27.751]                     if (inherits(cond, "message")) {
[10:33:27.751]                       muffled <- grepl(pattern, "muffleMessage")
[10:33:27.751]                       if (muffled) 
[10:33:27.751]                         invokeRestart("muffleMessage")
[10:33:27.751]                     }
[10:33:27.751]                     else if (inherits(cond, "warning")) {
[10:33:27.751]                       muffled <- grepl(pattern, "muffleWarning")
[10:33:27.751]                       if (muffled) 
[10:33:27.751]                         invokeRestart("muffleWarning")
[10:33:27.751]                     }
[10:33:27.751]                     else if (inherits(cond, "condition")) {
[10:33:27.751]                       if (!is.null(pattern)) {
[10:33:27.751]                         computeRestarts <- base::computeRestarts
[10:33:27.751]                         grepl <- base::grepl
[10:33:27.751]                         restarts <- computeRestarts(cond)
[10:33:27.751]                         for (restart in restarts) {
[10:33:27.751]                           name <- restart$name
[10:33:27.751]                           if (is.null(name)) 
[10:33:27.751]                             next
[10:33:27.751]                           if (!grepl(pattern, name)) 
[10:33:27.751]                             next
[10:33:27.751]                           invokeRestart(restart)
[10:33:27.751]                           muffled <- TRUE
[10:33:27.751]                           break
[10:33:27.751]                         }
[10:33:27.751]                       }
[10:33:27.751]                     }
[10:33:27.751]                     invisible(muffled)
[10:33:27.751]                   }
[10:33:27.751]                   muffleCondition(cond)
[10:33:27.751]                 })
[10:33:27.751]             }))
[10:33:27.751]             future::FutureResult(value = ...future.value$value, 
[10:33:27.751]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:27.751]                   ...future.rng), globalenv = if (FALSE) 
[10:33:27.751]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:27.751]                     ...future.globalenv.names))
[10:33:27.751]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:27.751]         }, condition = base::local({
[10:33:27.751]             c <- base::c
[10:33:27.751]             inherits <- base::inherits
[10:33:27.751]             invokeRestart <- base::invokeRestart
[10:33:27.751]             length <- base::length
[10:33:27.751]             list <- base::list
[10:33:27.751]             seq.int <- base::seq.int
[10:33:27.751]             signalCondition <- base::signalCondition
[10:33:27.751]             sys.calls <- base::sys.calls
[10:33:27.751]             `[[` <- base::`[[`
[10:33:27.751]             `+` <- base::`+`
[10:33:27.751]             `<<-` <- base::`<<-`
[10:33:27.751]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:27.751]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:27.751]                   3L)]
[10:33:27.751]             }
[10:33:27.751]             function(cond) {
[10:33:27.751]                 is_error <- inherits(cond, "error")
[10:33:27.751]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:27.751]                   NULL)
[10:33:27.751]                 if (is_error) {
[10:33:27.751]                   sessionInformation <- function() {
[10:33:27.751]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:27.751]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:27.751]                       search = base::search(), system = base::Sys.info())
[10:33:27.751]                   }
[10:33:27.751]                   ...future.conditions[[length(...future.conditions) + 
[10:33:27.751]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:27.751]                     cond$call), session = sessionInformation(), 
[10:33:27.751]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:27.751]                   signalCondition(cond)
[10:33:27.751]                 }
[10:33:27.751]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:27.751]                 "immediateCondition"))) {
[10:33:27.751]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:27.751]                   ...future.conditions[[length(...future.conditions) + 
[10:33:27.751]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:27.751]                   if (TRUE && !signal) {
[10:33:27.751]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:27.751]                     {
[10:33:27.751]                       inherits <- base::inherits
[10:33:27.751]                       invokeRestart <- base::invokeRestart
[10:33:27.751]                       is.null <- base::is.null
[10:33:27.751]                       muffled <- FALSE
[10:33:27.751]                       if (inherits(cond, "message")) {
[10:33:27.751]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:27.751]                         if (muffled) 
[10:33:27.751]                           invokeRestart("muffleMessage")
[10:33:27.751]                       }
[10:33:27.751]                       else if (inherits(cond, "warning")) {
[10:33:27.751]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:27.751]                         if (muffled) 
[10:33:27.751]                           invokeRestart("muffleWarning")
[10:33:27.751]                       }
[10:33:27.751]                       else if (inherits(cond, "condition")) {
[10:33:27.751]                         if (!is.null(pattern)) {
[10:33:27.751]                           computeRestarts <- base::computeRestarts
[10:33:27.751]                           grepl <- base::grepl
[10:33:27.751]                           restarts <- computeRestarts(cond)
[10:33:27.751]                           for (restart in restarts) {
[10:33:27.751]                             name <- restart$name
[10:33:27.751]                             if (is.null(name)) 
[10:33:27.751]                               next
[10:33:27.751]                             if (!grepl(pattern, name)) 
[10:33:27.751]                               next
[10:33:27.751]                             invokeRestart(restart)
[10:33:27.751]                             muffled <- TRUE
[10:33:27.751]                             break
[10:33:27.751]                           }
[10:33:27.751]                         }
[10:33:27.751]                       }
[10:33:27.751]                       invisible(muffled)
[10:33:27.751]                     }
[10:33:27.751]                     muffleCondition(cond, pattern = "^muffle")
[10:33:27.751]                   }
[10:33:27.751]                 }
[10:33:27.751]                 else {
[10:33:27.751]                   if (TRUE) {
[10:33:27.751]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:27.751]                     {
[10:33:27.751]                       inherits <- base::inherits
[10:33:27.751]                       invokeRestart <- base::invokeRestart
[10:33:27.751]                       is.null <- base::is.null
[10:33:27.751]                       muffled <- FALSE
[10:33:27.751]                       if (inherits(cond, "message")) {
[10:33:27.751]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:27.751]                         if (muffled) 
[10:33:27.751]                           invokeRestart("muffleMessage")
[10:33:27.751]                       }
[10:33:27.751]                       else if (inherits(cond, "warning")) {
[10:33:27.751]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:27.751]                         if (muffled) 
[10:33:27.751]                           invokeRestart("muffleWarning")
[10:33:27.751]                       }
[10:33:27.751]                       else if (inherits(cond, "condition")) {
[10:33:27.751]                         if (!is.null(pattern)) {
[10:33:27.751]                           computeRestarts <- base::computeRestarts
[10:33:27.751]                           grepl <- base::grepl
[10:33:27.751]                           restarts <- computeRestarts(cond)
[10:33:27.751]                           for (restart in restarts) {
[10:33:27.751]                             name <- restart$name
[10:33:27.751]                             if (is.null(name)) 
[10:33:27.751]                               next
[10:33:27.751]                             if (!grepl(pattern, name)) 
[10:33:27.751]                               next
[10:33:27.751]                             invokeRestart(restart)
[10:33:27.751]                             muffled <- TRUE
[10:33:27.751]                             break
[10:33:27.751]                           }
[10:33:27.751]                         }
[10:33:27.751]                       }
[10:33:27.751]                       invisible(muffled)
[10:33:27.751]                     }
[10:33:27.751]                     muffleCondition(cond, pattern = "^muffle")
[10:33:27.751]                   }
[10:33:27.751]                 }
[10:33:27.751]             }
[10:33:27.751]         }))
[10:33:27.751]     }, error = function(ex) {
[10:33:27.751]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:27.751]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:27.751]                 ...future.rng), started = ...future.startTime, 
[10:33:27.751]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:27.751]             version = "1.8"), class = "FutureResult")
[10:33:27.751]     }, finally = {
[10:33:27.751]         if (!identical(...future.workdir, getwd())) 
[10:33:27.751]             setwd(...future.workdir)
[10:33:27.751]         {
[10:33:27.751]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:27.751]                 ...future.oldOptions$nwarnings <- NULL
[10:33:27.751]             }
[10:33:27.751]             base::options(...future.oldOptions)
[10:33:27.751]             if (.Platform$OS.type == "windows") {
[10:33:27.751]                 old_names <- names(...future.oldEnvVars)
[10:33:27.751]                 envs <- base::Sys.getenv()
[10:33:27.751]                 names <- names(envs)
[10:33:27.751]                 common <- intersect(names, old_names)
[10:33:27.751]                 added <- setdiff(names, old_names)
[10:33:27.751]                 removed <- setdiff(old_names, names)
[10:33:27.751]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:27.751]                   envs[common]]
[10:33:27.751]                 NAMES <- toupper(changed)
[10:33:27.751]                 args <- list()
[10:33:27.751]                 for (kk in seq_along(NAMES)) {
[10:33:27.751]                   name <- changed[[kk]]
[10:33:27.751]                   NAME <- NAMES[[kk]]
[10:33:27.751]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:27.751]                     next
[10:33:27.751]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:27.751]                 }
[10:33:27.751]                 NAMES <- toupper(added)
[10:33:27.751]                 for (kk in seq_along(NAMES)) {
[10:33:27.751]                   name <- added[[kk]]
[10:33:27.751]                   NAME <- NAMES[[kk]]
[10:33:27.751]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:27.751]                     next
[10:33:27.751]                   args[[name]] <- ""
[10:33:27.751]                 }
[10:33:27.751]                 NAMES <- toupper(removed)
[10:33:27.751]                 for (kk in seq_along(NAMES)) {
[10:33:27.751]                   name <- removed[[kk]]
[10:33:27.751]                   NAME <- NAMES[[kk]]
[10:33:27.751]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:27.751]                     next
[10:33:27.751]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:27.751]                 }
[10:33:27.751]                 if (length(args) > 0) 
[10:33:27.751]                   base::do.call(base::Sys.setenv, args = args)
[10:33:27.751]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:27.751]             }
[10:33:27.751]             else {
[10:33:27.751]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:27.751]             }
[10:33:27.751]             {
[10:33:27.751]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:27.751]                   0L) {
[10:33:27.751]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:27.751]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:27.751]                   base::options(opts)
[10:33:27.751]                 }
[10:33:27.751]                 {
[10:33:27.751]                   {
[10:33:27.751]                     base::options(mc.cores = ...future.mc.cores.old)
[10:33:27.751]                     NULL
[10:33:27.751]                   }
[10:33:27.751]                   options(future.plan = NULL)
[10:33:27.751]                   if (is.na(NA_character_)) 
[10:33:27.751]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:27.751]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:27.751]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:27.751]                     .init = FALSE)
[10:33:27.751]                 }
[10:33:27.751]             }
[10:33:27.751]         }
[10:33:27.751]     })
[10:33:27.751]     if (TRUE) {
[10:33:27.751]         base::sink(type = "output", split = FALSE)
[10:33:27.751]         if (TRUE) {
[10:33:27.751]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:27.751]         }
[10:33:27.751]         else {
[10:33:27.751]             ...future.result["stdout"] <- base::list(NULL)
[10:33:27.751]         }
[10:33:27.751]         base::close(...future.stdout)
[10:33:27.751]         ...future.stdout <- NULL
[10:33:27.751]     }
[10:33:27.751]     ...future.result$conditions <- ...future.conditions
[10:33:27.751]     ...future.result$finished <- base::Sys.time()
[10:33:27.751]     ...future.result
[10:33:27.751] }
[10:33:27.803] MultisessionFuture started
[10:33:27.804] result() for ClusterFuture ...
[10:33:27.804] receiveMessageFromWorker() for ClusterFuture ...
[10:33:27.804] - Validating connection of MultisessionFuture
[10:33:27.836] - received message: FutureResult
[10:33:27.837] - Received FutureResult
[10:33:27.837] - Erased future from FutureRegistry
[10:33:27.837] result() for ClusterFuture ...
[10:33:27.837] - result already collected: FutureResult
[10:33:27.837] result() for ClusterFuture ... done
[10:33:27.837] receiveMessageFromWorker() for ClusterFuture ... done
[10:33:27.837] result() for ClusterFuture ... done
[10:33:27.837] result() for ClusterFuture ...
[10:33:27.838] - result already collected: FutureResult
[10:33:27.838] result() for ClusterFuture ... done
[10:33:27.838] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[10:33:27.838] plan(): nbrOfWorkers() = 2
> f <- future(1L)
[10:33:27.838] getGlobalsAndPackages() ...
[10:33:27.838] Searching for globals...
[10:33:27.839] 
[10:33:27.839] Searching for globals ... DONE
[10:33:27.839] - globals: [0] <none>
[10:33:27.839] getGlobalsAndPackages() ... DONE
[10:33:27.839] run() for ‘Future’ ...
[10:33:27.839] - state: ‘created’
[10:33:27.839] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:33:27.850] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:33:27.850] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:33:27.850]   - Field: ‘node’
[10:33:27.850]   - Field: ‘label’
[10:33:27.850]   - Field: ‘local’
[10:33:27.850]   - Field: ‘owner’
[10:33:27.851]   - Field: ‘envir’
[10:33:27.851]   - Field: ‘workers’
[10:33:27.851]   - Field: ‘packages’
[10:33:27.851]   - Field: ‘gc’
[10:33:27.851]   - Field: ‘conditions’
[10:33:27.851]   - Field: ‘persistent’
[10:33:27.851]   - Field: ‘expr’
[10:33:27.851]   - Field: ‘uuid’
[10:33:27.851]   - Field: ‘seed’
[10:33:27.851]   - Field: ‘version’
[10:33:27.851]   - Field: ‘result’
[10:33:27.852]   - Field: ‘asynchronous’
[10:33:27.852]   - Field: ‘calls’
[10:33:27.852]   - Field: ‘globals’
[10:33:27.852]   - Field: ‘stdout’
[10:33:27.852]   - Field: ‘earlySignal’
[10:33:27.852]   - Field: ‘lazy’
[10:33:27.852]   - Field: ‘state’
[10:33:27.852] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:33:27.852] - Launch lazy future ...
[10:33:27.853] Packages needed by the future expression (n = 0): <none>
[10:33:27.853] Packages needed by future strategies (n = 0): <none>
[10:33:27.853] {
[10:33:27.853]     {
[10:33:27.853]         {
[10:33:27.853]             ...future.startTime <- base::Sys.time()
[10:33:27.853]             {
[10:33:27.853]                 {
[10:33:27.853]                   {
[10:33:27.853]                     {
[10:33:27.853]                       base::local({
[10:33:27.853]                         has_future <- base::requireNamespace("future", 
[10:33:27.853]                           quietly = TRUE)
[10:33:27.853]                         if (has_future) {
[10:33:27.853]                           ns <- base::getNamespace("future")
[10:33:27.853]                           version <- ns[[".package"]][["version"]]
[10:33:27.853]                           if (is.null(version)) 
[10:33:27.853]                             version <- utils::packageVersion("future")
[10:33:27.853]                         }
[10:33:27.853]                         else {
[10:33:27.853]                           version <- NULL
[10:33:27.853]                         }
[10:33:27.853]                         if (!has_future || version < "1.8.0") {
[10:33:27.853]                           info <- base::c(r_version = base::gsub("R version ", 
[10:33:27.853]                             "", base::R.version$version.string), 
[10:33:27.853]                             platform = base::sprintf("%s (%s-bit)", 
[10:33:27.853]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:27.853]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:27.853]                               "release", "version")], collapse = " "), 
[10:33:27.853]                             hostname = base::Sys.info()[["nodename"]])
[10:33:27.853]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:33:27.853]                             info)
[10:33:27.853]                           info <- base::paste(info, collapse = "; ")
[10:33:27.853]                           if (!has_future) {
[10:33:27.853]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:27.853]                               info)
[10:33:27.853]                           }
[10:33:27.853]                           else {
[10:33:27.853]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:27.853]                               info, version)
[10:33:27.853]                           }
[10:33:27.853]                           base::stop(msg)
[10:33:27.853]                         }
[10:33:27.853]                       })
[10:33:27.853]                     }
[10:33:27.853]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:33:27.853]                     base::options(mc.cores = 1L)
[10:33:27.853]                   }
[10:33:27.853]                   ...future.strategy.old <- future::plan("list")
[10:33:27.853]                   options(future.plan = NULL)
[10:33:27.853]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:27.853]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:33:27.853]                 }
[10:33:27.853]                 ...future.workdir <- getwd()
[10:33:27.853]             }
[10:33:27.853]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:27.853]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:27.853]         }
[10:33:27.853]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:33:27.853]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:27.853]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:33:27.853]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:33:27.853]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:27.853]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:27.853]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:27.853]             base::names(...future.oldOptions))
[10:33:27.853]     }
[10:33:27.853]     if (FALSE) {
[10:33:27.853]     }
[10:33:27.853]     else {
[10:33:27.853]         if (TRUE) {
[10:33:27.853]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:27.853]                 open = "w")
[10:33:27.853]         }
[10:33:27.853]         else {
[10:33:27.853]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:27.853]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:27.853]         }
[10:33:27.853]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:27.853]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:27.853]             base::sink(type = "output", split = FALSE)
[10:33:27.853]             base::close(...future.stdout)
[10:33:27.853]         }, add = TRUE)
[10:33:27.853]     }
[10:33:27.853]     ...future.frame <- base::sys.nframe()
[10:33:27.853]     ...future.conditions <- base::list()
[10:33:27.853]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:27.853]     if (FALSE) {
[10:33:27.853]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:27.853]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:27.853]     }
[10:33:27.853]     ...future.result <- base::tryCatch({
[10:33:27.853]         base::withCallingHandlers({
[10:33:27.853]             ...future.value <- base::withVisible(base::local({
[10:33:27.853]                 ...future.makeSendCondition <- base::local({
[10:33:27.853]                   sendCondition <- NULL
[10:33:27.853]                   function(frame = 1L) {
[10:33:27.853]                     if (is.function(sendCondition)) 
[10:33:27.853]                       return(sendCondition)
[10:33:27.853]                     ns <- getNamespace("parallel")
[10:33:27.853]                     if (exists("sendData", mode = "function", 
[10:33:27.853]                       envir = ns)) {
[10:33:27.853]                       parallel_sendData <- get("sendData", mode = "function", 
[10:33:27.853]                         envir = ns)
[10:33:27.853]                       envir <- sys.frame(frame)
[10:33:27.853]                       master <- NULL
[10:33:27.853]                       while (!identical(envir, .GlobalEnv) && 
[10:33:27.853]                         !identical(envir, emptyenv())) {
[10:33:27.853]                         if (exists("master", mode = "list", envir = envir, 
[10:33:27.853]                           inherits = FALSE)) {
[10:33:27.853]                           master <- get("master", mode = "list", 
[10:33:27.853]                             envir = envir, inherits = FALSE)
[10:33:27.853]                           if (inherits(master, c("SOCKnode", 
[10:33:27.853]                             "SOCK0node"))) {
[10:33:27.853]                             sendCondition <<- function(cond) {
[10:33:27.853]                               data <- list(type = "VALUE", value = cond, 
[10:33:27.853]                                 success = TRUE)
[10:33:27.853]                               parallel_sendData(master, data)
[10:33:27.853]                             }
[10:33:27.853]                             return(sendCondition)
[10:33:27.853]                           }
[10:33:27.853]                         }
[10:33:27.853]                         frame <- frame + 1L
[10:33:27.853]                         envir <- sys.frame(frame)
[10:33:27.853]                       }
[10:33:27.853]                     }
[10:33:27.853]                     sendCondition <<- function(cond) NULL
[10:33:27.853]                   }
[10:33:27.853]                 })
[10:33:27.853]                 withCallingHandlers({
[10:33:27.853]                   1L
[10:33:27.853]                 }, immediateCondition = function(cond) {
[10:33:27.853]                   sendCondition <- ...future.makeSendCondition()
[10:33:27.853]                   sendCondition(cond)
[10:33:27.853]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:27.853]                   {
[10:33:27.853]                     inherits <- base::inherits
[10:33:27.853]                     invokeRestart <- base::invokeRestart
[10:33:27.853]                     is.null <- base::is.null
[10:33:27.853]                     muffled <- FALSE
[10:33:27.853]                     if (inherits(cond, "message")) {
[10:33:27.853]                       muffled <- grepl(pattern, "muffleMessage")
[10:33:27.853]                       if (muffled) 
[10:33:27.853]                         invokeRestart("muffleMessage")
[10:33:27.853]                     }
[10:33:27.853]                     else if (inherits(cond, "warning")) {
[10:33:27.853]                       muffled <- grepl(pattern, "muffleWarning")
[10:33:27.853]                       if (muffled) 
[10:33:27.853]                         invokeRestart("muffleWarning")
[10:33:27.853]                     }
[10:33:27.853]                     else if (inherits(cond, "condition")) {
[10:33:27.853]                       if (!is.null(pattern)) {
[10:33:27.853]                         computeRestarts <- base::computeRestarts
[10:33:27.853]                         grepl <- base::grepl
[10:33:27.853]                         restarts <- computeRestarts(cond)
[10:33:27.853]                         for (restart in restarts) {
[10:33:27.853]                           name <- restart$name
[10:33:27.853]                           if (is.null(name)) 
[10:33:27.853]                             next
[10:33:27.853]                           if (!grepl(pattern, name)) 
[10:33:27.853]                             next
[10:33:27.853]                           invokeRestart(restart)
[10:33:27.853]                           muffled <- TRUE
[10:33:27.853]                           break
[10:33:27.853]                         }
[10:33:27.853]                       }
[10:33:27.853]                     }
[10:33:27.853]                     invisible(muffled)
[10:33:27.853]                   }
[10:33:27.853]                   muffleCondition(cond)
[10:33:27.853]                 })
[10:33:27.853]             }))
[10:33:27.853]             future::FutureResult(value = ...future.value$value, 
[10:33:27.853]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:27.853]                   ...future.rng), globalenv = if (FALSE) 
[10:33:27.853]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:27.853]                     ...future.globalenv.names))
[10:33:27.853]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:27.853]         }, condition = base::local({
[10:33:27.853]             c <- base::c
[10:33:27.853]             inherits <- base::inherits
[10:33:27.853]             invokeRestart <- base::invokeRestart
[10:33:27.853]             length <- base::length
[10:33:27.853]             list <- base::list
[10:33:27.853]             seq.int <- base::seq.int
[10:33:27.853]             signalCondition <- base::signalCondition
[10:33:27.853]             sys.calls <- base::sys.calls
[10:33:27.853]             `[[` <- base::`[[`
[10:33:27.853]             `+` <- base::`+`
[10:33:27.853]             `<<-` <- base::`<<-`
[10:33:27.853]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:27.853]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:27.853]                   3L)]
[10:33:27.853]             }
[10:33:27.853]             function(cond) {
[10:33:27.853]                 is_error <- inherits(cond, "error")
[10:33:27.853]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:27.853]                   NULL)
[10:33:27.853]                 if (is_error) {
[10:33:27.853]                   sessionInformation <- function() {
[10:33:27.853]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:27.853]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:27.853]                       search = base::search(), system = base::Sys.info())
[10:33:27.853]                   }
[10:33:27.853]                   ...future.conditions[[length(...future.conditions) + 
[10:33:27.853]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:27.853]                     cond$call), session = sessionInformation(), 
[10:33:27.853]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:27.853]                   signalCondition(cond)
[10:33:27.853]                 }
[10:33:27.853]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:27.853]                 "immediateCondition"))) {
[10:33:27.853]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:27.853]                   ...future.conditions[[length(...future.conditions) + 
[10:33:27.853]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:27.853]                   if (TRUE && !signal) {
[10:33:27.853]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:27.853]                     {
[10:33:27.853]                       inherits <- base::inherits
[10:33:27.853]                       invokeRestart <- base::invokeRestart
[10:33:27.853]                       is.null <- base::is.null
[10:33:27.853]                       muffled <- FALSE
[10:33:27.853]                       if (inherits(cond, "message")) {
[10:33:27.853]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:27.853]                         if (muffled) 
[10:33:27.853]                           invokeRestart("muffleMessage")
[10:33:27.853]                       }
[10:33:27.853]                       else if (inherits(cond, "warning")) {
[10:33:27.853]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:27.853]                         if (muffled) 
[10:33:27.853]                           invokeRestart("muffleWarning")
[10:33:27.853]                       }
[10:33:27.853]                       else if (inherits(cond, "condition")) {
[10:33:27.853]                         if (!is.null(pattern)) {
[10:33:27.853]                           computeRestarts <- base::computeRestarts
[10:33:27.853]                           grepl <- base::grepl
[10:33:27.853]                           restarts <- computeRestarts(cond)
[10:33:27.853]                           for (restart in restarts) {
[10:33:27.853]                             name <- restart$name
[10:33:27.853]                             if (is.null(name)) 
[10:33:27.853]                               next
[10:33:27.853]                             if (!grepl(pattern, name)) 
[10:33:27.853]                               next
[10:33:27.853]                             invokeRestart(restart)
[10:33:27.853]                             muffled <- TRUE
[10:33:27.853]                             break
[10:33:27.853]                           }
[10:33:27.853]                         }
[10:33:27.853]                       }
[10:33:27.853]                       invisible(muffled)
[10:33:27.853]                     }
[10:33:27.853]                     muffleCondition(cond, pattern = "^muffle")
[10:33:27.853]                   }
[10:33:27.853]                 }
[10:33:27.853]                 else {
[10:33:27.853]                   if (TRUE) {
[10:33:27.853]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:27.853]                     {
[10:33:27.853]                       inherits <- base::inherits
[10:33:27.853]                       invokeRestart <- base::invokeRestart
[10:33:27.853]                       is.null <- base::is.null
[10:33:27.853]                       muffled <- FALSE
[10:33:27.853]                       if (inherits(cond, "message")) {
[10:33:27.853]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:27.853]                         if (muffled) 
[10:33:27.853]                           invokeRestart("muffleMessage")
[10:33:27.853]                       }
[10:33:27.853]                       else if (inherits(cond, "warning")) {
[10:33:27.853]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:27.853]                         if (muffled) 
[10:33:27.853]                           invokeRestart("muffleWarning")
[10:33:27.853]                       }
[10:33:27.853]                       else if (inherits(cond, "condition")) {
[10:33:27.853]                         if (!is.null(pattern)) {
[10:33:27.853]                           computeRestarts <- base::computeRestarts
[10:33:27.853]                           grepl <- base::grepl
[10:33:27.853]                           restarts <- computeRestarts(cond)
[10:33:27.853]                           for (restart in restarts) {
[10:33:27.853]                             name <- restart$name
[10:33:27.853]                             if (is.null(name)) 
[10:33:27.853]                               next
[10:33:27.853]                             if (!grepl(pattern, name)) 
[10:33:27.853]                               next
[10:33:27.853]                             invokeRestart(restart)
[10:33:27.853]                             muffled <- TRUE
[10:33:27.853]                             break
[10:33:27.853]                           }
[10:33:27.853]                         }
[10:33:27.853]                       }
[10:33:27.853]                       invisible(muffled)
[10:33:27.853]                     }
[10:33:27.853]                     muffleCondition(cond, pattern = "^muffle")
[10:33:27.853]                   }
[10:33:27.853]                 }
[10:33:27.853]             }
[10:33:27.853]         }))
[10:33:27.853]     }, error = function(ex) {
[10:33:27.853]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:27.853]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:27.853]                 ...future.rng), started = ...future.startTime, 
[10:33:27.853]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:27.853]             version = "1.8"), class = "FutureResult")
[10:33:27.853]     }, finally = {
[10:33:27.853]         if (!identical(...future.workdir, getwd())) 
[10:33:27.853]             setwd(...future.workdir)
[10:33:27.853]         {
[10:33:27.853]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:27.853]                 ...future.oldOptions$nwarnings <- NULL
[10:33:27.853]             }
[10:33:27.853]             base::options(...future.oldOptions)
[10:33:27.853]             if (.Platform$OS.type == "windows") {
[10:33:27.853]                 old_names <- names(...future.oldEnvVars)
[10:33:27.853]                 envs <- base::Sys.getenv()
[10:33:27.853]                 names <- names(envs)
[10:33:27.853]                 common <- intersect(names, old_names)
[10:33:27.853]                 added <- setdiff(names, old_names)
[10:33:27.853]                 removed <- setdiff(old_names, names)
[10:33:27.853]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:27.853]                   envs[common]]
[10:33:27.853]                 NAMES <- toupper(changed)
[10:33:27.853]                 args <- list()
[10:33:27.853]                 for (kk in seq_along(NAMES)) {
[10:33:27.853]                   name <- changed[[kk]]
[10:33:27.853]                   NAME <- NAMES[[kk]]
[10:33:27.853]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:27.853]                     next
[10:33:27.853]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:27.853]                 }
[10:33:27.853]                 NAMES <- toupper(added)
[10:33:27.853]                 for (kk in seq_along(NAMES)) {
[10:33:27.853]                   name <- added[[kk]]
[10:33:27.853]                   NAME <- NAMES[[kk]]
[10:33:27.853]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:27.853]                     next
[10:33:27.853]                   args[[name]] <- ""
[10:33:27.853]                 }
[10:33:27.853]                 NAMES <- toupper(removed)
[10:33:27.853]                 for (kk in seq_along(NAMES)) {
[10:33:27.853]                   name <- removed[[kk]]
[10:33:27.853]                   NAME <- NAMES[[kk]]
[10:33:27.853]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:27.853]                     next
[10:33:27.853]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:27.853]                 }
[10:33:27.853]                 if (length(args) > 0) 
[10:33:27.853]                   base::do.call(base::Sys.setenv, args = args)
[10:33:27.853]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:27.853]             }
[10:33:27.853]             else {
[10:33:27.853]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:27.853]             }
[10:33:27.853]             {
[10:33:27.853]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:27.853]                   0L) {
[10:33:27.853]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:27.853]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:27.853]                   base::options(opts)
[10:33:27.853]                 }
[10:33:27.853]                 {
[10:33:27.853]                   {
[10:33:27.853]                     base::options(mc.cores = ...future.mc.cores.old)
[10:33:27.853]                     NULL
[10:33:27.853]                   }
[10:33:27.853]                   options(future.plan = NULL)
[10:33:27.853]                   if (is.na(NA_character_)) 
[10:33:27.853]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:27.853]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:27.853]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:27.853]                     .init = FALSE)
[10:33:27.853]                 }
[10:33:27.853]             }
[10:33:27.853]         }
[10:33:27.853]     })
[10:33:27.853]     if (TRUE) {
[10:33:27.853]         base::sink(type = "output", split = FALSE)
[10:33:27.853]         if (TRUE) {
[10:33:27.853]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:27.853]         }
[10:33:27.853]         else {
[10:33:27.853]             ...future.result["stdout"] <- base::list(NULL)
[10:33:27.853]         }
[10:33:27.853]         base::close(...future.stdout)
[10:33:27.853]         ...future.stdout <- NULL
[10:33:27.853]     }
[10:33:27.853]     ...future.result$conditions <- ...future.conditions
[10:33:27.853]     ...future.result$finished <- base::Sys.time()
[10:33:27.853]     ...future.result
[10:33:27.853] }
[10:33:27.856] MultisessionFuture started
[10:33:27.856] - Launch lazy future ... done
[10:33:27.856] run() for ‘MultisessionFuture’ ... done
> cl <- ClusterRegistry("get")
> stopifnot(inherits(cl, "cluster"), length(cl) >= 1L)
> 
> plan(sequential)
[10:33:27.856] plan(): Setting new future strategy stack:
[10:33:27.857] List of future strategies:
[10:33:27.857] 1. sequential:
[10:33:27.857]    - args: function (..., envir = parent.frame())
[10:33:27.857]    - tweaked: FALSE
[10:33:27.857]    - call: plan(sequential)
[10:33:27.857] plan(): nbrOfWorkers() = 1
> cl <- ClusterRegistry("get")
> stopifnot(is.null(cl), length(cl) == 0L)
>   
> message("*** multisession(...) - stopping with plan() change ... DONE")
*** multisession(...) - stopping with plan() change ... DONE
> 
> message("*** multisession() ... DONE")
*** multisession() ... DONE
> 
> source("incl/end.R")
[10:33:27.858] plan(): Setting new future strategy stack:
[10:33:27.858] List of future strategies:
[10:33:27.858] 1. FutureStrategy:
[10:33:27.858]    - args: function (..., envir = parent.frame())
[10:33:27.858]    - tweaked: FALSE
[10:33:27.858]    - call: future::plan(oplan)
[10:33:27.858] plan(): nbrOfWorkers() = 1
> 
