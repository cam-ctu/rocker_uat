
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[16:21:16.963] plan(): Setting new future strategy stack:
[16:21:16.964] List of future strategies:
[16:21:16.964] 1. sequential:
[16:21:16.964]    - args: function (..., envir = parent.frame())
[16:21:16.964]    - tweaked: FALSE
[16:21:16.964]    - call: future::plan("sequential")
[16:21:16.978] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> message("*** multisession() ...")
*** multisession() ...
> 
> for (cores in 1:availCores) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   message(sprintf("Testing with %d cores ...", cores))
+   options(mc.cores = cores)
+ 
+   ## No global variables
+   f <- multisession({
+     42L
+   })
+   print(f)
+   stopifnot(inherits(f, "ClusterFuture") || (inherits(f, "SequentialFuture") && f$lazy))
+ 
+   print(resolved(f))
+   y <- value(f)
+   print(y)
+   stopifnot(y == 42L)
+ 
+ 
+   ## A global variable
+   a <- 0
+   f <- multisession({
+     b <- 3
+     c <- 2
+     a * b * c
+   }, globals = TRUE)
+   print(f)
+ 
+ 
+   ## A multisession future is evaluated in a separate
+   ## R session process.  Changing the value of a global
+   ## variable should not affect the result of the
+   ## future.
+   a <- 7  ## Make sure globals are frozen
+   v <- value(f)
+   print(v)
+   stopifnot(v == 0)
+ 
+ 
+   message("*** multisession() with globals and blocking")
+   x <- listenv()
+   for (ii in 2:1) {
+     message(sprintf(" - Creating multisession future #%d ...", ii))
+     x[[ii]] <- multisession({ ii }, globals = TRUE)
+   }
+   message(sprintf(" - Resolving %d multisession futures", length(x)))
+   v <- sapply(x, FUN = value)
+   stopifnot(all(v == 1:2))
+ 
+ 
+   message("*** multisession() - workers inherit .libPaths()")
+ 
+   libs <- value(future(.libPaths()))
+   str(list(
+     main = .libPaths(),
+     workers = libs
+   ))
+   stopifnot(identical(libs, .libPaths()))
+ 
+   message("*** multisession() and errors")
+   f <- multisession({
+     stop("Whoops!")
+     1
+   })
+   print(f)
+   v <- value(f, signal = FALSE)
+   print(v)
+   stopifnot(inherits(v, "simpleError"))
+ 
+   res <- try(value(f), silent = TRUE)
+   print(res)
+   stopifnot(inherits(res, "try-error"))
+ 
+   ## Error is repeated
+   res <- try(value(f), silent = TRUE)
+   print(res)
+   stopifnot(inherits(res, "try-error"))
+ 
+   ## Custom error class
+   f <- multisession({
+     stop(structure(list(message = "boom"),
+                    class = c("MyError", "error", "condition")))
+   })
+   print(f)
+   v <- value(f, signal = FALSE)
+   print(v)
+   stopifnot(inherits(v, "error"), inherits(v, "MyError"))
+ 
+   ## Make sure error is signaled
+   res <- tryCatch(value(f), error = identity)
+   stopifnot(inherits(res, "error"))
+ 
+   ## Issue #200: Custom condition class attributes are lost
+   ## https://github.com/HenrikBengtsson/Wishlist-for-R/issues/57
+   ## stopifnot(inherits(res, "MyError"))    
+ 
+   message(sprintf("Testing with %d cores ... DONE", cores))
+ } ## for (cores ...)
Testing with 1 cores ...
[16:21:17.029] getGlobalsAndPackages() ...
[16:21:17.029] Searching for globals...
[16:21:17.033] - globals found: [1] ‘{’
[16:21:17.033] Searching for globals ... DONE
[16:21:17.033] Resolving globals: FALSE
[16:21:17.033] 
[16:21:17.033] 
[16:21:17.034] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: TRUE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 3e579109-592e-0b73-60c9-ee81fb289d87
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:21:17.035] Packages needed by the future expression (n = 0): <none>
[16:21:17.036] Packages needed by future strategies (n = 0): <none>
[16:21:17.036] {
[16:21:17.036]     {
[16:21:17.036]         {
[16:21:17.036]             ...future.startTime <- base::Sys.time()
[16:21:17.036]             {
[16:21:17.036]                 {
[16:21:17.036]                   {
[16:21:17.036]                     base::local({
[16:21:17.036]                       has_future <- base::requireNamespace("future", 
[16:21:17.036]                         quietly = TRUE)
[16:21:17.036]                       if (has_future) {
[16:21:17.036]                         ns <- base::getNamespace("future")
[16:21:17.036]                         version <- ns[[".package"]][["version"]]
[16:21:17.036]                         if (is.null(version)) 
[16:21:17.036]                           version <- utils::packageVersion("future")
[16:21:17.036]                       }
[16:21:17.036]                       else {
[16:21:17.036]                         version <- NULL
[16:21:17.036]                       }
[16:21:17.036]                       if (!has_future || version < "1.8.0") {
[16:21:17.036]                         info <- base::c(r_version = base::gsub("R version ", 
[16:21:17.036]                           "", base::R.version$version.string), 
[16:21:17.036]                           platform = base::sprintf("%s (%s-bit)", 
[16:21:17.036]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:17.036]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:17.036]                             "release", "version")], collapse = " "), 
[16:21:17.036]                           hostname = base::Sys.info()[["nodename"]])
[16:21:17.036]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:21:17.036]                           info)
[16:21:17.036]                         info <- base::paste(info, collapse = "; ")
[16:21:17.036]                         if (!has_future) {
[16:21:17.036]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:17.036]                             info)
[16:21:17.036]                         }
[16:21:17.036]                         else {
[16:21:17.036]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:17.036]                             info, version)
[16:21:17.036]                         }
[16:21:17.036]                         base::stop(msg)
[16:21:17.036]                       }
[16:21:17.036]                     })
[16:21:17.036]                   }
[16:21:17.036]                   ...future.strategy.old <- future::plan("list")
[16:21:17.036]                   options(future.plan = NULL)
[16:21:17.036]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:17.036]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:17.036]                 }
[16:21:17.036]                 ...future.workdir <- getwd()
[16:21:17.036]             }
[16:21:17.036]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:17.036]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:17.036]         }
[16:21:17.036]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:17.036]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:17.036]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:17.036]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:17.036]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:17.036]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:17.036]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:17.036]             base::names(...future.oldOptions))
[16:21:17.036]     }
[16:21:17.036]     if (FALSE) {
[16:21:17.036]     }
[16:21:17.036]     else {
[16:21:17.036]         if (TRUE) {
[16:21:17.036]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:17.036]                 open = "w")
[16:21:17.036]         }
[16:21:17.036]         else {
[16:21:17.036]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:17.036]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:17.036]         }
[16:21:17.036]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:17.036]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:17.036]             base::sink(type = "output", split = FALSE)
[16:21:17.036]             base::close(...future.stdout)
[16:21:17.036]         }, add = TRUE)
[16:21:17.036]     }
[16:21:17.036]     ...future.frame <- base::sys.nframe()
[16:21:17.036]     ...future.conditions <- base::list()
[16:21:17.036]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:17.036]     if (FALSE) {
[16:21:17.036]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:17.036]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:17.036]     }
[16:21:17.036]     ...future.result <- base::tryCatch({
[16:21:17.036]         base::withCallingHandlers({
[16:21:17.036]             ...future.value <- base::withVisible(base::local({
[16:21:17.036]                 42L
[16:21:17.036]             }))
[16:21:17.036]             future::FutureResult(value = ...future.value$value, 
[16:21:17.036]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:17.036]                   ...future.rng), globalenv = if (FALSE) 
[16:21:17.036]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:17.036]                     ...future.globalenv.names))
[16:21:17.036]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:17.036]         }, condition = base::local({
[16:21:17.036]             c <- base::c
[16:21:17.036]             inherits <- base::inherits
[16:21:17.036]             invokeRestart <- base::invokeRestart
[16:21:17.036]             length <- base::length
[16:21:17.036]             list <- base::list
[16:21:17.036]             seq.int <- base::seq.int
[16:21:17.036]             signalCondition <- base::signalCondition
[16:21:17.036]             sys.calls <- base::sys.calls
[16:21:17.036]             `[[` <- base::`[[`
[16:21:17.036]             `+` <- base::`+`
[16:21:17.036]             `<<-` <- base::`<<-`
[16:21:17.036]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:17.036]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:17.036]                   3L)]
[16:21:17.036]             }
[16:21:17.036]             function(cond) {
[16:21:17.036]                 is_error <- inherits(cond, "error")
[16:21:17.036]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:17.036]                   NULL)
[16:21:17.036]                 if (is_error) {
[16:21:17.036]                   sessionInformation <- function() {
[16:21:17.036]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:17.036]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:17.036]                       search = base::search(), system = base::Sys.info())
[16:21:17.036]                   }
[16:21:17.036]                   ...future.conditions[[length(...future.conditions) + 
[16:21:17.036]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:17.036]                     cond$call), session = sessionInformation(), 
[16:21:17.036]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:17.036]                   signalCondition(cond)
[16:21:17.036]                 }
[16:21:17.036]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:17.036]                 "immediateCondition"))) {
[16:21:17.036]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:17.036]                   ...future.conditions[[length(...future.conditions) + 
[16:21:17.036]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:17.036]                   if (TRUE && !signal) {
[16:21:17.036]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:17.036]                     {
[16:21:17.036]                       inherits <- base::inherits
[16:21:17.036]                       invokeRestart <- base::invokeRestart
[16:21:17.036]                       is.null <- base::is.null
[16:21:17.036]                       muffled <- FALSE
[16:21:17.036]                       if (inherits(cond, "message")) {
[16:21:17.036]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:17.036]                         if (muffled) 
[16:21:17.036]                           invokeRestart("muffleMessage")
[16:21:17.036]                       }
[16:21:17.036]                       else if (inherits(cond, "warning")) {
[16:21:17.036]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:17.036]                         if (muffled) 
[16:21:17.036]                           invokeRestart("muffleWarning")
[16:21:17.036]                       }
[16:21:17.036]                       else if (inherits(cond, "condition")) {
[16:21:17.036]                         if (!is.null(pattern)) {
[16:21:17.036]                           computeRestarts <- base::computeRestarts
[16:21:17.036]                           grepl <- base::grepl
[16:21:17.036]                           restarts <- computeRestarts(cond)
[16:21:17.036]                           for (restart in restarts) {
[16:21:17.036]                             name <- restart$name
[16:21:17.036]                             if (is.null(name)) 
[16:21:17.036]                               next
[16:21:17.036]                             if (!grepl(pattern, name)) 
[16:21:17.036]                               next
[16:21:17.036]                             invokeRestart(restart)
[16:21:17.036]                             muffled <- TRUE
[16:21:17.036]                             break
[16:21:17.036]                           }
[16:21:17.036]                         }
[16:21:17.036]                       }
[16:21:17.036]                       invisible(muffled)
[16:21:17.036]                     }
[16:21:17.036]                     muffleCondition(cond, pattern = "^muffle")
[16:21:17.036]                   }
[16:21:17.036]                 }
[16:21:17.036]                 else {
[16:21:17.036]                   if (TRUE) {
[16:21:17.036]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:17.036]                     {
[16:21:17.036]                       inherits <- base::inherits
[16:21:17.036]                       invokeRestart <- base::invokeRestart
[16:21:17.036]                       is.null <- base::is.null
[16:21:17.036]                       muffled <- FALSE
[16:21:17.036]                       if (inherits(cond, "message")) {
[16:21:17.036]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:17.036]                         if (muffled) 
[16:21:17.036]                           invokeRestart("muffleMessage")
[16:21:17.036]                       }
[16:21:17.036]                       else if (inherits(cond, "warning")) {
[16:21:17.036]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:17.036]                         if (muffled) 
[16:21:17.036]                           invokeRestart("muffleWarning")
[16:21:17.036]                       }
[16:21:17.036]                       else if (inherits(cond, "condition")) {
[16:21:17.036]                         if (!is.null(pattern)) {
[16:21:17.036]                           computeRestarts <- base::computeRestarts
[16:21:17.036]                           grepl <- base::grepl
[16:21:17.036]                           restarts <- computeRestarts(cond)
[16:21:17.036]                           for (restart in restarts) {
[16:21:17.036]                             name <- restart$name
[16:21:17.036]                             if (is.null(name)) 
[16:21:17.036]                               next
[16:21:17.036]                             if (!grepl(pattern, name)) 
[16:21:17.036]                               next
[16:21:17.036]                             invokeRestart(restart)
[16:21:17.036]                             muffled <- TRUE
[16:21:17.036]                             break
[16:21:17.036]                           }
[16:21:17.036]                         }
[16:21:17.036]                       }
[16:21:17.036]                       invisible(muffled)
[16:21:17.036]                     }
[16:21:17.036]                     muffleCondition(cond, pattern = "^muffle")
[16:21:17.036]                   }
[16:21:17.036]                 }
[16:21:17.036]             }
[16:21:17.036]         }))
[16:21:17.036]     }, error = function(ex) {
[16:21:17.036]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:17.036]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:17.036]                 ...future.rng), started = ...future.startTime, 
[16:21:17.036]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:17.036]             version = "1.8"), class = "FutureResult")
[16:21:17.036]     }, finally = {
[16:21:17.036]         if (!identical(...future.workdir, getwd())) 
[16:21:17.036]             setwd(...future.workdir)
[16:21:17.036]         {
[16:21:17.036]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:17.036]                 ...future.oldOptions$nwarnings <- NULL
[16:21:17.036]             }
[16:21:17.036]             base::options(...future.oldOptions)
[16:21:17.036]             if (.Platform$OS.type == "windows") {
[16:21:17.036]                 old_names <- names(...future.oldEnvVars)
[16:21:17.036]                 envs <- base::Sys.getenv()
[16:21:17.036]                 names <- names(envs)
[16:21:17.036]                 common <- intersect(names, old_names)
[16:21:17.036]                 added <- setdiff(names, old_names)
[16:21:17.036]                 removed <- setdiff(old_names, names)
[16:21:17.036]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:17.036]                   envs[common]]
[16:21:17.036]                 NAMES <- toupper(changed)
[16:21:17.036]                 args <- list()
[16:21:17.036]                 for (kk in seq_along(NAMES)) {
[16:21:17.036]                   name <- changed[[kk]]
[16:21:17.036]                   NAME <- NAMES[[kk]]
[16:21:17.036]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:17.036]                     next
[16:21:17.036]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:17.036]                 }
[16:21:17.036]                 NAMES <- toupper(added)
[16:21:17.036]                 for (kk in seq_along(NAMES)) {
[16:21:17.036]                   name <- added[[kk]]
[16:21:17.036]                   NAME <- NAMES[[kk]]
[16:21:17.036]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:17.036]                     next
[16:21:17.036]                   args[[name]] <- ""
[16:21:17.036]                 }
[16:21:17.036]                 NAMES <- toupper(removed)
[16:21:17.036]                 for (kk in seq_along(NAMES)) {
[16:21:17.036]                   name <- removed[[kk]]
[16:21:17.036]                   NAME <- NAMES[[kk]]
[16:21:17.036]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:17.036]                     next
[16:21:17.036]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:17.036]                 }
[16:21:17.036]                 if (length(args) > 0) 
[16:21:17.036]                   base::do.call(base::Sys.setenv, args = args)
[16:21:17.036]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:17.036]             }
[16:21:17.036]             else {
[16:21:17.036]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:17.036]             }
[16:21:17.036]             {
[16:21:17.036]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:17.036]                   0L) {
[16:21:17.036]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:17.036]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:17.036]                   base::options(opts)
[16:21:17.036]                 }
[16:21:17.036]                 {
[16:21:17.036]                   {
[16:21:17.036]                     NULL
[16:21:17.036]                     RNGkind("Mersenne-Twister")
[16:21:17.036]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:21:17.036]                       inherits = FALSE)
[16:21:17.036]                   }
[16:21:17.036]                   options(future.plan = NULL)
[16:21:17.036]                   if (is.na(NA_character_)) 
[16:21:17.036]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:17.036]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:17.036]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:17.036]                     .init = FALSE)
[16:21:17.036]                 }
[16:21:17.036]             }
[16:21:17.036]         }
[16:21:17.036]     })
[16:21:17.036]     if (TRUE) {
[16:21:17.036]         base::sink(type = "output", split = FALSE)
[16:21:17.036]         if (TRUE) {
[16:21:17.036]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:17.036]         }
[16:21:17.036]         else {
[16:21:17.036]             ...future.result["stdout"] <- base::list(NULL)
[16:21:17.036]         }
[16:21:17.036]         base::close(...future.stdout)
[16:21:17.036]         ...future.stdout <- NULL
[16:21:17.036]     }
[16:21:17.036]     ...future.result$conditions <- ...future.conditions
[16:21:17.036]     ...future.result$finished <- base::Sys.time()
[16:21:17.036]     ...future.result
[16:21:17.036] }
[16:21:17.038] plan(): Setting new future strategy stack:
[16:21:17.038] List of future strategies:
[16:21:17.038] 1. sequential:
[16:21:17.038]    - args: function (..., envir = parent.frame())
[16:21:17.038]    - tweaked: FALSE
[16:21:17.038]    - call: NULL
[16:21:17.039] plan(): nbrOfWorkers() = 1
[16:21:17.040] plan(): Setting new future strategy stack:
[16:21:17.040] List of future strategies:
[16:21:17.040] 1. sequential:
[16:21:17.040]    - args: function (..., envir = parent.frame())
[16:21:17.040]    - tweaked: FALSE
[16:21:17.040]    - call: future::plan("sequential")
[16:21:17.040] plan(): nbrOfWorkers() = 1
[16:21:17.040] SequentialFuture started (and completed)
[16:21:17.041] resolved() for ‘SequentialFuture’ ...
[16:21:17.041] - state: ‘finished’
[16:21:17.041] - run: TRUE
[16:21:17.041] - result: ‘FutureResult’
[16:21:17.041] resolved() for ‘SequentialFuture’ ... done
[1] TRUE
[1] 42
[16:21:17.045] getGlobalsAndPackages() ...
[16:21:17.045] Searching for globals...
[16:21:17.050] - globals found: [4] ‘{’, ‘<-’, ‘*’, ‘a’
[16:21:17.050] Searching for globals ... DONE
[16:21:17.050] Resolving globals: FALSE
[16:21:17.053] The total size of the 1 globals is 56 bytes (56 bytes)
[16:21:17.053] The total size of the 1 globals exported for future expression (‘{; b <- 3; c <- 2; a * b * c; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[16:21:17.053] - globals: [1] ‘a’
[16:21:17.053] 
[16:21:17.053] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    b <- 3
    c <- 2
    a * b * c
}
Lazy evaluation: TRUE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 56 bytes (numeric ‘a’ of 56 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 3e579109-592e-0b73-60c9-ee81fb289d87
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:21:17.054] Packages needed by the future expression (n = 0): <none>
[16:21:17.055] Packages needed by future strategies (n = 0): <none>
[16:21:17.055] {
[16:21:17.055]     {
[16:21:17.055]         {
[16:21:17.055]             ...future.startTime <- base::Sys.time()
[16:21:17.055]             {
[16:21:17.055]                 {
[16:21:17.055]                   {
[16:21:17.055]                     base::local({
[16:21:17.055]                       has_future <- base::requireNamespace("future", 
[16:21:17.055]                         quietly = TRUE)
[16:21:17.055]                       if (has_future) {
[16:21:17.055]                         ns <- base::getNamespace("future")
[16:21:17.055]                         version <- ns[[".package"]][["version"]]
[16:21:17.055]                         if (is.null(version)) 
[16:21:17.055]                           version <- utils::packageVersion("future")
[16:21:17.055]                       }
[16:21:17.055]                       else {
[16:21:17.055]                         version <- NULL
[16:21:17.055]                       }
[16:21:17.055]                       if (!has_future || version < "1.8.0") {
[16:21:17.055]                         info <- base::c(r_version = base::gsub("R version ", 
[16:21:17.055]                           "", base::R.version$version.string), 
[16:21:17.055]                           platform = base::sprintf("%s (%s-bit)", 
[16:21:17.055]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:17.055]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:17.055]                             "release", "version")], collapse = " "), 
[16:21:17.055]                           hostname = base::Sys.info()[["nodename"]])
[16:21:17.055]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:21:17.055]                           info)
[16:21:17.055]                         info <- base::paste(info, collapse = "; ")
[16:21:17.055]                         if (!has_future) {
[16:21:17.055]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:17.055]                             info)
[16:21:17.055]                         }
[16:21:17.055]                         else {
[16:21:17.055]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:17.055]                             info, version)
[16:21:17.055]                         }
[16:21:17.055]                         base::stop(msg)
[16:21:17.055]                       }
[16:21:17.055]                     })
[16:21:17.055]                   }
[16:21:17.055]                   ...future.strategy.old <- future::plan("list")
[16:21:17.055]                   options(future.plan = NULL)
[16:21:17.055]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:17.055]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:17.055]                 }
[16:21:17.055]                 ...future.workdir <- getwd()
[16:21:17.055]             }
[16:21:17.055]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:17.055]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:17.055]         }
[16:21:17.055]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:17.055]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:17.055]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:17.055]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:17.055]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:17.055]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:17.055]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:17.055]             base::names(...future.oldOptions))
[16:21:17.055]     }
[16:21:17.055]     if (FALSE) {
[16:21:17.055]     }
[16:21:17.055]     else {
[16:21:17.055]         if (TRUE) {
[16:21:17.055]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:17.055]                 open = "w")
[16:21:17.055]         }
[16:21:17.055]         else {
[16:21:17.055]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:17.055]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:17.055]         }
[16:21:17.055]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:17.055]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:17.055]             base::sink(type = "output", split = FALSE)
[16:21:17.055]             base::close(...future.stdout)
[16:21:17.055]         }, add = TRUE)
[16:21:17.055]     }
[16:21:17.055]     ...future.frame <- base::sys.nframe()
[16:21:17.055]     ...future.conditions <- base::list()
[16:21:17.055]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:17.055]     if (FALSE) {
[16:21:17.055]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:17.055]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:17.055]     }
[16:21:17.055]     ...future.result <- base::tryCatch({
[16:21:17.055]         base::withCallingHandlers({
[16:21:17.055]             ...future.value <- base::withVisible(base::local({
[16:21:17.055]                 b <- 3
[16:21:17.055]                 c <- 2
[16:21:17.055]                 a * b * c
[16:21:17.055]             }))
[16:21:17.055]             future::FutureResult(value = ...future.value$value, 
[16:21:17.055]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:17.055]                   ...future.rng), globalenv = if (FALSE) 
[16:21:17.055]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:17.055]                     ...future.globalenv.names))
[16:21:17.055]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:17.055]         }, condition = base::local({
[16:21:17.055]             c <- base::c
[16:21:17.055]             inherits <- base::inherits
[16:21:17.055]             invokeRestart <- base::invokeRestart
[16:21:17.055]             length <- base::length
[16:21:17.055]             list <- base::list
[16:21:17.055]             seq.int <- base::seq.int
[16:21:17.055]             signalCondition <- base::signalCondition
[16:21:17.055]             sys.calls <- base::sys.calls
[16:21:17.055]             `[[` <- base::`[[`
[16:21:17.055]             `+` <- base::`+`
[16:21:17.055]             `<<-` <- base::`<<-`
[16:21:17.055]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:17.055]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:17.055]                   3L)]
[16:21:17.055]             }
[16:21:17.055]             function(cond) {
[16:21:17.055]                 is_error <- inherits(cond, "error")
[16:21:17.055]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:17.055]                   NULL)
[16:21:17.055]                 if (is_error) {
[16:21:17.055]                   sessionInformation <- function() {
[16:21:17.055]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:17.055]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:17.055]                       search = base::search(), system = base::Sys.info())
[16:21:17.055]                   }
[16:21:17.055]                   ...future.conditions[[length(...future.conditions) + 
[16:21:17.055]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:17.055]                     cond$call), session = sessionInformation(), 
[16:21:17.055]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:17.055]                   signalCondition(cond)
[16:21:17.055]                 }
[16:21:17.055]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:17.055]                 "immediateCondition"))) {
[16:21:17.055]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:17.055]                   ...future.conditions[[length(...future.conditions) + 
[16:21:17.055]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:17.055]                   if (TRUE && !signal) {
[16:21:17.055]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:17.055]                     {
[16:21:17.055]                       inherits <- base::inherits
[16:21:17.055]                       invokeRestart <- base::invokeRestart
[16:21:17.055]                       is.null <- base::is.null
[16:21:17.055]                       muffled <- FALSE
[16:21:17.055]                       if (inherits(cond, "message")) {
[16:21:17.055]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:17.055]                         if (muffled) 
[16:21:17.055]                           invokeRestart("muffleMessage")
[16:21:17.055]                       }
[16:21:17.055]                       else if (inherits(cond, "warning")) {
[16:21:17.055]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:17.055]                         if (muffled) 
[16:21:17.055]                           invokeRestart("muffleWarning")
[16:21:17.055]                       }
[16:21:17.055]                       else if (inherits(cond, "condition")) {
[16:21:17.055]                         if (!is.null(pattern)) {
[16:21:17.055]                           computeRestarts <- base::computeRestarts
[16:21:17.055]                           grepl <- base::grepl
[16:21:17.055]                           restarts <- computeRestarts(cond)
[16:21:17.055]                           for (restart in restarts) {
[16:21:17.055]                             name <- restart$name
[16:21:17.055]                             if (is.null(name)) 
[16:21:17.055]                               next
[16:21:17.055]                             if (!grepl(pattern, name)) 
[16:21:17.055]                               next
[16:21:17.055]                             invokeRestart(restart)
[16:21:17.055]                             muffled <- TRUE
[16:21:17.055]                             break
[16:21:17.055]                           }
[16:21:17.055]                         }
[16:21:17.055]                       }
[16:21:17.055]                       invisible(muffled)
[16:21:17.055]                     }
[16:21:17.055]                     muffleCondition(cond, pattern = "^muffle")
[16:21:17.055]                   }
[16:21:17.055]                 }
[16:21:17.055]                 else {
[16:21:17.055]                   if (TRUE) {
[16:21:17.055]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:17.055]                     {
[16:21:17.055]                       inherits <- base::inherits
[16:21:17.055]                       invokeRestart <- base::invokeRestart
[16:21:17.055]                       is.null <- base::is.null
[16:21:17.055]                       muffled <- FALSE
[16:21:17.055]                       if (inherits(cond, "message")) {
[16:21:17.055]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:17.055]                         if (muffled) 
[16:21:17.055]                           invokeRestart("muffleMessage")
[16:21:17.055]                       }
[16:21:17.055]                       else if (inherits(cond, "warning")) {
[16:21:17.055]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:17.055]                         if (muffled) 
[16:21:17.055]                           invokeRestart("muffleWarning")
[16:21:17.055]                       }
[16:21:17.055]                       else if (inherits(cond, "condition")) {
[16:21:17.055]                         if (!is.null(pattern)) {
[16:21:17.055]                           computeRestarts <- base::computeRestarts
[16:21:17.055]                           grepl <- base::grepl
[16:21:17.055]                           restarts <- computeRestarts(cond)
[16:21:17.055]                           for (restart in restarts) {
[16:21:17.055]                             name <- restart$name
[16:21:17.055]                             if (is.null(name)) 
[16:21:17.055]                               next
[16:21:17.055]                             if (!grepl(pattern, name)) 
[16:21:17.055]                               next
[16:21:17.055]                             invokeRestart(restart)
[16:21:17.055]                             muffled <- TRUE
[16:21:17.055]                             break
[16:21:17.055]                           }
[16:21:17.055]                         }
[16:21:17.055]                       }
[16:21:17.055]                       invisible(muffled)
[16:21:17.055]                     }
[16:21:17.055]                     muffleCondition(cond, pattern = "^muffle")
[16:21:17.055]                   }
[16:21:17.055]                 }
[16:21:17.055]             }
[16:21:17.055]         }))
[16:21:17.055]     }, error = function(ex) {
[16:21:17.055]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:17.055]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:17.055]                 ...future.rng), started = ...future.startTime, 
[16:21:17.055]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:17.055]             version = "1.8"), class = "FutureResult")
[16:21:17.055]     }, finally = {
[16:21:17.055]         if (!identical(...future.workdir, getwd())) 
[16:21:17.055]             setwd(...future.workdir)
[16:21:17.055]         {
[16:21:17.055]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:17.055]                 ...future.oldOptions$nwarnings <- NULL
[16:21:17.055]             }
[16:21:17.055]             base::options(...future.oldOptions)
[16:21:17.055]             if (.Platform$OS.type == "windows") {
[16:21:17.055]                 old_names <- names(...future.oldEnvVars)
[16:21:17.055]                 envs <- base::Sys.getenv()
[16:21:17.055]                 names <- names(envs)
[16:21:17.055]                 common <- intersect(names, old_names)
[16:21:17.055]                 added <- setdiff(names, old_names)
[16:21:17.055]                 removed <- setdiff(old_names, names)
[16:21:17.055]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:17.055]                   envs[common]]
[16:21:17.055]                 NAMES <- toupper(changed)
[16:21:17.055]                 args <- list()
[16:21:17.055]                 for (kk in seq_along(NAMES)) {
[16:21:17.055]                   name <- changed[[kk]]
[16:21:17.055]                   NAME <- NAMES[[kk]]
[16:21:17.055]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:17.055]                     next
[16:21:17.055]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:17.055]                 }
[16:21:17.055]                 NAMES <- toupper(added)
[16:21:17.055]                 for (kk in seq_along(NAMES)) {
[16:21:17.055]                   name <- added[[kk]]
[16:21:17.055]                   NAME <- NAMES[[kk]]
[16:21:17.055]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:17.055]                     next
[16:21:17.055]                   args[[name]] <- ""
[16:21:17.055]                 }
[16:21:17.055]                 NAMES <- toupper(removed)
[16:21:17.055]                 for (kk in seq_along(NAMES)) {
[16:21:17.055]                   name <- removed[[kk]]
[16:21:17.055]                   NAME <- NAMES[[kk]]
[16:21:17.055]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:17.055]                     next
[16:21:17.055]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:17.055]                 }
[16:21:17.055]                 if (length(args) > 0) 
[16:21:17.055]                   base::do.call(base::Sys.setenv, args = args)
[16:21:17.055]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:17.055]             }
[16:21:17.055]             else {
[16:21:17.055]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:17.055]             }
[16:21:17.055]             {
[16:21:17.055]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:17.055]                   0L) {
[16:21:17.055]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:17.055]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:17.055]                   base::options(opts)
[16:21:17.055]                 }
[16:21:17.055]                 {
[16:21:17.055]                   {
[16:21:17.055]                     NULL
[16:21:17.055]                     RNGkind("Mersenne-Twister")
[16:21:17.055]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:21:17.055]                       inherits = FALSE)
[16:21:17.055]                   }
[16:21:17.055]                   options(future.plan = NULL)
[16:21:17.055]                   if (is.na(NA_character_)) 
[16:21:17.055]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:17.055]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:17.055]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:17.055]                     .init = FALSE)
[16:21:17.055]                 }
[16:21:17.055]             }
[16:21:17.055]         }
[16:21:17.055]     })
[16:21:17.055]     if (TRUE) {
[16:21:17.055]         base::sink(type = "output", split = FALSE)
[16:21:17.055]         if (TRUE) {
[16:21:17.055]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:17.055]         }
[16:21:17.055]         else {
[16:21:17.055]             ...future.result["stdout"] <- base::list(NULL)
[16:21:17.055]         }
[16:21:17.055]         base::close(...future.stdout)
[16:21:17.055]         ...future.stdout <- NULL
[16:21:17.055]     }
[16:21:17.055]     ...future.result$conditions <- ...future.conditions
[16:21:17.055]     ...future.result$finished <- base::Sys.time()
[16:21:17.055]     ...future.result
[16:21:17.055] }
[16:21:17.057] assign_globals() ...
[16:21:17.057] List of 1
[16:21:17.057]  $ a: num 0
[16:21:17.057]  - attr(*, "where")=List of 1
[16:21:17.057]   ..$ a:<environment: R_EmptyEnv> 
[16:21:17.057]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:21:17.057]  - attr(*, "resolved")= logi FALSE
[16:21:17.057]  - attr(*, "total_size")= num 56
[16:21:17.061] - copied ‘a’ to environment
[16:21:17.061] assign_globals() ... done
[16:21:17.062] plan(): Setting new future strategy stack:
[16:21:17.062] List of future strategies:
[16:21:17.062] 1. sequential:
[16:21:17.062]    - args: function (..., envir = parent.frame())
[16:21:17.062]    - tweaked: FALSE
[16:21:17.062]    - call: NULL
[16:21:17.062] plan(): nbrOfWorkers() = 1
[16:21:17.063] plan(): Setting new future strategy stack:
[16:21:17.063] List of future strategies:
[16:21:17.063] 1. sequential:
[16:21:17.063]    - args: function (..., envir = parent.frame())
[16:21:17.063]    - tweaked: FALSE
[16:21:17.063]    - call: future::plan("sequential")
[16:21:17.063] plan(): nbrOfWorkers() = 1
[16:21:17.063] SequentialFuture started (and completed)
[1] 0
*** multisession() with globals and blocking
 - Creating multisession future #2 ...
[16:21:17.067] getGlobalsAndPackages() ...
[16:21:17.067] Searching for globals...
[16:21:17.068] - globals found: [2] ‘{’, ‘ii’
[16:21:17.068] Searching for globals ... DONE
[16:21:17.068] Resolving globals: FALSE
[16:21:17.068] The total size of the 1 globals is 56 bytes (56 bytes)
[16:21:17.069] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[16:21:17.069] - globals: [1] ‘ii’
[16:21:17.069] 
[16:21:17.069] getGlobalsAndPackages() ... DONE
 - Creating multisession future #1 ...
[16:21:17.073] getGlobalsAndPackages() ...
[16:21:17.073] Searching for globals...
[16:21:17.073] - globals found: [2] ‘{’, ‘ii’
[16:21:17.073] Searching for globals ... DONE
[16:21:17.073] Resolving globals: FALSE
[16:21:17.074] The total size of the 1 globals is 56 bytes (56 bytes)
[16:21:17.074] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[16:21:17.074] - globals: [1] ‘ii’
[16:21:17.074] 
[16:21:17.074] getGlobalsAndPackages() ... DONE
 - Resolving 2 multisession futures
[16:21:17.075] Packages needed by the future expression (n = 0): <none>
[16:21:17.075] Packages needed by future strategies (n = 0): <none>
[16:21:17.076] {
[16:21:17.076]     {
[16:21:17.076]         {
[16:21:17.076]             ...future.startTime <- base::Sys.time()
[16:21:17.076]             {
[16:21:17.076]                 {
[16:21:17.076]                   {
[16:21:17.076]                     base::local({
[16:21:17.076]                       has_future <- base::requireNamespace("future", 
[16:21:17.076]                         quietly = TRUE)
[16:21:17.076]                       if (has_future) {
[16:21:17.076]                         ns <- base::getNamespace("future")
[16:21:17.076]                         version <- ns[[".package"]][["version"]]
[16:21:17.076]                         if (is.null(version)) 
[16:21:17.076]                           version <- utils::packageVersion("future")
[16:21:17.076]                       }
[16:21:17.076]                       else {
[16:21:17.076]                         version <- NULL
[16:21:17.076]                       }
[16:21:17.076]                       if (!has_future || version < "1.8.0") {
[16:21:17.076]                         info <- base::c(r_version = base::gsub("R version ", 
[16:21:17.076]                           "", base::R.version$version.string), 
[16:21:17.076]                           platform = base::sprintf("%s (%s-bit)", 
[16:21:17.076]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:17.076]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:17.076]                             "release", "version")], collapse = " "), 
[16:21:17.076]                           hostname = base::Sys.info()[["nodename"]])
[16:21:17.076]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:21:17.076]                           info)
[16:21:17.076]                         info <- base::paste(info, collapse = "; ")
[16:21:17.076]                         if (!has_future) {
[16:21:17.076]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:17.076]                             info)
[16:21:17.076]                         }
[16:21:17.076]                         else {
[16:21:17.076]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:17.076]                             info, version)
[16:21:17.076]                         }
[16:21:17.076]                         base::stop(msg)
[16:21:17.076]                       }
[16:21:17.076]                     })
[16:21:17.076]                   }
[16:21:17.076]                   ...future.strategy.old <- future::plan("list")
[16:21:17.076]                   options(future.plan = NULL)
[16:21:17.076]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:17.076]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:17.076]                 }
[16:21:17.076]                 ...future.workdir <- getwd()
[16:21:17.076]             }
[16:21:17.076]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:17.076]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:17.076]         }
[16:21:17.076]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:17.076]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:17.076]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:17.076]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:17.076]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:17.076]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:17.076]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:17.076]             base::names(...future.oldOptions))
[16:21:17.076]     }
[16:21:17.076]     if (FALSE) {
[16:21:17.076]     }
[16:21:17.076]     else {
[16:21:17.076]         if (TRUE) {
[16:21:17.076]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:17.076]                 open = "w")
[16:21:17.076]         }
[16:21:17.076]         else {
[16:21:17.076]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:17.076]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:17.076]         }
[16:21:17.076]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:17.076]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:17.076]             base::sink(type = "output", split = FALSE)
[16:21:17.076]             base::close(...future.stdout)
[16:21:17.076]         }, add = TRUE)
[16:21:17.076]     }
[16:21:17.076]     ...future.frame <- base::sys.nframe()
[16:21:17.076]     ...future.conditions <- base::list()
[16:21:17.076]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:17.076]     if (FALSE) {
[16:21:17.076]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:17.076]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:17.076]     }
[16:21:17.076]     ...future.result <- base::tryCatch({
[16:21:17.076]         base::withCallingHandlers({
[16:21:17.076]             ...future.value <- base::withVisible(base::local({
[16:21:17.076]                 ii
[16:21:17.076]             }))
[16:21:17.076]             future::FutureResult(value = ...future.value$value, 
[16:21:17.076]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:17.076]                   ...future.rng), globalenv = if (FALSE) 
[16:21:17.076]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:17.076]                     ...future.globalenv.names))
[16:21:17.076]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:17.076]         }, condition = base::local({
[16:21:17.076]             c <- base::c
[16:21:17.076]             inherits <- base::inherits
[16:21:17.076]             invokeRestart <- base::invokeRestart
[16:21:17.076]             length <- base::length
[16:21:17.076]             list <- base::list
[16:21:17.076]             seq.int <- base::seq.int
[16:21:17.076]             signalCondition <- base::signalCondition
[16:21:17.076]             sys.calls <- base::sys.calls
[16:21:17.076]             `[[` <- base::`[[`
[16:21:17.076]             `+` <- base::`+`
[16:21:17.076]             `<<-` <- base::`<<-`
[16:21:17.076]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:17.076]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:17.076]                   3L)]
[16:21:17.076]             }
[16:21:17.076]             function(cond) {
[16:21:17.076]                 is_error <- inherits(cond, "error")
[16:21:17.076]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:17.076]                   NULL)
[16:21:17.076]                 if (is_error) {
[16:21:17.076]                   sessionInformation <- function() {
[16:21:17.076]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:17.076]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:17.076]                       search = base::search(), system = base::Sys.info())
[16:21:17.076]                   }
[16:21:17.076]                   ...future.conditions[[length(...future.conditions) + 
[16:21:17.076]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:17.076]                     cond$call), session = sessionInformation(), 
[16:21:17.076]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:17.076]                   signalCondition(cond)
[16:21:17.076]                 }
[16:21:17.076]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:17.076]                 "immediateCondition"))) {
[16:21:17.076]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:17.076]                   ...future.conditions[[length(...future.conditions) + 
[16:21:17.076]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:17.076]                   if (TRUE && !signal) {
[16:21:17.076]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:17.076]                     {
[16:21:17.076]                       inherits <- base::inherits
[16:21:17.076]                       invokeRestart <- base::invokeRestart
[16:21:17.076]                       is.null <- base::is.null
[16:21:17.076]                       muffled <- FALSE
[16:21:17.076]                       if (inherits(cond, "message")) {
[16:21:17.076]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:17.076]                         if (muffled) 
[16:21:17.076]                           invokeRestart("muffleMessage")
[16:21:17.076]                       }
[16:21:17.076]                       else if (inherits(cond, "warning")) {
[16:21:17.076]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:17.076]                         if (muffled) 
[16:21:17.076]                           invokeRestart("muffleWarning")
[16:21:17.076]                       }
[16:21:17.076]                       else if (inherits(cond, "condition")) {
[16:21:17.076]                         if (!is.null(pattern)) {
[16:21:17.076]                           computeRestarts <- base::computeRestarts
[16:21:17.076]                           grepl <- base::grepl
[16:21:17.076]                           restarts <- computeRestarts(cond)
[16:21:17.076]                           for (restart in restarts) {
[16:21:17.076]                             name <- restart$name
[16:21:17.076]                             if (is.null(name)) 
[16:21:17.076]                               next
[16:21:17.076]                             if (!grepl(pattern, name)) 
[16:21:17.076]                               next
[16:21:17.076]                             invokeRestart(restart)
[16:21:17.076]                             muffled <- TRUE
[16:21:17.076]                             break
[16:21:17.076]                           }
[16:21:17.076]                         }
[16:21:17.076]                       }
[16:21:17.076]                       invisible(muffled)
[16:21:17.076]                     }
[16:21:17.076]                     muffleCondition(cond, pattern = "^muffle")
[16:21:17.076]                   }
[16:21:17.076]                 }
[16:21:17.076]                 else {
[16:21:17.076]                   if (TRUE) {
[16:21:17.076]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:17.076]                     {
[16:21:17.076]                       inherits <- base::inherits
[16:21:17.076]                       invokeRestart <- base::invokeRestart
[16:21:17.076]                       is.null <- base::is.null
[16:21:17.076]                       muffled <- FALSE
[16:21:17.076]                       if (inherits(cond, "message")) {
[16:21:17.076]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:17.076]                         if (muffled) 
[16:21:17.076]                           invokeRestart("muffleMessage")
[16:21:17.076]                       }
[16:21:17.076]                       else if (inherits(cond, "warning")) {
[16:21:17.076]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:17.076]                         if (muffled) 
[16:21:17.076]                           invokeRestart("muffleWarning")
[16:21:17.076]                       }
[16:21:17.076]                       else if (inherits(cond, "condition")) {
[16:21:17.076]                         if (!is.null(pattern)) {
[16:21:17.076]                           computeRestarts <- base::computeRestarts
[16:21:17.076]                           grepl <- base::grepl
[16:21:17.076]                           restarts <- computeRestarts(cond)
[16:21:17.076]                           for (restart in restarts) {
[16:21:17.076]                             name <- restart$name
[16:21:17.076]                             if (is.null(name)) 
[16:21:17.076]                               next
[16:21:17.076]                             if (!grepl(pattern, name)) 
[16:21:17.076]                               next
[16:21:17.076]                             invokeRestart(restart)
[16:21:17.076]                             muffled <- TRUE
[16:21:17.076]                             break
[16:21:17.076]                           }
[16:21:17.076]                         }
[16:21:17.076]                       }
[16:21:17.076]                       invisible(muffled)
[16:21:17.076]                     }
[16:21:17.076]                     muffleCondition(cond, pattern = "^muffle")
[16:21:17.076]                   }
[16:21:17.076]                 }
[16:21:17.076]             }
[16:21:17.076]         }))
[16:21:17.076]     }, error = function(ex) {
[16:21:17.076]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:17.076]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:17.076]                 ...future.rng), started = ...future.startTime, 
[16:21:17.076]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:17.076]             version = "1.8"), class = "FutureResult")
[16:21:17.076]     }, finally = {
[16:21:17.076]         if (!identical(...future.workdir, getwd())) 
[16:21:17.076]             setwd(...future.workdir)
[16:21:17.076]         {
[16:21:17.076]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:17.076]                 ...future.oldOptions$nwarnings <- NULL
[16:21:17.076]             }
[16:21:17.076]             base::options(...future.oldOptions)
[16:21:17.076]             if (.Platform$OS.type == "windows") {
[16:21:17.076]                 old_names <- names(...future.oldEnvVars)
[16:21:17.076]                 envs <- base::Sys.getenv()
[16:21:17.076]                 names <- names(envs)
[16:21:17.076]                 common <- intersect(names, old_names)
[16:21:17.076]                 added <- setdiff(names, old_names)
[16:21:17.076]                 removed <- setdiff(old_names, names)
[16:21:17.076]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:17.076]                   envs[common]]
[16:21:17.076]                 NAMES <- toupper(changed)
[16:21:17.076]                 args <- list()
[16:21:17.076]                 for (kk in seq_along(NAMES)) {
[16:21:17.076]                   name <- changed[[kk]]
[16:21:17.076]                   NAME <- NAMES[[kk]]
[16:21:17.076]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:17.076]                     next
[16:21:17.076]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:17.076]                 }
[16:21:17.076]                 NAMES <- toupper(added)
[16:21:17.076]                 for (kk in seq_along(NAMES)) {
[16:21:17.076]                   name <- added[[kk]]
[16:21:17.076]                   NAME <- NAMES[[kk]]
[16:21:17.076]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:17.076]                     next
[16:21:17.076]                   args[[name]] <- ""
[16:21:17.076]                 }
[16:21:17.076]                 NAMES <- toupper(removed)
[16:21:17.076]                 for (kk in seq_along(NAMES)) {
[16:21:17.076]                   name <- removed[[kk]]
[16:21:17.076]                   NAME <- NAMES[[kk]]
[16:21:17.076]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:17.076]                     next
[16:21:17.076]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:17.076]                 }
[16:21:17.076]                 if (length(args) > 0) 
[16:21:17.076]                   base::do.call(base::Sys.setenv, args = args)
[16:21:17.076]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:17.076]             }
[16:21:17.076]             else {
[16:21:17.076]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:17.076]             }
[16:21:17.076]             {
[16:21:17.076]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:17.076]                   0L) {
[16:21:17.076]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:17.076]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:17.076]                   base::options(opts)
[16:21:17.076]                 }
[16:21:17.076]                 {
[16:21:17.076]                   {
[16:21:17.076]                     NULL
[16:21:17.076]                     RNGkind("Mersenne-Twister")
[16:21:17.076]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:21:17.076]                       inherits = FALSE)
[16:21:17.076]                   }
[16:21:17.076]                   options(future.plan = NULL)
[16:21:17.076]                   if (is.na(NA_character_)) 
[16:21:17.076]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:17.076]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:17.076]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:17.076]                     .init = FALSE)
[16:21:17.076]                 }
[16:21:17.076]             }
[16:21:17.076]         }
[16:21:17.076]     })
[16:21:17.076]     if (TRUE) {
[16:21:17.076]         base::sink(type = "output", split = FALSE)
[16:21:17.076]         if (TRUE) {
[16:21:17.076]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:17.076]         }
[16:21:17.076]         else {
[16:21:17.076]             ...future.result["stdout"] <- base::list(NULL)
[16:21:17.076]         }
[16:21:17.076]         base::close(...future.stdout)
[16:21:17.076]         ...future.stdout <- NULL
[16:21:17.076]     }
[16:21:17.076]     ...future.result$conditions <- ...future.conditions
[16:21:17.076]     ...future.result$finished <- base::Sys.time()
[16:21:17.076]     ...future.result
[16:21:17.076] }
[16:21:17.077] assign_globals() ...
[16:21:17.077] List of 1
[16:21:17.077]  $ ii: int 1
[16:21:17.077]  - attr(*, "where")=List of 1
[16:21:17.077]   ..$ ii:<environment: R_EmptyEnv> 
[16:21:17.077]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:21:17.077]  - attr(*, "resolved")= logi FALSE
[16:21:17.077]  - attr(*, "total_size")= num 56
[16:21:17.079] - copied ‘ii’ to environment
[16:21:17.079] assign_globals() ... done
[16:21:17.080] plan(): Setting new future strategy stack:
[16:21:17.080] List of future strategies:
[16:21:17.080] 1. sequential:
[16:21:17.080]    - args: function (..., envir = parent.frame())
[16:21:17.080]    - tweaked: FALSE
[16:21:17.080]    - call: NULL
[16:21:17.080] plan(): nbrOfWorkers() = 1
[16:21:17.081] plan(): Setting new future strategy stack:
[16:21:17.081] List of future strategies:
[16:21:17.081] 1. sequential:
[16:21:17.081]    - args: function (..., envir = parent.frame())
[16:21:17.081]    - tweaked: FALSE
[16:21:17.081]    - call: future::plan("sequential")
[16:21:17.081] plan(): nbrOfWorkers() = 1
[16:21:17.082] SequentialFuture started (and completed)
[16:21:17.082] Packages needed by the future expression (n = 0): <none>
[16:21:17.082] Packages needed by future strategies (n = 0): <none>
[16:21:17.082] {
[16:21:17.082]     {
[16:21:17.082]         {
[16:21:17.082]             ...future.startTime <- base::Sys.time()
[16:21:17.082]             {
[16:21:17.082]                 {
[16:21:17.082]                   {
[16:21:17.082]                     base::local({
[16:21:17.082]                       has_future <- base::requireNamespace("future", 
[16:21:17.082]                         quietly = TRUE)
[16:21:17.082]                       if (has_future) {
[16:21:17.082]                         ns <- base::getNamespace("future")
[16:21:17.082]                         version <- ns[[".package"]][["version"]]
[16:21:17.082]                         if (is.null(version)) 
[16:21:17.082]                           version <- utils::packageVersion("future")
[16:21:17.082]                       }
[16:21:17.082]                       else {
[16:21:17.082]                         version <- NULL
[16:21:17.082]                       }
[16:21:17.082]                       if (!has_future || version < "1.8.0") {
[16:21:17.082]                         info <- base::c(r_version = base::gsub("R version ", 
[16:21:17.082]                           "", base::R.version$version.string), 
[16:21:17.082]                           platform = base::sprintf("%s (%s-bit)", 
[16:21:17.082]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:17.082]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:17.082]                             "release", "version")], collapse = " "), 
[16:21:17.082]                           hostname = base::Sys.info()[["nodename"]])
[16:21:17.082]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:21:17.082]                           info)
[16:21:17.082]                         info <- base::paste(info, collapse = "; ")
[16:21:17.082]                         if (!has_future) {
[16:21:17.082]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:17.082]                             info)
[16:21:17.082]                         }
[16:21:17.082]                         else {
[16:21:17.082]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:17.082]                             info, version)
[16:21:17.082]                         }
[16:21:17.082]                         base::stop(msg)
[16:21:17.082]                       }
[16:21:17.082]                     })
[16:21:17.082]                   }
[16:21:17.082]                   ...future.strategy.old <- future::plan("list")
[16:21:17.082]                   options(future.plan = NULL)
[16:21:17.082]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:17.082]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:17.082]                 }
[16:21:17.082]                 ...future.workdir <- getwd()
[16:21:17.082]             }
[16:21:17.082]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:17.082]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:17.082]         }
[16:21:17.082]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:17.082]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:17.082]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:17.082]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:17.082]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:17.082]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:17.082]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:17.082]             base::names(...future.oldOptions))
[16:21:17.082]     }
[16:21:17.082]     if (FALSE) {
[16:21:17.082]     }
[16:21:17.082]     else {
[16:21:17.082]         if (TRUE) {
[16:21:17.082]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:17.082]                 open = "w")
[16:21:17.082]         }
[16:21:17.082]         else {
[16:21:17.082]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:17.082]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:17.082]         }
[16:21:17.082]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:17.082]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:17.082]             base::sink(type = "output", split = FALSE)
[16:21:17.082]             base::close(...future.stdout)
[16:21:17.082]         }, add = TRUE)
[16:21:17.082]     }
[16:21:17.082]     ...future.frame <- base::sys.nframe()
[16:21:17.082]     ...future.conditions <- base::list()
[16:21:17.082]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:17.082]     if (FALSE) {
[16:21:17.082]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:17.082]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:17.082]     }
[16:21:17.082]     ...future.result <- base::tryCatch({
[16:21:17.082]         base::withCallingHandlers({
[16:21:17.082]             ...future.value <- base::withVisible(base::local({
[16:21:17.082]                 ii
[16:21:17.082]             }))
[16:21:17.082]             future::FutureResult(value = ...future.value$value, 
[16:21:17.082]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:17.082]                   ...future.rng), globalenv = if (FALSE) 
[16:21:17.082]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:17.082]                     ...future.globalenv.names))
[16:21:17.082]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:17.082]         }, condition = base::local({
[16:21:17.082]             c <- base::c
[16:21:17.082]             inherits <- base::inherits
[16:21:17.082]             invokeRestart <- base::invokeRestart
[16:21:17.082]             length <- base::length
[16:21:17.082]             list <- base::list
[16:21:17.082]             seq.int <- base::seq.int
[16:21:17.082]             signalCondition <- base::signalCondition
[16:21:17.082]             sys.calls <- base::sys.calls
[16:21:17.082]             `[[` <- base::`[[`
[16:21:17.082]             `+` <- base::`+`
[16:21:17.082]             `<<-` <- base::`<<-`
[16:21:17.082]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:17.082]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:17.082]                   3L)]
[16:21:17.082]             }
[16:21:17.082]             function(cond) {
[16:21:17.082]                 is_error <- inherits(cond, "error")
[16:21:17.082]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:17.082]                   NULL)
[16:21:17.082]                 if (is_error) {
[16:21:17.082]                   sessionInformation <- function() {
[16:21:17.082]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:17.082]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:17.082]                       search = base::search(), system = base::Sys.info())
[16:21:17.082]                   }
[16:21:17.082]                   ...future.conditions[[length(...future.conditions) + 
[16:21:17.082]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:17.082]                     cond$call), session = sessionInformation(), 
[16:21:17.082]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:17.082]                   signalCondition(cond)
[16:21:17.082]                 }
[16:21:17.082]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:17.082]                 "immediateCondition"))) {
[16:21:17.082]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:17.082]                   ...future.conditions[[length(...future.conditions) + 
[16:21:17.082]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:17.082]                   if (TRUE && !signal) {
[16:21:17.082]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:17.082]                     {
[16:21:17.082]                       inherits <- base::inherits
[16:21:17.082]                       invokeRestart <- base::invokeRestart
[16:21:17.082]                       is.null <- base::is.null
[16:21:17.082]                       muffled <- FALSE
[16:21:17.082]                       if (inherits(cond, "message")) {
[16:21:17.082]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:17.082]                         if (muffled) 
[16:21:17.082]                           invokeRestart("muffleMessage")
[16:21:17.082]                       }
[16:21:17.082]                       else if (inherits(cond, "warning")) {
[16:21:17.082]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:17.082]                         if (muffled) 
[16:21:17.082]                           invokeRestart("muffleWarning")
[16:21:17.082]                       }
[16:21:17.082]                       else if (inherits(cond, "condition")) {
[16:21:17.082]                         if (!is.null(pattern)) {
[16:21:17.082]                           computeRestarts <- base::computeRestarts
[16:21:17.082]                           grepl <- base::grepl
[16:21:17.082]                           restarts <- computeRestarts(cond)
[16:21:17.082]                           for (restart in restarts) {
[16:21:17.082]                             name <- restart$name
[16:21:17.082]                             if (is.null(name)) 
[16:21:17.082]                               next
[16:21:17.082]                             if (!grepl(pattern, name)) 
[16:21:17.082]                               next
[16:21:17.082]                             invokeRestart(restart)
[16:21:17.082]                             muffled <- TRUE
[16:21:17.082]                             break
[16:21:17.082]                           }
[16:21:17.082]                         }
[16:21:17.082]                       }
[16:21:17.082]                       invisible(muffled)
[16:21:17.082]                     }
[16:21:17.082]                     muffleCondition(cond, pattern = "^muffle")
[16:21:17.082]                   }
[16:21:17.082]                 }
[16:21:17.082]                 else {
[16:21:17.082]                   if (TRUE) {
[16:21:17.082]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:17.082]                     {
[16:21:17.082]                       inherits <- base::inherits
[16:21:17.082]                       invokeRestart <- base::invokeRestart
[16:21:17.082]                       is.null <- base::is.null
[16:21:17.082]                       muffled <- FALSE
[16:21:17.082]                       if (inherits(cond, "message")) {
[16:21:17.082]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:17.082]                         if (muffled) 
[16:21:17.082]                           invokeRestart("muffleMessage")
[16:21:17.082]                       }
[16:21:17.082]                       else if (inherits(cond, "warning")) {
[16:21:17.082]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:17.082]                         if (muffled) 
[16:21:17.082]                           invokeRestart("muffleWarning")
[16:21:17.082]                       }
[16:21:17.082]                       else if (inherits(cond, "condition")) {
[16:21:17.082]                         if (!is.null(pattern)) {
[16:21:17.082]                           computeRestarts <- base::computeRestarts
[16:21:17.082]                           grepl <- base::grepl
[16:21:17.082]                           restarts <- computeRestarts(cond)
[16:21:17.082]                           for (restart in restarts) {
[16:21:17.082]                             name <- restart$name
[16:21:17.082]                             if (is.null(name)) 
[16:21:17.082]                               next
[16:21:17.082]                             if (!grepl(pattern, name)) 
[16:21:17.082]                               next
[16:21:17.082]                             invokeRestart(restart)
[16:21:17.082]                             muffled <- TRUE
[16:21:17.082]                             break
[16:21:17.082]                           }
[16:21:17.082]                         }
[16:21:17.082]                       }
[16:21:17.082]                       invisible(muffled)
[16:21:17.082]                     }
[16:21:17.082]                     muffleCondition(cond, pattern = "^muffle")
[16:21:17.082]                   }
[16:21:17.082]                 }
[16:21:17.082]             }
[16:21:17.082]         }))
[16:21:17.082]     }, error = function(ex) {
[16:21:17.082]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:17.082]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:17.082]                 ...future.rng), started = ...future.startTime, 
[16:21:17.082]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:17.082]             version = "1.8"), class = "FutureResult")
[16:21:17.082]     }, finally = {
[16:21:17.082]         if (!identical(...future.workdir, getwd())) 
[16:21:17.082]             setwd(...future.workdir)
[16:21:17.082]         {
[16:21:17.082]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:17.082]                 ...future.oldOptions$nwarnings <- NULL
[16:21:17.082]             }
[16:21:17.082]             base::options(...future.oldOptions)
[16:21:17.082]             if (.Platform$OS.type == "windows") {
[16:21:17.082]                 old_names <- names(...future.oldEnvVars)
[16:21:17.082]                 envs <- base::Sys.getenv()
[16:21:17.082]                 names <- names(envs)
[16:21:17.082]                 common <- intersect(names, old_names)
[16:21:17.082]                 added <- setdiff(names, old_names)
[16:21:17.082]                 removed <- setdiff(old_names, names)
[16:21:17.082]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:17.082]                   envs[common]]
[16:21:17.082]                 NAMES <- toupper(changed)
[16:21:17.082]                 args <- list()
[16:21:17.082]                 for (kk in seq_along(NAMES)) {
[16:21:17.082]                   name <- changed[[kk]]
[16:21:17.082]                   NAME <- NAMES[[kk]]
[16:21:17.082]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:17.082]                     next
[16:21:17.082]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:17.082]                 }
[16:21:17.082]                 NAMES <- toupper(added)
[16:21:17.082]                 for (kk in seq_along(NAMES)) {
[16:21:17.082]                   name <- added[[kk]]
[16:21:17.082]                   NAME <- NAMES[[kk]]
[16:21:17.082]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:17.082]                     next
[16:21:17.082]                   args[[name]] <- ""
[16:21:17.082]                 }
[16:21:17.082]                 NAMES <- toupper(removed)
[16:21:17.082]                 for (kk in seq_along(NAMES)) {
[16:21:17.082]                   name <- removed[[kk]]
[16:21:17.082]                   NAME <- NAMES[[kk]]
[16:21:17.082]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:17.082]                     next
[16:21:17.082]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:17.082]                 }
[16:21:17.082]                 if (length(args) > 0) 
[16:21:17.082]                   base::do.call(base::Sys.setenv, args = args)
[16:21:17.082]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:17.082]             }
[16:21:17.082]             else {
[16:21:17.082]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:17.082]             }
[16:21:17.082]             {
[16:21:17.082]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:17.082]                   0L) {
[16:21:17.082]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:17.082]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:17.082]                   base::options(opts)
[16:21:17.082]                 }
[16:21:17.082]                 {
[16:21:17.082]                   {
[16:21:17.082]                     NULL
[16:21:17.082]                     RNGkind("Mersenne-Twister")
[16:21:17.082]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:21:17.082]                       inherits = FALSE)
[16:21:17.082]                   }
[16:21:17.082]                   options(future.plan = NULL)
[16:21:17.082]                   if (is.na(NA_character_)) 
[16:21:17.082]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:17.082]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:17.082]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:17.082]                     .init = FALSE)
[16:21:17.082]                 }
[16:21:17.082]             }
[16:21:17.082]         }
[16:21:17.082]     })
[16:21:17.082]     if (TRUE) {
[16:21:17.082]         base::sink(type = "output", split = FALSE)
[16:21:17.082]         if (TRUE) {
[16:21:17.082]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:17.082]         }
[16:21:17.082]         else {
[16:21:17.082]             ...future.result["stdout"] <- base::list(NULL)
[16:21:17.082]         }
[16:21:17.082]         base::close(...future.stdout)
[16:21:17.082]         ...future.stdout <- NULL
[16:21:17.082]     }
[16:21:17.082]     ...future.result$conditions <- ...future.conditions
[16:21:17.082]     ...future.result$finished <- base::Sys.time()
[16:21:17.082]     ...future.result
[16:21:17.082] }
[16:21:17.084] assign_globals() ...
[16:21:17.084] List of 1
[16:21:17.084]  $ ii: int 2
[16:21:17.084]  - attr(*, "where")=List of 1
[16:21:17.084]   ..$ ii:<environment: R_EmptyEnv> 
[16:21:17.084]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:21:17.084]  - attr(*, "resolved")= logi FALSE
[16:21:17.084]  - attr(*, "total_size")= num 56
[16:21:17.086] - copied ‘ii’ to environment
[16:21:17.086] assign_globals() ... done
[16:21:17.086] plan(): Setting new future strategy stack:
[16:21:17.086] List of future strategies:
[16:21:17.086] 1. sequential:
[16:21:17.086]    - args: function (..., envir = parent.frame())
[16:21:17.086]    - tweaked: FALSE
[16:21:17.086]    - call: NULL
[16:21:17.087] plan(): nbrOfWorkers() = 1
[16:21:17.088] plan(): Setting new future strategy stack:
[16:21:17.088] List of future strategies:
[16:21:17.088] 1. sequential:
[16:21:17.088]    - args: function (..., envir = parent.frame())
[16:21:17.088]    - tweaked: FALSE
[16:21:17.088]    - call: future::plan("sequential")
[16:21:17.088] plan(): nbrOfWorkers() = 1
[16:21:17.088] SequentialFuture started (and completed)
*** multisession() - workers inherit .libPaths()
[16:21:17.088] getGlobalsAndPackages() ...
[16:21:17.089] Searching for globals...
[16:21:17.089] - globals found: [1] ‘.libPaths’
[16:21:17.089] Searching for globals ... DONE
[16:21:17.089] Resolving globals: FALSE
[16:21:17.089] 
[16:21:17.090] 
[16:21:17.090] getGlobalsAndPackages() ... DONE
[16:21:17.090] run() for ‘Future’ ...
[16:21:17.090] - state: ‘created’
[16:21:17.090] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:21:17.092] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:21:17.093] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:21:17.093]   - Field: ‘label’
[16:21:17.093]   - Field: ‘local’
[16:21:17.093]   - Field: ‘owner’
[16:21:17.093]   - Field: ‘envir’
[16:21:17.093]   - Field: ‘packages’
[16:21:17.093]   - Field: ‘gc’
[16:21:17.093]   - Field: ‘conditions’
[16:21:17.093]   - Field: ‘expr’
[16:21:17.094]   - Field: ‘uuid’
[16:21:17.094]   - Field: ‘seed’
[16:21:17.094]   - Field: ‘version’
[16:21:17.094]   - Field: ‘result’
[16:21:17.094]   - Field: ‘asynchronous’
[16:21:17.094]   - Field: ‘calls’
[16:21:17.094]   - Field: ‘globals’
[16:21:17.094]   - Field: ‘stdout’
[16:21:17.094]   - Field: ‘earlySignal’
[16:21:17.094]   - Field: ‘lazy’
[16:21:17.094]   - Field: ‘state’
[16:21:17.095] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:21:17.095] - Launch lazy future ...
[16:21:17.095] Packages needed by the future expression (n = 0): <none>
[16:21:17.095] Packages needed by future strategies (n = 0): <none>
[16:21:17.095] {
[16:21:17.095]     {
[16:21:17.095]         {
[16:21:17.095]             ...future.startTime <- base::Sys.time()
[16:21:17.095]             {
[16:21:17.095]                 {
[16:21:17.095]                   {
[16:21:17.095]                     base::local({
[16:21:17.095]                       has_future <- base::requireNamespace("future", 
[16:21:17.095]                         quietly = TRUE)
[16:21:17.095]                       if (has_future) {
[16:21:17.095]                         ns <- base::getNamespace("future")
[16:21:17.095]                         version <- ns[[".package"]][["version"]]
[16:21:17.095]                         if (is.null(version)) 
[16:21:17.095]                           version <- utils::packageVersion("future")
[16:21:17.095]                       }
[16:21:17.095]                       else {
[16:21:17.095]                         version <- NULL
[16:21:17.095]                       }
[16:21:17.095]                       if (!has_future || version < "1.8.0") {
[16:21:17.095]                         info <- base::c(r_version = base::gsub("R version ", 
[16:21:17.095]                           "", base::R.version$version.string), 
[16:21:17.095]                           platform = base::sprintf("%s (%s-bit)", 
[16:21:17.095]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:17.095]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:17.095]                             "release", "version")], collapse = " "), 
[16:21:17.095]                           hostname = base::Sys.info()[["nodename"]])
[16:21:17.095]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:21:17.095]                           info)
[16:21:17.095]                         info <- base::paste(info, collapse = "; ")
[16:21:17.095]                         if (!has_future) {
[16:21:17.095]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:17.095]                             info)
[16:21:17.095]                         }
[16:21:17.095]                         else {
[16:21:17.095]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:17.095]                             info, version)
[16:21:17.095]                         }
[16:21:17.095]                         base::stop(msg)
[16:21:17.095]                       }
[16:21:17.095]                     })
[16:21:17.095]                   }
[16:21:17.095]                   ...future.strategy.old <- future::plan("list")
[16:21:17.095]                   options(future.plan = NULL)
[16:21:17.095]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:17.095]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:17.095]                 }
[16:21:17.095]                 ...future.workdir <- getwd()
[16:21:17.095]             }
[16:21:17.095]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:17.095]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:17.095]         }
[16:21:17.095]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:17.095]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:17.095]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:17.095]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:17.095]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:17.095]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:17.095]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:17.095]             base::names(...future.oldOptions))
[16:21:17.095]     }
[16:21:17.095]     if (FALSE) {
[16:21:17.095]     }
[16:21:17.095]     else {
[16:21:17.095]         if (TRUE) {
[16:21:17.095]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:17.095]                 open = "w")
[16:21:17.095]         }
[16:21:17.095]         else {
[16:21:17.095]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:17.095]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:17.095]         }
[16:21:17.095]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:17.095]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:17.095]             base::sink(type = "output", split = FALSE)
[16:21:17.095]             base::close(...future.stdout)
[16:21:17.095]         }, add = TRUE)
[16:21:17.095]     }
[16:21:17.095]     ...future.frame <- base::sys.nframe()
[16:21:17.095]     ...future.conditions <- base::list()
[16:21:17.095]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:17.095]     if (FALSE) {
[16:21:17.095]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:17.095]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:17.095]     }
[16:21:17.095]     ...future.result <- base::tryCatch({
[16:21:17.095]         base::withCallingHandlers({
[16:21:17.095]             ...future.value <- base::withVisible(base::local(.libPaths()))
[16:21:17.095]             future::FutureResult(value = ...future.value$value, 
[16:21:17.095]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:17.095]                   ...future.rng), globalenv = if (FALSE) 
[16:21:17.095]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:17.095]                     ...future.globalenv.names))
[16:21:17.095]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:17.095]         }, condition = base::local({
[16:21:17.095]             c <- base::c
[16:21:17.095]             inherits <- base::inherits
[16:21:17.095]             invokeRestart <- base::invokeRestart
[16:21:17.095]             length <- base::length
[16:21:17.095]             list <- base::list
[16:21:17.095]             seq.int <- base::seq.int
[16:21:17.095]             signalCondition <- base::signalCondition
[16:21:17.095]             sys.calls <- base::sys.calls
[16:21:17.095]             `[[` <- base::`[[`
[16:21:17.095]             `+` <- base::`+`
[16:21:17.095]             `<<-` <- base::`<<-`
[16:21:17.095]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:17.095]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:17.095]                   3L)]
[16:21:17.095]             }
[16:21:17.095]             function(cond) {
[16:21:17.095]                 is_error <- inherits(cond, "error")
[16:21:17.095]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:17.095]                   NULL)
[16:21:17.095]                 if (is_error) {
[16:21:17.095]                   sessionInformation <- function() {
[16:21:17.095]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:17.095]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:17.095]                       search = base::search(), system = base::Sys.info())
[16:21:17.095]                   }
[16:21:17.095]                   ...future.conditions[[length(...future.conditions) + 
[16:21:17.095]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:17.095]                     cond$call), session = sessionInformation(), 
[16:21:17.095]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:17.095]                   signalCondition(cond)
[16:21:17.095]                 }
[16:21:17.095]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:17.095]                 "immediateCondition"))) {
[16:21:17.095]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:17.095]                   ...future.conditions[[length(...future.conditions) + 
[16:21:17.095]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:17.095]                   if (TRUE && !signal) {
[16:21:17.095]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:17.095]                     {
[16:21:17.095]                       inherits <- base::inherits
[16:21:17.095]                       invokeRestart <- base::invokeRestart
[16:21:17.095]                       is.null <- base::is.null
[16:21:17.095]                       muffled <- FALSE
[16:21:17.095]                       if (inherits(cond, "message")) {
[16:21:17.095]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:17.095]                         if (muffled) 
[16:21:17.095]                           invokeRestart("muffleMessage")
[16:21:17.095]                       }
[16:21:17.095]                       else if (inherits(cond, "warning")) {
[16:21:17.095]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:17.095]                         if (muffled) 
[16:21:17.095]                           invokeRestart("muffleWarning")
[16:21:17.095]                       }
[16:21:17.095]                       else if (inherits(cond, "condition")) {
[16:21:17.095]                         if (!is.null(pattern)) {
[16:21:17.095]                           computeRestarts <- base::computeRestarts
[16:21:17.095]                           grepl <- base::grepl
[16:21:17.095]                           restarts <- computeRestarts(cond)
[16:21:17.095]                           for (restart in restarts) {
[16:21:17.095]                             name <- restart$name
[16:21:17.095]                             if (is.null(name)) 
[16:21:17.095]                               next
[16:21:17.095]                             if (!grepl(pattern, name)) 
[16:21:17.095]                               next
[16:21:17.095]                             invokeRestart(restart)
[16:21:17.095]                             muffled <- TRUE
[16:21:17.095]                             break
[16:21:17.095]                           }
[16:21:17.095]                         }
[16:21:17.095]                       }
[16:21:17.095]                       invisible(muffled)
[16:21:17.095]                     }
[16:21:17.095]                     muffleCondition(cond, pattern = "^muffle")
[16:21:17.095]                   }
[16:21:17.095]                 }
[16:21:17.095]                 else {
[16:21:17.095]                   if (TRUE) {
[16:21:17.095]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:17.095]                     {
[16:21:17.095]                       inherits <- base::inherits
[16:21:17.095]                       invokeRestart <- base::invokeRestart
[16:21:17.095]                       is.null <- base::is.null
[16:21:17.095]                       muffled <- FALSE
[16:21:17.095]                       if (inherits(cond, "message")) {
[16:21:17.095]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:17.095]                         if (muffled) 
[16:21:17.095]                           invokeRestart("muffleMessage")
[16:21:17.095]                       }
[16:21:17.095]                       else if (inherits(cond, "warning")) {
[16:21:17.095]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:17.095]                         if (muffled) 
[16:21:17.095]                           invokeRestart("muffleWarning")
[16:21:17.095]                       }
[16:21:17.095]                       else if (inherits(cond, "condition")) {
[16:21:17.095]                         if (!is.null(pattern)) {
[16:21:17.095]                           computeRestarts <- base::computeRestarts
[16:21:17.095]                           grepl <- base::grepl
[16:21:17.095]                           restarts <- computeRestarts(cond)
[16:21:17.095]                           for (restart in restarts) {
[16:21:17.095]                             name <- restart$name
[16:21:17.095]                             if (is.null(name)) 
[16:21:17.095]                               next
[16:21:17.095]                             if (!grepl(pattern, name)) 
[16:21:17.095]                               next
[16:21:17.095]                             invokeRestart(restart)
[16:21:17.095]                             muffled <- TRUE
[16:21:17.095]                             break
[16:21:17.095]                           }
[16:21:17.095]                         }
[16:21:17.095]                       }
[16:21:17.095]                       invisible(muffled)
[16:21:17.095]                     }
[16:21:17.095]                     muffleCondition(cond, pattern = "^muffle")
[16:21:17.095]                   }
[16:21:17.095]                 }
[16:21:17.095]             }
[16:21:17.095]         }))
[16:21:17.095]     }, error = function(ex) {
[16:21:17.095]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:17.095]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:17.095]                 ...future.rng), started = ...future.startTime, 
[16:21:17.095]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:17.095]             version = "1.8"), class = "FutureResult")
[16:21:17.095]     }, finally = {
[16:21:17.095]         if (!identical(...future.workdir, getwd())) 
[16:21:17.095]             setwd(...future.workdir)
[16:21:17.095]         {
[16:21:17.095]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:17.095]                 ...future.oldOptions$nwarnings <- NULL
[16:21:17.095]             }
[16:21:17.095]             base::options(...future.oldOptions)
[16:21:17.095]             if (.Platform$OS.type == "windows") {
[16:21:17.095]                 old_names <- names(...future.oldEnvVars)
[16:21:17.095]                 envs <- base::Sys.getenv()
[16:21:17.095]                 names <- names(envs)
[16:21:17.095]                 common <- intersect(names, old_names)
[16:21:17.095]                 added <- setdiff(names, old_names)
[16:21:17.095]                 removed <- setdiff(old_names, names)
[16:21:17.095]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:17.095]                   envs[common]]
[16:21:17.095]                 NAMES <- toupper(changed)
[16:21:17.095]                 args <- list()
[16:21:17.095]                 for (kk in seq_along(NAMES)) {
[16:21:17.095]                   name <- changed[[kk]]
[16:21:17.095]                   NAME <- NAMES[[kk]]
[16:21:17.095]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:17.095]                     next
[16:21:17.095]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:17.095]                 }
[16:21:17.095]                 NAMES <- toupper(added)
[16:21:17.095]                 for (kk in seq_along(NAMES)) {
[16:21:17.095]                   name <- added[[kk]]
[16:21:17.095]                   NAME <- NAMES[[kk]]
[16:21:17.095]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:17.095]                     next
[16:21:17.095]                   args[[name]] <- ""
[16:21:17.095]                 }
[16:21:17.095]                 NAMES <- toupper(removed)
[16:21:17.095]                 for (kk in seq_along(NAMES)) {
[16:21:17.095]                   name <- removed[[kk]]
[16:21:17.095]                   NAME <- NAMES[[kk]]
[16:21:17.095]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:17.095]                     next
[16:21:17.095]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:17.095]                 }
[16:21:17.095]                 if (length(args) > 0) 
[16:21:17.095]                   base::do.call(base::Sys.setenv, args = args)
[16:21:17.095]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:17.095]             }
[16:21:17.095]             else {
[16:21:17.095]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:17.095]             }
[16:21:17.095]             {
[16:21:17.095]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:17.095]                   0L) {
[16:21:17.095]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:17.095]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:17.095]                   base::options(opts)
[16:21:17.095]                 }
[16:21:17.095]                 {
[16:21:17.095]                   {
[16:21:17.095]                     NULL
[16:21:17.095]                     RNGkind("Mersenne-Twister")
[16:21:17.095]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:21:17.095]                       inherits = FALSE)
[16:21:17.095]                   }
[16:21:17.095]                   options(future.plan = NULL)
[16:21:17.095]                   if (is.na(NA_character_)) 
[16:21:17.095]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:17.095]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:17.095]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:17.095]                     .init = FALSE)
[16:21:17.095]                 }
[16:21:17.095]             }
[16:21:17.095]         }
[16:21:17.095]     })
[16:21:17.095]     if (TRUE) {
[16:21:17.095]         base::sink(type = "output", split = FALSE)
[16:21:17.095]         if (TRUE) {
[16:21:17.095]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:17.095]         }
[16:21:17.095]         else {
[16:21:17.095]             ...future.result["stdout"] <- base::list(NULL)
[16:21:17.095]         }
[16:21:17.095]         base::close(...future.stdout)
[16:21:17.095]         ...future.stdout <- NULL
[16:21:17.095]     }
[16:21:17.095]     ...future.result$conditions <- ...future.conditions
[16:21:17.095]     ...future.result$finished <- base::Sys.time()
[16:21:17.095]     ...future.result
[16:21:17.095] }
[16:21:17.097] plan(): Setting new future strategy stack:
[16:21:17.097] List of future strategies:
[16:21:17.097] 1. sequential:
[16:21:17.097]    - args: function (..., envir = parent.frame())
[16:21:17.097]    - tweaked: FALSE
[16:21:17.097]    - call: NULL
[16:21:17.098] plan(): nbrOfWorkers() = 1
[16:21:17.098] plan(): Setting new future strategy stack:
[16:21:17.098] List of future strategies:
[16:21:17.098] 1. sequential:
[16:21:17.098]    - args: function (..., envir = parent.frame())
[16:21:17.098]    - tweaked: FALSE
[16:21:17.098]    - call: future::plan("sequential")
[16:21:17.099] plan(): nbrOfWorkers() = 1
[16:21:17.099] SequentialFuture started (and completed)
[16:21:17.099] - Launch lazy future ... done
[16:21:17.099] run() for ‘SequentialFuture’ ... done
List of 2
 $ main   : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
 $ workers: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
*** multisession() and errors
[16:21:17.103] getGlobalsAndPackages() ...
[16:21:17.103] Searching for globals...
[16:21:17.104] - globals found: [2] ‘{’, ‘stop’
[16:21:17.104] Searching for globals ... DONE
[16:21:17.104] Resolving globals: FALSE
[16:21:17.105] 
[16:21:17.105] 
[16:21:17.105] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    stop("Whoops!")
    1
}
Lazy evaluation: TRUE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 3e579109-592e-0b73-60c9-ee81fb289d87
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:21:17.105] Packages needed by the future expression (n = 0): <none>
[16:21:17.106] Packages needed by future strategies (n = 0): <none>
[16:21:17.106] {
[16:21:17.106]     {
[16:21:17.106]         {
[16:21:17.106]             ...future.startTime <- base::Sys.time()
[16:21:17.106]             {
[16:21:17.106]                 {
[16:21:17.106]                   {
[16:21:17.106]                     base::local({
[16:21:17.106]                       has_future <- base::requireNamespace("future", 
[16:21:17.106]                         quietly = TRUE)
[16:21:17.106]                       if (has_future) {
[16:21:17.106]                         ns <- base::getNamespace("future")
[16:21:17.106]                         version <- ns[[".package"]][["version"]]
[16:21:17.106]                         if (is.null(version)) 
[16:21:17.106]                           version <- utils::packageVersion("future")
[16:21:17.106]                       }
[16:21:17.106]                       else {
[16:21:17.106]                         version <- NULL
[16:21:17.106]                       }
[16:21:17.106]                       if (!has_future || version < "1.8.0") {
[16:21:17.106]                         info <- base::c(r_version = base::gsub("R version ", 
[16:21:17.106]                           "", base::R.version$version.string), 
[16:21:17.106]                           platform = base::sprintf("%s (%s-bit)", 
[16:21:17.106]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:17.106]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:17.106]                             "release", "version")], collapse = " "), 
[16:21:17.106]                           hostname = base::Sys.info()[["nodename"]])
[16:21:17.106]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:21:17.106]                           info)
[16:21:17.106]                         info <- base::paste(info, collapse = "; ")
[16:21:17.106]                         if (!has_future) {
[16:21:17.106]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:17.106]                             info)
[16:21:17.106]                         }
[16:21:17.106]                         else {
[16:21:17.106]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:17.106]                             info, version)
[16:21:17.106]                         }
[16:21:17.106]                         base::stop(msg)
[16:21:17.106]                       }
[16:21:17.106]                     })
[16:21:17.106]                   }
[16:21:17.106]                   ...future.strategy.old <- future::plan("list")
[16:21:17.106]                   options(future.plan = NULL)
[16:21:17.106]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:17.106]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:17.106]                 }
[16:21:17.106]                 ...future.workdir <- getwd()
[16:21:17.106]             }
[16:21:17.106]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:17.106]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:17.106]         }
[16:21:17.106]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:17.106]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:17.106]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:17.106]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:17.106]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:17.106]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:17.106]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:17.106]             base::names(...future.oldOptions))
[16:21:17.106]     }
[16:21:17.106]     if (FALSE) {
[16:21:17.106]     }
[16:21:17.106]     else {
[16:21:17.106]         if (TRUE) {
[16:21:17.106]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:17.106]                 open = "w")
[16:21:17.106]         }
[16:21:17.106]         else {
[16:21:17.106]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:17.106]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:17.106]         }
[16:21:17.106]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:17.106]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:17.106]             base::sink(type = "output", split = FALSE)
[16:21:17.106]             base::close(...future.stdout)
[16:21:17.106]         }, add = TRUE)
[16:21:17.106]     }
[16:21:17.106]     ...future.frame <- base::sys.nframe()
[16:21:17.106]     ...future.conditions <- base::list()
[16:21:17.106]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:17.106]     if (FALSE) {
[16:21:17.106]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:17.106]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:17.106]     }
[16:21:17.106]     ...future.result <- base::tryCatch({
[16:21:17.106]         base::withCallingHandlers({
[16:21:17.106]             ...future.value <- base::withVisible(base::local({
[16:21:17.106]                 stop("Whoops!")
[16:21:17.106]                 1
[16:21:17.106]             }))
[16:21:17.106]             future::FutureResult(value = ...future.value$value, 
[16:21:17.106]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:17.106]                   ...future.rng), globalenv = if (FALSE) 
[16:21:17.106]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:17.106]                     ...future.globalenv.names))
[16:21:17.106]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:17.106]         }, condition = base::local({
[16:21:17.106]             c <- base::c
[16:21:17.106]             inherits <- base::inherits
[16:21:17.106]             invokeRestart <- base::invokeRestart
[16:21:17.106]             length <- base::length
[16:21:17.106]             list <- base::list
[16:21:17.106]             seq.int <- base::seq.int
[16:21:17.106]             signalCondition <- base::signalCondition
[16:21:17.106]             sys.calls <- base::sys.calls
[16:21:17.106]             `[[` <- base::`[[`
[16:21:17.106]             `+` <- base::`+`
[16:21:17.106]             `<<-` <- base::`<<-`
[16:21:17.106]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:17.106]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:17.106]                   3L)]
[16:21:17.106]             }
[16:21:17.106]             function(cond) {
[16:21:17.106]                 is_error <- inherits(cond, "error")
[16:21:17.106]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:17.106]                   NULL)
[16:21:17.106]                 if (is_error) {
[16:21:17.106]                   sessionInformation <- function() {
[16:21:17.106]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:17.106]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:17.106]                       search = base::search(), system = base::Sys.info())
[16:21:17.106]                   }
[16:21:17.106]                   ...future.conditions[[length(...future.conditions) + 
[16:21:17.106]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:17.106]                     cond$call), session = sessionInformation(), 
[16:21:17.106]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:17.106]                   signalCondition(cond)
[16:21:17.106]                 }
[16:21:17.106]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:17.106]                 "immediateCondition"))) {
[16:21:17.106]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:17.106]                   ...future.conditions[[length(...future.conditions) + 
[16:21:17.106]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:17.106]                   if (TRUE && !signal) {
[16:21:17.106]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:17.106]                     {
[16:21:17.106]                       inherits <- base::inherits
[16:21:17.106]                       invokeRestart <- base::invokeRestart
[16:21:17.106]                       is.null <- base::is.null
[16:21:17.106]                       muffled <- FALSE
[16:21:17.106]                       if (inherits(cond, "message")) {
[16:21:17.106]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:17.106]                         if (muffled) 
[16:21:17.106]                           invokeRestart("muffleMessage")
[16:21:17.106]                       }
[16:21:17.106]                       else if (inherits(cond, "warning")) {
[16:21:17.106]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:17.106]                         if (muffled) 
[16:21:17.106]                           invokeRestart("muffleWarning")
[16:21:17.106]                       }
[16:21:17.106]                       else if (inherits(cond, "condition")) {
[16:21:17.106]                         if (!is.null(pattern)) {
[16:21:17.106]                           computeRestarts <- base::computeRestarts
[16:21:17.106]                           grepl <- base::grepl
[16:21:17.106]                           restarts <- computeRestarts(cond)
[16:21:17.106]                           for (restart in restarts) {
[16:21:17.106]                             name <- restart$name
[16:21:17.106]                             if (is.null(name)) 
[16:21:17.106]                               next
[16:21:17.106]                             if (!grepl(pattern, name)) 
[16:21:17.106]                               next
[16:21:17.106]                             invokeRestart(restart)
[16:21:17.106]                             muffled <- TRUE
[16:21:17.106]                             break
[16:21:17.106]                           }
[16:21:17.106]                         }
[16:21:17.106]                       }
[16:21:17.106]                       invisible(muffled)
[16:21:17.106]                     }
[16:21:17.106]                     muffleCondition(cond, pattern = "^muffle")
[16:21:17.106]                   }
[16:21:17.106]                 }
[16:21:17.106]                 else {
[16:21:17.106]                   if (TRUE) {
[16:21:17.106]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:17.106]                     {
[16:21:17.106]                       inherits <- base::inherits
[16:21:17.106]                       invokeRestart <- base::invokeRestart
[16:21:17.106]                       is.null <- base::is.null
[16:21:17.106]                       muffled <- FALSE
[16:21:17.106]                       if (inherits(cond, "message")) {
[16:21:17.106]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:17.106]                         if (muffled) 
[16:21:17.106]                           invokeRestart("muffleMessage")
[16:21:17.106]                       }
[16:21:17.106]                       else if (inherits(cond, "warning")) {
[16:21:17.106]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:17.106]                         if (muffled) 
[16:21:17.106]                           invokeRestart("muffleWarning")
[16:21:17.106]                       }
[16:21:17.106]                       else if (inherits(cond, "condition")) {
[16:21:17.106]                         if (!is.null(pattern)) {
[16:21:17.106]                           computeRestarts <- base::computeRestarts
[16:21:17.106]                           grepl <- base::grepl
[16:21:17.106]                           restarts <- computeRestarts(cond)
[16:21:17.106]                           for (restart in restarts) {
[16:21:17.106]                             name <- restart$name
[16:21:17.106]                             if (is.null(name)) 
[16:21:17.106]                               next
[16:21:17.106]                             if (!grepl(pattern, name)) 
[16:21:17.106]                               next
[16:21:17.106]                             invokeRestart(restart)
[16:21:17.106]                             muffled <- TRUE
[16:21:17.106]                             break
[16:21:17.106]                           }
[16:21:17.106]                         }
[16:21:17.106]                       }
[16:21:17.106]                       invisible(muffled)
[16:21:17.106]                     }
[16:21:17.106]                     muffleCondition(cond, pattern = "^muffle")
[16:21:17.106]                   }
[16:21:17.106]                 }
[16:21:17.106]             }
[16:21:17.106]         }))
[16:21:17.106]     }, error = function(ex) {
[16:21:17.106]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:17.106]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:17.106]                 ...future.rng), started = ...future.startTime, 
[16:21:17.106]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:17.106]             version = "1.8"), class = "FutureResult")
[16:21:17.106]     }, finally = {
[16:21:17.106]         if (!identical(...future.workdir, getwd())) 
[16:21:17.106]             setwd(...future.workdir)
[16:21:17.106]         {
[16:21:17.106]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:17.106]                 ...future.oldOptions$nwarnings <- NULL
[16:21:17.106]             }
[16:21:17.106]             base::options(...future.oldOptions)
[16:21:17.106]             if (.Platform$OS.type == "windows") {
[16:21:17.106]                 old_names <- names(...future.oldEnvVars)
[16:21:17.106]                 envs <- base::Sys.getenv()
[16:21:17.106]                 names <- names(envs)
[16:21:17.106]                 common <- intersect(names, old_names)
[16:21:17.106]                 added <- setdiff(names, old_names)
[16:21:17.106]                 removed <- setdiff(old_names, names)
[16:21:17.106]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:17.106]                   envs[common]]
[16:21:17.106]                 NAMES <- toupper(changed)
[16:21:17.106]                 args <- list()
[16:21:17.106]                 for (kk in seq_along(NAMES)) {
[16:21:17.106]                   name <- changed[[kk]]
[16:21:17.106]                   NAME <- NAMES[[kk]]
[16:21:17.106]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:17.106]                     next
[16:21:17.106]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:17.106]                 }
[16:21:17.106]                 NAMES <- toupper(added)
[16:21:17.106]                 for (kk in seq_along(NAMES)) {
[16:21:17.106]                   name <- added[[kk]]
[16:21:17.106]                   NAME <- NAMES[[kk]]
[16:21:17.106]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:17.106]                     next
[16:21:17.106]                   args[[name]] <- ""
[16:21:17.106]                 }
[16:21:17.106]                 NAMES <- toupper(removed)
[16:21:17.106]                 for (kk in seq_along(NAMES)) {
[16:21:17.106]                   name <- removed[[kk]]
[16:21:17.106]                   NAME <- NAMES[[kk]]
[16:21:17.106]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:17.106]                     next
[16:21:17.106]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:17.106]                 }
[16:21:17.106]                 if (length(args) > 0) 
[16:21:17.106]                   base::do.call(base::Sys.setenv, args = args)
[16:21:17.106]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:17.106]             }
[16:21:17.106]             else {
[16:21:17.106]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:17.106]             }
[16:21:17.106]             {
[16:21:17.106]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:17.106]                   0L) {
[16:21:17.106]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:17.106]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:17.106]                   base::options(opts)
[16:21:17.106]                 }
[16:21:17.106]                 {
[16:21:17.106]                   {
[16:21:17.106]                     NULL
[16:21:17.106]                     RNGkind("Mersenne-Twister")
[16:21:17.106]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:21:17.106]                       inherits = FALSE)
[16:21:17.106]                   }
[16:21:17.106]                   options(future.plan = NULL)
[16:21:17.106]                   if (is.na(NA_character_)) 
[16:21:17.106]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:17.106]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:17.106]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:17.106]                     .init = FALSE)
[16:21:17.106]                 }
[16:21:17.106]             }
[16:21:17.106]         }
[16:21:17.106]     })
[16:21:17.106]     if (TRUE) {
[16:21:17.106]         base::sink(type = "output", split = FALSE)
[16:21:17.106]         if (TRUE) {
[16:21:17.106]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:17.106]         }
[16:21:17.106]         else {
[16:21:17.106]             ...future.result["stdout"] <- base::list(NULL)
[16:21:17.106]         }
[16:21:17.106]         base::close(...future.stdout)
[16:21:17.106]         ...future.stdout <- NULL
[16:21:17.106]     }
[16:21:17.106]     ...future.result$conditions <- ...future.conditions
[16:21:17.106]     ...future.result$finished <- base::Sys.time()
[16:21:17.106]     ...future.result
[16:21:17.106] }
[16:21:17.108] plan(): Setting new future strategy stack:
[16:21:17.108] List of future strategies:
[16:21:17.108] 1. sequential:
[16:21:17.108]    - args: function (..., envir = parent.frame())
[16:21:17.108]    - tweaked: FALSE
[16:21:17.108]    - call: NULL
[16:21:17.108] plan(): nbrOfWorkers() = 1
[16:21:17.109] plan(): Setting new future strategy stack:
[16:21:17.109] List of future strategies:
[16:21:17.109] 1. sequential:
[16:21:17.109]    - args: function (..., envir = parent.frame())
[16:21:17.109]    - tweaked: FALSE
[16:21:17.109]    - call: future::plan("sequential")
[16:21:17.109] plan(): nbrOfWorkers() = 1
[16:21:17.110] SequentialFuture started (and completed)
[16:21:17.110] signalConditions() ...
[16:21:17.110]  - include = ‘immediateCondition’
[16:21:17.110]  - exclude = 
[16:21:17.110]  - resignal = FALSE
[16:21:17.110]  - Number of conditions: 1
[16:21:17.110] signalConditions() ... done
[16:21:17.110] signalConditions() ...
[16:21:17.110]  - include = ‘immediateCondition’
[16:21:17.110]  - exclude = 
[16:21:17.111]  - resignal = FALSE
[16:21:17.111]  - Number of conditions: 1
[16:21:17.111] signalConditions() ... done
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[16:21:17.111] signalConditions() ...
[16:21:17.111]  - include = ‘immediateCondition’
[16:21:17.111]  - exclude = 
[16:21:17.111]  - resignal = FALSE
[16:21:17.111]  - Number of conditions: 1
[16:21:17.111] signalConditions() ... done
[16:21:17.112] Future state: ‘finished’
[16:21:17.112] signalConditions() ...
[16:21:17.112]  - include = ‘condition’
[16:21:17.112]  - exclude = ‘immediateCondition’
[16:21:17.112]  - resignal = TRUE
[16:21:17.112]  - Number of conditions: 1
[16:21:17.112]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[16:21:17.112] signalConditions() ... done
[1] "Error in eval(quote({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[16:21:17.113] signalConditions() ...
[16:21:17.113]  - include = ‘immediateCondition’
[16:21:17.113]  - exclude = 
[16:21:17.113]  - resignal = FALSE
[16:21:17.113]  - Number of conditions: 1
[16:21:17.113] signalConditions() ... done
[16:21:17.113] Future state: ‘finished’
[16:21:17.113] signalConditions() ...
[16:21:17.113]  - include = ‘condition’
[16:21:17.113]  - exclude = ‘immediateCondition’
[16:21:17.114]  - resignal = TRUE
[16:21:17.114]  - Number of conditions: 1
[16:21:17.114]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[16:21:17.114] signalConditions() ... done
[1] "Error in eval(quote({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[16:21:17.117] getGlobalsAndPackages() ...
[16:21:17.117] Searching for globals...
[16:21:17.118] - globals found: [5] ‘{’, ‘stop’, ‘structure’, ‘list’, ‘c’
[16:21:17.118] Searching for globals ... DONE
[16:21:17.119] Resolving globals: FALSE
[16:21:17.119] 
[16:21:17.119] 
[16:21:17.119] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    stop(structure(list(message = "boom"), class = c("MyError", 
        "error", "condition")))
}
Lazy evaluation: TRUE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 3e579109-592e-0b73-60c9-ee81fb289d87
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:21:17.120] Packages needed by the future expression (n = 0): <none>
[16:21:17.120] Packages needed by future strategies (n = 0): <none>
[16:21:17.120] {
[16:21:17.120]     {
[16:21:17.120]         {
[16:21:17.120]             ...future.startTime <- base::Sys.time()
[16:21:17.120]             {
[16:21:17.120]                 {
[16:21:17.120]                   {
[16:21:17.120]                     base::local({
[16:21:17.120]                       has_future <- base::requireNamespace("future", 
[16:21:17.120]                         quietly = TRUE)
[16:21:17.120]                       if (has_future) {
[16:21:17.120]                         ns <- base::getNamespace("future")
[16:21:17.120]                         version <- ns[[".package"]][["version"]]
[16:21:17.120]                         if (is.null(version)) 
[16:21:17.120]                           version <- utils::packageVersion("future")
[16:21:17.120]                       }
[16:21:17.120]                       else {
[16:21:17.120]                         version <- NULL
[16:21:17.120]                       }
[16:21:17.120]                       if (!has_future || version < "1.8.0") {
[16:21:17.120]                         info <- base::c(r_version = base::gsub("R version ", 
[16:21:17.120]                           "", base::R.version$version.string), 
[16:21:17.120]                           platform = base::sprintf("%s (%s-bit)", 
[16:21:17.120]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:17.120]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:17.120]                             "release", "version")], collapse = " "), 
[16:21:17.120]                           hostname = base::Sys.info()[["nodename"]])
[16:21:17.120]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:21:17.120]                           info)
[16:21:17.120]                         info <- base::paste(info, collapse = "; ")
[16:21:17.120]                         if (!has_future) {
[16:21:17.120]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:17.120]                             info)
[16:21:17.120]                         }
[16:21:17.120]                         else {
[16:21:17.120]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:17.120]                             info, version)
[16:21:17.120]                         }
[16:21:17.120]                         base::stop(msg)
[16:21:17.120]                       }
[16:21:17.120]                     })
[16:21:17.120]                   }
[16:21:17.120]                   ...future.strategy.old <- future::plan("list")
[16:21:17.120]                   options(future.plan = NULL)
[16:21:17.120]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:17.120]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:17.120]                 }
[16:21:17.120]                 ...future.workdir <- getwd()
[16:21:17.120]             }
[16:21:17.120]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:17.120]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:17.120]         }
[16:21:17.120]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:17.120]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:17.120]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:17.120]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:17.120]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:17.120]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:17.120]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:17.120]             base::names(...future.oldOptions))
[16:21:17.120]     }
[16:21:17.120]     if (FALSE) {
[16:21:17.120]     }
[16:21:17.120]     else {
[16:21:17.120]         if (TRUE) {
[16:21:17.120]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:17.120]                 open = "w")
[16:21:17.120]         }
[16:21:17.120]         else {
[16:21:17.120]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:17.120]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:17.120]         }
[16:21:17.120]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:17.120]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:17.120]             base::sink(type = "output", split = FALSE)
[16:21:17.120]             base::close(...future.stdout)
[16:21:17.120]         }, add = TRUE)
[16:21:17.120]     }
[16:21:17.120]     ...future.frame <- base::sys.nframe()
[16:21:17.120]     ...future.conditions <- base::list()
[16:21:17.120]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:17.120]     if (FALSE) {
[16:21:17.120]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:17.120]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:17.120]     }
[16:21:17.120]     ...future.result <- base::tryCatch({
[16:21:17.120]         base::withCallingHandlers({
[16:21:17.120]             ...future.value <- base::withVisible(base::local({
[16:21:17.120]                 stop(structure(list(message = "boom"), class = c("MyError", 
[16:21:17.120]                   "error", "condition")))
[16:21:17.120]             }))
[16:21:17.120]             future::FutureResult(value = ...future.value$value, 
[16:21:17.120]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:17.120]                   ...future.rng), globalenv = if (FALSE) 
[16:21:17.120]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:17.120]                     ...future.globalenv.names))
[16:21:17.120]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:17.120]         }, condition = base::local({
[16:21:17.120]             c <- base::c
[16:21:17.120]             inherits <- base::inherits
[16:21:17.120]             invokeRestart <- base::invokeRestart
[16:21:17.120]             length <- base::length
[16:21:17.120]             list <- base::list
[16:21:17.120]             seq.int <- base::seq.int
[16:21:17.120]             signalCondition <- base::signalCondition
[16:21:17.120]             sys.calls <- base::sys.calls
[16:21:17.120]             `[[` <- base::`[[`
[16:21:17.120]             `+` <- base::`+`
[16:21:17.120]             `<<-` <- base::`<<-`
[16:21:17.120]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:17.120]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:17.120]                   3L)]
[16:21:17.120]             }
[16:21:17.120]             function(cond) {
[16:21:17.120]                 is_error <- inherits(cond, "error")
[16:21:17.120]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:17.120]                   NULL)
[16:21:17.120]                 if (is_error) {
[16:21:17.120]                   sessionInformation <- function() {
[16:21:17.120]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:17.120]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:17.120]                       search = base::search(), system = base::Sys.info())
[16:21:17.120]                   }
[16:21:17.120]                   ...future.conditions[[length(...future.conditions) + 
[16:21:17.120]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:17.120]                     cond$call), session = sessionInformation(), 
[16:21:17.120]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:17.120]                   signalCondition(cond)
[16:21:17.120]                 }
[16:21:17.120]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:17.120]                 "immediateCondition"))) {
[16:21:17.120]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:17.120]                   ...future.conditions[[length(...future.conditions) + 
[16:21:17.120]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:17.120]                   if (TRUE && !signal) {
[16:21:17.120]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:17.120]                     {
[16:21:17.120]                       inherits <- base::inherits
[16:21:17.120]                       invokeRestart <- base::invokeRestart
[16:21:17.120]                       is.null <- base::is.null
[16:21:17.120]                       muffled <- FALSE
[16:21:17.120]                       if (inherits(cond, "message")) {
[16:21:17.120]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:17.120]                         if (muffled) 
[16:21:17.120]                           invokeRestart("muffleMessage")
[16:21:17.120]                       }
[16:21:17.120]                       else if (inherits(cond, "warning")) {
[16:21:17.120]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:17.120]                         if (muffled) 
[16:21:17.120]                           invokeRestart("muffleWarning")
[16:21:17.120]                       }
[16:21:17.120]                       else if (inherits(cond, "condition")) {
[16:21:17.120]                         if (!is.null(pattern)) {
[16:21:17.120]                           computeRestarts <- base::computeRestarts
[16:21:17.120]                           grepl <- base::grepl
[16:21:17.120]                           restarts <- computeRestarts(cond)
[16:21:17.120]                           for (restart in restarts) {
[16:21:17.120]                             name <- restart$name
[16:21:17.120]                             if (is.null(name)) 
[16:21:17.120]                               next
[16:21:17.120]                             if (!grepl(pattern, name)) 
[16:21:17.120]                               next
[16:21:17.120]                             invokeRestart(restart)
[16:21:17.120]                             muffled <- TRUE
[16:21:17.120]                             break
[16:21:17.120]                           }
[16:21:17.120]                         }
[16:21:17.120]                       }
[16:21:17.120]                       invisible(muffled)
[16:21:17.120]                     }
[16:21:17.120]                     muffleCondition(cond, pattern = "^muffle")
[16:21:17.120]                   }
[16:21:17.120]                 }
[16:21:17.120]                 else {
[16:21:17.120]                   if (TRUE) {
[16:21:17.120]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:17.120]                     {
[16:21:17.120]                       inherits <- base::inherits
[16:21:17.120]                       invokeRestart <- base::invokeRestart
[16:21:17.120]                       is.null <- base::is.null
[16:21:17.120]                       muffled <- FALSE
[16:21:17.120]                       if (inherits(cond, "message")) {
[16:21:17.120]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:17.120]                         if (muffled) 
[16:21:17.120]                           invokeRestart("muffleMessage")
[16:21:17.120]                       }
[16:21:17.120]                       else if (inherits(cond, "warning")) {
[16:21:17.120]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:17.120]                         if (muffled) 
[16:21:17.120]                           invokeRestart("muffleWarning")
[16:21:17.120]                       }
[16:21:17.120]                       else if (inherits(cond, "condition")) {
[16:21:17.120]                         if (!is.null(pattern)) {
[16:21:17.120]                           computeRestarts <- base::computeRestarts
[16:21:17.120]                           grepl <- base::grepl
[16:21:17.120]                           restarts <- computeRestarts(cond)
[16:21:17.120]                           for (restart in restarts) {
[16:21:17.120]                             name <- restart$name
[16:21:17.120]                             if (is.null(name)) 
[16:21:17.120]                               next
[16:21:17.120]                             if (!grepl(pattern, name)) 
[16:21:17.120]                               next
[16:21:17.120]                             invokeRestart(restart)
[16:21:17.120]                             muffled <- TRUE
[16:21:17.120]                             break
[16:21:17.120]                           }
[16:21:17.120]                         }
[16:21:17.120]                       }
[16:21:17.120]                       invisible(muffled)
[16:21:17.120]                     }
[16:21:17.120]                     muffleCondition(cond, pattern = "^muffle")
[16:21:17.120]                   }
[16:21:17.120]                 }
[16:21:17.120]             }
[16:21:17.120]         }))
[16:21:17.120]     }, error = function(ex) {
[16:21:17.120]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:17.120]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:17.120]                 ...future.rng), started = ...future.startTime, 
[16:21:17.120]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:17.120]             version = "1.8"), class = "FutureResult")
[16:21:17.120]     }, finally = {
[16:21:17.120]         if (!identical(...future.workdir, getwd())) 
[16:21:17.120]             setwd(...future.workdir)
[16:21:17.120]         {
[16:21:17.120]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:17.120]                 ...future.oldOptions$nwarnings <- NULL
[16:21:17.120]             }
[16:21:17.120]             base::options(...future.oldOptions)
[16:21:17.120]             if (.Platform$OS.type == "windows") {
[16:21:17.120]                 old_names <- names(...future.oldEnvVars)
[16:21:17.120]                 envs <- base::Sys.getenv()
[16:21:17.120]                 names <- names(envs)
[16:21:17.120]                 common <- intersect(names, old_names)
[16:21:17.120]                 added <- setdiff(names, old_names)
[16:21:17.120]                 removed <- setdiff(old_names, names)
[16:21:17.120]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:17.120]                   envs[common]]
[16:21:17.120]                 NAMES <- toupper(changed)
[16:21:17.120]                 args <- list()
[16:21:17.120]                 for (kk in seq_along(NAMES)) {
[16:21:17.120]                   name <- changed[[kk]]
[16:21:17.120]                   NAME <- NAMES[[kk]]
[16:21:17.120]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:17.120]                     next
[16:21:17.120]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:17.120]                 }
[16:21:17.120]                 NAMES <- toupper(added)
[16:21:17.120]                 for (kk in seq_along(NAMES)) {
[16:21:17.120]                   name <- added[[kk]]
[16:21:17.120]                   NAME <- NAMES[[kk]]
[16:21:17.120]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:17.120]                     next
[16:21:17.120]                   args[[name]] <- ""
[16:21:17.120]                 }
[16:21:17.120]                 NAMES <- toupper(removed)
[16:21:17.120]                 for (kk in seq_along(NAMES)) {
[16:21:17.120]                   name <- removed[[kk]]
[16:21:17.120]                   NAME <- NAMES[[kk]]
[16:21:17.120]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:17.120]                     next
[16:21:17.120]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:17.120]                 }
[16:21:17.120]                 if (length(args) > 0) 
[16:21:17.120]                   base::do.call(base::Sys.setenv, args = args)
[16:21:17.120]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:17.120]             }
[16:21:17.120]             else {
[16:21:17.120]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:17.120]             }
[16:21:17.120]             {
[16:21:17.120]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:17.120]                   0L) {
[16:21:17.120]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:17.120]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:17.120]                   base::options(opts)
[16:21:17.120]                 }
[16:21:17.120]                 {
[16:21:17.120]                   {
[16:21:17.120]                     NULL
[16:21:17.120]                     RNGkind("Mersenne-Twister")
[16:21:17.120]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:21:17.120]                       inherits = FALSE)
[16:21:17.120]                   }
[16:21:17.120]                   options(future.plan = NULL)
[16:21:17.120]                   if (is.na(NA_character_)) 
[16:21:17.120]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:17.120]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:17.120]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:17.120]                     .init = FALSE)
[16:21:17.120]                 }
[16:21:17.120]             }
[16:21:17.120]         }
[16:21:17.120]     })
[16:21:17.120]     if (TRUE) {
[16:21:17.120]         base::sink(type = "output", split = FALSE)
[16:21:17.120]         if (TRUE) {
[16:21:17.120]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:17.120]         }
[16:21:17.120]         else {
[16:21:17.120]             ...future.result["stdout"] <- base::list(NULL)
[16:21:17.120]         }
[16:21:17.120]         base::close(...future.stdout)
[16:21:17.120]         ...future.stdout <- NULL
[16:21:17.120]     }
[16:21:17.120]     ...future.result$conditions <- ...future.conditions
[16:21:17.120]     ...future.result$finished <- base::Sys.time()
[16:21:17.120]     ...future.result
[16:21:17.120] }
[16:21:17.122] plan(): Setting new future strategy stack:
[16:21:17.122] List of future strategies:
[16:21:17.122] 1. sequential:
[16:21:17.122]    - args: function (..., envir = parent.frame())
[16:21:17.122]    - tweaked: FALSE
[16:21:17.122]    - call: NULL
[16:21:17.122] plan(): nbrOfWorkers() = 1
[16:21:17.123] plan(): Setting new future strategy stack:
[16:21:17.123] List of future strategies:
[16:21:17.123] 1. sequential:
[16:21:17.123]    - args: function (..., envir = parent.frame())
[16:21:17.123]    - tweaked: FALSE
[16:21:17.123]    - call: future::plan("sequential")
[16:21:17.124] plan(): nbrOfWorkers() = 1
[16:21:17.124] SequentialFuture started (and completed)
[16:21:17.124] signalConditions() ...
[16:21:17.124]  - include = ‘immediateCondition’
[16:21:17.124]  - exclude = 
[16:21:17.124]  - resignal = FALSE
[16:21:17.124]  - Number of conditions: 1
[16:21:17.124] signalConditions() ... done
[16:21:17.124] signalConditions() ...
[16:21:17.125]  - include = ‘immediateCondition’
[16:21:17.125]  - exclude = 
[16:21:17.125]  - resignal = FALSE
[16:21:17.125]  - Number of conditions: 1
[16:21:17.125] signalConditions() ... done
<MyError: boom>
[16:21:17.125] signalConditions() ...
[16:21:17.125]  - include = ‘immediateCondition’
[16:21:17.125]  - exclude = 
[16:21:17.125]  - resignal = FALSE
[16:21:17.125]  - Number of conditions: 1
[16:21:17.126] signalConditions() ... done
[16:21:17.126] Future state: ‘finished’
[16:21:17.126] signalConditions() ...
[16:21:17.126]  - include = ‘condition’
[16:21:17.126]  - exclude = ‘immediateCondition’
[16:21:17.126]  - resignal = TRUE
[16:21:17.127]  - Number of conditions: 1
[16:21:17.127]  - Condition #1: ‘MyError’, ‘error’, ‘condition’
[16:21:17.128] signalConditions() ... done
Testing with 1 cores ... DONE
Testing with 2 cores ...
[16:21:17.133] getGlobalsAndPackages() ...
[16:21:17.133] 
[16:21:17.133] - globals: [0] <none>
[16:21:17.133] getGlobalsAndPackages() ... DONE
[16:21:17.134] [local output] makeClusterPSOCK() ...
[16:21:17.166] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[16:21:17.167] [local output] Base port: 11805
[16:21:17.168] [local output] Getting setup options for 2 cluster nodes ...
[16:21:17.168] [local output]  - Node 1 of 2 ...
[16:21:17.168] [local output] localMachine=TRUE => revtunnel=FALSE

[16:21:17.169] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpKdMfEO/worker.rank=1.parallelly.parent=85062.14c4658d27993.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpKdMfEO/worker.rank=1.parallelly.parent=85062.14c4658d27993.pid")'’
[16:21:17.359] - Possible to infer worker's PID: TRUE
[16:21:17.360] [local output] Rscript port: 11805

[16:21:17.360] [local output]  - Node 2 of 2 ...
[16:21:17.360] [local output] localMachine=TRUE => revtunnel=FALSE

[16:21:17.361] [local output] Rscript port: 11805

[16:21:17.361] [local output] Getting setup options for 2 cluster nodes ... done
[16:21:17.361] [local output]  - Parallel setup requested for some PSOCK nodes
[16:21:17.362] [local output] Setting up PSOCK nodes in parallel
[16:21:17.362] List of 36
[16:21:17.362]  $ worker          : chr "localhost"
[16:21:17.362]   ..- attr(*, "localhost")= logi TRUE
[16:21:17.362]  $ master          : chr "localhost"
[16:21:17.362]  $ port            : int 11805
[16:21:17.362]  $ connectTimeout  : num 120
[16:21:17.362]  $ timeout         : num 2592000
[16:21:17.362]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[16:21:17.362]  $ homogeneous     : logi TRUE
[16:21:17.362]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[16:21:17.362]  $ rscript_envs    : NULL
[16:21:17.362]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:21:17.362]  $ rscript_startup : NULL
[16:21:17.362]  $ rscript_sh      : chr "sh"
[16:21:17.362]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:21:17.362]  $ methods         : logi TRUE
[16:21:17.362]  $ socketOptions   : chr "no-delay"
[16:21:17.362]  $ useXDR          : logi FALSE
[16:21:17.362]  $ outfile         : chr "/dev/null"
[16:21:17.362]  $ renice          : int NA
[16:21:17.362]  $ rshcmd          : NULL
[16:21:17.362]  $ user            : chr(0) 
[16:21:17.362]  $ revtunnel       : logi FALSE
[16:21:17.362]  $ rshlogfile      : NULL
[16:21:17.362]  $ rshopts         : chr(0) 
[16:21:17.362]  $ rank            : int 1
[16:21:17.362]  $ manual          : logi FALSE
[16:21:17.362]  $ dryrun          : logi FALSE
[16:21:17.362]  $ quiet           : logi FALSE
[16:21:17.362]  $ setup_strategy  : chr "parallel"
[16:21:17.362]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:21:17.362]  $ pidfile         : chr "/tmp/RtmpKdMfEO/worker.rank=1.parallelly.parent=85062.14c4658d27993.pid"
[16:21:17.362]  $ rshcmd_label    : NULL
[16:21:17.362]  $ rsh_call        : NULL
[16:21:17.362]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:21:17.362]  $ localMachine    : logi TRUE
[16:21:17.362]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[16:21:17.362]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[16:21:17.362]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[16:21:17.362]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[16:21:17.362]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[16:21:17.362]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[16:21:17.362]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[16:21:17.362]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[16:21:17.362]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[16:21:17.362]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[16:21:17.362]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[16:21:17.362]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[16:21:17.362]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[16:21:17.362]  $ arguments       :List of 28
[16:21:17.362]   ..$ worker          : chr "localhost"
[16:21:17.362]   ..$ master          : NULL
[16:21:17.362]   ..$ port            : int 11805
[16:21:17.362]   ..$ connectTimeout  : num 120
[16:21:17.362]   ..$ timeout         : num 2592000
[16:21:17.362]   ..$ rscript         : NULL
[16:21:17.362]   ..$ homogeneous     : NULL
[16:21:17.362]   ..$ rscript_args    : NULL
[16:21:17.362]   ..$ rscript_envs    : NULL
[16:21:17.362]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:21:17.362]   ..$ rscript_startup : NULL
[16:21:17.362]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[16:21:17.362]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:21:17.362]   ..$ methods         : logi TRUE
[16:21:17.362]   ..$ socketOptions   : chr "no-delay"
[16:21:17.362]   ..$ useXDR          : logi FALSE
[16:21:17.362]   ..$ outfile         : chr "/dev/null"
[16:21:17.362]   ..$ renice          : int NA
[16:21:17.362]   ..$ rshcmd          : NULL
[16:21:17.362]   ..$ user            : NULL
[16:21:17.362]   ..$ revtunnel       : logi NA
[16:21:17.362]   ..$ rshlogfile      : NULL
[16:21:17.362]   ..$ rshopts         : NULL
[16:21:17.362]   ..$ rank            : int 1
[16:21:17.362]   ..$ manual          : logi FALSE
[16:21:17.362]   ..$ dryrun          : logi FALSE
[16:21:17.362]   ..$ quiet           : logi FALSE
[16:21:17.362]   ..$ setup_strategy  : chr "parallel"
[16:21:17.362]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[16:21:17.379] [local output] System call to launch all workers:
[16:21:17.379] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpKdMfEO/worker.rank=1.parallelly.parent=85062.14c4658d27993.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11805 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[16:21:17.379] [local output] Starting PSOCK main server
[16:21:17.384] [local output] Workers launched
[16:21:17.385] [local output] Waiting for workers to connect back
[16:21:17.385]  - [local output] 0 workers out of 2 ready
[16:21:17.634]  - [local output] 0 workers out of 2 ready
[16:21:17.634]  - [local output] 1 workers out of 2 ready
[16:21:17.641]  - [local output] 1 workers out of 2 ready
[16:21:17.642]  - [local output] 2 workers out of 2 ready
[16:21:17.642] [local output] Launching of workers completed
[16:21:17.642] [local output] Collecting session information from workers
[16:21:17.643] [local output]  - Worker #1 of 2
[16:21:17.643] [local output]  - Worker #2 of 2
[16:21:17.644] [local output] makeClusterPSOCK() ... done
[16:21:17.656] Packages needed by the future expression (n = 0): <none>
[16:21:17.656] Packages needed by future strategies (n = 0): <none>
[16:21:17.656] {
[16:21:17.656]     {
[16:21:17.656]         {
[16:21:17.656]             ...future.startTime <- base::Sys.time()
[16:21:17.656]             {
[16:21:17.656]                 {
[16:21:17.656]                   {
[16:21:17.656]                     {
[16:21:17.656]                       base::local({
[16:21:17.656]                         has_future <- base::requireNamespace("future", 
[16:21:17.656]                           quietly = TRUE)
[16:21:17.656]                         if (has_future) {
[16:21:17.656]                           ns <- base::getNamespace("future")
[16:21:17.656]                           version <- ns[[".package"]][["version"]]
[16:21:17.656]                           if (is.null(version)) 
[16:21:17.656]                             version <- utils::packageVersion("future")
[16:21:17.656]                         }
[16:21:17.656]                         else {
[16:21:17.656]                           version <- NULL
[16:21:17.656]                         }
[16:21:17.656]                         if (!has_future || version < "1.8.0") {
[16:21:17.656]                           info <- base::c(r_version = base::gsub("R version ", 
[16:21:17.656]                             "", base::R.version$version.string), 
[16:21:17.656]                             platform = base::sprintf("%s (%s-bit)", 
[16:21:17.656]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:17.656]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:17.656]                               "release", "version")], collapse = " "), 
[16:21:17.656]                             hostname = base::Sys.info()[["nodename"]])
[16:21:17.656]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:21:17.656]                             info)
[16:21:17.656]                           info <- base::paste(info, collapse = "; ")
[16:21:17.656]                           if (!has_future) {
[16:21:17.656]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:17.656]                               info)
[16:21:17.656]                           }
[16:21:17.656]                           else {
[16:21:17.656]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:17.656]                               info, version)
[16:21:17.656]                           }
[16:21:17.656]                           base::stop(msg)
[16:21:17.656]                         }
[16:21:17.656]                       })
[16:21:17.656]                     }
[16:21:17.656]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:21:17.656]                     base::options(mc.cores = 1L)
[16:21:17.656]                   }
[16:21:17.656]                   ...future.strategy.old <- future::plan("list")
[16:21:17.656]                   options(future.plan = NULL)
[16:21:17.656]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:17.656]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:17.656]                 }
[16:21:17.656]                 ...future.workdir <- getwd()
[16:21:17.656]             }
[16:21:17.656]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:17.656]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:17.656]         }
[16:21:17.656]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:17.656]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:17.656]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:17.656]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:17.656]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:17.656]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:17.656]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:17.656]             base::names(...future.oldOptions))
[16:21:17.656]     }
[16:21:17.656]     if (FALSE) {
[16:21:17.656]     }
[16:21:17.656]     else {
[16:21:17.656]         if (TRUE) {
[16:21:17.656]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:17.656]                 open = "w")
[16:21:17.656]         }
[16:21:17.656]         else {
[16:21:17.656]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:17.656]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:17.656]         }
[16:21:17.656]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:17.656]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:17.656]             base::sink(type = "output", split = FALSE)
[16:21:17.656]             base::close(...future.stdout)
[16:21:17.656]         }, add = TRUE)
[16:21:17.656]     }
[16:21:17.656]     ...future.frame <- base::sys.nframe()
[16:21:17.656]     ...future.conditions <- base::list()
[16:21:17.656]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:17.656]     if (FALSE) {
[16:21:17.656]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:17.656]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:17.656]     }
[16:21:17.656]     ...future.result <- base::tryCatch({
[16:21:17.656]         base::withCallingHandlers({
[16:21:17.656]             ...future.value <- base::withVisible(base::local({
[16:21:17.656]                 ...future.makeSendCondition <- base::local({
[16:21:17.656]                   sendCondition <- NULL
[16:21:17.656]                   function(frame = 1L) {
[16:21:17.656]                     if (is.function(sendCondition)) 
[16:21:17.656]                       return(sendCondition)
[16:21:17.656]                     ns <- getNamespace("parallel")
[16:21:17.656]                     if (exists("sendData", mode = "function", 
[16:21:17.656]                       envir = ns)) {
[16:21:17.656]                       parallel_sendData <- get("sendData", mode = "function", 
[16:21:17.656]                         envir = ns)
[16:21:17.656]                       envir <- sys.frame(frame)
[16:21:17.656]                       master <- NULL
[16:21:17.656]                       while (!identical(envir, .GlobalEnv) && 
[16:21:17.656]                         !identical(envir, emptyenv())) {
[16:21:17.656]                         if (exists("master", mode = "list", envir = envir, 
[16:21:17.656]                           inherits = FALSE)) {
[16:21:17.656]                           master <- get("master", mode = "list", 
[16:21:17.656]                             envir = envir, inherits = FALSE)
[16:21:17.656]                           if (inherits(master, c("SOCKnode", 
[16:21:17.656]                             "SOCK0node"))) {
[16:21:17.656]                             sendCondition <<- function(cond) {
[16:21:17.656]                               data <- list(type = "VALUE", value = cond, 
[16:21:17.656]                                 success = TRUE)
[16:21:17.656]                               parallel_sendData(master, data)
[16:21:17.656]                             }
[16:21:17.656]                             return(sendCondition)
[16:21:17.656]                           }
[16:21:17.656]                         }
[16:21:17.656]                         frame <- frame + 1L
[16:21:17.656]                         envir <- sys.frame(frame)
[16:21:17.656]                       }
[16:21:17.656]                     }
[16:21:17.656]                     sendCondition <<- function(cond) NULL
[16:21:17.656]                   }
[16:21:17.656]                 })
[16:21:17.656]                 withCallingHandlers({
[16:21:17.656]                   {
[16:21:17.656]                     42L
[16:21:17.656]                   }
[16:21:17.656]                 }, immediateCondition = function(cond) {
[16:21:17.656]                   sendCondition <- ...future.makeSendCondition()
[16:21:17.656]                   sendCondition(cond)
[16:21:17.656]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:17.656]                   {
[16:21:17.656]                     inherits <- base::inherits
[16:21:17.656]                     invokeRestart <- base::invokeRestart
[16:21:17.656]                     is.null <- base::is.null
[16:21:17.656]                     muffled <- FALSE
[16:21:17.656]                     if (inherits(cond, "message")) {
[16:21:17.656]                       muffled <- grepl(pattern, "muffleMessage")
[16:21:17.656]                       if (muffled) 
[16:21:17.656]                         invokeRestart("muffleMessage")
[16:21:17.656]                     }
[16:21:17.656]                     else if (inherits(cond, "warning")) {
[16:21:17.656]                       muffled <- grepl(pattern, "muffleWarning")
[16:21:17.656]                       if (muffled) 
[16:21:17.656]                         invokeRestart("muffleWarning")
[16:21:17.656]                     }
[16:21:17.656]                     else if (inherits(cond, "condition")) {
[16:21:17.656]                       if (!is.null(pattern)) {
[16:21:17.656]                         computeRestarts <- base::computeRestarts
[16:21:17.656]                         grepl <- base::grepl
[16:21:17.656]                         restarts <- computeRestarts(cond)
[16:21:17.656]                         for (restart in restarts) {
[16:21:17.656]                           name <- restart$name
[16:21:17.656]                           if (is.null(name)) 
[16:21:17.656]                             next
[16:21:17.656]                           if (!grepl(pattern, name)) 
[16:21:17.656]                             next
[16:21:17.656]                           invokeRestart(restart)
[16:21:17.656]                           muffled <- TRUE
[16:21:17.656]                           break
[16:21:17.656]                         }
[16:21:17.656]                       }
[16:21:17.656]                     }
[16:21:17.656]                     invisible(muffled)
[16:21:17.656]                   }
[16:21:17.656]                   muffleCondition(cond)
[16:21:17.656]                 })
[16:21:17.656]             }))
[16:21:17.656]             future::FutureResult(value = ...future.value$value, 
[16:21:17.656]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:17.656]                   ...future.rng), globalenv = if (FALSE) 
[16:21:17.656]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:17.656]                     ...future.globalenv.names))
[16:21:17.656]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:17.656]         }, condition = base::local({
[16:21:17.656]             c <- base::c
[16:21:17.656]             inherits <- base::inherits
[16:21:17.656]             invokeRestart <- base::invokeRestart
[16:21:17.656]             length <- base::length
[16:21:17.656]             list <- base::list
[16:21:17.656]             seq.int <- base::seq.int
[16:21:17.656]             signalCondition <- base::signalCondition
[16:21:17.656]             sys.calls <- base::sys.calls
[16:21:17.656]             `[[` <- base::`[[`
[16:21:17.656]             `+` <- base::`+`
[16:21:17.656]             `<<-` <- base::`<<-`
[16:21:17.656]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:17.656]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:17.656]                   3L)]
[16:21:17.656]             }
[16:21:17.656]             function(cond) {
[16:21:17.656]                 is_error <- inherits(cond, "error")
[16:21:17.656]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:17.656]                   NULL)
[16:21:17.656]                 if (is_error) {
[16:21:17.656]                   sessionInformation <- function() {
[16:21:17.656]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:17.656]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:17.656]                       search = base::search(), system = base::Sys.info())
[16:21:17.656]                   }
[16:21:17.656]                   ...future.conditions[[length(...future.conditions) + 
[16:21:17.656]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:17.656]                     cond$call), session = sessionInformation(), 
[16:21:17.656]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:17.656]                   signalCondition(cond)
[16:21:17.656]                 }
[16:21:17.656]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:17.656]                 "immediateCondition"))) {
[16:21:17.656]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:17.656]                   ...future.conditions[[length(...future.conditions) + 
[16:21:17.656]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:17.656]                   if (TRUE && !signal) {
[16:21:17.656]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:17.656]                     {
[16:21:17.656]                       inherits <- base::inherits
[16:21:17.656]                       invokeRestart <- base::invokeRestart
[16:21:17.656]                       is.null <- base::is.null
[16:21:17.656]                       muffled <- FALSE
[16:21:17.656]                       if (inherits(cond, "message")) {
[16:21:17.656]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:17.656]                         if (muffled) 
[16:21:17.656]                           invokeRestart("muffleMessage")
[16:21:17.656]                       }
[16:21:17.656]                       else if (inherits(cond, "warning")) {
[16:21:17.656]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:17.656]                         if (muffled) 
[16:21:17.656]                           invokeRestart("muffleWarning")
[16:21:17.656]                       }
[16:21:17.656]                       else if (inherits(cond, "condition")) {
[16:21:17.656]                         if (!is.null(pattern)) {
[16:21:17.656]                           computeRestarts <- base::computeRestarts
[16:21:17.656]                           grepl <- base::grepl
[16:21:17.656]                           restarts <- computeRestarts(cond)
[16:21:17.656]                           for (restart in restarts) {
[16:21:17.656]                             name <- restart$name
[16:21:17.656]                             if (is.null(name)) 
[16:21:17.656]                               next
[16:21:17.656]                             if (!grepl(pattern, name)) 
[16:21:17.656]                               next
[16:21:17.656]                             invokeRestart(restart)
[16:21:17.656]                             muffled <- TRUE
[16:21:17.656]                             break
[16:21:17.656]                           }
[16:21:17.656]                         }
[16:21:17.656]                       }
[16:21:17.656]                       invisible(muffled)
[16:21:17.656]                     }
[16:21:17.656]                     muffleCondition(cond, pattern = "^muffle")
[16:21:17.656]                   }
[16:21:17.656]                 }
[16:21:17.656]                 else {
[16:21:17.656]                   if (TRUE) {
[16:21:17.656]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:17.656]                     {
[16:21:17.656]                       inherits <- base::inherits
[16:21:17.656]                       invokeRestart <- base::invokeRestart
[16:21:17.656]                       is.null <- base::is.null
[16:21:17.656]                       muffled <- FALSE
[16:21:17.656]                       if (inherits(cond, "message")) {
[16:21:17.656]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:17.656]                         if (muffled) 
[16:21:17.656]                           invokeRestart("muffleMessage")
[16:21:17.656]                       }
[16:21:17.656]                       else if (inherits(cond, "warning")) {
[16:21:17.656]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:17.656]                         if (muffled) 
[16:21:17.656]                           invokeRestart("muffleWarning")
[16:21:17.656]                       }
[16:21:17.656]                       else if (inherits(cond, "condition")) {
[16:21:17.656]                         if (!is.null(pattern)) {
[16:21:17.656]                           computeRestarts <- base::computeRestarts
[16:21:17.656]                           grepl <- base::grepl
[16:21:17.656]                           restarts <- computeRestarts(cond)
[16:21:17.656]                           for (restart in restarts) {
[16:21:17.656]                             name <- restart$name
[16:21:17.656]                             if (is.null(name)) 
[16:21:17.656]                               next
[16:21:17.656]                             if (!grepl(pattern, name)) 
[16:21:17.656]                               next
[16:21:17.656]                             invokeRestart(restart)
[16:21:17.656]                             muffled <- TRUE
[16:21:17.656]                             break
[16:21:17.656]                           }
[16:21:17.656]                         }
[16:21:17.656]                       }
[16:21:17.656]                       invisible(muffled)
[16:21:17.656]                     }
[16:21:17.656]                     muffleCondition(cond, pattern = "^muffle")
[16:21:17.656]                   }
[16:21:17.656]                 }
[16:21:17.656]             }
[16:21:17.656]         }))
[16:21:17.656]     }, error = function(ex) {
[16:21:17.656]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:17.656]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:17.656]                 ...future.rng), started = ...future.startTime, 
[16:21:17.656]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:17.656]             version = "1.8"), class = "FutureResult")
[16:21:17.656]     }, finally = {
[16:21:17.656]         if (!identical(...future.workdir, getwd())) 
[16:21:17.656]             setwd(...future.workdir)
[16:21:17.656]         {
[16:21:17.656]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:17.656]                 ...future.oldOptions$nwarnings <- NULL
[16:21:17.656]             }
[16:21:17.656]             base::options(...future.oldOptions)
[16:21:17.656]             if (.Platform$OS.type == "windows") {
[16:21:17.656]                 old_names <- names(...future.oldEnvVars)
[16:21:17.656]                 envs <- base::Sys.getenv()
[16:21:17.656]                 names <- names(envs)
[16:21:17.656]                 common <- intersect(names, old_names)
[16:21:17.656]                 added <- setdiff(names, old_names)
[16:21:17.656]                 removed <- setdiff(old_names, names)
[16:21:17.656]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:17.656]                   envs[common]]
[16:21:17.656]                 NAMES <- toupper(changed)
[16:21:17.656]                 args <- list()
[16:21:17.656]                 for (kk in seq_along(NAMES)) {
[16:21:17.656]                   name <- changed[[kk]]
[16:21:17.656]                   NAME <- NAMES[[kk]]
[16:21:17.656]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:17.656]                     next
[16:21:17.656]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:17.656]                 }
[16:21:17.656]                 NAMES <- toupper(added)
[16:21:17.656]                 for (kk in seq_along(NAMES)) {
[16:21:17.656]                   name <- added[[kk]]
[16:21:17.656]                   NAME <- NAMES[[kk]]
[16:21:17.656]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:17.656]                     next
[16:21:17.656]                   args[[name]] <- ""
[16:21:17.656]                 }
[16:21:17.656]                 NAMES <- toupper(removed)
[16:21:17.656]                 for (kk in seq_along(NAMES)) {
[16:21:17.656]                   name <- removed[[kk]]
[16:21:17.656]                   NAME <- NAMES[[kk]]
[16:21:17.656]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:17.656]                     next
[16:21:17.656]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:17.656]                 }
[16:21:17.656]                 if (length(args) > 0) 
[16:21:17.656]                   base::do.call(base::Sys.setenv, args = args)
[16:21:17.656]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:17.656]             }
[16:21:17.656]             else {
[16:21:17.656]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:17.656]             }
[16:21:17.656]             {
[16:21:17.656]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:17.656]                   0L) {
[16:21:17.656]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:17.656]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:17.656]                   base::options(opts)
[16:21:17.656]                 }
[16:21:17.656]                 {
[16:21:17.656]                   {
[16:21:17.656]                     base::options(mc.cores = ...future.mc.cores.old)
[16:21:17.656]                     NULL
[16:21:17.656]                   }
[16:21:17.656]                   options(future.plan = NULL)
[16:21:17.656]                   if (is.na(NA_character_)) 
[16:21:17.656]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:17.656]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:17.656]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:17.656]                     .init = FALSE)
[16:21:17.656]                 }
[16:21:17.656]             }
[16:21:17.656]         }
[16:21:17.656]     })
[16:21:17.656]     if (TRUE) {
[16:21:17.656]         base::sink(type = "output", split = FALSE)
[16:21:17.656]         if (TRUE) {
[16:21:17.656]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:17.656]         }
[16:21:17.656]         else {
[16:21:17.656]             ...future.result["stdout"] <- base::list(NULL)
[16:21:17.656]         }
[16:21:17.656]         base::close(...future.stdout)
[16:21:17.656]         ...future.stdout <- NULL
[16:21:17.656]     }
[16:21:17.656]     ...future.result$conditions <- ...future.conditions
[16:21:17.656]     ...future.result$finished <- base::Sys.time()
[16:21:17.656]     ...future.result
[16:21:17.656] }
[16:21:17.710] MultisessionFuture started
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 3e579109-592e-0b73-60c9-ee81fb289d87
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[1] FALSE
[16:21:17.732] result() for ClusterFuture ...
[16:21:17.733] receiveMessageFromWorker() for ClusterFuture ...
[16:21:17.733] - Validating connection of MultisessionFuture
[16:21:17.744] - received message: FutureResult
[16:21:17.745] - Received FutureResult
[16:21:17.748] - Erased future from FutureRegistry
[16:21:17.748] result() for ClusterFuture ...
[16:21:17.748] - result already collected: FutureResult
[16:21:17.748] result() for ClusterFuture ... done
[16:21:17.748] receiveMessageFromWorker() for ClusterFuture ... done
[16:21:17.748] result() for ClusterFuture ... done
[16:21:17.749] result() for ClusterFuture ...
[16:21:17.749] - result already collected: FutureResult
[16:21:17.749] result() for ClusterFuture ... done
[1] 42
[16:21:17.753] getGlobalsAndPackages() ...
[16:21:17.753] Searching for globals...
[16:21:17.755] - globals found: [4] ‘{’, ‘<-’, ‘*’, ‘a’
[16:21:17.755] Searching for globals ... DONE
[16:21:17.756] Resolving globals: FALSE
[16:21:17.756] The total size of the 1 globals is 56 bytes (56 bytes)
[16:21:17.757] The total size of the 1 globals exported for future expression (‘{; b <- 3; c <- 2; a * b * c; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[16:21:17.757] - globals: [1] ‘a’
[16:21:17.757] 
[16:21:17.757] getGlobalsAndPackages() ... DONE
[16:21:17.768] Packages needed by the future expression (n = 0): <none>
[16:21:17.768] Packages needed by future strategies (n = 0): <none>
[16:21:17.769] {
[16:21:17.769]     {
[16:21:17.769]         {
[16:21:17.769]             ...future.startTime <- base::Sys.time()
[16:21:17.769]             {
[16:21:17.769]                 {
[16:21:17.769]                   {
[16:21:17.769]                     {
[16:21:17.769]                       base::local({
[16:21:17.769]                         has_future <- base::requireNamespace("future", 
[16:21:17.769]                           quietly = TRUE)
[16:21:17.769]                         if (has_future) {
[16:21:17.769]                           ns <- base::getNamespace("future")
[16:21:17.769]                           version <- ns[[".package"]][["version"]]
[16:21:17.769]                           if (is.null(version)) 
[16:21:17.769]                             version <- utils::packageVersion("future")
[16:21:17.769]                         }
[16:21:17.769]                         else {
[16:21:17.769]                           version <- NULL
[16:21:17.769]                         }
[16:21:17.769]                         if (!has_future || version < "1.8.0") {
[16:21:17.769]                           info <- base::c(r_version = base::gsub("R version ", 
[16:21:17.769]                             "", base::R.version$version.string), 
[16:21:17.769]                             platform = base::sprintf("%s (%s-bit)", 
[16:21:17.769]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:17.769]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:17.769]                               "release", "version")], collapse = " "), 
[16:21:17.769]                             hostname = base::Sys.info()[["nodename"]])
[16:21:17.769]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:21:17.769]                             info)
[16:21:17.769]                           info <- base::paste(info, collapse = "; ")
[16:21:17.769]                           if (!has_future) {
[16:21:17.769]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:17.769]                               info)
[16:21:17.769]                           }
[16:21:17.769]                           else {
[16:21:17.769]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:17.769]                               info, version)
[16:21:17.769]                           }
[16:21:17.769]                           base::stop(msg)
[16:21:17.769]                         }
[16:21:17.769]                       })
[16:21:17.769]                     }
[16:21:17.769]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:21:17.769]                     base::options(mc.cores = 1L)
[16:21:17.769]                   }
[16:21:17.769]                   ...future.strategy.old <- future::plan("list")
[16:21:17.769]                   options(future.plan = NULL)
[16:21:17.769]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:17.769]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:17.769]                 }
[16:21:17.769]                 ...future.workdir <- getwd()
[16:21:17.769]             }
[16:21:17.769]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:17.769]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:17.769]         }
[16:21:17.769]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:17.769]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:17.769]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:17.769]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:17.769]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:17.769]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:17.769]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:17.769]             base::names(...future.oldOptions))
[16:21:17.769]     }
[16:21:17.769]     if (FALSE) {
[16:21:17.769]     }
[16:21:17.769]     else {
[16:21:17.769]         if (TRUE) {
[16:21:17.769]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:17.769]                 open = "w")
[16:21:17.769]         }
[16:21:17.769]         else {
[16:21:17.769]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:17.769]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:17.769]         }
[16:21:17.769]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:17.769]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:17.769]             base::sink(type = "output", split = FALSE)
[16:21:17.769]             base::close(...future.stdout)
[16:21:17.769]         }, add = TRUE)
[16:21:17.769]     }
[16:21:17.769]     ...future.frame <- base::sys.nframe()
[16:21:17.769]     ...future.conditions <- base::list()
[16:21:17.769]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:17.769]     if (FALSE) {
[16:21:17.769]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:17.769]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:17.769]     }
[16:21:17.769]     ...future.result <- base::tryCatch({
[16:21:17.769]         base::withCallingHandlers({
[16:21:17.769]             ...future.value <- base::withVisible(base::local({
[16:21:17.769]                 ...future.makeSendCondition <- base::local({
[16:21:17.769]                   sendCondition <- NULL
[16:21:17.769]                   function(frame = 1L) {
[16:21:17.769]                     if (is.function(sendCondition)) 
[16:21:17.769]                       return(sendCondition)
[16:21:17.769]                     ns <- getNamespace("parallel")
[16:21:17.769]                     if (exists("sendData", mode = "function", 
[16:21:17.769]                       envir = ns)) {
[16:21:17.769]                       parallel_sendData <- get("sendData", mode = "function", 
[16:21:17.769]                         envir = ns)
[16:21:17.769]                       envir <- sys.frame(frame)
[16:21:17.769]                       master <- NULL
[16:21:17.769]                       while (!identical(envir, .GlobalEnv) && 
[16:21:17.769]                         !identical(envir, emptyenv())) {
[16:21:17.769]                         if (exists("master", mode = "list", envir = envir, 
[16:21:17.769]                           inherits = FALSE)) {
[16:21:17.769]                           master <- get("master", mode = "list", 
[16:21:17.769]                             envir = envir, inherits = FALSE)
[16:21:17.769]                           if (inherits(master, c("SOCKnode", 
[16:21:17.769]                             "SOCK0node"))) {
[16:21:17.769]                             sendCondition <<- function(cond) {
[16:21:17.769]                               data <- list(type = "VALUE", value = cond, 
[16:21:17.769]                                 success = TRUE)
[16:21:17.769]                               parallel_sendData(master, data)
[16:21:17.769]                             }
[16:21:17.769]                             return(sendCondition)
[16:21:17.769]                           }
[16:21:17.769]                         }
[16:21:17.769]                         frame <- frame + 1L
[16:21:17.769]                         envir <- sys.frame(frame)
[16:21:17.769]                       }
[16:21:17.769]                     }
[16:21:17.769]                     sendCondition <<- function(cond) NULL
[16:21:17.769]                   }
[16:21:17.769]                 })
[16:21:17.769]                 withCallingHandlers({
[16:21:17.769]                   {
[16:21:17.769]                     b <- 3
[16:21:17.769]                     c <- 2
[16:21:17.769]                     a * b * c
[16:21:17.769]                   }
[16:21:17.769]                 }, immediateCondition = function(cond) {
[16:21:17.769]                   sendCondition <- ...future.makeSendCondition()
[16:21:17.769]                   sendCondition(cond)
[16:21:17.769]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:17.769]                   {
[16:21:17.769]                     inherits <- base::inherits
[16:21:17.769]                     invokeRestart <- base::invokeRestart
[16:21:17.769]                     is.null <- base::is.null
[16:21:17.769]                     muffled <- FALSE
[16:21:17.769]                     if (inherits(cond, "message")) {
[16:21:17.769]                       muffled <- grepl(pattern, "muffleMessage")
[16:21:17.769]                       if (muffled) 
[16:21:17.769]                         invokeRestart("muffleMessage")
[16:21:17.769]                     }
[16:21:17.769]                     else if (inherits(cond, "warning")) {
[16:21:17.769]                       muffled <- grepl(pattern, "muffleWarning")
[16:21:17.769]                       if (muffled) 
[16:21:17.769]                         invokeRestart("muffleWarning")
[16:21:17.769]                     }
[16:21:17.769]                     else if (inherits(cond, "condition")) {
[16:21:17.769]                       if (!is.null(pattern)) {
[16:21:17.769]                         computeRestarts <- base::computeRestarts
[16:21:17.769]                         grepl <- base::grepl
[16:21:17.769]                         restarts <- computeRestarts(cond)
[16:21:17.769]                         for (restart in restarts) {
[16:21:17.769]                           name <- restart$name
[16:21:17.769]                           if (is.null(name)) 
[16:21:17.769]                             next
[16:21:17.769]                           if (!grepl(pattern, name)) 
[16:21:17.769]                             next
[16:21:17.769]                           invokeRestart(restart)
[16:21:17.769]                           muffled <- TRUE
[16:21:17.769]                           break
[16:21:17.769]                         }
[16:21:17.769]                       }
[16:21:17.769]                     }
[16:21:17.769]                     invisible(muffled)
[16:21:17.769]                   }
[16:21:17.769]                   muffleCondition(cond)
[16:21:17.769]                 })
[16:21:17.769]             }))
[16:21:17.769]             future::FutureResult(value = ...future.value$value, 
[16:21:17.769]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:17.769]                   ...future.rng), globalenv = if (FALSE) 
[16:21:17.769]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:17.769]                     ...future.globalenv.names))
[16:21:17.769]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:17.769]         }, condition = base::local({
[16:21:17.769]             c <- base::c
[16:21:17.769]             inherits <- base::inherits
[16:21:17.769]             invokeRestart <- base::invokeRestart
[16:21:17.769]             length <- base::length
[16:21:17.769]             list <- base::list
[16:21:17.769]             seq.int <- base::seq.int
[16:21:17.769]             signalCondition <- base::signalCondition
[16:21:17.769]             sys.calls <- base::sys.calls
[16:21:17.769]             `[[` <- base::`[[`
[16:21:17.769]             `+` <- base::`+`
[16:21:17.769]             `<<-` <- base::`<<-`
[16:21:17.769]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:17.769]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:17.769]                   3L)]
[16:21:17.769]             }
[16:21:17.769]             function(cond) {
[16:21:17.769]                 is_error <- inherits(cond, "error")
[16:21:17.769]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:17.769]                   NULL)
[16:21:17.769]                 if (is_error) {
[16:21:17.769]                   sessionInformation <- function() {
[16:21:17.769]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:17.769]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:17.769]                       search = base::search(), system = base::Sys.info())
[16:21:17.769]                   }
[16:21:17.769]                   ...future.conditions[[length(...future.conditions) + 
[16:21:17.769]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:17.769]                     cond$call), session = sessionInformation(), 
[16:21:17.769]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:17.769]                   signalCondition(cond)
[16:21:17.769]                 }
[16:21:17.769]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:17.769]                 "immediateCondition"))) {
[16:21:17.769]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:17.769]                   ...future.conditions[[length(...future.conditions) + 
[16:21:17.769]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:17.769]                   if (TRUE && !signal) {
[16:21:17.769]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:17.769]                     {
[16:21:17.769]                       inherits <- base::inherits
[16:21:17.769]                       invokeRestart <- base::invokeRestart
[16:21:17.769]                       is.null <- base::is.null
[16:21:17.769]                       muffled <- FALSE
[16:21:17.769]                       if (inherits(cond, "message")) {
[16:21:17.769]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:17.769]                         if (muffled) 
[16:21:17.769]                           invokeRestart("muffleMessage")
[16:21:17.769]                       }
[16:21:17.769]                       else if (inherits(cond, "warning")) {
[16:21:17.769]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:17.769]                         if (muffled) 
[16:21:17.769]                           invokeRestart("muffleWarning")
[16:21:17.769]                       }
[16:21:17.769]                       else if (inherits(cond, "condition")) {
[16:21:17.769]                         if (!is.null(pattern)) {
[16:21:17.769]                           computeRestarts <- base::computeRestarts
[16:21:17.769]                           grepl <- base::grepl
[16:21:17.769]                           restarts <- computeRestarts(cond)
[16:21:17.769]                           for (restart in restarts) {
[16:21:17.769]                             name <- restart$name
[16:21:17.769]                             if (is.null(name)) 
[16:21:17.769]                               next
[16:21:17.769]                             if (!grepl(pattern, name)) 
[16:21:17.769]                               next
[16:21:17.769]                             invokeRestart(restart)
[16:21:17.769]                             muffled <- TRUE
[16:21:17.769]                             break
[16:21:17.769]                           }
[16:21:17.769]                         }
[16:21:17.769]                       }
[16:21:17.769]                       invisible(muffled)
[16:21:17.769]                     }
[16:21:17.769]                     muffleCondition(cond, pattern = "^muffle")
[16:21:17.769]                   }
[16:21:17.769]                 }
[16:21:17.769]                 else {
[16:21:17.769]                   if (TRUE) {
[16:21:17.769]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:17.769]                     {
[16:21:17.769]                       inherits <- base::inherits
[16:21:17.769]                       invokeRestart <- base::invokeRestart
[16:21:17.769]                       is.null <- base::is.null
[16:21:17.769]                       muffled <- FALSE
[16:21:17.769]                       if (inherits(cond, "message")) {
[16:21:17.769]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:17.769]                         if (muffled) 
[16:21:17.769]                           invokeRestart("muffleMessage")
[16:21:17.769]                       }
[16:21:17.769]                       else if (inherits(cond, "warning")) {
[16:21:17.769]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:17.769]                         if (muffled) 
[16:21:17.769]                           invokeRestart("muffleWarning")
[16:21:17.769]                       }
[16:21:17.769]                       else if (inherits(cond, "condition")) {
[16:21:17.769]                         if (!is.null(pattern)) {
[16:21:17.769]                           computeRestarts <- base::computeRestarts
[16:21:17.769]                           grepl <- base::grepl
[16:21:17.769]                           restarts <- computeRestarts(cond)
[16:21:17.769]                           for (restart in restarts) {
[16:21:17.769]                             name <- restart$name
[16:21:17.769]                             if (is.null(name)) 
[16:21:17.769]                               next
[16:21:17.769]                             if (!grepl(pattern, name)) 
[16:21:17.769]                               next
[16:21:17.769]                             invokeRestart(restart)
[16:21:17.769]                             muffled <- TRUE
[16:21:17.769]                             break
[16:21:17.769]                           }
[16:21:17.769]                         }
[16:21:17.769]                       }
[16:21:17.769]                       invisible(muffled)
[16:21:17.769]                     }
[16:21:17.769]                     muffleCondition(cond, pattern = "^muffle")
[16:21:17.769]                   }
[16:21:17.769]                 }
[16:21:17.769]             }
[16:21:17.769]         }))
[16:21:17.769]     }, error = function(ex) {
[16:21:17.769]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:17.769]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:17.769]                 ...future.rng), started = ...future.startTime, 
[16:21:17.769]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:17.769]             version = "1.8"), class = "FutureResult")
[16:21:17.769]     }, finally = {
[16:21:17.769]         if (!identical(...future.workdir, getwd())) 
[16:21:17.769]             setwd(...future.workdir)
[16:21:17.769]         {
[16:21:17.769]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:17.769]                 ...future.oldOptions$nwarnings <- NULL
[16:21:17.769]             }
[16:21:17.769]             base::options(...future.oldOptions)
[16:21:17.769]             if (.Platform$OS.type == "windows") {
[16:21:17.769]                 old_names <- names(...future.oldEnvVars)
[16:21:17.769]                 envs <- base::Sys.getenv()
[16:21:17.769]                 names <- names(envs)
[16:21:17.769]                 common <- intersect(names, old_names)
[16:21:17.769]                 added <- setdiff(names, old_names)
[16:21:17.769]                 removed <- setdiff(old_names, names)
[16:21:17.769]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:17.769]                   envs[common]]
[16:21:17.769]                 NAMES <- toupper(changed)
[16:21:17.769]                 args <- list()
[16:21:17.769]                 for (kk in seq_along(NAMES)) {
[16:21:17.769]                   name <- changed[[kk]]
[16:21:17.769]                   NAME <- NAMES[[kk]]
[16:21:17.769]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:17.769]                     next
[16:21:17.769]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:17.769]                 }
[16:21:17.769]                 NAMES <- toupper(added)
[16:21:17.769]                 for (kk in seq_along(NAMES)) {
[16:21:17.769]                   name <- added[[kk]]
[16:21:17.769]                   NAME <- NAMES[[kk]]
[16:21:17.769]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:17.769]                     next
[16:21:17.769]                   args[[name]] <- ""
[16:21:17.769]                 }
[16:21:17.769]                 NAMES <- toupper(removed)
[16:21:17.769]                 for (kk in seq_along(NAMES)) {
[16:21:17.769]                   name <- removed[[kk]]
[16:21:17.769]                   NAME <- NAMES[[kk]]
[16:21:17.769]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:17.769]                     next
[16:21:17.769]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:17.769]                 }
[16:21:17.769]                 if (length(args) > 0) 
[16:21:17.769]                   base::do.call(base::Sys.setenv, args = args)
[16:21:17.769]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:17.769]             }
[16:21:17.769]             else {
[16:21:17.769]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:17.769]             }
[16:21:17.769]             {
[16:21:17.769]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:17.769]                   0L) {
[16:21:17.769]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:17.769]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:17.769]                   base::options(opts)
[16:21:17.769]                 }
[16:21:17.769]                 {
[16:21:17.769]                   {
[16:21:17.769]                     base::options(mc.cores = ...future.mc.cores.old)
[16:21:17.769]                     NULL
[16:21:17.769]                   }
[16:21:17.769]                   options(future.plan = NULL)
[16:21:17.769]                   if (is.na(NA_character_)) 
[16:21:17.769]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:17.769]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:17.769]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:17.769]                     .init = FALSE)
[16:21:17.769]                 }
[16:21:17.769]             }
[16:21:17.769]         }
[16:21:17.769]     })
[16:21:17.769]     if (TRUE) {
[16:21:17.769]         base::sink(type = "output", split = FALSE)
[16:21:17.769]         if (TRUE) {
[16:21:17.769]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:17.769]         }
[16:21:17.769]         else {
[16:21:17.769]             ...future.result["stdout"] <- base::list(NULL)
[16:21:17.769]         }
[16:21:17.769]         base::close(...future.stdout)
[16:21:17.769]         ...future.stdout <- NULL
[16:21:17.769]     }
[16:21:17.769]     ...future.result$conditions <- ...future.conditions
[16:21:17.769]     ...future.result$finished <- base::Sys.time()
[16:21:17.769]     ...future.result
[16:21:17.769] }
[16:21:17.772] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[16:21:17.772] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[16:21:17.773] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[16:21:17.773] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[16:21:17.773] MultisessionFuture started
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    b <- 3
    c <- 2
    a * b * c
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 56 bytes (numeric ‘a’ of 56 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[16:21:17.778] receiveMessageFromWorker() for ClusterFuture ...
[16:21:17.778] - Validating connection of MultisessionFuture
[16:21:17.779] - received message: FutureResult
[16:21:17.779] - Received FutureResult
[16:21:17.779] - Erased future from FutureRegistry
[16:21:17.779] result() for ClusterFuture ...
[16:21:17.779] - result already collected: FutureResult
[16:21:17.779] result() for ClusterFuture ... done
[16:21:17.779] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 3e579109-592e-0b73-60c9-ee81fb289d87
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:21:17.780] result() for ClusterFuture ...
[16:21:17.780] - result already collected: FutureResult
[16:21:17.780] result() for ClusterFuture ... done
[16:21:17.780] result() for ClusterFuture ...
[16:21:17.780] - result already collected: FutureResult
[16:21:17.780] result() for ClusterFuture ... done
[1] 0
*** multisession() with globals and blocking
 - Creating multisession future #2 ...
[16:21:17.784] getGlobalsAndPackages() ...
[16:21:17.784] Searching for globals...
[16:21:17.785] - globals found: [2] ‘{’, ‘ii’
[16:21:17.785] Searching for globals ... DONE
[16:21:17.785] Resolving globals: FALSE
[16:21:17.786] The total size of the 1 globals is 56 bytes (56 bytes)
[16:21:17.786] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[16:21:17.786] - globals: [1] ‘ii’
[16:21:17.786] 
[16:21:17.787] getGlobalsAndPackages() ... DONE
[16:21:17.798] Packages needed by the future expression (n = 0): <none>
[16:21:17.798] Packages needed by future strategies (n = 0): <none>
[16:21:17.798] {
[16:21:17.798]     {
[16:21:17.798]         {
[16:21:17.798]             ...future.startTime <- base::Sys.time()
[16:21:17.798]             {
[16:21:17.798]                 {
[16:21:17.798]                   {
[16:21:17.798]                     {
[16:21:17.798]                       base::local({
[16:21:17.798]                         has_future <- base::requireNamespace("future", 
[16:21:17.798]                           quietly = TRUE)
[16:21:17.798]                         if (has_future) {
[16:21:17.798]                           ns <- base::getNamespace("future")
[16:21:17.798]                           version <- ns[[".package"]][["version"]]
[16:21:17.798]                           if (is.null(version)) 
[16:21:17.798]                             version <- utils::packageVersion("future")
[16:21:17.798]                         }
[16:21:17.798]                         else {
[16:21:17.798]                           version <- NULL
[16:21:17.798]                         }
[16:21:17.798]                         if (!has_future || version < "1.8.0") {
[16:21:17.798]                           info <- base::c(r_version = base::gsub("R version ", 
[16:21:17.798]                             "", base::R.version$version.string), 
[16:21:17.798]                             platform = base::sprintf("%s (%s-bit)", 
[16:21:17.798]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:17.798]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:17.798]                               "release", "version")], collapse = " "), 
[16:21:17.798]                             hostname = base::Sys.info()[["nodename"]])
[16:21:17.798]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:21:17.798]                             info)
[16:21:17.798]                           info <- base::paste(info, collapse = "; ")
[16:21:17.798]                           if (!has_future) {
[16:21:17.798]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:17.798]                               info)
[16:21:17.798]                           }
[16:21:17.798]                           else {
[16:21:17.798]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:17.798]                               info, version)
[16:21:17.798]                           }
[16:21:17.798]                           base::stop(msg)
[16:21:17.798]                         }
[16:21:17.798]                       })
[16:21:17.798]                     }
[16:21:17.798]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:21:17.798]                     base::options(mc.cores = 1L)
[16:21:17.798]                   }
[16:21:17.798]                   ...future.strategy.old <- future::plan("list")
[16:21:17.798]                   options(future.plan = NULL)
[16:21:17.798]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:17.798]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:17.798]                 }
[16:21:17.798]                 ...future.workdir <- getwd()
[16:21:17.798]             }
[16:21:17.798]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:17.798]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:17.798]         }
[16:21:17.798]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:17.798]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:17.798]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:17.798]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:17.798]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:17.798]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:17.798]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:17.798]             base::names(...future.oldOptions))
[16:21:17.798]     }
[16:21:17.798]     if (FALSE) {
[16:21:17.798]     }
[16:21:17.798]     else {
[16:21:17.798]         if (TRUE) {
[16:21:17.798]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:17.798]                 open = "w")
[16:21:17.798]         }
[16:21:17.798]         else {
[16:21:17.798]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:17.798]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:17.798]         }
[16:21:17.798]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:17.798]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:17.798]             base::sink(type = "output", split = FALSE)
[16:21:17.798]             base::close(...future.stdout)
[16:21:17.798]         }, add = TRUE)
[16:21:17.798]     }
[16:21:17.798]     ...future.frame <- base::sys.nframe()
[16:21:17.798]     ...future.conditions <- base::list()
[16:21:17.798]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:17.798]     if (FALSE) {
[16:21:17.798]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:17.798]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:17.798]     }
[16:21:17.798]     ...future.result <- base::tryCatch({
[16:21:17.798]         base::withCallingHandlers({
[16:21:17.798]             ...future.value <- base::withVisible(base::local({
[16:21:17.798]                 ...future.makeSendCondition <- base::local({
[16:21:17.798]                   sendCondition <- NULL
[16:21:17.798]                   function(frame = 1L) {
[16:21:17.798]                     if (is.function(sendCondition)) 
[16:21:17.798]                       return(sendCondition)
[16:21:17.798]                     ns <- getNamespace("parallel")
[16:21:17.798]                     if (exists("sendData", mode = "function", 
[16:21:17.798]                       envir = ns)) {
[16:21:17.798]                       parallel_sendData <- get("sendData", mode = "function", 
[16:21:17.798]                         envir = ns)
[16:21:17.798]                       envir <- sys.frame(frame)
[16:21:17.798]                       master <- NULL
[16:21:17.798]                       while (!identical(envir, .GlobalEnv) && 
[16:21:17.798]                         !identical(envir, emptyenv())) {
[16:21:17.798]                         if (exists("master", mode = "list", envir = envir, 
[16:21:17.798]                           inherits = FALSE)) {
[16:21:17.798]                           master <- get("master", mode = "list", 
[16:21:17.798]                             envir = envir, inherits = FALSE)
[16:21:17.798]                           if (inherits(master, c("SOCKnode", 
[16:21:17.798]                             "SOCK0node"))) {
[16:21:17.798]                             sendCondition <<- function(cond) {
[16:21:17.798]                               data <- list(type = "VALUE", value = cond, 
[16:21:17.798]                                 success = TRUE)
[16:21:17.798]                               parallel_sendData(master, data)
[16:21:17.798]                             }
[16:21:17.798]                             return(sendCondition)
[16:21:17.798]                           }
[16:21:17.798]                         }
[16:21:17.798]                         frame <- frame + 1L
[16:21:17.798]                         envir <- sys.frame(frame)
[16:21:17.798]                       }
[16:21:17.798]                     }
[16:21:17.798]                     sendCondition <<- function(cond) NULL
[16:21:17.798]                   }
[16:21:17.798]                 })
[16:21:17.798]                 withCallingHandlers({
[16:21:17.798]                   {
[16:21:17.798]                     ii
[16:21:17.798]                   }
[16:21:17.798]                 }, immediateCondition = function(cond) {
[16:21:17.798]                   sendCondition <- ...future.makeSendCondition()
[16:21:17.798]                   sendCondition(cond)
[16:21:17.798]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:17.798]                   {
[16:21:17.798]                     inherits <- base::inherits
[16:21:17.798]                     invokeRestart <- base::invokeRestart
[16:21:17.798]                     is.null <- base::is.null
[16:21:17.798]                     muffled <- FALSE
[16:21:17.798]                     if (inherits(cond, "message")) {
[16:21:17.798]                       muffled <- grepl(pattern, "muffleMessage")
[16:21:17.798]                       if (muffled) 
[16:21:17.798]                         invokeRestart("muffleMessage")
[16:21:17.798]                     }
[16:21:17.798]                     else if (inherits(cond, "warning")) {
[16:21:17.798]                       muffled <- grepl(pattern, "muffleWarning")
[16:21:17.798]                       if (muffled) 
[16:21:17.798]                         invokeRestart("muffleWarning")
[16:21:17.798]                     }
[16:21:17.798]                     else if (inherits(cond, "condition")) {
[16:21:17.798]                       if (!is.null(pattern)) {
[16:21:17.798]                         computeRestarts <- base::computeRestarts
[16:21:17.798]                         grepl <- base::grepl
[16:21:17.798]                         restarts <- computeRestarts(cond)
[16:21:17.798]                         for (restart in restarts) {
[16:21:17.798]                           name <- restart$name
[16:21:17.798]                           if (is.null(name)) 
[16:21:17.798]                             next
[16:21:17.798]                           if (!grepl(pattern, name)) 
[16:21:17.798]                             next
[16:21:17.798]                           invokeRestart(restart)
[16:21:17.798]                           muffled <- TRUE
[16:21:17.798]                           break
[16:21:17.798]                         }
[16:21:17.798]                       }
[16:21:17.798]                     }
[16:21:17.798]                     invisible(muffled)
[16:21:17.798]                   }
[16:21:17.798]                   muffleCondition(cond)
[16:21:17.798]                 })
[16:21:17.798]             }))
[16:21:17.798]             future::FutureResult(value = ...future.value$value, 
[16:21:17.798]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:17.798]                   ...future.rng), globalenv = if (FALSE) 
[16:21:17.798]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:17.798]                     ...future.globalenv.names))
[16:21:17.798]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:17.798]         }, condition = base::local({
[16:21:17.798]             c <- base::c
[16:21:17.798]             inherits <- base::inherits
[16:21:17.798]             invokeRestart <- base::invokeRestart
[16:21:17.798]             length <- base::length
[16:21:17.798]             list <- base::list
[16:21:17.798]             seq.int <- base::seq.int
[16:21:17.798]             signalCondition <- base::signalCondition
[16:21:17.798]             sys.calls <- base::sys.calls
[16:21:17.798]             `[[` <- base::`[[`
[16:21:17.798]             `+` <- base::`+`
[16:21:17.798]             `<<-` <- base::`<<-`
[16:21:17.798]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:17.798]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:17.798]                   3L)]
[16:21:17.798]             }
[16:21:17.798]             function(cond) {
[16:21:17.798]                 is_error <- inherits(cond, "error")
[16:21:17.798]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:17.798]                   NULL)
[16:21:17.798]                 if (is_error) {
[16:21:17.798]                   sessionInformation <- function() {
[16:21:17.798]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:17.798]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:17.798]                       search = base::search(), system = base::Sys.info())
[16:21:17.798]                   }
[16:21:17.798]                   ...future.conditions[[length(...future.conditions) + 
[16:21:17.798]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:17.798]                     cond$call), session = sessionInformation(), 
[16:21:17.798]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:17.798]                   signalCondition(cond)
[16:21:17.798]                 }
[16:21:17.798]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:17.798]                 "immediateCondition"))) {
[16:21:17.798]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:17.798]                   ...future.conditions[[length(...future.conditions) + 
[16:21:17.798]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:17.798]                   if (TRUE && !signal) {
[16:21:17.798]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:17.798]                     {
[16:21:17.798]                       inherits <- base::inherits
[16:21:17.798]                       invokeRestart <- base::invokeRestart
[16:21:17.798]                       is.null <- base::is.null
[16:21:17.798]                       muffled <- FALSE
[16:21:17.798]                       if (inherits(cond, "message")) {
[16:21:17.798]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:17.798]                         if (muffled) 
[16:21:17.798]                           invokeRestart("muffleMessage")
[16:21:17.798]                       }
[16:21:17.798]                       else if (inherits(cond, "warning")) {
[16:21:17.798]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:17.798]                         if (muffled) 
[16:21:17.798]                           invokeRestart("muffleWarning")
[16:21:17.798]                       }
[16:21:17.798]                       else if (inherits(cond, "condition")) {
[16:21:17.798]                         if (!is.null(pattern)) {
[16:21:17.798]                           computeRestarts <- base::computeRestarts
[16:21:17.798]                           grepl <- base::grepl
[16:21:17.798]                           restarts <- computeRestarts(cond)
[16:21:17.798]                           for (restart in restarts) {
[16:21:17.798]                             name <- restart$name
[16:21:17.798]                             if (is.null(name)) 
[16:21:17.798]                               next
[16:21:17.798]                             if (!grepl(pattern, name)) 
[16:21:17.798]                               next
[16:21:17.798]                             invokeRestart(restart)
[16:21:17.798]                             muffled <- TRUE
[16:21:17.798]                             break
[16:21:17.798]                           }
[16:21:17.798]                         }
[16:21:17.798]                       }
[16:21:17.798]                       invisible(muffled)
[16:21:17.798]                     }
[16:21:17.798]                     muffleCondition(cond, pattern = "^muffle")
[16:21:17.798]                   }
[16:21:17.798]                 }
[16:21:17.798]                 else {
[16:21:17.798]                   if (TRUE) {
[16:21:17.798]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:17.798]                     {
[16:21:17.798]                       inherits <- base::inherits
[16:21:17.798]                       invokeRestart <- base::invokeRestart
[16:21:17.798]                       is.null <- base::is.null
[16:21:17.798]                       muffled <- FALSE
[16:21:17.798]                       if (inherits(cond, "message")) {
[16:21:17.798]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:17.798]                         if (muffled) 
[16:21:17.798]                           invokeRestart("muffleMessage")
[16:21:17.798]                       }
[16:21:17.798]                       else if (inherits(cond, "warning")) {
[16:21:17.798]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:17.798]                         if (muffled) 
[16:21:17.798]                           invokeRestart("muffleWarning")
[16:21:17.798]                       }
[16:21:17.798]                       else if (inherits(cond, "condition")) {
[16:21:17.798]                         if (!is.null(pattern)) {
[16:21:17.798]                           computeRestarts <- base::computeRestarts
[16:21:17.798]                           grepl <- base::grepl
[16:21:17.798]                           restarts <- computeRestarts(cond)
[16:21:17.798]                           for (restart in restarts) {
[16:21:17.798]                             name <- restart$name
[16:21:17.798]                             if (is.null(name)) 
[16:21:17.798]                               next
[16:21:17.798]                             if (!grepl(pattern, name)) 
[16:21:17.798]                               next
[16:21:17.798]                             invokeRestart(restart)
[16:21:17.798]                             muffled <- TRUE
[16:21:17.798]                             break
[16:21:17.798]                           }
[16:21:17.798]                         }
[16:21:17.798]                       }
[16:21:17.798]                       invisible(muffled)
[16:21:17.798]                     }
[16:21:17.798]                     muffleCondition(cond, pattern = "^muffle")
[16:21:17.798]                   }
[16:21:17.798]                 }
[16:21:17.798]             }
[16:21:17.798]         }))
[16:21:17.798]     }, error = function(ex) {
[16:21:17.798]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:17.798]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:17.798]                 ...future.rng), started = ...future.startTime, 
[16:21:17.798]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:17.798]             version = "1.8"), class = "FutureResult")
[16:21:17.798]     }, finally = {
[16:21:17.798]         if (!identical(...future.workdir, getwd())) 
[16:21:17.798]             setwd(...future.workdir)
[16:21:17.798]         {
[16:21:17.798]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:17.798]                 ...future.oldOptions$nwarnings <- NULL
[16:21:17.798]             }
[16:21:17.798]             base::options(...future.oldOptions)
[16:21:17.798]             if (.Platform$OS.type == "windows") {
[16:21:17.798]                 old_names <- names(...future.oldEnvVars)
[16:21:17.798]                 envs <- base::Sys.getenv()
[16:21:17.798]                 names <- names(envs)
[16:21:17.798]                 common <- intersect(names, old_names)
[16:21:17.798]                 added <- setdiff(names, old_names)
[16:21:17.798]                 removed <- setdiff(old_names, names)
[16:21:17.798]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:17.798]                   envs[common]]
[16:21:17.798]                 NAMES <- toupper(changed)
[16:21:17.798]                 args <- list()
[16:21:17.798]                 for (kk in seq_along(NAMES)) {
[16:21:17.798]                   name <- changed[[kk]]
[16:21:17.798]                   NAME <- NAMES[[kk]]
[16:21:17.798]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:17.798]                     next
[16:21:17.798]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:17.798]                 }
[16:21:17.798]                 NAMES <- toupper(added)
[16:21:17.798]                 for (kk in seq_along(NAMES)) {
[16:21:17.798]                   name <- added[[kk]]
[16:21:17.798]                   NAME <- NAMES[[kk]]
[16:21:17.798]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:17.798]                     next
[16:21:17.798]                   args[[name]] <- ""
[16:21:17.798]                 }
[16:21:17.798]                 NAMES <- toupper(removed)
[16:21:17.798]                 for (kk in seq_along(NAMES)) {
[16:21:17.798]                   name <- removed[[kk]]
[16:21:17.798]                   NAME <- NAMES[[kk]]
[16:21:17.798]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:17.798]                     next
[16:21:17.798]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:17.798]                 }
[16:21:17.798]                 if (length(args) > 0) 
[16:21:17.798]                   base::do.call(base::Sys.setenv, args = args)
[16:21:17.798]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:17.798]             }
[16:21:17.798]             else {
[16:21:17.798]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:17.798]             }
[16:21:17.798]             {
[16:21:17.798]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:17.798]                   0L) {
[16:21:17.798]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:17.798]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:17.798]                   base::options(opts)
[16:21:17.798]                 }
[16:21:17.798]                 {
[16:21:17.798]                   {
[16:21:17.798]                     base::options(mc.cores = ...future.mc.cores.old)
[16:21:17.798]                     NULL
[16:21:17.798]                   }
[16:21:17.798]                   options(future.plan = NULL)
[16:21:17.798]                   if (is.na(NA_character_)) 
[16:21:17.798]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:17.798]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:17.798]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:17.798]                     .init = FALSE)
[16:21:17.798]                 }
[16:21:17.798]             }
[16:21:17.798]         }
[16:21:17.798]     })
[16:21:17.798]     if (TRUE) {
[16:21:17.798]         base::sink(type = "output", split = FALSE)
[16:21:17.798]         if (TRUE) {
[16:21:17.798]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:17.798]         }
[16:21:17.798]         else {
[16:21:17.798]             ...future.result["stdout"] <- base::list(NULL)
[16:21:17.798]         }
[16:21:17.798]         base::close(...future.stdout)
[16:21:17.798]         ...future.stdout <- NULL
[16:21:17.798]     }
[16:21:17.798]     ...future.result$conditions <- ...future.conditions
[16:21:17.798]     ...future.result$finished <- base::Sys.time()
[16:21:17.798]     ...future.result
[16:21:17.798] }
[16:21:17.801] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[16:21:17.801] Exporting ‘ii’ (56 bytes) to cluster node #1 ...
[16:21:17.802] Exporting ‘ii’ (56 bytes) to cluster node #1 ... DONE
[16:21:17.802] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[16:21:17.802] MultisessionFuture started
 - Creating multisession future #1 ...
[16:21:17.806] getGlobalsAndPackages() ...
[16:21:17.806] Searching for globals...
[16:21:17.807] - globals found: [2] ‘{’, ‘ii’
[16:21:17.807] Searching for globals ... DONE
[16:21:17.807] Resolving globals: FALSE
[16:21:17.808] The total size of the 1 globals is 56 bytes (56 bytes)
[16:21:17.808] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[16:21:17.808] - globals: [1] ‘ii’
[16:21:17.808] 
[16:21:17.808] getGlobalsAndPackages() ... DONE
[16:21:17.819] Packages needed by the future expression (n = 0): <none>
[16:21:17.819] Packages needed by future strategies (n = 0): <none>
[16:21:17.820] {
[16:21:17.820]     {
[16:21:17.820]         {
[16:21:17.820]             ...future.startTime <- base::Sys.time()
[16:21:17.820]             {
[16:21:17.820]                 {
[16:21:17.820]                   {
[16:21:17.820]                     {
[16:21:17.820]                       base::local({
[16:21:17.820]                         has_future <- base::requireNamespace("future", 
[16:21:17.820]                           quietly = TRUE)
[16:21:17.820]                         if (has_future) {
[16:21:17.820]                           ns <- base::getNamespace("future")
[16:21:17.820]                           version <- ns[[".package"]][["version"]]
[16:21:17.820]                           if (is.null(version)) 
[16:21:17.820]                             version <- utils::packageVersion("future")
[16:21:17.820]                         }
[16:21:17.820]                         else {
[16:21:17.820]                           version <- NULL
[16:21:17.820]                         }
[16:21:17.820]                         if (!has_future || version < "1.8.0") {
[16:21:17.820]                           info <- base::c(r_version = base::gsub("R version ", 
[16:21:17.820]                             "", base::R.version$version.string), 
[16:21:17.820]                             platform = base::sprintf("%s (%s-bit)", 
[16:21:17.820]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:17.820]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:17.820]                               "release", "version")], collapse = " "), 
[16:21:17.820]                             hostname = base::Sys.info()[["nodename"]])
[16:21:17.820]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:21:17.820]                             info)
[16:21:17.820]                           info <- base::paste(info, collapse = "; ")
[16:21:17.820]                           if (!has_future) {
[16:21:17.820]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:17.820]                               info)
[16:21:17.820]                           }
[16:21:17.820]                           else {
[16:21:17.820]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:17.820]                               info, version)
[16:21:17.820]                           }
[16:21:17.820]                           base::stop(msg)
[16:21:17.820]                         }
[16:21:17.820]                       })
[16:21:17.820]                     }
[16:21:17.820]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:21:17.820]                     base::options(mc.cores = 1L)
[16:21:17.820]                   }
[16:21:17.820]                   ...future.strategy.old <- future::plan("list")
[16:21:17.820]                   options(future.plan = NULL)
[16:21:17.820]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:17.820]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:17.820]                 }
[16:21:17.820]                 ...future.workdir <- getwd()
[16:21:17.820]             }
[16:21:17.820]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:17.820]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:17.820]         }
[16:21:17.820]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:17.820]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:17.820]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:17.820]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:17.820]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:17.820]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:17.820]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:17.820]             base::names(...future.oldOptions))
[16:21:17.820]     }
[16:21:17.820]     if (FALSE) {
[16:21:17.820]     }
[16:21:17.820]     else {
[16:21:17.820]         if (TRUE) {
[16:21:17.820]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:17.820]                 open = "w")
[16:21:17.820]         }
[16:21:17.820]         else {
[16:21:17.820]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:17.820]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:17.820]         }
[16:21:17.820]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:17.820]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:17.820]             base::sink(type = "output", split = FALSE)
[16:21:17.820]             base::close(...future.stdout)
[16:21:17.820]         }, add = TRUE)
[16:21:17.820]     }
[16:21:17.820]     ...future.frame <- base::sys.nframe()
[16:21:17.820]     ...future.conditions <- base::list()
[16:21:17.820]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:17.820]     if (FALSE) {
[16:21:17.820]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:17.820]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:17.820]     }
[16:21:17.820]     ...future.result <- base::tryCatch({
[16:21:17.820]         base::withCallingHandlers({
[16:21:17.820]             ...future.value <- base::withVisible(base::local({
[16:21:17.820]                 ...future.makeSendCondition <- base::local({
[16:21:17.820]                   sendCondition <- NULL
[16:21:17.820]                   function(frame = 1L) {
[16:21:17.820]                     if (is.function(sendCondition)) 
[16:21:17.820]                       return(sendCondition)
[16:21:17.820]                     ns <- getNamespace("parallel")
[16:21:17.820]                     if (exists("sendData", mode = "function", 
[16:21:17.820]                       envir = ns)) {
[16:21:17.820]                       parallel_sendData <- get("sendData", mode = "function", 
[16:21:17.820]                         envir = ns)
[16:21:17.820]                       envir <- sys.frame(frame)
[16:21:17.820]                       master <- NULL
[16:21:17.820]                       while (!identical(envir, .GlobalEnv) && 
[16:21:17.820]                         !identical(envir, emptyenv())) {
[16:21:17.820]                         if (exists("master", mode = "list", envir = envir, 
[16:21:17.820]                           inherits = FALSE)) {
[16:21:17.820]                           master <- get("master", mode = "list", 
[16:21:17.820]                             envir = envir, inherits = FALSE)
[16:21:17.820]                           if (inherits(master, c("SOCKnode", 
[16:21:17.820]                             "SOCK0node"))) {
[16:21:17.820]                             sendCondition <<- function(cond) {
[16:21:17.820]                               data <- list(type = "VALUE", value = cond, 
[16:21:17.820]                                 success = TRUE)
[16:21:17.820]                               parallel_sendData(master, data)
[16:21:17.820]                             }
[16:21:17.820]                             return(sendCondition)
[16:21:17.820]                           }
[16:21:17.820]                         }
[16:21:17.820]                         frame <- frame + 1L
[16:21:17.820]                         envir <- sys.frame(frame)
[16:21:17.820]                       }
[16:21:17.820]                     }
[16:21:17.820]                     sendCondition <<- function(cond) NULL
[16:21:17.820]                   }
[16:21:17.820]                 })
[16:21:17.820]                 withCallingHandlers({
[16:21:17.820]                   {
[16:21:17.820]                     ii
[16:21:17.820]                   }
[16:21:17.820]                 }, immediateCondition = function(cond) {
[16:21:17.820]                   sendCondition <- ...future.makeSendCondition()
[16:21:17.820]                   sendCondition(cond)
[16:21:17.820]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:17.820]                   {
[16:21:17.820]                     inherits <- base::inherits
[16:21:17.820]                     invokeRestart <- base::invokeRestart
[16:21:17.820]                     is.null <- base::is.null
[16:21:17.820]                     muffled <- FALSE
[16:21:17.820]                     if (inherits(cond, "message")) {
[16:21:17.820]                       muffled <- grepl(pattern, "muffleMessage")
[16:21:17.820]                       if (muffled) 
[16:21:17.820]                         invokeRestart("muffleMessage")
[16:21:17.820]                     }
[16:21:17.820]                     else if (inherits(cond, "warning")) {
[16:21:17.820]                       muffled <- grepl(pattern, "muffleWarning")
[16:21:17.820]                       if (muffled) 
[16:21:17.820]                         invokeRestart("muffleWarning")
[16:21:17.820]                     }
[16:21:17.820]                     else if (inherits(cond, "condition")) {
[16:21:17.820]                       if (!is.null(pattern)) {
[16:21:17.820]                         computeRestarts <- base::computeRestarts
[16:21:17.820]                         grepl <- base::grepl
[16:21:17.820]                         restarts <- computeRestarts(cond)
[16:21:17.820]                         for (restart in restarts) {
[16:21:17.820]                           name <- restart$name
[16:21:17.820]                           if (is.null(name)) 
[16:21:17.820]                             next
[16:21:17.820]                           if (!grepl(pattern, name)) 
[16:21:17.820]                             next
[16:21:17.820]                           invokeRestart(restart)
[16:21:17.820]                           muffled <- TRUE
[16:21:17.820]                           break
[16:21:17.820]                         }
[16:21:17.820]                       }
[16:21:17.820]                     }
[16:21:17.820]                     invisible(muffled)
[16:21:17.820]                   }
[16:21:17.820]                   muffleCondition(cond)
[16:21:17.820]                 })
[16:21:17.820]             }))
[16:21:17.820]             future::FutureResult(value = ...future.value$value, 
[16:21:17.820]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:17.820]                   ...future.rng), globalenv = if (FALSE) 
[16:21:17.820]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:17.820]                     ...future.globalenv.names))
[16:21:17.820]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:17.820]         }, condition = base::local({
[16:21:17.820]             c <- base::c
[16:21:17.820]             inherits <- base::inherits
[16:21:17.820]             invokeRestart <- base::invokeRestart
[16:21:17.820]             length <- base::length
[16:21:17.820]             list <- base::list
[16:21:17.820]             seq.int <- base::seq.int
[16:21:17.820]             signalCondition <- base::signalCondition
[16:21:17.820]             sys.calls <- base::sys.calls
[16:21:17.820]             `[[` <- base::`[[`
[16:21:17.820]             `+` <- base::`+`
[16:21:17.820]             `<<-` <- base::`<<-`
[16:21:17.820]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:17.820]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:17.820]                   3L)]
[16:21:17.820]             }
[16:21:17.820]             function(cond) {
[16:21:17.820]                 is_error <- inherits(cond, "error")
[16:21:17.820]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:17.820]                   NULL)
[16:21:17.820]                 if (is_error) {
[16:21:17.820]                   sessionInformation <- function() {
[16:21:17.820]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:17.820]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:17.820]                       search = base::search(), system = base::Sys.info())
[16:21:17.820]                   }
[16:21:17.820]                   ...future.conditions[[length(...future.conditions) + 
[16:21:17.820]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:17.820]                     cond$call), session = sessionInformation(), 
[16:21:17.820]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:17.820]                   signalCondition(cond)
[16:21:17.820]                 }
[16:21:17.820]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:17.820]                 "immediateCondition"))) {
[16:21:17.820]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:17.820]                   ...future.conditions[[length(...future.conditions) + 
[16:21:17.820]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:17.820]                   if (TRUE && !signal) {
[16:21:17.820]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:17.820]                     {
[16:21:17.820]                       inherits <- base::inherits
[16:21:17.820]                       invokeRestart <- base::invokeRestart
[16:21:17.820]                       is.null <- base::is.null
[16:21:17.820]                       muffled <- FALSE
[16:21:17.820]                       if (inherits(cond, "message")) {
[16:21:17.820]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:17.820]                         if (muffled) 
[16:21:17.820]                           invokeRestart("muffleMessage")
[16:21:17.820]                       }
[16:21:17.820]                       else if (inherits(cond, "warning")) {
[16:21:17.820]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:17.820]                         if (muffled) 
[16:21:17.820]                           invokeRestart("muffleWarning")
[16:21:17.820]                       }
[16:21:17.820]                       else if (inherits(cond, "condition")) {
[16:21:17.820]                         if (!is.null(pattern)) {
[16:21:17.820]                           computeRestarts <- base::computeRestarts
[16:21:17.820]                           grepl <- base::grepl
[16:21:17.820]                           restarts <- computeRestarts(cond)
[16:21:17.820]                           for (restart in restarts) {
[16:21:17.820]                             name <- restart$name
[16:21:17.820]                             if (is.null(name)) 
[16:21:17.820]                               next
[16:21:17.820]                             if (!grepl(pattern, name)) 
[16:21:17.820]                               next
[16:21:17.820]                             invokeRestart(restart)
[16:21:17.820]                             muffled <- TRUE
[16:21:17.820]                             break
[16:21:17.820]                           }
[16:21:17.820]                         }
[16:21:17.820]                       }
[16:21:17.820]                       invisible(muffled)
[16:21:17.820]                     }
[16:21:17.820]                     muffleCondition(cond, pattern = "^muffle")
[16:21:17.820]                   }
[16:21:17.820]                 }
[16:21:17.820]                 else {
[16:21:17.820]                   if (TRUE) {
[16:21:17.820]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:17.820]                     {
[16:21:17.820]                       inherits <- base::inherits
[16:21:17.820]                       invokeRestart <- base::invokeRestart
[16:21:17.820]                       is.null <- base::is.null
[16:21:17.820]                       muffled <- FALSE
[16:21:17.820]                       if (inherits(cond, "message")) {
[16:21:17.820]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:17.820]                         if (muffled) 
[16:21:17.820]                           invokeRestart("muffleMessage")
[16:21:17.820]                       }
[16:21:17.820]                       else if (inherits(cond, "warning")) {
[16:21:17.820]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:17.820]                         if (muffled) 
[16:21:17.820]                           invokeRestart("muffleWarning")
[16:21:17.820]                       }
[16:21:17.820]                       else if (inherits(cond, "condition")) {
[16:21:17.820]                         if (!is.null(pattern)) {
[16:21:17.820]                           computeRestarts <- base::computeRestarts
[16:21:17.820]                           grepl <- base::grepl
[16:21:17.820]                           restarts <- computeRestarts(cond)
[16:21:17.820]                           for (restart in restarts) {
[16:21:17.820]                             name <- restart$name
[16:21:17.820]                             if (is.null(name)) 
[16:21:17.820]                               next
[16:21:17.820]                             if (!grepl(pattern, name)) 
[16:21:17.820]                               next
[16:21:17.820]                             invokeRestart(restart)
[16:21:17.820]                             muffled <- TRUE
[16:21:17.820]                             break
[16:21:17.820]                           }
[16:21:17.820]                         }
[16:21:17.820]                       }
[16:21:17.820]                       invisible(muffled)
[16:21:17.820]                     }
[16:21:17.820]                     muffleCondition(cond, pattern = "^muffle")
[16:21:17.820]                   }
[16:21:17.820]                 }
[16:21:17.820]             }
[16:21:17.820]         }))
[16:21:17.820]     }, error = function(ex) {
[16:21:17.820]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:17.820]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:17.820]                 ...future.rng), started = ...future.startTime, 
[16:21:17.820]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:17.820]             version = "1.8"), class = "FutureResult")
[16:21:17.820]     }, finally = {
[16:21:17.820]         if (!identical(...future.workdir, getwd())) 
[16:21:17.820]             setwd(...future.workdir)
[16:21:17.820]         {
[16:21:17.820]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:17.820]                 ...future.oldOptions$nwarnings <- NULL
[16:21:17.820]             }
[16:21:17.820]             base::options(...future.oldOptions)
[16:21:17.820]             if (.Platform$OS.type == "windows") {
[16:21:17.820]                 old_names <- names(...future.oldEnvVars)
[16:21:17.820]                 envs <- base::Sys.getenv()
[16:21:17.820]                 names <- names(envs)
[16:21:17.820]                 common <- intersect(names, old_names)
[16:21:17.820]                 added <- setdiff(names, old_names)
[16:21:17.820]                 removed <- setdiff(old_names, names)
[16:21:17.820]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:17.820]                   envs[common]]
[16:21:17.820]                 NAMES <- toupper(changed)
[16:21:17.820]                 args <- list()
[16:21:17.820]                 for (kk in seq_along(NAMES)) {
[16:21:17.820]                   name <- changed[[kk]]
[16:21:17.820]                   NAME <- NAMES[[kk]]
[16:21:17.820]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:17.820]                     next
[16:21:17.820]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:17.820]                 }
[16:21:17.820]                 NAMES <- toupper(added)
[16:21:17.820]                 for (kk in seq_along(NAMES)) {
[16:21:17.820]                   name <- added[[kk]]
[16:21:17.820]                   NAME <- NAMES[[kk]]
[16:21:17.820]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:17.820]                     next
[16:21:17.820]                   args[[name]] <- ""
[16:21:17.820]                 }
[16:21:17.820]                 NAMES <- toupper(removed)
[16:21:17.820]                 for (kk in seq_along(NAMES)) {
[16:21:17.820]                   name <- removed[[kk]]
[16:21:17.820]                   NAME <- NAMES[[kk]]
[16:21:17.820]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:17.820]                     next
[16:21:17.820]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:17.820]                 }
[16:21:17.820]                 if (length(args) > 0) 
[16:21:17.820]                   base::do.call(base::Sys.setenv, args = args)
[16:21:17.820]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:17.820]             }
[16:21:17.820]             else {
[16:21:17.820]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:17.820]             }
[16:21:17.820]             {
[16:21:17.820]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:17.820]                   0L) {
[16:21:17.820]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:17.820]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:17.820]                   base::options(opts)
[16:21:17.820]                 }
[16:21:17.820]                 {
[16:21:17.820]                   {
[16:21:17.820]                     base::options(mc.cores = ...future.mc.cores.old)
[16:21:17.820]                     NULL
[16:21:17.820]                   }
[16:21:17.820]                   options(future.plan = NULL)
[16:21:17.820]                   if (is.na(NA_character_)) 
[16:21:17.820]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:17.820]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:17.820]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:17.820]                     .init = FALSE)
[16:21:17.820]                 }
[16:21:17.820]             }
[16:21:17.820]         }
[16:21:17.820]     })
[16:21:17.820]     if (TRUE) {
[16:21:17.820]         base::sink(type = "output", split = FALSE)
[16:21:17.820]         if (TRUE) {
[16:21:17.820]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:17.820]         }
[16:21:17.820]         else {
[16:21:17.820]             ...future.result["stdout"] <- base::list(NULL)
[16:21:17.820]         }
[16:21:17.820]         base::close(...future.stdout)
[16:21:17.820]         ...future.stdout <- NULL
[16:21:17.820]     }
[16:21:17.820]     ...future.result$conditions <- ...future.conditions
[16:21:17.820]     ...future.result$finished <- base::Sys.time()
[16:21:17.820]     ...future.result
[16:21:17.820] }
[16:21:17.874] Exporting 1 global objects (56 bytes) to cluster node #2 ...
[16:21:17.874] Exporting ‘ii’ (56 bytes) to cluster node #2 ...
[16:21:17.874] Exporting ‘ii’ (56 bytes) to cluster node #2 ... DONE
[16:21:17.874] Exporting 1 global objects (56 bytes) to cluster node #2 ... DONE
[16:21:17.875] MultisessionFuture started
 - Resolving 2 multisession futures
[16:21:17.875] result() for ClusterFuture ...
[16:21:17.876] receiveMessageFromWorker() for ClusterFuture ...
[16:21:17.876] - Validating connection of MultisessionFuture
[16:21:17.909] - received message: FutureResult
[16:21:17.909] - Received FutureResult
[16:21:17.910] - Erased future from FutureRegistry
[16:21:17.910] result() for ClusterFuture ...
[16:21:17.910] - result already collected: FutureResult
[16:21:17.910] result() for ClusterFuture ... done
[16:21:17.910] receiveMessageFromWorker() for ClusterFuture ... done
[16:21:17.910] result() for ClusterFuture ... done
[16:21:17.910] result() for ClusterFuture ...
[16:21:17.910] - result already collected: FutureResult
[16:21:17.910] result() for ClusterFuture ... done
[16:21:17.911] result() for ClusterFuture ...
[16:21:17.911] receiveMessageFromWorker() for ClusterFuture ...
[16:21:17.911] - Validating connection of MultisessionFuture
[16:21:17.911] - received message: FutureResult
[16:21:17.911] - Received FutureResult
[16:21:17.911] - Erased future from FutureRegistry
[16:21:17.911] result() for ClusterFuture ...
[16:21:17.912] - result already collected: FutureResult
[16:21:17.912] result() for ClusterFuture ... done
[16:21:17.912] receiveMessageFromWorker() for ClusterFuture ... done
[16:21:17.912] result() for ClusterFuture ... done
[16:21:17.912] result() for ClusterFuture ...
[16:21:17.912] - result already collected: FutureResult
[16:21:17.912] result() for ClusterFuture ... done
*** multisession() - workers inherit .libPaths()
[16:21:17.913] getGlobalsAndPackages() ...
[16:21:17.913] Searching for globals...
[16:21:17.913] - globals found: [1] ‘.libPaths’
[16:21:17.913] Searching for globals ... DONE
[16:21:17.914] Resolving globals: FALSE
[16:21:17.914] 
[16:21:17.914] 
[16:21:17.914] getGlobalsAndPackages() ... DONE
[16:21:17.915] run() for ‘Future’ ...
[16:21:17.915] - state: ‘created’
[16:21:17.915] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:21:17.915] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:21:17.915] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:21:17.915]   - Field: ‘label’
[16:21:17.916]   - Field: ‘local’
[16:21:17.916]   - Field: ‘owner’
[16:21:17.916]   - Field: ‘envir’
[16:21:17.916]   - Field: ‘packages’
[16:21:17.916]   - Field: ‘gc’
[16:21:17.916]   - Field: ‘conditions’
[16:21:17.916]   - Field: ‘expr’
[16:21:17.916]   - Field: ‘uuid’
[16:21:17.917]   - Field: ‘seed’
[16:21:17.917]   - Field: ‘version’
[16:21:17.917]   - Field: ‘result’
[16:21:17.917]   - Field: ‘asynchronous’
[16:21:17.917]   - Field: ‘calls’
[16:21:17.917]   - Field: ‘globals’
[16:21:17.917]   - Field: ‘stdout’
[16:21:17.917]   - Field: ‘earlySignal’
[16:21:17.917]   - Field: ‘lazy’
[16:21:17.918]   - Field: ‘state’
[16:21:17.918] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:21:17.918] - Launch lazy future ...
[16:21:17.918] Packages needed by the future expression (n = 0): <none>
[16:21:17.918] Packages needed by future strategies (n = 0): <none>
[16:21:17.919] {
[16:21:17.919]     {
[16:21:17.919]         {
[16:21:17.919]             ...future.startTime <- base::Sys.time()
[16:21:17.919]             {
[16:21:17.919]                 {
[16:21:17.919]                   {
[16:21:17.919]                     base::local({
[16:21:17.919]                       has_future <- base::requireNamespace("future", 
[16:21:17.919]                         quietly = TRUE)
[16:21:17.919]                       if (has_future) {
[16:21:17.919]                         ns <- base::getNamespace("future")
[16:21:17.919]                         version <- ns[[".package"]][["version"]]
[16:21:17.919]                         if (is.null(version)) 
[16:21:17.919]                           version <- utils::packageVersion("future")
[16:21:17.919]                       }
[16:21:17.919]                       else {
[16:21:17.919]                         version <- NULL
[16:21:17.919]                       }
[16:21:17.919]                       if (!has_future || version < "1.8.0") {
[16:21:17.919]                         info <- base::c(r_version = base::gsub("R version ", 
[16:21:17.919]                           "", base::R.version$version.string), 
[16:21:17.919]                           platform = base::sprintf("%s (%s-bit)", 
[16:21:17.919]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:17.919]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:17.919]                             "release", "version")], collapse = " "), 
[16:21:17.919]                           hostname = base::Sys.info()[["nodename"]])
[16:21:17.919]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:21:17.919]                           info)
[16:21:17.919]                         info <- base::paste(info, collapse = "; ")
[16:21:17.919]                         if (!has_future) {
[16:21:17.919]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:17.919]                             info)
[16:21:17.919]                         }
[16:21:17.919]                         else {
[16:21:17.919]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:17.919]                             info, version)
[16:21:17.919]                         }
[16:21:17.919]                         base::stop(msg)
[16:21:17.919]                       }
[16:21:17.919]                     })
[16:21:17.919]                   }
[16:21:17.919]                   ...future.strategy.old <- future::plan("list")
[16:21:17.919]                   options(future.plan = NULL)
[16:21:17.919]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:17.919]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:17.919]                 }
[16:21:17.919]                 ...future.workdir <- getwd()
[16:21:17.919]             }
[16:21:17.919]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:17.919]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:17.919]         }
[16:21:17.919]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:17.919]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:17.919]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:17.919]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:17.919]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:17.919]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:17.919]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:17.919]             base::names(...future.oldOptions))
[16:21:17.919]     }
[16:21:17.919]     if (FALSE) {
[16:21:17.919]     }
[16:21:17.919]     else {
[16:21:17.919]         if (TRUE) {
[16:21:17.919]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:17.919]                 open = "w")
[16:21:17.919]         }
[16:21:17.919]         else {
[16:21:17.919]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:17.919]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:17.919]         }
[16:21:17.919]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:17.919]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:17.919]             base::sink(type = "output", split = FALSE)
[16:21:17.919]             base::close(...future.stdout)
[16:21:17.919]         }, add = TRUE)
[16:21:17.919]     }
[16:21:17.919]     ...future.frame <- base::sys.nframe()
[16:21:17.919]     ...future.conditions <- base::list()
[16:21:17.919]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:17.919]     if (FALSE) {
[16:21:17.919]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:17.919]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:17.919]     }
[16:21:17.919]     ...future.result <- base::tryCatch({
[16:21:17.919]         base::withCallingHandlers({
[16:21:17.919]             ...future.value <- base::withVisible(base::local(.libPaths()))
[16:21:17.919]             future::FutureResult(value = ...future.value$value, 
[16:21:17.919]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:17.919]                   ...future.rng), globalenv = if (FALSE) 
[16:21:17.919]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:17.919]                     ...future.globalenv.names))
[16:21:17.919]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:17.919]         }, condition = base::local({
[16:21:17.919]             c <- base::c
[16:21:17.919]             inherits <- base::inherits
[16:21:17.919]             invokeRestart <- base::invokeRestart
[16:21:17.919]             length <- base::length
[16:21:17.919]             list <- base::list
[16:21:17.919]             seq.int <- base::seq.int
[16:21:17.919]             signalCondition <- base::signalCondition
[16:21:17.919]             sys.calls <- base::sys.calls
[16:21:17.919]             `[[` <- base::`[[`
[16:21:17.919]             `+` <- base::`+`
[16:21:17.919]             `<<-` <- base::`<<-`
[16:21:17.919]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:17.919]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:17.919]                   3L)]
[16:21:17.919]             }
[16:21:17.919]             function(cond) {
[16:21:17.919]                 is_error <- inherits(cond, "error")
[16:21:17.919]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:17.919]                   NULL)
[16:21:17.919]                 if (is_error) {
[16:21:17.919]                   sessionInformation <- function() {
[16:21:17.919]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:17.919]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:17.919]                       search = base::search(), system = base::Sys.info())
[16:21:17.919]                   }
[16:21:17.919]                   ...future.conditions[[length(...future.conditions) + 
[16:21:17.919]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:17.919]                     cond$call), session = sessionInformation(), 
[16:21:17.919]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:17.919]                   signalCondition(cond)
[16:21:17.919]                 }
[16:21:17.919]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:17.919]                 "immediateCondition"))) {
[16:21:17.919]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:17.919]                   ...future.conditions[[length(...future.conditions) + 
[16:21:17.919]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:17.919]                   if (TRUE && !signal) {
[16:21:17.919]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:17.919]                     {
[16:21:17.919]                       inherits <- base::inherits
[16:21:17.919]                       invokeRestart <- base::invokeRestart
[16:21:17.919]                       is.null <- base::is.null
[16:21:17.919]                       muffled <- FALSE
[16:21:17.919]                       if (inherits(cond, "message")) {
[16:21:17.919]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:17.919]                         if (muffled) 
[16:21:17.919]                           invokeRestart("muffleMessage")
[16:21:17.919]                       }
[16:21:17.919]                       else if (inherits(cond, "warning")) {
[16:21:17.919]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:17.919]                         if (muffled) 
[16:21:17.919]                           invokeRestart("muffleWarning")
[16:21:17.919]                       }
[16:21:17.919]                       else if (inherits(cond, "condition")) {
[16:21:17.919]                         if (!is.null(pattern)) {
[16:21:17.919]                           computeRestarts <- base::computeRestarts
[16:21:17.919]                           grepl <- base::grepl
[16:21:17.919]                           restarts <- computeRestarts(cond)
[16:21:17.919]                           for (restart in restarts) {
[16:21:17.919]                             name <- restart$name
[16:21:17.919]                             if (is.null(name)) 
[16:21:17.919]                               next
[16:21:17.919]                             if (!grepl(pattern, name)) 
[16:21:17.919]                               next
[16:21:17.919]                             invokeRestart(restart)
[16:21:17.919]                             muffled <- TRUE
[16:21:17.919]                             break
[16:21:17.919]                           }
[16:21:17.919]                         }
[16:21:17.919]                       }
[16:21:17.919]                       invisible(muffled)
[16:21:17.919]                     }
[16:21:17.919]                     muffleCondition(cond, pattern = "^muffle")
[16:21:17.919]                   }
[16:21:17.919]                 }
[16:21:17.919]                 else {
[16:21:17.919]                   if (TRUE) {
[16:21:17.919]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:17.919]                     {
[16:21:17.919]                       inherits <- base::inherits
[16:21:17.919]                       invokeRestart <- base::invokeRestart
[16:21:17.919]                       is.null <- base::is.null
[16:21:17.919]                       muffled <- FALSE
[16:21:17.919]                       if (inherits(cond, "message")) {
[16:21:17.919]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:17.919]                         if (muffled) 
[16:21:17.919]                           invokeRestart("muffleMessage")
[16:21:17.919]                       }
[16:21:17.919]                       else if (inherits(cond, "warning")) {
[16:21:17.919]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:17.919]                         if (muffled) 
[16:21:17.919]                           invokeRestart("muffleWarning")
[16:21:17.919]                       }
[16:21:17.919]                       else if (inherits(cond, "condition")) {
[16:21:17.919]                         if (!is.null(pattern)) {
[16:21:17.919]                           computeRestarts <- base::computeRestarts
[16:21:17.919]                           grepl <- base::grepl
[16:21:17.919]                           restarts <- computeRestarts(cond)
[16:21:17.919]                           for (restart in restarts) {
[16:21:17.919]                             name <- restart$name
[16:21:17.919]                             if (is.null(name)) 
[16:21:17.919]                               next
[16:21:17.919]                             if (!grepl(pattern, name)) 
[16:21:17.919]                               next
[16:21:17.919]                             invokeRestart(restart)
[16:21:17.919]                             muffled <- TRUE
[16:21:17.919]                             break
[16:21:17.919]                           }
[16:21:17.919]                         }
[16:21:17.919]                       }
[16:21:17.919]                       invisible(muffled)
[16:21:17.919]                     }
[16:21:17.919]                     muffleCondition(cond, pattern = "^muffle")
[16:21:17.919]                   }
[16:21:17.919]                 }
[16:21:17.919]             }
[16:21:17.919]         }))
[16:21:17.919]     }, error = function(ex) {
[16:21:17.919]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:17.919]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:17.919]                 ...future.rng), started = ...future.startTime, 
[16:21:17.919]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:17.919]             version = "1.8"), class = "FutureResult")
[16:21:17.919]     }, finally = {
[16:21:17.919]         if (!identical(...future.workdir, getwd())) 
[16:21:17.919]             setwd(...future.workdir)
[16:21:17.919]         {
[16:21:17.919]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:17.919]                 ...future.oldOptions$nwarnings <- NULL
[16:21:17.919]             }
[16:21:17.919]             base::options(...future.oldOptions)
[16:21:17.919]             if (.Platform$OS.type == "windows") {
[16:21:17.919]                 old_names <- names(...future.oldEnvVars)
[16:21:17.919]                 envs <- base::Sys.getenv()
[16:21:17.919]                 names <- names(envs)
[16:21:17.919]                 common <- intersect(names, old_names)
[16:21:17.919]                 added <- setdiff(names, old_names)
[16:21:17.919]                 removed <- setdiff(old_names, names)
[16:21:17.919]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:17.919]                   envs[common]]
[16:21:17.919]                 NAMES <- toupper(changed)
[16:21:17.919]                 args <- list()
[16:21:17.919]                 for (kk in seq_along(NAMES)) {
[16:21:17.919]                   name <- changed[[kk]]
[16:21:17.919]                   NAME <- NAMES[[kk]]
[16:21:17.919]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:17.919]                     next
[16:21:17.919]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:17.919]                 }
[16:21:17.919]                 NAMES <- toupper(added)
[16:21:17.919]                 for (kk in seq_along(NAMES)) {
[16:21:17.919]                   name <- added[[kk]]
[16:21:17.919]                   NAME <- NAMES[[kk]]
[16:21:17.919]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:17.919]                     next
[16:21:17.919]                   args[[name]] <- ""
[16:21:17.919]                 }
[16:21:17.919]                 NAMES <- toupper(removed)
[16:21:17.919]                 for (kk in seq_along(NAMES)) {
[16:21:17.919]                   name <- removed[[kk]]
[16:21:17.919]                   NAME <- NAMES[[kk]]
[16:21:17.919]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:17.919]                     next
[16:21:17.919]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:17.919]                 }
[16:21:17.919]                 if (length(args) > 0) 
[16:21:17.919]                   base::do.call(base::Sys.setenv, args = args)
[16:21:17.919]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:17.919]             }
[16:21:17.919]             else {
[16:21:17.919]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:17.919]             }
[16:21:17.919]             {
[16:21:17.919]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:17.919]                   0L) {
[16:21:17.919]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:17.919]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:17.919]                   base::options(opts)
[16:21:17.919]                 }
[16:21:17.919]                 {
[16:21:17.919]                   {
[16:21:17.919]                     NULL
[16:21:17.919]                     RNGkind("Mersenne-Twister")
[16:21:17.919]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:21:17.919]                       inherits = FALSE)
[16:21:17.919]                   }
[16:21:17.919]                   options(future.plan = NULL)
[16:21:17.919]                   if (is.na(NA_character_)) 
[16:21:17.919]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:17.919]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:17.919]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:17.919]                     .init = FALSE)
[16:21:17.919]                 }
[16:21:17.919]             }
[16:21:17.919]         }
[16:21:17.919]     })
[16:21:17.919]     if (TRUE) {
[16:21:17.919]         base::sink(type = "output", split = FALSE)
[16:21:17.919]         if (TRUE) {
[16:21:17.919]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:17.919]         }
[16:21:17.919]         else {
[16:21:17.919]             ...future.result["stdout"] <- base::list(NULL)
[16:21:17.919]         }
[16:21:17.919]         base::close(...future.stdout)
[16:21:17.919]         ...future.stdout <- NULL
[16:21:17.919]     }
[16:21:17.919]     ...future.result$conditions <- ...future.conditions
[16:21:17.919]     ...future.result$finished <- base::Sys.time()
[16:21:17.919]     ...future.result
[16:21:17.919] }
[16:21:17.923] plan(): Setting new future strategy stack:
[16:21:17.923] List of future strategies:
[16:21:17.923] 1. sequential:
[16:21:17.923]    - args: function (..., envir = parent.frame())
[16:21:17.923]    - tweaked: FALSE
[16:21:17.923]    - call: NULL
[16:21:17.924] plan(): nbrOfWorkers() = 1
[16:21:17.924] plan(): Setting new future strategy stack:
[16:21:17.924] List of future strategies:
[16:21:17.924] 1. sequential:
[16:21:17.924]    - args: function (..., envir = parent.frame())
[16:21:17.924]    - tweaked: FALSE
[16:21:17.924]    - call: future::plan("sequential")
[16:21:17.925] plan(): nbrOfWorkers() = 1
[16:21:17.925] SequentialFuture started (and completed)
[16:21:17.925] - Launch lazy future ... done
[16:21:17.925] run() for ‘SequentialFuture’ ... done
List of 2
 $ main   : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
 $ workers: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
*** multisession() and errors
[16:21:17.930] getGlobalsAndPackages() ...
[16:21:17.930] 
[16:21:17.930] - globals: [0] <none>
[16:21:17.930] getGlobalsAndPackages() ... DONE
[16:21:17.941] Packages needed by the future expression (n = 0): <none>
[16:21:17.941] Packages needed by future strategies (n = 0): <none>
[16:21:17.941] {
[16:21:17.941]     {
[16:21:17.941]         {
[16:21:17.941]             ...future.startTime <- base::Sys.time()
[16:21:17.941]             {
[16:21:17.941]                 {
[16:21:17.941]                   {
[16:21:17.941]                     {
[16:21:17.941]                       base::local({
[16:21:17.941]                         has_future <- base::requireNamespace("future", 
[16:21:17.941]                           quietly = TRUE)
[16:21:17.941]                         if (has_future) {
[16:21:17.941]                           ns <- base::getNamespace("future")
[16:21:17.941]                           version <- ns[[".package"]][["version"]]
[16:21:17.941]                           if (is.null(version)) 
[16:21:17.941]                             version <- utils::packageVersion("future")
[16:21:17.941]                         }
[16:21:17.941]                         else {
[16:21:17.941]                           version <- NULL
[16:21:17.941]                         }
[16:21:17.941]                         if (!has_future || version < "1.8.0") {
[16:21:17.941]                           info <- base::c(r_version = base::gsub("R version ", 
[16:21:17.941]                             "", base::R.version$version.string), 
[16:21:17.941]                             platform = base::sprintf("%s (%s-bit)", 
[16:21:17.941]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:17.941]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:17.941]                               "release", "version")], collapse = " "), 
[16:21:17.941]                             hostname = base::Sys.info()[["nodename"]])
[16:21:17.941]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:21:17.941]                             info)
[16:21:17.941]                           info <- base::paste(info, collapse = "; ")
[16:21:17.941]                           if (!has_future) {
[16:21:17.941]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:17.941]                               info)
[16:21:17.941]                           }
[16:21:17.941]                           else {
[16:21:17.941]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:17.941]                               info, version)
[16:21:17.941]                           }
[16:21:17.941]                           base::stop(msg)
[16:21:17.941]                         }
[16:21:17.941]                       })
[16:21:17.941]                     }
[16:21:17.941]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:21:17.941]                     base::options(mc.cores = 1L)
[16:21:17.941]                   }
[16:21:17.941]                   ...future.strategy.old <- future::plan("list")
[16:21:17.941]                   options(future.plan = NULL)
[16:21:17.941]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:17.941]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:17.941]                 }
[16:21:17.941]                 ...future.workdir <- getwd()
[16:21:17.941]             }
[16:21:17.941]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:17.941]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:17.941]         }
[16:21:17.941]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:17.941]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:17.941]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:17.941]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:17.941]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:17.941]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:17.941]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:17.941]             base::names(...future.oldOptions))
[16:21:17.941]     }
[16:21:17.941]     if (FALSE) {
[16:21:17.941]     }
[16:21:17.941]     else {
[16:21:17.941]         if (TRUE) {
[16:21:17.941]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:17.941]                 open = "w")
[16:21:17.941]         }
[16:21:17.941]         else {
[16:21:17.941]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:17.941]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:17.941]         }
[16:21:17.941]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:17.941]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:17.941]             base::sink(type = "output", split = FALSE)
[16:21:17.941]             base::close(...future.stdout)
[16:21:17.941]         }, add = TRUE)
[16:21:17.941]     }
[16:21:17.941]     ...future.frame <- base::sys.nframe()
[16:21:17.941]     ...future.conditions <- base::list()
[16:21:17.941]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:17.941]     if (FALSE) {
[16:21:17.941]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:17.941]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:17.941]     }
[16:21:17.941]     ...future.result <- base::tryCatch({
[16:21:17.941]         base::withCallingHandlers({
[16:21:17.941]             ...future.value <- base::withVisible(base::local({
[16:21:17.941]                 ...future.makeSendCondition <- base::local({
[16:21:17.941]                   sendCondition <- NULL
[16:21:17.941]                   function(frame = 1L) {
[16:21:17.941]                     if (is.function(sendCondition)) 
[16:21:17.941]                       return(sendCondition)
[16:21:17.941]                     ns <- getNamespace("parallel")
[16:21:17.941]                     if (exists("sendData", mode = "function", 
[16:21:17.941]                       envir = ns)) {
[16:21:17.941]                       parallel_sendData <- get("sendData", mode = "function", 
[16:21:17.941]                         envir = ns)
[16:21:17.941]                       envir <- sys.frame(frame)
[16:21:17.941]                       master <- NULL
[16:21:17.941]                       while (!identical(envir, .GlobalEnv) && 
[16:21:17.941]                         !identical(envir, emptyenv())) {
[16:21:17.941]                         if (exists("master", mode = "list", envir = envir, 
[16:21:17.941]                           inherits = FALSE)) {
[16:21:17.941]                           master <- get("master", mode = "list", 
[16:21:17.941]                             envir = envir, inherits = FALSE)
[16:21:17.941]                           if (inherits(master, c("SOCKnode", 
[16:21:17.941]                             "SOCK0node"))) {
[16:21:17.941]                             sendCondition <<- function(cond) {
[16:21:17.941]                               data <- list(type = "VALUE", value = cond, 
[16:21:17.941]                                 success = TRUE)
[16:21:17.941]                               parallel_sendData(master, data)
[16:21:17.941]                             }
[16:21:17.941]                             return(sendCondition)
[16:21:17.941]                           }
[16:21:17.941]                         }
[16:21:17.941]                         frame <- frame + 1L
[16:21:17.941]                         envir <- sys.frame(frame)
[16:21:17.941]                       }
[16:21:17.941]                     }
[16:21:17.941]                     sendCondition <<- function(cond) NULL
[16:21:17.941]                   }
[16:21:17.941]                 })
[16:21:17.941]                 withCallingHandlers({
[16:21:17.941]                   {
[16:21:17.941]                     stop("Whoops!")
[16:21:17.941]                     1
[16:21:17.941]                   }
[16:21:17.941]                 }, immediateCondition = function(cond) {
[16:21:17.941]                   sendCondition <- ...future.makeSendCondition()
[16:21:17.941]                   sendCondition(cond)
[16:21:17.941]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:17.941]                   {
[16:21:17.941]                     inherits <- base::inherits
[16:21:17.941]                     invokeRestart <- base::invokeRestart
[16:21:17.941]                     is.null <- base::is.null
[16:21:17.941]                     muffled <- FALSE
[16:21:17.941]                     if (inherits(cond, "message")) {
[16:21:17.941]                       muffled <- grepl(pattern, "muffleMessage")
[16:21:17.941]                       if (muffled) 
[16:21:17.941]                         invokeRestart("muffleMessage")
[16:21:17.941]                     }
[16:21:17.941]                     else if (inherits(cond, "warning")) {
[16:21:17.941]                       muffled <- grepl(pattern, "muffleWarning")
[16:21:17.941]                       if (muffled) 
[16:21:17.941]                         invokeRestart("muffleWarning")
[16:21:17.941]                     }
[16:21:17.941]                     else if (inherits(cond, "condition")) {
[16:21:17.941]                       if (!is.null(pattern)) {
[16:21:17.941]                         computeRestarts <- base::computeRestarts
[16:21:17.941]                         grepl <- base::grepl
[16:21:17.941]                         restarts <- computeRestarts(cond)
[16:21:17.941]                         for (restart in restarts) {
[16:21:17.941]                           name <- restart$name
[16:21:17.941]                           if (is.null(name)) 
[16:21:17.941]                             next
[16:21:17.941]                           if (!grepl(pattern, name)) 
[16:21:17.941]                             next
[16:21:17.941]                           invokeRestart(restart)
[16:21:17.941]                           muffled <- TRUE
[16:21:17.941]                           break
[16:21:17.941]                         }
[16:21:17.941]                       }
[16:21:17.941]                     }
[16:21:17.941]                     invisible(muffled)
[16:21:17.941]                   }
[16:21:17.941]                   muffleCondition(cond)
[16:21:17.941]                 })
[16:21:17.941]             }))
[16:21:17.941]             future::FutureResult(value = ...future.value$value, 
[16:21:17.941]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:17.941]                   ...future.rng), globalenv = if (FALSE) 
[16:21:17.941]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:17.941]                     ...future.globalenv.names))
[16:21:17.941]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:17.941]         }, condition = base::local({
[16:21:17.941]             c <- base::c
[16:21:17.941]             inherits <- base::inherits
[16:21:17.941]             invokeRestart <- base::invokeRestart
[16:21:17.941]             length <- base::length
[16:21:17.941]             list <- base::list
[16:21:17.941]             seq.int <- base::seq.int
[16:21:17.941]             signalCondition <- base::signalCondition
[16:21:17.941]             sys.calls <- base::sys.calls
[16:21:17.941]             `[[` <- base::`[[`
[16:21:17.941]             `+` <- base::`+`
[16:21:17.941]             `<<-` <- base::`<<-`
[16:21:17.941]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:17.941]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:17.941]                   3L)]
[16:21:17.941]             }
[16:21:17.941]             function(cond) {
[16:21:17.941]                 is_error <- inherits(cond, "error")
[16:21:17.941]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:17.941]                   NULL)
[16:21:17.941]                 if (is_error) {
[16:21:17.941]                   sessionInformation <- function() {
[16:21:17.941]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:17.941]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:17.941]                       search = base::search(), system = base::Sys.info())
[16:21:17.941]                   }
[16:21:17.941]                   ...future.conditions[[length(...future.conditions) + 
[16:21:17.941]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:17.941]                     cond$call), session = sessionInformation(), 
[16:21:17.941]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:17.941]                   signalCondition(cond)
[16:21:17.941]                 }
[16:21:17.941]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:17.941]                 "immediateCondition"))) {
[16:21:17.941]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:17.941]                   ...future.conditions[[length(...future.conditions) + 
[16:21:17.941]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:17.941]                   if (TRUE && !signal) {
[16:21:17.941]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:17.941]                     {
[16:21:17.941]                       inherits <- base::inherits
[16:21:17.941]                       invokeRestart <- base::invokeRestart
[16:21:17.941]                       is.null <- base::is.null
[16:21:17.941]                       muffled <- FALSE
[16:21:17.941]                       if (inherits(cond, "message")) {
[16:21:17.941]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:17.941]                         if (muffled) 
[16:21:17.941]                           invokeRestart("muffleMessage")
[16:21:17.941]                       }
[16:21:17.941]                       else if (inherits(cond, "warning")) {
[16:21:17.941]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:17.941]                         if (muffled) 
[16:21:17.941]                           invokeRestart("muffleWarning")
[16:21:17.941]                       }
[16:21:17.941]                       else if (inherits(cond, "condition")) {
[16:21:17.941]                         if (!is.null(pattern)) {
[16:21:17.941]                           computeRestarts <- base::computeRestarts
[16:21:17.941]                           grepl <- base::grepl
[16:21:17.941]                           restarts <- computeRestarts(cond)
[16:21:17.941]                           for (restart in restarts) {
[16:21:17.941]                             name <- restart$name
[16:21:17.941]                             if (is.null(name)) 
[16:21:17.941]                               next
[16:21:17.941]                             if (!grepl(pattern, name)) 
[16:21:17.941]                               next
[16:21:17.941]                             invokeRestart(restart)
[16:21:17.941]                             muffled <- TRUE
[16:21:17.941]                             break
[16:21:17.941]                           }
[16:21:17.941]                         }
[16:21:17.941]                       }
[16:21:17.941]                       invisible(muffled)
[16:21:17.941]                     }
[16:21:17.941]                     muffleCondition(cond, pattern = "^muffle")
[16:21:17.941]                   }
[16:21:17.941]                 }
[16:21:17.941]                 else {
[16:21:17.941]                   if (TRUE) {
[16:21:17.941]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:17.941]                     {
[16:21:17.941]                       inherits <- base::inherits
[16:21:17.941]                       invokeRestart <- base::invokeRestart
[16:21:17.941]                       is.null <- base::is.null
[16:21:17.941]                       muffled <- FALSE
[16:21:17.941]                       if (inherits(cond, "message")) {
[16:21:17.941]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:17.941]                         if (muffled) 
[16:21:17.941]                           invokeRestart("muffleMessage")
[16:21:17.941]                       }
[16:21:17.941]                       else if (inherits(cond, "warning")) {
[16:21:17.941]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:17.941]                         if (muffled) 
[16:21:17.941]                           invokeRestart("muffleWarning")
[16:21:17.941]                       }
[16:21:17.941]                       else if (inherits(cond, "condition")) {
[16:21:17.941]                         if (!is.null(pattern)) {
[16:21:17.941]                           computeRestarts <- base::computeRestarts
[16:21:17.941]                           grepl <- base::grepl
[16:21:17.941]                           restarts <- computeRestarts(cond)
[16:21:17.941]                           for (restart in restarts) {
[16:21:17.941]                             name <- restart$name
[16:21:17.941]                             if (is.null(name)) 
[16:21:17.941]                               next
[16:21:17.941]                             if (!grepl(pattern, name)) 
[16:21:17.941]                               next
[16:21:17.941]                             invokeRestart(restart)
[16:21:17.941]                             muffled <- TRUE
[16:21:17.941]                             break
[16:21:17.941]                           }
[16:21:17.941]                         }
[16:21:17.941]                       }
[16:21:17.941]                       invisible(muffled)
[16:21:17.941]                     }
[16:21:17.941]                     muffleCondition(cond, pattern = "^muffle")
[16:21:17.941]                   }
[16:21:17.941]                 }
[16:21:17.941]             }
[16:21:17.941]         }))
[16:21:17.941]     }, error = function(ex) {
[16:21:17.941]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:17.941]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:17.941]                 ...future.rng), started = ...future.startTime, 
[16:21:17.941]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:17.941]             version = "1.8"), class = "FutureResult")
[16:21:17.941]     }, finally = {
[16:21:17.941]         if (!identical(...future.workdir, getwd())) 
[16:21:17.941]             setwd(...future.workdir)
[16:21:17.941]         {
[16:21:17.941]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:17.941]                 ...future.oldOptions$nwarnings <- NULL
[16:21:17.941]             }
[16:21:17.941]             base::options(...future.oldOptions)
[16:21:17.941]             if (.Platform$OS.type == "windows") {
[16:21:17.941]                 old_names <- names(...future.oldEnvVars)
[16:21:17.941]                 envs <- base::Sys.getenv()
[16:21:17.941]                 names <- names(envs)
[16:21:17.941]                 common <- intersect(names, old_names)
[16:21:17.941]                 added <- setdiff(names, old_names)
[16:21:17.941]                 removed <- setdiff(old_names, names)
[16:21:17.941]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:17.941]                   envs[common]]
[16:21:17.941]                 NAMES <- toupper(changed)
[16:21:17.941]                 args <- list()
[16:21:17.941]                 for (kk in seq_along(NAMES)) {
[16:21:17.941]                   name <- changed[[kk]]
[16:21:17.941]                   NAME <- NAMES[[kk]]
[16:21:17.941]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:17.941]                     next
[16:21:17.941]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:17.941]                 }
[16:21:17.941]                 NAMES <- toupper(added)
[16:21:17.941]                 for (kk in seq_along(NAMES)) {
[16:21:17.941]                   name <- added[[kk]]
[16:21:17.941]                   NAME <- NAMES[[kk]]
[16:21:17.941]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:17.941]                     next
[16:21:17.941]                   args[[name]] <- ""
[16:21:17.941]                 }
[16:21:17.941]                 NAMES <- toupper(removed)
[16:21:17.941]                 for (kk in seq_along(NAMES)) {
[16:21:17.941]                   name <- removed[[kk]]
[16:21:17.941]                   NAME <- NAMES[[kk]]
[16:21:17.941]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:17.941]                     next
[16:21:17.941]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:17.941]                 }
[16:21:17.941]                 if (length(args) > 0) 
[16:21:17.941]                   base::do.call(base::Sys.setenv, args = args)
[16:21:17.941]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:17.941]             }
[16:21:17.941]             else {
[16:21:17.941]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:17.941]             }
[16:21:17.941]             {
[16:21:17.941]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:17.941]                   0L) {
[16:21:17.941]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:17.941]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:17.941]                   base::options(opts)
[16:21:17.941]                 }
[16:21:17.941]                 {
[16:21:17.941]                   {
[16:21:17.941]                     base::options(mc.cores = ...future.mc.cores.old)
[16:21:17.941]                     NULL
[16:21:17.941]                   }
[16:21:17.941]                   options(future.plan = NULL)
[16:21:17.941]                   if (is.na(NA_character_)) 
[16:21:17.941]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:17.941]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:17.941]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:17.941]                     .init = FALSE)
[16:21:17.941]                 }
[16:21:17.941]             }
[16:21:17.941]         }
[16:21:17.941]     })
[16:21:17.941]     if (TRUE) {
[16:21:17.941]         base::sink(type = "output", split = FALSE)
[16:21:17.941]         if (TRUE) {
[16:21:17.941]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:17.941]         }
[16:21:17.941]         else {
[16:21:17.941]             ...future.result["stdout"] <- base::list(NULL)
[16:21:17.941]         }
[16:21:17.941]         base::close(...future.stdout)
[16:21:17.941]         ...future.stdout <- NULL
[16:21:17.941]     }
[16:21:17.941]     ...future.result$conditions <- ...future.conditions
[16:21:17.941]     ...future.result$finished <- base::Sys.time()
[16:21:17.941]     ...future.result
[16:21:17.941] }
[16:21:17.944] MultisessionFuture started
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    stop("Whoops!")
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[16:21:17.946] receiveMessageFromWorker() for ClusterFuture ...
[16:21:17.947] - Validating connection of MultisessionFuture
[16:21:17.947] - received message: FutureResult
[16:21:17.947] - Received FutureResult
[16:21:17.947] - Erased future from FutureRegistry
[16:21:17.947] result() for ClusterFuture ...
[16:21:17.947] - result already collected: FutureResult
[16:21:17.947] result() for ClusterFuture ... done
[16:21:17.947] signalConditions() ...
[16:21:17.948]  - include = ‘immediateCondition’
[16:21:17.948]  - exclude = 
[16:21:17.948]  - resignal = FALSE
[16:21:17.948]  - Number of conditions: 1
[16:21:17.948] signalConditions() ... done
[16:21:17.948] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 3e579109-592e-0b73-60c9-ee81fb289d87
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:21:17.948] result() for ClusterFuture ...
[16:21:17.948] - result already collected: FutureResult
[16:21:17.948] result() for ClusterFuture ... done
[16:21:17.948] result() for ClusterFuture ...
[16:21:17.949] - result already collected: FutureResult
[16:21:17.949] result() for ClusterFuture ... done
[16:21:17.949] signalConditions() ...
[16:21:17.949]  - include = ‘immediateCondition’
[16:21:17.949]  - exclude = 
[16:21:17.949]  - resignal = FALSE
[16:21:17.949]  - Number of conditions: 1
[16:21:17.949] signalConditions() ... done
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    sendCondition <- ...future.makeSendCondition()    sendCondition(cond)    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[16:21:17.950] result() for ClusterFuture ...
[16:21:17.950] - result already collected: FutureResult
[16:21:17.950] result() for ClusterFuture ... done
[16:21:17.950] result() for ClusterFuture ...
[16:21:17.950] - result already collected: FutureResult
[16:21:17.950] result() for ClusterFuture ... done
[16:21:17.950] signalConditions() ...
[16:21:17.950]  - include = ‘immediateCondition’
[16:21:17.950]  - exclude = 
[16:21:17.950]  - resignal = FALSE
[16:21:17.950]  - Number of conditions: 1
[16:21:17.951] signalConditions() ... done
[16:21:17.951] Future state: ‘finished’
[16:21:17.951] result() for ClusterFuture ...
[16:21:17.951] - result already collected: FutureResult
[16:21:17.951] result() for ClusterFuture ... done
[16:21:17.951] signalConditions() ...
[16:21:17.951]  - include = ‘condition’
[16:21:17.951]  - exclude = ‘immediateCondition’
[16:21:17.951]  - resignal = TRUE
[16:21:17.951]  - Number of conditions: 1
[16:21:17.951]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[16:21:17.952] signalConditions() ... done
[1] "Error in withCallingHandlers({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    sendCondition <- ...future.makeSendCondition()    sendCondition(cond)    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[16:21:17.952] result() for ClusterFuture ...
[16:21:17.952] - result already collected: FutureResult
[16:21:17.952] result() for ClusterFuture ... done
[16:21:17.952] result() for ClusterFuture ...
[16:21:17.952] - result already collected: FutureResult
[16:21:17.953] result() for ClusterFuture ... done
[16:21:17.953] signalConditions() ...
[16:21:17.953]  - include = ‘immediateCondition’
[16:21:17.953]  - exclude = 
[16:21:17.953]  - resignal = FALSE
[16:21:17.953]  - Number of conditions: 1
[16:21:17.953] signalConditions() ... done
[16:21:17.953] Future state: ‘finished’
[16:21:17.953] result() for ClusterFuture ...
[16:21:17.953] - result already collected: FutureResult
[16:21:17.953] result() for ClusterFuture ... done
[16:21:17.953] signalConditions() ...
[16:21:17.954]  - include = ‘condition’
[16:21:17.954]  - exclude = ‘immediateCondition’
[16:21:17.954]  - resignal = TRUE
[16:21:17.954]  - Number of conditions: 1
[16:21:17.954]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[16:21:17.954] signalConditions() ... done
[1] "Error in withCallingHandlers({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    sendCondition <- ...future.makeSendCondition()    sendCondition(cond)    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[16:21:17.958] getGlobalsAndPackages() ...
[16:21:17.958] 
[16:21:17.958] - globals: [0] <none>
[16:21:17.958] getGlobalsAndPackages() ... DONE
[16:21:17.968] Packages needed by the future expression (n = 0): <none>
[16:21:17.969] Packages needed by future strategies (n = 0): <none>
[16:21:17.969] {
[16:21:17.969]     {
[16:21:17.969]         {
[16:21:17.969]             ...future.startTime <- base::Sys.time()
[16:21:17.969]             {
[16:21:17.969]                 {
[16:21:17.969]                   {
[16:21:17.969]                     {
[16:21:17.969]                       base::local({
[16:21:17.969]                         has_future <- base::requireNamespace("future", 
[16:21:17.969]                           quietly = TRUE)
[16:21:17.969]                         if (has_future) {
[16:21:17.969]                           ns <- base::getNamespace("future")
[16:21:17.969]                           version <- ns[[".package"]][["version"]]
[16:21:17.969]                           if (is.null(version)) 
[16:21:17.969]                             version <- utils::packageVersion("future")
[16:21:17.969]                         }
[16:21:17.969]                         else {
[16:21:17.969]                           version <- NULL
[16:21:17.969]                         }
[16:21:17.969]                         if (!has_future || version < "1.8.0") {
[16:21:17.969]                           info <- base::c(r_version = base::gsub("R version ", 
[16:21:17.969]                             "", base::R.version$version.string), 
[16:21:17.969]                             platform = base::sprintf("%s (%s-bit)", 
[16:21:17.969]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:17.969]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:17.969]                               "release", "version")], collapse = " "), 
[16:21:17.969]                             hostname = base::Sys.info()[["nodename"]])
[16:21:17.969]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:21:17.969]                             info)
[16:21:17.969]                           info <- base::paste(info, collapse = "; ")
[16:21:17.969]                           if (!has_future) {
[16:21:17.969]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:17.969]                               info)
[16:21:17.969]                           }
[16:21:17.969]                           else {
[16:21:17.969]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:17.969]                               info, version)
[16:21:17.969]                           }
[16:21:17.969]                           base::stop(msg)
[16:21:17.969]                         }
[16:21:17.969]                       })
[16:21:17.969]                     }
[16:21:17.969]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:21:17.969]                     base::options(mc.cores = 1L)
[16:21:17.969]                   }
[16:21:17.969]                   ...future.strategy.old <- future::plan("list")
[16:21:17.969]                   options(future.plan = NULL)
[16:21:17.969]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:17.969]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:17.969]                 }
[16:21:17.969]                 ...future.workdir <- getwd()
[16:21:17.969]             }
[16:21:17.969]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:17.969]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:17.969]         }
[16:21:17.969]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:17.969]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:17.969]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:17.969]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:17.969]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:17.969]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:17.969]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:17.969]             base::names(...future.oldOptions))
[16:21:17.969]     }
[16:21:17.969]     if (FALSE) {
[16:21:17.969]     }
[16:21:17.969]     else {
[16:21:17.969]         if (TRUE) {
[16:21:17.969]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:17.969]                 open = "w")
[16:21:17.969]         }
[16:21:17.969]         else {
[16:21:17.969]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:17.969]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:17.969]         }
[16:21:17.969]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:17.969]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:17.969]             base::sink(type = "output", split = FALSE)
[16:21:17.969]             base::close(...future.stdout)
[16:21:17.969]         }, add = TRUE)
[16:21:17.969]     }
[16:21:17.969]     ...future.frame <- base::sys.nframe()
[16:21:17.969]     ...future.conditions <- base::list()
[16:21:17.969]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:17.969]     if (FALSE) {
[16:21:17.969]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:17.969]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:17.969]     }
[16:21:17.969]     ...future.result <- base::tryCatch({
[16:21:17.969]         base::withCallingHandlers({
[16:21:17.969]             ...future.value <- base::withVisible(base::local({
[16:21:17.969]                 ...future.makeSendCondition <- base::local({
[16:21:17.969]                   sendCondition <- NULL
[16:21:17.969]                   function(frame = 1L) {
[16:21:17.969]                     if (is.function(sendCondition)) 
[16:21:17.969]                       return(sendCondition)
[16:21:17.969]                     ns <- getNamespace("parallel")
[16:21:17.969]                     if (exists("sendData", mode = "function", 
[16:21:17.969]                       envir = ns)) {
[16:21:17.969]                       parallel_sendData <- get("sendData", mode = "function", 
[16:21:17.969]                         envir = ns)
[16:21:17.969]                       envir <- sys.frame(frame)
[16:21:17.969]                       master <- NULL
[16:21:17.969]                       while (!identical(envir, .GlobalEnv) && 
[16:21:17.969]                         !identical(envir, emptyenv())) {
[16:21:17.969]                         if (exists("master", mode = "list", envir = envir, 
[16:21:17.969]                           inherits = FALSE)) {
[16:21:17.969]                           master <- get("master", mode = "list", 
[16:21:17.969]                             envir = envir, inherits = FALSE)
[16:21:17.969]                           if (inherits(master, c("SOCKnode", 
[16:21:17.969]                             "SOCK0node"))) {
[16:21:17.969]                             sendCondition <<- function(cond) {
[16:21:17.969]                               data <- list(type = "VALUE", value = cond, 
[16:21:17.969]                                 success = TRUE)
[16:21:17.969]                               parallel_sendData(master, data)
[16:21:17.969]                             }
[16:21:17.969]                             return(sendCondition)
[16:21:17.969]                           }
[16:21:17.969]                         }
[16:21:17.969]                         frame <- frame + 1L
[16:21:17.969]                         envir <- sys.frame(frame)
[16:21:17.969]                       }
[16:21:17.969]                     }
[16:21:17.969]                     sendCondition <<- function(cond) NULL
[16:21:17.969]                   }
[16:21:17.969]                 })
[16:21:17.969]                 withCallingHandlers({
[16:21:17.969]                   {
[16:21:17.969]                     stop(structure(list(message = "boom"), class = c("MyError", 
[16:21:17.969]                       "error", "condition")))
[16:21:17.969]                   }
[16:21:17.969]                 }, immediateCondition = function(cond) {
[16:21:17.969]                   sendCondition <- ...future.makeSendCondition()
[16:21:17.969]                   sendCondition(cond)
[16:21:17.969]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:17.969]                   {
[16:21:17.969]                     inherits <- base::inherits
[16:21:17.969]                     invokeRestart <- base::invokeRestart
[16:21:17.969]                     is.null <- base::is.null
[16:21:17.969]                     muffled <- FALSE
[16:21:17.969]                     if (inherits(cond, "message")) {
[16:21:17.969]                       muffled <- grepl(pattern, "muffleMessage")
[16:21:17.969]                       if (muffled) 
[16:21:17.969]                         invokeRestart("muffleMessage")
[16:21:17.969]                     }
[16:21:17.969]                     else if (inherits(cond, "warning")) {
[16:21:17.969]                       muffled <- grepl(pattern, "muffleWarning")
[16:21:17.969]                       if (muffled) 
[16:21:17.969]                         invokeRestart("muffleWarning")
[16:21:17.969]                     }
[16:21:17.969]                     else if (inherits(cond, "condition")) {
[16:21:17.969]                       if (!is.null(pattern)) {
[16:21:17.969]                         computeRestarts <- base::computeRestarts
[16:21:17.969]                         grepl <- base::grepl
[16:21:17.969]                         restarts <- computeRestarts(cond)
[16:21:17.969]                         for (restart in restarts) {
[16:21:17.969]                           name <- restart$name
[16:21:17.969]                           if (is.null(name)) 
[16:21:17.969]                             next
[16:21:17.969]                           if (!grepl(pattern, name)) 
[16:21:17.969]                             next
[16:21:17.969]                           invokeRestart(restart)
[16:21:17.969]                           muffled <- TRUE
[16:21:17.969]                           break
[16:21:17.969]                         }
[16:21:17.969]                       }
[16:21:17.969]                     }
[16:21:17.969]                     invisible(muffled)
[16:21:17.969]                   }
[16:21:17.969]                   muffleCondition(cond)
[16:21:17.969]                 })
[16:21:17.969]             }))
[16:21:17.969]             future::FutureResult(value = ...future.value$value, 
[16:21:17.969]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:17.969]                   ...future.rng), globalenv = if (FALSE) 
[16:21:17.969]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:17.969]                     ...future.globalenv.names))
[16:21:17.969]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:17.969]         }, condition = base::local({
[16:21:17.969]             c <- base::c
[16:21:17.969]             inherits <- base::inherits
[16:21:17.969]             invokeRestart <- base::invokeRestart
[16:21:17.969]             length <- base::length
[16:21:17.969]             list <- base::list
[16:21:17.969]             seq.int <- base::seq.int
[16:21:17.969]             signalCondition <- base::signalCondition
[16:21:17.969]             sys.calls <- base::sys.calls
[16:21:17.969]             `[[` <- base::`[[`
[16:21:17.969]             `+` <- base::`+`
[16:21:17.969]             `<<-` <- base::`<<-`
[16:21:17.969]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:17.969]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:17.969]                   3L)]
[16:21:17.969]             }
[16:21:17.969]             function(cond) {
[16:21:17.969]                 is_error <- inherits(cond, "error")
[16:21:17.969]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:17.969]                   NULL)
[16:21:17.969]                 if (is_error) {
[16:21:17.969]                   sessionInformation <- function() {
[16:21:17.969]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:17.969]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:17.969]                       search = base::search(), system = base::Sys.info())
[16:21:17.969]                   }
[16:21:17.969]                   ...future.conditions[[length(...future.conditions) + 
[16:21:17.969]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:17.969]                     cond$call), session = sessionInformation(), 
[16:21:17.969]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:17.969]                   signalCondition(cond)
[16:21:17.969]                 }
[16:21:17.969]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:17.969]                 "immediateCondition"))) {
[16:21:17.969]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:17.969]                   ...future.conditions[[length(...future.conditions) + 
[16:21:17.969]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:17.969]                   if (TRUE && !signal) {
[16:21:17.969]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:17.969]                     {
[16:21:17.969]                       inherits <- base::inherits
[16:21:17.969]                       invokeRestart <- base::invokeRestart
[16:21:17.969]                       is.null <- base::is.null
[16:21:17.969]                       muffled <- FALSE
[16:21:17.969]                       if (inherits(cond, "message")) {
[16:21:17.969]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:17.969]                         if (muffled) 
[16:21:17.969]                           invokeRestart("muffleMessage")
[16:21:17.969]                       }
[16:21:17.969]                       else if (inherits(cond, "warning")) {
[16:21:17.969]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:17.969]                         if (muffled) 
[16:21:17.969]                           invokeRestart("muffleWarning")
[16:21:17.969]                       }
[16:21:17.969]                       else if (inherits(cond, "condition")) {
[16:21:17.969]                         if (!is.null(pattern)) {
[16:21:17.969]                           computeRestarts <- base::computeRestarts
[16:21:17.969]                           grepl <- base::grepl
[16:21:17.969]                           restarts <- computeRestarts(cond)
[16:21:17.969]                           for (restart in restarts) {
[16:21:17.969]                             name <- restart$name
[16:21:17.969]                             if (is.null(name)) 
[16:21:17.969]                               next
[16:21:17.969]                             if (!grepl(pattern, name)) 
[16:21:17.969]                               next
[16:21:17.969]                             invokeRestart(restart)
[16:21:17.969]                             muffled <- TRUE
[16:21:17.969]                             break
[16:21:17.969]                           }
[16:21:17.969]                         }
[16:21:17.969]                       }
[16:21:17.969]                       invisible(muffled)
[16:21:17.969]                     }
[16:21:17.969]                     muffleCondition(cond, pattern = "^muffle")
[16:21:17.969]                   }
[16:21:17.969]                 }
[16:21:17.969]                 else {
[16:21:17.969]                   if (TRUE) {
[16:21:17.969]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:17.969]                     {
[16:21:17.969]                       inherits <- base::inherits
[16:21:17.969]                       invokeRestart <- base::invokeRestart
[16:21:17.969]                       is.null <- base::is.null
[16:21:17.969]                       muffled <- FALSE
[16:21:17.969]                       if (inherits(cond, "message")) {
[16:21:17.969]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:17.969]                         if (muffled) 
[16:21:17.969]                           invokeRestart("muffleMessage")
[16:21:17.969]                       }
[16:21:17.969]                       else if (inherits(cond, "warning")) {
[16:21:17.969]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:17.969]                         if (muffled) 
[16:21:17.969]                           invokeRestart("muffleWarning")
[16:21:17.969]                       }
[16:21:17.969]                       else if (inherits(cond, "condition")) {
[16:21:17.969]                         if (!is.null(pattern)) {
[16:21:17.969]                           computeRestarts <- base::computeRestarts
[16:21:17.969]                           grepl <- base::grepl
[16:21:17.969]                           restarts <- computeRestarts(cond)
[16:21:17.969]                           for (restart in restarts) {
[16:21:17.969]                             name <- restart$name
[16:21:17.969]                             if (is.null(name)) 
[16:21:17.969]                               next
[16:21:17.969]                             if (!grepl(pattern, name)) 
[16:21:17.969]                               next
[16:21:17.969]                             invokeRestart(restart)
[16:21:17.969]                             muffled <- TRUE
[16:21:17.969]                             break
[16:21:17.969]                           }
[16:21:17.969]                         }
[16:21:17.969]                       }
[16:21:17.969]                       invisible(muffled)
[16:21:17.969]                     }
[16:21:17.969]                     muffleCondition(cond, pattern = "^muffle")
[16:21:17.969]                   }
[16:21:17.969]                 }
[16:21:17.969]             }
[16:21:17.969]         }))
[16:21:17.969]     }, error = function(ex) {
[16:21:17.969]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:17.969]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:17.969]                 ...future.rng), started = ...future.startTime, 
[16:21:17.969]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:17.969]             version = "1.8"), class = "FutureResult")
[16:21:17.969]     }, finally = {
[16:21:17.969]         if (!identical(...future.workdir, getwd())) 
[16:21:17.969]             setwd(...future.workdir)
[16:21:17.969]         {
[16:21:17.969]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:17.969]                 ...future.oldOptions$nwarnings <- NULL
[16:21:17.969]             }
[16:21:17.969]             base::options(...future.oldOptions)
[16:21:17.969]             if (.Platform$OS.type == "windows") {
[16:21:17.969]                 old_names <- names(...future.oldEnvVars)
[16:21:17.969]                 envs <- base::Sys.getenv()
[16:21:17.969]                 names <- names(envs)
[16:21:17.969]                 common <- intersect(names, old_names)
[16:21:17.969]                 added <- setdiff(names, old_names)
[16:21:17.969]                 removed <- setdiff(old_names, names)
[16:21:17.969]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:17.969]                   envs[common]]
[16:21:17.969]                 NAMES <- toupper(changed)
[16:21:17.969]                 args <- list()
[16:21:17.969]                 for (kk in seq_along(NAMES)) {
[16:21:17.969]                   name <- changed[[kk]]
[16:21:17.969]                   NAME <- NAMES[[kk]]
[16:21:17.969]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:17.969]                     next
[16:21:17.969]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:17.969]                 }
[16:21:17.969]                 NAMES <- toupper(added)
[16:21:17.969]                 for (kk in seq_along(NAMES)) {
[16:21:17.969]                   name <- added[[kk]]
[16:21:17.969]                   NAME <- NAMES[[kk]]
[16:21:17.969]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:17.969]                     next
[16:21:17.969]                   args[[name]] <- ""
[16:21:17.969]                 }
[16:21:17.969]                 NAMES <- toupper(removed)
[16:21:17.969]                 for (kk in seq_along(NAMES)) {
[16:21:17.969]                   name <- removed[[kk]]
[16:21:17.969]                   NAME <- NAMES[[kk]]
[16:21:17.969]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:17.969]                     next
[16:21:17.969]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:17.969]                 }
[16:21:17.969]                 if (length(args) > 0) 
[16:21:17.969]                   base::do.call(base::Sys.setenv, args = args)
[16:21:17.969]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:17.969]             }
[16:21:17.969]             else {
[16:21:17.969]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:17.969]             }
[16:21:17.969]             {
[16:21:17.969]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:17.969]                   0L) {
[16:21:17.969]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:17.969]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:17.969]                   base::options(opts)
[16:21:17.969]                 }
[16:21:17.969]                 {
[16:21:17.969]                   {
[16:21:17.969]                     base::options(mc.cores = ...future.mc.cores.old)
[16:21:17.969]                     NULL
[16:21:17.969]                   }
[16:21:17.969]                   options(future.plan = NULL)
[16:21:17.969]                   if (is.na(NA_character_)) 
[16:21:17.969]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:17.969]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:17.969]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:17.969]                     .init = FALSE)
[16:21:17.969]                 }
[16:21:17.969]             }
[16:21:17.969]         }
[16:21:17.969]     })
[16:21:17.969]     if (TRUE) {
[16:21:17.969]         base::sink(type = "output", split = FALSE)
[16:21:17.969]         if (TRUE) {
[16:21:17.969]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:17.969]         }
[16:21:17.969]         else {
[16:21:17.969]             ...future.result["stdout"] <- base::list(NULL)
[16:21:17.969]         }
[16:21:17.969]         base::close(...future.stdout)
[16:21:17.969]         ...future.stdout <- NULL
[16:21:17.969]     }
[16:21:17.969]     ...future.result$conditions <- ...future.conditions
[16:21:17.969]     ...future.result$finished <- base::Sys.time()
[16:21:17.969]     ...future.result
[16:21:17.969] }
[16:21:17.972] MultisessionFuture started
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    stop(structure(list(message = "boom"), class = c("MyError", 
        "error", "condition")))
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[16:21:17.973] receiveMessageFromWorker() for ClusterFuture ...
[16:21:17.974] - Validating connection of MultisessionFuture
[16:21:17.974] - received message: FutureResult
[16:21:17.974] - Received FutureResult
[16:21:17.974] - Erased future from FutureRegistry
[16:21:17.974] result() for ClusterFuture ...
[16:21:17.974] - result already collected: FutureResult
[16:21:17.974] result() for ClusterFuture ... done
[16:21:17.974] signalConditions() ...
[16:21:17.975]  - include = ‘immediateCondition’
[16:21:17.975]  - exclude = 
[16:21:17.975]  - resignal = FALSE
[16:21:17.975]  - Number of conditions: 1
[16:21:17.975] signalConditions() ... done
[16:21:17.975] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 3e579109-592e-0b73-60c9-ee81fb289d87
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:21:17.975] result() for ClusterFuture ...
[16:21:17.975] - result already collected: FutureResult
[16:21:17.975] result() for ClusterFuture ... done
[16:21:17.975] result() for ClusterFuture ...
[16:21:17.976] - result already collected: FutureResult
[16:21:17.976] result() for ClusterFuture ... done
[16:21:17.976] signalConditions() ...
[16:21:17.976]  - include = ‘immediateCondition’
[16:21:17.976]  - exclude = 
[16:21:17.976]  - resignal = FALSE
[16:21:17.976]  - Number of conditions: 1
[16:21:17.976] signalConditions() ... done
<MyError: boom>
[16:21:17.976] result() for ClusterFuture ...
[16:21:17.976] - result already collected: FutureResult
[16:21:17.977] result() for ClusterFuture ... done
[16:21:17.977] result() for ClusterFuture ...
[16:21:17.977] - result already collected: FutureResult
[16:21:17.977] result() for ClusterFuture ... done
[16:21:17.977] signalConditions() ...
[16:21:17.977]  - include = ‘immediateCondition’
[16:21:17.977]  - exclude = 
[16:21:17.977]  - resignal = FALSE
[16:21:17.977]  - Number of conditions: 1
[16:21:17.977] signalConditions() ... done
[16:21:17.977] Future state: ‘finished’
[16:21:17.978] result() for ClusterFuture ...
[16:21:17.978] - result already collected: FutureResult
[16:21:17.978] result() for ClusterFuture ... done
[16:21:17.978] signalConditions() ...
[16:21:17.978]  - include = ‘condition’
[16:21:17.978]  - exclude = ‘immediateCondition’
[16:21:17.978]  - resignal = TRUE
[16:21:17.978]  - Number of conditions: 1
[16:21:17.978]  - Condition #1: ‘MyError’, ‘error’, ‘condition’
[16:21:17.978] signalConditions() ... done
Testing with 2 cores ... DONE
> 
> 
> message("*** multisession() - too large globals ...")
*** multisession() - too large globals ...
> ooptsT <- options(future.globals.maxSize = object.size(1:1014))
> 
> limit <- getOption("future.globals.maxSize")
> cat(sprintf("Max total size of globals: %g bytes\n", limit))
Max total size of globals: 4104 bytes
> 
> for (workers in unique(c(1L, availableCores()))) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   message("Max number of sessions: ", workers)
+ 
+   ## A large object
+   a <- 1:1014
+   yTruth <- sum(a)
+   size <- object.size(a)
+   cat(sprintf("a: %g bytes\n", size))
+   f <- multisession({ sum(a) }, globals = TRUE, workers = workers)
+   print(f)
+   rm(list = "a")
+   v <- value(f)
+   print(v)
+   stopifnot(v == yTruth)
+ 
+ 
+   ## A too large object
+   a <- 1:1015
+   yTruth <- sum(a)
+   size <- object.size(a)
+   cat(sprintf("a: %g bytes\n", size))
+   res <- try(f <- multisession({ sum(a) }, globals = TRUE, workers = workers), silent = TRUE)
+   rm(list = "a")
+   stopifnot(inherits(res, "try-error"))
+ } ## for (workers in ...)
Max number of sessions: 1
a: 4104 bytes
[16:21:17.994] getGlobalsAndPackages() ...
[16:21:17.994] Searching for globals...
[16:21:17.995] - globals found: [3] ‘{’, ‘sum’, ‘a’
[16:21:17.995] Searching for globals ... DONE
[16:21:17.995] Resolving globals: FALSE
[16:21:17.996] The total size of the 1 globals is 4.01 KiB (4104 bytes)
[16:21:17.996] The total size of the 1 globals exported for future expression (‘{; sum(a); }’) is 4.01 KiB.. This exceeds the maximum allowed size of 4.01 KiB (option 'future.globals.maxSize'). There is one global: ‘a’ (4.01 KiB of class ‘numeric’)
[16:21:17.996] - globals: [1] ‘a’
[16:21:17.996] 
[16:21:17.996] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    sum(a)
}
Lazy evaluation: TRUE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 4.01 KiB (integer ‘a’ of 4.01 KiB)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 3e579109-592e-0b73-60c9-ee81fb289d87
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:21:17.997] Packages needed by the future expression (n = 0): <none>
[16:21:17.997] Packages needed by future strategies (n = 0): <none>
[16:21:17.998] {
[16:21:17.998]     {
[16:21:17.998]         {
[16:21:17.998]             ...future.startTime <- base::Sys.time()
[16:21:17.998]             {
[16:21:17.998]                 {
[16:21:17.998]                   {
[16:21:17.998]                     base::local({
[16:21:17.998]                       has_future <- base::requireNamespace("future", 
[16:21:17.998]                         quietly = TRUE)
[16:21:17.998]                       if (has_future) {
[16:21:17.998]                         ns <- base::getNamespace("future")
[16:21:17.998]                         version <- ns[[".package"]][["version"]]
[16:21:17.998]                         if (is.null(version)) 
[16:21:17.998]                           version <- utils::packageVersion("future")
[16:21:17.998]                       }
[16:21:17.998]                       else {
[16:21:17.998]                         version <- NULL
[16:21:17.998]                       }
[16:21:17.998]                       if (!has_future || version < "1.8.0") {
[16:21:17.998]                         info <- base::c(r_version = base::gsub("R version ", 
[16:21:17.998]                           "", base::R.version$version.string), 
[16:21:17.998]                           platform = base::sprintf("%s (%s-bit)", 
[16:21:17.998]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:17.998]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:17.998]                             "release", "version")], collapse = " "), 
[16:21:17.998]                           hostname = base::Sys.info()[["nodename"]])
[16:21:17.998]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:21:17.998]                           info)
[16:21:17.998]                         info <- base::paste(info, collapse = "; ")
[16:21:17.998]                         if (!has_future) {
[16:21:17.998]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:17.998]                             info)
[16:21:17.998]                         }
[16:21:17.998]                         else {
[16:21:17.998]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:17.998]                             info, version)
[16:21:17.998]                         }
[16:21:17.998]                         base::stop(msg)
[16:21:17.998]                       }
[16:21:17.998]                     })
[16:21:17.998]                   }
[16:21:17.998]                   ...future.strategy.old <- future::plan("list")
[16:21:17.998]                   options(future.plan = NULL)
[16:21:17.998]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:17.998]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:17.998]                 }
[16:21:17.998]                 ...future.workdir <- getwd()
[16:21:17.998]             }
[16:21:17.998]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:17.998]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:17.998]         }
[16:21:17.998]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:17.998]             future.globals.maxSize = 4104, future.globals.method = NULL, 
[16:21:17.998]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:17.998]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:17.998]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:17.998]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:17.998]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:17.998]             base::names(...future.oldOptions))
[16:21:17.998]     }
[16:21:17.998]     if (FALSE) {
[16:21:17.998]     }
[16:21:17.998]     else {
[16:21:17.998]         if (TRUE) {
[16:21:17.998]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:17.998]                 open = "w")
[16:21:17.998]         }
[16:21:17.998]         else {
[16:21:17.998]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:17.998]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:17.998]         }
[16:21:17.998]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:17.998]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:17.998]             base::sink(type = "output", split = FALSE)
[16:21:17.998]             base::close(...future.stdout)
[16:21:17.998]         }, add = TRUE)
[16:21:17.998]     }
[16:21:17.998]     ...future.frame <- base::sys.nframe()
[16:21:17.998]     ...future.conditions <- base::list()
[16:21:17.998]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:17.998]     if (FALSE) {
[16:21:17.998]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:17.998]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:17.998]     }
[16:21:17.998]     ...future.result <- base::tryCatch({
[16:21:17.998]         base::withCallingHandlers({
[16:21:17.998]             ...future.value <- base::withVisible(base::local({
[16:21:17.998]                 sum(a)
[16:21:17.998]             }))
[16:21:17.998]             future::FutureResult(value = ...future.value$value, 
[16:21:17.998]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:17.998]                   ...future.rng), globalenv = if (FALSE) 
[16:21:17.998]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:17.998]                     ...future.globalenv.names))
[16:21:17.998]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:17.998]         }, condition = base::local({
[16:21:17.998]             c <- base::c
[16:21:17.998]             inherits <- base::inherits
[16:21:17.998]             invokeRestart <- base::invokeRestart
[16:21:17.998]             length <- base::length
[16:21:17.998]             list <- base::list
[16:21:17.998]             seq.int <- base::seq.int
[16:21:17.998]             signalCondition <- base::signalCondition
[16:21:17.998]             sys.calls <- base::sys.calls
[16:21:17.998]             `[[` <- base::`[[`
[16:21:17.998]             `+` <- base::`+`
[16:21:17.998]             `<<-` <- base::`<<-`
[16:21:17.998]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:17.998]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:17.998]                   3L)]
[16:21:17.998]             }
[16:21:17.998]             function(cond) {
[16:21:17.998]                 is_error <- inherits(cond, "error")
[16:21:17.998]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:17.998]                   NULL)
[16:21:17.998]                 if (is_error) {
[16:21:17.998]                   sessionInformation <- function() {
[16:21:17.998]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:17.998]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:17.998]                       search = base::search(), system = base::Sys.info())
[16:21:17.998]                   }
[16:21:17.998]                   ...future.conditions[[length(...future.conditions) + 
[16:21:17.998]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:17.998]                     cond$call), session = sessionInformation(), 
[16:21:17.998]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:17.998]                   signalCondition(cond)
[16:21:17.998]                 }
[16:21:17.998]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:17.998]                 "immediateCondition"))) {
[16:21:17.998]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:17.998]                   ...future.conditions[[length(...future.conditions) + 
[16:21:17.998]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:17.998]                   if (TRUE && !signal) {
[16:21:17.998]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:17.998]                     {
[16:21:17.998]                       inherits <- base::inherits
[16:21:17.998]                       invokeRestart <- base::invokeRestart
[16:21:17.998]                       is.null <- base::is.null
[16:21:17.998]                       muffled <- FALSE
[16:21:17.998]                       if (inherits(cond, "message")) {
[16:21:17.998]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:17.998]                         if (muffled) 
[16:21:17.998]                           invokeRestart("muffleMessage")
[16:21:17.998]                       }
[16:21:17.998]                       else if (inherits(cond, "warning")) {
[16:21:17.998]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:17.998]                         if (muffled) 
[16:21:17.998]                           invokeRestart("muffleWarning")
[16:21:17.998]                       }
[16:21:17.998]                       else if (inherits(cond, "condition")) {
[16:21:17.998]                         if (!is.null(pattern)) {
[16:21:17.998]                           computeRestarts <- base::computeRestarts
[16:21:17.998]                           grepl <- base::grepl
[16:21:17.998]                           restarts <- computeRestarts(cond)
[16:21:17.998]                           for (restart in restarts) {
[16:21:17.998]                             name <- restart$name
[16:21:17.998]                             if (is.null(name)) 
[16:21:17.998]                               next
[16:21:17.998]                             if (!grepl(pattern, name)) 
[16:21:17.998]                               next
[16:21:17.998]                             invokeRestart(restart)
[16:21:17.998]                             muffled <- TRUE
[16:21:17.998]                             break
[16:21:17.998]                           }
[16:21:17.998]                         }
[16:21:17.998]                       }
[16:21:17.998]                       invisible(muffled)
[16:21:17.998]                     }
[16:21:17.998]                     muffleCondition(cond, pattern = "^muffle")
[16:21:17.998]                   }
[16:21:17.998]                 }
[16:21:17.998]                 else {
[16:21:17.998]                   if (TRUE) {
[16:21:17.998]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:17.998]                     {
[16:21:17.998]                       inherits <- base::inherits
[16:21:17.998]                       invokeRestart <- base::invokeRestart
[16:21:17.998]                       is.null <- base::is.null
[16:21:17.998]                       muffled <- FALSE
[16:21:17.998]                       if (inherits(cond, "message")) {
[16:21:17.998]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:17.998]                         if (muffled) 
[16:21:17.998]                           invokeRestart("muffleMessage")
[16:21:17.998]                       }
[16:21:17.998]                       else if (inherits(cond, "warning")) {
[16:21:17.998]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:17.998]                         if (muffled) 
[16:21:17.998]                           invokeRestart("muffleWarning")
[16:21:17.998]                       }
[16:21:17.998]                       else if (inherits(cond, "condition")) {
[16:21:17.998]                         if (!is.null(pattern)) {
[16:21:17.998]                           computeRestarts <- base::computeRestarts
[16:21:17.998]                           grepl <- base::grepl
[16:21:17.998]                           restarts <- computeRestarts(cond)
[16:21:17.998]                           for (restart in restarts) {
[16:21:17.998]                             name <- restart$name
[16:21:17.998]                             if (is.null(name)) 
[16:21:17.998]                               next
[16:21:17.998]                             if (!grepl(pattern, name)) 
[16:21:17.998]                               next
[16:21:17.998]                             invokeRestart(restart)
[16:21:17.998]                             muffled <- TRUE
[16:21:17.998]                             break
[16:21:17.998]                           }
[16:21:17.998]                         }
[16:21:17.998]                       }
[16:21:17.998]                       invisible(muffled)
[16:21:17.998]                     }
[16:21:17.998]                     muffleCondition(cond, pattern = "^muffle")
[16:21:17.998]                   }
[16:21:17.998]                 }
[16:21:17.998]             }
[16:21:17.998]         }))
[16:21:17.998]     }, error = function(ex) {
[16:21:17.998]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:17.998]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:17.998]                 ...future.rng), started = ...future.startTime, 
[16:21:17.998]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:17.998]             version = "1.8"), class = "FutureResult")
[16:21:17.998]     }, finally = {
[16:21:17.998]         if (!identical(...future.workdir, getwd())) 
[16:21:17.998]             setwd(...future.workdir)
[16:21:17.998]         {
[16:21:17.998]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:17.998]                 ...future.oldOptions$nwarnings <- NULL
[16:21:17.998]             }
[16:21:17.998]             base::options(...future.oldOptions)
[16:21:17.998]             if (.Platform$OS.type == "windows") {
[16:21:17.998]                 old_names <- names(...future.oldEnvVars)
[16:21:17.998]                 envs <- base::Sys.getenv()
[16:21:17.998]                 names <- names(envs)
[16:21:17.998]                 common <- intersect(names, old_names)
[16:21:17.998]                 added <- setdiff(names, old_names)
[16:21:17.998]                 removed <- setdiff(old_names, names)
[16:21:17.998]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:17.998]                   envs[common]]
[16:21:17.998]                 NAMES <- toupper(changed)
[16:21:17.998]                 args <- list()
[16:21:17.998]                 for (kk in seq_along(NAMES)) {
[16:21:17.998]                   name <- changed[[kk]]
[16:21:17.998]                   NAME <- NAMES[[kk]]
[16:21:17.998]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:17.998]                     next
[16:21:17.998]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:17.998]                 }
[16:21:17.998]                 NAMES <- toupper(added)
[16:21:17.998]                 for (kk in seq_along(NAMES)) {
[16:21:17.998]                   name <- added[[kk]]
[16:21:17.998]                   NAME <- NAMES[[kk]]
[16:21:17.998]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:17.998]                     next
[16:21:17.998]                   args[[name]] <- ""
[16:21:17.998]                 }
[16:21:17.998]                 NAMES <- toupper(removed)
[16:21:17.998]                 for (kk in seq_along(NAMES)) {
[16:21:17.998]                   name <- removed[[kk]]
[16:21:17.998]                   NAME <- NAMES[[kk]]
[16:21:17.998]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:17.998]                     next
[16:21:17.998]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:17.998]                 }
[16:21:17.998]                 if (length(args) > 0) 
[16:21:17.998]                   base::do.call(base::Sys.setenv, args = args)
[16:21:17.998]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:17.998]             }
[16:21:17.998]             else {
[16:21:17.998]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:17.998]             }
[16:21:17.998]             {
[16:21:17.998]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:17.998]                   0L) {
[16:21:17.998]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:17.998]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:17.998]                   base::options(opts)
[16:21:17.998]                 }
[16:21:17.998]                 {
[16:21:17.998]                   {
[16:21:17.998]                     NULL
[16:21:17.998]                     RNGkind("Mersenne-Twister")
[16:21:17.998]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:21:17.998]                       inherits = FALSE)
[16:21:17.998]                   }
[16:21:17.998]                   options(future.plan = NULL)
[16:21:17.998]                   if (is.na(NA_character_)) 
[16:21:17.998]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:17.998]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:17.998]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:17.998]                     .init = FALSE)
[16:21:17.998]                 }
[16:21:17.998]             }
[16:21:17.998]         }
[16:21:17.998]     })
[16:21:17.998]     if (TRUE) {
[16:21:17.998]         base::sink(type = "output", split = FALSE)
[16:21:17.998]         if (TRUE) {
[16:21:17.998]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:17.998]         }
[16:21:17.998]         else {
[16:21:17.998]             ...future.result["stdout"] <- base::list(NULL)
[16:21:17.998]         }
[16:21:17.998]         base::close(...future.stdout)
[16:21:17.998]         ...future.stdout <- NULL
[16:21:17.998]     }
[16:21:17.998]     ...future.result$conditions <- ...future.conditions
[16:21:17.998]     ...future.result$finished <- base::Sys.time()
[16:21:17.998]     ...future.result
[16:21:17.998] }
[16:21:17.999] assign_globals() ...
[16:21:17.999] List of 1
[16:21:17.999]  $ a: int [1:1014] 1 2 3 4 5 6 7 8 9 10 ...
[16:21:17.999]  - attr(*, "where")=List of 1
[16:21:17.999]   ..$ a:<environment: R_EmptyEnv> 
[16:21:17.999]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:21:17.999]  - attr(*, "resolved")= logi FALSE
[16:21:17.999]  - attr(*, "total_size")= num 4104
[16:21:18.002] - copied ‘a’ to environment
[16:21:18.002] assign_globals() ... done
[16:21:18.002] plan(): Setting new future strategy stack:
[16:21:18.002] List of future strategies:
[16:21:18.002] 1. sequential:
[16:21:18.002]    - args: function (..., envir = parent.frame())
[16:21:18.002]    - tweaked: FALSE
[16:21:18.002]    - call: NULL
[16:21:18.002] plan(): nbrOfWorkers() = 1
[16:21:18.003] plan(): Setting new future strategy stack:
[16:21:18.003] List of future strategies:
[16:21:18.003] 1. sequential:
[16:21:18.003]    - args: function (..., envir = parent.frame())
[16:21:18.003]    - tweaked: FALSE
[16:21:18.003]    - call: future::plan("sequential")
[16:21:18.004] plan(): nbrOfWorkers() = 1
[16:21:18.004] SequentialFuture started (and completed)
[1] 514605
a: 4112 bytes
[16:21:18.004] getGlobalsAndPackages() ...
[16:21:18.004] Searching for globals...
[16:21:18.005] - globals found: [3] ‘{’, ‘sum’, ‘a’
[16:21:18.005] Searching for globals ... DONE
[16:21:18.005] Resolving globals: FALSE
[16:21:18.006] The total size of the 1 globals is 4.02 KiB (4112 bytes)
[16:21:18.006] The total size of the 1 globals exported for future expression (‘{; sum(a); }’) is 4.02 KiB.. This exceeds the maximum allowed size of 4.01 KiB (option 'future.globals.maxSize'). There is one global: ‘a’ (4.02 KiB of class ‘numeric’)
Max number of sessions: 2
a: 4104 bytes
[16:21:18.006] getGlobalsAndPackages() ...
[16:21:18.006] Searching for globals...
[16:21:18.007] - globals found: [3] ‘{’, ‘sum’, ‘a’
[16:21:18.007] Searching for globals ... DONE
[16:21:18.007] Resolving globals: FALSE
[16:21:18.008] The total size of the 1 globals is 4.01 KiB (4104 bytes)
[16:21:18.008] The total size of the 1 globals exported for future expression (‘{; sum(a); }’) is 4.01 KiB.. This exceeds the maximum allowed size of 4.01 KiB (option 'future.globals.maxSize'). There is one global: ‘a’ (4.01 KiB of class ‘numeric’)
[16:21:18.008] - globals: [1] ‘a’
[16:21:18.008] 
[16:21:18.008] getGlobalsAndPackages() ... DONE
[16:21:18.019] Packages needed by the future expression (n = 0): <none>
[16:21:18.019] Packages needed by future strategies (n = 0): <none>
[16:21:18.019] {
[16:21:18.019]     {
[16:21:18.019]         {
[16:21:18.019]             ...future.startTime <- base::Sys.time()
[16:21:18.019]             {
[16:21:18.019]                 {
[16:21:18.019]                   {
[16:21:18.019]                     {
[16:21:18.019]                       base::local({
[16:21:18.019]                         has_future <- base::requireNamespace("future", 
[16:21:18.019]                           quietly = TRUE)
[16:21:18.019]                         if (has_future) {
[16:21:18.019]                           ns <- base::getNamespace("future")
[16:21:18.019]                           version <- ns[[".package"]][["version"]]
[16:21:18.019]                           if (is.null(version)) 
[16:21:18.019]                             version <- utils::packageVersion("future")
[16:21:18.019]                         }
[16:21:18.019]                         else {
[16:21:18.019]                           version <- NULL
[16:21:18.019]                         }
[16:21:18.019]                         if (!has_future || version < "1.8.0") {
[16:21:18.019]                           info <- base::c(r_version = base::gsub("R version ", 
[16:21:18.019]                             "", base::R.version$version.string), 
[16:21:18.019]                             platform = base::sprintf("%s (%s-bit)", 
[16:21:18.019]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:18.019]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:18.019]                               "release", "version")], collapse = " "), 
[16:21:18.019]                             hostname = base::Sys.info()[["nodename"]])
[16:21:18.019]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:21:18.019]                             info)
[16:21:18.019]                           info <- base::paste(info, collapse = "; ")
[16:21:18.019]                           if (!has_future) {
[16:21:18.019]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:18.019]                               info)
[16:21:18.019]                           }
[16:21:18.019]                           else {
[16:21:18.019]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:18.019]                               info, version)
[16:21:18.019]                           }
[16:21:18.019]                           base::stop(msg)
[16:21:18.019]                         }
[16:21:18.019]                       })
[16:21:18.019]                     }
[16:21:18.019]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:21:18.019]                     base::options(mc.cores = 1L)
[16:21:18.019]                   }
[16:21:18.019]                   ...future.strategy.old <- future::plan("list")
[16:21:18.019]                   options(future.plan = NULL)
[16:21:18.019]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:18.019]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:18.019]                 }
[16:21:18.019]                 ...future.workdir <- getwd()
[16:21:18.019]             }
[16:21:18.019]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:18.019]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:18.019]         }
[16:21:18.019]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:18.019]             future.globals.maxSize = 4104, future.globals.method = NULL, 
[16:21:18.019]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:18.019]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:18.019]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:18.019]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:18.019]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:18.019]             base::names(...future.oldOptions))
[16:21:18.019]     }
[16:21:18.019]     if (FALSE) {
[16:21:18.019]     }
[16:21:18.019]     else {
[16:21:18.019]         if (TRUE) {
[16:21:18.019]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:18.019]                 open = "w")
[16:21:18.019]         }
[16:21:18.019]         else {
[16:21:18.019]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:18.019]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:18.019]         }
[16:21:18.019]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:18.019]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:18.019]             base::sink(type = "output", split = FALSE)
[16:21:18.019]             base::close(...future.stdout)
[16:21:18.019]         }, add = TRUE)
[16:21:18.019]     }
[16:21:18.019]     ...future.frame <- base::sys.nframe()
[16:21:18.019]     ...future.conditions <- base::list()
[16:21:18.019]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:18.019]     if (FALSE) {
[16:21:18.019]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:18.019]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:18.019]     }
[16:21:18.019]     ...future.result <- base::tryCatch({
[16:21:18.019]         base::withCallingHandlers({
[16:21:18.019]             ...future.value <- base::withVisible(base::local({
[16:21:18.019]                 ...future.makeSendCondition <- base::local({
[16:21:18.019]                   sendCondition <- NULL
[16:21:18.019]                   function(frame = 1L) {
[16:21:18.019]                     if (is.function(sendCondition)) 
[16:21:18.019]                       return(sendCondition)
[16:21:18.019]                     ns <- getNamespace("parallel")
[16:21:18.019]                     if (exists("sendData", mode = "function", 
[16:21:18.019]                       envir = ns)) {
[16:21:18.019]                       parallel_sendData <- get("sendData", mode = "function", 
[16:21:18.019]                         envir = ns)
[16:21:18.019]                       envir <- sys.frame(frame)
[16:21:18.019]                       master <- NULL
[16:21:18.019]                       while (!identical(envir, .GlobalEnv) && 
[16:21:18.019]                         !identical(envir, emptyenv())) {
[16:21:18.019]                         if (exists("master", mode = "list", envir = envir, 
[16:21:18.019]                           inherits = FALSE)) {
[16:21:18.019]                           master <- get("master", mode = "list", 
[16:21:18.019]                             envir = envir, inherits = FALSE)
[16:21:18.019]                           if (inherits(master, c("SOCKnode", 
[16:21:18.019]                             "SOCK0node"))) {
[16:21:18.019]                             sendCondition <<- function(cond) {
[16:21:18.019]                               data <- list(type = "VALUE", value = cond, 
[16:21:18.019]                                 success = TRUE)
[16:21:18.019]                               parallel_sendData(master, data)
[16:21:18.019]                             }
[16:21:18.019]                             return(sendCondition)
[16:21:18.019]                           }
[16:21:18.019]                         }
[16:21:18.019]                         frame <- frame + 1L
[16:21:18.019]                         envir <- sys.frame(frame)
[16:21:18.019]                       }
[16:21:18.019]                     }
[16:21:18.019]                     sendCondition <<- function(cond) NULL
[16:21:18.019]                   }
[16:21:18.019]                 })
[16:21:18.019]                 withCallingHandlers({
[16:21:18.019]                   {
[16:21:18.019]                     sum(a)
[16:21:18.019]                   }
[16:21:18.019]                 }, immediateCondition = function(cond) {
[16:21:18.019]                   sendCondition <- ...future.makeSendCondition()
[16:21:18.019]                   sendCondition(cond)
[16:21:18.019]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:18.019]                   {
[16:21:18.019]                     inherits <- base::inherits
[16:21:18.019]                     invokeRestart <- base::invokeRestart
[16:21:18.019]                     is.null <- base::is.null
[16:21:18.019]                     muffled <- FALSE
[16:21:18.019]                     if (inherits(cond, "message")) {
[16:21:18.019]                       muffled <- grepl(pattern, "muffleMessage")
[16:21:18.019]                       if (muffled) 
[16:21:18.019]                         invokeRestart("muffleMessage")
[16:21:18.019]                     }
[16:21:18.019]                     else if (inherits(cond, "warning")) {
[16:21:18.019]                       muffled <- grepl(pattern, "muffleWarning")
[16:21:18.019]                       if (muffled) 
[16:21:18.019]                         invokeRestart("muffleWarning")
[16:21:18.019]                     }
[16:21:18.019]                     else if (inherits(cond, "condition")) {
[16:21:18.019]                       if (!is.null(pattern)) {
[16:21:18.019]                         computeRestarts <- base::computeRestarts
[16:21:18.019]                         grepl <- base::grepl
[16:21:18.019]                         restarts <- computeRestarts(cond)
[16:21:18.019]                         for (restart in restarts) {
[16:21:18.019]                           name <- restart$name
[16:21:18.019]                           if (is.null(name)) 
[16:21:18.019]                             next
[16:21:18.019]                           if (!grepl(pattern, name)) 
[16:21:18.019]                             next
[16:21:18.019]                           invokeRestart(restart)
[16:21:18.019]                           muffled <- TRUE
[16:21:18.019]                           break
[16:21:18.019]                         }
[16:21:18.019]                       }
[16:21:18.019]                     }
[16:21:18.019]                     invisible(muffled)
[16:21:18.019]                   }
[16:21:18.019]                   muffleCondition(cond)
[16:21:18.019]                 })
[16:21:18.019]             }))
[16:21:18.019]             future::FutureResult(value = ...future.value$value, 
[16:21:18.019]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:18.019]                   ...future.rng), globalenv = if (FALSE) 
[16:21:18.019]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:18.019]                     ...future.globalenv.names))
[16:21:18.019]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:18.019]         }, condition = base::local({
[16:21:18.019]             c <- base::c
[16:21:18.019]             inherits <- base::inherits
[16:21:18.019]             invokeRestart <- base::invokeRestart
[16:21:18.019]             length <- base::length
[16:21:18.019]             list <- base::list
[16:21:18.019]             seq.int <- base::seq.int
[16:21:18.019]             signalCondition <- base::signalCondition
[16:21:18.019]             sys.calls <- base::sys.calls
[16:21:18.019]             `[[` <- base::`[[`
[16:21:18.019]             `+` <- base::`+`
[16:21:18.019]             `<<-` <- base::`<<-`
[16:21:18.019]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:18.019]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:18.019]                   3L)]
[16:21:18.019]             }
[16:21:18.019]             function(cond) {
[16:21:18.019]                 is_error <- inherits(cond, "error")
[16:21:18.019]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:18.019]                   NULL)
[16:21:18.019]                 if (is_error) {
[16:21:18.019]                   sessionInformation <- function() {
[16:21:18.019]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:18.019]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:18.019]                       search = base::search(), system = base::Sys.info())
[16:21:18.019]                   }
[16:21:18.019]                   ...future.conditions[[length(...future.conditions) + 
[16:21:18.019]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:18.019]                     cond$call), session = sessionInformation(), 
[16:21:18.019]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:18.019]                   signalCondition(cond)
[16:21:18.019]                 }
[16:21:18.019]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:18.019]                 "immediateCondition"))) {
[16:21:18.019]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:18.019]                   ...future.conditions[[length(...future.conditions) + 
[16:21:18.019]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:18.019]                   if (TRUE && !signal) {
[16:21:18.019]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:18.019]                     {
[16:21:18.019]                       inherits <- base::inherits
[16:21:18.019]                       invokeRestart <- base::invokeRestart
[16:21:18.019]                       is.null <- base::is.null
[16:21:18.019]                       muffled <- FALSE
[16:21:18.019]                       if (inherits(cond, "message")) {
[16:21:18.019]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:18.019]                         if (muffled) 
[16:21:18.019]                           invokeRestart("muffleMessage")
[16:21:18.019]                       }
[16:21:18.019]                       else if (inherits(cond, "warning")) {
[16:21:18.019]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:18.019]                         if (muffled) 
[16:21:18.019]                           invokeRestart("muffleWarning")
[16:21:18.019]                       }
[16:21:18.019]                       else if (inherits(cond, "condition")) {
[16:21:18.019]                         if (!is.null(pattern)) {
[16:21:18.019]                           computeRestarts <- base::computeRestarts
[16:21:18.019]                           grepl <- base::grepl
[16:21:18.019]                           restarts <- computeRestarts(cond)
[16:21:18.019]                           for (restart in restarts) {
[16:21:18.019]                             name <- restart$name
[16:21:18.019]                             if (is.null(name)) 
[16:21:18.019]                               next
[16:21:18.019]                             if (!grepl(pattern, name)) 
[16:21:18.019]                               next
[16:21:18.019]                             invokeRestart(restart)
[16:21:18.019]                             muffled <- TRUE
[16:21:18.019]                             break
[16:21:18.019]                           }
[16:21:18.019]                         }
[16:21:18.019]                       }
[16:21:18.019]                       invisible(muffled)
[16:21:18.019]                     }
[16:21:18.019]                     muffleCondition(cond, pattern = "^muffle")
[16:21:18.019]                   }
[16:21:18.019]                 }
[16:21:18.019]                 else {
[16:21:18.019]                   if (TRUE) {
[16:21:18.019]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:18.019]                     {
[16:21:18.019]                       inherits <- base::inherits
[16:21:18.019]                       invokeRestart <- base::invokeRestart
[16:21:18.019]                       is.null <- base::is.null
[16:21:18.019]                       muffled <- FALSE
[16:21:18.019]                       if (inherits(cond, "message")) {
[16:21:18.019]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:18.019]                         if (muffled) 
[16:21:18.019]                           invokeRestart("muffleMessage")
[16:21:18.019]                       }
[16:21:18.019]                       else if (inherits(cond, "warning")) {
[16:21:18.019]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:18.019]                         if (muffled) 
[16:21:18.019]                           invokeRestart("muffleWarning")
[16:21:18.019]                       }
[16:21:18.019]                       else if (inherits(cond, "condition")) {
[16:21:18.019]                         if (!is.null(pattern)) {
[16:21:18.019]                           computeRestarts <- base::computeRestarts
[16:21:18.019]                           grepl <- base::grepl
[16:21:18.019]                           restarts <- computeRestarts(cond)
[16:21:18.019]                           for (restart in restarts) {
[16:21:18.019]                             name <- restart$name
[16:21:18.019]                             if (is.null(name)) 
[16:21:18.019]                               next
[16:21:18.019]                             if (!grepl(pattern, name)) 
[16:21:18.019]                               next
[16:21:18.019]                             invokeRestart(restart)
[16:21:18.019]                             muffled <- TRUE
[16:21:18.019]                             break
[16:21:18.019]                           }
[16:21:18.019]                         }
[16:21:18.019]                       }
[16:21:18.019]                       invisible(muffled)
[16:21:18.019]                     }
[16:21:18.019]                     muffleCondition(cond, pattern = "^muffle")
[16:21:18.019]                   }
[16:21:18.019]                 }
[16:21:18.019]             }
[16:21:18.019]         }))
[16:21:18.019]     }, error = function(ex) {
[16:21:18.019]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:18.019]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:18.019]                 ...future.rng), started = ...future.startTime, 
[16:21:18.019]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:18.019]             version = "1.8"), class = "FutureResult")
[16:21:18.019]     }, finally = {
[16:21:18.019]         if (!identical(...future.workdir, getwd())) 
[16:21:18.019]             setwd(...future.workdir)
[16:21:18.019]         {
[16:21:18.019]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:18.019]                 ...future.oldOptions$nwarnings <- NULL
[16:21:18.019]             }
[16:21:18.019]             base::options(...future.oldOptions)
[16:21:18.019]             if (.Platform$OS.type == "windows") {
[16:21:18.019]                 old_names <- names(...future.oldEnvVars)
[16:21:18.019]                 envs <- base::Sys.getenv()
[16:21:18.019]                 names <- names(envs)
[16:21:18.019]                 common <- intersect(names, old_names)
[16:21:18.019]                 added <- setdiff(names, old_names)
[16:21:18.019]                 removed <- setdiff(old_names, names)
[16:21:18.019]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:18.019]                   envs[common]]
[16:21:18.019]                 NAMES <- toupper(changed)
[16:21:18.019]                 args <- list()
[16:21:18.019]                 for (kk in seq_along(NAMES)) {
[16:21:18.019]                   name <- changed[[kk]]
[16:21:18.019]                   NAME <- NAMES[[kk]]
[16:21:18.019]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:18.019]                     next
[16:21:18.019]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:18.019]                 }
[16:21:18.019]                 NAMES <- toupper(added)
[16:21:18.019]                 for (kk in seq_along(NAMES)) {
[16:21:18.019]                   name <- added[[kk]]
[16:21:18.019]                   NAME <- NAMES[[kk]]
[16:21:18.019]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:18.019]                     next
[16:21:18.019]                   args[[name]] <- ""
[16:21:18.019]                 }
[16:21:18.019]                 NAMES <- toupper(removed)
[16:21:18.019]                 for (kk in seq_along(NAMES)) {
[16:21:18.019]                   name <- removed[[kk]]
[16:21:18.019]                   NAME <- NAMES[[kk]]
[16:21:18.019]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:18.019]                     next
[16:21:18.019]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:18.019]                 }
[16:21:18.019]                 if (length(args) > 0) 
[16:21:18.019]                   base::do.call(base::Sys.setenv, args = args)
[16:21:18.019]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:18.019]             }
[16:21:18.019]             else {
[16:21:18.019]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:18.019]             }
[16:21:18.019]             {
[16:21:18.019]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:18.019]                   0L) {
[16:21:18.019]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:18.019]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:18.019]                   base::options(opts)
[16:21:18.019]                 }
[16:21:18.019]                 {
[16:21:18.019]                   {
[16:21:18.019]                     base::options(mc.cores = ...future.mc.cores.old)
[16:21:18.019]                     NULL
[16:21:18.019]                   }
[16:21:18.019]                   options(future.plan = NULL)
[16:21:18.019]                   if (is.na(NA_character_)) 
[16:21:18.019]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:18.019]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:18.019]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:18.019]                     .init = FALSE)
[16:21:18.019]                 }
[16:21:18.019]             }
[16:21:18.019]         }
[16:21:18.019]     })
[16:21:18.019]     if (TRUE) {
[16:21:18.019]         base::sink(type = "output", split = FALSE)
[16:21:18.019]         if (TRUE) {
[16:21:18.019]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:18.019]         }
[16:21:18.019]         else {
[16:21:18.019]             ...future.result["stdout"] <- base::list(NULL)
[16:21:18.019]         }
[16:21:18.019]         base::close(...future.stdout)
[16:21:18.019]         ...future.stdout <- NULL
[16:21:18.019]     }
[16:21:18.019]     ...future.result$conditions <- ...future.conditions
[16:21:18.019]     ...future.result$finished <- base::Sys.time()
[16:21:18.019]     ...future.result
[16:21:18.019] }
[16:21:18.022] Exporting 1 global objects (4.01 KiB) to cluster node #1 ...
[16:21:18.022] Exporting ‘a’ (4.01 KiB) to cluster node #1 ...
[16:21:18.022] Exporting ‘a’ (4.01 KiB) to cluster node #1 ... DONE
[16:21:18.022] Exporting 1 global objects (4.01 KiB) to cluster node #1 ... DONE
[16:21:18.023] MultisessionFuture started
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    sum(a)
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 4.01 KiB (integer ‘a’ of 4.01 KiB)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[16:21:18.024] receiveMessageFromWorker() for ClusterFuture ...
[16:21:18.024] - Validating connection of MultisessionFuture
[16:21:18.025] - received message: FutureResult
[16:21:18.025] - Received FutureResult
[16:21:18.025] - Erased future from FutureRegistry
[16:21:18.025] result() for ClusterFuture ...
[16:21:18.025] - result already collected: FutureResult
[16:21:18.025] result() for ClusterFuture ... done
[16:21:18.025] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 3e579109-592e-0b73-60c9-ee81fb289d87
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:21:18.025] result() for ClusterFuture ...
[16:21:18.025] - result already collected: FutureResult
[16:21:18.026] result() for ClusterFuture ... done
[16:21:18.026] result() for ClusterFuture ...
[16:21:18.026] - result already collected: FutureResult
[16:21:18.026] result() for ClusterFuture ... done
[1] 514605
a: 4112 bytes
[16:21:18.026] getGlobalsAndPackages() ...
[16:21:18.026] Searching for globals...
[16:21:18.027] - globals found: [3] ‘{’, ‘sum’, ‘a’
[16:21:18.027] Searching for globals ... DONE
[16:21:18.027] Resolving globals: FALSE
[16:21:18.027] The total size of the 1 globals is 4.02 KiB (4112 bytes)
[16:21:18.028] The total size of the 1 globals exported for future expression (‘{; sum(a); }’) is 4.02 KiB.. This exceeds the maximum allowed size of 4.01 KiB (option 'future.globals.maxSize'). There is one global: ‘a’ (4.02 KiB of class ‘numeric’)
> 
> ## Undo options changed in this test
> options(ooptsT)
> 
> message("*** multisession() - too large globals ... DONE")
*** multisession() - too large globals ... DONE
> 
> message("*** multisession(..., workers = 1L) ...")
*** multisession(..., workers = 1L) ...
> 
> a <- 2
> b <- 3
> yTruth <- a * b
> 
> f <- multisession({ a * b }, globals = TRUE, workers = 1L)
[16:21:18.028] getGlobalsAndPackages() ...
[16:21:18.028] Searching for globals...
[16:21:18.029] - globals found: [4] ‘{’, ‘*’, ‘a’, ‘b’
[16:21:18.029] Searching for globals ... DONE
[16:21:18.029] Resolving globals: FALSE
[16:21:18.030] The total size of the 2 globals is 112 bytes (112 bytes)
[16:21:18.030] The total size of the 2 globals exported for future expression (‘{; a * b; }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘a’ (56 bytes of class ‘numeric’) and ‘b’ (56 bytes of class ‘numeric’)
[16:21:18.030] - globals: [2] ‘a’, ‘b’
[16:21:18.030] 
[16:21:18.030] getGlobalsAndPackages() ... DONE
> rm(list = c("a", "b"))
> 
> v <- value(f)
[16:21:18.031] Packages needed by the future expression (n = 0): <none>
[16:21:18.031] Packages needed by future strategies (n = 0): <none>
[16:21:18.031] {
[16:21:18.031]     {
[16:21:18.031]         {
[16:21:18.031]             ...future.startTime <- base::Sys.time()
[16:21:18.031]             {
[16:21:18.031]                 {
[16:21:18.031]                   {
[16:21:18.031]                     base::local({
[16:21:18.031]                       has_future <- base::requireNamespace("future", 
[16:21:18.031]                         quietly = TRUE)
[16:21:18.031]                       if (has_future) {
[16:21:18.031]                         ns <- base::getNamespace("future")
[16:21:18.031]                         version <- ns[[".package"]][["version"]]
[16:21:18.031]                         if (is.null(version)) 
[16:21:18.031]                           version <- utils::packageVersion("future")
[16:21:18.031]                       }
[16:21:18.031]                       else {
[16:21:18.031]                         version <- NULL
[16:21:18.031]                       }
[16:21:18.031]                       if (!has_future || version < "1.8.0") {
[16:21:18.031]                         info <- base::c(r_version = base::gsub("R version ", 
[16:21:18.031]                           "", base::R.version$version.string), 
[16:21:18.031]                           platform = base::sprintf("%s (%s-bit)", 
[16:21:18.031]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:18.031]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:18.031]                             "release", "version")], collapse = " "), 
[16:21:18.031]                           hostname = base::Sys.info()[["nodename"]])
[16:21:18.031]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:21:18.031]                           info)
[16:21:18.031]                         info <- base::paste(info, collapse = "; ")
[16:21:18.031]                         if (!has_future) {
[16:21:18.031]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:18.031]                             info)
[16:21:18.031]                         }
[16:21:18.031]                         else {
[16:21:18.031]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:18.031]                             info, version)
[16:21:18.031]                         }
[16:21:18.031]                         base::stop(msg)
[16:21:18.031]                       }
[16:21:18.031]                     })
[16:21:18.031]                   }
[16:21:18.031]                   ...future.strategy.old <- future::plan("list")
[16:21:18.031]                   options(future.plan = NULL)
[16:21:18.031]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:18.031]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:18.031]                 }
[16:21:18.031]                 ...future.workdir <- getwd()
[16:21:18.031]             }
[16:21:18.031]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:18.031]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:18.031]         }
[16:21:18.031]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:18.031]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:18.031]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:18.031]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:18.031]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:18.031]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:18.031]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:18.031]             base::names(...future.oldOptions))
[16:21:18.031]     }
[16:21:18.031]     if (FALSE) {
[16:21:18.031]     }
[16:21:18.031]     else {
[16:21:18.031]         if (TRUE) {
[16:21:18.031]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:18.031]                 open = "w")
[16:21:18.031]         }
[16:21:18.031]         else {
[16:21:18.031]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:18.031]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:18.031]         }
[16:21:18.031]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:18.031]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:18.031]             base::sink(type = "output", split = FALSE)
[16:21:18.031]             base::close(...future.stdout)
[16:21:18.031]         }, add = TRUE)
[16:21:18.031]     }
[16:21:18.031]     ...future.frame <- base::sys.nframe()
[16:21:18.031]     ...future.conditions <- base::list()
[16:21:18.031]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:18.031]     if (FALSE) {
[16:21:18.031]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:18.031]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:18.031]     }
[16:21:18.031]     ...future.result <- base::tryCatch({
[16:21:18.031]         base::withCallingHandlers({
[16:21:18.031]             ...future.value <- base::withVisible(base::local({
[16:21:18.031]                 a * b
[16:21:18.031]             }))
[16:21:18.031]             future::FutureResult(value = ...future.value$value, 
[16:21:18.031]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:18.031]                   ...future.rng), globalenv = if (FALSE) 
[16:21:18.031]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:18.031]                     ...future.globalenv.names))
[16:21:18.031]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:18.031]         }, condition = base::local({
[16:21:18.031]             c <- base::c
[16:21:18.031]             inherits <- base::inherits
[16:21:18.031]             invokeRestart <- base::invokeRestart
[16:21:18.031]             length <- base::length
[16:21:18.031]             list <- base::list
[16:21:18.031]             seq.int <- base::seq.int
[16:21:18.031]             signalCondition <- base::signalCondition
[16:21:18.031]             sys.calls <- base::sys.calls
[16:21:18.031]             `[[` <- base::`[[`
[16:21:18.031]             `+` <- base::`+`
[16:21:18.031]             `<<-` <- base::`<<-`
[16:21:18.031]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:18.031]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:18.031]                   3L)]
[16:21:18.031]             }
[16:21:18.031]             function(cond) {
[16:21:18.031]                 is_error <- inherits(cond, "error")
[16:21:18.031]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:18.031]                   NULL)
[16:21:18.031]                 if (is_error) {
[16:21:18.031]                   sessionInformation <- function() {
[16:21:18.031]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:18.031]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:18.031]                       search = base::search(), system = base::Sys.info())
[16:21:18.031]                   }
[16:21:18.031]                   ...future.conditions[[length(...future.conditions) + 
[16:21:18.031]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:18.031]                     cond$call), session = sessionInformation(), 
[16:21:18.031]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:18.031]                   signalCondition(cond)
[16:21:18.031]                 }
[16:21:18.031]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:18.031]                 "immediateCondition"))) {
[16:21:18.031]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:18.031]                   ...future.conditions[[length(...future.conditions) + 
[16:21:18.031]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:18.031]                   if (TRUE && !signal) {
[16:21:18.031]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:18.031]                     {
[16:21:18.031]                       inherits <- base::inherits
[16:21:18.031]                       invokeRestart <- base::invokeRestart
[16:21:18.031]                       is.null <- base::is.null
[16:21:18.031]                       muffled <- FALSE
[16:21:18.031]                       if (inherits(cond, "message")) {
[16:21:18.031]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:18.031]                         if (muffled) 
[16:21:18.031]                           invokeRestart("muffleMessage")
[16:21:18.031]                       }
[16:21:18.031]                       else if (inherits(cond, "warning")) {
[16:21:18.031]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:18.031]                         if (muffled) 
[16:21:18.031]                           invokeRestart("muffleWarning")
[16:21:18.031]                       }
[16:21:18.031]                       else if (inherits(cond, "condition")) {
[16:21:18.031]                         if (!is.null(pattern)) {
[16:21:18.031]                           computeRestarts <- base::computeRestarts
[16:21:18.031]                           grepl <- base::grepl
[16:21:18.031]                           restarts <- computeRestarts(cond)
[16:21:18.031]                           for (restart in restarts) {
[16:21:18.031]                             name <- restart$name
[16:21:18.031]                             if (is.null(name)) 
[16:21:18.031]                               next
[16:21:18.031]                             if (!grepl(pattern, name)) 
[16:21:18.031]                               next
[16:21:18.031]                             invokeRestart(restart)
[16:21:18.031]                             muffled <- TRUE
[16:21:18.031]                             break
[16:21:18.031]                           }
[16:21:18.031]                         }
[16:21:18.031]                       }
[16:21:18.031]                       invisible(muffled)
[16:21:18.031]                     }
[16:21:18.031]                     muffleCondition(cond, pattern = "^muffle")
[16:21:18.031]                   }
[16:21:18.031]                 }
[16:21:18.031]                 else {
[16:21:18.031]                   if (TRUE) {
[16:21:18.031]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:18.031]                     {
[16:21:18.031]                       inherits <- base::inherits
[16:21:18.031]                       invokeRestart <- base::invokeRestart
[16:21:18.031]                       is.null <- base::is.null
[16:21:18.031]                       muffled <- FALSE
[16:21:18.031]                       if (inherits(cond, "message")) {
[16:21:18.031]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:18.031]                         if (muffled) 
[16:21:18.031]                           invokeRestart("muffleMessage")
[16:21:18.031]                       }
[16:21:18.031]                       else if (inherits(cond, "warning")) {
[16:21:18.031]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:18.031]                         if (muffled) 
[16:21:18.031]                           invokeRestart("muffleWarning")
[16:21:18.031]                       }
[16:21:18.031]                       else if (inherits(cond, "condition")) {
[16:21:18.031]                         if (!is.null(pattern)) {
[16:21:18.031]                           computeRestarts <- base::computeRestarts
[16:21:18.031]                           grepl <- base::grepl
[16:21:18.031]                           restarts <- computeRestarts(cond)
[16:21:18.031]                           for (restart in restarts) {
[16:21:18.031]                             name <- restart$name
[16:21:18.031]                             if (is.null(name)) 
[16:21:18.031]                               next
[16:21:18.031]                             if (!grepl(pattern, name)) 
[16:21:18.031]                               next
[16:21:18.031]                             invokeRestart(restart)
[16:21:18.031]                             muffled <- TRUE
[16:21:18.031]                             break
[16:21:18.031]                           }
[16:21:18.031]                         }
[16:21:18.031]                       }
[16:21:18.031]                       invisible(muffled)
[16:21:18.031]                     }
[16:21:18.031]                     muffleCondition(cond, pattern = "^muffle")
[16:21:18.031]                   }
[16:21:18.031]                 }
[16:21:18.031]             }
[16:21:18.031]         }))
[16:21:18.031]     }, error = function(ex) {
[16:21:18.031]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:18.031]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:18.031]                 ...future.rng), started = ...future.startTime, 
[16:21:18.031]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:18.031]             version = "1.8"), class = "FutureResult")
[16:21:18.031]     }, finally = {
[16:21:18.031]         if (!identical(...future.workdir, getwd())) 
[16:21:18.031]             setwd(...future.workdir)
[16:21:18.031]         {
[16:21:18.031]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:18.031]                 ...future.oldOptions$nwarnings <- NULL
[16:21:18.031]             }
[16:21:18.031]             base::options(...future.oldOptions)
[16:21:18.031]             if (.Platform$OS.type == "windows") {
[16:21:18.031]                 old_names <- names(...future.oldEnvVars)
[16:21:18.031]                 envs <- base::Sys.getenv()
[16:21:18.031]                 names <- names(envs)
[16:21:18.031]                 common <- intersect(names, old_names)
[16:21:18.031]                 added <- setdiff(names, old_names)
[16:21:18.031]                 removed <- setdiff(old_names, names)
[16:21:18.031]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:18.031]                   envs[common]]
[16:21:18.031]                 NAMES <- toupper(changed)
[16:21:18.031]                 args <- list()
[16:21:18.031]                 for (kk in seq_along(NAMES)) {
[16:21:18.031]                   name <- changed[[kk]]
[16:21:18.031]                   NAME <- NAMES[[kk]]
[16:21:18.031]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:18.031]                     next
[16:21:18.031]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:18.031]                 }
[16:21:18.031]                 NAMES <- toupper(added)
[16:21:18.031]                 for (kk in seq_along(NAMES)) {
[16:21:18.031]                   name <- added[[kk]]
[16:21:18.031]                   NAME <- NAMES[[kk]]
[16:21:18.031]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:18.031]                     next
[16:21:18.031]                   args[[name]] <- ""
[16:21:18.031]                 }
[16:21:18.031]                 NAMES <- toupper(removed)
[16:21:18.031]                 for (kk in seq_along(NAMES)) {
[16:21:18.031]                   name <- removed[[kk]]
[16:21:18.031]                   NAME <- NAMES[[kk]]
[16:21:18.031]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:18.031]                     next
[16:21:18.031]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:18.031]                 }
[16:21:18.031]                 if (length(args) > 0) 
[16:21:18.031]                   base::do.call(base::Sys.setenv, args = args)
[16:21:18.031]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:18.031]             }
[16:21:18.031]             else {
[16:21:18.031]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:18.031]             }
[16:21:18.031]             {
[16:21:18.031]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:18.031]                   0L) {
[16:21:18.031]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:18.031]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:18.031]                   base::options(opts)
[16:21:18.031]                 }
[16:21:18.031]                 {
[16:21:18.031]                   {
[16:21:18.031]                     NULL
[16:21:18.031]                     RNGkind("Mersenne-Twister")
[16:21:18.031]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:21:18.031]                       inherits = FALSE)
[16:21:18.031]                   }
[16:21:18.031]                   options(future.plan = NULL)
[16:21:18.031]                   if (is.na(NA_character_)) 
[16:21:18.031]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:18.031]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:18.031]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:18.031]                     .init = FALSE)
[16:21:18.031]                 }
[16:21:18.031]             }
[16:21:18.031]         }
[16:21:18.031]     })
[16:21:18.031]     if (TRUE) {
[16:21:18.031]         base::sink(type = "output", split = FALSE)
[16:21:18.031]         if (TRUE) {
[16:21:18.031]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:18.031]         }
[16:21:18.031]         else {
[16:21:18.031]             ...future.result["stdout"] <- base::list(NULL)
[16:21:18.031]         }
[16:21:18.031]         base::close(...future.stdout)
[16:21:18.031]         ...future.stdout <- NULL
[16:21:18.031]     }
[16:21:18.031]     ...future.result$conditions <- ...future.conditions
[16:21:18.031]     ...future.result$finished <- base::Sys.time()
[16:21:18.031]     ...future.result
[16:21:18.031] }
[16:21:18.033] assign_globals() ...
[16:21:18.035] List of 2
[16:21:18.035]  $ a: num 2
[16:21:18.035]  $ b: num 3
[16:21:18.035]  - attr(*, "where")=List of 2
[16:21:18.035]   ..$ a:<environment: R_EmptyEnv> 
[16:21:18.035]   ..$ b:<environment: R_EmptyEnv> 
[16:21:18.035]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:21:18.035]  - attr(*, "resolved")= logi FALSE
[16:21:18.035]  - attr(*, "total_size")= num 112
[16:21:18.037] - copied ‘a’ to environment
[16:21:18.038] - copied ‘b’ to environment
[16:21:18.038] assign_globals() ... done
[16:21:18.038] plan(): Setting new future strategy stack:
[16:21:18.038] List of future strategies:
[16:21:18.038] 1. sequential:
[16:21:18.038]    - args: function (..., envir = parent.frame())
[16:21:18.038]    - tweaked: FALSE
[16:21:18.038]    - call: NULL
[16:21:18.038] plan(): nbrOfWorkers() = 1
[16:21:18.039] plan(): Setting new future strategy stack:
[16:21:18.039] List of future strategies:
[16:21:18.039] 1. sequential:
[16:21:18.039]    - args: function (..., envir = parent.frame())
[16:21:18.039]    - tweaked: FALSE
[16:21:18.039]    - call: future::plan("sequential")
[16:21:18.039] plan(): nbrOfWorkers() = 1
[16:21:18.040] SequentialFuture started (and completed)
> print(v)
[1] 6
> stopifnot(v == yTruth)
> 
> message("*** multisession(..., workers = 1L) ... DONE")
*** multisession(..., workers = 1L) ... DONE
> 
> message("*** multisession(..., gc = TRUE) ...")
*** multisession(..., gc = TRUE) ...
> plan(multisession, workers = 2L)
[16:21:18.041] plan(): Setting new future strategy stack:
[16:21:18.041] List of future strategies:
[16:21:18.041] 1. multisession:
[16:21:18.041]    - args: function (..., workers = 2L, envir = parent.frame())
[16:21:18.041]    - tweaked: TRUE
[16:21:18.041]    - call: plan(multisession, workers = 2L)
[16:21:18.055] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[16:21:18.056] multisession:
[16:21:18.056] - args: function (..., workers = 2L, envir = parent.frame())
[16:21:18.056] - tweaked: TRUE
[16:21:18.056] - call: plan(multisession, workers = 2L)
[16:21:18.056] getGlobalsAndPackages() ...
[16:21:18.056] Not searching for globals
[16:21:18.057] - globals: [0] <none>
[16:21:18.057] getGlobalsAndPackages() ... DONE
[16:21:18.057] [local output] makeClusterPSOCK() ...
[16:21:18.060] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[16:21:18.061] [local output] Base port: 11364
[16:21:18.061] [local output] Getting setup options for 2 cluster nodes ...
[16:21:18.061] [local output]  - Node 1 of 2 ...
[16:21:18.061] [local output] localMachine=TRUE => revtunnel=FALSE

[16:21:18.062] [local output] Rscript port: 11364

[16:21:18.062] [local output]  - Node 2 of 2 ...
[16:21:18.063] [local output] localMachine=TRUE => revtunnel=FALSE

[16:21:18.063] [local output] Rscript port: 11364

[16:21:18.063] [local output] Getting setup options for 2 cluster nodes ... done
[16:21:18.063] [local output]  - Parallel setup requested for some PSOCK nodes
[16:21:18.064] [local output] Setting up PSOCK nodes in parallel
[16:21:18.064] List of 36
[16:21:18.064]  $ worker          : chr "localhost"
[16:21:18.064]   ..- attr(*, "localhost")= logi TRUE
[16:21:18.064]  $ master          : chr "localhost"
[16:21:18.064]  $ port            : int 11364
[16:21:18.064]  $ connectTimeout  : num 120
[16:21:18.064]  $ timeout         : num 2592000
[16:21:18.064]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[16:21:18.064]  $ homogeneous     : logi TRUE
[16:21:18.064]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[16:21:18.064]  $ rscript_envs    : NULL
[16:21:18.064]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:21:18.064]  $ rscript_startup : NULL
[16:21:18.064]  $ rscript_sh      : chr "sh"
[16:21:18.064]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:21:18.064]  $ methods         : logi TRUE
[16:21:18.064]  $ socketOptions   : chr "no-delay"
[16:21:18.064]  $ useXDR          : logi FALSE
[16:21:18.064]  $ outfile         : chr "/dev/null"
[16:21:18.064]  $ renice          : int NA
[16:21:18.064]  $ rshcmd          : NULL
[16:21:18.064]  $ user            : chr(0) 
[16:21:18.064]  $ revtunnel       : logi FALSE
[16:21:18.064]  $ rshlogfile      : NULL
[16:21:18.064]  $ rshopts         : chr(0) 
[16:21:18.064]  $ rank            : int 1
[16:21:18.064]  $ manual          : logi FALSE
[16:21:18.064]  $ dryrun          : logi FALSE
[16:21:18.064]  $ quiet           : logi FALSE
[16:21:18.064]  $ setup_strategy  : chr "parallel"
[16:21:18.064]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:21:18.064]  $ pidfile         : chr "/tmp/RtmpKdMfEO/worker.rank=1.parallelly.parent=85062.14c462821cf80.pid"
[16:21:18.064]  $ rshcmd_label    : NULL
[16:21:18.064]  $ rsh_call        : NULL
[16:21:18.064]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:21:18.064]  $ localMachine    : logi TRUE
[16:21:18.064]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[16:21:18.064]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[16:21:18.064]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[16:21:18.064]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[16:21:18.064]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[16:21:18.064]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[16:21:18.064]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[16:21:18.064]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[16:21:18.064]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[16:21:18.064]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[16:21:18.064]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[16:21:18.064]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[16:21:18.064]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[16:21:18.064]  $ arguments       :List of 28
[16:21:18.064]   ..$ worker          : chr "localhost"
[16:21:18.064]   ..$ master          : NULL
[16:21:18.064]   ..$ port            : int 11364
[16:21:18.064]   ..$ connectTimeout  : num 120
[16:21:18.064]   ..$ timeout         : num 2592000
[16:21:18.064]   ..$ rscript         : NULL
[16:21:18.064]   ..$ homogeneous     : NULL
[16:21:18.064]   ..$ rscript_args    : NULL
[16:21:18.064]   ..$ rscript_envs    : NULL
[16:21:18.064]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:21:18.064]   ..$ rscript_startup : NULL
[16:21:18.064]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[16:21:18.064]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:21:18.064]   ..$ methods         : logi TRUE
[16:21:18.064]   ..$ socketOptions   : chr "no-delay"
[16:21:18.064]   ..$ useXDR          : logi FALSE
[16:21:18.064]   ..$ outfile         : chr "/dev/null"
[16:21:18.064]   ..$ renice          : int NA
[16:21:18.064]   ..$ rshcmd          : NULL
[16:21:18.064]   ..$ user            : NULL
[16:21:18.064]   ..$ revtunnel       : logi NA
[16:21:18.064]   ..$ rshlogfile      : NULL
[16:21:18.064]   ..$ rshopts         : NULL
[16:21:18.064]   ..$ rank            : int 1
[16:21:18.064]   ..$ manual          : logi FALSE
[16:21:18.064]   ..$ dryrun          : logi FALSE
[16:21:18.064]   ..$ quiet           : logi FALSE
[16:21:18.064]   ..$ setup_strategy  : chr "parallel"
[16:21:18.064]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[16:21:18.081] [local output] System call to launch all workers:
[16:21:18.081] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpKdMfEO/worker.rank=1.parallelly.parent=85062.14c462821cf80.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11364 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[16:21:18.081] [local output] Starting PSOCK main server
[16:21:18.082] [local output] Workers launched
[16:21:18.083] [local output] Waiting for workers to connect back
[16:21:18.083]  - [local output] 0 workers out of 2 ready
[16:21:18.304]  - [local output] 0 workers out of 2 ready
[16:21:18.305]  - [local output] 1 workers out of 2 ready
[16:21:18.339]  - [local output] 1 workers out of 2 ready
[16:21:18.340]  - [local output] 2 workers out of 2 ready
[16:21:18.340] [local output] Launching of workers completed
[16:21:18.340] [local output] Collecting session information from workers
[16:21:18.340] [local output]  - Worker #1 of 2
[16:21:18.341] [local output]  - Worker #2 of 2
[16:21:18.341] [local output] makeClusterPSOCK() ... done
[16:21:18.352] Packages needed by the future expression (n = 0): <none>
[16:21:18.352] Packages needed by future strategies (n = 0): <none>
[16:21:18.352] {
[16:21:18.352]     {
[16:21:18.352]         {
[16:21:18.352]             ...future.startTime <- base::Sys.time()
[16:21:18.352]             {
[16:21:18.352]                 {
[16:21:18.352]                   {
[16:21:18.352]                     {
[16:21:18.352]                       base::local({
[16:21:18.352]                         has_future <- base::requireNamespace("future", 
[16:21:18.352]                           quietly = TRUE)
[16:21:18.352]                         if (has_future) {
[16:21:18.352]                           ns <- base::getNamespace("future")
[16:21:18.352]                           version <- ns[[".package"]][["version"]]
[16:21:18.352]                           if (is.null(version)) 
[16:21:18.352]                             version <- utils::packageVersion("future")
[16:21:18.352]                         }
[16:21:18.352]                         else {
[16:21:18.352]                           version <- NULL
[16:21:18.352]                         }
[16:21:18.352]                         if (!has_future || version < "1.8.0") {
[16:21:18.352]                           info <- base::c(r_version = base::gsub("R version ", 
[16:21:18.352]                             "", base::R.version$version.string), 
[16:21:18.352]                             platform = base::sprintf("%s (%s-bit)", 
[16:21:18.352]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:18.352]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:18.352]                               "release", "version")], collapse = " "), 
[16:21:18.352]                             hostname = base::Sys.info()[["nodename"]])
[16:21:18.352]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:21:18.352]                             info)
[16:21:18.352]                           info <- base::paste(info, collapse = "; ")
[16:21:18.352]                           if (!has_future) {
[16:21:18.352]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:18.352]                               info)
[16:21:18.352]                           }
[16:21:18.352]                           else {
[16:21:18.352]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:18.352]                               info, version)
[16:21:18.352]                           }
[16:21:18.352]                           base::stop(msg)
[16:21:18.352]                         }
[16:21:18.352]                       })
[16:21:18.352]                     }
[16:21:18.352]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:21:18.352]                     base::options(mc.cores = 1L)
[16:21:18.352]                   }
[16:21:18.352]                   ...future.strategy.old <- future::plan("list")
[16:21:18.352]                   options(future.plan = NULL)
[16:21:18.352]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:18.352]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:18.352]                 }
[16:21:18.352]                 ...future.workdir <- getwd()
[16:21:18.352]             }
[16:21:18.352]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:18.352]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:18.352]         }
[16:21:18.352]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:18.352]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:18.352]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:18.352]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:18.352]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:18.352]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:18.352]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:18.352]             base::names(...future.oldOptions))
[16:21:18.352]     }
[16:21:18.352]     if (FALSE) {
[16:21:18.352]     }
[16:21:18.352]     else {
[16:21:18.352]         if (TRUE) {
[16:21:18.352]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:18.352]                 open = "w")
[16:21:18.352]         }
[16:21:18.352]         else {
[16:21:18.352]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:18.352]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:18.352]         }
[16:21:18.352]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:18.352]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:18.352]             base::sink(type = "output", split = FALSE)
[16:21:18.352]             base::close(...future.stdout)
[16:21:18.352]         }, add = TRUE)
[16:21:18.352]     }
[16:21:18.352]     ...future.frame <- base::sys.nframe()
[16:21:18.352]     ...future.conditions <- base::list()
[16:21:18.352]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:18.352]     if (FALSE) {
[16:21:18.352]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:18.352]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:18.352]     }
[16:21:18.352]     ...future.result <- base::tryCatch({
[16:21:18.352]         base::withCallingHandlers({
[16:21:18.352]             ...future.value <- base::withVisible(base::local({
[16:21:18.352]                 ...future.makeSendCondition <- base::local({
[16:21:18.352]                   sendCondition <- NULL
[16:21:18.352]                   function(frame = 1L) {
[16:21:18.352]                     if (is.function(sendCondition)) 
[16:21:18.352]                       return(sendCondition)
[16:21:18.352]                     ns <- getNamespace("parallel")
[16:21:18.352]                     if (exists("sendData", mode = "function", 
[16:21:18.352]                       envir = ns)) {
[16:21:18.352]                       parallel_sendData <- get("sendData", mode = "function", 
[16:21:18.352]                         envir = ns)
[16:21:18.352]                       envir <- sys.frame(frame)
[16:21:18.352]                       master <- NULL
[16:21:18.352]                       while (!identical(envir, .GlobalEnv) && 
[16:21:18.352]                         !identical(envir, emptyenv())) {
[16:21:18.352]                         if (exists("master", mode = "list", envir = envir, 
[16:21:18.352]                           inherits = FALSE)) {
[16:21:18.352]                           master <- get("master", mode = "list", 
[16:21:18.352]                             envir = envir, inherits = FALSE)
[16:21:18.352]                           if (inherits(master, c("SOCKnode", 
[16:21:18.352]                             "SOCK0node"))) {
[16:21:18.352]                             sendCondition <<- function(cond) {
[16:21:18.352]                               data <- list(type = "VALUE", value = cond, 
[16:21:18.352]                                 success = TRUE)
[16:21:18.352]                               parallel_sendData(master, data)
[16:21:18.352]                             }
[16:21:18.352]                             return(sendCondition)
[16:21:18.352]                           }
[16:21:18.352]                         }
[16:21:18.352]                         frame <- frame + 1L
[16:21:18.352]                         envir <- sys.frame(frame)
[16:21:18.352]                       }
[16:21:18.352]                     }
[16:21:18.352]                     sendCondition <<- function(cond) NULL
[16:21:18.352]                   }
[16:21:18.352]                 })
[16:21:18.352]                 withCallingHandlers({
[16:21:18.352]                   NA
[16:21:18.352]                 }, immediateCondition = function(cond) {
[16:21:18.352]                   sendCondition <- ...future.makeSendCondition()
[16:21:18.352]                   sendCondition(cond)
[16:21:18.352]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:18.352]                   {
[16:21:18.352]                     inherits <- base::inherits
[16:21:18.352]                     invokeRestart <- base::invokeRestart
[16:21:18.352]                     is.null <- base::is.null
[16:21:18.352]                     muffled <- FALSE
[16:21:18.352]                     if (inherits(cond, "message")) {
[16:21:18.352]                       muffled <- grepl(pattern, "muffleMessage")
[16:21:18.352]                       if (muffled) 
[16:21:18.352]                         invokeRestart("muffleMessage")
[16:21:18.352]                     }
[16:21:18.352]                     else if (inherits(cond, "warning")) {
[16:21:18.352]                       muffled <- grepl(pattern, "muffleWarning")
[16:21:18.352]                       if (muffled) 
[16:21:18.352]                         invokeRestart("muffleWarning")
[16:21:18.352]                     }
[16:21:18.352]                     else if (inherits(cond, "condition")) {
[16:21:18.352]                       if (!is.null(pattern)) {
[16:21:18.352]                         computeRestarts <- base::computeRestarts
[16:21:18.352]                         grepl <- base::grepl
[16:21:18.352]                         restarts <- computeRestarts(cond)
[16:21:18.352]                         for (restart in restarts) {
[16:21:18.352]                           name <- restart$name
[16:21:18.352]                           if (is.null(name)) 
[16:21:18.352]                             next
[16:21:18.352]                           if (!grepl(pattern, name)) 
[16:21:18.352]                             next
[16:21:18.352]                           invokeRestart(restart)
[16:21:18.352]                           muffled <- TRUE
[16:21:18.352]                           break
[16:21:18.352]                         }
[16:21:18.352]                       }
[16:21:18.352]                     }
[16:21:18.352]                     invisible(muffled)
[16:21:18.352]                   }
[16:21:18.352]                   muffleCondition(cond)
[16:21:18.352]                 })
[16:21:18.352]             }))
[16:21:18.352]             future::FutureResult(value = ...future.value$value, 
[16:21:18.352]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:18.352]                   ...future.rng), globalenv = if (FALSE) 
[16:21:18.352]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:18.352]                     ...future.globalenv.names))
[16:21:18.352]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:18.352]         }, condition = base::local({
[16:21:18.352]             c <- base::c
[16:21:18.352]             inherits <- base::inherits
[16:21:18.352]             invokeRestart <- base::invokeRestart
[16:21:18.352]             length <- base::length
[16:21:18.352]             list <- base::list
[16:21:18.352]             seq.int <- base::seq.int
[16:21:18.352]             signalCondition <- base::signalCondition
[16:21:18.352]             sys.calls <- base::sys.calls
[16:21:18.352]             `[[` <- base::`[[`
[16:21:18.352]             `+` <- base::`+`
[16:21:18.352]             `<<-` <- base::`<<-`
[16:21:18.352]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:18.352]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:18.352]                   3L)]
[16:21:18.352]             }
[16:21:18.352]             function(cond) {
[16:21:18.352]                 is_error <- inherits(cond, "error")
[16:21:18.352]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:18.352]                   NULL)
[16:21:18.352]                 if (is_error) {
[16:21:18.352]                   sessionInformation <- function() {
[16:21:18.352]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:18.352]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:18.352]                       search = base::search(), system = base::Sys.info())
[16:21:18.352]                   }
[16:21:18.352]                   ...future.conditions[[length(...future.conditions) + 
[16:21:18.352]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:18.352]                     cond$call), session = sessionInformation(), 
[16:21:18.352]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:18.352]                   signalCondition(cond)
[16:21:18.352]                 }
[16:21:18.352]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:18.352]                 "immediateCondition"))) {
[16:21:18.352]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:18.352]                   ...future.conditions[[length(...future.conditions) + 
[16:21:18.352]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:18.352]                   if (TRUE && !signal) {
[16:21:18.352]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:18.352]                     {
[16:21:18.352]                       inherits <- base::inherits
[16:21:18.352]                       invokeRestart <- base::invokeRestart
[16:21:18.352]                       is.null <- base::is.null
[16:21:18.352]                       muffled <- FALSE
[16:21:18.352]                       if (inherits(cond, "message")) {
[16:21:18.352]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:18.352]                         if (muffled) 
[16:21:18.352]                           invokeRestart("muffleMessage")
[16:21:18.352]                       }
[16:21:18.352]                       else if (inherits(cond, "warning")) {
[16:21:18.352]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:18.352]                         if (muffled) 
[16:21:18.352]                           invokeRestart("muffleWarning")
[16:21:18.352]                       }
[16:21:18.352]                       else if (inherits(cond, "condition")) {
[16:21:18.352]                         if (!is.null(pattern)) {
[16:21:18.352]                           computeRestarts <- base::computeRestarts
[16:21:18.352]                           grepl <- base::grepl
[16:21:18.352]                           restarts <- computeRestarts(cond)
[16:21:18.352]                           for (restart in restarts) {
[16:21:18.352]                             name <- restart$name
[16:21:18.352]                             if (is.null(name)) 
[16:21:18.352]                               next
[16:21:18.352]                             if (!grepl(pattern, name)) 
[16:21:18.352]                               next
[16:21:18.352]                             invokeRestart(restart)
[16:21:18.352]                             muffled <- TRUE
[16:21:18.352]                             break
[16:21:18.352]                           }
[16:21:18.352]                         }
[16:21:18.352]                       }
[16:21:18.352]                       invisible(muffled)
[16:21:18.352]                     }
[16:21:18.352]                     muffleCondition(cond, pattern = "^muffle")
[16:21:18.352]                   }
[16:21:18.352]                 }
[16:21:18.352]                 else {
[16:21:18.352]                   if (TRUE) {
[16:21:18.352]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:18.352]                     {
[16:21:18.352]                       inherits <- base::inherits
[16:21:18.352]                       invokeRestart <- base::invokeRestart
[16:21:18.352]                       is.null <- base::is.null
[16:21:18.352]                       muffled <- FALSE
[16:21:18.352]                       if (inherits(cond, "message")) {
[16:21:18.352]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:18.352]                         if (muffled) 
[16:21:18.352]                           invokeRestart("muffleMessage")
[16:21:18.352]                       }
[16:21:18.352]                       else if (inherits(cond, "warning")) {
[16:21:18.352]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:18.352]                         if (muffled) 
[16:21:18.352]                           invokeRestart("muffleWarning")
[16:21:18.352]                       }
[16:21:18.352]                       else if (inherits(cond, "condition")) {
[16:21:18.352]                         if (!is.null(pattern)) {
[16:21:18.352]                           computeRestarts <- base::computeRestarts
[16:21:18.352]                           grepl <- base::grepl
[16:21:18.352]                           restarts <- computeRestarts(cond)
[16:21:18.352]                           for (restart in restarts) {
[16:21:18.352]                             name <- restart$name
[16:21:18.352]                             if (is.null(name)) 
[16:21:18.352]                               next
[16:21:18.352]                             if (!grepl(pattern, name)) 
[16:21:18.352]                               next
[16:21:18.352]                             invokeRestart(restart)
[16:21:18.352]                             muffled <- TRUE
[16:21:18.352]                             break
[16:21:18.352]                           }
[16:21:18.352]                         }
[16:21:18.352]                       }
[16:21:18.352]                       invisible(muffled)
[16:21:18.352]                     }
[16:21:18.352]                     muffleCondition(cond, pattern = "^muffle")
[16:21:18.352]                   }
[16:21:18.352]                 }
[16:21:18.352]             }
[16:21:18.352]         }))
[16:21:18.352]     }, error = function(ex) {
[16:21:18.352]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:18.352]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:18.352]                 ...future.rng), started = ...future.startTime, 
[16:21:18.352]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:18.352]             version = "1.8"), class = "FutureResult")
[16:21:18.352]     }, finally = {
[16:21:18.352]         if (!identical(...future.workdir, getwd())) 
[16:21:18.352]             setwd(...future.workdir)
[16:21:18.352]         {
[16:21:18.352]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:18.352]                 ...future.oldOptions$nwarnings <- NULL
[16:21:18.352]             }
[16:21:18.352]             base::options(...future.oldOptions)
[16:21:18.352]             if (.Platform$OS.type == "windows") {
[16:21:18.352]                 old_names <- names(...future.oldEnvVars)
[16:21:18.352]                 envs <- base::Sys.getenv()
[16:21:18.352]                 names <- names(envs)
[16:21:18.352]                 common <- intersect(names, old_names)
[16:21:18.352]                 added <- setdiff(names, old_names)
[16:21:18.352]                 removed <- setdiff(old_names, names)
[16:21:18.352]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:18.352]                   envs[common]]
[16:21:18.352]                 NAMES <- toupper(changed)
[16:21:18.352]                 args <- list()
[16:21:18.352]                 for (kk in seq_along(NAMES)) {
[16:21:18.352]                   name <- changed[[kk]]
[16:21:18.352]                   NAME <- NAMES[[kk]]
[16:21:18.352]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:18.352]                     next
[16:21:18.352]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:18.352]                 }
[16:21:18.352]                 NAMES <- toupper(added)
[16:21:18.352]                 for (kk in seq_along(NAMES)) {
[16:21:18.352]                   name <- added[[kk]]
[16:21:18.352]                   NAME <- NAMES[[kk]]
[16:21:18.352]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:18.352]                     next
[16:21:18.352]                   args[[name]] <- ""
[16:21:18.352]                 }
[16:21:18.352]                 NAMES <- toupper(removed)
[16:21:18.352]                 for (kk in seq_along(NAMES)) {
[16:21:18.352]                   name <- removed[[kk]]
[16:21:18.352]                   NAME <- NAMES[[kk]]
[16:21:18.352]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:18.352]                     next
[16:21:18.352]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:18.352]                 }
[16:21:18.352]                 if (length(args) > 0) 
[16:21:18.352]                   base::do.call(base::Sys.setenv, args = args)
[16:21:18.352]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:18.352]             }
[16:21:18.352]             else {
[16:21:18.352]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:18.352]             }
[16:21:18.352]             {
[16:21:18.352]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:18.352]                   0L) {
[16:21:18.352]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:18.352]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:18.352]                   base::options(opts)
[16:21:18.352]                 }
[16:21:18.352]                 {
[16:21:18.352]                   {
[16:21:18.352]                     base::options(mc.cores = ...future.mc.cores.old)
[16:21:18.352]                     NULL
[16:21:18.352]                   }
[16:21:18.352]                   options(future.plan = NULL)
[16:21:18.352]                   if (is.na(NA_character_)) 
[16:21:18.352]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:18.352]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:18.352]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:18.352]                     .init = FALSE)
[16:21:18.352]                 }
[16:21:18.352]             }
[16:21:18.352]         }
[16:21:18.352]     })
[16:21:18.352]     if (TRUE) {
[16:21:18.352]         base::sink(type = "output", split = FALSE)
[16:21:18.352]         if (TRUE) {
[16:21:18.352]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:18.352]         }
[16:21:18.352]         else {
[16:21:18.352]             ...future.result["stdout"] <- base::list(NULL)
[16:21:18.352]         }
[16:21:18.352]         base::close(...future.stdout)
[16:21:18.352]         ...future.stdout <- NULL
[16:21:18.352]     }
[16:21:18.352]     ...future.result$conditions <- ...future.conditions
[16:21:18.352]     ...future.result$finished <- base::Sys.time()
[16:21:18.352]     ...future.result
[16:21:18.352] }
[16:21:18.405] MultisessionFuture started
[16:21:18.406] result() for ClusterFuture ...
[16:21:18.406] receiveMessageFromWorker() for ClusterFuture ...
[16:21:18.406] - Validating connection of MultisessionFuture
[16:21:18.439] - received message: FutureResult
[16:21:18.439] - Received FutureResult
[16:21:18.439] - Erased future from FutureRegistry
[16:21:18.440] result() for ClusterFuture ...
[16:21:18.440] - result already collected: FutureResult
[16:21:18.440] result() for ClusterFuture ... done
[16:21:18.440] receiveMessageFromWorker() for ClusterFuture ... done
[16:21:18.440] result() for ClusterFuture ... done
[16:21:18.440] result() for ClusterFuture ...
[16:21:18.440] - result already collected: FutureResult
[16:21:18.440] result() for ClusterFuture ... done
[16:21:18.440] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[16:21:18.441] plan(): nbrOfWorkers() = 2
> 
> f <- future({ gc() })
[16:21:18.441] getGlobalsAndPackages() ...
[16:21:18.441] Searching for globals...
[16:21:18.442] - globals found: [2] ‘{’, ‘gc’
[16:21:18.442] Searching for globals ... DONE
[16:21:18.442] Resolving globals: FALSE
[16:21:18.442] 
[16:21:18.443] 
[16:21:18.443] getGlobalsAndPackages() ... DONE
[16:21:18.443] run() for ‘Future’ ...
[16:21:18.443] - state: ‘created’
[16:21:18.443] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:21:18.454] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:21:18.454] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:21:18.454]   - Field: ‘node’
[16:21:18.454]   - Field: ‘label’
[16:21:18.454]   - Field: ‘local’
[16:21:18.454]   - Field: ‘owner’
[16:21:18.454]   - Field: ‘envir’
[16:21:18.454]   - Field: ‘workers’
[16:21:18.455]   - Field: ‘packages’
[16:21:18.455]   - Field: ‘gc’
[16:21:18.455]   - Field: ‘conditions’
[16:21:18.455]   - Field: ‘persistent’
[16:21:18.455]   - Field: ‘expr’
[16:21:18.455]   - Field: ‘uuid’
[16:21:18.455]   - Field: ‘seed’
[16:21:18.455]   - Field: ‘version’
[16:21:18.455]   - Field: ‘result’
[16:21:18.455]   - Field: ‘asynchronous’
[16:21:18.456]   - Field: ‘calls’
[16:21:18.456]   - Field: ‘globals’
[16:21:18.456]   - Field: ‘stdout’
[16:21:18.456]   - Field: ‘earlySignal’
[16:21:18.456]   - Field: ‘lazy’
[16:21:18.456]   - Field: ‘state’
[16:21:18.456] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:21:18.456] - Launch lazy future ...
[16:21:18.456] Packages needed by the future expression (n = 0): <none>
[16:21:18.457] Packages needed by future strategies (n = 0): <none>
[16:21:18.457] {
[16:21:18.457]     {
[16:21:18.457]         {
[16:21:18.457]             ...future.startTime <- base::Sys.time()
[16:21:18.457]             {
[16:21:18.457]                 {
[16:21:18.457]                   {
[16:21:18.457]                     {
[16:21:18.457]                       base::local({
[16:21:18.457]                         has_future <- base::requireNamespace("future", 
[16:21:18.457]                           quietly = TRUE)
[16:21:18.457]                         if (has_future) {
[16:21:18.457]                           ns <- base::getNamespace("future")
[16:21:18.457]                           version <- ns[[".package"]][["version"]]
[16:21:18.457]                           if (is.null(version)) 
[16:21:18.457]                             version <- utils::packageVersion("future")
[16:21:18.457]                         }
[16:21:18.457]                         else {
[16:21:18.457]                           version <- NULL
[16:21:18.457]                         }
[16:21:18.457]                         if (!has_future || version < "1.8.0") {
[16:21:18.457]                           info <- base::c(r_version = base::gsub("R version ", 
[16:21:18.457]                             "", base::R.version$version.string), 
[16:21:18.457]                             platform = base::sprintf("%s (%s-bit)", 
[16:21:18.457]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:18.457]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:18.457]                               "release", "version")], collapse = " "), 
[16:21:18.457]                             hostname = base::Sys.info()[["nodename"]])
[16:21:18.457]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:21:18.457]                             info)
[16:21:18.457]                           info <- base::paste(info, collapse = "; ")
[16:21:18.457]                           if (!has_future) {
[16:21:18.457]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:18.457]                               info)
[16:21:18.457]                           }
[16:21:18.457]                           else {
[16:21:18.457]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:18.457]                               info, version)
[16:21:18.457]                           }
[16:21:18.457]                           base::stop(msg)
[16:21:18.457]                         }
[16:21:18.457]                       })
[16:21:18.457]                     }
[16:21:18.457]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:21:18.457]                     base::options(mc.cores = 1L)
[16:21:18.457]                   }
[16:21:18.457]                   ...future.strategy.old <- future::plan("list")
[16:21:18.457]                   options(future.plan = NULL)
[16:21:18.457]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:18.457]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:18.457]                 }
[16:21:18.457]                 ...future.workdir <- getwd()
[16:21:18.457]             }
[16:21:18.457]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:18.457]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:18.457]         }
[16:21:18.457]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:18.457]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:18.457]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:18.457]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:18.457]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:18.457]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:18.457]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:18.457]             base::names(...future.oldOptions))
[16:21:18.457]     }
[16:21:18.457]     if (FALSE) {
[16:21:18.457]     }
[16:21:18.457]     else {
[16:21:18.457]         if (TRUE) {
[16:21:18.457]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:18.457]                 open = "w")
[16:21:18.457]         }
[16:21:18.457]         else {
[16:21:18.457]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:18.457]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:18.457]         }
[16:21:18.457]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:18.457]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:18.457]             base::sink(type = "output", split = FALSE)
[16:21:18.457]             base::close(...future.stdout)
[16:21:18.457]         }, add = TRUE)
[16:21:18.457]     }
[16:21:18.457]     ...future.frame <- base::sys.nframe()
[16:21:18.457]     ...future.conditions <- base::list()
[16:21:18.457]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:18.457]     if (FALSE) {
[16:21:18.457]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:18.457]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:18.457]     }
[16:21:18.457]     ...future.result <- base::tryCatch({
[16:21:18.457]         base::withCallingHandlers({
[16:21:18.457]             ...future.value <- base::withVisible(base::local({
[16:21:18.457]                 ...future.makeSendCondition <- base::local({
[16:21:18.457]                   sendCondition <- NULL
[16:21:18.457]                   function(frame = 1L) {
[16:21:18.457]                     if (is.function(sendCondition)) 
[16:21:18.457]                       return(sendCondition)
[16:21:18.457]                     ns <- getNamespace("parallel")
[16:21:18.457]                     if (exists("sendData", mode = "function", 
[16:21:18.457]                       envir = ns)) {
[16:21:18.457]                       parallel_sendData <- get("sendData", mode = "function", 
[16:21:18.457]                         envir = ns)
[16:21:18.457]                       envir <- sys.frame(frame)
[16:21:18.457]                       master <- NULL
[16:21:18.457]                       while (!identical(envir, .GlobalEnv) && 
[16:21:18.457]                         !identical(envir, emptyenv())) {
[16:21:18.457]                         if (exists("master", mode = "list", envir = envir, 
[16:21:18.457]                           inherits = FALSE)) {
[16:21:18.457]                           master <- get("master", mode = "list", 
[16:21:18.457]                             envir = envir, inherits = FALSE)
[16:21:18.457]                           if (inherits(master, c("SOCKnode", 
[16:21:18.457]                             "SOCK0node"))) {
[16:21:18.457]                             sendCondition <<- function(cond) {
[16:21:18.457]                               data <- list(type = "VALUE", value = cond, 
[16:21:18.457]                                 success = TRUE)
[16:21:18.457]                               parallel_sendData(master, data)
[16:21:18.457]                             }
[16:21:18.457]                             return(sendCondition)
[16:21:18.457]                           }
[16:21:18.457]                         }
[16:21:18.457]                         frame <- frame + 1L
[16:21:18.457]                         envir <- sys.frame(frame)
[16:21:18.457]                       }
[16:21:18.457]                     }
[16:21:18.457]                     sendCondition <<- function(cond) NULL
[16:21:18.457]                   }
[16:21:18.457]                 })
[16:21:18.457]                 withCallingHandlers({
[16:21:18.457]                   {
[16:21:18.457]                     gc()
[16:21:18.457]                   }
[16:21:18.457]                 }, immediateCondition = function(cond) {
[16:21:18.457]                   sendCondition <- ...future.makeSendCondition()
[16:21:18.457]                   sendCondition(cond)
[16:21:18.457]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:18.457]                   {
[16:21:18.457]                     inherits <- base::inherits
[16:21:18.457]                     invokeRestart <- base::invokeRestart
[16:21:18.457]                     is.null <- base::is.null
[16:21:18.457]                     muffled <- FALSE
[16:21:18.457]                     if (inherits(cond, "message")) {
[16:21:18.457]                       muffled <- grepl(pattern, "muffleMessage")
[16:21:18.457]                       if (muffled) 
[16:21:18.457]                         invokeRestart("muffleMessage")
[16:21:18.457]                     }
[16:21:18.457]                     else if (inherits(cond, "warning")) {
[16:21:18.457]                       muffled <- grepl(pattern, "muffleWarning")
[16:21:18.457]                       if (muffled) 
[16:21:18.457]                         invokeRestart("muffleWarning")
[16:21:18.457]                     }
[16:21:18.457]                     else if (inherits(cond, "condition")) {
[16:21:18.457]                       if (!is.null(pattern)) {
[16:21:18.457]                         computeRestarts <- base::computeRestarts
[16:21:18.457]                         grepl <- base::grepl
[16:21:18.457]                         restarts <- computeRestarts(cond)
[16:21:18.457]                         for (restart in restarts) {
[16:21:18.457]                           name <- restart$name
[16:21:18.457]                           if (is.null(name)) 
[16:21:18.457]                             next
[16:21:18.457]                           if (!grepl(pattern, name)) 
[16:21:18.457]                             next
[16:21:18.457]                           invokeRestart(restart)
[16:21:18.457]                           muffled <- TRUE
[16:21:18.457]                           break
[16:21:18.457]                         }
[16:21:18.457]                       }
[16:21:18.457]                     }
[16:21:18.457]                     invisible(muffled)
[16:21:18.457]                   }
[16:21:18.457]                   muffleCondition(cond)
[16:21:18.457]                 })
[16:21:18.457]             }))
[16:21:18.457]             future::FutureResult(value = ...future.value$value, 
[16:21:18.457]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:18.457]                   ...future.rng), globalenv = if (FALSE) 
[16:21:18.457]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:18.457]                     ...future.globalenv.names))
[16:21:18.457]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:18.457]         }, condition = base::local({
[16:21:18.457]             c <- base::c
[16:21:18.457]             inherits <- base::inherits
[16:21:18.457]             invokeRestart <- base::invokeRestart
[16:21:18.457]             length <- base::length
[16:21:18.457]             list <- base::list
[16:21:18.457]             seq.int <- base::seq.int
[16:21:18.457]             signalCondition <- base::signalCondition
[16:21:18.457]             sys.calls <- base::sys.calls
[16:21:18.457]             `[[` <- base::`[[`
[16:21:18.457]             `+` <- base::`+`
[16:21:18.457]             `<<-` <- base::`<<-`
[16:21:18.457]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:18.457]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:18.457]                   3L)]
[16:21:18.457]             }
[16:21:18.457]             function(cond) {
[16:21:18.457]                 is_error <- inherits(cond, "error")
[16:21:18.457]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:18.457]                   NULL)
[16:21:18.457]                 if (is_error) {
[16:21:18.457]                   sessionInformation <- function() {
[16:21:18.457]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:18.457]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:18.457]                       search = base::search(), system = base::Sys.info())
[16:21:18.457]                   }
[16:21:18.457]                   ...future.conditions[[length(...future.conditions) + 
[16:21:18.457]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:18.457]                     cond$call), session = sessionInformation(), 
[16:21:18.457]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:18.457]                   signalCondition(cond)
[16:21:18.457]                 }
[16:21:18.457]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:18.457]                 "immediateCondition"))) {
[16:21:18.457]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:18.457]                   ...future.conditions[[length(...future.conditions) + 
[16:21:18.457]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:18.457]                   if (TRUE && !signal) {
[16:21:18.457]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:18.457]                     {
[16:21:18.457]                       inherits <- base::inherits
[16:21:18.457]                       invokeRestart <- base::invokeRestart
[16:21:18.457]                       is.null <- base::is.null
[16:21:18.457]                       muffled <- FALSE
[16:21:18.457]                       if (inherits(cond, "message")) {
[16:21:18.457]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:18.457]                         if (muffled) 
[16:21:18.457]                           invokeRestart("muffleMessage")
[16:21:18.457]                       }
[16:21:18.457]                       else if (inherits(cond, "warning")) {
[16:21:18.457]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:18.457]                         if (muffled) 
[16:21:18.457]                           invokeRestart("muffleWarning")
[16:21:18.457]                       }
[16:21:18.457]                       else if (inherits(cond, "condition")) {
[16:21:18.457]                         if (!is.null(pattern)) {
[16:21:18.457]                           computeRestarts <- base::computeRestarts
[16:21:18.457]                           grepl <- base::grepl
[16:21:18.457]                           restarts <- computeRestarts(cond)
[16:21:18.457]                           for (restart in restarts) {
[16:21:18.457]                             name <- restart$name
[16:21:18.457]                             if (is.null(name)) 
[16:21:18.457]                               next
[16:21:18.457]                             if (!grepl(pattern, name)) 
[16:21:18.457]                               next
[16:21:18.457]                             invokeRestart(restart)
[16:21:18.457]                             muffled <- TRUE
[16:21:18.457]                             break
[16:21:18.457]                           }
[16:21:18.457]                         }
[16:21:18.457]                       }
[16:21:18.457]                       invisible(muffled)
[16:21:18.457]                     }
[16:21:18.457]                     muffleCondition(cond, pattern = "^muffle")
[16:21:18.457]                   }
[16:21:18.457]                 }
[16:21:18.457]                 else {
[16:21:18.457]                   if (TRUE) {
[16:21:18.457]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:18.457]                     {
[16:21:18.457]                       inherits <- base::inherits
[16:21:18.457]                       invokeRestart <- base::invokeRestart
[16:21:18.457]                       is.null <- base::is.null
[16:21:18.457]                       muffled <- FALSE
[16:21:18.457]                       if (inherits(cond, "message")) {
[16:21:18.457]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:18.457]                         if (muffled) 
[16:21:18.457]                           invokeRestart("muffleMessage")
[16:21:18.457]                       }
[16:21:18.457]                       else if (inherits(cond, "warning")) {
[16:21:18.457]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:18.457]                         if (muffled) 
[16:21:18.457]                           invokeRestart("muffleWarning")
[16:21:18.457]                       }
[16:21:18.457]                       else if (inherits(cond, "condition")) {
[16:21:18.457]                         if (!is.null(pattern)) {
[16:21:18.457]                           computeRestarts <- base::computeRestarts
[16:21:18.457]                           grepl <- base::grepl
[16:21:18.457]                           restarts <- computeRestarts(cond)
[16:21:18.457]                           for (restart in restarts) {
[16:21:18.457]                             name <- restart$name
[16:21:18.457]                             if (is.null(name)) 
[16:21:18.457]                               next
[16:21:18.457]                             if (!grepl(pattern, name)) 
[16:21:18.457]                               next
[16:21:18.457]                             invokeRestart(restart)
[16:21:18.457]                             muffled <- TRUE
[16:21:18.457]                             break
[16:21:18.457]                           }
[16:21:18.457]                         }
[16:21:18.457]                       }
[16:21:18.457]                       invisible(muffled)
[16:21:18.457]                     }
[16:21:18.457]                     muffleCondition(cond, pattern = "^muffle")
[16:21:18.457]                   }
[16:21:18.457]                 }
[16:21:18.457]             }
[16:21:18.457]         }))
[16:21:18.457]     }, error = function(ex) {
[16:21:18.457]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:18.457]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:18.457]                 ...future.rng), started = ...future.startTime, 
[16:21:18.457]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:18.457]             version = "1.8"), class = "FutureResult")
[16:21:18.457]     }, finally = {
[16:21:18.457]         if (!identical(...future.workdir, getwd())) 
[16:21:18.457]             setwd(...future.workdir)
[16:21:18.457]         {
[16:21:18.457]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:18.457]                 ...future.oldOptions$nwarnings <- NULL
[16:21:18.457]             }
[16:21:18.457]             base::options(...future.oldOptions)
[16:21:18.457]             if (.Platform$OS.type == "windows") {
[16:21:18.457]                 old_names <- names(...future.oldEnvVars)
[16:21:18.457]                 envs <- base::Sys.getenv()
[16:21:18.457]                 names <- names(envs)
[16:21:18.457]                 common <- intersect(names, old_names)
[16:21:18.457]                 added <- setdiff(names, old_names)
[16:21:18.457]                 removed <- setdiff(old_names, names)
[16:21:18.457]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:18.457]                   envs[common]]
[16:21:18.457]                 NAMES <- toupper(changed)
[16:21:18.457]                 args <- list()
[16:21:18.457]                 for (kk in seq_along(NAMES)) {
[16:21:18.457]                   name <- changed[[kk]]
[16:21:18.457]                   NAME <- NAMES[[kk]]
[16:21:18.457]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:18.457]                     next
[16:21:18.457]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:18.457]                 }
[16:21:18.457]                 NAMES <- toupper(added)
[16:21:18.457]                 for (kk in seq_along(NAMES)) {
[16:21:18.457]                   name <- added[[kk]]
[16:21:18.457]                   NAME <- NAMES[[kk]]
[16:21:18.457]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:18.457]                     next
[16:21:18.457]                   args[[name]] <- ""
[16:21:18.457]                 }
[16:21:18.457]                 NAMES <- toupper(removed)
[16:21:18.457]                 for (kk in seq_along(NAMES)) {
[16:21:18.457]                   name <- removed[[kk]]
[16:21:18.457]                   NAME <- NAMES[[kk]]
[16:21:18.457]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:18.457]                     next
[16:21:18.457]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:18.457]                 }
[16:21:18.457]                 if (length(args) > 0) 
[16:21:18.457]                   base::do.call(base::Sys.setenv, args = args)
[16:21:18.457]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:18.457]             }
[16:21:18.457]             else {
[16:21:18.457]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:18.457]             }
[16:21:18.457]             {
[16:21:18.457]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:18.457]                   0L) {
[16:21:18.457]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:18.457]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:18.457]                   base::options(opts)
[16:21:18.457]                 }
[16:21:18.457]                 {
[16:21:18.457]                   {
[16:21:18.457]                     base::options(mc.cores = ...future.mc.cores.old)
[16:21:18.457]                     NULL
[16:21:18.457]                   }
[16:21:18.457]                   options(future.plan = NULL)
[16:21:18.457]                   if (is.na(NA_character_)) 
[16:21:18.457]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:18.457]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:18.457]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:18.457]                     .init = FALSE)
[16:21:18.457]                 }
[16:21:18.457]             }
[16:21:18.457]         }
[16:21:18.457]     })
[16:21:18.457]     if (TRUE) {
[16:21:18.457]         base::sink(type = "output", split = FALSE)
[16:21:18.457]         if (TRUE) {
[16:21:18.457]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:18.457]         }
[16:21:18.457]         else {
[16:21:18.457]             ...future.result["stdout"] <- base::list(NULL)
[16:21:18.457]         }
[16:21:18.457]         base::close(...future.stdout)
[16:21:18.457]         ...future.stdout <- NULL
[16:21:18.457]     }
[16:21:18.457]     ...future.result$conditions <- ...future.conditions
[16:21:18.457]     ...future.result$finished <- base::Sys.time()
[16:21:18.457]     ...future.result
[16:21:18.457] }
[16:21:18.460] MultisessionFuture started
[16:21:18.460] - Launch lazy future ... done
[16:21:18.460] run() for ‘MultisessionFuture’ ... done
> v <- value(f)
[16:21:18.460] result() for ClusterFuture ...
[16:21:18.460] receiveMessageFromWorker() for ClusterFuture ...
[16:21:18.460] - Validating connection of MultisessionFuture
[16:21:18.484] - received message: FutureResult
[16:21:18.484] - Received FutureResult
[16:21:18.485] - Erased future from FutureRegistry
[16:21:18.485] result() for ClusterFuture ...
[16:21:18.485] - result already collected: FutureResult
[16:21:18.485] result() for ClusterFuture ... done
[16:21:18.485] receiveMessageFromWorker() for ClusterFuture ... done
[16:21:18.485] result() for ClusterFuture ... done
[16:21:18.485] result() for ClusterFuture ...
[16:21:18.485] - result already collected: FutureResult
[16:21:18.485] result() for ClusterFuture ... done
> print(v)
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 394777 21.1     664331 35.5   664331 35.5
Vcells 703835  5.4    8388608 64.0  1814363 13.9
> 
> f <- future({ integer(10e6) })
[16:21:18.486] getGlobalsAndPackages() ...
[16:21:18.486] Searching for globals...
[16:21:18.487] - globals found: [2] ‘{’, ‘integer’
[16:21:18.487] Searching for globals ... DONE
[16:21:18.487] Resolving globals: FALSE
[16:21:18.487] 
[16:21:18.487] 
[16:21:18.487] getGlobalsAndPackages() ... DONE
[16:21:18.488] run() for ‘Future’ ...
[16:21:18.488] - state: ‘created’
[16:21:18.488] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:21:18.499] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:21:18.499] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:21:18.499]   - Field: ‘node’
[16:21:18.499]   - Field: ‘label’
[16:21:18.499]   - Field: ‘local’
[16:21:18.499]   - Field: ‘owner’
[16:21:18.499]   - Field: ‘envir’
[16:21:18.499]   - Field: ‘workers’
[16:21:18.499]   - Field: ‘packages’
[16:21:18.500]   - Field: ‘gc’
[16:21:18.500]   - Field: ‘conditions’
[16:21:18.500]   - Field: ‘persistent’
[16:21:18.502]   - Field: ‘expr’
[16:21:18.502]   - Field: ‘uuid’
[16:21:18.502]   - Field: ‘seed’
[16:21:18.502]   - Field: ‘version’
[16:21:18.502]   - Field: ‘result’
[16:21:18.502]   - Field: ‘asynchronous’
[16:21:18.502]   - Field: ‘calls’
[16:21:18.503]   - Field: ‘globals’
[16:21:18.503]   - Field: ‘stdout’
[16:21:18.503]   - Field: ‘earlySignal’
[16:21:18.503]   - Field: ‘lazy’
[16:21:18.503]   - Field: ‘state’
[16:21:18.503] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:21:18.503] - Launch lazy future ...
[16:21:18.503] Packages needed by the future expression (n = 0): <none>
[16:21:18.504] Packages needed by future strategies (n = 0): <none>
[16:21:18.504] {
[16:21:18.504]     {
[16:21:18.504]         {
[16:21:18.504]             ...future.startTime <- base::Sys.time()
[16:21:18.504]             {
[16:21:18.504]                 {
[16:21:18.504]                   {
[16:21:18.504]                     {
[16:21:18.504]                       base::local({
[16:21:18.504]                         has_future <- base::requireNamespace("future", 
[16:21:18.504]                           quietly = TRUE)
[16:21:18.504]                         if (has_future) {
[16:21:18.504]                           ns <- base::getNamespace("future")
[16:21:18.504]                           version <- ns[[".package"]][["version"]]
[16:21:18.504]                           if (is.null(version)) 
[16:21:18.504]                             version <- utils::packageVersion("future")
[16:21:18.504]                         }
[16:21:18.504]                         else {
[16:21:18.504]                           version <- NULL
[16:21:18.504]                         }
[16:21:18.504]                         if (!has_future || version < "1.8.0") {
[16:21:18.504]                           info <- base::c(r_version = base::gsub("R version ", 
[16:21:18.504]                             "", base::R.version$version.string), 
[16:21:18.504]                             platform = base::sprintf("%s (%s-bit)", 
[16:21:18.504]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:18.504]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:18.504]                               "release", "version")], collapse = " "), 
[16:21:18.504]                             hostname = base::Sys.info()[["nodename"]])
[16:21:18.504]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:21:18.504]                             info)
[16:21:18.504]                           info <- base::paste(info, collapse = "; ")
[16:21:18.504]                           if (!has_future) {
[16:21:18.504]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:18.504]                               info)
[16:21:18.504]                           }
[16:21:18.504]                           else {
[16:21:18.504]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:18.504]                               info, version)
[16:21:18.504]                           }
[16:21:18.504]                           base::stop(msg)
[16:21:18.504]                         }
[16:21:18.504]                       })
[16:21:18.504]                     }
[16:21:18.504]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:21:18.504]                     base::options(mc.cores = 1L)
[16:21:18.504]                   }
[16:21:18.504]                   ...future.strategy.old <- future::plan("list")
[16:21:18.504]                   options(future.plan = NULL)
[16:21:18.504]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:18.504]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:18.504]                 }
[16:21:18.504]                 ...future.workdir <- getwd()
[16:21:18.504]             }
[16:21:18.504]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:18.504]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:18.504]         }
[16:21:18.504]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:18.504]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:18.504]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:18.504]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:18.504]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:18.504]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:18.504]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:18.504]             base::names(...future.oldOptions))
[16:21:18.504]     }
[16:21:18.504]     if (FALSE) {
[16:21:18.504]     }
[16:21:18.504]     else {
[16:21:18.504]         if (TRUE) {
[16:21:18.504]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:18.504]                 open = "w")
[16:21:18.504]         }
[16:21:18.504]         else {
[16:21:18.504]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:18.504]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:18.504]         }
[16:21:18.504]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:18.504]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:18.504]             base::sink(type = "output", split = FALSE)
[16:21:18.504]             base::close(...future.stdout)
[16:21:18.504]         }, add = TRUE)
[16:21:18.504]     }
[16:21:18.504]     ...future.frame <- base::sys.nframe()
[16:21:18.504]     ...future.conditions <- base::list()
[16:21:18.504]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:18.504]     if (FALSE) {
[16:21:18.504]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:18.504]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:18.504]     }
[16:21:18.504]     ...future.result <- base::tryCatch({
[16:21:18.504]         base::withCallingHandlers({
[16:21:18.504]             ...future.value <- base::withVisible(base::local({
[16:21:18.504]                 ...future.makeSendCondition <- base::local({
[16:21:18.504]                   sendCondition <- NULL
[16:21:18.504]                   function(frame = 1L) {
[16:21:18.504]                     if (is.function(sendCondition)) 
[16:21:18.504]                       return(sendCondition)
[16:21:18.504]                     ns <- getNamespace("parallel")
[16:21:18.504]                     if (exists("sendData", mode = "function", 
[16:21:18.504]                       envir = ns)) {
[16:21:18.504]                       parallel_sendData <- get("sendData", mode = "function", 
[16:21:18.504]                         envir = ns)
[16:21:18.504]                       envir <- sys.frame(frame)
[16:21:18.504]                       master <- NULL
[16:21:18.504]                       while (!identical(envir, .GlobalEnv) && 
[16:21:18.504]                         !identical(envir, emptyenv())) {
[16:21:18.504]                         if (exists("master", mode = "list", envir = envir, 
[16:21:18.504]                           inherits = FALSE)) {
[16:21:18.504]                           master <- get("master", mode = "list", 
[16:21:18.504]                             envir = envir, inherits = FALSE)
[16:21:18.504]                           if (inherits(master, c("SOCKnode", 
[16:21:18.504]                             "SOCK0node"))) {
[16:21:18.504]                             sendCondition <<- function(cond) {
[16:21:18.504]                               data <- list(type = "VALUE", value = cond, 
[16:21:18.504]                                 success = TRUE)
[16:21:18.504]                               parallel_sendData(master, data)
[16:21:18.504]                             }
[16:21:18.504]                             return(sendCondition)
[16:21:18.504]                           }
[16:21:18.504]                         }
[16:21:18.504]                         frame <- frame + 1L
[16:21:18.504]                         envir <- sys.frame(frame)
[16:21:18.504]                       }
[16:21:18.504]                     }
[16:21:18.504]                     sendCondition <<- function(cond) NULL
[16:21:18.504]                   }
[16:21:18.504]                 })
[16:21:18.504]                 withCallingHandlers({
[16:21:18.504]                   {
[16:21:18.504]                     integer(1e+07)
[16:21:18.504]                   }
[16:21:18.504]                 }, immediateCondition = function(cond) {
[16:21:18.504]                   sendCondition <- ...future.makeSendCondition()
[16:21:18.504]                   sendCondition(cond)
[16:21:18.504]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:18.504]                   {
[16:21:18.504]                     inherits <- base::inherits
[16:21:18.504]                     invokeRestart <- base::invokeRestart
[16:21:18.504]                     is.null <- base::is.null
[16:21:18.504]                     muffled <- FALSE
[16:21:18.504]                     if (inherits(cond, "message")) {
[16:21:18.504]                       muffled <- grepl(pattern, "muffleMessage")
[16:21:18.504]                       if (muffled) 
[16:21:18.504]                         invokeRestart("muffleMessage")
[16:21:18.504]                     }
[16:21:18.504]                     else if (inherits(cond, "warning")) {
[16:21:18.504]                       muffled <- grepl(pattern, "muffleWarning")
[16:21:18.504]                       if (muffled) 
[16:21:18.504]                         invokeRestart("muffleWarning")
[16:21:18.504]                     }
[16:21:18.504]                     else if (inherits(cond, "condition")) {
[16:21:18.504]                       if (!is.null(pattern)) {
[16:21:18.504]                         computeRestarts <- base::computeRestarts
[16:21:18.504]                         grepl <- base::grepl
[16:21:18.504]                         restarts <- computeRestarts(cond)
[16:21:18.504]                         for (restart in restarts) {
[16:21:18.504]                           name <- restart$name
[16:21:18.504]                           if (is.null(name)) 
[16:21:18.504]                             next
[16:21:18.504]                           if (!grepl(pattern, name)) 
[16:21:18.504]                             next
[16:21:18.504]                           invokeRestart(restart)
[16:21:18.504]                           muffled <- TRUE
[16:21:18.504]                           break
[16:21:18.504]                         }
[16:21:18.504]                       }
[16:21:18.504]                     }
[16:21:18.504]                     invisible(muffled)
[16:21:18.504]                   }
[16:21:18.504]                   muffleCondition(cond)
[16:21:18.504]                 })
[16:21:18.504]             }))
[16:21:18.504]             future::FutureResult(value = ...future.value$value, 
[16:21:18.504]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:18.504]                   ...future.rng), globalenv = if (FALSE) 
[16:21:18.504]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:18.504]                     ...future.globalenv.names))
[16:21:18.504]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:18.504]         }, condition = base::local({
[16:21:18.504]             c <- base::c
[16:21:18.504]             inherits <- base::inherits
[16:21:18.504]             invokeRestart <- base::invokeRestart
[16:21:18.504]             length <- base::length
[16:21:18.504]             list <- base::list
[16:21:18.504]             seq.int <- base::seq.int
[16:21:18.504]             signalCondition <- base::signalCondition
[16:21:18.504]             sys.calls <- base::sys.calls
[16:21:18.504]             `[[` <- base::`[[`
[16:21:18.504]             `+` <- base::`+`
[16:21:18.504]             `<<-` <- base::`<<-`
[16:21:18.504]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:18.504]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:18.504]                   3L)]
[16:21:18.504]             }
[16:21:18.504]             function(cond) {
[16:21:18.504]                 is_error <- inherits(cond, "error")
[16:21:18.504]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:18.504]                   NULL)
[16:21:18.504]                 if (is_error) {
[16:21:18.504]                   sessionInformation <- function() {
[16:21:18.504]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:18.504]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:18.504]                       search = base::search(), system = base::Sys.info())
[16:21:18.504]                   }
[16:21:18.504]                   ...future.conditions[[length(...future.conditions) + 
[16:21:18.504]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:18.504]                     cond$call), session = sessionInformation(), 
[16:21:18.504]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:18.504]                   signalCondition(cond)
[16:21:18.504]                 }
[16:21:18.504]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:18.504]                 "immediateCondition"))) {
[16:21:18.504]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:18.504]                   ...future.conditions[[length(...future.conditions) + 
[16:21:18.504]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:18.504]                   if (TRUE && !signal) {
[16:21:18.504]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:18.504]                     {
[16:21:18.504]                       inherits <- base::inherits
[16:21:18.504]                       invokeRestart <- base::invokeRestart
[16:21:18.504]                       is.null <- base::is.null
[16:21:18.504]                       muffled <- FALSE
[16:21:18.504]                       if (inherits(cond, "message")) {
[16:21:18.504]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:18.504]                         if (muffled) 
[16:21:18.504]                           invokeRestart("muffleMessage")
[16:21:18.504]                       }
[16:21:18.504]                       else if (inherits(cond, "warning")) {
[16:21:18.504]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:18.504]                         if (muffled) 
[16:21:18.504]                           invokeRestart("muffleWarning")
[16:21:18.504]                       }
[16:21:18.504]                       else if (inherits(cond, "condition")) {
[16:21:18.504]                         if (!is.null(pattern)) {
[16:21:18.504]                           computeRestarts <- base::computeRestarts
[16:21:18.504]                           grepl <- base::grepl
[16:21:18.504]                           restarts <- computeRestarts(cond)
[16:21:18.504]                           for (restart in restarts) {
[16:21:18.504]                             name <- restart$name
[16:21:18.504]                             if (is.null(name)) 
[16:21:18.504]                               next
[16:21:18.504]                             if (!grepl(pattern, name)) 
[16:21:18.504]                               next
[16:21:18.504]                             invokeRestart(restart)
[16:21:18.504]                             muffled <- TRUE
[16:21:18.504]                             break
[16:21:18.504]                           }
[16:21:18.504]                         }
[16:21:18.504]                       }
[16:21:18.504]                       invisible(muffled)
[16:21:18.504]                     }
[16:21:18.504]                     muffleCondition(cond, pattern = "^muffle")
[16:21:18.504]                   }
[16:21:18.504]                 }
[16:21:18.504]                 else {
[16:21:18.504]                   if (TRUE) {
[16:21:18.504]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:18.504]                     {
[16:21:18.504]                       inherits <- base::inherits
[16:21:18.504]                       invokeRestart <- base::invokeRestart
[16:21:18.504]                       is.null <- base::is.null
[16:21:18.504]                       muffled <- FALSE
[16:21:18.504]                       if (inherits(cond, "message")) {
[16:21:18.504]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:18.504]                         if (muffled) 
[16:21:18.504]                           invokeRestart("muffleMessage")
[16:21:18.504]                       }
[16:21:18.504]                       else if (inherits(cond, "warning")) {
[16:21:18.504]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:18.504]                         if (muffled) 
[16:21:18.504]                           invokeRestart("muffleWarning")
[16:21:18.504]                       }
[16:21:18.504]                       else if (inherits(cond, "condition")) {
[16:21:18.504]                         if (!is.null(pattern)) {
[16:21:18.504]                           computeRestarts <- base::computeRestarts
[16:21:18.504]                           grepl <- base::grepl
[16:21:18.504]                           restarts <- computeRestarts(cond)
[16:21:18.504]                           for (restart in restarts) {
[16:21:18.504]                             name <- restart$name
[16:21:18.504]                             if (is.null(name)) 
[16:21:18.504]                               next
[16:21:18.504]                             if (!grepl(pattern, name)) 
[16:21:18.504]                               next
[16:21:18.504]                             invokeRestart(restart)
[16:21:18.504]                             muffled <- TRUE
[16:21:18.504]                             break
[16:21:18.504]                           }
[16:21:18.504]                         }
[16:21:18.504]                       }
[16:21:18.504]                       invisible(muffled)
[16:21:18.504]                     }
[16:21:18.504]                     muffleCondition(cond, pattern = "^muffle")
[16:21:18.504]                   }
[16:21:18.504]                 }
[16:21:18.504]             }
[16:21:18.504]         }))
[16:21:18.504]     }, error = function(ex) {
[16:21:18.504]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:18.504]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:18.504]                 ...future.rng), started = ...future.startTime, 
[16:21:18.504]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:18.504]             version = "1.8"), class = "FutureResult")
[16:21:18.504]     }, finally = {
[16:21:18.504]         if (!identical(...future.workdir, getwd())) 
[16:21:18.504]             setwd(...future.workdir)
[16:21:18.504]         {
[16:21:18.504]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:18.504]                 ...future.oldOptions$nwarnings <- NULL
[16:21:18.504]             }
[16:21:18.504]             base::options(...future.oldOptions)
[16:21:18.504]             if (.Platform$OS.type == "windows") {
[16:21:18.504]                 old_names <- names(...future.oldEnvVars)
[16:21:18.504]                 envs <- base::Sys.getenv()
[16:21:18.504]                 names <- names(envs)
[16:21:18.504]                 common <- intersect(names, old_names)
[16:21:18.504]                 added <- setdiff(names, old_names)
[16:21:18.504]                 removed <- setdiff(old_names, names)
[16:21:18.504]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:18.504]                   envs[common]]
[16:21:18.504]                 NAMES <- toupper(changed)
[16:21:18.504]                 args <- list()
[16:21:18.504]                 for (kk in seq_along(NAMES)) {
[16:21:18.504]                   name <- changed[[kk]]
[16:21:18.504]                   NAME <- NAMES[[kk]]
[16:21:18.504]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:18.504]                     next
[16:21:18.504]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:18.504]                 }
[16:21:18.504]                 NAMES <- toupper(added)
[16:21:18.504]                 for (kk in seq_along(NAMES)) {
[16:21:18.504]                   name <- added[[kk]]
[16:21:18.504]                   NAME <- NAMES[[kk]]
[16:21:18.504]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:18.504]                     next
[16:21:18.504]                   args[[name]] <- ""
[16:21:18.504]                 }
[16:21:18.504]                 NAMES <- toupper(removed)
[16:21:18.504]                 for (kk in seq_along(NAMES)) {
[16:21:18.504]                   name <- removed[[kk]]
[16:21:18.504]                   NAME <- NAMES[[kk]]
[16:21:18.504]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:18.504]                     next
[16:21:18.504]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:18.504]                 }
[16:21:18.504]                 if (length(args) > 0) 
[16:21:18.504]                   base::do.call(base::Sys.setenv, args = args)
[16:21:18.504]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:18.504]             }
[16:21:18.504]             else {
[16:21:18.504]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:18.504]             }
[16:21:18.504]             {
[16:21:18.504]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:18.504]                   0L) {
[16:21:18.504]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:18.504]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:18.504]                   base::options(opts)
[16:21:18.504]                 }
[16:21:18.504]                 {
[16:21:18.504]                   {
[16:21:18.504]                     base::options(mc.cores = ...future.mc.cores.old)
[16:21:18.504]                     NULL
[16:21:18.504]                   }
[16:21:18.504]                   options(future.plan = NULL)
[16:21:18.504]                   if (is.na(NA_character_)) 
[16:21:18.504]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:18.504]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:18.504]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:18.504]                     .init = FALSE)
[16:21:18.504]                 }
[16:21:18.504]             }
[16:21:18.504]         }
[16:21:18.504]     })
[16:21:18.504]     if (TRUE) {
[16:21:18.504]         base::sink(type = "output", split = FALSE)
[16:21:18.504]         if (TRUE) {
[16:21:18.504]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:18.504]         }
[16:21:18.504]         else {
[16:21:18.504]             ...future.result["stdout"] <- base::list(NULL)
[16:21:18.504]         }
[16:21:18.504]         base::close(...future.stdout)
[16:21:18.504]         ...future.stdout <- NULL
[16:21:18.504]     }
[16:21:18.504]     ...future.result$conditions <- ...future.conditions
[16:21:18.504]     ...future.result$finished <- base::Sys.time()
[16:21:18.504]     ...future.result
[16:21:18.504] }
[16:21:18.507] MultisessionFuture started
[16:21:18.507] - Launch lazy future ... done
[16:21:18.507] run() for ‘MultisessionFuture’ ... done
> v <- value(f)
[16:21:18.507] result() for ClusterFuture ...
[16:21:18.507] receiveMessageFromWorker() for ClusterFuture ...
[16:21:18.507] - Validating connection of MultisessionFuture
[16:21:18.558] - received message: FutureResult
[16:21:18.558] - Received FutureResult
[16:21:18.558] - Erased future from FutureRegistry
[16:21:18.558] result() for ClusterFuture ...
[16:21:18.558] - result already collected: FutureResult
[16:21:18.558] result() for ClusterFuture ... done
[16:21:18.559] receiveMessageFromWorker() for ClusterFuture ... done
[16:21:18.559] result() for ClusterFuture ... done
[16:21:18.559] result() for ClusterFuture ...
[16:21:18.559] - result already collected: FutureResult
[16:21:18.559] result() for ClusterFuture ... done
> str(v)
 int [1:10000000] 0 0 0 0 0 0 0 0 0 0 ...
> 
> f <- future({ gc() })
[16:21:18.560] getGlobalsAndPackages() ...
[16:21:18.560] Searching for globals...
[16:21:18.561] - globals found: [2] ‘{’, ‘gc’
[16:21:18.561] Searching for globals ... DONE
[16:21:18.561] Resolving globals: FALSE
[16:21:18.561] 
[16:21:18.561] 
[16:21:18.561] getGlobalsAndPackages() ... DONE
[16:21:18.562] run() for ‘Future’ ...
[16:21:18.562] - state: ‘created’
[16:21:18.562] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:21:18.572] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:21:18.572] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:21:18.573]   - Field: ‘node’
[16:21:18.573]   - Field: ‘label’
[16:21:18.573]   - Field: ‘local’
[16:21:18.573]   - Field: ‘owner’
[16:21:18.573]   - Field: ‘envir’
[16:21:18.573]   - Field: ‘workers’
[16:21:18.573]   - Field: ‘packages’
[16:21:18.573]   - Field: ‘gc’
[16:21:18.573]   - Field: ‘conditions’
[16:21:18.573]   - Field: ‘persistent’
[16:21:18.574]   - Field: ‘expr’
[16:21:18.574]   - Field: ‘uuid’
[16:21:18.574]   - Field: ‘seed’
[16:21:18.574]   - Field: ‘version’
[16:21:18.574]   - Field: ‘result’
[16:21:18.574]   - Field: ‘asynchronous’
[16:21:18.574]   - Field: ‘calls’
[16:21:18.574]   - Field: ‘globals’
[16:21:18.574]   - Field: ‘stdout’
[16:21:18.574]   - Field: ‘earlySignal’
[16:21:18.574]   - Field: ‘lazy’
[16:21:18.575]   - Field: ‘state’
[16:21:18.575] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:21:18.575] - Launch lazy future ...
[16:21:18.575] Packages needed by the future expression (n = 0): <none>
[16:21:18.575] Packages needed by future strategies (n = 0): <none>
[16:21:18.576] {
[16:21:18.576]     {
[16:21:18.576]         {
[16:21:18.576]             ...future.startTime <- base::Sys.time()
[16:21:18.576]             {
[16:21:18.576]                 {
[16:21:18.576]                   {
[16:21:18.576]                     {
[16:21:18.576]                       base::local({
[16:21:18.576]                         has_future <- base::requireNamespace("future", 
[16:21:18.576]                           quietly = TRUE)
[16:21:18.576]                         if (has_future) {
[16:21:18.576]                           ns <- base::getNamespace("future")
[16:21:18.576]                           version <- ns[[".package"]][["version"]]
[16:21:18.576]                           if (is.null(version)) 
[16:21:18.576]                             version <- utils::packageVersion("future")
[16:21:18.576]                         }
[16:21:18.576]                         else {
[16:21:18.576]                           version <- NULL
[16:21:18.576]                         }
[16:21:18.576]                         if (!has_future || version < "1.8.0") {
[16:21:18.576]                           info <- base::c(r_version = base::gsub("R version ", 
[16:21:18.576]                             "", base::R.version$version.string), 
[16:21:18.576]                             platform = base::sprintf("%s (%s-bit)", 
[16:21:18.576]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:18.576]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:18.576]                               "release", "version")], collapse = " "), 
[16:21:18.576]                             hostname = base::Sys.info()[["nodename"]])
[16:21:18.576]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:21:18.576]                             info)
[16:21:18.576]                           info <- base::paste(info, collapse = "; ")
[16:21:18.576]                           if (!has_future) {
[16:21:18.576]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:18.576]                               info)
[16:21:18.576]                           }
[16:21:18.576]                           else {
[16:21:18.576]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:18.576]                               info, version)
[16:21:18.576]                           }
[16:21:18.576]                           base::stop(msg)
[16:21:18.576]                         }
[16:21:18.576]                       })
[16:21:18.576]                     }
[16:21:18.576]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:21:18.576]                     base::options(mc.cores = 1L)
[16:21:18.576]                   }
[16:21:18.576]                   ...future.strategy.old <- future::plan("list")
[16:21:18.576]                   options(future.plan = NULL)
[16:21:18.576]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:18.576]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:18.576]                 }
[16:21:18.576]                 ...future.workdir <- getwd()
[16:21:18.576]             }
[16:21:18.576]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:18.576]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:18.576]         }
[16:21:18.576]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:18.576]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:18.576]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:18.576]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:18.576]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:18.576]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:18.576]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:18.576]             base::names(...future.oldOptions))
[16:21:18.576]     }
[16:21:18.576]     if (FALSE) {
[16:21:18.576]     }
[16:21:18.576]     else {
[16:21:18.576]         if (TRUE) {
[16:21:18.576]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:18.576]                 open = "w")
[16:21:18.576]         }
[16:21:18.576]         else {
[16:21:18.576]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:18.576]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:18.576]         }
[16:21:18.576]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:18.576]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:18.576]             base::sink(type = "output", split = FALSE)
[16:21:18.576]             base::close(...future.stdout)
[16:21:18.576]         }, add = TRUE)
[16:21:18.576]     }
[16:21:18.576]     ...future.frame <- base::sys.nframe()
[16:21:18.576]     ...future.conditions <- base::list()
[16:21:18.576]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:18.576]     if (FALSE) {
[16:21:18.576]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:18.576]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:18.576]     }
[16:21:18.576]     ...future.result <- base::tryCatch({
[16:21:18.576]         base::withCallingHandlers({
[16:21:18.576]             ...future.value <- base::withVisible(base::local({
[16:21:18.576]                 ...future.makeSendCondition <- base::local({
[16:21:18.576]                   sendCondition <- NULL
[16:21:18.576]                   function(frame = 1L) {
[16:21:18.576]                     if (is.function(sendCondition)) 
[16:21:18.576]                       return(sendCondition)
[16:21:18.576]                     ns <- getNamespace("parallel")
[16:21:18.576]                     if (exists("sendData", mode = "function", 
[16:21:18.576]                       envir = ns)) {
[16:21:18.576]                       parallel_sendData <- get("sendData", mode = "function", 
[16:21:18.576]                         envir = ns)
[16:21:18.576]                       envir <- sys.frame(frame)
[16:21:18.576]                       master <- NULL
[16:21:18.576]                       while (!identical(envir, .GlobalEnv) && 
[16:21:18.576]                         !identical(envir, emptyenv())) {
[16:21:18.576]                         if (exists("master", mode = "list", envir = envir, 
[16:21:18.576]                           inherits = FALSE)) {
[16:21:18.576]                           master <- get("master", mode = "list", 
[16:21:18.576]                             envir = envir, inherits = FALSE)
[16:21:18.576]                           if (inherits(master, c("SOCKnode", 
[16:21:18.576]                             "SOCK0node"))) {
[16:21:18.576]                             sendCondition <<- function(cond) {
[16:21:18.576]                               data <- list(type = "VALUE", value = cond, 
[16:21:18.576]                                 success = TRUE)
[16:21:18.576]                               parallel_sendData(master, data)
[16:21:18.576]                             }
[16:21:18.576]                             return(sendCondition)
[16:21:18.576]                           }
[16:21:18.576]                         }
[16:21:18.576]                         frame <- frame + 1L
[16:21:18.576]                         envir <- sys.frame(frame)
[16:21:18.576]                       }
[16:21:18.576]                     }
[16:21:18.576]                     sendCondition <<- function(cond) NULL
[16:21:18.576]                   }
[16:21:18.576]                 })
[16:21:18.576]                 withCallingHandlers({
[16:21:18.576]                   {
[16:21:18.576]                     gc()
[16:21:18.576]                   }
[16:21:18.576]                 }, immediateCondition = function(cond) {
[16:21:18.576]                   sendCondition <- ...future.makeSendCondition()
[16:21:18.576]                   sendCondition(cond)
[16:21:18.576]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:18.576]                   {
[16:21:18.576]                     inherits <- base::inherits
[16:21:18.576]                     invokeRestart <- base::invokeRestart
[16:21:18.576]                     is.null <- base::is.null
[16:21:18.576]                     muffled <- FALSE
[16:21:18.576]                     if (inherits(cond, "message")) {
[16:21:18.576]                       muffled <- grepl(pattern, "muffleMessage")
[16:21:18.576]                       if (muffled) 
[16:21:18.576]                         invokeRestart("muffleMessage")
[16:21:18.576]                     }
[16:21:18.576]                     else if (inherits(cond, "warning")) {
[16:21:18.576]                       muffled <- grepl(pattern, "muffleWarning")
[16:21:18.576]                       if (muffled) 
[16:21:18.576]                         invokeRestart("muffleWarning")
[16:21:18.576]                     }
[16:21:18.576]                     else if (inherits(cond, "condition")) {
[16:21:18.576]                       if (!is.null(pattern)) {
[16:21:18.576]                         computeRestarts <- base::computeRestarts
[16:21:18.576]                         grepl <- base::grepl
[16:21:18.576]                         restarts <- computeRestarts(cond)
[16:21:18.576]                         for (restart in restarts) {
[16:21:18.576]                           name <- restart$name
[16:21:18.576]                           if (is.null(name)) 
[16:21:18.576]                             next
[16:21:18.576]                           if (!grepl(pattern, name)) 
[16:21:18.576]                             next
[16:21:18.576]                           invokeRestart(restart)
[16:21:18.576]                           muffled <- TRUE
[16:21:18.576]                           break
[16:21:18.576]                         }
[16:21:18.576]                       }
[16:21:18.576]                     }
[16:21:18.576]                     invisible(muffled)
[16:21:18.576]                   }
[16:21:18.576]                   muffleCondition(cond)
[16:21:18.576]                 })
[16:21:18.576]             }))
[16:21:18.576]             future::FutureResult(value = ...future.value$value, 
[16:21:18.576]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:18.576]                   ...future.rng), globalenv = if (FALSE) 
[16:21:18.576]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:18.576]                     ...future.globalenv.names))
[16:21:18.576]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:18.576]         }, condition = base::local({
[16:21:18.576]             c <- base::c
[16:21:18.576]             inherits <- base::inherits
[16:21:18.576]             invokeRestart <- base::invokeRestart
[16:21:18.576]             length <- base::length
[16:21:18.576]             list <- base::list
[16:21:18.576]             seq.int <- base::seq.int
[16:21:18.576]             signalCondition <- base::signalCondition
[16:21:18.576]             sys.calls <- base::sys.calls
[16:21:18.576]             `[[` <- base::`[[`
[16:21:18.576]             `+` <- base::`+`
[16:21:18.576]             `<<-` <- base::`<<-`
[16:21:18.576]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:18.576]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:18.576]                   3L)]
[16:21:18.576]             }
[16:21:18.576]             function(cond) {
[16:21:18.576]                 is_error <- inherits(cond, "error")
[16:21:18.576]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:18.576]                   NULL)
[16:21:18.576]                 if (is_error) {
[16:21:18.576]                   sessionInformation <- function() {
[16:21:18.576]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:18.576]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:18.576]                       search = base::search(), system = base::Sys.info())
[16:21:18.576]                   }
[16:21:18.576]                   ...future.conditions[[length(...future.conditions) + 
[16:21:18.576]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:18.576]                     cond$call), session = sessionInformation(), 
[16:21:18.576]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:18.576]                   signalCondition(cond)
[16:21:18.576]                 }
[16:21:18.576]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:18.576]                 "immediateCondition"))) {
[16:21:18.576]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:18.576]                   ...future.conditions[[length(...future.conditions) + 
[16:21:18.576]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:18.576]                   if (TRUE && !signal) {
[16:21:18.576]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:18.576]                     {
[16:21:18.576]                       inherits <- base::inherits
[16:21:18.576]                       invokeRestart <- base::invokeRestart
[16:21:18.576]                       is.null <- base::is.null
[16:21:18.576]                       muffled <- FALSE
[16:21:18.576]                       if (inherits(cond, "message")) {
[16:21:18.576]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:18.576]                         if (muffled) 
[16:21:18.576]                           invokeRestart("muffleMessage")
[16:21:18.576]                       }
[16:21:18.576]                       else if (inherits(cond, "warning")) {
[16:21:18.576]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:18.576]                         if (muffled) 
[16:21:18.576]                           invokeRestart("muffleWarning")
[16:21:18.576]                       }
[16:21:18.576]                       else if (inherits(cond, "condition")) {
[16:21:18.576]                         if (!is.null(pattern)) {
[16:21:18.576]                           computeRestarts <- base::computeRestarts
[16:21:18.576]                           grepl <- base::grepl
[16:21:18.576]                           restarts <- computeRestarts(cond)
[16:21:18.576]                           for (restart in restarts) {
[16:21:18.576]                             name <- restart$name
[16:21:18.576]                             if (is.null(name)) 
[16:21:18.576]                               next
[16:21:18.576]                             if (!grepl(pattern, name)) 
[16:21:18.576]                               next
[16:21:18.576]                             invokeRestart(restart)
[16:21:18.576]                             muffled <- TRUE
[16:21:18.576]                             break
[16:21:18.576]                           }
[16:21:18.576]                         }
[16:21:18.576]                       }
[16:21:18.576]                       invisible(muffled)
[16:21:18.576]                     }
[16:21:18.576]                     muffleCondition(cond, pattern = "^muffle")
[16:21:18.576]                   }
[16:21:18.576]                 }
[16:21:18.576]                 else {
[16:21:18.576]                   if (TRUE) {
[16:21:18.576]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:18.576]                     {
[16:21:18.576]                       inherits <- base::inherits
[16:21:18.576]                       invokeRestart <- base::invokeRestart
[16:21:18.576]                       is.null <- base::is.null
[16:21:18.576]                       muffled <- FALSE
[16:21:18.576]                       if (inherits(cond, "message")) {
[16:21:18.576]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:18.576]                         if (muffled) 
[16:21:18.576]                           invokeRestart("muffleMessage")
[16:21:18.576]                       }
[16:21:18.576]                       else if (inherits(cond, "warning")) {
[16:21:18.576]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:18.576]                         if (muffled) 
[16:21:18.576]                           invokeRestart("muffleWarning")
[16:21:18.576]                       }
[16:21:18.576]                       else if (inherits(cond, "condition")) {
[16:21:18.576]                         if (!is.null(pattern)) {
[16:21:18.576]                           computeRestarts <- base::computeRestarts
[16:21:18.576]                           grepl <- base::grepl
[16:21:18.576]                           restarts <- computeRestarts(cond)
[16:21:18.576]                           for (restart in restarts) {
[16:21:18.576]                             name <- restart$name
[16:21:18.576]                             if (is.null(name)) 
[16:21:18.576]                               next
[16:21:18.576]                             if (!grepl(pattern, name)) 
[16:21:18.576]                               next
[16:21:18.576]                             invokeRestart(restart)
[16:21:18.576]                             muffled <- TRUE
[16:21:18.576]                             break
[16:21:18.576]                           }
[16:21:18.576]                         }
[16:21:18.576]                       }
[16:21:18.576]                       invisible(muffled)
[16:21:18.576]                     }
[16:21:18.576]                     muffleCondition(cond, pattern = "^muffle")
[16:21:18.576]                   }
[16:21:18.576]                 }
[16:21:18.576]             }
[16:21:18.576]         }))
[16:21:18.576]     }, error = function(ex) {
[16:21:18.576]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:18.576]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:18.576]                 ...future.rng), started = ...future.startTime, 
[16:21:18.576]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:18.576]             version = "1.8"), class = "FutureResult")
[16:21:18.576]     }, finally = {
[16:21:18.576]         if (!identical(...future.workdir, getwd())) 
[16:21:18.576]             setwd(...future.workdir)
[16:21:18.576]         {
[16:21:18.576]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:18.576]                 ...future.oldOptions$nwarnings <- NULL
[16:21:18.576]             }
[16:21:18.576]             base::options(...future.oldOptions)
[16:21:18.576]             if (.Platform$OS.type == "windows") {
[16:21:18.576]                 old_names <- names(...future.oldEnvVars)
[16:21:18.576]                 envs <- base::Sys.getenv()
[16:21:18.576]                 names <- names(envs)
[16:21:18.576]                 common <- intersect(names, old_names)
[16:21:18.576]                 added <- setdiff(names, old_names)
[16:21:18.576]                 removed <- setdiff(old_names, names)
[16:21:18.576]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:18.576]                   envs[common]]
[16:21:18.576]                 NAMES <- toupper(changed)
[16:21:18.576]                 args <- list()
[16:21:18.576]                 for (kk in seq_along(NAMES)) {
[16:21:18.576]                   name <- changed[[kk]]
[16:21:18.576]                   NAME <- NAMES[[kk]]
[16:21:18.576]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:18.576]                     next
[16:21:18.576]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:18.576]                 }
[16:21:18.576]                 NAMES <- toupper(added)
[16:21:18.576]                 for (kk in seq_along(NAMES)) {
[16:21:18.576]                   name <- added[[kk]]
[16:21:18.576]                   NAME <- NAMES[[kk]]
[16:21:18.576]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:18.576]                     next
[16:21:18.576]                   args[[name]] <- ""
[16:21:18.576]                 }
[16:21:18.576]                 NAMES <- toupper(removed)
[16:21:18.576]                 for (kk in seq_along(NAMES)) {
[16:21:18.576]                   name <- removed[[kk]]
[16:21:18.576]                   NAME <- NAMES[[kk]]
[16:21:18.576]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:18.576]                     next
[16:21:18.576]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:18.576]                 }
[16:21:18.576]                 if (length(args) > 0) 
[16:21:18.576]                   base::do.call(base::Sys.setenv, args = args)
[16:21:18.576]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:18.576]             }
[16:21:18.576]             else {
[16:21:18.576]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:18.576]             }
[16:21:18.576]             {
[16:21:18.576]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:18.576]                   0L) {
[16:21:18.576]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:18.576]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:18.576]                   base::options(opts)
[16:21:18.576]                 }
[16:21:18.576]                 {
[16:21:18.576]                   {
[16:21:18.576]                     base::options(mc.cores = ...future.mc.cores.old)
[16:21:18.576]                     NULL
[16:21:18.576]                   }
[16:21:18.576]                   options(future.plan = NULL)
[16:21:18.576]                   if (is.na(NA_character_)) 
[16:21:18.576]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:18.576]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:18.576]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:18.576]                     .init = FALSE)
[16:21:18.576]                 }
[16:21:18.576]             }
[16:21:18.576]         }
[16:21:18.576]     })
[16:21:18.576]     if (TRUE) {
[16:21:18.576]         base::sink(type = "output", split = FALSE)
[16:21:18.576]         if (TRUE) {
[16:21:18.576]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:18.576]         }
[16:21:18.576]         else {
[16:21:18.576]             ...future.result["stdout"] <- base::list(NULL)
[16:21:18.576]         }
[16:21:18.576]         base::close(...future.stdout)
[16:21:18.576]         ...future.stdout <- NULL
[16:21:18.576]     }
[16:21:18.576]     ...future.result$conditions <- ...future.conditions
[16:21:18.576]     ...future.result$finished <- base::Sys.time()
[16:21:18.576]     ...future.result
[16:21:18.576] }
[16:21:18.578] MultisessionFuture started
[16:21:18.579] - Launch lazy future ... done
[16:21:18.579] run() for ‘MultisessionFuture’ ... done
> v <- value(f)
[16:21:18.579] result() for ClusterFuture ...
[16:21:18.579] receiveMessageFromWorker() for ClusterFuture ...
[16:21:18.579] - Validating connection of MultisessionFuture
[16:21:18.604] - received message: FutureResult
[16:21:18.604] - Received FutureResult
[16:21:18.604] - Erased future from FutureRegistry
[16:21:18.604] result() for ClusterFuture ...
[16:21:18.604] - result already collected: FutureResult
[16:21:18.605] result() for ClusterFuture ... done
[16:21:18.605] receiveMessageFromWorker() for ClusterFuture ... done
[16:21:18.605] result() for ClusterFuture ... done
[16:21:18.605] result() for ClusterFuture ...
[16:21:18.605] - result already collected: FutureResult
[16:21:18.605] result() for ClusterFuture ... done
> print(v)
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 394772 21.1     664331 35.5   664331 35.5
Vcells 703825  5.4    8388608 64.0  5725748 43.7
> 
> f <- future({ integer(10e6) }, gc = TRUE)
[16:21:18.605] getGlobalsAndPackages() ...
[16:21:18.605] Searching for globals...
[16:21:18.606] - globals found: [2] ‘{’, ‘integer’
[16:21:18.606] Searching for globals ... DONE
[16:21:18.607] Resolving globals: FALSE
[16:21:18.607] 
[16:21:18.607] 
[16:21:18.607] getGlobalsAndPackages() ... DONE
[16:21:18.607] run() for ‘Future’ ...
[16:21:18.607] - state: ‘created’
[16:21:18.608] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:21:18.618] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:21:18.618] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:21:18.618]   - Field: ‘node’
[16:21:18.618]   - Field: ‘label’
[16:21:18.618]   - Field: ‘local’
[16:21:18.619]   - Field: ‘owner’
[16:21:18.619]   - Field: ‘envir’
[16:21:18.619]   - Field: ‘workers’
[16:21:18.619]   - Field: ‘packages’
[16:21:18.619]   - Field: ‘gc’
[16:21:18.619]   - Field: ‘conditions’
[16:21:18.619]   - Field: ‘persistent’
[16:21:18.619]   - Field: ‘expr’
[16:21:18.619]   - Field: ‘uuid’
[16:21:18.619]   - Field: ‘seed’
[16:21:18.619]   - Field: ‘version’
[16:21:18.620]   - Field: ‘result’
[16:21:18.620]   - Field: ‘asynchronous’
[16:21:18.620]   - Field: ‘calls’
[16:21:18.620]   - Field: ‘globals’
[16:21:18.620]   - Field: ‘stdout’
[16:21:18.620]   - Field: ‘earlySignal’
[16:21:18.620]   - Field: ‘lazy’
[16:21:18.620]   - Field: ‘state’
[16:21:18.620] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:21:18.620] - Launch lazy future ...
[16:21:18.621] Packages needed by the future expression (n = 0): <none>
[16:21:18.621] Packages needed by future strategies (n = 0): <none>
[16:21:18.621] {
[16:21:18.621]     {
[16:21:18.621]         {
[16:21:18.621]             ...future.startTime <- base::Sys.time()
[16:21:18.621]             {
[16:21:18.621]                 {
[16:21:18.621]                   {
[16:21:18.621]                     {
[16:21:18.621]                       base::local({
[16:21:18.621]                         has_future <- base::requireNamespace("future", 
[16:21:18.621]                           quietly = TRUE)
[16:21:18.621]                         if (has_future) {
[16:21:18.621]                           ns <- base::getNamespace("future")
[16:21:18.621]                           version <- ns[[".package"]][["version"]]
[16:21:18.621]                           if (is.null(version)) 
[16:21:18.621]                             version <- utils::packageVersion("future")
[16:21:18.621]                         }
[16:21:18.621]                         else {
[16:21:18.621]                           version <- NULL
[16:21:18.621]                         }
[16:21:18.621]                         if (!has_future || version < "1.8.0") {
[16:21:18.621]                           info <- base::c(r_version = base::gsub("R version ", 
[16:21:18.621]                             "", base::R.version$version.string), 
[16:21:18.621]                             platform = base::sprintf("%s (%s-bit)", 
[16:21:18.621]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:18.621]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:18.621]                               "release", "version")], collapse = " "), 
[16:21:18.621]                             hostname = base::Sys.info()[["nodename"]])
[16:21:18.621]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:21:18.621]                             info)
[16:21:18.621]                           info <- base::paste(info, collapse = "; ")
[16:21:18.621]                           if (!has_future) {
[16:21:18.621]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:18.621]                               info)
[16:21:18.621]                           }
[16:21:18.621]                           else {
[16:21:18.621]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:18.621]                               info, version)
[16:21:18.621]                           }
[16:21:18.621]                           base::stop(msg)
[16:21:18.621]                         }
[16:21:18.621]                       })
[16:21:18.621]                     }
[16:21:18.621]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:21:18.621]                     base::options(mc.cores = 1L)
[16:21:18.621]                   }
[16:21:18.621]                   ...future.strategy.old <- future::plan("list")
[16:21:18.621]                   options(future.plan = NULL)
[16:21:18.621]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:18.621]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:18.621]                 }
[16:21:18.621]                 ...future.workdir <- getwd()
[16:21:18.621]             }
[16:21:18.621]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:18.621]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:18.621]         }
[16:21:18.621]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:18.621]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:18.621]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:18.621]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:18.621]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:18.621]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:18.621]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:18.621]             base::names(...future.oldOptions))
[16:21:18.621]     }
[16:21:18.621]     if (FALSE) {
[16:21:18.621]     }
[16:21:18.621]     else {
[16:21:18.621]         if (TRUE) {
[16:21:18.621]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:18.621]                 open = "w")
[16:21:18.621]         }
[16:21:18.621]         else {
[16:21:18.621]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:18.621]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:18.621]         }
[16:21:18.621]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:18.621]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:18.621]             base::sink(type = "output", split = FALSE)
[16:21:18.621]             base::close(...future.stdout)
[16:21:18.621]         }, add = TRUE)
[16:21:18.621]     }
[16:21:18.621]     ...future.frame <- base::sys.nframe()
[16:21:18.621]     ...future.conditions <- base::list()
[16:21:18.621]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:18.621]     if (FALSE) {
[16:21:18.621]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:18.621]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:18.621]     }
[16:21:18.621]     ...future.result <- base::tryCatch({
[16:21:18.621]         base::withCallingHandlers({
[16:21:18.621]             ...future.value <- base::withVisible(base::local({
[16:21:18.621]                 ...future.makeSendCondition <- base::local({
[16:21:18.621]                   sendCondition <- NULL
[16:21:18.621]                   function(frame = 1L) {
[16:21:18.621]                     if (is.function(sendCondition)) 
[16:21:18.621]                       return(sendCondition)
[16:21:18.621]                     ns <- getNamespace("parallel")
[16:21:18.621]                     if (exists("sendData", mode = "function", 
[16:21:18.621]                       envir = ns)) {
[16:21:18.621]                       parallel_sendData <- get("sendData", mode = "function", 
[16:21:18.621]                         envir = ns)
[16:21:18.621]                       envir <- sys.frame(frame)
[16:21:18.621]                       master <- NULL
[16:21:18.621]                       while (!identical(envir, .GlobalEnv) && 
[16:21:18.621]                         !identical(envir, emptyenv())) {
[16:21:18.621]                         if (exists("master", mode = "list", envir = envir, 
[16:21:18.621]                           inherits = FALSE)) {
[16:21:18.621]                           master <- get("master", mode = "list", 
[16:21:18.621]                             envir = envir, inherits = FALSE)
[16:21:18.621]                           if (inherits(master, c("SOCKnode", 
[16:21:18.621]                             "SOCK0node"))) {
[16:21:18.621]                             sendCondition <<- function(cond) {
[16:21:18.621]                               data <- list(type = "VALUE", value = cond, 
[16:21:18.621]                                 success = TRUE)
[16:21:18.621]                               parallel_sendData(master, data)
[16:21:18.621]                             }
[16:21:18.621]                             return(sendCondition)
[16:21:18.621]                           }
[16:21:18.621]                         }
[16:21:18.621]                         frame <- frame + 1L
[16:21:18.621]                         envir <- sys.frame(frame)
[16:21:18.621]                       }
[16:21:18.621]                     }
[16:21:18.621]                     sendCondition <<- function(cond) NULL
[16:21:18.621]                   }
[16:21:18.621]                 })
[16:21:18.621]                 withCallingHandlers({
[16:21:18.621]                   {
[16:21:18.621]                     integer(1e+07)
[16:21:18.621]                   }
[16:21:18.621]                 }, immediateCondition = function(cond) {
[16:21:18.621]                   sendCondition <- ...future.makeSendCondition()
[16:21:18.621]                   sendCondition(cond)
[16:21:18.621]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:18.621]                   {
[16:21:18.621]                     inherits <- base::inherits
[16:21:18.621]                     invokeRestart <- base::invokeRestart
[16:21:18.621]                     is.null <- base::is.null
[16:21:18.621]                     muffled <- FALSE
[16:21:18.621]                     if (inherits(cond, "message")) {
[16:21:18.621]                       muffled <- grepl(pattern, "muffleMessage")
[16:21:18.621]                       if (muffled) 
[16:21:18.621]                         invokeRestart("muffleMessage")
[16:21:18.621]                     }
[16:21:18.621]                     else if (inherits(cond, "warning")) {
[16:21:18.621]                       muffled <- grepl(pattern, "muffleWarning")
[16:21:18.621]                       if (muffled) 
[16:21:18.621]                         invokeRestart("muffleWarning")
[16:21:18.621]                     }
[16:21:18.621]                     else if (inherits(cond, "condition")) {
[16:21:18.621]                       if (!is.null(pattern)) {
[16:21:18.621]                         computeRestarts <- base::computeRestarts
[16:21:18.621]                         grepl <- base::grepl
[16:21:18.621]                         restarts <- computeRestarts(cond)
[16:21:18.621]                         for (restart in restarts) {
[16:21:18.621]                           name <- restart$name
[16:21:18.621]                           if (is.null(name)) 
[16:21:18.621]                             next
[16:21:18.621]                           if (!grepl(pattern, name)) 
[16:21:18.621]                             next
[16:21:18.621]                           invokeRestart(restart)
[16:21:18.621]                           muffled <- TRUE
[16:21:18.621]                           break
[16:21:18.621]                         }
[16:21:18.621]                       }
[16:21:18.621]                     }
[16:21:18.621]                     invisible(muffled)
[16:21:18.621]                   }
[16:21:18.621]                   muffleCondition(cond)
[16:21:18.621]                 })
[16:21:18.621]             }))
[16:21:18.621]             future::FutureResult(value = ...future.value$value, 
[16:21:18.621]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:18.621]                   ...future.rng), globalenv = if (FALSE) 
[16:21:18.621]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:18.621]                     ...future.globalenv.names))
[16:21:18.621]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:18.621]         }, condition = base::local({
[16:21:18.621]             c <- base::c
[16:21:18.621]             inherits <- base::inherits
[16:21:18.621]             invokeRestart <- base::invokeRestart
[16:21:18.621]             length <- base::length
[16:21:18.621]             list <- base::list
[16:21:18.621]             seq.int <- base::seq.int
[16:21:18.621]             signalCondition <- base::signalCondition
[16:21:18.621]             sys.calls <- base::sys.calls
[16:21:18.621]             `[[` <- base::`[[`
[16:21:18.621]             `+` <- base::`+`
[16:21:18.621]             `<<-` <- base::`<<-`
[16:21:18.621]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:18.621]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:18.621]                   3L)]
[16:21:18.621]             }
[16:21:18.621]             function(cond) {
[16:21:18.621]                 is_error <- inherits(cond, "error")
[16:21:18.621]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:18.621]                   NULL)
[16:21:18.621]                 if (is_error) {
[16:21:18.621]                   sessionInformation <- function() {
[16:21:18.621]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:18.621]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:18.621]                       search = base::search(), system = base::Sys.info())
[16:21:18.621]                   }
[16:21:18.621]                   ...future.conditions[[length(...future.conditions) + 
[16:21:18.621]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:18.621]                     cond$call), session = sessionInformation(), 
[16:21:18.621]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:18.621]                   signalCondition(cond)
[16:21:18.621]                 }
[16:21:18.621]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:18.621]                 "immediateCondition"))) {
[16:21:18.621]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:18.621]                   ...future.conditions[[length(...future.conditions) + 
[16:21:18.621]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:18.621]                   if (TRUE && !signal) {
[16:21:18.621]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:18.621]                     {
[16:21:18.621]                       inherits <- base::inherits
[16:21:18.621]                       invokeRestart <- base::invokeRestart
[16:21:18.621]                       is.null <- base::is.null
[16:21:18.621]                       muffled <- FALSE
[16:21:18.621]                       if (inherits(cond, "message")) {
[16:21:18.621]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:18.621]                         if (muffled) 
[16:21:18.621]                           invokeRestart("muffleMessage")
[16:21:18.621]                       }
[16:21:18.621]                       else if (inherits(cond, "warning")) {
[16:21:18.621]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:18.621]                         if (muffled) 
[16:21:18.621]                           invokeRestart("muffleWarning")
[16:21:18.621]                       }
[16:21:18.621]                       else if (inherits(cond, "condition")) {
[16:21:18.621]                         if (!is.null(pattern)) {
[16:21:18.621]                           computeRestarts <- base::computeRestarts
[16:21:18.621]                           grepl <- base::grepl
[16:21:18.621]                           restarts <- computeRestarts(cond)
[16:21:18.621]                           for (restart in restarts) {
[16:21:18.621]                             name <- restart$name
[16:21:18.621]                             if (is.null(name)) 
[16:21:18.621]                               next
[16:21:18.621]                             if (!grepl(pattern, name)) 
[16:21:18.621]                               next
[16:21:18.621]                             invokeRestart(restart)
[16:21:18.621]                             muffled <- TRUE
[16:21:18.621]                             break
[16:21:18.621]                           }
[16:21:18.621]                         }
[16:21:18.621]                       }
[16:21:18.621]                       invisible(muffled)
[16:21:18.621]                     }
[16:21:18.621]                     muffleCondition(cond, pattern = "^muffle")
[16:21:18.621]                   }
[16:21:18.621]                 }
[16:21:18.621]                 else {
[16:21:18.621]                   if (TRUE) {
[16:21:18.621]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:18.621]                     {
[16:21:18.621]                       inherits <- base::inherits
[16:21:18.621]                       invokeRestart <- base::invokeRestart
[16:21:18.621]                       is.null <- base::is.null
[16:21:18.621]                       muffled <- FALSE
[16:21:18.621]                       if (inherits(cond, "message")) {
[16:21:18.621]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:18.621]                         if (muffled) 
[16:21:18.621]                           invokeRestart("muffleMessage")
[16:21:18.621]                       }
[16:21:18.621]                       else if (inherits(cond, "warning")) {
[16:21:18.621]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:18.621]                         if (muffled) 
[16:21:18.621]                           invokeRestart("muffleWarning")
[16:21:18.621]                       }
[16:21:18.621]                       else if (inherits(cond, "condition")) {
[16:21:18.621]                         if (!is.null(pattern)) {
[16:21:18.621]                           computeRestarts <- base::computeRestarts
[16:21:18.621]                           grepl <- base::grepl
[16:21:18.621]                           restarts <- computeRestarts(cond)
[16:21:18.621]                           for (restart in restarts) {
[16:21:18.621]                             name <- restart$name
[16:21:18.621]                             if (is.null(name)) 
[16:21:18.621]                               next
[16:21:18.621]                             if (!grepl(pattern, name)) 
[16:21:18.621]                               next
[16:21:18.621]                             invokeRestart(restart)
[16:21:18.621]                             muffled <- TRUE
[16:21:18.621]                             break
[16:21:18.621]                           }
[16:21:18.621]                         }
[16:21:18.621]                       }
[16:21:18.621]                       invisible(muffled)
[16:21:18.621]                     }
[16:21:18.621]                     muffleCondition(cond, pattern = "^muffle")
[16:21:18.621]                   }
[16:21:18.621]                 }
[16:21:18.621]             }
[16:21:18.621]         }))
[16:21:18.621]     }, error = function(ex) {
[16:21:18.621]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:18.621]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:18.621]                 ...future.rng), started = ...future.startTime, 
[16:21:18.621]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:18.621]             version = "1.8"), class = "FutureResult")
[16:21:18.621]     }, finally = {
[16:21:18.621]         if (!identical(...future.workdir, getwd())) 
[16:21:18.621]             setwd(...future.workdir)
[16:21:18.621]         {
[16:21:18.621]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:18.621]                 ...future.oldOptions$nwarnings <- NULL
[16:21:18.621]             }
[16:21:18.621]             base::options(...future.oldOptions)
[16:21:18.621]             if (.Platform$OS.type == "windows") {
[16:21:18.621]                 old_names <- names(...future.oldEnvVars)
[16:21:18.621]                 envs <- base::Sys.getenv()
[16:21:18.621]                 names <- names(envs)
[16:21:18.621]                 common <- intersect(names, old_names)
[16:21:18.621]                 added <- setdiff(names, old_names)
[16:21:18.621]                 removed <- setdiff(old_names, names)
[16:21:18.621]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:18.621]                   envs[common]]
[16:21:18.621]                 NAMES <- toupper(changed)
[16:21:18.621]                 args <- list()
[16:21:18.621]                 for (kk in seq_along(NAMES)) {
[16:21:18.621]                   name <- changed[[kk]]
[16:21:18.621]                   NAME <- NAMES[[kk]]
[16:21:18.621]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:18.621]                     next
[16:21:18.621]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:18.621]                 }
[16:21:18.621]                 NAMES <- toupper(added)
[16:21:18.621]                 for (kk in seq_along(NAMES)) {
[16:21:18.621]                   name <- added[[kk]]
[16:21:18.621]                   NAME <- NAMES[[kk]]
[16:21:18.621]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:18.621]                     next
[16:21:18.621]                   args[[name]] <- ""
[16:21:18.621]                 }
[16:21:18.621]                 NAMES <- toupper(removed)
[16:21:18.621]                 for (kk in seq_along(NAMES)) {
[16:21:18.621]                   name <- removed[[kk]]
[16:21:18.621]                   NAME <- NAMES[[kk]]
[16:21:18.621]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:18.621]                     next
[16:21:18.621]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:18.621]                 }
[16:21:18.621]                 if (length(args) > 0) 
[16:21:18.621]                   base::do.call(base::Sys.setenv, args = args)
[16:21:18.621]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:18.621]             }
[16:21:18.621]             else {
[16:21:18.621]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:18.621]             }
[16:21:18.621]             {
[16:21:18.621]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:18.621]                   0L) {
[16:21:18.621]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:18.621]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:18.621]                   base::options(opts)
[16:21:18.621]                 }
[16:21:18.621]                 {
[16:21:18.621]                   {
[16:21:18.621]                     base::options(mc.cores = ...future.mc.cores.old)
[16:21:18.621]                     NULL
[16:21:18.621]                   }
[16:21:18.621]                   options(future.plan = NULL)
[16:21:18.621]                   if (is.na(NA_character_)) 
[16:21:18.621]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:18.621]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:18.621]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:18.621]                     .init = FALSE)
[16:21:18.621]                 }
[16:21:18.621]             }
[16:21:18.621]         }
[16:21:18.621]     })
[16:21:18.621]     if (TRUE) {
[16:21:18.621]         base::sink(type = "output", split = FALSE)
[16:21:18.621]         if (TRUE) {
[16:21:18.621]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:18.621]         }
[16:21:18.621]         else {
[16:21:18.621]             ...future.result["stdout"] <- base::list(NULL)
[16:21:18.621]         }
[16:21:18.621]         base::close(...future.stdout)
[16:21:18.621]         ...future.stdout <- NULL
[16:21:18.621]     }
[16:21:18.621]     ...future.result$conditions <- ...future.conditions
[16:21:18.621]     ...future.result$finished <- base::Sys.time()
[16:21:18.621]     ...future.result
[16:21:18.621] }
[16:21:18.624] MultisessionFuture started
[16:21:18.624] - Launch lazy future ... done
[16:21:18.624] run() for ‘MultisessionFuture’ ... done
> v <- value(f)
[16:21:18.625] result() for ClusterFuture ...
[16:21:18.625] receiveMessageFromWorker() for ClusterFuture ...
[16:21:18.625] - Validating connection of MultisessionFuture
[16:21:18.696] - received message: FutureResult
[16:21:18.696] - Received FutureResult
[16:21:18.696] - Erased future from FutureRegistry
[16:21:18.696] result() for ClusterFuture ...
[16:21:18.696] - result already collected: FutureResult
[16:21:18.696] result() for ClusterFuture ... done
[16:21:18.697] - Garbage collecting worker ...
[16:21:18.929] - Garbage collecting worker ... done
[16:21:18.929] receiveMessageFromWorker() for ClusterFuture ... done
[16:21:18.929] result() for ClusterFuture ... done
[16:21:18.929] result() for ClusterFuture ...
[16:21:18.929] - result already collected: FutureResult
[16:21:18.929] result() for ClusterFuture ... done
> str(v)
 int [1:10000000] 0 0 0 0 0 0 0 0 0 0 ...
> 
> f <- future({ gc() })
[16:21:18.930] getGlobalsAndPackages() ...
[16:21:18.930] Searching for globals...
[16:21:18.931] - globals found: [2] ‘{’, ‘gc’
[16:21:18.931] Searching for globals ... DONE
[16:21:18.931] Resolving globals: FALSE
[16:21:18.932] 
[16:21:18.932] 
[16:21:18.932] getGlobalsAndPackages() ... DONE
[16:21:18.932] run() for ‘Future’ ...
[16:21:18.932] - state: ‘created’
[16:21:18.932] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:21:18.943] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:21:18.943] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:21:18.943]   - Field: ‘node’
[16:21:18.943]   - Field: ‘label’
[16:21:18.943]   - Field: ‘local’
[16:21:18.944]   - Field: ‘owner’
[16:21:18.944]   - Field: ‘envir’
[16:21:18.944]   - Field: ‘workers’
[16:21:18.944]   - Field: ‘packages’
[16:21:18.944]   - Field: ‘gc’
[16:21:18.944]   - Field: ‘conditions’
[16:21:18.944]   - Field: ‘persistent’
[16:21:18.944]   - Field: ‘expr’
[16:21:18.944]   - Field: ‘uuid’
[16:21:18.944]   - Field: ‘seed’
[16:21:18.945]   - Field: ‘version’
[16:21:18.945]   - Field: ‘result’
[16:21:18.945]   - Field: ‘asynchronous’
[16:21:18.945]   - Field: ‘calls’
[16:21:18.945]   - Field: ‘globals’
[16:21:18.945]   - Field: ‘stdout’
[16:21:18.945]   - Field: ‘earlySignal’
[16:21:18.945]   - Field: ‘lazy’
[16:21:18.945]   - Field: ‘state’
[16:21:18.945] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:21:18.945] - Launch lazy future ...
[16:21:18.946] Packages needed by the future expression (n = 0): <none>
[16:21:18.946] Packages needed by future strategies (n = 0): <none>
[16:21:18.946] {
[16:21:18.946]     {
[16:21:18.946]         {
[16:21:18.946]             ...future.startTime <- base::Sys.time()
[16:21:18.946]             {
[16:21:18.946]                 {
[16:21:18.946]                   {
[16:21:18.946]                     {
[16:21:18.946]                       base::local({
[16:21:18.946]                         has_future <- base::requireNamespace("future", 
[16:21:18.946]                           quietly = TRUE)
[16:21:18.946]                         if (has_future) {
[16:21:18.946]                           ns <- base::getNamespace("future")
[16:21:18.946]                           version <- ns[[".package"]][["version"]]
[16:21:18.946]                           if (is.null(version)) 
[16:21:18.946]                             version <- utils::packageVersion("future")
[16:21:18.946]                         }
[16:21:18.946]                         else {
[16:21:18.946]                           version <- NULL
[16:21:18.946]                         }
[16:21:18.946]                         if (!has_future || version < "1.8.0") {
[16:21:18.946]                           info <- base::c(r_version = base::gsub("R version ", 
[16:21:18.946]                             "", base::R.version$version.string), 
[16:21:18.946]                             platform = base::sprintf("%s (%s-bit)", 
[16:21:18.946]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:18.946]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:18.946]                               "release", "version")], collapse = " "), 
[16:21:18.946]                             hostname = base::Sys.info()[["nodename"]])
[16:21:18.946]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:21:18.946]                             info)
[16:21:18.946]                           info <- base::paste(info, collapse = "; ")
[16:21:18.946]                           if (!has_future) {
[16:21:18.946]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:18.946]                               info)
[16:21:18.946]                           }
[16:21:18.946]                           else {
[16:21:18.946]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:18.946]                               info, version)
[16:21:18.946]                           }
[16:21:18.946]                           base::stop(msg)
[16:21:18.946]                         }
[16:21:18.946]                       })
[16:21:18.946]                     }
[16:21:18.946]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:21:18.946]                     base::options(mc.cores = 1L)
[16:21:18.946]                   }
[16:21:18.946]                   ...future.strategy.old <- future::plan("list")
[16:21:18.946]                   options(future.plan = NULL)
[16:21:18.946]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:18.946]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:18.946]                 }
[16:21:18.946]                 ...future.workdir <- getwd()
[16:21:18.946]             }
[16:21:18.946]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:18.946]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:18.946]         }
[16:21:18.946]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:18.946]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:18.946]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:18.946]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:18.946]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:18.946]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:18.946]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:18.946]             base::names(...future.oldOptions))
[16:21:18.946]     }
[16:21:18.946]     if (FALSE) {
[16:21:18.946]     }
[16:21:18.946]     else {
[16:21:18.946]         if (TRUE) {
[16:21:18.946]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:18.946]                 open = "w")
[16:21:18.946]         }
[16:21:18.946]         else {
[16:21:18.946]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:18.946]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:18.946]         }
[16:21:18.946]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:18.946]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:18.946]             base::sink(type = "output", split = FALSE)
[16:21:18.946]             base::close(...future.stdout)
[16:21:18.946]         }, add = TRUE)
[16:21:18.946]     }
[16:21:18.946]     ...future.frame <- base::sys.nframe()
[16:21:18.946]     ...future.conditions <- base::list()
[16:21:18.946]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:18.946]     if (FALSE) {
[16:21:18.946]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:18.946]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:18.946]     }
[16:21:18.946]     ...future.result <- base::tryCatch({
[16:21:18.946]         base::withCallingHandlers({
[16:21:18.946]             ...future.value <- base::withVisible(base::local({
[16:21:18.946]                 ...future.makeSendCondition <- base::local({
[16:21:18.946]                   sendCondition <- NULL
[16:21:18.946]                   function(frame = 1L) {
[16:21:18.946]                     if (is.function(sendCondition)) 
[16:21:18.946]                       return(sendCondition)
[16:21:18.946]                     ns <- getNamespace("parallel")
[16:21:18.946]                     if (exists("sendData", mode = "function", 
[16:21:18.946]                       envir = ns)) {
[16:21:18.946]                       parallel_sendData <- get("sendData", mode = "function", 
[16:21:18.946]                         envir = ns)
[16:21:18.946]                       envir <- sys.frame(frame)
[16:21:18.946]                       master <- NULL
[16:21:18.946]                       while (!identical(envir, .GlobalEnv) && 
[16:21:18.946]                         !identical(envir, emptyenv())) {
[16:21:18.946]                         if (exists("master", mode = "list", envir = envir, 
[16:21:18.946]                           inherits = FALSE)) {
[16:21:18.946]                           master <- get("master", mode = "list", 
[16:21:18.946]                             envir = envir, inherits = FALSE)
[16:21:18.946]                           if (inherits(master, c("SOCKnode", 
[16:21:18.946]                             "SOCK0node"))) {
[16:21:18.946]                             sendCondition <<- function(cond) {
[16:21:18.946]                               data <- list(type = "VALUE", value = cond, 
[16:21:18.946]                                 success = TRUE)
[16:21:18.946]                               parallel_sendData(master, data)
[16:21:18.946]                             }
[16:21:18.946]                             return(sendCondition)
[16:21:18.946]                           }
[16:21:18.946]                         }
[16:21:18.946]                         frame <- frame + 1L
[16:21:18.946]                         envir <- sys.frame(frame)
[16:21:18.946]                       }
[16:21:18.946]                     }
[16:21:18.946]                     sendCondition <<- function(cond) NULL
[16:21:18.946]                   }
[16:21:18.946]                 })
[16:21:18.946]                 withCallingHandlers({
[16:21:18.946]                   {
[16:21:18.946]                     gc()
[16:21:18.946]                   }
[16:21:18.946]                 }, immediateCondition = function(cond) {
[16:21:18.946]                   sendCondition <- ...future.makeSendCondition()
[16:21:18.946]                   sendCondition(cond)
[16:21:18.946]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:18.946]                   {
[16:21:18.946]                     inherits <- base::inherits
[16:21:18.946]                     invokeRestart <- base::invokeRestart
[16:21:18.946]                     is.null <- base::is.null
[16:21:18.946]                     muffled <- FALSE
[16:21:18.946]                     if (inherits(cond, "message")) {
[16:21:18.946]                       muffled <- grepl(pattern, "muffleMessage")
[16:21:18.946]                       if (muffled) 
[16:21:18.946]                         invokeRestart("muffleMessage")
[16:21:18.946]                     }
[16:21:18.946]                     else if (inherits(cond, "warning")) {
[16:21:18.946]                       muffled <- grepl(pattern, "muffleWarning")
[16:21:18.946]                       if (muffled) 
[16:21:18.946]                         invokeRestart("muffleWarning")
[16:21:18.946]                     }
[16:21:18.946]                     else if (inherits(cond, "condition")) {
[16:21:18.946]                       if (!is.null(pattern)) {
[16:21:18.946]                         computeRestarts <- base::computeRestarts
[16:21:18.946]                         grepl <- base::grepl
[16:21:18.946]                         restarts <- computeRestarts(cond)
[16:21:18.946]                         for (restart in restarts) {
[16:21:18.946]                           name <- restart$name
[16:21:18.946]                           if (is.null(name)) 
[16:21:18.946]                             next
[16:21:18.946]                           if (!grepl(pattern, name)) 
[16:21:18.946]                             next
[16:21:18.946]                           invokeRestart(restart)
[16:21:18.946]                           muffled <- TRUE
[16:21:18.946]                           break
[16:21:18.946]                         }
[16:21:18.946]                       }
[16:21:18.946]                     }
[16:21:18.946]                     invisible(muffled)
[16:21:18.946]                   }
[16:21:18.946]                   muffleCondition(cond)
[16:21:18.946]                 })
[16:21:18.946]             }))
[16:21:18.946]             future::FutureResult(value = ...future.value$value, 
[16:21:18.946]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:18.946]                   ...future.rng), globalenv = if (FALSE) 
[16:21:18.946]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:18.946]                     ...future.globalenv.names))
[16:21:18.946]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:18.946]         }, condition = base::local({
[16:21:18.946]             c <- base::c
[16:21:18.946]             inherits <- base::inherits
[16:21:18.946]             invokeRestart <- base::invokeRestart
[16:21:18.946]             length <- base::length
[16:21:18.946]             list <- base::list
[16:21:18.946]             seq.int <- base::seq.int
[16:21:18.946]             signalCondition <- base::signalCondition
[16:21:18.946]             sys.calls <- base::sys.calls
[16:21:18.946]             `[[` <- base::`[[`
[16:21:18.946]             `+` <- base::`+`
[16:21:18.946]             `<<-` <- base::`<<-`
[16:21:18.946]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:18.946]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:18.946]                   3L)]
[16:21:18.946]             }
[16:21:18.946]             function(cond) {
[16:21:18.946]                 is_error <- inherits(cond, "error")
[16:21:18.946]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:18.946]                   NULL)
[16:21:18.946]                 if (is_error) {
[16:21:18.946]                   sessionInformation <- function() {
[16:21:18.946]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:18.946]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:18.946]                       search = base::search(), system = base::Sys.info())
[16:21:18.946]                   }
[16:21:18.946]                   ...future.conditions[[length(...future.conditions) + 
[16:21:18.946]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:18.946]                     cond$call), session = sessionInformation(), 
[16:21:18.946]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:18.946]                   signalCondition(cond)
[16:21:18.946]                 }
[16:21:18.946]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:18.946]                 "immediateCondition"))) {
[16:21:18.946]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:18.946]                   ...future.conditions[[length(...future.conditions) + 
[16:21:18.946]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:18.946]                   if (TRUE && !signal) {
[16:21:18.946]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:18.946]                     {
[16:21:18.946]                       inherits <- base::inherits
[16:21:18.946]                       invokeRestart <- base::invokeRestart
[16:21:18.946]                       is.null <- base::is.null
[16:21:18.946]                       muffled <- FALSE
[16:21:18.946]                       if (inherits(cond, "message")) {
[16:21:18.946]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:18.946]                         if (muffled) 
[16:21:18.946]                           invokeRestart("muffleMessage")
[16:21:18.946]                       }
[16:21:18.946]                       else if (inherits(cond, "warning")) {
[16:21:18.946]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:18.946]                         if (muffled) 
[16:21:18.946]                           invokeRestart("muffleWarning")
[16:21:18.946]                       }
[16:21:18.946]                       else if (inherits(cond, "condition")) {
[16:21:18.946]                         if (!is.null(pattern)) {
[16:21:18.946]                           computeRestarts <- base::computeRestarts
[16:21:18.946]                           grepl <- base::grepl
[16:21:18.946]                           restarts <- computeRestarts(cond)
[16:21:18.946]                           for (restart in restarts) {
[16:21:18.946]                             name <- restart$name
[16:21:18.946]                             if (is.null(name)) 
[16:21:18.946]                               next
[16:21:18.946]                             if (!grepl(pattern, name)) 
[16:21:18.946]                               next
[16:21:18.946]                             invokeRestart(restart)
[16:21:18.946]                             muffled <- TRUE
[16:21:18.946]                             break
[16:21:18.946]                           }
[16:21:18.946]                         }
[16:21:18.946]                       }
[16:21:18.946]                       invisible(muffled)
[16:21:18.946]                     }
[16:21:18.946]                     muffleCondition(cond, pattern = "^muffle")
[16:21:18.946]                   }
[16:21:18.946]                 }
[16:21:18.946]                 else {
[16:21:18.946]                   if (TRUE) {
[16:21:18.946]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:18.946]                     {
[16:21:18.946]                       inherits <- base::inherits
[16:21:18.946]                       invokeRestart <- base::invokeRestart
[16:21:18.946]                       is.null <- base::is.null
[16:21:18.946]                       muffled <- FALSE
[16:21:18.946]                       if (inherits(cond, "message")) {
[16:21:18.946]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:18.946]                         if (muffled) 
[16:21:18.946]                           invokeRestart("muffleMessage")
[16:21:18.946]                       }
[16:21:18.946]                       else if (inherits(cond, "warning")) {
[16:21:18.946]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:18.946]                         if (muffled) 
[16:21:18.946]                           invokeRestart("muffleWarning")
[16:21:18.946]                       }
[16:21:18.946]                       else if (inherits(cond, "condition")) {
[16:21:18.946]                         if (!is.null(pattern)) {
[16:21:18.946]                           computeRestarts <- base::computeRestarts
[16:21:18.946]                           grepl <- base::grepl
[16:21:18.946]                           restarts <- computeRestarts(cond)
[16:21:18.946]                           for (restart in restarts) {
[16:21:18.946]                             name <- restart$name
[16:21:18.946]                             if (is.null(name)) 
[16:21:18.946]                               next
[16:21:18.946]                             if (!grepl(pattern, name)) 
[16:21:18.946]                               next
[16:21:18.946]                             invokeRestart(restart)
[16:21:18.946]                             muffled <- TRUE
[16:21:18.946]                             break
[16:21:18.946]                           }
[16:21:18.946]                         }
[16:21:18.946]                       }
[16:21:18.946]                       invisible(muffled)
[16:21:18.946]                     }
[16:21:18.946]                     muffleCondition(cond, pattern = "^muffle")
[16:21:18.946]                   }
[16:21:18.946]                 }
[16:21:18.946]             }
[16:21:18.946]         }))
[16:21:18.946]     }, error = function(ex) {
[16:21:18.946]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:18.946]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:18.946]                 ...future.rng), started = ...future.startTime, 
[16:21:18.946]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:18.946]             version = "1.8"), class = "FutureResult")
[16:21:18.946]     }, finally = {
[16:21:18.946]         if (!identical(...future.workdir, getwd())) 
[16:21:18.946]             setwd(...future.workdir)
[16:21:18.946]         {
[16:21:18.946]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:18.946]                 ...future.oldOptions$nwarnings <- NULL
[16:21:18.946]             }
[16:21:18.946]             base::options(...future.oldOptions)
[16:21:18.946]             if (.Platform$OS.type == "windows") {
[16:21:18.946]                 old_names <- names(...future.oldEnvVars)
[16:21:18.946]                 envs <- base::Sys.getenv()
[16:21:18.946]                 names <- names(envs)
[16:21:18.946]                 common <- intersect(names, old_names)
[16:21:18.946]                 added <- setdiff(names, old_names)
[16:21:18.946]                 removed <- setdiff(old_names, names)
[16:21:18.946]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:18.946]                   envs[common]]
[16:21:18.946]                 NAMES <- toupper(changed)
[16:21:18.946]                 args <- list()
[16:21:18.946]                 for (kk in seq_along(NAMES)) {
[16:21:18.946]                   name <- changed[[kk]]
[16:21:18.946]                   NAME <- NAMES[[kk]]
[16:21:18.946]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:18.946]                     next
[16:21:18.946]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:18.946]                 }
[16:21:18.946]                 NAMES <- toupper(added)
[16:21:18.946]                 for (kk in seq_along(NAMES)) {
[16:21:18.946]                   name <- added[[kk]]
[16:21:18.946]                   NAME <- NAMES[[kk]]
[16:21:18.946]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:18.946]                     next
[16:21:18.946]                   args[[name]] <- ""
[16:21:18.946]                 }
[16:21:18.946]                 NAMES <- toupper(removed)
[16:21:18.946]                 for (kk in seq_along(NAMES)) {
[16:21:18.946]                   name <- removed[[kk]]
[16:21:18.946]                   NAME <- NAMES[[kk]]
[16:21:18.946]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:18.946]                     next
[16:21:18.946]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:18.946]                 }
[16:21:18.946]                 if (length(args) > 0) 
[16:21:18.946]                   base::do.call(base::Sys.setenv, args = args)
[16:21:18.946]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:18.946]             }
[16:21:18.946]             else {
[16:21:18.946]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:18.946]             }
[16:21:18.946]             {
[16:21:18.946]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:18.946]                   0L) {
[16:21:18.946]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:18.946]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:18.946]                   base::options(opts)
[16:21:18.946]                 }
[16:21:18.946]                 {
[16:21:18.946]                   {
[16:21:18.946]                     base::options(mc.cores = ...future.mc.cores.old)
[16:21:18.946]                     NULL
[16:21:18.946]                   }
[16:21:18.946]                   options(future.plan = NULL)
[16:21:18.946]                   if (is.na(NA_character_)) 
[16:21:18.946]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:18.946]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:18.946]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:18.946]                     .init = FALSE)
[16:21:18.946]                 }
[16:21:18.946]             }
[16:21:18.946]         }
[16:21:18.946]     })
[16:21:18.946]     if (TRUE) {
[16:21:18.946]         base::sink(type = "output", split = FALSE)
[16:21:18.946]         if (TRUE) {
[16:21:18.946]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:18.946]         }
[16:21:18.946]         else {
[16:21:18.946]             ...future.result["stdout"] <- base::list(NULL)
[16:21:18.946]         }
[16:21:18.946]         base::close(...future.stdout)
[16:21:18.946]         ...future.stdout <- NULL
[16:21:18.946]     }
[16:21:18.946]     ...future.result$conditions <- ...future.conditions
[16:21:18.946]     ...future.result$finished <- base::Sys.time()
[16:21:18.946]     ...future.result
[16:21:18.946] }
[16:21:18.949] MultisessionFuture started
[16:21:18.949] - Launch lazy future ... done
[16:21:18.949] run() for ‘MultisessionFuture’ ... done
> v <- value(f)
[16:21:18.950] result() for ClusterFuture ...
[16:21:18.950] receiveMessageFromWorker() for ClusterFuture ...
[16:21:18.950] - Validating connection of MultisessionFuture
[16:21:19.017] - received message: FutureResult
[16:21:19.017] - Received FutureResult
[16:21:19.018] - Erased future from FutureRegistry
[16:21:19.018] result() for ClusterFuture ...
[16:21:19.018] - result already collected: FutureResult
[16:21:19.018] result() for ClusterFuture ... done
[16:21:19.018] receiveMessageFromWorker() for ClusterFuture ... done
[16:21:19.018] result() for ClusterFuture ... done
[16:21:19.018] result() for ClusterFuture ...
[16:21:19.018] - result already collected: FutureResult
[16:21:19.018] result() for ClusterFuture ... done
> print(v)
         used (Mb) gc trigger  (Mb) max used  (Mb)
Ncells 394917 21.1     878051  46.9   664331  35.5
Vcells 703914  5.4   13457143 102.7 15780323 120.4
> 
> message("*** multisession(..., gc = TRUE) ... TRUE")
*** multisession(..., gc = TRUE) ... TRUE
> 
> 
> message("*** multisession(...) - stopping with plan() change ...")
*** multisession(...) - stopping with plan() change ...
>   
> plan(multisession, workers = 2L)
[16:21:19.019] plan(): Setting new future strategy stack:
[16:21:19.019] List of future strategies:
[16:21:19.019] 1. multisession:
[16:21:19.019]    - args: function (..., workers = 2L, envir = parent.frame())
[16:21:19.019]    - tweaked: TRUE
[16:21:19.019]    - call: plan(multisession, workers = 2L)
[16:21:19.020] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[16:21:19.020] multisession:
[16:21:19.020] - args: function (..., workers = 2L, envir = parent.frame())
[16:21:19.020] - tweaked: TRUE
[16:21:19.020] - call: plan(multisession, workers = 2L)
[16:21:19.021] getGlobalsAndPackages() ...
[16:21:19.021] Not searching for globals
[16:21:19.021] - globals: [0] <none>
[16:21:19.021] getGlobalsAndPackages() ... DONE
[16:21:19.022] [local output] makeClusterPSOCK() ...
[16:21:19.026] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[16:21:19.027] [local output] Base port: 11386
[16:21:19.027] [local output] Getting setup options for 2 cluster nodes ...
[16:21:19.027] [local output]  - Node 1 of 2 ...
[16:21:19.028] [local output] localMachine=TRUE => revtunnel=FALSE

[16:21:19.028] [local output] Rscript port: 11386

[16:21:19.029] [local output]  - Node 2 of 2 ...
[16:21:19.029] [local output] localMachine=TRUE => revtunnel=FALSE

[16:21:19.030] [local output] Rscript port: 11386

[16:21:19.030] [local output] Getting setup options for 2 cluster nodes ... done
[16:21:19.031] [local output]  - Parallel setup requested for some PSOCK nodes
[16:21:19.031] [local output] Setting up PSOCK nodes in parallel
[16:21:19.031] List of 36
[16:21:19.031]  $ worker          : chr "localhost"
[16:21:19.031]   ..- attr(*, "localhost")= logi TRUE
[16:21:19.031]  $ master          : chr "localhost"
[16:21:19.031]  $ port            : int 11386
[16:21:19.031]  $ connectTimeout  : num 120
[16:21:19.031]  $ timeout         : num 2592000
[16:21:19.031]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[16:21:19.031]  $ homogeneous     : logi TRUE
[16:21:19.031]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[16:21:19.031]  $ rscript_envs    : NULL
[16:21:19.031]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:21:19.031]  $ rscript_startup : NULL
[16:21:19.031]  $ rscript_sh      : chr "sh"
[16:21:19.031]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:21:19.031]  $ methods         : logi TRUE
[16:21:19.031]  $ socketOptions   : chr "no-delay"
[16:21:19.031]  $ useXDR          : logi FALSE
[16:21:19.031]  $ outfile         : chr "/dev/null"
[16:21:19.031]  $ renice          : int NA
[16:21:19.031]  $ rshcmd          : NULL
[16:21:19.031]  $ user            : chr(0) 
[16:21:19.031]  $ revtunnel       : logi FALSE
[16:21:19.031]  $ rshlogfile      : NULL
[16:21:19.031]  $ rshopts         : chr(0) 
[16:21:19.031]  $ rank            : int 1
[16:21:19.031]  $ manual          : logi FALSE
[16:21:19.031]  $ dryrun          : logi FALSE
[16:21:19.031]  $ quiet           : logi FALSE
[16:21:19.031]  $ setup_strategy  : chr "parallel"
[16:21:19.031]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:21:19.031]  $ pidfile         : chr "/tmp/RtmpKdMfEO/worker.rank=1.parallelly.parent=85062.14c464ca9b2ce.pid"
[16:21:19.031]  $ rshcmd_label    : NULL
[16:21:19.031]  $ rsh_call        : NULL
[16:21:19.031]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:21:19.031]  $ localMachine    : logi TRUE
[16:21:19.031]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[16:21:19.031]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[16:21:19.031]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[16:21:19.031]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[16:21:19.031]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[16:21:19.031]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[16:21:19.031]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[16:21:19.031]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[16:21:19.031]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[16:21:19.031]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[16:21:19.031]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[16:21:19.031]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[16:21:19.031]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[16:21:19.031]  $ arguments       :List of 28
[16:21:19.031]   ..$ worker          : chr "localhost"
[16:21:19.031]   ..$ master          : NULL
[16:21:19.031]   ..$ port            : int 11386
[16:21:19.031]   ..$ connectTimeout  : num 120
[16:21:19.031]   ..$ timeout         : num 2592000
[16:21:19.031]   ..$ rscript         : NULL
[16:21:19.031]   ..$ homogeneous     : NULL
[16:21:19.031]   ..$ rscript_args    : NULL
[16:21:19.031]   ..$ rscript_envs    : NULL
[16:21:19.031]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:21:19.031]   ..$ rscript_startup : NULL
[16:21:19.031]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[16:21:19.031]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:21:19.031]   ..$ methods         : logi TRUE
[16:21:19.031]   ..$ socketOptions   : chr "no-delay"
[16:21:19.031]   ..$ useXDR          : logi FALSE
[16:21:19.031]   ..$ outfile         : chr "/dev/null"
[16:21:19.031]   ..$ renice          : int NA
[16:21:19.031]   ..$ rshcmd          : NULL
[16:21:19.031]   ..$ user            : NULL
[16:21:19.031]   ..$ revtunnel       : logi NA
[16:21:19.031]   ..$ rshlogfile      : NULL
[16:21:19.031]   ..$ rshopts         : NULL
[16:21:19.031]   ..$ rank            : int 1
[16:21:19.031]   ..$ manual          : logi FALSE
[16:21:19.031]   ..$ dryrun          : logi FALSE
[16:21:19.031]   ..$ quiet           : logi FALSE
[16:21:19.031]   ..$ setup_strategy  : chr "parallel"
[16:21:19.031]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[16:21:19.049] [local output] System call to launch all workers:
[16:21:19.049] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpKdMfEO/worker.rank=1.parallelly.parent=85062.14c464ca9b2ce.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11386 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[16:21:19.049] [local output] Starting PSOCK main server
[16:21:19.050] [local output] Workers launched
[16:21:19.051] [local output] Waiting for workers to connect back
[16:21:19.051]  - [local output] 0 workers out of 2 ready
[16:21:19.297]  - [local output] 0 workers out of 2 ready
[16:21:19.298]  - [local output] 1 workers out of 2 ready
[16:21:19.298]  - [local output] 1 workers out of 2 ready
[16:21:19.299]  - [local output] 2 workers out of 2 ready
[16:21:19.299] [local output] Launching of workers completed
[16:21:19.299] [local output] Collecting session information from workers
[16:21:19.300] [local output]  - Worker #1 of 2
[16:21:19.300] [local output]  - Worker #2 of 2
[16:21:19.300] [local output] makeClusterPSOCK() ... done
[16:21:19.311] Packages needed by the future expression (n = 0): <none>
[16:21:19.311] Packages needed by future strategies (n = 0): <none>
[16:21:19.312] {
[16:21:19.312]     {
[16:21:19.312]         {
[16:21:19.312]             ...future.startTime <- base::Sys.time()
[16:21:19.312]             {
[16:21:19.312]                 {
[16:21:19.312]                   {
[16:21:19.312]                     {
[16:21:19.312]                       base::local({
[16:21:19.312]                         has_future <- base::requireNamespace("future", 
[16:21:19.312]                           quietly = TRUE)
[16:21:19.312]                         if (has_future) {
[16:21:19.312]                           ns <- base::getNamespace("future")
[16:21:19.312]                           version <- ns[[".package"]][["version"]]
[16:21:19.312]                           if (is.null(version)) 
[16:21:19.312]                             version <- utils::packageVersion("future")
[16:21:19.312]                         }
[16:21:19.312]                         else {
[16:21:19.312]                           version <- NULL
[16:21:19.312]                         }
[16:21:19.312]                         if (!has_future || version < "1.8.0") {
[16:21:19.312]                           info <- base::c(r_version = base::gsub("R version ", 
[16:21:19.312]                             "", base::R.version$version.string), 
[16:21:19.312]                             platform = base::sprintf("%s (%s-bit)", 
[16:21:19.312]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:19.312]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:19.312]                               "release", "version")], collapse = " "), 
[16:21:19.312]                             hostname = base::Sys.info()[["nodename"]])
[16:21:19.312]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:21:19.312]                             info)
[16:21:19.312]                           info <- base::paste(info, collapse = "; ")
[16:21:19.312]                           if (!has_future) {
[16:21:19.312]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:19.312]                               info)
[16:21:19.312]                           }
[16:21:19.312]                           else {
[16:21:19.312]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:19.312]                               info, version)
[16:21:19.312]                           }
[16:21:19.312]                           base::stop(msg)
[16:21:19.312]                         }
[16:21:19.312]                       })
[16:21:19.312]                     }
[16:21:19.312]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:21:19.312]                     base::options(mc.cores = 1L)
[16:21:19.312]                   }
[16:21:19.312]                   ...future.strategy.old <- future::plan("list")
[16:21:19.312]                   options(future.plan = NULL)
[16:21:19.312]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:19.312]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:19.312]                 }
[16:21:19.312]                 ...future.workdir <- getwd()
[16:21:19.312]             }
[16:21:19.312]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:19.312]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:19.312]         }
[16:21:19.312]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:19.312]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:19.312]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:19.312]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:19.312]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:19.312]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:19.312]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:19.312]             base::names(...future.oldOptions))
[16:21:19.312]     }
[16:21:19.312]     if (FALSE) {
[16:21:19.312]     }
[16:21:19.312]     else {
[16:21:19.312]         if (TRUE) {
[16:21:19.312]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:19.312]                 open = "w")
[16:21:19.312]         }
[16:21:19.312]         else {
[16:21:19.312]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:19.312]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:19.312]         }
[16:21:19.312]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:19.312]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:19.312]             base::sink(type = "output", split = FALSE)
[16:21:19.312]             base::close(...future.stdout)
[16:21:19.312]         }, add = TRUE)
[16:21:19.312]     }
[16:21:19.312]     ...future.frame <- base::sys.nframe()
[16:21:19.312]     ...future.conditions <- base::list()
[16:21:19.312]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:19.312]     if (FALSE) {
[16:21:19.312]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:19.312]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:19.312]     }
[16:21:19.312]     ...future.result <- base::tryCatch({
[16:21:19.312]         base::withCallingHandlers({
[16:21:19.312]             ...future.value <- base::withVisible(base::local({
[16:21:19.312]                 ...future.makeSendCondition <- base::local({
[16:21:19.312]                   sendCondition <- NULL
[16:21:19.312]                   function(frame = 1L) {
[16:21:19.312]                     if (is.function(sendCondition)) 
[16:21:19.312]                       return(sendCondition)
[16:21:19.312]                     ns <- getNamespace("parallel")
[16:21:19.312]                     if (exists("sendData", mode = "function", 
[16:21:19.312]                       envir = ns)) {
[16:21:19.312]                       parallel_sendData <- get("sendData", mode = "function", 
[16:21:19.312]                         envir = ns)
[16:21:19.312]                       envir <- sys.frame(frame)
[16:21:19.312]                       master <- NULL
[16:21:19.312]                       while (!identical(envir, .GlobalEnv) && 
[16:21:19.312]                         !identical(envir, emptyenv())) {
[16:21:19.312]                         if (exists("master", mode = "list", envir = envir, 
[16:21:19.312]                           inherits = FALSE)) {
[16:21:19.312]                           master <- get("master", mode = "list", 
[16:21:19.312]                             envir = envir, inherits = FALSE)
[16:21:19.312]                           if (inherits(master, c("SOCKnode", 
[16:21:19.312]                             "SOCK0node"))) {
[16:21:19.312]                             sendCondition <<- function(cond) {
[16:21:19.312]                               data <- list(type = "VALUE", value = cond, 
[16:21:19.312]                                 success = TRUE)
[16:21:19.312]                               parallel_sendData(master, data)
[16:21:19.312]                             }
[16:21:19.312]                             return(sendCondition)
[16:21:19.312]                           }
[16:21:19.312]                         }
[16:21:19.312]                         frame <- frame + 1L
[16:21:19.312]                         envir <- sys.frame(frame)
[16:21:19.312]                       }
[16:21:19.312]                     }
[16:21:19.312]                     sendCondition <<- function(cond) NULL
[16:21:19.312]                   }
[16:21:19.312]                 })
[16:21:19.312]                 withCallingHandlers({
[16:21:19.312]                   NA
[16:21:19.312]                 }, immediateCondition = function(cond) {
[16:21:19.312]                   sendCondition <- ...future.makeSendCondition()
[16:21:19.312]                   sendCondition(cond)
[16:21:19.312]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:19.312]                   {
[16:21:19.312]                     inherits <- base::inherits
[16:21:19.312]                     invokeRestart <- base::invokeRestart
[16:21:19.312]                     is.null <- base::is.null
[16:21:19.312]                     muffled <- FALSE
[16:21:19.312]                     if (inherits(cond, "message")) {
[16:21:19.312]                       muffled <- grepl(pattern, "muffleMessage")
[16:21:19.312]                       if (muffled) 
[16:21:19.312]                         invokeRestart("muffleMessage")
[16:21:19.312]                     }
[16:21:19.312]                     else if (inherits(cond, "warning")) {
[16:21:19.312]                       muffled <- grepl(pattern, "muffleWarning")
[16:21:19.312]                       if (muffled) 
[16:21:19.312]                         invokeRestart("muffleWarning")
[16:21:19.312]                     }
[16:21:19.312]                     else if (inherits(cond, "condition")) {
[16:21:19.312]                       if (!is.null(pattern)) {
[16:21:19.312]                         computeRestarts <- base::computeRestarts
[16:21:19.312]                         grepl <- base::grepl
[16:21:19.312]                         restarts <- computeRestarts(cond)
[16:21:19.312]                         for (restart in restarts) {
[16:21:19.312]                           name <- restart$name
[16:21:19.312]                           if (is.null(name)) 
[16:21:19.312]                             next
[16:21:19.312]                           if (!grepl(pattern, name)) 
[16:21:19.312]                             next
[16:21:19.312]                           invokeRestart(restart)
[16:21:19.312]                           muffled <- TRUE
[16:21:19.312]                           break
[16:21:19.312]                         }
[16:21:19.312]                       }
[16:21:19.312]                     }
[16:21:19.312]                     invisible(muffled)
[16:21:19.312]                   }
[16:21:19.312]                   muffleCondition(cond)
[16:21:19.312]                 })
[16:21:19.312]             }))
[16:21:19.312]             future::FutureResult(value = ...future.value$value, 
[16:21:19.312]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:19.312]                   ...future.rng), globalenv = if (FALSE) 
[16:21:19.312]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:19.312]                     ...future.globalenv.names))
[16:21:19.312]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:19.312]         }, condition = base::local({
[16:21:19.312]             c <- base::c
[16:21:19.312]             inherits <- base::inherits
[16:21:19.312]             invokeRestart <- base::invokeRestart
[16:21:19.312]             length <- base::length
[16:21:19.312]             list <- base::list
[16:21:19.312]             seq.int <- base::seq.int
[16:21:19.312]             signalCondition <- base::signalCondition
[16:21:19.312]             sys.calls <- base::sys.calls
[16:21:19.312]             `[[` <- base::`[[`
[16:21:19.312]             `+` <- base::`+`
[16:21:19.312]             `<<-` <- base::`<<-`
[16:21:19.312]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:19.312]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:19.312]                   3L)]
[16:21:19.312]             }
[16:21:19.312]             function(cond) {
[16:21:19.312]                 is_error <- inherits(cond, "error")
[16:21:19.312]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:19.312]                   NULL)
[16:21:19.312]                 if (is_error) {
[16:21:19.312]                   sessionInformation <- function() {
[16:21:19.312]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:19.312]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:19.312]                       search = base::search(), system = base::Sys.info())
[16:21:19.312]                   }
[16:21:19.312]                   ...future.conditions[[length(...future.conditions) + 
[16:21:19.312]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:19.312]                     cond$call), session = sessionInformation(), 
[16:21:19.312]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:19.312]                   signalCondition(cond)
[16:21:19.312]                 }
[16:21:19.312]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:19.312]                 "immediateCondition"))) {
[16:21:19.312]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:19.312]                   ...future.conditions[[length(...future.conditions) + 
[16:21:19.312]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:19.312]                   if (TRUE && !signal) {
[16:21:19.312]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:19.312]                     {
[16:21:19.312]                       inherits <- base::inherits
[16:21:19.312]                       invokeRestart <- base::invokeRestart
[16:21:19.312]                       is.null <- base::is.null
[16:21:19.312]                       muffled <- FALSE
[16:21:19.312]                       if (inherits(cond, "message")) {
[16:21:19.312]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:19.312]                         if (muffled) 
[16:21:19.312]                           invokeRestart("muffleMessage")
[16:21:19.312]                       }
[16:21:19.312]                       else if (inherits(cond, "warning")) {
[16:21:19.312]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:19.312]                         if (muffled) 
[16:21:19.312]                           invokeRestart("muffleWarning")
[16:21:19.312]                       }
[16:21:19.312]                       else if (inherits(cond, "condition")) {
[16:21:19.312]                         if (!is.null(pattern)) {
[16:21:19.312]                           computeRestarts <- base::computeRestarts
[16:21:19.312]                           grepl <- base::grepl
[16:21:19.312]                           restarts <- computeRestarts(cond)
[16:21:19.312]                           for (restart in restarts) {
[16:21:19.312]                             name <- restart$name
[16:21:19.312]                             if (is.null(name)) 
[16:21:19.312]                               next
[16:21:19.312]                             if (!grepl(pattern, name)) 
[16:21:19.312]                               next
[16:21:19.312]                             invokeRestart(restart)
[16:21:19.312]                             muffled <- TRUE
[16:21:19.312]                             break
[16:21:19.312]                           }
[16:21:19.312]                         }
[16:21:19.312]                       }
[16:21:19.312]                       invisible(muffled)
[16:21:19.312]                     }
[16:21:19.312]                     muffleCondition(cond, pattern = "^muffle")
[16:21:19.312]                   }
[16:21:19.312]                 }
[16:21:19.312]                 else {
[16:21:19.312]                   if (TRUE) {
[16:21:19.312]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:19.312]                     {
[16:21:19.312]                       inherits <- base::inherits
[16:21:19.312]                       invokeRestart <- base::invokeRestart
[16:21:19.312]                       is.null <- base::is.null
[16:21:19.312]                       muffled <- FALSE
[16:21:19.312]                       if (inherits(cond, "message")) {
[16:21:19.312]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:19.312]                         if (muffled) 
[16:21:19.312]                           invokeRestart("muffleMessage")
[16:21:19.312]                       }
[16:21:19.312]                       else if (inherits(cond, "warning")) {
[16:21:19.312]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:19.312]                         if (muffled) 
[16:21:19.312]                           invokeRestart("muffleWarning")
[16:21:19.312]                       }
[16:21:19.312]                       else if (inherits(cond, "condition")) {
[16:21:19.312]                         if (!is.null(pattern)) {
[16:21:19.312]                           computeRestarts <- base::computeRestarts
[16:21:19.312]                           grepl <- base::grepl
[16:21:19.312]                           restarts <- computeRestarts(cond)
[16:21:19.312]                           for (restart in restarts) {
[16:21:19.312]                             name <- restart$name
[16:21:19.312]                             if (is.null(name)) 
[16:21:19.312]                               next
[16:21:19.312]                             if (!grepl(pattern, name)) 
[16:21:19.312]                               next
[16:21:19.312]                             invokeRestart(restart)
[16:21:19.312]                             muffled <- TRUE
[16:21:19.312]                             break
[16:21:19.312]                           }
[16:21:19.312]                         }
[16:21:19.312]                       }
[16:21:19.312]                       invisible(muffled)
[16:21:19.312]                     }
[16:21:19.312]                     muffleCondition(cond, pattern = "^muffle")
[16:21:19.312]                   }
[16:21:19.312]                 }
[16:21:19.312]             }
[16:21:19.312]         }))
[16:21:19.312]     }, error = function(ex) {
[16:21:19.312]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:19.312]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:19.312]                 ...future.rng), started = ...future.startTime, 
[16:21:19.312]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:19.312]             version = "1.8"), class = "FutureResult")
[16:21:19.312]     }, finally = {
[16:21:19.312]         if (!identical(...future.workdir, getwd())) 
[16:21:19.312]             setwd(...future.workdir)
[16:21:19.312]         {
[16:21:19.312]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:19.312]                 ...future.oldOptions$nwarnings <- NULL
[16:21:19.312]             }
[16:21:19.312]             base::options(...future.oldOptions)
[16:21:19.312]             if (.Platform$OS.type == "windows") {
[16:21:19.312]                 old_names <- names(...future.oldEnvVars)
[16:21:19.312]                 envs <- base::Sys.getenv()
[16:21:19.312]                 names <- names(envs)
[16:21:19.312]                 common <- intersect(names, old_names)
[16:21:19.312]                 added <- setdiff(names, old_names)
[16:21:19.312]                 removed <- setdiff(old_names, names)
[16:21:19.312]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:19.312]                   envs[common]]
[16:21:19.312]                 NAMES <- toupper(changed)
[16:21:19.312]                 args <- list()
[16:21:19.312]                 for (kk in seq_along(NAMES)) {
[16:21:19.312]                   name <- changed[[kk]]
[16:21:19.312]                   NAME <- NAMES[[kk]]
[16:21:19.312]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:19.312]                     next
[16:21:19.312]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:19.312]                 }
[16:21:19.312]                 NAMES <- toupper(added)
[16:21:19.312]                 for (kk in seq_along(NAMES)) {
[16:21:19.312]                   name <- added[[kk]]
[16:21:19.312]                   NAME <- NAMES[[kk]]
[16:21:19.312]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:19.312]                     next
[16:21:19.312]                   args[[name]] <- ""
[16:21:19.312]                 }
[16:21:19.312]                 NAMES <- toupper(removed)
[16:21:19.312]                 for (kk in seq_along(NAMES)) {
[16:21:19.312]                   name <- removed[[kk]]
[16:21:19.312]                   NAME <- NAMES[[kk]]
[16:21:19.312]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:19.312]                     next
[16:21:19.312]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:19.312]                 }
[16:21:19.312]                 if (length(args) > 0) 
[16:21:19.312]                   base::do.call(base::Sys.setenv, args = args)
[16:21:19.312]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:19.312]             }
[16:21:19.312]             else {
[16:21:19.312]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:19.312]             }
[16:21:19.312]             {
[16:21:19.312]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:19.312]                   0L) {
[16:21:19.312]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:19.312]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:19.312]                   base::options(opts)
[16:21:19.312]                 }
[16:21:19.312]                 {
[16:21:19.312]                   {
[16:21:19.312]                     base::options(mc.cores = ...future.mc.cores.old)
[16:21:19.312]                     NULL
[16:21:19.312]                   }
[16:21:19.312]                   options(future.plan = NULL)
[16:21:19.312]                   if (is.na(NA_character_)) 
[16:21:19.312]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:19.312]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:19.312]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:19.312]                     .init = FALSE)
[16:21:19.312]                 }
[16:21:19.312]             }
[16:21:19.312]         }
[16:21:19.312]     })
[16:21:19.312]     if (TRUE) {
[16:21:19.312]         base::sink(type = "output", split = FALSE)
[16:21:19.312]         if (TRUE) {
[16:21:19.312]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:19.312]         }
[16:21:19.312]         else {
[16:21:19.312]             ...future.result["stdout"] <- base::list(NULL)
[16:21:19.312]         }
[16:21:19.312]         base::close(...future.stdout)
[16:21:19.312]         ...future.stdout <- NULL
[16:21:19.312]     }
[16:21:19.312]     ...future.result$conditions <- ...future.conditions
[16:21:19.312]     ...future.result$finished <- base::Sys.time()
[16:21:19.312]     ...future.result
[16:21:19.312] }
[16:21:19.367] MultisessionFuture started
[16:21:19.367] result() for ClusterFuture ...
[16:21:19.368] receiveMessageFromWorker() for ClusterFuture ...
[16:21:19.368] - Validating connection of MultisessionFuture
[16:21:19.401] - received message: FutureResult
[16:21:19.401] - Received FutureResult
[16:21:19.401] - Erased future from FutureRegistry
[16:21:19.401] result() for ClusterFuture ...
[16:21:19.402] - result already collected: FutureResult
[16:21:19.402] result() for ClusterFuture ... done
[16:21:19.402] receiveMessageFromWorker() for ClusterFuture ... done
[16:21:19.402] result() for ClusterFuture ... done
[16:21:19.402] result() for ClusterFuture ...
[16:21:19.402] - result already collected: FutureResult
[16:21:19.402] result() for ClusterFuture ... done
[16:21:19.402] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[16:21:19.402] plan(): nbrOfWorkers() = 2
> f <- future(1L)
[16:21:19.403] getGlobalsAndPackages() ...
[16:21:19.403] Searching for globals...
[16:21:19.403] 
[16:21:19.403] Searching for globals ... DONE
[16:21:19.403] - globals: [0] <none>
[16:21:19.403] getGlobalsAndPackages() ... DONE
[16:21:19.404] run() for ‘Future’ ...
[16:21:19.404] - state: ‘created’
[16:21:19.404] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:21:19.415] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:21:19.415] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:21:19.415]   - Field: ‘node’
[16:21:19.415]   - Field: ‘label’
[16:21:19.415]   - Field: ‘local’
[16:21:19.415]   - Field: ‘owner’
[16:21:19.415]   - Field: ‘envir’
[16:21:19.415]   - Field: ‘workers’
[16:21:19.415]   - Field: ‘packages’
[16:21:19.415]   - Field: ‘gc’
[16:21:19.416]   - Field: ‘conditions’
[16:21:19.416]   - Field: ‘persistent’
[16:21:19.416]   - Field: ‘expr’
[16:21:19.416]   - Field: ‘uuid’
[16:21:19.416]   - Field: ‘seed’
[16:21:19.416]   - Field: ‘version’
[16:21:19.416]   - Field: ‘result’
[16:21:19.416]   - Field: ‘asynchronous’
[16:21:19.416]   - Field: ‘calls’
[16:21:19.416]   - Field: ‘globals’
[16:21:19.417]   - Field: ‘stdout’
[16:21:19.417]   - Field: ‘earlySignal’
[16:21:19.417]   - Field: ‘lazy’
[16:21:19.417]   - Field: ‘state’
[16:21:19.417] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:21:19.417] - Launch lazy future ...
[16:21:19.417] Packages needed by the future expression (n = 0): <none>
[16:21:19.417] Packages needed by future strategies (n = 0): <none>
[16:21:19.418] {
[16:21:19.418]     {
[16:21:19.418]         {
[16:21:19.418]             ...future.startTime <- base::Sys.time()
[16:21:19.418]             {
[16:21:19.418]                 {
[16:21:19.418]                   {
[16:21:19.418]                     {
[16:21:19.418]                       base::local({
[16:21:19.418]                         has_future <- base::requireNamespace("future", 
[16:21:19.418]                           quietly = TRUE)
[16:21:19.418]                         if (has_future) {
[16:21:19.418]                           ns <- base::getNamespace("future")
[16:21:19.418]                           version <- ns[[".package"]][["version"]]
[16:21:19.418]                           if (is.null(version)) 
[16:21:19.418]                             version <- utils::packageVersion("future")
[16:21:19.418]                         }
[16:21:19.418]                         else {
[16:21:19.418]                           version <- NULL
[16:21:19.418]                         }
[16:21:19.418]                         if (!has_future || version < "1.8.0") {
[16:21:19.418]                           info <- base::c(r_version = base::gsub("R version ", 
[16:21:19.418]                             "", base::R.version$version.string), 
[16:21:19.418]                             platform = base::sprintf("%s (%s-bit)", 
[16:21:19.418]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:19.418]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:19.418]                               "release", "version")], collapse = " "), 
[16:21:19.418]                             hostname = base::Sys.info()[["nodename"]])
[16:21:19.418]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:21:19.418]                             info)
[16:21:19.418]                           info <- base::paste(info, collapse = "; ")
[16:21:19.418]                           if (!has_future) {
[16:21:19.418]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:19.418]                               info)
[16:21:19.418]                           }
[16:21:19.418]                           else {
[16:21:19.418]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:19.418]                               info, version)
[16:21:19.418]                           }
[16:21:19.418]                           base::stop(msg)
[16:21:19.418]                         }
[16:21:19.418]                       })
[16:21:19.418]                     }
[16:21:19.418]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:21:19.418]                     base::options(mc.cores = 1L)
[16:21:19.418]                   }
[16:21:19.418]                   ...future.strategy.old <- future::plan("list")
[16:21:19.418]                   options(future.plan = NULL)
[16:21:19.418]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:19.418]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:19.418]                 }
[16:21:19.418]                 ...future.workdir <- getwd()
[16:21:19.418]             }
[16:21:19.418]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:19.418]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:19.418]         }
[16:21:19.418]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:19.418]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:19.418]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:19.418]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:19.418]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:19.418]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:19.418]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:19.418]             base::names(...future.oldOptions))
[16:21:19.418]     }
[16:21:19.418]     if (FALSE) {
[16:21:19.418]     }
[16:21:19.418]     else {
[16:21:19.418]         if (TRUE) {
[16:21:19.418]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:19.418]                 open = "w")
[16:21:19.418]         }
[16:21:19.418]         else {
[16:21:19.418]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:19.418]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:19.418]         }
[16:21:19.418]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:19.418]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:19.418]             base::sink(type = "output", split = FALSE)
[16:21:19.418]             base::close(...future.stdout)
[16:21:19.418]         }, add = TRUE)
[16:21:19.418]     }
[16:21:19.418]     ...future.frame <- base::sys.nframe()
[16:21:19.418]     ...future.conditions <- base::list()
[16:21:19.418]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:19.418]     if (FALSE) {
[16:21:19.418]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:19.418]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:19.418]     }
[16:21:19.418]     ...future.result <- base::tryCatch({
[16:21:19.418]         base::withCallingHandlers({
[16:21:19.418]             ...future.value <- base::withVisible(base::local({
[16:21:19.418]                 ...future.makeSendCondition <- base::local({
[16:21:19.418]                   sendCondition <- NULL
[16:21:19.418]                   function(frame = 1L) {
[16:21:19.418]                     if (is.function(sendCondition)) 
[16:21:19.418]                       return(sendCondition)
[16:21:19.418]                     ns <- getNamespace("parallel")
[16:21:19.418]                     if (exists("sendData", mode = "function", 
[16:21:19.418]                       envir = ns)) {
[16:21:19.418]                       parallel_sendData <- get("sendData", mode = "function", 
[16:21:19.418]                         envir = ns)
[16:21:19.418]                       envir <- sys.frame(frame)
[16:21:19.418]                       master <- NULL
[16:21:19.418]                       while (!identical(envir, .GlobalEnv) && 
[16:21:19.418]                         !identical(envir, emptyenv())) {
[16:21:19.418]                         if (exists("master", mode = "list", envir = envir, 
[16:21:19.418]                           inherits = FALSE)) {
[16:21:19.418]                           master <- get("master", mode = "list", 
[16:21:19.418]                             envir = envir, inherits = FALSE)
[16:21:19.418]                           if (inherits(master, c("SOCKnode", 
[16:21:19.418]                             "SOCK0node"))) {
[16:21:19.418]                             sendCondition <<- function(cond) {
[16:21:19.418]                               data <- list(type = "VALUE", value = cond, 
[16:21:19.418]                                 success = TRUE)
[16:21:19.418]                               parallel_sendData(master, data)
[16:21:19.418]                             }
[16:21:19.418]                             return(sendCondition)
[16:21:19.418]                           }
[16:21:19.418]                         }
[16:21:19.418]                         frame <- frame + 1L
[16:21:19.418]                         envir <- sys.frame(frame)
[16:21:19.418]                       }
[16:21:19.418]                     }
[16:21:19.418]                     sendCondition <<- function(cond) NULL
[16:21:19.418]                   }
[16:21:19.418]                 })
[16:21:19.418]                 withCallingHandlers({
[16:21:19.418]                   1L
[16:21:19.418]                 }, immediateCondition = function(cond) {
[16:21:19.418]                   sendCondition <- ...future.makeSendCondition()
[16:21:19.418]                   sendCondition(cond)
[16:21:19.418]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:19.418]                   {
[16:21:19.418]                     inherits <- base::inherits
[16:21:19.418]                     invokeRestart <- base::invokeRestart
[16:21:19.418]                     is.null <- base::is.null
[16:21:19.418]                     muffled <- FALSE
[16:21:19.418]                     if (inherits(cond, "message")) {
[16:21:19.418]                       muffled <- grepl(pattern, "muffleMessage")
[16:21:19.418]                       if (muffled) 
[16:21:19.418]                         invokeRestart("muffleMessage")
[16:21:19.418]                     }
[16:21:19.418]                     else if (inherits(cond, "warning")) {
[16:21:19.418]                       muffled <- grepl(pattern, "muffleWarning")
[16:21:19.418]                       if (muffled) 
[16:21:19.418]                         invokeRestart("muffleWarning")
[16:21:19.418]                     }
[16:21:19.418]                     else if (inherits(cond, "condition")) {
[16:21:19.418]                       if (!is.null(pattern)) {
[16:21:19.418]                         computeRestarts <- base::computeRestarts
[16:21:19.418]                         grepl <- base::grepl
[16:21:19.418]                         restarts <- computeRestarts(cond)
[16:21:19.418]                         for (restart in restarts) {
[16:21:19.418]                           name <- restart$name
[16:21:19.418]                           if (is.null(name)) 
[16:21:19.418]                             next
[16:21:19.418]                           if (!grepl(pattern, name)) 
[16:21:19.418]                             next
[16:21:19.418]                           invokeRestart(restart)
[16:21:19.418]                           muffled <- TRUE
[16:21:19.418]                           break
[16:21:19.418]                         }
[16:21:19.418]                       }
[16:21:19.418]                     }
[16:21:19.418]                     invisible(muffled)
[16:21:19.418]                   }
[16:21:19.418]                   muffleCondition(cond)
[16:21:19.418]                 })
[16:21:19.418]             }))
[16:21:19.418]             future::FutureResult(value = ...future.value$value, 
[16:21:19.418]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:19.418]                   ...future.rng), globalenv = if (FALSE) 
[16:21:19.418]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:19.418]                     ...future.globalenv.names))
[16:21:19.418]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:19.418]         }, condition = base::local({
[16:21:19.418]             c <- base::c
[16:21:19.418]             inherits <- base::inherits
[16:21:19.418]             invokeRestart <- base::invokeRestart
[16:21:19.418]             length <- base::length
[16:21:19.418]             list <- base::list
[16:21:19.418]             seq.int <- base::seq.int
[16:21:19.418]             signalCondition <- base::signalCondition
[16:21:19.418]             sys.calls <- base::sys.calls
[16:21:19.418]             `[[` <- base::`[[`
[16:21:19.418]             `+` <- base::`+`
[16:21:19.418]             `<<-` <- base::`<<-`
[16:21:19.418]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:19.418]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:19.418]                   3L)]
[16:21:19.418]             }
[16:21:19.418]             function(cond) {
[16:21:19.418]                 is_error <- inherits(cond, "error")
[16:21:19.418]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:19.418]                   NULL)
[16:21:19.418]                 if (is_error) {
[16:21:19.418]                   sessionInformation <- function() {
[16:21:19.418]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:19.418]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:19.418]                       search = base::search(), system = base::Sys.info())
[16:21:19.418]                   }
[16:21:19.418]                   ...future.conditions[[length(...future.conditions) + 
[16:21:19.418]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:19.418]                     cond$call), session = sessionInformation(), 
[16:21:19.418]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:19.418]                   signalCondition(cond)
[16:21:19.418]                 }
[16:21:19.418]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:19.418]                 "immediateCondition"))) {
[16:21:19.418]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:19.418]                   ...future.conditions[[length(...future.conditions) + 
[16:21:19.418]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:19.418]                   if (TRUE && !signal) {
[16:21:19.418]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:19.418]                     {
[16:21:19.418]                       inherits <- base::inherits
[16:21:19.418]                       invokeRestart <- base::invokeRestart
[16:21:19.418]                       is.null <- base::is.null
[16:21:19.418]                       muffled <- FALSE
[16:21:19.418]                       if (inherits(cond, "message")) {
[16:21:19.418]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:19.418]                         if (muffled) 
[16:21:19.418]                           invokeRestart("muffleMessage")
[16:21:19.418]                       }
[16:21:19.418]                       else if (inherits(cond, "warning")) {
[16:21:19.418]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:19.418]                         if (muffled) 
[16:21:19.418]                           invokeRestart("muffleWarning")
[16:21:19.418]                       }
[16:21:19.418]                       else if (inherits(cond, "condition")) {
[16:21:19.418]                         if (!is.null(pattern)) {
[16:21:19.418]                           computeRestarts <- base::computeRestarts
[16:21:19.418]                           grepl <- base::grepl
[16:21:19.418]                           restarts <- computeRestarts(cond)
[16:21:19.418]                           for (restart in restarts) {
[16:21:19.418]                             name <- restart$name
[16:21:19.418]                             if (is.null(name)) 
[16:21:19.418]                               next
[16:21:19.418]                             if (!grepl(pattern, name)) 
[16:21:19.418]                               next
[16:21:19.418]                             invokeRestart(restart)
[16:21:19.418]                             muffled <- TRUE
[16:21:19.418]                             break
[16:21:19.418]                           }
[16:21:19.418]                         }
[16:21:19.418]                       }
[16:21:19.418]                       invisible(muffled)
[16:21:19.418]                     }
[16:21:19.418]                     muffleCondition(cond, pattern = "^muffle")
[16:21:19.418]                   }
[16:21:19.418]                 }
[16:21:19.418]                 else {
[16:21:19.418]                   if (TRUE) {
[16:21:19.418]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:19.418]                     {
[16:21:19.418]                       inherits <- base::inherits
[16:21:19.418]                       invokeRestart <- base::invokeRestart
[16:21:19.418]                       is.null <- base::is.null
[16:21:19.418]                       muffled <- FALSE
[16:21:19.418]                       if (inherits(cond, "message")) {
[16:21:19.418]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:19.418]                         if (muffled) 
[16:21:19.418]                           invokeRestart("muffleMessage")
[16:21:19.418]                       }
[16:21:19.418]                       else if (inherits(cond, "warning")) {
[16:21:19.418]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:19.418]                         if (muffled) 
[16:21:19.418]                           invokeRestart("muffleWarning")
[16:21:19.418]                       }
[16:21:19.418]                       else if (inherits(cond, "condition")) {
[16:21:19.418]                         if (!is.null(pattern)) {
[16:21:19.418]                           computeRestarts <- base::computeRestarts
[16:21:19.418]                           grepl <- base::grepl
[16:21:19.418]                           restarts <- computeRestarts(cond)
[16:21:19.418]                           for (restart in restarts) {
[16:21:19.418]                             name <- restart$name
[16:21:19.418]                             if (is.null(name)) 
[16:21:19.418]                               next
[16:21:19.418]                             if (!grepl(pattern, name)) 
[16:21:19.418]                               next
[16:21:19.418]                             invokeRestart(restart)
[16:21:19.418]                             muffled <- TRUE
[16:21:19.418]                             break
[16:21:19.418]                           }
[16:21:19.418]                         }
[16:21:19.418]                       }
[16:21:19.418]                       invisible(muffled)
[16:21:19.418]                     }
[16:21:19.418]                     muffleCondition(cond, pattern = "^muffle")
[16:21:19.418]                   }
[16:21:19.418]                 }
[16:21:19.418]             }
[16:21:19.418]         }))
[16:21:19.418]     }, error = function(ex) {
[16:21:19.418]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:19.418]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:19.418]                 ...future.rng), started = ...future.startTime, 
[16:21:19.418]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:19.418]             version = "1.8"), class = "FutureResult")
[16:21:19.418]     }, finally = {
[16:21:19.418]         if (!identical(...future.workdir, getwd())) 
[16:21:19.418]             setwd(...future.workdir)
[16:21:19.418]         {
[16:21:19.418]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:19.418]                 ...future.oldOptions$nwarnings <- NULL
[16:21:19.418]             }
[16:21:19.418]             base::options(...future.oldOptions)
[16:21:19.418]             if (.Platform$OS.type == "windows") {
[16:21:19.418]                 old_names <- names(...future.oldEnvVars)
[16:21:19.418]                 envs <- base::Sys.getenv()
[16:21:19.418]                 names <- names(envs)
[16:21:19.418]                 common <- intersect(names, old_names)
[16:21:19.418]                 added <- setdiff(names, old_names)
[16:21:19.418]                 removed <- setdiff(old_names, names)
[16:21:19.418]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:19.418]                   envs[common]]
[16:21:19.418]                 NAMES <- toupper(changed)
[16:21:19.418]                 args <- list()
[16:21:19.418]                 for (kk in seq_along(NAMES)) {
[16:21:19.418]                   name <- changed[[kk]]
[16:21:19.418]                   NAME <- NAMES[[kk]]
[16:21:19.418]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:19.418]                     next
[16:21:19.418]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:19.418]                 }
[16:21:19.418]                 NAMES <- toupper(added)
[16:21:19.418]                 for (kk in seq_along(NAMES)) {
[16:21:19.418]                   name <- added[[kk]]
[16:21:19.418]                   NAME <- NAMES[[kk]]
[16:21:19.418]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:19.418]                     next
[16:21:19.418]                   args[[name]] <- ""
[16:21:19.418]                 }
[16:21:19.418]                 NAMES <- toupper(removed)
[16:21:19.418]                 for (kk in seq_along(NAMES)) {
[16:21:19.418]                   name <- removed[[kk]]
[16:21:19.418]                   NAME <- NAMES[[kk]]
[16:21:19.418]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:19.418]                     next
[16:21:19.418]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:19.418]                 }
[16:21:19.418]                 if (length(args) > 0) 
[16:21:19.418]                   base::do.call(base::Sys.setenv, args = args)
[16:21:19.418]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:19.418]             }
[16:21:19.418]             else {
[16:21:19.418]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:19.418]             }
[16:21:19.418]             {
[16:21:19.418]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:19.418]                   0L) {
[16:21:19.418]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:19.418]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:19.418]                   base::options(opts)
[16:21:19.418]                 }
[16:21:19.418]                 {
[16:21:19.418]                   {
[16:21:19.418]                     base::options(mc.cores = ...future.mc.cores.old)
[16:21:19.418]                     NULL
[16:21:19.418]                   }
[16:21:19.418]                   options(future.plan = NULL)
[16:21:19.418]                   if (is.na(NA_character_)) 
[16:21:19.418]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:19.418]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:19.418]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:19.418]                     .init = FALSE)
[16:21:19.418]                 }
[16:21:19.418]             }
[16:21:19.418]         }
[16:21:19.418]     })
[16:21:19.418]     if (TRUE) {
[16:21:19.418]         base::sink(type = "output", split = FALSE)
[16:21:19.418]         if (TRUE) {
[16:21:19.418]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:19.418]         }
[16:21:19.418]         else {
[16:21:19.418]             ...future.result["stdout"] <- base::list(NULL)
[16:21:19.418]         }
[16:21:19.418]         base::close(...future.stdout)
[16:21:19.418]         ...future.stdout <- NULL
[16:21:19.418]     }
[16:21:19.418]     ...future.result$conditions <- ...future.conditions
[16:21:19.418]     ...future.result$finished <- base::Sys.time()
[16:21:19.418]     ...future.result
[16:21:19.418] }
[16:21:19.421] MultisessionFuture started
[16:21:19.421] - Launch lazy future ... done
[16:21:19.421] run() for ‘MultisessionFuture’ ... done
> cl <- ClusterRegistry("get")
> stopifnot(inherits(cl, "cluster"), length(cl) >= 1L)
> 
> plan(sequential)
[16:21:19.421] plan(): Setting new future strategy stack:
[16:21:19.421] List of future strategies:
[16:21:19.421] 1. sequential:
[16:21:19.421]    - args: function (..., envir = parent.frame())
[16:21:19.421]    - tweaked: FALSE
[16:21:19.421]    - call: plan(sequential)
[16:21:19.422] plan(): nbrOfWorkers() = 1
> cl <- ClusterRegistry("get")
> stopifnot(is.null(cl), length(cl) == 0L)
>   
> message("*** multisession(...) - stopping with plan() change ... DONE")
*** multisession(...) - stopping with plan() change ... DONE
> 
> message("*** multisession() ... DONE")
*** multisession() ... DONE
> 
> source("incl/end.R")
[16:21:19.423] plan(): Setting new future strategy stack:
[16:21:19.423] List of future strategies:
[16:21:19.423] 1. FutureStrategy:
[16:21:19.423]    - args: function (..., envir = parent.frame())
[16:21:19.423]    - tweaked: FALSE
[16:21:19.423]    - call: future::plan(oplan)
[16:21:19.424] plan(): nbrOfWorkers() = 1
> 
