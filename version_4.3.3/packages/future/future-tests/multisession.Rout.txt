
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[13:37:09.156] plan(): Setting new future strategy stack:
[13:37:09.157] List of future strategies:
[13:37:09.157] 1. sequential:
[13:37:09.157]    - args: function (..., envir = parent.frame())
[13:37:09.157]    - tweaked: FALSE
[13:37:09.157]    - call: future::plan("sequential")
[13:37:09.171] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> message("*** multisession() ...")
*** multisession() ...
> 
> for (cores in 1:availCores) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   message(sprintf("Testing with %d cores ...", cores))
+   options(mc.cores = cores)
+ 
+   ## No global variables
+   f <- multisession({
+     42L
+   })
+   print(f)
+   stopifnot(inherits(f, "ClusterFuture") || (inherits(f, "SequentialFuture") && f$lazy))
+ 
+   print(resolved(f))
+   y <- value(f)
+   print(y)
+   stopifnot(y == 42L)
+ 
+ 
+   ## A global variable
+   a <- 0
+   f <- multisession({
+     b <- 3
+     c <- 2
+     a * b * c
+   }, globals = TRUE)
+   print(f)
+ 
+ 
+   ## A multisession future is evaluated in a separate
+   ## R session process.  Changing the value of a global
+   ## variable should not affect the result of the
+   ## future.
+   a <- 7  ## Make sure globals are frozen
+   v <- value(f)
+   print(v)
+   stopifnot(v == 0)
+ 
+ 
+   message("*** multisession() with globals and blocking")
+   x <- listenv()
+   for (ii in 2:1) {
+     message(sprintf(" - Creating multisession future #%d ...", ii))
+     x[[ii]] <- multisession({ ii }, globals = TRUE)
+   }
+   message(sprintf(" - Resolving %d multisession futures", length(x)))
+   v <- sapply(x, FUN = value)
+   stopifnot(all(v == 1:2))
+ 
+ 
+   message("*** multisession() - workers inherit .libPaths()")
+ 
+   libs <- value(future(.libPaths()))
+   str(list(
+     main = .libPaths(),
+     workers = libs
+   ))
+   stopifnot(identical(libs, .libPaths()))
+ 
+   message("*** multisession() and errors")
+   f <- multisession({
+     stop("Whoops!")
+     1
+   })
+   print(f)
+   v <- value(f, signal = FALSE)
+   print(v)
+   stopifnot(inherits(v, "simpleError"))
+ 
+   res <- try(value(f), silent = TRUE)
+   print(res)
+   stopifnot(inherits(res, "try-error"))
+ 
+   ## Error is repeated
+   res <- try(value(f), silent = TRUE)
+   print(res)
+   stopifnot(inherits(res, "try-error"))
+ 
+   ## Custom error class
+   f <- multisession({
+     stop(structure(list(message = "boom"),
+                    class = c("MyError", "error", "condition")))
+   })
+   print(f)
+   v <- value(f, signal = FALSE)
+   print(v)
+   stopifnot(inherits(v, "error"), inherits(v, "MyError"))
+ 
+   ## Make sure error is signaled
+   res <- tryCatch(value(f), error = identity)
+   stopifnot(inherits(res, "error"))
+ 
+   ## Issue #200: Custom condition class attributes are lost
+   ## https://github.com/HenrikBengtsson/Wishlist-for-R/issues/57
+   ## stopifnot(inherits(res, "MyError"))    
+ 
+   message(sprintf("Testing with %d cores ... DONE", cores))
+ } ## for (cores ...)
Testing with 1 cores ...
[13:37:09.221] getGlobalsAndPackages() ...
[13:37:09.221] Searching for globals...
[13:37:09.225] - globals found: [1] ‘{’
[13:37:09.225] Searching for globals ... DONE
[13:37:09.225] Resolving globals: FALSE
[13:37:09.225] 
[13:37:09.225] 
[13:37:09.226] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: TRUE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 1c81bec4-3232-89a6-5464-8e86a1a5c510
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:37:09.227] Packages needed by the future expression (n = 0): <none>
[13:37:09.228] Packages needed by future strategies (n = 0): <none>
[13:37:09.228] {
[13:37:09.228]     {
[13:37:09.228]         {
[13:37:09.228]             ...future.startTime <- base::Sys.time()
[13:37:09.228]             {
[13:37:09.228]                 {
[13:37:09.228]                   {
[13:37:09.228]                     base::local({
[13:37:09.228]                       has_future <- base::requireNamespace("future", 
[13:37:09.228]                         quietly = TRUE)
[13:37:09.228]                       if (has_future) {
[13:37:09.228]                         ns <- base::getNamespace("future")
[13:37:09.228]                         version <- ns[[".package"]][["version"]]
[13:37:09.228]                         if (is.null(version)) 
[13:37:09.228]                           version <- utils::packageVersion("future")
[13:37:09.228]                       }
[13:37:09.228]                       else {
[13:37:09.228]                         version <- NULL
[13:37:09.228]                       }
[13:37:09.228]                       if (!has_future || version < "1.8.0") {
[13:37:09.228]                         info <- base::c(r_version = base::gsub("R version ", 
[13:37:09.228]                           "", base::R.version$version.string), 
[13:37:09.228]                           platform = base::sprintf("%s (%s-bit)", 
[13:37:09.228]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:09.228]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:09.228]                             "release", "version")], collapse = " "), 
[13:37:09.228]                           hostname = base::Sys.info()[["nodename"]])
[13:37:09.228]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:37:09.228]                           info)
[13:37:09.228]                         info <- base::paste(info, collapse = "; ")
[13:37:09.228]                         if (!has_future) {
[13:37:09.228]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:09.228]                             info)
[13:37:09.228]                         }
[13:37:09.228]                         else {
[13:37:09.228]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:09.228]                             info, version)
[13:37:09.228]                         }
[13:37:09.228]                         base::stop(msg)
[13:37:09.228]                       }
[13:37:09.228]                     })
[13:37:09.228]                   }
[13:37:09.228]                   ...future.strategy.old <- future::plan("list")
[13:37:09.228]                   options(future.plan = NULL)
[13:37:09.228]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:09.228]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:09.228]                 }
[13:37:09.228]                 ...future.workdir <- getwd()
[13:37:09.228]             }
[13:37:09.228]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:09.228]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:09.228]         }
[13:37:09.228]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:09.228]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:09.228]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:09.228]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:09.228]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:09.228]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:09.228]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:09.228]             base::names(...future.oldOptions))
[13:37:09.228]     }
[13:37:09.228]     if (FALSE) {
[13:37:09.228]     }
[13:37:09.228]     else {
[13:37:09.228]         if (TRUE) {
[13:37:09.228]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:09.228]                 open = "w")
[13:37:09.228]         }
[13:37:09.228]         else {
[13:37:09.228]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:09.228]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:09.228]         }
[13:37:09.228]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:09.228]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:09.228]             base::sink(type = "output", split = FALSE)
[13:37:09.228]             base::close(...future.stdout)
[13:37:09.228]         }, add = TRUE)
[13:37:09.228]     }
[13:37:09.228]     ...future.frame <- base::sys.nframe()
[13:37:09.228]     ...future.conditions <- base::list()
[13:37:09.228]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:09.228]     if (FALSE) {
[13:37:09.228]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:09.228]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:09.228]     }
[13:37:09.228]     ...future.result <- base::tryCatch({
[13:37:09.228]         base::withCallingHandlers({
[13:37:09.228]             ...future.value <- base::withVisible(base::local({
[13:37:09.228]                 42L
[13:37:09.228]             }))
[13:37:09.228]             future::FutureResult(value = ...future.value$value, 
[13:37:09.228]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:09.228]                   ...future.rng), globalenv = if (FALSE) 
[13:37:09.228]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:09.228]                     ...future.globalenv.names))
[13:37:09.228]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:09.228]         }, condition = base::local({
[13:37:09.228]             c <- base::c
[13:37:09.228]             inherits <- base::inherits
[13:37:09.228]             invokeRestart <- base::invokeRestart
[13:37:09.228]             length <- base::length
[13:37:09.228]             list <- base::list
[13:37:09.228]             seq.int <- base::seq.int
[13:37:09.228]             signalCondition <- base::signalCondition
[13:37:09.228]             sys.calls <- base::sys.calls
[13:37:09.228]             `[[` <- base::`[[`
[13:37:09.228]             `+` <- base::`+`
[13:37:09.228]             `<<-` <- base::`<<-`
[13:37:09.228]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:09.228]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:09.228]                   3L)]
[13:37:09.228]             }
[13:37:09.228]             function(cond) {
[13:37:09.228]                 is_error <- inherits(cond, "error")
[13:37:09.228]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:09.228]                   NULL)
[13:37:09.228]                 if (is_error) {
[13:37:09.228]                   sessionInformation <- function() {
[13:37:09.228]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:09.228]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:09.228]                       search = base::search(), system = base::Sys.info())
[13:37:09.228]                   }
[13:37:09.228]                   ...future.conditions[[length(...future.conditions) + 
[13:37:09.228]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:09.228]                     cond$call), session = sessionInformation(), 
[13:37:09.228]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:09.228]                   signalCondition(cond)
[13:37:09.228]                 }
[13:37:09.228]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:09.228]                 "immediateCondition"))) {
[13:37:09.228]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:09.228]                   ...future.conditions[[length(...future.conditions) + 
[13:37:09.228]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:09.228]                   if (TRUE && !signal) {
[13:37:09.228]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:09.228]                     {
[13:37:09.228]                       inherits <- base::inherits
[13:37:09.228]                       invokeRestart <- base::invokeRestart
[13:37:09.228]                       is.null <- base::is.null
[13:37:09.228]                       muffled <- FALSE
[13:37:09.228]                       if (inherits(cond, "message")) {
[13:37:09.228]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:09.228]                         if (muffled) 
[13:37:09.228]                           invokeRestart("muffleMessage")
[13:37:09.228]                       }
[13:37:09.228]                       else if (inherits(cond, "warning")) {
[13:37:09.228]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:09.228]                         if (muffled) 
[13:37:09.228]                           invokeRestart("muffleWarning")
[13:37:09.228]                       }
[13:37:09.228]                       else if (inherits(cond, "condition")) {
[13:37:09.228]                         if (!is.null(pattern)) {
[13:37:09.228]                           computeRestarts <- base::computeRestarts
[13:37:09.228]                           grepl <- base::grepl
[13:37:09.228]                           restarts <- computeRestarts(cond)
[13:37:09.228]                           for (restart in restarts) {
[13:37:09.228]                             name <- restart$name
[13:37:09.228]                             if (is.null(name)) 
[13:37:09.228]                               next
[13:37:09.228]                             if (!grepl(pattern, name)) 
[13:37:09.228]                               next
[13:37:09.228]                             invokeRestart(restart)
[13:37:09.228]                             muffled <- TRUE
[13:37:09.228]                             break
[13:37:09.228]                           }
[13:37:09.228]                         }
[13:37:09.228]                       }
[13:37:09.228]                       invisible(muffled)
[13:37:09.228]                     }
[13:37:09.228]                     muffleCondition(cond, pattern = "^muffle")
[13:37:09.228]                   }
[13:37:09.228]                 }
[13:37:09.228]                 else {
[13:37:09.228]                   if (TRUE) {
[13:37:09.228]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:09.228]                     {
[13:37:09.228]                       inherits <- base::inherits
[13:37:09.228]                       invokeRestart <- base::invokeRestart
[13:37:09.228]                       is.null <- base::is.null
[13:37:09.228]                       muffled <- FALSE
[13:37:09.228]                       if (inherits(cond, "message")) {
[13:37:09.228]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:09.228]                         if (muffled) 
[13:37:09.228]                           invokeRestart("muffleMessage")
[13:37:09.228]                       }
[13:37:09.228]                       else if (inherits(cond, "warning")) {
[13:37:09.228]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:09.228]                         if (muffled) 
[13:37:09.228]                           invokeRestart("muffleWarning")
[13:37:09.228]                       }
[13:37:09.228]                       else if (inherits(cond, "condition")) {
[13:37:09.228]                         if (!is.null(pattern)) {
[13:37:09.228]                           computeRestarts <- base::computeRestarts
[13:37:09.228]                           grepl <- base::grepl
[13:37:09.228]                           restarts <- computeRestarts(cond)
[13:37:09.228]                           for (restart in restarts) {
[13:37:09.228]                             name <- restart$name
[13:37:09.228]                             if (is.null(name)) 
[13:37:09.228]                               next
[13:37:09.228]                             if (!grepl(pattern, name)) 
[13:37:09.228]                               next
[13:37:09.228]                             invokeRestart(restart)
[13:37:09.228]                             muffled <- TRUE
[13:37:09.228]                             break
[13:37:09.228]                           }
[13:37:09.228]                         }
[13:37:09.228]                       }
[13:37:09.228]                       invisible(muffled)
[13:37:09.228]                     }
[13:37:09.228]                     muffleCondition(cond, pattern = "^muffle")
[13:37:09.228]                   }
[13:37:09.228]                 }
[13:37:09.228]             }
[13:37:09.228]         }))
[13:37:09.228]     }, error = function(ex) {
[13:37:09.228]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:09.228]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:09.228]                 ...future.rng), started = ...future.startTime, 
[13:37:09.228]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:09.228]             version = "1.8"), class = "FutureResult")
[13:37:09.228]     }, finally = {
[13:37:09.228]         if (!identical(...future.workdir, getwd())) 
[13:37:09.228]             setwd(...future.workdir)
[13:37:09.228]         {
[13:37:09.228]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:09.228]                 ...future.oldOptions$nwarnings <- NULL
[13:37:09.228]             }
[13:37:09.228]             base::options(...future.oldOptions)
[13:37:09.228]             if (.Platform$OS.type == "windows") {
[13:37:09.228]                 old_names <- names(...future.oldEnvVars)
[13:37:09.228]                 envs <- base::Sys.getenv()
[13:37:09.228]                 names <- names(envs)
[13:37:09.228]                 common <- intersect(names, old_names)
[13:37:09.228]                 added <- setdiff(names, old_names)
[13:37:09.228]                 removed <- setdiff(old_names, names)
[13:37:09.228]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:09.228]                   envs[common]]
[13:37:09.228]                 NAMES <- toupper(changed)
[13:37:09.228]                 args <- list()
[13:37:09.228]                 for (kk in seq_along(NAMES)) {
[13:37:09.228]                   name <- changed[[kk]]
[13:37:09.228]                   NAME <- NAMES[[kk]]
[13:37:09.228]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:09.228]                     next
[13:37:09.228]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:09.228]                 }
[13:37:09.228]                 NAMES <- toupper(added)
[13:37:09.228]                 for (kk in seq_along(NAMES)) {
[13:37:09.228]                   name <- added[[kk]]
[13:37:09.228]                   NAME <- NAMES[[kk]]
[13:37:09.228]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:09.228]                     next
[13:37:09.228]                   args[[name]] <- ""
[13:37:09.228]                 }
[13:37:09.228]                 NAMES <- toupper(removed)
[13:37:09.228]                 for (kk in seq_along(NAMES)) {
[13:37:09.228]                   name <- removed[[kk]]
[13:37:09.228]                   NAME <- NAMES[[kk]]
[13:37:09.228]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:09.228]                     next
[13:37:09.228]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:09.228]                 }
[13:37:09.228]                 if (length(args) > 0) 
[13:37:09.228]                   base::do.call(base::Sys.setenv, args = args)
[13:37:09.228]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:09.228]             }
[13:37:09.228]             else {
[13:37:09.228]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:09.228]             }
[13:37:09.228]             {
[13:37:09.228]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:09.228]                   0L) {
[13:37:09.228]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:09.228]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:09.228]                   base::options(opts)
[13:37:09.228]                 }
[13:37:09.228]                 {
[13:37:09.228]                   {
[13:37:09.228]                     NULL
[13:37:09.228]                     RNGkind("Mersenne-Twister")
[13:37:09.228]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:37:09.228]                       inherits = FALSE)
[13:37:09.228]                   }
[13:37:09.228]                   options(future.plan = NULL)
[13:37:09.228]                   if (is.na(NA_character_)) 
[13:37:09.228]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:09.228]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:09.228]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:09.228]                     .init = FALSE)
[13:37:09.228]                 }
[13:37:09.228]             }
[13:37:09.228]         }
[13:37:09.228]     })
[13:37:09.228]     if (TRUE) {
[13:37:09.228]         base::sink(type = "output", split = FALSE)
[13:37:09.228]         if (TRUE) {
[13:37:09.228]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:09.228]         }
[13:37:09.228]         else {
[13:37:09.228]             ...future.result["stdout"] <- base::list(NULL)
[13:37:09.228]         }
[13:37:09.228]         base::close(...future.stdout)
[13:37:09.228]         ...future.stdout <- NULL
[13:37:09.228]     }
[13:37:09.228]     ...future.result$conditions <- ...future.conditions
[13:37:09.228]     ...future.result$finished <- base::Sys.time()
[13:37:09.228]     ...future.result
[13:37:09.228] }
[13:37:09.230] plan(): Setting new future strategy stack:
[13:37:09.230] List of future strategies:
[13:37:09.230] 1. sequential:
[13:37:09.230]    - args: function (..., envir = parent.frame())
[13:37:09.230]    - tweaked: FALSE
[13:37:09.230]    - call: NULL
[13:37:09.231] plan(): nbrOfWorkers() = 1
[13:37:09.232] plan(): Setting new future strategy stack:
[13:37:09.232] List of future strategies:
[13:37:09.232] 1. sequential:
[13:37:09.232]    - args: function (..., envir = parent.frame())
[13:37:09.232]    - tweaked: FALSE
[13:37:09.232]    - call: future::plan("sequential")
[13:37:09.232] plan(): nbrOfWorkers() = 1
[13:37:09.232] SequentialFuture started (and completed)
[13:37:09.233] resolved() for ‘SequentialFuture’ ...
[13:37:09.233] - state: ‘finished’
[13:37:09.233] - run: TRUE
[13:37:09.233] - result: ‘FutureResult’
[13:37:09.233] resolved() for ‘SequentialFuture’ ... done
[1] TRUE
[1] 42
[13:37:09.237] getGlobalsAndPackages() ...
[13:37:09.237] Searching for globals...
[13:37:09.242] - globals found: [4] ‘{’, ‘<-’, ‘*’, ‘a’
[13:37:09.242] Searching for globals ... DONE
[13:37:09.242] Resolving globals: FALSE
[13:37:09.244] The total size of the 1 globals is 56 bytes (56 bytes)
[13:37:09.245] The total size of the 1 globals exported for future expression (‘{; b <- 3; c <- 2; a * b * c; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[13:37:09.245] - globals: [1] ‘a’
[13:37:09.245] 
[13:37:09.245] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    b <- 3
    c <- 2
    a * b * c
}
Lazy evaluation: TRUE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 56 bytes (numeric ‘a’ of 56 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 1c81bec4-3232-89a6-5464-8e86a1a5c510
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:37:09.246] Packages needed by the future expression (n = 0): <none>
[13:37:09.246] Packages needed by future strategies (n = 0): <none>
[13:37:09.247] {
[13:37:09.247]     {
[13:37:09.247]         {
[13:37:09.247]             ...future.startTime <- base::Sys.time()
[13:37:09.247]             {
[13:37:09.247]                 {
[13:37:09.247]                   {
[13:37:09.247]                     base::local({
[13:37:09.247]                       has_future <- base::requireNamespace("future", 
[13:37:09.247]                         quietly = TRUE)
[13:37:09.247]                       if (has_future) {
[13:37:09.247]                         ns <- base::getNamespace("future")
[13:37:09.247]                         version <- ns[[".package"]][["version"]]
[13:37:09.247]                         if (is.null(version)) 
[13:37:09.247]                           version <- utils::packageVersion("future")
[13:37:09.247]                       }
[13:37:09.247]                       else {
[13:37:09.247]                         version <- NULL
[13:37:09.247]                       }
[13:37:09.247]                       if (!has_future || version < "1.8.0") {
[13:37:09.247]                         info <- base::c(r_version = base::gsub("R version ", 
[13:37:09.247]                           "", base::R.version$version.string), 
[13:37:09.247]                           platform = base::sprintf("%s (%s-bit)", 
[13:37:09.247]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:09.247]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:09.247]                             "release", "version")], collapse = " "), 
[13:37:09.247]                           hostname = base::Sys.info()[["nodename"]])
[13:37:09.247]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:37:09.247]                           info)
[13:37:09.247]                         info <- base::paste(info, collapse = "; ")
[13:37:09.247]                         if (!has_future) {
[13:37:09.247]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:09.247]                             info)
[13:37:09.247]                         }
[13:37:09.247]                         else {
[13:37:09.247]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:09.247]                             info, version)
[13:37:09.247]                         }
[13:37:09.247]                         base::stop(msg)
[13:37:09.247]                       }
[13:37:09.247]                     })
[13:37:09.247]                   }
[13:37:09.247]                   ...future.strategy.old <- future::plan("list")
[13:37:09.247]                   options(future.plan = NULL)
[13:37:09.247]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:09.247]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:09.247]                 }
[13:37:09.247]                 ...future.workdir <- getwd()
[13:37:09.247]             }
[13:37:09.247]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:09.247]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:09.247]         }
[13:37:09.247]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:09.247]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:09.247]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:09.247]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:09.247]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:09.247]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:09.247]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:09.247]             base::names(...future.oldOptions))
[13:37:09.247]     }
[13:37:09.247]     if (FALSE) {
[13:37:09.247]     }
[13:37:09.247]     else {
[13:37:09.247]         if (TRUE) {
[13:37:09.247]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:09.247]                 open = "w")
[13:37:09.247]         }
[13:37:09.247]         else {
[13:37:09.247]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:09.247]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:09.247]         }
[13:37:09.247]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:09.247]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:09.247]             base::sink(type = "output", split = FALSE)
[13:37:09.247]             base::close(...future.stdout)
[13:37:09.247]         }, add = TRUE)
[13:37:09.247]     }
[13:37:09.247]     ...future.frame <- base::sys.nframe()
[13:37:09.247]     ...future.conditions <- base::list()
[13:37:09.247]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:09.247]     if (FALSE) {
[13:37:09.247]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:09.247]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:09.247]     }
[13:37:09.247]     ...future.result <- base::tryCatch({
[13:37:09.247]         base::withCallingHandlers({
[13:37:09.247]             ...future.value <- base::withVisible(base::local({
[13:37:09.247]                 b <- 3
[13:37:09.247]                 c <- 2
[13:37:09.247]                 a * b * c
[13:37:09.247]             }))
[13:37:09.247]             future::FutureResult(value = ...future.value$value, 
[13:37:09.247]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:09.247]                   ...future.rng), globalenv = if (FALSE) 
[13:37:09.247]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:09.247]                     ...future.globalenv.names))
[13:37:09.247]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:09.247]         }, condition = base::local({
[13:37:09.247]             c <- base::c
[13:37:09.247]             inherits <- base::inherits
[13:37:09.247]             invokeRestart <- base::invokeRestart
[13:37:09.247]             length <- base::length
[13:37:09.247]             list <- base::list
[13:37:09.247]             seq.int <- base::seq.int
[13:37:09.247]             signalCondition <- base::signalCondition
[13:37:09.247]             sys.calls <- base::sys.calls
[13:37:09.247]             `[[` <- base::`[[`
[13:37:09.247]             `+` <- base::`+`
[13:37:09.247]             `<<-` <- base::`<<-`
[13:37:09.247]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:09.247]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:09.247]                   3L)]
[13:37:09.247]             }
[13:37:09.247]             function(cond) {
[13:37:09.247]                 is_error <- inherits(cond, "error")
[13:37:09.247]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:09.247]                   NULL)
[13:37:09.247]                 if (is_error) {
[13:37:09.247]                   sessionInformation <- function() {
[13:37:09.247]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:09.247]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:09.247]                       search = base::search(), system = base::Sys.info())
[13:37:09.247]                   }
[13:37:09.247]                   ...future.conditions[[length(...future.conditions) + 
[13:37:09.247]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:09.247]                     cond$call), session = sessionInformation(), 
[13:37:09.247]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:09.247]                   signalCondition(cond)
[13:37:09.247]                 }
[13:37:09.247]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:09.247]                 "immediateCondition"))) {
[13:37:09.247]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:09.247]                   ...future.conditions[[length(...future.conditions) + 
[13:37:09.247]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:09.247]                   if (TRUE && !signal) {
[13:37:09.247]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:09.247]                     {
[13:37:09.247]                       inherits <- base::inherits
[13:37:09.247]                       invokeRestart <- base::invokeRestart
[13:37:09.247]                       is.null <- base::is.null
[13:37:09.247]                       muffled <- FALSE
[13:37:09.247]                       if (inherits(cond, "message")) {
[13:37:09.247]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:09.247]                         if (muffled) 
[13:37:09.247]                           invokeRestart("muffleMessage")
[13:37:09.247]                       }
[13:37:09.247]                       else if (inherits(cond, "warning")) {
[13:37:09.247]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:09.247]                         if (muffled) 
[13:37:09.247]                           invokeRestart("muffleWarning")
[13:37:09.247]                       }
[13:37:09.247]                       else if (inherits(cond, "condition")) {
[13:37:09.247]                         if (!is.null(pattern)) {
[13:37:09.247]                           computeRestarts <- base::computeRestarts
[13:37:09.247]                           grepl <- base::grepl
[13:37:09.247]                           restarts <- computeRestarts(cond)
[13:37:09.247]                           for (restart in restarts) {
[13:37:09.247]                             name <- restart$name
[13:37:09.247]                             if (is.null(name)) 
[13:37:09.247]                               next
[13:37:09.247]                             if (!grepl(pattern, name)) 
[13:37:09.247]                               next
[13:37:09.247]                             invokeRestart(restart)
[13:37:09.247]                             muffled <- TRUE
[13:37:09.247]                             break
[13:37:09.247]                           }
[13:37:09.247]                         }
[13:37:09.247]                       }
[13:37:09.247]                       invisible(muffled)
[13:37:09.247]                     }
[13:37:09.247]                     muffleCondition(cond, pattern = "^muffle")
[13:37:09.247]                   }
[13:37:09.247]                 }
[13:37:09.247]                 else {
[13:37:09.247]                   if (TRUE) {
[13:37:09.247]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:09.247]                     {
[13:37:09.247]                       inherits <- base::inherits
[13:37:09.247]                       invokeRestart <- base::invokeRestart
[13:37:09.247]                       is.null <- base::is.null
[13:37:09.247]                       muffled <- FALSE
[13:37:09.247]                       if (inherits(cond, "message")) {
[13:37:09.247]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:09.247]                         if (muffled) 
[13:37:09.247]                           invokeRestart("muffleMessage")
[13:37:09.247]                       }
[13:37:09.247]                       else if (inherits(cond, "warning")) {
[13:37:09.247]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:09.247]                         if (muffled) 
[13:37:09.247]                           invokeRestart("muffleWarning")
[13:37:09.247]                       }
[13:37:09.247]                       else if (inherits(cond, "condition")) {
[13:37:09.247]                         if (!is.null(pattern)) {
[13:37:09.247]                           computeRestarts <- base::computeRestarts
[13:37:09.247]                           grepl <- base::grepl
[13:37:09.247]                           restarts <- computeRestarts(cond)
[13:37:09.247]                           for (restart in restarts) {
[13:37:09.247]                             name <- restart$name
[13:37:09.247]                             if (is.null(name)) 
[13:37:09.247]                               next
[13:37:09.247]                             if (!grepl(pattern, name)) 
[13:37:09.247]                               next
[13:37:09.247]                             invokeRestart(restart)
[13:37:09.247]                             muffled <- TRUE
[13:37:09.247]                             break
[13:37:09.247]                           }
[13:37:09.247]                         }
[13:37:09.247]                       }
[13:37:09.247]                       invisible(muffled)
[13:37:09.247]                     }
[13:37:09.247]                     muffleCondition(cond, pattern = "^muffle")
[13:37:09.247]                   }
[13:37:09.247]                 }
[13:37:09.247]             }
[13:37:09.247]         }))
[13:37:09.247]     }, error = function(ex) {
[13:37:09.247]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:09.247]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:09.247]                 ...future.rng), started = ...future.startTime, 
[13:37:09.247]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:09.247]             version = "1.8"), class = "FutureResult")
[13:37:09.247]     }, finally = {
[13:37:09.247]         if (!identical(...future.workdir, getwd())) 
[13:37:09.247]             setwd(...future.workdir)
[13:37:09.247]         {
[13:37:09.247]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:09.247]                 ...future.oldOptions$nwarnings <- NULL
[13:37:09.247]             }
[13:37:09.247]             base::options(...future.oldOptions)
[13:37:09.247]             if (.Platform$OS.type == "windows") {
[13:37:09.247]                 old_names <- names(...future.oldEnvVars)
[13:37:09.247]                 envs <- base::Sys.getenv()
[13:37:09.247]                 names <- names(envs)
[13:37:09.247]                 common <- intersect(names, old_names)
[13:37:09.247]                 added <- setdiff(names, old_names)
[13:37:09.247]                 removed <- setdiff(old_names, names)
[13:37:09.247]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:09.247]                   envs[common]]
[13:37:09.247]                 NAMES <- toupper(changed)
[13:37:09.247]                 args <- list()
[13:37:09.247]                 for (kk in seq_along(NAMES)) {
[13:37:09.247]                   name <- changed[[kk]]
[13:37:09.247]                   NAME <- NAMES[[kk]]
[13:37:09.247]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:09.247]                     next
[13:37:09.247]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:09.247]                 }
[13:37:09.247]                 NAMES <- toupper(added)
[13:37:09.247]                 for (kk in seq_along(NAMES)) {
[13:37:09.247]                   name <- added[[kk]]
[13:37:09.247]                   NAME <- NAMES[[kk]]
[13:37:09.247]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:09.247]                     next
[13:37:09.247]                   args[[name]] <- ""
[13:37:09.247]                 }
[13:37:09.247]                 NAMES <- toupper(removed)
[13:37:09.247]                 for (kk in seq_along(NAMES)) {
[13:37:09.247]                   name <- removed[[kk]]
[13:37:09.247]                   NAME <- NAMES[[kk]]
[13:37:09.247]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:09.247]                     next
[13:37:09.247]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:09.247]                 }
[13:37:09.247]                 if (length(args) > 0) 
[13:37:09.247]                   base::do.call(base::Sys.setenv, args = args)
[13:37:09.247]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:09.247]             }
[13:37:09.247]             else {
[13:37:09.247]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:09.247]             }
[13:37:09.247]             {
[13:37:09.247]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:09.247]                   0L) {
[13:37:09.247]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:09.247]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:09.247]                   base::options(opts)
[13:37:09.247]                 }
[13:37:09.247]                 {
[13:37:09.247]                   {
[13:37:09.247]                     NULL
[13:37:09.247]                     RNGkind("Mersenne-Twister")
[13:37:09.247]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:37:09.247]                       inherits = FALSE)
[13:37:09.247]                   }
[13:37:09.247]                   options(future.plan = NULL)
[13:37:09.247]                   if (is.na(NA_character_)) 
[13:37:09.247]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:09.247]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:09.247]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:09.247]                     .init = FALSE)
[13:37:09.247]                 }
[13:37:09.247]             }
[13:37:09.247]         }
[13:37:09.247]     })
[13:37:09.247]     if (TRUE) {
[13:37:09.247]         base::sink(type = "output", split = FALSE)
[13:37:09.247]         if (TRUE) {
[13:37:09.247]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:09.247]         }
[13:37:09.247]         else {
[13:37:09.247]             ...future.result["stdout"] <- base::list(NULL)
[13:37:09.247]         }
[13:37:09.247]         base::close(...future.stdout)
[13:37:09.247]         ...future.stdout <- NULL
[13:37:09.247]     }
[13:37:09.247]     ...future.result$conditions <- ...future.conditions
[13:37:09.247]     ...future.result$finished <- base::Sys.time()
[13:37:09.247]     ...future.result
[13:37:09.247] }
[13:37:09.248] assign_globals() ...
[13:37:09.248] List of 1
[13:37:09.248]  $ a: num 0
[13:37:09.248]  - attr(*, "where")=List of 1
[13:37:09.248]   ..$ a:<environment: R_EmptyEnv> 
[13:37:09.248]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:37:09.248]  - attr(*, "resolved")= logi FALSE
[13:37:09.248]  - attr(*, "total_size")= num 56
[13:37:09.253] - copied ‘a’ to environment
[13:37:09.253] assign_globals() ... done
[13:37:09.253] plan(): Setting new future strategy stack:
[13:37:09.253] List of future strategies:
[13:37:09.253] 1. sequential:
[13:37:09.253]    - args: function (..., envir = parent.frame())
[13:37:09.253]    - tweaked: FALSE
[13:37:09.253]    - call: NULL
[13:37:09.253] plan(): nbrOfWorkers() = 1
[13:37:09.254] plan(): Setting new future strategy stack:
[13:37:09.254] List of future strategies:
[13:37:09.254] 1. sequential:
[13:37:09.254]    - args: function (..., envir = parent.frame())
[13:37:09.254]    - tweaked: FALSE
[13:37:09.254]    - call: future::plan("sequential")
[13:37:09.255] plan(): nbrOfWorkers() = 1
[13:37:09.255] SequentialFuture started (and completed)
[1] 0
*** multisession() with globals and blocking
 - Creating multisession future #2 ...
[13:37:09.258] getGlobalsAndPackages() ...
[13:37:09.258] Searching for globals...
[13:37:09.259] - globals found: [2] ‘{’, ‘ii’
[13:37:09.259] Searching for globals ... DONE
[13:37:09.259] Resolving globals: FALSE
[13:37:09.259] The total size of the 1 globals is 56 bytes (56 bytes)
[13:37:09.260] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[13:37:09.260] - globals: [1] ‘ii’
[13:37:09.260] 
[13:37:09.260] getGlobalsAndPackages() ... DONE
 - Creating multisession future #1 ...
[13:37:09.264] getGlobalsAndPackages() ...
[13:37:09.264] Searching for globals...
[13:37:09.264] - globals found: [2] ‘{’, ‘ii’
[13:37:09.264] Searching for globals ... DONE
[13:37:09.265] Resolving globals: FALSE
[13:37:09.265] The total size of the 1 globals is 56 bytes (56 bytes)
[13:37:09.265] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[13:37:09.265] - globals: [1] ‘ii’
[13:37:09.265] 
[13:37:09.266] getGlobalsAndPackages() ... DONE
 - Resolving 2 multisession futures
[13:37:09.266] Packages needed by the future expression (n = 0): <none>
[13:37:09.266] Packages needed by future strategies (n = 0): <none>
[13:37:09.267] {
[13:37:09.267]     {
[13:37:09.267]         {
[13:37:09.267]             ...future.startTime <- base::Sys.time()
[13:37:09.267]             {
[13:37:09.267]                 {
[13:37:09.267]                   {
[13:37:09.267]                     base::local({
[13:37:09.267]                       has_future <- base::requireNamespace("future", 
[13:37:09.267]                         quietly = TRUE)
[13:37:09.267]                       if (has_future) {
[13:37:09.267]                         ns <- base::getNamespace("future")
[13:37:09.267]                         version <- ns[[".package"]][["version"]]
[13:37:09.267]                         if (is.null(version)) 
[13:37:09.267]                           version <- utils::packageVersion("future")
[13:37:09.267]                       }
[13:37:09.267]                       else {
[13:37:09.267]                         version <- NULL
[13:37:09.267]                       }
[13:37:09.267]                       if (!has_future || version < "1.8.0") {
[13:37:09.267]                         info <- base::c(r_version = base::gsub("R version ", 
[13:37:09.267]                           "", base::R.version$version.string), 
[13:37:09.267]                           platform = base::sprintf("%s (%s-bit)", 
[13:37:09.267]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:09.267]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:09.267]                             "release", "version")], collapse = " "), 
[13:37:09.267]                           hostname = base::Sys.info()[["nodename"]])
[13:37:09.267]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:37:09.267]                           info)
[13:37:09.267]                         info <- base::paste(info, collapse = "; ")
[13:37:09.267]                         if (!has_future) {
[13:37:09.267]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:09.267]                             info)
[13:37:09.267]                         }
[13:37:09.267]                         else {
[13:37:09.267]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:09.267]                             info, version)
[13:37:09.267]                         }
[13:37:09.267]                         base::stop(msg)
[13:37:09.267]                       }
[13:37:09.267]                     })
[13:37:09.267]                   }
[13:37:09.267]                   ...future.strategy.old <- future::plan("list")
[13:37:09.267]                   options(future.plan = NULL)
[13:37:09.267]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:09.267]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:09.267]                 }
[13:37:09.267]                 ...future.workdir <- getwd()
[13:37:09.267]             }
[13:37:09.267]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:09.267]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:09.267]         }
[13:37:09.267]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:09.267]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:09.267]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:09.267]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:09.267]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:09.267]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:09.267]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:09.267]             base::names(...future.oldOptions))
[13:37:09.267]     }
[13:37:09.267]     if (FALSE) {
[13:37:09.267]     }
[13:37:09.267]     else {
[13:37:09.267]         if (TRUE) {
[13:37:09.267]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:09.267]                 open = "w")
[13:37:09.267]         }
[13:37:09.267]         else {
[13:37:09.267]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:09.267]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:09.267]         }
[13:37:09.267]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:09.267]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:09.267]             base::sink(type = "output", split = FALSE)
[13:37:09.267]             base::close(...future.stdout)
[13:37:09.267]         }, add = TRUE)
[13:37:09.267]     }
[13:37:09.267]     ...future.frame <- base::sys.nframe()
[13:37:09.267]     ...future.conditions <- base::list()
[13:37:09.267]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:09.267]     if (FALSE) {
[13:37:09.267]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:09.267]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:09.267]     }
[13:37:09.267]     ...future.result <- base::tryCatch({
[13:37:09.267]         base::withCallingHandlers({
[13:37:09.267]             ...future.value <- base::withVisible(base::local({
[13:37:09.267]                 ii
[13:37:09.267]             }))
[13:37:09.267]             future::FutureResult(value = ...future.value$value, 
[13:37:09.267]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:09.267]                   ...future.rng), globalenv = if (FALSE) 
[13:37:09.267]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:09.267]                     ...future.globalenv.names))
[13:37:09.267]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:09.267]         }, condition = base::local({
[13:37:09.267]             c <- base::c
[13:37:09.267]             inherits <- base::inherits
[13:37:09.267]             invokeRestart <- base::invokeRestart
[13:37:09.267]             length <- base::length
[13:37:09.267]             list <- base::list
[13:37:09.267]             seq.int <- base::seq.int
[13:37:09.267]             signalCondition <- base::signalCondition
[13:37:09.267]             sys.calls <- base::sys.calls
[13:37:09.267]             `[[` <- base::`[[`
[13:37:09.267]             `+` <- base::`+`
[13:37:09.267]             `<<-` <- base::`<<-`
[13:37:09.267]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:09.267]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:09.267]                   3L)]
[13:37:09.267]             }
[13:37:09.267]             function(cond) {
[13:37:09.267]                 is_error <- inherits(cond, "error")
[13:37:09.267]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:09.267]                   NULL)
[13:37:09.267]                 if (is_error) {
[13:37:09.267]                   sessionInformation <- function() {
[13:37:09.267]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:09.267]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:09.267]                       search = base::search(), system = base::Sys.info())
[13:37:09.267]                   }
[13:37:09.267]                   ...future.conditions[[length(...future.conditions) + 
[13:37:09.267]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:09.267]                     cond$call), session = sessionInformation(), 
[13:37:09.267]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:09.267]                   signalCondition(cond)
[13:37:09.267]                 }
[13:37:09.267]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:09.267]                 "immediateCondition"))) {
[13:37:09.267]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:09.267]                   ...future.conditions[[length(...future.conditions) + 
[13:37:09.267]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:09.267]                   if (TRUE && !signal) {
[13:37:09.267]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:09.267]                     {
[13:37:09.267]                       inherits <- base::inherits
[13:37:09.267]                       invokeRestart <- base::invokeRestart
[13:37:09.267]                       is.null <- base::is.null
[13:37:09.267]                       muffled <- FALSE
[13:37:09.267]                       if (inherits(cond, "message")) {
[13:37:09.267]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:09.267]                         if (muffled) 
[13:37:09.267]                           invokeRestart("muffleMessage")
[13:37:09.267]                       }
[13:37:09.267]                       else if (inherits(cond, "warning")) {
[13:37:09.267]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:09.267]                         if (muffled) 
[13:37:09.267]                           invokeRestart("muffleWarning")
[13:37:09.267]                       }
[13:37:09.267]                       else if (inherits(cond, "condition")) {
[13:37:09.267]                         if (!is.null(pattern)) {
[13:37:09.267]                           computeRestarts <- base::computeRestarts
[13:37:09.267]                           grepl <- base::grepl
[13:37:09.267]                           restarts <- computeRestarts(cond)
[13:37:09.267]                           for (restart in restarts) {
[13:37:09.267]                             name <- restart$name
[13:37:09.267]                             if (is.null(name)) 
[13:37:09.267]                               next
[13:37:09.267]                             if (!grepl(pattern, name)) 
[13:37:09.267]                               next
[13:37:09.267]                             invokeRestart(restart)
[13:37:09.267]                             muffled <- TRUE
[13:37:09.267]                             break
[13:37:09.267]                           }
[13:37:09.267]                         }
[13:37:09.267]                       }
[13:37:09.267]                       invisible(muffled)
[13:37:09.267]                     }
[13:37:09.267]                     muffleCondition(cond, pattern = "^muffle")
[13:37:09.267]                   }
[13:37:09.267]                 }
[13:37:09.267]                 else {
[13:37:09.267]                   if (TRUE) {
[13:37:09.267]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:09.267]                     {
[13:37:09.267]                       inherits <- base::inherits
[13:37:09.267]                       invokeRestart <- base::invokeRestart
[13:37:09.267]                       is.null <- base::is.null
[13:37:09.267]                       muffled <- FALSE
[13:37:09.267]                       if (inherits(cond, "message")) {
[13:37:09.267]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:09.267]                         if (muffled) 
[13:37:09.267]                           invokeRestart("muffleMessage")
[13:37:09.267]                       }
[13:37:09.267]                       else if (inherits(cond, "warning")) {
[13:37:09.267]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:09.267]                         if (muffled) 
[13:37:09.267]                           invokeRestart("muffleWarning")
[13:37:09.267]                       }
[13:37:09.267]                       else if (inherits(cond, "condition")) {
[13:37:09.267]                         if (!is.null(pattern)) {
[13:37:09.267]                           computeRestarts <- base::computeRestarts
[13:37:09.267]                           grepl <- base::grepl
[13:37:09.267]                           restarts <- computeRestarts(cond)
[13:37:09.267]                           for (restart in restarts) {
[13:37:09.267]                             name <- restart$name
[13:37:09.267]                             if (is.null(name)) 
[13:37:09.267]                               next
[13:37:09.267]                             if (!grepl(pattern, name)) 
[13:37:09.267]                               next
[13:37:09.267]                             invokeRestart(restart)
[13:37:09.267]                             muffled <- TRUE
[13:37:09.267]                             break
[13:37:09.267]                           }
[13:37:09.267]                         }
[13:37:09.267]                       }
[13:37:09.267]                       invisible(muffled)
[13:37:09.267]                     }
[13:37:09.267]                     muffleCondition(cond, pattern = "^muffle")
[13:37:09.267]                   }
[13:37:09.267]                 }
[13:37:09.267]             }
[13:37:09.267]         }))
[13:37:09.267]     }, error = function(ex) {
[13:37:09.267]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:09.267]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:09.267]                 ...future.rng), started = ...future.startTime, 
[13:37:09.267]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:09.267]             version = "1.8"), class = "FutureResult")
[13:37:09.267]     }, finally = {
[13:37:09.267]         if (!identical(...future.workdir, getwd())) 
[13:37:09.267]             setwd(...future.workdir)
[13:37:09.267]         {
[13:37:09.267]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:09.267]                 ...future.oldOptions$nwarnings <- NULL
[13:37:09.267]             }
[13:37:09.267]             base::options(...future.oldOptions)
[13:37:09.267]             if (.Platform$OS.type == "windows") {
[13:37:09.267]                 old_names <- names(...future.oldEnvVars)
[13:37:09.267]                 envs <- base::Sys.getenv()
[13:37:09.267]                 names <- names(envs)
[13:37:09.267]                 common <- intersect(names, old_names)
[13:37:09.267]                 added <- setdiff(names, old_names)
[13:37:09.267]                 removed <- setdiff(old_names, names)
[13:37:09.267]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:09.267]                   envs[common]]
[13:37:09.267]                 NAMES <- toupper(changed)
[13:37:09.267]                 args <- list()
[13:37:09.267]                 for (kk in seq_along(NAMES)) {
[13:37:09.267]                   name <- changed[[kk]]
[13:37:09.267]                   NAME <- NAMES[[kk]]
[13:37:09.267]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:09.267]                     next
[13:37:09.267]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:09.267]                 }
[13:37:09.267]                 NAMES <- toupper(added)
[13:37:09.267]                 for (kk in seq_along(NAMES)) {
[13:37:09.267]                   name <- added[[kk]]
[13:37:09.267]                   NAME <- NAMES[[kk]]
[13:37:09.267]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:09.267]                     next
[13:37:09.267]                   args[[name]] <- ""
[13:37:09.267]                 }
[13:37:09.267]                 NAMES <- toupper(removed)
[13:37:09.267]                 for (kk in seq_along(NAMES)) {
[13:37:09.267]                   name <- removed[[kk]]
[13:37:09.267]                   NAME <- NAMES[[kk]]
[13:37:09.267]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:09.267]                     next
[13:37:09.267]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:09.267]                 }
[13:37:09.267]                 if (length(args) > 0) 
[13:37:09.267]                   base::do.call(base::Sys.setenv, args = args)
[13:37:09.267]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:09.267]             }
[13:37:09.267]             else {
[13:37:09.267]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:09.267]             }
[13:37:09.267]             {
[13:37:09.267]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:09.267]                   0L) {
[13:37:09.267]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:09.267]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:09.267]                   base::options(opts)
[13:37:09.267]                 }
[13:37:09.267]                 {
[13:37:09.267]                   {
[13:37:09.267]                     NULL
[13:37:09.267]                     RNGkind("Mersenne-Twister")
[13:37:09.267]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:37:09.267]                       inherits = FALSE)
[13:37:09.267]                   }
[13:37:09.267]                   options(future.plan = NULL)
[13:37:09.267]                   if (is.na(NA_character_)) 
[13:37:09.267]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:09.267]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:09.267]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:09.267]                     .init = FALSE)
[13:37:09.267]                 }
[13:37:09.267]             }
[13:37:09.267]         }
[13:37:09.267]     })
[13:37:09.267]     if (TRUE) {
[13:37:09.267]         base::sink(type = "output", split = FALSE)
[13:37:09.267]         if (TRUE) {
[13:37:09.267]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:09.267]         }
[13:37:09.267]         else {
[13:37:09.267]             ...future.result["stdout"] <- base::list(NULL)
[13:37:09.267]         }
[13:37:09.267]         base::close(...future.stdout)
[13:37:09.267]         ...future.stdout <- NULL
[13:37:09.267]     }
[13:37:09.267]     ...future.result$conditions <- ...future.conditions
[13:37:09.267]     ...future.result$finished <- base::Sys.time()
[13:37:09.267]     ...future.result
[13:37:09.267] }
[13:37:09.268] assign_globals() ...
[13:37:09.268] List of 1
[13:37:09.268]  $ ii: int 1
[13:37:09.268]  - attr(*, "where")=List of 1
[13:37:09.268]   ..$ ii:<environment: R_EmptyEnv> 
[13:37:09.268]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:37:09.268]  - attr(*, "resolved")= logi FALSE
[13:37:09.268]  - attr(*, "total_size")= num 56
[13:37:09.270] - copied ‘ii’ to environment
[13:37:09.271] assign_globals() ... done
[13:37:09.271] plan(): Setting new future strategy stack:
[13:37:09.271] List of future strategies:
[13:37:09.271] 1. sequential:
[13:37:09.271]    - args: function (..., envir = parent.frame())
[13:37:09.271]    - tweaked: FALSE
[13:37:09.271]    - call: NULL
[13:37:09.271] plan(): nbrOfWorkers() = 1
[13:37:09.272] plan(): Setting new future strategy stack:
[13:37:09.272] List of future strategies:
[13:37:09.272] 1. sequential:
[13:37:09.272]    - args: function (..., envir = parent.frame())
[13:37:09.272]    - tweaked: FALSE
[13:37:09.272]    - call: future::plan("sequential")
[13:37:09.272] plan(): nbrOfWorkers() = 1
[13:37:09.273] SequentialFuture started (and completed)
[13:37:09.273] Packages needed by the future expression (n = 0): <none>
[13:37:09.273] Packages needed by future strategies (n = 0): <none>
[13:37:09.273] {
[13:37:09.273]     {
[13:37:09.273]         {
[13:37:09.273]             ...future.startTime <- base::Sys.time()
[13:37:09.273]             {
[13:37:09.273]                 {
[13:37:09.273]                   {
[13:37:09.273]                     base::local({
[13:37:09.273]                       has_future <- base::requireNamespace("future", 
[13:37:09.273]                         quietly = TRUE)
[13:37:09.273]                       if (has_future) {
[13:37:09.273]                         ns <- base::getNamespace("future")
[13:37:09.273]                         version <- ns[[".package"]][["version"]]
[13:37:09.273]                         if (is.null(version)) 
[13:37:09.273]                           version <- utils::packageVersion("future")
[13:37:09.273]                       }
[13:37:09.273]                       else {
[13:37:09.273]                         version <- NULL
[13:37:09.273]                       }
[13:37:09.273]                       if (!has_future || version < "1.8.0") {
[13:37:09.273]                         info <- base::c(r_version = base::gsub("R version ", 
[13:37:09.273]                           "", base::R.version$version.string), 
[13:37:09.273]                           platform = base::sprintf("%s (%s-bit)", 
[13:37:09.273]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:09.273]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:09.273]                             "release", "version")], collapse = " "), 
[13:37:09.273]                           hostname = base::Sys.info()[["nodename"]])
[13:37:09.273]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:37:09.273]                           info)
[13:37:09.273]                         info <- base::paste(info, collapse = "; ")
[13:37:09.273]                         if (!has_future) {
[13:37:09.273]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:09.273]                             info)
[13:37:09.273]                         }
[13:37:09.273]                         else {
[13:37:09.273]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:09.273]                             info, version)
[13:37:09.273]                         }
[13:37:09.273]                         base::stop(msg)
[13:37:09.273]                       }
[13:37:09.273]                     })
[13:37:09.273]                   }
[13:37:09.273]                   ...future.strategy.old <- future::plan("list")
[13:37:09.273]                   options(future.plan = NULL)
[13:37:09.273]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:09.273]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:09.273]                 }
[13:37:09.273]                 ...future.workdir <- getwd()
[13:37:09.273]             }
[13:37:09.273]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:09.273]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:09.273]         }
[13:37:09.273]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:09.273]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:09.273]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:09.273]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:09.273]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:09.273]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:09.273]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:09.273]             base::names(...future.oldOptions))
[13:37:09.273]     }
[13:37:09.273]     if (FALSE) {
[13:37:09.273]     }
[13:37:09.273]     else {
[13:37:09.273]         if (TRUE) {
[13:37:09.273]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:09.273]                 open = "w")
[13:37:09.273]         }
[13:37:09.273]         else {
[13:37:09.273]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:09.273]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:09.273]         }
[13:37:09.273]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:09.273]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:09.273]             base::sink(type = "output", split = FALSE)
[13:37:09.273]             base::close(...future.stdout)
[13:37:09.273]         }, add = TRUE)
[13:37:09.273]     }
[13:37:09.273]     ...future.frame <- base::sys.nframe()
[13:37:09.273]     ...future.conditions <- base::list()
[13:37:09.273]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:09.273]     if (FALSE) {
[13:37:09.273]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:09.273]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:09.273]     }
[13:37:09.273]     ...future.result <- base::tryCatch({
[13:37:09.273]         base::withCallingHandlers({
[13:37:09.273]             ...future.value <- base::withVisible(base::local({
[13:37:09.273]                 ii
[13:37:09.273]             }))
[13:37:09.273]             future::FutureResult(value = ...future.value$value, 
[13:37:09.273]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:09.273]                   ...future.rng), globalenv = if (FALSE) 
[13:37:09.273]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:09.273]                     ...future.globalenv.names))
[13:37:09.273]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:09.273]         }, condition = base::local({
[13:37:09.273]             c <- base::c
[13:37:09.273]             inherits <- base::inherits
[13:37:09.273]             invokeRestart <- base::invokeRestart
[13:37:09.273]             length <- base::length
[13:37:09.273]             list <- base::list
[13:37:09.273]             seq.int <- base::seq.int
[13:37:09.273]             signalCondition <- base::signalCondition
[13:37:09.273]             sys.calls <- base::sys.calls
[13:37:09.273]             `[[` <- base::`[[`
[13:37:09.273]             `+` <- base::`+`
[13:37:09.273]             `<<-` <- base::`<<-`
[13:37:09.273]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:09.273]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:09.273]                   3L)]
[13:37:09.273]             }
[13:37:09.273]             function(cond) {
[13:37:09.273]                 is_error <- inherits(cond, "error")
[13:37:09.273]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:09.273]                   NULL)
[13:37:09.273]                 if (is_error) {
[13:37:09.273]                   sessionInformation <- function() {
[13:37:09.273]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:09.273]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:09.273]                       search = base::search(), system = base::Sys.info())
[13:37:09.273]                   }
[13:37:09.273]                   ...future.conditions[[length(...future.conditions) + 
[13:37:09.273]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:09.273]                     cond$call), session = sessionInformation(), 
[13:37:09.273]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:09.273]                   signalCondition(cond)
[13:37:09.273]                 }
[13:37:09.273]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:09.273]                 "immediateCondition"))) {
[13:37:09.273]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:09.273]                   ...future.conditions[[length(...future.conditions) + 
[13:37:09.273]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:09.273]                   if (TRUE && !signal) {
[13:37:09.273]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:09.273]                     {
[13:37:09.273]                       inherits <- base::inherits
[13:37:09.273]                       invokeRestart <- base::invokeRestart
[13:37:09.273]                       is.null <- base::is.null
[13:37:09.273]                       muffled <- FALSE
[13:37:09.273]                       if (inherits(cond, "message")) {
[13:37:09.273]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:09.273]                         if (muffled) 
[13:37:09.273]                           invokeRestart("muffleMessage")
[13:37:09.273]                       }
[13:37:09.273]                       else if (inherits(cond, "warning")) {
[13:37:09.273]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:09.273]                         if (muffled) 
[13:37:09.273]                           invokeRestart("muffleWarning")
[13:37:09.273]                       }
[13:37:09.273]                       else if (inherits(cond, "condition")) {
[13:37:09.273]                         if (!is.null(pattern)) {
[13:37:09.273]                           computeRestarts <- base::computeRestarts
[13:37:09.273]                           grepl <- base::grepl
[13:37:09.273]                           restarts <- computeRestarts(cond)
[13:37:09.273]                           for (restart in restarts) {
[13:37:09.273]                             name <- restart$name
[13:37:09.273]                             if (is.null(name)) 
[13:37:09.273]                               next
[13:37:09.273]                             if (!grepl(pattern, name)) 
[13:37:09.273]                               next
[13:37:09.273]                             invokeRestart(restart)
[13:37:09.273]                             muffled <- TRUE
[13:37:09.273]                             break
[13:37:09.273]                           }
[13:37:09.273]                         }
[13:37:09.273]                       }
[13:37:09.273]                       invisible(muffled)
[13:37:09.273]                     }
[13:37:09.273]                     muffleCondition(cond, pattern = "^muffle")
[13:37:09.273]                   }
[13:37:09.273]                 }
[13:37:09.273]                 else {
[13:37:09.273]                   if (TRUE) {
[13:37:09.273]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:09.273]                     {
[13:37:09.273]                       inherits <- base::inherits
[13:37:09.273]                       invokeRestart <- base::invokeRestart
[13:37:09.273]                       is.null <- base::is.null
[13:37:09.273]                       muffled <- FALSE
[13:37:09.273]                       if (inherits(cond, "message")) {
[13:37:09.273]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:09.273]                         if (muffled) 
[13:37:09.273]                           invokeRestart("muffleMessage")
[13:37:09.273]                       }
[13:37:09.273]                       else if (inherits(cond, "warning")) {
[13:37:09.273]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:09.273]                         if (muffled) 
[13:37:09.273]                           invokeRestart("muffleWarning")
[13:37:09.273]                       }
[13:37:09.273]                       else if (inherits(cond, "condition")) {
[13:37:09.273]                         if (!is.null(pattern)) {
[13:37:09.273]                           computeRestarts <- base::computeRestarts
[13:37:09.273]                           grepl <- base::grepl
[13:37:09.273]                           restarts <- computeRestarts(cond)
[13:37:09.273]                           for (restart in restarts) {
[13:37:09.273]                             name <- restart$name
[13:37:09.273]                             if (is.null(name)) 
[13:37:09.273]                               next
[13:37:09.273]                             if (!grepl(pattern, name)) 
[13:37:09.273]                               next
[13:37:09.273]                             invokeRestart(restart)
[13:37:09.273]                             muffled <- TRUE
[13:37:09.273]                             break
[13:37:09.273]                           }
[13:37:09.273]                         }
[13:37:09.273]                       }
[13:37:09.273]                       invisible(muffled)
[13:37:09.273]                     }
[13:37:09.273]                     muffleCondition(cond, pattern = "^muffle")
[13:37:09.273]                   }
[13:37:09.273]                 }
[13:37:09.273]             }
[13:37:09.273]         }))
[13:37:09.273]     }, error = function(ex) {
[13:37:09.273]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:09.273]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:09.273]                 ...future.rng), started = ...future.startTime, 
[13:37:09.273]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:09.273]             version = "1.8"), class = "FutureResult")
[13:37:09.273]     }, finally = {
[13:37:09.273]         if (!identical(...future.workdir, getwd())) 
[13:37:09.273]             setwd(...future.workdir)
[13:37:09.273]         {
[13:37:09.273]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:09.273]                 ...future.oldOptions$nwarnings <- NULL
[13:37:09.273]             }
[13:37:09.273]             base::options(...future.oldOptions)
[13:37:09.273]             if (.Platform$OS.type == "windows") {
[13:37:09.273]                 old_names <- names(...future.oldEnvVars)
[13:37:09.273]                 envs <- base::Sys.getenv()
[13:37:09.273]                 names <- names(envs)
[13:37:09.273]                 common <- intersect(names, old_names)
[13:37:09.273]                 added <- setdiff(names, old_names)
[13:37:09.273]                 removed <- setdiff(old_names, names)
[13:37:09.273]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:09.273]                   envs[common]]
[13:37:09.273]                 NAMES <- toupper(changed)
[13:37:09.273]                 args <- list()
[13:37:09.273]                 for (kk in seq_along(NAMES)) {
[13:37:09.273]                   name <- changed[[kk]]
[13:37:09.273]                   NAME <- NAMES[[kk]]
[13:37:09.273]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:09.273]                     next
[13:37:09.273]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:09.273]                 }
[13:37:09.273]                 NAMES <- toupper(added)
[13:37:09.273]                 for (kk in seq_along(NAMES)) {
[13:37:09.273]                   name <- added[[kk]]
[13:37:09.273]                   NAME <- NAMES[[kk]]
[13:37:09.273]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:09.273]                     next
[13:37:09.273]                   args[[name]] <- ""
[13:37:09.273]                 }
[13:37:09.273]                 NAMES <- toupper(removed)
[13:37:09.273]                 for (kk in seq_along(NAMES)) {
[13:37:09.273]                   name <- removed[[kk]]
[13:37:09.273]                   NAME <- NAMES[[kk]]
[13:37:09.273]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:09.273]                     next
[13:37:09.273]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:09.273]                 }
[13:37:09.273]                 if (length(args) > 0) 
[13:37:09.273]                   base::do.call(base::Sys.setenv, args = args)
[13:37:09.273]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:09.273]             }
[13:37:09.273]             else {
[13:37:09.273]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:09.273]             }
[13:37:09.273]             {
[13:37:09.273]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:09.273]                   0L) {
[13:37:09.273]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:09.273]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:09.273]                   base::options(opts)
[13:37:09.273]                 }
[13:37:09.273]                 {
[13:37:09.273]                   {
[13:37:09.273]                     NULL
[13:37:09.273]                     RNGkind("Mersenne-Twister")
[13:37:09.273]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:37:09.273]                       inherits = FALSE)
[13:37:09.273]                   }
[13:37:09.273]                   options(future.plan = NULL)
[13:37:09.273]                   if (is.na(NA_character_)) 
[13:37:09.273]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:09.273]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:09.273]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:09.273]                     .init = FALSE)
[13:37:09.273]                 }
[13:37:09.273]             }
[13:37:09.273]         }
[13:37:09.273]     })
[13:37:09.273]     if (TRUE) {
[13:37:09.273]         base::sink(type = "output", split = FALSE)
[13:37:09.273]         if (TRUE) {
[13:37:09.273]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:09.273]         }
[13:37:09.273]         else {
[13:37:09.273]             ...future.result["stdout"] <- base::list(NULL)
[13:37:09.273]         }
[13:37:09.273]         base::close(...future.stdout)
[13:37:09.273]         ...future.stdout <- NULL
[13:37:09.273]     }
[13:37:09.273]     ...future.result$conditions <- ...future.conditions
[13:37:09.273]     ...future.result$finished <- base::Sys.time()
[13:37:09.273]     ...future.result
[13:37:09.273] }
[13:37:09.275] assign_globals() ...
[13:37:09.275] List of 1
[13:37:09.275]  $ ii: int 2
[13:37:09.275]  - attr(*, "where")=List of 1
[13:37:09.275]   ..$ ii:<environment: R_EmptyEnv> 
[13:37:09.275]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:37:09.275]  - attr(*, "resolved")= logi FALSE
[13:37:09.275]  - attr(*, "total_size")= num 56
[13:37:09.277] - copied ‘ii’ to environment
[13:37:09.277] assign_globals() ... done
[13:37:09.277] plan(): Setting new future strategy stack:
[13:37:09.278] List of future strategies:
[13:37:09.278] 1. sequential:
[13:37:09.278]    - args: function (..., envir = parent.frame())
[13:37:09.278]    - tweaked: FALSE
[13:37:09.278]    - call: NULL
[13:37:09.278] plan(): nbrOfWorkers() = 1
[13:37:09.279] plan(): Setting new future strategy stack:
[13:37:09.279] List of future strategies:
[13:37:09.279] 1. sequential:
[13:37:09.279]    - args: function (..., envir = parent.frame())
[13:37:09.279]    - tweaked: FALSE
[13:37:09.279]    - call: future::plan("sequential")
[13:37:09.279] plan(): nbrOfWorkers() = 1
[13:37:09.279] SequentialFuture started (and completed)
*** multisession() - workers inherit .libPaths()
[13:37:09.280] getGlobalsAndPackages() ...
[13:37:09.280] Searching for globals...
[13:37:09.280] - globals found: [1] ‘.libPaths’
[13:37:09.280] Searching for globals ... DONE
[13:37:09.280] Resolving globals: FALSE
[13:37:09.281] 
[13:37:09.281] 
[13:37:09.281] getGlobalsAndPackages() ... DONE
[13:37:09.281] run() for ‘Future’ ...
[13:37:09.281] - state: ‘created’
[13:37:09.281] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:37:09.284] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:37:09.284] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:37:09.284]   - Field: ‘label’
[13:37:09.284]   - Field: ‘local’
[13:37:09.284]   - Field: ‘owner’
[13:37:09.284]   - Field: ‘envir’
[13:37:09.285]   - Field: ‘packages’
[13:37:09.285]   - Field: ‘gc’
[13:37:09.285]   - Field: ‘conditions’
[13:37:09.285]   - Field: ‘expr’
[13:37:09.285]   - Field: ‘uuid’
[13:37:09.285]   - Field: ‘seed’
[13:37:09.285]   - Field: ‘version’
[13:37:09.285]   - Field: ‘result’
[13:37:09.285]   - Field: ‘asynchronous’
[13:37:09.285]   - Field: ‘calls’
[13:37:09.285]   - Field: ‘globals’
[13:37:09.286]   - Field: ‘stdout’
[13:37:09.286]   - Field: ‘earlySignal’
[13:37:09.286]   - Field: ‘lazy’
[13:37:09.286]   - Field: ‘state’
[13:37:09.286] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:37:09.286] - Launch lazy future ...
[13:37:09.286] Packages needed by the future expression (n = 0): <none>
[13:37:09.286] Packages needed by future strategies (n = 0): <none>
[13:37:09.287] {
[13:37:09.287]     {
[13:37:09.287]         {
[13:37:09.287]             ...future.startTime <- base::Sys.time()
[13:37:09.287]             {
[13:37:09.287]                 {
[13:37:09.287]                   {
[13:37:09.287]                     base::local({
[13:37:09.287]                       has_future <- base::requireNamespace("future", 
[13:37:09.287]                         quietly = TRUE)
[13:37:09.287]                       if (has_future) {
[13:37:09.287]                         ns <- base::getNamespace("future")
[13:37:09.287]                         version <- ns[[".package"]][["version"]]
[13:37:09.287]                         if (is.null(version)) 
[13:37:09.287]                           version <- utils::packageVersion("future")
[13:37:09.287]                       }
[13:37:09.287]                       else {
[13:37:09.287]                         version <- NULL
[13:37:09.287]                       }
[13:37:09.287]                       if (!has_future || version < "1.8.0") {
[13:37:09.287]                         info <- base::c(r_version = base::gsub("R version ", 
[13:37:09.287]                           "", base::R.version$version.string), 
[13:37:09.287]                           platform = base::sprintf("%s (%s-bit)", 
[13:37:09.287]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:09.287]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:09.287]                             "release", "version")], collapse = " "), 
[13:37:09.287]                           hostname = base::Sys.info()[["nodename"]])
[13:37:09.287]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:37:09.287]                           info)
[13:37:09.287]                         info <- base::paste(info, collapse = "; ")
[13:37:09.287]                         if (!has_future) {
[13:37:09.287]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:09.287]                             info)
[13:37:09.287]                         }
[13:37:09.287]                         else {
[13:37:09.287]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:09.287]                             info, version)
[13:37:09.287]                         }
[13:37:09.287]                         base::stop(msg)
[13:37:09.287]                       }
[13:37:09.287]                     })
[13:37:09.287]                   }
[13:37:09.287]                   ...future.strategy.old <- future::plan("list")
[13:37:09.287]                   options(future.plan = NULL)
[13:37:09.287]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:09.287]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:09.287]                 }
[13:37:09.287]                 ...future.workdir <- getwd()
[13:37:09.287]             }
[13:37:09.287]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:09.287]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:09.287]         }
[13:37:09.287]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:09.287]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:09.287]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:09.287]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:09.287]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:09.287]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:09.287]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:09.287]             base::names(...future.oldOptions))
[13:37:09.287]     }
[13:37:09.287]     if (FALSE) {
[13:37:09.287]     }
[13:37:09.287]     else {
[13:37:09.287]         if (TRUE) {
[13:37:09.287]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:09.287]                 open = "w")
[13:37:09.287]         }
[13:37:09.287]         else {
[13:37:09.287]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:09.287]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:09.287]         }
[13:37:09.287]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:09.287]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:09.287]             base::sink(type = "output", split = FALSE)
[13:37:09.287]             base::close(...future.stdout)
[13:37:09.287]         }, add = TRUE)
[13:37:09.287]     }
[13:37:09.287]     ...future.frame <- base::sys.nframe()
[13:37:09.287]     ...future.conditions <- base::list()
[13:37:09.287]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:09.287]     if (FALSE) {
[13:37:09.287]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:09.287]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:09.287]     }
[13:37:09.287]     ...future.result <- base::tryCatch({
[13:37:09.287]         base::withCallingHandlers({
[13:37:09.287]             ...future.value <- base::withVisible(base::local(.libPaths()))
[13:37:09.287]             future::FutureResult(value = ...future.value$value, 
[13:37:09.287]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:09.287]                   ...future.rng), globalenv = if (FALSE) 
[13:37:09.287]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:09.287]                     ...future.globalenv.names))
[13:37:09.287]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:09.287]         }, condition = base::local({
[13:37:09.287]             c <- base::c
[13:37:09.287]             inherits <- base::inherits
[13:37:09.287]             invokeRestart <- base::invokeRestart
[13:37:09.287]             length <- base::length
[13:37:09.287]             list <- base::list
[13:37:09.287]             seq.int <- base::seq.int
[13:37:09.287]             signalCondition <- base::signalCondition
[13:37:09.287]             sys.calls <- base::sys.calls
[13:37:09.287]             `[[` <- base::`[[`
[13:37:09.287]             `+` <- base::`+`
[13:37:09.287]             `<<-` <- base::`<<-`
[13:37:09.287]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:09.287]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:09.287]                   3L)]
[13:37:09.287]             }
[13:37:09.287]             function(cond) {
[13:37:09.287]                 is_error <- inherits(cond, "error")
[13:37:09.287]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:09.287]                   NULL)
[13:37:09.287]                 if (is_error) {
[13:37:09.287]                   sessionInformation <- function() {
[13:37:09.287]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:09.287]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:09.287]                       search = base::search(), system = base::Sys.info())
[13:37:09.287]                   }
[13:37:09.287]                   ...future.conditions[[length(...future.conditions) + 
[13:37:09.287]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:09.287]                     cond$call), session = sessionInformation(), 
[13:37:09.287]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:09.287]                   signalCondition(cond)
[13:37:09.287]                 }
[13:37:09.287]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:09.287]                 "immediateCondition"))) {
[13:37:09.287]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:09.287]                   ...future.conditions[[length(...future.conditions) + 
[13:37:09.287]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:09.287]                   if (TRUE && !signal) {
[13:37:09.287]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:09.287]                     {
[13:37:09.287]                       inherits <- base::inherits
[13:37:09.287]                       invokeRestart <- base::invokeRestart
[13:37:09.287]                       is.null <- base::is.null
[13:37:09.287]                       muffled <- FALSE
[13:37:09.287]                       if (inherits(cond, "message")) {
[13:37:09.287]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:09.287]                         if (muffled) 
[13:37:09.287]                           invokeRestart("muffleMessage")
[13:37:09.287]                       }
[13:37:09.287]                       else if (inherits(cond, "warning")) {
[13:37:09.287]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:09.287]                         if (muffled) 
[13:37:09.287]                           invokeRestart("muffleWarning")
[13:37:09.287]                       }
[13:37:09.287]                       else if (inherits(cond, "condition")) {
[13:37:09.287]                         if (!is.null(pattern)) {
[13:37:09.287]                           computeRestarts <- base::computeRestarts
[13:37:09.287]                           grepl <- base::grepl
[13:37:09.287]                           restarts <- computeRestarts(cond)
[13:37:09.287]                           for (restart in restarts) {
[13:37:09.287]                             name <- restart$name
[13:37:09.287]                             if (is.null(name)) 
[13:37:09.287]                               next
[13:37:09.287]                             if (!grepl(pattern, name)) 
[13:37:09.287]                               next
[13:37:09.287]                             invokeRestart(restart)
[13:37:09.287]                             muffled <- TRUE
[13:37:09.287]                             break
[13:37:09.287]                           }
[13:37:09.287]                         }
[13:37:09.287]                       }
[13:37:09.287]                       invisible(muffled)
[13:37:09.287]                     }
[13:37:09.287]                     muffleCondition(cond, pattern = "^muffle")
[13:37:09.287]                   }
[13:37:09.287]                 }
[13:37:09.287]                 else {
[13:37:09.287]                   if (TRUE) {
[13:37:09.287]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:09.287]                     {
[13:37:09.287]                       inherits <- base::inherits
[13:37:09.287]                       invokeRestart <- base::invokeRestart
[13:37:09.287]                       is.null <- base::is.null
[13:37:09.287]                       muffled <- FALSE
[13:37:09.287]                       if (inherits(cond, "message")) {
[13:37:09.287]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:09.287]                         if (muffled) 
[13:37:09.287]                           invokeRestart("muffleMessage")
[13:37:09.287]                       }
[13:37:09.287]                       else if (inherits(cond, "warning")) {
[13:37:09.287]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:09.287]                         if (muffled) 
[13:37:09.287]                           invokeRestart("muffleWarning")
[13:37:09.287]                       }
[13:37:09.287]                       else if (inherits(cond, "condition")) {
[13:37:09.287]                         if (!is.null(pattern)) {
[13:37:09.287]                           computeRestarts <- base::computeRestarts
[13:37:09.287]                           grepl <- base::grepl
[13:37:09.287]                           restarts <- computeRestarts(cond)
[13:37:09.287]                           for (restart in restarts) {
[13:37:09.287]                             name <- restart$name
[13:37:09.287]                             if (is.null(name)) 
[13:37:09.287]                               next
[13:37:09.287]                             if (!grepl(pattern, name)) 
[13:37:09.287]                               next
[13:37:09.287]                             invokeRestart(restart)
[13:37:09.287]                             muffled <- TRUE
[13:37:09.287]                             break
[13:37:09.287]                           }
[13:37:09.287]                         }
[13:37:09.287]                       }
[13:37:09.287]                       invisible(muffled)
[13:37:09.287]                     }
[13:37:09.287]                     muffleCondition(cond, pattern = "^muffle")
[13:37:09.287]                   }
[13:37:09.287]                 }
[13:37:09.287]             }
[13:37:09.287]         }))
[13:37:09.287]     }, error = function(ex) {
[13:37:09.287]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:09.287]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:09.287]                 ...future.rng), started = ...future.startTime, 
[13:37:09.287]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:09.287]             version = "1.8"), class = "FutureResult")
[13:37:09.287]     }, finally = {
[13:37:09.287]         if (!identical(...future.workdir, getwd())) 
[13:37:09.287]             setwd(...future.workdir)
[13:37:09.287]         {
[13:37:09.287]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:09.287]                 ...future.oldOptions$nwarnings <- NULL
[13:37:09.287]             }
[13:37:09.287]             base::options(...future.oldOptions)
[13:37:09.287]             if (.Platform$OS.type == "windows") {
[13:37:09.287]                 old_names <- names(...future.oldEnvVars)
[13:37:09.287]                 envs <- base::Sys.getenv()
[13:37:09.287]                 names <- names(envs)
[13:37:09.287]                 common <- intersect(names, old_names)
[13:37:09.287]                 added <- setdiff(names, old_names)
[13:37:09.287]                 removed <- setdiff(old_names, names)
[13:37:09.287]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:09.287]                   envs[common]]
[13:37:09.287]                 NAMES <- toupper(changed)
[13:37:09.287]                 args <- list()
[13:37:09.287]                 for (kk in seq_along(NAMES)) {
[13:37:09.287]                   name <- changed[[kk]]
[13:37:09.287]                   NAME <- NAMES[[kk]]
[13:37:09.287]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:09.287]                     next
[13:37:09.287]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:09.287]                 }
[13:37:09.287]                 NAMES <- toupper(added)
[13:37:09.287]                 for (kk in seq_along(NAMES)) {
[13:37:09.287]                   name <- added[[kk]]
[13:37:09.287]                   NAME <- NAMES[[kk]]
[13:37:09.287]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:09.287]                     next
[13:37:09.287]                   args[[name]] <- ""
[13:37:09.287]                 }
[13:37:09.287]                 NAMES <- toupper(removed)
[13:37:09.287]                 for (kk in seq_along(NAMES)) {
[13:37:09.287]                   name <- removed[[kk]]
[13:37:09.287]                   NAME <- NAMES[[kk]]
[13:37:09.287]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:09.287]                     next
[13:37:09.287]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:09.287]                 }
[13:37:09.287]                 if (length(args) > 0) 
[13:37:09.287]                   base::do.call(base::Sys.setenv, args = args)
[13:37:09.287]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:09.287]             }
[13:37:09.287]             else {
[13:37:09.287]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:09.287]             }
[13:37:09.287]             {
[13:37:09.287]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:09.287]                   0L) {
[13:37:09.287]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:09.287]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:09.287]                   base::options(opts)
[13:37:09.287]                 }
[13:37:09.287]                 {
[13:37:09.287]                   {
[13:37:09.287]                     NULL
[13:37:09.287]                     RNGkind("Mersenne-Twister")
[13:37:09.287]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:37:09.287]                       inherits = FALSE)
[13:37:09.287]                   }
[13:37:09.287]                   options(future.plan = NULL)
[13:37:09.287]                   if (is.na(NA_character_)) 
[13:37:09.287]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:09.287]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:09.287]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:09.287]                     .init = FALSE)
[13:37:09.287]                 }
[13:37:09.287]             }
[13:37:09.287]         }
[13:37:09.287]     })
[13:37:09.287]     if (TRUE) {
[13:37:09.287]         base::sink(type = "output", split = FALSE)
[13:37:09.287]         if (TRUE) {
[13:37:09.287]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:09.287]         }
[13:37:09.287]         else {
[13:37:09.287]             ...future.result["stdout"] <- base::list(NULL)
[13:37:09.287]         }
[13:37:09.287]         base::close(...future.stdout)
[13:37:09.287]         ...future.stdout <- NULL
[13:37:09.287]     }
[13:37:09.287]     ...future.result$conditions <- ...future.conditions
[13:37:09.287]     ...future.result$finished <- base::Sys.time()
[13:37:09.287]     ...future.result
[13:37:09.287] }
[13:37:09.288] plan(): Setting new future strategy stack:
[13:37:09.289] List of future strategies:
[13:37:09.289] 1. sequential:
[13:37:09.289]    - args: function (..., envir = parent.frame())
[13:37:09.289]    - tweaked: FALSE
[13:37:09.289]    - call: NULL
[13:37:09.289] plan(): nbrOfWorkers() = 1
[13:37:09.290] plan(): Setting new future strategy stack:
[13:37:09.290] List of future strategies:
[13:37:09.290] 1. sequential:
[13:37:09.290]    - args: function (..., envir = parent.frame())
[13:37:09.290]    - tweaked: FALSE
[13:37:09.290]    - call: future::plan("sequential")
[13:37:09.290] plan(): nbrOfWorkers() = 1
[13:37:09.290] SequentialFuture started (and completed)
[13:37:09.290] - Launch lazy future ... done
[13:37:09.291] run() for ‘SequentialFuture’ ... done
List of 2
 $ main   : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
 $ workers: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
*** multisession() and errors
[13:37:09.295] getGlobalsAndPackages() ...
[13:37:09.295] Searching for globals...
[13:37:09.296] - globals found: [2] ‘{’, ‘stop’
[13:37:09.296] Searching for globals ... DONE
[13:37:09.296] Resolving globals: FALSE
[13:37:09.296] 
[13:37:09.297] 
[13:37:09.297] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    stop("Whoops!")
    1
}
Lazy evaluation: TRUE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 1c81bec4-3232-89a6-5464-8e86a1a5c510
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:37:09.297] Packages needed by the future expression (n = 0): <none>
[13:37:09.297] Packages needed by future strategies (n = 0): <none>
[13:37:09.298] {
[13:37:09.298]     {
[13:37:09.298]         {
[13:37:09.298]             ...future.startTime <- base::Sys.time()
[13:37:09.298]             {
[13:37:09.298]                 {
[13:37:09.298]                   {
[13:37:09.298]                     base::local({
[13:37:09.298]                       has_future <- base::requireNamespace("future", 
[13:37:09.298]                         quietly = TRUE)
[13:37:09.298]                       if (has_future) {
[13:37:09.298]                         ns <- base::getNamespace("future")
[13:37:09.298]                         version <- ns[[".package"]][["version"]]
[13:37:09.298]                         if (is.null(version)) 
[13:37:09.298]                           version <- utils::packageVersion("future")
[13:37:09.298]                       }
[13:37:09.298]                       else {
[13:37:09.298]                         version <- NULL
[13:37:09.298]                       }
[13:37:09.298]                       if (!has_future || version < "1.8.0") {
[13:37:09.298]                         info <- base::c(r_version = base::gsub("R version ", 
[13:37:09.298]                           "", base::R.version$version.string), 
[13:37:09.298]                           platform = base::sprintf("%s (%s-bit)", 
[13:37:09.298]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:09.298]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:09.298]                             "release", "version")], collapse = " "), 
[13:37:09.298]                           hostname = base::Sys.info()[["nodename"]])
[13:37:09.298]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:37:09.298]                           info)
[13:37:09.298]                         info <- base::paste(info, collapse = "; ")
[13:37:09.298]                         if (!has_future) {
[13:37:09.298]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:09.298]                             info)
[13:37:09.298]                         }
[13:37:09.298]                         else {
[13:37:09.298]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:09.298]                             info, version)
[13:37:09.298]                         }
[13:37:09.298]                         base::stop(msg)
[13:37:09.298]                       }
[13:37:09.298]                     })
[13:37:09.298]                   }
[13:37:09.298]                   ...future.strategy.old <- future::plan("list")
[13:37:09.298]                   options(future.plan = NULL)
[13:37:09.298]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:09.298]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:09.298]                 }
[13:37:09.298]                 ...future.workdir <- getwd()
[13:37:09.298]             }
[13:37:09.298]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:09.298]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:09.298]         }
[13:37:09.298]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:09.298]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:09.298]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:09.298]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:09.298]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:09.298]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:09.298]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:09.298]             base::names(...future.oldOptions))
[13:37:09.298]     }
[13:37:09.298]     if (FALSE) {
[13:37:09.298]     }
[13:37:09.298]     else {
[13:37:09.298]         if (TRUE) {
[13:37:09.298]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:09.298]                 open = "w")
[13:37:09.298]         }
[13:37:09.298]         else {
[13:37:09.298]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:09.298]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:09.298]         }
[13:37:09.298]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:09.298]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:09.298]             base::sink(type = "output", split = FALSE)
[13:37:09.298]             base::close(...future.stdout)
[13:37:09.298]         }, add = TRUE)
[13:37:09.298]     }
[13:37:09.298]     ...future.frame <- base::sys.nframe()
[13:37:09.298]     ...future.conditions <- base::list()
[13:37:09.298]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:09.298]     if (FALSE) {
[13:37:09.298]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:09.298]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:09.298]     }
[13:37:09.298]     ...future.result <- base::tryCatch({
[13:37:09.298]         base::withCallingHandlers({
[13:37:09.298]             ...future.value <- base::withVisible(base::local({
[13:37:09.298]                 stop("Whoops!")
[13:37:09.298]                 1
[13:37:09.298]             }))
[13:37:09.298]             future::FutureResult(value = ...future.value$value, 
[13:37:09.298]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:09.298]                   ...future.rng), globalenv = if (FALSE) 
[13:37:09.298]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:09.298]                     ...future.globalenv.names))
[13:37:09.298]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:09.298]         }, condition = base::local({
[13:37:09.298]             c <- base::c
[13:37:09.298]             inherits <- base::inherits
[13:37:09.298]             invokeRestart <- base::invokeRestart
[13:37:09.298]             length <- base::length
[13:37:09.298]             list <- base::list
[13:37:09.298]             seq.int <- base::seq.int
[13:37:09.298]             signalCondition <- base::signalCondition
[13:37:09.298]             sys.calls <- base::sys.calls
[13:37:09.298]             `[[` <- base::`[[`
[13:37:09.298]             `+` <- base::`+`
[13:37:09.298]             `<<-` <- base::`<<-`
[13:37:09.298]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:09.298]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:09.298]                   3L)]
[13:37:09.298]             }
[13:37:09.298]             function(cond) {
[13:37:09.298]                 is_error <- inherits(cond, "error")
[13:37:09.298]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:09.298]                   NULL)
[13:37:09.298]                 if (is_error) {
[13:37:09.298]                   sessionInformation <- function() {
[13:37:09.298]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:09.298]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:09.298]                       search = base::search(), system = base::Sys.info())
[13:37:09.298]                   }
[13:37:09.298]                   ...future.conditions[[length(...future.conditions) + 
[13:37:09.298]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:09.298]                     cond$call), session = sessionInformation(), 
[13:37:09.298]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:09.298]                   signalCondition(cond)
[13:37:09.298]                 }
[13:37:09.298]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:09.298]                 "immediateCondition"))) {
[13:37:09.298]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:09.298]                   ...future.conditions[[length(...future.conditions) + 
[13:37:09.298]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:09.298]                   if (TRUE && !signal) {
[13:37:09.298]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:09.298]                     {
[13:37:09.298]                       inherits <- base::inherits
[13:37:09.298]                       invokeRestart <- base::invokeRestart
[13:37:09.298]                       is.null <- base::is.null
[13:37:09.298]                       muffled <- FALSE
[13:37:09.298]                       if (inherits(cond, "message")) {
[13:37:09.298]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:09.298]                         if (muffled) 
[13:37:09.298]                           invokeRestart("muffleMessage")
[13:37:09.298]                       }
[13:37:09.298]                       else if (inherits(cond, "warning")) {
[13:37:09.298]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:09.298]                         if (muffled) 
[13:37:09.298]                           invokeRestart("muffleWarning")
[13:37:09.298]                       }
[13:37:09.298]                       else if (inherits(cond, "condition")) {
[13:37:09.298]                         if (!is.null(pattern)) {
[13:37:09.298]                           computeRestarts <- base::computeRestarts
[13:37:09.298]                           grepl <- base::grepl
[13:37:09.298]                           restarts <- computeRestarts(cond)
[13:37:09.298]                           for (restart in restarts) {
[13:37:09.298]                             name <- restart$name
[13:37:09.298]                             if (is.null(name)) 
[13:37:09.298]                               next
[13:37:09.298]                             if (!grepl(pattern, name)) 
[13:37:09.298]                               next
[13:37:09.298]                             invokeRestart(restart)
[13:37:09.298]                             muffled <- TRUE
[13:37:09.298]                             break
[13:37:09.298]                           }
[13:37:09.298]                         }
[13:37:09.298]                       }
[13:37:09.298]                       invisible(muffled)
[13:37:09.298]                     }
[13:37:09.298]                     muffleCondition(cond, pattern = "^muffle")
[13:37:09.298]                   }
[13:37:09.298]                 }
[13:37:09.298]                 else {
[13:37:09.298]                   if (TRUE) {
[13:37:09.298]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:09.298]                     {
[13:37:09.298]                       inherits <- base::inherits
[13:37:09.298]                       invokeRestart <- base::invokeRestart
[13:37:09.298]                       is.null <- base::is.null
[13:37:09.298]                       muffled <- FALSE
[13:37:09.298]                       if (inherits(cond, "message")) {
[13:37:09.298]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:09.298]                         if (muffled) 
[13:37:09.298]                           invokeRestart("muffleMessage")
[13:37:09.298]                       }
[13:37:09.298]                       else if (inherits(cond, "warning")) {
[13:37:09.298]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:09.298]                         if (muffled) 
[13:37:09.298]                           invokeRestart("muffleWarning")
[13:37:09.298]                       }
[13:37:09.298]                       else if (inherits(cond, "condition")) {
[13:37:09.298]                         if (!is.null(pattern)) {
[13:37:09.298]                           computeRestarts <- base::computeRestarts
[13:37:09.298]                           grepl <- base::grepl
[13:37:09.298]                           restarts <- computeRestarts(cond)
[13:37:09.298]                           for (restart in restarts) {
[13:37:09.298]                             name <- restart$name
[13:37:09.298]                             if (is.null(name)) 
[13:37:09.298]                               next
[13:37:09.298]                             if (!grepl(pattern, name)) 
[13:37:09.298]                               next
[13:37:09.298]                             invokeRestart(restart)
[13:37:09.298]                             muffled <- TRUE
[13:37:09.298]                             break
[13:37:09.298]                           }
[13:37:09.298]                         }
[13:37:09.298]                       }
[13:37:09.298]                       invisible(muffled)
[13:37:09.298]                     }
[13:37:09.298]                     muffleCondition(cond, pattern = "^muffle")
[13:37:09.298]                   }
[13:37:09.298]                 }
[13:37:09.298]             }
[13:37:09.298]         }))
[13:37:09.298]     }, error = function(ex) {
[13:37:09.298]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:09.298]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:09.298]                 ...future.rng), started = ...future.startTime, 
[13:37:09.298]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:09.298]             version = "1.8"), class = "FutureResult")
[13:37:09.298]     }, finally = {
[13:37:09.298]         if (!identical(...future.workdir, getwd())) 
[13:37:09.298]             setwd(...future.workdir)
[13:37:09.298]         {
[13:37:09.298]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:09.298]                 ...future.oldOptions$nwarnings <- NULL
[13:37:09.298]             }
[13:37:09.298]             base::options(...future.oldOptions)
[13:37:09.298]             if (.Platform$OS.type == "windows") {
[13:37:09.298]                 old_names <- names(...future.oldEnvVars)
[13:37:09.298]                 envs <- base::Sys.getenv()
[13:37:09.298]                 names <- names(envs)
[13:37:09.298]                 common <- intersect(names, old_names)
[13:37:09.298]                 added <- setdiff(names, old_names)
[13:37:09.298]                 removed <- setdiff(old_names, names)
[13:37:09.298]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:09.298]                   envs[common]]
[13:37:09.298]                 NAMES <- toupper(changed)
[13:37:09.298]                 args <- list()
[13:37:09.298]                 for (kk in seq_along(NAMES)) {
[13:37:09.298]                   name <- changed[[kk]]
[13:37:09.298]                   NAME <- NAMES[[kk]]
[13:37:09.298]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:09.298]                     next
[13:37:09.298]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:09.298]                 }
[13:37:09.298]                 NAMES <- toupper(added)
[13:37:09.298]                 for (kk in seq_along(NAMES)) {
[13:37:09.298]                   name <- added[[kk]]
[13:37:09.298]                   NAME <- NAMES[[kk]]
[13:37:09.298]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:09.298]                     next
[13:37:09.298]                   args[[name]] <- ""
[13:37:09.298]                 }
[13:37:09.298]                 NAMES <- toupper(removed)
[13:37:09.298]                 for (kk in seq_along(NAMES)) {
[13:37:09.298]                   name <- removed[[kk]]
[13:37:09.298]                   NAME <- NAMES[[kk]]
[13:37:09.298]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:09.298]                     next
[13:37:09.298]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:09.298]                 }
[13:37:09.298]                 if (length(args) > 0) 
[13:37:09.298]                   base::do.call(base::Sys.setenv, args = args)
[13:37:09.298]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:09.298]             }
[13:37:09.298]             else {
[13:37:09.298]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:09.298]             }
[13:37:09.298]             {
[13:37:09.298]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:09.298]                   0L) {
[13:37:09.298]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:09.298]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:09.298]                   base::options(opts)
[13:37:09.298]                 }
[13:37:09.298]                 {
[13:37:09.298]                   {
[13:37:09.298]                     NULL
[13:37:09.298]                     RNGkind("Mersenne-Twister")
[13:37:09.298]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:37:09.298]                       inherits = FALSE)
[13:37:09.298]                   }
[13:37:09.298]                   options(future.plan = NULL)
[13:37:09.298]                   if (is.na(NA_character_)) 
[13:37:09.298]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:09.298]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:09.298]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:09.298]                     .init = FALSE)
[13:37:09.298]                 }
[13:37:09.298]             }
[13:37:09.298]         }
[13:37:09.298]     })
[13:37:09.298]     if (TRUE) {
[13:37:09.298]         base::sink(type = "output", split = FALSE)
[13:37:09.298]         if (TRUE) {
[13:37:09.298]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:09.298]         }
[13:37:09.298]         else {
[13:37:09.298]             ...future.result["stdout"] <- base::list(NULL)
[13:37:09.298]         }
[13:37:09.298]         base::close(...future.stdout)
[13:37:09.298]         ...future.stdout <- NULL
[13:37:09.298]     }
[13:37:09.298]     ...future.result$conditions <- ...future.conditions
[13:37:09.298]     ...future.result$finished <- base::Sys.time()
[13:37:09.298]     ...future.result
[13:37:09.298] }
[13:37:09.300] plan(): Setting new future strategy stack:
[13:37:09.300] List of future strategies:
[13:37:09.300] 1. sequential:
[13:37:09.300]    - args: function (..., envir = parent.frame())
[13:37:09.300]    - tweaked: FALSE
[13:37:09.300]    - call: NULL
[13:37:09.300] plan(): nbrOfWorkers() = 1
[13:37:09.301] plan(): Setting new future strategy stack:
[13:37:09.301] List of future strategies:
[13:37:09.301] 1. sequential:
[13:37:09.301]    - args: function (..., envir = parent.frame())
[13:37:09.301]    - tweaked: FALSE
[13:37:09.301]    - call: future::plan("sequential")
[13:37:09.301] plan(): nbrOfWorkers() = 1
[13:37:09.302] SequentialFuture started (and completed)
[13:37:09.302] signalConditions() ...
[13:37:09.302]  - include = ‘immediateCondition’
[13:37:09.302]  - exclude = 
[13:37:09.302]  - resignal = FALSE
[13:37:09.302]  - Number of conditions: 1
[13:37:09.302] signalConditions() ... done
[13:37:09.302] signalConditions() ...
[13:37:09.302]  - include = ‘immediateCondition’
[13:37:09.303]  - exclude = 
[13:37:09.303]  - resignal = FALSE
[13:37:09.303]  - Number of conditions: 1
[13:37:09.303] signalConditions() ... done
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[13:37:09.303] signalConditions() ...
[13:37:09.303]  - include = ‘immediateCondition’
[13:37:09.303]  - exclude = 
[13:37:09.303]  - resignal = FALSE
[13:37:09.303]  - Number of conditions: 1
[13:37:09.304] signalConditions() ... done
[13:37:09.304] Future state: ‘finished’
[13:37:09.304] signalConditions() ...
[13:37:09.304]  - include = ‘condition’
[13:37:09.304]  - exclude = ‘immediateCondition’
[13:37:09.304]  - resignal = TRUE
[13:37:09.304]  - Number of conditions: 1
[13:37:09.304]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[13:37:09.304] signalConditions() ... done
[1] "Error in eval(quote({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[13:37:09.305] signalConditions() ...
[13:37:09.305]  - include = ‘immediateCondition’
[13:37:09.305]  - exclude = 
[13:37:09.305]  - resignal = FALSE
[13:37:09.305]  - Number of conditions: 1
[13:37:09.305] signalConditions() ... done
[13:37:09.305] Future state: ‘finished’
[13:37:09.305] signalConditions() ...
[13:37:09.305]  - include = ‘condition’
[13:37:09.306]  - exclude = ‘immediateCondition’
[13:37:09.306]  - resignal = TRUE
[13:37:09.306]  - Number of conditions: 1
[13:37:09.306]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[13:37:09.306] signalConditions() ... done
[1] "Error in eval(quote({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[13:37:09.309] getGlobalsAndPackages() ...
[13:37:09.310] Searching for globals...
[13:37:09.311] - globals found: [5] ‘{’, ‘stop’, ‘structure’, ‘list’, ‘c’
[13:37:09.311] Searching for globals ... DONE
[13:37:09.311] Resolving globals: FALSE
[13:37:09.311] 
[13:37:09.311] 
[13:37:09.312] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    stop(structure(list(message = "boom"), class = c("MyError", 
        "error", "condition")))
}
Lazy evaluation: TRUE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 1c81bec4-3232-89a6-5464-8e86a1a5c510
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:37:09.312] Packages needed by the future expression (n = 0): <none>
[13:37:09.312] Packages needed by future strategies (n = 0): <none>
[13:37:09.313] {
[13:37:09.313]     {
[13:37:09.313]         {
[13:37:09.313]             ...future.startTime <- base::Sys.time()
[13:37:09.313]             {
[13:37:09.313]                 {
[13:37:09.313]                   {
[13:37:09.313]                     base::local({
[13:37:09.313]                       has_future <- base::requireNamespace("future", 
[13:37:09.313]                         quietly = TRUE)
[13:37:09.313]                       if (has_future) {
[13:37:09.313]                         ns <- base::getNamespace("future")
[13:37:09.313]                         version <- ns[[".package"]][["version"]]
[13:37:09.313]                         if (is.null(version)) 
[13:37:09.313]                           version <- utils::packageVersion("future")
[13:37:09.313]                       }
[13:37:09.313]                       else {
[13:37:09.313]                         version <- NULL
[13:37:09.313]                       }
[13:37:09.313]                       if (!has_future || version < "1.8.0") {
[13:37:09.313]                         info <- base::c(r_version = base::gsub("R version ", 
[13:37:09.313]                           "", base::R.version$version.string), 
[13:37:09.313]                           platform = base::sprintf("%s (%s-bit)", 
[13:37:09.313]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:09.313]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:09.313]                             "release", "version")], collapse = " "), 
[13:37:09.313]                           hostname = base::Sys.info()[["nodename"]])
[13:37:09.313]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:37:09.313]                           info)
[13:37:09.313]                         info <- base::paste(info, collapse = "; ")
[13:37:09.313]                         if (!has_future) {
[13:37:09.313]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:09.313]                             info)
[13:37:09.313]                         }
[13:37:09.313]                         else {
[13:37:09.313]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:09.313]                             info, version)
[13:37:09.313]                         }
[13:37:09.313]                         base::stop(msg)
[13:37:09.313]                       }
[13:37:09.313]                     })
[13:37:09.313]                   }
[13:37:09.313]                   ...future.strategy.old <- future::plan("list")
[13:37:09.313]                   options(future.plan = NULL)
[13:37:09.313]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:09.313]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:09.313]                 }
[13:37:09.313]                 ...future.workdir <- getwd()
[13:37:09.313]             }
[13:37:09.313]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:09.313]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:09.313]         }
[13:37:09.313]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:09.313]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:09.313]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:09.313]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:09.313]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:09.313]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:09.313]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:09.313]             base::names(...future.oldOptions))
[13:37:09.313]     }
[13:37:09.313]     if (FALSE) {
[13:37:09.313]     }
[13:37:09.313]     else {
[13:37:09.313]         if (TRUE) {
[13:37:09.313]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:09.313]                 open = "w")
[13:37:09.313]         }
[13:37:09.313]         else {
[13:37:09.313]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:09.313]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:09.313]         }
[13:37:09.313]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:09.313]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:09.313]             base::sink(type = "output", split = FALSE)
[13:37:09.313]             base::close(...future.stdout)
[13:37:09.313]         }, add = TRUE)
[13:37:09.313]     }
[13:37:09.313]     ...future.frame <- base::sys.nframe()
[13:37:09.313]     ...future.conditions <- base::list()
[13:37:09.313]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:09.313]     if (FALSE) {
[13:37:09.313]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:09.313]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:09.313]     }
[13:37:09.313]     ...future.result <- base::tryCatch({
[13:37:09.313]         base::withCallingHandlers({
[13:37:09.313]             ...future.value <- base::withVisible(base::local({
[13:37:09.313]                 stop(structure(list(message = "boom"), class = c("MyError", 
[13:37:09.313]                   "error", "condition")))
[13:37:09.313]             }))
[13:37:09.313]             future::FutureResult(value = ...future.value$value, 
[13:37:09.313]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:09.313]                   ...future.rng), globalenv = if (FALSE) 
[13:37:09.313]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:09.313]                     ...future.globalenv.names))
[13:37:09.313]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:09.313]         }, condition = base::local({
[13:37:09.313]             c <- base::c
[13:37:09.313]             inherits <- base::inherits
[13:37:09.313]             invokeRestart <- base::invokeRestart
[13:37:09.313]             length <- base::length
[13:37:09.313]             list <- base::list
[13:37:09.313]             seq.int <- base::seq.int
[13:37:09.313]             signalCondition <- base::signalCondition
[13:37:09.313]             sys.calls <- base::sys.calls
[13:37:09.313]             `[[` <- base::`[[`
[13:37:09.313]             `+` <- base::`+`
[13:37:09.313]             `<<-` <- base::`<<-`
[13:37:09.313]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:09.313]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:09.313]                   3L)]
[13:37:09.313]             }
[13:37:09.313]             function(cond) {
[13:37:09.313]                 is_error <- inherits(cond, "error")
[13:37:09.313]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:09.313]                   NULL)
[13:37:09.313]                 if (is_error) {
[13:37:09.313]                   sessionInformation <- function() {
[13:37:09.313]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:09.313]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:09.313]                       search = base::search(), system = base::Sys.info())
[13:37:09.313]                   }
[13:37:09.313]                   ...future.conditions[[length(...future.conditions) + 
[13:37:09.313]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:09.313]                     cond$call), session = sessionInformation(), 
[13:37:09.313]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:09.313]                   signalCondition(cond)
[13:37:09.313]                 }
[13:37:09.313]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:09.313]                 "immediateCondition"))) {
[13:37:09.313]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:09.313]                   ...future.conditions[[length(...future.conditions) + 
[13:37:09.313]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:09.313]                   if (TRUE && !signal) {
[13:37:09.313]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:09.313]                     {
[13:37:09.313]                       inherits <- base::inherits
[13:37:09.313]                       invokeRestart <- base::invokeRestart
[13:37:09.313]                       is.null <- base::is.null
[13:37:09.313]                       muffled <- FALSE
[13:37:09.313]                       if (inherits(cond, "message")) {
[13:37:09.313]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:09.313]                         if (muffled) 
[13:37:09.313]                           invokeRestart("muffleMessage")
[13:37:09.313]                       }
[13:37:09.313]                       else if (inherits(cond, "warning")) {
[13:37:09.313]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:09.313]                         if (muffled) 
[13:37:09.313]                           invokeRestart("muffleWarning")
[13:37:09.313]                       }
[13:37:09.313]                       else if (inherits(cond, "condition")) {
[13:37:09.313]                         if (!is.null(pattern)) {
[13:37:09.313]                           computeRestarts <- base::computeRestarts
[13:37:09.313]                           grepl <- base::grepl
[13:37:09.313]                           restarts <- computeRestarts(cond)
[13:37:09.313]                           for (restart in restarts) {
[13:37:09.313]                             name <- restart$name
[13:37:09.313]                             if (is.null(name)) 
[13:37:09.313]                               next
[13:37:09.313]                             if (!grepl(pattern, name)) 
[13:37:09.313]                               next
[13:37:09.313]                             invokeRestart(restart)
[13:37:09.313]                             muffled <- TRUE
[13:37:09.313]                             break
[13:37:09.313]                           }
[13:37:09.313]                         }
[13:37:09.313]                       }
[13:37:09.313]                       invisible(muffled)
[13:37:09.313]                     }
[13:37:09.313]                     muffleCondition(cond, pattern = "^muffle")
[13:37:09.313]                   }
[13:37:09.313]                 }
[13:37:09.313]                 else {
[13:37:09.313]                   if (TRUE) {
[13:37:09.313]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:09.313]                     {
[13:37:09.313]                       inherits <- base::inherits
[13:37:09.313]                       invokeRestart <- base::invokeRestart
[13:37:09.313]                       is.null <- base::is.null
[13:37:09.313]                       muffled <- FALSE
[13:37:09.313]                       if (inherits(cond, "message")) {
[13:37:09.313]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:09.313]                         if (muffled) 
[13:37:09.313]                           invokeRestart("muffleMessage")
[13:37:09.313]                       }
[13:37:09.313]                       else if (inherits(cond, "warning")) {
[13:37:09.313]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:09.313]                         if (muffled) 
[13:37:09.313]                           invokeRestart("muffleWarning")
[13:37:09.313]                       }
[13:37:09.313]                       else if (inherits(cond, "condition")) {
[13:37:09.313]                         if (!is.null(pattern)) {
[13:37:09.313]                           computeRestarts <- base::computeRestarts
[13:37:09.313]                           grepl <- base::grepl
[13:37:09.313]                           restarts <- computeRestarts(cond)
[13:37:09.313]                           for (restart in restarts) {
[13:37:09.313]                             name <- restart$name
[13:37:09.313]                             if (is.null(name)) 
[13:37:09.313]                               next
[13:37:09.313]                             if (!grepl(pattern, name)) 
[13:37:09.313]                               next
[13:37:09.313]                             invokeRestart(restart)
[13:37:09.313]                             muffled <- TRUE
[13:37:09.313]                             break
[13:37:09.313]                           }
[13:37:09.313]                         }
[13:37:09.313]                       }
[13:37:09.313]                       invisible(muffled)
[13:37:09.313]                     }
[13:37:09.313]                     muffleCondition(cond, pattern = "^muffle")
[13:37:09.313]                   }
[13:37:09.313]                 }
[13:37:09.313]             }
[13:37:09.313]         }))
[13:37:09.313]     }, error = function(ex) {
[13:37:09.313]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:09.313]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:09.313]                 ...future.rng), started = ...future.startTime, 
[13:37:09.313]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:09.313]             version = "1.8"), class = "FutureResult")
[13:37:09.313]     }, finally = {
[13:37:09.313]         if (!identical(...future.workdir, getwd())) 
[13:37:09.313]             setwd(...future.workdir)
[13:37:09.313]         {
[13:37:09.313]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:09.313]                 ...future.oldOptions$nwarnings <- NULL
[13:37:09.313]             }
[13:37:09.313]             base::options(...future.oldOptions)
[13:37:09.313]             if (.Platform$OS.type == "windows") {
[13:37:09.313]                 old_names <- names(...future.oldEnvVars)
[13:37:09.313]                 envs <- base::Sys.getenv()
[13:37:09.313]                 names <- names(envs)
[13:37:09.313]                 common <- intersect(names, old_names)
[13:37:09.313]                 added <- setdiff(names, old_names)
[13:37:09.313]                 removed <- setdiff(old_names, names)
[13:37:09.313]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:09.313]                   envs[common]]
[13:37:09.313]                 NAMES <- toupper(changed)
[13:37:09.313]                 args <- list()
[13:37:09.313]                 for (kk in seq_along(NAMES)) {
[13:37:09.313]                   name <- changed[[kk]]
[13:37:09.313]                   NAME <- NAMES[[kk]]
[13:37:09.313]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:09.313]                     next
[13:37:09.313]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:09.313]                 }
[13:37:09.313]                 NAMES <- toupper(added)
[13:37:09.313]                 for (kk in seq_along(NAMES)) {
[13:37:09.313]                   name <- added[[kk]]
[13:37:09.313]                   NAME <- NAMES[[kk]]
[13:37:09.313]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:09.313]                     next
[13:37:09.313]                   args[[name]] <- ""
[13:37:09.313]                 }
[13:37:09.313]                 NAMES <- toupper(removed)
[13:37:09.313]                 for (kk in seq_along(NAMES)) {
[13:37:09.313]                   name <- removed[[kk]]
[13:37:09.313]                   NAME <- NAMES[[kk]]
[13:37:09.313]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:09.313]                     next
[13:37:09.313]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:09.313]                 }
[13:37:09.313]                 if (length(args) > 0) 
[13:37:09.313]                   base::do.call(base::Sys.setenv, args = args)
[13:37:09.313]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:09.313]             }
[13:37:09.313]             else {
[13:37:09.313]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:09.313]             }
[13:37:09.313]             {
[13:37:09.313]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:09.313]                   0L) {
[13:37:09.313]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:09.313]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:09.313]                   base::options(opts)
[13:37:09.313]                 }
[13:37:09.313]                 {
[13:37:09.313]                   {
[13:37:09.313]                     NULL
[13:37:09.313]                     RNGkind("Mersenne-Twister")
[13:37:09.313]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:37:09.313]                       inherits = FALSE)
[13:37:09.313]                   }
[13:37:09.313]                   options(future.plan = NULL)
[13:37:09.313]                   if (is.na(NA_character_)) 
[13:37:09.313]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:09.313]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:09.313]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:09.313]                     .init = FALSE)
[13:37:09.313]                 }
[13:37:09.313]             }
[13:37:09.313]         }
[13:37:09.313]     })
[13:37:09.313]     if (TRUE) {
[13:37:09.313]         base::sink(type = "output", split = FALSE)
[13:37:09.313]         if (TRUE) {
[13:37:09.313]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:09.313]         }
[13:37:09.313]         else {
[13:37:09.313]             ...future.result["stdout"] <- base::list(NULL)
[13:37:09.313]         }
[13:37:09.313]         base::close(...future.stdout)
[13:37:09.313]         ...future.stdout <- NULL
[13:37:09.313]     }
[13:37:09.313]     ...future.result$conditions <- ...future.conditions
[13:37:09.313]     ...future.result$finished <- base::Sys.time()
[13:37:09.313]     ...future.result
[13:37:09.313] }
[13:37:09.315] plan(): Setting new future strategy stack:
[13:37:09.315] List of future strategies:
[13:37:09.315] 1. sequential:
[13:37:09.315]    - args: function (..., envir = parent.frame())
[13:37:09.315]    - tweaked: FALSE
[13:37:09.315]    - call: NULL
[13:37:09.315] plan(): nbrOfWorkers() = 1
[13:37:09.316] plan(): Setting new future strategy stack:
[13:37:09.316] List of future strategies:
[13:37:09.316] 1. sequential:
[13:37:09.316]    - args: function (..., envir = parent.frame())
[13:37:09.316]    - tweaked: FALSE
[13:37:09.316]    - call: future::plan("sequential")
[13:37:09.316] plan(): nbrOfWorkers() = 1
[13:37:09.317] SequentialFuture started (and completed)
[13:37:09.317] signalConditions() ...
[13:37:09.317]  - include = ‘immediateCondition’
[13:37:09.317]  - exclude = 
[13:37:09.317]  - resignal = FALSE
[13:37:09.317]  - Number of conditions: 1
[13:37:09.317] signalConditions() ... done
[13:37:09.317] signalConditions() ...
[13:37:09.317]  - include = ‘immediateCondition’
[13:37:09.317]  - exclude = 
[13:37:09.318]  - resignal = FALSE
[13:37:09.318]  - Number of conditions: 1
[13:37:09.318] signalConditions() ... done
<MyError: boom>
[13:37:09.318] signalConditions() ...
[13:37:09.318]  - include = ‘immediateCondition’
[13:37:09.318]  - exclude = 
[13:37:09.318]  - resignal = FALSE
[13:37:09.318]  - Number of conditions: 1
[13:37:09.318] signalConditions() ... done
[13:37:09.319] Future state: ‘finished’
[13:37:09.319] signalConditions() ...
[13:37:09.319]  - include = ‘condition’
[13:37:09.319]  - exclude = ‘immediateCondition’
[13:37:09.319]  - resignal = TRUE
[13:37:09.321]  - Number of conditions: 1
[13:37:09.321]  - Condition #1: ‘MyError’, ‘error’, ‘condition’
[13:37:09.321] signalConditions() ... done
Testing with 1 cores ... DONE
Testing with 2 cores ...
[13:37:09.327] getGlobalsAndPackages() ...
[13:37:09.327] 
[13:37:09.328] - globals: [0] <none>
[13:37:09.328] getGlobalsAndPackages() ... DONE
[13:37:09.328] [local output] makeClusterPSOCK() ...
[13:37:09.370] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:37:09.372] [local output] Base port: 11054
[13:37:09.372] [local output] Getting setup options for 2 cluster nodes ...
[13:37:09.372] [local output]  - Node 1 of 2 ...
[13:37:09.373] [local output] localMachine=TRUE => revtunnel=FALSE

[13:37:09.373] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmppDRSMv/worker.rank=1.parallelly.parent=86163.15093298c8576.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmppDRSMv/worker.rank=1.parallelly.parent=86163.15093298c8576.pid")'’
[13:37:09.571] - Possible to infer worker's PID: TRUE
[13:37:09.571] [local output] Rscript port: 11054

[13:37:09.571] [local output]  - Node 2 of 2 ...
[13:37:09.572] [local output] localMachine=TRUE => revtunnel=FALSE

[13:37:09.572] [local output] Rscript port: 11054

[13:37:09.573] [local output] Getting setup options for 2 cluster nodes ... done
[13:37:09.573] [local output]  - Parallel setup requested for some PSOCK nodes
[13:37:09.573] [local output] Setting up PSOCK nodes in parallel
[13:37:09.574] List of 36
[13:37:09.574]  $ worker          : chr "localhost"
[13:37:09.574]   ..- attr(*, "localhost")= logi TRUE
[13:37:09.574]  $ master          : chr "localhost"
[13:37:09.574]  $ port            : int 11054
[13:37:09.574]  $ connectTimeout  : num 120
[13:37:09.574]  $ timeout         : num 2592000
[13:37:09.574]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:37:09.574]  $ homogeneous     : logi TRUE
[13:37:09.574]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:37:09.574]  $ rscript_envs    : NULL
[13:37:09.574]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:37:09.574]  $ rscript_startup : NULL
[13:37:09.574]  $ rscript_sh      : chr "sh"
[13:37:09.574]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:37:09.574]  $ methods         : logi TRUE
[13:37:09.574]  $ socketOptions   : chr "no-delay"
[13:37:09.574]  $ useXDR          : logi FALSE
[13:37:09.574]  $ outfile         : chr "/dev/null"
[13:37:09.574]  $ renice          : int NA
[13:37:09.574]  $ rshcmd          : NULL
[13:37:09.574]  $ user            : chr(0) 
[13:37:09.574]  $ revtunnel       : logi FALSE
[13:37:09.574]  $ rshlogfile      : NULL
[13:37:09.574]  $ rshopts         : chr(0) 
[13:37:09.574]  $ rank            : int 1
[13:37:09.574]  $ manual          : logi FALSE
[13:37:09.574]  $ dryrun          : logi FALSE
[13:37:09.574]  $ quiet           : logi FALSE
[13:37:09.574]  $ setup_strategy  : chr "parallel"
[13:37:09.574]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:37:09.574]  $ pidfile         : chr "/tmp/RtmppDRSMv/worker.rank=1.parallelly.parent=86163.15093298c8576.pid"
[13:37:09.574]  $ rshcmd_label    : NULL
[13:37:09.574]  $ rsh_call        : NULL
[13:37:09.574]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:37:09.574]  $ localMachine    : logi TRUE
[13:37:09.574]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:37:09.574]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:37:09.574]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:37:09.574]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:37:09.574]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:37:09.574]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:37:09.574]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:37:09.574]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:37:09.574]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:37:09.574]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:37:09.574]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:37:09.574]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:37:09.574]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:37:09.574]  $ arguments       :List of 28
[13:37:09.574]   ..$ worker          : chr "localhost"
[13:37:09.574]   ..$ master          : NULL
[13:37:09.574]   ..$ port            : int 11054
[13:37:09.574]   ..$ connectTimeout  : num 120
[13:37:09.574]   ..$ timeout         : num 2592000
[13:37:09.574]   ..$ rscript         : NULL
[13:37:09.574]   ..$ homogeneous     : NULL
[13:37:09.574]   ..$ rscript_args    : NULL
[13:37:09.574]   ..$ rscript_envs    : NULL
[13:37:09.574]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:37:09.574]   ..$ rscript_startup : NULL
[13:37:09.574]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:37:09.574]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:37:09.574]   ..$ methods         : logi TRUE
[13:37:09.574]   ..$ socketOptions   : chr "no-delay"
[13:37:09.574]   ..$ useXDR          : logi FALSE
[13:37:09.574]   ..$ outfile         : chr "/dev/null"
[13:37:09.574]   ..$ renice          : int NA
[13:37:09.574]   ..$ rshcmd          : NULL
[13:37:09.574]   ..$ user            : NULL
[13:37:09.574]   ..$ revtunnel       : logi NA
[13:37:09.574]   ..$ rshlogfile      : NULL
[13:37:09.574]   ..$ rshopts         : NULL
[13:37:09.574]   ..$ rank            : int 1
[13:37:09.574]   ..$ manual          : logi FALSE
[13:37:09.574]   ..$ dryrun          : logi FALSE
[13:37:09.574]   ..$ quiet           : logi FALSE
[13:37:09.574]   ..$ setup_strategy  : chr "parallel"
[13:37:09.574]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:37:09.590] [local output] System call to launch all workers:
[13:37:09.591] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmppDRSMv/worker.rank=1.parallelly.parent=86163.15093298c8576.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11054 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:37:09.591] [local output] Starting PSOCK main server
[13:37:09.597] [local output] Workers launched
[13:37:09.597] [local output] Waiting for workers to connect back
[13:37:09.597]  - [local output] 0 workers out of 2 ready
[13:37:09.847]  - [local output] 0 workers out of 2 ready
[13:37:09.848]  - [local output] 1 workers out of 2 ready
[13:37:09.849]  - [local output] 1 workers out of 2 ready
[13:37:09.849]  - [local output] 2 workers out of 2 ready
[13:37:09.849] [local output] Launching of workers completed
[13:37:09.849] [local output] Collecting session information from workers
[13:37:09.850] [local output]  - Worker #1 of 2
[13:37:09.851] [local output]  - Worker #2 of 2
[13:37:09.851] [local output] makeClusterPSOCK() ... done
[13:37:09.863] Packages needed by the future expression (n = 0): <none>
[13:37:09.863] Packages needed by future strategies (n = 0): <none>
[13:37:09.864] {
[13:37:09.864]     {
[13:37:09.864]         {
[13:37:09.864]             ...future.startTime <- base::Sys.time()
[13:37:09.864]             {
[13:37:09.864]                 {
[13:37:09.864]                   {
[13:37:09.864]                     {
[13:37:09.864]                       base::local({
[13:37:09.864]                         has_future <- base::requireNamespace("future", 
[13:37:09.864]                           quietly = TRUE)
[13:37:09.864]                         if (has_future) {
[13:37:09.864]                           ns <- base::getNamespace("future")
[13:37:09.864]                           version <- ns[[".package"]][["version"]]
[13:37:09.864]                           if (is.null(version)) 
[13:37:09.864]                             version <- utils::packageVersion("future")
[13:37:09.864]                         }
[13:37:09.864]                         else {
[13:37:09.864]                           version <- NULL
[13:37:09.864]                         }
[13:37:09.864]                         if (!has_future || version < "1.8.0") {
[13:37:09.864]                           info <- base::c(r_version = base::gsub("R version ", 
[13:37:09.864]                             "", base::R.version$version.string), 
[13:37:09.864]                             platform = base::sprintf("%s (%s-bit)", 
[13:37:09.864]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:09.864]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:09.864]                               "release", "version")], collapse = " "), 
[13:37:09.864]                             hostname = base::Sys.info()[["nodename"]])
[13:37:09.864]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:37:09.864]                             info)
[13:37:09.864]                           info <- base::paste(info, collapse = "; ")
[13:37:09.864]                           if (!has_future) {
[13:37:09.864]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:09.864]                               info)
[13:37:09.864]                           }
[13:37:09.864]                           else {
[13:37:09.864]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:09.864]                               info, version)
[13:37:09.864]                           }
[13:37:09.864]                           base::stop(msg)
[13:37:09.864]                         }
[13:37:09.864]                       })
[13:37:09.864]                     }
[13:37:09.864]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:37:09.864]                     base::options(mc.cores = 1L)
[13:37:09.864]                   }
[13:37:09.864]                   ...future.strategy.old <- future::plan("list")
[13:37:09.864]                   options(future.plan = NULL)
[13:37:09.864]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:09.864]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:09.864]                 }
[13:37:09.864]                 ...future.workdir <- getwd()
[13:37:09.864]             }
[13:37:09.864]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:09.864]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:09.864]         }
[13:37:09.864]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:09.864]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:09.864]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:09.864]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:09.864]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:09.864]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:09.864]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:09.864]             base::names(...future.oldOptions))
[13:37:09.864]     }
[13:37:09.864]     if (FALSE) {
[13:37:09.864]     }
[13:37:09.864]     else {
[13:37:09.864]         if (TRUE) {
[13:37:09.864]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:09.864]                 open = "w")
[13:37:09.864]         }
[13:37:09.864]         else {
[13:37:09.864]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:09.864]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:09.864]         }
[13:37:09.864]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:09.864]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:09.864]             base::sink(type = "output", split = FALSE)
[13:37:09.864]             base::close(...future.stdout)
[13:37:09.864]         }, add = TRUE)
[13:37:09.864]     }
[13:37:09.864]     ...future.frame <- base::sys.nframe()
[13:37:09.864]     ...future.conditions <- base::list()
[13:37:09.864]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:09.864]     if (FALSE) {
[13:37:09.864]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:09.864]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:09.864]     }
[13:37:09.864]     ...future.result <- base::tryCatch({
[13:37:09.864]         base::withCallingHandlers({
[13:37:09.864]             ...future.value <- base::withVisible(base::local({
[13:37:09.864]                 ...future.makeSendCondition <- base::local({
[13:37:09.864]                   sendCondition <- NULL
[13:37:09.864]                   function(frame = 1L) {
[13:37:09.864]                     if (is.function(sendCondition)) 
[13:37:09.864]                       return(sendCondition)
[13:37:09.864]                     ns <- getNamespace("parallel")
[13:37:09.864]                     if (exists("sendData", mode = "function", 
[13:37:09.864]                       envir = ns)) {
[13:37:09.864]                       parallel_sendData <- get("sendData", mode = "function", 
[13:37:09.864]                         envir = ns)
[13:37:09.864]                       envir <- sys.frame(frame)
[13:37:09.864]                       master <- NULL
[13:37:09.864]                       while (!identical(envir, .GlobalEnv) && 
[13:37:09.864]                         !identical(envir, emptyenv())) {
[13:37:09.864]                         if (exists("master", mode = "list", envir = envir, 
[13:37:09.864]                           inherits = FALSE)) {
[13:37:09.864]                           master <- get("master", mode = "list", 
[13:37:09.864]                             envir = envir, inherits = FALSE)
[13:37:09.864]                           if (inherits(master, c("SOCKnode", 
[13:37:09.864]                             "SOCK0node"))) {
[13:37:09.864]                             sendCondition <<- function(cond) {
[13:37:09.864]                               data <- list(type = "VALUE", value = cond, 
[13:37:09.864]                                 success = TRUE)
[13:37:09.864]                               parallel_sendData(master, data)
[13:37:09.864]                             }
[13:37:09.864]                             return(sendCondition)
[13:37:09.864]                           }
[13:37:09.864]                         }
[13:37:09.864]                         frame <- frame + 1L
[13:37:09.864]                         envir <- sys.frame(frame)
[13:37:09.864]                       }
[13:37:09.864]                     }
[13:37:09.864]                     sendCondition <<- function(cond) NULL
[13:37:09.864]                   }
[13:37:09.864]                 })
[13:37:09.864]                 withCallingHandlers({
[13:37:09.864]                   {
[13:37:09.864]                     42L
[13:37:09.864]                   }
[13:37:09.864]                 }, immediateCondition = function(cond) {
[13:37:09.864]                   sendCondition <- ...future.makeSendCondition()
[13:37:09.864]                   sendCondition(cond)
[13:37:09.864]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:09.864]                   {
[13:37:09.864]                     inherits <- base::inherits
[13:37:09.864]                     invokeRestart <- base::invokeRestart
[13:37:09.864]                     is.null <- base::is.null
[13:37:09.864]                     muffled <- FALSE
[13:37:09.864]                     if (inherits(cond, "message")) {
[13:37:09.864]                       muffled <- grepl(pattern, "muffleMessage")
[13:37:09.864]                       if (muffled) 
[13:37:09.864]                         invokeRestart("muffleMessage")
[13:37:09.864]                     }
[13:37:09.864]                     else if (inherits(cond, "warning")) {
[13:37:09.864]                       muffled <- grepl(pattern, "muffleWarning")
[13:37:09.864]                       if (muffled) 
[13:37:09.864]                         invokeRestart("muffleWarning")
[13:37:09.864]                     }
[13:37:09.864]                     else if (inherits(cond, "condition")) {
[13:37:09.864]                       if (!is.null(pattern)) {
[13:37:09.864]                         computeRestarts <- base::computeRestarts
[13:37:09.864]                         grepl <- base::grepl
[13:37:09.864]                         restarts <- computeRestarts(cond)
[13:37:09.864]                         for (restart in restarts) {
[13:37:09.864]                           name <- restart$name
[13:37:09.864]                           if (is.null(name)) 
[13:37:09.864]                             next
[13:37:09.864]                           if (!grepl(pattern, name)) 
[13:37:09.864]                             next
[13:37:09.864]                           invokeRestart(restart)
[13:37:09.864]                           muffled <- TRUE
[13:37:09.864]                           break
[13:37:09.864]                         }
[13:37:09.864]                       }
[13:37:09.864]                     }
[13:37:09.864]                     invisible(muffled)
[13:37:09.864]                   }
[13:37:09.864]                   muffleCondition(cond)
[13:37:09.864]                 })
[13:37:09.864]             }))
[13:37:09.864]             future::FutureResult(value = ...future.value$value, 
[13:37:09.864]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:09.864]                   ...future.rng), globalenv = if (FALSE) 
[13:37:09.864]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:09.864]                     ...future.globalenv.names))
[13:37:09.864]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:09.864]         }, condition = base::local({
[13:37:09.864]             c <- base::c
[13:37:09.864]             inherits <- base::inherits
[13:37:09.864]             invokeRestart <- base::invokeRestart
[13:37:09.864]             length <- base::length
[13:37:09.864]             list <- base::list
[13:37:09.864]             seq.int <- base::seq.int
[13:37:09.864]             signalCondition <- base::signalCondition
[13:37:09.864]             sys.calls <- base::sys.calls
[13:37:09.864]             `[[` <- base::`[[`
[13:37:09.864]             `+` <- base::`+`
[13:37:09.864]             `<<-` <- base::`<<-`
[13:37:09.864]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:09.864]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:09.864]                   3L)]
[13:37:09.864]             }
[13:37:09.864]             function(cond) {
[13:37:09.864]                 is_error <- inherits(cond, "error")
[13:37:09.864]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:09.864]                   NULL)
[13:37:09.864]                 if (is_error) {
[13:37:09.864]                   sessionInformation <- function() {
[13:37:09.864]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:09.864]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:09.864]                       search = base::search(), system = base::Sys.info())
[13:37:09.864]                   }
[13:37:09.864]                   ...future.conditions[[length(...future.conditions) + 
[13:37:09.864]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:09.864]                     cond$call), session = sessionInformation(), 
[13:37:09.864]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:09.864]                   signalCondition(cond)
[13:37:09.864]                 }
[13:37:09.864]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:09.864]                 "immediateCondition"))) {
[13:37:09.864]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:09.864]                   ...future.conditions[[length(...future.conditions) + 
[13:37:09.864]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:09.864]                   if (TRUE && !signal) {
[13:37:09.864]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:09.864]                     {
[13:37:09.864]                       inherits <- base::inherits
[13:37:09.864]                       invokeRestart <- base::invokeRestart
[13:37:09.864]                       is.null <- base::is.null
[13:37:09.864]                       muffled <- FALSE
[13:37:09.864]                       if (inherits(cond, "message")) {
[13:37:09.864]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:09.864]                         if (muffled) 
[13:37:09.864]                           invokeRestart("muffleMessage")
[13:37:09.864]                       }
[13:37:09.864]                       else if (inherits(cond, "warning")) {
[13:37:09.864]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:09.864]                         if (muffled) 
[13:37:09.864]                           invokeRestart("muffleWarning")
[13:37:09.864]                       }
[13:37:09.864]                       else if (inherits(cond, "condition")) {
[13:37:09.864]                         if (!is.null(pattern)) {
[13:37:09.864]                           computeRestarts <- base::computeRestarts
[13:37:09.864]                           grepl <- base::grepl
[13:37:09.864]                           restarts <- computeRestarts(cond)
[13:37:09.864]                           for (restart in restarts) {
[13:37:09.864]                             name <- restart$name
[13:37:09.864]                             if (is.null(name)) 
[13:37:09.864]                               next
[13:37:09.864]                             if (!grepl(pattern, name)) 
[13:37:09.864]                               next
[13:37:09.864]                             invokeRestart(restart)
[13:37:09.864]                             muffled <- TRUE
[13:37:09.864]                             break
[13:37:09.864]                           }
[13:37:09.864]                         }
[13:37:09.864]                       }
[13:37:09.864]                       invisible(muffled)
[13:37:09.864]                     }
[13:37:09.864]                     muffleCondition(cond, pattern = "^muffle")
[13:37:09.864]                   }
[13:37:09.864]                 }
[13:37:09.864]                 else {
[13:37:09.864]                   if (TRUE) {
[13:37:09.864]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:09.864]                     {
[13:37:09.864]                       inherits <- base::inherits
[13:37:09.864]                       invokeRestart <- base::invokeRestart
[13:37:09.864]                       is.null <- base::is.null
[13:37:09.864]                       muffled <- FALSE
[13:37:09.864]                       if (inherits(cond, "message")) {
[13:37:09.864]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:09.864]                         if (muffled) 
[13:37:09.864]                           invokeRestart("muffleMessage")
[13:37:09.864]                       }
[13:37:09.864]                       else if (inherits(cond, "warning")) {
[13:37:09.864]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:09.864]                         if (muffled) 
[13:37:09.864]                           invokeRestart("muffleWarning")
[13:37:09.864]                       }
[13:37:09.864]                       else if (inherits(cond, "condition")) {
[13:37:09.864]                         if (!is.null(pattern)) {
[13:37:09.864]                           computeRestarts <- base::computeRestarts
[13:37:09.864]                           grepl <- base::grepl
[13:37:09.864]                           restarts <- computeRestarts(cond)
[13:37:09.864]                           for (restart in restarts) {
[13:37:09.864]                             name <- restart$name
[13:37:09.864]                             if (is.null(name)) 
[13:37:09.864]                               next
[13:37:09.864]                             if (!grepl(pattern, name)) 
[13:37:09.864]                               next
[13:37:09.864]                             invokeRestart(restart)
[13:37:09.864]                             muffled <- TRUE
[13:37:09.864]                             break
[13:37:09.864]                           }
[13:37:09.864]                         }
[13:37:09.864]                       }
[13:37:09.864]                       invisible(muffled)
[13:37:09.864]                     }
[13:37:09.864]                     muffleCondition(cond, pattern = "^muffle")
[13:37:09.864]                   }
[13:37:09.864]                 }
[13:37:09.864]             }
[13:37:09.864]         }))
[13:37:09.864]     }, error = function(ex) {
[13:37:09.864]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:09.864]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:09.864]                 ...future.rng), started = ...future.startTime, 
[13:37:09.864]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:09.864]             version = "1.8"), class = "FutureResult")
[13:37:09.864]     }, finally = {
[13:37:09.864]         if (!identical(...future.workdir, getwd())) 
[13:37:09.864]             setwd(...future.workdir)
[13:37:09.864]         {
[13:37:09.864]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:09.864]                 ...future.oldOptions$nwarnings <- NULL
[13:37:09.864]             }
[13:37:09.864]             base::options(...future.oldOptions)
[13:37:09.864]             if (.Platform$OS.type == "windows") {
[13:37:09.864]                 old_names <- names(...future.oldEnvVars)
[13:37:09.864]                 envs <- base::Sys.getenv()
[13:37:09.864]                 names <- names(envs)
[13:37:09.864]                 common <- intersect(names, old_names)
[13:37:09.864]                 added <- setdiff(names, old_names)
[13:37:09.864]                 removed <- setdiff(old_names, names)
[13:37:09.864]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:09.864]                   envs[common]]
[13:37:09.864]                 NAMES <- toupper(changed)
[13:37:09.864]                 args <- list()
[13:37:09.864]                 for (kk in seq_along(NAMES)) {
[13:37:09.864]                   name <- changed[[kk]]
[13:37:09.864]                   NAME <- NAMES[[kk]]
[13:37:09.864]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:09.864]                     next
[13:37:09.864]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:09.864]                 }
[13:37:09.864]                 NAMES <- toupper(added)
[13:37:09.864]                 for (kk in seq_along(NAMES)) {
[13:37:09.864]                   name <- added[[kk]]
[13:37:09.864]                   NAME <- NAMES[[kk]]
[13:37:09.864]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:09.864]                     next
[13:37:09.864]                   args[[name]] <- ""
[13:37:09.864]                 }
[13:37:09.864]                 NAMES <- toupper(removed)
[13:37:09.864]                 for (kk in seq_along(NAMES)) {
[13:37:09.864]                   name <- removed[[kk]]
[13:37:09.864]                   NAME <- NAMES[[kk]]
[13:37:09.864]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:09.864]                     next
[13:37:09.864]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:09.864]                 }
[13:37:09.864]                 if (length(args) > 0) 
[13:37:09.864]                   base::do.call(base::Sys.setenv, args = args)
[13:37:09.864]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:09.864]             }
[13:37:09.864]             else {
[13:37:09.864]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:09.864]             }
[13:37:09.864]             {
[13:37:09.864]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:09.864]                   0L) {
[13:37:09.864]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:09.864]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:09.864]                   base::options(opts)
[13:37:09.864]                 }
[13:37:09.864]                 {
[13:37:09.864]                   {
[13:37:09.864]                     base::options(mc.cores = ...future.mc.cores.old)
[13:37:09.864]                     NULL
[13:37:09.864]                   }
[13:37:09.864]                   options(future.plan = NULL)
[13:37:09.864]                   if (is.na(NA_character_)) 
[13:37:09.864]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:09.864]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:09.864]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:09.864]                     .init = FALSE)
[13:37:09.864]                 }
[13:37:09.864]             }
[13:37:09.864]         }
[13:37:09.864]     })
[13:37:09.864]     if (TRUE) {
[13:37:09.864]         base::sink(type = "output", split = FALSE)
[13:37:09.864]         if (TRUE) {
[13:37:09.864]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:09.864]         }
[13:37:09.864]         else {
[13:37:09.864]             ...future.result["stdout"] <- base::list(NULL)
[13:37:09.864]         }
[13:37:09.864]         base::close(...future.stdout)
[13:37:09.864]         ...future.stdout <- NULL
[13:37:09.864]     }
[13:37:09.864]     ...future.result$conditions <- ...future.conditions
[13:37:09.864]     ...future.result$finished <- base::Sys.time()
[13:37:09.864]     ...future.result
[13:37:09.864] }
[13:37:09.917] MultisessionFuture started
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 1c81bec4-3232-89a6-5464-8e86a1a5c510
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[1] FALSE
[13:37:09.941] result() for ClusterFuture ...
[13:37:09.942] receiveMessageFromWorker() for ClusterFuture ...
[13:37:09.942] - Validating connection of MultisessionFuture
[13:37:09.953] - received message: FutureResult
[13:37:09.954] - Received FutureResult
[13:37:09.957] - Erased future from FutureRegistry
[13:37:09.957] result() for ClusterFuture ...
[13:37:09.957] - result already collected: FutureResult
[13:37:09.957] result() for ClusterFuture ... done
[13:37:09.957] receiveMessageFromWorker() for ClusterFuture ... done
[13:37:09.958] result() for ClusterFuture ... done
[13:37:09.958] result() for ClusterFuture ...
[13:37:09.958] - result already collected: FutureResult
[13:37:09.958] result() for ClusterFuture ... done
[1] 42
[13:37:09.962] getGlobalsAndPackages() ...
[13:37:09.962] Searching for globals...
[13:37:09.964] - globals found: [4] ‘{’, ‘<-’, ‘*’, ‘a’
[13:37:09.965] Searching for globals ... DONE
[13:37:09.965] Resolving globals: FALSE
[13:37:09.965] The total size of the 1 globals is 56 bytes (56 bytes)
[13:37:09.966] The total size of the 1 globals exported for future expression (‘{; b <- 3; c <- 2; a * b * c; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[13:37:09.966] - globals: [1] ‘a’
[13:37:09.966] 
[13:37:09.966] getGlobalsAndPackages() ... DONE
[13:37:09.977] Packages needed by the future expression (n = 0): <none>
[13:37:09.978] Packages needed by future strategies (n = 0): <none>
[13:37:09.978] {
[13:37:09.978]     {
[13:37:09.978]         {
[13:37:09.978]             ...future.startTime <- base::Sys.time()
[13:37:09.978]             {
[13:37:09.978]                 {
[13:37:09.978]                   {
[13:37:09.978]                     {
[13:37:09.978]                       base::local({
[13:37:09.978]                         has_future <- base::requireNamespace("future", 
[13:37:09.978]                           quietly = TRUE)
[13:37:09.978]                         if (has_future) {
[13:37:09.978]                           ns <- base::getNamespace("future")
[13:37:09.978]                           version <- ns[[".package"]][["version"]]
[13:37:09.978]                           if (is.null(version)) 
[13:37:09.978]                             version <- utils::packageVersion("future")
[13:37:09.978]                         }
[13:37:09.978]                         else {
[13:37:09.978]                           version <- NULL
[13:37:09.978]                         }
[13:37:09.978]                         if (!has_future || version < "1.8.0") {
[13:37:09.978]                           info <- base::c(r_version = base::gsub("R version ", 
[13:37:09.978]                             "", base::R.version$version.string), 
[13:37:09.978]                             platform = base::sprintf("%s (%s-bit)", 
[13:37:09.978]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:09.978]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:09.978]                               "release", "version")], collapse = " "), 
[13:37:09.978]                             hostname = base::Sys.info()[["nodename"]])
[13:37:09.978]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:37:09.978]                             info)
[13:37:09.978]                           info <- base::paste(info, collapse = "; ")
[13:37:09.978]                           if (!has_future) {
[13:37:09.978]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:09.978]                               info)
[13:37:09.978]                           }
[13:37:09.978]                           else {
[13:37:09.978]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:09.978]                               info, version)
[13:37:09.978]                           }
[13:37:09.978]                           base::stop(msg)
[13:37:09.978]                         }
[13:37:09.978]                       })
[13:37:09.978]                     }
[13:37:09.978]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:37:09.978]                     base::options(mc.cores = 1L)
[13:37:09.978]                   }
[13:37:09.978]                   ...future.strategy.old <- future::plan("list")
[13:37:09.978]                   options(future.plan = NULL)
[13:37:09.978]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:09.978]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:09.978]                 }
[13:37:09.978]                 ...future.workdir <- getwd()
[13:37:09.978]             }
[13:37:09.978]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:09.978]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:09.978]         }
[13:37:09.978]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:09.978]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:09.978]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:09.978]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:09.978]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:09.978]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:09.978]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:09.978]             base::names(...future.oldOptions))
[13:37:09.978]     }
[13:37:09.978]     if (FALSE) {
[13:37:09.978]     }
[13:37:09.978]     else {
[13:37:09.978]         if (TRUE) {
[13:37:09.978]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:09.978]                 open = "w")
[13:37:09.978]         }
[13:37:09.978]         else {
[13:37:09.978]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:09.978]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:09.978]         }
[13:37:09.978]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:09.978]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:09.978]             base::sink(type = "output", split = FALSE)
[13:37:09.978]             base::close(...future.stdout)
[13:37:09.978]         }, add = TRUE)
[13:37:09.978]     }
[13:37:09.978]     ...future.frame <- base::sys.nframe()
[13:37:09.978]     ...future.conditions <- base::list()
[13:37:09.978]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:09.978]     if (FALSE) {
[13:37:09.978]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:09.978]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:09.978]     }
[13:37:09.978]     ...future.result <- base::tryCatch({
[13:37:09.978]         base::withCallingHandlers({
[13:37:09.978]             ...future.value <- base::withVisible(base::local({
[13:37:09.978]                 ...future.makeSendCondition <- base::local({
[13:37:09.978]                   sendCondition <- NULL
[13:37:09.978]                   function(frame = 1L) {
[13:37:09.978]                     if (is.function(sendCondition)) 
[13:37:09.978]                       return(sendCondition)
[13:37:09.978]                     ns <- getNamespace("parallel")
[13:37:09.978]                     if (exists("sendData", mode = "function", 
[13:37:09.978]                       envir = ns)) {
[13:37:09.978]                       parallel_sendData <- get("sendData", mode = "function", 
[13:37:09.978]                         envir = ns)
[13:37:09.978]                       envir <- sys.frame(frame)
[13:37:09.978]                       master <- NULL
[13:37:09.978]                       while (!identical(envir, .GlobalEnv) && 
[13:37:09.978]                         !identical(envir, emptyenv())) {
[13:37:09.978]                         if (exists("master", mode = "list", envir = envir, 
[13:37:09.978]                           inherits = FALSE)) {
[13:37:09.978]                           master <- get("master", mode = "list", 
[13:37:09.978]                             envir = envir, inherits = FALSE)
[13:37:09.978]                           if (inherits(master, c("SOCKnode", 
[13:37:09.978]                             "SOCK0node"))) {
[13:37:09.978]                             sendCondition <<- function(cond) {
[13:37:09.978]                               data <- list(type = "VALUE", value = cond, 
[13:37:09.978]                                 success = TRUE)
[13:37:09.978]                               parallel_sendData(master, data)
[13:37:09.978]                             }
[13:37:09.978]                             return(sendCondition)
[13:37:09.978]                           }
[13:37:09.978]                         }
[13:37:09.978]                         frame <- frame + 1L
[13:37:09.978]                         envir <- sys.frame(frame)
[13:37:09.978]                       }
[13:37:09.978]                     }
[13:37:09.978]                     sendCondition <<- function(cond) NULL
[13:37:09.978]                   }
[13:37:09.978]                 })
[13:37:09.978]                 withCallingHandlers({
[13:37:09.978]                   {
[13:37:09.978]                     b <- 3
[13:37:09.978]                     c <- 2
[13:37:09.978]                     a * b * c
[13:37:09.978]                   }
[13:37:09.978]                 }, immediateCondition = function(cond) {
[13:37:09.978]                   sendCondition <- ...future.makeSendCondition()
[13:37:09.978]                   sendCondition(cond)
[13:37:09.978]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:09.978]                   {
[13:37:09.978]                     inherits <- base::inherits
[13:37:09.978]                     invokeRestart <- base::invokeRestart
[13:37:09.978]                     is.null <- base::is.null
[13:37:09.978]                     muffled <- FALSE
[13:37:09.978]                     if (inherits(cond, "message")) {
[13:37:09.978]                       muffled <- grepl(pattern, "muffleMessage")
[13:37:09.978]                       if (muffled) 
[13:37:09.978]                         invokeRestart("muffleMessage")
[13:37:09.978]                     }
[13:37:09.978]                     else if (inherits(cond, "warning")) {
[13:37:09.978]                       muffled <- grepl(pattern, "muffleWarning")
[13:37:09.978]                       if (muffled) 
[13:37:09.978]                         invokeRestart("muffleWarning")
[13:37:09.978]                     }
[13:37:09.978]                     else if (inherits(cond, "condition")) {
[13:37:09.978]                       if (!is.null(pattern)) {
[13:37:09.978]                         computeRestarts <- base::computeRestarts
[13:37:09.978]                         grepl <- base::grepl
[13:37:09.978]                         restarts <- computeRestarts(cond)
[13:37:09.978]                         for (restart in restarts) {
[13:37:09.978]                           name <- restart$name
[13:37:09.978]                           if (is.null(name)) 
[13:37:09.978]                             next
[13:37:09.978]                           if (!grepl(pattern, name)) 
[13:37:09.978]                             next
[13:37:09.978]                           invokeRestart(restart)
[13:37:09.978]                           muffled <- TRUE
[13:37:09.978]                           break
[13:37:09.978]                         }
[13:37:09.978]                       }
[13:37:09.978]                     }
[13:37:09.978]                     invisible(muffled)
[13:37:09.978]                   }
[13:37:09.978]                   muffleCondition(cond)
[13:37:09.978]                 })
[13:37:09.978]             }))
[13:37:09.978]             future::FutureResult(value = ...future.value$value, 
[13:37:09.978]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:09.978]                   ...future.rng), globalenv = if (FALSE) 
[13:37:09.978]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:09.978]                     ...future.globalenv.names))
[13:37:09.978]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:09.978]         }, condition = base::local({
[13:37:09.978]             c <- base::c
[13:37:09.978]             inherits <- base::inherits
[13:37:09.978]             invokeRestart <- base::invokeRestart
[13:37:09.978]             length <- base::length
[13:37:09.978]             list <- base::list
[13:37:09.978]             seq.int <- base::seq.int
[13:37:09.978]             signalCondition <- base::signalCondition
[13:37:09.978]             sys.calls <- base::sys.calls
[13:37:09.978]             `[[` <- base::`[[`
[13:37:09.978]             `+` <- base::`+`
[13:37:09.978]             `<<-` <- base::`<<-`
[13:37:09.978]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:09.978]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:09.978]                   3L)]
[13:37:09.978]             }
[13:37:09.978]             function(cond) {
[13:37:09.978]                 is_error <- inherits(cond, "error")
[13:37:09.978]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:09.978]                   NULL)
[13:37:09.978]                 if (is_error) {
[13:37:09.978]                   sessionInformation <- function() {
[13:37:09.978]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:09.978]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:09.978]                       search = base::search(), system = base::Sys.info())
[13:37:09.978]                   }
[13:37:09.978]                   ...future.conditions[[length(...future.conditions) + 
[13:37:09.978]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:09.978]                     cond$call), session = sessionInformation(), 
[13:37:09.978]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:09.978]                   signalCondition(cond)
[13:37:09.978]                 }
[13:37:09.978]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:09.978]                 "immediateCondition"))) {
[13:37:09.978]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:09.978]                   ...future.conditions[[length(...future.conditions) + 
[13:37:09.978]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:09.978]                   if (TRUE && !signal) {
[13:37:09.978]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:09.978]                     {
[13:37:09.978]                       inherits <- base::inherits
[13:37:09.978]                       invokeRestart <- base::invokeRestart
[13:37:09.978]                       is.null <- base::is.null
[13:37:09.978]                       muffled <- FALSE
[13:37:09.978]                       if (inherits(cond, "message")) {
[13:37:09.978]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:09.978]                         if (muffled) 
[13:37:09.978]                           invokeRestart("muffleMessage")
[13:37:09.978]                       }
[13:37:09.978]                       else if (inherits(cond, "warning")) {
[13:37:09.978]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:09.978]                         if (muffled) 
[13:37:09.978]                           invokeRestart("muffleWarning")
[13:37:09.978]                       }
[13:37:09.978]                       else if (inherits(cond, "condition")) {
[13:37:09.978]                         if (!is.null(pattern)) {
[13:37:09.978]                           computeRestarts <- base::computeRestarts
[13:37:09.978]                           grepl <- base::grepl
[13:37:09.978]                           restarts <- computeRestarts(cond)
[13:37:09.978]                           for (restart in restarts) {
[13:37:09.978]                             name <- restart$name
[13:37:09.978]                             if (is.null(name)) 
[13:37:09.978]                               next
[13:37:09.978]                             if (!grepl(pattern, name)) 
[13:37:09.978]                               next
[13:37:09.978]                             invokeRestart(restart)
[13:37:09.978]                             muffled <- TRUE
[13:37:09.978]                             break
[13:37:09.978]                           }
[13:37:09.978]                         }
[13:37:09.978]                       }
[13:37:09.978]                       invisible(muffled)
[13:37:09.978]                     }
[13:37:09.978]                     muffleCondition(cond, pattern = "^muffle")
[13:37:09.978]                   }
[13:37:09.978]                 }
[13:37:09.978]                 else {
[13:37:09.978]                   if (TRUE) {
[13:37:09.978]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:09.978]                     {
[13:37:09.978]                       inherits <- base::inherits
[13:37:09.978]                       invokeRestart <- base::invokeRestart
[13:37:09.978]                       is.null <- base::is.null
[13:37:09.978]                       muffled <- FALSE
[13:37:09.978]                       if (inherits(cond, "message")) {
[13:37:09.978]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:09.978]                         if (muffled) 
[13:37:09.978]                           invokeRestart("muffleMessage")
[13:37:09.978]                       }
[13:37:09.978]                       else if (inherits(cond, "warning")) {
[13:37:09.978]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:09.978]                         if (muffled) 
[13:37:09.978]                           invokeRestart("muffleWarning")
[13:37:09.978]                       }
[13:37:09.978]                       else if (inherits(cond, "condition")) {
[13:37:09.978]                         if (!is.null(pattern)) {
[13:37:09.978]                           computeRestarts <- base::computeRestarts
[13:37:09.978]                           grepl <- base::grepl
[13:37:09.978]                           restarts <- computeRestarts(cond)
[13:37:09.978]                           for (restart in restarts) {
[13:37:09.978]                             name <- restart$name
[13:37:09.978]                             if (is.null(name)) 
[13:37:09.978]                               next
[13:37:09.978]                             if (!grepl(pattern, name)) 
[13:37:09.978]                               next
[13:37:09.978]                             invokeRestart(restart)
[13:37:09.978]                             muffled <- TRUE
[13:37:09.978]                             break
[13:37:09.978]                           }
[13:37:09.978]                         }
[13:37:09.978]                       }
[13:37:09.978]                       invisible(muffled)
[13:37:09.978]                     }
[13:37:09.978]                     muffleCondition(cond, pattern = "^muffle")
[13:37:09.978]                   }
[13:37:09.978]                 }
[13:37:09.978]             }
[13:37:09.978]         }))
[13:37:09.978]     }, error = function(ex) {
[13:37:09.978]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:09.978]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:09.978]                 ...future.rng), started = ...future.startTime, 
[13:37:09.978]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:09.978]             version = "1.8"), class = "FutureResult")
[13:37:09.978]     }, finally = {
[13:37:09.978]         if (!identical(...future.workdir, getwd())) 
[13:37:09.978]             setwd(...future.workdir)
[13:37:09.978]         {
[13:37:09.978]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:09.978]                 ...future.oldOptions$nwarnings <- NULL
[13:37:09.978]             }
[13:37:09.978]             base::options(...future.oldOptions)
[13:37:09.978]             if (.Platform$OS.type == "windows") {
[13:37:09.978]                 old_names <- names(...future.oldEnvVars)
[13:37:09.978]                 envs <- base::Sys.getenv()
[13:37:09.978]                 names <- names(envs)
[13:37:09.978]                 common <- intersect(names, old_names)
[13:37:09.978]                 added <- setdiff(names, old_names)
[13:37:09.978]                 removed <- setdiff(old_names, names)
[13:37:09.978]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:09.978]                   envs[common]]
[13:37:09.978]                 NAMES <- toupper(changed)
[13:37:09.978]                 args <- list()
[13:37:09.978]                 for (kk in seq_along(NAMES)) {
[13:37:09.978]                   name <- changed[[kk]]
[13:37:09.978]                   NAME <- NAMES[[kk]]
[13:37:09.978]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:09.978]                     next
[13:37:09.978]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:09.978]                 }
[13:37:09.978]                 NAMES <- toupper(added)
[13:37:09.978]                 for (kk in seq_along(NAMES)) {
[13:37:09.978]                   name <- added[[kk]]
[13:37:09.978]                   NAME <- NAMES[[kk]]
[13:37:09.978]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:09.978]                     next
[13:37:09.978]                   args[[name]] <- ""
[13:37:09.978]                 }
[13:37:09.978]                 NAMES <- toupper(removed)
[13:37:09.978]                 for (kk in seq_along(NAMES)) {
[13:37:09.978]                   name <- removed[[kk]]
[13:37:09.978]                   NAME <- NAMES[[kk]]
[13:37:09.978]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:09.978]                     next
[13:37:09.978]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:09.978]                 }
[13:37:09.978]                 if (length(args) > 0) 
[13:37:09.978]                   base::do.call(base::Sys.setenv, args = args)
[13:37:09.978]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:09.978]             }
[13:37:09.978]             else {
[13:37:09.978]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:09.978]             }
[13:37:09.978]             {
[13:37:09.978]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:09.978]                   0L) {
[13:37:09.978]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:09.978]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:09.978]                   base::options(opts)
[13:37:09.978]                 }
[13:37:09.978]                 {
[13:37:09.978]                   {
[13:37:09.978]                     base::options(mc.cores = ...future.mc.cores.old)
[13:37:09.978]                     NULL
[13:37:09.978]                   }
[13:37:09.978]                   options(future.plan = NULL)
[13:37:09.978]                   if (is.na(NA_character_)) 
[13:37:09.978]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:09.978]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:09.978]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:09.978]                     .init = FALSE)
[13:37:09.978]                 }
[13:37:09.978]             }
[13:37:09.978]         }
[13:37:09.978]     })
[13:37:09.978]     if (TRUE) {
[13:37:09.978]         base::sink(type = "output", split = FALSE)
[13:37:09.978]         if (TRUE) {
[13:37:09.978]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:09.978]         }
[13:37:09.978]         else {
[13:37:09.978]             ...future.result["stdout"] <- base::list(NULL)
[13:37:09.978]         }
[13:37:09.978]         base::close(...future.stdout)
[13:37:09.978]         ...future.stdout <- NULL
[13:37:09.978]     }
[13:37:09.978]     ...future.result$conditions <- ...future.conditions
[13:37:09.978]     ...future.result$finished <- base::Sys.time()
[13:37:09.978]     ...future.result
[13:37:09.978] }
[13:37:09.981] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[13:37:09.981] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[13:37:09.982] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[13:37:09.982] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[13:37:09.982] MultisessionFuture started
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    b <- 3
    c <- 2
    a * b * c
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 56 bytes (numeric ‘a’ of 56 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[13:37:09.988] receiveMessageFromWorker() for ClusterFuture ...
[13:37:09.988] - Validating connection of MultisessionFuture
[13:37:09.989] - received message: FutureResult
[13:37:09.989] - Received FutureResult
[13:37:09.989] - Erased future from FutureRegistry
[13:37:09.989] result() for ClusterFuture ...
[13:37:09.989] - result already collected: FutureResult
[13:37:09.989] result() for ClusterFuture ... done
[13:37:09.989] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 1c81bec4-3232-89a6-5464-8e86a1a5c510
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:37:09.990] result() for ClusterFuture ...
[13:37:09.990] - result already collected: FutureResult
[13:37:09.990] result() for ClusterFuture ... done
[13:37:09.990] result() for ClusterFuture ...
[13:37:09.990] - result already collected: FutureResult
[13:37:09.990] result() for ClusterFuture ... done
[1] 0
*** multisession() with globals and blocking
 - Creating multisession future #2 ...
[13:37:09.994] getGlobalsAndPackages() ...
[13:37:09.994] Searching for globals...
[13:37:09.995] - globals found: [2] ‘{’, ‘ii’
[13:37:09.995] Searching for globals ... DONE
[13:37:09.995] Resolving globals: FALSE
[13:37:09.996] The total size of the 1 globals is 56 bytes (56 bytes)
[13:37:09.996] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[13:37:09.996] - globals: [1] ‘ii’
[13:37:09.997] 
[13:37:09.997] getGlobalsAndPackages() ... DONE
[13:37:10.008] Packages needed by the future expression (n = 0): <none>
[13:37:10.008] Packages needed by future strategies (n = 0): <none>
[13:37:10.009] {
[13:37:10.009]     {
[13:37:10.009]         {
[13:37:10.009]             ...future.startTime <- base::Sys.time()
[13:37:10.009]             {
[13:37:10.009]                 {
[13:37:10.009]                   {
[13:37:10.009]                     {
[13:37:10.009]                       base::local({
[13:37:10.009]                         has_future <- base::requireNamespace("future", 
[13:37:10.009]                           quietly = TRUE)
[13:37:10.009]                         if (has_future) {
[13:37:10.009]                           ns <- base::getNamespace("future")
[13:37:10.009]                           version <- ns[[".package"]][["version"]]
[13:37:10.009]                           if (is.null(version)) 
[13:37:10.009]                             version <- utils::packageVersion("future")
[13:37:10.009]                         }
[13:37:10.009]                         else {
[13:37:10.009]                           version <- NULL
[13:37:10.009]                         }
[13:37:10.009]                         if (!has_future || version < "1.8.0") {
[13:37:10.009]                           info <- base::c(r_version = base::gsub("R version ", 
[13:37:10.009]                             "", base::R.version$version.string), 
[13:37:10.009]                             platform = base::sprintf("%s (%s-bit)", 
[13:37:10.009]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:10.009]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:10.009]                               "release", "version")], collapse = " "), 
[13:37:10.009]                             hostname = base::Sys.info()[["nodename"]])
[13:37:10.009]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:37:10.009]                             info)
[13:37:10.009]                           info <- base::paste(info, collapse = "; ")
[13:37:10.009]                           if (!has_future) {
[13:37:10.009]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:10.009]                               info)
[13:37:10.009]                           }
[13:37:10.009]                           else {
[13:37:10.009]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:10.009]                               info, version)
[13:37:10.009]                           }
[13:37:10.009]                           base::stop(msg)
[13:37:10.009]                         }
[13:37:10.009]                       })
[13:37:10.009]                     }
[13:37:10.009]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:37:10.009]                     base::options(mc.cores = 1L)
[13:37:10.009]                   }
[13:37:10.009]                   ...future.strategy.old <- future::plan("list")
[13:37:10.009]                   options(future.plan = NULL)
[13:37:10.009]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:10.009]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:10.009]                 }
[13:37:10.009]                 ...future.workdir <- getwd()
[13:37:10.009]             }
[13:37:10.009]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:10.009]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:10.009]         }
[13:37:10.009]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:10.009]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:10.009]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:10.009]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:10.009]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:10.009]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:10.009]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:10.009]             base::names(...future.oldOptions))
[13:37:10.009]     }
[13:37:10.009]     if (FALSE) {
[13:37:10.009]     }
[13:37:10.009]     else {
[13:37:10.009]         if (TRUE) {
[13:37:10.009]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:10.009]                 open = "w")
[13:37:10.009]         }
[13:37:10.009]         else {
[13:37:10.009]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:10.009]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:10.009]         }
[13:37:10.009]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:10.009]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:10.009]             base::sink(type = "output", split = FALSE)
[13:37:10.009]             base::close(...future.stdout)
[13:37:10.009]         }, add = TRUE)
[13:37:10.009]     }
[13:37:10.009]     ...future.frame <- base::sys.nframe()
[13:37:10.009]     ...future.conditions <- base::list()
[13:37:10.009]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:10.009]     if (FALSE) {
[13:37:10.009]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:10.009]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:10.009]     }
[13:37:10.009]     ...future.result <- base::tryCatch({
[13:37:10.009]         base::withCallingHandlers({
[13:37:10.009]             ...future.value <- base::withVisible(base::local({
[13:37:10.009]                 ...future.makeSendCondition <- base::local({
[13:37:10.009]                   sendCondition <- NULL
[13:37:10.009]                   function(frame = 1L) {
[13:37:10.009]                     if (is.function(sendCondition)) 
[13:37:10.009]                       return(sendCondition)
[13:37:10.009]                     ns <- getNamespace("parallel")
[13:37:10.009]                     if (exists("sendData", mode = "function", 
[13:37:10.009]                       envir = ns)) {
[13:37:10.009]                       parallel_sendData <- get("sendData", mode = "function", 
[13:37:10.009]                         envir = ns)
[13:37:10.009]                       envir <- sys.frame(frame)
[13:37:10.009]                       master <- NULL
[13:37:10.009]                       while (!identical(envir, .GlobalEnv) && 
[13:37:10.009]                         !identical(envir, emptyenv())) {
[13:37:10.009]                         if (exists("master", mode = "list", envir = envir, 
[13:37:10.009]                           inherits = FALSE)) {
[13:37:10.009]                           master <- get("master", mode = "list", 
[13:37:10.009]                             envir = envir, inherits = FALSE)
[13:37:10.009]                           if (inherits(master, c("SOCKnode", 
[13:37:10.009]                             "SOCK0node"))) {
[13:37:10.009]                             sendCondition <<- function(cond) {
[13:37:10.009]                               data <- list(type = "VALUE", value = cond, 
[13:37:10.009]                                 success = TRUE)
[13:37:10.009]                               parallel_sendData(master, data)
[13:37:10.009]                             }
[13:37:10.009]                             return(sendCondition)
[13:37:10.009]                           }
[13:37:10.009]                         }
[13:37:10.009]                         frame <- frame + 1L
[13:37:10.009]                         envir <- sys.frame(frame)
[13:37:10.009]                       }
[13:37:10.009]                     }
[13:37:10.009]                     sendCondition <<- function(cond) NULL
[13:37:10.009]                   }
[13:37:10.009]                 })
[13:37:10.009]                 withCallingHandlers({
[13:37:10.009]                   {
[13:37:10.009]                     ii
[13:37:10.009]                   }
[13:37:10.009]                 }, immediateCondition = function(cond) {
[13:37:10.009]                   sendCondition <- ...future.makeSendCondition()
[13:37:10.009]                   sendCondition(cond)
[13:37:10.009]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:10.009]                   {
[13:37:10.009]                     inherits <- base::inherits
[13:37:10.009]                     invokeRestart <- base::invokeRestart
[13:37:10.009]                     is.null <- base::is.null
[13:37:10.009]                     muffled <- FALSE
[13:37:10.009]                     if (inherits(cond, "message")) {
[13:37:10.009]                       muffled <- grepl(pattern, "muffleMessage")
[13:37:10.009]                       if (muffled) 
[13:37:10.009]                         invokeRestart("muffleMessage")
[13:37:10.009]                     }
[13:37:10.009]                     else if (inherits(cond, "warning")) {
[13:37:10.009]                       muffled <- grepl(pattern, "muffleWarning")
[13:37:10.009]                       if (muffled) 
[13:37:10.009]                         invokeRestart("muffleWarning")
[13:37:10.009]                     }
[13:37:10.009]                     else if (inherits(cond, "condition")) {
[13:37:10.009]                       if (!is.null(pattern)) {
[13:37:10.009]                         computeRestarts <- base::computeRestarts
[13:37:10.009]                         grepl <- base::grepl
[13:37:10.009]                         restarts <- computeRestarts(cond)
[13:37:10.009]                         for (restart in restarts) {
[13:37:10.009]                           name <- restart$name
[13:37:10.009]                           if (is.null(name)) 
[13:37:10.009]                             next
[13:37:10.009]                           if (!grepl(pattern, name)) 
[13:37:10.009]                             next
[13:37:10.009]                           invokeRestart(restart)
[13:37:10.009]                           muffled <- TRUE
[13:37:10.009]                           break
[13:37:10.009]                         }
[13:37:10.009]                       }
[13:37:10.009]                     }
[13:37:10.009]                     invisible(muffled)
[13:37:10.009]                   }
[13:37:10.009]                   muffleCondition(cond)
[13:37:10.009]                 })
[13:37:10.009]             }))
[13:37:10.009]             future::FutureResult(value = ...future.value$value, 
[13:37:10.009]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:10.009]                   ...future.rng), globalenv = if (FALSE) 
[13:37:10.009]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:10.009]                     ...future.globalenv.names))
[13:37:10.009]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:10.009]         }, condition = base::local({
[13:37:10.009]             c <- base::c
[13:37:10.009]             inherits <- base::inherits
[13:37:10.009]             invokeRestart <- base::invokeRestart
[13:37:10.009]             length <- base::length
[13:37:10.009]             list <- base::list
[13:37:10.009]             seq.int <- base::seq.int
[13:37:10.009]             signalCondition <- base::signalCondition
[13:37:10.009]             sys.calls <- base::sys.calls
[13:37:10.009]             `[[` <- base::`[[`
[13:37:10.009]             `+` <- base::`+`
[13:37:10.009]             `<<-` <- base::`<<-`
[13:37:10.009]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:10.009]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:10.009]                   3L)]
[13:37:10.009]             }
[13:37:10.009]             function(cond) {
[13:37:10.009]                 is_error <- inherits(cond, "error")
[13:37:10.009]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:10.009]                   NULL)
[13:37:10.009]                 if (is_error) {
[13:37:10.009]                   sessionInformation <- function() {
[13:37:10.009]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:10.009]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:10.009]                       search = base::search(), system = base::Sys.info())
[13:37:10.009]                   }
[13:37:10.009]                   ...future.conditions[[length(...future.conditions) + 
[13:37:10.009]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:10.009]                     cond$call), session = sessionInformation(), 
[13:37:10.009]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:10.009]                   signalCondition(cond)
[13:37:10.009]                 }
[13:37:10.009]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:10.009]                 "immediateCondition"))) {
[13:37:10.009]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:10.009]                   ...future.conditions[[length(...future.conditions) + 
[13:37:10.009]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:10.009]                   if (TRUE && !signal) {
[13:37:10.009]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:10.009]                     {
[13:37:10.009]                       inherits <- base::inherits
[13:37:10.009]                       invokeRestart <- base::invokeRestart
[13:37:10.009]                       is.null <- base::is.null
[13:37:10.009]                       muffled <- FALSE
[13:37:10.009]                       if (inherits(cond, "message")) {
[13:37:10.009]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:10.009]                         if (muffled) 
[13:37:10.009]                           invokeRestart("muffleMessage")
[13:37:10.009]                       }
[13:37:10.009]                       else if (inherits(cond, "warning")) {
[13:37:10.009]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:10.009]                         if (muffled) 
[13:37:10.009]                           invokeRestart("muffleWarning")
[13:37:10.009]                       }
[13:37:10.009]                       else if (inherits(cond, "condition")) {
[13:37:10.009]                         if (!is.null(pattern)) {
[13:37:10.009]                           computeRestarts <- base::computeRestarts
[13:37:10.009]                           grepl <- base::grepl
[13:37:10.009]                           restarts <- computeRestarts(cond)
[13:37:10.009]                           for (restart in restarts) {
[13:37:10.009]                             name <- restart$name
[13:37:10.009]                             if (is.null(name)) 
[13:37:10.009]                               next
[13:37:10.009]                             if (!grepl(pattern, name)) 
[13:37:10.009]                               next
[13:37:10.009]                             invokeRestart(restart)
[13:37:10.009]                             muffled <- TRUE
[13:37:10.009]                             break
[13:37:10.009]                           }
[13:37:10.009]                         }
[13:37:10.009]                       }
[13:37:10.009]                       invisible(muffled)
[13:37:10.009]                     }
[13:37:10.009]                     muffleCondition(cond, pattern = "^muffle")
[13:37:10.009]                   }
[13:37:10.009]                 }
[13:37:10.009]                 else {
[13:37:10.009]                   if (TRUE) {
[13:37:10.009]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:10.009]                     {
[13:37:10.009]                       inherits <- base::inherits
[13:37:10.009]                       invokeRestart <- base::invokeRestart
[13:37:10.009]                       is.null <- base::is.null
[13:37:10.009]                       muffled <- FALSE
[13:37:10.009]                       if (inherits(cond, "message")) {
[13:37:10.009]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:10.009]                         if (muffled) 
[13:37:10.009]                           invokeRestart("muffleMessage")
[13:37:10.009]                       }
[13:37:10.009]                       else if (inherits(cond, "warning")) {
[13:37:10.009]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:10.009]                         if (muffled) 
[13:37:10.009]                           invokeRestart("muffleWarning")
[13:37:10.009]                       }
[13:37:10.009]                       else if (inherits(cond, "condition")) {
[13:37:10.009]                         if (!is.null(pattern)) {
[13:37:10.009]                           computeRestarts <- base::computeRestarts
[13:37:10.009]                           grepl <- base::grepl
[13:37:10.009]                           restarts <- computeRestarts(cond)
[13:37:10.009]                           for (restart in restarts) {
[13:37:10.009]                             name <- restart$name
[13:37:10.009]                             if (is.null(name)) 
[13:37:10.009]                               next
[13:37:10.009]                             if (!grepl(pattern, name)) 
[13:37:10.009]                               next
[13:37:10.009]                             invokeRestart(restart)
[13:37:10.009]                             muffled <- TRUE
[13:37:10.009]                             break
[13:37:10.009]                           }
[13:37:10.009]                         }
[13:37:10.009]                       }
[13:37:10.009]                       invisible(muffled)
[13:37:10.009]                     }
[13:37:10.009]                     muffleCondition(cond, pattern = "^muffle")
[13:37:10.009]                   }
[13:37:10.009]                 }
[13:37:10.009]             }
[13:37:10.009]         }))
[13:37:10.009]     }, error = function(ex) {
[13:37:10.009]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:10.009]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:10.009]                 ...future.rng), started = ...future.startTime, 
[13:37:10.009]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:10.009]             version = "1.8"), class = "FutureResult")
[13:37:10.009]     }, finally = {
[13:37:10.009]         if (!identical(...future.workdir, getwd())) 
[13:37:10.009]             setwd(...future.workdir)
[13:37:10.009]         {
[13:37:10.009]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:10.009]                 ...future.oldOptions$nwarnings <- NULL
[13:37:10.009]             }
[13:37:10.009]             base::options(...future.oldOptions)
[13:37:10.009]             if (.Platform$OS.type == "windows") {
[13:37:10.009]                 old_names <- names(...future.oldEnvVars)
[13:37:10.009]                 envs <- base::Sys.getenv()
[13:37:10.009]                 names <- names(envs)
[13:37:10.009]                 common <- intersect(names, old_names)
[13:37:10.009]                 added <- setdiff(names, old_names)
[13:37:10.009]                 removed <- setdiff(old_names, names)
[13:37:10.009]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:10.009]                   envs[common]]
[13:37:10.009]                 NAMES <- toupper(changed)
[13:37:10.009]                 args <- list()
[13:37:10.009]                 for (kk in seq_along(NAMES)) {
[13:37:10.009]                   name <- changed[[kk]]
[13:37:10.009]                   NAME <- NAMES[[kk]]
[13:37:10.009]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:10.009]                     next
[13:37:10.009]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:10.009]                 }
[13:37:10.009]                 NAMES <- toupper(added)
[13:37:10.009]                 for (kk in seq_along(NAMES)) {
[13:37:10.009]                   name <- added[[kk]]
[13:37:10.009]                   NAME <- NAMES[[kk]]
[13:37:10.009]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:10.009]                     next
[13:37:10.009]                   args[[name]] <- ""
[13:37:10.009]                 }
[13:37:10.009]                 NAMES <- toupper(removed)
[13:37:10.009]                 for (kk in seq_along(NAMES)) {
[13:37:10.009]                   name <- removed[[kk]]
[13:37:10.009]                   NAME <- NAMES[[kk]]
[13:37:10.009]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:10.009]                     next
[13:37:10.009]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:10.009]                 }
[13:37:10.009]                 if (length(args) > 0) 
[13:37:10.009]                   base::do.call(base::Sys.setenv, args = args)
[13:37:10.009]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:10.009]             }
[13:37:10.009]             else {
[13:37:10.009]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:10.009]             }
[13:37:10.009]             {
[13:37:10.009]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:10.009]                   0L) {
[13:37:10.009]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:10.009]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:10.009]                   base::options(opts)
[13:37:10.009]                 }
[13:37:10.009]                 {
[13:37:10.009]                   {
[13:37:10.009]                     base::options(mc.cores = ...future.mc.cores.old)
[13:37:10.009]                     NULL
[13:37:10.009]                   }
[13:37:10.009]                   options(future.plan = NULL)
[13:37:10.009]                   if (is.na(NA_character_)) 
[13:37:10.009]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:10.009]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:10.009]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:10.009]                     .init = FALSE)
[13:37:10.009]                 }
[13:37:10.009]             }
[13:37:10.009]         }
[13:37:10.009]     })
[13:37:10.009]     if (TRUE) {
[13:37:10.009]         base::sink(type = "output", split = FALSE)
[13:37:10.009]         if (TRUE) {
[13:37:10.009]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:10.009]         }
[13:37:10.009]         else {
[13:37:10.009]             ...future.result["stdout"] <- base::list(NULL)
[13:37:10.009]         }
[13:37:10.009]         base::close(...future.stdout)
[13:37:10.009]         ...future.stdout <- NULL
[13:37:10.009]     }
[13:37:10.009]     ...future.result$conditions <- ...future.conditions
[13:37:10.009]     ...future.result$finished <- base::Sys.time()
[13:37:10.009]     ...future.result
[13:37:10.009] }
[13:37:10.011] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[13:37:10.012] Exporting ‘ii’ (56 bytes) to cluster node #1 ...
[13:37:10.012] Exporting ‘ii’ (56 bytes) to cluster node #1 ... DONE
[13:37:10.012] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[13:37:10.013] MultisessionFuture started
 - Creating multisession future #1 ...
[13:37:10.017] getGlobalsAndPackages() ...
[13:37:10.017] Searching for globals...
[13:37:10.018] - globals found: [2] ‘{’, ‘ii’
[13:37:10.018] Searching for globals ... DONE
[13:37:10.018] Resolving globals: FALSE
[13:37:10.018] The total size of the 1 globals is 56 bytes (56 bytes)
[13:37:10.019] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[13:37:10.019] - globals: [1] ‘ii’
[13:37:10.019] 
[13:37:10.019] getGlobalsAndPackages() ... DONE
[13:37:10.031] Packages needed by the future expression (n = 0): <none>
[13:37:10.031] Packages needed by future strategies (n = 0): <none>
[13:37:10.031] {
[13:37:10.031]     {
[13:37:10.031]         {
[13:37:10.031]             ...future.startTime <- base::Sys.time()
[13:37:10.031]             {
[13:37:10.031]                 {
[13:37:10.031]                   {
[13:37:10.031]                     {
[13:37:10.031]                       base::local({
[13:37:10.031]                         has_future <- base::requireNamespace("future", 
[13:37:10.031]                           quietly = TRUE)
[13:37:10.031]                         if (has_future) {
[13:37:10.031]                           ns <- base::getNamespace("future")
[13:37:10.031]                           version <- ns[[".package"]][["version"]]
[13:37:10.031]                           if (is.null(version)) 
[13:37:10.031]                             version <- utils::packageVersion("future")
[13:37:10.031]                         }
[13:37:10.031]                         else {
[13:37:10.031]                           version <- NULL
[13:37:10.031]                         }
[13:37:10.031]                         if (!has_future || version < "1.8.0") {
[13:37:10.031]                           info <- base::c(r_version = base::gsub("R version ", 
[13:37:10.031]                             "", base::R.version$version.string), 
[13:37:10.031]                             platform = base::sprintf("%s (%s-bit)", 
[13:37:10.031]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:10.031]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:10.031]                               "release", "version")], collapse = " "), 
[13:37:10.031]                             hostname = base::Sys.info()[["nodename"]])
[13:37:10.031]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:37:10.031]                             info)
[13:37:10.031]                           info <- base::paste(info, collapse = "; ")
[13:37:10.031]                           if (!has_future) {
[13:37:10.031]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:10.031]                               info)
[13:37:10.031]                           }
[13:37:10.031]                           else {
[13:37:10.031]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:10.031]                               info, version)
[13:37:10.031]                           }
[13:37:10.031]                           base::stop(msg)
[13:37:10.031]                         }
[13:37:10.031]                       })
[13:37:10.031]                     }
[13:37:10.031]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:37:10.031]                     base::options(mc.cores = 1L)
[13:37:10.031]                   }
[13:37:10.031]                   ...future.strategy.old <- future::plan("list")
[13:37:10.031]                   options(future.plan = NULL)
[13:37:10.031]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:10.031]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:10.031]                 }
[13:37:10.031]                 ...future.workdir <- getwd()
[13:37:10.031]             }
[13:37:10.031]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:10.031]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:10.031]         }
[13:37:10.031]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:10.031]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:10.031]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:10.031]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:10.031]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:10.031]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:10.031]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:10.031]             base::names(...future.oldOptions))
[13:37:10.031]     }
[13:37:10.031]     if (FALSE) {
[13:37:10.031]     }
[13:37:10.031]     else {
[13:37:10.031]         if (TRUE) {
[13:37:10.031]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:10.031]                 open = "w")
[13:37:10.031]         }
[13:37:10.031]         else {
[13:37:10.031]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:10.031]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:10.031]         }
[13:37:10.031]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:10.031]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:10.031]             base::sink(type = "output", split = FALSE)
[13:37:10.031]             base::close(...future.stdout)
[13:37:10.031]         }, add = TRUE)
[13:37:10.031]     }
[13:37:10.031]     ...future.frame <- base::sys.nframe()
[13:37:10.031]     ...future.conditions <- base::list()
[13:37:10.031]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:10.031]     if (FALSE) {
[13:37:10.031]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:10.031]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:10.031]     }
[13:37:10.031]     ...future.result <- base::tryCatch({
[13:37:10.031]         base::withCallingHandlers({
[13:37:10.031]             ...future.value <- base::withVisible(base::local({
[13:37:10.031]                 ...future.makeSendCondition <- base::local({
[13:37:10.031]                   sendCondition <- NULL
[13:37:10.031]                   function(frame = 1L) {
[13:37:10.031]                     if (is.function(sendCondition)) 
[13:37:10.031]                       return(sendCondition)
[13:37:10.031]                     ns <- getNamespace("parallel")
[13:37:10.031]                     if (exists("sendData", mode = "function", 
[13:37:10.031]                       envir = ns)) {
[13:37:10.031]                       parallel_sendData <- get("sendData", mode = "function", 
[13:37:10.031]                         envir = ns)
[13:37:10.031]                       envir <- sys.frame(frame)
[13:37:10.031]                       master <- NULL
[13:37:10.031]                       while (!identical(envir, .GlobalEnv) && 
[13:37:10.031]                         !identical(envir, emptyenv())) {
[13:37:10.031]                         if (exists("master", mode = "list", envir = envir, 
[13:37:10.031]                           inherits = FALSE)) {
[13:37:10.031]                           master <- get("master", mode = "list", 
[13:37:10.031]                             envir = envir, inherits = FALSE)
[13:37:10.031]                           if (inherits(master, c("SOCKnode", 
[13:37:10.031]                             "SOCK0node"))) {
[13:37:10.031]                             sendCondition <<- function(cond) {
[13:37:10.031]                               data <- list(type = "VALUE", value = cond, 
[13:37:10.031]                                 success = TRUE)
[13:37:10.031]                               parallel_sendData(master, data)
[13:37:10.031]                             }
[13:37:10.031]                             return(sendCondition)
[13:37:10.031]                           }
[13:37:10.031]                         }
[13:37:10.031]                         frame <- frame + 1L
[13:37:10.031]                         envir <- sys.frame(frame)
[13:37:10.031]                       }
[13:37:10.031]                     }
[13:37:10.031]                     sendCondition <<- function(cond) NULL
[13:37:10.031]                   }
[13:37:10.031]                 })
[13:37:10.031]                 withCallingHandlers({
[13:37:10.031]                   {
[13:37:10.031]                     ii
[13:37:10.031]                   }
[13:37:10.031]                 }, immediateCondition = function(cond) {
[13:37:10.031]                   sendCondition <- ...future.makeSendCondition()
[13:37:10.031]                   sendCondition(cond)
[13:37:10.031]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:10.031]                   {
[13:37:10.031]                     inherits <- base::inherits
[13:37:10.031]                     invokeRestart <- base::invokeRestart
[13:37:10.031]                     is.null <- base::is.null
[13:37:10.031]                     muffled <- FALSE
[13:37:10.031]                     if (inherits(cond, "message")) {
[13:37:10.031]                       muffled <- grepl(pattern, "muffleMessage")
[13:37:10.031]                       if (muffled) 
[13:37:10.031]                         invokeRestart("muffleMessage")
[13:37:10.031]                     }
[13:37:10.031]                     else if (inherits(cond, "warning")) {
[13:37:10.031]                       muffled <- grepl(pattern, "muffleWarning")
[13:37:10.031]                       if (muffled) 
[13:37:10.031]                         invokeRestart("muffleWarning")
[13:37:10.031]                     }
[13:37:10.031]                     else if (inherits(cond, "condition")) {
[13:37:10.031]                       if (!is.null(pattern)) {
[13:37:10.031]                         computeRestarts <- base::computeRestarts
[13:37:10.031]                         grepl <- base::grepl
[13:37:10.031]                         restarts <- computeRestarts(cond)
[13:37:10.031]                         for (restart in restarts) {
[13:37:10.031]                           name <- restart$name
[13:37:10.031]                           if (is.null(name)) 
[13:37:10.031]                             next
[13:37:10.031]                           if (!grepl(pattern, name)) 
[13:37:10.031]                             next
[13:37:10.031]                           invokeRestart(restart)
[13:37:10.031]                           muffled <- TRUE
[13:37:10.031]                           break
[13:37:10.031]                         }
[13:37:10.031]                       }
[13:37:10.031]                     }
[13:37:10.031]                     invisible(muffled)
[13:37:10.031]                   }
[13:37:10.031]                   muffleCondition(cond)
[13:37:10.031]                 })
[13:37:10.031]             }))
[13:37:10.031]             future::FutureResult(value = ...future.value$value, 
[13:37:10.031]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:10.031]                   ...future.rng), globalenv = if (FALSE) 
[13:37:10.031]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:10.031]                     ...future.globalenv.names))
[13:37:10.031]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:10.031]         }, condition = base::local({
[13:37:10.031]             c <- base::c
[13:37:10.031]             inherits <- base::inherits
[13:37:10.031]             invokeRestart <- base::invokeRestart
[13:37:10.031]             length <- base::length
[13:37:10.031]             list <- base::list
[13:37:10.031]             seq.int <- base::seq.int
[13:37:10.031]             signalCondition <- base::signalCondition
[13:37:10.031]             sys.calls <- base::sys.calls
[13:37:10.031]             `[[` <- base::`[[`
[13:37:10.031]             `+` <- base::`+`
[13:37:10.031]             `<<-` <- base::`<<-`
[13:37:10.031]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:10.031]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:10.031]                   3L)]
[13:37:10.031]             }
[13:37:10.031]             function(cond) {
[13:37:10.031]                 is_error <- inherits(cond, "error")
[13:37:10.031]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:10.031]                   NULL)
[13:37:10.031]                 if (is_error) {
[13:37:10.031]                   sessionInformation <- function() {
[13:37:10.031]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:10.031]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:10.031]                       search = base::search(), system = base::Sys.info())
[13:37:10.031]                   }
[13:37:10.031]                   ...future.conditions[[length(...future.conditions) + 
[13:37:10.031]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:10.031]                     cond$call), session = sessionInformation(), 
[13:37:10.031]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:10.031]                   signalCondition(cond)
[13:37:10.031]                 }
[13:37:10.031]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:10.031]                 "immediateCondition"))) {
[13:37:10.031]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:10.031]                   ...future.conditions[[length(...future.conditions) + 
[13:37:10.031]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:10.031]                   if (TRUE && !signal) {
[13:37:10.031]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:10.031]                     {
[13:37:10.031]                       inherits <- base::inherits
[13:37:10.031]                       invokeRestart <- base::invokeRestart
[13:37:10.031]                       is.null <- base::is.null
[13:37:10.031]                       muffled <- FALSE
[13:37:10.031]                       if (inherits(cond, "message")) {
[13:37:10.031]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:10.031]                         if (muffled) 
[13:37:10.031]                           invokeRestart("muffleMessage")
[13:37:10.031]                       }
[13:37:10.031]                       else if (inherits(cond, "warning")) {
[13:37:10.031]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:10.031]                         if (muffled) 
[13:37:10.031]                           invokeRestart("muffleWarning")
[13:37:10.031]                       }
[13:37:10.031]                       else if (inherits(cond, "condition")) {
[13:37:10.031]                         if (!is.null(pattern)) {
[13:37:10.031]                           computeRestarts <- base::computeRestarts
[13:37:10.031]                           grepl <- base::grepl
[13:37:10.031]                           restarts <- computeRestarts(cond)
[13:37:10.031]                           for (restart in restarts) {
[13:37:10.031]                             name <- restart$name
[13:37:10.031]                             if (is.null(name)) 
[13:37:10.031]                               next
[13:37:10.031]                             if (!grepl(pattern, name)) 
[13:37:10.031]                               next
[13:37:10.031]                             invokeRestart(restart)
[13:37:10.031]                             muffled <- TRUE
[13:37:10.031]                             break
[13:37:10.031]                           }
[13:37:10.031]                         }
[13:37:10.031]                       }
[13:37:10.031]                       invisible(muffled)
[13:37:10.031]                     }
[13:37:10.031]                     muffleCondition(cond, pattern = "^muffle")
[13:37:10.031]                   }
[13:37:10.031]                 }
[13:37:10.031]                 else {
[13:37:10.031]                   if (TRUE) {
[13:37:10.031]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:10.031]                     {
[13:37:10.031]                       inherits <- base::inherits
[13:37:10.031]                       invokeRestart <- base::invokeRestart
[13:37:10.031]                       is.null <- base::is.null
[13:37:10.031]                       muffled <- FALSE
[13:37:10.031]                       if (inherits(cond, "message")) {
[13:37:10.031]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:10.031]                         if (muffled) 
[13:37:10.031]                           invokeRestart("muffleMessage")
[13:37:10.031]                       }
[13:37:10.031]                       else if (inherits(cond, "warning")) {
[13:37:10.031]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:10.031]                         if (muffled) 
[13:37:10.031]                           invokeRestart("muffleWarning")
[13:37:10.031]                       }
[13:37:10.031]                       else if (inherits(cond, "condition")) {
[13:37:10.031]                         if (!is.null(pattern)) {
[13:37:10.031]                           computeRestarts <- base::computeRestarts
[13:37:10.031]                           grepl <- base::grepl
[13:37:10.031]                           restarts <- computeRestarts(cond)
[13:37:10.031]                           for (restart in restarts) {
[13:37:10.031]                             name <- restart$name
[13:37:10.031]                             if (is.null(name)) 
[13:37:10.031]                               next
[13:37:10.031]                             if (!grepl(pattern, name)) 
[13:37:10.031]                               next
[13:37:10.031]                             invokeRestart(restart)
[13:37:10.031]                             muffled <- TRUE
[13:37:10.031]                             break
[13:37:10.031]                           }
[13:37:10.031]                         }
[13:37:10.031]                       }
[13:37:10.031]                       invisible(muffled)
[13:37:10.031]                     }
[13:37:10.031]                     muffleCondition(cond, pattern = "^muffle")
[13:37:10.031]                   }
[13:37:10.031]                 }
[13:37:10.031]             }
[13:37:10.031]         }))
[13:37:10.031]     }, error = function(ex) {
[13:37:10.031]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:10.031]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:10.031]                 ...future.rng), started = ...future.startTime, 
[13:37:10.031]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:10.031]             version = "1.8"), class = "FutureResult")
[13:37:10.031]     }, finally = {
[13:37:10.031]         if (!identical(...future.workdir, getwd())) 
[13:37:10.031]             setwd(...future.workdir)
[13:37:10.031]         {
[13:37:10.031]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:10.031]                 ...future.oldOptions$nwarnings <- NULL
[13:37:10.031]             }
[13:37:10.031]             base::options(...future.oldOptions)
[13:37:10.031]             if (.Platform$OS.type == "windows") {
[13:37:10.031]                 old_names <- names(...future.oldEnvVars)
[13:37:10.031]                 envs <- base::Sys.getenv()
[13:37:10.031]                 names <- names(envs)
[13:37:10.031]                 common <- intersect(names, old_names)
[13:37:10.031]                 added <- setdiff(names, old_names)
[13:37:10.031]                 removed <- setdiff(old_names, names)
[13:37:10.031]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:10.031]                   envs[common]]
[13:37:10.031]                 NAMES <- toupper(changed)
[13:37:10.031]                 args <- list()
[13:37:10.031]                 for (kk in seq_along(NAMES)) {
[13:37:10.031]                   name <- changed[[kk]]
[13:37:10.031]                   NAME <- NAMES[[kk]]
[13:37:10.031]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:10.031]                     next
[13:37:10.031]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:10.031]                 }
[13:37:10.031]                 NAMES <- toupper(added)
[13:37:10.031]                 for (kk in seq_along(NAMES)) {
[13:37:10.031]                   name <- added[[kk]]
[13:37:10.031]                   NAME <- NAMES[[kk]]
[13:37:10.031]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:10.031]                     next
[13:37:10.031]                   args[[name]] <- ""
[13:37:10.031]                 }
[13:37:10.031]                 NAMES <- toupper(removed)
[13:37:10.031]                 for (kk in seq_along(NAMES)) {
[13:37:10.031]                   name <- removed[[kk]]
[13:37:10.031]                   NAME <- NAMES[[kk]]
[13:37:10.031]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:10.031]                     next
[13:37:10.031]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:10.031]                 }
[13:37:10.031]                 if (length(args) > 0) 
[13:37:10.031]                   base::do.call(base::Sys.setenv, args = args)
[13:37:10.031]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:10.031]             }
[13:37:10.031]             else {
[13:37:10.031]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:10.031]             }
[13:37:10.031]             {
[13:37:10.031]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:10.031]                   0L) {
[13:37:10.031]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:10.031]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:10.031]                   base::options(opts)
[13:37:10.031]                 }
[13:37:10.031]                 {
[13:37:10.031]                   {
[13:37:10.031]                     base::options(mc.cores = ...future.mc.cores.old)
[13:37:10.031]                     NULL
[13:37:10.031]                   }
[13:37:10.031]                   options(future.plan = NULL)
[13:37:10.031]                   if (is.na(NA_character_)) 
[13:37:10.031]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:10.031]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:10.031]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:10.031]                     .init = FALSE)
[13:37:10.031]                 }
[13:37:10.031]             }
[13:37:10.031]         }
[13:37:10.031]     })
[13:37:10.031]     if (TRUE) {
[13:37:10.031]         base::sink(type = "output", split = FALSE)
[13:37:10.031]         if (TRUE) {
[13:37:10.031]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:10.031]         }
[13:37:10.031]         else {
[13:37:10.031]             ...future.result["stdout"] <- base::list(NULL)
[13:37:10.031]         }
[13:37:10.031]         base::close(...future.stdout)
[13:37:10.031]         ...future.stdout <- NULL
[13:37:10.031]     }
[13:37:10.031]     ...future.result$conditions <- ...future.conditions
[13:37:10.031]     ...future.result$finished <- base::Sys.time()
[13:37:10.031]     ...future.result
[13:37:10.031] }
[13:37:10.088] Exporting 1 global objects (56 bytes) to cluster node #2 ...
[13:37:10.088] Exporting ‘ii’ (56 bytes) to cluster node #2 ...
[13:37:10.089] Exporting ‘ii’ (56 bytes) to cluster node #2 ... DONE
[13:37:10.089] Exporting 1 global objects (56 bytes) to cluster node #2 ... DONE
[13:37:10.090] MultisessionFuture started
 - Resolving 2 multisession futures
[13:37:10.090] result() for ClusterFuture ...
[13:37:10.090] receiveMessageFromWorker() for ClusterFuture ...
[13:37:10.091] - Validating connection of MultisessionFuture
[13:37:10.125] - received message: FutureResult
[13:37:10.125] - Received FutureResult
[13:37:10.125] - Erased future from FutureRegistry
[13:37:10.125] result() for ClusterFuture ...
[13:37:10.125] - result already collected: FutureResult
[13:37:10.125] result() for ClusterFuture ... done
[13:37:10.126] receiveMessageFromWorker() for ClusterFuture ... done
[13:37:10.126] result() for ClusterFuture ... done
[13:37:10.126] result() for ClusterFuture ...
[13:37:10.126] - result already collected: FutureResult
[13:37:10.126] result() for ClusterFuture ... done
[13:37:10.126] result() for ClusterFuture ...
[13:37:10.126] receiveMessageFromWorker() for ClusterFuture ...
[13:37:10.127] - Validating connection of MultisessionFuture
[13:37:10.127] - received message: FutureResult
[13:37:10.127] - Received FutureResult
[13:37:10.127] - Erased future from FutureRegistry
[13:37:10.127] result() for ClusterFuture ...
[13:37:10.127] - result already collected: FutureResult
[13:37:10.127] result() for ClusterFuture ... done
[13:37:10.128] receiveMessageFromWorker() for ClusterFuture ... done
[13:37:10.128] result() for ClusterFuture ... done
[13:37:10.128] result() for ClusterFuture ...
[13:37:10.128] - result already collected: FutureResult
[13:37:10.128] result() for ClusterFuture ... done
*** multisession() - workers inherit .libPaths()
[13:37:10.128] getGlobalsAndPackages() ...
[13:37:10.128] Searching for globals...
[13:37:10.129] - globals found: [1] ‘.libPaths’
[13:37:10.129] Searching for globals ... DONE
[13:37:10.129] Resolving globals: FALSE
[13:37:10.130] 
[13:37:10.130] 
[13:37:10.130] getGlobalsAndPackages() ... DONE
[13:37:10.130] run() for ‘Future’ ...
[13:37:10.130] - state: ‘created’
[13:37:10.131] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:37:10.131] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:37:10.131] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:37:10.131]   - Field: ‘label’
[13:37:10.131]   - Field: ‘local’
[13:37:10.132]   - Field: ‘owner’
[13:37:10.132]   - Field: ‘envir’
[13:37:10.132]   - Field: ‘packages’
[13:37:10.132]   - Field: ‘gc’
[13:37:10.132]   - Field: ‘conditions’
[13:37:10.132]   - Field: ‘expr’
[13:37:10.132]   - Field: ‘uuid’
[13:37:10.132]   - Field: ‘seed’
[13:37:10.132]   - Field: ‘version’
[13:37:10.133]   - Field: ‘result’
[13:37:10.133]   - Field: ‘asynchronous’
[13:37:10.133]   - Field: ‘calls’
[13:37:10.133]   - Field: ‘globals’
[13:37:10.133]   - Field: ‘stdout’
[13:37:10.133]   - Field: ‘earlySignal’
[13:37:10.133]   - Field: ‘lazy’
[13:37:10.133]   - Field: ‘state’
[13:37:10.134] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:37:10.134] - Launch lazy future ...
[13:37:10.134] Packages needed by the future expression (n = 0): <none>
[13:37:10.134] Packages needed by future strategies (n = 0): <none>
[13:37:10.135] {
[13:37:10.135]     {
[13:37:10.135]         {
[13:37:10.135]             ...future.startTime <- base::Sys.time()
[13:37:10.135]             {
[13:37:10.135]                 {
[13:37:10.135]                   {
[13:37:10.135]                     base::local({
[13:37:10.135]                       has_future <- base::requireNamespace("future", 
[13:37:10.135]                         quietly = TRUE)
[13:37:10.135]                       if (has_future) {
[13:37:10.135]                         ns <- base::getNamespace("future")
[13:37:10.135]                         version <- ns[[".package"]][["version"]]
[13:37:10.135]                         if (is.null(version)) 
[13:37:10.135]                           version <- utils::packageVersion("future")
[13:37:10.135]                       }
[13:37:10.135]                       else {
[13:37:10.135]                         version <- NULL
[13:37:10.135]                       }
[13:37:10.135]                       if (!has_future || version < "1.8.0") {
[13:37:10.135]                         info <- base::c(r_version = base::gsub("R version ", 
[13:37:10.135]                           "", base::R.version$version.string), 
[13:37:10.135]                           platform = base::sprintf("%s (%s-bit)", 
[13:37:10.135]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:10.135]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:10.135]                             "release", "version")], collapse = " "), 
[13:37:10.135]                           hostname = base::Sys.info()[["nodename"]])
[13:37:10.135]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:37:10.135]                           info)
[13:37:10.135]                         info <- base::paste(info, collapse = "; ")
[13:37:10.135]                         if (!has_future) {
[13:37:10.135]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:10.135]                             info)
[13:37:10.135]                         }
[13:37:10.135]                         else {
[13:37:10.135]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:10.135]                             info, version)
[13:37:10.135]                         }
[13:37:10.135]                         base::stop(msg)
[13:37:10.135]                       }
[13:37:10.135]                     })
[13:37:10.135]                   }
[13:37:10.135]                   ...future.strategy.old <- future::plan("list")
[13:37:10.135]                   options(future.plan = NULL)
[13:37:10.135]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:10.135]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:10.135]                 }
[13:37:10.135]                 ...future.workdir <- getwd()
[13:37:10.135]             }
[13:37:10.135]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:10.135]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:10.135]         }
[13:37:10.135]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:10.135]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:10.135]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:10.135]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:10.135]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:10.135]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:10.135]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:10.135]             base::names(...future.oldOptions))
[13:37:10.135]     }
[13:37:10.135]     if (FALSE) {
[13:37:10.135]     }
[13:37:10.135]     else {
[13:37:10.135]         if (TRUE) {
[13:37:10.135]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:10.135]                 open = "w")
[13:37:10.135]         }
[13:37:10.135]         else {
[13:37:10.135]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:10.135]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:10.135]         }
[13:37:10.135]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:10.135]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:10.135]             base::sink(type = "output", split = FALSE)
[13:37:10.135]             base::close(...future.stdout)
[13:37:10.135]         }, add = TRUE)
[13:37:10.135]     }
[13:37:10.135]     ...future.frame <- base::sys.nframe()
[13:37:10.135]     ...future.conditions <- base::list()
[13:37:10.135]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:10.135]     if (FALSE) {
[13:37:10.135]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:10.135]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:10.135]     }
[13:37:10.135]     ...future.result <- base::tryCatch({
[13:37:10.135]         base::withCallingHandlers({
[13:37:10.135]             ...future.value <- base::withVisible(base::local(.libPaths()))
[13:37:10.135]             future::FutureResult(value = ...future.value$value, 
[13:37:10.135]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:10.135]                   ...future.rng), globalenv = if (FALSE) 
[13:37:10.135]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:10.135]                     ...future.globalenv.names))
[13:37:10.135]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:10.135]         }, condition = base::local({
[13:37:10.135]             c <- base::c
[13:37:10.135]             inherits <- base::inherits
[13:37:10.135]             invokeRestart <- base::invokeRestart
[13:37:10.135]             length <- base::length
[13:37:10.135]             list <- base::list
[13:37:10.135]             seq.int <- base::seq.int
[13:37:10.135]             signalCondition <- base::signalCondition
[13:37:10.135]             sys.calls <- base::sys.calls
[13:37:10.135]             `[[` <- base::`[[`
[13:37:10.135]             `+` <- base::`+`
[13:37:10.135]             `<<-` <- base::`<<-`
[13:37:10.135]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:10.135]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:10.135]                   3L)]
[13:37:10.135]             }
[13:37:10.135]             function(cond) {
[13:37:10.135]                 is_error <- inherits(cond, "error")
[13:37:10.135]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:10.135]                   NULL)
[13:37:10.135]                 if (is_error) {
[13:37:10.135]                   sessionInformation <- function() {
[13:37:10.135]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:10.135]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:10.135]                       search = base::search(), system = base::Sys.info())
[13:37:10.135]                   }
[13:37:10.135]                   ...future.conditions[[length(...future.conditions) + 
[13:37:10.135]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:10.135]                     cond$call), session = sessionInformation(), 
[13:37:10.135]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:10.135]                   signalCondition(cond)
[13:37:10.135]                 }
[13:37:10.135]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:10.135]                 "immediateCondition"))) {
[13:37:10.135]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:10.135]                   ...future.conditions[[length(...future.conditions) + 
[13:37:10.135]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:10.135]                   if (TRUE && !signal) {
[13:37:10.135]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:10.135]                     {
[13:37:10.135]                       inherits <- base::inherits
[13:37:10.135]                       invokeRestart <- base::invokeRestart
[13:37:10.135]                       is.null <- base::is.null
[13:37:10.135]                       muffled <- FALSE
[13:37:10.135]                       if (inherits(cond, "message")) {
[13:37:10.135]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:10.135]                         if (muffled) 
[13:37:10.135]                           invokeRestart("muffleMessage")
[13:37:10.135]                       }
[13:37:10.135]                       else if (inherits(cond, "warning")) {
[13:37:10.135]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:10.135]                         if (muffled) 
[13:37:10.135]                           invokeRestart("muffleWarning")
[13:37:10.135]                       }
[13:37:10.135]                       else if (inherits(cond, "condition")) {
[13:37:10.135]                         if (!is.null(pattern)) {
[13:37:10.135]                           computeRestarts <- base::computeRestarts
[13:37:10.135]                           grepl <- base::grepl
[13:37:10.135]                           restarts <- computeRestarts(cond)
[13:37:10.135]                           for (restart in restarts) {
[13:37:10.135]                             name <- restart$name
[13:37:10.135]                             if (is.null(name)) 
[13:37:10.135]                               next
[13:37:10.135]                             if (!grepl(pattern, name)) 
[13:37:10.135]                               next
[13:37:10.135]                             invokeRestart(restart)
[13:37:10.135]                             muffled <- TRUE
[13:37:10.135]                             break
[13:37:10.135]                           }
[13:37:10.135]                         }
[13:37:10.135]                       }
[13:37:10.135]                       invisible(muffled)
[13:37:10.135]                     }
[13:37:10.135]                     muffleCondition(cond, pattern = "^muffle")
[13:37:10.135]                   }
[13:37:10.135]                 }
[13:37:10.135]                 else {
[13:37:10.135]                   if (TRUE) {
[13:37:10.135]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:10.135]                     {
[13:37:10.135]                       inherits <- base::inherits
[13:37:10.135]                       invokeRestart <- base::invokeRestart
[13:37:10.135]                       is.null <- base::is.null
[13:37:10.135]                       muffled <- FALSE
[13:37:10.135]                       if (inherits(cond, "message")) {
[13:37:10.135]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:10.135]                         if (muffled) 
[13:37:10.135]                           invokeRestart("muffleMessage")
[13:37:10.135]                       }
[13:37:10.135]                       else if (inherits(cond, "warning")) {
[13:37:10.135]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:10.135]                         if (muffled) 
[13:37:10.135]                           invokeRestart("muffleWarning")
[13:37:10.135]                       }
[13:37:10.135]                       else if (inherits(cond, "condition")) {
[13:37:10.135]                         if (!is.null(pattern)) {
[13:37:10.135]                           computeRestarts <- base::computeRestarts
[13:37:10.135]                           grepl <- base::grepl
[13:37:10.135]                           restarts <- computeRestarts(cond)
[13:37:10.135]                           for (restart in restarts) {
[13:37:10.135]                             name <- restart$name
[13:37:10.135]                             if (is.null(name)) 
[13:37:10.135]                               next
[13:37:10.135]                             if (!grepl(pattern, name)) 
[13:37:10.135]                               next
[13:37:10.135]                             invokeRestart(restart)
[13:37:10.135]                             muffled <- TRUE
[13:37:10.135]                             break
[13:37:10.135]                           }
[13:37:10.135]                         }
[13:37:10.135]                       }
[13:37:10.135]                       invisible(muffled)
[13:37:10.135]                     }
[13:37:10.135]                     muffleCondition(cond, pattern = "^muffle")
[13:37:10.135]                   }
[13:37:10.135]                 }
[13:37:10.135]             }
[13:37:10.135]         }))
[13:37:10.135]     }, error = function(ex) {
[13:37:10.135]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:10.135]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:10.135]                 ...future.rng), started = ...future.startTime, 
[13:37:10.135]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:10.135]             version = "1.8"), class = "FutureResult")
[13:37:10.135]     }, finally = {
[13:37:10.135]         if (!identical(...future.workdir, getwd())) 
[13:37:10.135]             setwd(...future.workdir)
[13:37:10.135]         {
[13:37:10.135]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:10.135]                 ...future.oldOptions$nwarnings <- NULL
[13:37:10.135]             }
[13:37:10.135]             base::options(...future.oldOptions)
[13:37:10.135]             if (.Platform$OS.type == "windows") {
[13:37:10.135]                 old_names <- names(...future.oldEnvVars)
[13:37:10.135]                 envs <- base::Sys.getenv()
[13:37:10.135]                 names <- names(envs)
[13:37:10.135]                 common <- intersect(names, old_names)
[13:37:10.135]                 added <- setdiff(names, old_names)
[13:37:10.135]                 removed <- setdiff(old_names, names)
[13:37:10.135]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:10.135]                   envs[common]]
[13:37:10.135]                 NAMES <- toupper(changed)
[13:37:10.135]                 args <- list()
[13:37:10.135]                 for (kk in seq_along(NAMES)) {
[13:37:10.135]                   name <- changed[[kk]]
[13:37:10.135]                   NAME <- NAMES[[kk]]
[13:37:10.135]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:10.135]                     next
[13:37:10.135]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:10.135]                 }
[13:37:10.135]                 NAMES <- toupper(added)
[13:37:10.135]                 for (kk in seq_along(NAMES)) {
[13:37:10.135]                   name <- added[[kk]]
[13:37:10.135]                   NAME <- NAMES[[kk]]
[13:37:10.135]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:10.135]                     next
[13:37:10.135]                   args[[name]] <- ""
[13:37:10.135]                 }
[13:37:10.135]                 NAMES <- toupper(removed)
[13:37:10.135]                 for (kk in seq_along(NAMES)) {
[13:37:10.135]                   name <- removed[[kk]]
[13:37:10.135]                   NAME <- NAMES[[kk]]
[13:37:10.135]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:10.135]                     next
[13:37:10.135]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:10.135]                 }
[13:37:10.135]                 if (length(args) > 0) 
[13:37:10.135]                   base::do.call(base::Sys.setenv, args = args)
[13:37:10.135]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:10.135]             }
[13:37:10.135]             else {
[13:37:10.135]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:10.135]             }
[13:37:10.135]             {
[13:37:10.135]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:10.135]                   0L) {
[13:37:10.135]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:10.135]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:10.135]                   base::options(opts)
[13:37:10.135]                 }
[13:37:10.135]                 {
[13:37:10.135]                   {
[13:37:10.135]                     NULL
[13:37:10.135]                     RNGkind("Mersenne-Twister")
[13:37:10.135]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:37:10.135]                       inherits = FALSE)
[13:37:10.135]                   }
[13:37:10.135]                   options(future.plan = NULL)
[13:37:10.135]                   if (is.na(NA_character_)) 
[13:37:10.135]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:10.135]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:10.135]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:10.135]                     .init = FALSE)
[13:37:10.135]                 }
[13:37:10.135]             }
[13:37:10.135]         }
[13:37:10.135]     })
[13:37:10.135]     if (TRUE) {
[13:37:10.135]         base::sink(type = "output", split = FALSE)
[13:37:10.135]         if (TRUE) {
[13:37:10.135]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:10.135]         }
[13:37:10.135]         else {
[13:37:10.135]             ...future.result["stdout"] <- base::list(NULL)
[13:37:10.135]         }
[13:37:10.135]         base::close(...future.stdout)
[13:37:10.135]         ...future.stdout <- NULL
[13:37:10.135]     }
[13:37:10.135]     ...future.result$conditions <- ...future.conditions
[13:37:10.135]     ...future.result$finished <- base::Sys.time()
[13:37:10.135]     ...future.result
[13:37:10.135] }
[13:37:10.139] plan(): Setting new future strategy stack:
[13:37:10.139] List of future strategies:
[13:37:10.139] 1. sequential:
[13:37:10.139]    - args: function (..., envir = parent.frame())
[13:37:10.139]    - tweaked: FALSE
[13:37:10.139]    - call: NULL
[13:37:10.140] plan(): nbrOfWorkers() = 1
[13:37:10.141] plan(): Setting new future strategy stack:
[13:37:10.141] List of future strategies:
[13:37:10.141] 1. sequential:
[13:37:10.141]    - args: function (..., envir = parent.frame())
[13:37:10.141]    - tweaked: FALSE
[13:37:10.141]    - call: future::plan("sequential")
[13:37:10.141] plan(): nbrOfWorkers() = 1
[13:37:10.141] SequentialFuture started (and completed)
[13:37:10.141] - Launch lazy future ... done
[13:37:10.141] run() for ‘SequentialFuture’ ... done
List of 2
 $ main   : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
 $ workers: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
*** multisession() and errors
[13:37:10.146] getGlobalsAndPackages() ...
[13:37:10.146] 
[13:37:10.146] - globals: [0] <none>
[13:37:10.146] getGlobalsAndPackages() ... DONE
[13:37:10.157] Packages needed by the future expression (n = 0): <none>
[13:37:10.157] Packages needed by future strategies (n = 0): <none>
[13:37:10.157] {
[13:37:10.157]     {
[13:37:10.157]         {
[13:37:10.157]             ...future.startTime <- base::Sys.time()
[13:37:10.157]             {
[13:37:10.157]                 {
[13:37:10.157]                   {
[13:37:10.157]                     {
[13:37:10.157]                       base::local({
[13:37:10.157]                         has_future <- base::requireNamespace("future", 
[13:37:10.157]                           quietly = TRUE)
[13:37:10.157]                         if (has_future) {
[13:37:10.157]                           ns <- base::getNamespace("future")
[13:37:10.157]                           version <- ns[[".package"]][["version"]]
[13:37:10.157]                           if (is.null(version)) 
[13:37:10.157]                             version <- utils::packageVersion("future")
[13:37:10.157]                         }
[13:37:10.157]                         else {
[13:37:10.157]                           version <- NULL
[13:37:10.157]                         }
[13:37:10.157]                         if (!has_future || version < "1.8.0") {
[13:37:10.157]                           info <- base::c(r_version = base::gsub("R version ", 
[13:37:10.157]                             "", base::R.version$version.string), 
[13:37:10.157]                             platform = base::sprintf("%s (%s-bit)", 
[13:37:10.157]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:10.157]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:10.157]                               "release", "version")], collapse = " "), 
[13:37:10.157]                             hostname = base::Sys.info()[["nodename"]])
[13:37:10.157]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:37:10.157]                             info)
[13:37:10.157]                           info <- base::paste(info, collapse = "; ")
[13:37:10.157]                           if (!has_future) {
[13:37:10.157]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:10.157]                               info)
[13:37:10.157]                           }
[13:37:10.157]                           else {
[13:37:10.157]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:10.157]                               info, version)
[13:37:10.157]                           }
[13:37:10.157]                           base::stop(msg)
[13:37:10.157]                         }
[13:37:10.157]                       })
[13:37:10.157]                     }
[13:37:10.157]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:37:10.157]                     base::options(mc.cores = 1L)
[13:37:10.157]                   }
[13:37:10.157]                   ...future.strategy.old <- future::plan("list")
[13:37:10.157]                   options(future.plan = NULL)
[13:37:10.157]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:10.157]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:10.157]                 }
[13:37:10.157]                 ...future.workdir <- getwd()
[13:37:10.157]             }
[13:37:10.157]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:10.157]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:10.157]         }
[13:37:10.157]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:10.157]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:10.157]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:10.157]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:10.157]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:10.157]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:10.157]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:10.157]             base::names(...future.oldOptions))
[13:37:10.157]     }
[13:37:10.157]     if (FALSE) {
[13:37:10.157]     }
[13:37:10.157]     else {
[13:37:10.157]         if (TRUE) {
[13:37:10.157]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:10.157]                 open = "w")
[13:37:10.157]         }
[13:37:10.157]         else {
[13:37:10.157]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:10.157]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:10.157]         }
[13:37:10.157]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:10.157]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:10.157]             base::sink(type = "output", split = FALSE)
[13:37:10.157]             base::close(...future.stdout)
[13:37:10.157]         }, add = TRUE)
[13:37:10.157]     }
[13:37:10.157]     ...future.frame <- base::sys.nframe()
[13:37:10.157]     ...future.conditions <- base::list()
[13:37:10.157]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:10.157]     if (FALSE) {
[13:37:10.157]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:10.157]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:10.157]     }
[13:37:10.157]     ...future.result <- base::tryCatch({
[13:37:10.157]         base::withCallingHandlers({
[13:37:10.157]             ...future.value <- base::withVisible(base::local({
[13:37:10.157]                 ...future.makeSendCondition <- base::local({
[13:37:10.157]                   sendCondition <- NULL
[13:37:10.157]                   function(frame = 1L) {
[13:37:10.157]                     if (is.function(sendCondition)) 
[13:37:10.157]                       return(sendCondition)
[13:37:10.157]                     ns <- getNamespace("parallel")
[13:37:10.157]                     if (exists("sendData", mode = "function", 
[13:37:10.157]                       envir = ns)) {
[13:37:10.157]                       parallel_sendData <- get("sendData", mode = "function", 
[13:37:10.157]                         envir = ns)
[13:37:10.157]                       envir <- sys.frame(frame)
[13:37:10.157]                       master <- NULL
[13:37:10.157]                       while (!identical(envir, .GlobalEnv) && 
[13:37:10.157]                         !identical(envir, emptyenv())) {
[13:37:10.157]                         if (exists("master", mode = "list", envir = envir, 
[13:37:10.157]                           inherits = FALSE)) {
[13:37:10.157]                           master <- get("master", mode = "list", 
[13:37:10.157]                             envir = envir, inherits = FALSE)
[13:37:10.157]                           if (inherits(master, c("SOCKnode", 
[13:37:10.157]                             "SOCK0node"))) {
[13:37:10.157]                             sendCondition <<- function(cond) {
[13:37:10.157]                               data <- list(type = "VALUE", value = cond, 
[13:37:10.157]                                 success = TRUE)
[13:37:10.157]                               parallel_sendData(master, data)
[13:37:10.157]                             }
[13:37:10.157]                             return(sendCondition)
[13:37:10.157]                           }
[13:37:10.157]                         }
[13:37:10.157]                         frame <- frame + 1L
[13:37:10.157]                         envir <- sys.frame(frame)
[13:37:10.157]                       }
[13:37:10.157]                     }
[13:37:10.157]                     sendCondition <<- function(cond) NULL
[13:37:10.157]                   }
[13:37:10.157]                 })
[13:37:10.157]                 withCallingHandlers({
[13:37:10.157]                   {
[13:37:10.157]                     stop("Whoops!")
[13:37:10.157]                     1
[13:37:10.157]                   }
[13:37:10.157]                 }, immediateCondition = function(cond) {
[13:37:10.157]                   sendCondition <- ...future.makeSendCondition()
[13:37:10.157]                   sendCondition(cond)
[13:37:10.157]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:10.157]                   {
[13:37:10.157]                     inherits <- base::inherits
[13:37:10.157]                     invokeRestart <- base::invokeRestart
[13:37:10.157]                     is.null <- base::is.null
[13:37:10.157]                     muffled <- FALSE
[13:37:10.157]                     if (inherits(cond, "message")) {
[13:37:10.157]                       muffled <- grepl(pattern, "muffleMessage")
[13:37:10.157]                       if (muffled) 
[13:37:10.157]                         invokeRestart("muffleMessage")
[13:37:10.157]                     }
[13:37:10.157]                     else if (inherits(cond, "warning")) {
[13:37:10.157]                       muffled <- grepl(pattern, "muffleWarning")
[13:37:10.157]                       if (muffled) 
[13:37:10.157]                         invokeRestart("muffleWarning")
[13:37:10.157]                     }
[13:37:10.157]                     else if (inherits(cond, "condition")) {
[13:37:10.157]                       if (!is.null(pattern)) {
[13:37:10.157]                         computeRestarts <- base::computeRestarts
[13:37:10.157]                         grepl <- base::grepl
[13:37:10.157]                         restarts <- computeRestarts(cond)
[13:37:10.157]                         for (restart in restarts) {
[13:37:10.157]                           name <- restart$name
[13:37:10.157]                           if (is.null(name)) 
[13:37:10.157]                             next
[13:37:10.157]                           if (!grepl(pattern, name)) 
[13:37:10.157]                             next
[13:37:10.157]                           invokeRestart(restart)
[13:37:10.157]                           muffled <- TRUE
[13:37:10.157]                           break
[13:37:10.157]                         }
[13:37:10.157]                       }
[13:37:10.157]                     }
[13:37:10.157]                     invisible(muffled)
[13:37:10.157]                   }
[13:37:10.157]                   muffleCondition(cond)
[13:37:10.157]                 })
[13:37:10.157]             }))
[13:37:10.157]             future::FutureResult(value = ...future.value$value, 
[13:37:10.157]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:10.157]                   ...future.rng), globalenv = if (FALSE) 
[13:37:10.157]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:10.157]                     ...future.globalenv.names))
[13:37:10.157]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:10.157]         }, condition = base::local({
[13:37:10.157]             c <- base::c
[13:37:10.157]             inherits <- base::inherits
[13:37:10.157]             invokeRestart <- base::invokeRestart
[13:37:10.157]             length <- base::length
[13:37:10.157]             list <- base::list
[13:37:10.157]             seq.int <- base::seq.int
[13:37:10.157]             signalCondition <- base::signalCondition
[13:37:10.157]             sys.calls <- base::sys.calls
[13:37:10.157]             `[[` <- base::`[[`
[13:37:10.157]             `+` <- base::`+`
[13:37:10.157]             `<<-` <- base::`<<-`
[13:37:10.157]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:10.157]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:10.157]                   3L)]
[13:37:10.157]             }
[13:37:10.157]             function(cond) {
[13:37:10.157]                 is_error <- inherits(cond, "error")
[13:37:10.157]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:10.157]                   NULL)
[13:37:10.157]                 if (is_error) {
[13:37:10.157]                   sessionInformation <- function() {
[13:37:10.157]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:10.157]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:10.157]                       search = base::search(), system = base::Sys.info())
[13:37:10.157]                   }
[13:37:10.157]                   ...future.conditions[[length(...future.conditions) + 
[13:37:10.157]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:10.157]                     cond$call), session = sessionInformation(), 
[13:37:10.157]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:10.157]                   signalCondition(cond)
[13:37:10.157]                 }
[13:37:10.157]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:10.157]                 "immediateCondition"))) {
[13:37:10.157]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:10.157]                   ...future.conditions[[length(...future.conditions) + 
[13:37:10.157]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:10.157]                   if (TRUE && !signal) {
[13:37:10.157]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:10.157]                     {
[13:37:10.157]                       inherits <- base::inherits
[13:37:10.157]                       invokeRestart <- base::invokeRestart
[13:37:10.157]                       is.null <- base::is.null
[13:37:10.157]                       muffled <- FALSE
[13:37:10.157]                       if (inherits(cond, "message")) {
[13:37:10.157]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:10.157]                         if (muffled) 
[13:37:10.157]                           invokeRestart("muffleMessage")
[13:37:10.157]                       }
[13:37:10.157]                       else if (inherits(cond, "warning")) {
[13:37:10.157]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:10.157]                         if (muffled) 
[13:37:10.157]                           invokeRestart("muffleWarning")
[13:37:10.157]                       }
[13:37:10.157]                       else if (inherits(cond, "condition")) {
[13:37:10.157]                         if (!is.null(pattern)) {
[13:37:10.157]                           computeRestarts <- base::computeRestarts
[13:37:10.157]                           grepl <- base::grepl
[13:37:10.157]                           restarts <- computeRestarts(cond)
[13:37:10.157]                           for (restart in restarts) {
[13:37:10.157]                             name <- restart$name
[13:37:10.157]                             if (is.null(name)) 
[13:37:10.157]                               next
[13:37:10.157]                             if (!grepl(pattern, name)) 
[13:37:10.157]                               next
[13:37:10.157]                             invokeRestart(restart)
[13:37:10.157]                             muffled <- TRUE
[13:37:10.157]                             break
[13:37:10.157]                           }
[13:37:10.157]                         }
[13:37:10.157]                       }
[13:37:10.157]                       invisible(muffled)
[13:37:10.157]                     }
[13:37:10.157]                     muffleCondition(cond, pattern = "^muffle")
[13:37:10.157]                   }
[13:37:10.157]                 }
[13:37:10.157]                 else {
[13:37:10.157]                   if (TRUE) {
[13:37:10.157]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:10.157]                     {
[13:37:10.157]                       inherits <- base::inherits
[13:37:10.157]                       invokeRestart <- base::invokeRestart
[13:37:10.157]                       is.null <- base::is.null
[13:37:10.157]                       muffled <- FALSE
[13:37:10.157]                       if (inherits(cond, "message")) {
[13:37:10.157]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:10.157]                         if (muffled) 
[13:37:10.157]                           invokeRestart("muffleMessage")
[13:37:10.157]                       }
[13:37:10.157]                       else if (inherits(cond, "warning")) {
[13:37:10.157]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:10.157]                         if (muffled) 
[13:37:10.157]                           invokeRestart("muffleWarning")
[13:37:10.157]                       }
[13:37:10.157]                       else if (inherits(cond, "condition")) {
[13:37:10.157]                         if (!is.null(pattern)) {
[13:37:10.157]                           computeRestarts <- base::computeRestarts
[13:37:10.157]                           grepl <- base::grepl
[13:37:10.157]                           restarts <- computeRestarts(cond)
[13:37:10.157]                           for (restart in restarts) {
[13:37:10.157]                             name <- restart$name
[13:37:10.157]                             if (is.null(name)) 
[13:37:10.157]                               next
[13:37:10.157]                             if (!grepl(pattern, name)) 
[13:37:10.157]                               next
[13:37:10.157]                             invokeRestart(restart)
[13:37:10.157]                             muffled <- TRUE
[13:37:10.157]                             break
[13:37:10.157]                           }
[13:37:10.157]                         }
[13:37:10.157]                       }
[13:37:10.157]                       invisible(muffled)
[13:37:10.157]                     }
[13:37:10.157]                     muffleCondition(cond, pattern = "^muffle")
[13:37:10.157]                   }
[13:37:10.157]                 }
[13:37:10.157]             }
[13:37:10.157]         }))
[13:37:10.157]     }, error = function(ex) {
[13:37:10.157]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:10.157]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:10.157]                 ...future.rng), started = ...future.startTime, 
[13:37:10.157]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:10.157]             version = "1.8"), class = "FutureResult")
[13:37:10.157]     }, finally = {
[13:37:10.157]         if (!identical(...future.workdir, getwd())) 
[13:37:10.157]             setwd(...future.workdir)
[13:37:10.157]         {
[13:37:10.157]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:10.157]                 ...future.oldOptions$nwarnings <- NULL
[13:37:10.157]             }
[13:37:10.157]             base::options(...future.oldOptions)
[13:37:10.157]             if (.Platform$OS.type == "windows") {
[13:37:10.157]                 old_names <- names(...future.oldEnvVars)
[13:37:10.157]                 envs <- base::Sys.getenv()
[13:37:10.157]                 names <- names(envs)
[13:37:10.157]                 common <- intersect(names, old_names)
[13:37:10.157]                 added <- setdiff(names, old_names)
[13:37:10.157]                 removed <- setdiff(old_names, names)
[13:37:10.157]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:10.157]                   envs[common]]
[13:37:10.157]                 NAMES <- toupper(changed)
[13:37:10.157]                 args <- list()
[13:37:10.157]                 for (kk in seq_along(NAMES)) {
[13:37:10.157]                   name <- changed[[kk]]
[13:37:10.157]                   NAME <- NAMES[[kk]]
[13:37:10.157]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:10.157]                     next
[13:37:10.157]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:10.157]                 }
[13:37:10.157]                 NAMES <- toupper(added)
[13:37:10.157]                 for (kk in seq_along(NAMES)) {
[13:37:10.157]                   name <- added[[kk]]
[13:37:10.157]                   NAME <- NAMES[[kk]]
[13:37:10.157]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:10.157]                     next
[13:37:10.157]                   args[[name]] <- ""
[13:37:10.157]                 }
[13:37:10.157]                 NAMES <- toupper(removed)
[13:37:10.157]                 for (kk in seq_along(NAMES)) {
[13:37:10.157]                   name <- removed[[kk]]
[13:37:10.157]                   NAME <- NAMES[[kk]]
[13:37:10.157]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:10.157]                     next
[13:37:10.157]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:10.157]                 }
[13:37:10.157]                 if (length(args) > 0) 
[13:37:10.157]                   base::do.call(base::Sys.setenv, args = args)
[13:37:10.157]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:10.157]             }
[13:37:10.157]             else {
[13:37:10.157]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:10.157]             }
[13:37:10.157]             {
[13:37:10.157]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:10.157]                   0L) {
[13:37:10.157]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:10.157]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:10.157]                   base::options(opts)
[13:37:10.157]                 }
[13:37:10.157]                 {
[13:37:10.157]                   {
[13:37:10.157]                     base::options(mc.cores = ...future.mc.cores.old)
[13:37:10.157]                     NULL
[13:37:10.157]                   }
[13:37:10.157]                   options(future.plan = NULL)
[13:37:10.157]                   if (is.na(NA_character_)) 
[13:37:10.157]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:10.157]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:10.157]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:10.157]                     .init = FALSE)
[13:37:10.157]                 }
[13:37:10.157]             }
[13:37:10.157]         }
[13:37:10.157]     })
[13:37:10.157]     if (TRUE) {
[13:37:10.157]         base::sink(type = "output", split = FALSE)
[13:37:10.157]         if (TRUE) {
[13:37:10.157]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:10.157]         }
[13:37:10.157]         else {
[13:37:10.157]             ...future.result["stdout"] <- base::list(NULL)
[13:37:10.157]         }
[13:37:10.157]         base::close(...future.stdout)
[13:37:10.157]         ...future.stdout <- NULL
[13:37:10.157]     }
[13:37:10.157]     ...future.result$conditions <- ...future.conditions
[13:37:10.157]     ...future.result$finished <- base::Sys.time()
[13:37:10.157]     ...future.result
[13:37:10.157] }
[13:37:10.160] MultisessionFuture started
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    stop("Whoops!")
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[13:37:10.163] receiveMessageFromWorker() for ClusterFuture ...
[13:37:10.163] - Validating connection of MultisessionFuture
[13:37:10.163] - received message: FutureResult
[13:37:10.163] - Received FutureResult
[13:37:10.163] - Erased future from FutureRegistry
[13:37:10.163] result() for ClusterFuture ...
[13:37:10.163] - result already collected: FutureResult
[13:37:10.164] result() for ClusterFuture ... done
[13:37:10.164] signalConditions() ...
[13:37:10.164]  - include = ‘immediateCondition’
[13:37:10.164]  - exclude = 
[13:37:10.164]  - resignal = FALSE
[13:37:10.164]  - Number of conditions: 1
[13:37:10.164] signalConditions() ... done
[13:37:10.164] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 1c81bec4-3232-89a6-5464-8e86a1a5c510
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:37:10.164] result() for ClusterFuture ...
[13:37:10.164] - result already collected: FutureResult
[13:37:10.164] result() for ClusterFuture ... done
[13:37:10.165] result() for ClusterFuture ...
[13:37:10.165] - result already collected: FutureResult
[13:37:10.165] result() for ClusterFuture ... done
[13:37:10.165] signalConditions() ...
[13:37:10.165]  - include = ‘immediateCondition’
[13:37:10.165]  - exclude = 
[13:37:10.165]  - resignal = FALSE
[13:37:10.165]  - Number of conditions: 1
[13:37:10.165] signalConditions() ... done
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    sendCondition <- ...future.makeSendCondition()    sendCondition(cond)    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[13:37:10.166] result() for ClusterFuture ...
[13:37:10.166] - result already collected: FutureResult
[13:37:10.166] result() for ClusterFuture ... done
[13:37:10.166] result() for ClusterFuture ...
[13:37:10.166] - result already collected: FutureResult
[13:37:10.166] result() for ClusterFuture ... done
[13:37:10.166] signalConditions() ...
[13:37:10.166]  - include = ‘immediateCondition’
[13:37:10.166]  - exclude = 
[13:37:10.166]  - resignal = FALSE
[13:37:10.167]  - Number of conditions: 1
[13:37:10.167] signalConditions() ... done
[13:37:10.167] Future state: ‘finished’
[13:37:10.167] result() for ClusterFuture ...
[13:37:10.167] - result already collected: FutureResult
[13:37:10.167] result() for ClusterFuture ... done
[13:37:10.167] signalConditions() ...
[13:37:10.167]  - include = ‘condition’
[13:37:10.167]  - exclude = ‘immediateCondition’
[13:37:10.167]  - resignal = TRUE
[13:37:10.167]  - Number of conditions: 1
[13:37:10.168]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[13:37:10.168] signalConditions() ... done
[1] "Error in withCallingHandlers({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    sendCondition <- ...future.makeSendCondition()    sendCondition(cond)    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[13:37:10.168] result() for ClusterFuture ...
[13:37:10.168] - result already collected: FutureResult
[13:37:10.168] result() for ClusterFuture ... done
[13:37:10.168] result() for ClusterFuture ...
[13:37:10.169] - result already collected: FutureResult
[13:37:10.169] result() for ClusterFuture ... done
[13:37:10.169] signalConditions() ...
[13:37:10.169]  - include = ‘immediateCondition’
[13:37:10.169]  - exclude = 
[13:37:10.169]  - resignal = FALSE
[13:37:10.169]  - Number of conditions: 1
[13:37:10.169] signalConditions() ... done
[13:37:10.169] Future state: ‘finished’
[13:37:10.169] result() for ClusterFuture ...
[13:37:10.169] - result already collected: FutureResult
[13:37:10.169] result() for ClusterFuture ... done
[13:37:10.170] signalConditions() ...
[13:37:10.170]  - include = ‘condition’
[13:37:10.170]  - exclude = ‘immediateCondition’
[13:37:10.170]  - resignal = TRUE
[13:37:10.170]  - Number of conditions: 1
[13:37:10.170]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[13:37:10.170] signalConditions() ... done
[1] "Error in withCallingHandlers({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    sendCondition <- ...future.makeSendCondition()    sendCondition(cond)    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[13:37:10.174] getGlobalsAndPackages() ...
[13:37:10.174] 
[13:37:10.174] - globals: [0] <none>
[13:37:10.174] getGlobalsAndPackages() ... DONE
[13:37:10.184] Packages needed by the future expression (n = 0): <none>
[13:37:10.184] Packages needed by future strategies (n = 0): <none>
[13:37:10.185] {
[13:37:10.185]     {
[13:37:10.185]         {
[13:37:10.185]             ...future.startTime <- base::Sys.time()
[13:37:10.185]             {
[13:37:10.185]                 {
[13:37:10.185]                   {
[13:37:10.185]                     {
[13:37:10.185]                       base::local({
[13:37:10.185]                         has_future <- base::requireNamespace("future", 
[13:37:10.185]                           quietly = TRUE)
[13:37:10.185]                         if (has_future) {
[13:37:10.185]                           ns <- base::getNamespace("future")
[13:37:10.185]                           version <- ns[[".package"]][["version"]]
[13:37:10.185]                           if (is.null(version)) 
[13:37:10.185]                             version <- utils::packageVersion("future")
[13:37:10.185]                         }
[13:37:10.185]                         else {
[13:37:10.185]                           version <- NULL
[13:37:10.185]                         }
[13:37:10.185]                         if (!has_future || version < "1.8.0") {
[13:37:10.185]                           info <- base::c(r_version = base::gsub("R version ", 
[13:37:10.185]                             "", base::R.version$version.string), 
[13:37:10.185]                             platform = base::sprintf("%s (%s-bit)", 
[13:37:10.185]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:10.185]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:10.185]                               "release", "version")], collapse = " "), 
[13:37:10.185]                             hostname = base::Sys.info()[["nodename"]])
[13:37:10.185]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:37:10.185]                             info)
[13:37:10.185]                           info <- base::paste(info, collapse = "; ")
[13:37:10.185]                           if (!has_future) {
[13:37:10.185]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:10.185]                               info)
[13:37:10.185]                           }
[13:37:10.185]                           else {
[13:37:10.185]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:10.185]                               info, version)
[13:37:10.185]                           }
[13:37:10.185]                           base::stop(msg)
[13:37:10.185]                         }
[13:37:10.185]                       })
[13:37:10.185]                     }
[13:37:10.185]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:37:10.185]                     base::options(mc.cores = 1L)
[13:37:10.185]                   }
[13:37:10.185]                   ...future.strategy.old <- future::plan("list")
[13:37:10.185]                   options(future.plan = NULL)
[13:37:10.185]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:10.185]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:10.185]                 }
[13:37:10.185]                 ...future.workdir <- getwd()
[13:37:10.185]             }
[13:37:10.185]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:10.185]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:10.185]         }
[13:37:10.185]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:10.185]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:10.185]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:10.185]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:10.185]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:10.185]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:10.185]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:10.185]             base::names(...future.oldOptions))
[13:37:10.185]     }
[13:37:10.185]     if (FALSE) {
[13:37:10.185]     }
[13:37:10.185]     else {
[13:37:10.185]         if (TRUE) {
[13:37:10.185]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:10.185]                 open = "w")
[13:37:10.185]         }
[13:37:10.185]         else {
[13:37:10.185]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:10.185]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:10.185]         }
[13:37:10.185]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:10.185]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:10.185]             base::sink(type = "output", split = FALSE)
[13:37:10.185]             base::close(...future.stdout)
[13:37:10.185]         }, add = TRUE)
[13:37:10.185]     }
[13:37:10.185]     ...future.frame <- base::sys.nframe()
[13:37:10.185]     ...future.conditions <- base::list()
[13:37:10.185]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:10.185]     if (FALSE) {
[13:37:10.185]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:10.185]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:10.185]     }
[13:37:10.185]     ...future.result <- base::tryCatch({
[13:37:10.185]         base::withCallingHandlers({
[13:37:10.185]             ...future.value <- base::withVisible(base::local({
[13:37:10.185]                 ...future.makeSendCondition <- base::local({
[13:37:10.185]                   sendCondition <- NULL
[13:37:10.185]                   function(frame = 1L) {
[13:37:10.185]                     if (is.function(sendCondition)) 
[13:37:10.185]                       return(sendCondition)
[13:37:10.185]                     ns <- getNamespace("parallel")
[13:37:10.185]                     if (exists("sendData", mode = "function", 
[13:37:10.185]                       envir = ns)) {
[13:37:10.185]                       parallel_sendData <- get("sendData", mode = "function", 
[13:37:10.185]                         envir = ns)
[13:37:10.185]                       envir <- sys.frame(frame)
[13:37:10.185]                       master <- NULL
[13:37:10.185]                       while (!identical(envir, .GlobalEnv) && 
[13:37:10.185]                         !identical(envir, emptyenv())) {
[13:37:10.185]                         if (exists("master", mode = "list", envir = envir, 
[13:37:10.185]                           inherits = FALSE)) {
[13:37:10.185]                           master <- get("master", mode = "list", 
[13:37:10.185]                             envir = envir, inherits = FALSE)
[13:37:10.185]                           if (inherits(master, c("SOCKnode", 
[13:37:10.185]                             "SOCK0node"))) {
[13:37:10.185]                             sendCondition <<- function(cond) {
[13:37:10.185]                               data <- list(type = "VALUE", value = cond, 
[13:37:10.185]                                 success = TRUE)
[13:37:10.185]                               parallel_sendData(master, data)
[13:37:10.185]                             }
[13:37:10.185]                             return(sendCondition)
[13:37:10.185]                           }
[13:37:10.185]                         }
[13:37:10.185]                         frame <- frame + 1L
[13:37:10.185]                         envir <- sys.frame(frame)
[13:37:10.185]                       }
[13:37:10.185]                     }
[13:37:10.185]                     sendCondition <<- function(cond) NULL
[13:37:10.185]                   }
[13:37:10.185]                 })
[13:37:10.185]                 withCallingHandlers({
[13:37:10.185]                   {
[13:37:10.185]                     stop(structure(list(message = "boom"), class = c("MyError", 
[13:37:10.185]                       "error", "condition")))
[13:37:10.185]                   }
[13:37:10.185]                 }, immediateCondition = function(cond) {
[13:37:10.185]                   sendCondition <- ...future.makeSendCondition()
[13:37:10.185]                   sendCondition(cond)
[13:37:10.185]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:10.185]                   {
[13:37:10.185]                     inherits <- base::inherits
[13:37:10.185]                     invokeRestart <- base::invokeRestart
[13:37:10.185]                     is.null <- base::is.null
[13:37:10.185]                     muffled <- FALSE
[13:37:10.185]                     if (inherits(cond, "message")) {
[13:37:10.185]                       muffled <- grepl(pattern, "muffleMessage")
[13:37:10.185]                       if (muffled) 
[13:37:10.185]                         invokeRestart("muffleMessage")
[13:37:10.185]                     }
[13:37:10.185]                     else if (inherits(cond, "warning")) {
[13:37:10.185]                       muffled <- grepl(pattern, "muffleWarning")
[13:37:10.185]                       if (muffled) 
[13:37:10.185]                         invokeRestart("muffleWarning")
[13:37:10.185]                     }
[13:37:10.185]                     else if (inherits(cond, "condition")) {
[13:37:10.185]                       if (!is.null(pattern)) {
[13:37:10.185]                         computeRestarts <- base::computeRestarts
[13:37:10.185]                         grepl <- base::grepl
[13:37:10.185]                         restarts <- computeRestarts(cond)
[13:37:10.185]                         for (restart in restarts) {
[13:37:10.185]                           name <- restart$name
[13:37:10.185]                           if (is.null(name)) 
[13:37:10.185]                             next
[13:37:10.185]                           if (!grepl(pattern, name)) 
[13:37:10.185]                             next
[13:37:10.185]                           invokeRestart(restart)
[13:37:10.185]                           muffled <- TRUE
[13:37:10.185]                           break
[13:37:10.185]                         }
[13:37:10.185]                       }
[13:37:10.185]                     }
[13:37:10.185]                     invisible(muffled)
[13:37:10.185]                   }
[13:37:10.185]                   muffleCondition(cond)
[13:37:10.185]                 })
[13:37:10.185]             }))
[13:37:10.185]             future::FutureResult(value = ...future.value$value, 
[13:37:10.185]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:10.185]                   ...future.rng), globalenv = if (FALSE) 
[13:37:10.185]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:10.185]                     ...future.globalenv.names))
[13:37:10.185]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:10.185]         }, condition = base::local({
[13:37:10.185]             c <- base::c
[13:37:10.185]             inherits <- base::inherits
[13:37:10.185]             invokeRestart <- base::invokeRestart
[13:37:10.185]             length <- base::length
[13:37:10.185]             list <- base::list
[13:37:10.185]             seq.int <- base::seq.int
[13:37:10.185]             signalCondition <- base::signalCondition
[13:37:10.185]             sys.calls <- base::sys.calls
[13:37:10.185]             `[[` <- base::`[[`
[13:37:10.185]             `+` <- base::`+`
[13:37:10.185]             `<<-` <- base::`<<-`
[13:37:10.185]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:10.185]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:10.185]                   3L)]
[13:37:10.185]             }
[13:37:10.185]             function(cond) {
[13:37:10.185]                 is_error <- inherits(cond, "error")
[13:37:10.185]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:10.185]                   NULL)
[13:37:10.185]                 if (is_error) {
[13:37:10.185]                   sessionInformation <- function() {
[13:37:10.185]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:10.185]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:10.185]                       search = base::search(), system = base::Sys.info())
[13:37:10.185]                   }
[13:37:10.185]                   ...future.conditions[[length(...future.conditions) + 
[13:37:10.185]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:10.185]                     cond$call), session = sessionInformation(), 
[13:37:10.185]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:10.185]                   signalCondition(cond)
[13:37:10.185]                 }
[13:37:10.185]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:10.185]                 "immediateCondition"))) {
[13:37:10.185]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:10.185]                   ...future.conditions[[length(...future.conditions) + 
[13:37:10.185]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:10.185]                   if (TRUE && !signal) {
[13:37:10.185]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:10.185]                     {
[13:37:10.185]                       inherits <- base::inherits
[13:37:10.185]                       invokeRestart <- base::invokeRestart
[13:37:10.185]                       is.null <- base::is.null
[13:37:10.185]                       muffled <- FALSE
[13:37:10.185]                       if (inherits(cond, "message")) {
[13:37:10.185]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:10.185]                         if (muffled) 
[13:37:10.185]                           invokeRestart("muffleMessage")
[13:37:10.185]                       }
[13:37:10.185]                       else if (inherits(cond, "warning")) {
[13:37:10.185]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:10.185]                         if (muffled) 
[13:37:10.185]                           invokeRestart("muffleWarning")
[13:37:10.185]                       }
[13:37:10.185]                       else if (inherits(cond, "condition")) {
[13:37:10.185]                         if (!is.null(pattern)) {
[13:37:10.185]                           computeRestarts <- base::computeRestarts
[13:37:10.185]                           grepl <- base::grepl
[13:37:10.185]                           restarts <- computeRestarts(cond)
[13:37:10.185]                           for (restart in restarts) {
[13:37:10.185]                             name <- restart$name
[13:37:10.185]                             if (is.null(name)) 
[13:37:10.185]                               next
[13:37:10.185]                             if (!grepl(pattern, name)) 
[13:37:10.185]                               next
[13:37:10.185]                             invokeRestart(restart)
[13:37:10.185]                             muffled <- TRUE
[13:37:10.185]                             break
[13:37:10.185]                           }
[13:37:10.185]                         }
[13:37:10.185]                       }
[13:37:10.185]                       invisible(muffled)
[13:37:10.185]                     }
[13:37:10.185]                     muffleCondition(cond, pattern = "^muffle")
[13:37:10.185]                   }
[13:37:10.185]                 }
[13:37:10.185]                 else {
[13:37:10.185]                   if (TRUE) {
[13:37:10.185]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:10.185]                     {
[13:37:10.185]                       inherits <- base::inherits
[13:37:10.185]                       invokeRestart <- base::invokeRestart
[13:37:10.185]                       is.null <- base::is.null
[13:37:10.185]                       muffled <- FALSE
[13:37:10.185]                       if (inherits(cond, "message")) {
[13:37:10.185]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:10.185]                         if (muffled) 
[13:37:10.185]                           invokeRestart("muffleMessage")
[13:37:10.185]                       }
[13:37:10.185]                       else if (inherits(cond, "warning")) {
[13:37:10.185]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:10.185]                         if (muffled) 
[13:37:10.185]                           invokeRestart("muffleWarning")
[13:37:10.185]                       }
[13:37:10.185]                       else if (inherits(cond, "condition")) {
[13:37:10.185]                         if (!is.null(pattern)) {
[13:37:10.185]                           computeRestarts <- base::computeRestarts
[13:37:10.185]                           grepl <- base::grepl
[13:37:10.185]                           restarts <- computeRestarts(cond)
[13:37:10.185]                           for (restart in restarts) {
[13:37:10.185]                             name <- restart$name
[13:37:10.185]                             if (is.null(name)) 
[13:37:10.185]                               next
[13:37:10.185]                             if (!grepl(pattern, name)) 
[13:37:10.185]                               next
[13:37:10.185]                             invokeRestart(restart)
[13:37:10.185]                             muffled <- TRUE
[13:37:10.185]                             break
[13:37:10.185]                           }
[13:37:10.185]                         }
[13:37:10.185]                       }
[13:37:10.185]                       invisible(muffled)
[13:37:10.185]                     }
[13:37:10.185]                     muffleCondition(cond, pattern = "^muffle")
[13:37:10.185]                   }
[13:37:10.185]                 }
[13:37:10.185]             }
[13:37:10.185]         }))
[13:37:10.185]     }, error = function(ex) {
[13:37:10.185]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:10.185]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:10.185]                 ...future.rng), started = ...future.startTime, 
[13:37:10.185]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:10.185]             version = "1.8"), class = "FutureResult")
[13:37:10.185]     }, finally = {
[13:37:10.185]         if (!identical(...future.workdir, getwd())) 
[13:37:10.185]             setwd(...future.workdir)
[13:37:10.185]         {
[13:37:10.185]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:10.185]                 ...future.oldOptions$nwarnings <- NULL
[13:37:10.185]             }
[13:37:10.185]             base::options(...future.oldOptions)
[13:37:10.185]             if (.Platform$OS.type == "windows") {
[13:37:10.185]                 old_names <- names(...future.oldEnvVars)
[13:37:10.185]                 envs <- base::Sys.getenv()
[13:37:10.185]                 names <- names(envs)
[13:37:10.185]                 common <- intersect(names, old_names)
[13:37:10.185]                 added <- setdiff(names, old_names)
[13:37:10.185]                 removed <- setdiff(old_names, names)
[13:37:10.185]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:10.185]                   envs[common]]
[13:37:10.185]                 NAMES <- toupper(changed)
[13:37:10.185]                 args <- list()
[13:37:10.185]                 for (kk in seq_along(NAMES)) {
[13:37:10.185]                   name <- changed[[kk]]
[13:37:10.185]                   NAME <- NAMES[[kk]]
[13:37:10.185]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:10.185]                     next
[13:37:10.185]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:10.185]                 }
[13:37:10.185]                 NAMES <- toupper(added)
[13:37:10.185]                 for (kk in seq_along(NAMES)) {
[13:37:10.185]                   name <- added[[kk]]
[13:37:10.185]                   NAME <- NAMES[[kk]]
[13:37:10.185]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:10.185]                     next
[13:37:10.185]                   args[[name]] <- ""
[13:37:10.185]                 }
[13:37:10.185]                 NAMES <- toupper(removed)
[13:37:10.185]                 for (kk in seq_along(NAMES)) {
[13:37:10.185]                   name <- removed[[kk]]
[13:37:10.185]                   NAME <- NAMES[[kk]]
[13:37:10.185]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:10.185]                     next
[13:37:10.185]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:10.185]                 }
[13:37:10.185]                 if (length(args) > 0) 
[13:37:10.185]                   base::do.call(base::Sys.setenv, args = args)
[13:37:10.185]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:10.185]             }
[13:37:10.185]             else {
[13:37:10.185]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:10.185]             }
[13:37:10.185]             {
[13:37:10.185]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:10.185]                   0L) {
[13:37:10.185]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:10.185]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:10.185]                   base::options(opts)
[13:37:10.185]                 }
[13:37:10.185]                 {
[13:37:10.185]                   {
[13:37:10.185]                     base::options(mc.cores = ...future.mc.cores.old)
[13:37:10.185]                     NULL
[13:37:10.185]                   }
[13:37:10.185]                   options(future.plan = NULL)
[13:37:10.185]                   if (is.na(NA_character_)) 
[13:37:10.185]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:10.185]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:10.185]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:10.185]                     .init = FALSE)
[13:37:10.185]                 }
[13:37:10.185]             }
[13:37:10.185]         }
[13:37:10.185]     })
[13:37:10.185]     if (TRUE) {
[13:37:10.185]         base::sink(type = "output", split = FALSE)
[13:37:10.185]         if (TRUE) {
[13:37:10.185]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:10.185]         }
[13:37:10.185]         else {
[13:37:10.185]             ...future.result["stdout"] <- base::list(NULL)
[13:37:10.185]         }
[13:37:10.185]         base::close(...future.stdout)
[13:37:10.185]         ...future.stdout <- NULL
[13:37:10.185]     }
[13:37:10.185]     ...future.result$conditions <- ...future.conditions
[13:37:10.185]     ...future.result$finished <- base::Sys.time()
[13:37:10.185]     ...future.result
[13:37:10.185] }
[13:37:10.188] MultisessionFuture started
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    stop(structure(list(message = "boom"), class = c("MyError", 
        "error", "condition")))
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[13:37:10.189] receiveMessageFromWorker() for ClusterFuture ...
[13:37:10.190] - Validating connection of MultisessionFuture
[13:37:10.190] - received message: FutureResult
[13:37:10.190] - Received FutureResult
[13:37:10.190] - Erased future from FutureRegistry
[13:37:10.190] result() for ClusterFuture ...
[13:37:10.190] - result already collected: FutureResult
[13:37:10.190] result() for ClusterFuture ... done
[13:37:10.191] signalConditions() ...
[13:37:10.191]  - include = ‘immediateCondition’
[13:37:10.191]  - exclude = 
[13:37:10.191]  - resignal = FALSE
[13:37:10.191]  - Number of conditions: 1
[13:37:10.191] signalConditions() ... done
[13:37:10.191] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 1c81bec4-3232-89a6-5464-8e86a1a5c510
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:37:10.191] result() for ClusterFuture ...
[13:37:10.191] - result already collected: FutureResult
[13:37:10.191] result() for ClusterFuture ... done
[13:37:10.192] result() for ClusterFuture ...
[13:37:10.192] - result already collected: FutureResult
[13:37:10.192] result() for ClusterFuture ... done
[13:37:10.192] signalConditions() ...
[13:37:10.192]  - include = ‘immediateCondition’
[13:37:10.192]  - exclude = 
[13:37:10.192]  - resignal = FALSE
[13:37:10.192]  - Number of conditions: 1
[13:37:10.192] signalConditions() ... done
<MyError: boom>
[13:37:10.192] result() for ClusterFuture ...
[13:37:10.193] - result already collected: FutureResult
[13:37:10.193] result() for ClusterFuture ... done
[13:37:10.193] result() for ClusterFuture ...
[13:37:10.193] - result already collected: FutureResult
[13:37:10.193] result() for ClusterFuture ... done
[13:37:10.193] signalConditions() ...
[13:37:10.193]  - include = ‘immediateCondition’
[13:37:10.193]  - exclude = 
[13:37:10.193]  - resignal = FALSE
[13:37:10.193]  - Number of conditions: 1
[13:37:10.193] signalConditions() ... done
[13:37:10.194] Future state: ‘finished’
[13:37:10.194] result() for ClusterFuture ...
[13:37:10.194] - result already collected: FutureResult
[13:37:10.194] result() for ClusterFuture ... done
[13:37:10.194] signalConditions() ...
[13:37:10.194]  - include = ‘condition’
[13:37:10.194]  - exclude = ‘immediateCondition’
[13:37:10.194]  - resignal = TRUE
[13:37:10.194]  - Number of conditions: 1
[13:37:10.194]  - Condition #1: ‘MyError’, ‘error’, ‘condition’
[13:37:10.194] signalConditions() ... done
Testing with 2 cores ... DONE
> 
> 
> message("*** multisession() - too large globals ...")
*** multisession() - too large globals ...
> ooptsT <- options(future.globals.maxSize = object.size(1:1014))
> 
> limit <- getOption("future.globals.maxSize")
> cat(sprintf("Max total size of globals: %g bytes\n", limit))
Max total size of globals: 4104 bytes
> 
> for (workers in unique(c(1L, availableCores()))) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   message("Max number of sessions: ", workers)
+ 
+   ## A large object
+   a <- 1:1014
+   yTruth <- sum(a)
+   size <- object.size(a)
+   cat(sprintf("a: %g bytes\n", size))
+   f <- multisession({ sum(a) }, globals = TRUE, workers = workers)
+   print(f)
+   rm(list = "a")
+   v <- value(f)
+   print(v)
+   stopifnot(v == yTruth)
+ 
+ 
+   ## A too large object
+   a <- 1:1015
+   yTruth <- sum(a)
+   size <- object.size(a)
+   cat(sprintf("a: %g bytes\n", size))
+   res <- try(f <- multisession({ sum(a) }, globals = TRUE, workers = workers), silent = TRUE)
+   rm(list = "a")
+   stopifnot(inherits(res, "try-error"))
+ } ## for (workers in ...)
Max number of sessions: 1
a: 4104 bytes
[13:37:10.210] getGlobalsAndPackages() ...
[13:37:10.210] Searching for globals...
[13:37:10.211] - globals found: [3] ‘{’, ‘sum’, ‘a’
[13:37:10.211] Searching for globals ... DONE
[13:37:10.211] Resolving globals: FALSE
[13:37:10.212] The total size of the 1 globals is 4.01 KiB (4104 bytes)
[13:37:10.212] The total size of the 1 globals exported for future expression (‘{; sum(a); }’) is 4.01 KiB.. This exceeds the maximum allowed size of 4.01 KiB (option 'future.globals.maxSize'). There is one global: ‘a’ (4.01 KiB of class ‘numeric’)
[13:37:10.212] - globals: [1] ‘a’
[13:37:10.212] 
[13:37:10.212] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    sum(a)
}
Lazy evaluation: TRUE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 4.01 KiB (integer ‘a’ of 4.01 KiB)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 1c81bec4-3232-89a6-5464-8e86a1a5c510
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:37:10.213] Packages needed by the future expression (n = 0): <none>
[13:37:10.213] Packages needed by future strategies (n = 0): <none>
[13:37:10.214] {
[13:37:10.214]     {
[13:37:10.214]         {
[13:37:10.214]             ...future.startTime <- base::Sys.time()
[13:37:10.214]             {
[13:37:10.214]                 {
[13:37:10.214]                   {
[13:37:10.214]                     base::local({
[13:37:10.214]                       has_future <- base::requireNamespace("future", 
[13:37:10.214]                         quietly = TRUE)
[13:37:10.214]                       if (has_future) {
[13:37:10.214]                         ns <- base::getNamespace("future")
[13:37:10.214]                         version <- ns[[".package"]][["version"]]
[13:37:10.214]                         if (is.null(version)) 
[13:37:10.214]                           version <- utils::packageVersion("future")
[13:37:10.214]                       }
[13:37:10.214]                       else {
[13:37:10.214]                         version <- NULL
[13:37:10.214]                       }
[13:37:10.214]                       if (!has_future || version < "1.8.0") {
[13:37:10.214]                         info <- base::c(r_version = base::gsub("R version ", 
[13:37:10.214]                           "", base::R.version$version.string), 
[13:37:10.214]                           platform = base::sprintf("%s (%s-bit)", 
[13:37:10.214]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:10.214]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:10.214]                             "release", "version")], collapse = " "), 
[13:37:10.214]                           hostname = base::Sys.info()[["nodename"]])
[13:37:10.214]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:37:10.214]                           info)
[13:37:10.214]                         info <- base::paste(info, collapse = "; ")
[13:37:10.214]                         if (!has_future) {
[13:37:10.214]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:10.214]                             info)
[13:37:10.214]                         }
[13:37:10.214]                         else {
[13:37:10.214]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:10.214]                             info, version)
[13:37:10.214]                         }
[13:37:10.214]                         base::stop(msg)
[13:37:10.214]                       }
[13:37:10.214]                     })
[13:37:10.214]                   }
[13:37:10.214]                   ...future.strategy.old <- future::plan("list")
[13:37:10.214]                   options(future.plan = NULL)
[13:37:10.214]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:10.214]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:10.214]                 }
[13:37:10.214]                 ...future.workdir <- getwd()
[13:37:10.214]             }
[13:37:10.214]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:10.214]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:10.214]         }
[13:37:10.214]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:10.214]             future.globals.maxSize = 4104, future.globals.method = NULL, 
[13:37:10.214]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:10.214]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:10.214]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:10.214]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:10.214]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:10.214]             base::names(...future.oldOptions))
[13:37:10.214]     }
[13:37:10.214]     if (FALSE) {
[13:37:10.214]     }
[13:37:10.214]     else {
[13:37:10.214]         if (TRUE) {
[13:37:10.214]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:10.214]                 open = "w")
[13:37:10.214]         }
[13:37:10.214]         else {
[13:37:10.214]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:10.214]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:10.214]         }
[13:37:10.214]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:10.214]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:10.214]             base::sink(type = "output", split = FALSE)
[13:37:10.214]             base::close(...future.stdout)
[13:37:10.214]         }, add = TRUE)
[13:37:10.214]     }
[13:37:10.214]     ...future.frame <- base::sys.nframe()
[13:37:10.214]     ...future.conditions <- base::list()
[13:37:10.214]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:10.214]     if (FALSE) {
[13:37:10.214]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:10.214]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:10.214]     }
[13:37:10.214]     ...future.result <- base::tryCatch({
[13:37:10.214]         base::withCallingHandlers({
[13:37:10.214]             ...future.value <- base::withVisible(base::local({
[13:37:10.214]                 sum(a)
[13:37:10.214]             }))
[13:37:10.214]             future::FutureResult(value = ...future.value$value, 
[13:37:10.214]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:10.214]                   ...future.rng), globalenv = if (FALSE) 
[13:37:10.214]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:10.214]                     ...future.globalenv.names))
[13:37:10.214]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:10.214]         }, condition = base::local({
[13:37:10.214]             c <- base::c
[13:37:10.214]             inherits <- base::inherits
[13:37:10.214]             invokeRestart <- base::invokeRestart
[13:37:10.214]             length <- base::length
[13:37:10.214]             list <- base::list
[13:37:10.214]             seq.int <- base::seq.int
[13:37:10.214]             signalCondition <- base::signalCondition
[13:37:10.214]             sys.calls <- base::sys.calls
[13:37:10.214]             `[[` <- base::`[[`
[13:37:10.214]             `+` <- base::`+`
[13:37:10.214]             `<<-` <- base::`<<-`
[13:37:10.214]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:10.214]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:10.214]                   3L)]
[13:37:10.214]             }
[13:37:10.214]             function(cond) {
[13:37:10.214]                 is_error <- inherits(cond, "error")
[13:37:10.214]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:10.214]                   NULL)
[13:37:10.214]                 if (is_error) {
[13:37:10.214]                   sessionInformation <- function() {
[13:37:10.214]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:10.214]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:10.214]                       search = base::search(), system = base::Sys.info())
[13:37:10.214]                   }
[13:37:10.214]                   ...future.conditions[[length(...future.conditions) + 
[13:37:10.214]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:10.214]                     cond$call), session = sessionInformation(), 
[13:37:10.214]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:10.214]                   signalCondition(cond)
[13:37:10.214]                 }
[13:37:10.214]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:10.214]                 "immediateCondition"))) {
[13:37:10.214]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:10.214]                   ...future.conditions[[length(...future.conditions) + 
[13:37:10.214]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:10.214]                   if (TRUE && !signal) {
[13:37:10.214]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:10.214]                     {
[13:37:10.214]                       inherits <- base::inherits
[13:37:10.214]                       invokeRestart <- base::invokeRestart
[13:37:10.214]                       is.null <- base::is.null
[13:37:10.214]                       muffled <- FALSE
[13:37:10.214]                       if (inherits(cond, "message")) {
[13:37:10.214]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:10.214]                         if (muffled) 
[13:37:10.214]                           invokeRestart("muffleMessage")
[13:37:10.214]                       }
[13:37:10.214]                       else if (inherits(cond, "warning")) {
[13:37:10.214]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:10.214]                         if (muffled) 
[13:37:10.214]                           invokeRestart("muffleWarning")
[13:37:10.214]                       }
[13:37:10.214]                       else if (inherits(cond, "condition")) {
[13:37:10.214]                         if (!is.null(pattern)) {
[13:37:10.214]                           computeRestarts <- base::computeRestarts
[13:37:10.214]                           grepl <- base::grepl
[13:37:10.214]                           restarts <- computeRestarts(cond)
[13:37:10.214]                           for (restart in restarts) {
[13:37:10.214]                             name <- restart$name
[13:37:10.214]                             if (is.null(name)) 
[13:37:10.214]                               next
[13:37:10.214]                             if (!grepl(pattern, name)) 
[13:37:10.214]                               next
[13:37:10.214]                             invokeRestart(restart)
[13:37:10.214]                             muffled <- TRUE
[13:37:10.214]                             break
[13:37:10.214]                           }
[13:37:10.214]                         }
[13:37:10.214]                       }
[13:37:10.214]                       invisible(muffled)
[13:37:10.214]                     }
[13:37:10.214]                     muffleCondition(cond, pattern = "^muffle")
[13:37:10.214]                   }
[13:37:10.214]                 }
[13:37:10.214]                 else {
[13:37:10.214]                   if (TRUE) {
[13:37:10.214]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:10.214]                     {
[13:37:10.214]                       inherits <- base::inherits
[13:37:10.214]                       invokeRestart <- base::invokeRestart
[13:37:10.214]                       is.null <- base::is.null
[13:37:10.214]                       muffled <- FALSE
[13:37:10.214]                       if (inherits(cond, "message")) {
[13:37:10.214]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:10.214]                         if (muffled) 
[13:37:10.214]                           invokeRestart("muffleMessage")
[13:37:10.214]                       }
[13:37:10.214]                       else if (inherits(cond, "warning")) {
[13:37:10.214]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:10.214]                         if (muffled) 
[13:37:10.214]                           invokeRestart("muffleWarning")
[13:37:10.214]                       }
[13:37:10.214]                       else if (inherits(cond, "condition")) {
[13:37:10.214]                         if (!is.null(pattern)) {
[13:37:10.214]                           computeRestarts <- base::computeRestarts
[13:37:10.214]                           grepl <- base::grepl
[13:37:10.214]                           restarts <- computeRestarts(cond)
[13:37:10.214]                           for (restart in restarts) {
[13:37:10.214]                             name <- restart$name
[13:37:10.214]                             if (is.null(name)) 
[13:37:10.214]                               next
[13:37:10.214]                             if (!grepl(pattern, name)) 
[13:37:10.214]                               next
[13:37:10.214]                             invokeRestart(restart)
[13:37:10.214]                             muffled <- TRUE
[13:37:10.214]                             break
[13:37:10.214]                           }
[13:37:10.214]                         }
[13:37:10.214]                       }
[13:37:10.214]                       invisible(muffled)
[13:37:10.214]                     }
[13:37:10.214]                     muffleCondition(cond, pattern = "^muffle")
[13:37:10.214]                   }
[13:37:10.214]                 }
[13:37:10.214]             }
[13:37:10.214]         }))
[13:37:10.214]     }, error = function(ex) {
[13:37:10.214]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:10.214]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:10.214]                 ...future.rng), started = ...future.startTime, 
[13:37:10.214]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:10.214]             version = "1.8"), class = "FutureResult")
[13:37:10.214]     }, finally = {
[13:37:10.214]         if (!identical(...future.workdir, getwd())) 
[13:37:10.214]             setwd(...future.workdir)
[13:37:10.214]         {
[13:37:10.214]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:10.214]                 ...future.oldOptions$nwarnings <- NULL
[13:37:10.214]             }
[13:37:10.214]             base::options(...future.oldOptions)
[13:37:10.214]             if (.Platform$OS.type == "windows") {
[13:37:10.214]                 old_names <- names(...future.oldEnvVars)
[13:37:10.214]                 envs <- base::Sys.getenv()
[13:37:10.214]                 names <- names(envs)
[13:37:10.214]                 common <- intersect(names, old_names)
[13:37:10.214]                 added <- setdiff(names, old_names)
[13:37:10.214]                 removed <- setdiff(old_names, names)
[13:37:10.214]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:10.214]                   envs[common]]
[13:37:10.214]                 NAMES <- toupper(changed)
[13:37:10.214]                 args <- list()
[13:37:10.214]                 for (kk in seq_along(NAMES)) {
[13:37:10.214]                   name <- changed[[kk]]
[13:37:10.214]                   NAME <- NAMES[[kk]]
[13:37:10.214]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:10.214]                     next
[13:37:10.214]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:10.214]                 }
[13:37:10.214]                 NAMES <- toupper(added)
[13:37:10.214]                 for (kk in seq_along(NAMES)) {
[13:37:10.214]                   name <- added[[kk]]
[13:37:10.214]                   NAME <- NAMES[[kk]]
[13:37:10.214]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:10.214]                     next
[13:37:10.214]                   args[[name]] <- ""
[13:37:10.214]                 }
[13:37:10.214]                 NAMES <- toupper(removed)
[13:37:10.214]                 for (kk in seq_along(NAMES)) {
[13:37:10.214]                   name <- removed[[kk]]
[13:37:10.214]                   NAME <- NAMES[[kk]]
[13:37:10.214]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:10.214]                     next
[13:37:10.214]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:10.214]                 }
[13:37:10.214]                 if (length(args) > 0) 
[13:37:10.214]                   base::do.call(base::Sys.setenv, args = args)
[13:37:10.214]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:10.214]             }
[13:37:10.214]             else {
[13:37:10.214]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:10.214]             }
[13:37:10.214]             {
[13:37:10.214]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:10.214]                   0L) {
[13:37:10.214]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:10.214]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:10.214]                   base::options(opts)
[13:37:10.214]                 }
[13:37:10.214]                 {
[13:37:10.214]                   {
[13:37:10.214]                     NULL
[13:37:10.214]                     RNGkind("Mersenne-Twister")
[13:37:10.214]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:37:10.214]                       inherits = FALSE)
[13:37:10.214]                   }
[13:37:10.214]                   options(future.plan = NULL)
[13:37:10.214]                   if (is.na(NA_character_)) 
[13:37:10.214]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:10.214]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:10.214]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:10.214]                     .init = FALSE)
[13:37:10.214]                 }
[13:37:10.214]             }
[13:37:10.214]         }
[13:37:10.214]     })
[13:37:10.214]     if (TRUE) {
[13:37:10.214]         base::sink(type = "output", split = FALSE)
[13:37:10.214]         if (TRUE) {
[13:37:10.214]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:10.214]         }
[13:37:10.214]         else {
[13:37:10.214]             ...future.result["stdout"] <- base::list(NULL)
[13:37:10.214]         }
[13:37:10.214]         base::close(...future.stdout)
[13:37:10.214]         ...future.stdout <- NULL
[13:37:10.214]     }
[13:37:10.214]     ...future.result$conditions <- ...future.conditions
[13:37:10.214]     ...future.result$finished <- base::Sys.time()
[13:37:10.214]     ...future.result
[13:37:10.214] }
[13:37:10.215] assign_globals() ...
[13:37:10.216] List of 1
[13:37:10.216]  $ a: int [1:1014] 1 2 3 4 5 6 7 8 9 10 ...
[13:37:10.216]  - attr(*, "where")=List of 1
[13:37:10.216]   ..$ a:<environment: R_EmptyEnv> 
[13:37:10.216]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:37:10.216]  - attr(*, "resolved")= logi FALSE
[13:37:10.216]  - attr(*, "total_size")= num 4104
[13:37:10.218] - copied ‘a’ to environment
[13:37:10.218] assign_globals() ... done
[13:37:10.218] plan(): Setting new future strategy stack:
[13:37:10.218] List of future strategies:
[13:37:10.218] 1. sequential:
[13:37:10.218]    - args: function (..., envir = parent.frame())
[13:37:10.218]    - tweaked: FALSE
[13:37:10.218]    - call: NULL
[13:37:10.219] plan(): nbrOfWorkers() = 1
[13:37:10.219] plan(): Setting new future strategy stack:
[13:37:10.219] List of future strategies:
[13:37:10.219] 1. sequential:
[13:37:10.219]    - args: function (..., envir = parent.frame())
[13:37:10.219]    - tweaked: FALSE
[13:37:10.219]    - call: future::plan("sequential")
[13:37:10.220] plan(): nbrOfWorkers() = 1
[13:37:10.220] SequentialFuture started (and completed)
[1] 514605
a: 4112 bytes
[13:37:10.220] getGlobalsAndPackages() ...
[13:37:10.220] Searching for globals...
[13:37:10.221] - globals found: [3] ‘{’, ‘sum’, ‘a’
[13:37:10.221] Searching for globals ... DONE
[13:37:10.221] Resolving globals: FALSE
[13:37:10.222] The total size of the 1 globals is 4.02 KiB (4112 bytes)
[13:37:10.222] The total size of the 1 globals exported for future expression (‘{; sum(a); }’) is 4.02 KiB.. This exceeds the maximum allowed size of 4.01 KiB (option 'future.globals.maxSize'). There is one global: ‘a’ (4.02 KiB of class ‘numeric’)
Max number of sessions: 2
a: 4104 bytes
[13:37:10.222] getGlobalsAndPackages() ...
[13:37:10.222] Searching for globals...
[13:37:10.223] - globals found: [3] ‘{’, ‘sum’, ‘a’
[13:37:10.223] Searching for globals ... DONE
[13:37:10.223] Resolving globals: FALSE
[13:37:10.224] The total size of the 1 globals is 4.01 KiB (4104 bytes)
[13:37:10.224] The total size of the 1 globals exported for future expression (‘{; sum(a); }’) is 4.01 KiB.. This exceeds the maximum allowed size of 4.01 KiB (option 'future.globals.maxSize'). There is one global: ‘a’ (4.01 KiB of class ‘numeric’)
[13:37:10.224] - globals: [1] ‘a’
[13:37:10.224] 
[13:37:10.224] getGlobalsAndPackages() ... DONE
[13:37:10.235] Packages needed by the future expression (n = 0): <none>
[13:37:10.235] Packages needed by future strategies (n = 0): <none>
[13:37:10.235] {
[13:37:10.235]     {
[13:37:10.235]         {
[13:37:10.235]             ...future.startTime <- base::Sys.time()
[13:37:10.235]             {
[13:37:10.235]                 {
[13:37:10.235]                   {
[13:37:10.235]                     {
[13:37:10.235]                       base::local({
[13:37:10.235]                         has_future <- base::requireNamespace("future", 
[13:37:10.235]                           quietly = TRUE)
[13:37:10.235]                         if (has_future) {
[13:37:10.235]                           ns <- base::getNamespace("future")
[13:37:10.235]                           version <- ns[[".package"]][["version"]]
[13:37:10.235]                           if (is.null(version)) 
[13:37:10.235]                             version <- utils::packageVersion("future")
[13:37:10.235]                         }
[13:37:10.235]                         else {
[13:37:10.235]                           version <- NULL
[13:37:10.235]                         }
[13:37:10.235]                         if (!has_future || version < "1.8.0") {
[13:37:10.235]                           info <- base::c(r_version = base::gsub("R version ", 
[13:37:10.235]                             "", base::R.version$version.string), 
[13:37:10.235]                             platform = base::sprintf("%s (%s-bit)", 
[13:37:10.235]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:10.235]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:10.235]                               "release", "version")], collapse = " "), 
[13:37:10.235]                             hostname = base::Sys.info()[["nodename"]])
[13:37:10.235]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:37:10.235]                             info)
[13:37:10.235]                           info <- base::paste(info, collapse = "; ")
[13:37:10.235]                           if (!has_future) {
[13:37:10.235]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:10.235]                               info)
[13:37:10.235]                           }
[13:37:10.235]                           else {
[13:37:10.235]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:10.235]                               info, version)
[13:37:10.235]                           }
[13:37:10.235]                           base::stop(msg)
[13:37:10.235]                         }
[13:37:10.235]                       })
[13:37:10.235]                     }
[13:37:10.235]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:37:10.235]                     base::options(mc.cores = 1L)
[13:37:10.235]                   }
[13:37:10.235]                   ...future.strategy.old <- future::plan("list")
[13:37:10.235]                   options(future.plan = NULL)
[13:37:10.235]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:10.235]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:10.235]                 }
[13:37:10.235]                 ...future.workdir <- getwd()
[13:37:10.235]             }
[13:37:10.235]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:10.235]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:10.235]         }
[13:37:10.235]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:10.235]             future.globals.maxSize = 4104, future.globals.method = NULL, 
[13:37:10.235]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:10.235]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:10.235]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:10.235]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:10.235]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:10.235]             base::names(...future.oldOptions))
[13:37:10.235]     }
[13:37:10.235]     if (FALSE) {
[13:37:10.235]     }
[13:37:10.235]     else {
[13:37:10.235]         if (TRUE) {
[13:37:10.235]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:10.235]                 open = "w")
[13:37:10.235]         }
[13:37:10.235]         else {
[13:37:10.235]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:10.235]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:10.235]         }
[13:37:10.235]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:10.235]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:10.235]             base::sink(type = "output", split = FALSE)
[13:37:10.235]             base::close(...future.stdout)
[13:37:10.235]         }, add = TRUE)
[13:37:10.235]     }
[13:37:10.235]     ...future.frame <- base::sys.nframe()
[13:37:10.235]     ...future.conditions <- base::list()
[13:37:10.235]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:10.235]     if (FALSE) {
[13:37:10.235]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:10.235]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:10.235]     }
[13:37:10.235]     ...future.result <- base::tryCatch({
[13:37:10.235]         base::withCallingHandlers({
[13:37:10.235]             ...future.value <- base::withVisible(base::local({
[13:37:10.235]                 ...future.makeSendCondition <- base::local({
[13:37:10.235]                   sendCondition <- NULL
[13:37:10.235]                   function(frame = 1L) {
[13:37:10.235]                     if (is.function(sendCondition)) 
[13:37:10.235]                       return(sendCondition)
[13:37:10.235]                     ns <- getNamespace("parallel")
[13:37:10.235]                     if (exists("sendData", mode = "function", 
[13:37:10.235]                       envir = ns)) {
[13:37:10.235]                       parallel_sendData <- get("sendData", mode = "function", 
[13:37:10.235]                         envir = ns)
[13:37:10.235]                       envir <- sys.frame(frame)
[13:37:10.235]                       master <- NULL
[13:37:10.235]                       while (!identical(envir, .GlobalEnv) && 
[13:37:10.235]                         !identical(envir, emptyenv())) {
[13:37:10.235]                         if (exists("master", mode = "list", envir = envir, 
[13:37:10.235]                           inherits = FALSE)) {
[13:37:10.235]                           master <- get("master", mode = "list", 
[13:37:10.235]                             envir = envir, inherits = FALSE)
[13:37:10.235]                           if (inherits(master, c("SOCKnode", 
[13:37:10.235]                             "SOCK0node"))) {
[13:37:10.235]                             sendCondition <<- function(cond) {
[13:37:10.235]                               data <- list(type = "VALUE", value = cond, 
[13:37:10.235]                                 success = TRUE)
[13:37:10.235]                               parallel_sendData(master, data)
[13:37:10.235]                             }
[13:37:10.235]                             return(sendCondition)
[13:37:10.235]                           }
[13:37:10.235]                         }
[13:37:10.235]                         frame <- frame + 1L
[13:37:10.235]                         envir <- sys.frame(frame)
[13:37:10.235]                       }
[13:37:10.235]                     }
[13:37:10.235]                     sendCondition <<- function(cond) NULL
[13:37:10.235]                   }
[13:37:10.235]                 })
[13:37:10.235]                 withCallingHandlers({
[13:37:10.235]                   {
[13:37:10.235]                     sum(a)
[13:37:10.235]                   }
[13:37:10.235]                 }, immediateCondition = function(cond) {
[13:37:10.235]                   sendCondition <- ...future.makeSendCondition()
[13:37:10.235]                   sendCondition(cond)
[13:37:10.235]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:10.235]                   {
[13:37:10.235]                     inherits <- base::inherits
[13:37:10.235]                     invokeRestart <- base::invokeRestart
[13:37:10.235]                     is.null <- base::is.null
[13:37:10.235]                     muffled <- FALSE
[13:37:10.235]                     if (inherits(cond, "message")) {
[13:37:10.235]                       muffled <- grepl(pattern, "muffleMessage")
[13:37:10.235]                       if (muffled) 
[13:37:10.235]                         invokeRestart("muffleMessage")
[13:37:10.235]                     }
[13:37:10.235]                     else if (inherits(cond, "warning")) {
[13:37:10.235]                       muffled <- grepl(pattern, "muffleWarning")
[13:37:10.235]                       if (muffled) 
[13:37:10.235]                         invokeRestart("muffleWarning")
[13:37:10.235]                     }
[13:37:10.235]                     else if (inherits(cond, "condition")) {
[13:37:10.235]                       if (!is.null(pattern)) {
[13:37:10.235]                         computeRestarts <- base::computeRestarts
[13:37:10.235]                         grepl <- base::grepl
[13:37:10.235]                         restarts <- computeRestarts(cond)
[13:37:10.235]                         for (restart in restarts) {
[13:37:10.235]                           name <- restart$name
[13:37:10.235]                           if (is.null(name)) 
[13:37:10.235]                             next
[13:37:10.235]                           if (!grepl(pattern, name)) 
[13:37:10.235]                             next
[13:37:10.235]                           invokeRestart(restart)
[13:37:10.235]                           muffled <- TRUE
[13:37:10.235]                           break
[13:37:10.235]                         }
[13:37:10.235]                       }
[13:37:10.235]                     }
[13:37:10.235]                     invisible(muffled)
[13:37:10.235]                   }
[13:37:10.235]                   muffleCondition(cond)
[13:37:10.235]                 })
[13:37:10.235]             }))
[13:37:10.235]             future::FutureResult(value = ...future.value$value, 
[13:37:10.235]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:10.235]                   ...future.rng), globalenv = if (FALSE) 
[13:37:10.235]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:10.235]                     ...future.globalenv.names))
[13:37:10.235]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:10.235]         }, condition = base::local({
[13:37:10.235]             c <- base::c
[13:37:10.235]             inherits <- base::inherits
[13:37:10.235]             invokeRestart <- base::invokeRestart
[13:37:10.235]             length <- base::length
[13:37:10.235]             list <- base::list
[13:37:10.235]             seq.int <- base::seq.int
[13:37:10.235]             signalCondition <- base::signalCondition
[13:37:10.235]             sys.calls <- base::sys.calls
[13:37:10.235]             `[[` <- base::`[[`
[13:37:10.235]             `+` <- base::`+`
[13:37:10.235]             `<<-` <- base::`<<-`
[13:37:10.235]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:10.235]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:10.235]                   3L)]
[13:37:10.235]             }
[13:37:10.235]             function(cond) {
[13:37:10.235]                 is_error <- inherits(cond, "error")
[13:37:10.235]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:10.235]                   NULL)
[13:37:10.235]                 if (is_error) {
[13:37:10.235]                   sessionInformation <- function() {
[13:37:10.235]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:10.235]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:10.235]                       search = base::search(), system = base::Sys.info())
[13:37:10.235]                   }
[13:37:10.235]                   ...future.conditions[[length(...future.conditions) + 
[13:37:10.235]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:10.235]                     cond$call), session = sessionInformation(), 
[13:37:10.235]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:10.235]                   signalCondition(cond)
[13:37:10.235]                 }
[13:37:10.235]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:10.235]                 "immediateCondition"))) {
[13:37:10.235]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:10.235]                   ...future.conditions[[length(...future.conditions) + 
[13:37:10.235]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:10.235]                   if (TRUE && !signal) {
[13:37:10.235]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:10.235]                     {
[13:37:10.235]                       inherits <- base::inherits
[13:37:10.235]                       invokeRestart <- base::invokeRestart
[13:37:10.235]                       is.null <- base::is.null
[13:37:10.235]                       muffled <- FALSE
[13:37:10.235]                       if (inherits(cond, "message")) {
[13:37:10.235]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:10.235]                         if (muffled) 
[13:37:10.235]                           invokeRestart("muffleMessage")
[13:37:10.235]                       }
[13:37:10.235]                       else if (inherits(cond, "warning")) {
[13:37:10.235]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:10.235]                         if (muffled) 
[13:37:10.235]                           invokeRestart("muffleWarning")
[13:37:10.235]                       }
[13:37:10.235]                       else if (inherits(cond, "condition")) {
[13:37:10.235]                         if (!is.null(pattern)) {
[13:37:10.235]                           computeRestarts <- base::computeRestarts
[13:37:10.235]                           grepl <- base::grepl
[13:37:10.235]                           restarts <- computeRestarts(cond)
[13:37:10.235]                           for (restart in restarts) {
[13:37:10.235]                             name <- restart$name
[13:37:10.235]                             if (is.null(name)) 
[13:37:10.235]                               next
[13:37:10.235]                             if (!grepl(pattern, name)) 
[13:37:10.235]                               next
[13:37:10.235]                             invokeRestart(restart)
[13:37:10.235]                             muffled <- TRUE
[13:37:10.235]                             break
[13:37:10.235]                           }
[13:37:10.235]                         }
[13:37:10.235]                       }
[13:37:10.235]                       invisible(muffled)
[13:37:10.235]                     }
[13:37:10.235]                     muffleCondition(cond, pattern = "^muffle")
[13:37:10.235]                   }
[13:37:10.235]                 }
[13:37:10.235]                 else {
[13:37:10.235]                   if (TRUE) {
[13:37:10.235]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:10.235]                     {
[13:37:10.235]                       inherits <- base::inherits
[13:37:10.235]                       invokeRestart <- base::invokeRestart
[13:37:10.235]                       is.null <- base::is.null
[13:37:10.235]                       muffled <- FALSE
[13:37:10.235]                       if (inherits(cond, "message")) {
[13:37:10.235]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:10.235]                         if (muffled) 
[13:37:10.235]                           invokeRestart("muffleMessage")
[13:37:10.235]                       }
[13:37:10.235]                       else if (inherits(cond, "warning")) {
[13:37:10.235]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:10.235]                         if (muffled) 
[13:37:10.235]                           invokeRestart("muffleWarning")
[13:37:10.235]                       }
[13:37:10.235]                       else if (inherits(cond, "condition")) {
[13:37:10.235]                         if (!is.null(pattern)) {
[13:37:10.235]                           computeRestarts <- base::computeRestarts
[13:37:10.235]                           grepl <- base::grepl
[13:37:10.235]                           restarts <- computeRestarts(cond)
[13:37:10.235]                           for (restart in restarts) {
[13:37:10.235]                             name <- restart$name
[13:37:10.235]                             if (is.null(name)) 
[13:37:10.235]                               next
[13:37:10.235]                             if (!grepl(pattern, name)) 
[13:37:10.235]                               next
[13:37:10.235]                             invokeRestart(restart)
[13:37:10.235]                             muffled <- TRUE
[13:37:10.235]                             break
[13:37:10.235]                           }
[13:37:10.235]                         }
[13:37:10.235]                       }
[13:37:10.235]                       invisible(muffled)
[13:37:10.235]                     }
[13:37:10.235]                     muffleCondition(cond, pattern = "^muffle")
[13:37:10.235]                   }
[13:37:10.235]                 }
[13:37:10.235]             }
[13:37:10.235]         }))
[13:37:10.235]     }, error = function(ex) {
[13:37:10.235]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:10.235]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:10.235]                 ...future.rng), started = ...future.startTime, 
[13:37:10.235]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:10.235]             version = "1.8"), class = "FutureResult")
[13:37:10.235]     }, finally = {
[13:37:10.235]         if (!identical(...future.workdir, getwd())) 
[13:37:10.235]             setwd(...future.workdir)
[13:37:10.235]         {
[13:37:10.235]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:10.235]                 ...future.oldOptions$nwarnings <- NULL
[13:37:10.235]             }
[13:37:10.235]             base::options(...future.oldOptions)
[13:37:10.235]             if (.Platform$OS.type == "windows") {
[13:37:10.235]                 old_names <- names(...future.oldEnvVars)
[13:37:10.235]                 envs <- base::Sys.getenv()
[13:37:10.235]                 names <- names(envs)
[13:37:10.235]                 common <- intersect(names, old_names)
[13:37:10.235]                 added <- setdiff(names, old_names)
[13:37:10.235]                 removed <- setdiff(old_names, names)
[13:37:10.235]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:10.235]                   envs[common]]
[13:37:10.235]                 NAMES <- toupper(changed)
[13:37:10.235]                 args <- list()
[13:37:10.235]                 for (kk in seq_along(NAMES)) {
[13:37:10.235]                   name <- changed[[kk]]
[13:37:10.235]                   NAME <- NAMES[[kk]]
[13:37:10.235]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:10.235]                     next
[13:37:10.235]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:10.235]                 }
[13:37:10.235]                 NAMES <- toupper(added)
[13:37:10.235]                 for (kk in seq_along(NAMES)) {
[13:37:10.235]                   name <- added[[kk]]
[13:37:10.235]                   NAME <- NAMES[[kk]]
[13:37:10.235]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:10.235]                     next
[13:37:10.235]                   args[[name]] <- ""
[13:37:10.235]                 }
[13:37:10.235]                 NAMES <- toupper(removed)
[13:37:10.235]                 for (kk in seq_along(NAMES)) {
[13:37:10.235]                   name <- removed[[kk]]
[13:37:10.235]                   NAME <- NAMES[[kk]]
[13:37:10.235]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:10.235]                     next
[13:37:10.235]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:10.235]                 }
[13:37:10.235]                 if (length(args) > 0) 
[13:37:10.235]                   base::do.call(base::Sys.setenv, args = args)
[13:37:10.235]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:10.235]             }
[13:37:10.235]             else {
[13:37:10.235]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:10.235]             }
[13:37:10.235]             {
[13:37:10.235]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:10.235]                   0L) {
[13:37:10.235]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:10.235]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:10.235]                   base::options(opts)
[13:37:10.235]                 }
[13:37:10.235]                 {
[13:37:10.235]                   {
[13:37:10.235]                     base::options(mc.cores = ...future.mc.cores.old)
[13:37:10.235]                     NULL
[13:37:10.235]                   }
[13:37:10.235]                   options(future.plan = NULL)
[13:37:10.235]                   if (is.na(NA_character_)) 
[13:37:10.235]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:10.235]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:10.235]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:10.235]                     .init = FALSE)
[13:37:10.235]                 }
[13:37:10.235]             }
[13:37:10.235]         }
[13:37:10.235]     })
[13:37:10.235]     if (TRUE) {
[13:37:10.235]         base::sink(type = "output", split = FALSE)
[13:37:10.235]         if (TRUE) {
[13:37:10.235]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:10.235]         }
[13:37:10.235]         else {
[13:37:10.235]             ...future.result["stdout"] <- base::list(NULL)
[13:37:10.235]         }
[13:37:10.235]         base::close(...future.stdout)
[13:37:10.235]         ...future.stdout <- NULL
[13:37:10.235]     }
[13:37:10.235]     ...future.result$conditions <- ...future.conditions
[13:37:10.235]     ...future.result$finished <- base::Sys.time()
[13:37:10.235]     ...future.result
[13:37:10.235] }
[13:37:10.238] Exporting 1 global objects (4.01 KiB) to cluster node #1 ...
[13:37:10.238] Exporting ‘a’ (4.01 KiB) to cluster node #1 ...
[13:37:10.238] Exporting ‘a’ (4.01 KiB) to cluster node #1 ... DONE
[13:37:10.238] Exporting 1 global objects (4.01 KiB) to cluster node #1 ... DONE
[13:37:10.239] MultisessionFuture started
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    sum(a)
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 4.01 KiB (integer ‘a’ of 4.01 KiB)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[13:37:10.241] receiveMessageFromWorker() for ClusterFuture ...
[13:37:10.241] - Validating connection of MultisessionFuture
[13:37:10.241] - received message: FutureResult
[13:37:10.241] - Received FutureResult
[13:37:10.241] - Erased future from FutureRegistry
[13:37:10.241] result() for ClusterFuture ...
[13:37:10.241] - result already collected: FutureResult
[13:37:10.241] result() for ClusterFuture ... done
[13:37:10.241] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 1c81bec4-3232-89a6-5464-8e86a1a5c510
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:37:10.242] result() for ClusterFuture ...
[13:37:10.242] - result already collected: FutureResult
[13:37:10.242] result() for ClusterFuture ... done
[13:37:10.242] result() for ClusterFuture ...
[13:37:10.242] - result already collected: FutureResult
[13:37:10.242] result() for ClusterFuture ... done
[1] 514605
a: 4112 bytes
[13:37:10.242] getGlobalsAndPackages() ...
[13:37:10.242] Searching for globals...
[13:37:10.243] - globals found: [3] ‘{’, ‘sum’, ‘a’
[13:37:10.243] Searching for globals ... DONE
[13:37:10.243] Resolving globals: FALSE
[13:37:10.244] The total size of the 1 globals is 4.02 KiB (4112 bytes)
[13:37:10.244] The total size of the 1 globals exported for future expression (‘{; sum(a); }’) is 4.02 KiB.. This exceeds the maximum allowed size of 4.01 KiB (option 'future.globals.maxSize'). There is one global: ‘a’ (4.02 KiB of class ‘numeric’)
> 
> ## Undo options changed in this test
> options(ooptsT)
> 
> message("*** multisession() - too large globals ... DONE")
*** multisession() - too large globals ... DONE
> 
> message("*** multisession(..., workers = 1L) ...")
*** multisession(..., workers = 1L) ...
> 
> a <- 2
> b <- 3
> yTruth <- a * b
> 
> f <- multisession({ a * b }, globals = TRUE, workers = 1L)
[13:37:10.245] getGlobalsAndPackages() ...
[13:37:10.245] Searching for globals...
[13:37:10.245] - globals found: [4] ‘{’, ‘*’, ‘a’, ‘b’
[13:37:10.246] Searching for globals ... DONE
[13:37:10.246] Resolving globals: FALSE
[13:37:10.246] The total size of the 2 globals is 112 bytes (112 bytes)
[13:37:10.246] The total size of the 2 globals exported for future expression (‘{; a * b; }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘a’ (56 bytes of class ‘numeric’) and ‘b’ (56 bytes of class ‘numeric’)
[13:37:10.247] - globals: [2] ‘a’, ‘b’
[13:37:10.247] 
[13:37:10.247] getGlobalsAndPackages() ... DONE
> rm(list = c("a", "b"))
> 
> v <- value(f)
[13:37:10.247] Packages needed by the future expression (n = 0): <none>
[13:37:10.247] Packages needed by future strategies (n = 0): <none>
[13:37:10.248] {
[13:37:10.248]     {
[13:37:10.248]         {
[13:37:10.248]             ...future.startTime <- base::Sys.time()
[13:37:10.248]             {
[13:37:10.248]                 {
[13:37:10.248]                   {
[13:37:10.248]                     base::local({
[13:37:10.248]                       has_future <- base::requireNamespace("future", 
[13:37:10.248]                         quietly = TRUE)
[13:37:10.248]                       if (has_future) {
[13:37:10.248]                         ns <- base::getNamespace("future")
[13:37:10.248]                         version <- ns[[".package"]][["version"]]
[13:37:10.248]                         if (is.null(version)) 
[13:37:10.248]                           version <- utils::packageVersion("future")
[13:37:10.248]                       }
[13:37:10.248]                       else {
[13:37:10.248]                         version <- NULL
[13:37:10.248]                       }
[13:37:10.248]                       if (!has_future || version < "1.8.0") {
[13:37:10.248]                         info <- base::c(r_version = base::gsub("R version ", 
[13:37:10.248]                           "", base::R.version$version.string), 
[13:37:10.248]                           platform = base::sprintf("%s (%s-bit)", 
[13:37:10.248]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:10.248]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:10.248]                             "release", "version")], collapse = " "), 
[13:37:10.248]                           hostname = base::Sys.info()[["nodename"]])
[13:37:10.248]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:37:10.248]                           info)
[13:37:10.248]                         info <- base::paste(info, collapse = "; ")
[13:37:10.248]                         if (!has_future) {
[13:37:10.248]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:10.248]                             info)
[13:37:10.248]                         }
[13:37:10.248]                         else {
[13:37:10.248]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:10.248]                             info, version)
[13:37:10.248]                         }
[13:37:10.248]                         base::stop(msg)
[13:37:10.248]                       }
[13:37:10.248]                     })
[13:37:10.248]                   }
[13:37:10.248]                   ...future.strategy.old <- future::plan("list")
[13:37:10.248]                   options(future.plan = NULL)
[13:37:10.248]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:10.248]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:10.248]                 }
[13:37:10.248]                 ...future.workdir <- getwd()
[13:37:10.248]             }
[13:37:10.248]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:10.248]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:10.248]         }
[13:37:10.248]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:10.248]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:10.248]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:10.248]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:10.248]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:10.248]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:10.248]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:10.248]             base::names(...future.oldOptions))
[13:37:10.248]     }
[13:37:10.248]     if (FALSE) {
[13:37:10.248]     }
[13:37:10.248]     else {
[13:37:10.248]         if (TRUE) {
[13:37:10.248]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:10.248]                 open = "w")
[13:37:10.248]         }
[13:37:10.248]         else {
[13:37:10.248]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:10.248]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:10.248]         }
[13:37:10.248]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:10.248]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:10.248]             base::sink(type = "output", split = FALSE)
[13:37:10.248]             base::close(...future.stdout)
[13:37:10.248]         }, add = TRUE)
[13:37:10.248]     }
[13:37:10.248]     ...future.frame <- base::sys.nframe()
[13:37:10.248]     ...future.conditions <- base::list()
[13:37:10.248]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:10.248]     if (FALSE) {
[13:37:10.248]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:10.248]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:10.248]     }
[13:37:10.248]     ...future.result <- base::tryCatch({
[13:37:10.248]         base::withCallingHandlers({
[13:37:10.248]             ...future.value <- base::withVisible(base::local({
[13:37:10.248]                 a * b
[13:37:10.248]             }))
[13:37:10.248]             future::FutureResult(value = ...future.value$value, 
[13:37:10.248]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:10.248]                   ...future.rng), globalenv = if (FALSE) 
[13:37:10.248]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:10.248]                     ...future.globalenv.names))
[13:37:10.248]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:10.248]         }, condition = base::local({
[13:37:10.248]             c <- base::c
[13:37:10.248]             inherits <- base::inherits
[13:37:10.248]             invokeRestart <- base::invokeRestart
[13:37:10.248]             length <- base::length
[13:37:10.248]             list <- base::list
[13:37:10.248]             seq.int <- base::seq.int
[13:37:10.248]             signalCondition <- base::signalCondition
[13:37:10.248]             sys.calls <- base::sys.calls
[13:37:10.248]             `[[` <- base::`[[`
[13:37:10.248]             `+` <- base::`+`
[13:37:10.248]             `<<-` <- base::`<<-`
[13:37:10.248]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:10.248]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:10.248]                   3L)]
[13:37:10.248]             }
[13:37:10.248]             function(cond) {
[13:37:10.248]                 is_error <- inherits(cond, "error")
[13:37:10.248]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:10.248]                   NULL)
[13:37:10.248]                 if (is_error) {
[13:37:10.248]                   sessionInformation <- function() {
[13:37:10.248]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:10.248]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:10.248]                       search = base::search(), system = base::Sys.info())
[13:37:10.248]                   }
[13:37:10.248]                   ...future.conditions[[length(...future.conditions) + 
[13:37:10.248]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:10.248]                     cond$call), session = sessionInformation(), 
[13:37:10.248]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:10.248]                   signalCondition(cond)
[13:37:10.248]                 }
[13:37:10.248]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:10.248]                 "immediateCondition"))) {
[13:37:10.248]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:10.248]                   ...future.conditions[[length(...future.conditions) + 
[13:37:10.248]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:10.248]                   if (TRUE && !signal) {
[13:37:10.248]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:10.248]                     {
[13:37:10.248]                       inherits <- base::inherits
[13:37:10.248]                       invokeRestart <- base::invokeRestart
[13:37:10.248]                       is.null <- base::is.null
[13:37:10.248]                       muffled <- FALSE
[13:37:10.248]                       if (inherits(cond, "message")) {
[13:37:10.248]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:10.248]                         if (muffled) 
[13:37:10.248]                           invokeRestart("muffleMessage")
[13:37:10.248]                       }
[13:37:10.248]                       else if (inherits(cond, "warning")) {
[13:37:10.248]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:10.248]                         if (muffled) 
[13:37:10.248]                           invokeRestart("muffleWarning")
[13:37:10.248]                       }
[13:37:10.248]                       else if (inherits(cond, "condition")) {
[13:37:10.248]                         if (!is.null(pattern)) {
[13:37:10.248]                           computeRestarts <- base::computeRestarts
[13:37:10.248]                           grepl <- base::grepl
[13:37:10.248]                           restarts <- computeRestarts(cond)
[13:37:10.248]                           for (restart in restarts) {
[13:37:10.248]                             name <- restart$name
[13:37:10.248]                             if (is.null(name)) 
[13:37:10.248]                               next
[13:37:10.248]                             if (!grepl(pattern, name)) 
[13:37:10.248]                               next
[13:37:10.248]                             invokeRestart(restart)
[13:37:10.248]                             muffled <- TRUE
[13:37:10.248]                             break
[13:37:10.248]                           }
[13:37:10.248]                         }
[13:37:10.248]                       }
[13:37:10.248]                       invisible(muffled)
[13:37:10.248]                     }
[13:37:10.248]                     muffleCondition(cond, pattern = "^muffle")
[13:37:10.248]                   }
[13:37:10.248]                 }
[13:37:10.248]                 else {
[13:37:10.248]                   if (TRUE) {
[13:37:10.248]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:10.248]                     {
[13:37:10.248]                       inherits <- base::inherits
[13:37:10.248]                       invokeRestart <- base::invokeRestart
[13:37:10.248]                       is.null <- base::is.null
[13:37:10.248]                       muffled <- FALSE
[13:37:10.248]                       if (inherits(cond, "message")) {
[13:37:10.248]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:10.248]                         if (muffled) 
[13:37:10.248]                           invokeRestart("muffleMessage")
[13:37:10.248]                       }
[13:37:10.248]                       else if (inherits(cond, "warning")) {
[13:37:10.248]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:10.248]                         if (muffled) 
[13:37:10.248]                           invokeRestart("muffleWarning")
[13:37:10.248]                       }
[13:37:10.248]                       else if (inherits(cond, "condition")) {
[13:37:10.248]                         if (!is.null(pattern)) {
[13:37:10.248]                           computeRestarts <- base::computeRestarts
[13:37:10.248]                           grepl <- base::grepl
[13:37:10.248]                           restarts <- computeRestarts(cond)
[13:37:10.248]                           for (restart in restarts) {
[13:37:10.248]                             name <- restart$name
[13:37:10.248]                             if (is.null(name)) 
[13:37:10.248]                               next
[13:37:10.248]                             if (!grepl(pattern, name)) 
[13:37:10.248]                               next
[13:37:10.248]                             invokeRestart(restart)
[13:37:10.248]                             muffled <- TRUE
[13:37:10.248]                             break
[13:37:10.248]                           }
[13:37:10.248]                         }
[13:37:10.248]                       }
[13:37:10.248]                       invisible(muffled)
[13:37:10.248]                     }
[13:37:10.248]                     muffleCondition(cond, pattern = "^muffle")
[13:37:10.248]                   }
[13:37:10.248]                 }
[13:37:10.248]             }
[13:37:10.248]         }))
[13:37:10.248]     }, error = function(ex) {
[13:37:10.248]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:10.248]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:10.248]                 ...future.rng), started = ...future.startTime, 
[13:37:10.248]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:10.248]             version = "1.8"), class = "FutureResult")
[13:37:10.248]     }, finally = {
[13:37:10.248]         if (!identical(...future.workdir, getwd())) 
[13:37:10.248]             setwd(...future.workdir)
[13:37:10.248]         {
[13:37:10.248]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:10.248]                 ...future.oldOptions$nwarnings <- NULL
[13:37:10.248]             }
[13:37:10.248]             base::options(...future.oldOptions)
[13:37:10.248]             if (.Platform$OS.type == "windows") {
[13:37:10.248]                 old_names <- names(...future.oldEnvVars)
[13:37:10.248]                 envs <- base::Sys.getenv()
[13:37:10.248]                 names <- names(envs)
[13:37:10.248]                 common <- intersect(names, old_names)
[13:37:10.248]                 added <- setdiff(names, old_names)
[13:37:10.248]                 removed <- setdiff(old_names, names)
[13:37:10.248]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:10.248]                   envs[common]]
[13:37:10.248]                 NAMES <- toupper(changed)
[13:37:10.248]                 args <- list()
[13:37:10.248]                 for (kk in seq_along(NAMES)) {
[13:37:10.248]                   name <- changed[[kk]]
[13:37:10.248]                   NAME <- NAMES[[kk]]
[13:37:10.248]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:10.248]                     next
[13:37:10.248]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:10.248]                 }
[13:37:10.248]                 NAMES <- toupper(added)
[13:37:10.248]                 for (kk in seq_along(NAMES)) {
[13:37:10.248]                   name <- added[[kk]]
[13:37:10.248]                   NAME <- NAMES[[kk]]
[13:37:10.248]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:10.248]                     next
[13:37:10.248]                   args[[name]] <- ""
[13:37:10.248]                 }
[13:37:10.248]                 NAMES <- toupper(removed)
[13:37:10.248]                 for (kk in seq_along(NAMES)) {
[13:37:10.248]                   name <- removed[[kk]]
[13:37:10.248]                   NAME <- NAMES[[kk]]
[13:37:10.248]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:10.248]                     next
[13:37:10.248]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:10.248]                 }
[13:37:10.248]                 if (length(args) > 0) 
[13:37:10.248]                   base::do.call(base::Sys.setenv, args = args)
[13:37:10.248]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:10.248]             }
[13:37:10.248]             else {
[13:37:10.248]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:10.248]             }
[13:37:10.248]             {
[13:37:10.248]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:10.248]                   0L) {
[13:37:10.248]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:10.248]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:10.248]                   base::options(opts)
[13:37:10.248]                 }
[13:37:10.248]                 {
[13:37:10.248]                   {
[13:37:10.248]                     NULL
[13:37:10.248]                     RNGkind("Mersenne-Twister")
[13:37:10.248]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:37:10.248]                       inherits = FALSE)
[13:37:10.248]                   }
[13:37:10.248]                   options(future.plan = NULL)
[13:37:10.248]                   if (is.na(NA_character_)) 
[13:37:10.248]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:10.248]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:10.248]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:10.248]                     .init = FALSE)
[13:37:10.248]                 }
[13:37:10.248]             }
[13:37:10.248]         }
[13:37:10.248]     })
[13:37:10.248]     if (TRUE) {
[13:37:10.248]         base::sink(type = "output", split = FALSE)
[13:37:10.248]         if (TRUE) {
[13:37:10.248]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:10.248]         }
[13:37:10.248]         else {
[13:37:10.248]             ...future.result["stdout"] <- base::list(NULL)
[13:37:10.248]         }
[13:37:10.248]         base::close(...future.stdout)
[13:37:10.248]         ...future.stdout <- NULL
[13:37:10.248]     }
[13:37:10.248]     ...future.result$conditions <- ...future.conditions
[13:37:10.248]     ...future.result$finished <- base::Sys.time()
[13:37:10.248]     ...future.result
[13:37:10.248] }
[13:37:10.249] assign_globals() ...
[13:37:10.251] List of 2
[13:37:10.251]  $ a: num 2
[13:37:10.251]  $ b: num 3
[13:37:10.251]  - attr(*, "where")=List of 2
[13:37:10.251]   ..$ a:<environment: R_EmptyEnv> 
[13:37:10.251]   ..$ b:<environment: R_EmptyEnv> 
[13:37:10.251]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:37:10.251]  - attr(*, "resolved")= logi FALSE
[13:37:10.251]  - attr(*, "total_size")= num 112
[13:37:10.254] - copied ‘a’ to environment
[13:37:10.254] - copied ‘b’ to environment
[13:37:10.254] assign_globals() ... done
[13:37:10.254] plan(): Setting new future strategy stack:
[13:37:10.254] List of future strategies:
[13:37:10.254] 1. sequential:
[13:37:10.254]    - args: function (..., envir = parent.frame())
[13:37:10.254]    - tweaked: FALSE
[13:37:10.254]    - call: NULL
[13:37:10.255] plan(): nbrOfWorkers() = 1
[13:37:10.255] plan(): Setting new future strategy stack:
[13:37:10.256] List of future strategies:
[13:37:10.256] 1. sequential:
[13:37:10.256]    - args: function (..., envir = parent.frame())
[13:37:10.256]    - tweaked: FALSE
[13:37:10.256]    - call: future::plan("sequential")
[13:37:10.256] plan(): nbrOfWorkers() = 1
[13:37:10.256] SequentialFuture started (and completed)
> print(v)
[1] 6
> stopifnot(v == yTruth)
> 
> message("*** multisession(..., workers = 1L) ... DONE")
*** multisession(..., workers = 1L) ... DONE
> 
> message("*** multisession(..., gc = TRUE) ...")
*** multisession(..., gc = TRUE) ...
> plan(multisession, workers = 2L)
[13:37:10.257] plan(): Setting new future strategy stack:
[13:37:10.257] List of future strategies:
[13:37:10.257] 1. multisession:
[13:37:10.257]    - args: function (..., workers = 2L, envir = parent.frame())
[13:37:10.257]    - tweaked: TRUE
[13:37:10.257]    - call: plan(multisession, workers = 2L)
[13:37:10.272] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:37:10.272] multisession:
[13:37:10.272] - args: function (..., workers = 2L, envir = parent.frame())
[13:37:10.272] - tweaked: TRUE
[13:37:10.272] - call: plan(multisession, workers = 2L)
[13:37:10.273] getGlobalsAndPackages() ...
[13:37:10.273] Not searching for globals
[13:37:10.273] - globals: [0] <none>
[13:37:10.273] getGlobalsAndPackages() ... DONE
[13:37:10.273] [local output] makeClusterPSOCK() ...
[13:37:10.277] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:37:10.277] [local output] Base port: 11673
[13:37:10.277] [local output] Getting setup options for 2 cluster nodes ...
[13:37:10.278] [local output]  - Node 1 of 2 ...
[13:37:10.278] [local output] localMachine=TRUE => revtunnel=FALSE

[13:37:10.279] [local output] Rscript port: 11673

[13:37:10.279] [local output]  - Node 2 of 2 ...
[13:37:10.279] [local output] localMachine=TRUE => revtunnel=FALSE

[13:37:10.280] [local output] Rscript port: 11673

[13:37:10.280] [local output] Getting setup options for 2 cluster nodes ... done
[13:37:10.280] [local output]  - Parallel setup requested for some PSOCK nodes
[13:37:10.280] [local output] Setting up PSOCK nodes in parallel
[13:37:10.280] List of 36
[13:37:10.280]  $ worker          : chr "localhost"
[13:37:10.280]   ..- attr(*, "localhost")= logi TRUE
[13:37:10.280]  $ master          : chr "localhost"
[13:37:10.280]  $ port            : int 11673
[13:37:10.280]  $ connectTimeout  : num 120
[13:37:10.280]  $ timeout         : num 2592000
[13:37:10.280]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:37:10.280]  $ homogeneous     : logi TRUE
[13:37:10.280]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:37:10.280]  $ rscript_envs    : NULL
[13:37:10.280]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:37:10.280]  $ rscript_startup : NULL
[13:37:10.280]  $ rscript_sh      : chr "sh"
[13:37:10.280]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:37:10.280]  $ methods         : logi TRUE
[13:37:10.280]  $ socketOptions   : chr "no-delay"
[13:37:10.280]  $ useXDR          : logi FALSE
[13:37:10.280]  $ outfile         : chr "/dev/null"
[13:37:10.280]  $ renice          : int NA
[13:37:10.280]  $ rshcmd          : NULL
[13:37:10.280]  $ user            : chr(0) 
[13:37:10.280]  $ revtunnel       : logi FALSE
[13:37:10.280]  $ rshlogfile      : NULL
[13:37:10.280]  $ rshopts         : chr(0) 
[13:37:10.280]  $ rank            : int 1
[13:37:10.280]  $ manual          : logi FALSE
[13:37:10.280]  $ dryrun          : logi FALSE
[13:37:10.280]  $ quiet           : logi FALSE
[13:37:10.280]  $ setup_strategy  : chr "parallel"
[13:37:10.280]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:37:10.280]  $ pidfile         : chr "/tmp/RtmppDRSMv/worker.rank=1.parallelly.parent=86163.150937ba898f5.pid"
[13:37:10.280]  $ rshcmd_label    : NULL
[13:37:10.280]  $ rsh_call        : NULL
[13:37:10.280]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:37:10.280]  $ localMachine    : logi TRUE
[13:37:10.280]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:37:10.280]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:37:10.280]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:37:10.280]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:37:10.280]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:37:10.280]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:37:10.280]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:37:10.280]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:37:10.280]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:37:10.280]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:37:10.280]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:37:10.280]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:37:10.280]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:37:10.280]  $ arguments       :List of 28
[13:37:10.280]   ..$ worker          : chr "localhost"
[13:37:10.280]   ..$ master          : NULL
[13:37:10.280]   ..$ port            : int 11673
[13:37:10.280]   ..$ connectTimeout  : num 120
[13:37:10.280]   ..$ timeout         : num 2592000
[13:37:10.280]   ..$ rscript         : NULL
[13:37:10.280]   ..$ homogeneous     : NULL
[13:37:10.280]   ..$ rscript_args    : NULL
[13:37:10.280]   ..$ rscript_envs    : NULL
[13:37:10.280]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:37:10.280]   ..$ rscript_startup : NULL
[13:37:10.280]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:37:10.280]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:37:10.280]   ..$ methods         : logi TRUE
[13:37:10.280]   ..$ socketOptions   : chr "no-delay"
[13:37:10.280]   ..$ useXDR          : logi FALSE
[13:37:10.280]   ..$ outfile         : chr "/dev/null"
[13:37:10.280]   ..$ renice          : int NA
[13:37:10.280]   ..$ rshcmd          : NULL
[13:37:10.280]   ..$ user            : NULL
[13:37:10.280]   ..$ revtunnel       : logi NA
[13:37:10.280]   ..$ rshlogfile      : NULL
[13:37:10.280]   ..$ rshopts         : NULL
[13:37:10.280]   ..$ rank            : int 1
[13:37:10.280]   ..$ manual          : logi FALSE
[13:37:10.280]   ..$ dryrun          : logi FALSE
[13:37:10.280]   ..$ quiet           : logi FALSE
[13:37:10.280]   ..$ setup_strategy  : chr "parallel"
[13:37:10.280]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:37:10.297] [local output] System call to launch all workers:
[13:37:10.297] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmppDRSMv/worker.rank=1.parallelly.parent=86163.150937ba898f5.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11673 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:37:10.298] [local output] Starting PSOCK main server
[13:37:10.299] [local output] Workers launched
[13:37:10.299] [local output] Waiting for workers to connect back
[13:37:10.299]  - [local output] 0 workers out of 2 ready
[13:37:10.548]  - [local output] 0 workers out of 2 ready
[13:37:10.549]  - [local output] 1 workers out of 2 ready
[13:37:10.550]  - [local output] 1 workers out of 2 ready
[13:37:10.550]  - [local output] 2 workers out of 2 ready
[13:37:10.550] [local output] Launching of workers completed
[13:37:10.551] [local output] Collecting session information from workers
[13:37:10.551] [local output]  - Worker #1 of 2
[13:37:10.552] [local output]  - Worker #2 of 2
[13:37:10.552] [local output] makeClusterPSOCK() ... done
[13:37:10.562] Packages needed by the future expression (n = 0): <none>
[13:37:10.563] Packages needed by future strategies (n = 0): <none>
[13:37:10.563] {
[13:37:10.563]     {
[13:37:10.563]         {
[13:37:10.563]             ...future.startTime <- base::Sys.time()
[13:37:10.563]             {
[13:37:10.563]                 {
[13:37:10.563]                   {
[13:37:10.563]                     {
[13:37:10.563]                       base::local({
[13:37:10.563]                         has_future <- base::requireNamespace("future", 
[13:37:10.563]                           quietly = TRUE)
[13:37:10.563]                         if (has_future) {
[13:37:10.563]                           ns <- base::getNamespace("future")
[13:37:10.563]                           version <- ns[[".package"]][["version"]]
[13:37:10.563]                           if (is.null(version)) 
[13:37:10.563]                             version <- utils::packageVersion("future")
[13:37:10.563]                         }
[13:37:10.563]                         else {
[13:37:10.563]                           version <- NULL
[13:37:10.563]                         }
[13:37:10.563]                         if (!has_future || version < "1.8.0") {
[13:37:10.563]                           info <- base::c(r_version = base::gsub("R version ", 
[13:37:10.563]                             "", base::R.version$version.string), 
[13:37:10.563]                             platform = base::sprintf("%s (%s-bit)", 
[13:37:10.563]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:10.563]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:10.563]                               "release", "version")], collapse = " "), 
[13:37:10.563]                             hostname = base::Sys.info()[["nodename"]])
[13:37:10.563]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:37:10.563]                             info)
[13:37:10.563]                           info <- base::paste(info, collapse = "; ")
[13:37:10.563]                           if (!has_future) {
[13:37:10.563]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:10.563]                               info)
[13:37:10.563]                           }
[13:37:10.563]                           else {
[13:37:10.563]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:10.563]                               info, version)
[13:37:10.563]                           }
[13:37:10.563]                           base::stop(msg)
[13:37:10.563]                         }
[13:37:10.563]                       })
[13:37:10.563]                     }
[13:37:10.563]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:37:10.563]                     base::options(mc.cores = 1L)
[13:37:10.563]                   }
[13:37:10.563]                   ...future.strategy.old <- future::plan("list")
[13:37:10.563]                   options(future.plan = NULL)
[13:37:10.563]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:10.563]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:10.563]                 }
[13:37:10.563]                 ...future.workdir <- getwd()
[13:37:10.563]             }
[13:37:10.563]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:10.563]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:10.563]         }
[13:37:10.563]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:10.563]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:10.563]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:10.563]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:10.563]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:10.563]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:10.563]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:10.563]             base::names(...future.oldOptions))
[13:37:10.563]     }
[13:37:10.563]     if (FALSE) {
[13:37:10.563]     }
[13:37:10.563]     else {
[13:37:10.563]         if (TRUE) {
[13:37:10.563]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:10.563]                 open = "w")
[13:37:10.563]         }
[13:37:10.563]         else {
[13:37:10.563]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:10.563]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:10.563]         }
[13:37:10.563]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:10.563]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:10.563]             base::sink(type = "output", split = FALSE)
[13:37:10.563]             base::close(...future.stdout)
[13:37:10.563]         }, add = TRUE)
[13:37:10.563]     }
[13:37:10.563]     ...future.frame <- base::sys.nframe()
[13:37:10.563]     ...future.conditions <- base::list()
[13:37:10.563]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:10.563]     if (FALSE) {
[13:37:10.563]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:10.563]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:10.563]     }
[13:37:10.563]     ...future.result <- base::tryCatch({
[13:37:10.563]         base::withCallingHandlers({
[13:37:10.563]             ...future.value <- base::withVisible(base::local({
[13:37:10.563]                 ...future.makeSendCondition <- base::local({
[13:37:10.563]                   sendCondition <- NULL
[13:37:10.563]                   function(frame = 1L) {
[13:37:10.563]                     if (is.function(sendCondition)) 
[13:37:10.563]                       return(sendCondition)
[13:37:10.563]                     ns <- getNamespace("parallel")
[13:37:10.563]                     if (exists("sendData", mode = "function", 
[13:37:10.563]                       envir = ns)) {
[13:37:10.563]                       parallel_sendData <- get("sendData", mode = "function", 
[13:37:10.563]                         envir = ns)
[13:37:10.563]                       envir <- sys.frame(frame)
[13:37:10.563]                       master <- NULL
[13:37:10.563]                       while (!identical(envir, .GlobalEnv) && 
[13:37:10.563]                         !identical(envir, emptyenv())) {
[13:37:10.563]                         if (exists("master", mode = "list", envir = envir, 
[13:37:10.563]                           inherits = FALSE)) {
[13:37:10.563]                           master <- get("master", mode = "list", 
[13:37:10.563]                             envir = envir, inherits = FALSE)
[13:37:10.563]                           if (inherits(master, c("SOCKnode", 
[13:37:10.563]                             "SOCK0node"))) {
[13:37:10.563]                             sendCondition <<- function(cond) {
[13:37:10.563]                               data <- list(type = "VALUE", value = cond, 
[13:37:10.563]                                 success = TRUE)
[13:37:10.563]                               parallel_sendData(master, data)
[13:37:10.563]                             }
[13:37:10.563]                             return(sendCondition)
[13:37:10.563]                           }
[13:37:10.563]                         }
[13:37:10.563]                         frame <- frame + 1L
[13:37:10.563]                         envir <- sys.frame(frame)
[13:37:10.563]                       }
[13:37:10.563]                     }
[13:37:10.563]                     sendCondition <<- function(cond) NULL
[13:37:10.563]                   }
[13:37:10.563]                 })
[13:37:10.563]                 withCallingHandlers({
[13:37:10.563]                   NA
[13:37:10.563]                 }, immediateCondition = function(cond) {
[13:37:10.563]                   sendCondition <- ...future.makeSendCondition()
[13:37:10.563]                   sendCondition(cond)
[13:37:10.563]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:10.563]                   {
[13:37:10.563]                     inherits <- base::inherits
[13:37:10.563]                     invokeRestart <- base::invokeRestart
[13:37:10.563]                     is.null <- base::is.null
[13:37:10.563]                     muffled <- FALSE
[13:37:10.563]                     if (inherits(cond, "message")) {
[13:37:10.563]                       muffled <- grepl(pattern, "muffleMessage")
[13:37:10.563]                       if (muffled) 
[13:37:10.563]                         invokeRestart("muffleMessage")
[13:37:10.563]                     }
[13:37:10.563]                     else if (inherits(cond, "warning")) {
[13:37:10.563]                       muffled <- grepl(pattern, "muffleWarning")
[13:37:10.563]                       if (muffled) 
[13:37:10.563]                         invokeRestart("muffleWarning")
[13:37:10.563]                     }
[13:37:10.563]                     else if (inherits(cond, "condition")) {
[13:37:10.563]                       if (!is.null(pattern)) {
[13:37:10.563]                         computeRestarts <- base::computeRestarts
[13:37:10.563]                         grepl <- base::grepl
[13:37:10.563]                         restarts <- computeRestarts(cond)
[13:37:10.563]                         for (restart in restarts) {
[13:37:10.563]                           name <- restart$name
[13:37:10.563]                           if (is.null(name)) 
[13:37:10.563]                             next
[13:37:10.563]                           if (!grepl(pattern, name)) 
[13:37:10.563]                             next
[13:37:10.563]                           invokeRestart(restart)
[13:37:10.563]                           muffled <- TRUE
[13:37:10.563]                           break
[13:37:10.563]                         }
[13:37:10.563]                       }
[13:37:10.563]                     }
[13:37:10.563]                     invisible(muffled)
[13:37:10.563]                   }
[13:37:10.563]                   muffleCondition(cond)
[13:37:10.563]                 })
[13:37:10.563]             }))
[13:37:10.563]             future::FutureResult(value = ...future.value$value, 
[13:37:10.563]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:10.563]                   ...future.rng), globalenv = if (FALSE) 
[13:37:10.563]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:10.563]                     ...future.globalenv.names))
[13:37:10.563]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:10.563]         }, condition = base::local({
[13:37:10.563]             c <- base::c
[13:37:10.563]             inherits <- base::inherits
[13:37:10.563]             invokeRestart <- base::invokeRestart
[13:37:10.563]             length <- base::length
[13:37:10.563]             list <- base::list
[13:37:10.563]             seq.int <- base::seq.int
[13:37:10.563]             signalCondition <- base::signalCondition
[13:37:10.563]             sys.calls <- base::sys.calls
[13:37:10.563]             `[[` <- base::`[[`
[13:37:10.563]             `+` <- base::`+`
[13:37:10.563]             `<<-` <- base::`<<-`
[13:37:10.563]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:10.563]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:10.563]                   3L)]
[13:37:10.563]             }
[13:37:10.563]             function(cond) {
[13:37:10.563]                 is_error <- inherits(cond, "error")
[13:37:10.563]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:10.563]                   NULL)
[13:37:10.563]                 if (is_error) {
[13:37:10.563]                   sessionInformation <- function() {
[13:37:10.563]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:10.563]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:10.563]                       search = base::search(), system = base::Sys.info())
[13:37:10.563]                   }
[13:37:10.563]                   ...future.conditions[[length(...future.conditions) + 
[13:37:10.563]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:10.563]                     cond$call), session = sessionInformation(), 
[13:37:10.563]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:10.563]                   signalCondition(cond)
[13:37:10.563]                 }
[13:37:10.563]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:10.563]                 "immediateCondition"))) {
[13:37:10.563]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:10.563]                   ...future.conditions[[length(...future.conditions) + 
[13:37:10.563]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:10.563]                   if (TRUE && !signal) {
[13:37:10.563]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:10.563]                     {
[13:37:10.563]                       inherits <- base::inherits
[13:37:10.563]                       invokeRestart <- base::invokeRestart
[13:37:10.563]                       is.null <- base::is.null
[13:37:10.563]                       muffled <- FALSE
[13:37:10.563]                       if (inherits(cond, "message")) {
[13:37:10.563]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:10.563]                         if (muffled) 
[13:37:10.563]                           invokeRestart("muffleMessage")
[13:37:10.563]                       }
[13:37:10.563]                       else if (inherits(cond, "warning")) {
[13:37:10.563]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:10.563]                         if (muffled) 
[13:37:10.563]                           invokeRestart("muffleWarning")
[13:37:10.563]                       }
[13:37:10.563]                       else if (inherits(cond, "condition")) {
[13:37:10.563]                         if (!is.null(pattern)) {
[13:37:10.563]                           computeRestarts <- base::computeRestarts
[13:37:10.563]                           grepl <- base::grepl
[13:37:10.563]                           restarts <- computeRestarts(cond)
[13:37:10.563]                           for (restart in restarts) {
[13:37:10.563]                             name <- restart$name
[13:37:10.563]                             if (is.null(name)) 
[13:37:10.563]                               next
[13:37:10.563]                             if (!grepl(pattern, name)) 
[13:37:10.563]                               next
[13:37:10.563]                             invokeRestart(restart)
[13:37:10.563]                             muffled <- TRUE
[13:37:10.563]                             break
[13:37:10.563]                           }
[13:37:10.563]                         }
[13:37:10.563]                       }
[13:37:10.563]                       invisible(muffled)
[13:37:10.563]                     }
[13:37:10.563]                     muffleCondition(cond, pattern = "^muffle")
[13:37:10.563]                   }
[13:37:10.563]                 }
[13:37:10.563]                 else {
[13:37:10.563]                   if (TRUE) {
[13:37:10.563]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:10.563]                     {
[13:37:10.563]                       inherits <- base::inherits
[13:37:10.563]                       invokeRestart <- base::invokeRestart
[13:37:10.563]                       is.null <- base::is.null
[13:37:10.563]                       muffled <- FALSE
[13:37:10.563]                       if (inherits(cond, "message")) {
[13:37:10.563]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:10.563]                         if (muffled) 
[13:37:10.563]                           invokeRestart("muffleMessage")
[13:37:10.563]                       }
[13:37:10.563]                       else if (inherits(cond, "warning")) {
[13:37:10.563]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:10.563]                         if (muffled) 
[13:37:10.563]                           invokeRestart("muffleWarning")
[13:37:10.563]                       }
[13:37:10.563]                       else if (inherits(cond, "condition")) {
[13:37:10.563]                         if (!is.null(pattern)) {
[13:37:10.563]                           computeRestarts <- base::computeRestarts
[13:37:10.563]                           grepl <- base::grepl
[13:37:10.563]                           restarts <- computeRestarts(cond)
[13:37:10.563]                           for (restart in restarts) {
[13:37:10.563]                             name <- restart$name
[13:37:10.563]                             if (is.null(name)) 
[13:37:10.563]                               next
[13:37:10.563]                             if (!grepl(pattern, name)) 
[13:37:10.563]                               next
[13:37:10.563]                             invokeRestart(restart)
[13:37:10.563]                             muffled <- TRUE
[13:37:10.563]                             break
[13:37:10.563]                           }
[13:37:10.563]                         }
[13:37:10.563]                       }
[13:37:10.563]                       invisible(muffled)
[13:37:10.563]                     }
[13:37:10.563]                     muffleCondition(cond, pattern = "^muffle")
[13:37:10.563]                   }
[13:37:10.563]                 }
[13:37:10.563]             }
[13:37:10.563]         }))
[13:37:10.563]     }, error = function(ex) {
[13:37:10.563]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:10.563]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:10.563]                 ...future.rng), started = ...future.startTime, 
[13:37:10.563]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:10.563]             version = "1.8"), class = "FutureResult")
[13:37:10.563]     }, finally = {
[13:37:10.563]         if (!identical(...future.workdir, getwd())) 
[13:37:10.563]             setwd(...future.workdir)
[13:37:10.563]         {
[13:37:10.563]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:10.563]                 ...future.oldOptions$nwarnings <- NULL
[13:37:10.563]             }
[13:37:10.563]             base::options(...future.oldOptions)
[13:37:10.563]             if (.Platform$OS.type == "windows") {
[13:37:10.563]                 old_names <- names(...future.oldEnvVars)
[13:37:10.563]                 envs <- base::Sys.getenv()
[13:37:10.563]                 names <- names(envs)
[13:37:10.563]                 common <- intersect(names, old_names)
[13:37:10.563]                 added <- setdiff(names, old_names)
[13:37:10.563]                 removed <- setdiff(old_names, names)
[13:37:10.563]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:10.563]                   envs[common]]
[13:37:10.563]                 NAMES <- toupper(changed)
[13:37:10.563]                 args <- list()
[13:37:10.563]                 for (kk in seq_along(NAMES)) {
[13:37:10.563]                   name <- changed[[kk]]
[13:37:10.563]                   NAME <- NAMES[[kk]]
[13:37:10.563]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:10.563]                     next
[13:37:10.563]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:10.563]                 }
[13:37:10.563]                 NAMES <- toupper(added)
[13:37:10.563]                 for (kk in seq_along(NAMES)) {
[13:37:10.563]                   name <- added[[kk]]
[13:37:10.563]                   NAME <- NAMES[[kk]]
[13:37:10.563]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:10.563]                     next
[13:37:10.563]                   args[[name]] <- ""
[13:37:10.563]                 }
[13:37:10.563]                 NAMES <- toupper(removed)
[13:37:10.563]                 for (kk in seq_along(NAMES)) {
[13:37:10.563]                   name <- removed[[kk]]
[13:37:10.563]                   NAME <- NAMES[[kk]]
[13:37:10.563]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:10.563]                     next
[13:37:10.563]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:10.563]                 }
[13:37:10.563]                 if (length(args) > 0) 
[13:37:10.563]                   base::do.call(base::Sys.setenv, args = args)
[13:37:10.563]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:10.563]             }
[13:37:10.563]             else {
[13:37:10.563]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:10.563]             }
[13:37:10.563]             {
[13:37:10.563]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:10.563]                   0L) {
[13:37:10.563]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:10.563]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:10.563]                   base::options(opts)
[13:37:10.563]                 }
[13:37:10.563]                 {
[13:37:10.563]                   {
[13:37:10.563]                     base::options(mc.cores = ...future.mc.cores.old)
[13:37:10.563]                     NULL
[13:37:10.563]                   }
[13:37:10.563]                   options(future.plan = NULL)
[13:37:10.563]                   if (is.na(NA_character_)) 
[13:37:10.563]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:10.563]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:10.563]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:10.563]                     .init = FALSE)
[13:37:10.563]                 }
[13:37:10.563]             }
[13:37:10.563]         }
[13:37:10.563]     })
[13:37:10.563]     if (TRUE) {
[13:37:10.563]         base::sink(type = "output", split = FALSE)
[13:37:10.563]         if (TRUE) {
[13:37:10.563]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:10.563]         }
[13:37:10.563]         else {
[13:37:10.563]             ...future.result["stdout"] <- base::list(NULL)
[13:37:10.563]         }
[13:37:10.563]         base::close(...future.stdout)
[13:37:10.563]         ...future.stdout <- NULL
[13:37:10.563]     }
[13:37:10.563]     ...future.result$conditions <- ...future.conditions
[13:37:10.563]     ...future.result$finished <- base::Sys.time()
[13:37:10.563]     ...future.result
[13:37:10.563] }
[13:37:10.615] MultisessionFuture started
[13:37:10.615] result() for ClusterFuture ...
[13:37:10.616] receiveMessageFromWorker() for ClusterFuture ...
[13:37:10.616] - Validating connection of MultisessionFuture
[13:37:10.649] - received message: FutureResult
[13:37:10.649] - Received FutureResult
[13:37:10.649] - Erased future from FutureRegistry
[13:37:10.649] result() for ClusterFuture ...
[13:37:10.649] - result already collected: FutureResult
[13:37:10.649] result() for ClusterFuture ... done
[13:37:10.649] receiveMessageFromWorker() for ClusterFuture ... done
[13:37:10.649] result() for ClusterFuture ... done
[13:37:10.650] result() for ClusterFuture ...
[13:37:10.650] - result already collected: FutureResult
[13:37:10.650] result() for ClusterFuture ... done
[13:37:10.650] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:37:10.650] plan(): nbrOfWorkers() = 2
> 
> f <- future({ gc() })
[13:37:10.650] getGlobalsAndPackages() ...
[13:37:10.650] Searching for globals...
[13:37:10.651] - globals found: [2] ‘{’, ‘gc’
[13:37:10.651] Searching for globals ... DONE
[13:37:10.652] Resolving globals: FALSE
[13:37:10.652] 
[13:37:10.652] 
[13:37:10.652] getGlobalsAndPackages() ... DONE
[13:37:10.652] run() for ‘Future’ ...
[13:37:10.652] - state: ‘created’
[13:37:10.653] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:37:10.663] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:37:10.663] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:37:10.663]   - Field: ‘node’
[13:37:10.663]   - Field: ‘label’
[13:37:10.663]   - Field: ‘local’
[13:37:10.663]   - Field: ‘owner’
[13:37:10.664]   - Field: ‘envir’
[13:37:10.664]   - Field: ‘workers’
[13:37:10.664]   - Field: ‘packages’
[13:37:10.664]   - Field: ‘gc’
[13:37:10.664]   - Field: ‘conditions’
[13:37:10.664]   - Field: ‘persistent’
[13:37:10.664]   - Field: ‘expr’
[13:37:10.664]   - Field: ‘uuid’
[13:37:10.664]   - Field: ‘seed’
[13:37:10.664]   - Field: ‘version’
[13:37:10.665]   - Field: ‘result’
[13:37:10.665]   - Field: ‘asynchronous’
[13:37:10.665]   - Field: ‘calls’
[13:37:10.665]   - Field: ‘globals’
[13:37:10.665]   - Field: ‘stdout’
[13:37:10.665]   - Field: ‘earlySignal’
[13:37:10.665]   - Field: ‘lazy’
[13:37:10.665]   - Field: ‘state’
[13:37:10.665] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:37:10.665] - Launch lazy future ...
[13:37:10.666] Packages needed by the future expression (n = 0): <none>
[13:37:10.666] Packages needed by future strategies (n = 0): <none>
[13:37:10.666] {
[13:37:10.666]     {
[13:37:10.666]         {
[13:37:10.666]             ...future.startTime <- base::Sys.time()
[13:37:10.666]             {
[13:37:10.666]                 {
[13:37:10.666]                   {
[13:37:10.666]                     {
[13:37:10.666]                       base::local({
[13:37:10.666]                         has_future <- base::requireNamespace("future", 
[13:37:10.666]                           quietly = TRUE)
[13:37:10.666]                         if (has_future) {
[13:37:10.666]                           ns <- base::getNamespace("future")
[13:37:10.666]                           version <- ns[[".package"]][["version"]]
[13:37:10.666]                           if (is.null(version)) 
[13:37:10.666]                             version <- utils::packageVersion("future")
[13:37:10.666]                         }
[13:37:10.666]                         else {
[13:37:10.666]                           version <- NULL
[13:37:10.666]                         }
[13:37:10.666]                         if (!has_future || version < "1.8.0") {
[13:37:10.666]                           info <- base::c(r_version = base::gsub("R version ", 
[13:37:10.666]                             "", base::R.version$version.string), 
[13:37:10.666]                             platform = base::sprintf("%s (%s-bit)", 
[13:37:10.666]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:10.666]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:10.666]                               "release", "version")], collapse = " "), 
[13:37:10.666]                             hostname = base::Sys.info()[["nodename"]])
[13:37:10.666]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:37:10.666]                             info)
[13:37:10.666]                           info <- base::paste(info, collapse = "; ")
[13:37:10.666]                           if (!has_future) {
[13:37:10.666]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:10.666]                               info)
[13:37:10.666]                           }
[13:37:10.666]                           else {
[13:37:10.666]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:10.666]                               info, version)
[13:37:10.666]                           }
[13:37:10.666]                           base::stop(msg)
[13:37:10.666]                         }
[13:37:10.666]                       })
[13:37:10.666]                     }
[13:37:10.666]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:37:10.666]                     base::options(mc.cores = 1L)
[13:37:10.666]                   }
[13:37:10.666]                   ...future.strategy.old <- future::plan("list")
[13:37:10.666]                   options(future.plan = NULL)
[13:37:10.666]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:10.666]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:10.666]                 }
[13:37:10.666]                 ...future.workdir <- getwd()
[13:37:10.666]             }
[13:37:10.666]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:10.666]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:10.666]         }
[13:37:10.666]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:10.666]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:10.666]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:10.666]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:10.666]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:10.666]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:10.666]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:10.666]             base::names(...future.oldOptions))
[13:37:10.666]     }
[13:37:10.666]     if (FALSE) {
[13:37:10.666]     }
[13:37:10.666]     else {
[13:37:10.666]         if (TRUE) {
[13:37:10.666]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:10.666]                 open = "w")
[13:37:10.666]         }
[13:37:10.666]         else {
[13:37:10.666]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:10.666]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:10.666]         }
[13:37:10.666]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:10.666]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:10.666]             base::sink(type = "output", split = FALSE)
[13:37:10.666]             base::close(...future.stdout)
[13:37:10.666]         }, add = TRUE)
[13:37:10.666]     }
[13:37:10.666]     ...future.frame <- base::sys.nframe()
[13:37:10.666]     ...future.conditions <- base::list()
[13:37:10.666]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:10.666]     if (FALSE) {
[13:37:10.666]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:10.666]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:10.666]     }
[13:37:10.666]     ...future.result <- base::tryCatch({
[13:37:10.666]         base::withCallingHandlers({
[13:37:10.666]             ...future.value <- base::withVisible(base::local({
[13:37:10.666]                 ...future.makeSendCondition <- base::local({
[13:37:10.666]                   sendCondition <- NULL
[13:37:10.666]                   function(frame = 1L) {
[13:37:10.666]                     if (is.function(sendCondition)) 
[13:37:10.666]                       return(sendCondition)
[13:37:10.666]                     ns <- getNamespace("parallel")
[13:37:10.666]                     if (exists("sendData", mode = "function", 
[13:37:10.666]                       envir = ns)) {
[13:37:10.666]                       parallel_sendData <- get("sendData", mode = "function", 
[13:37:10.666]                         envir = ns)
[13:37:10.666]                       envir <- sys.frame(frame)
[13:37:10.666]                       master <- NULL
[13:37:10.666]                       while (!identical(envir, .GlobalEnv) && 
[13:37:10.666]                         !identical(envir, emptyenv())) {
[13:37:10.666]                         if (exists("master", mode = "list", envir = envir, 
[13:37:10.666]                           inherits = FALSE)) {
[13:37:10.666]                           master <- get("master", mode = "list", 
[13:37:10.666]                             envir = envir, inherits = FALSE)
[13:37:10.666]                           if (inherits(master, c("SOCKnode", 
[13:37:10.666]                             "SOCK0node"))) {
[13:37:10.666]                             sendCondition <<- function(cond) {
[13:37:10.666]                               data <- list(type = "VALUE", value = cond, 
[13:37:10.666]                                 success = TRUE)
[13:37:10.666]                               parallel_sendData(master, data)
[13:37:10.666]                             }
[13:37:10.666]                             return(sendCondition)
[13:37:10.666]                           }
[13:37:10.666]                         }
[13:37:10.666]                         frame <- frame + 1L
[13:37:10.666]                         envir <- sys.frame(frame)
[13:37:10.666]                       }
[13:37:10.666]                     }
[13:37:10.666]                     sendCondition <<- function(cond) NULL
[13:37:10.666]                   }
[13:37:10.666]                 })
[13:37:10.666]                 withCallingHandlers({
[13:37:10.666]                   {
[13:37:10.666]                     gc()
[13:37:10.666]                   }
[13:37:10.666]                 }, immediateCondition = function(cond) {
[13:37:10.666]                   sendCondition <- ...future.makeSendCondition()
[13:37:10.666]                   sendCondition(cond)
[13:37:10.666]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:10.666]                   {
[13:37:10.666]                     inherits <- base::inherits
[13:37:10.666]                     invokeRestart <- base::invokeRestart
[13:37:10.666]                     is.null <- base::is.null
[13:37:10.666]                     muffled <- FALSE
[13:37:10.666]                     if (inherits(cond, "message")) {
[13:37:10.666]                       muffled <- grepl(pattern, "muffleMessage")
[13:37:10.666]                       if (muffled) 
[13:37:10.666]                         invokeRestart("muffleMessage")
[13:37:10.666]                     }
[13:37:10.666]                     else if (inherits(cond, "warning")) {
[13:37:10.666]                       muffled <- grepl(pattern, "muffleWarning")
[13:37:10.666]                       if (muffled) 
[13:37:10.666]                         invokeRestart("muffleWarning")
[13:37:10.666]                     }
[13:37:10.666]                     else if (inherits(cond, "condition")) {
[13:37:10.666]                       if (!is.null(pattern)) {
[13:37:10.666]                         computeRestarts <- base::computeRestarts
[13:37:10.666]                         grepl <- base::grepl
[13:37:10.666]                         restarts <- computeRestarts(cond)
[13:37:10.666]                         for (restart in restarts) {
[13:37:10.666]                           name <- restart$name
[13:37:10.666]                           if (is.null(name)) 
[13:37:10.666]                             next
[13:37:10.666]                           if (!grepl(pattern, name)) 
[13:37:10.666]                             next
[13:37:10.666]                           invokeRestart(restart)
[13:37:10.666]                           muffled <- TRUE
[13:37:10.666]                           break
[13:37:10.666]                         }
[13:37:10.666]                       }
[13:37:10.666]                     }
[13:37:10.666]                     invisible(muffled)
[13:37:10.666]                   }
[13:37:10.666]                   muffleCondition(cond)
[13:37:10.666]                 })
[13:37:10.666]             }))
[13:37:10.666]             future::FutureResult(value = ...future.value$value, 
[13:37:10.666]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:10.666]                   ...future.rng), globalenv = if (FALSE) 
[13:37:10.666]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:10.666]                     ...future.globalenv.names))
[13:37:10.666]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:10.666]         }, condition = base::local({
[13:37:10.666]             c <- base::c
[13:37:10.666]             inherits <- base::inherits
[13:37:10.666]             invokeRestart <- base::invokeRestart
[13:37:10.666]             length <- base::length
[13:37:10.666]             list <- base::list
[13:37:10.666]             seq.int <- base::seq.int
[13:37:10.666]             signalCondition <- base::signalCondition
[13:37:10.666]             sys.calls <- base::sys.calls
[13:37:10.666]             `[[` <- base::`[[`
[13:37:10.666]             `+` <- base::`+`
[13:37:10.666]             `<<-` <- base::`<<-`
[13:37:10.666]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:10.666]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:10.666]                   3L)]
[13:37:10.666]             }
[13:37:10.666]             function(cond) {
[13:37:10.666]                 is_error <- inherits(cond, "error")
[13:37:10.666]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:10.666]                   NULL)
[13:37:10.666]                 if (is_error) {
[13:37:10.666]                   sessionInformation <- function() {
[13:37:10.666]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:10.666]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:10.666]                       search = base::search(), system = base::Sys.info())
[13:37:10.666]                   }
[13:37:10.666]                   ...future.conditions[[length(...future.conditions) + 
[13:37:10.666]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:10.666]                     cond$call), session = sessionInformation(), 
[13:37:10.666]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:10.666]                   signalCondition(cond)
[13:37:10.666]                 }
[13:37:10.666]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:10.666]                 "immediateCondition"))) {
[13:37:10.666]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:10.666]                   ...future.conditions[[length(...future.conditions) + 
[13:37:10.666]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:10.666]                   if (TRUE && !signal) {
[13:37:10.666]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:10.666]                     {
[13:37:10.666]                       inherits <- base::inherits
[13:37:10.666]                       invokeRestart <- base::invokeRestart
[13:37:10.666]                       is.null <- base::is.null
[13:37:10.666]                       muffled <- FALSE
[13:37:10.666]                       if (inherits(cond, "message")) {
[13:37:10.666]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:10.666]                         if (muffled) 
[13:37:10.666]                           invokeRestart("muffleMessage")
[13:37:10.666]                       }
[13:37:10.666]                       else if (inherits(cond, "warning")) {
[13:37:10.666]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:10.666]                         if (muffled) 
[13:37:10.666]                           invokeRestart("muffleWarning")
[13:37:10.666]                       }
[13:37:10.666]                       else if (inherits(cond, "condition")) {
[13:37:10.666]                         if (!is.null(pattern)) {
[13:37:10.666]                           computeRestarts <- base::computeRestarts
[13:37:10.666]                           grepl <- base::grepl
[13:37:10.666]                           restarts <- computeRestarts(cond)
[13:37:10.666]                           for (restart in restarts) {
[13:37:10.666]                             name <- restart$name
[13:37:10.666]                             if (is.null(name)) 
[13:37:10.666]                               next
[13:37:10.666]                             if (!grepl(pattern, name)) 
[13:37:10.666]                               next
[13:37:10.666]                             invokeRestart(restart)
[13:37:10.666]                             muffled <- TRUE
[13:37:10.666]                             break
[13:37:10.666]                           }
[13:37:10.666]                         }
[13:37:10.666]                       }
[13:37:10.666]                       invisible(muffled)
[13:37:10.666]                     }
[13:37:10.666]                     muffleCondition(cond, pattern = "^muffle")
[13:37:10.666]                   }
[13:37:10.666]                 }
[13:37:10.666]                 else {
[13:37:10.666]                   if (TRUE) {
[13:37:10.666]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:10.666]                     {
[13:37:10.666]                       inherits <- base::inherits
[13:37:10.666]                       invokeRestart <- base::invokeRestart
[13:37:10.666]                       is.null <- base::is.null
[13:37:10.666]                       muffled <- FALSE
[13:37:10.666]                       if (inherits(cond, "message")) {
[13:37:10.666]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:10.666]                         if (muffled) 
[13:37:10.666]                           invokeRestart("muffleMessage")
[13:37:10.666]                       }
[13:37:10.666]                       else if (inherits(cond, "warning")) {
[13:37:10.666]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:10.666]                         if (muffled) 
[13:37:10.666]                           invokeRestart("muffleWarning")
[13:37:10.666]                       }
[13:37:10.666]                       else if (inherits(cond, "condition")) {
[13:37:10.666]                         if (!is.null(pattern)) {
[13:37:10.666]                           computeRestarts <- base::computeRestarts
[13:37:10.666]                           grepl <- base::grepl
[13:37:10.666]                           restarts <- computeRestarts(cond)
[13:37:10.666]                           for (restart in restarts) {
[13:37:10.666]                             name <- restart$name
[13:37:10.666]                             if (is.null(name)) 
[13:37:10.666]                               next
[13:37:10.666]                             if (!grepl(pattern, name)) 
[13:37:10.666]                               next
[13:37:10.666]                             invokeRestart(restart)
[13:37:10.666]                             muffled <- TRUE
[13:37:10.666]                             break
[13:37:10.666]                           }
[13:37:10.666]                         }
[13:37:10.666]                       }
[13:37:10.666]                       invisible(muffled)
[13:37:10.666]                     }
[13:37:10.666]                     muffleCondition(cond, pattern = "^muffle")
[13:37:10.666]                   }
[13:37:10.666]                 }
[13:37:10.666]             }
[13:37:10.666]         }))
[13:37:10.666]     }, error = function(ex) {
[13:37:10.666]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:10.666]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:10.666]                 ...future.rng), started = ...future.startTime, 
[13:37:10.666]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:10.666]             version = "1.8"), class = "FutureResult")
[13:37:10.666]     }, finally = {
[13:37:10.666]         if (!identical(...future.workdir, getwd())) 
[13:37:10.666]             setwd(...future.workdir)
[13:37:10.666]         {
[13:37:10.666]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:10.666]                 ...future.oldOptions$nwarnings <- NULL
[13:37:10.666]             }
[13:37:10.666]             base::options(...future.oldOptions)
[13:37:10.666]             if (.Platform$OS.type == "windows") {
[13:37:10.666]                 old_names <- names(...future.oldEnvVars)
[13:37:10.666]                 envs <- base::Sys.getenv()
[13:37:10.666]                 names <- names(envs)
[13:37:10.666]                 common <- intersect(names, old_names)
[13:37:10.666]                 added <- setdiff(names, old_names)
[13:37:10.666]                 removed <- setdiff(old_names, names)
[13:37:10.666]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:10.666]                   envs[common]]
[13:37:10.666]                 NAMES <- toupper(changed)
[13:37:10.666]                 args <- list()
[13:37:10.666]                 for (kk in seq_along(NAMES)) {
[13:37:10.666]                   name <- changed[[kk]]
[13:37:10.666]                   NAME <- NAMES[[kk]]
[13:37:10.666]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:10.666]                     next
[13:37:10.666]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:10.666]                 }
[13:37:10.666]                 NAMES <- toupper(added)
[13:37:10.666]                 for (kk in seq_along(NAMES)) {
[13:37:10.666]                   name <- added[[kk]]
[13:37:10.666]                   NAME <- NAMES[[kk]]
[13:37:10.666]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:10.666]                     next
[13:37:10.666]                   args[[name]] <- ""
[13:37:10.666]                 }
[13:37:10.666]                 NAMES <- toupper(removed)
[13:37:10.666]                 for (kk in seq_along(NAMES)) {
[13:37:10.666]                   name <- removed[[kk]]
[13:37:10.666]                   NAME <- NAMES[[kk]]
[13:37:10.666]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:10.666]                     next
[13:37:10.666]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:10.666]                 }
[13:37:10.666]                 if (length(args) > 0) 
[13:37:10.666]                   base::do.call(base::Sys.setenv, args = args)
[13:37:10.666]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:10.666]             }
[13:37:10.666]             else {
[13:37:10.666]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:10.666]             }
[13:37:10.666]             {
[13:37:10.666]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:10.666]                   0L) {
[13:37:10.666]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:10.666]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:10.666]                   base::options(opts)
[13:37:10.666]                 }
[13:37:10.666]                 {
[13:37:10.666]                   {
[13:37:10.666]                     base::options(mc.cores = ...future.mc.cores.old)
[13:37:10.666]                     NULL
[13:37:10.666]                   }
[13:37:10.666]                   options(future.plan = NULL)
[13:37:10.666]                   if (is.na(NA_character_)) 
[13:37:10.666]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:10.666]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:10.666]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:10.666]                     .init = FALSE)
[13:37:10.666]                 }
[13:37:10.666]             }
[13:37:10.666]         }
[13:37:10.666]     })
[13:37:10.666]     if (TRUE) {
[13:37:10.666]         base::sink(type = "output", split = FALSE)
[13:37:10.666]         if (TRUE) {
[13:37:10.666]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:10.666]         }
[13:37:10.666]         else {
[13:37:10.666]             ...future.result["stdout"] <- base::list(NULL)
[13:37:10.666]         }
[13:37:10.666]         base::close(...future.stdout)
[13:37:10.666]         ...future.stdout <- NULL
[13:37:10.666]     }
[13:37:10.666]     ...future.result$conditions <- ...future.conditions
[13:37:10.666]     ...future.result$finished <- base::Sys.time()
[13:37:10.666]     ...future.result
[13:37:10.666] }
[13:37:10.669] MultisessionFuture started
[13:37:10.669] - Launch lazy future ... done
[13:37:10.669] run() for ‘MultisessionFuture’ ... done
> v <- value(f)
[13:37:10.669] result() for ClusterFuture ...
[13:37:10.670] receiveMessageFromWorker() for ClusterFuture ...
[13:37:10.670] - Validating connection of MultisessionFuture
[13:37:10.697] - received message: FutureResult
[13:37:10.698] - Received FutureResult
[13:37:10.698] - Erased future from FutureRegistry
[13:37:10.698] result() for ClusterFuture ...
[13:37:10.698] - result already collected: FutureResult
[13:37:10.698] result() for ClusterFuture ... done
[13:37:10.698] receiveMessageFromWorker() for ClusterFuture ... done
[13:37:10.698] result() for ClusterFuture ... done
[13:37:10.698] result() for ClusterFuture ...
[13:37:10.699] - result already collected: FutureResult
[13:37:10.699] result() for ClusterFuture ... done
> print(v)
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 394778 21.1     664331 35.5   664331 35.5
Vcells 703836  5.4    8388608 64.0  1814363 13.9
> 
> f <- future({ integer(10e6) })
[13:37:10.699] getGlobalsAndPackages() ...
[13:37:10.699] Searching for globals...
[13:37:10.700] - globals found: [2] ‘{’, ‘integer’
[13:37:10.700] Searching for globals ... DONE
[13:37:10.700] Resolving globals: FALSE
[13:37:10.700] 
[13:37:10.701] 
[13:37:10.701] getGlobalsAndPackages() ... DONE
[13:37:10.701] run() for ‘Future’ ...
[13:37:10.701] - state: ‘created’
[13:37:10.701] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:37:10.712] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:37:10.712] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:37:10.712]   - Field: ‘node’
[13:37:10.712]   - Field: ‘label’
[13:37:10.712]   - Field: ‘local’
[13:37:10.712]   - Field: ‘owner’
[13:37:10.712]   - Field: ‘envir’
[13:37:10.713]   - Field: ‘workers’
[13:37:10.713]   - Field: ‘packages’
[13:37:10.713]   - Field: ‘gc’
[13:37:10.713]   - Field: ‘conditions’
[13:37:10.713]   - Field: ‘persistent’
[13:37:10.715]   - Field: ‘expr’
[13:37:10.715]   - Field: ‘uuid’
[13:37:10.715]   - Field: ‘seed’
[13:37:10.715]   - Field: ‘version’
[13:37:10.716]   - Field: ‘result’
[13:37:10.716]   - Field: ‘asynchronous’
[13:37:10.716]   - Field: ‘calls’
[13:37:10.716]   - Field: ‘globals’
[13:37:10.716]   - Field: ‘stdout’
[13:37:10.716]   - Field: ‘earlySignal’
[13:37:10.716]   - Field: ‘lazy’
[13:37:10.716]   - Field: ‘state’
[13:37:10.716] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:37:10.716] - Launch lazy future ...
[13:37:10.717] Packages needed by the future expression (n = 0): <none>
[13:37:10.717] Packages needed by future strategies (n = 0): <none>
[13:37:10.717] {
[13:37:10.717]     {
[13:37:10.717]         {
[13:37:10.717]             ...future.startTime <- base::Sys.time()
[13:37:10.717]             {
[13:37:10.717]                 {
[13:37:10.717]                   {
[13:37:10.717]                     {
[13:37:10.717]                       base::local({
[13:37:10.717]                         has_future <- base::requireNamespace("future", 
[13:37:10.717]                           quietly = TRUE)
[13:37:10.717]                         if (has_future) {
[13:37:10.717]                           ns <- base::getNamespace("future")
[13:37:10.717]                           version <- ns[[".package"]][["version"]]
[13:37:10.717]                           if (is.null(version)) 
[13:37:10.717]                             version <- utils::packageVersion("future")
[13:37:10.717]                         }
[13:37:10.717]                         else {
[13:37:10.717]                           version <- NULL
[13:37:10.717]                         }
[13:37:10.717]                         if (!has_future || version < "1.8.0") {
[13:37:10.717]                           info <- base::c(r_version = base::gsub("R version ", 
[13:37:10.717]                             "", base::R.version$version.string), 
[13:37:10.717]                             platform = base::sprintf("%s (%s-bit)", 
[13:37:10.717]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:10.717]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:10.717]                               "release", "version")], collapse = " "), 
[13:37:10.717]                             hostname = base::Sys.info()[["nodename"]])
[13:37:10.717]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:37:10.717]                             info)
[13:37:10.717]                           info <- base::paste(info, collapse = "; ")
[13:37:10.717]                           if (!has_future) {
[13:37:10.717]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:10.717]                               info)
[13:37:10.717]                           }
[13:37:10.717]                           else {
[13:37:10.717]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:10.717]                               info, version)
[13:37:10.717]                           }
[13:37:10.717]                           base::stop(msg)
[13:37:10.717]                         }
[13:37:10.717]                       })
[13:37:10.717]                     }
[13:37:10.717]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:37:10.717]                     base::options(mc.cores = 1L)
[13:37:10.717]                   }
[13:37:10.717]                   ...future.strategy.old <- future::plan("list")
[13:37:10.717]                   options(future.plan = NULL)
[13:37:10.717]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:10.717]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:10.717]                 }
[13:37:10.717]                 ...future.workdir <- getwd()
[13:37:10.717]             }
[13:37:10.717]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:10.717]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:10.717]         }
[13:37:10.717]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:10.717]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:10.717]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:10.717]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:10.717]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:10.717]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:10.717]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:10.717]             base::names(...future.oldOptions))
[13:37:10.717]     }
[13:37:10.717]     if (FALSE) {
[13:37:10.717]     }
[13:37:10.717]     else {
[13:37:10.717]         if (TRUE) {
[13:37:10.717]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:10.717]                 open = "w")
[13:37:10.717]         }
[13:37:10.717]         else {
[13:37:10.717]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:10.717]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:10.717]         }
[13:37:10.717]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:10.717]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:10.717]             base::sink(type = "output", split = FALSE)
[13:37:10.717]             base::close(...future.stdout)
[13:37:10.717]         }, add = TRUE)
[13:37:10.717]     }
[13:37:10.717]     ...future.frame <- base::sys.nframe()
[13:37:10.717]     ...future.conditions <- base::list()
[13:37:10.717]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:10.717]     if (FALSE) {
[13:37:10.717]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:10.717]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:10.717]     }
[13:37:10.717]     ...future.result <- base::tryCatch({
[13:37:10.717]         base::withCallingHandlers({
[13:37:10.717]             ...future.value <- base::withVisible(base::local({
[13:37:10.717]                 ...future.makeSendCondition <- base::local({
[13:37:10.717]                   sendCondition <- NULL
[13:37:10.717]                   function(frame = 1L) {
[13:37:10.717]                     if (is.function(sendCondition)) 
[13:37:10.717]                       return(sendCondition)
[13:37:10.717]                     ns <- getNamespace("parallel")
[13:37:10.717]                     if (exists("sendData", mode = "function", 
[13:37:10.717]                       envir = ns)) {
[13:37:10.717]                       parallel_sendData <- get("sendData", mode = "function", 
[13:37:10.717]                         envir = ns)
[13:37:10.717]                       envir <- sys.frame(frame)
[13:37:10.717]                       master <- NULL
[13:37:10.717]                       while (!identical(envir, .GlobalEnv) && 
[13:37:10.717]                         !identical(envir, emptyenv())) {
[13:37:10.717]                         if (exists("master", mode = "list", envir = envir, 
[13:37:10.717]                           inherits = FALSE)) {
[13:37:10.717]                           master <- get("master", mode = "list", 
[13:37:10.717]                             envir = envir, inherits = FALSE)
[13:37:10.717]                           if (inherits(master, c("SOCKnode", 
[13:37:10.717]                             "SOCK0node"))) {
[13:37:10.717]                             sendCondition <<- function(cond) {
[13:37:10.717]                               data <- list(type = "VALUE", value = cond, 
[13:37:10.717]                                 success = TRUE)
[13:37:10.717]                               parallel_sendData(master, data)
[13:37:10.717]                             }
[13:37:10.717]                             return(sendCondition)
[13:37:10.717]                           }
[13:37:10.717]                         }
[13:37:10.717]                         frame <- frame + 1L
[13:37:10.717]                         envir <- sys.frame(frame)
[13:37:10.717]                       }
[13:37:10.717]                     }
[13:37:10.717]                     sendCondition <<- function(cond) NULL
[13:37:10.717]                   }
[13:37:10.717]                 })
[13:37:10.717]                 withCallingHandlers({
[13:37:10.717]                   {
[13:37:10.717]                     integer(1e+07)
[13:37:10.717]                   }
[13:37:10.717]                 }, immediateCondition = function(cond) {
[13:37:10.717]                   sendCondition <- ...future.makeSendCondition()
[13:37:10.717]                   sendCondition(cond)
[13:37:10.717]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:10.717]                   {
[13:37:10.717]                     inherits <- base::inherits
[13:37:10.717]                     invokeRestart <- base::invokeRestart
[13:37:10.717]                     is.null <- base::is.null
[13:37:10.717]                     muffled <- FALSE
[13:37:10.717]                     if (inherits(cond, "message")) {
[13:37:10.717]                       muffled <- grepl(pattern, "muffleMessage")
[13:37:10.717]                       if (muffled) 
[13:37:10.717]                         invokeRestart("muffleMessage")
[13:37:10.717]                     }
[13:37:10.717]                     else if (inherits(cond, "warning")) {
[13:37:10.717]                       muffled <- grepl(pattern, "muffleWarning")
[13:37:10.717]                       if (muffled) 
[13:37:10.717]                         invokeRestart("muffleWarning")
[13:37:10.717]                     }
[13:37:10.717]                     else if (inherits(cond, "condition")) {
[13:37:10.717]                       if (!is.null(pattern)) {
[13:37:10.717]                         computeRestarts <- base::computeRestarts
[13:37:10.717]                         grepl <- base::grepl
[13:37:10.717]                         restarts <- computeRestarts(cond)
[13:37:10.717]                         for (restart in restarts) {
[13:37:10.717]                           name <- restart$name
[13:37:10.717]                           if (is.null(name)) 
[13:37:10.717]                             next
[13:37:10.717]                           if (!grepl(pattern, name)) 
[13:37:10.717]                             next
[13:37:10.717]                           invokeRestart(restart)
[13:37:10.717]                           muffled <- TRUE
[13:37:10.717]                           break
[13:37:10.717]                         }
[13:37:10.717]                       }
[13:37:10.717]                     }
[13:37:10.717]                     invisible(muffled)
[13:37:10.717]                   }
[13:37:10.717]                   muffleCondition(cond)
[13:37:10.717]                 })
[13:37:10.717]             }))
[13:37:10.717]             future::FutureResult(value = ...future.value$value, 
[13:37:10.717]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:10.717]                   ...future.rng), globalenv = if (FALSE) 
[13:37:10.717]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:10.717]                     ...future.globalenv.names))
[13:37:10.717]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:10.717]         }, condition = base::local({
[13:37:10.717]             c <- base::c
[13:37:10.717]             inherits <- base::inherits
[13:37:10.717]             invokeRestart <- base::invokeRestart
[13:37:10.717]             length <- base::length
[13:37:10.717]             list <- base::list
[13:37:10.717]             seq.int <- base::seq.int
[13:37:10.717]             signalCondition <- base::signalCondition
[13:37:10.717]             sys.calls <- base::sys.calls
[13:37:10.717]             `[[` <- base::`[[`
[13:37:10.717]             `+` <- base::`+`
[13:37:10.717]             `<<-` <- base::`<<-`
[13:37:10.717]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:10.717]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:10.717]                   3L)]
[13:37:10.717]             }
[13:37:10.717]             function(cond) {
[13:37:10.717]                 is_error <- inherits(cond, "error")
[13:37:10.717]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:10.717]                   NULL)
[13:37:10.717]                 if (is_error) {
[13:37:10.717]                   sessionInformation <- function() {
[13:37:10.717]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:10.717]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:10.717]                       search = base::search(), system = base::Sys.info())
[13:37:10.717]                   }
[13:37:10.717]                   ...future.conditions[[length(...future.conditions) + 
[13:37:10.717]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:10.717]                     cond$call), session = sessionInformation(), 
[13:37:10.717]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:10.717]                   signalCondition(cond)
[13:37:10.717]                 }
[13:37:10.717]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:10.717]                 "immediateCondition"))) {
[13:37:10.717]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:10.717]                   ...future.conditions[[length(...future.conditions) + 
[13:37:10.717]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:10.717]                   if (TRUE && !signal) {
[13:37:10.717]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:10.717]                     {
[13:37:10.717]                       inherits <- base::inherits
[13:37:10.717]                       invokeRestart <- base::invokeRestart
[13:37:10.717]                       is.null <- base::is.null
[13:37:10.717]                       muffled <- FALSE
[13:37:10.717]                       if (inherits(cond, "message")) {
[13:37:10.717]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:10.717]                         if (muffled) 
[13:37:10.717]                           invokeRestart("muffleMessage")
[13:37:10.717]                       }
[13:37:10.717]                       else if (inherits(cond, "warning")) {
[13:37:10.717]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:10.717]                         if (muffled) 
[13:37:10.717]                           invokeRestart("muffleWarning")
[13:37:10.717]                       }
[13:37:10.717]                       else if (inherits(cond, "condition")) {
[13:37:10.717]                         if (!is.null(pattern)) {
[13:37:10.717]                           computeRestarts <- base::computeRestarts
[13:37:10.717]                           grepl <- base::grepl
[13:37:10.717]                           restarts <- computeRestarts(cond)
[13:37:10.717]                           for (restart in restarts) {
[13:37:10.717]                             name <- restart$name
[13:37:10.717]                             if (is.null(name)) 
[13:37:10.717]                               next
[13:37:10.717]                             if (!grepl(pattern, name)) 
[13:37:10.717]                               next
[13:37:10.717]                             invokeRestart(restart)
[13:37:10.717]                             muffled <- TRUE
[13:37:10.717]                             break
[13:37:10.717]                           }
[13:37:10.717]                         }
[13:37:10.717]                       }
[13:37:10.717]                       invisible(muffled)
[13:37:10.717]                     }
[13:37:10.717]                     muffleCondition(cond, pattern = "^muffle")
[13:37:10.717]                   }
[13:37:10.717]                 }
[13:37:10.717]                 else {
[13:37:10.717]                   if (TRUE) {
[13:37:10.717]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:10.717]                     {
[13:37:10.717]                       inherits <- base::inherits
[13:37:10.717]                       invokeRestart <- base::invokeRestart
[13:37:10.717]                       is.null <- base::is.null
[13:37:10.717]                       muffled <- FALSE
[13:37:10.717]                       if (inherits(cond, "message")) {
[13:37:10.717]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:10.717]                         if (muffled) 
[13:37:10.717]                           invokeRestart("muffleMessage")
[13:37:10.717]                       }
[13:37:10.717]                       else if (inherits(cond, "warning")) {
[13:37:10.717]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:10.717]                         if (muffled) 
[13:37:10.717]                           invokeRestart("muffleWarning")
[13:37:10.717]                       }
[13:37:10.717]                       else if (inherits(cond, "condition")) {
[13:37:10.717]                         if (!is.null(pattern)) {
[13:37:10.717]                           computeRestarts <- base::computeRestarts
[13:37:10.717]                           grepl <- base::grepl
[13:37:10.717]                           restarts <- computeRestarts(cond)
[13:37:10.717]                           for (restart in restarts) {
[13:37:10.717]                             name <- restart$name
[13:37:10.717]                             if (is.null(name)) 
[13:37:10.717]                               next
[13:37:10.717]                             if (!grepl(pattern, name)) 
[13:37:10.717]                               next
[13:37:10.717]                             invokeRestart(restart)
[13:37:10.717]                             muffled <- TRUE
[13:37:10.717]                             break
[13:37:10.717]                           }
[13:37:10.717]                         }
[13:37:10.717]                       }
[13:37:10.717]                       invisible(muffled)
[13:37:10.717]                     }
[13:37:10.717]                     muffleCondition(cond, pattern = "^muffle")
[13:37:10.717]                   }
[13:37:10.717]                 }
[13:37:10.717]             }
[13:37:10.717]         }))
[13:37:10.717]     }, error = function(ex) {
[13:37:10.717]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:10.717]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:10.717]                 ...future.rng), started = ...future.startTime, 
[13:37:10.717]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:10.717]             version = "1.8"), class = "FutureResult")
[13:37:10.717]     }, finally = {
[13:37:10.717]         if (!identical(...future.workdir, getwd())) 
[13:37:10.717]             setwd(...future.workdir)
[13:37:10.717]         {
[13:37:10.717]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:10.717]                 ...future.oldOptions$nwarnings <- NULL
[13:37:10.717]             }
[13:37:10.717]             base::options(...future.oldOptions)
[13:37:10.717]             if (.Platform$OS.type == "windows") {
[13:37:10.717]                 old_names <- names(...future.oldEnvVars)
[13:37:10.717]                 envs <- base::Sys.getenv()
[13:37:10.717]                 names <- names(envs)
[13:37:10.717]                 common <- intersect(names, old_names)
[13:37:10.717]                 added <- setdiff(names, old_names)
[13:37:10.717]                 removed <- setdiff(old_names, names)
[13:37:10.717]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:10.717]                   envs[common]]
[13:37:10.717]                 NAMES <- toupper(changed)
[13:37:10.717]                 args <- list()
[13:37:10.717]                 for (kk in seq_along(NAMES)) {
[13:37:10.717]                   name <- changed[[kk]]
[13:37:10.717]                   NAME <- NAMES[[kk]]
[13:37:10.717]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:10.717]                     next
[13:37:10.717]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:10.717]                 }
[13:37:10.717]                 NAMES <- toupper(added)
[13:37:10.717]                 for (kk in seq_along(NAMES)) {
[13:37:10.717]                   name <- added[[kk]]
[13:37:10.717]                   NAME <- NAMES[[kk]]
[13:37:10.717]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:10.717]                     next
[13:37:10.717]                   args[[name]] <- ""
[13:37:10.717]                 }
[13:37:10.717]                 NAMES <- toupper(removed)
[13:37:10.717]                 for (kk in seq_along(NAMES)) {
[13:37:10.717]                   name <- removed[[kk]]
[13:37:10.717]                   NAME <- NAMES[[kk]]
[13:37:10.717]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:10.717]                     next
[13:37:10.717]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:10.717]                 }
[13:37:10.717]                 if (length(args) > 0) 
[13:37:10.717]                   base::do.call(base::Sys.setenv, args = args)
[13:37:10.717]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:10.717]             }
[13:37:10.717]             else {
[13:37:10.717]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:10.717]             }
[13:37:10.717]             {
[13:37:10.717]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:10.717]                   0L) {
[13:37:10.717]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:10.717]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:10.717]                   base::options(opts)
[13:37:10.717]                 }
[13:37:10.717]                 {
[13:37:10.717]                   {
[13:37:10.717]                     base::options(mc.cores = ...future.mc.cores.old)
[13:37:10.717]                     NULL
[13:37:10.717]                   }
[13:37:10.717]                   options(future.plan = NULL)
[13:37:10.717]                   if (is.na(NA_character_)) 
[13:37:10.717]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:10.717]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:10.717]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:10.717]                     .init = FALSE)
[13:37:10.717]                 }
[13:37:10.717]             }
[13:37:10.717]         }
[13:37:10.717]     })
[13:37:10.717]     if (TRUE) {
[13:37:10.717]         base::sink(type = "output", split = FALSE)
[13:37:10.717]         if (TRUE) {
[13:37:10.717]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:10.717]         }
[13:37:10.717]         else {
[13:37:10.717]             ...future.result["stdout"] <- base::list(NULL)
[13:37:10.717]         }
[13:37:10.717]         base::close(...future.stdout)
[13:37:10.717]         ...future.stdout <- NULL
[13:37:10.717]     }
[13:37:10.717]     ...future.result$conditions <- ...future.conditions
[13:37:10.717]     ...future.result$finished <- base::Sys.time()
[13:37:10.717]     ...future.result
[13:37:10.717] }
[13:37:10.720] MultisessionFuture started
[13:37:10.720] - Launch lazy future ... done
[13:37:10.720] run() for ‘MultisessionFuture’ ... done
> v <- value(f)
[13:37:10.720] result() for ClusterFuture ...
[13:37:10.720] receiveMessageFromWorker() for ClusterFuture ...
[13:37:10.721] - Validating connection of MultisessionFuture
[13:37:10.771] - received message: FutureResult
[13:37:10.771] - Received FutureResult
[13:37:10.772] - Erased future from FutureRegistry
[13:37:10.772] result() for ClusterFuture ...
[13:37:10.772] - result already collected: FutureResult
[13:37:10.772] result() for ClusterFuture ... done
[13:37:10.772] receiveMessageFromWorker() for ClusterFuture ... done
[13:37:10.772] result() for ClusterFuture ... done
[13:37:10.772] result() for ClusterFuture ...
[13:37:10.772] - result already collected: FutureResult
[13:37:10.772] result() for ClusterFuture ... done
> str(v)
 int [1:10000000] 0 0 0 0 0 0 0 0 0 0 ...
> 
> f <- future({ gc() })
[13:37:10.773] getGlobalsAndPackages() ...
[13:37:10.773] Searching for globals...
[13:37:10.774] - globals found: [2] ‘{’, ‘gc’
[13:37:10.774] Searching for globals ... DONE
[13:37:10.774] Resolving globals: FALSE
[13:37:10.774] 
[13:37:10.774] 
[13:37:10.775] getGlobalsAndPackages() ... DONE
[13:37:10.775] run() for ‘Future’ ...
[13:37:10.775] - state: ‘created’
[13:37:10.775] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:37:10.786] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:37:10.786] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:37:10.786]   - Field: ‘node’
[13:37:10.786]   - Field: ‘label’
[13:37:10.786]   - Field: ‘local’
[13:37:10.786]   - Field: ‘owner’
[13:37:10.786]   - Field: ‘envir’
[13:37:10.786]   - Field: ‘workers’
[13:37:10.786]   - Field: ‘packages’
[13:37:10.787]   - Field: ‘gc’
[13:37:10.787]   - Field: ‘conditions’
[13:37:10.787]   - Field: ‘persistent’
[13:37:10.787]   - Field: ‘expr’
[13:37:10.787]   - Field: ‘uuid’
[13:37:10.787]   - Field: ‘seed’
[13:37:10.787]   - Field: ‘version’
[13:37:10.787]   - Field: ‘result’
[13:37:10.787]   - Field: ‘asynchronous’
[13:37:10.787]   - Field: ‘calls’
[13:37:10.787]   - Field: ‘globals’
[13:37:10.788]   - Field: ‘stdout’
[13:37:10.788]   - Field: ‘earlySignal’
[13:37:10.788]   - Field: ‘lazy’
[13:37:10.788]   - Field: ‘state’
[13:37:10.788] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:37:10.788] - Launch lazy future ...
[13:37:10.788] Packages needed by the future expression (n = 0): <none>
[13:37:10.788] Packages needed by future strategies (n = 0): <none>
[13:37:10.789] {
[13:37:10.789]     {
[13:37:10.789]         {
[13:37:10.789]             ...future.startTime <- base::Sys.time()
[13:37:10.789]             {
[13:37:10.789]                 {
[13:37:10.789]                   {
[13:37:10.789]                     {
[13:37:10.789]                       base::local({
[13:37:10.789]                         has_future <- base::requireNamespace("future", 
[13:37:10.789]                           quietly = TRUE)
[13:37:10.789]                         if (has_future) {
[13:37:10.789]                           ns <- base::getNamespace("future")
[13:37:10.789]                           version <- ns[[".package"]][["version"]]
[13:37:10.789]                           if (is.null(version)) 
[13:37:10.789]                             version <- utils::packageVersion("future")
[13:37:10.789]                         }
[13:37:10.789]                         else {
[13:37:10.789]                           version <- NULL
[13:37:10.789]                         }
[13:37:10.789]                         if (!has_future || version < "1.8.0") {
[13:37:10.789]                           info <- base::c(r_version = base::gsub("R version ", 
[13:37:10.789]                             "", base::R.version$version.string), 
[13:37:10.789]                             platform = base::sprintf("%s (%s-bit)", 
[13:37:10.789]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:10.789]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:10.789]                               "release", "version")], collapse = " "), 
[13:37:10.789]                             hostname = base::Sys.info()[["nodename"]])
[13:37:10.789]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:37:10.789]                             info)
[13:37:10.789]                           info <- base::paste(info, collapse = "; ")
[13:37:10.789]                           if (!has_future) {
[13:37:10.789]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:10.789]                               info)
[13:37:10.789]                           }
[13:37:10.789]                           else {
[13:37:10.789]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:10.789]                               info, version)
[13:37:10.789]                           }
[13:37:10.789]                           base::stop(msg)
[13:37:10.789]                         }
[13:37:10.789]                       })
[13:37:10.789]                     }
[13:37:10.789]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:37:10.789]                     base::options(mc.cores = 1L)
[13:37:10.789]                   }
[13:37:10.789]                   ...future.strategy.old <- future::plan("list")
[13:37:10.789]                   options(future.plan = NULL)
[13:37:10.789]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:10.789]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:10.789]                 }
[13:37:10.789]                 ...future.workdir <- getwd()
[13:37:10.789]             }
[13:37:10.789]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:10.789]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:10.789]         }
[13:37:10.789]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:10.789]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:10.789]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:10.789]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:10.789]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:10.789]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:10.789]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:10.789]             base::names(...future.oldOptions))
[13:37:10.789]     }
[13:37:10.789]     if (FALSE) {
[13:37:10.789]     }
[13:37:10.789]     else {
[13:37:10.789]         if (TRUE) {
[13:37:10.789]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:10.789]                 open = "w")
[13:37:10.789]         }
[13:37:10.789]         else {
[13:37:10.789]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:10.789]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:10.789]         }
[13:37:10.789]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:10.789]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:10.789]             base::sink(type = "output", split = FALSE)
[13:37:10.789]             base::close(...future.stdout)
[13:37:10.789]         }, add = TRUE)
[13:37:10.789]     }
[13:37:10.789]     ...future.frame <- base::sys.nframe()
[13:37:10.789]     ...future.conditions <- base::list()
[13:37:10.789]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:10.789]     if (FALSE) {
[13:37:10.789]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:10.789]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:10.789]     }
[13:37:10.789]     ...future.result <- base::tryCatch({
[13:37:10.789]         base::withCallingHandlers({
[13:37:10.789]             ...future.value <- base::withVisible(base::local({
[13:37:10.789]                 ...future.makeSendCondition <- base::local({
[13:37:10.789]                   sendCondition <- NULL
[13:37:10.789]                   function(frame = 1L) {
[13:37:10.789]                     if (is.function(sendCondition)) 
[13:37:10.789]                       return(sendCondition)
[13:37:10.789]                     ns <- getNamespace("parallel")
[13:37:10.789]                     if (exists("sendData", mode = "function", 
[13:37:10.789]                       envir = ns)) {
[13:37:10.789]                       parallel_sendData <- get("sendData", mode = "function", 
[13:37:10.789]                         envir = ns)
[13:37:10.789]                       envir <- sys.frame(frame)
[13:37:10.789]                       master <- NULL
[13:37:10.789]                       while (!identical(envir, .GlobalEnv) && 
[13:37:10.789]                         !identical(envir, emptyenv())) {
[13:37:10.789]                         if (exists("master", mode = "list", envir = envir, 
[13:37:10.789]                           inherits = FALSE)) {
[13:37:10.789]                           master <- get("master", mode = "list", 
[13:37:10.789]                             envir = envir, inherits = FALSE)
[13:37:10.789]                           if (inherits(master, c("SOCKnode", 
[13:37:10.789]                             "SOCK0node"))) {
[13:37:10.789]                             sendCondition <<- function(cond) {
[13:37:10.789]                               data <- list(type = "VALUE", value = cond, 
[13:37:10.789]                                 success = TRUE)
[13:37:10.789]                               parallel_sendData(master, data)
[13:37:10.789]                             }
[13:37:10.789]                             return(sendCondition)
[13:37:10.789]                           }
[13:37:10.789]                         }
[13:37:10.789]                         frame <- frame + 1L
[13:37:10.789]                         envir <- sys.frame(frame)
[13:37:10.789]                       }
[13:37:10.789]                     }
[13:37:10.789]                     sendCondition <<- function(cond) NULL
[13:37:10.789]                   }
[13:37:10.789]                 })
[13:37:10.789]                 withCallingHandlers({
[13:37:10.789]                   {
[13:37:10.789]                     gc()
[13:37:10.789]                   }
[13:37:10.789]                 }, immediateCondition = function(cond) {
[13:37:10.789]                   sendCondition <- ...future.makeSendCondition()
[13:37:10.789]                   sendCondition(cond)
[13:37:10.789]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:10.789]                   {
[13:37:10.789]                     inherits <- base::inherits
[13:37:10.789]                     invokeRestart <- base::invokeRestart
[13:37:10.789]                     is.null <- base::is.null
[13:37:10.789]                     muffled <- FALSE
[13:37:10.789]                     if (inherits(cond, "message")) {
[13:37:10.789]                       muffled <- grepl(pattern, "muffleMessage")
[13:37:10.789]                       if (muffled) 
[13:37:10.789]                         invokeRestart("muffleMessage")
[13:37:10.789]                     }
[13:37:10.789]                     else if (inherits(cond, "warning")) {
[13:37:10.789]                       muffled <- grepl(pattern, "muffleWarning")
[13:37:10.789]                       if (muffled) 
[13:37:10.789]                         invokeRestart("muffleWarning")
[13:37:10.789]                     }
[13:37:10.789]                     else if (inherits(cond, "condition")) {
[13:37:10.789]                       if (!is.null(pattern)) {
[13:37:10.789]                         computeRestarts <- base::computeRestarts
[13:37:10.789]                         grepl <- base::grepl
[13:37:10.789]                         restarts <- computeRestarts(cond)
[13:37:10.789]                         for (restart in restarts) {
[13:37:10.789]                           name <- restart$name
[13:37:10.789]                           if (is.null(name)) 
[13:37:10.789]                             next
[13:37:10.789]                           if (!grepl(pattern, name)) 
[13:37:10.789]                             next
[13:37:10.789]                           invokeRestart(restart)
[13:37:10.789]                           muffled <- TRUE
[13:37:10.789]                           break
[13:37:10.789]                         }
[13:37:10.789]                       }
[13:37:10.789]                     }
[13:37:10.789]                     invisible(muffled)
[13:37:10.789]                   }
[13:37:10.789]                   muffleCondition(cond)
[13:37:10.789]                 })
[13:37:10.789]             }))
[13:37:10.789]             future::FutureResult(value = ...future.value$value, 
[13:37:10.789]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:10.789]                   ...future.rng), globalenv = if (FALSE) 
[13:37:10.789]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:10.789]                     ...future.globalenv.names))
[13:37:10.789]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:10.789]         }, condition = base::local({
[13:37:10.789]             c <- base::c
[13:37:10.789]             inherits <- base::inherits
[13:37:10.789]             invokeRestart <- base::invokeRestart
[13:37:10.789]             length <- base::length
[13:37:10.789]             list <- base::list
[13:37:10.789]             seq.int <- base::seq.int
[13:37:10.789]             signalCondition <- base::signalCondition
[13:37:10.789]             sys.calls <- base::sys.calls
[13:37:10.789]             `[[` <- base::`[[`
[13:37:10.789]             `+` <- base::`+`
[13:37:10.789]             `<<-` <- base::`<<-`
[13:37:10.789]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:10.789]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:10.789]                   3L)]
[13:37:10.789]             }
[13:37:10.789]             function(cond) {
[13:37:10.789]                 is_error <- inherits(cond, "error")
[13:37:10.789]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:10.789]                   NULL)
[13:37:10.789]                 if (is_error) {
[13:37:10.789]                   sessionInformation <- function() {
[13:37:10.789]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:10.789]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:10.789]                       search = base::search(), system = base::Sys.info())
[13:37:10.789]                   }
[13:37:10.789]                   ...future.conditions[[length(...future.conditions) + 
[13:37:10.789]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:10.789]                     cond$call), session = sessionInformation(), 
[13:37:10.789]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:10.789]                   signalCondition(cond)
[13:37:10.789]                 }
[13:37:10.789]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:10.789]                 "immediateCondition"))) {
[13:37:10.789]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:10.789]                   ...future.conditions[[length(...future.conditions) + 
[13:37:10.789]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:10.789]                   if (TRUE && !signal) {
[13:37:10.789]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:10.789]                     {
[13:37:10.789]                       inherits <- base::inherits
[13:37:10.789]                       invokeRestart <- base::invokeRestart
[13:37:10.789]                       is.null <- base::is.null
[13:37:10.789]                       muffled <- FALSE
[13:37:10.789]                       if (inherits(cond, "message")) {
[13:37:10.789]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:10.789]                         if (muffled) 
[13:37:10.789]                           invokeRestart("muffleMessage")
[13:37:10.789]                       }
[13:37:10.789]                       else if (inherits(cond, "warning")) {
[13:37:10.789]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:10.789]                         if (muffled) 
[13:37:10.789]                           invokeRestart("muffleWarning")
[13:37:10.789]                       }
[13:37:10.789]                       else if (inherits(cond, "condition")) {
[13:37:10.789]                         if (!is.null(pattern)) {
[13:37:10.789]                           computeRestarts <- base::computeRestarts
[13:37:10.789]                           grepl <- base::grepl
[13:37:10.789]                           restarts <- computeRestarts(cond)
[13:37:10.789]                           for (restart in restarts) {
[13:37:10.789]                             name <- restart$name
[13:37:10.789]                             if (is.null(name)) 
[13:37:10.789]                               next
[13:37:10.789]                             if (!grepl(pattern, name)) 
[13:37:10.789]                               next
[13:37:10.789]                             invokeRestart(restart)
[13:37:10.789]                             muffled <- TRUE
[13:37:10.789]                             break
[13:37:10.789]                           }
[13:37:10.789]                         }
[13:37:10.789]                       }
[13:37:10.789]                       invisible(muffled)
[13:37:10.789]                     }
[13:37:10.789]                     muffleCondition(cond, pattern = "^muffle")
[13:37:10.789]                   }
[13:37:10.789]                 }
[13:37:10.789]                 else {
[13:37:10.789]                   if (TRUE) {
[13:37:10.789]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:10.789]                     {
[13:37:10.789]                       inherits <- base::inherits
[13:37:10.789]                       invokeRestart <- base::invokeRestart
[13:37:10.789]                       is.null <- base::is.null
[13:37:10.789]                       muffled <- FALSE
[13:37:10.789]                       if (inherits(cond, "message")) {
[13:37:10.789]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:10.789]                         if (muffled) 
[13:37:10.789]                           invokeRestart("muffleMessage")
[13:37:10.789]                       }
[13:37:10.789]                       else if (inherits(cond, "warning")) {
[13:37:10.789]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:10.789]                         if (muffled) 
[13:37:10.789]                           invokeRestart("muffleWarning")
[13:37:10.789]                       }
[13:37:10.789]                       else if (inherits(cond, "condition")) {
[13:37:10.789]                         if (!is.null(pattern)) {
[13:37:10.789]                           computeRestarts <- base::computeRestarts
[13:37:10.789]                           grepl <- base::grepl
[13:37:10.789]                           restarts <- computeRestarts(cond)
[13:37:10.789]                           for (restart in restarts) {
[13:37:10.789]                             name <- restart$name
[13:37:10.789]                             if (is.null(name)) 
[13:37:10.789]                               next
[13:37:10.789]                             if (!grepl(pattern, name)) 
[13:37:10.789]                               next
[13:37:10.789]                             invokeRestart(restart)
[13:37:10.789]                             muffled <- TRUE
[13:37:10.789]                             break
[13:37:10.789]                           }
[13:37:10.789]                         }
[13:37:10.789]                       }
[13:37:10.789]                       invisible(muffled)
[13:37:10.789]                     }
[13:37:10.789]                     muffleCondition(cond, pattern = "^muffle")
[13:37:10.789]                   }
[13:37:10.789]                 }
[13:37:10.789]             }
[13:37:10.789]         }))
[13:37:10.789]     }, error = function(ex) {
[13:37:10.789]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:10.789]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:10.789]                 ...future.rng), started = ...future.startTime, 
[13:37:10.789]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:10.789]             version = "1.8"), class = "FutureResult")
[13:37:10.789]     }, finally = {
[13:37:10.789]         if (!identical(...future.workdir, getwd())) 
[13:37:10.789]             setwd(...future.workdir)
[13:37:10.789]         {
[13:37:10.789]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:10.789]                 ...future.oldOptions$nwarnings <- NULL
[13:37:10.789]             }
[13:37:10.789]             base::options(...future.oldOptions)
[13:37:10.789]             if (.Platform$OS.type == "windows") {
[13:37:10.789]                 old_names <- names(...future.oldEnvVars)
[13:37:10.789]                 envs <- base::Sys.getenv()
[13:37:10.789]                 names <- names(envs)
[13:37:10.789]                 common <- intersect(names, old_names)
[13:37:10.789]                 added <- setdiff(names, old_names)
[13:37:10.789]                 removed <- setdiff(old_names, names)
[13:37:10.789]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:10.789]                   envs[common]]
[13:37:10.789]                 NAMES <- toupper(changed)
[13:37:10.789]                 args <- list()
[13:37:10.789]                 for (kk in seq_along(NAMES)) {
[13:37:10.789]                   name <- changed[[kk]]
[13:37:10.789]                   NAME <- NAMES[[kk]]
[13:37:10.789]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:10.789]                     next
[13:37:10.789]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:10.789]                 }
[13:37:10.789]                 NAMES <- toupper(added)
[13:37:10.789]                 for (kk in seq_along(NAMES)) {
[13:37:10.789]                   name <- added[[kk]]
[13:37:10.789]                   NAME <- NAMES[[kk]]
[13:37:10.789]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:10.789]                     next
[13:37:10.789]                   args[[name]] <- ""
[13:37:10.789]                 }
[13:37:10.789]                 NAMES <- toupper(removed)
[13:37:10.789]                 for (kk in seq_along(NAMES)) {
[13:37:10.789]                   name <- removed[[kk]]
[13:37:10.789]                   NAME <- NAMES[[kk]]
[13:37:10.789]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:10.789]                     next
[13:37:10.789]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:10.789]                 }
[13:37:10.789]                 if (length(args) > 0) 
[13:37:10.789]                   base::do.call(base::Sys.setenv, args = args)
[13:37:10.789]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:10.789]             }
[13:37:10.789]             else {
[13:37:10.789]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:10.789]             }
[13:37:10.789]             {
[13:37:10.789]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:10.789]                   0L) {
[13:37:10.789]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:10.789]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:10.789]                   base::options(opts)
[13:37:10.789]                 }
[13:37:10.789]                 {
[13:37:10.789]                   {
[13:37:10.789]                     base::options(mc.cores = ...future.mc.cores.old)
[13:37:10.789]                     NULL
[13:37:10.789]                   }
[13:37:10.789]                   options(future.plan = NULL)
[13:37:10.789]                   if (is.na(NA_character_)) 
[13:37:10.789]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:10.789]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:10.789]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:10.789]                     .init = FALSE)
[13:37:10.789]                 }
[13:37:10.789]             }
[13:37:10.789]         }
[13:37:10.789]     })
[13:37:10.789]     if (TRUE) {
[13:37:10.789]         base::sink(type = "output", split = FALSE)
[13:37:10.789]         if (TRUE) {
[13:37:10.789]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:10.789]         }
[13:37:10.789]         else {
[13:37:10.789]             ...future.result["stdout"] <- base::list(NULL)
[13:37:10.789]         }
[13:37:10.789]         base::close(...future.stdout)
[13:37:10.789]         ...future.stdout <- NULL
[13:37:10.789]     }
[13:37:10.789]     ...future.result$conditions <- ...future.conditions
[13:37:10.789]     ...future.result$finished <- base::Sys.time()
[13:37:10.789]     ...future.result
[13:37:10.789] }
[13:37:10.792] MultisessionFuture started
[13:37:10.792] - Launch lazy future ... done
[13:37:10.792] run() for ‘MultisessionFuture’ ... done
> v <- value(f)
[13:37:10.792] result() for ClusterFuture ...
[13:37:10.792] receiveMessageFromWorker() for ClusterFuture ...
[13:37:10.792] - Validating connection of MultisessionFuture
[13:37:10.820] - received message: FutureResult
[13:37:10.820] - Received FutureResult
[13:37:10.820] - Erased future from FutureRegistry
[13:37:10.821] result() for ClusterFuture ...
[13:37:10.821] - result already collected: FutureResult
[13:37:10.821] result() for ClusterFuture ... done
[13:37:10.821] receiveMessageFromWorker() for ClusterFuture ... done
[13:37:10.821] result() for ClusterFuture ... done
[13:37:10.821] result() for ClusterFuture ...
[13:37:10.821] - result already collected: FutureResult
[13:37:10.821] result() for ClusterFuture ... done
> print(v)
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 394773 21.1     664331 35.5   664331 35.5
Vcells 703826  5.4    8388608 64.0  5725749 43.7
> 
> f <- future({ integer(10e6) }, gc = TRUE)
[13:37:10.822] getGlobalsAndPackages() ...
[13:37:10.822] Searching for globals...
[13:37:10.823] - globals found: [2] ‘{’, ‘integer’
[13:37:10.823] Searching for globals ... DONE
[13:37:10.823] Resolving globals: FALSE
[13:37:10.823] 
[13:37:10.823] 
[13:37:10.824] getGlobalsAndPackages() ... DONE
[13:37:10.824] run() for ‘Future’ ...
[13:37:10.824] - state: ‘created’
[13:37:10.824] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:37:10.835] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:37:10.835] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:37:10.835]   - Field: ‘node’
[13:37:10.835]   - Field: ‘label’
[13:37:10.835]   - Field: ‘local’
[13:37:10.835]   - Field: ‘owner’
[13:37:10.835]   - Field: ‘envir’
[13:37:10.835]   - Field: ‘workers’
[13:37:10.836]   - Field: ‘packages’
[13:37:10.836]   - Field: ‘gc’
[13:37:10.836]   - Field: ‘conditions’
[13:37:10.836]   - Field: ‘persistent’
[13:37:10.836]   - Field: ‘expr’
[13:37:10.836]   - Field: ‘uuid’
[13:37:10.836]   - Field: ‘seed’
[13:37:10.836]   - Field: ‘version’
[13:37:10.836]   - Field: ‘result’
[13:37:10.836]   - Field: ‘asynchronous’
[13:37:10.836]   - Field: ‘calls’
[13:37:10.837]   - Field: ‘globals’
[13:37:10.837]   - Field: ‘stdout’
[13:37:10.837]   - Field: ‘earlySignal’
[13:37:10.837]   - Field: ‘lazy’
[13:37:10.837]   - Field: ‘state’
[13:37:10.837] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:37:10.837] - Launch lazy future ...
[13:37:10.837] Packages needed by the future expression (n = 0): <none>
[13:37:10.837] Packages needed by future strategies (n = 0): <none>
[13:37:10.838] {
[13:37:10.838]     {
[13:37:10.838]         {
[13:37:10.838]             ...future.startTime <- base::Sys.time()
[13:37:10.838]             {
[13:37:10.838]                 {
[13:37:10.838]                   {
[13:37:10.838]                     {
[13:37:10.838]                       base::local({
[13:37:10.838]                         has_future <- base::requireNamespace("future", 
[13:37:10.838]                           quietly = TRUE)
[13:37:10.838]                         if (has_future) {
[13:37:10.838]                           ns <- base::getNamespace("future")
[13:37:10.838]                           version <- ns[[".package"]][["version"]]
[13:37:10.838]                           if (is.null(version)) 
[13:37:10.838]                             version <- utils::packageVersion("future")
[13:37:10.838]                         }
[13:37:10.838]                         else {
[13:37:10.838]                           version <- NULL
[13:37:10.838]                         }
[13:37:10.838]                         if (!has_future || version < "1.8.0") {
[13:37:10.838]                           info <- base::c(r_version = base::gsub("R version ", 
[13:37:10.838]                             "", base::R.version$version.string), 
[13:37:10.838]                             platform = base::sprintf("%s (%s-bit)", 
[13:37:10.838]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:10.838]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:10.838]                               "release", "version")], collapse = " "), 
[13:37:10.838]                             hostname = base::Sys.info()[["nodename"]])
[13:37:10.838]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:37:10.838]                             info)
[13:37:10.838]                           info <- base::paste(info, collapse = "; ")
[13:37:10.838]                           if (!has_future) {
[13:37:10.838]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:10.838]                               info)
[13:37:10.838]                           }
[13:37:10.838]                           else {
[13:37:10.838]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:10.838]                               info, version)
[13:37:10.838]                           }
[13:37:10.838]                           base::stop(msg)
[13:37:10.838]                         }
[13:37:10.838]                       })
[13:37:10.838]                     }
[13:37:10.838]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:37:10.838]                     base::options(mc.cores = 1L)
[13:37:10.838]                   }
[13:37:10.838]                   ...future.strategy.old <- future::plan("list")
[13:37:10.838]                   options(future.plan = NULL)
[13:37:10.838]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:10.838]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:10.838]                 }
[13:37:10.838]                 ...future.workdir <- getwd()
[13:37:10.838]             }
[13:37:10.838]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:10.838]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:10.838]         }
[13:37:10.838]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:10.838]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:10.838]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:10.838]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:10.838]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:10.838]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:10.838]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:10.838]             base::names(...future.oldOptions))
[13:37:10.838]     }
[13:37:10.838]     if (FALSE) {
[13:37:10.838]     }
[13:37:10.838]     else {
[13:37:10.838]         if (TRUE) {
[13:37:10.838]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:10.838]                 open = "w")
[13:37:10.838]         }
[13:37:10.838]         else {
[13:37:10.838]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:10.838]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:10.838]         }
[13:37:10.838]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:10.838]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:10.838]             base::sink(type = "output", split = FALSE)
[13:37:10.838]             base::close(...future.stdout)
[13:37:10.838]         }, add = TRUE)
[13:37:10.838]     }
[13:37:10.838]     ...future.frame <- base::sys.nframe()
[13:37:10.838]     ...future.conditions <- base::list()
[13:37:10.838]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:10.838]     if (FALSE) {
[13:37:10.838]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:10.838]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:10.838]     }
[13:37:10.838]     ...future.result <- base::tryCatch({
[13:37:10.838]         base::withCallingHandlers({
[13:37:10.838]             ...future.value <- base::withVisible(base::local({
[13:37:10.838]                 ...future.makeSendCondition <- base::local({
[13:37:10.838]                   sendCondition <- NULL
[13:37:10.838]                   function(frame = 1L) {
[13:37:10.838]                     if (is.function(sendCondition)) 
[13:37:10.838]                       return(sendCondition)
[13:37:10.838]                     ns <- getNamespace("parallel")
[13:37:10.838]                     if (exists("sendData", mode = "function", 
[13:37:10.838]                       envir = ns)) {
[13:37:10.838]                       parallel_sendData <- get("sendData", mode = "function", 
[13:37:10.838]                         envir = ns)
[13:37:10.838]                       envir <- sys.frame(frame)
[13:37:10.838]                       master <- NULL
[13:37:10.838]                       while (!identical(envir, .GlobalEnv) && 
[13:37:10.838]                         !identical(envir, emptyenv())) {
[13:37:10.838]                         if (exists("master", mode = "list", envir = envir, 
[13:37:10.838]                           inherits = FALSE)) {
[13:37:10.838]                           master <- get("master", mode = "list", 
[13:37:10.838]                             envir = envir, inherits = FALSE)
[13:37:10.838]                           if (inherits(master, c("SOCKnode", 
[13:37:10.838]                             "SOCK0node"))) {
[13:37:10.838]                             sendCondition <<- function(cond) {
[13:37:10.838]                               data <- list(type = "VALUE", value = cond, 
[13:37:10.838]                                 success = TRUE)
[13:37:10.838]                               parallel_sendData(master, data)
[13:37:10.838]                             }
[13:37:10.838]                             return(sendCondition)
[13:37:10.838]                           }
[13:37:10.838]                         }
[13:37:10.838]                         frame <- frame + 1L
[13:37:10.838]                         envir <- sys.frame(frame)
[13:37:10.838]                       }
[13:37:10.838]                     }
[13:37:10.838]                     sendCondition <<- function(cond) NULL
[13:37:10.838]                   }
[13:37:10.838]                 })
[13:37:10.838]                 withCallingHandlers({
[13:37:10.838]                   {
[13:37:10.838]                     integer(1e+07)
[13:37:10.838]                   }
[13:37:10.838]                 }, immediateCondition = function(cond) {
[13:37:10.838]                   sendCondition <- ...future.makeSendCondition()
[13:37:10.838]                   sendCondition(cond)
[13:37:10.838]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:10.838]                   {
[13:37:10.838]                     inherits <- base::inherits
[13:37:10.838]                     invokeRestart <- base::invokeRestart
[13:37:10.838]                     is.null <- base::is.null
[13:37:10.838]                     muffled <- FALSE
[13:37:10.838]                     if (inherits(cond, "message")) {
[13:37:10.838]                       muffled <- grepl(pattern, "muffleMessage")
[13:37:10.838]                       if (muffled) 
[13:37:10.838]                         invokeRestart("muffleMessage")
[13:37:10.838]                     }
[13:37:10.838]                     else if (inherits(cond, "warning")) {
[13:37:10.838]                       muffled <- grepl(pattern, "muffleWarning")
[13:37:10.838]                       if (muffled) 
[13:37:10.838]                         invokeRestart("muffleWarning")
[13:37:10.838]                     }
[13:37:10.838]                     else if (inherits(cond, "condition")) {
[13:37:10.838]                       if (!is.null(pattern)) {
[13:37:10.838]                         computeRestarts <- base::computeRestarts
[13:37:10.838]                         grepl <- base::grepl
[13:37:10.838]                         restarts <- computeRestarts(cond)
[13:37:10.838]                         for (restart in restarts) {
[13:37:10.838]                           name <- restart$name
[13:37:10.838]                           if (is.null(name)) 
[13:37:10.838]                             next
[13:37:10.838]                           if (!grepl(pattern, name)) 
[13:37:10.838]                             next
[13:37:10.838]                           invokeRestart(restart)
[13:37:10.838]                           muffled <- TRUE
[13:37:10.838]                           break
[13:37:10.838]                         }
[13:37:10.838]                       }
[13:37:10.838]                     }
[13:37:10.838]                     invisible(muffled)
[13:37:10.838]                   }
[13:37:10.838]                   muffleCondition(cond)
[13:37:10.838]                 })
[13:37:10.838]             }))
[13:37:10.838]             future::FutureResult(value = ...future.value$value, 
[13:37:10.838]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:10.838]                   ...future.rng), globalenv = if (FALSE) 
[13:37:10.838]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:10.838]                     ...future.globalenv.names))
[13:37:10.838]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:10.838]         }, condition = base::local({
[13:37:10.838]             c <- base::c
[13:37:10.838]             inherits <- base::inherits
[13:37:10.838]             invokeRestart <- base::invokeRestart
[13:37:10.838]             length <- base::length
[13:37:10.838]             list <- base::list
[13:37:10.838]             seq.int <- base::seq.int
[13:37:10.838]             signalCondition <- base::signalCondition
[13:37:10.838]             sys.calls <- base::sys.calls
[13:37:10.838]             `[[` <- base::`[[`
[13:37:10.838]             `+` <- base::`+`
[13:37:10.838]             `<<-` <- base::`<<-`
[13:37:10.838]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:10.838]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:10.838]                   3L)]
[13:37:10.838]             }
[13:37:10.838]             function(cond) {
[13:37:10.838]                 is_error <- inherits(cond, "error")
[13:37:10.838]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:10.838]                   NULL)
[13:37:10.838]                 if (is_error) {
[13:37:10.838]                   sessionInformation <- function() {
[13:37:10.838]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:10.838]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:10.838]                       search = base::search(), system = base::Sys.info())
[13:37:10.838]                   }
[13:37:10.838]                   ...future.conditions[[length(...future.conditions) + 
[13:37:10.838]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:10.838]                     cond$call), session = sessionInformation(), 
[13:37:10.838]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:10.838]                   signalCondition(cond)
[13:37:10.838]                 }
[13:37:10.838]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:10.838]                 "immediateCondition"))) {
[13:37:10.838]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:10.838]                   ...future.conditions[[length(...future.conditions) + 
[13:37:10.838]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:10.838]                   if (TRUE && !signal) {
[13:37:10.838]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:10.838]                     {
[13:37:10.838]                       inherits <- base::inherits
[13:37:10.838]                       invokeRestart <- base::invokeRestart
[13:37:10.838]                       is.null <- base::is.null
[13:37:10.838]                       muffled <- FALSE
[13:37:10.838]                       if (inherits(cond, "message")) {
[13:37:10.838]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:10.838]                         if (muffled) 
[13:37:10.838]                           invokeRestart("muffleMessage")
[13:37:10.838]                       }
[13:37:10.838]                       else if (inherits(cond, "warning")) {
[13:37:10.838]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:10.838]                         if (muffled) 
[13:37:10.838]                           invokeRestart("muffleWarning")
[13:37:10.838]                       }
[13:37:10.838]                       else if (inherits(cond, "condition")) {
[13:37:10.838]                         if (!is.null(pattern)) {
[13:37:10.838]                           computeRestarts <- base::computeRestarts
[13:37:10.838]                           grepl <- base::grepl
[13:37:10.838]                           restarts <- computeRestarts(cond)
[13:37:10.838]                           for (restart in restarts) {
[13:37:10.838]                             name <- restart$name
[13:37:10.838]                             if (is.null(name)) 
[13:37:10.838]                               next
[13:37:10.838]                             if (!grepl(pattern, name)) 
[13:37:10.838]                               next
[13:37:10.838]                             invokeRestart(restart)
[13:37:10.838]                             muffled <- TRUE
[13:37:10.838]                             break
[13:37:10.838]                           }
[13:37:10.838]                         }
[13:37:10.838]                       }
[13:37:10.838]                       invisible(muffled)
[13:37:10.838]                     }
[13:37:10.838]                     muffleCondition(cond, pattern = "^muffle")
[13:37:10.838]                   }
[13:37:10.838]                 }
[13:37:10.838]                 else {
[13:37:10.838]                   if (TRUE) {
[13:37:10.838]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:10.838]                     {
[13:37:10.838]                       inherits <- base::inherits
[13:37:10.838]                       invokeRestart <- base::invokeRestart
[13:37:10.838]                       is.null <- base::is.null
[13:37:10.838]                       muffled <- FALSE
[13:37:10.838]                       if (inherits(cond, "message")) {
[13:37:10.838]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:10.838]                         if (muffled) 
[13:37:10.838]                           invokeRestart("muffleMessage")
[13:37:10.838]                       }
[13:37:10.838]                       else if (inherits(cond, "warning")) {
[13:37:10.838]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:10.838]                         if (muffled) 
[13:37:10.838]                           invokeRestart("muffleWarning")
[13:37:10.838]                       }
[13:37:10.838]                       else if (inherits(cond, "condition")) {
[13:37:10.838]                         if (!is.null(pattern)) {
[13:37:10.838]                           computeRestarts <- base::computeRestarts
[13:37:10.838]                           grepl <- base::grepl
[13:37:10.838]                           restarts <- computeRestarts(cond)
[13:37:10.838]                           for (restart in restarts) {
[13:37:10.838]                             name <- restart$name
[13:37:10.838]                             if (is.null(name)) 
[13:37:10.838]                               next
[13:37:10.838]                             if (!grepl(pattern, name)) 
[13:37:10.838]                               next
[13:37:10.838]                             invokeRestart(restart)
[13:37:10.838]                             muffled <- TRUE
[13:37:10.838]                             break
[13:37:10.838]                           }
[13:37:10.838]                         }
[13:37:10.838]                       }
[13:37:10.838]                       invisible(muffled)
[13:37:10.838]                     }
[13:37:10.838]                     muffleCondition(cond, pattern = "^muffle")
[13:37:10.838]                   }
[13:37:10.838]                 }
[13:37:10.838]             }
[13:37:10.838]         }))
[13:37:10.838]     }, error = function(ex) {
[13:37:10.838]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:10.838]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:10.838]                 ...future.rng), started = ...future.startTime, 
[13:37:10.838]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:10.838]             version = "1.8"), class = "FutureResult")
[13:37:10.838]     }, finally = {
[13:37:10.838]         if (!identical(...future.workdir, getwd())) 
[13:37:10.838]             setwd(...future.workdir)
[13:37:10.838]         {
[13:37:10.838]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:10.838]                 ...future.oldOptions$nwarnings <- NULL
[13:37:10.838]             }
[13:37:10.838]             base::options(...future.oldOptions)
[13:37:10.838]             if (.Platform$OS.type == "windows") {
[13:37:10.838]                 old_names <- names(...future.oldEnvVars)
[13:37:10.838]                 envs <- base::Sys.getenv()
[13:37:10.838]                 names <- names(envs)
[13:37:10.838]                 common <- intersect(names, old_names)
[13:37:10.838]                 added <- setdiff(names, old_names)
[13:37:10.838]                 removed <- setdiff(old_names, names)
[13:37:10.838]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:10.838]                   envs[common]]
[13:37:10.838]                 NAMES <- toupper(changed)
[13:37:10.838]                 args <- list()
[13:37:10.838]                 for (kk in seq_along(NAMES)) {
[13:37:10.838]                   name <- changed[[kk]]
[13:37:10.838]                   NAME <- NAMES[[kk]]
[13:37:10.838]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:10.838]                     next
[13:37:10.838]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:10.838]                 }
[13:37:10.838]                 NAMES <- toupper(added)
[13:37:10.838]                 for (kk in seq_along(NAMES)) {
[13:37:10.838]                   name <- added[[kk]]
[13:37:10.838]                   NAME <- NAMES[[kk]]
[13:37:10.838]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:10.838]                     next
[13:37:10.838]                   args[[name]] <- ""
[13:37:10.838]                 }
[13:37:10.838]                 NAMES <- toupper(removed)
[13:37:10.838]                 for (kk in seq_along(NAMES)) {
[13:37:10.838]                   name <- removed[[kk]]
[13:37:10.838]                   NAME <- NAMES[[kk]]
[13:37:10.838]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:10.838]                     next
[13:37:10.838]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:10.838]                 }
[13:37:10.838]                 if (length(args) > 0) 
[13:37:10.838]                   base::do.call(base::Sys.setenv, args = args)
[13:37:10.838]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:10.838]             }
[13:37:10.838]             else {
[13:37:10.838]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:10.838]             }
[13:37:10.838]             {
[13:37:10.838]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:10.838]                   0L) {
[13:37:10.838]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:10.838]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:10.838]                   base::options(opts)
[13:37:10.838]                 }
[13:37:10.838]                 {
[13:37:10.838]                   {
[13:37:10.838]                     base::options(mc.cores = ...future.mc.cores.old)
[13:37:10.838]                     NULL
[13:37:10.838]                   }
[13:37:10.838]                   options(future.plan = NULL)
[13:37:10.838]                   if (is.na(NA_character_)) 
[13:37:10.838]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:10.838]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:10.838]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:10.838]                     .init = FALSE)
[13:37:10.838]                 }
[13:37:10.838]             }
[13:37:10.838]         }
[13:37:10.838]     })
[13:37:10.838]     if (TRUE) {
[13:37:10.838]         base::sink(type = "output", split = FALSE)
[13:37:10.838]         if (TRUE) {
[13:37:10.838]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:10.838]         }
[13:37:10.838]         else {
[13:37:10.838]             ...future.result["stdout"] <- base::list(NULL)
[13:37:10.838]         }
[13:37:10.838]         base::close(...future.stdout)
[13:37:10.838]         ...future.stdout <- NULL
[13:37:10.838]     }
[13:37:10.838]     ...future.result$conditions <- ...future.conditions
[13:37:10.838]     ...future.result$finished <- base::Sys.time()
[13:37:10.838]     ...future.result
[13:37:10.838] }
[13:37:10.841] MultisessionFuture started
[13:37:10.841] - Launch lazy future ... done
[13:37:10.841] run() for ‘MultisessionFuture’ ... done
> v <- value(f)
[13:37:10.841] result() for ClusterFuture ...
[13:37:10.841] receiveMessageFromWorker() for ClusterFuture ...
[13:37:10.841] - Validating connection of MultisessionFuture
[13:37:10.911] - received message: FutureResult
[13:37:10.912] - Received FutureResult
[13:37:10.912] - Erased future from FutureRegistry
[13:37:10.912] result() for ClusterFuture ...
[13:37:10.912] - result already collected: FutureResult
[13:37:10.912] result() for ClusterFuture ... done
[13:37:10.912] - Garbage collecting worker ...
[13:37:11.140] - Garbage collecting worker ... done
[13:37:11.140] receiveMessageFromWorker() for ClusterFuture ... done
[13:37:11.141] result() for ClusterFuture ... done
[13:37:11.141] result() for ClusterFuture ...
[13:37:11.141] - result already collected: FutureResult
[13:37:11.141] result() for ClusterFuture ... done
> str(v)
 int [1:10000000] 0 0 0 0 0 0 0 0 0 0 ...
> 
> f <- future({ gc() })
[13:37:11.142] getGlobalsAndPackages() ...
[13:37:11.142] Searching for globals...
[13:37:11.143] - globals found: [2] ‘{’, ‘gc’
[13:37:11.143] Searching for globals ... DONE
[13:37:11.143] Resolving globals: FALSE
[13:37:11.143] 
[13:37:11.143] 
[13:37:11.143] getGlobalsAndPackages() ... DONE
[13:37:11.144] run() for ‘Future’ ...
[13:37:11.144] - state: ‘created’
[13:37:11.144] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:37:11.155] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:37:11.155] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:37:11.155]   - Field: ‘node’
[13:37:11.155]   - Field: ‘label’
[13:37:11.155]   - Field: ‘local’
[13:37:11.155]   - Field: ‘owner’
[13:37:11.155]   - Field: ‘envir’
[13:37:11.155]   - Field: ‘workers’
[13:37:11.156]   - Field: ‘packages’
[13:37:11.156]   - Field: ‘gc’
[13:37:11.156]   - Field: ‘conditions’
[13:37:11.156]   - Field: ‘persistent’
[13:37:11.156]   - Field: ‘expr’
[13:37:11.156]   - Field: ‘uuid’
[13:37:11.156]   - Field: ‘seed’
[13:37:11.156]   - Field: ‘version’
[13:37:11.156]   - Field: ‘result’
[13:37:11.156]   - Field: ‘asynchronous’
[13:37:11.156]   - Field: ‘calls’
[13:37:11.157]   - Field: ‘globals’
[13:37:11.157]   - Field: ‘stdout’
[13:37:11.157]   - Field: ‘earlySignal’
[13:37:11.157]   - Field: ‘lazy’
[13:37:11.157]   - Field: ‘state’
[13:37:11.157] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:37:11.157] - Launch lazy future ...
[13:37:11.157] Packages needed by the future expression (n = 0): <none>
[13:37:11.157] Packages needed by future strategies (n = 0): <none>
[13:37:11.158] {
[13:37:11.158]     {
[13:37:11.158]         {
[13:37:11.158]             ...future.startTime <- base::Sys.time()
[13:37:11.158]             {
[13:37:11.158]                 {
[13:37:11.158]                   {
[13:37:11.158]                     {
[13:37:11.158]                       base::local({
[13:37:11.158]                         has_future <- base::requireNamespace("future", 
[13:37:11.158]                           quietly = TRUE)
[13:37:11.158]                         if (has_future) {
[13:37:11.158]                           ns <- base::getNamespace("future")
[13:37:11.158]                           version <- ns[[".package"]][["version"]]
[13:37:11.158]                           if (is.null(version)) 
[13:37:11.158]                             version <- utils::packageVersion("future")
[13:37:11.158]                         }
[13:37:11.158]                         else {
[13:37:11.158]                           version <- NULL
[13:37:11.158]                         }
[13:37:11.158]                         if (!has_future || version < "1.8.0") {
[13:37:11.158]                           info <- base::c(r_version = base::gsub("R version ", 
[13:37:11.158]                             "", base::R.version$version.string), 
[13:37:11.158]                             platform = base::sprintf("%s (%s-bit)", 
[13:37:11.158]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:11.158]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:11.158]                               "release", "version")], collapse = " "), 
[13:37:11.158]                             hostname = base::Sys.info()[["nodename"]])
[13:37:11.158]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:37:11.158]                             info)
[13:37:11.158]                           info <- base::paste(info, collapse = "; ")
[13:37:11.158]                           if (!has_future) {
[13:37:11.158]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:11.158]                               info)
[13:37:11.158]                           }
[13:37:11.158]                           else {
[13:37:11.158]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:11.158]                               info, version)
[13:37:11.158]                           }
[13:37:11.158]                           base::stop(msg)
[13:37:11.158]                         }
[13:37:11.158]                       })
[13:37:11.158]                     }
[13:37:11.158]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:37:11.158]                     base::options(mc.cores = 1L)
[13:37:11.158]                   }
[13:37:11.158]                   ...future.strategy.old <- future::plan("list")
[13:37:11.158]                   options(future.plan = NULL)
[13:37:11.158]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:11.158]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:11.158]                 }
[13:37:11.158]                 ...future.workdir <- getwd()
[13:37:11.158]             }
[13:37:11.158]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:11.158]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:11.158]         }
[13:37:11.158]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:11.158]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:11.158]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:11.158]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:11.158]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:11.158]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:11.158]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:11.158]             base::names(...future.oldOptions))
[13:37:11.158]     }
[13:37:11.158]     if (FALSE) {
[13:37:11.158]     }
[13:37:11.158]     else {
[13:37:11.158]         if (TRUE) {
[13:37:11.158]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:11.158]                 open = "w")
[13:37:11.158]         }
[13:37:11.158]         else {
[13:37:11.158]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:11.158]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:11.158]         }
[13:37:11.158]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:11.158]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:11.158]             base::sink(type = "output", split = FALSE)
[13:37:11.158]             base::close(...future.stdout)
[13:37:11.158]         }, add = TRUE)
[13:37:11.158]     }
[13:37:11.158]     ...future.frame <- base::sys.nframe()
[13:37:11.158]     ...future.conditions <- base::list()
[13:37:11.158]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:11.158]     if (FALSE) {
[13:37:11.158]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:11.158]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:11.158]     }
[13:37:11.158]     ...future.result <- base::tryCatch({
[13:37:11.158]         base::withCallingHandlers({
[13:37:11.158]             ...future.value <- base::withVisible(base::local({
[13:37:11.158]                 ...future.makeSendCondition <- base::local({
[13:37:11.158]                   sendCondition <- NULL
[13:37:11.158]                   function(frame = 1L) {
[13:37:11.158]                     if (is.function(sendCondition)) 
[13:37:11.158]                       return(sendCondition)
[13:37:11.158]                     ns <- getNamespace("parallel")
[13:37:11.158]                     if (exists("sendData", mode = "function", 
[13:37:11.158]                       envir = ns)) {
[13:37:11.158]                       parallel_sendData <- get("sendData", mode = "function", 
[13:37:11.158]                         envir = ns)
[13:37:11.158]                       envir <- sys.frame(frame)
[13:37:11.158]                       master <- NULL
[13:37:11.158]                       while (!identical(envir, .GlobalEnv) && 
[13:37:11.158]                         !identical(envir, emptyenv())) {
[13:37:11.158]                         if (exists("master", mode = "list", envir = envir, 
[13:37:11.158]                           inherits = FALSE)) {
[13:37:11.158]                           master <- get("master", mode = "list", 
[13:37:11.158]                             envir = envir, inherits = FALSE)
[13:37:11.158]                           if (inherits(master, c("SOCKnode", 
[13:37:11.158]                             "SOCK0node"))) {
[13:37:11.158]                             sendCondition <<- function(cond) {
[13:37:11.158]                               data <- list(type = "VALUE", value = cond, 
[13:37:11.158]                                 success = TRUE)
[13:37:11.158]                               parallel_sendData(master, data)
[13:37:11.158]                             }
[13:37:11.158]                             return(sendCondition)
[13:37:11.158]                           }
[13:37:11.158]                         }
[13:37:11.158]                         frame <- frame + 1L
[13:37:11.158]                         envir <- sys.frame(frame)
[13:37:11.158]                       }
[13:37:11.158]                     }
[13:37:11.158]                     sendCondition <<- function(cond) NULL
[13:37:11.158]                   }
[13:37:11.158]                 })
[13:37:11.158]                 withCallingHandlers({
[13:37:11.158]                   {
[13:37:11.158]                     gc()
[13:37:11.158]                   }
[13:37:11.158]                 }, immediateCondition = function(cond) {
[13:37:11.158]                   sendCondition <- ...future.makeSendCondition()
[13:37:11.158]                   sendCondition(cond)
[13:37:11.158]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:11.158]                   {
[13:37:11.158]                     inherits <- base::inherits
[13:37:11.158]                     invokeRestart <- base::invokeRestart
[13:37:11.158]                     is.null <- base::is.null
[13:37:11.158]                     muffled <- FALSE
[13:37:11.158]                     if (inherits(cond, "message")) {
[13:37:11.158]                       muffled <- grepl(pattern, "muffleMessage")
[13:37:11.158]                       if (muffled) 
[13:37:11.158]                         invokeRestart("muffleMessage")
[13:37:11.158]                     }
[13:37:11.158]                     else if (inherits(cond, "warning")) {
[13:37:11.158]                       muffled <- grepl(pattern, "muffleWarning")
[13:37:11.158]                       if (muffled) 
[13:37:11.158]                         invokeRestart("muffleWarning")
[13:37:11.158]                     }
[13:37:11.158]                     else if (inherits(cond, "condition")) {
[13:37:11.158]                       if (!is.null(pattern)) {
[13:37:11.158]                         computeRestarts <- base::computeRestarts
[13:37:11.158]                         grepl <- base::grepl
[13:37:11.158]                         restarts <- computeRestarts(cond)
[13:37:11.158]                         for (restart in restarts) {
[13:37:11.158]                           name <- restart$name
[13:37:11.158]                           if (is.null(name)) 
[13:37:11.158]                             next
[13:37:11.158]                           if (!grepl(pattern, name)) 
[13:37:11.158]                             next
[13:37:11.158]                           invokeRestart(restart)
[13:37:11.158]                           muffled <- TRUE
[13:37:11.158]                           break
[13:37:11.158]                         }
[13:37:11.158]                       }
[13:37:11.158]                     }
[13:37:11.158]                     invisible(muffled)
[13:37:11.158]                   }
[13:37:11.158]                   muffleCondition(cond)
[13:37:11.158]                 })
[13:37:11.158]             }))
[13:37:11.158]             future::FutureResult(value = ...future.value$value, 
[13:37:11.158]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:11.158]                   ...future.rng), globalenv = if (FALSE) 
[13:37:11.158]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:11.158]                     ...future.globalenv.names))
[13:37:11.158]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:11.158]         }, condition = base::local({
[13:37:11.158]             c <- base::c
[13:37:11.158]             inherits <- base::inherits
[13:37:11.158]             invokeRestart <- base::invokeRestart
[13:37:11.158]             length <- base::length
[13:37:11.158]             list <- base::list
[13:37:11.158]             seq.int <- base::seq.int
[13:37:11.158]             signalCondition <- base::signalCondition
[13:37:11.158]             sys.calls <- base::sys.calls
[13:37:11.158]             `[[` <- base::`[[`
[13:37:11.158]             `+` <- base::`+`
[13:37:11.158]             `<<-` <- base::`<<-`
[13:37:11.158]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:11.158]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:11.158]                   3L)]
[13:37:11.158]             }
[13:37:11.158]             function(cond) {
[13:37:11.158]                 is_error <- inherits(cond, "error")
[13:37:11.158]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:11.158]                   NULL)
[13:37:11.158]                 if (is_error) {
[13:37:11.158]                   sessionInformation <- function() {
[13:37:11.158]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:11.158]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:11.158]                       search = base::search(), system = base::Sys.info())
[13:37:11.158]                   }
[13:37:11.158]                   ...future.conditions[[length(...future.conditions) + 
[13:37:11.158]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:11.158]                     cond$call), session = sessionInformation(), 
[13:37:11.158]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:11.158]                   signalCondition(cond)
[13:37:11.158]                 }
[13:37:11.158]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:11.158]                 "immediateCondition"))) {
[13:37:11.158]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:11.158]                   ...future.conditions[[length(...future.conditions) + 
[13:37:11.158]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:11.158]                   if (TRUE && !signal) {
[13:37:11.158]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:11.158]                     {
[13:37:11.158]                       inherits <- base::inherits
[13:37:11.158]                       invokeRestart <- base::invokeRestart
[13:37:11.158]                       is.null <- base::is.null
[13:37:11.158]                       muffled <- FALSE
[13:37:11.158]                       if (inherits(cond, "message")) {
[13:37:11.158]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:11.158]                         if (muffled) 
[13:37:11.158]                           invokeRestart("muffleMessage")
[13:37:11.158]                       }
[13:37:11.158]                       else if (inherits(cond, "warning")) {
[13:37:11.158]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:11.158]                         if (muffled) 
[13:37:11.158]                           invokeRestart("muffleWarning")
[13:37:11.158]                       }
[13:37:11.158]                       else if (inherits(cond, "condition")) {
[13:37:11.158]                         if (!is.null(pattern)) {
[13:37:11.158]                           computeRestarts <- base::computeRestarts
[13:37:11.158]                           grepl <- base::grepl
[13:37:11.158]                           restarts <- computeRestarts(cond)
[13:37:11.158]                           for (restart in restarts) {
[13:37:11.158]                             name <- restart$name
[13:37:11.158]                             if (is.null(name)) 
[13:37:11.158]                               next
[13:37:11.158]                             if (!grepl(pattern, name)) 
[13:37:11.158]                               next
[13:37:11.158]                             invokeRestart(restart)
[13:37:11.158]                             muffled <- TRUE
[13:37:11.158]                             break
[13:37:11.158]                           }
[13:37:11.158]                         }
[13:37:11.158]                       }
[13:37:11.158]                       invisible(muffled)
[13:37:11.158]                     }
[13:37:11.158]                     muffleCondition(cond, pattern = "^muffle")
[13:37:11.158]                   }
[13:37:11.158]                 }
[13:37:11.158]                 else {
[13:37:11.158]                   if (TRUE) {
[13:37:11.158]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:11.158]                     {
[13:37:11.158]                       inherits <- base::inherits
[13:37:11.158]                       invokeRestart <- base::invokeRestart
[13:37:11.158]                       is.null <- base::is.null
[13:37:11.158]                       muffled <- FALSE
[13:37:11.158]                       if (inherits(cond, "message")) {
[13:37:11.158]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:11.158]                         if (muffled) 
[13:37:11.158]                           invokeRestart("muffleMessage")
[13:37:11.158]                       }
[13:37:11.158]                       else if (inherits(cond, "warning")) {
[13:37:11.158]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:11.158]                         if (muffled) 
[13:37:11.158]                           invokeRestart("muffleWarning")
[13:37:11.158]                       }
[13:37:11.158]                       else if (inherits(cond, "condition")) {
[13:37:11.158]                         if (!is.null(pattern)) {
[13:37:11.158]                           computeRestarts <- base::computeRestarts
[13:37:11.158]                           grepl <- base::grepl
[13:37:11.158]                           restarts <- computeRestarts(cond)
[13:37:11.158]                           for (restart in restarts) {
[13:37:11.158]                             name <- restart$name
[13:37:11.158]                             if (is.null(name)) 
[13:37:11.158]                               next
[13:37:11.158]                             if (!grepl(pattern, name)) 
[13:37:11.158]                               next
[13:37:11.158]                             invokeRestart(restart)
[13:37:11.158]                             muffled <- TRUE
[13:37:11.158]                             break
[13:37:11.158]                           }
[13:37:11.158]                         }
[13:37:11.158]                       }
[13:37:11.158]                       invisible(muffled)
[13:37:11.158]                     }
[13:37:11.158]                     muffleCondition(cond, pattern = "^muffle")
[13:37:11.158]                   }
[13:37:11.158]                 }
[13:37:11.158]             }
[13:37:11.158]         }))
[13:37:11.158]     }, error = function(ex) {
[13:37:11.158]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:11.158]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:11.158]                 ...future.rng), started = ...future.startTime, 
[13:37:11.158]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:11.158]             version = "1.8"), class = "FutureResult")
[13:37:11.158]     }, finally = {
[13:37:11.158]         if (!identical(...future.workdir, getwd())) 
[13:37:11.158]             setwd(...future.workdir)
[13:37:11.158]         {
[13:37:11.158]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:11.158]                 ...future.oldOptions$nwarnings <- NULL
[13:37:11.158]             }
[13:37:11.158]             base::options(...future.oldOptions)
[13:37:11.158]             if (.Platform$OS.type == "windows") {
[13:37:11.158]                 old_names <- names(...future.oldEnvVars)
[13:37:11.158]                 envs <- base::Sys.getenv()
[13:37:11.158]                 names <- names(envs)
[13:37:11.158]                 common <- intersect(names, old_names)
[13:37:11.158]                 added <- setdiff(names, old_names)
[13:37:11.158]                 removed <- setdiff(old_names, names)
[13:37:11.158]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:11.158]                   envs[common]]
[13:37:11.158]                 NAMES <- toupper(changed)
[13:37:11.158]                 args <- list()
[13:37:11.158]                 for (kk in seq_along(NAMES)) {
[13:37:11.158]                   name <- changed[[kk]]
[13:37:11.158]                   NAME <- NAMES[[kk]]
[13:37:11.158]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:11.158]                     next
[13:37:11.158]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:11.158]                 }
[13:37:11.158]                 NAMES <- toupper(added)
[13:37:11.158]                 for (kk in seq_along(NAMES)) {
[13:37:11.158]                   name <- added[[kk]]
[13:37:11.158]                   NAME <- NAMES[[kk]]
[13:37:11.158]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:11.158]                     next
[13:37:11.158]                   args[[name]] <- ""
[13:37:11.158]                 }
[13:37:11.158]                 NAMES <- toupper(removed)
[13:37:11.158]                 for (kk in seq_along(NAMES)) {
[13:37:11.158]                   name <- removed[[kk]]
[13:37:11.158]                   NAME <- NAMES[[kk]]
[13:37:11.158]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:11.158]                     next
[13:37:11.158]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:11.158]                 }
[13:37:11.158]                 if (length(args) > 0) 
[13:37:11.158]                   base::do.call(base::Sys.setenv, args = args)
[13:37:11.158]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:11.158]             }
[13:37:11.158]             else {
[13:37:11.158]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:11.158]             }
[13:37:11.158]             {
[13:37:11.158]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:11.158]                   0L) {
[13:37:11.158]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:11.158]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:11.158]                   base::options(opts)
[13:37:11.158]                 }
[13:37:11.158]                 {
[13:37:11.158]                   {
[13:37:11.158]                     base::options(mc.cores = ...future.mc.cores.old)
[13:37:11.158]                     NULL
[13:37:11.158]                   }
[13:37:11.158]                   options(future.plan = NULL)
[13:37:11.158]                   if (is.na(NA_character_)) 
[13:37:11.158]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:11.158]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:11.158]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:11.158]                     .init = FALSE)
[13:37:11.158]                 }
[13:37:11.158]             }
[13:37:11.158]         }
[13:37:11.158]     })
[13:37:11.158]     if (TRUE) {
[13:37:11.158]         base::sink(type = "output", split = FALSE)
[13:37:11.158]         if (TRUE) {
[13:37:11.158]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:11.158]         }
[13:37:11.158]         else {
[13:37:11.158]             ...future.result["stdout"] <- base::list(NULL)
[13:37:11.158]         }
[13:37:11.158]         base::close(...future.stdout)
[13:37:11.158]         ...future.stdout <- NULL
[13:37:11.158]     }
[13:37:11.158]     ...future.result$conditions <- ...future.conditions
[13:37:11.158]     ...future.result$finished <- base::Sys.time()
[13:37:11.158]     ...future.result
[13:37:11.158] }
[13:37:11.161] MultisessionFuture started
[13:37:11.161] - Launch lazy future ... done
[13:37:11.161] run() for ‘MultisessionFuture’ ... done
> v <- value(f)
[13:37:11.161] result() for ClusterFuture ...
[13:37:11.161] receiveMessageFromWorker() for ClusterFuture ...
[13:37:11.161] - Validating connection of MultisessionFuture
[13:37:11.227] - received message: FutureResult
[13:37:11.227] - Received FutureResult
[13:37:11.227] - Erased future from FutureRegistry
[13:37:11.228] result() for ClusterFuture ...
[13:37:11.228] - result already collected: FutureResult
[13:37:11.228] result() for ClusterFuture ... done
[13:37:11.228] receiveMessageFromWorker() for ClusterFuture ... done
[13:37:11.228] result() for ClusterFuture ... done
[13:37:11.228] result() for ClusterFuture ...
[13:37:11.228] - result already collected: FutureResult
[13:37:11.228] result() for ClusterFuture ... done
> print(v)
         used (Mb) gc trigger  (Mb) max used  (Mb)
Ncells 394918 21.1     878051  46.9   664331  35.5
Vcells 703915  5.4   13457143 102.7 15780323 120.4
> 
> message("*** multisession(..., gc = TRUE) ... TRUE")
*** multisession(..., gc = TRUE) ... TRUE
> 
> 
> message("*** multisession(...) - stopping with plan() change ...")
*** multisession(...) - stopping with plan() change ...
>   
> plan(multisession, workers = 2L)
[13:37:11.229] plan(): Setting new future strategy stack:
[13:37:11.229] List of future strategies:
[13:37:11.229] 1. multisession:
[13:37:11.229]    - args: function (..., workers = 2L, envir = parent.frame())
[13:37:11.229]    - tweaked: TRUE
[13:37:11.229]    - call: plan(multisession, workers = 2L)
[13:37:11.230] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:37:11.230] multisession:
[13:37:11.230] - args: function (..., workers = 2L, envir = parent.frame())
[13:37:11.230] - tweaked: TRUE
[13:37:11.230] - call: plan(multisession, workers = 2L)
[13:37:11.231] getGlobalsAndPackages() ...
[13:37:11.231] Not searching for globals
[13:37:11.231] - globals: [0] <none>
[13:37:11.231] getGlobalsAndPackages() ... DONE
[13:37:11.232] [local output] makeClusterPSOCK() ...
[13:37:11.236] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:37:11.237] [local output] Base port: 11606
[13:37:11.237] [local output] Getting setup options for 2 cluster nodes ...
[13:37:11.238] [local output]  - Node 1 of 2 ...
[13:37:11.238] [local output] localMachine=TRUE => revtunnel=FALSE

[13:37:11.239] [local output] Rscript port: 11606

[13:37:11.240] [local output]  - Node 2 of 2 ...
[13:37:11.240] [local output] localMachine=TRUE => revtunnel=FALSE

[13:37:11.241] [local output] Rscript port: 11606

[13:37:11.242] [local output] Getting setup options for 2 cluster nodes ... done
[13:37:11.242] [local output]  - Parallel setup requested for some PSOCK nodes
[13:37:11.242] [local output] Setting up PSOCK nodes in parallel
[13:37:11.242] List of 36
[13:37:11.242]  $ worker          : chr "localhost"
[13:37:11.242]   ..- attr(*, "localhost")= logi TRUE
[13:37:11.242]  $ master          : chr "localhost"
[13:37:11.242]  $ port            : int 11606
[13:37:11.242]  $ connectTimeout  : num 120
[13:37:11.242]  $ timeout         : num 2592000
[13:37:11.242]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:37:11.242]  $ homogeneous     : logi TRUE
[13:37:11.242]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:37:11.242]  $ rscript_envs    : NULL
[13:37:11.242]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:37:11.242]  $ rscript_startup : NULL
[13:37:11.242]  $ rscript_sh      : chr "sh"
[13:37:11.242]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:37:11.242]  $ methods         : logi TRUE
[13:37:11.242]  $ socketOptions   : chr "no-delay"
[13:37:11.242]  $ useXDR          : logi FALSE
[13:37:11.242]  $ outfile         : chr "/dev/null"
[13:37:11.242]  $ renice          : int NA
[13:37:11.242]  $ rshcmd          : NULL
[13:37:11.242]  $ user            : chr(0) 
[13:37:11.242]  $ revtunnel       : logi FALSE
[13:37:11.242]  $ rshlogfile      : NULL
[13:37:11.242]  $ rshopts         : chr(0) 
[13:37:11.242]  $ rank            : int 1
[13:37:11.242]  $ manual          : logi FALSE
[13:37:11.242]  $ dryrun          : logi FALSE
[13:37:11.242]  $ quiet           : logi FALSE
[13:37:11.242]  $ setup_strategy  : chr "parallel"
[13:37:11.242]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:37:11.242]  $ pidfile         : chr "/tmp/RtmppDRSMv/worker.rank=1.parallelly.parent=86163.150934a2753e7.pid"
[13:37:11.242]  $ rshcmd_label    : NULL
[13:37:11.242]  $ rsh_call        : NULL
[13:37:11.242]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:37:11.242]  $ localMachine    : logi TRUE
[13:37:11.242]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:37:11.242]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:37:11.242]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:37:11.242]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:37:11.242]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:37:11.242]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:37:11.242]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:37:11.242]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:37:11.242]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:37:11.242]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:37:11.242]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:37:11.242]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:37:11.242]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:37:11.242]  $ arguments       :List of 28
[13:37:11.242]   ..$ worker          : chr "localhost"
[13:37:11.242]   ..$ master          : NULL
[13:37:11.242]   ..$ port            : int 11606
[13:37:11.242]   ..$ connectTimeout  : num 120
[13:37:11.242]   ..$ timeout         : num 2592000
[13:37:11.242]   ..$ rscript         : NULL
[13:37:11.242]   ..$ homogeneous     : NULL
[13:37:11.242]   ..$ rscript_args    : NULL
[13:37:11.242]   ..$ rscript_envs    : NULL
[13:37:11.242]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:37:11.242]   ..$ rscript_startup : NULL
[13:37:11.242]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:37:11.242]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:37:11.242]   ..$ methods         : logi TRUE
[13:37:11.242]   ..$ socketOptions   : chr "no-delay"
[13:37:11.242]   ..$ useXDR          : logi FALSE
[13:37:11.242]   ..$ outfile         : chr "/dev/null"
[13:37:11.242]   ..$ renice          : int NA
[13:37:11.242]   ..$ rshcmd          : NULL
[13:37:11.242]   ..$ user            : NULL
[13:37:11.242]   ..$ revtunnel       : logi NA
[13:37:11.242]   ..$ rshlogfile      : NULL
[13:37:11.242]   ..$ rshopts         : NULL
[13:37:11.242]   ..$ rank            : int 1
[13:37:11.242]   ..$ manual          : logi FALSE
[13:37:11.242]   ..$ dryrun          : logi FALSE
[13:37:11.242]   ..$ quiet           : logi FALSE
[13:37:11.242]   ..$ setup_strategy  : chr "parallel"
[13:37:11.242]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:37:11.264] [local output] System call to launch all workers:
[13:37:11.264] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmppDRSMv/worker.rank=1.parallelly.parent=86163.150934a2753e7.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11606 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:37:11.264] [local output] Starting PSOCK main server
[13:37:11.265] [local output] Workers launched
[13:37:11.266] [local output] Waiting for workers to connect back
[13:37:11.266]  - [local output] 0 workers out of 2 ready
[13:37:11.510]  - [local output] 0 workers out of 2 ready
[13:37:11.511]  - [local output] 1 workers out of 2 ready
[13:37:11.511]  - [local output] 2 workers out of 2 ready
[13:37:11.511] [local output] Launching of workers completed
[13:37:11.511] [local output] Collecting session information from workers
[13:37:11.512] [local output]  - Worker #1 of 2
[13:37:11.512] [local output]  - Worker #2 of 2
[13:37:11.513] [local output] makeClusterPSOCK() ... done
[13:37:11.524] Packages needed by the future expression (n = 0): <none>
[13:37:11.524] Packages needed by future strategies (n = 0): <none>
[13:37:11.524] {
[13:37:11.524]     {
[13:37:11.524]         {
[13:37:11.524]             ...future.startTime <- base::Sys.time()
[13:37:11.524]             {
[13:37:11.524]                 {
[13:37:11.524]                   {
[13:37:11.524]                     {
[13:37:11.524]                       base::local({
[13:37:11.524]                         has_future <- base::requireNamespace("future", 
[13:37:11.524]                           quietly = TRUE)
[13:37:11.524]                         if (has_future) {
[13:37:11.524]                           ns <- base::getNamespace("future")
[13:37:11.524]                           version <- ns[[".package"]][["version"]]
[13:37:11.524]                           if (is.null(version)) 
[13:37:11.524]                             version <- utils::packageVersion("future")
[13:37:11.524]                         }
[13:37:11.524]                         else {
[13:37:11.524]                           version <- NULL
[13:37:11.524]                         }
[13:37:11.524]                         if (!has_future || version < "1.8.0") {
[13:37:11.524]                           info <- base::c(r_version = base::gsub("R version ", 
[13:37:11.524]                             "", base::R.version$version.string), 
[13:37:11.524]                             platform = base::sprintf("%s (%s-bit)", 
[13:37:11.524]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:11.524]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:11.524]                               "release", "version")], collapse = " "), 
[13:37:11.524]                             hostname = base::Sys.info()[["nodename"]])
[13:37:11.524]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:37:11.524]                             info)
[13:37:11.524]                           info <- base::paste(info, collapse = "; ")
[13:37:11.524]                           if (!has_future) {
[13:37:11.524]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:11.524]                               info)
[13:37:11.524]                           }
[13:37:11.524]                           else {
[13:37:11.524]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:11.524]                               info, version)
[13:37:11.524]                           }
[13:37:11.524]                           base::stop(msg)
[13:37:11.524]                         }
[13:37:11.524]                       })
[13:37:11.524]                     }
[13:37:11.524]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:37:11.524]                     base::options(mc.cores = 1L)
[13:37:11.524]                   }
[13:37:11.524]                   ...future.strategy.old <- future::plan("list")
[13:37:11.524]                   options(future.plan = NULL)
[13:37:11.524]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:11.524]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:11.524]                 }
[13:37:11.524]                 ...future.workdir <- getwd()
[13:37:11.524]             }
[13:37:11.524]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:11.524]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:11.524]         }
[13:37:11.524]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:11.524]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:11.524]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:11.524]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:11.524]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:11.524]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:11.524]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:11.524]             base::names(...future.oldOptions))
[13:37:11.524]     }
[13:37:11.524]     if (FALSE) {
[13:37:11.524]     }
[13:37:11.524]     else {
[13:37:11.524]         if (TRUE) {
[13:37:11.524]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:11.524]                 open = "w")
[13:37:11.524]         }
[13:37:11.524]         else {
[13:37:11.524]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:11.524]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:11.524]         }
[13:37:11.524]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:11.524]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:11.524]             base::sink(type = "output", split = FALSE)
[13:37:11.524]             base::close(...future.stdout)
[13:37:11.524]         }, add = TRUE)
[13:37:11.524]     }
[13:37:11.524]     ...future.frame <- base::sys.nframe()
[13:37:11.524]     ...future.conditions <- base::list()
[13:37:11.524]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:11.524]     if (FALSE) {
[13:37:11.524]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:11.524]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:11.524]     }
[13:37:11.524]     ...future.result <- base::tryCatch({
[13:37:11.524]         base::withCallingHandlers({
[13:37:11.524]             ...future.value <- base::withVisible(base::local({
[13:37:11.524]                 ...future.makeSendCondition <- base::local({
[13:37:11.524]                   sendCondition <- NULL
[13:37:11.524]                   function(frame = 1L) {
[13:37:11.524]                     if (is.function(sendCondition)) 
[13:37:11.524]                       return(sendCondition)
[13:37:11.524]                     ns <- getNamespace("parallel")
[13:37:11.524]                     if (exists("sendData", mode = "function", 
[13:37:11.524]                       envir = ns)) {
[13:37:11.524]                       parallel_sendData <- get("sendData", mode = "function", 
[13:37:11.524]                         envir = ns)
[13:37:11.524]                       envir <- sys.frame(frame)
[13:37:11.524]                       master <- NULL
[13:37:11.524]                       while (!identical(envir, .GlobalEnv) && 
[13:37:11.524]                         !identical(envir, emptyenv())) {
[13:37:11.524]                         if (exists("master", mode = "list", envir = envir, 
[13:37:11.524]                           inherits = FALSE)) {
[13:37:11.524]                           master <- get("master", mode = "list", 
[13:37:11.524]                             envir = envir, inherits = FALSE)
[13:37:11.524]                           if (inherits(master, c("SOCKnode", 
[13:37:11.524]                             "SOCK0node"))) {
[13:37:11.524]                             sendCondition <<- function(cond) {
[13:37:11.524]                               data <- list(type = "VALUE", value = cond, 
[13:37:11.524]                                 success = TRUE)
[13:37:11.524]                               parallel_sendData(master, data)
[13:37:11.524]                             }
[13:37:11.524]                             return(sendCondition)
[13:37:11.524]                           }
[13:37:11.524]                         }
[13:37:11.524]                         frame <- frame + 1L
[13:37:11.524]                         envir <- sys.frame(frame)
[13:37:11.524]                       }
[13:37:11.524]                     }
[13:37:11.524]                     sendCondition <<- function(cond) NULL
[13:37:11.524]                   }
[13:37:11.524]                 })
[13:37:11.524]                 withCallingHandlers({
[13:37:11.524]                   NA
[13:37:11.524]                 }, immediateCondition = function(cond) {
[13:37:11.524]                   sendCondition <- ...future.makeSendCondition()
[13:37:11.524]                   sendCondition(cond)
[13:37:11.524]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:11.524]                   {
[13:37:11.524]                     inherits <- base::inherits
[13:37:11.524]                     invokeRestart <- base::invokeRestart
[13:37:11.524]                     is.null <- base::is.null
[13:37:11.524]                     muffled <- FALSE
[13:37:11.524]                     if (inherits(cond, "message")) {
[13:37:11.524]                       muffled <- grepl(pattern, "muffleMessage")
[13:37:11.524]                       if (muffled) 
[13:37:11.524]                         invokeRestart("muffleMessage")
[13:37:11.524]                     }
[13:37:11.524]                     else if (inherits(cond, "warning")) {
[13:37:11.524]                       muffled <- grepl(pattern, "muffleWarning")
[13:37:11.524]                       if (muffled) 
[13:37:11.524]                         invokeRestart("muffleWarning")
[13:37:11.524]                     }
[13:37:11.524]                     else if (inherits(cond, "condition")) {
[13:37:11.524]                       if (!is.null(pattern)) {
[13:37:11.524]                         computeRestarts <- base::computeRestarts
[13:37:11.524]                         grepl <- base::grepl
[13:37:11.524]                         restarts <- computeRestarts(cond)
[13:37:11.524]                         for (restart in restarts) {
[13:37:11.524]                           name <- restart$name
[13:37:11.524]                           if (is.null(name)) 
[13:37:11.524]                             next
[13:37:11.524]                           if (!grepl(pattern, name)) 
[13:37:11.524]                             next
[13:37:11.524]                           invokeRestart(restart)
[13:37:11.524]                           muffled <- TRUE
[13:37:11.524]                           break
[13:37:11.524]                         }
[13:37:11.524]                       }
[13:37:11.524]                     }
[13:37:11.524]                     invisible(muffled)
[13:37:11.524]                   }
[13:37:11.524]                   muffleCondition(cond)
[13:37:11.524]                 })
[13:37:11.524]             }))
[13:37:11.524]             future::FutureResult(value = ...future.value$value, 
[13:37:11.524]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:11.524]                   ...future.rng), globalenv = if (FALSE) 
[13:37:11.524]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:11.524]                     ...future.globalenv.names))
[13:37:11.524]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:11.524]         }, condition = base::local({
[13:37:11.524]             c <- base::c
[13:37:11.524]             inherits <- base::inherits
[13:37:11.524]             invokeRestart <- base::invokeRestart
[13:37:11.524]             length <- base::length
[13:37:11.524]             list <- base::list
[13:37:11.524]             seq.int <- base::seq.int
[13:37:11.524]             signalCondition <- base::signalCondition
[13:37:11.524]             sys.calls <- base::sys.calls
[13:37:11.524]             `[[` <- base::`[[`
[13:37:11.524]             `+` <- base::`+`
[13:37:11.524]             `<<-` <- base::`<<-`
[13:37:11.524]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:11.524]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:11.524]                   3L)]
[13:37:11.524]             }
[13:37:11.524]             function(cond) {
[13:37:11.524]                 is_error <- inherits(cond, "error")
[13:37:11.524]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:11.524]                   NULL)
[13:37:11.524]                 if (is_error) {
[13:37:11.524]                   sessionInformation <- function() {
[13:37:11.524]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:11.524]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:11.524]                       search = base::search(), system = base::Sys.info())
[13:37:11.524]                   }
[13:37:11.524]                   ...future.conditions[[length(...future.conditions) + 
[13:37:11.524]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:11.524]                     cond$call), session = sessionInformation(), 
[13:37:11.524]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:11.524]                   signalCondition(cond)
[13:37:11.524]                 }
[13:37:11.524]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:11.524]                 "immediateCondition"))) {
[13:37:11.524]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:11.524]                   ...future.conditions[[length(...future.conditions) + 
[13:37:11.524]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:11.524]                   if (TRUE && !signal) {
[13:37:11.524]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:11.524]                     {
[13:37:11.524]                       inherits <- base::inherits
[13:37:11.524]                       invokeRestart <- base::invokeRestart
[13:37:11.524]                       is.null <- base::is.null
[13:37:11.524]                       muffled <- FALSE
[13:37:11.524]                       if (inherits(cond, "message")) {
[13:37:11.524]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:11.524]                         if (muffled) 
[13:37:11.524]                           invokeRestart("muffleMessage")
[13:37:11.524]                       }
[13:37:11.524]                       else if (inherits(cond, "warning")) {
[13:37:11.524]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:11.524]                         if (muffled) 
[13:37:11.524]                           invokeRestart("muffleWarning")
[13:37:11.524]                       }
[13:37:11.524]                       else if (inherits(cond, "condition")) {
[13:37:11.524]                         if (!is.null(pattern)) {
[13:37:11.524]                           computeRestarts <- base::computeRestarts
[13:37:11.524]                           grepl <- base::grepl
[13:37:11.524]                           restarts <- computeRestarts(cond)
[13:37:11.524]                           for (restart in restarts) {
[13:37:11.524]                             name <- restart$name
[13:37:11.524]                             if (is.null(name)) 
[13:37:11.524]                               next
[13:37:11.524]                             if (!grepl(pattern, name)) 
[13:37:11.524]                               next
[13:37:11.524]                             invokeRestart(restart)
[13:37:11.524]                             muffled <- TRUE
[13:37:11.524]                             break
[13:37:11.524]                           }
[13:37:11.524]                         }
[13:37:11.524]                       }
[13:37:11.524]                       invisible(muffled)
[13:37:11.524]                     }
[13:37:11.524]                     muffleCondition(cond, pattern = "^muffle")
[13:37:11.524]                   }
[13:37:11.524]                 }
[13:37:11.524]                 else {
[13:37:11.524]                   if (TRUE) {
[13:37:11.524]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:11.524]                     {
[13:37:11.524]                       inherits <- base::inherits
[13:37:11.524]                       invokeRestart <- base::invokeRestart
[13:37:11.524]                       is.null <- base::is.null
[13:37:11.524]                       muffled <- FALSE
[13:37:11.524]                       if (inherits(cond, "message")) {
[13:37:11.524]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:11.524]                         if (muffled) 
[13:37:11.524]                           invokeRestart("muffleMessage")
[13:37:11.524]                       }
[13:37:11.524]                       else if (inherits(cond, "warning")) {
[13:37:11.524]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:11.524]                         if (muffled) 
[13:37:11.524]                           invokeRestart("muffleWarning")
[13:37:11.524]                       }
[13:37:11.524]                       else if (inherits(cond, "condition")) {
[13:37:11.524]                         if (!is.null(pattern)) {
[13:37:11.524]                           computeRestarts <- base::computeRestarts
[13:37:11.524]                           grepl <- base::grepl
[13:37:11.524]                           restarts <- computeRestarts(cond)
[13:37:11.524]                           for (restart in restarts) {
[13:37:11.524]                             name <- restart$name
[13:37:11.524]                             if (is.null(name)) 
[13:37:11.524]                               next
[13:37:11.524]                             if (!grepl(pattern, name)) 
[13:37:11.524]                               next
[13:37:11.524]                             invokeRestart(restart)
[13:37:11.524]                             muffled <- TRUE
[13:37:11.524]                             break
[13:37:11.524]                           }
[13:37:11.524]                         }
[13:37:11.524]                       }
[13:37:11.524]                       invisible(muffled)
[13:37:11.524]                     }
[13:37:11.524]                     muffleCondition(cond, pattern = "^muffle")
[13:37:11.524]                   }
[13:37:11.524]                 }
[13:37:11.524]             }
[13:37:11.524]         }))
[13:37:11.524]     }, error = function(ex) {
[13:37:11.524]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:11.524]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:11.524]                 ...future.rng), started = ...future.startTime, 
[13:37:11.524]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:11.524]             version = "1.8"), class = "FutureResult")
[13:37:11.524]     }, finally = {
[13:37:11.524]         if (!identical(...future.workdir, getwd())) 
[13:37:11.524]             setwd(...future.workdir)
[13:37:11.524]         {
[13:37:11.524]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:11.524]                 ...future.oldOptions$nwarnings <- NULL
[13:37:11.524]             }
[13:37:11.524]             base::options(...future.oldOptions)
[13:37:11.524]             if (.Platform$OS.type == "windows") {
[13:37:11.524]                 old_names <- names(...future.oldEnvVars)
[13:37:11.524]                 envs <- base::Sys.getenv()
[13:37:11.524]                 names <- names(envs)
[13:37:11.524]                 common <- intersect(names, old_names)
[13:37:11.524]                 added <- setdiff(names, old_names)
[13:37:11.524]                 removed <- setdiff(old_names, names)
[13:37:11.524]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:11.524]                   envs[common]]
[13:37:11.524]                 NAMES <- toupper(changed)
[13:37:11.524]                 args <- list()
[13:37:11.524]                 for (kk in seq_along(NAMES)) {
[13:37:11.524]                   name <- changed[[kk]]
[13:37:11.524]                   NAME <- NAMES[[kk]]
[13:37:11.524]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:11.524]                     next
[13:37:11.524]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:11.524]                 }
[13:37:11.524]                 NAMES <- toupper(added)
[13:37:11.524]                 for (kk in seq_along(NAMES)) {
[13:37:11.524]                   name <- added[[kk]]
[13:37:11.524]                   NAME <- NAMES[[kk]]
[13:37:11.524]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:11.524]                     next
[13:37:11.524]                   args[[name]] <- ""
[13:37:11.524]                 }
[13:37:11.524]                 NAMES <- toupper(removed)
[13:37:11.524]                 for (kk in seq_along(NAMES)) {
[13:37:11.524]                   name <- removed[[kk]]
[13:37:11.524]                   NAME <- NAMES[[kk]]
[13:37:11.524]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:11.524]                     next
[13:37:11.524]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:11.524]                 }
[13:37:11.524]                 if (length(args) > 0) 
[13:37:11.524]                   base::do.call(base::Sys.setenv, args = args)
[13:37:11.524]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:11.524]             }
[13:37:11.524]             else {
[13:37:11.524]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:11.524]             }
[13:37:11.524]             {
[13:37:11.524]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:11.524]                   0L) {
[13:37:11.524]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:11.524]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:11.524]                   base::options(opts)
[13:37:11.524]                 }
[13:37:11.524]                 {
[13:37:11.524]                   {
[13:37:11.524]                     base::options(mc.cores = ...future.mc.cores.old)
[13:37:11.524]                     NULL
[13:37:11.524]                   }
[13:37:11.524]                   options(future.plan = NULL)
[13:37:11.524]                   if (is.na(NA_character_)) 
[13:37:11.524]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:11.524]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:11.524]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:11.524]                     .init = FALSE)
[13:37:11.524]                 }
[13:37:11.524]             }
[13:37:11.524]         }
[13:37:11.524]     })
[13:37:11.524]     if (TRUE) {
[13:37:11.524]         base::sink(type = "output", split = FALSE)
[13:37:11.524]         if (TRUE) {
[13:37:11.524]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:11.524]         }
[13:37:11.524]         else {
[13:37:11.524]             ...future.result["stdout"] <- base::list(NULL)
[13:37:11.524]         }
[13:37:11.524]         base::close(...future.stdout)
[13:37:11.524]         ...future.stdout <- NULL
[13:37:11.524]     }
[13:37:11.524]     ...future.result$conditions <- ...future.conditions
[13:37:11.524]     ...future.result$finished <- base::Sys.time()
[13:37:11.524]     ...future.result
[13:37:11.524] }
[13:37:11.577] MultisessionFuture started
[13:37:11.577] result() for ClusterFuture ...
[13:37:11.577] receiveMessageFromWorker() for ClusterFuture ...
[13:37:11.577] - Validating connection of MultisessionFuture
[13:37:11.610] - received message: FutureResult
[13:37:11.610] - Received FutureResult
[13:37:11.610] - Erased future from FutureRegistry
[13:37:11.611] result() for ClusterFuture ...
[13:37:11.611] - result already collected: FutureResult
[13:37:11.611] result() for ClusterFuture ... done
[13:37:11.611] receiveMessageFromWorker() for ClusterFuture ... done
[13:37:11.611] result() for ClusterFuture ... done
[13:37:11.611] result() for ClusterFuture ...
[13:37:11.611] - result already collected: FutureResult
[13:37:11.611] result() for ClusterFuture ... done
[13:37:11.611] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:37:11.612] plan(): nbrOfWorkers() = 2
> f <- future(1L)
[13:37:11.612] getGlobalsAndPackages() ...
[13:37:11.612] Searching for globals...
[13:37:11.612] 
[13:37:11.612] Searching for globals ... DONE
[13:37:11.612] - globals: [0] <none>
[13:37:11.612] getGlobalsAndPackages() ... DONE
[13:37:11.613] run() for ‘Future’ ...
[13:37:11.613] - state: ‘created’
[13:37:11.613] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:37:11.623] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:37:11.624] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:37:11.624]   - Field: ‘node’
[13:37:11.624]   - Field: ‘label’
[13:37:11.624]   - Field: ‘local’
[13:37:11.624]   - Field: ‘owner’
[13:37:11.624]   - Field: ‘envir’
[13:37:11.624]   - Field: ‘workers’
[13:37:11.624]   - Field: ‘packages’
[13:37:11.624]   - Field: ‘gc’
[13:37:11.625]   - Field: ‘conditions’
[13:37:11.625]   - Field: ‘persistent’
[13:37:11.625]   - Field: ‘expr’
[13:37:11.625]   - Field: ‘uuid’
[13:37:11.625]   - Field: ‘seed’
[13:37:11.625]   - Field: ‘version’
[13:37:11.625]   - Field: ‘result’
[13:37:11.625]   - Field: ‘asynchronous’
[13:37:11.625]   - Field: ‘calls’
[13:37:11.625]   - Field: ‘globals’
[13:37:11.625]   - Field: ‘stdout’
[13:37:11.626]   - Field: ‘earlySignal’
[13:37:11.626]   - Field: ‘lazy’
[13:37:11.626]   - Field: ‘state’
[13:37:11.626] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:37:11.626] - Launch lazy future ...
[13:37:11.626] Packages needed by the future expression (n = 0): <none>
[13:37:11.626] Packages needed by future strategies (n = 0): <none>
[13:37:11.627] {
[13:37:11.627]     {
[13:37:11.627]         {
[13:37:11.627]             ...future.startTime <- base::Sys.time()
[13:37:11.627]             {
[13:37:11.627]                 {
[13:37:11.627]                   {
[13:37:11.627]                     {
[13:37:11.627]                       base::local({
[13:37:11.627]                         has_future <- base::requireNamespace("future", 
[13:37:11.627]                           quietly = TRUE)
[13:37:11.627]                         if (has_future) {
[13:37:11.627]                           ns <- base::getNamespace("future")
[13:37:11.627]                           version <- ns[[".package"]][["version"]]
[13:37:11.627]                           if (is.null(version)) 
[13:37:11.627]                             version <- utils::packageVersion("future")
[13:37:11.627]                         }
[13:37:11.627]                         else {
[13:37:11.627]                           version <- NULL
[13:37:11.627]                         }
[13:37:11.627]                         if (!has_future || version < "1.8.0") {
[13:37:11.627]                           info <- base::c(r_version = base::gsub("R version ", 
[13:37:11.627]                             "", base::R.version$version.string), 
[13:37:11.627]                             platform = base::sprintf("%s (%s-bit)", 
[13:37:11.627]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:11.627]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:11.627]                               "release", "version")], collapse = " "), 
[13:37:11.627]                             hostname = base::Sys.info()[["nodename"]])
[13:37:11.627]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:37:11.627]                             info)
[13:37:11.627]                           info <- base::paste(info, collapse = "; ")
[13:37:11.627]                           if (!has_future) {
[13:37:11.627]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:11.627]                               info)
[13:37:11.627]                           }
[13:37:11.627]                           else {
[13:37:11.627]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:11.627]                               info, version)
[13:37:11.627]                           }
[13:37:11.627]                           base::stop(msg)
[13:37:11.627]                         }
[13:37:11.627]                       })
[13:37:11.627]                     }
[13:37:11.627]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:37:11.627]                     base::options(mc.cores = 1L)
[13:37:11.627]                   }
[13:37:11.627]                   ...future.strategy.old <- future::plan("list")
[13:37:11.627]                   options(future.plan = NULL)
[13:37:11.627]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:11.627]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:11.627]                 }
[13:37:11.627]                 ...future.workdir <- getwd()
[13:37:11.627]             }
[13:37:11.627]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:11.627]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:11.627]         }
[13:37:11.627]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:11.627]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:11.627]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:11.627]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:11.627]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:11.627]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:11.627]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:11.627]             base::names(...future.oldOptions))
[13:37:11.627]     }
[13:37:11.627]     if (FALSE) {
[13:37:11.627]     }
[13:37:11.627]     else {
[13:37:11.627]         if (TRUE) {
[13:37:11.627]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:11.627]                 open = "w")
[13:37:11.627]         }
[13:37:11.627]         else {
[13:37:11.627]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:11.627]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:11.627]         }
[13:37:11.627]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:11.627]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:11.627]             base::sink(type = "output", split = FALSE)
[13:37:11.627]             base::close(...future.stdout)
[13:37:11.627]         }, add = TRUE)
[13:37:11.627]     }
[13:37:11.627]     ...future.frame <- base::sys.nframe()
[13:37:11.627]     ...future.conditions <- base::list()
[13:37:11.627]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:11.627]     if (FALSE) {
[13:37:11.627]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:11.627]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:11.627]     }
[13:37:11.627]     ...future.result <- base::tryCatch({
[13:37:11.627]         base::withCallingHandlers({
[13:37:11.627]             ...future.value <- base::withVisible(base::local({
[13:37:11.627]                 ...future.makeSendCondition <- base::local({
[13:37:11.627]                   sendCondition <- NULL
[13:37:11.627]                   function(frame = 1L) {
[13:37:11.627]                     if (is.function(sendCondition)) 
[13:37:11.627]                       return(sendCondition)
[13:37:11.627]                     ns <- getNamespace("parallel")
[13:37:11.627]                     if (exists("sendData", mode = "function", 
[13:37:11.627]                       envir = ns)) {
[13:37:11.627]                       parallel_sendData <- get("sendData", mode = "function", 
[13:37:11.627]                         envir = ns)
[13:37:11.627]                       envir <- sys.frame(frame)
[13:37:11.627]                       master <- NULL
[13:37:11.627]                       while (!identical(envir, .GlobalEnv) && 
[13:37:11.627]                         !identical(envir, emptyenv())) {
[13:37:11.627]                         if (exists("master", mode = "list", envir = envir, 
[13:37:11.627]                           inherits = FALSE)) {
[13:37:11.627]                           master <- get("master", mode = "list", 
[13:37:11.627]                             envir = envir, inherits = FALSE)
[13:37:11.627]                           if (inherits(master, c("SOCKnode", 
[13:37:11.627]                             "SOCK0node"))) {
[13:37:11.627]                             sendCondition <<- function(cond) {
[13:37:11.627]                               data <- list(type = "VALUE", value = cond, 
[13:37:11.627]                                 success = TRUE)
[13:37:11.627]                               parallel_sendData(master, data)
[13:37:11.627]                             }
[13:37:11.627]                             return(sendCondition)
[13:37:11.627]                           }
[13:37:11.627]                         }
[13:37:11.627]                         frame <- frame + 1L
[13:37:11.627]                         envir <- sys.frame(frame)
[13:37:11.627]                       }
[13:37:11.627]                     }
[13:37:11.627]                     sendCondition <<- function(cond) NULL
[13:37:11.627]                   }
[13:37:11.627]                 })
[13:37:11.627]                 withCallingHandlers({
[13:37:11.627]                   1L
[13:37:11.627]                 }, immediateCondition = function(cond) {
[13:37:11.627]                   sendCondition <- ...future.makeSendCondition()
[13:37:11.627]                   sendCondition(cond)
[13:37:11.627]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:11.627]                   {
[13:37:11.627]                     inherits <- base::inherits
[13:37:11.627]                     invokeRestart <- base::invokeRestart
[13:37:11.627]                     is.null <- base::is.null
[13:37:11.627]                     muffled <- FALSE
[13:37:11.627]                     if (inherits(cond, "message")) {
[13:37:11.627]                       muffled <- grepl(pattern, "muffleMessage")
[13:37:11.627]                       if (muffled) 
[13:37:11.627]                         invokeRestart("muffleMessage")
[13:37:11.627]                     }
[13:37:11.627]                     else if (inherits(cond, "warning")) {
[13:37:11.627]                       muffled <- grepl(pattern, "muffleWarning")
[13:37:11.627]                       if (muffled) 
[13:37:11.627]                         invokeRestart("muffleWarning")
[13:37:11.627]                     }
[13:37:11.627]                     else if (inherits(cond, "condition")) {
[13:37:11.627]                       if (!is.null(pattern)) {
[13:37:11.627]                         computeRestarts <- base::computeRestarts
[13:37:11.627]                         grepl <- base::grepl
[13:37:11.627]                         restarts <- computeRestarts(cond)
[13:37:11.627]                         for (restart in restarts) {
[13:37:11.627]                           name <- restart$name
[13:37:11.627]                           if (is.null(name)) 
[13:37:11.627]                             next
[13:37:11.627]                           if (!grepl(pattern, name)) 
[13:37:11.627]                             next
[13:37:11.627]                           invokeRestart(restart)
[13:37:11.627]                           muffled <- TRUE
[13:37:11.627]                           break
[13:37:11.627]                         }
[13:37:11.627]                       }
[13:37:11.627]                     }
[13:37:11.627]                     invisible(muffled)
[13:37:11.627]                   }
[13:37:11.627]                   muffleCondition(cond)
[13:37:11.627]                 })
[13:37:11.627]             }))
[13:37:11.627]             future::FutureResult(value = ...future.value$value, 
[13:37:11.627]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:11.627]                   ...future.rng), globalenv = if (FALSE) 
[13:37:11.627]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:11.627]                     ...future.globalenv.names))
[13:37:11.627]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:11.627]         }, condition = base::local({
[13:37:11.627]             c <- base::c
[13:37:11.627]             inherits <- base::inherits
[13:37:11.627]             invokeRestart <- base::invokeRestart
[13:37:11.627]             length <- base::length
[13:37:11.627]             list <- base::list
[13:37:11.627]             seq.int <- base::seq.int
[13:37:11.627]             signalCondition <- base::signalCondition
[13:37:11.627]             sys.calls <- base::sys.calls
[13:37:11.627]             `[[` <- base::`[[`
[13:37:11.627]             `+` <- base::`+`
[13:37:11.627]             `<<-` <- base::`<<-`
[13:37:11.627]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:11.627]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:11.627]                   3L)]
[13:37:11.627]             }
[13:37:11.627]             function(cond) {
[13:37:11.627]                 is_error <- inherits(cond, "error")
[13:37:11.627]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:11.627]                   NULL)
[13:37:11.627]                 if (is_error) {
[13:37:11.627]                   sessionInformation <- function() {
[13:37:11.627]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:11.627]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:11.627]                       search = base::search(), system = base::Sys.info())
[13:37:11.627]                   }
[13:37:11.627]                   ...future.conditions[[length(...future.conditions) + 
[13:37:11.627]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:11.627]                     cond$call), session = sessionInformation(), 
[13:37:11.627]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:11.627]                   signalCondition(cond)
[13:37:11.627]                 }
[13:37:11.627]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:11.627]                 "immediateCondition"))) {
[13:37:11.627]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:11.627]                   ...future.conditions[[length(...future.conditions) + 
[13:37:11.627]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:11.627]                   if (TRUE && !signal) {
[13:37:11.627]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:11.627]                     {
[13:37:11.627]                       inherits <- base::inherits
[13:37:11.627]                       invokeRestart <- base::invokeRestart
[13:37:11.627]                       is.null <- base::is.null
[13:37:11.627]                       muffled <- FALSE
[13:37:11.627]                       if (inherits(cond, "message")) {
[13:37:11.627]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:11.627]                         if (muffled) 
[13:37:11.627]                           invokeRestart("muffleMessage")
[13:37:11.627]                       }
[13:37:11.627]                       else if (inherits(cond, "warning")) {
[13:37:11.627]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:11.627]                         if (muffled) 
[13:37:11.627]                           invokeRestart("muffleWarning")
[13:37:11.627]                       }
[13:37:11.627]                       else if (inherits(cond, "condition")) {
[13:37:11.627]                         if (!is.null(pattern)) {
[13:37:11.627]                           computeRestarts <- base::computeRestarts
[13:37:11.627]                           grepl <- base::grepl
[13:37:11.627]                           restarts <- computeRestarts(cond)
[13:37:11.627]                           for (restart in restarts) {
[13:37:11.627]                             name <- restart$name
[13:37:11.627]                             if (is.null(name)) 
[13:37:11.627]                               next
[13:37:11.627]                             if (!grepl(pattern, name)) 
[13:37:11.627]                               next
[13:37:11.627]                             invokeRestart(restart)
[13:37:11.627]                             muffled <- TRUE
[13:37:11.627]                             break
[13:37:11.627]                           }
[13:37:11.627]                         }
[13:37:11.627]                       }
[13:37:11.627]                       invisible(muffled)
[13:37:11.627]                     }
[13:37:11.627]                     muffleCondition(cond, pattern = "^muffle")
[13:37:11.627]                   }
[13:37:11.627]                 }
[13:37:11.627]                 else {
[13:37:11.627]                   if (TRUE) {
[13:37:11.627]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:11.627]                     {
[13:37:11.627]                       inherits <- base::inherits
[13:37:11.627]                       invokeRestart <- base::invokeRestart
[13:37:11.627]                       is.null <- base::is.null
[13:37:11.627]                       muffled <- FALSE
[13:37:11.627]                       if (inherits(cond, "message")) {
[13:37:11.627]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:11.627]                         if (muffled) 
[13:37:11.627]                           invokeRestart("muffleMessage")
[13:37:11.627]                       }
[13:37:11.627]                       else if (inherits(cond, "warning")) {
[13:37:11.627]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:11.627]                         if (muffled) 
[13:37:11.627]                           invokeRestart("muffleWarning")
[13:37:11.627]                       }
[13:37:11.627]                       else if (inherits(cond, "condition")) {
[13:37:11.627]                         if (!is.null(pattern)) {
[13:37:11.627]                           computeRestarts <- base::computeRestarts
[13:37:11.627]                           grepl <- base::grepl
[13:37:11.627]                           restarts <- computeRestarts(cond)
[13:37:11.627]                           for (restart in restarts) {
[13:37:11.627]                             name <- restart$name
[13:37:11.627]                             if (is.null(name)) 
[13:37:11.627]                               next
[13:37:11.627]                             if (!grepl(pattern, name)) 
[13:37:11.627]                               next
[13:37:11.627]                             invokeRestart(restart)
[13:37:11.627]                             muffled <- TRUE
[13:37:11.627]                             break
[13:37:11.627]                           }
[13:37:11.627]                         }
[13:37:11.627]                       }
[13:37:11.627]                       invisible(muffled)
[13:37:11.627]                     }
[13:37:11.627]                     muffleCondition(cond, pattern = "^muffle")
[13:37:11.627]                   }
[13:37:11.627]                 }
[13:37:11.627]             }
[13:37:11.627]         }))
[13:37:11.627]     }, error = function(ex) {
[13:37:11.627]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:11.627]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:11.627]                 ...future.rng), started = ...future.startTime, 
[13:37:11.627]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:11.627]             version = "1.8"), class = "FutureResult")
[13:37:11.627]     }, finally = {
[13:37:11.627]         if (!identical(...future.workdir, getwd())) 
[13:37:11.627]             setwd(...future.workdir)
[13:37:11.627]         {
[13:37:11.627]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:11.627]                 ...future.oldOptions$nwarnings <- NULL
[13:37:11.627]             }
[13:37:11.627]             base::options(...future.oldOptions)
[13:37:11.627]             if (.Platform$OS.type == "windows") {
[13:37:11.627]                 old_names <- names(...future.oldEnvVars)
[13:37:11.627]                 envs <- base::Sys.getenv()
[13:37:11.627]                 names <- names(envs)
[13:37:11.627]                 common <- intersect(names, old_names)
[13:37:11.627]                 added <- setdiff(names, old_names)
[13:37:11.627]                 removed <- setdiff(old_names, names)
[13:37:11.627]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:11.627]                   envs[common]]
[13:37:11.627]                 NAMES <- toupper(changed)
[13:37:11.627]                 args <- list()
[13:37:11.627]                 for (kk in seq_along(NAMES)) {
[13:37:11.627]                   name <- changed[[kk]]
[13:37:11.627]                   NAME <- NAMES[[kk]]
[13:37:11.627]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:11.627]                     next
[13:37:11.627]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:11.627]                 }
[13:37:11.627]                 NAMES <- toupper(added)
[13:37:11.627]                 for (kk in seq_along(NAMES)) {
[13:37:11.627]                   name <- added[[kk]]
[13:37:11.627]                   NAME <- NAMES[[kk]]
[13:37:11.627]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:11.627]                     next
[13:37:11.627]                   args[[name]] <- ""
[13:37:11.627]                 }
[13:37:11.627]                 NAMES <- toupper(removed)
[13:37:11.627]                 for (kk in seq_along(NAMES)) {
[13:37:11.627]                   name <- removed[[kk]]
[13:37:11.627]                   NAME <- NAMES[[kk]]
[13:37:11.627]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:11.627]                     next
[13:37:11.627]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:11.627]                 }
[13:37:11.627]                 if (length(args) > 0) 
[13:37:11.627]                   base::do.call(base::Sys.setenv, args = args)
[13:37:11.627]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:11.627]             }
[13:37:11.627]             else {
[13:37:11.627]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:11.627]             }
[13:37:11.627]             {
[13:37:11.627]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:11.627]                   0L) {
[13:37:11.627]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:11.627]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:11.627]                   base::options(opts)
[13:37:11.627]                 }
[13:37:11.627]                 {
[13:37:11.627]                   {
[13:37:11.627]                     base::options(mc.cores = ...future.mc.cores.old)
[13:37:11.627]                     NULL
[13:37:11.627]                   }
[13:37:11.627]                   options(future.plan = NULL)
[13:37:11.627]                   if (is.na(NA_character_)) 
[13:37:11.627]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:11.627]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:11.627]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:11.627]                     .init = FALSE)
[13:37:11.627]                 }
[13:37:11.627]             }
[13:37:11.627]         }
[13:37:11.627]     })
[13:37:11.627]     if (TRUE) {
[13:37:11.627]         base::sink(type = "output", split = FALSE)
[13:37:11.627]         if (TRUE) {
[13:37:11.627]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:11.627]         }
[13:37:11.627]         else {
[13:37:11.627]             ...future.result["stdout"] <- base::list(NULL)
[13:37:11.627]         }
[13:37:11.627]         base::close(...future.stdout)
[13:37:11.627]         ...future.stdout <- NULL
[13:37:11.627]     }
[13:37:11.627]     ...future.result$conditions <- ...future.conditions
[13:37:11.627]     ...future.result$finished <- base::Sys.time()
[13:37:11.627]     ...future.result
[13:37:11.627] }
[13:37:11.630] MultisessionFuture started
[13:37:11.630] - Launch lazy future ... done
[13:37:11.630] run() for ‘MultisessionFuture’ ... done
> cl <- ClusterRegistry("get")
> stopifnot(inherits(cl, "cluster"), length(cl) >= 1L)
> 
> plan(sequential)
[13:37:11.631] plan(): Setting new future strategy stack:
[13:37:11.631] List of future strategies:
[13:37:11.631] 1. sequential:
[13:37:11.631]    - args: function (..., envir = parent.frame())
[13:37:11.631]    - tweaked: FALSE
[13:37:11.631]    - call: plan(sequential)
[13:37:11.632] plan(): nbrOfWorkers() = 1
> cl <- ClusterRegistry("get")
> stopifnot(is.null(cl), length(cl) == 0L)
>   
> message("*** multisession(...) - stopping with plan() change ... DONE")
*** multisession(...) - stopping with plan() change ... DONE
> 
> message("*** multisession() ... DONE")
*** multisession() ... DONE
> 
> source("incl/end.R")
[13:37:11.633] plan(): Setting new future strategy stack:
[13:37:11.633] List of future strategies:
[13:37:11.633] 1. FutureStrategy:
[13:37:11.633]    - args: function (..., envir = parent.frame())
[13:37:11.633]    - tweaked: FALSE
[13:37:11.633]    - call: future::plan(oplan)
[13:37:11.633] plan(): nbrOfWorkers() = 1
> 
