
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "testthat"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('testthat')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("Reporter")
> ### * Reporter
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Reporter
> ### Title: Manage test reporting
> ### Aliases: Reporter
> ### Keywords: internal
> 
> ### ** Examples
> 
> path <- testthat_example("success")
> 
> test_file(path)

══ Testing test-success.R ══════════════════════════════════════════════════════

[ FAIL 0 | WARN 0 | SKIP 0 | PASS 0 ]
[ FAIL 1 | WARN 0 | SKIP 0 | PASS 0 ]
[ FAIL 2 | WARN 0 | SKIP 0 | PASS 0 ]

── Error ('test-success.R:2:3'): one plus one is two ───────────────────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_equal(1 + 1, 2) at test-success.R:2:3
  2. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)

── Error ('test-success.R:1:1'): (code run outside of `test_that()`) ───────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::test_file(path)
  2. │ └─testthat:::test_files(...)
  3. │   └─testthat:::test_files_serial(...)
  4. │     ├─testthat::with_reporter(...)
  5. │     │ └─base::tryCatch(...)
  6. │     │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  7. │     │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  8. │     │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  9. │     └─base::lapply(...)
 10. │       └─testthat (local) FUN(X[[i]], ...)
 11. │         └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 12. │           └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 13. │             ├─base::tryCatch(...)
 14. │             │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │             │   ├─base (local) tryCatchOne(...)
 16. │             │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │             │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 18. │             │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 19. │             │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 20. │             ├─base::withCallingHandlers(...)
 21. │             └─base::eval(code, test_env)
 22. │               └─base::eval(code, test_env)
 23. │                 └─testthat::test_that(...) at test-success.R:1:1
 24. │                   └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 25. │                     └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 26. │                       └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 27. └─base::loadNamespace(x)
 28.   ├─base::namespaceImportFrom(...)
 29.   │ └─base::asNamespace(ns)
 30.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 31.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 32.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 33.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 34.           └─base::get(genname, envir = envir)

[ FAIL 2 | WARN 0 | SKIP 0 | PASS 0 ]
> # Override the default by supplying the name of a reporter
> test_file(path, reporter = "minimal")
EE
> 
> 
> 
> cleanEx()
> nameEx("capture_condition")
> ### * capture_condition
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: capture_condition
> ### Title: Capture conditions, including messages, warnings, expectations,
> ###   and errors.
> ### Aliases: capture_condition capture_error capture_expectation
> ###   capture_message capture_warning capture_messages capture_warnings
> ### Keywords: internal
> 
> ### ** Examples
> 
> f <- function() {
+   message("First")
+   warning("Second")
+   message("Third")
+ }
> 
> capture_message(f())
<simpleMessage in message("First"): First
>
> capture_messages(f())
Warning in f() : Second
[1] "First\n" "Third\n"
> 
> capture_warning(f())
First
<simpleWarning in f(): Second>
> capture_warnings(f())
First
Third
[1] "Second"
> 
> # Condition will capture anything
> capture_condition(f())
<simpleMessage in message("First"): First
>
> 
> 
> 
> cleanEx()
> nameEx("capture_output")
> ### * capture_output
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: capture_output
> ### Title: Capture output to console
> ### Aliases: capture_output capture_output_lines testthat_print
> ### Keywords: internal
> 
> ### ** Examples
> 
> capture_output({
+   cat("Hi!\n")
+   cat("Bye\n")
+ })
[1] "Hi!\nBye"
> 
> capture_output_lines({
+   cat("Hi!\n")
+   cat("Bye\n")
+ })
[1] "Hi!" "Bye"
> 
> capture_output("Hi")
[1] ""
> capture_output("Hi", print = TRUE)
[1] "[1] \"Hi\""
> 
> 
> 
> cleanEx()
> nameEx("compare")
> ### * compare
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: compare
> ### Title: Provide human-readable comparison of two objects
> ### Aliases: compare compare.default compare.character compare.numeric
> ###   compare.POSIXt
> ### Keywords: internal
> 
> ### ** Examples
> 
> # Character -----------------------------------------------------------------
> x <- c("abc", "def", "jih")
> compare(x, x)
Equal
> 
> y <- paste0(x, "y")
> compare(x, y)
3/3 mismatches
x[1]: "abc"
y[1]: "abcy"

x[2]: "def"
y[2]: "defy"

x[3]: "jih"
y[3]: "jihy"> 
> compare(letters, paste0(letters, "-"))
26/26 mismatches
x[1]: "a"
y[1]: "a-"

x[2]: "b"
y[2]: "b-"

x[3]: "c"
y[3]: "c-"

x[4]: "d"
y[4]: "d-"

x[5]: "e"
y[5]: "e-"> 
> x <- "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis cursus
+  tincidunt auctor. Vestibulum ac metus bibendum, facilisis nisi non, pulvinar
+  dolor. Donec pretium iaculis nulla, ut interdum sapien ultricies a. "
> y <- "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis cursus
+  tincidunt auctor. Vestibulum ac metus1 bibendum, facilisis nisi non, pulvinar
+  dolor. Donec pretium iaculis nulla, ut interdum sapien ultricies a. "
> compare(x, y)
1/1 mismatches
x[1]: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis cursus\n ti
x[1]: ncidunt auctor. Vestibulum ac metus bibendum, facilisis nisi non, pulvinar
x[1]: \n dolor. Donec pretium iaculis nulla, ut interdum sapien ultricies a. "
y[1]: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis cursus\n ti
y[1]: ncidunt auctor. Vestibulum ac metus1 bibendum, facilisis nisi non, pulvina
y[1]: r\n dolor. Donec pretium iaculis nulla, ut interdum sapien ultricies a. "> compare(c(x, x), c(y, y))
2/2 mismatches
x[1]: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis cursus\n ti
x[1]: ncidunt auctor. Vestibulum ac metus bibendum, facilisis nisi non, pulvinar
x[1]: \n dolor. Donec pretium iaculis nulla, ut interdum sapien ultricies a. "
y[1]: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis cursus\n ti
y[1]: ncidunt auctor. Vestibulum ac metus1 bibendum, facilisis nisi non, pulvina
y[1]: r\n dolor. Donec pretium iaculis nulla, ut interdum sapien ultricies a. "

x[2]: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis cursus\n ti
x[2]: ncidunt auctor. Vestibulum ac metus bibendum, facilisis nisi non, pulvinar
x[2]: \n dolor. Donec pretium iaculis nulla, ut interdum sapien ultricies a. "
y[2]: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis cursus\n ti
y[2]: ncidunt auctor. Vestibulum ac metus1 bibendum, facilisis nisi non, pulvina
y[2]: r\n dolor. Donec pretium iaculis nulla, ut interdum sapien ultricies a. "> 
> # Numeric -------------------------------------------------------------------
> 
> x <- y <- runif(100)
> y[sample(100, 10)] <- 5
> compare(x, y)
10/100 mismatches (average diff: 4.45)
[17] 0.718 - 5 == -4.28
[21] 0.935 - 5 == -4.07
[28] 0.382 - 5 == -4.62
[31] 0.482 - 5 == -4.52
[33] 0.494 - 5 == -4.51
[45] 0.530 - 5 == -4.47
[48] 0.477 - 5 == -4.52
[73] 0.347 - 5 == -4.65
[83] 0.400 - 5 == -4.60
...> 
> x <- y <- 1:10
> x[5] <- NA
> x[6] <- 6.5
> compare(x, y)
2/10 mismatches (average diff: 0.5)
[5]  NA - 5 ==  NA
[6] 6.5 - 6 == 0.5> 
> # Compare ignores minor numeric differences in the same way
> # as all.equal.
> compare(x, x + 1e-9)
Equal
> 
> 
> 
> cleanEx()
> nameEx("comparison-expectations")
> ### * comparison-expectations
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: comparison-expectations
> ### Title: Does code return a number greater/less than the expected value?
> ### Aliases: comparison-expectations expect_lt expect_lte expect_gt
> ###   expect_gte
> 
> ### ** Examples
> 
> a <- 9
> expect_lt(a, 10)
> 
> ## Not run: 
> ##D expect_lt(11, 10)
> ## End(Not run)
> 
> a <- 11
> expect_gt(a, 10)
> ## Not run: 
> ##D expect_gt(9, 10)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("context")
> ### * context
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: context
> ### Title: Describe the context of a set of tests.
> ### Aliases: context
> ### Keywords: internal
> 
> ### ** Examples
> 
> context("String processing")
Warning: `context()` was deprecated in the 3rd edition.
> context("Remote procedure calls")
Warning: `context()` was deprecated in the 3rd edition.
> 
> 
> 
> cleanEx()
> nameEx("describe")
> ### * describe
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: describe
> ### Title: describe: a BDD testing language
> ### Aliases: describe it
> 
> ### ** Examples
> 
> describe("matrix()", {
+   it("can be multiplied by a scalar", {
+     m1 <- matrix(1:4, 2, 2)
+     m2 <- m1 * 2
+     expect_equal(matrix(1:4 * 2, 2, 2), m2)
+   })
+   it("can have not yet tested specs")
+ })
Error in get(genname, envir = envir) : object 'compare_proxy' not found
Calls: describe ... register_S3_method_delayed -> registerS3method -> get
-- Error: matrix(): can be multiplied by a scalar ------------------------------
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     x
  1. +-testthat::expect_equal(matrix(1:4 * 2, 2, 2), m2)
  2. | \-testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  3. |   \-testthat:::waldo_compare(...)
  4. \-base::loadNamespace(x)
  5.   +-base::namespaceImportFrom(...)
  6.   | \-base::asNamespace(ns)
  7.   \-base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     \-base::registerS3methods(nsInfo$S3methods, package, env)
  9.       \-base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         \-base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           \-base::get(genname, envir = envir)

Error:
! Test failed
Backtrace:
    x
 1. +-testthat::describe(...)
 2. | \-base::eval(substitute(code), describe_environment)
 3. |   \-base::eval(substitute(code), describe_environment)
 4. |     \-testthat::it(...)
 5. |       \-testthat:::describe_it(description, code, describe_environment)
 6. |         \-withr (local) `<fn>`()
 7. \-reporter$stop_if_needed()
 8.   \-rlang::abort("Test failed", call = NULL)
Execution halted
