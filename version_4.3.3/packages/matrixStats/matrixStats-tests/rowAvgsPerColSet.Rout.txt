
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library("matrixStats")
> 
> X <- matrix(rnorm(20 * 6), nrow = 20, ncol = 6)
> rownames(X) <- LETTERS[1:nrow(X)]
> colnames(X) <- letters[1:ncol(X)]
> print(X)
            a            b          c           d           e           f
A -0.87775858 -1.407480752  1.1477460  0.55782288 -0.79527369 -1.05963280
B  2.70915914  1.195942450 -0.8393603  0.10614130  1.01144511 -0.49233793
C -0.79109973 -0.457241137 -1.5724445 -0.19529175  0.25795111  1.19805476
D  1.09212809  1.312845951  1.1040453 -0.57963134 -0.58384227 -0.11293825
E -0.59707848 -1.695845881 -0.0173434  0.82218371  1.03220527 -1.57928900
F  0.92468731 -1.147394712  0.5851391 -0.22897780 -0.14117078  0.05537439
G  1.58591478 -0.473421129  0.1009671  0.08691644  0.49414351  0.99316586
H -0.33031909  1.416532266  2.1450127  0.32367399  1.56745841 -1.38390629
I -0.87529223 -1.350500963  0.2530726 -1.32999366 -0.99554772 -1.29510995
J  0.29297679  0.817691823 -0.7067983  0.65250346  0.13589023 -1.11155130
K -0.39165680 -0.572558501 -0.3407273 -1.17395890 -1.28856185 -0.27439390
L  0.59350064 -0.066606093  1.1687128  2.49806284 -0.57036205  0.88584135
M -1.57880031  0.362752129 -0.4317911  0.86780825  0.62653763  0.14706477
N  0.05050123 -1.307268608 -2.5352552 -0.88593048  0.16326154 -0.78039960
O -0.59045582 -1.687609502 -0.5168530 -2.13017573 -0.04330755 -0.74800025
P  2.74689212 -0.876226035 -0.1024515 -1.12367879 -0.03296458  0.13475314
Q -0.38157719  0.960022140  0.8679082  0.19699233  1.36438129  0.36016415
R  1.30283430  0.008428452  0.1238253  0.61982664  0.37254348 -0.72366346
S -0.62955957  2.505679881 -0.7355512  0.84114048  0.16377441  0.91541301
T -0.14713540 -0.428715176  0.6816045  0.49854834  1.00997155 -1.48362642
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Apply rowMeans() for 3 sets of 2 columns
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 3L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3
[1,]  1  3  5
[2,]  2  4  6
> 
> Z <- rowAvgsPerColSet(X, S = S)
> print(Z)
          s1          s2          s3
A -1.1426197  0.85278444 -0.92745324
B  1.9525508 -0.36660949  0.25955359
C -0.6241704 -0.88386813  0.72800293
D  1.2024870  0.26220697 -0.34839026
E -1.1464622  0.40242016 -0.27354187
F -0.1113537  0.17808064 -0.04289820
G  0.5562468  0.09394179  0.74365469
H  0.5431066  1.23434335  0.09177606
I -1.1128966 -0.53846052 -1.14532884
J  0.5553343 -0.02714740 -0.48783053
K -0.4821077 -0.75734309 -0.78147787
L  0.2634473  1.83338782  0.15773965
M -0.6080241  0.21800856  0.38680120
N -0.6283837 -1.71059284 -0.30856903
O -1.1390327 -1.32351438 -0.39565390
P  0.9353330 -0.61306513  0.05089428
Q  0.2892225  0.53245028  0.86227272
R  0.6556314  0.37182599 -0.17555999
S  0.9380602  0.05279466  0.53959371
T -0.2879253  0.59007640 -0.23682743
> 
> # Validation
> Z0 <- cbind(s1 = rowMeans(X[, 1:2]), s2 = rowMeans(X[, 3:4]),
+             s3 = rowMeans(X[, 5:6]))
> stopifnot(identical(drop(Z), Z0))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Apply colMeans() for 5 sets of 4 rows
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 5L
> S <- matrix(1:nrow(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3 s4 s5
[1,]  1  5  9 13 17
[2,]  2  6 10 14 18
[3,]  3  7 11 15 19
[4,]  4  8 12 16 20
> 
> Z <- colAvgsPerRowSet(X, S = S)
> print(Z)
             a          b           c           d           e          f
s1  0.53310723  0.1610166 -0.04000338 -0.02773973 -0.02742994 -0.1167136
s2  0.39580113 -0.4750324  0.70344388  0.25094909  0.73815910 -0.4786638
s3 -0.09511790 -0.2929934  0.09356497  0.16165344 -0.67964535 -0.4488035
s4  0.15703431 -0.8770880 -0.89658771 -0.81799419  0.17838176 -0.3116455
s5  0.03614054  0.7613538  0.23444672  0.53912695  0.72766768 -0.2329282
> 
> # Validation
> Z0 <- rbind(s1 = colMeans(X[1:4, ]), s2 = colMeans(X[5:8, ]),
+             s3 = colMeans(X[9:12, ]), s4 = colMeans(X[13:16, ]),
+             s5 = colMeans(X[17:20, ]))
> stopifnot(identical(drop(Z), Z0))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # When there is only one "complete" set
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 1L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1
[1,]  1
[2,]  2
[3,]  3
[4,]  4
[5,]  5
[6,]  6
> 
> Z <- rowAvgsPerColSet(X, S = S, FUN = rowMeans)
> print(Z)
            s1
A -0.405762823
B  0.615164963
C -0.260011875
D  0.372101244
E -0.339194631
F  0.007942913
G  0.464614436
H  0.623075332
I -0.932228653
J  0.013452126
K -0.673642872
L  0.751524915
M -0.001071445
N -0.882515185
O -0.952733647
P  0.124387398
Q  0.561315157
R  0.283965794
S  0.510149507
T  0.021774560
> 
> Z0 <- rowMeans(X)
> stopifnot(identical(drop(Z), Z0))
> 
> 
> nbr_of_sets <- 1L
> S <- matrix(1:nrow(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
      s1
 [1,]  1
 [2,]  2
 [3,]  3
 [4,]  4
 [5,]  5
 [6,]  6
 [7,]  7
 [8,]  8
 [9,]  9
[10,] 10
[11,] 11
[12,] 12
[13,] 13
[14,] 14
[15,] 15
[16,] 16
[17,] 17
[18,] 18
[19,] 19
[20,] 20
> 
> Z <- colAvgsPerRowSet(X, S = S, FUN = colMeans)
> print(Z)
           a          b         c          d         e          f
s1 0.2053931 -0.1445487 0.0189729 0.02119911 0.1874267 -0.3177509
> 
> Z0 <- colMeans(X)
> stopifnot(identical(drop(Z), Z0))
> 
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Use weights
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 3L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3
[1,]  1  3  5
[2,]  2  4  6
> 
> W <- matrix(runif(length(X)), nrow = nrow(X), ncol = ncol(X))
> Z1 <- rowAvgsPerColSet(X, W = W, S = S, FUN = rowWeightedMeans)
> print(Z1)
          s1          s2          s3
A -1.1426197  0.85278444 -0.92745324
B  1.9525508 -0.36660949  0.25955359
C -0.6241704 -0.88386813  0.72800293
D  1.2024870  0.26220697 -0.34839026
E -1.1464622  0.40242016 -0.27354187
F -0.1113537  0.17808064 -0.04289820
G  0.5562468  0.09394179  0.74365469
H  0.5431066  1.23434335  0.09177606
I -1.1128966 -0.53846052 -1.14532884
J  0.5553343 -0.02714740 -0.48783053
K -0.4821077 -0.75734309 -0.78147787
L  0.2634473  1.83338782  0.15773965
M -0.6080241  0.21800856  0.38680120
N -0.6283837 -1.71059284 -0.30856903
O -1.1390327 -1.32351438 -0.39565390
P  0.9353330 -0.61306513  0.05089428
Q  0.2892225  0.53245028  0.86227272
R  0.6556314  0.37182599 -0.17555999
S  0.9380602  0.05279466  0.53959371
T -0.2879253  0.59007640 -0.23682743
> Z2 <- colAvgsPerRowSet(X, W = W, S = S, FUN = colWeightedMeans)
> print(Z2)
           a          b          c          d          e          f
s1 0.9157003 -0.1057692  0.1541929  0.3319821  0.1080857 -0.7759854
s2 0.1505142  0.4278024 -0.2341996 -0.3874615 -0.1629456  0.5425583
s3 0.1638044 -1.4216203  0.2838978  0.2966030  0.4455172 -0.7619573
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Result should always be a matrix, including when nrow(X) <= 1
> # (https://github.com/HenrikBengtsson/matrixStats/issues/108)
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> X <- matrix(1:3, nrow = 1L, ncol = 3L)
> S <- matrix(1, nrow = 1L, ncol = 1L)
> Z1 <- rowAvgsPerColSet(X, S = S)
> stopifnot(is.matrix(Z1))
> Z2 <- rowAvgsPerColSet(X, S = S, rows = 0)
> stopifnot(is.matrix(Z2))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Works with many, one or zero columns / rows
> # (https://github.com/HenrikBengtsson/matrixStats/issues/172)
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> S <- cbind(1:2, 3:4, 5:6)
> X <- matrix(rnorm(2 * 6), nrow = 6, ncol = 2)
> Z2 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z2_ref <- rbind(colSums2(X[S[,1], ,drop=FALSE]),
+                 colSums2(X[S[,2], ,drop=FALSE]),
+                 colSums2(X[S[,3], ,drop=FALSE]))
> stopifnot(identical(Z2, Z2_ref))
> X <- matrix(rnorm(6), nrow = 6, ncol = 1)
> Z1 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z1_ref <- rbind(colSums2(X[S[,1], ,drop=FALSE]),
+                 colSums2(X[S[,2], ,drop=FALSE]),
+                 colSums2(X[S[,3], ,drop=FALSE]))
> stopifnot(identical(Z1, Z1_ref))
> X <- matrix(numeric(0), nrow = 6, ncol = 0)
> Z0 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z0_ref <- matrix(numeric(0), nrow = ncol(S), ncol = 0)
> stopifnot(identical(Z0, unname(Z0_ref)))
> 
> 
> S <- rbind(1:4, 5:8)
> X <- matrix(rnorm(n = 2 * 8), nrow = 2, ncol = 8)
> Z2 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z2_ref <- cbind(rowMeans2(X[,S[,1],drop=FALSE]),
+                 rowMeans2(X[,S[,2],drop=FALSE]),
+                 rowMeans2(X[,S[,3],drop=FALSE]),
+                 rowMeans2(X[,S[,4],drop=FALSE]))
> stopifnot(identical(Z2, Z2_ref))
> X <- matrix(rnorm(n = 8), nrow = 1, ncol = 8)
> Z1 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z1_ref <- cbind(rowMeans2(X[,S[,1],drop=FALSE]),
+                 rowMeans2(X[,S[,2],drop=FALSE]),
+                 rowMeans2(X[,S[,3],drop=FALSE]),
+                 rowMeans2(X[,S[,4],drop=FALSE]))
> stopifnot(identical(Z1, Z1_ref))
> X <- matrix(numeric(0), nrow = 0, ncol = 8)
> Z0 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z0_ref <- matrix(numeric(0), nrow = 0, ncol = ncol(S))
> stopifnot(identical(Z0, Z0_ref))
> 
