
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library("matrixStats")
> 
> X <- matrix(rnorm(20 * 6), nrow = 20, ncol = 6)
> rownames(X) <- LETTERS[1:nrow(X)]
> colnames(X) <- letters[1:ncol(X)]
> print(X)
            a          b           c            d          e            f
A -1.64820948 -0.2510677 -0.91880685  0.951795122 -0.4831873 -0.445402947
B  0.07940448 -0.2814718 -0.09336212  0.836352248 -1.8890929  0.513758875
C -0.33443841 -0.1289152  0.33013581 -0.100362393 -1.4809271 -1.800121403
D -2.38759530 -1.5793355 -2.09349906 -1.068418126 -0.4815293 -0.377117118
E -0.47672907  0.8084906  1.33974476  0.595217470  0.1246003 -1.072859171
F  1.28406700 -2.2502446  0.29735104 -0.970806030  0.1359964 -1.230522233
G -0.65643951  1.2403729 -1.12603263  0.589109304  1.6627053  2.152102332
H  2.56545547  0.4563449 -0.55648866 -0.435339831 -0.2609501  0.999724961
I  1.31689411 -0.2701577  0.29854394 -0.006688396  0.5874335 -0.438760461
J -0.52293417 -0.8779452  0.60055943  1.007644170  1.6160755 -0.950162315
K  1.01030005  1.2533903 -0.19386400  0.367332042 -0.6793406  1.370060732
L  0.85982768 -0.1389125  1.57412193  0.214331872 -1.6576284 -1.786209656
M -1.52720414 -0.6298578 -1.47076392  0.097257921 -0.3508283 -1.058295864
N -0.25916455  0.8667978 -0.73775469  0.699396096  0.1461217 -0.235711248
O  0.28562370  1.1220703  0.82269443 -1.117089812  0.3978788  1.017984727
P -1.21218802 -0.3982231 -0.56067861 -0.627116957  1.0946475 -0.416459717
Q  1.93637169 -0.1451557  1.04326255  0.152375156 -0.5628989 -0.870265015
R -0.67213612 -0.8736082  0.31392638 -0.394335313 -0.9015427  0.004476771
S  0.28693926 -1.1755036  0.40050255 -1.210598137  0.9304264  0.342828595
T -1.17025923  0.8120306 -2.13453150 -0.270563804 -0.1842054 -1.764201947
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Apply rowMeans() for 3 sets of 2 columns
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 3L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3
[1,]  1  3  5
[2,]  2  4  6
> 
> Z <- rowAvgsPerColSet(X, S = S)
> print(Z)
          s1          s2          s3
A -0.9496386  0.01649414 -0.46429512
B -0.1010337  0.37149507 -0.68766703
C -0.2316768  0.11488671 -1.64052427
D -1.9834654 -1.58095859 -0.42932323
E  0.1658808  0.96748111 -0.47412943
F -0.4830888 -0.33672749 -0.54726292
G  0.2919667 -0.26846166  1.90740380
H  1.5109002 -0.49591425  0.36938743
I  0.5233682  0.14592777  0.07433652
J -0.7004397  0.80410180  0.33295660
K  1.1318452  0.08673402  0.34536008
L  0.3604576  0.89422690 -1.72191903
M -1.0785310 -0.68675300 -0.70456206
N  0.3038166 -0.01917930 -0.04479477
O  0.7038470 -0.14719769  0.70793177
P -0.8052055 -0.59389779  0.33909390
Q  0.8956080  0.59781885 -0.71658196
R -0.7728722 -0.04020446 -0.44853294
S -0.4442822 -0.40504779  0.63662751
T -0.1791143 -1.20254765 -0.97420369
> 
> # Validation
> Z0 <- cbind(s1 = rowMeans(X[, 1:2]), s2 = rowMeans(X[, 3:4]),
+             s3 = rowMeans(X[, 5:6]))
> stopifnot(identical(drop(Z), Z0))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Apply colMeans() for 5 sets of 4 rows
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 5L
> S <- matrix(1:nrow(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3 s4 s5
[1,]  1  5  9 13 17
[2,]  2  6 10 14 18
[3,]  3  7 11 15 19
[4,]  4  8 12 16 20
> 
> Z <- colAvgsPerRowSet(X, S = S)
> print(Z)
            a            b           c           d           e          f
s1 -1.0727097 -0.560197559 -0.69388305  0.15484171 -1.08368418 -0.5272206
s2  0.6790885  0.063740983 -0.01135637 -0.05545477  0.41558797  0.2121115
s3  0.6660219 -0.008406289  0.56984033  0.39565492 -0.03336499 -0.4512679
s4 -0.6782333  0.240196805 -0.48662570 -0.23688819  0.32195494 -0.1731205
s5  0.0952289 -0.345559199 -0.09421000 -0.43078052 -0.17955514 -0.5717904
> 
> # Validation
> Z0 <- rbind(s1 = colMeans(X[1:4, ]), s2 = colMeans(X[5:8, ]),
+             s3 = colMeans(X[9:12, ]), s4 = colMeans(X[13:16, ]),
+             s5 = colMeans(X[17:20, ]))
> stopifnot(identical(drop(Z), Z0))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # When there is only one "complete" set
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 1L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1
[1,]  1
[2,]  2
[3,]  3
[4,]  4
[5,]  5
[6,]  6
> 
> Z <- rowAvgsPerColSet(X, S = S, FUN = rowMeans)
> print(Z)
           s1
A -0.46581319
B -0.13906855
C -0.58577145
D -1.33124908
E  0.21974416
F -0.45569306
G  0.64363628
H  0.46145779
I  0.24787750
J  0.14553957
K  0.52131309
L -0.15574485
M -0.82328201
N  0.07994751
O  0.42152702
P -0.35333647
Q  0.25894830
R -0.42053652
S -0.07090081
T -0.78528855
> 
> Z0 <- rowMeans(X)
> stopifnot(identical(drop(Z), Z0))
> 
> 
> nbr_of_sets <- 1L
> S <- matrix(1:nrow(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
      s1
 [1,]  1
 [2,]  2
 [3,]  3
 [4,]  4
 [5,]  5
 [6,]  6
 [7,]  7
 [8,]  8
 [9,]  9
[10,] 10
[11,] 11
[12,] 12
[13,] 13
[14,] 14
[15,] 15
[16,] 16
[17,] 17
[18,] 18
[19,] 19
[20,] 20
> 
> Z <- colAvgsPerRowSet(X, S = S, FUN = colMeans)
> print(Z)
             a          b         c           d          e          f
s1 -0.06212073 -0.1220451 -0.143247 -0.03452537 -0.1118123 -0.3022576
> 
> Z0 <- colMeans(X)
> stopifnot(identical(drop(Z), Z0))
> 
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Use weights
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 3L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3
[1,]  1  3  5
[2,]  2  4  6
> 
> W <- matrix(runif(length(X)), nrow = nrow(X), ncol = ncol(X))
> Z1 <- rowAvgsPerColSet(X, W = W, S = S, FUN = rowWeightedMeans)
> print(Z1)
          s1          s2          s3
A -0.9496386  0.01649414 -0.46429512
B -0.1010337  0.37149507 -0.68766703
C -0.2316768  0.11488671 -1.64052427
D -1.9834654 -1.58095859 -0.42932323
E  0.1658808  0.96748111 -0.47412943
F -0.4830888 -0.33672749 -0.54726292
G  0.2919667 -0.26846166  1.90740380
H  1.5109002 -0.49591425  0.36938743
I  0.5233682  0.14592777  0.07433652
J -0.7004397  0.80410180  0.33295660
K  1.1318452  0.08673402  0.34536008
L  0.3604576  0.89422690 -1.72191903
M -1.0785310 -0.68675300 -0.70456206
N  0.3038166 -0.01917930 -0.04479477
O  0.7038470 -0.14719769  0.70793177
P -0.8052055 -0.59389779  0.33909390
Q  0.8956080  0.59781885 -0.71658196
R -0.7728722 -0.04020446 -0.44853294
S -0.4442822 -0.40504779  0.63662751
T -0.1791143 -1.20254765 -0.97420369
> Z2 <- colAvgsPerRowSet(X, W = W, S = S, FUN = colWeightedMeans)
> print(Z2)
            a          b          c          d          e           f
s1 -0.7844025 -0.2662698 -0.5060845  0.8940737 -1.1861401  0.03417796
s2 -1.3610169 -0.8541254 -0.8816816 -0.5843903 -0.9812282 -1.08861926
s3  0.4036690 -0.7208770  0.8185479 -0.1877943  0.1302984 -1.15169070
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Result should always be a matrix, including when nrow(X) <= 1
> # (https://github.com/HenrikBengtsson/matrixStats/issues/108)
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> X <- matrix(1:3, nrow = 1L, ncol = 3L)
> S <- matrix(1, nrow = 1L, ncol = 1L)
> Z1 <- rowAvgsPerColSet(X, S = S)
> stopifnot(is.matrix(Z1))
> Z2 <- rowAvgsPerColSet(X, S = S, rows = 0)
> stopifnot(is.matrix(Z2))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Works with many, one or zero columns / rows
> # (https://github.com/HenrikBengtsson/matrixStats/issues/172)
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> S <- cbind(1:2, 3:4, 5:6)
> X <- matrix(rnorm(2 * 6), nrow = 6, ncol = 2)
> Z2 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z2_ref <- rbind(colSums2(X[S[,1], ,drop=FALSE]),
+                 colSums2(X[S[,2], ,drop=FALSE]),
+                 colSums2(X[S[,3], ,drop=FALSE]))
> stopifnot(identical(Z2, Z2_ref))
> X <- matrix(rnorm(6), nrow = 6, ncol = 1)
> Z1 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z1_ref <- rbind(colSums2(X[S[,1], ,drop=FALSE]),
+                 colSums2(X[S[,2], ,drop=FALSE]),
+                 colSums2(X[S[,3], ,drop=FALSE]))
> stopifnot(identical(Z1, Z1_ref))
> X <- matrix(numeric(0), nrow = 6, ncol = 0)
> Z0 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z0_ref <- matrix(numeric(0), nrow = ncol(S), ncol = 0)
> stopifnot(identical(Z0, unname(Z0_ref)))
> 
> 
> S <- rbind(1:4, 5:8)
> X <- matrix(rnorm(n = 2 * 8), nrow = 2, ncol = 8)
> Z2 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z2_ref <- cbind(rowMeans2(X[,S[,1],drop=FALSE]),
+                 rowMeans2(X[,S[,2],drop=FALSE]),
+                 rowMeans2(X[,S[,3],drop=FALSE]),
+                 rowMeans2(X[,S[,4],drop=FALSE]))
> stopifnot(identical(Z2, Z2_ref))
> X <- matrix(rnorm(n = 8), nrow = 1, ncol = 8)
> Z1 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z1_ref <- cbind(rowMeans2(X[,S[,1],drop=FALSE]),
+                 rowMeans2(X[,S[,2],drop=FALSE]),
+                 rowMeans2(X[,S[,3],drop=FALSE]),
+                 rowMeans2(X[,S[,4],drop=FALSE]))
> stopifnot(identical(Z1, Z1_ref))
> X <- matrix(numeric(0), nrow = 0, ncol = 8)
> Z0 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z0_ref <- matrix(numeric(0), nrow = 0, ncol = ncol(S))
> stopifnot(identical(Z0, Z0_ref))
> 
