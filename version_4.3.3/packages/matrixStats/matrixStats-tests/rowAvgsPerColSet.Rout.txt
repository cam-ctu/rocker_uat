
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library("matrixStats")
> 
> X <- matrix(rnorm(20 * 6), nrow = 20, ncol = 6)
> rownames(X) <- LETTERS[1:nrow(X)]
> colnames(X) <- letters[1:ncol(X)]
> print(X)
             a          b           c           d           e          f
A -0.053520661 -0.3648345  0.61463945  0.04190050  0.07831801 -0.4538973
B -1.195521410 -0.3971179  1.35212027 -2.09148839 -0.11197262  0.1517111
C -0.132681179  0.9382726  0.49984868 -0.56871275  0.16688843  1.1975070
D  0.882902660  0.4156965 -1.65726697 -0.13704684 -0.43250335 -1.7104288
E -1.856686924  2.3739013 -0.01324272 -1.49367344  1.25852472 -0.5471981
F  0.054753827  2.8714128  0.40905036  0.08120001  1.11307509 -1.8964610
G -0.509073888  1.2816420  0.75946054  0.22979222  0.50074696  0.1250654
H -0.458978809 -0.3272447  0.14060731  0.62283254  1.13009825 -0.6403592
I  0.002687316  0.7198316 -0.76821473  0.41562297 -0.84659515  0.6361312
J -0.501287907 -0.6269506 -1.15192494 -0.28905742 -0.64052302  0.9561082
K  0.990814123  0.9032834  0.43162579 -1.54951253 -0.98710622 -0.9872651
L  0.068562206 -1.4787950  2.19742395  0.24412463  2.77764042 -1.0614080
M -1.795115324 -0.9098112 -0.55201900 -0.81618230  0.01288424  2.6909893
N -1.493831711 -0.2751566  0.89538150  0.32936083 -2.99726141  1.7938172
O -0.492570796 -1.1739542  0.58122073 -0.07078135  0.48859098 -0.6863101
P  0.377280687  0.9913559 -0.90074405 -0.63449257  0.89742847  1.2404105
Q  2.217046399  0.7592867  1.39751707  2.24432281  1.77663926 -0.7836481
R -0.779849493 -0.2482902 -0.11463167  0.63108469 -0.67589940  2.0754729
S  1.494750223 -0.5903518 -0.60974634 -0.06574529 -0.33841465  0.2681869
T -1.743413090  1.5035761  1.88336711 -0.87767034  0.44247071  0.8158719
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Apply rowMeans() for 3 sets of 2 columns
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 3L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3
[1,]  1  3  5
[2,]  2  4  6
> 
> Z <- rowAvgsPerColSet(X, S = S)
> print(Z)
          s1          s2          s3
A -0.2091776  0.32826997 -0.18778965
B -0.7963197 -0.36968406  0.01986925
C  0.4027957 -0.03443204  0.68219769
D  0.6492996 -0.89715691 -1.07146608
E  0.2586072 -0.75345808  0.35566331
F  1.4630833  0.24512519 -0.39169295
G  0.3862841  0.49462638  0.31290620
H -0.3931117  0.38171993  0.24486955
I  0.3612594 -0.17629588 -0.10523196
J -0.5641193 -0.72049118  0.15779260
K  0.9470488 -0.55894337 -0.98718565
L -0.7051164  1.22077429  0.85811621
M -1.3524633 -0.68410065  1.35193676
N -0.8844941  0.61237116 -0.60172212
O -0.8332625  0.25521969 -0.09885956
P  0.6843183 -0.76761831  1.06891950
Q  1.4881666  1.82091994  0.49649559
R -0.5140699  0.25822651  0.69978673
S  0.4521992 -0.33774581 -0.03511386
T -0.1199185  0.50284838  0.62917133
> 
> # Validation
> Z0 <- cbind(s1 = rowMeans(X[, 1:2]), s2 = rowMeans(X[, 3:4]),
+             s3 = rowMeans(X[, 5:6]))
> stopifnot(identical(drop(Z), Z0))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Apply colMeans() for 5 sets of 4 rows
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 5L
> S <- matrix(1:nrow(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3 s4 s5
[1,]  1  5  9 13 17
[2,]  2  6 10 14 18
[3,]  3  7 11 15 19
[4,]  4  8 12 16 20
> 
> Z <- colAvgsPerRowSet(X, S = S)
> print(Z)
            a          b           c          d           e          f
s1 -0.1247051  0.1480041 0.202335355 -0.6888369 -0.07481738 -0.2037770
s2 -0.6924964  1.5499278 0.323968872 -0.1399622  1.00061126 -0.7397382
s3  0.1401939 -0.1206577 0.177227520 -0.2947056  0.07585400 -0.1141084
s4 -0.8510593 -0.3418915 0.005959793 -0.2980238 -0.39958943  1.2597267
s5  0.2971335  0.3560552 0.639126541  0.4829980  0.30119898  0.5939709
> 
> # Validation
> Z0 <- rbind(s1 = colMeans(X[1:4, ]), s2 = colMeans(X[5:8, ]),
+             s3 = colMeans(X[9:12, ]), s4 = colMeans(X[13:16, ]),
+             s5 = colMeans(X[17:20, ]))
> stopifnot(identical(drop(Z), Z0))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # When there is only one "complete" set
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 1L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1
[1,]  1
[2,]  2
[3,]  3
[4,]  4
[5,]  5
[6,]  6
> 
> Z <- rowAvgsPerColSet(X, S = S, FUN = rowMeans)
> print(Z)
           s1
A -0.02289908
B -0.38204483
C  0.35018711
D -0.43977447
E -0.04639587
F  0.43883851
G  0.39793888
H  0.07782591
I  0.02657720
J -0.37560595
K -0.19969342
L  0.45792470
M -0.22820905
N -0.29128170
O -0.22563412
P  0.32853983
Q  1.26852737
R  0.14798113
S  0.02644652
T  0.33736707
> 
> Z0 <- rowMeans(X)
> stopifnot(identical(drop(Z), Z0))
> 
> 
> nbr_of_sets <- 1L
> S <- matrix(1:nrow(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
      s1
 [1,]  1
 [2,]  2
 [3,]  3
 [4,]  4
 [5,]  5
 [6,]  6
 [7,]  7
 [8,]  8
 [9,]  9
[10,] 10
[11,] 11
[12,] 12
[13,] 13
[14,] 14
[15,] 15
[16,] 16
[17,] 17
[18,] 18
[19,] 19
[20,] 20
> 
> Z <- colAvgsPerRowSet(X, S = S, FUN = colMeans)
> print(Z)
            a         b         c          d         e         f
s1 -0.2461867 0.3182876 0.2697236 -0.1877061 0.1806515 0.1592148
> 
> Z0 <- colMeans(X)
> stopifnot(identical(drop(Z), Z0))
> 
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Use weights
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 3L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3
[1,]  1  3  5
[2,]  2  4  6
> 
> W <- matrix(runif(length(X)), nrow = nrow(X), ncol = ncol(X))
> Z1 <- rowAvgsPerColSet(X, W = W, S = S, FUN = rowWeightedMeans)
> print(Z1)
          s1          s2          s3
A -0.2091776  0.32826997 -0.18778965
B -0.7963197 -0.36968406  0.01986925
C  0.4027957 -0.03443204  0.68219769
D  0.6492996 -0.89715691 -1.07146608
E  0.2586072 -0.75345808  0.35566331
F  1.4630833  0.24512519 -0.39169295
G  0.3862841  0.49462638  0.31290620
H -0.3931117  0.38171993  0.24486955
I  0.3612594 -0.17629588 -0.10523196
J -0.5641193 -0.72049118  0.15779260
K  0.9470488 -0.55894337 -0.98718565
L -0.7051164  1.22077429  0.85811621
M -1.3524633 -0.68410065  1.35193676
N -0.8844941  0.61237116 -0.60172212
O -0.8332625  0.25521969 -0.09885956
P  0.6843183 -0.76761831  1.06891950
Q  1.4881666  1.82091994  0.49649559
R -0.5140699  0.25822651  0.69978673
S  0.4521992 -0.33774581 -0.03511386
T -0.1199185  0.50284838  0.62917133
> Z2 <- colAvgsPerRowSet(X, W = W, S = S, FUN = colWeightedMeans)
> print(Z2)
            a          b          c          d          e          f
s1 -0.6245210 -0.3809762  0.9833799 -1.0247939 -0.0168273 -0.1510931
s2  0.3751107  0.6769845 -0.5787091 -0.3528798 -0.1328075 -0.2564609
s3 -0.9009665  2.6226570  0.1979038 -0.7062367  1.1857999 -1.2218295
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Result should always be a matrix, including when nrow(X) <= 1
> # (https://github.com/HenrikBengtsson/matrixStats/issues/108)
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> X <- matrix(1:3, nrow = 1L, ncol = 3L)
> S <- matrix(1, nrow = 1L, ncol = 1L)
> Z1 <- rowAvgsPerColSet(X, S = S)
> stopifnot(is.matrix(Z1))
> Z2 <- rowAvgsPerColSet(X, S = S, rows = 0)
> stopifnot(is.matrix(Z2))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Works with many, one or zero columns / rows
> # (https://github.com/HenrikBengtsson/matrixStats/issues/172)
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> S <- cbind(1:2, 3:4, 5:6)
> X <- matrix(rnorm(2 * 6), nrow = 6, ncol = 2)
> Z2 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z2_ref <- rbind(colSums2(X[S[,1], ,drop=FALSE]),
+                 colSums2(X[S[,2], ,drop=FALSE]),
+                 colSums2(X[S[,3], ,drop=FALSE]))
> stopifnot(identical(Z2, Z2_ref))
> X <- matrix(rnorm(6), nrow = 6, ncol = 1)
> Z1 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z1_ref <- rbind(colSums2(X[S[,1], ,drop=FALSE]),
+                 colSums2(X[S[,2], ,drop=FALSE]),
+                 colSums2(X[S[,3], ,drop=FALSE]))
> stopifnot(identical(Z1, Z1_ref))
> X <- matrix(numeric(0), nrow = 6, ncol = 0)
> Z0 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z0_ref <- matrix(numeric(0), nrow = ncol(S), ncol = 0)
> stopifnot(identical(Z0, unname(Z0_ref)))
> 
> 
> S <- rbind(1:4, 5:8)
> X <- matrix(rnorm(n = 2 * 8), nrow = 2, ncol = 8)
> Z2 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z2_ref <- cbind(rowMeans2(X[,S[,1],drop=FALSE]),
+                 rowMeans2(X[,S[,2],drop=FALSE]),
+                 rowMeans2(X[,S[,3],drop=FALSE]),
+                 rowMeans2(X[,S[,4],drop=FALSE]))
> stopifnot(identical(Z2, Z2_ref))
> X <- matrix(rnorm(n = 8), nrow = 1, ncol = 8)
> Z1 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z1_ref <- cbind(rowMeans2(X[,S[,1],drop=FALSE]),
+                 rowMeans2(X[,S[,2],drop=FALSE]),
+                 rowMeans2(X[,S[,3],drop=FALSE]),
+                 rowMeans2(X[,S[,4],drop=FALSE]))
> stopifnot(identical(Z1, Z1_ref))
> X <- matrix(numeric(0), nrow = 0, ncol = 8)
> Z0 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z0_ref <- matrix(numeric(0), nrow = 0, ncol = ncol(S))
> stopifnot(identical(Z0, Z0_ref))
> 
