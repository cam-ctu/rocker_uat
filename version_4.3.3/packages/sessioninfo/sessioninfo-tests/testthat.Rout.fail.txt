
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(testthat)
> library(sessioninfo)
> 
> test_check("sessioninfo")
Starting 2 test processes
[ FAIL 19 | WARN 0 | SKIP 0 | PASS 1 ]

══ Failed tests ════════════════════════════════════════════════════════════════
── Error ('test-dependent-packages.R:38:3'): dependent_packages ────────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_equal(exp, tec) at test-dependent-packages.R:38:3
  2. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-dependent-packages.R:2:1'): (code run outside of `test_that()`) ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(base::quote("test-dependent-packages.R"))
 13. │ └─asNamespace("testthat")$queue_task(path)
 14. │   ├─testthat::with_reporter(multi, test_one_file(path, env = the$testing_env))
 15. │   │ └─base::tryCatch(...)
 16. │   │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 17. │   │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 18. │   │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 19. │   └─testthat:::test_one_file(path, env = the$testing_env)
 20. │     └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 21. │       └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 22. │         ├─base::tryCatch(...)
 23. │         │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 24. │         │   ├─base (local) tryCatchOne(...)
 25. │         │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 26. │         │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 27. │         │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 28. │         │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 29. │         ├─base::withCallingHandlers(...)
 30. │         └─base::eval(code, test_env)
 31. │           └─base::eval(code, test_env)
 32. │             └─testthat::test_that(...) at test-dependent-packages.R:2:1
 33. │               └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 34. │                 └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 35. │                   └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 36. └─base::loadNamespace(x)
 37.   ├─base::namespaceImportFrom(...)
 38.   │ └─base::asNamespace(ns)
 39.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 40.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 41.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 42.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 43.           └─base::get(genname, envir = envir)
── Error ('test-diff.R:6:3'): session_diff ─────────────────────────────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_equal(sd$old$si, lines1) at test-diff.R:6:3
  2. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-diff.R:2:1'): (code run outside of `test_that()`) ──────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(base::quote("test-diff.R"))
 13. │ └─asNamespace("testthat")$queue_task(path)
 14. │   ├─testthat::with_reporter(multi, test_one_file(path, env = the$testing_env))
 15. │   │ └─base::tryCatch(...)
 16. │   │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 17. │   │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 18. │   │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 19. │   └─testthat:::test_one_file(path, env = the$testing_env)
 20. │     └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 21. │       └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 22. │         ├─base::tryCatch(...)
 23. │         │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 24. │         │   ├─base (local) tryCatchOne(...)
 25. │         │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 26. │         │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 27. │         │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 28. │         │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 29. │         ├─base::withCallingHandlers(...)
 30. │         └─base::eval(code, test_env)
 31. │           └─base::eval(code, test_env)
 32. │             └─testthat::test_that(...) at test-diff.R:2:1
 33. │               └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 34. │                 └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 35. │                   └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 36. └─base::loadNamespace(x)
 37.   ├─base::namespaceImportFrom(...)
 38.   │ └─base::asNamespace(ns)
 39.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 40.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 41.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 42.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 43.           └─base::get(genname, envir = envir)
── Error ('test-os-name.R:4:3'): unknown os name ───────────────────────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_equal(os_name(), NA_character_) at test-os-name.R:4:3
  2. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-os-name.R:2:1'): (code run outside of `test_that()`) ───────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(base::quote("test-os-name.R"))
 13. │ └─asNamespace("testthat")$queue_task(path)
 14. │   ├─testthat::with_reporter(multi, test_one_file(path, env = the$testing_env))
 15. │   │ └─base::tryCatch(...)
 16. │   │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 17. │   │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 18. │   │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 19. │   └─testthat:::test_one_file(path, env = the$testing_env)
 20. │     └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 21. │       └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 22. │         ├─base::tryCatch(...)
 23. │         │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 24. │         │   ├─base (local) tryCatchOne(...)
 25. │         │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 26. │         │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 27. │         │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 28. │         │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 29. │         ├─base::withCallingHandlers(...)
 30. │         └─base::eval(code, test_env)
 31. │           └─base::eval(code, test_env)
 32. │             └─testthat::test_that(...) at test-os-name.R:2:1
 33. │               └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 34. │                 └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 35. │                   └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 36. └─base::loadNamespace(x)
 37.   ├─base::namespaceImportFrom(...)
 38.   │ └─base::asNamespace(ns)
 39.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 40.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 41.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 42.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 43.           └─base::get(genname, envir = envir)
── Error ('test-loaded-packages.R:4:3'): loaded_packages ───────────────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_equal(sort_ci(lp$package), sort_ci(loadedNamespaces())) at test-loaded-packages.R:4:3
  2. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-loaded-packages.R:2:1'): (code run outside of `test_that()`) ───
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(base::quote("test-loaded-packages.R"))
 13. │ └─asNamespace("testthat")$queue_task(path)
 14. │   ├─testthat::with_reporter(multi, test_one_file(path, env = the$testing_env))
 15. │   │ └─base::tryCatch(...)
 16. │   │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 17. │   │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 18. │   │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 19. │   └─testthat:::test_one_file(path, env = the$testing_env)
 20. │     └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 21. │       └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 22. │         ├─base::tryCatch(...)
 23. │         │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 24. │         │   ├─base (local) tryCatchOne(...)
 25. │         │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 26. │         │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 27. │         │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 28. │         │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 29. │         ├─base::withCallingHandlers(...)
 30. │         └─base::eval(code, test_env)
 31. │           └─base::eval(code, test_env)
 32. │             └─testthat::test_that(...) at test-loaded-packages.R:2:1
 33. │               └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 34. │                 └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 35. │                   └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 36. └─base::loadNamespace(x)
 37.   ├─base::namespaceImportFrom(...)
 38.   │ └─base::asNamespace(ns)
 39.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 40.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 41.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 42.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 43.           └─base::get(genname, envir = envir)
── Error ('test-package-info.R:17:3'): package_info, loaded ────────────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_identical(pi, exp) at test-package-info.R:17:3
  2. │ └─testthat:::expect_waldo_equal("identical", act, exp, info, ...)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-package-info.R:2:1'): (code run outside of `test_that()`) ──────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(base::quote("test-package-info.R"))
 13. │ └─asNamespace("testthat")$queue_task(path)
 14. │   ├─testthat::with_reporter(multi, test_one_file(path, env = the$testing_env))
 15. │   │ └─base::tryCatch(...)
 16. │   │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 17. │   │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 18. │   │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 19. │   └─testthat:::test_one_file(path, env = the$testing_env)
 20. │     └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 21. │       └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 22. │         ├─base::tryCatch(...)
 23. │         │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 24. │         │   ├─base (local) tryCatchOne(...)
 25. │         │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 26. │         │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 27. │         │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 28. │         │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 29. │         ├─base::withCallingHandlers(...)
 30. │         └─base::eval(code, test_env)
 31. │           └─base::eval(code, test_env)
 32. │             └─testthat::test_that(...) at test-package-info.R:2:1
 33. │               └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 34. │                 └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 35. │                   └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 36. └─base::loadNamespace(x)
 37.   ├─base::namespaceImportFrom(...)
 38.   │ └─base::asNamespace(ns)
 39.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 40.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 41.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 42.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 43.           └─base::get(genname, envir = envir)
── Error ('test-platform-info.R:4:3'): platform_info ───────────────────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_equal(...) at test-platform-info.R:4:3
  2. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-platform-info.R:2:1'): (code run outside of `test_that()`) ─────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(base::quote("test-platform-info.R"))
 13. │ └─asNamespace("testthat")$queue_task(path)
 14. │   ├─testthat::with_reporter(multi, test_one_file(path, env = the$testing_env))
 15. │   │ └─base::tryCatch(...)
 16. │   │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 17. │   │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 18. │   │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 19. │   └─testthat:::test_one_file(path, env = the$testing_env)
 20. │     └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 21. │       └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 22. │         ├─base::tryCatch(...)
 23. │         │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 24. │         │   ├─base (local) tryCatchOne(...)
 25. │         │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 26. │         │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 27. │         │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 28. │         │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 29. │         ├─base::withCallingHandlers(...)
 30. │         └─base::eval(code, test_env)
 31. │           └─base::eval(code, test_env)
 32. │             └─testthat::test_that(...) at test-platform-info.R:2:1
 33. │               └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 34. │                 └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 35. │                   └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 36. └─base::loadNamespace(x)
 37.   ├─base::namespaceImportFrom(...)
 38.   │ └─base::asNamespace(ns)
 39.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 40.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 41.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 42.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 43.           └─base::get(genname, envir = envir)
── Error ('test-printing.R:2:1'): (code run outside of `test_that()`) ──────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(base::quote("test-printing.R"))
 13. │ └─asNamespace("testthat")$queue_task(path)
 14. │   ├─testthat::with_reporter(multi, test_one_file(path, env = the$testing_env))
 15. │   │ └─base::tryCatch(...)
 16. │   │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 17. │   │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 18. │   │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 19. │   └─testthat:::test_one_file(path, env = the$testing_env)
 20. │     └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 21. │       └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 22. │         ├─base::tryCatch(...)
 23. │         │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 24. │         │   ├─base (local) tryCatchOne(...)
 25. │         │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 26. │         │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 27. │         │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 28. │         │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 29. │         ├─base::withCallingHandlers(...)
 30. │         └─base::eval(code, test_env)
 31. │           └─base::eval(code, test_env)
 32. │             └─testthat::test_that(...) at test-printing.R:2:1
 33. │               └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 34. │                 └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 35. │                   └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 36. └─base::loadNamespace(x)
 37.   ├─base::namespaceImportFrom(...)
 38.   │ └─base::asNamespace(ns)
 39.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 40.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 41.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 42.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 43.           └─base::get(genname, envir = envir)
── Error ('test-session-info.R:7:3'): session_info ─────────────────────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_equal(si$platform, platform_info()) at test-session-info.R:7:3
  2. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-session-info.R:2:1'): (code run outside of `test_that()`) ──────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(base::quote("test-session-info.R"))
 13. │ └─asNamespace("testthat")$queue_task(path)
 14. │   ├─testthat::with_reporter(multi, test_one_file(path, env = the$testing_env))
 15. │   │ └─base::tryCatch(...)
 16. │   │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 17. │   │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 18. │   │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 19. │   └─testthat:::test_one_file(path, env = the$testing_env)
 20. │     └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 21. │       └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 22. │         ├─base::tryCatch(...)
 23. │         │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 24. │         │   ├─base (local) tryCatchOne(...)
 25. │         │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 26. │         │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 27. │         │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 28. │         │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 29. │         ├─base::withCallingHandlers(...)
 30. │         └─base::eval(code, test_env)
 31. │           └─base::eval(code, test_env)
 32. │             └─testthat::test_that(...) at test-session-info.R:2:1
 33. │               └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 34. │                 └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 35. │                   └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 36. └─base::loadNamespace(x)
 37.   ├─base::namespaceImportFrom(...)
 38.   │ └─base::asNamespace(ns)
 39.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 40.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 41.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 42.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 43.           └─base::get(genname, envir = envir)
── Error ('test-utils.R:3:3'): sort_ci ─────────────────────────────────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_equal(...) at test-utils.R:3:3
  2. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-utils.R:2:1'): (code run outside of `test_that()`) ─────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(base::quote("test-utils.R"))
 13. │ └─asNamespace("testthat")$queue_task(path)
 14. │   ├─testthat::with_reporter(multi, test_one_file(path, env = the$testing_env))
 15. │   │ └─base::tryCatch(...)
 16. │   │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 17. │   │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 18. │   │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 19. │   └─testthat:::test_one_file(path, env = the$testing_env)
 20. │     └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 21. │       └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 22. │         ├─base::tryCatch(...)
 23. │         │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 24. │         │   ├─base (local) tryCatchOne(...)
 25. │         │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 26. │         │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 27. │         │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 28. │         │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 29. │         ├─base::withCallingHandlers(...)
 30. │         └─base::eval(code, test_env)
 31. │           └─base::eval(code, test_env)
 32. │             └─testthat::test_that(...) at test-utils.R:2:1
 33. │               └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 34. │                 └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 35. │                   └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 36. └─base::loadNamespace(x)
 37.   ├─base::namespaceImportFrom(...)
 38.   │ └─base::asNamespace(ns)
 39.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 40.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 41.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 42.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 43.           └─base::get(genname, envir = envir)
── Error ('test-warnings.R:3:41'): broken dll ──────────────────────────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_true(TRUE) at test-warnings.R:3:41
  2. │ └─testthat:::expect_waldo_constant(act, TRUE, info = info)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-warnings.R:2:1'): (code run outside of `test_that()`) ──────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(base::quote("test-warnings.R"))
 13. │ └─asNamespace("testthat")$queue_task(path)
 14. │   ├─testthat::with_reporter(multi, test_one_file(path, env = the$testing_env))
 15. │   │ └─base::tryCatch(...)
 16. │   │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 17. │   │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 18. │   │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 19. │   └─testthat:::test_one_file(path, env = the$testing_env)
 20. │     └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 21. │       └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 22. │         ├─base::tryCatch(...)
 23. │         │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 24. │         │   ├─base (local) tryCatchOne(...)
 25. │         │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 26. │         │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 27. │         │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 28. │         │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 29. │         ├─base::withCallingHandlers(...)
 30. │         └─base::eval(code, test_env)
 31. │           └─base::eval(code, test_env)
 32. │             └─testthat::test_that(...) at test-warnings.R:2:1
 33. │               └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 34. │                 └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 35. │                   └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 36. └─base::loadNamespace(x)
 37.   ├─base::namespaceImportFrom(...)
 38.   │ └─base::asNamespace(ns)
 39.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 40.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 41.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 42.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 43.           └─base::get(genname, envir = envir)

[ FAIL 19 | WARN 0 | SKIP 0 | PASS 1 ]
Error: Test failures
Execution halted
