
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library("matrixStats")
> 
> X <- matrix(rnorm(20 * 6), nrow = 20, ncol = 6)
> rownames(X) <- LETTERS[1:nrow(X)]
> colnames(X) <- letters[1:ncol(X)]
> print(X)
            a           b            c           d           e           f
A  0.24050083 -1.40283738  0.203650321 -1.26981285  0.60530633 -0.48751881
B  0.04744899  0.05890521  0.210802334  0.07646152  0.32524855 -1.04861495
C  0.34563680 -0.25592735  0.080794667 -0.49125960 -0.60736838 -1.01333811
D -1.64620344 -0.50006855 -1.061163929  0.41558229  0.70388136 -0.87638209
E -0.07802293 -1.39921002  1.218221578 -0.68560392 -0.14876209  0.38657586
F -1.09307013  0.94725415 -0.456831169 -1.15009093 -1.22314631  0.13454789
G  0.53806271 -0.45760429  0.195087694  0.11694771  0.01889524  0.10489025
H  0.68849233  0.28942722 -0.004101677  0.00241546  0.29775195  0.45183717
I -1.10699323  0.65815566  0.286581552 -0.45265050  0.02920875  1.00499817
J -1.18379271  1.27960545  0.019901424 -1.18288142 -1.00522477  0.53074865
K -0.46029940  0.10113552 -0.185295624 -1.19310031  0.59980298 -1.02482141
L  1.28930826 -2.28264441 -0.751322724 -0.34653125  0.12477360 -0.04741506
M -0.12929181 -0.41286728  0.391678645  1.53904551 -0.86287959  1.97185707
N -0.13022354 -0.90063391  0.336565069 -0.83385111  0.32523726  0.68099841
O -0.01322936  0.04438394  0.761777621 -0.81632908 -1.15362218  0.10838730
P -0.35974783 -0.22046117 -1.567394814 -0.57311007 -1.00347471 -0.15560522
Q -1.38286767 -0.24141472  1.496908162  0.12164459  1.09089118  0.11708134
R -0.63518551  0.12014115  0.298402768  0.04211218 -0.08541786 -2.13388801
S  1.14914174  2.35206118 -0.997291957 -1.25445166 -0.18487906  0.94531968
T -1.10607411 -1.09621981 -0.061465880  0.04324446  1.35744702 -1.06390121
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Apply rowMeans() for 3 sets of 2 columns
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 3L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3
[1,]  1  3  5
[2,]  2  4  6
> 
> Z <- rowAvgsPerColSet(X, S = S)
> print(Z)
           s1            s2          s3
A -0.58116827 -0.5330812639  0.05889376
B  0.05317710  0.1436319255 -0.36168320
C  0.04485472 -0.2052324680 -0.81035324
D -1.07313600 -0.3227908176 -0.08625037
E -0.73861647  0.2663088299  0.11890688
F -0.07290799 -0.8034610480 -0.54429921
G  0.04022921  0.1560177037  0.06189275
H  0.48895978 -0.0008431082  0.37479456
I -0.22441879 -0.0830344755  0.51710346
J  0.04790637 -0.5814899965 -0.23723806
K -0.17958194 -0.6891979667 -0.21250921
L -0.49666808 -0.5489269882  0.03867927
M -0.27107955  0.9653620768  0.55448874
N -0.51542872 -0.2486430222  0.50311784
O  0.01557729 -0.0272757300 -0.52261744
P -0.29010450 -1.0702524420 -0.57953997
Q -0.81214119  0.8092763784  0.60398626
R -0.25752218  0.1702574763 -1.10965293
S  1.75060146 -1.1258718069  0.38022031
T -1.10114696 -0.0091107088  0.14677291
> 
> # Validation
> Z0 <- cbind(s1 = rowMeans(X[, 1:2]), s2 = rowMeans(X[, 3:4]),
+             s3 = rowMeans(X[, 5:6]))
> stopifnot(identical(drop(Z), Z0))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Apply colMeans() for 5 sets of 4 rows
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 5L
> S <- matrix(1:nrow(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3 s4 s5
[1,]  1  5  9 13 17
[2,]  2  6 10 14 18
[3,]  3  7 11 15 19
[4,]  4  8 12 16 20
> 
> Z <- colAvgsPerRowSet(X, S = S)
> print(Z)
             a           b           c          d           e          f
s1 -0.25315421 -0.52498202 -0.14147915 -0.3172572  0.25676696 -0.8564635
s2  0.01386549 -0.15503324  0.23809411 -0.4290829 -0.26381530  0.2694628
s3 -0.36544427 -0.06093695 -0.15753384 -0.7937909 -0.06285986  0.1158776
s4 -0.15812314 -0.37239460 -0.01934337 -0.1710612 -0.67368480  0.6514094
s5 -0.49374639  0.28364195  0.18413827 -0.2618626  0.54451032 -0.5338471
> 
> # Validation
> Z0 <- rbind(s1 = colMeans(X[1:4, ]), s2 = colMeans(X[5:8, ]),
+             s3 = colMeans(X[9:12, ]), s4 = colMeans(X[13:16, ]),
+             s5 = colMeans(X[17:20, ]))
> stopifnot(identical(drop(Z), Z0))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # When there is only one "complete" set
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 1L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1
[1,]  1
[2,]  2
[3,]  3
[4,]  4
[5,]  5
[6,]  6
> 
> Z <- rowAvgsPerColSet(X, S = S, FUN = rowMeans)
> print(Z)
           s1
A -0.35178526
B -0.05495806
C -0.32357700
D -0.49405906
E -0.11780025
F -0.47355608
G  0.08604655
H  0.28763708
I  0.06988340
J -0.25694056
K -0.36042971
L -0.33563860
M  0.41625709
N -0.08698464
O -0.17810529
P -0.64663230
Q  0.20037381
R -0.39897254
S  0.33498332
T -0.32116159
> 
> Z0 <- rowMeans(X)
> stopifnot(identical(drop(Z), Z0))
> 
> 
> nbr_of_sets <- 1L
> S <- matrix(1:nrow(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
      s1
 [1,]  1
 [2,]  2
 [3,]  3
 [4,]  4
 [5,]  5
 [6,]  6
 [7,]  7
 [8,]  8
 [9,]  9
[10,] 10
[11,] 11
[12,] 12
[13,] 13
[14,] 14
[15,] 15
[16,] 16
[17,] 17
[18,] 18
[19,] 19
[20,] 20
> 
> Z <- colAvgsPerRowSet(X, S = S, FUN = colMeans)
> print(Z)
            a         b         c          d           e           f
s1 -0.2513205 -0.165941 0.0207752 -0.3946109 -0.03981654 -0.07071215
> 
> Z0 <- colMeans(X)
> stopifnot(identical(drop(Z), Z0))
> 
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Use weights
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 3L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3
[1,]  1  3  5
[2,]  2  4  6
> 
> W <- matrix(runif(length(X)), nrow = nrow(X), ncol = ncol(X))
> Z1 <- rowAvgsPerColSet(X, W = W, S = S, FUN = rowWeightedMeans)
> print(Z1)
           s1            s2          s3
A -0.58116827 -0.5330812639  0.05889376
B  0.05317710  0.1436319255 -0.36168320
C  0.04485472 -0.2052324680 -0.81035324
D -1.07313600 -0.3227908176 -0.08625037
E -0.73861647  0.2663088299  0.11890688
F -0.07290799 -0.8034610480 -0.54429921
G  0.04022921  0.1560177037  0.06189275
H  0.48895978 -0.0008431082  0.37479456
I -0.22441879 -0.0830344755  0.51710346
J  0.04790637 -0.5814899965 -0.23723806
K -0.17958194 -0.6891979667 -0.21250921
L -0.49666808 -0.5489269882  0.03867927
M -0.27107955  0.9653620768  0.55448874
N -0.51542872 -0.2486430222  0.50311784
O  0.01557729 -0.0272757300 -0.52261744
P -0.29010450 -1.0702524420 -0.57953997
Q -0.81214119  0.8092763784  0.60398626
R -0.25752218  0.1702574763 -1.10965293
S  1.75060146 -1.1258718069  0.38022031
T -1.10114696 -0.0091107088  0.14677291
> Z2 <- colAvgsPerRowSet(X, W = W, S = S, FUN = colWeightedMeans)
> print(Z2)
            a          b          c           d           e          f
s1  0.1439749 -0.6719661  0.2072263 -0.59667567  0.46527744 -0.7680669
s2 -0.6502833 -0.3779979 -0.4901846 -0.03783865  0.04825649 -0.9448601
s3 -0.5855465 -0.2259779  0.3806952 -0.91784742 -0.68595420  0.2605619
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Result should always be a matrix, including when nrow(X) <= 1
> # (https://github.com/HenrikBengtsson/matrixStats/issues/108)
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> X <- matrix(1:3, nrow = 1L, ncol = 3L)
> S <- matrix(1, nrow = 1L, ncol = 1L)
> Z1 <- rowAvgsPerColSet(X, S = S)
> stopifnot(is.matrix(Z1))
> Z2 <- rowAvgsPerColSet(X, S = S, rows = 0)
> stopifnot(is.matrix(Z2))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Works with many, one or zero columns / rows
> # (https://github.com/HenrikBengtsson/matrixStats/issues/172)
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> S <- cbind(1:2, 3:4, 5:6)
> X <- matrix(rnorm(2 * 6), nrow = 6, ncol = 2)
> Z2 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z2_ref <- rbind(colSums2(X[S[,1], ,drop=FALSE]),
+                 colSums2(X[S[,2], ,drop=FALSE]),
+                 colSums2(X[S[,3], ,drop=FALSE]))
> stopifnot(identical(Z2, Z2_ref))
> X <- matrix(rnorm(6), nrow = 6, ncol = 1)
> Z1 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z1_ref <- rbind(colSums2(X[S[,1], ,drop=FALSE]),
+                 colSums2(X[S[,2], ,drop=FALSE]),
+                 colSums2(X[S[,3], ,drop=FALSE]))
> stopifnot(identical(Z1, Z1_ref))
> X <- matrix(numeric(0), nrow = 6, ncol = 0)
> Z0 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z0_ref <- matrix(numeric(0), nrow = ncol(S), ncol = 0)
> stopifnot(identical(Z0, unname(Z0_ref)))
> 
> 
> S <- rbind(1:4, 5:8)
> X <- matrix(rnorm(n = 2 * 8), nrow = 2, ncol = 8)
> Z2 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z2_ref <- cbind(rowMeans2(X[,S[,1],drop=FALSE]),
+                 rowMeans2(X[,S[,2],drop=FALSE]),
+                 rowMeans2(X[,S[,3],drop=FALSE]),
+                 rowMeans2(X[,S[,4],drop=FALSE]))
> stopifnot(identical(Z2, Z2_ref))
> X <- matrix(rnorm(n = 8), nrow = 1, ncol = 8)
> Z1 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z1_ref <- cbind(rowMeans2(X[,S[,1],drop=FALSE]),
+                 rowMeans2(X[,S[,2],drop=FALSE]),
+                 rowMeans2(X[,S[,3],drop=FALSE]),
+                 rowMeans2(X[,S[,4],drop=FALSE]))
> stopifnot(identical(Z1, Z1_ref))
> X <- matrix(numeric(0), nrow = 0, ncol = 8)
> Z0 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z0_ref <- matrix(numeric(0), nrow = 0, ncol = ncol(S))
> stopifnot(identical(Z0, Z0_ref))
> 
