
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library("matrixStats")
> 
> X <- matrix(rnorm(20 * 6), nrow = 20, ncol = 6)
> rownames(X) <- LETTERS[1:nrow(X)]
> colnames(X) <- letters[1:ncol(X)]
> print(X)
           a           b           c           d            e           f
A  0.1350176  1.34211272 -0.06083331 -1.11648864  0.785482017 -0.83471804
B -3.2693200 -0.31848828 -0.80526879  1.07438322  1.422018039  2.36179196
C -0.5877395  1.51564016 -0.43780282  0.97449780  0.761310108  0.50813244
D -1.1650608  2.43188826 -0.31024185  0.41702537  0.305436662  0.77732920
E  1.2906284  0.65569775  0.40851453  1.94117330 -0.998620118  0.03629217
F  0.4449015  0.16290660 -1.48417985 -0.59885478  0.753317280  0.91583866
G -2.5282960 -0.16355562  0.07228553 -0.48168710  0.237426372 -1.00692487
H  0.5450990  0.44114383  0.56699330  1.75073005 -0.244907771  0.03175475
I -0.1694947  1.25555173  1.30041846  0.04916076 -1.389159486 -0.35856015
J  0.5086620  0.72442183  0.88597191 -1.95050531 -0.558614746 -0.44193717
K  1.2643968 -1.58693443 -0.14404723  1.93581849 -0.142936157 -0.50334153
L -0.9241095  1.07555963 -1.11625372 -1.09990078 -1.066653411 -0.04388254
M -0.4608799  1.04544919  1.67250880 -1.22936440 -0.172741827 -0.93021359
N -1.1504131 -1.51560124  0.81926643  0.93007830 -0.007402919  1.82635720
O  0.3588401 -0.14401625 -0.65603791  0.33764826  1.484622597 -0.84422489
P  0.2551039 -0.07988105  1.16181786 -1.70950537  0.937411852 -1.08557802
Q -0.7476566 -0.38766308 -0.39985591 -0.08449806  0.588826218 -1.46886500
R -0.9519645 -1.90108232  0.98106449 -0.49814005 -0.383157880  1.77519322
S  0.6571993  1.72528612  0.64476390  1.03617221 -1.432489025  0.99208917
T  1.2668774 -0.85355436  1.85833128  0.45344523  0.640655203  1.58598326
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Apply rowMeans() for 3 sets of 2 columns
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 3L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3
[1,]  1  3  5
[2,]  2  4  6
> 
> Z <- rowAvgsPerColSet(X, S = S)
> print(Z)
           s1          s2          s3
A  0.73856518 -0.58866097 -0.02461801
B -1.79390416  0.13455722  1.89190500
C  0.46395030  0.26834749  0.63472128
D  0.63341373  0.05339176  0.54138293
E  0.97316309  1.17484392 -0.48116397
F  0.30390406 -1.04151731  0.83457797
G -1.34592583 -0.20470078 -0.38474925
H  0.49312143  1.15886167 -0.10657651
I  0.54302851  0.67478961 -0.87385982
J  0.61654193 -0.53226670 -0.50027596
K -0.16126881  0.89588563 -0.32313884
L  0.07572506 -1.10807725 -0.55526798
M  0.29228464  0.22157220 -0.55147771
N -1.33300719  0.87467237  0.90947714
O  0.10741195 -0.15919483  0.32019886
P  0.08761142 -0.27384375 -0.07408308
Q -0.56765984 -0.24217699 -0.44001939
R -1.42652342  0.24146222  0.69601767
S  1.19124268  0.84046806 -0.22019993
T  0.20666151  1.15588826  1.11331923
> 
> # Validation
> Z0 <- cbind(s1 = rowMeans(X[, 1:2]), s2 = rowMeans(X[, 3:4]),
+             s3 = rowMeans(X[, 5:6]))
> stopifnot(identical(drop(Z), Z0))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Apply colMeans() for 5 sets of 4 rows
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 5L
> S <- matrix(1:nrow(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3 s4 s5
[1,]  1  5  9 13 17
[2,]  2  6 10 14 18
[3,]  3  7 11 15 19
[4,]  4  8 12 16 20
> 
> Z <- colAvgsPerRowSet(X, S = S)
> print(Z)
             a          b          c          d           e            f
s1 -1.22177569  1.2427882 -0.4035367  0.3373544  0.81856171  0.703133892
s2 -0.06191676  0.2740481 -0.1090966  0.6528404 -0.06319606 -0.005759824
s3  0.16986366  0.3671497  0.2315224 -0.2663567 -0.78934095 -0.336930347
s4 -0.24933725 -0.1735123  0.7493888 -0.4177858  0.56047243 -0.258414823
s5  0.05611388 -0.3542534  0.7710759  0.2267448 -0.14654137  0.721100165
> 
> # Validation
> Z0 <- rbind(s1 = colMeans(X[1:4, ]), s2 = colMeans(X[5:8, ]),
+             s3 = colMeans(X[9:12, ]), s4 = colMeans(X[13:16, ]),
+             s5 = colMeans(X[17:20, ]))
> stopifnot(identical(drop(Z), Z0))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # When there is only one "complete" set
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 1L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1
[1,]  1
[2,]  2
[3,]  3
[4,]  4
[5,]  5
[6,]  6
> 
> Z <- rowAvgsPerColSet(X, S = S, FUN = rowMeans)
> print(Z)
           s1
A  0.04176206
B  0.07751935
C  0.45567302
D  0.40939614
E  0.55561434
F  0.03232157
G -0.64512529
H  0.51513553
I  0.11465277
J -0.13866691
K  0.13715933
L -0.52920672
M -0.01254029
N  0.15038077
O  0.08947199
P -0.08677180
Q -0.41661874
R -0.16301451
S  0.60383694
T  0.82528967
> 
> Z0 <- rowMeans(X)
> stopifnot(identical(drop(Z), Z0))
> 
> 
> nbr_of_sets <- 1L
> S <- matrix(1:nrow(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
      s1
 [1,]  1
 [2,]  2
 [3,]  3
 [4,]  4
 [5,]  5
 [6,]  6
 [7,]  7
 [8,]  8
 [9,]  9
[10,] 10
[11,] 11
[12,] 12
[13,] 13
[14,] 14
[15,] 15
[16,] 16
[17,] 17
[18,] 18
[19,] 19
[20,] 20
> 
> Z <- colAvgsPerRowSet(X, S = S, FUN = colMeans)
> print(Z)
            a         b         c         d          e         f
s1 -0.2614104 0.2712441 0.2478708 0.1065594 0.07599115 0.1646258
> 
> Z0 <- colMeans(X)
> stopifnot(identical(drop(Z), Z0))
> 
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Use weights
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 3L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3
[1,]  1  3  5
[2,]  2  4  6
> 
> W <- matrix(runif(length(X)), nrow = nrow(X), ncol = ncol(X))
> Z1 <- rowAvgsPerColSet(X, W = W, S = S, FUN = rowWeightedMeans)
> print(Z1)
           s1          s2          s3
A  0.73856518 -0.58866097 -0.02461801
B -1.79390416  0.13455722  1.89190500
C  0.46395030  0.26834749  0.63472128
D  0.63341373  0.05339176  0.54138293
E  0.97316309  1.17484392 -0.48116397
F  0.30390406 -1.04151731  0.83457797
G -1.34592583 -0.20470078 -0.38474925
H  0.49312143  1.15886167 -0.10657651
I  0.54302851  0.67478961 -0.87385982
J  0.61654193 -0.53226670 -0.50027596
K -0.16126881  0.89588563 -0.32313884
L  0.07572506 -1.10807725 -0.55526798
M  0.29228464  0.22157220 -0.55147771
N -1.33300719  0.87467237  0.90947714
O  0.10741195 -0.15919483  0.32019886
P  0.08761142 -0.27384375 -0.07408308
Q -0.56765984 -0.24217699 -0.44001939
R -1.42652342  0.24146222  0.69601767
S  1.19124268  0.84046806 -0.22019993
T  0.20666151  1.15588826  1.11331923
> Z2 <- colAvgsPerRowSet(X, W = W, S = S, FUN = colWeightedMeans)
> print(Z2)
            a         b          c           d          e         f
s1 -1.5671512 0.5118122 -0.4330510 -0.02105271  1.1037500 0.7635370
s2 -0.8764002 1.9737642 -0.3740223  0.69576158  0.5333734 0.6427308
s3  0.8677650 0.4093022 -0.5378327  0.67115926 -0.1226514 0.4760654
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Result should always be a matrix, including when nrow(X) <= 1
> # (https://github.com/HenrikBengtsson/matrixStats/issues/108)
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> X <- matrix(1:3, nrow = 1L, ncol = 3L)
> S <- matrix(1, nrow = 1L, ncol = 1L)
> Z1 <- rowAvgsPerColSet(X, S = S)
> stopifnot(is.matrix(Z1))
> Z2 <- rowAvgsPerColSet(X, S = S, rows = 0)
> stopifnot(is.matrix(Z2))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Works with many, one or zero columns / rows
> # (https://github.com/HenrikBengtsson/matrixStats/issues/172)
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> S <- cbind(1:2, 3:4, 5:6)
> X <- matrix(rnorm(2 * 6), nrow = 6, ncol = 2)
> Z2 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z2_ref <- rbind(colSums2(X[S[,1], ,drop=FALSE]),
+                 colSums2(X[S[,2], ,drop=FALSE]),
+                 colSums2(X[S[,3], ,drop=FALSE]))
> stopifnot(identical(Z2, Z2_ref))
> X <- matrix(rnorm(6), nrow = 6, ncol = 1)
> Z1 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z1_ref <- rbind(colSums2(X[S[,1], ,drop=FALSE]),
+                 colSums2(X[S[,2], ,drop=FALSE]),
+                 colSums2(X[S[,3], ,drop=FALSE]))
> stopifnot(identical(Z1, Z1_ref))
> X <- matrix(numeric(0), nrow = 6, ncol = 0)
> Z0 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z0_ref <- matrix(numeric(0), nrow = ncol(S), ncol = 0)
> stopifnot(identical(Z0, unname(Z0_ref)))
> 
> 
> S <- rbind(1:4, 5:8)
> X <- matrix(rnorm(n = 2 * 8), nrow = 2, ncol = 8)
> Z2 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z2_ref <- cbind(rowMeans2(X[,S[,1],drop=FALSE]),
+                 rowMeans2(X[,S[,2],drop=FALSE]),
+                 rowMeans2(X[,S[,3],drop=FALSE]),
+                 rowMeans2(X[,S[,4],drop=FALSE]))
> stopifnot(identical(Z2, Z2_ref))
> X <- matrix(rnorm(n = 8), nrow = 1, ncol = 8)
> Z1 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z1_ref <- cbind(rowMeans2(X[,S[,1],drop=FALSE]),
+                 rowMeans2(X[,S[,2],drop=FALSE]),
+                 rowMeans2(X[,S[,3],drop=FALSE]),
+                 rowMeans2(X[,S[,4],drop=FALSE]))
> stopifnot(identical(Z1, Z1_ref))
> X <- matrix(numeric(0), nrow = 0, ncol = 8)
> Z0 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z0_ref <- matrix(numeric(0), nrow = 0, ncol = ncol(S))
> stopifnot(identical(Z0, Z0_ref))
> 
