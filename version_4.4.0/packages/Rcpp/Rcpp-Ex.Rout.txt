
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "Rcpp"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('Rcpp')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("CppField-class")
> ### * CppField-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: C++Field-class
> ### Title: Class "C++Field"
> ### Aliases: C++Field-class
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("C++Field")
Class "C++Field" [package "Rcpp"]

Slots:
                  
Name:       .xData
Class: environment

Extends: 
Class "envRefClass", directly
Class ".environment", by class "envRefClass", distance 2
Class "refClass", by class "envRefClass", distance 2
Class "environment", by class "envRefClass", distance 3, with explicit coerce
Class "refObject", by class "envRefClass", distance 3
> 
> 
> 
> cleanEx()
> nameEx("CppFunction-class")
> ### * CppFunction-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: C++Function-class
> ### Title: Class "C++Function"
> ### Aliases: C++Function-class show,C++Function-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("C++Function")
Class "C++Function" [package "Rcpp"]

Slots:
                                                      
Name:        .Data     pointer   docstring   signature
Class:    function externalptr   character   character

Extends: 
Class "function", from data part
Class "OptionalFunction", by class "function", distance 2
Class "PossibleMethod", by class "function", distance 2
> 
> 
> 
> cleanEx()
> nameEx("Rcpp-package")
> ### * Rcpp-package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Rcpp-package
> ### Title: R / C++ interface
> ### Aliases: Rcpp-package Rcpp
> ### Keywords: programming interface
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # introduction to Rcpp
> ##D vignette("Rcpp-introduction")
> ##D 
> ##D # information on how to build a package that uses Rcpp
> ##D vignette("Rcpp-package")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("Rcpp.package.skeleton")
> ### * Rcpp.package.skeleton
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Rcpp.package.skeleton
> ### Title: Create a skeleton for a new package depending on Rcpp
> ### Aliases: Rcpp.package.skeleton
> ### Keywords: programming
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # simple package
> ##D Rcpp.package.skeleton( "foobar" )
> ##D 
> ##D # package using attributes
> ##D Rcpp.package.skeleton( "foobar", attributes = TRUE )
> ##D 
> ##D # package with a module
> ##D Rcpp.package.skeleton( "testmod", module = TRUE )
> ##D 
> ##D # the Rcpp-package vignette
> ##D vignette( "Rcpp-package" )
> ##D 
> ##D # the Rcpp-modules vignette for information about modules
> ##D vignette( "Rcpp-modules" )
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("RcppUnitTests")
> ### * RcppUnitTests
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: RcppUnitTests
> ### Title: Rcpp : unit tests results
> ### Aliases: RcppUnitTests
> ### Keywords: programming
> 
> ### ** Examples
> 
> # unit tests are in the unitTests directory of the package
> list.files( system.file("unitTests", package = "Rcpp" ),
+ 	pattern = "^runit", full = TRUE )
character(0)
> 
> # trigger the unit tests preparation, follow printed instructions
> # on how to run them
> ## Not run: 
> ##D source( system.file("unitTests", "runTests.R", package = "Rcpp" ) )
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("compileAttributes")
> ### * compileAttributes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: compileAttributes
> ### Title: Compile Rcpp Attributes for a Package
> ### Aliases: compileAttributes
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # Compile attributes for package in the current working dir
> ##D compileAttributes()
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("cppFunction")
> ### * cppFunction
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cppFunction
> ### Title: Define an R Function with a C++ Implementation
> ### Aliases: cppFunction
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D cppFunction(
> ##D     'int fibonacci(const int x) {
> ##D         if (x == 0) return(0);
> ##D         if (x == 1) return(1);
> ##D         return (fibonacci(x - 1)) + fibonacci(x - 2);
> ##D     }')
> ##D 
> ##D cppFunction(depends = "RcppArmadillo",
> ##D     'List fastLm(NumericVector yr, NumericMatrix Xr) {
> ##D 
> ##D         int n = Xr.nrow(), k = Xr.ncol();
> ##D 
> ##D         arma::mat X(Xr.begin(), n, k, false);
> ##D         arma::colvec y(yr.begin(), yr.size(), false);
> ##D 
> ##D         arma::colvec coef = arma::solve(X, y);
> ##D         arma::colvec resid = y - X*coef;
> ##D 
> ##D         double sig2 = arma::as_scalar(arma::trans(resid)*resid/(n-k) );
> ##D         arma::colvec stderrest = arma::sqrt(
> ##D             sig2 * arma::diagvec(arma::inv(arma::trans(X)*X)));
> ##D 
> ##D         return List::create(Named("coefficients") = coef,
> ##D             Named("stderr")       = stderrest
> ##D         );
> ##D     }')
> ##D 
> ##D cppFunction(plugins=c("cpp11"), '
> ##D     int useCpp11() {
> ##D         auto x = 10;
> ##D         return x;
> ##D     }')
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("demangle")
> ### * demangle
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: demangle
> ### Title: c++ type information
> ### Aliases: demangle sizeof print.bytes
> ### Keywords: programming
> 
> ### ** Examples
> 
> ## Not run: 
> ##D     demangle( "int64_t" )
> ##D     demangle( "uint64_t" )
> ##D 
> ##D     demangle( "NumericVector" )
> ##D     demangle( "std::map<std::string,double>" )
> ##D     
> ##D     sizeof( "long" )
> ##D     sizeof( "long long" )
> ##D     
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("dependsAttribute")
> ### * dependsAttribute
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dependsAttribute
> ### Title: Rcpp::depends Attribute
> ### Aliases: dependsAttribute
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D // [[Rcpp::depends(RcppArmadillo)]]
> ##D 
> ##D // [[Rcpp::depends(Matrix, RcppGSL)]]
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("evalCpp")
> ### * evalCpp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: evalCpp
> ### Title: Evaluate a C++ Expression
> ### Aliases: evalCpp areMacrosDefined
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D evalCpp( "__cplusplus" )
> ##D evalCpp( "std::numeric_limits<double>::max()" )
> ##D     
> ##D areMacrosDefined( c("__cplusplus", "HAS_TR1" ) )
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("exportAttribute")
> ### * exportAttribute
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: exportAttribute
> ### Title: Rcpp::export Attribute
> ### Aliases: exportAttribute
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D #include <Rcpp.h>
> ##D 
> ##D using namespace Rcpp;
> ##D 
> ##D // [[Rcpp::export]]
> ##D int fibonacci(const int x) {
> ##D 
> ##D    if (x == 0) return(0);
> ##D    if (x == 1) return(1);
> ##D 
> ##D    return (fibonacci(x - 1)) + fibonacci(x - 2);
> ##D }
> ##D 
> ##D // [[Rcpp::export("convolveCpp")]]
> ##D NumericVector convolve(NumericVector a, NumericVector b) {
> ##D 
> ##D    int na = a.size(), nb = b.size();
> ##D    int nab = na + nb - 1;
> ##D    NumericVector xab(nab);
> ##D 
> ##D    for (int i = 0; i < na; i++)
> ##D       for (int j = 0; j < nb; j++)
> ##D          xab[i + j] += a[i] * b[j];
> ##D 
> ##D    return xab;
> ##D }
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("exposeClass")
> ### * exposeClass
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: exposeClass
> ### Title: Create an Rcpp Module to Expose a C++ Class in R
> ### Aliases: exposeClass
> ### Keywords: programming classes
> 
> ### ** Examples
> 
> ## Not run: 
> ##D ### Given the following C++ class, defined in file PopBD.h,
> ##D ### the call to exposeClass() shown below will write a file
> ##D ### src/PopBDModule.cpp containing a corresponding module definition.
> ##D ###   class PopBD {
> ##D ###     public:
> ##D ###       PopBD(void);
> ##D ###       PopBD(NumericVector initBirth, NumericVector initDeath);
> ##D ###   
> ##D ###       std::vector<double> birth;
> ##D ###       std::vector<double> death;
> ##D ###       std::vector<int> lineage;
> ##D ###       std::vector<long> size;
> ##D ###       void evolve(int);
> ##D ###   
> ##D ###   };
> ##D ### A file R/PopBDClass.R will be written containing the one line:
> ##D ###   PopBD <- setRcppClass("PopBD")
> ##D ###
> ##D ### The call below exposes the lineage and size fields, read-only,
> ##D ### and the evolve() method.
> ##D 
> ##D exposeClass("PopBD",
> ##D       constructors =
> ##D         list("", c("NumericVector", "NumericVector")),
> ##D       fields = c("lineage", "size"),
> ##D       methods = "evolve",
> ##D       header = '#include "PopBD.h"',
> ##D       readOnly = c("lineage", "size"))
> ##D 
> ##D ### Example with inheritance:  the class PopCount inherits from 
> ##D ### the previous class, and adds a method table().  It has the same
> ##D ### constructors as the previous class.
> ##D ### To expose the table() method, and the inherited evolve() method and size field:
> ##D 
> ##D exposeClass("PopCount",
> ##D       constructors =
> ##D         list("", c("NumericVector", "NumericVector")),
> ##D       fields = c(size = "std::vector<long>"),
> ##D       methods = list("table", evolve = c("void", "int")),
> ##D       header = '#include "PopCount.h"',
> ##D       readOnly = "size")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("getRcppVersion")
> ### * getRcppVersion
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getRcppVersion
> ### Title: Export the Rcpp (API) Package Version
> ### Aliases: getRcppVersion
> 
> ### ** Examples
> 
> getRcppVersion()
[1] ‘1.0.12’
> 
> 
> 
> cleanEx()
> nameEx("interfacesAttribute")
> ### * interfacesAttribute
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: interfacesAttribute
> ### Title: Rcpp::interfaces Attribute
> ### Aliases: interfacesAttribute
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D // [[Rcpp::interfaces(r, cpp)]]
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("loadModule")
> ### * loadModule
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: loadModule
> ### Title: Load an Rcpp Module into a Package
> ### Aliases: loadModule
> ### Keywords: programming
> 
> ### ** Examples
> 
> ## Not run: 
> ##D loadModule("yada", TRUE) # load all the objects from module "yada"
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("pluginsAttribute")
> ### * pluginsAttribute
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pluginsAttribute
> ### Title: Rcpp::plugins Attribute
> ### Aliases: pluginsAttribute
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D // [[Rcpp::plugins(cpp11)]]
> ##D 
> ##D // [[Rcpp::export]]
> ##D int useCpp11() {
> ##D     auto x = 10;
> ##D     return x;
> ##D }
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("setRcppClass")
> ### * setRcppClass
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: setRcppClass
> ### Title: Create a Class Extending a C++ Class
> ### Aliases: setRcppClass loadRcppClass RcppClass-class
> ### Keywords: classes
> 
> ### ** Examples
> 
> ## Not run: 
> ##D setRcppClass("World", 
> ##D     module = "yada", 
> ##D     fields = list(more = "character"),
> ##D     methods = list(
> ##D         test = function(what) message("Testing: ", what, "; ", more)),
> ##D     saveAs = "genWorld"
> ##D          )
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("sourceCpp")
> ### * sourceCpp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sourceCpp
> ### Title: Source C++ Code from a File or String
> ### Aliases: sourceCpp
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D sourceCpp("fibonacci.cpp")
> ##D 
> ##D sourceCpp(code='
> ##D   #include <Rcpp.h>
> ##D 
> ##D   // [[Rcpp::export]]
> ##D   int fibonacci(const int x) {
> ##D     if (x == 0) return(0);
> ##D     if (x == 1) return(1);
> ##D     return (fibonacci(x - 1)) + fibonacci(x - 2);
> ##D   }'
> ##D )
> ##D 
> ## End(Not run)
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.122 0.006 0.128 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
