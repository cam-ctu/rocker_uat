
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[09:31:27.582] plan(): Setting new future strategy stack:
[09:31:27.582] List of future strategies:
[09:31:27.582] 1. sequential:
[09:31:27.582]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:27.582]    - tweaked: FALSE
[09:31:27.582]    - call: future::plan("sequential")
[09:31:27.594] plan(): nbrOfWorkers() = 1
> library(methods)
> 
> message("*** Globals - S4 methods ...")
*** Globals - S4 methods ...
> 
> setGeneric("my_fcn", function(x) standardGeneric("my_fcn"))
[1] "my_fcn"
> setMethod("my_fcn", signature(x = "numeric"), function(x) { -x })
> org_my_fcn <- my_fcn
> 
> truth <- my_fcn(3)
> 
> for (strategy in supportedStrategies()) {
+   message("Type of future: ", strategy)
+   plan(strategy)
+ 
+   ## Assert that S4 generic function 'my_fcn()' is exported
+   f <- future({ my_fcn }, lazy = TRUE)
+   rm(list = "my_fcn")
+   v <- value(f)
+   print(v)
+   stopifnot(
+     is.function(v),
+     inherits(v, class(org_my_fcn)[1])
+   )
+   my_fcn <- org_my_fcn
+   
+   ## FIXME:
+   ## Just like S3 methods, S4 methods are not picked up
+   ## https://github.com/HenrikBengtsson/future/issues/615
+   f <- future({ my_fcn(3) }, lazy = TRUE)
+   rm(list = "my_fcn")
+   v <- tryCatch(value(f), error = identity)
+   print(v)
+   if (isTRUE(as.logical(Sys.getenv("R_CHECK_IDEAL")))) {
+     if (getOption("future.globals.keepWhere", TRUE)) {
+       stopifnot(identical(v, truth))
+     } else {
+       stopifnot(inherits(v, "error"))
+     }
+   } else if (isTRUE(getOption("future.globals.keepWhere", FALSE))) {
+     stopifnot(identical(v, truth))
+   } else {
+     if (strategy %in% c("sequential", "multicore")) {
+       stopifnot(inherits(v, "error"))
+     } else {
+       stopifnot(identical(v, truth))
+     }
+   }
+   my_fcn <- org_my_fcn
+ }
Type of future: sequential
[09:31:27.627] plan(): Setting new future strategy stack:
[09:31:27.627] List of future strategies:
[09:31:27.627] 1. sequential:
[09:31:27.627]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:27.627]    - tweaked: FALSE
[09:31:27.627]    - call: plan(strategy)
[09:31:27.639] plan(): nbrOfWorkers() = 1
[09:31:27.640] getGlobalsAndPackages() ...
[09:31:27.640] Searching for globals...
[09:31:27.645] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[09:31:27.646] Searching for globals ... DONE
[09:31:27.646] Resolving globals: FALSE
[09:31:27.647] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[09:31:27.647] The total size of the 1 globals exported for future expression (‘{; my_fcn; }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[09:31:27.647] - globals: [1] ‘my_fcn’
[09:31:27.647] 
[09:31:27.647] getGlobalsAndPackages() ... DONE
[09:31:27.648] run() for ‘Future’ ...
[09:31:27.648] - state: ‘created’
[09:31:27.649] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:31:27.649] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:27.649] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:31:27.649]   - Field: ‘label’
[09:31:27.649]   - Field: ‘local’
[09:31:27.649]   - Field: ‘owner’
[09:31:27.649]   - Field: ‘envir’
[09:31:27.649]   - Field: ‘packages’
[09:31:27.649]   - Field: ‘gc’
[09:31:27.650]   - Field: ‘conditions’
[09:31:27.650]   - Field: ‘expr’
[09:31:27.650]   - Field: ‘uuid’
[09:31:27.650]   - Field: ‘seed’
[09:31:27.650]   - Field: ‘version’
[09:31:27.650]   - Field: ‘result’
[09:31:27.650]   - Field: ‘asynchronous’
[09:31:27.650]   - Field: ‘calls’
[09:31:27.650]   - Field: ‘globals’
[09:31:27.650]   - Field: ‘stdout’
[09:31:27.650]   - Field: ‘earlySignal’
[09:31:27.650]   - Field: ‘lazy’
[09:31:27.651]   - Field: ‘state’
[09:31:27.651] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:31:27.651] - Launch lazy future ...
[09:31:27.651] Packages needed by the future expression (n = 0): <none>
[09:31:27.652] Packages needed by future strategies (n = 0): <none>
[09:31:27.652] {
[09:31:27.652]     {
[09:31:27.652]         {
[09:31:27.652]             ...future.startTime <- base::Sys.time()
[09:31:27.652]             {
[09:31:27.652]                 {
[09:31:27.652]                   {
[09:31:27.652]                     base::local({
[09:31:27.652]                       has_future <- base::requireNamespace("future", 
[09:31:27.652]                         quietly = TRUE)
[09:31:27.652]                       if (has_future) {
[09:31:27.652]                         ns <- base::getNamespace("future")
[09:31:27.652]                         version <- ns[[".package"]][["version"]]
[09:31:27.652]                         if (is.null(version)) 
[09:31:27.652]                           version <- utils::packageVersion("future")
[09:31:27.652]                       }
[09:31:27.652]                       else {
[09:31:27.652]                         version <- NULL
[09:31:27.652]                       }
[09:31:27.652]                       if (!has_future || version < "1.8.0") {
[09:31:27.652]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:27.652]                           "", base::R.version$version.string), 
[09:31:27.652]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:27.652]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:27.652]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:27.652]                             "release", "version")], collapse = " "), 
[09:31:27.652]                           hostname = base::Sys.info()[["nodename"]])
[09:31:27.652]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:27.652]                           info)
[09:31:27.652]                         info <- base::paste(info, collapse = "; ")
[09:31:27.652]                         if (!has_future) {
[09:31:27.652]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:27.652]                             info)
[09:31:27.652]                         }
[09:31:27.652]                         else {
[09:31:27.652]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:27.652]                             info, version)
[09:31:27.652]                         }
[09:31:27.652]                         base::stop(msg)
[09:31:27.652]                       }
[09:31:27.652]                     })
[09:31:27.652]                   }
[09:31:27.652]                   ...future.strategy.old <- future::plan("list")
[09:31:27.652]                   options(future.plan = NULL)
[09:31:27.652]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:27.652]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:27.652]                 }
[09:31:27.652]                 ...future.workdir <- getwd()
[09:31:27.652]             }
[09:31:27.652]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:27.652]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:27.652]         }
[09:31:27.652]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:27.652]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:27.652]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:27.652]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:27.652]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:27.652]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:27.652]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:27.652]             base::names(...future.oldOptions))
[09:31:27.652]     }
[09:31:27.652]     if (FALSE) {
[09:31:27.652]     }
[09:31:27.652]     else {
[09:31:27.652]         if (TRUE) {
[09:31:27.652]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:27.652]                 open = "w")
[09:31:27.652]         }
[09:31:27.652]         else {
[09:31:27.652]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:27.652]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:27.652]         }
[09:31:27.652]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:27.652]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:27.652]             base::sink(type = "output", split = FALSE)
[09:31:27.652]             base::close(...future.stdout)
[09:31:27.652]         }, add = TRUE)
[09:31:27.652]     }
[09:31:27.652]     ...future.frame <- base::sys.nframe()
[09:31:27.652]     ...future.conditions <- base::list()
[09:31:27.652]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:27.652]     if (FALSE) {
[09:31:27.652]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:27.652]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:27.652]     }
[09:31:27.652]     ...future.result <- base::tryCatch({
[09:31:27.652]         base::withCallingHandlers({
[09:31:27.652]             ...future.value <- base::withVisible(base::local({
[09:31:27.652]                 my_fcn
[09:31:27.652]             }))
[09:31:27.652]             future::FutureResult(value = ...future.value$value, 
[09:31:27.652]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:27.652]                   ...future.rng), globalenv = if (FALSE) 
[09:31:27.652]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:27.652]                     ...future.globalenv.names))
[09:31:27.652]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:27.652]         }, condition = base::local({
[09:31:27.652]             c <- base::c
[09:31:27.652]             inherits <- base::inherits
[09:31:27.652]             invokeRestart <- base::invokeRestart
[09:31:27.652]             length <- base::length
[09:31:27.652]             list <- base::list
[09:31:27.652]             seq.int <- base::seq.int
[09:31:27.652]             signalCondition <- base::signalCondition
[09:31:27.652]             sys.calls <- base::sys.calls
[09:31:27.652]             `[[` <- base::`[[`
[09:31:27.652]             `+` <- base::`+`
[09:31:27.652]             `<<-` <- base::`<<-`
[09:31:27.652]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:27.652]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:27.652]                   3L)]
[09:31:27.652]             }
[09:31:27.652]             function(cond) {
[09:31:27.652]                 is_error <- inherits(cond, "error")
[09:31:27.652]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:27.652]                   NULL)
[09:31:27.652]                 if (is_error) {
[09:31:27.652]                   sessionInformation <- function() {
[09:31:27.652]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:27.652]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:27.652]                       search = base::search(), system = base::Sys.info())
[09:31:27.652]                   }
[09:31:27.652]                   ...future.conditions[[length(...future.conditions) + 
[09:31:27.652]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:27.652]                     cond$call), session = sessionInformation(), 
[09:31:27.652]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:27.652]                   signalCondition(cond)
[09:31:27.652]                 }
[09:31:27.652]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:27.652]                 "immediateCondition"))) {
[09:31:27.652]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:27.652]                   ...future.conditions[[length(...future.conditions) + 
[09:31:27.652]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:27.652]                   if (TRUE && !signal) {
[09:31:27.652]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:27.652]                     {
[09:31:27.652]                       inherits <- base::inherits
[09:31:27.652]                       invokeRestart <- base::invokeRestart
[09:31:27.652]                       is.null <- base::is.null
[09:31:27.652]                       muffled <- FALSE
[09:31:27.652]                       if (inherits(cond, "message")) {
[09:31:27.652]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:27.652]                         if (muffled) 
[09:31:27.652]                           invokeRestart("muffleMessage")
[09:31:27.652]                       }
[09:31:27.652]                       else if (inherits(cond, "warning")) {
[09:31:27.652]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:27.652]                         if (muffled) 
[09:31:27.652]                           invokeRestart("muffleWarning")
[09:31:27.652]                       }
[09:31:27.652]                       else if (inherits(cond, "condition")) {
[09:31:27.652]                         if (!is.null(pattern)) {
[09:31:27.652]                           computeRestarts <- base::computeRestarts
[09:31:27.652]                           grepl <- base::grepl
[09:31:27.652]                           restarts <- computeRestarts(cond)
[09:31:27.652]                           for (restart in restarts) {
[09:31:27.652]                             name <- restart$name
[09:31:27.652]                             if (is.null(name)) 
[09:31:27.652]                               next
[09:31:27.652]                             if (!grepl(pattern, name)) 
[09:31:27.652]                               next
[09:31:27.652]                             invokeRestart(restart)
[09:31:27.652]                             muffled <- TRUE
[09:31:27.652]                             break
[09:31:27.652]                           }
[09:31:27.652]                         }
[09:31:27.652]                       }
[09:31:27.652]                       invisible(muffled)
[09:31:27.652]                     }
[09:31:27.652]                     muffleCondition(cond, pattern = "^muffle")
[09:31:27.652]                   }
[09:31:27.652]                 }
[09:31:27.652]                 else {
[09:31:27.652]                   if (TRUE) {
[09:31:27.652]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:27.652]                     {
[09:31:27.652]                       inherits <- base::inherits
[09:31:27.652]                       invokeRestart <- base::invokeRestart
[09:31:27.652]                       is.null <- base::is.null
[09:31:27.652]                       muffled <- FALSE
[09:31:27.652]                       if (inherits(cond, "message")) {
[09:31:27.652]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:27.652]                         if (muffled) 
[09:31:27.652]                           invokeRestart("muffleMessage")
[09:31:27.652]                       }
[09:31:27.652]                       else if (inherits(cond, "warning")) {
[09:31:27.652]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:27.652]                         if (muffled) 
[09:31:27.652]                           invokeRestart("muffleWarning")
[09:31:27.652]                       }
[09:31:27.652]                       else if (inherits(cond, "condition")) {
[09:31:27.652]                         if (!is.null(pattern)) {
[09:31:27.652]                           computeRestarts <- base::computeRestarts
[09:31:27.652]                           grepl <- base::grepl
[09:31:27.652]                           restarts <- computeRestarts(cond)
[09:31:27.652]                           for (restart in restarts) {
[09:31:27.652]                             name <- restart$name
[09:31:27.652]                             if (is.null(name)) 
[09:31:27.652]                               next
[09:31:27.652]                             if (!grepl(pattern, name)) 
[09:31:27.652]                               next
[09:31:27.652]                             invokeRestart(restart)
[09:31:27.652]                             muffled <- TRUE
[09:31:27.652]                             break
[09:31:27.652]                           }
[09:31:27.652]                         }
[09:31:27.652]                       }
[09:31:27.652]                       invisible(muffled)
[09:31:27.652]                     }
[09:31:27.652]                     muffleCondition(cond, pattern = "^muffle")
[09:31:27.652]                   }
[09:31:27.652]                 }
[09:31:27.652]             }
[09:31:27.652]         }))
[09:31:27.652]     }, error = function(ex) {
[09:31:27.652]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:27.652]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:27.652]                 ...future.rng), started = ...future.startTime, 
[09:31:27.652]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:27.652]             version = "1.8"), class = "FutureResult")
[09:31:27.652]     }, finally = {
[09:31:27.652]         if (!identical(...future.workdir, getwd())) 
[09:31:27.652]             setwd(...future.workdir)
[09:31:27.652]         {
[09:31:27.652]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:27.652]                 ...future.oldOptions$nwarnings <- NULL
[09:31:27.652]             }
[09:31:27.652]             base::options(...future.oldOptions)
[09:31:27.652]             if (.Platform$OS.type == "windows") {
[09:31:27.652]                 old_names <- names(...future.oldEnvVars)
[09:31:27.652]                 envs <- base::Sys.getenv()
[09:31:27.652]                 names <- names(envs)
[09:31:27.652]                 common <- intersect(names, old_names)
[09:31:27.652]                 added <- setdiff(names, old_names)
[09:31:27.652]                 removed <- setdiff(old_names, names)
[09:31:27.652]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:27.652]                   envs[common]]
[09:31:27.652]                 NAMES <- toupper(changed)
[09:31:27.652]                 args <- list()
[09:31:27.652]                 for (kk in seq_along(NAMES)) {
[09:31:27.652]                   name <- changed[[kk]]
[09:31:27.652]                   NAME <- NAMES[[kk]]
[09:31:27.652]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:27.652]                     next
[09:31:27.652]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:27.652]                 }
[09:31:27.652]                 NAMES <- toupper(added)
[09:31:27.652]                 for (kk in seq_along(NAMES)) {
[09:31:27.652]                   name <- added[[kk]]
[09:31:27.652]                   NAME <- NAMES[[kk]]
[09:31:27.652]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:27.652]                     next
[09:31:27.652]                   args[[name]] <- ""
[09:31:27.652]                 }
[09:31:27.652]                 NAMES <- toupper(removed)
[09:31:27.652]                 for (kk in seq_along(NAMES)) {
[09:31:27.652]                   name <- removed[[kk]]
[09:31:27.652]                   NAME <- NAMES[[kk]]
[09:31:27.652]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:27.652]                     next
[09:31:27.652]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:27.652]                 }
[09:31:27.652]                 if (length(args) > 0) 
[09:31:27.652]                   base::do.call(base::Sys.setenv, args = args)
[09:31:27.652]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:27.652]             }
[09:31:27.652]             else {
[09:31:27.652]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:27.652]             }
[09:31:27.652]             {
[09:31:27.652]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:27.652]                   0L) {
[09:31:27.652]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:27.652]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:27.652]                   base::options(opts)
[09:31:27.652]                 }
[09:31:27.652]                 {
[09:31:27.652]                   {
[09:31:27.652]                     NULL
[09:31:27.652]                     RNGkind("Mersenne-Twister")
[09:31:27.652]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:27.652]                       inherits = FALSE)
[09:31:27.652]                   }
[09:31:27.652]                   options(future.plan = NULL)
[09:31:27.652]                   if (is.na(NA_character_)) 
[09:31:27.652]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:27.652]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:27.652]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:27.652]                     .init = FALSE)
[09:31:27.652]                 }
[09:31:27.652]             }
[09:31:27.652]         }
[09:31:27.652]     })
[09:31:27.652]     if (TRUE) {
[09:31:27.652]         base::sink(type = "output", split = FALSE)
[09:31:27.652]         if (TRUE) {
[09:31:27.652]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:27.652]         }
[09:31:27.652]         else {
[09:31:27.652]             ...future.result["stdout"] <- base::list(NULL)
[09:31:27.652]         }
[09:31:27.652]         base::close(...future.stdout)
[09:31:27.652]         ...future.stdout <- NULL
[09:31:27.652]     }
[09:31:27.652]     ...future.result$conditions <- ...future.conditions
[09:31:27.652]     ...future.result$finished <- base::Sys.time()
[09:31:27.652]     ...future.result
[09:31:27.652] }
[09:31:27.654] assign_globals() ...
[09:31:27.654] List of 1
[09:31:27.654]  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[09:31:27.654]   .. ..@ .Data     :function (x)  
[09:31:27.654]   .. ..@ generic   : chr "my_fcn"
[09:31:27.654]   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[09:31:27.654]   .. ..@ package   : chr ".GlobalEnv"
[09:31:27.654]   .. ..@ group     : list()
[09:31:27.654]   .. ..@ valueClass: chr(0) 
[09:31:27.654]   .. ..@ signature : chr "x"
[09:31:27.654]   .. ..@ default   : NULL
[09:31:27.654]   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[09:31:27.654]  - attr(*, "where")=List of 1
[09:31:27.654]   ..$ my_fcn:<environment: R_EmptyEnv> 
[09:31:27.654]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:31:27.654]  - attr(*, "resolved")= logi FALSE
[09:31:27.654]  - attr(*, "total_size")= num 3936
[09:31:27.654]  - attr(*, "already-done")= logi TRUE
[09:31:27.661] - reassign environment for ‘my_fcn’
[09:31:27.661] - copied ‘my_fcn’ to environment
[09:31:27.661] assign_globals() ... done
[09:31:27.661] plan(): Setting new future strategy stack:
[09:31:27.661] List of future strategies:
[09:31:27.661] 1. sequential:
[09:31:27.661]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:27.661]    - tweaked: FALSE
[09:31:27.661]    - call: NULL
[09:31:27.662] plan(): nbrOfWorkers() = 1
[09:31:27.663] plan(): Setting new future strategy stack:
[09:31:27.663] List of future strategies:
[09:31:27.663] 1. sequential:
[09:31:27.663]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:27.663]    - tweaked: FALSE
[09:31:27.663]    - call: plan(strategy)
[09:31:27.663] plan(): nbrOfWorkers() = 1
[09:31:27.664] SequentialFuture started (and completed)
[09:31:27.664] - Launch lazy future ... done
[09:31:27.664] run() for ‘SequentialFuture’ ... done
new("standardGeneric", .Data = function (x) 
standardGeneric("my_fcn"), generic = "my_fcn", package = ".GlobalEnv", 
    group = list(), valueClass = character(0), signature = "x", 
    default = NULL, skeleton = (function (x) 
    stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
        "my_fcn"), domain = NA))(x))
<environment: 0x55b64d6d79d0>
attr(,"generic")
[1] "my_fcn"
attr(,"generic")attr(,"package")
[1] ".GlobalEnv"
attr(,"package")
[1] ".GlobalEnv"
attr(,"group")
list()
attr(,"valueClass")
character(0)
attr(,"signature")
[1] "x"
attr(,"default")
`\001NULL\001`
attr(,"skeleton")
(function (x) 
stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
    "my_fcn"), domain = NA))(x)
attr(,"class")
[1] "standardGeneric"
attr(,"class")attr(,"package")
[1] "methods"
[09:31:27.665] getGlobalsAndPackages() ...
[09:31:27.666] Searching for globals...
[09:31:27.670] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[09:31:27.670] Searching for globals ... DONE
[09:31:27.670] Resolving globals: FALSE
[09:31:27.671] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[09:31:27.671] The total size of the 1 globals exported for future expression (‘{; my_fcn(3); }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[09:31:27.671] - globals: [1] ‘my_fcn’
[09:31:27.671] 
[09:31:27.671] getGlobalsAndPackages() ... DONE
[09:31:27.672] run() for ‘Future’ ...
[09:31:27.672] - state: ‘created’
[09:31:27.672] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:31:27.672] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:27.672] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:31:27.672]   - Field: ‘label’
[09:31:27.672]   - Field: ‘local’
[09:31:27.673]   - Field: ‘owner’
[09:31:27.673]   - Field: ‘envir’
[09:31:27.673]   - Field: ‘packages’
[09:31:27.673]   - Field: ‘gc’
[09:31:27.673]   - Field: ‘conditions’
[09:31:27.673]   - Field: ‘expr’
[09:31:27.673]   - Field: ‘uuid’
[09:31:27.673]   - Field: ‘seed’
[09:31:27.673]   - Field: ‘version’
[09:31:27.673]   - Field: ‘result’
[09:31:27.673]   - Field: ‘asynchronous’
[09:31:27.674]   - Field: ‘calls’
[09:31:27.674]   - Field: ‘globals’
[09:31:27.674]   - Field: ‘stdout’
[09:31:27.674]   - Field: ‘earlySignal’
[09:31:27.674]   - Field: ‘lazy’
[09:31:27.674]   - Field: ‘state’
[09:31:27.674] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:31:27.674] - Launch lazy future ...
[09:31:27.674] Packages needed by the future expression (n = 0): <none>
[09:31:27.674] Packages needed by future strategies (n = 0): <none>
[09:31:27.675] {
[09:31:27.675]     {
[09:31:27.675]         {
[09:31:27.675]             ...future.startTime <- base::Sys.time()
[09:31:27.675]             {
[09:31:27.675]                 {
[09:31:27.675]                   {
[09:31:27.675]                     base::local({
[09:31:27.675]                       has_future <- base::requireNamespace("future", 
[09:31:27.675]                         quietly = TRUE)
[09:31:27.675]                       if (has_future) {
[09:31:27.675]                         ns <- base::getNamespace("future")
[09:31:27.675]                         version <- ns[[".package"]][["version"]]
[09:31:27.675]                         if (is.null(version)) 
[09:31:27.675]                           version <- utils::packageVersion("future")
[09:31:27.675]                       }
[09:31:27.675]                       else {
[09:31:27.675]                         version <- NULL
[09:31:27.675]                       }
[09:31:27.675]                       if (!has_future || version < "1.8.0") {
[09:31:27.675]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:27.675]                           "", base::R.version$version.string), 
[09:31:27.675]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:27.675]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:27.675]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:27.675]                             "release", "version")], collapse = " "), 
[09:31:27.675]                           hostname = base::Sys.info()[["nodename"]])
[09:31:27.675]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:27.675]                           info)
[09:31:27.675]                         info <- base::paste(info, collapse = "; ")
[09:31:27.675]                         if (!has_future) {
[09:31:27.675]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:27.675]                             info)
[09:31:27.675]                         }
[09:31:27.675]                         else {
[09:31:27.675]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:27.675]                             info, version)
[09:31:27.675]                         }
[09:31:27.675]                         base::stop(msg)
[09:31:27.675]                       }
[09:31:27.675]                     })
[09:31:27.675]                   }
[09:31:27.675]                   ...future.strategy.old <- future::plan("list")
[09:31:27.675]                   options(future.plan = NULL)
[09:31:27.675]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:27.675]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:27.675]                 }
[09:31:27.675]                 ...future.workdir <- getwd()
[09:31:27.675]             }
[09:31:27.675]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:27.675]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:27.675]         }
[09:31:27.675]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:27.675]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:27.675]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:27.675]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:27.675]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:27.675]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:27.675]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:27.675]             base::names(...future.oldOptions))
[09:31:27.675]     }
[09:31:27.675]     if (FALSE) {
[09:31:27.675]     }
[09:31:27.675]     else {
[09:31:27.675]         if (TRUE) {
[09:31:27.675]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:27.675]                 open = "w")
[09:31:27.675]         }
[09:31:27.675]         else {
[09:31:27.675]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:27.675]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:27.675]         }
[09:31:27.675]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:27.675]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:27.675]             base::sink(type = "output", split = FALSE)
[09:31:27.675]             base::close(...future.stdout)
[09:31:27.675]         }, add = TRUE)
[09:31:27.675]     }
[09:31:27.675]     ...future.frame <- base::sys.nframe()
[09:31:27.675]     ...future.conditions <- base::list()
[09:31:27.675]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:27.675]     if (FALSE) {
[09:31:27.675]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:27.675]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:27.675]     }
[09:31:27.675]     ...future.result <- base::tryCatch({
[09:31:27.675]         base::withCallingHandlers({
[09:31:27.675]             ...future.value <- base::withVisible(base::local({
[09:31:27.675]                 my_fcn(3)
[09:31:27.675]             }))
[09:31:27.675]             future::FutureResult(value = ...future.value$value, 
[09:31:27.675]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:27.675]                   ...future.rng), globalenv = if (FALSE) 
[09:31:27.675]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:27.675]                     ...future.globalenv.names))
[09:31:27.675]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:27.675]         }, condition = base::local({
[09:31:27.675]             c <- base::c
[09:31:27.675]             inherits <- base::inherits
[09:31:27.675]             invokeRestart <- base::invokeRestart
[09:31:27.675]             length <- base::length
[09:31:27.675]             list <- base::list
[09:31:27.675]             seq.int <- base::seq.int
[09:31:27.675]             signalCondition <- base::signalCondition
[09:31:27.675]             sys.calls <- base::sys.calls
[09:31:27.675]             `[[` <- base::`[[`
[09:31:27.675]             `+` <- base::`+`
[09:31:27.675]             `<<-` <- base::`<<-`
[09:31:27.675]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:27.675]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:27.675]                   3L)]
[09:31:27.675]             }
[09:31:27.675]             function(cond) {
[09:31:27.675]                 is_error <- inherits(cond, "error")
[09:31:27.675]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:27.675]                   NULL)
[09:31:27.675]                 if (is_error) {
[09:31:27.675]                   sessionInformation <- function() {
[09:31:27.675]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:27.675]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:27.675]                       search = base::search(), system = base::Sys.info())
[09:31:27.675]                   }
[09:31:27.675]                   ...future.conditions[[length(...future.conditions) + 
[09:31:27.675]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:27.675]                     cond$call), session = sessionInformation(), 
[09:31:27.675]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:27.675]                   signalCondition(cond)
[09:31:27.675]                 }
[09:31:27.675]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:27.675]                 "immediateCondition"))) {
[09:31:27.675]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:27.675]                   ...future.conditions[[length(...future.conditions) + 
[09:31:27.675]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:27.675]                   if (TRUE && !signal) {
[09:31:27.675]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:27.675]                     {
[09:31:27.675]                       inherits <- base::inherits
[09:31:27.675]                       invokeRestart <- base::invokeRestart
[09:31:27.675]                       is.null <- base::is.null
[09:31:27.675]                       muffled <- FALSE
[09:31:27.675]                       if (inherits(cond, "message")) {
[09:31:27.675]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:27.675]                         if (muffled) 
[09:31:27.675]                           invokeRestart("muffleMessage")
[09:31:27.675]                       }
[09:31:27.675]                       else if (inherits(cond, "warning")) {
[09:31:27.675]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:27.675]                         if (muffled) 
[09:31:27.675]                           invokeRestart("muffleWarning")
[09:31:27.675]                       }
[09:31:27.675]                       else if (inherits(cond, "condition")) {
[09:31:27.675]                         if (!is.null(pattern)) {
[09:31:27.675]                           computeRestarts <- base::computeRestarts
[09:31:27.675]                           grepl <- base::grepl
[09:31:27.675]                           restarts <- computeRestarts(cond)
[09:31:27.675]                           for (restart in restarts) {
[09:31:27.675]                             name <- restart$name
[09:31:27.675]                             if (is.null(name)) 
[09:31:27.675]                               next
[09:31:27.675]                             if (!grepl(pattern, name)) 
[09:31:27.675]                               next
[09:31:27.675]                             invokeRestart(restart)
[09:31:27.675]                             muffled <- TRUE
[09:31:27.675]                             break
[09:31:27.675]                           }
[09:31:27.675]                         }
[09:31:27.675]                       }
[09:31:27.675]                       invisible(muffled)
[09:31:27.675]                     }
[09:31:27.675]                     muffleCondition(cond, pattern = "^muffle")
[09:31:27.675]                   }
[09:31:27.675]                 }
[09:31:27.675]                 else {
[09:31:27.675]                   if (TRUE) {
[09:31:27.675]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:27.675]                     {
[09:31:27.675]                       inherits <- base::inherits
[09:31:27.675]                       invokeRestart <- base::invokeRestart
[09:31:27.675]                       is.null <- base::is.null
[09:31:27.675]                       muffled <- FALSE
[09:31:27.675]                       if (inherits(cond, "message")) {
[09:31:27.675]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:27.675]                         if (muffled) 
[09:31:27.675]                           invokeRestart("muffleMessage")
[09:31:27.675]                       }
[09:31:27.675]                       else if (inherits(cond, "warning")) {
[09:31:27.675]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:27.675]                         if (muffled) 
[09:31:27.675]                           invokeRestart("muffleWarning")
[09:31:27.675]                       }
[09:31:27.675]                       else if (inherits(cond, "condition")) {
[09:31:27.675]                         if (!is.null(pattern)) {
[09:31:27.675]                           computeRestarts <- base::computeRestarts
[09:31:27.675]                           grepl <- base::grepl
[09:31:27.675]                           restarts <- computeRestarts(cond)
[09:31:27.675]                           for (restart in restarts) {
[09:31:27.675]                             name <- restart$name
[09:31:27.675]                             if (is.null(name)) 
[09:31:27.675]                               next
[09:31:27.675]                             if (!grepl(pattern, name)) 
[09:31:27.675]                               next
[09:31:27.675]                             invokeRestart(restart)
[09:31:27.675]                             muffled <- TRUE
[09:31:27.675]                             break
[09:31:27.675]                           }
[09:31:27.675]                         }
[09:31:27.675]                       }
[09:31:27.675]                       invisible(muffled)
[09:31:27.675]                     }
[09:31:27.675]                     muffleCondition(cond, pattern = "^muffle")
[09:31:27.675]                   }
[09:31:27.675]                 }
[09:31:27.675]             }
[09:31:27.675]         }))
[09:31:27.675]     }, error = function(ex) {
[09:31:27.675]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:27.675]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:27.675]                 ...future.rng), started = ...future.startTime, 
[09:31:27.675]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:27.675]             version = "1.8"), class = "FutureResult")
[09:31:27.675]     }, finally = {
[09:31:27.675]         if (!identical(...future.workdir, getwd())) 
[09:31:27.675]             setwd(...future.workdir)
[09:31:27.675]         {
[09:31:27.675]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:27.675]                 ...future.oldOptions$nwarnings <- NULL
[09:31:27.675]             }
[09:31:27.675]             base::options(...future.oldOptions)
[09:31:27.675]             if (.Platform$OS.type == "windows") {
[09:31:27.675]                 old_names <- names(...future.oldEnvVars)
[09:31:27.675]                 envs <- base::Sys.getenv()
[09:31:27.675]                 names <- names(envs)
[09:31:27.675]                 common <- intersect(names, old_names)
[09:31:27.675]                 added <- setdiff(names, old_names)
[09:31:27.675]                 removed <- setdiff(old_names, names)
[09:31:27.675]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:27.675]                   envs[common]]
[09:31:27.675]                 NAMES <- toupper(changed)
[09:31:27.675]                 args <- list()
[09:31:27.675]                 for (kk in seq_along(NAMES)) {
[09:31:27.675]                   name <- changed[[kk]]
[09:31:27.675]                   NAME <- NAMES[[kk]]
[09:31:27.675]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:27.675]                     next
[09:31:27.675]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:27.675]                 }
[09:31:27.675]                 NAMES <- toupper(added)
[09:31:27.675]                 for (kk in seq_along(NAMES)) {
[09:31:27.675]                   name <- added[[kk]]
[09:31:27.675]                   NAME <- NAMES[[kk]]
[09:31:27.675]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:27.675]                     next
[09:31:27.675]                   args[[name]] <- ""
[09:31:27.675]                 }
[09:31:27.675]                 NAMES <- toupper(removed)
[09:31:27.675]                 for (kk in seq_along(NAMES)) {
[09:31:27.675]                   name <- removed[[kk]]
[09:31:27.675]                   NAME <- NAMES[[kk]]
[09:31:27.675]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:27.675]                     next
[09:31:27.675]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:27.675]                 }
[09:31:27.675]                 if (length(args) > 0) 
[09:31:27.675]                   base::do.call(base::Sys.setenv, args = args)
[09:31:27.675]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:27.675]             }
[09:31:27.675]             else {
[09:31:27.675]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:27.675]             }
[09:31:27.675]             {
[09:31:27.675]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:27.675]                   0L) {
[09:31:27.675]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:27.675]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:27.675]                   base::options(opts)
[09:31:27.675]                 }
[09:31:27.675]                 {
[09:31:27.675]                   {
[09:31:27.675]                     NULL
[09:31:27.675]                     RNGkind("Mersenne-Twister")
[09:31:27.675]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:27.675]                       inherits = FALSE)
[09:31:27.675]                   }
[09:31:27.675]                   options(future.plan = NULL)
[09:31:27.675]                   if (is.na(NA_character_)) 
[09:31:27.675]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:27.675]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:27.675]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:27.675]                     .init = FALSE)
[09:31:27.675]                 }
[09:31:27.675]             }
[09:31:27.675]         }
[09:31:27.675]     })
[09:31:27.675]     if (TRUE) {
[09:31:27.675]         base::sink(type = "output", split = FALSE)
[09:31:27.675]         if (TRUE) {
[09:31:27.675]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:27.675]         }
[09:31:27.675]         else {
[09:31:27.675]             ...future.result["stdout"] <- base::list(NULL)
[09:31:27.675]         }
[09:31:27.675]         base::close(...future.stdout)
[09:31:27.675]         ...future.stdout <- NULL
[09:31:27.675]     }
[09:31:27.675]     ...future.result$conditions <- ...future.conditions
[09:31:27.675]     ...future.result$finished <- base::Sys.time()
[09:31:27.675]     ...future.result
[09:31:27.675] }
[09:31:27.676] assign_globals() ...
[09:31:27.676] List of 1
[09:31:27.676]  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[09:31:27.676]   .. ..@ .Data     :function (x)  
[09:31:27.676]   .. ..@ generic   : chr "my_fcn"
[09:31:27.676]   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[09:31:27.676]   .. ..@ package   : chr ".GlobalEnv"
[09:31:27.676]   .. ..@ group     : list()
[09:31:27.676]   .. ..@ valueClass: chr(0) 
[09:31:27.676]   .. ..@ signature : chr "x"
[09:31:27.676]   .. ..@ default   : NULL
[09:31:27.676]   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[09:31:27.676]  - attr(*, "where")=List of 1
[09:31:27.676]   ..$ my_fcn:<environment: R_EmptyEnv> 
[09:31:27.676]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:31:27.676]  - attr(*, "resolved")= logi FALSE
[09:31:27.676]  - attr(*, "total_size")= num 3936
[09:31:27.676]  - attr(*, "already-done")= logi TRUE
[09:31:27.681] - reassign environment for ‘my_fcn’
[09:31:27.681] - copied ‘my_fcn’ to environment
[09:31:27.681] assign_globals() ... done
[09:31:27.681] plan(): Setting new future strategy stack:
[09:31:27.681] List of future strategies:
[09:31:27.681] 1. sequential:
[09:31:27.681]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:27.681]    - tweaked: FALSE
[09:31:27.681]    - call: NULL
[09:31:27.682] plan(): nbrOfWorkers() = 1
[09:31:27.683] plan(): Setting new future strategy stack:
[09:31:27.683] List of future strategies:
[09:31:27.683] 1. sequential:
[09:31:27.683]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:27.683]    - tweaked: FALSE
[09:31:27.683]    - call: plan(strategy)
[09:31:27.684] plan(): nbrOfWorkers() = 1
[09:31:27.684] SequentialFuture started (and completed)
[09:31:27.684] signalConditions() ...
[09:31:27.684]  - include = ‘immediateCondition’
[09:31:27.684]  - exclude = 
[09:31:27.684]  - resignal = FALSE
[09:31:27.684]  - Number of conditions: 1
[09:31:27.685] signalConditions() ... done
[09:31:27.685] - Launch lazy future ... done
[09:31:27.685] run() for ‘SequentialFuture’ ... done
[09:31:27.685] signalConditions() ...
[09:31:27.685]  - include = ‘immediateCondition’
[09:31:27.685]  - exclude = 
[09:31:27.685]  - resignal = FALSE
[09:31:27.685]  - Number of conditions: 1
[09:31:27.685] signalConditions() ... done
[09:31:27.685] Future state: ‘finished’
[09:31:27.685] signalConditions() ...
[09:31:27.686]  - include = ‘condition’
[09:31:27.686]  - exclude = ‘immediateCondition’
[09:31:27.686]  - resignal = TRUE
[09:31:27.686]  - Number of conditions: 1
[09:31:27.686]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[09:31:27.686] signalConditions() ... done
<simpleError: unable to find an inherited method for function ‘my_fcn’ for signature ‘x = "numeric"’>
Type of future: multicore
[09:31:27.686] plan(): Setting new future strategy stack:
[09:31:27.686] List of future strategies:
[09:31:27.686] 1. multicore:
[09:31:27.686]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:27.686]    - tweaked: FALSE
[09:31:27.686]    - call: plan(strategy)
[09:31:27.690] plan(): nbrOfWorkers() = 2
[09:31:27.690] getGlobalsAndPackages() ...
[09:31:27.690] Searching for globals...
[09:31:27.693] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[09:31:27.693] Searching for globals ... DONE
[09:31:27.694] Resolving globals: FALSE
[09:31:27.694] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[09:31:27.694] The total size of the 1 globals exported for future expression (‘{; my_fcn; }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[09:31:27.694] - globals: [1] ‘my_fcn’
[09:31:27.694] 
[09:31:27.695] getGlobalsAndPackages() ... DONE
[09:31:27.695] run() for ‘Future’ ...
[09:31:27.695] - state: ‘created’
[09:31:27.695] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[09:31:27.698] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:27.698] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[09:31:27.699]   - Field: ‘label’
[09:31:27.699]   - Field: ‘local’
[09:31:27.699]   - Field: ‘owner’
[09:31:27.699]   - Field: ‘envir’
[09:31:27.699]   - Field: ‘workers’
[09:31:27.699]   - Field: ‘packages’
[09:31:27.699]   - Field: ‘gc’
[09:31:27.699]   - Field: ‘job’
[09:31:27.699]   - Field: ‘conditions’
[09:31:27.699]   - Field: ‘expr’
[09:31:27.699]   - Field: ‘uuid’
[09:31:27.700]   - Field: ‘seed’
[09:31:27.700]   - Field: ‘version’
[09:31:27.700]   - Field: ‘result’
[09:31:27.700]   - Field: ‘asynchronous’
[09:31:27.700]   - Field: ‘calls’
[09:31:27.700]   - Field: ‘globals’
[09:31:27.700]   - Field: ‘stdout’
[09:31:27.700]   - Field: ‘earlySignal’
[09:31:27.700]   - Field: ‘lazy’
[09:31:27.700]   - Field: ‘state’
[09:31:27.700] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[09:31:27.701] - Launch lazy future ...
[09:31:27.701] Packages needed by the future expression (n = 0): <none>
[09:31:27.701] Packages needed by future strategies (n = 0): <none>
[09:31:27.702] {
[09:31:27.702]     {
[09:31:27.702]         {
[09:31:27.702]             ...future.startTime <- base::Sys.time()
[09:31:27.702]             {
[09:31:27.702]                 {
[09:31:27.702]                   {
[09:31:27.702]                     {
[09:31:27.702]                       base::local({
[09:31:27.702]                         has_future <- base::requireNamespace("future", 
[09:31:27.702]                           quietly = TRUE)
[09:31:27.702]                         if (has_future) {
[09:31:27.702]                           ns <- base::getNamespace("future")
[09:31:27.702]                           version <- ns[[".package"]][["version"]]
[09:31:27.702]                           if (is.null(version)) 
[09:31:27.702]                             version <- utils::packageVersion("future")
[09:31:27.702]                         }
[09:31:27.702]                         else {
[09:31:27.702]                           version <- NULL
[09:31:27.702]                         }
[09:31:27.702]                         if (!has_future || version < "1.8.0") {
[09:31:27.702]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:27.702]                             "", base::R.version$version.string), 
[09:31:27.702]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:27.702]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:27.702]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:27.702]                               "release", "version")], collapse = " "), 
[09:31:27.702]                             hostname = base::Sys.info()[["nodename"]])
[09:31:27.702]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:27.702]                             info)
[09:31:27.702]                           info <- base::paste(info, collapse = "; ")
[09:31:27.702]                           if (!has_future) {
[09:31:27.702]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:27.702]                               info)
[09:31:27.702]                           }
[09:31:27.702]                           else {
[09:31:27.702]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:27.702]                               info, version)
[09:31:27.702]                           }
[09:31:27.702]                           base::stop(msg)
[09:31:27.702]                         }
[09:31:27.702]                       })
[09:31:27.702]                     }
[09:31:27.702]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:27.702]                     base::options(mc.cores = 1L)
[09:31:27.702]                   }
[09:31:27.702]                   ...future.strategy.old <- future::plan("list")
[09:31:27.702]                   options(future.plan = NULL)
[09:31:27.702]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:27.702]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:27.702]                 }
[09:31:27.702]                 ...future.workdir <- getwd()
[09:31:27.702]             }
[09:31:27.702]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:27.702]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:27.702]         }
[09:31:27.702]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:27.702]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:27.702]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:27.702]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:27.702]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:27.702]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:27.702]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:27.702]             base::names(...future.oldOptions))
[09:31:27.702]     }
[09:31:27.702]     if (FALSE) {
[09:31:27.702]     }
[09:31:27.702]     else {
[09:31:27.702]         if (TRUE) {
[09:31:27.702]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:27.702]                 open = "w")
[09:31:27.702]         }
[09:31:27.702]         else {
[09:31:27.702]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:27.702]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:27.702]         }
[09:31:27.702]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:27.702]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:27.702]             base::sink(type = "output", split = FALSE)
[09:31:27.702]             base::close(...future.stdout)
[09:31:27.702]         }, add = TRUE)
[09:31:27.702]     }
[09:31:27.702]     ...future.frame <- base::sys.nframe()
[09:31:27.702]     ...future.conditions <- base::list()
[09:31:27.702]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:27.702]     if (FALSE) {
[09:31:27.702]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:27.702]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:27.702]     }
[09:31:27.702]     ...future.result <- base::tryCatch({
[09:31:27.702]         base::withCallingHandlers({
[09:31:27.702]             ...future.value <- base::withVisible(base::local({
[09:31:27.702]                 withCallingHandlers({
[09:31:27.702]                   {
[09:31:27.702]                     my_fcn
[09:31:27.702]                   }
[09:31:27.702]                 }, immediateCondition = function(cond) {
[09:31:27.702]                   save_rds <- function (object, pathname, ...) 
[09:31:27.702]                   {
[09:31:27.702]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:31:27.702]                     if (file_test("-f", pathname_tmp)) {
[09:31:27.702]                       fi_tmp <- file.info(pathname_tmp)
[09:31:27.702]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:31:27.702]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:27.702]                         fi_tmp[["mtime"]])
[09:31:27.702]                     }
[09:31:27.702]                     tryCatch({
[09:31:27.702]                       saveRDS(object, file = pathname_tmp, ...)
[09:31:27.702]                     }, error = function(ex) {
[09:31:27.702]                       msg <- conditionMessage(ex)
[09:31:27.702]                       fi_tmp <- file.info(pathname_tmp)
[09:31:27.702]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:31:27.702]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:27.702]                         fi_tmp[["mtime"]], msg)
[09:31:27.702]                       ex$message <- msg
[09:31:27.702]                       stop(ex)
[09:31:27.702]                     })
[09:31:27.702]                     stopifnot(file_test("-f", pathname_tmp))
[09:31:27.702]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:31:27.702]                     if (!res || file_test("-f", pathname_tmp)) {
[09:31:27.702]                       fi_tmp <- file.info(pathname_tmp)
[09:31:27.702]                       fi <- file.info(pathname)
[09:31:27.702]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:31:27.702]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:27.702]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:31:27.702]                         fi[["size"]], fi[["mtime"]])
[09:31:27.702]                       stop(msg)
[09:31:27.702]                     }
[09:31:27.702]                     invisible(pathname)
[09:31:27.702]                   }
[09:31:27.702]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:31:27.702]                     rootPath = tempdir()) 
[09:31:27.702]                   {
[09:31:27.702]                     obj <- list(time = Sys.time(), condition = cond)
[09:31:27.702]                     file <- tempfile(pattern = class(cond)[1], 
[09:31:27.702]                       tmpdir = path, fileext = ".rds")
[09:31:27.702]                     save_rds(obj, file)
[09:31:27.702]                   }
[09:31:27.702]                   saveImmediateCondition(cond, path = "/tmp/RtmpnJ6dh8/.future/immediateConditions")
[09:31:27.702]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:27.702]                   {
[09:31:27.702]                     inherits <- base::inherits
[09:31:27.702]                     invokeRestart <- base::invokeRestart
[09:31:27.702]                     is.null <- base::is.null
[09:31:27.702]                     muffled <- FALSE
[09:31:27.702]                     if (inherits(cond, "message")) {
[09:31:27.702]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:27.702]                       if (muffled) 
[09:31:27.702]                         invokeRestart("muffleMessage")
[09:31:27.702]                     }
[09:31:27.702]                     else if (inherits(cond, "warning")) {
[09:31:27.702]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:27.702]                       if (muffled) 
[09:31:27.702]                         invokeRestart("muffleWarning")
[09:31:27.702]                     }
[09:31:27.702]                     else if (inherits(cond, "condition")) {
[09:31:27.702]                       if (!is.null(pattern)) {
[09:31:27.702]                         computeRestarts <- base::computeRestarts
[09:31:27.702]                         grepl <- base::grepl
[09:31:27.702]                         restarts <- computeRestarts(cond)
[09:31:27.702]                         for (restart in restarts) {
[09:31:27.702]                           name <- restart$name
[09:31:27.702]                           if (is.null(name)) 
[09:31:27.702]                             next
[09:31:27.702]                           if (!grepl(pattern, name)) 
[09:31:27.702]                             next
[09:31:27.702]                           invokeRestart(restart)
[09:31:27.702]                           muffled <- TRUE
[09:31:27.702]                           break
[09:31:27.702]                         }
[09:31:27.702]                       }
[09:31:27.702]                     }
[09:31:27.702]                     invisible(muffled)
[09:31:27.702]                   }
[09:31:27.702]                   muffleCondition(cond)
[09:31:27.702]                 })
[09:31:27.702]             }))
[09:31:27.702]             future::FutureResult(value = ...future.value$value, 
[09:31:27.702]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:27.702]                   ...future.rng), globalenv = if (FALSE) 
[09:31:27.702]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:27.702]                     ...future.globalenv.names))
[09:31:27.702]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:27.702]         }, condition = base::local({
[09:31:27.702]             c <- base::c
[09:31:27.702]             inherits <- base::inherits
[09:31:27.702]             invokeRestart <- base::invokeRestart
[09:31:27.702]             length <- base::length
[09:31:27.702]             list <- base::list
[09:31:27.702]             seq.int <- base::seq.int
[09:31:27.702]             signalCondition <- base::signalCondition
[09:31:27.702]             sys.calls <- base::sys.calls
[09:31:27.702]             `[[` <- base::`[[`
[09:31:27.702]             `+` <- base::`+`
[09:31:27.702]             `<<-` <- base::`<<-`
[09:31:27.702]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:27.702]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:27.702]                   3L)]
[09:31:27.702]             }
[09:31:27.702]             function(cond) {
[09:31:27.702]                 is_error <- inherits(cond, "error")
[09:31:27.702]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:27.702]                   NULL)
[09:31:27.702]                 if (is_error) {
[09:31:27.702]                   sessionInformation <- function() {
[09:31:27.702]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:27.702]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:27.702]                       search = base::search(), system = base::Sys.info())
[09:31:27.702]                   }
[09:31:27.702]                   ...future.conditions[[length(...future.conditions) + 
[09:31:27.702]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:27.702]                     cond$call), session = sessionInformation(), 
[09:31:27.702]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:27.702]                   signalCondition(cond)
[09:31:27.702]                 }
[09:31:27.702]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:27.702]                 "immediateCondition"))) {
[09:31:27.702]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:27.702]                   ...future.conditions[[length(...future.conditions) + 
[09:31:27.702]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:27.702]                   if (TRUE && !signal) {
[09:31:27.702]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:27.702]                     {
[09:31:27.702]                       inherits <- base::inherits
[09:31:27.702]                       invokeRestart <- base::invokeRestart
[09:31:27.702]                       is.null <- base::is.null
[09:31:27.702]                       muffled <- FALSE
[09:31:27.702]                       if (inherits(cond, "message")) {
[09:31:27.702]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:27.702]                         if (muffled) 
[09:31:27.702]                           invokeRestart("muffleMessage")
[09:31:27.702]                       }
[09:31:27.702]                       else if (inherits(cond, "warning")) {
[09:31:27.702]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:27.702]                         if (muffled) 
[09:31:27.702]                           invokeRestart("muffleWarning")
[09:31:27.702]                       }
[09:31:27.702]                       else if (inherits(cond, "condition")) {
[09:31:27.702]                         if (!is.null(pattern)) {
[09:31:27.702]                           computeRestarts <- base::computeRestarts
[09:31:27.702]                           grepl <- base::grepl
[09:31:27.702]                           restarts <- computeRestarts(cond)
[09:31:27.702]                           for (restart in restarts) {
[09:31:27.702]                             name <- restart$name
[09:31:27.702]                             if (is.null(name)) 
[09:31:27.702]                               next
[09:31:27.702]                             if (!grepl(pattern, name)) 
[09:31:27.702]                               next
[09:31:27.702]                             invokeRestart(restart)
[09:31:27.702]                             muffled <- TRUE
[09:31:27.702]                             break
[09:31:27.702]                           }
[09:31:27.702]                         }
[09:31:27.702]                       }
[09:31:27.702]                       invisible(muffled)
[09:31:27.702]                     }
[09:31:27.702]                     muffleCondition(cond, pattern = "^muffle")
[09:31:27.702]                   }
[09:31:27.702]                 }
[09:31:27.702]                 else {
[09:31:27.702]                   if (TRUE) {
[09:31:27.702]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:27.702]                     {
[09:31:27.702]                       inherits <- base::inherits
[09:31:27.702]                       invokeRestart <- base::invokeRestart
[09:31:27.702]                       is.null <- base::is.null
[09:31:27.702]                       muffled <- FALSE
[09:31:27.702]                       if (inherits(cond, "message")) {
[09:31:27.702]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:27.702]                         if (muffled) 
[09:31:27.702]                           invokeRestart("muffleMessage")
[09:31:27.702]                       }
[09:31:27.702]                       else if (inherits(cond, "warning")) {
[09:31:27.702]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:27.702]                         if (muffled) 
[09:31:27.702]                           invokeRestart("muffleWarning")
[09:31:27.702]                       }
[09:31:27.702]                       else if (inherits(cond, "condition")) {
[09:31:27.702]                         if (!is.null(pattern)) {
[09:31:27.702]                           computeRestarts <- base::computeRestarts
[09:31:27.702]                           grepl <- base::grepl
[09:31:27.702]                           restarts <- computeRestarts(cond)
[09:31:27.702]                           for (restart in restarts) {
[09:31:27.702]                             name <- restart$name
[09:31:27.702]                             if (is.null(name)) 
[09:31:27.702]                               next
[09:31:27.702]                             if (!grepl(pattern, name)) 
[09:31:27.702]                               next
[09:31:27.702]                             invokeRestart(restart)
[09:31:27.702]                             muffled <- TRUE
[09:31:27.702]                             break
[09:31:27.702]                           }
[09:31:27.702]                         }
[09:31:27.702]                       }
[09:31:27.702]                       invisible(muffled)
[09:31:27.702]                     }
[09:31:27.702]                     muffleCondition(cond, pattern = "^muffle")
[09:31:27.702]                   }
[09:31:27.702]                 }
[09:31:27.702]             }
[09:31:27.702]         }))
[09:31:27.702]     }, error = function(ex) {
[09:31:27.702]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:27.702]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:27.702]                 ...future.rng), started = ...future.startTime, 
[09:31:27.702]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:27.702]             version = "1.8"), class = "FutureResult")
[09:31:27.702]     }, finally = {
[09:31:27.702]         if (!identical(...future.workdir, getwd())) 
[09:31:27.702]             setwd(...future.workdir)
[09:31:27.702]         {
[09:31:27.702]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:27.702]                 ...future.oldOptions$nwarnings <- NULL
[09:31:27.702]             }
[09:31:27.702]             base::options(...future.oldOptions)
[09:31:27.702]             if (.Platform$OS.type == "windows") {
[09:31:27.702]                 old_names <- names(...future.oldEnvVars)
[09:31:27.702]                 envs <- base::Sys.getenv()
[09:31:27.702]                 names <- names(envs)
[09:31:27.702]                 common <- intersect(names, old_names)
[09:31:27.702]                 added <- setdiff(names, old_names)
[09:31:27.702]                 removed <- setdiff(old_names, names)
[09:31:27.702]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:27.702]                   envs[common]]
[09:31:27.702]                 NAMES <- toupper(changed)
[09:31:27.702]                 args <- list()
[09:31:27.702]                 for (kk in seq_along(NAMES)) {
[09:31:27.702]                   name <- changed[[kk]]
[09:31:27.702]                   NAME <- NAMES[[kk]]
[09:31:27.702]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:27.702]                     next
[09:31:27.702]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:27.702]                 }
[09:31:27.702]                 NAMES <- toupper(added)
[09:31:27.702]                 for (kk in seq_along(NAMES)) {
[09:31:27.702]                   name <- added[[kk]]
[09:31:27.702]                   NAME <- NAMES[[kk]]
[09:31:27.702]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:27.702]                     next
[09:31:27.702]                   args[[name]] <- ""
[09:31:27.702]                 }
[09:31:27.702]                 NAMES <- toupper(removed)
[09:31:27.702]                 for (kk in seq_along(NAMES)) {
[09:31:27.702]                   name <- removed[[kk]]
[09:31:27.702]                   NAME <- NAMES[[kk]]
[09:31:27.702]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:27.702]                     next
[09:31:27.702]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:27.702]                 }
[09:31:27.702]                 if (length(args) > 0) 
[09:31:27.702]                   base::do.call(base::Sys.setenv, args = args)
[09:31:27.702]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:27.702]             }
[09:31:27.702]             else {
[09:31:27.702]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:27.702]             }
[09:31:27.702]             {
[09:31:27.702]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:27.702]                   0L) {
[09:31:27.702]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:27.702]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:27.702]                   base::options(opts)
[09:31:27.702]                 }
[09:31:27.702]                 {
[09:31:27.702]                   {
[09:31:27.702]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:27.702]                     NULL
[09:31:27.702]                   }
[09:31:27.702]                   options(future.plan = NULL)
[09:31:27.702]                   if (is.na(NA_character_)) 
[09:31:27.702]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:27.702]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:27.702]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:27.702]                     .init = FALSE)
[09:31:27.702]                 }
[09:31:27.702]             }
[09:31:27.702]         }
[09:31:27.702]     })
[09:31:27.702]     if (TRUE) {
[09:31:27.702]         base::sink(type = "output", split = FALSE)
[09:31:27.702]         if (TRUE) {
[09:31:27.702]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:27.702]         }
[09:31:27.702]         else {
[09:31:27.702]             ...future.result["stdout"] <- base::list(NULL)
[09:31:27.702]         }
[09:31:27.702]         base::close(...future.stdout)
[09:31:27.702]         ...future.stdout <- NULL
[09:31:27.702]     }
[09:31:27.702]     ...future.result$conditions <- ...future.conditions
[09:31:27.702]     ...future.result$finished <- base::Sys.time()
[09:31:27.702]     ...future.result
[09:31:27.702] }
[09:31:27.704] assign_globals() ...
[09:31:27.704] List of 1
[09:31:27.704]  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[09:31:27.704]   .. ..@ .Data     :function (x)  
[09:31:27.704]   .. ..@ generic   : chr "my_fcn"
[09:31:27.704]   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[09:31:27.704]   .. ..@ package   : chr ".GlobalEnv"
[09:31:27.704]   .. ..@ group     : list()
[09:31:27.704]   .. ..@ valueClass: chr(0) 
[09:31:27.704]   .. ..@ signature : chr "x"
[09:31:27.704]   .. ..@ default   : NULL
[09:31:27.704]   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[09:31:27.704]  - attr(*, "where")=List of 1
[09:31:27.704]   ..$ my_fcn:<environment: R_EmptyEnv> 
[09:31:27.704]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:31:27.704]  - attr(*, "resolved")= logi FALSE
[09:31:27.704]  - attr(*, "total_size")= num 3936
[09:31:27.704]  - attr(*, "already-done")= logi TRUE
[09:31:27.709] - reassign environment for ‘my_fcn’
[09:31:27.709] - copied ‘my_fcn’ to environment
[09:31:27.709] assign_globals() ... done
[09:31:27.709] requestCore(): workers = 2
[09:31:27.712] MulticoreFuture started
[09:31:27.712] - Launch lazy future ... done
[09:31:27.712] plan(): Setting new future strategy stack:
[09:31:27.712] run() for ‘MulticoreFuture’ ... done
[09:31:27.712] List of future strategies:
[09:31:27.712] 1. sequential:
[09:31:27.712]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:27.712]    - tweaked: FALSE
[09:31:27.712]    - call: NULL
[09:31:27.713] result() for MulticoreFuture ...
[09:31:27.714] plan(): nbrOfWorkers() = 1
[09:31:27.715] plan(): Setting new future strategy stack:
[09:31:27.716] List of future strategies:
[09:31:27.716] 1. multicore:
[09:31:27.716]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:27.716]    - tweaked: FALSE
[09:31:27.716]    - call: plan(strategy)
[09:31:27.720] plan(): nbrOfWorkers() = 2
[09:31:27.726] result() for MulticoreFuture ...
[09:31:27.726] result() for MulticoreFuture ... done
[09:31:27.726] result() for MulticoreFuture ... done
[09:31:27.726] result() for MulticoreFuture ...
[09:31:27.726] result() for MulticoreFuture ... done
new("standardGeneric", .Data = function (x) 
standardGeneric("my_fcn"), generic = "my_fcn", package = ".GlobalEnv", 
    group = list(), valueClass = character(0), signature = "x", 
    default = NULL, skeleton = (function (x) 
    stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
        "my_fcn"), domain = NA))(x))
<environment: 0x55b64d51e4d0>
attr(,"generic")
[1] "my_fcn"
attr(,"generic")attr(,"package")
[1] ".GlobalEnv"
attr(,"package")
[1] ".GlobalEnv"
attr(,"group")
list()
attr(,"valueClass")
character(0)
attr(,"signature")
[1] "x"
attr(,"default")
`\001NULL\001`
attr(,"skeleton")
(function (x) 
stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
    "my_fcn"), domain = NA))(x)
attr(,"class")
[1] "standardGeneric"
attr(,"class")attr(,"package")
[1] "methods"
[09:31:27.727] getGlobalsAndPackages() ...
[09:31:27.727] Searching for globals...
[09:31:27.730] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[09:31:27.730] Searching for globals ... DONE
[09:31:27.730] Resolving globals: FALSE
[09:31:27.731] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[09:31:27.731] The total size of the 1 globals exported for future expression (‘{; my_fcn(3); }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[09:31:27.731] - globals: [1] ‘my_fcn’
[09:31:27.731] 
[09:31:27.732] getGlobalsAndPackages() ... DONE
[09:31:27.732] run() for ‘Future’ ...
[09:31:27.732] - state: ‘created’
[09:31:27.732] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[09:31:27.736] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:27.736] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[09:31:27.736]   - Field: ‘label’
[09:31:27.738]   - Field: ‘local’
[09:31:27.739]   - Field: ‘owner’
[09:31:27.739]   - Field: ‘envir’
[09:31:27.739]   - Field: ‘workers’
[09:31:27.739]   - Field: ‘packages’
[09:31:27.739]   - Field: ‘gc’
[09:31:27.739]   - Field: ‘job’
[09:31:27.739]   - Field: ‘conditions’
[09:31:27.739]   - Field: ‘expr’
[09:31:27.740]   - Field: ‘uuid’
[09:31:27.740]   - Field: ‘seed’
[09:31:27.740]   - Field: ‘version’
[09:31:27.740]   - Field: ‘result’
[09:31:27.740]   - Field: ‘asynchronous’
[09:31:27.740]   - Field: ‘calls’
[09:31:27.740]   - Field: ‘globals’
[09:31:27.740]   - Field: ‘stdout’
[09:31:27.741]   - Field: ‘earlySignal’
[09:31:27.741]   - Field: ‘lazy’
[09:31:27.741]   - Field: ‘state’
[09:31:27.741] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[09:31:27.741] - Launch lazy future ...
[09:31:27.741] Packages needed by the future expression (n = 0): <none>
[09:31:27.741] Packages needed by future strategies (n = 0): <none>
[09:31:27.742] {
[09:31:27.742]     {
[09:31:27.742]         {
[09:31:27.742]             ...future.startTime <- base::Sys.time()
[09:31:27.742]             {
[09:31:27.742]                 {
[09:31:27.742]                   {
[09:31:27.742]                     {
[09:31:27.742]                       base::local({
[09:31:27.742]                         has_future <- base::requireNamespace("future", 
[09:31:27.742]                           quietly = TRUE)
[09:31:27.742]                         if (has_future) {
[09:31:27.742]                           ns <- base::getNamespace("future")
[09:31:27.742]                           version <- ns[[".package"]][["version"]]
[09:31:27.742]                           if (is.null(version)) 
[09:31:27.742]                             version <- utils::packageVersion("future")
[09:31:27.742]                         }
[09:31:27.742]                         else {
[09:31:27.742]                           version <- NULL
[09:31:27.742]                         }
[09:31:27.742]                         if (!has_future || version < "1.8.0") {
[09:31:27.742]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:27.742]                             "", base::R.version$version.string), 
[09:31:27.742]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:27.742]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:27.742]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:27.742]                               "release", "version")], collapse = " "), 
[09:31:27.742]                             hostname = base::Sys.info()[["nodename"]])
[09:31:27.742]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:27.742]                             info)
[09:31:27.742]                           info <- base::paste(info, collapse = "; ")
[09:31:27.742]                           if (!has_future) {
[09:31:27.742]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:27.742]                               info)
[09:31:27.742]                           }
[09:31:27.742]                           else {
[09:31:27.742]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:27.742]                               info, version)
[09:31:27.742]                           }
[09:31:27.742]                           base::stop(msg)
[09:31:27.742]                         }
[09:31:27.742]                       })
[09:31:27.742]                     }
[09:31:27.742]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:27.742]                     base::options(mc.cores = 1L)
[09:31:27.742]                   }
[09:31:27.742]                   ...future.strategy.old <- future::plan("list")
[09:31:27.742]                   options(future.plan = NULL)
[09:31:27.742]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:27.742]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:27.742]                 }
[09:31:27.742]                 ...future.workdir <- getwd()
[09:31:27.742]             }
[09:31:27.742]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:27.742]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:27.742]         }
[09:31:27.742]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:27.742]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:27.742]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:27.742]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:27.742]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:27.742]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:27.742]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:27.742]             base::names(...future.oldOptions))
[09:31:27.742]     }
[09:31:27.742]     if (FALSE) {
[09:31:27.742]     }
[09:31:27.742]     else {
[09:31:27.742]         if (TRUE) {
[09:31:27.742]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:27.742]                 open = "w")
[09:31:27.742]         }
[09:31:27.742]         else {
[09:31:27.742]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:27.742]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:27.742]         }
[09:31:27.742]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:27.742]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:27.742]             base::sink(type = "output", split = FALSE)
[09:31:27.742]             base::close(...future.stdout)
[09:31:27.742]         }, add = TRUE)
[09:31:27.742]     }
[09:31:27.742]     ...future.frame <- base::sys.nframe()
[09:31:27.742]     ...future.conditions <- base::list()
[09:31:27.742]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:27.742]     if (FALSE) {
[09:31:27.742]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:27.742]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:27.742]     }
[09:31:27.742]     ...future.result <- base::tryCatch({
[09:31:27.742]         base::withCallingHandlers({
[09:31:27.742]             ...future.value <- base::withVisible(base::local({
[09:31:27.742]                 withCallingHandlers({
[09:31:27.742]                   {
[09:31:27.742]                     my_fcn(3)
[09:31:27.742]                   }
[09:31:27.742]                 }, immediateCondition = function(cond) {
[09:31:27.742]                   save_rds <- function (object, pathname, ...) 
[09:31:27.742]                   {
[09:31:27.742]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:31:27.742]                     if (file_test("-f", pathname_tmp)) {
[09:31:27.742]                       fi_tmp <- file.info(pathname_tmp)
[09:31:27.742]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:31:27.742]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:27.742]                         fi_tmp[["mtime"]])
[09:31:27.742]                     }
[09:31:27.742]                     tryCatch({
[09:31:27.742]                       saveRDS(object, file = pathname_tmp, ...)
[09:31:27.742]                     }, error = function(ex) {
[09:31:27.742]                       msg <- conditionMessage(ex)
[09:31:27.742]                       fi_tmp <- file.info(pathname_tmp)
[09:31:27.742]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:31:27.742]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:27.742]                         fi_tmp[["mtime"]], msg)
[09:31:27.742]                       ex$message <- msg
[09:31:27.742]                       stop(ex)
[09:31:27.742]                     })
[09:31:27.742]                     stopifnot(file_test("-f", pathname_tmp))
[09:31:27.742]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:31:27.742]                     if (!res || file_test("-f", pathname_tmp)) {
[09:31:27.742]                       fi_tmp <- file.info(pathname_tmp)
[09:31:27.742]                       fi <- file.info(pathname)
[09:31:27.742]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:31:27.742]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:27.742]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:31:27.742]                         fi[["size"]], fi[["mtime"]])
[09:31:27.742]                       stop(msg)
[09:31:27.742]                     }
[09:31:27.742]                     invisible(pathname)
[09:31:27.742]                   }
[09:31:27.742]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:31:27.742]                     rootPath = tempdir()) 
[09:31:27.742]                   {
[09:31:27.742]                     obj <- list(time = Sys.time(), condition = cond)
[09:31:27.742]                     file <- tempfile(pattern = class(cond)[1], 
[09:31:27.742]                       tmpdir = path, fileext = ".rds")
[09:31:27.742]                     save_rds(obj, file)
[09:31:27.742]                   }
[09:31:27.742]                   saveImmediateCondition(cond, path = "/tmp/RtmpnJ6dh8/.future/immediateConditions")
[09:31:27.742]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:27.742]                   {
[09:31:27.742]                     inherits <- base::inherits
[09:31:27.742]                     invokeRestart <- base::invokeRestart
[09:31:27.742]                     is.null <- base::is.null
[09:31:27.742]                     muffled <- FALSE
[09:31:27.742]                     if (inherits(cond, "message")) {
[09:31:27.742]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:27.742]                       if (muffled) 
[09:31:27.742]                         invokeRestart("muffleMessage")
[09:31:27.742]                     }
[09:31:27.742]                     else if (inherits(cond, "warning")) {
[09:31:27.742]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:27.742]                       if (muffled) 
[09:31:27.742]                         invokeRestart("muffleWarning")
[09:31:27.742]                     }
[09:31:27.742]                     else if (inherits(cond, "condition")) {
[09:31:27.742]                       if (!is.null(pattern)) {
[09:31:27.742]                         computeRestarts <- base::computeRestarts
[09:31:27.742]                         grepl <- base::grepl
[09:31:27.742]                         restarts <- computeRestarts(cond)
[09:31:27.742]                         for (restart in restarts) {
[09:31:27.742]                           name <- restart$name
[09:31:27.742]                           if (is.null(name)) 
[09:31:27.742]                             next
[09:31:27.742]                           if (!grepl(pattern, name)) 
[09:31:27.742]                             next
[09:31:27.742]                           invokeRestart(restart)
[09:31:27.742]                           muffled <- TRUE
[09:31:27.742]                           break
[09:31:27.742]                         }
[09:31:27.742]                       }
[09:31:27.742]                     }
[09:31:27.742]                     invisible(muffled)
[09:31:27.742]                   }
[09:31:27.742]                   muffleCondition(cond)
[09:31:27.742]                 })
[09:31:27.742]             }))
[09:31:27.742]             future::FutureResult(value = ...future.value$value, 
[09:31:27.742]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:27.742]                   ...future.rng), globalenv = if (FALSE) 
[09:31:27.742]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:27.742]                     ...future.globalenv.names))
[09:31:27.742]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:27.742]         }, condition = base::local({
[09:31:27.742]             c <- base::c
[09:31:27.742]             inherits <- base::inherits
[09:31:27.742]             invokeRestart <- base::invokeRestart
[09:31:27.742]             length <- base::length
[09:31:27.742]             list <- base::list
[09:31:27.742]             seq.int <- base::seq.int
[09:31:27.742]             signalCondition <- base::signalCondition
[09:31:27.742]             sys.calls <- base::sys.calls
[09:31:27.742]             `[[` <- base::`[[`
[09:31:27.742]             `+` <- base::`+`
[09:31:27.742]             `<<-` <- base::`<<-`
[09:31:27.742]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:27.742]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:27.742]                   3L)]
[09:31:27.742]             }
[09:31:27.742]             function(cond) {
[09:31:27.742]                 is_error <- inherits(cond, "error")
[09:31:27.742]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:27.742]                   NULL)
[09:31:27.742]                 if (is_error) {
[09:31:27.742]                   sessionInformation <- function() {
[09:31:27.742]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:27.742]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:27.742]                       search = base::search(), system = base::Sys.info())
[09:31:27.742]                   }
[09:31:27.742]                   ...future.conditions[[length(...future.conditions) + 
[09:31:27.742]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:27.742]                     cond$call), session = sessionInformation(), 
[09:31:27.742]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:27.742]                   signalCondition(cond)
[09:31:27.742]                 }
[09:31:27.742]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:27.742]                 "immediateCondition"))) {
[09:31:27.742]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:27.742]                   ...future.conditions[[length(...future.conditions) + 
[09:31:27.742]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:27.742]                   if (TRUE && !signal) {
[09:31:27.742]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:27.742]                     {
[09:31:27.742]                       inherits <- base::inherits
[09:31:27.742]                       invokeRestart <- base::invokeRestart
[09:31:27.742]                       is.null <- base::is.null
[09:31:27.742]                       muffled <- FALSE
[09:31:27.742]                       if (inherits(cond, "message")) {
[09:31:27.742]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:27.742]                         if (muffled) 
[09:31:27.742]                           invokeRestart("muffleMessage")
[09:31:27.742]                       }
[09:31:27.742]                       else if (inherits(cond, "warning")) {
[09:31:27.742]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:27.742]                         if (muffled) 
[09:31:27.742]                           invokeRestart("muffleWarning")
[09:31:27.742]                       }
[09:31:27.742]                       else if (inherits(cond, "condition")) {
[09:31:27.742]                         if (!is.null(pattern)) {
[09:31:27.742]                           computeRestarts <- base::computeRestarts
[09:31:27.742]                           grepl <- base::grepl
[09:31:27.742]                           restarts <- computeRestarts(cond)
[09:31:27.742]                           for (restart in restarts) {
[09:31:27.742]                             name <- restart$name
[09:31:27.742]                             if (is.null(name)) 
[09:31:27.742]                               next
[09:31:27.742]                             if (!grepl(pattern, name)) 
[09:31:27.742]                               next
[09:31:27.742]                             invokeRestart(restart)
[09:31:27.742]                             muffled <- TRUE
[09:31:27.742]                             break
[09:31:27.742]                           }
[09:31:27.742]                         }
[09:31:27.742]                       }
[09:31:27.742]                       invisible(muffled)
[09:31:27.742]                     }
[09:31:27.742]                     muffleCondition(cond, pattern = "^muffle")
[09:31:27.742]                   }
[09:31:27.742]                 }
[09:31:27.742]                 else {
[09:31:27.742]                   if (TRUE) {
[09:31:27.742]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:27.742]                     {
[09:31:27.742]                       inherits <- base::inherits
[09:31:27.742]                       invokeRestart <- base::invokeRestart
[09:31:27.742]                       is.null <- base::is.null
[09:31:27.742]                       muffled <- FALSE
[09:31:27.742]                       if (inherits(cond, "message")) {
[09:31:27.742]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:27.742]                         if (muffled) 
[09:31:27.742]                           invokeRestart("muffleMessage")
[09:31:27.742]                       }
[09:31:27.742]                       else if (inherits(cond, "warning")) {
[09:31:27.742]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:27.742]                         if (muffled) 
[09:31:27.742]                           invokeRestart("muffleWarning")
[09:31:27.742]                       }
[09:31:27.742]                       else if (inherits(cond, "condition")) {
[09:31:27.742]                         if (!is.null(pattern)) {
[09:31:27.742]                           computeRestarts <- base::computeRestarts
[09:31:27.742]                           grepl <- base::grepl
[09:31:27.742]                           restarts <- computeRestarts(cond)
[09:31:27.742]                           for (restart in restarts) {
[09:31:27.742]                             name <- restart$name
[09:31:27.742]                             if (is.null(name)) 
[09:31:27.742]                               next
[09:31:27.742]                             if (!grepl(pattern, name)) 
[09:31:27.742]                               next
[09:31:27.742]                             invokeRestart(restart)
[09:31:27.742]                             muffled <- TRUE
[09:31:27.742]                             break
[09:31:27.742]                           }
[09:31:27.742]                         }
[09:31:27.742]                       }
[09:31:27.742]                       invisible(muffled)
[09:31:27.742]                     }
[09:31:27.742]                     muffleCondition(cond, pattern = "^muffle")
[09:31:27.742]                   }
[09:31:27.742]                 }
[09:31:27.742]             }
[09:31:27.742]         }))
[09:31:27.742]     }, error = function(ex) {
[09:31:27.742]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:27.742]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:27.742]                 ...future.rng), started = ...future.startTime, 
[09:31:27.742]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:27.742]             version = "1.8"), class = "FutureResult")
[09:31:27.742]     }, finally = {
[09:31:27.742]         if (!identical(...future.workdir, getwd())) 
[09:31:27.742]             setwd(...future.workdir)
[09:31:27.742]         {
[09:31:27.742]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:27.742]                 ...future.oldOptions$nwarnings <- NULL
[09:31:27.742]             }
[09:31:27.742]             base::options(...future.oldOptions)
[09:31:27.742]             if (.Platform$OS.type == "windows") {
[09:31:27.742]                 old_names <- names(...future.oldEnvVars)
[09:31:27.742]                 envs <- base::Sys.getenv()
[09:31:27.742]                 names <- names(envs)
[09:31:27.742]                 common <- intersect(names, old_names)
[09:31:27.742]                 added <- setdiff(names, old_names)
[09:31:27.742]                 removed <- setdiff(old_names, names)
[09:31:27.742]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:27.742]                   envs[common]]
[09:31:27.742]                 NAMES <- toupper(changed)
[09:31:27.742]                 args <- list()
[09:31:27.742]                 for (kk in seq_along(NAMES)) {
[09:31:27.742]                   name <- changed[[kk]]
[09:31:27.742]                   NAME <- NAMES[[kk]]
[09:31:27.742]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:27.742]                     next
[09:31:27.742]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:27.742]                 }
[09:31:27.742]                 NAMES <- toupper(added)
[09:31:27.742]                 for (kk in seq_along(NAMES)) {
[09:31:27.742]                   name <- added[[kk]]
[09:31:27.742]                   NAME <- NAMES[[kk]]
[09:31:27.742]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:27.742]                     next
[09:31:27.742]                   args[[name]] <- ""
[09:31:27.742]                 }
[09:31:27.742]                 NAMES <- toupper(removed)
[09:31:27.742]                 for (kk in seq_along(NAMES)) {
[09:31:27.742]                   name <- removed[[kk]]
[09:31:27.742]                   NAME <- NAMES[[kk]]
[09:31:27.742]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:27.742]                     next
[09:31:27.742]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:27.742]                 }
[09:31:27.742]                 if (length(args) > 0) 
[09:31:27.742]                   base::do.call(base::Sys.setenv, args = args)
[09:31:27.742]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:27.742]             }
[09:31:27.742]             else {
[09:31:27.742]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:27.742]             }
[09:31:27.742]             {
[09:31:27.742]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:27.742]                   0L) {
[09:31:27.742]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:27.742]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:27.742]                   base::options(opts)
[09:31:27.742]                 }
[09:31:27.742]                 {
[09:31:27.742]                   {
[09:31:27.742]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:27.742]                     NULL
[09:31:27.742]                   }
[09:31:27.742]                   options(future.plan = NULL)
[09:31:27.742]                   if (is.na(NA_character_)) 
[09:31:27.742]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:27.742]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:27.742]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:27.742]                     .init = FALSE)
[09:31:27.742]                 }
[09:31:27.742]             }
[09:31:27.742]         }
[09:31:27.742]     })
[09:31:27.742]     if (TRUE) {
[09:31:27.742]         base::sink(type = "output", split = FALSE)
[09:31:27.742]         if (TRUE) {
[09:31:27.742]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:27.742]         }
[09:31:27.742]         else {
[09:31:27.742]             ...future.result["stdout"] <- base::list(NULL)
[09:31:27.742]         }
[09:31:27.742]         base::close(...future.stdout)
[09:31:27.742]         ...future.stdout <- NULL
[09:31:27.742]     }
[09:31:27.742]     ...future.result$conditions <- ...future.conditions
[09:31:27.742]     ...future.result$finished <- base::Sys.time()
[09:31:27.742]     ...future.result
[09:31:27.742] }
[09:31:27.744] assign_globals() ...
[09:31:27.744] List of 1
[09:31:27.744]  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[09:31:27.744]   .. ..@ .Data     :function (x)  
[09:31:27.744]   .. ..@ generic   : chr "my_fcn"
[09:31:27.744]   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[09:31:27.744]   .. ..@ package   : chr ".GlobalEnv"
[09:31:27.744]   .. ..@ group     : list()
[09:31:27.744]   .. ..@ valueClass: chr(0) 
[09:31:27.744]   .. ..@ signature : chr "x"
[09:31:27.744]   .. ..@ default   : NULL
[09:31:27.744]   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[09:31:27.744]  - attr(*, "where")=List of 1
[09:31:27.744]   ..$ my_fcn:<environment: R_EmptyEnv> 
[09:31:27.744]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:31:27.744]  - attr(*, "resolved")= logi FALSE
[09:31:27.744]  - attr(*, "total_size")= num 3936
[09:31:27.744]  - attr(*, "already-done")= logi TRUE
[09:31:27.750] - reassign environment for ‘my_fcn’
[09:31:27.750] - copied ‘my_fcn’ to environment
[09:31:27.750] assign_globals() ... done
[09:31:27.750] requestCore(): workers = 2
[09:31:27.752] MulticoreFuture started
[09:31:27.752] - Launch lazy future ... done
[09:31:27.753] run() for ‘MulticoreFuture’ ... done
[09:31:27.753] result() for MulticoreFuture ...
[09:31:27.753] plan(): Setting new future strategy stack:
[09:31:27.753] List of future strategies:
[09:31:27.753] 1. sequential:
[09:31:27.753]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:27.753]    - tweaked: FALSE
[09:31:27.753]    - call: NULL
[09:31:27.754] plan(): nbrOfWorkers() = 1
[09:31:27.757] plan(): Setting new future strategy stack:
[09:31:27.757] List of future strategies:
[09:31:27.757] 1. multicore:
[09:31:27.757]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:27.757]    - tweaked: FALSE
[09:31:27.757]    - call: plan(strategy)
[09:31:27.762] plan(): nbrOfWorkers() = 2
[09:31:27.775] result() for MulticoreFuture ...
[09:31:27.775] result() for MulticoreFuture ... done
[09:31:27.775] signalConditions() ...
[09:31:27.775]  - include = ‘immediateCondition’
[09:31:27.775]  - exclude = 
[09:31:27.775]  - resignal = FALSE
[09:31:27.775]  - Number of conditions: 1
[09:31:27.776] signalConditions() ... done
[09:31:27.776] result() for MulticoreFuture ... done
[09:31:27.776] result() for MulticoreFuture ...
[09:31:27.776] result() for MulticoreFuture ... done
[09:31:27.776] signalConditions() ...
[09:31:27.776]  - include = ‘immediateCondition’
[09:31:27.776]  - exclude = 
[09:31:27.776]  - resignal = FALSE
[09:31:27.777]  - Number of conditions: 1
[09:31:27.777] signalConditions() ... done
[09:31:27.777] Future state: ‘finished’
[09:31:27.777] result() for MulticoreFuture ...
[09:31:27.777] result() for MulticoreFuture ... done
[09:31:27.777] signalConditions() ...
[09:31:27.777]  - include = ‘condition’
[09:31:27.777]  - exclude = ‘immediateCondition’
[09:31:27.777]  - resignal = TRUE
[09:31:27.778]  - Number of conditions: 1
[09:31:27.778]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[09:31:27.778] signalConditions() ... done
<simpleError: unable to find an inherited method for function ‘my_fcn’ for signature ‘x = "numeric"’>
Type of future: multisession
[09:31:27.778] plan(): Setting new future strategy stack:
[09:31:27.778] List of future strategies:
[09:31:27.778] 1. multisession:
[09:31:27.778]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[09:31:27.778]    - tweaked: FALSE
[09:31:27.778]    - call: plan(strategy)
[09:31:27.779] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[09:31:27.779] multisession:
[09:31:27.779] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[09:31:27.779] - tweaked: FALSE
[09:31:27.779] - call: plan(strategy)
[09:31:27.785] getGlobalsAndPackages() ...
[09:31:27.785] Not searching for globals
[09:31:27.785] - globals: [0] <none>
[09:31:27.786] getGlobalsAndPackages() ... DONE
[09:31:27.786] [local output] makeClusterPSOCK() ...
[09:31:27.836] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[09:31:27.837] [local output] Base port: 11641
[09:31:27.837] [local output] Getting setup options for 2 cluster nodes ...
[09:31:27.837] [local output]  - Node 1 of 2 ...
[09:31:27.838] [local output] localMachine=TRUE => revtunnel=FALSE

[09:31:27.839] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpnJ6dh8/worker.rank=1.parallelly.parent=44007.abe71f3527b8.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpnJ6dh8/worker.rank=1.parallelly.parent=44007.abe71f3527b8.pid")'’
[09:31:28.025] - Possible to infer worker's PID: TRUE
[09:31:28.025] [local output] Rscript port: 11641

[09:31:28.025] [local output]  - Node 2 of 2 ...
[09:31:28.026] [local output] localMachine=TRUE => revtunnel=FALSE

[09:31:28.026] [local output] Rscript port: 11641

[09:31:28.027] [local output] Getting setup options for 2 cluster nodes ... done
[09:31:28.027] [local output]  - Parallel setup requested for some PSOCK nodes
[09:31:28.027] [local output] Setting up PSOCK nodes in parallel
[09:31:28.027] List of 36
[09:31:28.027]  $ worker          : chr "localhost"
[09:31:28.027]   ..- attr(*, "localhost")= logi TRUE
[09:31:28.027]  $ master          : chr "localhost"
[09:31:28.027]  $ port            : int 11641
[09:31:28.027]  $ connectTimeout  : num 120
[09:31:28.027]  $ timeout         : num 2592000
[09:31:28.027]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[09:31:28.027]  $ homogeneous     : logi TRUE
[09:31:28.027]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[09:31:28.027]  $ rscript_envs    : NULL
[09:31:28.027]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[09:31:28.027]  $ rscript_startup : NULL
[09:31:28.027]  $ rscript_sh      : chr "sh"
[09:31:28.027]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[09:31:28.027]  $ methods         : logi TRUE
[09:31:28.027]  $ socketOptions   : chr "no-delay"
[09:31:28.027]  $ useXDR          : logi FALSE
[09:31:28.027]  $ outfile         : chr "/dev/null"
[09:31:28.027]  $ renice          : int NA
[09:31:28.027]  $ rshcmd          : NULL
[09:31:28.027]  $ user            : chr(0) 
[09:31:28.027]  $ revtunnel       : logi FALSE
[09:31:28.027]  $ rshlogfile      : NULL
[09:31:28.027]  $ rshopts         : chr(0) 
[09:31:28.027]  $ rank            : int 1
[09:31:28.027]  $ manual          : logi FALSE
[09:31:28.027]  $ dryrun          : logi FALSE
[09:31:28.027]  $ quiet           : logi FALSE
[09:31:28.027]  $ setup_strategy  : chr "parallel"
[09:31:28.027]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[09:31:28.027]  $ pidfile         : chr "/tmp/RtmpnJ6dh8/worker.rank=1.parallelly.parent=44007.abe71f3527b8.pid"
[09:31:28.027]  $ rshcmd_label    : NULL
[09:31:28.027]  $ rsh_call        : NULL
[09:31:28.027]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[09:31:28.027]  $ localMachine    : logi TRUE
[09:31:28.027]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[09:31:28.027]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[09:31:28.027]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[09:31:28.027]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[09:31:28.027]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[09:31:28.027]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[09:31:28.027]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[09:31:28.027]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[09:31:28.027]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[09:31:28.027]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[09:31:28.027]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[09:31:28.027]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[09:31:28.027]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[09:31:28.027]  $ arguments       :List of 28
[09:31:28.027]   ..$ worker          : chr "localhost"
[09:31:28.027]   ..$ master          : NULL
[09:31:28.027]   ..$ port            : int 11641
[09:31:28.027]   ..$ connectTimeout  : num 120
[09:31:28.027]   ..$ timeout         : num 2592000
[09:31:28.027]   ..$ rscript         : NULL
[09:31:28.027]   ..$ homogeneous     : NULL
[09:31:28.027]   ..$ rscript_args    : NULL
[09:31:28.027]   ..$ rscript_envs    : NULL
[09:31:28.027]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[09:31:28.027]   ..$ rscript_startup : NULL
[09:31:28.027]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[09:31:28.027]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[09:31:28.027]   ..$ methods         : logi TRUE
[09:31:28.027]   ..$ socketOptions   : chr "no-delay"
[09:31:28.027]   ..$ useXDR          : logi FALSE
[09:31:28.027]   ..$ outfile         : chr "/dev/null"
[09:31:28.027]   ..$ renice          : int NA
[09:31:28.027]   ..$ rshcmd          : NULL
[09:31:28.027]   ..$ user            : NULL
[09:31:28.027]   ..$ revtunnel       : logi NA
[09:31:28.027]   ..$ rshlogfile      : NULL
[09:31:28.027]   ..$ rshopts         : NULL
[09:31:28.027]   ..$ rank            : int 1
[09:31:28.027]   ..$ manual          : logi FALSE
[09:31:28.027]   ..$ dryrun          : logi FALSE
[09:31:28.027]   ..$ quiet           : logi FALSE
[09:31:28.027]   ..$ setup_strategy  : chr "parallel"
[09:31:28.027]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[09:31:28.044] [local output] System call to launch all workers:
[09:31:28.044] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpnJ6dh8/worker.rank=1.parallelly.parent=44007.abe71f3527b8.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11641 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[09:31:28.044] [local output] Starting PSOCK main server
[09:31:28.049] [local output] Workers launched
[09:31:28.049] [local output] Waiting for workers to connect back
[09:31:28.050]  - [local output] 0 workers out of 2 ready
[09:31:28.294]  - [local output] 0 workers out of 2 ready
[09:31:28.294]  - [local output] 1 workers out of 2 ready
[09:31:28.304]  - [local output] 1 workers out of 2 ready
[09:31:28.305]  - [local output] 2 workers out of 2 ready
[09:31:28.305] [local output] Launching of workers completed
[09:31:28.305] [local output] Collecting session information from workers
[09:31:28.306] [local output]  - Worker #1 of 2
[09:31:28.306] [local output]  - Worker #2 of 2
[09:31:28.306] [local output] makeClusterPSOCK() ... done
[09:31:28.318] Packages needed by the future expression (n = 0): <none>
[09:31:28.318] Packages needed by future strategies (n = 0): <none>
[09:31:28.318] {
[09:31:28.318]     {
[09:31:28.318]         {
[09:31:28.318]             ...future.startTime <- base::Sys.time()
[09:31:28.318]             {
[09:31:28.318]                 {
[09:31:28.318]                   {
[09:31:28.318]                     {
[09:31:28.318]                       base::local({
[09:31:28.318]                         has_future <- base::requireNamespace("future", 
[09:31:28.318]                           quietly = TRUE)
[09:31:28.318]                         if (has_future) {
[09:31:28.318]                           ns <- base::getNamespace("future")
[09:31:28.318]                           version <- ns[[".package"]][["version"]]
[09:31:28.318]                           if (is.null(version)) 
[09:31:28.318]                             version <- utils::packageVersion("future")
[09:31:28.318]                         }
[09:31:28.318]                         else {
[09:31:28.318]                           version <- NULL
[09:31:28.318]                         }
[09:31:28.318]                         if (!has_future || version < "1.8.0") {
[09:31:28.318]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:28.318]                             "", base::R.version$version.string), 
[09:31:28.318]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:28.318]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:28.318]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:28.318]                               "release", "version")], collapse = " "), 
[09:31:28.318]                             hostname = base::Sys.info()[["nodename"]])
[09:31:28.318]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:28.318]                             info)
[09:31:28.318]                           info <- base::paste(info, collapse = "; ")
[09:31:28.318]                           if (!has_future) {
[09:31:28.318]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:28.318]                               info)
[09:31:28.318]                           }
[09:31:28.318]                           else {
[09:31:28.318]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:28.318]                               info, version)
[09:31:28.318]                           }
[09:31:28.318]                           base::stop(msg)
[09:31:28.318]                         }
[09:31:28.318]                       })
[09:31:28.318]                     }
[09:31:28.318]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:28.318]                     base::options(mc.cores = 1L)
[09:31:28.318]                   }
[09:31:28.318]                   ...future.strategy.old <- future::plan("list")
[09:31:28.318]                   options(future.plan = NULL)
[09:31:28.318]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:28.318]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:28.318]                 }
[09:31:28.318]                 ...future.workdir <- getwd()
[09:31:28.318]             }
[09:31:28.318]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:28.318]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:28.318]         }
[09:31:28.318]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:28.318]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:28.318]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:28.318]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:28.318]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:28.318]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:28.318]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:28.318]             base::names(...future.oldOptions))
[09:31:28.318]     }
[09:31:28.318]     if (FALSE) {
[09:31:28.318]     }
[09:31:28.318]     else {
[09:31:28.318]         if (TRUE) {
[09:31:28.318]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:28.318]                 open = "w")
[09:31:28.318]         }
[09:31:28.318]         else {
[09:31:28.318]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:28.318]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:28.318]         }
[09:31:28.318]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:28.318]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:28.318]             base::sink(type = "output", split = FALSE)
[09:31:28.318]             base::close(...future.stdout)
[09:31:28.318]         }, add = TRUE)
[09:31:28.318]     }
[09:31:28.318]     ...future.frame <- base::sys.nframe()
[09:31:28.318]     ...future.conditions <- base::list()
[09:31:28.318]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:28.318]     if (FALSE) {
[09:31:28.318]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:28.318]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:28.318]     }
[09:31:28.318]     ...future.result <- base::tryCatch({
[09:31:28.318]         base::withCallingHandlers({
[09:31:28.318]             ...future.value <- base::withVisible(base::local({
[09:31:28.318]                 ...future.makeSendCondition <- base::local({
[09:31:28.318]                   sendCondition <- NULL
[09:31:28.318]                   function(frame = 1L) {
[09:31:28.318]                     if (is.function(sendCondition)) 
[09:31:28.318]                       return(sendCondition)
[09:31:28.318]                     ns <- getNamespace("parallel")
[09:31:28.318]                     if (exists("sendData", mode = "function", 
[09:31:28.318]                       envir = ns)) {
[09:31:28.318]                       parallel_sendData <- get("sendData", mode = "function", 
[09:31:28.318]                         envir = ns)
[09:31:28.318]                       envir <- sys.frame(frame)
[09:31:28.318]                       master <- NULL
[09:31:28.318]                       while (!identical(envir, .GlobalEnv) && 
[09:31:28.318]                         !identical(envir, emptyenv())) {
[09:31:28.318]                         if (exists("master", mode = "list", envir = envir, 
[09:31:28.318]                           inherits = FALSE)) {
[09:31:28.318]                           master <- get("master", mode = "list", 
[09:31:28.318]                             envir = envir, inherits = FALSE)
[09:31:28.318]                           if (inherits(master, c("SOCKnode", 
[09:31:28.318]                             "SOCK0node"))) {
[09:31:28.318]                             sendCondition <<- function(cond) {
[09:31:28.318]                               data <- list(type = "VALUE", value = cond, 
[09:31:28.318]                                 success = TRUE)
[09:31:28.318]                               parallel_sendData(master, data)
[09:31:28.318]                             }
[09:31:28.318]                             return(sendCondition)
[09:31:28.318]                           }
[09:31:28.318]                         }
[09:31:28.318]                         frame <- frame + 1L
[09:31:28.318]                         envir <- sys.frame(frame)
[09:31:28.318]                       }
[09:31:28.318]                     }
[09:31:28.318]                     sendCondition <<- function(cond) NULL
[09:31:28.318]                   }
[09:31:28.318]                 })
[09:31:28.318]                 withCallingHandlers({
[09:31:28.318]                   NA
[09:31:28.318]                 }, immediateCondition = function(cond) {
[09:31:28.318]                   sendCondition <- ...future.makeSendCondition()
[09:31:28.318]                   sendCondition(cond)
[09:31:28.318]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:28.318]                   {
[09:31:28.318]                     inherits <- base::inherits
[09:31:28.318]                     invokeRestart <- base::invokeRestart
[09:31:28.318]                     is.null <- base::is.null
[09:31:28.318]                     muffled <- FALSE
[09:31:28.318]                     if (inherits(cond, "message")) {
[09:31:28.318]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:28.318]                       if (muffled) 
[09:31:28.318]                         invokeRestart("muffleMessage")
[09:31:28.318]                     }
[09:31:28.318]                     else if (inherits(cond, "warning")) {
[09:31:28.318]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:28.318]                       if (muffled) 
[09:31:28.318]                         invokeRestart("muffleWarning")
[09:31:28.318]                     }
[09:31:28.318]                     else if (inherits(cond, "condition")) {
[09:31:28.318]                       if (!is.null(pattern)) {
[09:31:28.318]                         computeRestarts <- base::computeRestarts
[09:31:28.318]                         grepl <- base::grepl
[09:31:28.318]                         restarts <- computeRestarts(cond)
[09:31:28.318]                         for (restart in restarts) {
[09:31:28.318]                           name <- restart$name
[09:31:28.318]                           if (is.null(name)) 
[09:31:28.318]                             next
[09:31:28.318]                           if (!grepl(pattern, name)) 
[09:31:28.318]                             next
[09:31:28.318]                           invokeRestart(restart)
[09:31:28.318]                           muffled <- TRUE
[09:31:28.318]                           break
[09:31:28.318]                         }
[09:31:28.318]                       }
[09:31:28.318]                     }
[09:31:28.318]                     invisible(muffled)
[09:31:28.318]                   }
[09:31:28.318]                   muffleCondition(cond)
[09:31:28.318]                 })
[09:31:28.318]             }))
[09:31:28.318]             future::FutureResult(value = ...future.value$value, 
[09:31:28.318]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:28.318]                   ...future.rng), globalenv = if (FALSE) 
[09:31:28.318]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:28.318]                     ...future.globalenv.names))
[09:31:28.318]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:28.318]         }, condition = base::local({
[09:31:28.318]             c <- base::c
[09:31:28.318]             inherits <- base::inherits
[09:31:28.318]             invokeRestart <- base::invokeRestart
[09:31:28.318]             length <- base::length
[09:31:28.318]             list <- base::list
[09:31:28.318]             seq.int <- base::seq.int
[09:31:28.318]             signalCondition <- base::signalCondition
[09:31:28.318]             sys.calls <- base::sys.calls
[09:31:28.318]             `[[` <- base::`[[`
[09:31:28.318]             `+` <- base::`+`
[09:31:28.318]             `<<-` <- base::`<<-`
[09:31:28.318]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:28.318]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:28.318]                   3L)]
[09:31:28.318]             }
[09:31:28.318]             function(cond) {
[09:31:28.318]                 is_error <- inherits(cond, "error")
[09:31:28.318]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:28.318]                   NULL)
[09:31:28.318]                 if (is_error) {
[09:31:28.318]                   sessionInformation <- function() {
[09:31:28.318]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:28.318]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:28.318]                       search = base::search(), system = base::Sys.info())
[09:31:28.318]                   }
[09:31:28.318]                   ...future.conditions[[length(...future.conditions) + 
[09:31:28.318]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:28.318]                     cond$call), session = sessionInformation(), 
[09:31:28.318]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:28.318]                   signalCondition(cond)
[09:31:28.318]                 }
[09:31:28.318]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:28.318]                 "immediateCondition"))) {
[09:31:28.318]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:28.318]                   ...future.conditions[[length(...future.conditions) + 
[09:31:28.318]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:28.318]                   if (TRUE && !signal) {
[09:31:28.318]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:28.318]                     {
[09:31:28.318]                       inherits <- base::inherits
[09:31:28.318]                       invokeRestart <- base::invokeRestart
[09:31:28.318]                       is.null <- base::is.null
[09:31:28.318]                       muffled <- FALSE
[09:31:28.318]                       if (inherits(cond, "message")) {
[09:31:28.318]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:28.318]                         if (muffled) 
[09:31:28.318]                           invokeRestart("muffleMessage")
[09:31:28.318]                       }
[09:31:28.318]                       else if (inherits(cond, "warning")) {
[09:31:28.318]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:28.318]                         if (muffled) 
[09:31:28.318]                           invokeRestart("muffleWarning")
[09:31:28.318]                       }
[09:31:28.318]                       else if (inherits(cond, "condition")) {
[09:31:28.318]                         if (!is.null(pattern)) {
[09:31:28.318]                           computeRestarts <- base::computeRestarts
[09:31:28.318]                           grepl <- base::grepl
[09:31:28.318]                           restarts <- computeRestarts(cond)
[09:31:28.318]                           for (restart in restarts) {
[09:31:28.318]                             name <- restart$name
[09:31:28.318]                             if (is.null(name)) 
[09:31:28.318]                               next
[09:31:28.318]                             if (!grepl(pattern, name)) 
[09:31:28.318]                               next
[09:31:28.318]                             invokeRestart(restart)
[09:31:28.318]                             muffled <- TRUE
[09:31:28.318]                             break
[09:31:28.318]                           }
[09:31:28.318]                         }
[09:31:28.318]                       }
[09:31:28.318]                       invisible(muffled)
[09:31:28.318]                     }
[09:31:28.318]                     muffleCondition(cond, pattern = "^muffle")
[09:31:28.318]                   }
[09:31:28.318]                 }
[09:31:28.318]                 else {
[09:31:28.318]                   if (TRUE) {
[09:31:28.318]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:28.318]                     {
[09:31:28.318]                       inherits <- base::inherits
[09:31:28.318]                       invokeRestart <- base::invokeRestart
[09:31:28.318]                       is.null <- base::is.null
[09:31:28.318]                       muffled <- FALSE
[09:31:28.318]                       if (inherits(cond, "message")) {
[09:31:28.318]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:28.318]                         if (muffled) 
[09:31:28.318]                           invokeRestart("muffleMessage")
[09:31:28.318]                       }
[09:31:28.318]                       else if (inherits(cond, "warning")) {
[09:31:28.318]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:28.318]                         if (muffled) 
[09:31:28.318]                           invokeRestart("muffleWarning")
[09:31:28.318]                       }
[09:31:28.318]                       else if (inherits(cond, "condition")) {
[09:31:28.318]                         if (!is.null(pattern)) {
[09:31:28.318]                           computeRestarts <- base::computeRestarts
[09:31:28.318]                           grepl <- base::grepl
[09:31:28.318]                           restarts <- computeRestarts(cond)
[09:31:28.318]                           for (restart in restarts) {
[09:31:28.318]                             name <- restart$name
[09:31:28.318]                             if (is.null(name)) 
[09:31:28.318]                               next
[09:31:28.318]                             if (!grepl(pattern, name)) 
[09:31:28.318]                               next
[09:31:28.318]                             invokeRestart(restart)
[09:31:28.318]                             muffled <- TRUE
[09:31:28.318]                             break
[09:31:28.318]                           }
[09:31:28.318]                         }
[09:31:28.318]                       }
[09:31:28.318]                       invisible(muffled)
[09:31:28.318]                     }
[09:31:28.318]                     muffleCondition(cond, pattern = "^muffle")
[09:31:28.318]                   }
[09:31:28.318]                 }
[09:31:28.318]             }
[09:31:28.318]         }))
[09:31:28.318]     }, error = function(ex) {
[09:31:28.318]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:28.318]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:28.318]                 ...future.rng), started = ...future.startTime, 
[09:31:28.318]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:28.318]             version = "1.8"), class = "FutureResult")
[09:31:28.318]     }, finally = {
[09:31:28.318]         if (!identical(...future.workdir, getwd())) 
[09:31:28.318]             setwd(...future.workdir)
[09:31:28.318]         {
[09:31:28.318]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:28.318]                 ...future.oldOptions$nwarnings <- NULL
[09:31:28.318]             }
[09:31:28.318]             base::options(...future.oldOptions)
[09:31:28.318]             if (.Platform$OS.type == "windows") {
[09:31:28.318]                 old_names <- names(...future.oldEnvVars)
[09:31:28.318]                 envs <- base::Sys.getenv()
[09:31:28.318]                 names <- names(envs)
[09:31:28.318]                 common <- intersect(names, old_names)
[09:31:28.318]                 added <- setdiff(names, old_names)
[09:31:28.318]                 removed <- setdiff(old_names, names)
[09:31:28.318]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:28.318]                   envs[common]]
[09:31:28.318]                 NAMES <- toupper(changed)
[09:31:28.318]                 args <- list()
[09:31:28.318]                 for (kk in seq_along(NAMES)) {
[09:31:28.318]                   name <- changed[[kk]]
[09:31:28.318]                   NAME <- NAMES[[kk]]
[09:31:28.318]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:28.318]                     next
[09:31:28.318]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:28.318]                 }
[09:31:28.318]                 NAMES <- toupper(added)
[09:31:28.318]                 for (kk in seq_along(NAMES)) {
[09:31:28.318]                   name <- added[[kk]]
[09:31:28.318]                   NAME <- NAMES[[kk]]
[09:31:28.318]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:28.318]                     next
[09:31:28.318]                   args[[name]] <- ""
[09:31:28.318]                 }
[09:31:28.318]                 NAMES <- toupper(removed)
[09:31:28.318]                 for (kk in seq_along(NAMES)) {
[09:31:28.318]                   name <- removed[[kk]]
[09:31:28.318]                   NAME <- NAMES[[kk]]
[09:31:28.318]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:28.318]                     next
[09:31:28.318]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:28.318]                 }
[09:31:28.318]                 if (length(args) > 0) 
[09:31:28.318]                   base::do.call(base::Sys.setenv, args = args)
[09:31:28.318]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:28.318]             }
[09:31:28.318]             else {
[09:31:28.318]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:28.318]             }
[09:31:28.318]             {
[09:31:28.318]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:28.318]                   0L) {
[09:31:28.318]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:28.318]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:28.318]                   base::options(opts)
[09:31:28.318]                 }
[09:31:28.318]                 {
[09:31:28.318]                   {
[09:31:28.318]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:28.318]                     NULL
[09:31:28.318]                   }
[09:31:28.318]                   options(future.plan = NULL)
[09:31:28.318]                   if (is.na(NA_character_)) 
[09:31:28.318]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:28.318]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:28.318]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:28.318]                     .init = FALSE)
[09:31:28.318]                 }
[09:31:28.318]             }
[09:31:28.318]         }
[09:31:28.318]     })
[09:31:28.318]     if (TRUE) {
[09:31:28.318]         base::sink(type = "output", split = FALSE)
[09:31:28.318]         if (TRUE) {
[09:31:28.318]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:28.318]         }
[09:31:28.318]         else {
[09:31:28.318]             ...future.result["stdout"] <- base::list(NULL)
[09:31:28.318]         }
[09:31:28.318]         base::close(...future.stdout)
[09:31:28.318]         ...future.stdout <- NULL
[09:31:28.318]     }
[09:31:28.318]     ...future.result$conditions <- ...future.conditions
[09:31:28.318]     ...future.result$finished <- base::Sys.time()
[09:31:28.318]     ...future.result
[09:31:28.318] }
[09:31:28.370] MultisessionFuture started
[09:31:28.370] result() for ClusterFuture ...
[09:31:28.371] receiveMessageFromWorker() for ClusterFuture ...
[09:31:28.371] - Validating connection of MultisessionFuture
[09:31:28.402] - received message: FutureResult
[09:31:28.402] - Received FutureResult
[09:31:28.402] - Erased future from FutureRegistry
[09:31:28.402] result() for ClusterFuture ...
[09:31:28.402] - result already collected: FutureResult
[09:31:28.402] result() for ClusterFuture ... done
[09:31:28.402] receiveMessageFromWorker() for ClusterFuture ... done
[09:31:28.403] result() for ClusterFuture ... done
[09:31:28.403] result() for ClusterFuture ...
[09:31:28.403] - result already collected: FutureResult
[09:31:28.403] result() for ClusterFuture ... done
[09:31:28.403] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[09:31:28.407] plan(): nbrOfWorkers() = 2
[09:31:28.407] getGlobalsAndPackages() ...
[09:31:28.407] Searching for globals...
[09:31:28.410] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[09:31:28.410] Searching for globals ... DONE
[09:31:28.410] Resolving globals: FALSE
[09:31:28.411] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[09:31:28.411] The total size of the 1 globals exported for future expression (‘{; my_fcn; }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[09:31:28.412] - globals: [1] ‘my_fcn’
[09:31:28.412] 
[09:31:28.412] getGlobalsAndPackages() ... DONE
[09:31:28.412] run() for ‘Future’ ...
[09:31:28.412] - state: ‘created’
[09:31:28.412] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:31:28.426] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:28.427] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:31:28.427]   - Field: ‘node’
[09:31:28.427]   - Field: ‘label’
[09:31:28.427]   - Field: ‘local’
[09:31:28.427]   - Field: ‘owner’
[09:31:28.427]   - Field: ‘envir’
[09:31:28.427]   - Field: ‘workers’
[09:31:28.427]   - Field: ‘packages’
[09:31:28.427]   - Field: ‘gc’
[09:31:28.427]   - Field: ‘conditions’
[09:31:28.428]   - Field: ‘persistent’
[09:31:28.428]   - Field: ‘expr’
[09:31:28.428]   - Field: ‘uuid’
[09:31:28.428]   - Field: ‘seed’
[09:31:28.428]   - Field: ‘version’
[09:31:28.428]   - Field: ‘result’
[09:31:28.428]   - Field: ‘asynchronous’
[09:31:28.428]   - Field: ‘calls’
[09:31:28.429]   - Field: ‘globals’
[09:31:28.429]   - Field: ‘stdout’
[09:31:28.429]   - Field: ‘earlySignal’
[09:31:28.429]   - Field: ‘lazy’
[09:31:28.429]   - Field: ‘state’
[09:31:28.429] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:31:28.429] - Launch lazy future ...
[09:31:28.430] Packages needed by the future expression (n = 0): <none>
[09:31:28.430] Packages needed by future strategies (n = 0): <none>
[09:31:28.430] {
[09:31:28.430]     {
[09:31:28.430]         {
[09:31:28.430]             ...future.startTime <- base::Sys.time()
[09:31:28.430]             {
[09:31:28.430]                 {
[09:31:28.430]                   {
[09:31:28.430]                     {
[09:31:28.430]                       base::local({
[09:31:28.430]                         has_future <- base::requireNamespace("future", 
[09:31:28.430]                           quietly = TRUE)
[09:31:28.430]                         if (has_future) {
[09:31:28.430]                           ns <- base::getNamespace("future")
[09:31:28.430]                           version <- ns[[".package"]][["version"]]
[09:31:28.430]                           if (is.null(version)) 
[09:31:28.430]                             version <- utils::packageVersion("future")
[09:31:28.430]                         }
[09:31:28.430]                         else {
[09:31:28.430]                           version <- NULL
[09:31:28.430]                         }
[09:31:28.430]                         if (!has_future || version < "1.8.0") {
[09:31:28.430]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:28.430]                             "", base::R.version$version.string), 
[09:31:28.430]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:28.430]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:28.430]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:28.430]                               "release", "version")], collapse = " "), 
[09:31:28.430]                             hostname = base::Sys.info()[["nodename"]])
[09:31:28.430]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:28.430]                             info)
[09:31:28.430]                           info <- base::paste(info, collapse = "; ")
[09:31:28.430]                           if (!has_future) {
[09:31:28.430]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:28.430]                               info)
[09:31:28.430]                           }
[09:31:28.430]                           else {
[09:31:28.430]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:28.430]                               info, version)
[09:31:28.430]                           }
[09:31:28.430]                           base::stop(msg)
[09:31:28.430]                         }
[09:31:28.430]                       })
[09:31:28.430]                     }
[09:31:28.430]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:28.430]                     base::options(mc.cores = 1L)
[09:31:28.430]                   }
[09:31:28.430]                   ...future.strategy.old <- future::plan("list")
[09:31:28.430]                   options(future.plan = NULL)
[09:31:28.430]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:28.430]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:28.430]                 }
[09:31:28.430]                 ...future.workdir <- getwd()
[09:31:28.430]             }
[09:31:28.430]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:28.430]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:28.430]         }
[09:31:28.430]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:28.430]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:28.430]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:28.430]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:28.430]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:28.430]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:28.430]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:28.430]             base::names(...future.oldOptions))
[09:31:28.430]     }
[09:31:28.430]     if (FALSE) {
[09:31:28.430]     }
[09:31:28.430]     else {
[09:31:28.430]         if (TRUE) {
[09:31:28.430]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:28.430]                 open = "w")
[09:31:28.430]         }
[09:31:28.430]         else {
[09:31:28.430]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:28.430]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:28.430]         }
[09:31:28.430]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:28.430]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:28.430]             base::sink(type = "output", split = FALSE)
[09:31:28.430]             base::close(...future.stdout)
[09:31:28.430]         }, add = TRUE)
[09:31:28.430]     }
[09:31:28.430]     ...future.frame <- base::sys.nframe()
[09:31:28.430]     ...future.conditions <- base::list()
[09:31:28.430]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:28.430]     if (FALSE) {
[09:31:28.430]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:28.430]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:28.430]     }
[09:31:28.430]     ...future.result <- base::tryCatch({
[09:31:28.430]         base::withCallingHandlers({
[09:31:28.430]             ...future.value <- base::withVisible(base::local({
[09:31:28.430]                 ...future.makeSendCondition <- base::local({
[09:31:28.430]                   sendCondition <- NULL
[09:31:28.430]                   function(frame = 1L) {
[09:31:28.430]                     if (is.function(sendCondition)) 
[09:31:28.430]                       return(sendCondition)
[09:31:28.430]                     ns <- getNamespace("parallel")
[09:31:28.430]                     if (exists("sendData", mode = "function", 
[09:31:28.430]                       envir = ns)) {
[09:31:28.430]                       parallel_sendData <- get("sendData", mode = "function", 
[09:31:28.430]                         envir = ns)
[09:31:28.430]                       envir <- sys.frame(frame)
[09:31:28.430]                       master <- NULL
[09:31:28.430]                       while (!identical(envir, .GlobalEnv) && 
[09:31:28.430]                         !identical(envir, emptyenv())) {
[09:31:28.430]                         if (exists("master", mode = "list", envir = envir, 
[09:31:28.430]                           inherits = FALSE)) {
[09:31:28.430]                           master <- get("master", mode = "list", 
[09:31:28.430]                             envir = envir, inherits = FALSE)
[09:31:28.430]                           if (inherits(master, c("SOCKnode", 
[09:31:28.430]                             "SOCK0node"))) {
[09:31:28.430]                             sendCondition <<- function(cond) {
[09:31:28.430]                               data <- list(type = "VALUE", value = cond, 
[09:31:28.430]                                 success = TRUE)
[09:31:28.430]                               parallel_sendData(master, data)
[09:31:28.430]                             }
[09:31:28.430]                             return(sendCondition)
[09:31:28.430]                           }
[09:31:28.430]                         }
[09:31:28.430]                         frame <- frame + 1L
[09:31:28.430]                         envir <- sys.frame(frame)
[09:31:28.430]                       }
[09:31:28.430]                     }
[09:31:28.430]                     sendCondition <<- function(cond) NULL
[09:31:28.430]                   }
[09:31:28.430]                 })
[09:31:28.430]                 withCallingHandlers({
[09:31:28.430]                   {
[09:31:28.430]                     my_fcn
[09:31:28.430]                   }
[09:31:28.430]                 }, immediateCondition = function(cond) {
[09:31:28.430]                   sendCondition <- ...future.makeSendCondition()
[09:31:28.430]                   sendCondition(cond)
[09:31:28.430]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:28.430]                   {
[09:31:28.430]                     inherits <- base::inherits
[09:31:28.430]                     invokeRestart <- base::invokeRestart
[09:31:28.430]                     is.null <- base::is.null
[09:31:28.430]                     muffled <- FALSE
[09:31:28.430]                     if (inherits(cond, "message")) {
[09:31:28.430]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:28.430]                       if (muffled) 
[09:31:28.430]                         invokeRestart("muffleMessage")
[09:31:28.430]                     }
[09:31:28.430]                     else if (inherits(cond, "warning")) {
[09:31:28.430]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:28.430]                       if (muffled) 
[09:31:28.430]                         invokeRestart("muffleWarning")
[09:31:28.430]                     }
[09:31:28.430]                     else if (inherits(cond, "condition")) {
[09:31:28.430]                       if (!is.null(pattern)) {
[09:31:28.430]                         computeRestarts <- base::computeRestarts
[09:31:28.430]                         grepl <- base::grepl
[09:31:28.430]                         restarts <- computeRestarts(cond)
[09:31:28.430]                         for (restart in restarts) {
[09:31:28.430]                           name <- restart$name
[09:31:28.430]                           if (is.null(name)) 
[09:31:28.430]                             next
[09:31:28.430]                           if (!grepl(pattern, name)) 
[09:31:28.430]                             next
[09:31:28.430]                           invokeRestart(restart)
[09:31:28.430]                           muffled <- TRUE
[09:31:28.430]                           break
[09:31:28.430]                         }
[09:31:28.430]                       }
[09:31:28.430]                     }
[09:31:28.430]                     invisible(muffled)
[09:31:28.430]                   }
[09:31:28.430]                   muffleCondition(cond)
[09:31:28.430]                 })
[09:31:28.430]             }))
[09:31:28.430]             future::FutureResult(value = ...future.value$value, 
[09:31:28.430]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:28.430]                   ...future.rng), globalenv = if (FALSE) 
[09:31:28.430]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:28.430]                     ...future.globalenv.names))
[09:31:28.430]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:28.430]         }, condition = base::local({
[09:31:28.430]             c <- base::c
[09:31:28.430]             inherits <- base::inherits
[09:31:28.430]             invokeRestart <- base::invokeRestart
[09:31:28.430]             length <- base::length
[09:31:28.430]             list <- base::list
[09:31:28.430]             seq.int <- base::seq.int
[09:31:28.430]             signalCondition <- base::signalCondition
[09:31:28.430]             sys.calls <- base::sys.calls
[09:31:28.430]             `[[` <- base::`[[`
[09:31:28.430]             `+` <- base::`+`
[09:31:28.430]             `<<-` <- base::`<<-`
[09:31:28.430]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:28.430]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:28.430]                   3L)]
[09:31:28.430]             }
[09:31:28.430]             function(cond) {
[09:31:28.430]                 is_error <- inherits(cond, "error")
[09:31:28.430]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:28.430]                   NULL)
[09:31:28.430]                 if (is_error) {
[09:31:28.430]                   sessionInformation <- function() {
[09:31:28.430]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:28.430]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:28.430]                       search = base::search(), system = base::Sys.info())
[09:31:28.430]                   }
[09:31:28.430]                   ...future.conditions[[length(...future.conditions) + 
[09:31:28.430]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:28.430]                     cond$call), session = sessionInformation(), 
[09:31:28.430]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:28.430]                   signalCondition(cond)
[09:31:28.430]                 }
[09:31:28.430]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:28.430]                 "immediateCondition"))) {
[09:31:28.430]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:28.430]                   ...future.conditions[[length(...future.conditions) + 
[09:31:28.430]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:28.430]                   if (TRUE && !signal) {
[09:31:28.430]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:28.430]                     {
[09:31:28.430]                       inherits <- base::inherits
[09:31:28.430]                       invokeRestart <- base::invokeRestart
[09:31:28.430]                       is.null <- base::is.null
[09:31:28.430]                       muffled <- FALSE
[09:31:28.430]                       if (inherits(cond, "message")) {
[09:31:28.430]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:28.430]                         if (muffled) 
[09:31:28.430]                           invokeRestart("muffleMessage")
[09:31:28.430]                       }
[09:31:28.430]                       else if (inherits(cond, "warning")) {
[09:31:28.430]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:28.430]                         if (muffled) 
[09:31:28.430]                           invokeRestart("muffleWarning")
[09:31:28.430]                       }
[09:31:28.430]                       else if (inherits(cond, "condition")) {
[09:31:28.430]                         if (!is.null(pattern)) {
[09:31:28.430]                           computeRestarts <- base::computeRestarts
[09:31:28.430]                           grepl <- base::grepl
[09:31:28.430]                           restarts <- computeRestarts(cond)
[09:31:28.430]                           for (restart in restarts) {
[09:31:28.430]                             name <- restart$name
[09:31:28.430]                             if (is.null(name)) 
[09:31:28.430]                               next
[09:31:28.430]                             if (!grepl(pattern, name)) 
[09:31:28.430]                               next
[09:31:28.430]                             invokeRestart(restart)
[09:31:28.430]                             muffled <- TRUE
[09:31:28.430]                             break
[09:31:28.430]                           }
[09:31:28.430]                         }
[09:31:28.430]                       }
[09:31:28.430]                       invisible(muffled)
[09:31:28.430]                     }
[09:31:28.430]                     muffleCondition(cond, pattern = "^muffle")
[09:31:28.430]                   }
[09:31:28.430]                 }
[09:31:28.430]                 else {
[09:31:28.430]                   if (TRUE) {
[09:31:28.430]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:28.430]                     {
[09:31:28.430]                       inherits <- base::inherits
[09:31:28.430]                       invokeRestart <- base::invokeRestart
[09:31:28.430]                       is.null <- base::is.null
[09:31:28.430]                       muffled <- FALSE
[09:31:28.430]                       if (inherits(cond, "message")) {
[09:31:28.430]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:28.430]                         if (muffled) 
[09:31:28.430]                           invokeRestart("muffleMessage")
[09:31:28.430]                       }
[09:31:28.430]                       else if (inherits(cond, "warning")) {
[09:31:28.430]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:28.430]                         if (muffled) 
[09:31:28.430]                           invokeRestart("muffleWarning")
[09:31:28.430]                       }
[09:31:28.430]                       else if (inherits(cond, "condition")) {
[09:31:28.430]                         if (!is.null(pattern)) {
[09:31:28.430]                           computeRestarts <- base::computeRestarts
[09:31:28.430]                           grepl <- base::grepl
[09:31:28.430]                           restarts <- computeRestarts(cond)
[09:31:28.430]                           for (restart in restarts) {
[09:31:28.430]                             name <- restart$name
[09:31:28.430]                             if (is.null(name)) 
[09:31:28.430]                               next
[09:31:28.430]                             if (!grepl(pattern, name)) 
[09:31:28.430]                               next
[09:31:28.430]                             invokeRestart(restart)
[09:31:28.430]                             muffled <- TRUE
[09:31:28.430]                             break
[09:31:28.430]                           }
[09:31:28.430]                         }
[09:31:28.430]                       }
[09:31:28.430]                       invisible(muffled)
[09:31:28.430]                     }
[09:31:28.430]                     muffleCondition(cond, pattern = "^muffle")
[09:31:28.430]                   }
[09:31:28.430]                 }
[09:31:28.430]             }
[09:31:28.430]         }))
[09:31:28.430]     }, error = function(ex) {
[09:31:28.430]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:28.430]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:28.430]                 ...future.rng), started = ...future.startTime, 
[09:31:28.430]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:28.430]             version = "1.8"), class = "FutureResult")
[09:31:28.430]     }, finally = {
[09:31:28.430]         if (!identical(...future.workdir, getwd())) 
[09:31:28.430]             setwd(...future.workdir)
[09:31:28.430]         {
[09:31:28.430]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:28.430]                 ...future.oldOptions$nwarnings <- NULL
[09:31:28.430]             }
[09:31:28.430]             base::options(...future.oldOptions)
[09:31:28.430]             if (.Platform$OS.type == "windows") {
[09:31:28.430]                 old_names <- names(...future.oldEnvVars)
[09:31:28.430]                 envs <- base::Sys.getenv()
[09:31:28.430]                 names <- names(envs)
[09:31:28.430]                 common <- intersect(names, old_names)
[09:31:28.430]                 added <- setdiff(names, old_names)
[09:31:28.430]                 removed <- setdiff(old_names, names)
[09:31:28.430]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:28.430]                   envs[common]]
[09:31:28.430]                 NAMES <- toupper(changed)
[09:31:28.430]                 args <- list()
[09:31:28.430]                 for (kk in seq_along(NAMES)) {
[09:31:28.430]                   name <- changed[[kk]]
[09:31:28.430]                   NAME <- NAMES[[kk]]
[09:31:28.430]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:28.430]                     next
[09:31:28.430]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:28.430]                 }
[09:31:28.430]                 NAMES <- toupper(added)
[09:31:28.430]                 for (kk in seq_along(NAMES)) {
[09:31:28.430]                   name <- added[[kk]]
[09:31:28.430]                   NAME <- NAMES[[kk]]
[09:31:28.430]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:28.430]                     next
[09:31:28.430]                   args[[name]] <- ""
[09:31:28.430]                 }
[09:31:28.430]                 NAMES <- toupper(removed)
[09:31:28.430]                 for (kk in seq_along(NAMES)) {
[09:31:28.430]                   name <- removed[[kk]]
[09:31:28.430]                   NAME <- NAMES[[kk]]
[09:31:28.430]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:28.430]                     next
[09:31:28.430]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:28.430]                 }
[09:31:28.430]                 if (length(args) > 0) 
[09:31:28.430]                   base::do.call(base::Sys.setenv, args = args)
[09:31:28.430]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:28.430]             }
[09:31:28.430]             else {
[09:31:28.430]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:28.430]             }
[09:31:28.430]             {
[09:31:28.430]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:28.430]                   0L) {
[09:31:28.430]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:28.430]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:28.430]                   base::options(opts)
[09:31:28.430]                 }
[09:31:28.430]                 {
[09:31:28.430]                   {
[09:31:28.430]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:28.430]                     NULL
[09:31:28.430]                   }
[09:31:28.430]                   options(future.plan = NULL)
[09:31:28.430]                   if (is.na(NA_character_)) 
[09:31:28.430]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:28.430]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:28.430]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:28.430]                     .init = FALSE)
[09:31:28.430]                 }
[09:31:28.430]             }
[09:31:28.430]         }
[09:31:28.430]     })
[09:31:28.430]     if (TRUE) {
[09:31:28.430]         base::sink(type = "output", split = FALSE)
[09:31:28.430]         if (TRUE) {
[09:31:28.430]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:28.430]         }
[09:31:28.430]         else {
[09:31:28.430]             ...future.result["stdout"] <- base::list(NULL)
[09:31:28.430]         }
[09:31:28.430]         base::close(...future.stdout)
[09:31:28.430]         ...future.stdout <- NULL
[09:31:28.430]     }
[09:31:28.430]     ...future.result$conditions <- ...future.conditions
[09:31:28.430]     ...future.result$finished <- base::Sys.time()
[09:31:28.430]     ...future.result
[09:31:28.430] }
[09:31:28.433] Exporting 1 global objects (3.84 KiB) to cluster node #1 ...
[09:31:28.433] Exporting ‘my_fcn’ (3.84 KiB) to cluster node #1 ...
[09:31:28.434] Exporting ‘my_fcn’ (3.84 KiB) to cluster node #1 ... DONE
[09:31:28.434] Exporting 1 global objects (3.84 KiB) to cluster node #1 ... DONE
[09:31:28.434] MultisessionFuture started
[09:31:28.435] - Launch lazy future ... done
[09:31:28.435] run() for ‘MultisessionFuture’ ... done
[09:31:28.435] result() for ClusterFuture ...
[09:31:28.435] receiveMessageFromWorker() for ClusterFuture ...
[09:31:28.435] - Validating connection of MultisessionFuture
[09:31:28.436] - received message: FutureResult
[09:31:28.436] - Received FutureResult
[09:31:28.436] - Erased future from FutureRegistry
[09:31:28.436] result() for ClusterFuture ...
[09:31:28.436] - result already collected: FutureResult
[09:31:28.437] result() for ClusterFuture ... done
[09:31:28.437] receiveMessageFromWorker() for ClusterFuture ... done
[09:31:28.437] result() for ClusterFuture ... done
[09:31:28.437] result() for ClusterFuture ...
[09:31:28.437] - result already collected: FutureResult
[09:31:28.437] result() for ClusterFuture ... done
new("standardGeneric", .Data = function (x) 
standardGeneric("my_fcn"), generic = "my_fcn", package = ".GlobalEnv", 
    group = list(), valueClass = character(0), signature = "x", 
    default = NULL, skeleton = (function (x) 
    stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
        "my_fcn"), domain = NA))(x))
<environment: 0x55b64f0f58b0>
attr(,"generic")
[1] "my_fcn"
attr(,"generic")attr(,"package")
[1] ".GlobalEnv"
attr(,"package")
[1] ".GlobalEnv"
attr(,"group")
list()
attr(,"valueClass")
character(0)
attr(,"signature")
[1] "x"
attr(,"default")
`\001NULL\001`
attr(,"skeleton")
(function (x) 
stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
    "my_fcn"), domain = NA))(x)
attr(,"class")
[1] "standardGeneric"
attr(,"class")attr(,"package")
[1] "methods"
[09:31:28.438] getGlobalsAndPackages() ...
[09:31:28.438] Searching for globals...
[09:31:28.440] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[09:31:28.441] Searching for globals ... DONE
[09:31:28.441] Resolving globals: FALSE
[09:31:28.441] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[09:31:28.442] The total size of the 1 globals exported for future expression (‘{; my_fcn(3); }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[09:31:28.442] - globals: [1] ‘my_fcn’
[09:31:28.442] 
[09:31:28.442] getGlobalsAndPackages() ... DONE
[09:31:28.442] run() for ‘Future’ ...
[09:31:28.442] - state: ‘created’
[09:31:28.443] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:31:28.457] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:28.457] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:31:28.457]   - Field: ‘node’
[09:31:28.457]   - Field: ‘label’
[09:31:28.457]   - Field: ‘local’
[09:31:28.457]   - Field: ‘owner’
[09:31:28.457]   - Field: ‘envir’
[09:31:28.457]   - Field: ‘workers’
[09:31:28.457]   - Field: ‘packages’
[09:31:28.458]   - Field: ‘gc’
[09:31:28.458]   - Field: ‘conditions’
[09:31:28.458]   - Field: ‘persistent’
[09:31:28.458]   - Field: ‘expr’
[09:31:28.458]   - Field: ‘uuid’
[09:31:28.458]   - Field: ‘seed’
[09:31:28.458]   - Field: ‘version’
[09:31:28.458]   - Field: ‘result’
[09:31:28.458]   - Field: ‘asynchronous’
[09:31:28.459]   - Field: ‘calls’
[09:31:28.459]   - Field: ‘globals’
[09:31:28.459]   - Field: ‘stdout’
[09:31:28.459]   - Field: ‘earlySignal’
[09:31:28.459]   - Field: ‘lazy’
[09:31:28.459]   - Field: ‘state’
[09:31:28.459] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:31:28.459] - Launch lazy future ...
[09:31:28.460] Packages needed by the future expression (n = 0): <none>
[09:31:28.460] Packages needed by future strategies (n = 0): <none>
[09:31:28.460] {
[09:31:28.460]     {
[09:31:28.460]         {
[09:31:28.460]             ...future.startTime <- base::Sys.time()
[09:31:28.460]             {
[09:31:28.460]                 {
[09:31:28.460]                   {
[09:31:28.460]                     {
[09:31:28.460]                       base::local({
[09:31:28.460]                         has_future <- base::requireNamespace("future", 
[09:31:28.460]                           quietly = TRUE)
[09:31:28.460]                         if (has_future) {
[09:31:28.460]                           ns <- base::getNamespace("future")
[09:31:28.460]                           version <- ns[[".package"]][["version"]]
[09:31:28.460]                           if (is.null(version)) 
[09:31:28.460]                             version <- utils::packageVersion("future")
[09:31:28.460]                         }
[09:31:28.460]                         else {
[09:31:28.460]                           version <- NULL
[09:31:28.460]                         }
[09:31:28.460]                         if (!has_future || version < "1.8.0") {
[09:31:28.460]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:28.460]                             "", base::R.version$version.string), 
[09:31:28.460]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:28.460]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:28.460]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:28.460]                               "release", "version")], collapse = " "), 
[09:31:28.460]                             hostname = base::Sys.info()[["nodename"]])
[09:31:28.460]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:28.460]                             info)
[09:31:28.460]                           info <- base::paste(info, collapse = "; ")
[09:31:28.460]                           if (!has_future) {
[09:31:28.460]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:28.460]                               info)
[09:31:28.460]                           }
[09:31:28.460]                           else {
[09:31:28.460]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:28.460]                               info, version)
[09:31:28.460]                           }
[09:31:28.460]                           base::stop(msg)
[09:31:28.460]                         }
[09:31:28.460]                       })
[09:31:28.460]                     }
[09:31:28.460]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:28.460]                     base::options(mc.cores = 1L)
[09:31:28.460]                   }
[09:31:28.460]                   ...future.strategy.old <- future::plan("list")
[09:31:28.460]                   options(future.plan = NULL)
[09:31:28.460]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:28.460]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:28.460]                 }
[09:31:28.460]                 ...future.workdir <- getwd()
[09:31:28.460]             }
[09:31:28.460]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:28.460]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:28.460]         }
[09:31:28.460]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:28.460]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:28.460]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:28.460]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:28.460]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:28.460]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:28.460]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:28.460]             base::names(...future.oldOptions))
[09:31:28.460]     }
[09:31:28.460]     if (FALSE) {
[09:31:28.460]     }
[09:31:28.460]     else {
[09:31:28.460]         if (TRUE) {
[09:31:28.460]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:28.460]                 open = "w")
[09:31:28.460]         }
[09:31:28.460]         else {
[09:31:28.460]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:28.460]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:28.460]         }
[09:31:28.460]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:28.460]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:28.460]             base::sink(type = "output", split = FALSE)
[09:31:28.460]             base::close(...future.stdout)
[09:31:28.460]         }, add = TRUE)
[09:31:28.460]     }
[09:31:28.460]     ...future.frame <- base::sys.nframe()
[09:31:28.460]     ...future.conditions <- base::list()
[09:31:28.460]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:28.460]     if (FALSE) {
[09:31:28.460]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:28.460]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:28.460]     }
[09:31:28.460]     ...future.result <- base::tryCatch({
[09:31:28.460]         base::withCallingHandlers({
[09:31:28.460]             ...future.value <- base::withVisible(base::local({
[09:31:28.460]                 ...future.makeSendCondition <- base::local({
[09:31:28.460]                   sendCondition <- NULL
[09:31:28.460]                   function(frame = 1L) {
[09:31:28.460]                     if (is.function(sendCondition)) 
[09:31:28.460]                       return(sendCondition)
[09:31:28.460]                     ns <- getNamespace("parallel")
[09:31:28.460]                     if (exists("sendData", mode = "function", 
[09:31:28.460]                       envir = ns)) {
[09:31:28.460]                       parallel_sendData <- get("sendData", mode = "function", 
[09:31:28.460]                         envir = ns)
[09:31:28.460]                       envir <- sys.frame(frame)
[09:31:28.460]                       master <- NULL
[09:31:28.460]                       while (!identical(envir, .GlobalEnv) && 
[09:31:28.460]                         !identical(envir, emptyenv())) {
[09:31:28.460]                         if (exists("master", mode = "list", envir = envir, 
[09:31:28.460]                           inherits = FALSE)) {
[09:31:28.460]                           master <- get("master", mode = "list", 
[09:31:28.460]                             envir = envir, inherits = FALSE)
[09:31:28.460]                           if (inherits(master, c("SOCKnode", 
[09:31:28.460]                             "SOCK0node"))) {
[09:31:28.460]                             sendCondition <<- function(cond) {
[09:31:28.460]                               data <- list(type = "VALUE", value = cond, 
[09:31:28.460]                                 success = TRUE)
[09:31:28.460]                               parallel_sendData(master, data)
[09:31:28.460]                             }
[09:31:28.460]                             return(sendCondition)
[09:31:28.460]                           }
[09:31:28.460]                         }
[09:31:28.460]                         frame <- frame + 1L
[09:31:28.460]                         envir <- sys.frame(frame)
[09:31:28.460]                       }
[09:31:28.460]                     }
[09:31:28.460]                     sendCondition <<- function(cond) NULL
[09:31:28.460]                   }
[09:31:28.460]                 })
[09:31:28.460]                 withCallingHandlers({
[09:31:28.460]                   {
[09:31:28.460]                     my_fcn(3)
[09:31:28.460]                   }
[09:31:28.460]                 }, immediateCondition = function(cond) {
[09:31:28.460]                   sendCondition <- ...future.makeSendCondition()
[09:31:28.460]                   sendCondition(cond)
[09:31:28.460]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:28.460]                   {
[09:31:28.460]                     inherits <- base::inherits
[09:31:28.460]                     invokeRestart <- base::invokeRestart
[09:31:28.460]                     is.null <- base::is.null
[09:31:28.460]                     muffled <- FALSE
[09:31:28.460]                     if (inherits(cond, "message")) {
[09:31:28.460]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:28.460]                       if (muffled) 
[09:31:28.460]                         invokeRestart("muffleMessage")
[09:31:28.460]                     }
[09:31:28.460]                     else if (inherits(cond, "warning")) {
[09:31:28.460]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:28.460]                       if (muffled) 
[09:31:28.460]                         invokeRestart("muffleWarning")
[09:31:28.460]                     }
[09:31:28.460]                     else if (inherits(cond, "condition")) {
[09:31:28.460]                       if (!is.null(pattern)) {
[09:31:28.460]                         computeRestarts <- base::computeRestarts
[09:31:28.460]                         grepl <- base::grepl
[09:31:28.460]                         restarts <- computeRestarts(cond)
[09:31:28.460]                         for (restart in restarts) {
[09:31:28.460]                           name <- restart$name
[09:31:28.460]                           if (is.null(name)) 
[09:31:28.460]                             next
[09:31:28.460]                           if (!grepl(pattern, name)) 
[09:31:28.460]                             next
[09:31:28.460]                           invokeRestart(restart)
[09:31:28.460]                           muffled <- TRUE
[09:31:28.460]                           break
[09:31:28.460]                         }
[09:31:28.460]                       }
[09:31:28.460]                     }
[09:31:28.460]                     invisible(muffled)
[09:31:28.460]                   }
[09:31:28.460]                   muffleCondition(cond)
[09:31:28.460]                 })
[09:31:28.460]             }))
[09:31:28.460]             future::FutureResult(value = ...future.value$value, 
[09:31:28.460]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:28.460]                   ...future.rng), globalenv = if (FALSE) 
[09:31:28.460]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:28.460]                     ...future.globalenv.names))
[09:31:28.460]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:28.460]         }, condition = base::local({
[09:31:28.460]             c <- base::c
[09:31:28.460]             inherits <- base::inherits
[09:31:28.460]             invokeRestart <- base::invokeRestart
[09:31:28.460]             length <- base::length
[09:31:28.460]             list <- base::list
[09:31:28.460]             seq.int <- base::seq.int
[09:31:28.460]             signalCondition <- base::signalCondition
[09:31:28.460]             sys.calls <- base::sys.calls
[09:31:28.460]             `[[` <- base::`[[`
[09:31:28.460]             `+` <- base::`+`
[09:31:28.460]             `<<-` <- base::`<<-`
[09:31:28.460]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:28.460]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:28.460]                   3L)]
[09:31:28.460]             }
[09:31:28.460]             function(cond) {
[09:31:28.460]                 is_error <- inherits(cond, "error")
[09:31:28.460]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:28.460]                   NULL)
[09:31:28.460]                 if (is_error) {
[09:31:28.460]                   sessionInformation <- function() {
[09:31:28.460]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:28.460]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:28.460]                       search = base::search(), system = base::Sys.info())
[09:31:28.460]                   }
[09:31:28.460]                   ...future.conditions[[length(...future.conditions) + 
[09:31:28.460]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:28.460]                     cond$call), session = sessionInformation(), 
[09:31:28.460]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:28.460]                   signalCondition(cond)
[09:31:28.460]                 }
[09:31:28.460]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:28.460]                 "immediateCondition"))) {
[09:31:28.460]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:28.460]                   ...future.conditions[[length(...future.conditions) + 
[09:31:28.460]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:28.460]                   if (TRUE && !signal) {
[09:31:28.460]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:28.460]                     {
[09:31:28.460]                       inherits <- base::inherits
[09:31:28.460]                       invokeRestart <- base::invokeRestart
[09:31:28.460]                       is.null <- base::is.null
[09:31:28.460]                       muffled <- FALSE
[09:31:28.460]                       if (inherits(cond, "message")) {
[09:31:28.460]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:28.460]                         if (muffled) 
[09:31:28.460]                           invokeRestart("muffleMessage")
[09:31:28.460]                       }
[09:31:28.460]                       else if (inherits(cond, "warning")) {
[09:31:28.460]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:28.460]                         if (muffled) 
[09:31:28.460]                           invokeRestart("muffleWarning")
[09:31:28.460]                       }
[09:31:28.460]                       else if (inherits(cond, "condition")) {
[09:31:28.460]                         if (!is.null(pattern)) {
[09:31:28.460]                           computeRestarts <- base::computeRestarts
[09:31:28.460]                           grepl <- base::grepl
[09:31:28.460]                           restarts <- computeRestarts(cond)
[09:31:28.460]                           for (restart in restarts) {
[09:31:28.460]                             name <- restart$name
[09:31:28.460]                             if (is.null(name)) 
[09:31:28.460]                               next
[09:31:28.460]                             if (!grepl(pattern, name)) 
[09:31:28.460]                               next
[09:31:28.460]                             invokeRestart(restart)
[09:31:28.460]                             muffled <- TRUE
[09:31:28.460]                             break
[09:31:28.460]                           }
[09:31:28.460]                         }
[09:31:28.460]                       }
[09:31:28.460]                       invisible(muffled)
[09:31:28.460]                     }
[09:31:28.460]                     muffleCondition(cond, pattern = "^muffle")
[09:31:28.460]                   }
[09:31:28.460]                 }
[09:31:28.460]                 else {
[09:31:28.460]                   if (TRUE) {
[09:31:28.460]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:28.460]                     {
[09:31:28.460]                       inherits <- base::inherits
[09:31:28.460]                       invokeRestart <- base::invokeRestart
[09:31:28.460]                       is.null <- base::is.null
[09:31:28.460]                       muffled <- FALSE
[09:31:28.460]                       if (inherits(cond, "message")) {
[09:31:28.460]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:28.460]                         if (muffled) 
[09:31:28.460]                           invokeRestart("muffleMessage")
[09:31:28.460]                       }
[09:31:28.460]                       else if (inherits(cond, "warning")) {
[09:31:28.460]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:28.460]                         if (muffled) 
[09:31:28.460]                           invokeRestart("muffleWarning")
[09:31:28.460]                       }
[09:31:28.460]                       else if (inherits(cond, "condition")) {
[09:31:28.460]                         if (!is.null(pattern)) {
[09:31:28.460]                           computeRestarts <- base::computeRestarts
[09:31:28.460]                           grepl <- base::grepl
[09:31:28.460]                           restarts <- computeRestarts(cond)
[09:31:28.460]                           for (restart in restarts) {
[09:31:28.460]                             name <- restart$name
[09:31:28.460]                             if (is.null(name)) 
[09:31:28.460]                               next
[09:31:28.460]                             if (!grepl(pattern, name)) 
[09:31:28.460]                               next
[09:31:28.460]                             invokeRestart(restart)
[09:31:28.460]                             muffled <- TRUE
[09:31:28.460]                             break
[09:31:28.460]                           }
[09:31:28.460]                         }
[09:31:28.460]                       }
[09:31:28.460]                       invisible(muffled)
[09:31:28.460]                     }
[09:31:28.460]                     muffleCondition(cond, pattern = "^muffle")
[09:31:28.460]                   }
[09:31:28.460]                 }
[09:31:28.460]             }
[09:31:28.460]         }))
[09:31:28.460]     }, error = function(ex) {
[09:31:28.460]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:28.460]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:28.460]                 ...future.rng), started = ...future.startTime, 
[09:31:28.460]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:28.460]             version = "1.8"), class = "FutureResult")
[09:31:28.460]     }, finally = {
[09:31:28.460]         if (!identical(...future.workdir, getwd())) 
[09:31:28.460]             setwd(...future.workdir)
[09:31:28.460]         {
[09:31:28.460]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:28.460]                 ...future.oldOptions$nwarnings <- NULL
[09:31:28.460]             }
[09:31:28.460]             base::options(...future.oldOptions)
[09:31:28.460]             if (.Platform$OS.type == "windows") {
[09:31:28.460]                 old_names <- names(...future.oldEnvVars)
[09:31:28.460]                 envs <- base::Sys.getenv()
[09:31:28.460]                 names <- names(envs)
[09:31:28.460]                 common <- intersect(names, old_names)
[09:31:28.460]                 added <- setdiff(names, old_names)
[09:31:28.460]                 removed <- setdiff(old_names, names)
[09:31:28.460]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:28.460]                   envs[common]]
[09:31:28.460]                 NAMES <- toupper(changed)
[09:31:28.460]                 args <- list()
[09:31:28.460]                 for (kk in seq_along(NAMES)) {
[09:31:28.460]                   name <- changed[[kk]]
[09:31:28.460]                   NAME <- NAMES[[kk]]
[09:31:28.460]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:28.460]                     next
[09:31:28.460]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:28.460]                 }
[09:31:28.460]                 NAMES <- toupper(added)
[09:31:28.460]                 for (kk in seq_along(NAMES)) {
[09:31:28.460]                   name <- added[[kk]]
[09:31:28.460]                   NAME <- NAMES[[kk]]
[09:31:28.460]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:28.460]                     next
[09:31:28.460]                   args[[name]] <- ""
[09:31:28.460]                 }
[09:31:28.460]                 NAMES <- toupper(removed)
[09:31:28.460]                 for (kk in seq_along(NAMES)) {
[09:31:28.460]                   name <- removed[[kk]]
[09:31:28.460]                   NAME <- NAMES[[kk]]
[09:31:28.460]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:28.460]                     next
[09:31:28.460]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:28.460]                 }
[09:31:28.460]                 if (length(args) > 0) 
[09:31:28.460]                   base::do.call(base::Sys.setenv, args = args)
[09:31:28.460]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:28.460]             }
[09:31:28.460]             else {
[09:31:28.460]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:28.460]             }
[09:31:28.460]             {
[09:31:28.460]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:28.460]                   0L) {
[09:31:28.460]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:28.460]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:28.460]                   base::options(opts)
[09:31:28.460]                 }
[09:31:28.460]                 {
[09:31:28.460]                   {
[09:31:28.460]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:28.460]                     NULL
[09:31:28.460]                   }
[09:31:28.460]                   options(future.plan = NULL)
[09:31:28.460]                   if (is.na(NA_character_)) 
[09:31:28.460]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:28.460]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:28.460]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:28.460]                     .init = FALSE)
[09:31:28.460]                 }
[09:31:28.460]             }
[09:31:28.460]         }
[09:31:28.460]     })
[09:31:28.460]     if (TRUE) {
[09:31:28.460]         base::sink(type = "output", split = FALSE)
[09:31:28.460]         if (TRUE) {
[09:31:28.460]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:28.460]         }
[09:31:28.460]         else {
[09:31:28.460]             ...future.result["stdout"] <- base::list(NULL)
[09:31:28.460]         }
[09:31:28.460]         base::close(...future.stdout)
[09:31:28.460]         ...future.stdout <- NULL
[09:31:28.460]     }
[09:31:28.460]     ...future.result$conditions <- ...future.conditions
[09:31:28.460]     ...future.result$finished <- base::Sys.time()
[09:31:28.460]     ...future.result
[09:31:28.460] }
[09:31:28.463] Exporting 1 global objects (3.84 KiB) to cluster node #1 ...
[09:31:28.463] Exporting ‘my_fcn’ (3.84 KiB) to cluster node #1 ...
[09:31:28.464] Exporting ‘my_fcn’ (3.84 KiB) to cluster node #1 ... DONE
[09:31:28.464] Exporting 1 global objects (3.84 KiB) to cluster node #1 ... DONE
[09:31:28.464] MultisessionFuture started
[09:31:28.465] - Launch lazy future ... done
[09:31:28.465] run() for ‘MultisessionFuture’ ... done
[09:31:28.465] result() for ClusterFuture ...
[09:31:28.465] receiveMessageFromWorker() for ClusterFuture ...
[09:31:28.465] - Validating connection of MultisessionFuture
[09:31:28.470] - received message: FutureResult
[09:31:28.470] - Received FutureResult
[09:31:28.470] - Erased future from FutureRegistry
[09:31:28.470] result() for ClusterFuture ...
[09:31:28.471] - result already collected: FutureResult
[09:31:28.471] result() for ClusterFuture ... done
[09:31:28.471] receiveMessageFromWorker() for ClusterFuture ... done
[09:31:28.471] result() for ClusterFuture ... done
[09:31:28.471] result() for ClusterFuture ...
[09:31:28.471] - result already collected: FutureResult
[09:31:28.471] result() for ClusterFuture ... done
[1] -3
> 
> message("*** Globals - S4 methods ... DONE")
*** Globals - S4 methods ... DONE
> 
> source("incl/end.R")
[09:31:28.472] plan(): Setting new future strategy stack:
[09:31:28.472] List of future strategies:
[09:31:28.472] 1. FutureStrategy:
[09:31:28.472]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:28.472]    - tweaked: FALSE
[09:31:28.472]    - call: future::plan(oplan)
[09:31:28.473] plan(): nbrOfWorkers() = 1
> 
