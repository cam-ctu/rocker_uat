
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:39:50.150] plan(): Setting new future strategy stack:
[17:39:50.151] List of future strategies:
[17:39:50.151] 1. sequential:
[17:39:50.151]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:50.151]    - tweaked: FALSE
[17:39:50.151]    - call: future::plan("sequential")
[17:39:50.162] plan(): nbrOfWorkers() = 1
> library(methods)
> 
> message("*** Globals - S4 methods ...")
*** Globals - S4 methods ...
> 
> setGeneric("my_fcn", function(x) standardGeneric("my_fcn"))
[1] "my_fcn"
> setMethod("my_fcn", signature(x = "numeric"), function(x) { -x })
> org_my_fcn <- my_fcn
> 
> truth <- my_fcn(3)
> 
> for (strategy in supportedStrategies()) {
+   message("Type of future: ", strategy)
+   plan(strategy)
+ 
+   ## Assert that S4 generic function 'my_fcn()' is exported
+   f <- future({ my_fcn }, lazy = TRUE)
+   rm(list = "my_fcn")
+   v <- value(f)
+   print(v)
+   stopifnot(
+     is.function(v),
+     inherits(v, class(org_my_fcn)[1])
+   )
+   my_fcn <- org_my_fcn
+   
+   ## FIXME:
+   ## Just like S3 methods, S4 methods are not picked up
+   ## https://github.com/HenrikBengtsson/future/issues/615
+   f <- future({ my_fcn(3) }, lazy = TRUE)
+   rm(list = "my_fcn")
+   v <- tryCatch(value(f), error = identity)
+   print(v)
+   if (isTRUE(as.logical(Sys.getenv("R_CHECK_IDEAL")))) {
+     if (getOption("future.globals.keepWhere", TRUE)) {
+       stopifnot(identical(v, truth))
+     } else {
+       stopifnot(inherits(v, "error"))
+     }
+   } else if (isTRUE(getOption("future.globals.keepWhere", FALSE))) {
+     stopifnot(identical(v, truth))
+   } else {
+     if (strategy %in% c("sequential", "multicore")) {
+       stopifnot(inherits(v, "error"))
+     } else {
+       stopifnot(identical(v, truth))
+     }
+   }
+   my_fcn <- org_my_fcn
+ }
Type of future: sequential
[17:39:50.196] plan(): Setting new future strategy stack:
[17:39:50.196] List of future strategies:
[17:39:50.196] 1. sequential:
[17:39:50.196]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:50.196]    - tweaked: FALSE
[17:39:50.196]    - call: plan(strategy)
[17:39:50.209] plan(): nbrOfWorkers() = 1
[17:39:50.209] getGlobalsAndPackages() ...
[17:39:50.210] Searching for globals...
[17:39:50.215] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[17:39:50.215] Searching for globals ... DONE
[17:39:50.215] Resolving globals: FALSE
[17:39:50.216] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[17:39:50.217] The total size of the 1 globals exported for future expression (‘{; my_fcn; }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[17:39:50.217] - globals: [1] ‘my_fcn’
[17:39:50.217] 
[17:39:50.217] getGlobalsAndPackages() ... DONE
[17:39:50.218] run() for ‘Future’ ...
[17:39:50.218] - state: ‘created’
[17:39:50.218] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:50.219] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:50.219] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:50.219]   - Field: ‘label’
[17:39:50.219]   - Field: ‘local’
[17:39:50.219]   - Field: ‘owner’
[17:39:50.219]   - Field: ‘envir’
[17:39:50.219]   - Field: ‘packages’
[17:39:50.219]   - Field: ‘gc’
[17:39:50.219]   - Field: ‘conditions’
[17:39:50.220]   - Field: ‘expr’
[17:39:50.220]   - Field: ‘uuid’
[17:39:50.220]   - Field: ‘seed’
[17:39:50.220]   - Field: ‘version’
[17:39:50.220]   - Field: ‘result’
[17:39:50.220]   - Field: ‘asynchronous’
[17:39:50.220]   - Field: ‘calls’
[17:39:50.220]   - Field: ‘globals’
[17:39:50.220]   - Field: ‘stdout’
[17:39:50.220]   - Field: ‘earlySignal’
[17:39:50.220]   - Field: ‘lazy’
[17:39:50.221]   - Field: ‘state’
[17:39:50.221] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:50.221] - Launch lazy future ...
[17:39:50.221] Packages needed by the future expression (n = 0): <none>
[17:39:50.221] Packages needed by future strategies (n = 0): <none>
[17:39:50.222] {
[17:39:50.222]     {
[17:39:50.222]         {
[17:39:50.222]             ...future.startTime <- base::Sys.time()
[17:39:50.222]             {
[17:39:50.222]                 {
[17:39:50.222]                   {
[17:39:50.222]                     base::local({
[17:39:50.222]                       has_future <- base::requireNamespace("future", 
[17:39:50.222]                         quietly = TRUE)
[17:39:50.222]                       if (has_future) {
[17:39:50.222]                         ns <- base::getNamespace("future")
[17:39:50.222]                         version <- ns[[".package"]][["version"]]
[17:39:50.222]                         if (is.null(version)) 
[17:39:50.222]                           version <- utils::packageVersion("future")
[17:39:50.222]                       }
[17:39:50.222]                       else {
[17:39:50.222]                         version <- NULL
[17:39:50.222]                       }
[17:39:50.222]                       if (!has_future || version < "1.8.0") {
[17:39:50.222]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:50.222]                           "", base::R.version$version.string), 
[17:39:50.222]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:50.222]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:50.222]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:50.222]                             "release", "version")], collapse = " "), 
[17:39:50.222]                           hostname = base::Sys.info()[["nodename"]])
[17:39:50.222]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:50.222]                           info)
[17:39:50.222]                         info <- base::paste(info, collapse = "; ")
[17:39:50.222]                         if (!has_future) {
[17:39:50.222]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:50.222]                             info)
[17:39:50.222]                         }
[17:39:50.222]                         else {
[17:39:50.222]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:50.222]                             info, version)
[17:39:50.222]                         }
[17:39:50.222]                         base::stop(msg)
[17:39:50.222]                       }
[17:39:50.222]                     })
[17:39:50.222]                   }
[17:39:50.222]                   ...future.strategy.old <- future::plan("list")
[17:39:50.222]                   options(future.plan = NULL)
[17:39:50.222]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:50.222]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:50.222]                 }
[17:39:50.222]                 ...future.workdir <- getwd()
[17:39:50.222]             }
[17:39:50.222]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:50.222]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:50.222]         }
[17:39:50.222]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:50.222]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:50.222]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:50.222]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:50.222]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:50.222]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:50.222]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:50.222]             base::names(...future.oldOptions))
[17:39:50.222]     }
[17:39:50.222]     if (FALSE) {
[17:39:50.222]     }
[17:39:50.222]     else {
[17:39:50.222]         if (TRUE) {
[17:39:50.222]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:50.222]                 open = "w")
[17:39:50.222]         }
[17:39:50.222]         else {
[17:39:50.222]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:50.222]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:50.222]         }
[17:39:50.222]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:50.222]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:50.222]             base::sink(type = "output", split = FALSE)
[17:39:50.222]             base::close(...future.stdout)
[17:39:50.222]         }, add = TRUE)
[17:39:50.222]     }
[17:39:50.222]     ...future.frame <- base::sys.nframe()
[17:39:50.222]     ...future.conditions <- base::list()
[17:39:50.222]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:50.222]     if (FALSE) {
[17:39:50.222]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:50.222]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:50.222]     }
[17:39:50.222]     ...future.result <- base::tryCatch({
[17:39:50.222]         base::withCallingHandlers({
[17:39:50.222]             ...future.value <- base::withVisible(base::local({
[17:39:50.222]                 my_fcn
[17:39:50.222]             }))
[17:39:50.222]             future::FutureResult(value = ...future.value$value, 
[17:39:50.222]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:50.222]                   ...future.rng), globalenv = if (FALSE) 
[17:39:50.222]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:50.222]                     ...future.globalenv.names))
[17:39:50.222]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:50.222]         }, condition = base::local({
[17:39:50.222]             c <- base::c
[17:39:50.222]             inherits <- base::inherits
[17:39:50.222]             invokeRestart <- base::invokeRestart
[17:39:50.222]             length <- base::length
[17:39:50.222]             list <- base::list
[17:39:50.222]             seq.int <- base::seq.int
[17:39:50.222]             signalCondition <- base::signalCondition
[17:39:50.222]             sys.calls <- base::sys.calls
[17:39:50.222]             `[[` <- base::`[[`
[17:39:50.222]             `+` <- base::`+`
[17:39:50.222]             `<<-` <- base::`<<-`
[17:39:50.222]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:50.222]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:50.222]                   3L)]
[17:39:50.222]             }
[17:39:50.222]             function(cond) {
[17:39:50.222]                 is_error <- inherits(cond, "error")
[17:39:50.222]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:50.222]                   NULL)
[17:39:50.222]                 if (is_error) {
[17:39:50.222]                   sessionInformation <- function() {
[17:39:50.222]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:50.222]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:50.222]                       search = base::search(), system = base::Sys.info())
[17:39:50.222]                   }
[17:39:50.222]                   ...future.conditions[[length(...future.conditions) + 
[17:39:50.222]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:50.222]                     cond$call), session = sessionInformation(), 
[17:39:50.222]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:50.222]                   signalCondition(cond)
[17:39:50.222]                 }
[17:39:50.222]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:50.222]                 "immediateCondition"))) {
[17:39:50.222]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:50.222]                   ...future.conditions[[length(...future.conditions) + 
[17:39:50.222]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:50.222]                   if (TRUE && !signal) {
[17:39:50.222]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:50.222]                     {
[17:39:50.222]                       inherits <- base::inherits
[17:39:50.222]                       invokeRestart <- base::invokeRestart
[17:39:50.222]                       is.null <- base::is.null
[17:39:50.222]                       muffled <- FALSE
[17:39:50.222]                       if (inherits(cond, "message")) {
[17:39:50.222]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:50.222]                         if (muffled) 
[17:39:50.222]                           invokeRestart("muffleMessage")
[17:39:50.222]                       }
[17:39:50.222]                       else if (inherits(cond, "warning")) {
[17:39:50.222]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:50.222]                         if (muffled) 
[17:39:50.222]                           invokeRestart("muffleWarning")
[17:39:50.222]                       }
[17:39:50.222]                       else if (inherits(cond, "condition")) {
[17:39:50.222]                         if (!is.null(pattern)) {
[17:39:50.222]                           computeRestarts <- base::computeRestarts
[17:39:50.222]                           grepl <- base::grepl
[17:39:50.222]                           restarts <- computeRestarts(cond)
[17:39:50.222]                           for (restart in restarts) {
[17:39:50.222]                             name <- restart$name
[17:39:50.222]                             if (is.null(name)) 
[17:39:50.222]                               next
[17:39:50.222]                             if (!grepl(pattern, name)) 
[17:39:50.222]                               next
[17:39:50.222]                             invokeRestart(restart)
[17:39:50.222]                             muffled <- TRUE
[17:39:50.222]                             break
[17:39:50.222]                           }
[17:39:50.222]                         }
[17:39:50.222]                       }
[17:39:50.222]                       invisible(muffled)
[17:39:50.222]                     }
[17:39:50.222]                     muffleCondition(cond, pattern = "^muffle")
[17:39:50.222]                   }
[17:39:50.222]                 }
[17:39:50.222]                 else {
[17:39:50.222]                   if (TRUE) {
[17:39:50.222]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:50.222]                     {
[17:39:50.222]                       inherits <- base::inherits
[17:39:50.222]                       invokeRestart <- base::invokeRestart
[17:39:50.222]                       is.null <- base::is.null
[17:39:50.222]                       muffled <- FALSE
[17:39:50.222]                       if (inherits(cond, "message")) {
[17:39:50.222]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:50.222]                         if (muffled) 
[17:39:50.222]                           invokeRestart("muffleMessage")
[17:39:50.222]                       }
[17:39:50.222]                       else if (inherits(cond, "warning")) {
[17:39:50.222]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:50.222]                         if (muffled) 
[17:39:50.222]                           invokeRestart("muffleWarning")
[17:39:50.222]                       }
[17:39:50.222]                       else if (inherits(cond, "condition")) {
[17:39:50.222]                         if (!is.null(pattern)) {
[17:39:50.222]                           computeRestarts <- base::computeRestarts
[17:39:50.222]                           grepl <- base::grepl
[17:39:50.222]                           restarts <- computeRestarts(cond)
[17:39:50.222]                           for (restart in restarts) {
[17:39:50.222]                             name <- restart$name
[17:39:50.222]                             if (is.null(name)) 
[17:39:50.222]                               next
[17:39:50.222]                             if (!grepl(pattern, name)) 
[17:39:50.222]                               next
[17:39:50.222]                             invokeRestart(restart)
[17:39:50.222]                             muffled <- TRUE
[17:39:50.222]                             break
[17:39:50.222]                           }
[17:39:50.222]                         }
[17:39:50.222]                       }
[17:39:50.222]                       invisible(muffled)
[17:39:50.222]                     }
[17:39:50.222]                     muffleCondition(cond, pattern = "^muffle")
[17:39:50.222]                   }
[17:39:50.222]                 }
[17:39:50.222]             }
[17:39:50.222]         }))
[17:39:50.222]     }, error = function(ex) {
[17:39:50.222]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:50.222]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:50.222]                 ...future.rng), started = ...future.startTime, 
[17:39:50.222]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:50.222]             version = "1.8"), class = "FutureResult")
[17:39:50.222]     }, finally = {
[17:39:50.222]         if (!identical(...future.workdir, getwd())) 
[17:39:50.222]             setwd(...future.workdir)
[17:39:50.222]         {
[17:39:50.222]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:50.222]                 ...future.oldOptions$nwarnings <- NULL
[17:39:50.222]             }
[17:39:50.222]             base::options(...future.oldOptions)
[17:39:50.222]             if (.Platform$OS.type == "windows") {
[17:39:50.222]                 old_names <- names(...future.oldEnvVars)
[17:39:50.222]                 envs <- base::Sys.getenv()
[17:39:50.222]                 names <- names(envs)
[17:39:50.222]                 common <- intersect(names, old_names)
[17:39:50.222]                 added <- setdiff(names, old_names)
[17:39:50.222]                 removed <- setdiff(old_names, names)
[17:39:50.222]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:50.222]                   envs[common]]
[17:39:50.222]                 NAMES <- toupper(changed)
[17:39:50.222]                 args <- list()
[17:39:50.222]                 for (kk in seq_along(NAMES)) {
[17:39:50.222]                   name <- changed[[kk]]
[17:39:50.222]                   NAME <- NAMES[[kk]]
[17:39:50.222]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:50.222]                     next
[17:39:50.222]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:50.222]                 }
[17:39:50.222]                 NAMES <- toupper(added)
[17:39:50.222]                 for (kk in seq_along(NAMES)) {
[17:39:50.222]                   name <- added[[kk]]
[17:39:50.222]                   NAME <- NAMES[[kk]]
[17:39:50.222]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:50.222]                     next
[17:39:50.222]                   args[[name]] <- ""
[17:39:50.222]                 }
[17:39:50.222]                 NAMES <- toupper(removed)
[17:39:50.222]                 for (kk in seq_along(NAMES)) {
[17:39:50.222]                   name <- removed[[kk]]
[17:39:50.222]                   NAME <- NAMES[[kk]]
[17:39:50.222]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:50.222]                     next
[17:39:50.222]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:50.222]                 }
[17:39:50.222]                 if (length(args) > 0) 
[17:39:50.222]                   base::do.call(base::Sys.setenv, args = args)
[17:39:50.222]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:50.222]             }
[17:39:50.222]             else {
[17:39:50.222]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:50.222]             }
[17:39:50.222]             {
[17:39:50.222]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:50.222]                   0L) {
[17:39:50.222]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:50.222]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:50.222]                   base::options(opts)
[17:39:50.222]                 }
[17:39:50.222]                 {
[17:39:50.222]                   {
[17:39:50.222]                     NULL
[17:39:50.222]                     RNGkind("Mersenne-Twister")
[17:39:50.222]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:50.222]                       inherits = FALSE)
[17:39:50.222]                   }
[17:39:50.222]                   options(future.plan = NULL)
[17:39:50.222]                   if (is.na(NA_character_)) 
[17:39:50.222]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:50.222]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:50.222]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:50.222]                     .init = FALSE)
[17:39:50.222]                 }
[17:39:50.222]             }
[17:39:50.222]         }
[17:39:50.222]     })
[17:39:50.222]     if (TRUE) {
[17:39:50.222]         base::sink(type = "output", split = FALSE)
[17:39:50.222]         if (TRUE) {
[17:39:50.222]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:50.222]         }
[17:39:50.222]         else {
[17:39:50.222]             ...future.result["stdout"] <- base::list(NULL)
[17:39:50.222]         }
[17:39:50.222]         base::close(...future.stdout)
[17:39:50.222]         ...future.stdout <- NULL
[17:39:50.222]     }
[17:39:50.222]     ...future.result$conditions <- ...future.conditions
[17:39:50.222]     ...future.result$finished <- base::Sys.time()
[17:39:50.222]     ...future.result
[17:39:50.222] }
[17:39:50.224] assign_globals() ...
[17:39:50.224] List of 1
[17:39:50.224]  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[17:39:50.224]   .. ..@ .Data     :function (x)  
[17:39:50.224]   .. ..@ generic   : chr "my_fcn"
[17:39:50.224]   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[17:39:50.224]   .. ..@ package   : chr ".GlobalEnv"
[17:39:50.224]   .. ..@ group     : list()
[17:39:50.224]   .. ..@ valueClass: chr(0) 
[17:39:50.224]   .. ..@ signature : chr "x"
[17:39:50.224]   .. ..@ default   : NULL
[17:39:50.224]   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[17:39:50.224]  - attr(*, "where")=List of 1
[17:39:50.224]   ..$ my_fcn:<environment: R_EmptyEnv> 
[17:39:50.224]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:39:50.224]  - attr(*, "resolved")= logi FALSE
[17:39:50.224]  - attr(*, "total_size")= num 3936
[17:39:50.224]  - attr(*, "already-done")= logi TRUE
[17:39:50.231] - reassign environment for ‘my_fcn’
[17:39:50.231] - copied ‘my_fcn’ to environment
[17:39:50.231] assign_globals() ... done
[17:39:50.231] plan(): Setting new future strategy stack:
[17:39:50.231] List of future strategies:
[17:39:50.231] 1. sequential:
[17:39:50.231]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:50.231]    - tweaked: FALSE
[17:39:50.231]    - call: NULL
[17:39:50.232] plan(): nbrOfWorkers() = 1
[17:39:50.233] plan(): Setting new future strategy stack:
[17:39:50.233] List of future strategies:
[17:39:50.233] 1. sequential:
[17:39:50.233]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:50.233]    - tweaked: FALSE
[17:39:50.233]    - call: plan(strategy)
[17:39:50.233] plan(): nbrOfWorkers() = 1
[17:39:50.233] SequentialFuture started (and completed)
[17:39:50.234] - Launch lazy future ... done
[17:39:50.234] run() for ‘SequentialFuture’ ... done
new("standardGeneric", .Data = function (x) 
standardGeneric("my_fcn"), generic = "my_fcn", package = ".GlobalEnv", 
    group = list(), valueClass = character(0), signature = "x", 
    default = NULL, skeleton = (function (x) 
    stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
        "my_fcn"), domain = NA))(x))
<environment: 0x562696dea998>
attr(,"generic")
[1] "my_fcn"
attr(,"generic")attr(,"package")
[1] ".GlobalEnv"
attr(,"package")
[1] ".GlobalEnv"
attr(,"group")
list()
attr(,"valueClass")
character(0)
attr(,"signature")
[1] "x"
attr(,"default")
`\001NULL\001`
attr(,"skeleton")
(function (x) 
stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
    "my_fcn"), domain = NA))(x)
attr(,"class")
[1] "standardGeneric"
attr(,"class")attr(,"package")
[1] "methods"
[17:39:50.234] getGlobalsAndPackages() ...
[17:39:50.236] Searching for globals...
[17:39:50.240] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[17:39:50.240] Searching for globals ... DONE
[17:39:50.241] Resolving globals: FALSE
[17:39:50.241] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[17:39:50.241] The total size of the 1 globals exported for future expression (‘{; my_fcn(3); }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[17:39:50.241] - globals: [1] ‘my_fcn’
[17:39:50.242] 
[17:39:50.242] getGlobalsAndPackages() ... DONE
[17:39:50.242] run() for ‘Future’ ...
[17:39:50.242] - state: ‘created’
[17:39:50.242] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:50.242] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:50.242] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:50.243]   - Field: ‘label’
[17:39:50.243]   - Field: ‘local’
[17:39:50.243]   - Field: ‘owner’
[17:39:50.243]   - Field: ‘envir’
[17:39:50.243]   - Field: ‘packages’
[17:39:50.243]   - Field: ‘gc’
[17:39:50.243]   - Field: ‘conditions’
[17:39:50.243]   - Field: ‘expr’
[17:39:50.243]   - Field: ‘uuid’
[17:39:50.243]   - Field: ‘seed’
[17:39:50.243]   - Field: ‘version’
[17:39:50.244]   - Field: ‘result’
[17:39:50.244]   - Field: ‘asynchronous’
[17:39:50.244]   - Field: ‘calls’
[17:39:50.244]   - Field: ‘globals’
[17:39:50.244]   - Field: ‘stdout’
[17:39:50.244]   - Field: ‘earlySignal’
[17:39:50.244]   - Field: ‘lazy’
[17:39:50.244]   - Field: ‘state’
[17:39:50.244] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:50.244] - Launch lazy future ...
[17:39:50.244] Packages needed by the future expression (n = 0): <none>
[17:39:50.245] Packages needed by future strategies (n = 0): <none>
[17:39:50.245] {
[17:39:50.245]     {
[17:39:50.245]         {
[17:39:50.245]             ...future.startTime <- base::Sys.time()
[17:39:50.245]             {
[17:39:50.245]                 {
[17:39:50.245]                   {
[17:39:50.245]                     base::local({
[17:39:50.245]                       has_future <- base::requireNamespace("future", 
[17:39:50.245]                         quietly = TRUE)
[17:39:50.245]                       if (has_future) {
[17:39:50.245]                         ns <- base::getNamespace("future")
[17:39:50.245]                         version <- ns[[".package"]][["version"]]
[17:39:50.245]                         if (is.null(version)) 
[17:39:50.245]                           version <- utils::packageVersion("future")
[17:39:50.245]                       }
[17:39:50.245]                       else {
[17:39:50.245]                         version <- NULL
[17:39:50.245]                       }
[17:39:50.245]                       if (!has_future || version < "1.8.0") {
[17:39:50.245]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:50.245]                           "", base::R.version$version.string), 
[17:39:50.245]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:50.245]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:50.245]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:50.245]                             "release", "version")], collapse = " "), 
[17:39:50.245]                           hostname = base::Sys.info()[["nodename"]])
[17:39:50.245]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:50.245]                           info)
[17:39:50.245]                         info <- base::paste(info, collapse = "; ")
[17:39:50.245]                         if (!has_future) {
[17:39:50.245]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:50.245]                             info)
[17:39:50.245]                         }
[17:39:50.245]                         else {
[17:39:50.245]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:50.245]                             info, version)
[17:39:50.245]                         }
[17:39:50.245]                         base::stop(msg)
[17:39:50.245]                       }
[17:39:50.245]                     })
[17:39:50.245]                   }
[17:39:50.245]                   ...future.strategy.old <- future::plan("list")
[17:39:50.245]                   options(future.plan = NULL)
[17:39:50.245]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:50.245]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:50.245]                 }
[17:39:50.245]                 ...future.workdir <- getwd()
[17:39:50.245]             }
[17:39:50.245]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:50.245]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:50.245]         }
[17:39:50.245]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:50.245]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:50.245]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:50.245]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:50.245]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:50.245]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:50.245]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:50.245]             base::names(...future.oldOptions))
[17:39:50.245]     }
[17:39:50.245]     if (FALSE) {
[17:39:50.245]     }
[17:39:50.245]     else {
[17:39:50.245]         if (TRUE) {
[17:39:50.245]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:50.245]                 open = "w")
[17:39:50.245]         }
[17:39:50.245]         else {
[17:39:50.245]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:50.245]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:50.245]         }
[17:39:50.245]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:50.245]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:50.245]             base::sink(type = "output", split = FALSE)
[17:39:50.245]             base::close(...future.stdout)
[17:39:50.245]         }, add = TRUE)
[17:39:50.245]     }
[17:39:50.245]     ...future.frame <- base::sys.nframe()
[17:39:50.245]     ...future.conditions <- base::list()
[17:39:50.245]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:50.245]     if (FALSE) {
[17:39:50.245]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:50.245]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:50.245]     }
[17:39:50.245]     ...future.result <- base::tryCatch({
[17:39:50.245]         base::withCallingHandlers({
[17:39:50.245]             ...future.value <- base::withVisible(base::local({
[17:39:50.245]                 my_fcn(3)
[17:39:50.245]             }))
[17:39:50.245]             future::FutureResult(value = ...future.value$value, 
[17:39:50.245]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:50.245]                   ...future.rng), globalenv = if (FALSE) 
[17:39:50.245]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:50.245]                     ...future.globalenv.names))
[17:39:50.245]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:50.245]         }, condition = base::local({
[17:39:50.245]             c <- base::c
[17:39:50.245]             inherits <- base::inherits
[17:39:50.245]             invokeRestart <- base::invokeRestart
[17:39:50.245]             length <- base::length
[17:39:50.245]             list <- base::list
[17:39:50.245]             seq.int <- base::seq.int
[17:39:50.245]             signalCondition <- base::signalCondition
[17:39:50.245]             sys.calls <- base::sys.calls
[17:39:50.245]             `[[` <- base::`[[`
[17:39:50.245]             `+` <- base::`+`
[17:39:50.245]             `<<-` <- base::`<<-`
[17:39:50.245]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:50.245]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:50.245]                   3L)]
[17:39:50.245]             }
[17:39:50.245]             function(cond) {
[17:39:50.245]                 is_error <- inherits(cond, "error")
[17:39:50.245]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:50.245]                   NULL)
[17:39:50.245]                 if (is_error) {
[17:39:50.245]                   sessionInformation <- function() {
[17:39:50.245]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:50.245]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:50.245]                       search = base::search(), system = base::Sys.info())
[17:39:50.245]                   }
[17:39:50.245]                   ...future.conditions[[length(...future.conditions) + 
[17:39:50.245]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:50.245]                     cond$call), session = sessionInformation(), 
[17:39:50.245]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:50.245]                   signalCondition(cond)
[17:39:50.245]                 }
[17:39:50.245]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:50.245]                 "immediateCondition"))) {
[17:39:50.245]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:50.245]                   ...future.conditions[[length(...future.conditions) + 
[17:39:50.245]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:50.245]                   if (TRUE && !signal) {
[17:39:50.245]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:50.245]                     {
[17:39:50.245]                       inherits <- base::inherits
[17:39:50.245]                       invokeRestart <- base::invokeRestart
[17:39:50.245]                       is.null <- base::is.null
[17:39:50.245]                       muffled <- FALSE
[17:39:50.245]                       if (inherits(cond, "message")) {
[17:39:50.245]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:50.245]                         if (muffled) 
[17:39:50.245]                           invokeRestart("muffleMessage")
[17:39:50.245]                       }
[17:39:50.245]                       else if (inherits(cond, "warning")) {
[17:39:50.245]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:50.245]                         if (muffled) 
[17:39:50.245]                           invokeRestart("muffleWarning")
[17:39:50.245]                       }
[17:39:50.245]                       else if (inherits(cond, "condition")) {
[17:39:50.245]                         if (!is.null(pattern)) {
[17:39:50.245]                           computeRestarts <- base::computeRestarts
[17:39:50.245]                           grepl <- base::grepl
[17:39:50.245]                           restarts <- computeRestarts(cond)
[17:39:50.245]                           for (restart in restarts) {
[17:39:50.245]                             name <- restart$name
[17:39:50.245]                             if (is.null(name)) 
[17:39:50.245]                               next
[17:39:50.245]                             if (!grepl(pattern, name)) 
[17:39:50.245]                               next
[17:39:50.245]                             invokeRestart(restart)
[17:39:50.245]                             muffled <- TRUE
[17:39:50.245]                             break
[17:39:50.245]                           }
[17:39:50.245]                         }
[17:39:50.245]                       }
[17:39:50.245]                       invisible(muffled)
[17:39:50.245]                     }
[17:39:50.245]                     muffleCondition(cond, pattern = "^muffle")
[17:39:50.245]                   }
[17:39:50.245]                 }
[17:39:50.245]                 else {
[17:39:50.245]                   if (TRUE) {
[17:39:50.245]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:50.245]                     {
[17:39:50.245]                       inherits <- base::inherits
[17:39:50.245]                       invokeRestart <- base::invokeRestart
[17:39:50.245]                       is.null <- base::is.null
[17:39:50.245]                       muffled <- FALSE
[17:39:50.245]                       if (inherits(cond, "message")) {
[17:39:50.245]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:50.245]                         if (muffled) 
[17:39:50.245]                           invokeRestart("muffleMessage")
[17:39:50.245]                       }
[17:39:50.245]                       else if (inherits(cond, "warning")) {
[17:39:50.245]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:50.245]                         if (muffled) 
[17:39:50.245]                           invokeRestart("muffleWarning")
[17:39:50.245]                       }
[17:39:50.245]                       else if (inherits(cond, "condition")) {
[17:39:50.245]                         if (!is.null(pattern)) {
[17:39:50.245]                           computeRestarts <- base::computeRestarts
[17:39:50.245]                           grepl <- base::grepl
[17:39:50.245]                           restarts <- computeRestarts(cond)
[17:39:50.245]                           for (restart in restarts) {
[17:39:50.245]                             name <- restart$name
[17:39:50.245]                             if (is.null(name)) 
[17:39:50.245]                               next
[17:39:50.245]                             if (!grepl(pattern, name)) 
[17:39:50.245]                               next
[17:39:50.245]                             invokeRestart(restart)
[17:39:50.245]                             muffled <- TRUE
[17:39:50.245]                             break
[17:39:50.245]                           }
[17:39:50.245]                         }
[17:39:50.245]                       }
[17:39:50.245]                       invisible(muffled)
[17:39:50.245]                     }
[17:39:50.245]                     muffleCondition(cond, pattern = "^muffle")
[17:39:50.245]                   }
[17:39:50.245]                 }
[17:39:50.245]             }
[17:39:50.245]         }))
[17:39:50.245]     }, error = function(ex) {
[17:39:50.245]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:50.245]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:50.245]                 ...future.rng), started = ...future.startTime, 
[17:39:50.245]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:50.245]             version = "1.8"), class = "FutureResult")
[17:39:50.245]     }, finally = {
[17:39:50.245]         if (!identical(...future.workdir, getwd())) 
[17:39:50.245]             setwd(...future.workdir)
[17:39:50.245]         {
[17:39:50.245]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:50.245]                 ...future.oldOptions$nwarnings <- NULL
[17:39:50.245]             }
[17:39:50.245]             base::options(...future.oldOptions)
[17:39:50.245]             if (.Platform$OS.type == "windows") {
[17:39:50.245]                 old_names <- names(...future.oldEnvVars)
[17:39:50.245]                 envs <- base::Sys.getenv()
[17:39:50.245]                 names <- names(envs)
[17:39:50.245]                 common <- intersect(names, old_names)
[17:39:50.245]                 added <- setdiff(names, old_names)
[17:39:50.245]                 removed <- setdiff(old_names, names)
[17:39:50.245]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:50.245]                   envs[common]]
[17:39:50.245]                 NAMES <- toupper(changed)
[17:39:50.245]                 args <- list()
[17:39:50.245]                 for (kk in seq_along(NAMES)) {
[17:39:50.245]                   name <- changed[[kk]]
[17:39:50.245]                   NAME <- NAMES[[kk]]
[17:39:50.245]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:50.245]                     next
[17:39:50.245]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:50.245]                 }
[17:39:50.245]                 NAMES <- toupper(added)
[17:39:50.245]                 for (kk in seq_along(NAMES)) {
[17:39:50.245]                   name <- added[[kk]]
[17:39:50.245]                   NAME <- NAMES[[kk]]
[17:39:50.245]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:50.245]                     next
[17:39:50.245]                   args[[name]] <- ""
[17:39:50.245]                 }
[17:39:50.245]                 NAMES <- toupper(removed)
[17:39:50.245]                 for (kk in seq_along(NAMES)) {
[17:39:50.245]                   name <- removed[[kk]]
[17:39:50.245]                   NAME <- NAMES[[kk]]
[17:39:50.245]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:50.245]                     next
[17:39:50.245]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:50.245]                 }
[17:39:50.245]                 if (length(args) > 0) 
[17:39:50.245]                   base::do.call(base::Sys.setenv, args = args)
[17:39:50.245]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:50.245]             }
[17:39:50.245]             else {
[17:39:50.245]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:50.245]             }
[17:39:50.245]             {
[17:39:50.245]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:50.245]                   0L) {
[17:39:50.245]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:50.245]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:50.245]                   base::options(opts)
[17:39:50.245]                 }
[17:39:50.245]                 {
[17:39:50.245]                   {
[17:39:50.245]                     NULL
[17:39:50.245]                     RNGkind("Mersenne-Twister")
[17:39:50.245]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:50.245]                       inherits = FALSE)
[17:39:50.245]                   }
[17:39:50.245]                   options(future.plan = NULL)
[17:39:50.245]                   if (is.na(NA_character_)) 
[17:39:50.245]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:50.245]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:50.245]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:50.245]                     .init = FALSE)
[17:39:50.245]                 }
[17:39:50.245]             }
[17:39:50.245]         }
[17:39:50.245]     })
[17:39:50.245]     if (TRUE) {
[17:39:50.245]         base::sink(type = "output", split = FALSE)
[17:39:50.245]         if (TRUE) {
[17:39:50.245]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:50.245]         }
[17:39:50.245]         else {
[17:39:50.245]             ...future.result["stdout"] <- base::list(NULL)
[17:39:50.245]         }
[17:39:50.245]         base::close(...future.stdout)
[17:39:50.245]         ...future.stdout <- NULL
[17:39:50.245]     }
[17:39:50.245]     ...future.result$conditions <- ...future.conditions
[17:39:50.245]     ...future.result$finished <- base::Sys.time()
[17:39:50.245]     ...future.result
[17:39:50.245] }
[17:39:50.246] assign_globals() ...
[17:39:50.247] List of 1
[17:39:50.247]  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[17:39:50.247]   .. ..@ .Data     :function (x)  
[17:39:50.247]   .. ..@ generic   : chr "my_fcn"
[17:39:50.247]   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[17:39:50.247]   .. ..@ package   : chr ".GlobalEnv"
[17:39:50.247]   .. ..@ group     : list()
[17:39:50.247]   .. ..@ valueClass: chr(0) 
[17:39:50.247]   .. ..@ signature : chr "x"
[17:39:50.247]   .. ..@ default   : NULL
[17:39:50.247]   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[17:39:50.247]  - attr(*, "where")=List of 1
[17:39:50.247]   ..$ my_fcn:<environment: R_EmptyEnv> 
[17:39:50.247]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:39:50.247]  - attr(*, "resolved")= logi FALSE
[17:39:50.247]  - attr(*, "total_size")= num 3936
[17:39:50.247]  - attr(*, "already-done")= logi TRUE
[17:39:50.251] - reassign environment for ‘my_fcn’
[17:39:50.251] - copied ‘my_fcn’ to environment
[17:39:50.251] assign_globals() ... done
[17:39:50.251] plan(): Setting new future strategy stack:
[17:39:50.251] List of future strategies:
[17:39:50.251] 1. sequential:
[17:39:50.251]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:50.251]    - tweaked: FALSE
[17:39:50.251]    - call: NULL
[17:39:50.252] plan(): nbrOfWorkers() = 1
[17:39:50.253] plan(): Setting new future strategy stack:
[17:39:50.254] List of future strategies:
[17:39:50.254] 1. sequential:
[17:39:50.254]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:50.254]    - tweaked: FALSE
[17:39:50.254]    - call: plan(strategy)
[17:39:50.254] plan(): nbrOfWorkers() = 1
[17:39:50.254] SequentialFuture started (and completed)
[17:39:50.254] signalConditions() ...
[17:39:50.254]  - include = ‘immediateCondition’
[17:39:50.254]  - exclude = 
[17:39:50.254]  - resignal = FALSE
[17:39:50.255]  - Number of conditions: 1
[17:39:50.255] signalConditions() ... done
[17:39:50.255] - Launch lazy future ... done
[17:39:50.255] run() for ‘SequentialFuture’ ... done
[17:39:50.255] signalConditions() ...
[17:39:50.255]  - include = ‘immediateCondition’
[17:39:50.255]  - exclude = 
[17:39:50.255]  - resignal = FALSE
[17:39:50.255]  - Number of conditions: 1
[17:39:50.255] signalConditions() ... done
[17:39:50.255] Future state: ‘finished’
[17:39:50.256] signalConditions() ...
[17:39:50.256]  - include = ‘condition’
[17:39:50.256]  - exclude = ‘immediateCondition’
[17:39:50.256]  - resignal = TRUE
[17:39:50.256]  - Number of conditions: 1
[17:39:50.256]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:39:50.256] signalConditions() ... done
<simpleError: unable to find an inherited method for function ‘my_fcn’ for signature ‘x = "numeric"’>
Type of future: multicore
[17:39:50.257] plan(): Setting new future strategy stack:
[17:39:50.257] List of future strategies:
[17:39:50.257] 1. multicore:
[17:39:50.257]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:39:50.257]    - tweaked: FALSE
[17:39:50.257]    - call: plan(strategy)
[17:39:50.261] plan(): nbrOfWorkers() = 2
[17:39:50.261] getGlobalsAndPackages() ...
[17:39:50.261] Searching for globals...
[17:39:50.265] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[17:39:50.265] Searching for globals ... DONE
[17:39:50.265] Resolving globals: FALSE
[17:39:50.266] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[17:39:50.266] The total size of the 1 globals exported for future expression (‘{; my_fcn; }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[17:39:50.266] - globals: [1] ‘my_fcn’
[17:39:50.266] 
[17:39:50.266] getGlobalsAndPackages() ... DONE
[17:39:50.267] run() for ‘Future’ ...
[17:39:50.267] - state: ‘created’
[17:39:50.267] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:39:50.271] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:50.271] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:39:50.271]   - Field: ‘label’
[17:39:50.271]   - Field: ‘local’
[17:39:50.271]   - Field: ‘owner’
[17:39:50.271]   - Field: ‘envir’
[17:39:50.271]   - Field: ‘workers’
[17:39:50.271]   - Field: ‘packages’
[17:39:50.271]   - Field: ‘gc’
[17:39:50.271]   - Field: ‘job’
[17:39:50.272]   - Field: ‘conditions’
[17:39:50.272]   - Field: ‘expr’
[17:39:50.272]   - Field: ‘uuid’
[17:39:50.272]   - Field: ‘seed’
[17:39:50.272]   - Field: ‘version’
[17:39:50.272]   - Field: ‘result’
[17:39:50.272]   - Field: ‘asynchronous’
[17:39:50.272]   - Field: ‘calls’
[17:39:50.272]   - Field: ‘globals’
[17:39:50.272]   - Field: ‘stdout’
[17:39:50.273]   - Field: ‘earlySignal’
[17:39:50.273]   - Field: ‘lazy’
[17:39:50.273]   - Field: ‘state’
[17:39:50.273] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:39:50.273] - Launch lazy future ...
[17:39:50.274] Packages needed by the future expression (n = 0): <none>
[17:39:50.274] Packages needed by future strategies (n = 0): <none>
[17:39:50.274] {
[17:39:50.274]     {
[17:39:50.274]         {
[17:39:50.274]             ...future.startTime <- base::Sys.time()
[17:39:50.274]             {
[17:39:50.274]                 {
[17:39:50.274]                   {
[17:39:50.274]                     {
[17:39:50.274]                       base::local({
[17:39:50.274]                         has_future <- base::requireNamespace("future", 
[17:39:50.274]                           quietly = TRUE)
[17:39:50.274]                         if (has_future) {
[17:39:50.274]                           ns <- base::getNamespace("future")
[17:39:50.274]                           version <- ns[[".package"]][["version"]]
[17:39:50.274]                           if (is.null(version)) 
[17:39:50.274]                             version <- utils::packageVersion("future")
[17:39:50.274]                         }
[17:39:50.274]                         else {
[17:39:50.274]                           version <- NULL
[17:39:50.274]                         }
[17:39:50.274]                         if (!has_future || version < "1.8.0") {
[17:39:50.274]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:50.274]                             "", base::R.version$version.string), 
[17:39:50.274]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:50.274]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:50.274]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:50.274]                               "release", "version")], collapse = " "), 
[17:39:50.274]                             hostname = base::Sys.info()[["nodename"]])
[17:39:50.274]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:50.274]                             info)
[17:39:50.274]                           info <- base::paste(info, collapse = "; ")
[17:39:50.274]                           if (!has_future) {
[17:39:50.274]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:50.274]                               info)
[17:39:50.274]                           }
[17:39:50.274]                           else {
[17:39:50.274]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:50.274]                               info, version)
[17:39:50.274]                           }
[17:39:50.274]                           base::stop(msg)
[17:39:50.274]                         }
[17:39:50.274]                       })
[17:39:50.274]                     }
[17:39:50.274]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:50.274]                     base::options(mc.cores = 1L)
[17:39:50.274]                   }
[17:39:50.274]                   ...future.strategy.old <- future::plan("list")
[17:39:50.274]                   options(future.plan = NULL)
[17:39:50.274]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:50.274]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:50.274]                 }
[17:39:50.274]                 ...future.workdir <- getwd()
[17:39:50.274]             }
[17:39:50.274]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:50.274]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:50.274]         }
[17:39:50.274]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:50.274]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:50.274]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:50.274]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:50.274]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:50.274]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:50.274]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:50.274]             base::names(...future.oldOptions))
[17:39:50.274]     }
[17:39:50.274]     if (FALSE) {
[17:39:50.274]     }
[17:39:50.274]     else {
[17:39:50.274]         if (TRUE) {
[17:39:50.274]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:50.274]                 open = "w")
[17:39:50.274]         }
[17:39:50.274]         else {
[17:39:50.274]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:50.274]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:50.274]         }
[17:39:50.274]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:50.274]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:50.274]             base::sink(type = "output", split = FALSE)
[17:39:50.274]             base::close(...future.stdout)
[17:39:50.274]         }, add = TRUE)
[17:39:50.274]     }
[17:39:50.274]     ...future.frame <- base::sys.nframe()
[17:39:50.274]     ...future.conditions <- base::list()
[17:39:50.274]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:50.274]     if (FALSE) {
[17:39:50.274]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:50.274]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:50.274]     }
[17:39:50.274]     ...future.result <- base::tryCatch({
[17:39:50.274]         base::withCallingHandlers({
[17:39:50.274]             ...future.value <- base::withVisible(base::local({
[17:39:50.274]                 withCallingHandlers({
[17:39:50.274]                   {
[17:39:50.274]                     my_fcn
[17:39:50.274]                   }
[17:39:50.274]                 }, immediateCondition = function(cond) {
[17:39:50.274]                   save_rds <- function (object, pathname, ...) 
[17:39:50.274]                   {
[17:39:50.274]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:39:50.274]                     if (file_test("-f", pathname_tmp)) {
[17:39:50.274]                       fi_tmp <- file.info(pathname_tmp)
[17:39:50.274]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:39:50.274]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:50.274]                         fi_tmp[["mtime"]])
[17:39:50.274]                     }
[17:39:50.274]                     tryCatch({
[17:39:50.274]                       saveRDS(object, file = pathname_tmp, ...)
[17:39:50.274]                     }, error = function(ex) {
[17:39:50.274]                       msg <- conditionMessage(ex)
[17:39:50.274]                       fi_tmp <- file.info(pathname_tmp)
[17:39:50.274]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:39:50.274]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:50.274]                         fi_tmp[["mtime"]], msg)
[17:39:50.274]                       ex$message <- msg
[17:39:50.274]                       stop(ex)
[17:39:50.274]                     })
[17:39:50.274]                     stopifnot(file_test("-f", pathname_tmp))
[17:39:50.274]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:39:50.274]                     if (!res || file_test("-f", pathname_tmp)) {
[17:39:50.274]                       fi_tmp <- file.info(pathname_tmp)
[17:39:50.274]                       fi <- file.info(pathname)
[17:39:50.274]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:39:50.274]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:50.274]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:39:50.274]                         fi[["size"]], fi[["mtime"]])
[17:39:50.274]                       stop(msg)
[17:39:50.274]                     }
[17:39:50.274]                     invisible(pathname)
[17:39:50.274]                   }
[17:39:50.274]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:39:50.274]                     rootPath = tempdir()) 
[17:39:50.274]                   {
[17:39:50.274]                     obj <- list(time = Sys.time(), condition = cond)
[17:39:50.274]                     file <- tempfile(pattern = class(cond)[1], 
[17:39:50.274]                       tmpdir = path, fileext = ".rds")
[17:39:50.274]                     save_rds(obj, file)
[17:39:50.274]                   }
[17:39:50.274]                   saveImmediateCondition(cond, path = "/tmp/Rtmp8XPobt/.future/immediateConditions")
[17:39:50.274]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:50.274]                   {
[17:39:50.274]                     inherits <- base::inherits
[17:39:50.274]                     invokeRestart <- base::invokeRestart
[17:39:50.274]                     is.null <- base::is.null
[17:39:50.274]                     muffled <- FALSE
[17:39:50.274]                     if (inherits(cond, "message")) {
[17:39:50.274]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:50.274]                       if (muffled) 
[17:39:50.274]                         invokeRestart("muffleMessage")
[17:39:50.274]                     }
[17:39:50.274]                     else if (inherits(cond, "warning")) {
[17:39:50.274]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:50.274]                       if (muffled) 
[17:39:50.274]                         invokeRestart("muffleWarning")
[17:39:50.274]                     }
[17:39:50.274]                     else if (inherits(cond, "condition")) {
[17:39:50.274]                       if (!is.null(pattern)) {
[17:39:50.274]                         computeRestarts <- base::computeRestarts
[17:39:50.274]                         grepl <- base::grepl
[17:39:50.274]                         restarts <- computeRestarts(cond)
[17:39:50.274]                         for (restart in restarts) {
[17:39:50.274]                           name <- restart$name
[17:39:50.274]                           if (is.null(name)) 
[17:39:50.274]                             next
[17:39:50.274]                           if (!grepl(pattern, name)) 
[17:39:50.274]                             next
[17:39:50.274]                           invokeRestart(restart)
[17:39:50.274]                           muffled <- TRUE
[17:39:50.274]                           break
[17:39:50.274]                         }
[17:39:50.274]                       }
[17:39:50.274]                     }
[17:39:50.274]                     invisible(muffled)
[17:39:50.274]                   }
[17:39:50.274]                   muffleCondition(cond)
[17:39:50.274]                 })
[17:39:50.274]             }))
[17:39:50.274]             future::FutureResult(value = ...future.value$value, 
[17:39:50.274]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:50.274]                   ...future.rng), globalenv = if (FALSE) 
[17:39:50.274]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:50.274]                     ...future.globalenv.names))
[17:39:50.274]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:50.274]         }, condition = base::local({
[17:39:50.274]             c <- base::c
[17:39:50.274]             inherits <- base::inherits
[17:39:50.274]             invokeRestart <- base::invokeRestart
[17:39:50.274]             length <- base::length
[17:39:50.274]             list <- base::list
[17:39:50.274]             seq.int <- base::seq.int
[17:39:50.274]             signalCondition <- base::signalCondition
[17:39:50.274]             sys.calls <- base::sys.calls
[17:39:50.274]             `[[` <- base::`[[`
[17:39:50.274]             `+` <- base::`+`
[17:39:50.274]             `<<-` <- base::`<<-`
[17:39:50.274]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:50.274]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:50.274]                   3L)]
[17:39:50.274]             }
[17:39:50.274]             function(cond) {
[17:39:50.274]                 is_error <- inherits(cond, "error")
[17:39:50.274]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:50.274]                   NULL)
[17:39:50.274]                 if (is_error) {
[17:39:50.274]                   sessionInformation <- function() {
[17:39:50.274]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:50.274]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:50.274]                       search = base::search(), system = base::Sys.info())
[17:39:50.274]                   }
[17:39:50.274]                   ...future.conditions[[length(...future.conditions) + 
[17:39:50.274]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:50.274]                     cond$call), session = sessionInformation(), 
[17:39:50.274]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:50.274]                   signalCondition(cond)
[17:39:50.274]                 }
[17:39:50.274]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:50.274]                 "immediateCondition"))) {
[17:39:50.274]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:50.274]                   ...future.conditions[[length(...future.conditions) + 
[17:39:50.274]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:50.274]                   if (TRUE && !signal) {
[17:39:50.274]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:50.274]                     {
[17:39:50.274]                       inherits <- base::inherits
[17:39:50.274]                       invokeRestart <- base::invokeRestart
[17:39:50.274]                       is.null <- base::is.null
[17:39:50.274]                       muffled <- FALSE
[17:39:50.274]                       if (inherits(cond, "message")) {
[17:39:50.274]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:50.274]                         if (muffled) 
[17:39:50.274]                           invokeRestart("muffleMessage")
[17:39:50.274]                       }
[17:39:50.274]                       else if (inherits(cond, "warning")) {
[17:39:50.274]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:50.274]                         if (muffled) 
[17:39:50.274]                           invokeRestart("muffleWarning")
[17:39:50.274]                       }
[17:39:50.274]                       else if (inherits(cond, "condition")) {
[17:39:50.274]                         if (!is.null(pattern)) {
[17:39:50.274]                           computeRestarts <- base::computeRestarts
[17:39:50.274]                           grepl <- base::grepl
[17:39:50.274]                           restarts <- computeRestarts(cond)
[17:39:50.274]                           for (restart in restarts) {
[17:39:50.274]                             name <- restart$name
[17:39:50.274]                             if (is.null(name)) 
[17:39:50.274]                               next
[17:39:50.274]                             if (!grepl(pattern, name)) 
[17:39:50.274]                               next
[17:39:50.274]                             invokeRestart(restart)
[17:39:50.274]                             muffled <- TRUE
[17:39:50.274]                             break
[17:39:50.274]                           }
[17:39:50.274]                         }
[17:39:50.274]                       }
[17:39:50.274]                       invisible(muffled)
[17:39:50.274]                     }
[17:39:50.274]                     muffleCondition(cond, pattern = "^muffle")
[17:39:50.274]                   }
[17:39:50.274]                 }
[17:39:50.274]                 else {
[17:39:50.274]                   if (TRUE) {
[17:39:50.274]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:50.274]                     {
[17:39:50.274]                       inherits <- base::inherits
[17:39:50.274]                       invokeRestart <- base::invokeRestart
[17:39:50.274]                       is.null <- base::is.null
[17:39:50.274]                       muffled <- FALSE
[17:39:50.274]                       if (inherits(cond, "message")) {
[17:39:50.274]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:50.274]                         if (muffled) 
[17:39:50.274]                           invokeRestart("muffleMessage")
[17:39:50.274]                       }
[17:39:50.274]                       else if (inherits(cond, "warning")) {
[17:39:50.274]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:50.274]                         if (muffled) 
[17:39:50.274]                           invokeRestart("muffleWarning")
[17:39:50.274]                       }
[17:39:50.274]                       else if (inherits(cond, "condition")) {
[17:39:50.274]                         if (!is.null(pattern)) {
[17:39:50.274]                           computeRestarts <- base::computeRestarts
[17:39:50.274]                           grepl <- base::grepl
[17:39:50.274]                           restarts <- computeRestarts(cond)
[17:39:50.274]                           for (restart in restarts) {
[17:39:50.274]                             name <- restart$name
[17:39:50.274]                             if (is.null(name)) 
[17:39:50.274]                               next
[17:39:50.274]                             if (!grepl(pattern, name)) 
[17:39:50.274]                               next
[17:39:50.274]                             invokeRestart(restart)
[17:39:50.274]                             muffled <- TRUE
[17:39:50.274]                             break
[17:39:50.274]                           }
[17:39:50.274]                         }
[17:39:50.274]                       }
[17:39:50.274]                       invisible(muffled)
[17:39:50.274]                     }
[17:39:50.274]                     muffleCondition(cond, pattern = "^muffle")
[17:39:50.274]                   }
[17:39:50.274]                 }
[17:39:50.274]             }
[17:39:50.274]         }))
[17:39:50.274]     }, error = function(ex) {
[17:39:50.274]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:50.274]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:50.274]                 ...future.rng), started = ...future.startTime, 
[17:39:50.274]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:50.274]             version = "1.8"), class = "FutureResult")
[17:39:50.274]     }, finally = {
[17:39:50.274]         if (!identical(...future.workdir, getwd())) 
[17:39:50.274]             setwd(...future.workdir)
[17:39:50.274]         {
[17:39:50.274]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:50.274]                 ...future.oldOptions$nwarnings <- NULL
[17:39:50.274]             }
[17:39:50.274]             base::options(...future.oldOptions)
[17:39:50.274]             if (.Platform$OS.type == "windows") {
[17:39:50.274]                 old_names <- names(...future.oldEnvVars)
[17:39:50.274]                 envs <- base::Sys.getenv()
[17:39:50.274]                 names <- names(envs)
[17:39:50.274]                 common <- intersect(names, old_names)
[17:39:50.274]                 added <- setdiff(names, old_names)
[17:39:50.274]                 removed <- setdiff(old_names, names)
[17:39:50.274]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:50.274]                   envs[common]]
[17:39:50.274]                 NAMES <- toupper(changed)
[17:39:50.274]                 args <- list()
[17:39:50.274]                 for (kk in seq_along(NAMES)) {
[17:39:50.274]                   name <- changed[[kk]]
[17:39:50.274]                   NAME <- NAMES[[kk]]
[17:39:50.274]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:50.274]                     next
[17:39:50.274]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:50.274]                 }
[17:39:50.274]                 NAMES <- toupper(added)
[17:39:50.274]                 for (kk in seq_along(NAMES)) {
[17:39:50.274]                   name <- added[[kk]]
[17:39:50.274]                   NAME <- NAMES[[kk]]
[17:39:50.274]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:50.274]                     next
[17:39:50.274]                   args[[name]] <- ""
[17:39:50.274]                 }
[17:39:50.274]                 NAMES <- toupper(removed)
[17:39:50.274]                 for (kk in seq_along(NAMES)) {
[17:39:50.274]                   name <- removed[[kk]]
[17:39:50.274]                   NAME <- NAMES[[kk]]
[17:39:50.274]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:50.274]                     next
[17:39:50.274]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:50.274]                 }
[17:39:50.274]                 if (length(args) > 0) 
[17:39:50.274]                   base::do.call(base::Sys.setenv, args = args)
[17:39:50.274]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:50.274]             }
[17:39:50.274]             else {
[17:39:50.274]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:50.274]             }
[17:39:50.274]             {
[17:39:50.274]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:50.274]                   0L) {
[17:39:50.274]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:50.274]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:50.274]                   base::options(opts)
[17:39:50.274]                 }
[17:39:50.274]                 {
[17:39:50.274]                   {
[17:39:50.274]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:50.274]                     NULL
[17:39:50.274]                   }
[17:39:50.274]                   options(future.plan = NULL)
[17:39:50.274]                   if (is.na(NA_character_)) 
[17:39:50.274]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:50.274]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:50.274]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:50.274]                     .init = FALSE)
[17:39:50.274]                 }
[17:39:50.274]             }
[17:39:50.274]         }
[17:39:50.274]     })
[17:39:50.274]     if (TRUE) {
[17:39:50.274]         base::sink(type = "output", split = FALSE)
[17:39:50.274]         if (TRUE) {
[17:39:50.274]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:50.274]         }
[17:39:50.274]         else {
[17:39:50.274]             ...future.result["stdout"] <- base::list(NULL)
[17:39:50.274]         }
[17:39:50.274]         base::close(...future.stdout)
[17:39:50.274]         ...future.stdout <- NULL
[17:39:50.274]     }
[17:39:50.274]     ...future.result$conditions <- ...future.conditions
[17:39:50.274]     ...future.result$finished <- base::Sys.time()
[17:39:50.274]     ...future.result
[17:39:50.274] }
[17:39:50.277] assign_globals() ...
[17:39:50.277] List of 1
[17:39:50.277]  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[17:39:50.277]   .. ..@ .Data     :function (x)  
[17:39:50.277]   .. ..@ generic   : chr "my_fcn"
[17:39:50.277]   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[17:39:50.277]   .. ..@ package   : chr ".GlobalEnv"
[17:39:50.277]   .. ..@ group     : list()
[17:39:50.277]   .. ..@ valueClass: chr(0) 
[17:39:50.277]   .. ..@ signature : chr "x"
[17:39:50.277]   .. ..@ default   : NULL
[17:39:50.277]   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[17:39:50.277]  - attr(*, "where")=List of 1
[17:39:50.277]   ..$ my_fcn:<environment: R_EmptyEnv> 
[17:39:50.277]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:39:50.277]  - attr(*, "resolved")= logi FALSE
[17:39:50.277]  - attr(*, "total_size")= num 3936
[17:39:50.277]  - attr(*, "already-done")= logi TRUE
[17:39:50.282] - reassign environment for ‘my_fcn’
[17:39:50.282] - copied ‘my_fcn’ to environment
[17:39:50.282] assign_globals() ... done
[17:39:50.282] requestCore(): workers = 2
[17:39:50.285] MulticoreFuture started
[17:39:50.285] - Launch lazy future ... done
[17:39:50.286] run() for ‘MulticoreFuture’ ... done
[17:39:50.286] plan(): Setting new future strategy stack:
[17:39:50.287] result() for MulticoreFuture ...
[17:39:50.286] List of future strategies:
[17:39:50.286] 1. sequential:
[17:39:50.286]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:50.286]    - tweaked: FALSE
[17:39:50.286]    - call: NULL
[17:39:50.287] plan(): nbrOfWorkers() = 1
[17:39:50.289] plan(): Setting new future strategy stack:
[17:39:50.289] List of future strategies:
[17:39:50.289] 1. multicore:
[17:39:50.289]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:39:50.289]    - tweaked: FALSE
[17:39:50.289]    - call: plan(strategy)
[17:39:50.294] plan(): nbrOfWorkers() = 2
[17:39:50.299] result() for MulticoreFuture ...
[17:39:50.300] result() for MulticoreFuture ... done
[17:39:50.300] result() for MulticoreFuture ... done
[17:39:50.300] result() for MulticoreFuture ...
[17:39:50.300] result() for MulticoreFuture ... done
new("standardGeneric", .Data = function (x) 
standardGeneric("my_fcn"), generic = "my_fcn", package = ".GlobalEnv", 
    group = list(), valueClass = character(0), signature = "x", 
    default = NULL, skeleton = (function (x) 
    stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
        "my_fcn"), domain = NA))(x))
<environment: 0x562696c313f0>
attr(,"generic")
[1] "my_fcn"
attr(,"generic")attr(,"package")
[1] ".GlobalEnv"
attr(,"package")
[1] ".GlobalEnv"
attr(,"group")
list()
attr(,"valueClass")
character(0)
attr(,"signature")
[1] "x"
attr(,"default")
`\001NULL\001`
attr(,"skeleton")
(function (x) 
stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
    "my_fcn"), domain = NA))(x)
attr(,"class")
[1] "standardGeneric"
attr(,"class")attr(,"package")
[1] "methods"
[17:39:50.300] getGlobalsAndPackages() ...
[17:39:50.301] Searching for globals...
[17:39:50.303] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[17:39:50.303] Searching for globals ... DONE
[17:39:50.304] Resolving globals: FALSE
[17:39:50.304] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[17:39:50.305] The total size of the 1 globals exported for future expression (‘{; my_fcn(3); }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[17:39:50.305] - globals: [1] ‘my_fcn’
[17:39:50.305] 
[17:39:50.305] getGlobalsAndPackages() ... DONE
[17:39:50.305] run() for ‘Future’ ...
[17:39:50.305] - state: ‘created’
[17:39:50.306] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:39:50.309] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:50.310] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:39:50.310]   - Field: ‘label’
[17:39:50.312]   - Field: ‘local’
[17:39:50.312]   - Field: ‘owner’
[17:39:50.312]   - Field: ‘envir’
[17:39:50.312]   - Field: ‘workers’
[17:39:50.313]   - Field: ‘packages’
[17:39:50.313]   - Field: ‘gc’
[17:39:50.313]   - Field: ‘job’
[17:39:50.313]   - Field: ‘conditions’
[17:39:50.313]   - Field: ‘expr’
[17:39:50.313]   - Field: ‘uuid’
[17:39:50.313]   - Field: ‘seed’
[17:39:50.313]   - Field: ‘version’
[17:39:50.314]   - Field: ‘result’
[17:39:50.314]   - Field: ‘asynchronous’
[17:39:50.314]   - Field: ‘calls’
[17:39:50.314]   - Field: ‘globals’
[17:39:50.314]   - Field: ‘stdout’
[17:39:50.314]   - Field: ‘earlySignal’
[17:39:50.314]   - Field: ‘lazy’
[17:39:50.314]   - Field: ‘state’
[17:39:50.315] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:39:50.315] - Launch lazy future ...
[17:39:50.315] Packages needed by the future expression (n = 0): <none>
[17:39:50.315] Packages needed by future strategies (n = 0): <none>
[17:39:50.316] {
[17:39:50.316]     {
[17:39:50.316]         {
[17:39:50.316]             ...future.startTime <- base::Sys.time()
[17:39:50.316]             {
[17:39:50.316]                 {
[17:39:50.316]                   {
[17:39:50.316]                     {
[17:39:50.316]                       base::local({
[17:39:50.316]                         has_future <- base::requireNamespace("future", 
[17:39:50.316]                           quietly = TRUE)
[17:39:50.316]                         if (has_future) {
[17:39:50.316]                           ns <- base::getNamespace("future")
[17:39:50.316]                           version <- ns[[".package"]][["version"]]
[17:39:50.316]                           if (is.null(version)) 
[17:39:50.316]                             version <- utils::packageVersion("future")
[17:39:50.316]                         }
[17:39:50.316]                         else {
[17:39:50.316]                           version <- NULL
[17:39:50.316]                         }
[17:39:50.316]                         if (!has_future || version < "1.8.0") {
[17:39:50.316]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:50.316]                             "", base::R.version$version.string), 
[17:39:50.316]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:50.316]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:50.316]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:50.316]                               "release", "version")], collapse = " "), 
[17:39:50.316]                             hostname = base::Sys.info()[["nodename"]])
[17:39:50.316]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:50.316]                             info)
[17:39:50.316]                           info <- base::paste(info, collapse = "; ")
[17:39:50.316]                           if (!has_future) {
[17:39:50.316]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:50.316]                               info)
[17:39:50.316]                           }
[17:39:50.316]                           else {
[17:39:50.316]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:50.316]                               info, version)
[17:39:50.316]                           }
[17:39:50.316]                           base::stop(msg)
[17:39:50.316]                         }
[17:39:50.316]                       })
[17:39:50.316]                     }
[17:39:50.316]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:50.316]                     base::options(mc.cores = 1L)
[17:39:50.316]                   }
[17:39:50.316]                   ...future.strategy.old <- future::plan("list")
[17:39:50.316]                   options(future.plan = NULL)
[17:39:50.316]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:50.316]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:50.316]                 }
[17:39:50.316]                 ...future.workdir <- getwd()
[17:39:50.316]             }
[17:39:50.316]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:50.316]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:50.316]         }
[17:39:50.316]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:50.316]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:50.316]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:50.316]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:50.316]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:50.316]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:50.316]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:50.316]             base::names(...future.oldOptions))
[17:39:50.316]     }
[17:39:50.316]     if (FALSE) {
[17:39:50.316]     }
[17:39:50.316]     else {
[17:39:50.316]         if (TRUE) {
[17:39:50.316]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:50.316]                 open = "w")
[17:39:50.316]         }
[17:39:50.316]         else {
[17:39:50.316]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:50.316]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:50.316]         }
[17:39:50.316]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:50.316]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:50.316]             base::sink(type = "output", split = FALSE)
[17:39:50.316]             base::close(...future.stdout)
[17:39:50.316]         }, add = TRUE)
[17:39:50.316]     }
[17:39:50.316]     ...future.frame <- base::sys.nframe()
[17:39:50.316]     ...future.conditions <- base::list()
[17:39:50.316]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:50.316]     if (FALSE) {
[17:39:50.316]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:50.316]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:50.316]     }
[17:39:50.316]     ...future.result <- base::tryCatch({
[17:39:50.316]         base::withCallingHandlers({
[17:39:50.316]             ...future.value <- base::withVisible(base::local({
[17:39:50.316]                 withCallingHandlers({
[17:39:50.316]                   {
[17:39:50.316]                     my_fcn(3)
[17:39:50.316]                   }
[17:39:50.316]                 }, immediateCondition = function(cond) {
[17:39:50.316]                   save_rds <- function (object, pathname, ...) 
[17:39:50.316]                   {
[17:39:50.316]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:39:50.316]                     if (file_test("-f", pathname_tmp)) {
[17:39:50.316]                       fi_tmp <- file.info(pathname_tmp)
[17:39:50.316]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:39:50.316]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:50.316]                         fi_tmp[["mtime"]])
[17:39:50.316]                     }
[17:39:50.316]                     tryCatch({
[17:39:50.316]                       saveRDS(object, file = pathname_tmp, ...)
[17:39:50.316]                     }, error = function(ex) {
[17:39:50.316]                       msg <- conditionMessage(ex)
[17:39:50.316]                       fi_tmp <- file.info(pathname_tmp)
[17:39:50.316]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:39:50.316]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:50.316]                         fi_tmp[["mtime"]], msg)
[17:39:50.316]                       ex$message <- msg
[17:39:50.316]                       stop(ex)
[17:39:50.316]                     })
[17:39:50.316]                     stopifnot(file_test("-f", pathname_tmp))
[17:39:50.316]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:39:50.316]                     if (!res || file_test("-f", pathname_tmp)) {
[17:39:50.316]                       fi_tmp <- file.info(pathname_tmp)
[17:39:50.316]                       fi <- file.info(pathname)
[17:39:50.316]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:39:50.316]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:50.316]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:39:50.316]                         fi[["size"]], fi[["mtime"]])
[17:39:50.316]                       stop(msg)
[17:39:50.316]                     }
[17:39:50.316]                     invisible(pathname)
[17:39:50.316]                   }
[17:39:50.316]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:39:50.316]                     rootPath = tempdir()) 
[17:39:50.316]                   {
[17:39:50.316]                     obj <- list(time = Sys.time(), condition = cond)
[17:39:50.316]                     file <- tempfile(pattern = class(cond)[1], 
[17:39:50.316]                       tmpdir = path, fileext = ".rds")
[17:39:50.316]                     save_rds(obj, file)
[17:39:50.316]                   }
[17:39:50.316]                   saveImmediateCondition(cond, path = "/tmp/Rtmp8XPobt/.future/immediateConditions")
[17:39:50.316]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:50.316]                   {
[17:39:50.316]                     inherits <- base::inherits
[17:39:50.316]                     invokeRestart <- base::invokeRestart
[17:39:50.316]                     is.null <- base::is.null
[17:39:50.316]                     muffled <- FALSE
[17:39:50.316]                     if (inherits(cond, "message")) {
[17:39:50.316]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:50.316]                       if (muffled) 
[17:39:50.316]                         invokeRestart("muffleMessage")
[17:39:50.316]                     }
[17:39:50.316]                     else if (inherits(cond, "warning")) {
[17:39:50.316]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:50.316]                       if (muffled) 
[17:39:50.316]                         invokeRestart("muffleWarning")
[17:39:50.316]                     }
[17:39:50.316]                     else if (inherits(cond, "condition")) {
[17:39:50.316]                       if (!is.null(pattern)) {
[17:39:50.316]                         computeRestarts <- base::computeRestarts
[17:39:50.316]                         grepl <- base::grepl
[17:39:50.316]                         restarts <- computeRestarts(cond)
[17:39:50.316]                         for (restart in restarts) {
[17:39:50.316]                           name <- restart$name
[17:39:50.316]                           if (is.null(name)) 
[17:39:50.316]                             next
[17:39:50.316]                           if (!grepl(pattern, name)) 
[17:39:50.316]                             next
[17:39:50.316]                           invokeRestart(restart)
[17:39:50.316]                           muffled <- TRUE
[17:39:50.316]                           break
[17:39:50.316]                         }
[17:39:50.316]                       }
[17:39:50.316]                     }
[17:39:50.316]                     invisible(muffled)
[17:39:50.316]                   }
[17:39:50.316]                   muffleCondition(cond)
[17:39:50.316]                 })
[17:39:50.316]             }))
[17:39:50.316]             future::FutureResult(value = ...future.value$value, 
[17:39:50.316]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:50.316]                   ...future.rng), globalenv = if (FALSE) 
[17:39:50.316]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:50.316]                     ...future.globalenv.names))
[17:39:50.316]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:50.316]         }, condition = base::local({
[17:39:50.316]             c <- base::c
[17:39:50.316]             inherits <- base::inherits
[17:39:50.316]             invokeRestart <- base::invokeRestart
[17:39:50.316]             length <- base::length
[17:39:50.316]             list <- base::list
[17:39:50.316]             seq.int <- base::seq.int
[17:39:50.316]             signalCondition <- base::signalCondition
[17:39:50.316]             sys.calls <- base::sys.calls
[17:39:50.316]             `[[` <- base::`[[`
[17:39:50.316]             `+` <- base::`+`
[17:39:50.316]             `<<-` <- base::`<<-`
[17:39:50.316]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:50.316]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:50.316]                   3L)]
[17:39:50.316]             }
[17:39:50.316]             function(cond) {
[17:39:50.316]                 is_error <- inherits(cond, "error")
[17:39:50.316]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:50.316]                   NULL)
[17:39:50.316]                 if (is_error) {
[17:39:50.316]                   sessionInformation <- function() {
[17:39:50.316]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:50.316]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:50.316]                       search = base::search(), system = base::Sys.info())
[17:39:50.316]                   }
[17:39:50.316]                   ...future.conditions[[length(...future.conditions) + 
[17:39:50.316]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:50.316]                     cond$call), session = sessionInformation(), 
[17:39:50.316]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:50.316]                   signalCondition(cond)
[17:39:50.316]                 }
[17:39:50.316]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:50.316]                 "immediateCondition"))) {
[17:39:50.316]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:50.316]                   ...future.conditions[[length(...future.conditions) + 
[17:39:50.316]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:50.316]                   if (TRUE && !signal) {
[17:39:50.316]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:50.316]                     {
[17:39:50.316]                       inherits <- base::inherits
[17:39:50.316]                       invokeRestart <- base::invokeRestart
[17:39:50.316]                       is.null <- base::is.null
[17:39:50.316]                       muffled <- FALSE
[17:39:50.316]                       if (inherits(cond, "message")) {
[17:39:50.316]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:50.316]                         if (muffled) 
[17:39:50.316]                           invokeRestart("muffleMessage")
[17:39:50.316]                       }
[17:39:50.316]                       else if (inherits(cond, "warning")) {
[17:39:50.316]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:50.316]                         if (muffled) 
[17:39:50.316]                           invokeRestart("muffleWarning")
[17:39:50.316]                       }
[17:39:50.316]                       else if (inherits(cond, "condition")) {
[17:39:50.316]                         if (!is.null(pattern)) {
[17:39:50.316]                           computeRestarts <- base::computeRestarts
[17:39:50.316]                           grepl <- base::grepl
[17:39:50.316]                           restarts <- computeRestarts(cond)
[17:39:50.316]                           for (restart in restarts) {
[17:39:50.316]                             name <- restart$name
[17:39:50.316]                             if (is.null(name)) 
[17:39:50.316]                               next
[17:39:50.316]                             if (!grepl(pattern, name)) 
[17:39:50.316]                               next
[17:39:50.316]                             invokeRestart(restart)
[17:39:50.316]                             muffled <- TRUE
[17:39:50.316]                             break
[17:39:50.316]                           }
[17:39:50.316]                         }
[17:39:50.316]                       }
[17:39:50.316]                       invisible(muffled)
[17:39:50.316]                     }
[17:39:50.316]                     muffleCondition(cond, pattern = "^muffle")
[17:39:50.316]                   }
[17:39:50.316]                 }
[17:39:50.316]                 else {
[17:39:50.316]                   if (TRUE) {
[17:39:50.316]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:50.316]                     {
[17:39:50.316]                       inherits <- base::inherits
[17:39:50.316]                       invokeRestart <- base::invokeRestart
[17:39:50.316]                       is.null <- base::is.null
[17:39:50.316]                       muffled <- FALSE
[17:39:50.316]                       if (inherits(cond, "message")) {
[17:39:50.316]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:50.316]                         if (muffled) 
[17:39:50.316]                           invokeRestart("muffleMessage")
[17:39:50.316]                       }
[17:39:50.316]                       else if (inherits(cond, "warning")) {
[17:39:50.316]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:50.316]                         if (muffled) 
[17:39:50.316]                           invokeRestart("muffleWarning")
[17:39:50.316]                       }
[17:39:50.316]                       else if (inherits(cond, "condition")) {
[17:39:50.316]                         if (!is.null(pattern)) {
[17:39:50.316]                           computeRestarts <- base::computeRestarts
[17:39:50.316]                           grepl <- base::grepl
[17:39:50.316]                           restarts <- computeRestarts(cond)
[17:39:50.316]                           for (restart in restarts) {
[17:39:50.316]                             name <- restart$name
[17:39:50.316]                             if (is.null(name)) 
[17:39:50.316]                               next
[17:39:50.316]                             if (!grepl(pattern, name)) 
[17:39:50.316]                               next
[17:39:50.316]                             invokeRestart(restart)
[17:39:50.316]                             muffled <- TRUE
[17:39:50.316]                             break
[17:39:50.316]                           }
[17:39:50.316]                         }
[17:39:50.316]                       }
[17:39:50.316]                       invisible(muffled)
[17:39:50.316]                     }
[17:39:50.316]                     muffleCondition(cond, pattern = "^muffle")
[17:39:50.316]                   }
[17:39:50.316]                 }
[17:39:50.316]             }
[17:39:50.316]         }))
[17:39:50.316]     }, error = function(ex) {
[17:39:50.316]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:50.316]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:50.316]                 ...future.rng), started = ...future.startTime, 
[17:39:50.316]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:50.316]             version = "1.8"), class = "FutureResult")
[17:39:50.316]     }, finally = {
[17:39:50.316]         if (!identical(...future.workdir, getwd())) 
[17:39:50.316]             setwd(...future.workdir)
[17:39:50.316]         {
[17:39:50.316]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:50.316]                 ...future.oldOptions$nwarnings <- NULL
[17:39:50.316]             }
[17:39:50.316]             base::options(...future.oldOptions)
[17:39:50.316]             if (.Platform$OS.type == "windows") {
[17:39:50.316]                 old_names <- names(...future.oldEnvVars)
[17:39:50.316]                 envs <- base::Sys.getenv()
[17:39:50.316]                 names <- names(envs)
[17:39:50.316]                 common <- intersect(names, old_names)
[17:39:50.316]                 added <- setdiff(names, old_names)
[17:39:50.316]                 removed <- setdiff(old_names, names)
[17:39:50.316]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:50.316]                   envs[common]]
[17:39:50.316]                 NAMES <- toupper(changed)
[17:39:50.316]                 args <- list()
[17:39:50.316]                 for (kk in seq_along(NAMES)) {
[17:39:50.316]                   name <- changed[[kk]]
[17:39:50.316]                   NAME <- NAMES[[kk]]
[17:39:50.316]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:50.316]                     next
[17:39:50.316]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:50.316]                 }
[17:39:50.316]                 NAMES <- toupper(added)
[17:39:50.316]                 for (kk in seq_along(NAMES)) {
[17:39:50.316]                   name <- added[[kk]]
[17:39:50.316]                   NAME <- NAMES[[kk]]
[17:39:50.316]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:50.316]                     next
[17:39:50.316]                   args[[name]] <- ""
[17:39:50.316]                 }
[17:39:50.316]                 NAMES <- toupper(removed)
[17:39:50.316]                 for (kk in seq_along(NAMES)) {
[17:39:50.316]                   name <- removed[[kk]]
[17:39:50.316]                   NAME <- NAMES[[kk]]
[17:39:50.316]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:50.316]                     next
[17:39:50.316]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:50.316]                 }
[17:39:50.316]                 if (length(args) > 0) 
[17:39:50.316]                   base::do.call(base::Sys.setenv, args = args)
[17:39:50.316]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:50.316]             }
[17:39:50.316]             else {
[17:39:50.316]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:50.316]             }
[17:39:50.316]             {
[17:39:50.316]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:50.316]                   0L) {
[17:39:50.316]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:50.316]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:50.316]                   base::options(opts)
[17:39:50.316]                 }
[17:39:50.316]                 {
[17:39:50.316]                   {
[17:39:50.316]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:50.316]                     NULL
[17:39:50.316]                   }
[17:39:50.316]                   options(future.plan = NULL)
[17:39:50.316]                   if (is.na(NA_character_)) 
[17:39:50.316]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:50.316]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:50.316]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:50.316]                     .init = FALSE)
[17:39:50.316]                 }
[17:39:50.316]             }
[17:39:50.316]         }
[17:39:50.316]     })
[17:39:50.316]     if (TRUE) {
[17:39:50.316]         base::sink(type = "output", split = FALSE)
[17:39:50.316]         if (TRUE) {
[17:39:50.316]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:50.316]         }
[17:39:50.316]         else {
[17:39:50.316]             ...future.result["stdout"] <- base::list(NULL)
[17:39:50.316]         }
[17:39:50.316]         base::close(...future.stdout)
[17:39:50.316]         ...future.stdout <- NULL
[17:39:50.316]     }
[17:39:50.316]     ...future.result$conditions <- ...future.conditions
[17:39:50.316]     ...future.result$finished <- base::Sys.time()
[17:39:50.316]     ...future.result
[17:39:50.316] }
[17:39:50.318] assign_globals() ...
[17:39:50.318] List of 1
[17:39:50.318]  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[17:39:50.318]   .. ..@ .Data     :function (x)  
[17:39:50.318]   .. ..@ generic   : chr "my_fcn"
[17:39:50.318]   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[17:39:50.318]   .. ..@ package   : chr ".GlobalEnv"
[17:39:50.318]   .. ..@ group     : list()
[17:39:50.318]   .. ..@ valueClass: chr(0) 
[17:39:50.318]   .. ..@ signature : chr "x"
[17:39:50.318]   .. ..@ default   : NULL
[17:39:50.318]   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[17:39:50.318]  - attr(*, "where")=List of 1
[17:39:50.318]   ..$ my_fcn:<environment: R_EmptyEnv> 
[17:39:50.318]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:39:50.318]  - attr(*, "resolved")= logi FALSE
[17:39:50.318]  - attr(*, "total_size")= num 3936
[17:39:50.318]  - attr(*, "already-done")= logi TRUE
[17:39:50.324] - reassign environment for ‘my_fcn’
[17:39:50.324] - copied ‘my_fcn’ to environment
[17:39:50.324] assign_globals() ... done
[17:39:50.324] requestCore(): workers = 2
[17:39:50.326] MulticoreFuture started
[17:39:50.326] - Launch lazy future ... done
[17:39:50.327] run() for ‘MulticoreFuture’ ... done
[17:39:50.327] result() for MulticoreFuture ...
[17:39:50.327] plan(): Setting new future strategy stack:
[17:39:50.327] List of future strategies:
[17:39:50.327] 1. sequential:
[17:39:50.327]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:50.327]    - tweaked: FALSE
[17:39:50.327]    - call: NULL
[17:39:50.328] plan(): nbrOfWorkers() = 1
[17:39:50.331] plan(): Setting new future strategy stack:
[17:39:50.331] List of future strategies:
[17:39:50.331] 1. multicore:
[17:39:50.331]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:39:50.331]    - tweaked: FALSE
[17:39:50.331]    - call: plan(strategy)
[17:39:50.336] plan(): nbrOfWorkers() = 2
[17:39:50.350] result() for MulticoreFuture ...
[17:39:50.350] result() for MulticoreFuture ... done
[17:39:50.350] signalConditions() ...
[17:39:50.350]  - include = ‘immediateCondition’
[17:39:50.350]  - exclude = 
[17:39:50.351]  - resignal = FALSE
[17:39:50.351]  - Number of conditions: 1
[17:39:50.351] signalConditions() ... done
[17:39:50.351] result() for MulticoreFuture ... done
[17:39:50.351] result() for MulticoreFuture ...
[17:39:50.352] result() for MulticoreFuture ... done
[17:39:50.352] signalConditions() ...
[17:39:50.352]  - include = ‘immediateCondition’
[17:39:50.352]  - exclude = 
[17:39:50.352]  - resignal = FALSE
[17:39:50.352]  - Number of conditions: 1
[17:39:50.352] signalConditions() ... done
[17:39:50.353] Future state: ‘finished’
[17:39:50.353] result() for MulticoreFuture ...
[17:39:50.353] result() for MulticoreFuture ... done
[17:39:50.353] signalConditions() ...
[17:39:50.353]  - include = ‘condition’
[17:39:50.353]  - exclude = ‘immediateCondition’
[17:39:50.353]  - resignal = TRUE
[17:39:50.353]  - Number of conditions: 1
[17:39:50.353]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:39:50.354] signalConditions() ... done
<simpleError: unable to find an inherited method for function ‘my_fcn’ for signature ‘x = "numeric"’>
Type of future: multisession
[17:39:50.354] plan(): Setting new future strategy stack:
[17:39:50.354] List of future strategies:
[17:39:50.354] 1. multisession:
[17:39:50.354]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:39:50.354]    - tweaked: FALSE
[17:39:50.354]    - call: plan(strategy)
[17:39:50.355] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:39:50.355] multisession:
[17:39:50.355] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:39:50.355] - tweaked: FALSE
[17:39:50.355] - call: plan(strategy)
[17:39:50.361] getGlobalsAndPackages() ...
[17:39:50.361] Not searching for globals
[17:39:50.362] - globals: [0] <none>
[17:39:50.362] getGlobalsAndPackages() ... DONE
[17:39:50.362] [local output] makeClusterPSOCK() ...
[17:39:50.409] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:39:50.410] [local output] Base port: 11443
[17:39:50.410] [local output] Getting setup options for 2 cluster nodes ...
[17:39:50.410] [local output]  - Node 1 of 2 ...
[17:39:50.410] [local output] localMachine=TRUE => revtunnel=FALSE

[17:39:50.411] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp8XPobt/worker.rank=1.parallelly.parent=44010.abeac2c6fa1.pid")), silent = TRUE)' -e 'file.exists("/tmp/Rtmp8XPobt/worker.rank=1.parallelly.parent=44010.abeac2c6fa1.pid")'’
[17:39:50.598] - Possible to infer worker's PID: TRUE
[17:39:50.599] [local output] Rscript port: 11443

[17:39:50.599] [local output]  - Node 2 of 2 ...
[17:39:50.599] [local output] localMachine=TRUE => revtunnel=FALSE

[17:39:50.600] [local output] Rscript port: 11443

[17:39:50.600] [local output] Getting setup options for 2 cluster nodes ... done
[17:39:50.601] [local output]  - Parallel setup requested for some PSOCK nodes
[17:39:50.601] [local output] Setting up PSOCK nodes in parallel
[17:39:50.601] List of 36
[17:39:50.601]  $ worker          : chr "localhost"
[17:39:50.601]   ..- attr(*, "localhost")= logi TRUE
[17:39:50.601]  $ master          : chr "localhost"
[17:39:50.601]  $ port            : int 11443
[17:39:50.601]  $ connectTimeout  : num 120
[17:39:50.601]  $ timeout         : num 2592000
[17:39:50.601]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:39:50.601]  $ homogeneous     : logi TRUE
[17:39:50.601]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:39:50.601]  $ rscript_envs    : NULL
[17:39:50.601]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:39:50.601]  $ rscript_startup : NULL
[17:39:50.601]  $ rscript_sh      : chr "sh"
[17:39:50.601]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:39:50.601]  $ methods         : logi TRUE
[17:39:50.601]  $ socketOptions   : chr "no-delay"
[17:39:50.601]  $ useXDR          : logi FALSE
[17:39:50.601]  $ outfile         : chr "/dev/null"
[17:39:50.601]  $ renice          : int NA
[17:39:50.601]  $ rshcmd          : NULL
[17:39:50.601]  $ user            : chr(0) 
[17:39:50.601]  $ revtunnel       : logi FALSE
[17:39:50.601]  $ rshlogfile      : NULL
[17:39:50.601]  $ rshopts         : chr(0) 
[17:39:50.601]  $ rank            : int 1
[17:39:50.601]  $ manual          : logi FALSE
[17:39:50.601]  $ dryrun          : logi FALSE
[17:39:50.601]  $ quiet           : logi FALSE
[17:39:50.601]  $ setup_strategy  : chr "parallel"
[17:39:50.601]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:39:50.601]  $ pidfile         : chr "/tmp/Rtmp8XPobt/worker.rank=1.parallelly.parent=44010.abeac2c6fa1.pid"
[17:39:50.601]  $ rshcmd_label    : NULL
[17:39:50.601]  $ rsh_call        : NULL
[17:39:50.601]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:39:50.601]  $ localMachine    : logi TRUE
[17:39:50.601]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:39:50.601]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:39:50.601]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:39:50.601]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:39:50.601]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:39:50.601]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:39:50.601]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:39:50.601]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:39:50.601]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:39:50.601]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:39:50.601]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:39:50.601]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:39:50.601]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:39:50.601]  $ arguments       :List of 28
[17:39:50.601]   ..$ worker          : chr "localhost"
[17:39:50.601]   ..$ master          : NULL
[17:39:50.601]   ..$ port            : int 11443
[17:39:50.601]   ..$ connectTimeout  : num 120
[17:39:50.601]   ..$ timeout         : num 2592000
[17:39:50.601]   ..$ rscript         : NULL
[17:39:50.601]   ..$ homogeneous     : NULL
[17:39:50.601]   ..$ rscript_args    : NULL
[17:39:50.601]   ..$ rscript_envs    : NULL
[17:39:50.601]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:39:50.601]   ..$ rscript_startup : NULL
[17:39:50.601]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:39:50.601]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:39:50.601]   ..$ methods         : logi TRUE
[17:39:50.601]   ..$ socketOptions   : chr "no-delay"
[17:39:50.601]   ..$ useXDR          : logi FALSE
[17:39:50.601]   ..$ outfile         : chr "/dev/null"
[17:39:50.601]   ..$ renice          : int NA
[17:39:50.601]   ..$ rshcmd          : NULL
[17:39:50.601]   ..$ user            : NULL
[17:39:50.601]   ..$ revtunnel       : logi NA
[17:39:50.601]   ..$ rshlogfile      : NULL
[17:39:50.601]   ..$ rshopts         : NULL
[17:39:50.601]   ..$ rank            : int 1
[17:39:50.601]   ..$ manual          : logi FALSE
[17:39:50.601]   ..$ dryrun          : logi FALSE
[17:39:50.601]   ..$ quiet           : logi FALSE
[17:39:50.601]   ..$ setup_strategy  : chr "parallel"
[17:39:50.601]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:39:50.618] [local output] System call to launch all workers:
[17:39:50.618] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp8XPobt/worker.rank=1.parallelly.parent=44010.abeac2c6fa1.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11443 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:39:50.618] [local output] Starting PSOCK main server
[17:39:50.624] [local output] Workers launched
[17:39:50.624] [local output] Waiting for workers to connect back
[17:39:50.624]  - [local output] 0 workers out of 2 ready
[17:39:50.867]  - [local output] 0 workers out of 2 ready
[17:39:50.867]  - [local output] 1 workers out of 2 ready
[17:39:50.868]  - [local output] 2 workers out of 2 ready
[17:39:50.868] [local output] Launching of workers completed
[17:39:50.868] [local output] Collecting session information from workers
[17:39:50.869] [local output]  - Worker #1 of 2
[17:39:50.869] [local output]  - Worker #2 of 2
[17:39:50.869] [local output] makeClusterPSOCK() ... done
[17:39:50.881] Packages needed by the future expression (n = 0): <none>
[17:39:50.881] Packages needed by future strategies (n = 0): <none>
[17:39:50.881] {
[17:39:50.881]     {
[17:39:50.881]         {
[17:39:50.881]             ...future.startTime <- base::Sys.time()
[17:39:50.881]             {
[17:39:50.881]                 {
[17:39:50.881]                   {
[17:39:50.881]                     {
[17:39:50.881]                       base::local({
[17:39:50.881]                         has_future <- base::requireNamespace("future", 
[17:39:50.881]                           quietly = TRUE)
[17:39:50.881]                         if (has_future) {
[17:39:50.881]                           ns <- base::getNamespace("future")
[17:39:50.881]                           version <- ns[[".package"]][["version"]]
[17:39:50.881]                           if (is.null(version)) 
[17:39:50.881]                             version <- utils::packageVersion("future")
[17:39:50.881]                         }
[17:39:50.881]                         else {
[17:39:50.881]                           version <- NULL
[17:39:50.881]                         }
[17:39:50.881]                         if (!has_future || version < "1.8.0") {
[17:39:50.881]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:50.881]                             "", base::R.version$version.string), 
[17:39:50.881]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:50.881]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:50.881]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:50.881]                               "release", "version")], collapse = " "), 
[17:39:50.881]                             hostname = base::Sys.info()[["nodename"]])
[17:39:50.881]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:50.881]                             info)
[17:39:50.881]                           info <- base::paste(info, collapse = "; ")
[17:39:50.881]                           if (!has_future) {
[17:39:50.881]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:50.881]                               info)
[17:39:50.881]                           }
[17:39:50.881]                           else {
[17:39:50.881]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:50.881]                               info, version)
[17:39:50.881]                           }
[17:39:50.881]                           base::stop(msg)
[17:39:50.881]                         }
[17:39:50.881]                       })
[17:39:50.881]                     }
[17:39:50.881]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:50.881]                     base::options(mc.cores = 1L)
[17:39:50.881]                   }
[17:39:50.881]                   ...future.strategy.old <- future::plan("list")
[17:39:50.881]                   options(future.plan = NULL)
[17:39:50.881]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:50.881]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:50.881]                 }
[17:39:50.881]                 ...future.workdir <- getwd()
[17:39:50.881]             }
[17:39:50.881]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:50.881]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:50.881]         }
[17:39:50.881]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:50.881]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:50.881]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:50.881]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:50.881]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:50.881]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:50.881]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:50.881]             base::names(...future.oldOptions))
[17:39:50.881]     }
[17:39:50.881]     if (FALSE) {
[17:39:50.881]     }
[17:39:50.881]     else {
[17:39:50.881]         if (TRUE) {
[17:39:50.881]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:50.881]                 open = "w")
[17:39:50.881]         }
[17:39:50.881]         else {
[17:39:50.881]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:50.881]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:50.881]         }
[17:39:50.881]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:50.881]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:50.881]             base::sink(type = "output", split = FALSE)
[17:39:50.881]             base::close(...future.stdout)
[17:39:50.881]         }, add = TRUE)
[17:39:50.881]     }
[17:39:50.881]     ...future.frame <- base::sys.nframe()
[17:39:50.881]     ...future.conditions <- base::list()
[17:39:50.881]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:50.881]     if (FALSE) {
[17:39:50.881]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:50.881]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:50.881]     }
[17:39:50.881]     ...future.result <- base::tryCatch({
[17:39:50.881]         base::withCallingHandlers({
[17:39:50.881]             ...future.value <- base::withVisible(base::local({
[17:39:50.881]                 ...future.makeSendCondition <- base::local({
[17:39:50.881]                   sendCondition <- NULL
[17:39:50.881]                   function(frame = 1L) {
[17:39:50.881]                     if (is.function(sendCondition)) 
[17:39:50.881]                       return(sendCondition)
[17:39:50.881]                     ns <- getNamespace("parallel")
[17:39:50.881]                     if (exists("sendData", mode = "function", 
[17:39:50.881]                       envir = ns)) {
[17:39:50.881]                       parallel_sendData <- get("sendData", mode = "function", 
[17:39:50.881]                         envir = ns)
[17:39:50.881]                       envir <- sys.frame(frame)
[17:39:50.881]                       master <- NULL
[17:39:50.881]                       while (!identical(envir, .GlobalEnv) && 
[17:39:50.881]                         !identical(envir, emptyenv())) {
[17:39:50.881]                         if (exists("master", mode = "list", envir = envir, 
[17:39:50.881]                           inherits = FALSE)) {
[17:39:50.881]                           master <- get("master", mode = "list", 
[17:39:50.881]                             envir = envir, inherits = FALSE)
[17:39:50.881]                           if (inherits(master, c("SOCKnode", 
[17:39:50.881]                             "SOCK0node"))) {
[17:39:50.881]                             sendCondition <<- function(cond) {
[17:39:50.881]                               data <- list(type = "VALUE", value = cond, 
[17:39:50.881]                                 success = TRUE)
[17:39:50.881]                               parallel_sendData(master, data)
[17:39:50.881]                             }
[17:39:50.881]                             return(sendCondition)
[17:39:50.881]                           }
[17:39:50.881]                         }
[17:39:50.881]                         frame <- frame + 1L
[17:39:50.881]                         envir <- sys.frame(frame)
[17:39:50.881]                       }
[17:39:50.881]                     }
[17:39:50.881]                     sendCondition <<- function(cond) NULL
[17:39:50.881]                   }
[17:39:50.881]                 })
[17:39:50.881]                 withCallingHandlers({
[17:39:50.881]                   NA
[17:39:50.881]                 }, immediateCondition = function(cond) {
[17:39:50.881]                   sendCondition <- ...future.makeSendCondition()
[17:39:50.881]                   sendCondition(cond)
[17:39:50.881]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:50.881]                   {
[17:39:50.881]                     inherits <- base::inherits
[17:39:50.881]                     invokeRestart <- base::invokeRestart
[17:39:50.881]                     is.null <- base::is.null
[17:39:50.881]                     muffled <- FALSE
[17:39:50.881]                     if (inherits(cond, "message")) {
[17:39:50.881]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:50.881]                       if (muffled) 
[17:39:50.881]                         invokeRestart("muffleMessage")
[17:39:50.881]                     }
[17:39:50.881]                     else if (inherits(cond, "warning")) {
[17:39:50.881]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:50.881]                       if (muffled) 
[17:39:50.881]                         invokeRestart("muffleWarning")
[17:39:50.881]                     }
[17:39:50.881]                     else if (inherits(cond, "condition")) {
[17:39:50.881]                       if (!is.null(pattern)) {
[17:39:50.881]                         computeRestarts <- base::computeRestarts
[17:39:50.881]                         grepl <- base::grepl
[17:39:50.881]                         restarts <- computeRestarts(cond)
[17:39:50.881]                         for (restart in restarts) {
[17:39:50.881]                           name <- restart$name
[17:39:50.881]                           if (is.null(name)) 
[17:39:50.881]                             next
[17:39:50.881]                           if (!grepl(pattern, name)) 
[17:39:50.881]                             next
[17:39:50.881]                           invokeRestart(restart)
[17:39:50.881]                           muffled <- TRUE
[17:39:50.881]                           break
[17:39:50.881]                         }
[17:39:50.881]                       }
[17:39:50.881]                     }
[17:39:50.881]                     invisible(muffled)
[17:39:50.881]                   }
[17:39:50.881]                   muffleCondition(cond)
[17:39:50.881]                 })
[17:39:50.881]             }))
[17:39:50.881]             future::FutureResult(value = ...future.value$value, 
[17:39:50.881]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:50.881]                   ...future.rng), globalenv = if (FALSE) 
[17:39:50.881]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:50.881]                     ...future.globalenv.names))
[17:39:50.881]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:50.881]         }, condition = base::local({
[17:39:50.881]             c <- base::c
[17:39:50.881]             inherits <- base::inherits
[17:39:50.881]             invokeRestart <- base::invokeRestart
[17:39:50.881]             length <- base::length
[17:39:50.881]             list <- base::list
[17:39:50.881]             seq.int <- base::seq.int
[17:39:50.881]             signalCondition <- base::signalCondition
[17:39:50.881]             sys.calls <- base::sys.calls
[17:39:50.881]             `[[` <- base::`[[`
[17:39:50.881]             `+` <- base::`+`
[17:39:50.881]             `<<-` <- base::`<<-`
[17:39:50.881]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:50.881]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:50.881]                   3L)]
[17:39:50.881]             }
[17:39:50.881]             function(cond) {
[17:39:50.881]                 is_error <- inherits(cond, "error")
[17:39:50.881]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:50.881]                   NULL)
[17:39:50.881]                 if (is_error) {
[17:39:50.881]                   sessionInformation <- function() {
[17:39:50.881]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:50.881]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:50.881]                       search = base::search(), system = base::Sys.info())
[17:39:50.881]                   }
[17:39:50.881]                   ...future.conditions[[length(...future.conditions) + 
[17:39:50.881]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:50.881]                     cond$call), session = sessionInformation(), 
[17:39:50.881]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:50.881]                   signalCondition(cond)
[17:39:50.881]                 }
[17:39:50.881]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:50.881]                 "immediateCondition"))) {
[17:39:50.881]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:50.881]                   ...future.conditions[[length(...future.conditions) + 
[17:39:50.881]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:50.881]                   if (TRUE && !signal) {
[17:39:50.881]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:50.881]                     {
[17:39:50.881]                       inherits <- base::inherits
[17:39:50.881]                       invokeRestart <- base::invokeRestart
[17:39:50.881]                       is.null <- base::is.null
[17:39:50.881]                       muffled <- FALSE
[17:39:50.881]                       if (inherits(cond, "message")) {
[17:39:50.881]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:50.881]                         if (muffled) 
[17:39:50.881]                           invokeRestart("muffleMessage")
[17:39:50.881]                       }
[17:39:50.881]                       else if (inherits(cond, "warning")) {
[17:39:50.881]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:50.881]                         if (muffled) 
[17:39:50.881]                           invokeRestart("muffleWarning")
[17:39:50.881]                       }
[17:39:50.881]                       else if (inherits(cond, "condition")) {
[17:39:50.881]                         if (!is.null(pattern)) {
[17:39:50.881]                           computeRestarts <- base::computeRestarts
[17:39:50.881]                           grepl <- base::grepl
[17:39:50.881]                           restarts <- computeRestarts(cond)
[17:39:50.881]                           for (restart in restarts) {
[17:39:50.881]                             name <- restart$name
[17:39:50.881]                             if (is.null(name)) 
[17:39:50.881]                               next
[17:39:50.881]                             if (!grepl(pattern, name)) 
[17:39:50.881]                               next
[17:39:50.881]                             invokeRestart(restart)
[17:39:50.881]                             muffled <- TRUE
[17:39:50.881]                             break
[17:39:50.881]                           }
[17:39:50.881]                         }
[17:39:50.881]                       }
[17:39:50.881]                       invisible(muffled)
[17:39:50.881]                     }
[17:39:50.881]                     muffleCondition(cond, pattern = "^muffle")
[17:39:50.881]                   }
[17:39:50.881]                 }
[17:39:50.881]                 else {
[17:39:50.881]                   if (TRUE) {
[17:39:50.881]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:50.881]                     {
[17:39:50.881]                       inherits <- base::inherits
[17:39:50.881]                       invokeRestart <- base::invokeRestart
[17:39:50.881]                       is.null <- base::is.null
[17:39:50.881]                       muffled <- FALSE
[17:39:50.881]                       if (inherits(cond, "message")) {
[17:39:50.881]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:50.881]                         if (muffled) 
[17:39:50.881]                           invokeRestart("muffleMessage")
[17:39:50.881]                       }
[17:39:50.881]                       else if (inherits(cond, "warning")) {
[17:39:50.881]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:50.881]                         if (muffled) 
[17:39:50.881]                           invokeRestart("muffleWarning")
[17:39:50.881]                       }
[17:39:50.881]                       else if (inherits(cond, "condition")) {
[17:39:50.881]                         if (!is.null(pattern)) {
[17:39:50.881]                           computeRestarts <- base::computeRestarts
[17:39:50.881]                           grepl <- base::grepl
[17:39:50.881]                           restarts <- computeRestarts(cond)
[17:39:50.881]                           for (restart in restarts) {
[17:39:50.881]                             name <- restart$name
[17:39:50.881]                             if (is.null(name)) 
[17:39:50.881]                               next
[17:39:50.881]                             if (!grepl(pattern, name)) 
[17:39:50.881]                               next
[17:39:50.881]                             invokeRestart(restart)
[17:39:50.881]                             muffled <- TRUE
[17:39:50.881]                             break
[17:39:50.881]                           }
[17:39:50.881]                         }
[17:39:50.881]                       }
[17:39:50.881]                       invisible(muffled)
[17:39:50.881]                     }
[17:39:50.881]                     muffleCondition(cond, pattern = "^muffle")
[17:39:50.881]                   }
[17:39:50.881]                 }
[17:39:50.881]             }
[17:39:50.881]         }))
[17:39:50.881]     }, error = function(ex) {
[17:39:50.881]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:50.881]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:50.881]                 ...future.rng), started = ...future.startTime, 
[17:39:50.881]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:50.881]             version = "1.8"), class = "FutureResult")
[17:39:50.881]     }, finally = {
[17:39:50.881]         if (!identical(...future.workdir, getwd())) 
[17:39:50.881]             setwd(...future.workdir)
[17:39:50.881]         {
[17:39:50.881]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:50.881]                 ...future.oldOptions$nwarnings <- NULL
[17:39:50.881]             }
[17:39:50.881]             base::options(...future.oldOptions)
[17:39:50.881]             if (.Platform$OS.type == "windows") {
[17:39:50.881]                 old_names <- names(...future.oldEnvVars)
[17:39:50.881]                 envs <- base::Sys.getenv()
[17:39:50.881]                 names <- names(envs)
[17:39:50.881]                 common <- intersect(names, old_names)
[17:39:50.881]                 added <- setdiff(names, old_names)
[17:39:50.881]                 removed <- setdiff(old_names, names)
[17:39:50.881]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:50.881]                   envs[common]]
[17:39:50.881]                 NAMES <- toupper(changed)
[17:39:50.881]                 args <- list()
[17:39:50.881]                 for (kk in seq_along(NAMES)) {
[17:39:50.881]                   name <- changed[[kk]]
[17:39:50.881]                   NAME <- NAMES[[kk]]
[17:39:50.881]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:50.881]                     next
[17:39:50.881]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:50.881]                 }
[17:39:50.881]                 NAMES <- toupper(added)
[17:39:50.881]                 for (kk in seq_along(NAMES)) {
[17:39:50.881]                   name <- added[[kk]]
[17:39:50.881]                   NAME <- NAMES[[kk]]
[17:39:50.881]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:50.881]                     next
[17:39:50.881]                   args[[name]] <- ""
[17:39:50.881]                 }
[17:39:50.881]                 NAMES <- toupper(removed)
[17:39:50.881]                 for (kk in seq_along(NAMES)) {
[17:39:50.881]                   name <- removed[[kk]]
[17:39:50.881]                   NAME <- NAMES[[kk]]
[17:39:50.881]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:50.881]                     next
[17:39:50.881]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:50.881]                 }
[17:39:50.881]                 if (length(args) > 0) 
[17:39:50.881]                   base::do.call(base::Sys.setenv, args = args)
[17:39:50.881]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:50.881]             }
[17:39:50.881]             else {
[17:39:50.881]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:50.881]             }
[17:39:50.881]             {
[17:39:50.881]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:50.881]                   0L) {
[17:39:50.881]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:50.881]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:50.881]                   base::options(opts)
[17:39:50.881]                 }
[17:39:50.881]                 {
[17:39:50.881]                   {
[17:39:50.881]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:50.881]                     NULL
[17:39:50.881]                   }
[17:39:50.881]                   options(future.plan = NULL)
[17:39:50.881]                   if (is.na(NA_character_)) 
[17:39:50.881]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:50.881]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:50.881]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:50.881]                     .init = FALSE)
[17:39:50.881]                 }
[17:39:50.881]             }
[17:39:50.881]         }
[17:39:50.881]     })
[17:39:50.881]     if (TRUE) {
[17:39:50.881]         base::sink(type = "output", split = FALSE)
[17:39:50.881]         if (TRUE) {
[17:39:50.881]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:50.881]         }
[17:39:50.881]         else {
[17:39:50.881]             ...future.result["stdout"] <- base::list(NULL)
[17:39:50.881]         }
[17:39:50.881]         base::close(...future.stdout)
[17:39:50.881]         ...future.stdout <- NULL
[17:39:50.881]     }
[17:39:50.881]     ...future.result$conditions <- ...future.conditions
[17:39:50.881]     ...future.result$finished <- base::Sys.time()
[17:39:50.881]     ...future.result
[17:39:50.881] }
[17:39:50.933] MultisessionFuture started
[17:39:50.933] result() for ClusterFuture ...
[17:39:50.934] receiveMessageFromWorker() for ClusterFuture ...
[17:39:50.934] - Validating connection of MultisessionFuture
[17:39:50.965] - received message: FutureResult
[17:39:50.965] - Received FutureResult
[17:39:50.965] - Erased future from FutureRegistry
[17:39:50.965] result() for ClusterFuture ...
[17:39:50.965] - result already collected: FutureResult
[17:39:50.966] result() for ClusterFuture ... done
[17:39:50.966] receiveMessageFromWorker() for ClusterFuture ... done
[17:39:50.966] result() for ClusterFuture ... done
[17:39:50.966] result() for ClusterFuture ...
[17:39:50.966] - result already collected: FutureResult
[17:39:50.966] result() for ClusterFuture ... done
[17:39:50.966] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:39:50.970] plan(): nbrOfWorkers() = 2
[17:39:50.970] getGlobalsAndPackages() ...
[17:39:50.970] Searching for globals...
[17:39:50.973] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[17:39:50.973] Searching for globals ... DONE
[17:39:50.974] Resolving globals: FALSE
[17:39:50.974] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[17:39:50.975] The total size of the 1 globals exported for future expression (‘{; my_fcn; }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[17:39:50.975] - globals: [1] ‘my_fcn’
[17:39:50.975] 
[17:39:50.975] getGlobalsAndPackages() ... DONE
[17:39:50.975] run() for ‘Future’ ...
[17:39:50.975] - state: ‘created’
[17:39:50.976] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:39:50.990] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:50.990] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:39:50.990]   - Field: ‘node’
[17:39:50.990]   - Field: ‘label’
[17:39:50.990]   - Field: ‘local’
[17:39:50.990]   - Field: ‘owner’
[17:39:50.990]   - Field: ‘envir’
[17:39:50.990]   - Field: ‘workers’
[17:39:50.990]   - Field: ‘packages’
[17:39:50.991]   - Field: ‘gc’
[17:39:50.991]   - Field: ‘conditions’
[17:39:50.991]   - Field: ‘persistent’
[17:39:50.991]   - Field: ‘expr’
[17:39:50.991]   - Field: ‘uuid’
[17:39:50.991]   - Field: ‘seed’
[17:39:50.991]   - Field: ‘version’
[17:39:50.991]   - Field: ‘result’
[17:39:50.991]   - Field: ‘asynchronous’
[17:39:50.992]   - Field: ‘calls’
[17:39:50.992]   - Field: ‘globals’
[17:39:50.992]   - Field: ‘stdout’
[17:39:50.992]   - Field: ‘earlySignal’
[17:39:50.992]   - Field: ‘lazy’
[17:39:50.992]   - Field: ‘state’
[17:39:50.992] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:39:50.992] - Launch lazy future ...
[17:39:50.993] Packages needed by the future expression (n = 0): <none>
[17:39:50.993] Packages needed by future strategies (n = 0): <none>
[17:39:50.993] {
[17:39:50.993]     {
[17:39:50.993]         {
[17:39:50.993]             ...future.startTime <- base::Sys.time()
[17:39:50.993]             {
[17:39:50.993]                 {
[17:39:50.993]                   {
[17:39:50.993]                     {
[17:39:50.993]                       base::local({
[17:39:50.993]                         has_future <- base::requireNamespace("future", 
[17:39:50.993]                           quietly = TRUE)
[17:39:50.993]                         if (has_future) {
[17:39:50.993]                           ns <- base::getNamespace("future")
[17:39:50.993]                           version <- ns[[".package"]][["version"]]
[17:39:50.993]                           if (is.null(version)) 
[17:39:50.993]                             version <- utils::packageVersion("future")
[17:39:50.993]                         }
[17:39:50.993]                         else {
[17:39:50.993]                           version <- NULL
[17:39:50.993]                         }
[17:39:50.993]                         if (!has_future || version < "1.8.0") {
[17:39:50.993]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:50.993]                             "", base::R.version$version.string), 
[17:39:50.993]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:50.993]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:50.993]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:50.993]                               "release", "version")], collapse = " "), 
[17:39:50.993]                             hostname = base::Sys.info()[["nodename"]])
[17:39:50.993]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:50.993]                             info)
[17:39:50.993]                           info <- base::paste(info, collapse = "; ")
[17:39:50.993]                           if (!has_future) {
[17:39:50.993]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:50.993]                               info)
[17:39:50.993]                           }
[17:39:50.993]                           else {
[17:39:50.993]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:50.993]                               info, version)
[17:39:50.993]                           }
[17:39:50.993]                           base::stop(msg)
[17:39:50.993]                         }
[17:39:50.993]                       })
[17:39:50.993]                     }
[17:39:50.993]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:50.993]                     base::options(mc.cores = 1L)
[17:39:50.993]                   }
[17:39:50.993]                   ...future.strategy.old <- future::plan("list")
[17:39:50.993]                   options(future.plan = NULL)
[17:39:50.993]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:50.993]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:50.993]                 }
[17:39:50.993]                 ...future.workdir <- getwd()
[17:39:50.993]             }
[17:39:50.993]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:50.993]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:50.993]         }
[17:39:50.993]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:50.993]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:50.993]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:50.993]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:50.993]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:50.993]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:50.993]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:50.993]             base::names(...future.oldOptions))
[17:39:50.993]     }
[17:39:50.993]     if (FALSE) {
[17:39:50.993]     }
[17:39:50.993]     else {
[17:39:50.993]         if (TRUE) {
[17:39:50.993]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:50.993]                 open = "w")
[17:39:50.993]         }
[17:39:50.993]         else {
[17:39:50.993]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:50.993]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:50.993]         }
[17:39:50.993]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:50.993]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:50.993]             base::sink(type = "output", split = FALSE)
[17:39:50.993]             base::close(...future.stdout)
[17:39:50.993]         }, add = TRUE)
[17:39:50.993]     }
[17:39:50.993]     ...future.frame <- base::sys.nframe()
[17:39:50.993]     ...future.conditions <- base::list()
[17:39:50.993]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:50.993]     if (FALSE) {
[17:39:50.993]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:50.993]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:50.993]     }
[17:39:50.993]     ...future.result <- base::tryCatch({
[17:39:50.993]         base::withCallingHandlers({
[17:39:50.993]             ...future.value <- base::withVisible(base::local({
[17:39:50.993]                 ...future.makeSendCondition <- base::local({
[17:39:50.993]                   sendCondition <- NULL
[17:39:50.993]                   function(frame = 1L) {
[17:39:50.993]                     if (is.function(sendCondition)) 
[17:39:50.993]                       return(sendCondition)
[17:39:50.993]                     ns <- getNamespace("parallel")
[17:39:50.993]                     if (exists("sendData", mode = "function", 
[17:39:50.993]                       envir = ns)) {
[17:39:50.993]                       parallel_sendData <- get("sendData", mode = "function", 
[17:39:50.993]                         envir = ns)
[17:39:50.993]                       envir <- sys.frame(frame)
[17:39:50.993]                       master <- NULL
[17:39:50.993]                       while (!identical(envir, .GlobalEnv) && 
[17:39:50.993]                         !identical(envir, emptyenv())) {
[17:39:50.993]                         if (exists("master", mode = "list", envir = envir, 
[17:39:50.993]                           inherits = FALSE)) {
[17:39:50.993]                           master <- get("master", mode = "list", 
[17:39:50.993]                             envir = envir, inherits = FALSE)
[17:39:50.993]                           if (inherits(master, c("SOCKnode", 
[17:39:50.993]                             "SOCK0node"))) {
[17:39:50.993]                             sendCondition <<- function(cond) {
[17:39:50.993]                               data <- list(type = "VALUE", value = cond, 
[17:39:50.993]                                 success = TRUE)
[17:39:50.993]                               parallel_sendData(master, data)
[17:39:50.993]                             }
[17:39:50.993]                             return(sendCondition)
[17:39:50.993]                           }
[17:39:50.993]                         }
[17:39:50.993]                         frame <- frame + 1L
[17:39:50.993]                         envir <- sys.frame(frame)
[17:39:50.993]                       }
[17:39:50.993]                     }
[17:39:50.993]                     sendCondition <<- function(cond) NULL
[17:39:50.993]                   }
[17:39:50.993]                 })
[17:39:50.993]                 withCallingHandlers({
[17:39:50.993]                   {
[17:39:50.993]                     my_fcn
[17:39:50.993]                   }
[17:39:50.993]                 }, immediateCondition = function(cond) {
[17:39:50.993]                   sendCondition <- ...future.makeSendCondition()
[17:39:50.993]                   sendCondition(cond)
[17:39:50.993]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:50.993]                   {
[17:39:50.993]                     inherits <- base::inherits
[17:39:50.993]                     invokeRestart <- base::invokeRestart
[17:39:50.993]                     is.null <- base::is.null
[17:39:50.993]                     muffled <- FALSE
[17:39:50.993]                     if (inherits(cond, "message")) {
[17:39:50.993]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:50.993]                       if (muffled) 
[17:39:50.993]                         invokeRestart("muffleMessage")
[17:39:50.993]                     }
[17:39:50.993]                     else if (inherits(cond, "warning")) {
[17:39:50.993]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:50.993]                       if (muffled) 
[17:39:50.993]                         invokeRestart("muffleWarning")
[17:39:50.993]                     }
[17:39:50.993]                     else if (inherits(cond, "condition")) {
[17:39:50.993]                       if (!is.null(pattern)) {
[17:39:50.993]                         computeRestarts <- base::computeRestarts
[17:39:50.993]                         grepl <- base::grepl
[17:39:50.993]                         restarts <- computeRestarts(cond)
[17:39:50.993]                         for (restart in restarts) {
[17:39:50.993]                           name <- restart$name
[17:39:50.993]                           if (is.null(name)) 
[17:39:50.993]                             next
[17:39:50.993]                           if (!grepl(pattern, name)) 
[17:39:50.993]                             next
[17:39:50.993]                           invokeRestart(restart)
[17:39:50.993]                           muffled <- TRUE
[17:39:50.993]                           break
[17:39:50.993]                         }
[17:39:50.993]                       }
[17:39:50.993]                     }
[17:39:50.993]                     invisible(muffled)
[17:39:50.993]                   }
[17:39:50.993]                   muffleCondition(cond)
[17:39:50.993]                 })
[17:39:50.993]             }))
[17:39:50.993]             future::FutureResult(value = ...future.value$value, 
[17:39:50.993]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:50.993]                   ...future.rng), globalenv = if (FALSE) 
[17:39:50.993]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:50.993]                     ...future.globalenv.names))
[17:39:50.993]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:50.993]         }, condition = base::local({
[17:39:50.993]             c <- base::c
[17:39:50.993]             inherits <- base::inherits
[17:39:50.993]             invokeRestart <- base::invokeRestart
[17:39:50.993]             length <- base::length
[17:39:50.993]             list <- base::list
[17:39:50.993]             seq.int <- base::seq.int
[17:39:50.993]             signalCondition <- base::signalCondition
[17:39:50.993]             sys.calls <- base::sys.calls
[17:39:50.993]             `[[` <- base::`[[`
[17:39:50.993]             `+` <- base::`+`
[17:39:50.993]             `<<-` <- base::`<<-`
[17:39:50.993]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:50.993]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:50.993]                   3L)]
[17:39:50.993]             }
[17:39:50.993]             function(cond) {
[17:39:50.993]                 is_error <- inherits(cond, "error")
[17:39:50.993]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:50.993]                   NULL)
[17:39:50.993]                 if (is_error) {
[17:39:50.993]                   sessionInformation <- function() {
[17:39:50.993]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:50.993]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:50.993]                       search = base::search(), system = base::Sys.info())
[17:39:50.993]                   }
[17:39:50.993]                   ...future.conditions[[length(...future.conditions) + 
[17:39:50.993]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:50.993]                     cond$call), session = sessionInformation(), 
[17:39:50.993]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:50.993]                   signalCondition(cond)
[17:39:50.993]                 }
[17:39:50.993]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:50.993]                 "immediateCondition"))) {
[17:39:50.993]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:50.993]                   ...future.conditions[[length(...future.conditions) + 
[17:39:50.993]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:50.993]                   if (TRUE && !signal) {
[17:39:50.993]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:50.993]                     {
[17:39:50.993]                       inherits <- base::inherits
[17:39:50.993]                       invokeRestart <- base::invokeRestart
[17:39:50.993]                       is.null <- base::is.null
[17:39:50.993]                       muffled <- FALSE
[17:39:50.993]                       if (inherits(cond, "message")) {
[17:39:50.993]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:50.993]                         if (muffled) 
[17:39:50.993]                           invokeRestart("muffleMessage")
[17:39:50.993]                       }
[17:39:50.993]                       else if (inherits(cond, "warning")) {
[17:39:50.993]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:50.993]                         if (muffled) 
[17:39:50.993]                           invokeRestart("muffleWarning")
[17:39:50.993]                       }
[17:39:50.993]                       else if (inherits(cond, "condition")) {
[17:39:50.993]                         if (!is.null(pattern)) {
[17:39:50.993]                           computeRestarts <- base::computeRestarts
[17:39:50.993]                           grepl <- base::grepl
[17:39:50.993]                           restarts <- computeRestarts(cond)
[17:39:50.993]                           for (restart in restarts) {
[17:39:50.993]                             name <- restart$name
[17:39:50.993]                             if (is.null(name)) 
[17:39:50.993]                               next
[17:39:50.993]                             if (!grepl(pattern, name)) 
[17:39:50.993]                               next
[17:39:50.993]                             invokeRestart(restart)
[17:39:50.993]                             muffled <- TRUE
[17:39:50.993]                             break
[17:39:50.993]                           }
[17:39:50.993]                         }
[17:39:50.993]                       }
[17:39:50.993]                       invisible(muffled)
[17:39:50.993]                     }
[17:39:50.993]                     muffleCondition(cond, pattern = "^muffle")
[17:39:50.993]                   }
[17:39:50.993]                 }
[17:39:50.993]                 else {
[17:39:50.993]                   if (TRUE) {
[17:39:50.993]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:50.993]                     {
[17:39:50.993]                       inherits <- base::inherits
[17:39:50.993]                       invokeRestart <- base::invokeRestart
[17:39:50.993]                       is.null <- base::is.null
[17:39:50.993]                       muffled <- FALSE
[17:39:50.993]                       if (inherits(cond, "message")) {
[17:39:50.993]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:50.993]                         if (muffled) 
[17:39:50.993]                           invokeRestart("muffleMessage")
[17:39:50.993]                       }
[17:39:50.993]                       else if (inherits(cond, "warning")) {
[17:39:50.993]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:50.993]                         if (muffled) 
[17:39:50.993]                           invokeRestart("muffleWarning")
[17:39:50.993]                       }
[17:39:50.993]                       else if (inherits(cond, "condition")) {
[17:39:50.993]                         if (!is.null(pattern)) {
[17:39:50.993]                           computeRestarts <- base::computeRestarts
[17:39:50.993]                           grepl <- base::grepl
[17:39:50.993]                           restarts <- computeRestarts(cond)
[17:39:50.993]                           for (restart in restarts) {
[17:39:50.993]                             name <- restart$name
[17:39:50.993]                             if (is.null(name)) 
[17:39:50.993]                               next
[17:39:50.993]                             if (!grepl(pattern, name)) 
[17:39:50.993]                               next
[17:39:50.993]                             invokeRestart(restart)
[17:39:50.993]                             muffled <- TRUE
[17:39:50.993]                             break
[17:39:50.993]                           }
[17:39:50.993]                         }
[17:39:50.993]                       }
[17:39:50.993]                       invisible(muffled)
[17:39:50.993]                     }
[17:39:50.993]                     muffleCondition(cond, pattern = "^muffle")
[17:39:50.993]                   }
[17:39:50.993]                 }
[17:39:50.993]             }
[17:39:50.993]         }))
[17:39:50.993]     }, error = function(ex) {
[17:39:50.993]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:50.993]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:50.993]                 ...future.rng), started = ...future.startTime, 
[17:39:50.993]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:50.993]             version = "1.8"), class = "FutureResult")
[17:39:50.993]     }, finally = {
[17:39:50.993]         if (!identical(...future.workdir, getwd())) 
[17:39:50.993]             setwd(...future.workdir)
[17:39:50.993]         {
[17:39:50.993]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:50.993]                 ...future.oldOptions$nwarnings <- NULL
[17:39:50.993]             }
[17:39:50.993]             base::options(...future.oldOptions)
[17:39:50.993]             if (.Platform$OS.type == "windows") {
[17:39:50.993]                 old_names <- names(...future.oldEnvVars)
[17:39:50.993]                 envs <- base::Sys.getenv()
[17:39:50.993]                 names <- names(envs)
[17:39:50.993]                 common <- intersect(names, old_names)
[17:39:50.993]                 added <- setdiff(names, old_names)
[17:39:50.993]                 removed <- setdiff(old_names, names)
[17:39:50.993]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:50.993]                   envs[common]]
[17:39:50.993]                 NAMES <- toupper(changed)
[17:39:50.993]                 args <- list()
[17:39:50.993]                 for (kk in seq_along(NAMES)) {
[17:39:50.993]                   name <- changed[[kk]]
[17:39:50.993]                   NAME <- NAMES[[kk]]
[17:39:50.993]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:50.993]                     next
[17:39:50.993]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:50.993]                 }
[17:39:50.993]                 NAMES <- toupper(added)
[17:39:50.993]                 for (kk in seq_along(NAMES)) {
[17:39:50.993]                   name <- added[[kk]]
[17:39:50.993]                   NAME <- NAMES[[kk]]
[17:39:50.993]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:50.993]                     next
[17:39:50.993]                   args[[name]] <- ""
[17:39:50.993]                 }
[17:39:50.993]                 NAMES <- toupper(removed)
[17:39:50.993]                 for (kk in seq_along(NAMES)) {
[17:39:50.993]                   name <- removed[[kk]]
[17:39:50.993]                   NAME <- NAMES[[kk]]
[17:39:50.993]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:50.993]                     next
[17:39:50.993]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:50.993]                 }
[17:39:50.993]                 if (length(args) > 0) 
[17:39:50.993]                   base::do.call(base::Sys.setenv, args = args)
[17:39:50.993]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:50.993]             }
[17:39:50.993]             else {
[17:39:50.993]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:50.993]             }
[17:39:50.993]             {
[17:39:50.993]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:50.993]                   0L) {
[17:39:50.993]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:50.993]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:50.993]                   base::options(opts)
[17:39:50.993]                 }
[17:39:50.993]                 {
[17:39:50.993]                   {
[17:39:50.993]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:50.993]                     NULL
[17:39:50.993]                   }
[17:39:50.993]                   options(future.plan = NULL)
[17:39:50.993]                   if (is.na(NA_character_)) 
[17:39:50.993]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:50.993]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:50.993]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:50.993]                     .init = FALSE)
[17:39:50.993]                 }
[17:39:50.993]             }
[17:39:50.993]         }
[17:39:50.993]     })
[17:39:50.993]     if (TRUE) {
[17:39:50.993]         base::sink(type = "output", split = FALSE)
[17:39:50.993]         if (TRUE) {
[17:39:50.993]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:50.993]         }
[17:39:50.993]         else {
[17:39:50.993]             ...future.result["stdout"] <- base::list(NULL)
[17:39:50.993]         }
[17:39:50.993]         base::close(...future.stdout)
[17:39:50.993]         ...future.stdout <- NULL
[17:39:50.993]     }
[17:39:50.993]     ...future.result$conditions <- ...future.conditions
[17:39:50.993]     ...future.result$finished <- base::Sys.time()
[17:39:50.993]     ...future.result
[17:39:50.993] }
[17:39:50.996] Exporting 1 global objects (3.84 KiB) to cluster node #1 ...
[17:39:50.996] Exporting ‘my_fcn’ (3.84 KiB) to cluster node #1 ...
[17:39:50.997] Exporting ‘my_fcn’ (3.84 KiB) to cluster node #1 ... DONE
[17:39:50.997] Exporting 1 global objects (3.84 KiB) to cluster node #1 ... DONE
[17:39:50.998] MultisessionFuture started
[17:39:50.998] - Launch lazy future ... done
[17:39:50.998] run() for ‘MultisessionFuture’ ... done
[17:39:50.998] result() for ClusterFuture ...
[17:39:50.998] receiveMessageFromWorker() for ClusterFuture ...
[17:39:50.999] - Validating connection of MultisessionFuture
[17:39:51.000] - received message: FutureResult
[17:39:51.000] - Received FutureResult
[17:39:51.000] - Erased future from FutureRegistry
[17:39:51.000] result() for ClusterFuture ...
[17:39:51.000] - result already collected: FutureResult
[17:39:51.000] result() for ClusterFuture ... done
[17:39:51.000] receiveMessageFromWorker() for ClusterFuture ... done
[17:39:51.001] result() for ClusterFuture ... done
[17:39:51.001] result() for ClusterFuture ...
[17:39:51.001] - result already collected: FutureResult
[17:39:51.001] result() for ClusterFuture ... done
new("standardGeneric", .Data = function (x) 
standardGeneric("my_fcn"), generic = "my_fcn", package = ".GlobalEnv", 
    group = list(), valueClass = character(0), signature = "x", 
    default = NULL, skeleton = (function (x) 
    stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
        "my_fcn"), domain = NA))(x))
<environment: 0x5626987f9768>
attr(,"generic")
[1] "my_fcn"
attr(,"generic")attr(,"package")
[1] ".GlobalEnv"
attr(,"package")
[1] ".GlobalEnv"
attr(,"group")
list()
attr(,"valueClass")
character(0)
attr(,"signature")
[1] "x"
attr(,"default")
`\001NULL\001`
attr(,"skeleton")
(function (x) 
stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
    "my_fcn"), domain = NA))(x)
attr(,"class")
[1] "standardGeneric"
attr(,"class")attr(,"package")
[1] "methods"
[17:39:51.001] getGlobalsAndPackages() ...
[17:39:51.001] Searching for globals...
[17:39:51.004] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[17:39:51.004] Searching for globals ... DONE
[17:39:51.005] Resolving globals: FALSE
[17:39:51.005] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[17:39:51.005] The total size of the 1 globals exported for future expression (‘{; my_fcn(3); }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[17:39:51.006] - globals: [1] ‘my_fcn’
[17:39:51.006] 
[17:39:51.006] getGlobalsAndPackages() ... DONE
[17:39:51.006] run() for ‘Future’ ...
[17:39:51.006] - state: ‘created’
[17:39:51.006] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:39:51.020] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:51.020] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:39:51.021]   - Field: ‘node’
[17:39:51.021]   - Field: ‘label’
[17:39:51.021]   - Field: ‘local’
[17:39:51.021]   - Field: ‘owner’
[17:39:51.021]   - Field: ‘envir’
[17:39:51.021]   - Field: ‘workers’
[17:39:51.021]   - Field: ‘packages’
[17:39:51.021]   - Field: ‘gc’
[17:39:51.021]   - Field: ‘conditions’
[17:39:51.021]   - Field: ‘persistent’
[17:39:51.022]   - Field: ‘expr’
[17:39:51.022]   - Field: ‘uuid’
[17:39:51.022]   - Field: ‘seed’
[17:39:51.022]   - Field: ‘version’
[17:39:51.022]   - Field: ‘result’
[17:39:51.022]   - Field: ‘asynchronous’
[17:39:51.022]   - Field: ‘calls’
[17:39:51.022]   - Field: ‘globals’
[17:39:51.022]   - Field: ‘stdout’
[17:39:51.023]   - Field: ‘earlySignal’
[17:39:51.023]   - Field: ‘lazy’
[17:39:51.023]   - Field: ‘state’
[17:39:51.023] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:39:51.023] - Launch lazy future ...
[17:39:51.023] Packages needed by the future expression (n = 0): <none>
[17:39:51.023] Packages needed by future strategies (n = 0): <none>
[17:39:51.024] {
[17:39:51.024]     {
[17:39:51.024]         {
[17:39:51.024]             ...future.startTime <- base::Sys.time()
[17:39:51.024]             {
[17:39:51.024]                 {
[17:39:51.024]                   {
[17:39:51.024]                     {
[17:39:51.024]                       base::local({
[17:39:51.024]                         has_future <- base::requireNamespace("future", 
[17:39:51.024]                           quietly = TRUE)
[17:39:51.024]                         if (has_future) {
[17:39:51.024]                           ns <- base::getNamespace("future")
[17:39:51.024]                           version <- ns[[".package"]][["version"]]
[17:39:51.024]                           if (is.null(version)) 
[17:39:51.024]                             version <- utils::packageVersion("future")
[17:39:51.024]                         }
[17:39:51.024]                         else {
[17:39:51.024]                           version <- NULL
[17:39:51.024]                         }
[17:39:51.024]                         if (!has_future || version < "1.8.0") {
[17:39:51.024]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:51.024]                             "", base::R.version$version.string), 
[17:39:51.024]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:51.024]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:51.024]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:51.024]                               "release", "version")], collapse = " "), 
[17:39:51.024]                             hostname = base::Sys.info()[["nodename"]])
[17:39:51.024]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:51.024]                             info)
[17:39:51.024]                           info <- base::paste(info, collapse = "; ")
[17:39:51.024]                           if (!has_future) {
[17:39:51.024]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:51.024]                               info)
[17:39:51.024]                           }
[17:39:51.024]                           else {
[17:39:51.024]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:51.024]                               info, version)
[17:39:51.024]                           }
[17:39:51.024]                           base::stop(msg)
[17:39:51.024]                         }
[17:39:51.024]                       })
[17:39:51.024]                     }
[17:39:51.024]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:51.024]                     base::options(mc.cores = 1L)
[17:39:51.024]                   }
[17:39:51.024]                   ...future.strategy.old <- future::plan("list")
[17:39:51.024]                   options(future.plan = NULL)
[17:39:51.024]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:51.024]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:51.024]                 }
[17:39:51.024]                 ...future.workdir <- getwd()
[17:39:51.024]             }
[17:39:51.024]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:51.024]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:51.024]         }
[17:39:51.024]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:51.024]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:51.024]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:51.024]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:51.024]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:51.024]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:51.024]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:51.024]             base::names(...future.oldOptions))
[17:39:51.024]     }
[17:39:51.024]     if (FALSE) {
[17:39:51.024]     }
[17:39:51.024]     else {
[17:39:51.024]         if (TRUE) {
[17:39:51.024]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:51.024]                 open = "w")
[17:39:51.024]         }
[17:39:51.024]         else {
[17:39:51.024]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:51.024]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:51.024]         }
[17:39:51.024]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:51.024]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:51.024]             base::sink(type = "output", split = FALSE)
[17:39:51.024]             base::close(...future.stdout)
[17:39:51.024]         }, add = TRUE)
[17:39:51.024]     }
[17:39:51.024]     ...future.frame <- base::sys.nframe()
[17:39:51.024]     ...future.conditions <- base::list()
[17:39:51.024]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:51.024]     if (FALSE) {
[17:39:51.024]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:51.024]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:51.024]     }
[17:39:51.024]     ...future.result <- base::tryCatch({
[17:39:51.024]         base::withCallingHandlers({
[17:39:51.024]             ...future.value <- base::withVisible(base::local({
[17:39:51.024]                 ...future.makeSendCondition <- base::local({
[17:39:51.024]                   sendCondition <- NULL
[17:39:51.024]                   function(frame = 1L) {
[17:39:51.024]                     if (is.function(sendCondition)) 
[17:39:51.024]                       return(sendCondition)
[17:39:51.024]                     ns <- getNamespace("parallel")
[17:39:51.024]                     if (exists("sendData", mode = "function", 
[17:39:51.024]                       envir = ns)) {
[17:39:51.024]                       parallel_sendData <- get("sendData", mode = "function", 
[17:39:51.024]                         envir = ns)
[17:39:51.024]                       envir <- sys.frame(frame)
[17:39:51.024]                       master <- NULL
[17:39:51.024]                       while (!identical(envir, .GlobalEnv) && 
[17:39:51.024]                         !identical(envir, emptyenv())) {
[17:39:51.024]                         if (exists("master", mode = "list", envir = envir, 
[17:39:51.024]                           inherits = FALSE)) {
[17:39:51.024]                           master <- get("master", mode = "list", 
[17:39:51.024]                             envir = envir, inherits = FALSE)
[17:39:51.024]                           if (inherits(master, c("SOCKnode", 
[17:39:51.024]                             "SOCK0node"))) {
[17:39:51.024]                             sendCondition <<- function(cond) {
[17:39:51.024]                               data <- list(type = "VALUE", value = cond, 
[17:39:51.024]                                 success = TRUE)
[17:39:51.024]                               parallel_sendData(master, data)
[17:39:51.024]                             }
[17:39:51.024]                             return(sendCondition)
[17:39:51.024]                           }
[17:39:51.024]                         }
[17:39:51.024]                         frame <- frame + 1L
[17:39:51.024]                         envir <- sys.frame(frame)
[17:39:51.024]                       }
[17:39:51.024]                     }
[17:39:51.024]                     sendCondition <<- function(cond) NULL
[17:39:51.024]                   }
[17:39:51.024]                 })
[17:39:51.024]                 withCallingHandlers({
[17:39:51.024]                   {
[17:39:51.024]                     my_fcn(3)
[17:39:51.024]                   }
[17:39:51.024]                 }, immediateCondition = function(cond) {
[17:39:51.024]                   sendCondition <- ...future.makeSendCondition()
[17:39:51.024]                   sendCondition(cond)
[17:39:51.024]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:51.024]                   {
[17:39:51.024]                     inherits <- base::inherits
[17:39:51.024]                     invokeRestart <- base::invokeRestart
[17:39:51.024]                     is.null <- base::is.null
[17:39:51.024]                     muffled <- FALSE
[17:39:51.024]                     if (inherits(cond, "message")) {
[17:39:51.024]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:51.024]                       if (muffled) 
[17:39:51.024]                         invokeRestart("muffleMessage")
[17:39:51.024]                     }
[17:39:51.024]                     else if (inherits(cond, "warning")) {
[17:39:51.024]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:51.024]                       if (muffled) 
[17:39:51.024]                         invokeRestart("muffleWarning")
[17:39:51.024]                     }
[17:39:51.024]                     else if (inherits(cond, "condition")) {
[17:39:51.024]                       if (!is.null(pattern)) {
[17:39:51.024]                         computeRestarts <- base::computeRestarts
[17:39:51.024]                         grepl <- base::grepl
[17:39:51.024]                         restarts <- computeRestarts(cond)
[17:39:51.024]                         for (restart in restarts) {
[17:39:51.024]                           name <- restart$name
[17:39:51.024]                           if (is.null(name)) 
[17:39:51.024]                             next
[17:39:51.024]                           if (!grepl(pattern, name)) 
[17:39:51.024]                             next
[17:39:51.024]                           invokeRestart(restart)
[17:39:51.024]                           muffled <- TRUE
[17:39:51.024]                           break
[17:39:51.024]                         }
[17:39:51.024]                       }
[17:39:51.024]                     }
[17:39:51.024]                     invisible(muffled)
[17:39:51.024]                   }
[17:39:51.024]                   muffleCondition(cond)
[17:39:51.024]                 })
[17:39:51.024]             }))
[17:39:51.024]             future::FutureResult(value = ...future.value$value, 
[17:39:51.024]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:51.024]                   ...future.rng), globalenv = if (FALSE) 
[17:39:51.024]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:51.024]                     ...future.globalenv.names))
[17:39:51.024]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:51.024]         }, condition = base::local({
[17:39:51.024]             c <- base::c
[17:39:51.024]             inherits <- base::inherits
[17:39:51.024]             invokeRestart <- base::invokeRestart
[17:39:51.024]             length <- base::length
[17:39:51.024]             list <- base::list
[17:39:51.024]             seq.int <- base::seq.int
[17:39:51.024]             signalCondition <- base::signalCondition
[17:39:51.024]             sys.calls <- base::sys.calls
[17:39:51.024]             `[[` <- base::`[[`
[17:39:51.024]             `+` <- base::`+`
[17:39:51.024]             `<<-` <- base::`<<-`
[17:39:51.024]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:51.024]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:51.024]                   3L)]
[17:39:51.024]             }
[17:39:51.024]             function(cond) {
[17:39:51.024]                 is_error <- inherits(cond, "error")
[17:39:51.024]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:51.024]                   NULL)
[17:39:51.024]                 if (is_error) {
[17:39:51.024]                   sessionInformation <- function() {
[17:39:51.024]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:51.024]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:51.024]                       search = base::search(), system = base::Sys.info())
[17:39:51.024]                   }
[17:39:51.024]                   ...future.conditions[[length(...future.conditions) + 
[17:39:51.024]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:51.024]                     cond$call), session = sessionInformation(), 
[17:39:51.024]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:51.024]                   signalCondition(cond)
[17:39:51.024]                 }
[17:39:51.024]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:51.024]                 "immediateCondition"))) {
[17:39:51.024]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:51.024]                   ...future.conditions[[length(...future.conditions) + 
[17:39:51.024]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:51.024]                   if (TRUE && !signal) {
[17:39:51.024]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:51.024]                     {
[17:39:51.024]                       inherits <- base::inherits
[17:39:51.024]                       invokeRestart <- base::invokeRestart
[17:39:51.024]                       is.null <- base::is.null
[17:39:51.024]                       muffled <- FALSE
[17:39:51.024]                       if (inherits(cond, "message")) {
[17:39:51.024]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:51.024]                         if (muffled) 
[17:39:51.024]                           invokeRestart("muffleMessage")
[17:39:51.024]                       }
[17:39:51.024]                       else if (inherits(cond, "warning")) {
[17:39:51.024]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:51.024]                         if (muffled) 
[17:39:51.024]                           invokeRestart("muffleWarning")
[17:39:51.024]                       }
[17:39:51.024]                       else if (inherits(cond, "condition")) {
[17:39:51.024]                         if (!is.null(pattern)) {
[17:39:51.024]                           computeRestarts <- base::computeRestarts
[17:39:51.024]                           grepl <- base::grepl
[17:39:51.024]                           restarts <- computeRestarts(cond)
[17:39:51.024]                           for (restart in restarts) {
[17:39:51.024]                             name <- restart$name
[17:39:51.024]                             if (is.null(name)) 
[17:39:51.024]                               next
[17:39:51.024]                             if (!grepl(pattern, name)) 
[17:39:51.024]                               next
[17:39:51.024]                             invokeRestart(restart)
[17:39:51.024]                             muffled <- TRUE
[17:39:51.024]                             break
[17:39:51.024]                           }
[17:39:51.024]                         }
[17:39:51.024]                       }
[17:39:51.024]                       invisible(muffled)
[17:39:51.024]                     }
[17:39:51.024]                     muffleCondition(cond, pattern = "^muffle")
[17:39:51.024]                   }
[17:39:51.024]                 }
[17:39:51.024]                 else {
[17:39:51.024]                   if (TRUE) {
[17:39:51.024]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:51.024]                     {
[17:39:51.024]                       inherits <- base::inherits
[17:39:51.024]                       invokeRestart <- base::invokeRestart
[17:39:51.024]                       is.null <- base::is.null
[17:39:51.024]                       muffled <- FALSE
[17:39:51.024]                       if (inherits(cond, "message")) {
[17:39:51.024]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:51.024]                         if (muffled) 
[17:39:51.024]                           invokeRestart("muffleMessage")
[17:39:51.024]                       }
[17:39:51.024]                       else if (inherits(cond, "warning")) {
[17:39:51.024]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:51.024]                         if (muffled) 
[17:39:51.024]                           invokeRestart("muffleWarning")
[17:39:51.024]                       }
[17:39:51.024]                       else if (inherits(cond, "condition")) {
[17:39:51.024]                         if (!is.null(pattern)) {
[17:39:51.024]                           computeRestarts <- base::computeRestarts
[17:39:51.024]                           grepl <- base::grepl
[17:39:51.024]                           restarts <- computeRestarts(cond)
[17:39:51.024]                           for (restart in restarts) {
[17:39:51.024]                             name <- restart$name
[17:39:51.024]                             if (is.null(name)) 
[17:39:51.024]                               next
[17:39:51.024]                             if (!grepl(pattern, name)) 
[17:39:51.024]                               next
[17:39:51.024]                             invokeRestart(restart)
[17:39:51.024]                             muffled <- TRUE
[17:39:51.024]                             break
[17:39:51.024]                           }
[17:39:51.024]                         }
[17:39:51.024]                       }
[17:39:51.024]                       invisible(muffled)
[17:39:51.024]                     }
[17:39:51.024]                     muffleCondition(cond, pattern = "^muffle")
[17:39:51.024]                   }
[17:39:51.024]                 }
[17:39:51.024]             }
[17:39:51.024]         }))
[17:39:51.024]     }, error = function(ex) {
[17:39:51.024]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:51.024]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:51.024]                 ...future.rng), started = ...future.startTime, 
[17:39:51.024]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:51.024]             version = "1.8"), class = "FutureResult")
[17:39:51.024]     }, finally = {
[17:39:51.024]         if (!identical(...future.workdir, getwd())) 
[17:39:51.024]             setwd(...future.workdir)
[17:39:51.024]         {
[17:39:51.024]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:51.024]                 ...future.oldOptions$nwarnings <- NULL
[17:39:51.024]             }
[17:39:51.024]             base::options(...future.oldOptions)
[17:39:51.024]             if (.Platform$OS.type == "windows") {
[17:39:51.024]                 old_names <- names(...future.oldEnvVars)
[17:39:51.024]                 envs <- base::Sys.getenv()
[17:39:51.024]                 names <- names(envs)
[17:39:51.024]                 common <- intersect(names, old_names)
[17:39:51.024]                 added <- setdiff(names, old_names)
[17:39:51.024]                 removed <- setdiff(old_names, names)
[17:39:51.024]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:51.024]                   envs[common]]
[17:39:51.024]                 NAMES <- toupper(changed)
[17:39:51.024]                 args <- list()
[17:39:51.024]                 for (kk in seq_along(NAMES)) {
[17:39:51.024]                   name <- changed[[kk]]
[17:39:51.024]                   NAME <- NAMES[[kk]]
[17:39:51.024]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:51.024]                     next
[17:39:51.024]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:51.024]                 }
[17:39:51.024]                 NAMES <- toupper(added)
[17:39:51.024]                 for (kk in seq_along(NAMES)) {
[17:39:51.024]                   name <- added[[kk]]
[17:39:51.024]                   NAME <- NAMES[[kk]]
[17:39:51.024]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:51.024]                     next
[17:39:51.024]                   args[[name]] <- ""
[17:39:51.024]                 }
[17:39:51.024]                 NAMES <- toupper(removed)
[17:39:51.024]                 for (kk in seq_along(NAMES)) {
[17:39:51.024]                   name <- removed[[kk]]
[17:39:51.024]                   NAME <- NAMES[[kk]]
[17:39:51.024]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:51.024]                     next
[17:39:51.024]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:51.024]                 }
[17:39:51.024]                 if (length(args) > 0) 
[17:39:51.024]                   base::do.call(base::Sys.setenv, args = args)
[17:39:51.024]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:51.024]             }
[17:39:51.024]             else {
[17:39:51.024]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:51.024]             }
[17:39:51.024]             {
[17:39:51.024]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:51.024]                   0L) {
[17:39:51.024]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:51.024]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:51.024]                   base::options(opts)
[17:39:51.024]                 }
[17:39:51.024]                 {
[17:39:51.024]                   {
[17:39:51.024]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:51.024]                     NULL
[17:39:51.024]                   }
[17:39:51.024]                   options(future.plan = NULL)
[17:39:51.024]                   if (is.na(NA_character_)) 
[17:39:51.024]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:51.024]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:51.024]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:51.024]                     .init = FALSE)
[17:39:51.024]                 }
[17:39:51.024]             }
[17:39:51.024]         }
[17:39:51.024]     })
[17:39:51.024]     if (TRUE) {
[17:39:51.024]         base::sink(type = "output", split = FALSE)
[17:39:51.024]         if (TRUE) {
[17:39:51.024]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:51.024]         }
[17:39:51.024]         else {
[17:39:51.024]             ...future.result["stdout"] <- base::list(NULL)
[17:39:51.024]         }
[17:39:51.024]         base::close(...future.stdout)
[17:39:51.024]         ...future.stdout <- NULL
[17:39:51.024]     }
[17:39:51.024]     ...future.result$conditions <- ...future.conditions
[17:39:51.024]     ...future.result$finished <- base::Sys.time()
[17:39:51.024]     ...future.result
[17:39:51.024] }
[17:39:51.027] Exporting 1 global objects (3.84 KiB) to cluster node #1 ...
[17:39:51.027] Exporting ‘my_fcn’ (3.84 KiB) to cluster node #1 ...
[17:39:51.027] Exporting ‘my_fcn’ (3.84 KiB) to cluster node #1 ... DONE
[17:39:51.027] Exporting 1 global objects (3.84 KiB) to cluster node #1 ... DONE
[17:39:51.028] MultisessionFuture started
[17:39:51.028] - Launch lazy future ... done
[17:39:51.028] run() for ‘MultisessionFuture’ ... done
[17:39:51.029] result() for ClusterFuture ...
[17:39:51.029] receiveMessageFromWorker() for ClusterFuture ...
[17:39:51.029] - Validating connection of MultisessionFuture
[17:39:51.034] - received message: FutureResult
[17:39:51.034] - Received FutureResult
[17:39:51.034] - Erased future from FutureRegistry
[17:39:51.035] result() for ClusterFuture ...
[17:39:51.035] - result already collected: FutureResult
[17:39:51.035] result() for ClusterFuture ... done
[17:39:51.035] receiveMessageFromWorker() for ClusterFuture ... done
[17:39:51.035] result() for ClusterFuture ... done
[17:39:51.035] result() for ClusterFuture ...
[17:39:51.035] - result already collected: FutureResult
[17:39:51.035] result() for ClusterFuture ... done
[1] -3
> 
> message("*** Globals - S4 methods ... DONE")
*** Globals - S4 methods ... DONE
> 
> source("incl/end.R")
[17:39:51.036] plan(): Setting new future strategy stack:
[17:39:51.036] List of future strategies:
[17:39:51.036] 1. FutureStrategy:
[17:39:51.036]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:51.036]    - tweaked: FALSE
[17:39:51.036]    - call: future::plan(oplan)
[17:39:51.037] plan(): nbrOfWorkers() = 1
> 
