
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[09:31:44.972] plan(): Setting new future strategy stack:
[09:31:44.972] List of future strategies:
[09:31:44.972] 1. sequential:
[09:31:44.972]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:44.972]    - tweaked: FALSE
[09:31:44.972]    - call: future::plan("sequential")
[09:31:44.983] plan(): nbrOfWorkers() = 1
> library("listenv")
> plan(multicore)
[09:31:44.997] plan(): Setting new future strategy stack:
[09:31:44.997] List of future strategies:
[09:31:44.997] 1. multicore:
[09:31:44.997]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:44.997]    - tweaked: FALSE
[09:31:44.997]    - call: plan(multicore)
[09:31:45.011] plan(): nbrOfWorkers() = 2
> 
> message("*** multicore() ...")
*** multicore() ...
> 
> for (cores in 1:min(2L, availableCores("multicore"))) {
+   message(sprintf("Testing with %d cores ...", cores))
+   options(mc.cores = cores)
+ 
+   if (!supportsMulticore()) {
+     message(sprintf("Multicore futures are not supporting on '%s'. Falling back to use synchronous sequential futures", .Platform$OS.type))
+   }
+ 
+   nworkers <- nbrOfWorkers()
+   message("Number of workers: ", nworkers)
+   stopifnot(nworkers == cores)
+   
+   for (globals in c(FALSE, TRUE)) {
+ 
+     message(sprintf("*** multicore(..., globals = %s) without globals", globals))
+   
+     f <- multicore({
+       42L
+     }, globals = globals)
+     stopifnot(inherits(f, "MulticoreFuture") || ((cores ==1 || !supportsMulticore()) && inherits(f, "SequentialFuture")))
+   
+     print(resolved(f))
+     y <- value(f)
+     print(y)
+     stopifnot(y == 42L)
+   
+   
+     message(sprintf("*** multicore(..., globals = %s) with globals", globals))
+     ## A global variable
+     a <- 0
+     f <- multicore({
+       b <- 3
+       c <- 2
+       a * b * c
+     }, globals = globals)
+     print(f)
+   
+   
+     ## A multicore future is evaluated in a separated
+     ## forked process.  Changing the value of a global
+     ## variable should not affect the result of the
+     ## future.
+     a <- 7  ## Make sure globals are frozen
+     v <- value(f)
+     print(v)
+     stopifnot(v == 0)
+   
+   
+     message(sprintf("*** multicore(..., globals = %s) with globals and blocking", globals))
+     x <- listenv()
+     for (ii in 1:4) {
+       message(sprintf(" - Creating multicore future #%d ...", ii))
+       x[[ii]] <- multicore({ ii }, globals = globals)
+     }
+     message(sprintf(" - Resolving %d multicore futures", length(x)))
+     v <- sapply(x, FUN = value)
+     stopifnot(all(v == 1:4))
+   
+   
+     message(sprintf("*** multicore(..., globals = %s) and errors", globals))
+     f <- multicore({
+       stop("Whoops!")
+       1
+     }, globals = globals)
+     print(f)
+     v <- value(f, signal = FALSE)
+     print(v)
+     stopifnot(inherits(v, "simpleError"))
+   
+     res <- try(value(f), silent = TRUE)
+     print(res)
+     stopifnot(inherits(res, "try-error"))
+   
+     ## Error is repeated
+     res <- try(value(f), silent = TRUE)
+     print(res)
+     stopifnot(inherits(res, "try-error"))
+ 
+     ## Custom error class
+     f <- multicore({
+       stop(structure(list(message = "boom"),
+                      class = c("MyError", "error", "condition")))
+     })
+     print(f)
+     v <- value(f, signal = FALSE)
+     print(v)
+     stopifnot(inherits(v, "error"), inherits(v, "MyError"))
+   
+     ## Make sure error is signaled
+     res <- tryCatch(value(f), error = identity)
+     stopifnot(inherits(res, "error"))
+   
+     ## Issue #200: Custom condition class attributes are lost 
+     stopifnot(inherits(res, "MyError"))    
+   } # for (globals ...)
+ 
+ 
+   message("*** multicore(..., workers = 1L) ...")
+ 
+   a <- 2
+   b <- 3
+   yTruth <- a * b
+ 
+   f <- multicore({ a * b }, globals = TRUE, workers = 1L)
+   rm(list = c("a", "b"))
+ 
+   v <- value(f)
+   print(v)
+   stopifnot(v == yTruth)
+ 
+   message("*** multicore(..., workers = 1L) ... DONE")
+ 
+   message(sprintf("Testing with %d cores ... DONE", cores))
+ } ## for (cores ...)
Testing with 1 cores ...
Number of workers: 1
*** multicore(..., globals = FALSE) without globals
[09:31:45.065] getGlobalsAndPackages() ...
[09:31:45.065] Not searching for globals
[09:31:45.065] - globals: [0] <none>
[09:31:45.065] getGlobalsAndPackages() ... DONE
[09:31:45.066] Packages needed by the future expression (n = 0): <none>
[09:31:45.066] Packages needed by future strategies (n = 0): <none>
[09:31:45.067] {
[09:31:45.067]     {
[09:31:45.067]         {
[09:31:45.067]             ...future.startTime <- base::Sys.time()
[09:31:45.067]             {
[09:31:45.067]                 {
[09:31:45.067]                   {
[09:31:45.067]                     base::local({
[09:31:45.067]                       has_future <- base::requireNamespace("future", 
[09:31:45.067]                         quietly = TRUE)
[09:31:45.067]                       if (has_future) {
[09:31:45.067]                         ns <- base::getNamespace("future")
[09:31:45.067]                         version <- ns[[".package"]][["version"]]
[09:31:45.067]                         if (is.null(version)) 
[09:31:45.067]                           version <- utils::packageVersion("future")
[09:31:45.067]                       }
[09:31:45.067]                       else {
[09:31:45.067]                         version <- NULL
[09:31:45.067]                       }
[09:31:45.067]                       if (!has_future || version < "1.8.0") {
[09:31:45.067]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:45.067]                           "", base::R.version$version.string), 
[09:31:45.067]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:45.067]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:45.067]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:45.067]                             "release", "version")], collapse = " "), 
[09:31:45.067]                           hostname = base::Sys.info()[["nodename"]])
[09:31:45.067]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:45.067]                           info)
[09:31:45.067]                         info <- base::paste(info, collapse = "; ")
[09:31:45.067]                         if (!has_future) {
[09:31:45.067]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:45.067]                             info)
[09:31:45.067]                         }
[09:31:45.067]                         else {
[09:31:45.067]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:45.067]                             info, version)
[09:31:45.067]                         }
[09:31:45.067]                         base::stop(msg)
[09:31:45.067]                       }
[09:31:45.067]                     })
[09:31:45.067]                   }
[09:31:45.067]                   ...future.strategy.old <- future::plan("list")
[09:31:45.067]                   options(future.plan = NULL)
[09:31:45.067]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.067]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:45.067]                 }
[09:31:45.067]                 ...future.workdir <- getwd()
[09:31:45.067]             }
[09:31:45.067]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:45.067]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:45.067]         }
[09:31:45.067]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:45.067]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:45.067]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:45.067]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:45.067]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:45.067]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:45.067]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:45.067]             base::names(...future.oldOptions))
[09:31:45.067]     }
[09:31:45.067]     if (FALSE) {
[09:31:45.067]     }
[09:31:45.067]     else {
[09:31:45.067]         if (TRUE) {
[09:31:45.067]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:45.067]                 open = "w")
[09:31:45.067]         }
[09:31:45.067]         else {
[09:31:45.067]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:45.067]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:45.067]         }
[09:31:45.067]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:45.067]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:45.067]             base::sink(type = "output", split = FALSE)
[09:31:45.067]             base::close(...future.stdout)
[09:31:45.067]         }, add = TRUE)
[09:31:45.067]     }
[09:31:45.067]     ...future.frame <- base::sys.nframe()
[09:31:45.067]     ...future.conditions <- base::list()
[09:31:45.067]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:45.067]     if (FALSE) {
[09:31:45.067]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:45.067]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:45.067]     }
[09:31:45.067]     ...future.result <- base::tryCatch({
[09:31:45.067]         base::withCallingHandlers({
[09:31:45.067]             ...future.value <- base::withVisible(base::local({
[09:31:45.067]                 42L
[09:31:45.067]             }))
[09:31:45.067]             future::FutureResult(value = ...future.value$value, 
[09:31:45.067]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.067]                   ...future.rng), globalenv = if (FALSE) 
[09:31:45.067]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:45.067]                     ...future.globalenv.names))
[09:31:45.067]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:45.067]         }, condition = base::local({
[09:31:45.067]             c <- base::c
[09:31:45.067]             inherits <- base::inherits
[09:31:45.067]             invokeRestart <- base::invokeRestart
[09:31:45.067]             length <- base::length
[09:31:45.067]             list <- base::list
[09:31:45.067]             seq.int <- base::seq.int
[09:31:45.067]             signalCondition <- base::signalCondition
[09:31:45.067]             sys.calls <- base::sys.calls
[09:31:45.067]             `[[` <- base::`[[`
[09:31:45.067]             `+` <- base::`+`
[09:31:45.067]             `<<-` <- base::`<<-`
[09:31:45.067]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:45.067]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:45.067]                   3L)]
[09:31:45.067]             }
[09:31:45.067]             function(cond) {
[09:31:45.067]                 is_error <- inherits(cond, "error")
[09:31:45.067]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:45.067]                   NULL)
[09:31:45.067]                 if (is_error) {
[09:31:45.067]                   sessionInformation <- function() {
[09:31:45.067]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:45.067]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:45.067]                       search = base::search(), system = base::Sys.info())
[09:31:45.067]                   }
[09:31:45.067]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.067]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:45.067]                     cond$call), session = sessionInformation(), 
[09:31:45.067]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:45.067]                   signalCondition(cond)
[09:31:45.067]                 }
[09:31:45.067]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:45.067]                 "immediateCondition"))) {
[09:31:45.067]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:45.067]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.067]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:45.067]                   if (TRUE && !signal) {
[09:31:45.067]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.067]                     {
[09:31:45.067]                       inherits <- base::inherits
[09:31:45.067]                       invokeRestart <- base::invokeRestart
[09:31:45.067]                       is.null <- base::is.null
[09:31:45.067]                       muffled <- FALSE
[09:31:45.067]                       if (inherits(cond, "message")) {
[09:31:45.067]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.067]                         if (muffled) 
[09:31:45.067]                           invokeRestart("muffleMessage")
[09:31:45.067]                       }
[09:31:45.067]                       else if (inherits(cond, "warning")) {
[09:31:45.067]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.067]                         if (muffled) 
[09:31:45.067]                           invokeRestart("muffleWarning")
[09:31:45.067]                       }
[09:31:45.067]                       else if (inherits(cond, "condition")) {
[09:31:45.067]                         if (!is.null(pattern)) {
[09:31:45.067]                           computeRestarts <- base::computeRestarts
[09:31:45.067]                           grepl <- base::grepl
[09:31:45.067]                           restarts <- computeRestarts(cond)
[09:31:45.067]                           for (restart in restarts) {
[09:31:45.067]                             name <- restart$name
[09:31:45.067]                             if (is.null(name)) 
[09:31:45.067]                               next
[09:31:45.067]                             if (!grepl(pattern, name)) 
[09:31:45.067]                               next
[09:31:45.067]                             invokeRestart(restart)
[09:31:45.067]                             muffled <- TRUE
[09:31:45.067]                             break
[09:31:45.067]                           }
[09:31:45.067]                         }
[09:31:45.067]                       }
[09:31:45.067]                       invisible(muffled)
[09:31:45.067]                     }
[09:31:45.067]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.067]                   }
[09:31:45.067]                 }
[09:31:45.067]                 else {
[09:31:45.067]                   if (TRUE) {
[09:31:45.067]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.067]                     {
[09:31:45.067]                       inherits <- base::inherits
[09:31:45.067]                       invokeRestart <- base::invokeRestart
[09:31:45.067]                       is.null <- base::is.null
[09:31:45.067]                       muffled <- FALSE
[09:31:45.067]                       if (inherits(cond, "message")) {
[09:31:45.067]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.067]                         if (muffled) 
[09:31:45.067]                           invokeRestart("muffleMessage")
[09:31:45.067]                       }
[09:31:45.067]                       else if (inherits(cond, "warning")) {
[09:31:45.067]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.067]                         if (muffled) 
[09:31:45.067]                           invokeRestart("muffleWarning")
[09:31:45.067]                       }
[09:31:45.067]                       else if (inherits(cond, "condition")) {
[09:31:45.067]                         if (!is.null(pattern)) {
[09:31:45.067]                           computeRestarts <- base::computeRestarts
[09:31:45.067]                           grepl <- base::grepl
[09:31:45.067]                           restarts <- computeRestarts(cond)
[09:31:45.067]                           for (restart in restarts) {
[09:31:45.067]                             name <- restart$name
[09:31:45.067]                             if (is.null(name)) 
[09:31:45.067]                               next
[09:31:45.067]                             if (!grepl(pattern, name)) 
[09:31:45.067]                               next
[09:31:45.067]                             invokeRestart(restart)
[09:31:45.067]                             muffled <- TRUE
[09:31:45.067]                             break
[09:31:45.067]                           }
[09:31:45.067]                         }
[09:31:45.067]                       }
[09:31:45.067]                       invisible(muffled)
[09:31:45.067]                     }
[09:31:45.067]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.067]                   }
[09:31:45.067]                 }
[09:31:45.067]             }
[09:31:45.067]         }))
[09:31:45.067]     }, error = function(ex) {
[09:31:45.067]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:45.067]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.067]                 ...future.rng), started = ...future.startTime, 
[09:31:45.067]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:45.067]             version = "1.8"), class = "FutureResult")
[09:31:45.067]     }, finally = {
[09:31:45.067]         if (!identical(...future.workdir, getwd())) 
[09:31:45.067]             setwd(...future.workdir)
[09:31:45.067]         {
[09:31:45.067]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:45.067]                 ...future.oldOptions$nwarnings <- NULL
[09:31:45.067]             }
[09:31:45.067]             base::options(...future.oldOptions)
[09:31:45.067]             if (.Platform$OS.type == "windows") {
[09:31:45.067]                 old_names <- names(...future.oldEnvVars)
[09:31:45.067]                 envs <- base::Sys.getenv()
[09:31:45.067]                 names <- names(envs)
[09:31:45.067]                 common <- intersect(names, old_names)
[09:31:45.067]                 added <- setdiff(names, old_names)
[09:31:45.067]                 removed <- setdiff(old_names, names)
[09:31:45.067]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:45.067]                   envs[common]]
[09:31:45.067]                 NAMES <- toupper(changed)
[09:31:45.067]                 args <- list()
[09:31:45.067]                 for (kk in seq_along(NAMES)) {
[09:31:45.067]                   name <- changed[[kk]]
[09:31:45.067]                   NAME <- NAMES[[kk]]
[09:31:45.067]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.067]                     next
[09:31:45.067]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.067]                 }
[09:31:45.067]                 NAMES <- toupper(added)
[09:31:45.067]                 for (kk in seq_along(NAMES)) {
[09:31:45.067]                   name <- added[[kk]]
[09:31:45.067]                   NAME <- NAMES[[kk]]
[09:31:45.067]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.067]                     next
[09:31:45.067]                   args[[name]] <- ""
[09:31:45.067]                 }
[09:31:45.067]                 NAMES <- toupper(removed)
[09:31:45.067]                 for (kk in seq_along(NAMES)) {
[09:31:45.067]                   name <- removed[[kk]]
[09:31:45.067]                   NAME <- NAMES[[kk]]
[09:31:45.067]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.067]                     next
[09:31:45.067]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.067]                 }
[09:31:45.067]                 if (length(args) > 0) 
[09:31:45.067]                   base::do.call(base::Sys.setenv, args = args)
[09:31:45.067]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:45.067]             }
[09:31:45.067]             else {
[09:31:45.067]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:45.067]             }
[09:31:45.067]             {
[09:31:45.067]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:45.067]                   0L) {
[09:31:45.067]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:45.067]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:45.067]                   base::options(opts)
[09:31:45.067]                 }
[09:31:45.067]                 {
[09:31:45.067]                   {
[09:31:45.067]                     NULL
[09:31:45.067]                     RNGkind("Mersenne-Twister")
[09:31:45.067]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:45.067]                       inherits = FALSE)
[09:31:45.067]                   }
[09:31:45.067]                   options(future.plan = NULL)
[09:31:45.067]                   if (is.na(NA_character_)) 
[09:31:45.067]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.067]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:45.067]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:45.067]                     .init = FALSE)
[09:31:45.067]                 }
[09:31:45.067]             }
[09:31:45.067]         }
[09:31:45.067]     })
[09:31:45.067]     if (TRUE) {
[09:31:45.067]         base::sink(type = "output", split = FALSE)
[09:31:45.067]         if (TRUE) {
[09:31:45.067]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:45.067]         }
[09:31:45.067]         else {
[09:31:45.067]             ...future.result["stdout"] <- base::list(NULL)
[09:31:45.067]         }
[09:31:45.067]         base::close(...future.stdout)
[09:31:45.067]         ...future.stdout <- NULL
[09:31:45.067]     }
[09:31:45.067]     ...future.result$conditions <- ...future.conditions
[09:31:45.067]     ...future.result$finished <- base::Sys.time()
[09:31:45.067]     ...future.result
[09:31:45.067] }
[09:31:45.069] plan(): Setting new future strategy stack:
[09:31:45.069] List of future strategies:
[09:31:45.069] 1. sequential:
[09:31:45.069]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:45.069]    - tweaked: FALSE
[09:31:45.069]    - call: NULL
[09:31:45.069] plan(): nbrOfWorkers() = 1
[09:31:45.071] plan(): Setting new future strategy stack:
[09:31:45.071] List of future strategies:
[09:31:45.071] 1. multicore:
[09:31:45.071]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:45.071]    - tweaked: FALSE
[09:31:45.071]    - call: plan(multicore)
[09:31:45.074] plan(): nbrOfWorkers() = 1
[09:31:45.074] SequentialFuture started (and completed)
[09:31:45.075] resolved() for ‘SequentialFuture’ ...
[09:31:45.075] - state: ‘finished’
[09:31:45.075] - run: TRUE
[09:31:45.075] - result: ‘FutureResult’
[09:31:45.075] resolved() for ‘SequentialFuture’ ... done
[1] TRUE
[1] 42
*** multicore(..., globals = FALSE) with globals
[09:31:45.079] getGlobalsAndPackages() ...
[09:31:45.079] Not searching for globals
[09:31:45.079] - globals: [0] <none>
[09:31:45.079] getGlobalsAndPackages() ... DONE
[09:31:45.079] Packages needed by the future expression (n = 0): <none>
[09:31:45.079] Packages needed by future strategies (n = 0): <none>
[09:31:45.080] {
[09:31:45.080]     {
[09:31:45.080]         {
[09:31:45.080]             ...future.startTime <- base::Sys.time()
[09:31:45.080]             {
[09:31:45.080]                 {
[09:31:45.080]                   {
[09:31:45.080]                     base::local({
[09:31:45.080]                       has_future <- base::requireNamespace("future", 
[09:31:45.080]                         quietly = TRUE)
[09:31:45.080]                       if (has_future) {
[09:31:45.080]                         ns <- base::getNamespace("future")
[09:31:45.080]                         version <- ns[[".package"]][["version"]]
[09:31:45.080]                         if (is.null(version)) 
[09:31:45.080]                           version <- utils::packageVersion("future")
[09:31:45.080]                       }
[09:31:45.080]                       else {
[09:31:45.080]                         version <- NULL
[09:31:45.080]                       }
[09:31:45.080]                       if (!has_future || version < "1.8.0") {
[09:31:45.080]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:45.080]                           "", base::R.version$version.string), 
[09:31:45.080]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:45.080]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:45.080]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:45.080]                             "release", "version")], collapse = " "), 
[09:31:45.080]                           hostname = base::Sys.info()[["nodename"]])
[09:31:45.080]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:45.080]                           info)
[09:31:45.080]                         info <- base::paste(info, collapse = "; ")
[09:31:45.080]                         if (!has_future) {
[09:31:45.080]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:45.080]                             info)
[09:31:45.080]                         }
[09:31:45.080]                         else {
[09:31:45.080]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:45.080]                             info, version)
[09:31:45.080]                         }
[09:31:45.080]                         base::stop(msg)
[09:31:45.080]                       }
[09:31:45.080]                     })
[09:31:45.080]                   }
[09:31:45.080]                   ...future.strategy.old <- future::plan("list")
[09:31:45.080]                   options(future.plan = NULL)
[09:31:45.080]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.080]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:45.080]                 }
[09:31:45.080]                 ...future.workdir <- getwd()
[09:31:45.080]             }
[09:31:45.080]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:45.080]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:45.080]         }
[09:31:45.080]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:45.080]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:45.080]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:45.080]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:45.080]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:45.080]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:45.080]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:45.080]             base::names(...future.oldOptions))
[09:31:45.080]     }
[09:31:45.080]     if (FALSE) {
[09:31:45.080]     }
[09:31:45.080]     else {
[09:31:45.080]         if (TRUE) {
[09:31:45.080]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:45.080]                 open = "w")
[09:31:45.080]         }
[09:31:45.080]         else {
[09:31:45.080]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:45.080]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:45.080]         }
[09:31:45.080]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:45.080]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:45.080]             base::sink(type = "output", split = FALSE)
[09:31:45.080]             base::close(...future.stdout)
[09:31:45.080]         }, add = TRUE)
[09:31:45.080]     }
[09:31:45.080]     ...future.frame <- base::sys.nframe()
[09:31:45.080]     ...future.conditions <- base::list()
[09:31:45.080]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:45.080]     if (FALSE) {
[09:31:45.080]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:45.080]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:45.080]     }
[09:31:45.080]     ...future.result <- base::tryCatch({
[09:31:45.080]         base::withCallingHandlers({
[09:31:45.080]             ...future.value <- base::withVisible(base::local({
[09:31:45.080]                 b <- 3
[09:31:45.080]                 c <- 2
[09:31:45.080]                 a * b * c
[09:31:45.080]             }))
[09:31:45.080]             future::FutureResult(value = ...future.value$value, 
[09:31:45.080]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.080]                   ...future.rng), globalenv = if (FALSE) 
[09:31:45.080]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:45.080]                     ...future.globalenv.names))
[09:31:45.080]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:45.080]         }, condition = base::local({
[09:31:45.080]             c <- base::c
[09:31:45.080]             inherits <- base::inherits
[09:31:45.080]             invokeRestart <- base::invokeRestart
[09:31:45.080]             length <- base::length
[09:31:45.080]             list <- base::list
[09:31:45.080]             seq.int <- base::seq.int
[09:31:45.080]             signalCondition <- base::signalCondition
[09:31:45.080]             sys.calls <- base::sys.calls
[09:31:45.080]             `[[` <- base::`[[`
[09:31:45.080]             `+` <- base::`+`
[09:31:45.080]             `<<-` <- base::`<<-`
[09:31:45.080]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:45.080]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:45.080]                   3L)]
[09:31:45.080]             }
[09:31:45.080]             function(cond) {
[09:31:45.080]                 is_error <- inherits(cond, "error")
[09:31:45.080]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:45.080]                   NULL)
[09:31:45.080]                 if (is_error) {
[09:31:45.080]                   sessionInformation <- function() {
[09:31:45.080]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:45.080]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:45.080]                       search = base::search(), system = base::Sys.info())
[09:31:45.080]                   }
[09:31:45.080]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.080]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:45.080]                     cond$call), session = sessionInformation(), 
[09:31:45.080]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:45.080]                   signalCondition(cond)
[09:31:45.080]                 }
[09:31:45.080]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:45.080]                 "immediateCondition"))) {
[09:31:45.080]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:45.080]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.080]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:45.080]                   if (TRUE && !signal) {
[09:31:45.080]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.080]                     {
[09:31:45.080]                       inherits <- base::inherits
[09:31:45.080]                       invokeRestart <- base::invokeRestart
[09:31:45.080]                       is.null <- base::is.null
[09:31:45.080]                       muffled <- FALSE
[09:31:45.080]                       if (inherits(cond, "message")) {
[09:31:45.080]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.080]                         if (muffled) 
[09:31:45.080]                           invokeRestart("muffleMessage")
[09:31:45.080]                       }
[09:31:45.080]                       else if (inherits(cond, "warning")) {
[09:31:45.080]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.080]                         if (muffled) 
[09:31:45.080]                           invokeRestart("muffleWarning")
[09:31:45.080]                       }
[09:31:45.080]                       else if (inherits(cond, "condition")) {
[09:31:45.080]                         if (!is.null(pattern)) {
[09:31:45.080]                           computeRestarts <- base::computeRestarts
[09:31:45.080]                           grepl <- base::grepl
[09:31:45.080]                           restarts <- computeRestarts(cond)
[09:31:45.080]                           for (restart in restarts) {
[09:31:45.080]                             name <- restart$name
[09:31:45.080]                             if (is.null(name)) 
[09:31:45.080]                               next
[09:31:45.080]                             if (!grepl(pattern, name)) 
[09:31:45.080]                               next
[09:31:45.080]                             invokeRestart(restart)
[09:31:45.080]                             muffled <- TRUE
[09:31:45.080]                             break
[09:31:45.080]                           }
[09:31:45.080]                         }
[09:31:45.080]                       }
[09:31:45.080]                       invisible(muffled)
[09:31:45.080]                     }
[09:31:45.080]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.080]                   }
[09:31:45.080]                 }
[09:31:45.080]                 else {
[09:31:45.080]                   if (TRUE) {
[09:31:45.080]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.080]                     {
[09:31:45.080]                       inherits <- base::inherits
[09:31:45.080]                       invokeRestart <- base::invokeRestart
[09:31:45.080]                       is.null <- base::is.null
[09:31:45.080]                       muffled <- FALSE
[09:31:45.080]                       if (inherits(cond, "message")) {
[09:31:45.080]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.080]                         if (muffled) 
[09:31:45.080]                           invokeRestart("muffleMessage")
[09:31:45.080]                       }
[09:31:45.080]                       else if (inherits(cond, "warning")) {
[09:31:45.080]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.080]                         if (muffled) 
[09:31:45.080]                           invokeRestart("muffleWarning")
[09:31:45.080]                       }
[09:31:45.080]                       else if (inherits(cond, "condition")) {
[09:31:45.080]                         if (!is.null(pattern)) {
[09:31:45.080]                           computeRestarts <- base::computeRestarts
[09:31:45.080]                           grepl <- base::grepl
[09:31:45.080]                           restarts <- computeRestarts(cond)
[09:31:45.080]                           for (restart in restarts) {
[09:31:45.080]                             name <- restart$name
[09:31:45.080]                             if (is.null(name)) 
[09:31:45.080]                               next
[09:31:45.080]                             if (!grepl(pattern, name)) 
[09:31:45.080]                               next
[09:31:45.080]                             invokeRestart(restart)
[09:31:45.080]                             muffled <- TRUE
[09:31:45.080]                             break
[09:31:45.080]                           }
[09:31:45.080]                         }
[09:31:45.080]                       }
[09:31:45.080]                       invisible(muffled)
[09:31:45.080]                     }
[09:31:45.080]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.080]                   }
[09:31:45.080]                 }
[09:31:45.080]             }
[09:31:45.080]         }))
[09:31:45.080]     }, error = function(ex) {
[09:31:45.080]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:45.080]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.080]                 ...future.rng), started = ...future.startTime, 
[09:31:45.080]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:45.080]             version = "1.8"), class = "FutureResult")
[09:31:45.080]     }, finally = {
[09:31:45.080]         if (!identical(...future.workdir, getwd())) 
[09:31:45.080]             setwd(...future.workdir)
[09:31:45.080]         {
[09:31:45.080]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:45.080]                 ...future.oldOptions$nwarnings <- NULL
[09:31:45.080]             }
[09:31:45.080]             base::options(...future.oldOptions)
[09:31:45.080]             if (.Platform$OS.type == "windows") {
[09:31:45.080]                 old_names <- names(...future.oldEnvVars)
[09:31:45.080]                 envs <- base::Sys.getenv()
[09:31:45.080]                 names <- names(envs)
[09:31:45.080]                 common <- intersect(names, old_names)
[09:31:45.080]                 added <- setdiff(names, old_names)
[09:31:45.080]                 removed <- setdiff(old_names, names)
[09:31:45.080]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:45.080]                   envs[common]]
[09:31:45.080]                 NAMES <- toupper(changed)
[09:31:45.080]                 args <- list()
[09:31:45.080]                 for (kk in seq_along(NAMES)) {
[09:31:45.080]                   name <- changed[[kk]]
[09:31:45.080]                   NAME <- NAMES[[kk]]
[09:31:45.080]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.080]                     next
[09:31:45.080]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.080]                 }
[09:31:45.080]                 NAMES <- toupper(added)
[09:31:45.080]                 for (kk in seq_along(NAMES)) {
[09:31:45.080]                   name <- added[[kk]]
[09:31:45.080]                   NAME <- NAMES[[kk]]
[09:31:45.080]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.080]                     next
[09:31:45.080]                   args[[name]] <- ""
[09:31:45.080]                 }
[09:31:45.080]                 NAMES <- toupper(removed)
[09:31:45.080]                 for (kk in seq_along(NAMES)) {
[09:31:45.080]                   name <- removed[[kk]]
[09:31:45.080]                   NAME <- NAMES[[kk]]
[09:31:45.080]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.080]                     next
[09:31:45.080]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.080]                 }
[09:31:45.080]                 if (length(args) > 0) 
[09:31:45.080]                   base::do.call(base::Sys.setenv, args = args)
[09:31:45.080]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:45.080]             }
[09:31:45.080]             else {
[09:31:45.080]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:45.080]             }
[09:31:45.080]             {
[09:31:45.080]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:45.080]                   0L) {
[09:31:45.080]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:45.080]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:45.080]                   base::options(opts)
[09:31:45.080]                 }
[09:31:45.080]                 {
[09:31:45.080]                   {
[09:31:45.080]                     NULL
[09:31:45.080]                     RNGkind("Mersenne-Twister")
[09:31:45.080]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:45.080]                       inherits = FALSE)
[09:31:45.080]                   }
[09:31:45.080]                   options(future.plan = NULL)
[09:31:45.080]                   if (is.na(NA_character_)) 
[09:31:45.080]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.080]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:45.080]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:45.080]                     .init = FALSE)
[09:31:45.080]                 }
[09:31:45.080]             }
[09:31:45.080]         }
[09:31:45.080]     })
[09:31:45.080]     if (TRUE) {
[09:31:45.080]         base::sink(type = "output", split = FALSE)
[09:31:45.080]         if (TRUE) {
[09:31:45.080]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:45.080]         }
[09:31:45.080]         else {
[09:31:45.080]             ...future.result["stdout"] <- base::list(NULL)
[09:31:45.080]         }
[09:31:45.080]         base::close(...future.stdout)
[09:31:45.080]         ...future.stdout <- NULL
[09:31:45.080]     }
[09:31:45.080]     ...future.result$conditions <- ...future.conditions
[09:31:45.080]     ...future.result$finished <- base::Sys.time()
[09:31:45.080]     ...future.result
[09:31:45.080] }
[09:31:45.082] plan(): Setting new future strategy stack:
[09:31:45.082] List of future strategies:
[09:31:45.082] 1. sequential:
[09:31:45.082]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:45.082]    - tweaked: FALSE
[09:31:45.082]    - call: NULL
[09:31:45.082] plan(): nbrOfWorkers() = 1
[09:31:45.083] plan(): Setting new future strategy stack:
[09:31:45.083] List of future strategies:
[09:31:45.083] 1. multicore:
[09:31:45.083]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:45.083]    - tweaked: FALSE
[09:31:45.083]    - call: plan(multicore)
[09:31:45.086] plan(): nbrOfWorkers() = 1
[09:31:45.086] SequentialFuture started (and completed)
SequentialFuture:
Label: ‘<none>’
Expression:
{
    b <- 3
    c <- 2
    a * b * c
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 4dab417a-2fdd-f8a2-2e0a-d701ed5fedef
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[1] 0
*** multicore(..., globals = FALSE) with globals and blocking
 - Creating multicore future #1 ...
[09:31:45.091] getGlobalsAndPackages() ...
[09:31:45.091] Not searching for globals
[09:31:45.091] - globals: [0] <none>
[09:31:45.091] getGlobalsAndPackages() ... DONE
[09:31:45.091] Packages needed by the future expression (n = 0): <none>
[09:31:45.091] Packages needed by future strategies (n = 0): <none>
[09:31:45.092] {
[09:31:45.092]     {
[09:31:45.092]         {
[09:31:45.092]             ...future.startTime <- base::Sys.time()
[09:31:45.092]             {
[09:31:45.092]                 {
[09:31:45.092]                   {
[09:31:45.092]                     base::local({
[09:31:45.092]                       has_future <- base::requireNamespace("future", 
[09:31:45.092]                         quietly = TRUE)
[09:31:45.092]                       if (has_future) {
[09:31:45.092]                         ns <- base::getNamespace("future")
[09:31:45.092]                         version <- ns[[".package"]][["version"]]
[09:31:45.092]                         if (is.null(version)) 
[09:31:45.092]                           version <- utils::packageVersion("future")
[09:31:45.092]                       }
[09:31:45.092]                       else {
[09:31:45.092]                         version <- NULL
[09:31:45.092]                       }
[09:31:45.092]                       if (!has_future || version < "1.8.0") {
[09:31:45.092]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:45.092]                           "", base::R.version$version.string), 
[09:31:45.092]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:45.092]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:45.092]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:45.092]                             "release", "version")], collapse = " "), 
[09:31:45.092]                           hostname = base::Sys.info()[["nodename"]])
[09:31:45.092]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:45.092]                           info)
[09:31:45.092]                         info <- base::paste(info, collapse = "; ")
[09:31:45.092]                         if (!has_future) {
[09:31:45.092]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:45.092]                             info)
[09:31:45.092]                         }
[09:31:45.092]                         else {
[09:31:45.092]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:45.092]                             info, version)
[09:31:45.092]                         }
[09:31:45.092]                         base::stop(msg)
[09:31:45.092]                       }
[09:31:45.092]                     })
[09:31:45.092]                   }
[09:31:45.092]                   ...future.strategy.old <- future::plan("list")
[09:31:45.092]                   options(future.plan = NULL)
[09:31:45.092]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.092]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:45.092]                 }
[09:31:45.092]                 ...future.workdir <- getwd()
[09:31:45.092]             }
[09:31:45.092]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:45.092]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:45.092]         }
[09:31:45.092]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:45.092]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:45.092]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:45.092]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:45.092]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:45.092]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:45.092]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:45.092]             base::names(...future.oldOptions))
[09:31:45.092]     }
[09:31:45.092]     if (FALSE) {
[09:31:45.092]     }
[09:31:45.092]     else {
[09:31:45.092]         if (TRUE) {
[09:31:45.092]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:45.092]                 open = "w")
[09:31:45.092]         }
[09:31:45.092]         else {
[09:31:45.092]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:45.092]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:45.092]         }
[09:31:45.092]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:45.092]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:45.092]             base::sink(type = "output", split = FALSE)
[09:31:45.092]             base::close(...future.stdout)
[09:31:45.092]         }, add = TRUE)
[09:31:45.092]     }
[09:31:45.092]     ...future.frame <- base::sys.nframe()
[09:31:45.092]     ...future.conditions <- base::list()
[09:31:45.092]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:45.092]     if (FALSE) {
[09:31:45.092]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:45.092]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:45.092]     }
[09:31:45.092]     ...future.result <- base::tryCatch({
[09:31:45.092]         base::withCallingHandlers({
[09:31:45.092]             ...future.value <- base::withVisible(base::local({
[09:31:45.092]                 ii
[09:31:45.092]             }))
[09:31:45.092]             future::FutureResult(value = ...future.value$value, 
[09:31:45.092]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.092]                   ...future.rng), globalenv = if (FALSE) 
[09:31:45.092]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:45.092]                     ...future.globalenv.names))
[09:31:45.092]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:45.092]         }, condition = base::local({
[09:31:45.092]             c <- base::c
[09:31:45.092]             inherits <- base::inherits
[09:31:45.092]             invokeRestart <- base::invokeRestart
[09:31:45.092]             length <- base::length
[09:31:45.092]             list <- base::list
[09:31:45.092]             seq.int <- base::seq.int
[09:31:45.092]             signalCondition <- base::signalCondition
[09:31:45.092]             sys.calls <- base::sys.calls
[09:31:45.092]             `[[` <- base::`[[`
[09:31:45.092]             `+` <- base::`+`
[09:31:45.092]             `<<-` <- base::`<<-`
[09:31:45.092]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:45.092]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:45.092]                   3L)]
[09:31:45.092]             }
[09:31:45.092]             function(cond) {
[09:31:45.092]                 is_error <- inherits(cond, "error")
[09:31:45.092]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:45.092]                   NULL)
[09:31:45.092]                 if (is_error) {
[09:31:45.092]                   sessionInformation <- function() {
[09:31:45.092]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:45.092]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:45.092]                       search = base::search(), system = base::Sys.info())
[09:31:45.092]                   }
[09:31:45.092]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.092]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:45.092]                     cond$call), session = sessionInformation(), 
[09:31:45.092]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:45.092]                   signalCondition(cond)
[09:31:45.092]                 }
[09:31:45.092]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:45.092]                 "immediateCondition"))) {
[09:31:45.092]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:45.092]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.092]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:45.092]                   if (TRUE && !signal) {
[09:31:45.092]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.092]                     {
[09:31:45.092]                       inherits <- base::inherits
[09:31:45.092]                       invokeRestart <- base::invokeRestart
[09:31:45.092]                       is.null <- base::is.null
[09:31:45.092]                       muffled <- FALSE
[09:31:45.092]                       if (inherits(cond, "message")) {
[09:31:45.092]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.092]                         if (muffled) 
[09:31:45.092]                           invokeRestart("muffleMessage")
[09:31:45.092]                       }
[09:31:45.092]                       else if (inherits(cond, "warning")) {
[09:31:45.092]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.092]                         if (muffled) 
[09:31:45.092]                           invokeRestart("muffleWarning")
[09:31:45.092]                       }
[09:31:45.092]                       else if (inherits(cond, "condition")) {
[09:31:45.092]                         if (!is.null(pattern)) {
[09:31:45.092]                           computeRestarts <- base::computeRestarts
[09:31:45.092]                           grepl <- base::grepl
[09:31:45.092]                           restarts <- computeRestarts(cond)
[09:31:45.092]                           for (restart in restarts) {
[09:31:45.092]                             name <- restart$name
[09:31:45.092]                             if (is.null(name)) 
[09:31:45.092]                               next
[09:31:45.092]                             if (!grepl(pattern, name)) 
[09:31:45.092]                               next
[09:31:45.092]                             invokeRestart(restart)
[09:31:45.092]                             muffled <- TRUE
[09:31:45.092]                             break
[09:31:45.092]                           }
[09:31:45.092]                         }
[09:31:45.092]                       }
[09:31:45.092]                       invisible(muffled)
[09:31:45.092]                     }
[09:31:45.092]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.092]                   }
[09:31:45.092]                 }
[09:31:45.092]                 else {
[09:31:45.092]                   if (TRUE) {
[09:31:45.092]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.092]                     {
[09:31:45.092]                       inherits <- base::inherits
[09:31:45.092]                       invokeRestart <- base::invokeRestart
[09:31:45.092]                       is.null <- base::is.null
[09:31:45.092]                       muffled <- FALSE
[09:31:45.092]                       if (inherits(cond, "message")) {
[09:31:45.092]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.092]                         if (muffled) 
[09:31:45.092]                           invokeRestart("muffleMessage")
[09:31:45.092]                       }
[09:31:45.092]                       else if (inherits(cond, "warning")) {
[09:31:45.092]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.092]                         if (muffled) 
[09:31:45.092]                           invokeRestart("muffleWarning")
[09:31:45.092]                       }
[09:31:45.092]                       else if (inherits(cond, "condition")) {
[09:31:45.092]                         if (!is.null(pattern)) {
[09:31:45.092]                           computeRestarts <- base::computeRestarts
[09:31:45.092]                           grepl <- base::grepl
[09:31:45.092]                           restarts <- computeRestarts(cond)
[09:31:45.092]                           for (restart in restarts) {
[09:31:45.092]                             name <- restart$name
[09:31:45.092]                             if (is.null(name)) 
[09:31:45.092]                               next
[09:31:45.092]                             if (!grepl(pattern, name)) 
[09:31:45.092]                               next
[09:31:45.092]                             invokeRestart(restart)
[09:31:45.092]                             muffled <- TRUE
[09:31:45.092]                             break
[09:31:45.092]                           }
[09:31:45.092]                         }
[09:31:45.092]                       }
[09:31:45.092]                       invisible(muffled)
[09:31:45.092]                     }
[09:31:45.092]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.092]                   }
[09:31:45.092]                 }
[09:31:45.092]             }
[09:31:45.092]         }))
[09:31:45.092]     }, error = function(ex) {
[09:31:45.092]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:45.092]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.092]                 ...future.rng), started = ...future.startTime, 
[09:31:45.092]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:45.092]             version = "1.8"), class = "FutureResult")
[09:31:45.092]     }, finally = {
[09:31:45.092]         if (!identical(...future.workdir, getwd())) 
[09:31:45.092]             setwd(...future.workdir)
[09:31:45.092]         {
[09:31:45.092]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:45.092]                 ...future.oldOptions$nwarnings <- NULL
[09:31:45.092]             }
[09:31:45.092]             base::options(...future.oldOptions)
[09:31:45.092]             if (.Platform$OS.type == "windows") {
[09:31:45.092]                 old_names <- names(...future.oldEnvVars)
[09:31:45.092]                 envs <- base::Sys.getenv()
[09:31:45.092]                 names <- names(envs)
[09:31:45.092]                 common <- intersect(names, old_names)
[09:31:45.092]                 added <- setdiff(names, old_names)
[09:31:45.092]                 removed <- setdiff(old_names, names)
[09:31:45.092]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:45.092]                   envs[common]]
[09:31:45.092]                 NAMES <- toupper(changed)
[09:31:45.092]                 args <- list()
[09:31:45.092]                 for (kk in seq_along(NAMES)) {
[09:31:45.092]                   name <- changed[[kk]]
[09:31:45.092]                   NAME <- NAMES[[kk]]
[09:31:45.092]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.092]                     next
[09:31:45.092]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.092]                 }
[09:31:45.092]                 NAMES <- toupper(added)
[09:31:45.092]                 for (kk in seq_along(NAMES)) {
[09:31:45.092]                   name <- added[[kk]]
[09:31:45.092]                   NAME <- NAMES[[kk]]
[09:31:45.092]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.092]                     next
[09:31:45.092]                   args[[name]] <- ""
[09:31:45.092]                 }
[09:31:45.092]                 NAMES <- toupper(removed)
[09:31:45.092]                 for (kk in seq_along(NAMES)) {
[09:31:45.092]                   name <- removed[[kk]]
[09:31:45.092]                   NAME <- NAMES[[kk]]
[09:31:45.092]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.092]                     next
[09:31:45.092]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.092]                 }
[09:31:45.092]                 if (length(args) > 0) 
[09:31:45.092]                   base::do.call(base::Sys.setenv, args = args)
[09:31:45.092]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:45.092]             }
[09:31:45.092]             else {
[09:31:45.092]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:45.092]             }
[09:31:45.092]             {
[09:31:45.092]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:45.092]                   0L) {
[09:31:45.092]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:45.092]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:45.092]                   base::options(opts)
[09:31:45.092]                 }
[09:31:45.092]                 {
[09:31:45.092]                   {
[09:31:45.092]                     NULL
[09:31:45.092]                     RNGkind("Mersenne-Twister")
[09:31:45.092]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:45.092]                       inherits = FALSE)
[09:31:45.092]                   }
[09:31:45.092]                   options(future.plan = NULL)
[09:31:45.092]                   if (is.na(NA_character_)) 
[09:31:45.092]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.092]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:45.092]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:45.092]                     .init = FALSE)
[09:31:45.092]                 }
[09:31:45.092]             }
[09:31:45.092]         }
[09:31:45.092]     })
[09:31:45.092]     if (TRUE) {
[09:31:45.092]         base::sink(type = "output", split = FALSE)
[09:31:45.092]         if (TRUE) {
[09:31:45.092]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:45.092]         }
[09:31:45.092]         else {
[09:31:45.092]             ...future.result["stdout"] <- base::list(NULL)
[09:31:45.092]         }
[09:31:45.092]         base::close(...future.stdout)
[09:31:45.092]         ...future.stdout <- NULL
[09:31:45.092]     }
[09:31:45.092]     ...future.result$conditions <- ...future.conditions
[09:31:45.092]     ...future.result$finished <- base::Sys.time()
[09:31:45.092]     ...future.result
[09:31:45.092] }
[09:31:45.093] plan(): Setting new future strategy stack:
[09:31:45.094] List of future strategies:
[09:31:45.094] 1. sequential:
[09:31:45.094]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:45.094]    - tweaked: FALSE
[09:31:45.094]    - call: NULL
[09:31:45.094] plan(): nbrOfWorkers() = 1
[09:31:45.095] plan(): Setting new future strategy stack:
[09:31:45.095] List of future strategies:
[09:31:45.095] 1. multicore:
[09:31:45.095]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:45.095]    - tweaked: FALSE
[09:31:45.095]    - call: plan(multicore)
[09:31:45.098] plan(): nbrOfWorkers() = 1
[09:31:45.098] SequentialFuture started (and completed)
 - Creating multicore future #2 ...
[09:31:45.102] getGlobalsAndPackages() ...
[09:31:45.102] Not searching for globals
[09:31:45.102] - globals: [0] <none>
[09:31:45.102] getGlobalsAndPackages() ... DONE
[09:31:45.102] Packages needed by the future expression (n = 0): <none>
[09:31:45.102] Packages needed by future strategies (n = 0): <none>
[09:31:45.103] {
[09:31:45.103]     {
[09:31:45.103]         {
[09:31:45.103]             ...future.startTime <- base::Sys.time()
[09:31:45.103]             {
[09:31:45.103]                 {
[09:31:45.103]                   {
[09:31:45.103]                     base::local({
[09:31:45.103]                       has_future <- base::requireNamespace("future", 
[09:31:45.103]                         quietly = TRUE)
[09:31:45.103]                       if (has_future) {
[09:31:45.103]                         ns <- base::getNamespace("future")
[09:31:45.103]                         version <- ns[[".package"]][["version"]]
[09:31:45.103]                         if (is.null(version)) 
[09:31:45.103]                           version <- utils::packageVersion("future")
[09:31:45.103]                       }
[09:31:45.103]                       else {
[09:31:45.103]                         version <- NULL
[09:31:45.103]                       }
[09:31:45.103]                       if (!has_future || version < "1.8.0") {
[09:31:45.103]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:45.103]                           "", base::R.version$version.string), 
[09:31:45.103]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:45.103]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:45.103]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:45.103]                             "release", "version")], collapse = " "), 
[09:31:45.103]                           hostname = base::Sys.info()[["nodename"]])
[09:31:45.103]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:45.103]                           info)
[09:31:45.103]                         info <- base::paste(info, collapse = "; ")
[09:31:45.103]                         if (!has_future) {
[09:31:45.103]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:45.103]                             info)
[09:31:45.103]                         }
[09:31:45.103]                         else {
[09:31:45.103]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:45.103]                             info, version)
[09:31:45.103]                         }
[09:31:45.103]                         base::stop(msg)
[09:31:45.103]                       }
[09:31:45.103]                     })
[09:31:45.103]                   }
[09:31:45.103]                   ...future.strategy.old <- future::plan("list")
[09:31:45.103]                   options(future.plan = NULL)
[09:31:45.103]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.103]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:45.103]                 }
[09:31:45.103]                 ...future.workdir <- getwd()
[09:31:45.103]             }
[09:31:45.103]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:45.103]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:45.103]         }
[09:31:45.103]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:45.103]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:45.103]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:45.103]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:45.103]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:45.103]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:45.103]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:45.103]             base::names(...future.oldOptions))
[09:31:45.103]     }
[09:31:45.103]     if (FALSE) {
[09:31:45.103]     }
[09:31:45.103]     else {
[09:31:45.103]         if (TRUE) {
[09:31:45.103]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:45.103]                 open = "w")
[09:31:45.103]         }
[09:31:45.103]         else {
[09:31:45.103]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:45.103]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:45.103]         }
[09:31:45.103]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:45.103]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:45.103]             base::sink(type = "output", split = FALSE)
[09:31:45.103]             base::close(...future.stdout)
[09:31:45.103]         }, add = TRUE)
[09:31:45.103]     }
[09:31:45.103]     ...future.frame <- base::sys.nframe()
[09:31:45.103]     ...future.conditions <- base::list()
[09:31:45.103]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:45.103]     if (FALSE) {
[09:31:45.103]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:45.103]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:45.103]     }
[09:31:45.103]     ...future.result <- base::tryCatch({
[09:31:45.103]         base::withCallingHandlers({
[09:31:45.103]             ...future.value <- base::withVisible(base::local({
[09:31:45.103]                 ii
[09:31:45.103]             }))
[09:31:45.103]             future::FutureResult(value = ...future.value$value, 
[09:31:45.103]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.103]                   ...future.rng), globalenv = if (FALSE) 
[09:31:45.103]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:45.103]                     ...future.globalenv.names))
[09:31:45.103]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:45.103]         }, condition = base::local({
[09:31:45.103]             c <- base::c
[09:31:45.103]             inherits <- base::inherits
[09:31:45.103]             invokeRestart <- base::invokeRestart
[09:31:45.103]             length <- base::length
[09:31:45.103]             list <- base::list
[09:31:45.103]             seq.int <- base::seq.int
[09:31:45.103]             signalCondition <- base::signalCondition
[09:31:45.103]             sys.calls <- base::sys.calls
[09:31:45.103]             `[[` <- base::`[[`
[09:31:45.103]             `+` <- base::`+`
[09:31:45.103]             `<<-` <- base::`<<-`
[09:31:45.103]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:45.103]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:45.103]                   3L)]
[09:31:45.103]             }
[09:31:45.103]             function(cond) {
[09:31:45.103]                 is_error <- inherits(cond, "error")
[09:31:45.103]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:45.103]                   NULL)
[09:31:45.103]                 if (is_error) {
[09:31:45.103]                   sessionInformation <- function() {
[09:31:45.103]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:45.103]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:45.103]                       search = base::search(), system = base::Sys.info())
[09:31:45.103]                   }
[09:31:45.103]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.103]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:45.103]                     cond$call), session = sessionInformation(), 
[09:31:45.103]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:45.103]                   signalCondition(cond)
[09:31:45.103]                 }
[09:31:45.103]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:45.103]                 "immediateCondition"))) {
[09:31:45.103]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:45.103]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.103]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:45.103]                   if (TRUE && !signal) {
[09:31:45.103]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.103]                     {
[09:31:45.103]                       inherits <- base::inherits
[09:31:45.103]                       invokeRestart <- base::invokeRestart
[09:31:45.103]                       is.null <- base::is.null
[09:31:45.103]                       muffled <- FALSE
[09:31:45.103]                       if (inherits(cond, "message")) {
[09:31:45.103]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.103]                         if (muffled) 
[09:31:45.103]                           invokeRestart("muffleMessage")
[09:31:45.103]                       }
[09:31:45.103]                       else if (inherits(cond, "warning")) {
[09:31:45.103]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.103]                         if (muffled) 
[09:31:45.103]                           invokeRestart("muffleWarning")
[09:31:45.103]                       }
[09:31:45.103]                       else if (inherits(cond, "condition")) {
[09:31:45.103]                         if (!is.null(pattern)) {
[09:31:45.103]                           computeRestarts <- base::computeRestarts
[09:31:45.103]                           grepl <- base::grepl
[09:31:45.103]                           restarts <- computeRestarts(cond)
[09:31:45.103]                           for (restart in restarts) {
[09:31:45.103]                             name <- restart$name
[09:31:45.103]                             if (is.null(name)) 
[09:31:45.103]                               next
[09:31:45.103]                             if (!grepl(pattern, name)) 
[09:31:45.103]                               next
[09:31:45.103]                             invokeRestart(restart)
[09:31:45.103]                             muffled <- TRUE
[09:31:45.103]                             break
[09:31:45.103]                           }
[09:31:45.103]                         }
[09:31:45.103]                       }
[09:31:45.103]                       invisible(muffled)
[09:31:45.103]                     }
[09:31:45.103]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.103]                   }
[09:31:45.103]                 }
[09:31:45.103]                 else {
[09:31:45.103]                   if (TRUE) {
[09:31:45.103]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.103]                     {
[09:31:45.103]                       inherits <- base::inherits
[09:31:45.103]                       invokeRestart <- base::invokeRestart
[09:31:45.103]                       is.null <- base::is.null
[09:31:45.103]                       muffled <- FALSE
[09:31:45.103]                       if (inherits(cond, "message")) {
[09:31:45.103]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.103]                         if (muffled) 
[09:31:45.103]                           invokeRestart("muffleMessage")
[09:31:45.103]                       }
[09:31:45.103]                       else if (inherits(cond, "warning")) {
[09:31:45.103]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.103]                         if (muffled) 
[09:31:45.103]                           invokeRestart("muffleWarning")
[09:31:45.103]                       }
[09:31:45.103]                       else if (inherits(cond, "condition")) {
[09:31:45.103]                         if (!is.null(pattern)) {
[09:31:45.103]                           computeRestarts <- base::computeRestarts
[09:31:45.103]                           grepl <- base::grepl
[09:31:45.103]                           restarts <- computeRestarts(cond)
[09:31:45.103]                           for (restart in restarts) {
[09:31:45.103]                             name <- restart$name
[09:31:45.103]                             if (is.null(name)) 
[09:31:45.103]                               next
[09:31:45.103]                             if (!grepl(pattern, name)) 
[09:31:45.103]                               next
[09:31:45.103]                             invokeRestart(restart)
[09:31:45.103]                             muffled <- TRUE
[09:31:45.103]                             break
[09:31:45.103]                           }
[09:31:45.103]                         }
[09:31:45.103]                       }
[09:31:45.103]                       invisible(muffled)
[09:31:45.103]                     }
[09:31:45.103]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.103]                   }
[09:31:45.103]                 }
[09:31:45.103]             }
[09:31:45.103]         }))
[09:31:45.103]     }, error = function(ex) {
[09:31:45.103]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:45.103]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.103]                 ...future.rng), started = ...future.startTime, 
[09:31:45.103]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:45.103]             version = "1.8"), class = "FutureResult")
[09:31:45.103]     }, finally = {
[09:31:45.103]         if (!identical(...future.workdir, getwd())) 
[09:31:45.103]             setwd(...future.workdir)
[09:31:45.103]         {
[09:31:45.103]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:45.103]                 ...future.oldOptions$nwarnings <- NULL
[09:31:45.103]             }
[09:31:45.103]             base::options(...future.oldOptions)
[09:31:45.103]             if (.Platform$OS.type == "windows") {
[09:31:45.103]                 old_names <- names(...future.oldEnvVars)
[09:31:45.103]                 envs <- base::Sys.getenv()
[09:31:45.103]                 names <- names(envs)
[09:31:45.103]                 common <- intersect(names, old_names)
[09:31:45.103]                 added <- setdiff(names, old_names)
[09:31:45.103]                 removed <- setdiff(old_names, names)
[09:31:45.103]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:45.103]                   envs[common]]
[09:31:45.103]                 NAMES <- toupper(changed)
[09:31:45.103]                 args <- list()
[09:31:45.103]                 for (kk in seq_along(NAMES)) {
[09:31:45.103]                   name <- changed[[kk]]
[09:31:45.103]                   NAME <- NAMES[[kk]]
[09:31:45.103]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.103]                     next
[09:31:45.103]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.103]                 }
[09:31:45.103]                 NAMES <- toupper(added)
[09:31:45.103]                 for (kk in seq_along(NAMES)) {
[09:31:45.103]                   name <- added[[kk]]
[09:31:45.103]                   NAME <- NAMES[[kk]]
[09:31:45.103]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.103]                     next
[09:31:45.103]                   args[[name]] <- ""
[09:31:45.103]                 }
[09:31:45.103]                 NAMES <- toupper(removed)
[09:31:45.103]                 for (kk in seq_along(NAMES)) {
[09:31:45.103]                   name <- removed[[kk]]
[09:31:45.103]                   NAME <- NAMES[[kk]]
[09:31:45.103]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.103]                     next
[09:31:45.103]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.103]                 }
[09:31:45.103]                 if (length(args) > 0) 
[09:31:45.103]                   base::do.call(base::Sys.setenv, args = args)
[09:31:45.103]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:45.103]             }
[09:31:45.103]             else {
[09:31:45.103]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:45.103]             }
[09:31:45.103]             {
[09:31:45.103]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:45.103]                   0L) {
[09:31:45.103]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:45.103]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:45.103]                   base::options(opts)
[09:31:45.103]                 }
[09:31:45.103]                 {
[09:31:45.103]                   {
[09:31:45.103]                     NULL
[09:31:45.103]                     RNGkind("Mersenne-Twister")
[09:31:45.103]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:45.103]                       inherits = FALSE)
[09:31:45.103]                   }
[09:31:45.103]                   options(future.plan = NULL)
[09:31:45.103]                   if (is.na(NA_character_)) 
[09:31:45.103]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.103]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:45.103]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:45.103]                     .init = FALSE)
[09:31:45.103]                 }
[09:31:45.103]             }
[09:31:45.103]         }
[09:31:45.103]     })
[09:31:45.103]     if (TRUE) {
[09:31:45.103]         base::sink(type = "output", split = FALSE)
[09:31:45.103]         if (TRUE) {
[09:31:45.103]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:45.103]         }
[09:31:45.103]         else {
[09:31:45.103]             ...future.result["stdout"] <- base::list(NULL)
[09:31:45.103]         }
[09:31:45.103]         base::close(...future.stdout)
[09:31:45.103]         ...future.stdout <- NULL
[09:31:45.103]     }
[09:31:45.103]     ...future.result$conditions <- ...future.conditions
[09:31:45.103]     ...future.result$finished <- base::Sys.time()
[09:31:45.103]     ...future.result
[09:31:45.103] }
[09:31:45.104] plan(): Setting new future strategy stack:
[09:31:45.105] List of future strategies:
[09:31:45.105] 1. sequential:
[09:31:45.105]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:45.105]    - tweaked: FALSE
[09:31:45.105]    - call: NULL
[09:31:45.105] plan(): nbrOfWorkers() = 1
[09:31:45.106] plan(): Setting new future strategy stack:
[09:31:45.106] List of future strategies:
[09:31:45.106] 1. multicore:
[09:31:45.106]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:45.106]    - tweaked: FALSE
[09:31:45.106]    - call: plan(multicore)
[09:31:45.109] plan(): nbrOfWorkers() = 1
[09:31:45.109] SequentialFuture started (and completed)
 - Creating multicore future #3 ...
[09:31:45.114] getGlobalsAndPackages() ...
[09:31:45.114] Not searching for globals
[09:31:45.114] - globals: [0] <none>
[09:31:45.114] getGlobalsAndPackages() ... DONE
[09:31:45.114] Packages needed by the future expression (n = 0): <none>
[09:31:45.114] Packages needed by future strategies (n = 0): <none>
[09:31:45.115] {
[09:31:45.115]     {
[09:31:45.115]         {
[09:31:45.115]             ...future.startTime <- base::Sys.time()
[09:31:45.115]             {
[09:31:45.115]                 {
[09:31:45.115]                   {
[09:31:45.115]                     base::local({
[09:31:45.115]                       has_future <- base::requireNamespace("future", 
[09:31:45.115]                         quietly = TRUE)
[09:31:45.115]                       if (has_future) {
[09:31:45.115]                         ns <- base::getNamespace("future")
[09:31:45.115]                         version <- ns[[".package"]][["version"]]
[09:31:45.115]                         if (is.null(version)) 
[09:31:45.115]                           version <- utils::packageVersion("future")
[09:31:45.115]                       }
[09:31:45.115]                       else {
[09:31:45.115]                         version <- NULL
[09:31:45.115]                       }
[09:31:45.115]                       if (!has_future || version < "1.8.0") {
[09:31:45.115]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:45.115]                           "", base::R.version$version.string), 
[09:31:45.115]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:45.115]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:45.115]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:45.115]                             "release", "version")], collapse = " "), 
[09:31:45.115]                           hostname = base::Sys.info()[["nodename"]])
[09:31:45.115]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:45.115]                           info)
[09:31:45.115]                         info <- base::paste(info, collapse = "; ")
[09:31:45.115]                         if (!has_future) {
[09:31:45.115]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:45.115]                             info)
[09:31:45.115]                         }
[09:31:45.115]                         else {
[09:31:45.115]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:45.115]                             info, version)
[09:31:45.115]                         }
[09:31:45.115]                         base::stop(msg)
[09:31:45.115]                       }
[09:31:45.115]                     })
[09:31:45.115]                   }
[09:31:45.115]                   ...future.strategy.old <- future::plan("list")
[09:31:45.115]                   options(future.plan = NULL)
[09:31:45.115]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.115]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:45.115]                 }
[09:31:45.115]                 ...future.workdir <- getwd()
[09:31:45.115]             }
[09:31:45.115]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:45.115]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:45.115]         }
[09:31:45.115]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:45.115]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:45.115]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:45.115]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:45.115]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:45.115]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:45.115]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:45.115]             base::names(...future.oldOptions))
[09:31:45.115]     }
[09:31:45.115]     if (FALSE) {
[09:31:45.115]     }
[09:31:45.115]     else {
[09:31:45.115]         if (TRUE) {
[09:31:45.115]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:45.115]                 open = "w")
[09:31:45.115]         }
[09:31:45.115]         else {
[09:31:45.115]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:45.115]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:45.115]         }
[09:31:45.115]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:45.115]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:45.115]             base::sink(type = "output", split = FALSE)
[09:31:45.115]             base::close(...future.stdout)
[09:31:45.115]         }, add = TRUE)
[09:31:45.115]     }
[09:31:45.115]     ...future.frame <- base::sys.nframe()
[09:31:45.115]     ...future.conditions <- base::list()
[09:31:45.115]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:45.115]     if (FALSE) {
[09:31:45.115]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:45.115]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:45.115]     }
[09:31:45.115]     ...future.result <- base::tryCatch({
[09:31:45.115]         base::withCallingHandlers({
[09:31:45.115]             ...future.value <- base::withVisible(base::local({
[09:31:45.115]                 ii
[09:31:45.115]             }))
[09:31:45.115]             future::FutureResult(value = ...future.value$value, 
[09:31:45.115]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.115]                   ...future.rng), globalenv = if (FALSE) 
[09:31:45.115]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:45.115]                     ...future.globalenv.names))
[09:31:45.115]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:45.115]         }, condition = base::local({
[09:31:45.115]             c <- base::c
[09:31:45.115]             inherits <- base::inherits
[09:31:45.115]             invokeRestart <- base::invokeRestart
[09:31:45.115]             length <- base::length
[09:31:45.115]             list <- base::list
[09:31:45.115]             seq.int <- base::seq.int
[09:31:45.115]             signalCondition <- base::signalCondition
[09:31:45.115]             sys.calls <- base::sys.calls
[09:31:45.115]             `[[` <- base::`[[`
[09:31:45.115]             `+` <- base::`+`
[09:31:45.115]             `<<-` <- base::`<<-`
[09:31:45.115]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:45.115]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:45.115]                   3L)]
[09:31:45.115]             }
[09:31:45.115]             function(cond) {
[09:31:45.115]                 is_error <- inherits(cond, "error")
[09:31:45.115]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:45.115]                   NULL)
[09:31:45.115]                 if (is_error) {
[09:31:45.115]                   sessionInformation <- function() {
[09:31:45.115]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:45.115]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:45.115]                       search = base::search(), system = base::Sys.info())
[09:31:45.115]                   }
[09:31:45.115]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.115]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:45.115]                     cond$call), session = sessionInformation(), 
[09:31:45.115]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:45.115]                   signalCondition(cond)
[09:31:45.115]                 }
[09:31:45.115]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:45.115]                 "immediateCondition"))) {
[09:31:45.115]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:45.115]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.115]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:45.115]                   if (TRUE && !signal) {
[09:31:45.115]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.115]                     {
[09:31:45.115]                       inherits <- base::inherits
[09:31:45.115]                       invokeRestart <- base::invokeRestart
[09:31:45.115]                       is.null <- base::is.null
[09:31:45.115]                       muffled <- FALSE
[09:31:45.115]                       if (inherits(cond, "message")) {
[09:31:45.115]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.115]                         if (muffled) 
[09:31:45.115]                           invokeRestart("muffleMessage")
[09:31:45.115]                       }
[09:31:45.115]                       else if (inherits(cond, "warning")) {
[09:31:45.115]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.115]                         if (muffled) 
[09:31:45.115]                           invokeRestart("muffleWarning")
[09:31:45.115]                       }
[09:31:45.115]                       else if (inherits(cond, "condition")) {
[09:31:45.115]                         if (!is.null(pattern)) {
[09:31:45.115]                           computeRestarts <- base::computeRestarts
[09:31:45.115]                           grepl <- base::grepl
[09:31:45.115]                           restarts <- computeRestarts(cond)
[09:31:45.115]                           for (restart in restarts) {
[09:31:45.115]                             name <- restart$name
[09:31:45.115]                             if (is.null(name)) 
[09:31:45.115]                               next
[09:31:45.115]                             if (!grepl(pattern, name)) 
[09:31:45.115]                               next
[09:31:45.115]                             invokeRestart(restart)
[09:31:45.115]                             muffled <- TRUE
[09:31:45.115]                             break
[09:31:45.115]                           }
[09:31:45.115]                         }
[09:31:45.115]                       }
[09:31:45.115]                       invisible(muffled)
[09:31:45.115]                     }
[09:31:45.115]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.115]                   }
[09:31:45.115]                 }
[09:31:45.115]                 else {
[09:31:45.115]                   if (TRUE) {
[09:31:45.115]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.115]                     {
[09:31:45.115]                       inherits <- base::inherits
[09:31:45.115]                       invokeRestart <- base::invokeRestart
[09:31:45.115]                       is.null <- base::is.null
[09:31:45.115]                       muffled <- FALSE
[09:31:45.115]                       if (inherits(cond, "message")) {
[09:31:45.115]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.115]                         if (muffled) 
[09:31:45.115]                           invokeRestart("muffleMessage")
[09:31:45.115]                       }
[09:31:45.115]                       else if (inherits(cond, "warning")) {
[09:31:45.115]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.115]                         if (muffled) 
[09:31:45.115]                           invokeRestart("muffleWarning")
[09:31:45.115]                       }
[09:31:45.115]                       else if (inherits(cond, "condition")) {
[09:31:45.115]                         if (!is.null(pattern)) {
[09:31:45.115]                           computeRestarts <- base::computeRestarts
[09:31:45.115]                           grepl <- base::grepl
[09:31:45.115]                           restarts <- computeRestarts(cond)
[09:31:45.115]                           for (restart in restarts) {
[09:31:45.115]                             name <- restart$name
[09:31:45.115]                             if (is.null(name)) 
[09:31:45.115]                               next
[09:31:45.115]                             if (!grepl(pattern, name)) 
[09:31:45.115]                               next
[09:31:45.115]                             invokeRestart(restart)
[09:31:45.115]                             muffled <- TRUE
[09:31:45.115]                             break
[09:31:45.115]                           }
[09:31:45.115]                         }
[09:31:45.115]                       }
[09:31:45.115]                       invisible(muffled)
[09:31:45.115]                     }
[09:31:45.115]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.115]                   }
[09:31:45.115]                 }
[09:31:45.115]             }
[09:31:45.115]         }))
[09:31:45.115]     }, error = function(ex) {
[09:31:45.115]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:45.115]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.115]                 ...future.rng), started = ...future.startTime, 
[09:31:45.115]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:45.115]             version = "1.8"), class = "FutureResult")
[09:31:45.115]     }, finally = {
[09:31:45.115]         if (!identical(...future.workdir, getwd())) 
[09:31:45.115]             setwd(...future.workdir)
[09:31:45.115]         {
[09:31:45.115]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:45.115]                 ...future.oldOptions$nwarnings <- NULL
[09:31:45.115]             }
[09:31:45.115]             base::options(...future.oldOptions)
[09:31:45.115]             if (.Platform$OS.type == "windows") {
[09:31:45.115]                 old_names <- names(...future.oldEnvVars)
[09:31:45.115]                 envs <- base::Sys.getenv()
[09:31:45.115]                 names <- names(envs)
[09:31:45.115]                 common <- intersect(names, old_names)
[09:31:45.115]                 added <- setdiff(names, old_names)
[09:31:45.115]                 removed <- setdiff(old_names, names)
[09:31:45.115]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:45.115]                   envs[common]]
[09:31:45.115]                 NAMES <- toupper(changed)
[09:31:45.115]                 args <- list()
[09:31:45.115]                 for (kk in seq_along(NAMES)) {
[09:31:45.115]                   name <- changed[[kk]]
[09:31:45.115]                   NAME <- NAMES[[kk]]
[09:31:45.115]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.115]                     next
[09:31:45.115]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.115]                 }
[09:31:45.115]                 NAMES <- toupper(added)
[09:31:45.115]                 for (kk in seq_along(NAMES)) {
[09:31:45.115]                   name <- added[[kk]]
[09:31:45.115]                   NAME <- NAMES[[kk]]
[09:31:45.115]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.115]                     next
[09:31:45.115]                   args[[name]] <- ""
[09:31:45.115]                 }
[09:31:45.115]                 NAMES <- toupper(removed)
[09:31:45.115]                 for (kk in seq_along(NAMES)) {
[09:31:45.115]                   name <- removed[[kk]]
[09:31:45.115]                   NAME <- NAMES[[kk]]
[09:31:45.115]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.115]                     next
[09:31:45.115]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.115]                 }
[09:31:45.115]                 if (length(args) > 0) 
[09:31:45.115]                   base::do.call(base::Sys.setenv, args = args)
[09:31:45.115]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:45.115]             }
[09:31:45.115]             else {
[09:31:45.115]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:45.115]             }
[09:31:45.115]             {
[09:31:45.115]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:45.115]                   0L) {
[09:31:45.115]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:45.115]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:45.115]                   base::options(opts)
[09:31:45.115]                 }
[09:31:45.115]                 {
[09:31:45.115]                   {
[09:31:45.115]                     NULL
[09:31:45.115]                     RNGkind("Mersenne-Twister")
[09:31:45.115]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:45.115]                       inherits = FALSE)
[09:31:45.115]                   }
[09:31:45.115]                   options(future.plan = NULL)
[09:31:45.115]                   if (is.na(NA_character_)) 
[09:31:45.115]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.115]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:45.115]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:45.115]                     .init = FALSE)
[09:31:45.115]                 }
[09:31:45.115]             }
[09:31:45.115]         }
[09:31:45.115]     })
[09:31:45.115]     if (TRUE) {
[09:31:45.115]         base::sink(type = "output", split = FALSE)
[09:31:45.115]         if (TRUE) {
[09:31:45.115]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:45.115]         }
[09:31:45.115]         else {
[09:31:45.115]             ...future.result["stdout"] <- base::list(NULL)
[09:31:45.115]         }
[09:31:45.115]         base::close(...future.stdout)
[09:31:45.115]         ...future.stdout <- NULL
[09:31:45.115]     }
[09:31:45.115]     ...future.result$conditions <- ...future.conditions
[09:31:45.115]     ...future.result$finished <- base::Sys.time()
[09:31:45.115]     ...future.result
[09:31:45.115] }
[09:31:45.116] plan(): Setting new future strategy stack:
[09:31:45.117] List of future strategies:
[09:31:45.117] 1. sequential:
[09:31:45.117]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:45.117]    - tweaked: FALSE
[09:31:45.117]    - call: NULL
[09:31:45.117] plan(): nbrOfWorkers() = 1
[09:31:45.118] plan(): Setting new future strategy stack:
[09:31:45.118] List of future strategies:
[09:31:45.118] 1. multicore:
[09:31:45.118]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:45.118]    - tweaked: FALSE
[09:31:45.118]    - call: plan(multicore)
[09:31:45.121] plan(): nbrOfWorkers() = 1
[09:31:45.121] SequentialFuture started (and completed)
 - Creating multicore future #4 ...
[09:31:45.124] getGlobalsAndPackages() ...
[09:31:45.124] Not searching for globals
[09:31:45.125] - globals: [0] <none>
[09:31:45.125] getGlobalsAndPackages() ... DONE
[09:31:45.125] Packages needed by the future expression (n = 0): <none>
[09:31:45.125] Packages needed by future strategies (n = 0): <none>
[09:31:45.125] {
[09:31:45.125]     {
[09:31:45.125]         {
[09:31:45.125]             ...future.startTime <- base::Sys.time()
[09:31:45.125]             {
[09:31:45.125]                 {
[09:31:45.125]                   {
[09:31:45.125]                     base::local({
[09:31:45.125]                       has_future <- base::requireNamespace("future", 
[09:31:45.125]                         quietly = TRUE)
[09:31:45.125]                       if (has_future) {
[09:31:45.125]                         ns <- base::getNamespace("future")
[09:31:45.125]                         version <- ns[[".package"]][["version"]]
[09:31:45.125]                         if (is.null(version)) 
[09:31:45.125]                           version <- utils::packageVersion("future")
[09:31:45.125]                       }
[09:31:45.125]                       else {
[09:31:45.125]                         version <- NULL
[09:31:45.125]                       }
[09:31:45.125]                       if (!has_future || version < "1.8.0") {
[09:31:45.125]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:45.125]                           "", base::R.version$version.string), 
[09:31:45.125]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:45.125]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:45.125]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:45.125]                             "release", "version")], collapse = " "), 
[09:31:45.125]                           hostname = base::Sys.info()[["nodename"]])
[09:31:45.125]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:45.125]                           info)
[09:31:45.125]                         info <- base::paste(info, collapse = "; ")
[09:31:45.125]                         if (!has_future) {
[09:31:45.125]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:45.125]                             info)
[09:31:45.125]                         }
[09:31:45.125]                         else {
[09:31:45.125]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:45.125]                             info, version)
[09:31:45.125]                         }
[09:31:45.125]                         base::stop(msg)
[09:31:45.125]                       }
[09:31:45.125]                     })
[09:31:45.125]                   }
[09:31:45.125]                   ...future.strategy.old <- future::plan("list")
[09:31:45.125]                   options(future.plan = NULL)
[09:31:45.125]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.125]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:45.125]                 }
[09:31:45.125]                 ...future.workdir <- getwd()
[09:31:45.125]             }
[09:31:45.125]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:45.125]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:45.125]         }
[09:31:45.125]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:45.125]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:45.125]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:45.125]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:45.125]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:45.125]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:45.125]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:45.125]             base::names(...future.oldOptions))
[09:31:45.125]     }
[09:31:45.125]     if (FALSE) {
[09:31:45.125]     }
[09:31:45.125]     else {
[09:31:45.125]         if (TRUE) {
[09:31:45.125]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:45.125]                 open = "w")
[09:31:45.125]         }
[09:31:45.125]         else {
[09:31:45.125]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:45.125]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:45.125]         }
[09:31:45.125]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:45.125]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:45.125]             base::sink(type = "output", split = FALSE)
[09:31:45.125]             base::close(...future.stdout)
[09:31:45.125]         }, add = TRUE)
[09:31:45.125]     }
[09:31:45.125]     ...future.frame <- base::sys.nframe()
[09:31:45.125]     ...future.conditions <- base::list()
[09:31:45.125]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:45.125]     if (FALSE) {
[09:31:45.125]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:45.125]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:45.125]     }
[09:31:45.125]     ...future.result <- base::tryCatch({
[09:31:45.125]         base::withCallingHandlers({
[09:31:45.125]             ...future.value <- base::withVisible(base::local({
[09:31:45.125]                 ii
[09:31:45.125]             }))
[09:31:45.125]             future::FutureResult(value = ...future.value$value, 
[09:31:45.125]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.125]                   ...future.rng), globalenv = if (FALSE) 
[09:31:45.125]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:45.125]                     ...future.globalenv.names))
[09:31:45.125]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:45.125]         }, condition = base::local({
[09:31:45.125]             c <- base::c
[09:31:45.125]             inherits <- base::inherits
[09:31:45.125]             invokeRestart <- base::invokeRestart
[09:31:45.125]             length <- base::length
[09:31:45.125]             list <- base::list
[09:31:45.125]             seq.int <- base::seq.int
[09:31:45.125]             signalCondition <- base::signalCondition
[09:31:45.125]             sys.calls <- base::sys.calls
[09:31:45.125]             `[[` <- base::`[[`
[09:31:45.125]             `+` <- base::`+`
[09:31:45.125]             `<<-` <- base::`<<-`
[09:31:45.125]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:45.125]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:45.125]                   3L)]
[09:31:45.125]             }
[09:31:45.125]             function(cond) {
[09:31:45.125]                 is_error <- inherits(cond, "error")
[09:31:45.125]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:45.125]                   NULL)
[09:31:45.125]                 if (is_error) {
[09:31:45.125]                   sessionInformation <- function() {
[09:31:45.125]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:45.125]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:45.125]                       search = base::search(), system = base::Sys.info())
[09:31:45.125]                   }
[09:31:45.125]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.125]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:45.125]                     cond$call), session = sessionInformation(), 
[09:31:45.125]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:45.125]                   signalCondition(cond)
[09:31:45.125]                 }
[09:31:45.125]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:45.125]                 "immediateCondition"))) {
[09:31:45.125]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:45.125]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.125]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:45.125]                   if (TRUE && !signal) {
[09:31:45.125]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.125]                     {
[09:31:45.125]                       inherits <- base::inherits
[09:31:45.125]                       invokeRestart <- base::invokeRestart
[09:31:45.125]                       is.null <- base::is.null
[09:31:45.125]                       muffled <- FALSE
[09:31:45.125]                       if (inherits(cond, "message")) {
[09:31:45.125]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.125]                         if (muffled) 
[09:31:45.125]                           invokeRestart("muffleMessage")
[09:31:45.125]                       }
[09:31:45.125]                       else if (inherits(cond, "warning")) {
[09:31:45.125]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.125]                         if (muffled) 
[09:31:45.125]                           invokeRestart("muffleWarning")
[09:31:45.125]                       }
[09:31:45.125]                       else if (inherits(cond, "condition")) {
[09:31:45.125]                         if (!is.null(pattern)) {
[09:31:45.125]                           computeRestarts <- base::computeRestarts
[09:31:45.125]                           grepl <- base::grepl
[09:31:45.125]                           restarts <- computeRestarts(cond)
[09:31:45.125]                           for (restart in restarts) {
[09:31:45.125]                             name <- restart$name
[09:31:45.125]                             if (is.null(name)) 
[09:31:45.125]                               next
[09:31:45.125]                             if (!grepl(pattern, name)) 
[09:31:45.125]                               next
[09:31:45.125]                             invokeRestart(restart)
[09:31:45.125]                             muffled <- TRUE
[09:31:45.125]                             break
[09:31:45.125]                           }
[09:31:45.125]                         }
[09:31:45.125]                       }
[09:31:45.125]                       invisible(muffled)
[09:31:45.125]                     }
[09:31:45.125]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.125]                   }
[09:31:45.125]                 }
[09:31:45.125]                 else {
[09:31:45.125]                   if (TRUE) {
[09:31:45.125]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.125]                     {
[09:31:45.125]                       inherits <- base::inherits
[09:31:45.125]                       invokeRestart <- base::invokeRestart
[09:31:45.125]                       is.null <- base::is.null
[09:31:45.125]                       muffled <- FALSE
[09:31:45.125]                       if (inherits(cond, "message")) {
[09:31:45.125]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.125]                         if (muffled) 
[09:31:45.125]                           invokeRestart("muffleMessage")
[09:31:45.125]                       }
[09:31:45.125]                       else if (inherits(cond, "warning")) {
[09:31:45.125]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.125]                         if (muffled) 
[09:31:45.125]                           invokeRestart("muffleWarning")
[09:31:45.125]                       }
[09:31:45.125]                       else if (inherits(cond, "condition")) {
[09:31:45.125]                         if (!is.null(pattern)) {
[09:31:45.125]                           computeRestarts <- base::computeRestarts
[09:31:45.125]                           grepl <- base::grepl
[09:31:45.125]                           restarts <- computeRestarts(cond)
[09:31:45.125]                           for (restart in restarts) {
[09:31:45.125]                             name <- restart$name
[09:31:45.125]                             if (is.null(name)) 
[09:31:45.125]                               next
[09:31:45.125]                             if (!grepl(pattern, name)) 
[09:31:45.125]                               next
[09:31:45.125]                             invokeRestart(restart)
[09:31:45.125]                             muffled <- TRUE
[09:31:45.125]                             break
[09:31:45.125]                           }
[09:31:45.125]                         }
[09:31:45.125]                       }
[09:31:45.125]                       invisible(muffled)
[09:31:45.125]                     }
[09:31:45.125]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.125]                   }
[09:31:45.125]                 }
[09:31:45.125]             }
[09:31:45.125]         }))
[09:31:45.125]     }, error = function(ex) {
[09:31:45.125]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:45.125]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.125]                 ...future.rng), started = ...future.startTime, 
[09:31:45.125]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:45.125]             version = "1.8"), class = "FutureResult")
[09:31:45.125]     }, finally = {
[09:31:45.125]         if (!identical(...future.workdir, getwd())) 
[09:31:45.125]             setwd(...future.workdir)
[09:31:45.125]         {
[09:31:45.125]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:45.125]                 ...future.oldOptions$nwarnings <- NULL
[09:31:45.125]             }
[09:31:45.125]             base::options(...future.oldOptions)
[09:31:45.125]             if (.Platform$OS.type == "windows") {
[09:31:45.125]                 old_names <- names(...future.oldEnvVars)
[09:31:45.125]                 envs <- base::Sys.getenv()
[09:31:45.125]                 names <- names(envs)
[09:31:45.125]                 common <- intersect(names, old_names)
[09:31:45.125]                 added <- setdiff(names, old_names)
[09:31:45.125]                 removed <- setdiff(old_names, names)
[09:31:45.125]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:45.125]                   envs[common]]
[09:31:45.125]                 NAMES <- toupper(changed)
[09:31:45.125]                 args <- list()
[09:31:45.125]                 for (kk in seq_along(NAMES)) {
[09:31:45.125]                   name <- changed[[kk]]
[09:31:45.125]                   NAME <- NAMES[[kk]]
[09:31:45.125]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.125]                     next
[09:31:45.125]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.125]                 }
[09:31:45.125]                 NAMES <- toupper(added)
[09:31:45.125]                 for (kk in seq_along(NAMES)) {
[09:31:45.125]                   name <- added[[kk]]
[09:31:45.125]                   NAME <- NAMES[[kk]]
[09:31:45.125]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.125]                     next
[09:31:45.125]                   args[[name]] <- ""
[09:31:45.125]                 }
[09:31:45.125]                 NAMES <- toupper(removed)
[09:31:45.125]                 for (kk in seq_along(NAMES)) {
[09:31:45.125]                   name <- removed[[kk]]
[09:31:45.125]                   NAME <- NAMES[[kk]]
[09:31:45.125]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.125]                     next
[09:31:45.125]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.125]                 }
[09:31:45.125]                 if (length(args) > 0) 
[09:31:45.125]                   base::do.call(base::Sys.setenv, args = args)
[09:31:45.125]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:45.125]             }
[09:31:45.125]             else {
[09:31:45.125]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:45.125]             }
[09:31:45.125]             {
[09:31:45.125]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:45.125]                   0L) {
[09:31:45.125]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:45.125]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:45.125]                   base::options(opts)
[09:31:45.125]                 }
[09:31:45.125]                 {
[09:31:45.125]                   {
[09:31:45.125]                     NULL
[09:31:45.125]                     RNGkind("Mersenne-Twister")
[09:31:45.125]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:45.125]                       inherits = FALSE)
[09:31:45.125]                   }
[09:31:45.125]                   options(future.plan = NULL)
[09:31:45.125]                   if (is.na(NA_character_)) 
[09:31:45.125]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.125]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:45.125]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:45.125]                     .init = FALSE)
[09:31:45.125]                 }
[09:31:45.125]             }
[09:31:45.125]         }
[09:31:45.125]     })
[09:31:45.125]     if (TRUE) {
[09:31:45.125]         base::sink(type = "output", split = FALSE)
[09:31:45.125]         if (TRUE) {
[09:31:45.125]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:45.125]         }
[09:31:45.125]         else {
[09:31:45.125]             ...future.result["stdout"] <- base::list(NULL)
[09:31:45.125]         }
[09:31:45.125]         base::close(...future.stdout)
[09:31:45.125]         ...future.stdout <- NULL
[09:31:45.125]     }
[09:31:45.125]     ...future.result$conditions <- ...future.conditions
[09:31:45.125]     ...future.result$finished <- base::Sys.time()
[09:31:45.125]     ...future.result
[09:31:45.125] }
[09:31:45.127] plan(): Setting new future strategy stack:
[09:31:45.127] List of future strategies:
[09:31:45.127] 1. sequential:
[09:31:45.127]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:45.127]    - tweaked: FALSE
[09:31:45.127]    - call: NULL
[09:31:45.128] plan(): nbrOfWorkers() = 1
[09:31:45.128] plan(): Setting new future strategy stack:
[09:31:45.128] List of future strategies:
[09:31:45.128] 1. multicore:
[09:31:45.128]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:45.128]    - tweaked: FALSE
[09:31:45.128]    - call: plan(multicore)
[09:31:45.131] plan(): nbrOfWorkers() = 1
[09:31:45.132] SequentialFuture started (and completed)
 - Resolving 4 multicore futures
*** multicore(..., globals = FALSE) and errors
[09:31:45.135] getGlobalsAndPackages() ...
[09:31:45.136] Not searching for globals
[09:31:45.136] - globals: [0] <none>
[09:31:45.136] getGlobalsAndPackages() ... DONE
[09:31:45.136] Packages needed by the future expression (n = 0): <none>
[09:31:45.136] Packages needed by future strategies (n = 0): <none>
[09:31:45.137] {
[09:31:45.137]     {
[09:31:45.137]         {
[09:31:45.137]             ...future.startTime <- base::Sys.time()
[09:31:45.137]             {
[09:31:45.137]                 {
[09:31:45.137]                   {
[09:31:45.137]                     base::local({
[09:31:45.137]                       has_future <- base::requireNamespace("future", 
[09:31:45.137]                         quietly = TRUE)
[09:31:45.137]                       if (has_future) {
[09:31:45.137]                         ns <- base::getNamespace("future")
[09:31:45.137]                         version <- ns[[".package"]][["version"]]
[09:31:45.137]                         if (is.null(version)) 
[09:31:45.137]                           version <- utils::packageVersion("future")
[09:31:45.137]                       }
[09:31:45.137]                       else {
[09:31:45.137]                         version <- NULL
[09:31:45.137]                       }
[09:31:45.137]                       if (!has_future || version < "1.8.0") {
[09:31:45.137]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:45.137]                           "", base::R.version$version.string), 
[09:31:45.137]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:45.137]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:45.137]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:45.137]                             "release", "version")], collapse = " "), 
[09:31:45.137]                           hostname = base::Sys.info()[["nodename"]])
[09:31:45.137]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:45.137]                           info)
[09:31:45.137]                         info <- base::paste(info, collapse = "; ")
[09:31:45.137]                         if (!has_future) {
[09:31:45.137]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:45.137]                             info)
[09:31:45.137]                         }
[09:31:45.137]                         else {
[09:31:45.137]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:45.137]                             info, version)
[09:31:45.137]                         }
[09:31:45.137]                         base::stop(msg)
[09:31:45.137]                       }
[09:31:45.137]                     })
[09:31:45.137]                   }
[09:31:45.137]                   ...future.strategy.old <- future::plan("list")
[09:31:45.137]                   options(future.plan = NULL)
[09:31:45.137]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.137]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:45.137]                 }
[09:31:45.137]                 ...future.workdir <- getwd()
[09:31:45.137]             }
[09:31:45.137]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:45.137]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:45.137]         }
[09:31:45.137]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:45.137]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:45.137]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:45.137]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:45.137]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:45.137]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:45.137]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:45.137]             base::names(...future.oldOptions))
[09:31:45.137]     }
[09:31:45.137]     if (FALSE) {
[09:31:45.137]     }
[09:31:45.137]     else {
[09:31:45.137]         if (TRUE) {
[09:31:45.137]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:45.137]                 open = "w")
[09:31:45.137]         }
[09:31:45.137]         else {
[09:31:45.137]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:45.137]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:45.137]         }
[09:31:45.137]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:45.137]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:45.137]             base::sink(type = "output", split = FALSE)
[09:31:45.137]             base::close(...future.stdout)
[09:31:45.137]         }, add = TRUE)
[09:31:45.137]     }
[09:31:45.137]     ...future.frame <- base::sys.nframe()
[09:31:45.137]     ...future.conditions <- base::list()
[09:31:45.137]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:45.137]     if (FALSE) {
[09:31:45.137]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:45.137]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:45.137]     }
[09:31:45.137]     ...future.result <- base::tryCatch({
[09:31:45.137]         base::withCallingHandlers({
[09:31:45.137]             ...future.value <- base::withVisible(base::local({
[09:31:45.137]                 stop("Whoops!")
[09:31:45.137]                 1
[09:31:45.137]             }))
[09:31:45.137]             future::FutureResult(value = ...future.value$value, 
[09:31:45.137]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.137]                   ...future.rng), globalenv = if (FALSE) 
[09:31:45.137]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:45.137]                     ...future.globalenv.names))
[09:31:45.137]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:45.137]         }, condition = base::local({
[09:31:45.137]             c <- base::c
[09:31:45.137]             inherits <- base::inherits
[09:31:45.137]             invokeRestart <- base::invokeRestart
[09:31:45.137]             length <- base::length
[09:31:45.137]             list <- base::list
[09:31:45.137]             seq.int <- base::seq.int
[09:31:45.137]             signalCondition <- base::signalCondition
[09:31:45.137]             sys.calls <- base::sys.calls
[09:31:45.137]             `[[` <- base::`[[`
[09:31:45.137]             `+` <- base::`+`
[09:31:45.137]             `<<-` <- base::`<<-`
[09:31:45.137]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:45.137]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:45.137]                   3L)]
[09:31:45.137]             }
[09:31:45.137]             function(cond) {
[09:31:45.137]                 is_error <- inherits(cond, "error")
[09:31:45.137]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:45.137]                   NULL)
[09:31:45.137]                 if (is_error) {
[09:31:45.137]                   sessionInformation <- function() {
[09:31:45.137]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:45.137]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:45.137]                       search = base::search(), system = base::Sys.info())
[09:31:45.137]                   }
[09:31:45.137]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.137]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:45.137]                     cond$call), session = sessionInformation(), 
[09:31:45.137]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:45.137]                   signalCondition(cond)
[09:31:45.137]                 }
[09:31:45.137]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:45.137]                 "immediateCondition"))) {
[09:31:45.137]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:45.137]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.137]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:45.137]                   if (TRUE && !signal) {
[09:31:45.137]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.137]                     {
[09:31:45.137]                       inherits <- base::inherits
[09:31:45.137]                       invokeRestart <- base::invokeRestart
[09:31:45.137]                       is.null <- base::is.null
[09:31:45.137]                       muffled <- FALSE
[09:31:45.137]                       if (inherits(cond, "message")) {
[09:31:45.137]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.137]                         if (muffled) 
[09:31:45.137]                           invokeRestart("muffleMessage")
[09:31:45.137]                       }
[09:31:45.137]                       else if (inherits(cond, "warning")) {
[09:31:45.137]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.137]                         if (muffled) 
[09:31:45.137]                           invokeRestart("muffleWarning")
[09:31:45.137]                       }
[09:31:45.137]                       else if (inherits(cond, "condition")) {
[09:31:45.137]                         if (!is.null(pattern)) {
[09:31:45.137]                           computeRestarts <- base::computeRestarts
[09:31:45.137]                           grepl <- base::grepl
[09:31:45.137]                           restarts <- computeRestarts(cond)
[09:31:45.137]                           for (restart in restarts) {
[09:31:45.137]                             name <- restart$name
[09:31:45.137]                             if (is.null(name)) 
[09:31:45.137]                               next
[09:31:45.137]                             if (!grepl(pattern, name)) 
[09:31:45.137]                               next
[09:31:45.137]                             invokeRestart(restart)
[09:31:45.137]                             muffled <- TRUE
[09:31:45.137]                             break
[09:31:45.137]                           }
[09:31:45.137]                         }
[09:31:45.137]                       }
[09:31:45.137]                       invisible(muffled)
[09:31:45.137]                     }
[09:31:45.137]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.137]                   }
[09:31:45.137]                 }
[09:31:45.137]                 else {
[09:31:45.137]                   if (TRUE) {
[09:31:45.137]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.137]                     {
[09:31:45.137]                       inherits <- base::inherits
[09:31:45.137]                       invokeRestart <- base::invokeRestart
[09:31:45.137]                       is.null <- base::is.null
[09:31:45.137]                       muffled <- FALSE
[09:31:45.137]                       if (inherits(cond, "message")) {
[09:31:45.137]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.137]                         if (muffled) 
[09:31:45.137]                           invokeRestart("muffleMessage")
[09:31:45.137]                       }
[09:31:45.137]                       else if (inherits(cond, "warning")) {
[09:31:45.137]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.137]                         if (muffled) 
[09:31:45.137]                           invokeRestart("muffleWarning")
[09:31:45.137]                       }
[09:31:45.137]                       else if (inherits(cond, "condition")) {
[09:31:45.137]                         if (!is.null(pattern)) {
[09:31:45.137]                           computeRestarts <- base::computeRestarts
[09:31:45.137]                           grepl <- base::grepl
[09:31:45.137]                           restarts <- computeRestarts(cond)
[09:31:45.137]                           for (restart in restarts) {
[09:31:45.137]                             name <- restart$name
[09:31:45.137]                             if (is.null(name)) 
[09:31:45.137]                               next
[09:31:45.137]                             if (!grepl(pattern, name)) 
[09:31:45.137]                               next
[09:31:45.137]                             invokeRestart(restart)
[09:31:45.137]                             muffled <- TRUE
[09:31:45.137]                             break
[09:31:45.137]                           }
[09:31:45.137]                         }
[09:31:45.137]                       }
[09:31:45.137]                       invisible(muffled)
[09:31:45.137]                     }
[09:31:45.137]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.137]                   }
[09:31:45.137]                 }
[09:31:45.137]             }
[09:31:45.137]         }))
[09:31:45.137]     }, error = function(ex) {
[09:31:45.137]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:45.137]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.137]                 ...future.rng), started = ...future.startTime, 
[09:31:45.137]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:45.137]             version = "1.8"), class = "FutureResult")
[09:31:45.137]     }, finally = {
[09:31:45.137]         if (!identical(...future.workdir, getwd())) 
[09:31:45.137]             setwd(...future.workdir)
[09:31:45.137]         {
[09:31:45.137]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:45.137]                 ...future.oldOptions$nwarnings <- NULL
[09:31:45.137]             }
[09:31:45.137]             base::options(...future.oldOptions)
[09:31:45.137]             if (.Platform$OS.type == "windows") {
[09:31:45.137]                 old_names <- names(...future.oldEnvVars)
[09:31:45.137]                 envs <- base::Sys.getenv()
[09:31:45.137]                 names <- names(envs)
[09:31:45.137]                 common <- intersect(names, old_names)
[09:31:45.137]                 added <- setdiff(names, old_names)
[09:31:45.137]                 removed <- setdiff(old_names, names)
[09:31:45.137]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:45.137]                   envs[common]]
[09:31:45.137]                 NAMES <- toupper(changed)
[09:31:45.137]                 args <- list()
[09:31:45.137]                 for (kk in seq_along(NAMES)) {
[09:31:45.137]                   name <- changed[[kk]]
[09:31:45.137]                   NAME <- NAMES[[kk]]
[09:31:45.137]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.137]                     next
[09:31:45.137]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.137]                 }
[09:31:45.137]                 NAMES <- toupper(added)
[09:31:45.137]                 for (kk in seq_along(NAMES)) {
[09:31:45.137]                   name <- added[[kk]]
[09:31:45.137]                   NAME <- NAMES[[kk]]
[09:31:45.137]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.137]                     next
[09:31:45.137]                   args[[name]] <- ""
[09:31:45.137]                 }
[09:31:45.137]                 NAMES <- toupper(removed)
[09:31:45.137]                 for (kk in seq_along(NAMES)) {
[09:31:45.137]                   name <- removed[[kk]]
[09:31:45.137]                   NAME <- NAMES[[kk]]
[09:31:45.137]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.137]                     next
[09:31:45.137]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.137]                 }
[09:31:45.137]                 if (length(args) > 0) 
[09:31:45.137]                   base::do.call(base::Sys.setenv, args = args)
[09:31:45.137]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:45.137]             }
[09:31:45.137]             else {
[09:31:45.137]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:45.137]             }
[09:31:45.137]             {
[09:31:45.137]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:45.137]                   0L) {
[09:31:45.137]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:45.137]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:45.137]                   base::options(opts)
[09:31:45.137]                 }
[09:31:45.137]                 {
[09:31:45.137]                   {
[09:31:45.137]                     NULL
[09:31:45.137]                     RNGkind("Mersenne-Twister")
[09:31:45.137]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:45.137]                       inherits = FALSE)
[09:31:45.137]                   }
[09:31:45.137]                   options(future.plan = NULL)
[09:31:45.137]                   if (is.na(NA_character_)) 
[09:31:45.137]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.137]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:45.137]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:45.137]                     .init = FALSE)
[09:31:45.137]                 }
[09:31:45.137]             }
[09:31:45.137]         }
[09:31:45.137]     })
[09:31:45.137]     if (TRUE) {
[09:31:45.137]         base::sink(type = "output", split = FALSE)
[09:31:45.137]         if (TRUE) {
[09:31:45.137]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:45.137]         }
[09:31:45.137]         else {
[09:31:45.137]             ...future.result["stdout"] <- base::list(NULL)
[09:31:45.137]         }
[09:31:45.137]         base::close(...future.stdout)
[09:31:45.137]         ...future.stdout <- NULL
[09:31:45.137]     }
[09:31:45.137]     ...future.result$conditions <- ...future.conditions
[09:31:45.137]     ...future.result$finished <- base::Sys.time()
[09:31:45.137]     ...future.result
[09:31:45.137] }
[09:31:45.138] plan(): Setting new future strategy stack:
[09:31:45.138] List of future strategies:
[09:31:45.138] 1. sequential:
[09:31:45.138]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:45.138]    - tweaked: FALSE
[09:31:45.138]    - call: NULL
[09:31:45.139] plan(): nbrOfWorkers() = 1
[09:31:45.140] plan(): Setting new future strategy stack:
[09:31:45.140] List of future strategies:
[09:31:45.140] 1. multicore:
[09:31:45.140]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:45.140]    - tweaked: FALSE
[09:31:45.140]    - call: plan(multicore)
[09:31:45.143] plan(): nbrOfWorkers() = 1
[09:31:45.143] SequentialFuture started (and completed)
[09:31:45.143] signalConditions() ...
[09:31:45.143]  - include = ‘immediateCondition’
[09:31:45.143]  - exclude = 
[09:31:45.143]  - resignal = FALSE
[09:31:45.143]  - Number of conditions: 1
[09:31:45.143] signalConditions() ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    stop("Whoops!")
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 0 bytes of class ‘NULL’
Conditions captured: [n=1] ‘simpleError’
Early signaling: FALSE
Owner process: 4dab417a-2fdd-f8a2-2e0a-d701ed5fedef
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:45.144] signalConditions() ...
[09:31:45.144]  - include = ‘immediateCondition’
[09:31:45.144]  - exclude = 
[09:31:45.144]  - resignal = FALSE
[09:31:45.144]  - Number of conditions: 1
[09:31:45.144] signalConditions() ... done
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[09:31:45.145] signalConditions() ...
[09:31:45.145]  - include = ‘immediateCondition’
[09:31:45.145]  - exclude = 
[09:31:45.145]  - resignal = FALSE
[09:31:45.145]  - Number of conditions: 1
[09:31:45.145] signalConditions() ... done
[09:31:45.145] Future state: ‘finished’
[09:31:45.145] signalConditions() ...
[09:31:45.145]  - include = ‘condition’
[09:31:45.146]  - exclude = ‘immediateCondition’
[09:31:45.146]  - resignal = TRUE
[09:31:45.146]  - Number of conditions: 1
[09:31:45.146]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[09:31:45.146] signalConditions() ... done
[1] "Error in eval(quote({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[09:31:45.146] signalConditions() ...
[09:31:45.146]  - include = ‘immediateCondition’
[09:31:45.146]  - exclude = 
[09:31:45.147]  - resignal = FALSE
[09:31:45.147]  - Number of conditions: 1
[09:31:45.147] signalConditions() ... done
[09:31:45.147] Future state: ‘finished’
[09:31:45.147] signalConditions() ...
[09:31:45.147]  - include = ‘condition’
[09:31:45.147]  - exclude = ‘immediateCondition’
[09:31:45.147]  - resignal = TRUE
[09:31:45.147]  - Number of conditions: 1
[09:31:45.147]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[09:31:45.147] signalConditions() ... done
[1] "Error in eval(quote({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[09:31:45.151] getGlobalsAndPackages() ...
[09:31:45.151] Searching for globals...
[09:31:45.157] - globals found: [5] ‘{’, ‘stop’, ‘structure’, ‘list’, ‘c’
[09:31:45.157] Searching for globals ... DONE
[09:31:45.157] Resolving globals: FALSE
[09:31:45.158] 
[09:31:45.158] 
[09:31:45.158] getGlobalsAndPackages() ... DONE
[09:31:45.158] Packages needed by the future expression (n = 0): <none>
[09:31:45.158] Packages needed by future strategies (n = 0): <none>
[09:31:45.158] {
[09:31:45.158]     {
[09:31:45.158]         {
[09:31:45.158]             ...future.startTime <- base::Sys.time()
[09:31:45.158]             {
[09:31:45.158]                 {
[09:31:45.158]                   {
[09:31:45.158]                     base::local({
[09:31:45.158]                       has_future <- base::requireNamespace("future", 
[09:31:45.158]                         quietly = TRUE)
[09:31:45.158]                       if (has_future) {
[09:31:45.158]                         ns <- base::getNamespace("future")
[09:31:45.158]                         version <- ns[[".package"]][["version"]]
[09:31:45.158]                         if (is.null(version)) 
[09:31:45.158]                           version <- utils::packageVersion("future")
[09:31:45.158]                       }
[09:31:45.158]                       else {
[09:31:45.158]                         version <- NULL
[09:31:45.158]                       }
[09:31:45.158]                       if (!has_future || version < "1.8.0") {
[09:31:45.158]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:45.158]                           "", base::R.version$version.string), 
[09:31:45.158]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:45.158]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:45.158]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:45.158]                             "release", "version")], collapse = " "), 
[09:31:45.158]                           hostname = base::Sys.info()[["nodename"]])
[09:31:45.158]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:45.158]                           info)
[09:31:45.158]                         info <- base::paste(info, collapse = "; ")
[09:31:45.158]                         if (!has_future) {
[09:31:45.158]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:45.158]                             info)
[09:31:45.158]                         }
[09:31:45.158]                         else {
[09:31:45.158]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:45.158]                             info, version)
[09:31:45.158]                         }
[09:31:45.158]                         base::stop(msg)
[09:31:45.158]                       }
[09:31:45.158]                     })
[09:31:45.158]                   }
[09:31:45.158]                   ...future.strategy.old <- future::plan("list")
[09:31:45.158]                   options(future.plan = NULL)
[09:31:45.158]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.158]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:45.158]                 }
[09:31:45.158]                 ...future.workdir <- getwd()
[09:31:45.158]             }
[09:31:45.158]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:45.158]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:45.158]         }
[09:31:45.158]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:45.158]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:45.158]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:45.158]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:45.158]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:45.158]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:45.158]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:45.158]             base::names(...future.oldOptions))
[09:31:45.158]     }
[09:31:45.158]     if (FALSE) {
[09:31:45.158]     }
[09:31:45.158]     else {
[09:31:45.158]         if (TRUE) {
[09:31:45.158]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:45.158]                 open = "w")
[09:31:45.158]         }
[09:31:45.158]         else {
[09:31:45.158]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:45.158]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:45.158]         }
[09:31:45.158]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:45.158]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:45.158]             base::sink(type = "output", split = FALSE)
[09:31:45.158]             base::close(...future.stdout)
[09:31:45.158]         }, add = TRUE)
[09:31:45.158]     }
[09:31:45.158]     ...future.frame <- base::sys.nframe()
[09:31:45.158]     ...future.conditions <- base::list()
[09:31:45.158]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:45.158]     if (FALSE) {
[09:31:45.158]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:45.158]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:45.158]     }
[09:31:45.158]     ...future.result <- base::tryCatch({
[09:31:45.158]         base::withCallingHandlers({
[09:31:45.158]             ...future.value <- base::withVisible(base::local({
[09:31:45.158]                 stop(structure(list(message = "boom"), class = c("MyError", 
[09:31:45.158]                   "error", "condition")))
[09:31:45.158]             }))
[09:31:45.158]             future::FutureResult(value = ...future.value$value, 
[09:31:45.158]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.158]                   ...future.rng), globalenv = if (FALSE) 
[09:31:45.158]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:45.158]                     ...future.globalenv.names))
[09:31:45.158]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:45.158]         }, condition = base::local({
[09:31:45.158]             c <- base::c
[09:31:45.158]             inherits <- base::inherits
[09:31:45.158]             invokeRestart <- base::invokeRestart
[09:31:45.158]             length <- base::length
[09:31:45.158]             list <- base::list
[09:31:45.158]             seq.int <- base::seq.int
[09:31:45.158]             signalCondition <- base::signalCondition
[09:31:45.158]             sys.calls <- base::sys.calls
[09:31:45.158]             `[[` <- base::`[[`
[09:31:45.158]             `+` <- base::`+`
[09:31:45.158]             `<<-` <- base::`<<-`
[09:31:45.158]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:45.158]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:45.158]                   3L)]
[09:31:45.158]             }
[09:31:45.158]             function(cond) {
[09:31:45.158]                 is_error <- inherits(cond, "error")
[09:31:45.158]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:45.158]                   NULL)
[09:31:45.158]                 if (is_error) {
[09:31:45.158]                   sessionInformation <- function() {
[09:31:45.158]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:45.158]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:45.158]                       search = base::search(), system = base::Sys.info())
[09:31:45.158]                   }
[09:31:45.158]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.158]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:45.158]                     cond$call), session = sessionInformation(), 
[09:31:45.158]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:45.158]                   signalCondition(cond)
[09:31:45.158]                 }
[09:31:45.158]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:45.158]                 "immediateCondition"))) {
[09:31:45.158]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:45.158]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.158]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:45.158]                   if (TRUE && !signal) {
[09:31:45.158]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.158]                     {
[09:31:45.158]                       inherits <- base::inherits
[09:31:45.158]                       invokeRestart <- base::invokeRestart
[09:31:45.158]                       is.null <- base::is.null
[09:31:45.158]                       muffled <- FALSE
[09:31:45.158]                       if (inherits(cond, "message")) {
[09:31:45.158]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.158]                         if (muffled) 
[09:31:45.158]                           invokeRestart("muffleMessage")
[09:31:45.158]                       }
[09:31:45.158]                       else if (inherits(cond, "warning")) {
[09:31:45.158]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.158]                         if (muffled) 
[09:31:45.158]                           invokeRestart("muffleWarning")
[09:31:45.158]                       }
[09:31:45.158]                       else if (inherits(cond, "condition")) {
[09:31:45.158]                         if (!is.null(pattern)) {
[09:31:45.158]                           computeRestarts <- base::computeRestarts
[09:31:45.158]                           grepl <- base::grepl
[09:31:45.158]                           restarts <- computeRestarts(cond)
[09:31:45.158]                           for (restart in restarts) {
[09:31:45.158]                             name <- restart$name
[09:31:45.158]                             if (is.null(name)) 
[09:31:45.158]                               next
[09:31:45.158]                             if (!grepl(pattern, name)) 
[09:31:45.158]                               next
[09:31:45.158]                             invokeRestart(restart)
[09:31:45.158]                             muffled <- TRUE
[09:31:45.158]                             break
[09:31:45.158]                           }
[09:31:45.158]                         }
[09:31:45.158]                       }
[09:31:45.158]                       invisible(muffled)
[09:31:45.158]                     }
[09:31:45.158]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.158]                   }
[09:31:45.158]                 }
[09:31:45.158]                 else {
[09:31:45.158]                   if (TRUE) {
[09:31:45.158]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.158]                     {
[09:31:45.158]                       inherits <- base::inherits
[09:31:45.158]                       invokeRestart <- base::invokeRestart
[09:31:45.158]                       is.null <- base::is.null
[09:31:45.158]                       muffled <- FALSE
[09:31:45.158]                       if (inherits(cond, "message")) {
[09:31:45.158]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.158]                         if (muffled) 
[09:31:45.158]                           invokeRestart("muffleMessage")
[09:31:45.158]                       }
[09:31:45.158]                       else if (inherits(cond, "warning")) {
[09:31:45.158]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.158]                         if (muffled) 
[09:31:45.158]                           invokeRestart("muffleWarning")
[09:31:45.158]                       }
[09:31:45.158]                       else if (inherits(cond, "condition")) {
[09:31:45.158]                         if (!is.null(pattern)) {
[09:31:45.158]                           computeRestarts <- base::computeRestarts
[09:31:45.158]                           grepl <- base::grepl
[09:31:45.158]                           restarts <- computeRestarts(cond)
[09:31:45.158]                           for (restart in restarts) {
[09:31:45.158]                             name <- restart$name
[09:31:45.158]                             if (is.null(name)) 
[09:31:45.158]                               next
[09:31:45.158]                             if (!grepl(pattern, name)) 
[09:31:45.158]                               next
[09:31:45.158]                             invokeRestart(restart)
[09:31:45.158]                             muffled <- TRUE
[09:31:45.158]                             break
[09:31:45.158]                           }
[09:31:45.158]                         }
[09:31:45.158]                       }
[09:31:45.158]                       invisible(muffled)
[09:31:45.158]                     }
[09:31:45.158]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.158]                   }
[09:31:45.158]                 }
[09:31:45.158]             }
[09:31:45.158]         }))
[09:31:45.158]     }, error = function(ex) {
[09:31:45.158]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:45.158]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.158]                 ...future.rng), started = ...future.startTime, 
[09:31:45.158]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:45.158]             version = "1.8"), class = "FutureResult")
[09:31:45.158]     }, finally = {
[09:31:45.158]         if (!identical(...future.workdir, getwd())) 
[09:31:45.158]             setwd(...future.workdir)
[09:31:45.158]         {
[09:31:45.158]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:45.158]                 ...future.oldOptions$nwarnings <- NULL
[09:31:45.158]             }
[09:31:45.158]             base::options(...future.oldOptions)
[09:31:45.158]             if (.Platform$OS.type == "windows") {
[09:31:45.158]                 old_names <- names(...future.oldEnvVars)
[09:31:45.158]                 envs <- base::Sys.getenv()
[09:31:45.158]                 names <- names(envs)
[09:31:45.158]                 common <- intersect(names, old_names)
[09:31:45.158]                 added <- setdiff(names, old_names)
[09:31:45.158]                 removed <- setdiff(old_names, names)
[09:31:45.158]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:45.158]                   envs[common]]
[09:31:45.158]                 NAMES <- toupper(changed)
[09:31:45.158]                 args <- list()
[09:31:45.158]                 for (kk in seq_along(NAMES)) {
[09:31:45.158]                   name <- changed[[kk]]
[09:31:45.158]                   NAME <- NAMES[[kk]]
[09:31:45.158]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.158]                     next
[09:31:45.158]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.158]                 }
[09:31:45.158]                 NAMES <- toupper(added)
[09:31:45.158]                 for (kk in seq_along(NAMES)) {
[09:31:45.158]                   name <- added[[kk]]
[09:31:45.158]                   NAME <- NAMES[[kk]]
[09:31:45.158]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.158]                     next
[09:31:45.158]                   args[[name]] <- ""
[09:31:45.158]                 }
[09:31:45.158]                 NAMES <- toupper(removed)
[09:31:45.158]                 for (kk in seq_along(NAMES)) {
[09:31:45.158]                   name <- removed[[kk]]
[09:31:45.158]                   NAME <- NAMES[[kk]]
[09:31:45.158]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.158]                     next
[09:31:45.158]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.158]                 }
[09:31:45.158]                 if (length(args) > 0) 
[09:31:45.158]                   base::do.call(base::Sys.setenv, args = args)
[09:31:45.158]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:45.158]             }
[09:31:45.158]             else {
[09:31:45.158]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:45.158]             }
[09:31:45.158]             {
[09:31:45.158]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:45.158]                   0L) {
[09:31:45.158]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:45.158]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:45.158]                   base::options(opts)
[09:31:45.158]                 }
[09:31:45.158]                 {
[09:31:45.158]                   {
[09:31:45.158]                     NULL
[09:31:45.158]                     RNGkind("Mersenne-Twister")
[09:31:45.158]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:45.158]                       inherits = FALSE)
[09:31:45.158]                   }
[09:31:45.158]                   options(future.plan = NULL)
[09:31:45.158]                   if (is.na(NA_character_)) 
[09:31:45.158]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.158]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:45.158]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:45.158]                     .init = FALSE)
[09:31:45.158]                 }
[09:31:45.158]             }
[09:31:45.158]         }
[09:31:45.158]     })
[09:31:45.158]     if (TRUE) {
[09:31:45.158]         base::sink(type = "output", split = FALSE)
[09:31:45.158]         if (TRUE) {
[09:31:45.158]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:45.158]         }
[09:31:45.158]         else {
[09:31:45.158]             ...future.result["stdout"] <- base::list(NULL)
[09:31:45.158]         }
[09:31:45.158]         base::close(...future.stdout)
[09:31:45.158]         ...future.stdout <- NULL
[09:31:45.158]     }
[09:31:45.158]     ...future.result$conditions <- ...future.conditions
[09:31:45.158]     ...future.result$finished <- base::Sys.time()
[09:31:45.158]     ...future.result
[09:31:45.158] }
[09:31:45.160] plan(): Setting new future strategy stack:
[09:31:45.160] List of future strategies:
[09:31:45.160] 1. sequential:
[09:31:45.160]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:45.160]    - tweaked: FALSE
[09:31:45.160]    - call: NULL
[09:31:45.161] plan(): nbrOfWorkers() = 1
[09:31:45.161] plan(): Setting new future strategy stack:
[09:31:45.163] List of future strategies:
[09:31:45.163] 1. multicore:
[09:31:45.163]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:45.163]    - tweaked: FALSE
[09:31:45.163]    - call: plan(multicore)
[09:31:45.166] plan(): nbrOfWorkers() = 1
[09:31:45.167] SequentialFuture started (and completed)
[09:31:45.167] signalConditions() ...
[09:31:45.167]  - include = ‘immediateCondition’
[09:31:45.167]  - exclude = 
[09:31:45.167]  - resignal = FALSE
[09:31:45.167]  - Number of conditions: 1
[09:31:45.167] signalConditions() ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    stop(structure(list(message = "boom"), class = c("MyError", 
        "error", "condition")))
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 0 bytes of class ‘NULL’
Conditions captured: [n=1] ‘MyError’
Early signaling: FALSE
Owner process: 4dab417a-2fdd-f8a2-2e0a-d701ed5fedef
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:45.168] signalConditions() ...
[09:31:45.168]  - include = ‘immediateCondition’
[09:31:45.168]  - exclude = 
[09:31:45.168]  - resignal = FALSE
[09:31:45.168]  - Number of conditions: 1
[09:31:45.168] signalConditions() ... done
<MyError: boom>
[09:31:45.168] signalConditions() ...
[09:31:45.168]  - include = ‘immediateCondition’
[09:31:45.168]  - exclude = 
[09:31:45.169]  - resignal = FALSE
[09:31:45.169]  - Number of conditions: 1
[09:31:45.169] signalConditions() ... done
[09:31:45.169] Future state: ‘finished’
[09:31:45.169] signalConditions() ...
[09:31:45.169]  - include = ‘condition’
[09:31:45.169]  - exclude = ‘immediateCondition’
[09:31:45.169]  - resignal = TRUE
[09:31:45.169]  - Number of conditions: 1
[09:31:45.169]  - Condition #1: ‘MyError’, ‘error’, ‘condition’
[09:31:45.169] signalConditions() ... done
*** multicore(..., globals = TRUE) without globals
[09:31:45.173] getGlobalsAndPackages() ...
[09:31:45.173] Searching for globals...
[09:31:45.173] - globals found: [1] ‘{’
[09:31:45.173] Searching for globals ... DONE
[09:31:45.174] Resolving globals: FALSE
[09:31:45.174] 
[09:31:45.174] 
[09:31:45.174] getGlobalsAndPackages() ... DONE
[09:31:45.174] Packages needed by the future expression (n = 0): <none>
[09:31:45.174] Packages needed by future strategies (n = 0): <none>
[09:31:45.175] {
[09:31:45.175]     {
[09:31:45.175]         {
[09:31:45.175]             ...future.startTime <- base::Sys.time()
[09:31:45.175]             {
[09:31:45.175]                 {
[09:31:45.175]                   {
[09:31:45.175]                     base::local({
[09:31:45.175]                       has_future <- base::requireNamespace("future", 
[09:31:45.175]                         quietly = TRUE)
[09:31:45.175]                       if (has_future) {
[09:31:45.175]                         ns <- base::getNamespace("future")
[09:31:45.175]                         version <- ns[[".package"]][["version"]]
[09:31:45.175]                         if (is.null(version)) 
[09:31:45.175]                           version <- utils::packageVersion("future")
[09:31:45.175]                       }
[09:31:45.175]                       else {
[09:31:45.175]                         version <- NULL
[09:31:45.175]                       }
[09:31:45.175]                       if (!has_future || version < "1.8.0") {
[09:31:45.175]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:45.175]                           "", base::R.version$version.string), 
[09:31:45.175]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:45.175]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:45.175]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:45.175]                             "release", "version")], collapse = " "), 
[09:31:45.175]                           hostname = base::Sys.info()[["nodename"]])
[09:31:45.175]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:45.175]                           info)
[09:31:45.175]                         info <- base::paste(info, collapse = "; ")
[09:31:45.175]                         if (!has_future) {
[09:31:45.175]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:45.175]                             info)
[09:31:45.175]                         }
[09:31:45.175]                         else {
[09:31:45.175]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:45.175]                             info, version)
[09:31:45.175]                         }
[09:31:45.175]                         base::stop(msg)
[09:31:45.175]                       }
[09:31:45.175]                     })
[09:31:45.175]                   }
[09:31:45.175]                   ...future.strategy.old <- future::plan("list")
[09:31:45.175]                   options(future.plan = NULL)
[09:31:45.175]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.175]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:45.175]                 }
[09:31:45.175]                 ...future.workdir <- getwd()
[09:31:45.175]             }
[09:31:45.175]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:45.175]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:45.175]         }
[09:31:45.175]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:45.175]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:45.175]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:45.175]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:45.175]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:45.175]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:45.175]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:45.175]             base::names(...future.oldOptions))
[09:31:45.175]     }
[09:31:45.175]     if (FALSE) {
[09:31:45.175]     }
[09:31:45.175]     else {
[09:31:45.175]         if (TRUE) {
[09:31:45.175]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:45.175]                 open = "w")
[09:31:45.175]         }
[09:31:45.175]         else {
[09:31:45.175]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:45.175]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:45.175]         }
[09:31:45.175]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:45.175]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:45.175]             base::sink(type = "output", split = FALSE)
[09:31:45.175]             base::close(...future.stdout)
[09:31:45.175]         }, add = TRUE)
[09:31:45.175]     }
[09:31:45.175]     ...future.frame <- base::sys.nframe()
[09:31:45.175]     ...future.conditions <- base::list()
[09:31:45.175]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:45.175]     if (FALSE) {
[09:31:45.175]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:45.175]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:45.175]     }
[09:31:45.175]     ...future.result <- base::tryCatch({
[09:31:45.175]         base::withCallingHandlers({
[09:31:45.175]             ...future.value <- base::withVisible(base::local({
[09:31:45.175]                 42L
[09:31:45.175]             }))
[09:31:45.175]             future::FutureResult(value = ...future.value$value, 
[09:31:45.175]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.175]                   ...future.rng), globalenv = if (FALSE) 
[09:31:45.175]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:45.175]                     ...future.globalenv.names))
[09:31:45.175]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:45.175]         }, condition = base::local({
[09:31:45.175]             c <- base::c
[09:31:45.175]             inherits <- base::inherits
[09:31:45.175]             invokeRestart <- base::invokeRestart
[09:31:45.175]             length <- base::length
[09:31:45.175]             list <- base::list
[09:31:45.175]             seq.int <- base::seq.int
[09:31:45.175]             signalCondition <- base::signalCondition
[09:31:45.175]             sys.calls <- base::sys.calls
[09:31:45.175]             `[[` <- base::`[[`
[09:31:45.175]             `+` <- base::`+`
[09:31:45.175]             `<<-` <- base::`<<-`
[09:31:45.175]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:45.175]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:45.175]                   3L)]
[09:31:45.175]             }
[09:31:45.175]             function(cond) {
[09:31:45.175]                 is_error <- inherits(cond, "error")
[09:31:45.175]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:45.175]                   NULL)
[09:31:45.175]                 if (is_error) {
[09:31:45.175]                   sessionInformation <- function() {
[09:31:45.175]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:45.175]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:45.175]                       search = base::search(), system = base::Sys.info())
[09:31:45.175]                   }
[09:31:45.175]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.175]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:45.175]                     cond$call), session = sessionInformation(), 
[09:31:45.175]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:45.175]                   signalCondition(cond)
[09:31:45.175]                 }
[09:31:45.175]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:45.175]                 "immediateCondition"))) {
[09:31:45.175]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:45.175]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.175]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:45.175]                   if (TRUE && !signal) {
[09:31:45.175]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.175]                     {
[09:31:45.175]                       inherits <- base::inherits
[09:31:45.175]                       invokeRestart <- base::invokeRestart
[09:31:45.175]                       is.null <- base::is.null
[09:31:45.175]                       muffled <- FALSE
[09:31:45.175]                       if (inherits(cond, "message")) {
[09:31:45.175]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.175]                         if (muffled) 
[09:31:45.175]                           invokeRestart("muffleMessage")
[09:31:45.175]                       }
[09:31:45.175]                       else if (inherits(cond, "warning")) {
[09:31:45.175]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.175]                         if (muffled) 
[09:31:45.175]                           invokeRestart("muffleWarning")
[09:31:45.175]                       }
[09:31:45.175]                       else if (inherits(cond, "condition")) {
[09:31:45.175]                         if (!is.null(pattern)) {
[09:31:45.175]                           computeRestarts <- base::computeRestarts
[09:31:45.175]                           grepl <- base::grepl
[09:31:45.175]                           restarts <- computeRestarts(cond)
[09:31:45.175]                           for (restart in restarts) {
[09:31:45.175]                             name <- restart$name
[09:31:45.175]                             if (is.null(name)) 
[09:31:45.175]                               next
[09:31:45.175]                             if (!grepl(pattern, name)) 
[09:31:45.175]                               next
[09:31:45.175]                             invokeRestart(restart)
[09:31:45.175]                             muffled <- TRUE
[09:31:45.175]                             break
[09:31:45.175]                           }
[09:31:45.175]                         }
[09:31:45.175]                       }
[09:31:45.175]                       invisible(muffled)
[09:31:45.175]                     }
[09:31:45.175]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.175]                   }
[09:31:45.175]                 }
[09:31:45.175]                 else {
[09:31:45.175]                   if (TRUE) {
[09:31:45.175]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.175]                     {
[09:31:45.175]                       inherits <- base::inherits
[09:31:45.175]                       invokeRestart <- base::invokeRestart
[09:31:45.175]                       is.null <- base::is.null
[09:31:45.175]                       muffled <- FALSE
[09:31:45.175]                       if (inherits(cond, "message")) {
[09:31:45.175]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.175]                         if (muffled) 
[09:31:45.175]                           invokeRestart("muffleMessage")
[09:31:45.175]                       }
[09:31:45.175]                       else if (inherits(cond, "warning")) {
[09:31:45.175]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.175]                         if (muffled) 
[09:31:45.175]                           invokeRestart("muffleWarning")
[09:31:45.175]                       }
[09:31:45.175]                       else if (inherits(cond, "condition")) {
[09:31:45.175]                         if (!is.null(pattern)) {
[09:31:45.175]                           computeRestarts <- base::computeRestarts
[09:31:45.175]                           grepl <- base::grepl
[09:31:45.175]                           restarts <- computeRestarts(cond)
[09:31:45.175]                           for (restart in restarts) {
[09:31:45.175]                             name <- restart$name
[09:31:45.175]                             if (is.null(name)) 
[09:31:45.175]                               next
[09:31:45.175]                             if (!grepl(pattern, name)) 
[09:31:45.175]                               next
[09:31:45.175]                             invokeRestart(restart)
[09:31:45.175]                             muffled <- TRUE
[09:31:45.175]                             break
[09:31:45.175]                           }
[09:31:45.175]                         }
[09:31:45.175]                       }
[09:31:45.175]                       invisible(muffled)
[09:31:45.175]                     }
[09:31:45.175]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.175]                   }
[09:31:45.175]                 }
[09:31:45.175]             }
[09:31:45.175]         }))
[09:31:45.175]     }, error = function(ex) {
[09:31:45.175]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:45.175]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.175]                 ...future.rng), started = ...future.startTime, 
[09:31:45.175]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:45.175]             version = "1.8"), class = "FutureResult")
[09:31:45.175]     }, finally = {
[09:31:45.175]         if (!identical(...future.workdir, getwd())) 
[09:31:45.175]             setwd(...future.workdir)
[09:31:45.175]         {
[09:31:45.175]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:45.175]                 ...future.oldOptions$nwarnings <- NULL
[09:31:45.175]             }
[09:31:45.175]             base::options(...future.oldOptions)
[09:31:45.175]             if (.Platform$OS.type == "windows") {
[09:31:45.175]                 old_names <- names(...future.oldEnvVars)
[09:31:45.175]                 envs <- base::Sys.getenv()
[09:31:45.175]                 names <- names(envs)
[09:31:45.175]                 common <- intersect(names, old_names)
[09:31:45.175]                 added <- setdiff(names, old_names)
[09:31:45.175]                 removed <- setdiff(old_names, names)
[09:31:45.175]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:45.175]                   envs[common]]
[09:31:45.175]                 NAMES <- toupper(changed)
[09:31:45.175]                 args <- list()
[09:31:45.175]                 for (kk in seq_along(NAMES)) {
[09:31:45.175]                   name <- changed[[kk]]
[09:31:45.175]                   NAME <- NAMES[[kk]]
[09:31:45.175]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.175]                     next
[09:31:45.175]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.175]                 }
[09:31:45.175]                 NAMES <- toupper(added)
[09:31:45.175]                 for (kk in seq_along(NAMES)) {
[09:31:45.175]                   name <- added[[kk]]
[09:31:45.175]                   NAME <- NAMES[[kk]]
[09:31:45.175]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.175]                     next
[09:31:45.175]                   args[[name]] <- ""
[09:31:45.175]                 }
[09:31:45.175]                 NAMES <- toupper(removed)
[09:31:45.175]                 for (kk in seq_along(NAMES)) {
[09:31:45.175]                   name <- removed[[kk]]
[09:31:45.175]                   NAME <- NAMES[[kk]]
[09:31:45.175]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.175]                     next
[09:31:45.175]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.175]                 }
[09:31:45.175]                 if (length(args) > 0) 
[09:31:45.175]                   base::do.call(base::Sys.setenv, args = args)
[09:31:45.175]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:45.175]             }
[09:31:45.175]             else {
[09:31:45.175]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:45.175]             }
[09:31:45.175]             {
[09:31:45.175]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:45.175]                   0L) {
[09:31:45.175]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:45.175]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:45.175]                   base::options(opts)
[09:31:45.175]                 }
[09:31:45.175]                 {
[09:31:45.175]                   {
[09:31:45.175]                     NULL
[09:31:45.175]                     RNGkind("Mersenne-Twister")
[09:31:45.175]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:45.175]                       inherits = FALSE)
[09:31:45.175]                   }
[09:31:45.175]                   options(future.plan = NULL)
[09:31:45.175]                   if (is.na(NA_character_)) 
[09:31:45.175]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.175]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:45.175]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:45.175]                     .init = FALSE)
[09:31:45.175]                 }
[09:31:45.175]             }
[09:31:45.175]         }
[09:31:45.175]     })
[09:31:45.175]     if (TRUE) {
[09:31:45.175]         base::sink(type = "output", split = FALSE)
[09:31:45.175]         if (TRUE) {
[09:31:45.175]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:45.175]         }
[09:31:45.175]         else {
[09:31:45.175]             ...future.result["stdout"] <- base::list(NULL)
[09:31:45.175]         }
[09:31:45.175]         base::close(...future.stdout)
[09:31:45.175]         ...future.stdout <- NULL
[09:31:45.175]     }
[09:31:45.175]     ...future.result$conditions <- ...future.conditions
[09:31:45.175]     ...future.result$finished <- base::Sys.time()
[09:31:45.175]     ...future.result
[09:31:45.175] }
[09:31:45.176] plan(): Setting new future strategy stack:
[09:31:45.176] List of future strategies:
[09:31:45.176] 1. sequential:
[09:31:45.176]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:45.176]    - tweaked: FALSE
[09:31:45.176]    - call: NULL
[09:31:45.177] plan(): nbrOfWorkers() = 1
[09:31:45.178] plan(): Setting new future strategy stack:
[09:31:45.178] List of future strategies:
[09:31:45.178] 1. multicore:
[09:31:45.178]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:45.178]    - tweaked: FALSE
[09:31:45.178]    - call: plan(multicore)
[09:31:45.181] plan(): nbrOfWorkers() = 1
[09:31:45.181] SequentialFuture started (and completed)
[09:31:45.181] resolved() for ‘SequentialFuture’ ...
[09:31:45.181] - state: ‘finished’
[09:31:45.181] - run: TRUE
[09:31:45.182] - result: ‘FutureResult’
[09:31:45.182] resolved() for ‘SequentialFuture’ ... done
[1] TRUE
[1] 42
*** multicore(..., globals = TRUE) with globals
[09:31:45.185] getGlobalsAndPackages() ...
[09:31:45.185] Searching for globals...
[09:31:45.187] - globals found: [4] ‘{’, ‘<-’, ‘*’, ‘a’
[09:31:45.187] Searching for globals ... DONE
[09:31:45.187] Resolving globals: FALSE
[09:31:45.187] The total size of the 1 globals is 56 bytes (56 bytes)
[09:31:45.188] The total size of the 1 globals exported for future expression (‘{; b <- 3; c <- 2; a * b * c; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[09:31:45.188] - globals: [1] ‘a’
[09:31:45.188] 
[09:31:45.188] getGlobalsAndPackages() ... DONE
[09:31:45.188] Packages needed by the future expression (n = 0): <none>
[09:31:45.189] Packages needed by future strategies (n = 0): <none>
[09:31:45.189] {
[09:31:45.189]     {
[09:31:45.189]         {
[09:31:45.189]             ...future.startTime <- base::Sys.time()
[09:31:45.189]             {
[09:31:45.189]                 {
[09:31:45.189]                   {
[09:31:45.189]                     base::local({
[09:31:45.189]                       has_future <- base::requireNamespace("future", 
[09:31:45.189]                         quietly = TRUE)
[09:31:45.189]                       if (has_future) {
[09:31:45.189]                         ns <- base::getNamespace("future")
[09:31:45.189]                         version <- ns[[".package"]][["version"]]
[09:31:45.189]                         if (is.null(version)) 
[09:31:45.189]                           version <- utils::packageVersion("future")
[09:31:45.189]                       }
[09:31:45.189]                       else {
[09:31:45.189]                         version <- NULL
[09:31:45.189]                       }
[09:31:45.189]                       if (!has_future || version < "1.8.0") {
[09:31:45.189]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:45.189]                           "", base::R.version$version.string), 
[09:31:45.189]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:45.189]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:45.189]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:45.189]                             "release", "version")], collapse = " "), 
[09:31:45.189]                           hostname = base::Sys.info()[["nodename"]])
[09:31:45.189]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:45.189]                           info)
[09:31:45.189]                         info <- base::paste(info, collapse = "; ")
[09:31:45.189]                         if (!has_future) {
[09:31:45.189]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:45.189]                             info)
[09:31:45.189]                         }
[09:31:45.189]                         else {
[09:31:45.189]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:45.189]                             info, version)
[09:31:45.189]                         }
[09:31:45.189]                         base::stop(msg)
[09:31:45.189]                       }
[09:31:45.189]                     })
[09:31:45.189]                   }
[09:31:45.189]                   ...future.strategy.old <- future::plan("list")
[09:31:45.189]                   options(future.plan = NULL)
[09:31:45.189]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.189]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:45.189]                 }
[09:31:45.189]                 ...future.workdir <- getwd()
[09:31:45.189]             }
[09:31:45.189]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:45.189]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:45.189]         }
[09:31:45.189]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:45.189]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:45.189]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:45.189]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:45.189]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:45.189]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:45.189]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:45.189]             base::names(...future.oldOptions))
[09:31:45.189]     }
[09:31:45.189]     if (FALSE) {
[09:31:45.189]     }
[09:31:45.189]     else {
[09:31:45.189]         if (TRUE) {
[09:31:45.189]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:45.189]                 open = "w")
[09:31:45.189]         }
[09:31:45.189]         else {
[09:31:45.189]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:45.189]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:45.189]         }
[09:31:45.189]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:45.189]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:45.189]             base::sink(type = "output", split = FALSE)
[09:31:45.189]             base::close(...future.stdout)
[09:31:45.189]         }, add = TRUE)
[09:31:45.189]     }
[09:31:45.189]     ...future.frame <- base::sys.nframe()
[09:31:45.189]     ...future.conditions <- base::list()
[09:31:45.189]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:45.189]     if (FALSE) {
[09:31:45.189]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:45.189]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:45.189]     }
[09:31:45.189]     ...future.result <- base::tryCatch({
[09:31:45.189]         base::withCallingHandlers({
[09:31:45.189]             ...future.value <- base::withVisible(base::local({
[09:31:45.189]                 b <- 3
[09:31:45.189]                 c <- 2
[09:31:45.189]                 a * b * c
[09:31:45.189]             }))
[09:31:45.189]             future::FutureResult(value = ...future.value$value, 
[09:31:45.189]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.189]                   ...future.rng), globalenv = if (FALSE) 
[09:31:45.189]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:45.189]                     ...future.globalenv.names))
[09:31:45.189]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:45.189]         }, condition = base::local({
[09:31:45.189]             c <- base::c
[09:31:45.189]             inherits <- base::inherits
[09:31:45.189]             invokeRestart <- base::invokeRestart
[09:31:45.189]             length <- base::length
[09:31:45.189]             list <- base::list
[09:31:45.189]             seq.int <- base::seq.int
[09:31:45.189]             signalCondition <- base::signalCondition
[09:31:45.189]             sys.calls <- base::sys.calls
[09:31:45.189]             `[[` <- base::`[[`
[09:31:45.189]             `+` <- base::`+`
[09:31:45.189]             `<<-` <- base::`<<-`
[09:31:45.189]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:45.189]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:45.189]                   3L)]
[09:31:45.189]             }
[09:31:45.189]             function(cond) {
[09:31:45.189]                 is_error <- inherits(cond, "error")
[09:31:45.189]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:45.189]                   NULL)
[09:31:45.189]                 if (is_error) {
[09:31:45.189]                   sessionInformation <- function() {
[09:31:45.189]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:45.189]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:45.189]                       search = base::search(), system = base::Sys.info())
[09:31:45.189]                   }
[09:31:45.189]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.189]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:45.189]                     cond$call), session = sessionInformation(), 
[09:31:45.189]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:45.189]                   signalCondition(cond)
[09:31:45.189]                 }
[09:31:45.189]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:45.189]                 "immediateCondition"))) {
[09:31:45.189]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:45.189]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.189]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:45.189]                   if (TRUE && !signal) {
[09:31:45.189]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.189]                     {
[09:31:45.189]                       inherits <- base::inherits
[09:31:45.189]                       invokeRestart <- base::invokeRestart
[09:31:45.189]                       is.null <- base::is.null
[09:31:45.189]                       muffled <- FALSE
[09:31:45.189]                       if (inherits(cond, "message")) {
[09:31:45.189]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.189]                         if (muffled) 
[09:31:45.189]                           invokeRestart("muffleMessage")
[09:31:45.189]                       }
[09:31:45.189]                       else if (inherits(cond, "warning")) {
[09:31:45.189]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.189]                         if (muffled) 
[09:31:45.189]                           invokeRestart("muffleWarning")
[09:31:45.189]                       }
[09:31:45.189]                       else if (inherits(cond, "condition")) {
[09:31:45.189]                         if (!is.null(pattern)) {
[09:31:45.189]                           computeRestarts <- base::computeRestarts
[09:31:45.189]                           grepl <- base::grepl
[09:31:45.189]                           restarts <- computeRestarts(cond)
[09:31:45.189]                           for (restart in restarts) {
[09:31:45.189]                             name <- restart$name
[09:31:45.189]                             if (is.null(name)) 
[09:31:45.189]                               next
[09:31:45.189]                             if (!grepl(pattern, name)) 
[09:31:45.189]                               next
[09:31:45.189]                             invokeRestart(restart)
[09:31:45.189]                             muffled <- TRUE
[09:31:45.189]                             break
[09:31:45.189]                           }
[09:31:45.189]                         }
[09:31:45.189]                       }
[09:31:45.189]                       invisible(muffled)
[09:31:45.189]                     }
[09:31:45.189]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.189]                   }
[09:31:45.189]                 }
[09:31:45.189]                 else {
[09:31:45.189]                   if (TRUE) {
[09:31:45.189]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.189]                     {
[09:31:45.189]                       inherits <- base::inherits
[09:31:45.189]                       invokeRestart <- base::invokeRestart
[09:31:45.189]                       is.null <- base::is.null
[09:31:45.189]                       muffled <- FALSE
[09:31:45.189]                       if (inherits(cond, "message")) {
[09:31:45.189]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.189]                         if (muffled) 
[09:31:45.189]                           invokeRestart("muffleMessage")
[09:31:45.189]                       }
[09:31:45.189]                       else if (inherits(cond, "warning")) {
[09:31:45.189]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.189]                         if (muffled) 
[09:31:45.189]                           invokeRestart("muffleWarning")
[09:31:45.189]                       }
[09:31:45.189]                       else if (inherits(cond, "condition")) {
[09:31:45.189]                         if (!is.null(pattern)) {
[09:31:45.189]                           computeRestarts <- base::computeRestarts
[09:31:45.189]                           grepl <- base::grepl
[09:31:45.189]                           restarts <- computeRestarts(cond)
[09:31:45.189]                           for (restart in restarts) {
[09:31:45.189]                             name <- restart$name
[09:31:45.189]                             if (is.null(name)) 
[09:31:45.189]                               next
[09:31:45.189]                             if (!grepl(pattern, name)) 
[09:31:45.189]                               next
[09:31:45.189]                             invokeRestart(restart)
[09:31:45.189]                             muffled <- TRUE
[09:31:45.189]                             break
[09:31:45.189]                           }
[09:31:45.189]                         }
[09:31:45.189]                       }
[09:31:45.189]                       invisible(muffled)
[09:31:45.189]                     }
[09:31:45.189]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.189]                   }
[09:31:45.189]                 }
[09:31:45.189]             }
[09:31:45.189]         }))
[09:31:45.189]     }, error = function(ex) {
[09:31:45.189]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:45.189]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.189]                 ...future.rng), started = ...future.startTime, 
[09:31:45.189]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:45.189]             version = "1.8"), class = "FutureResult")
[09:31:45.189]     }, finally = {
[09:31:45.189]         if (!identical(...future.workdir, getwd())) 
[09:31:45.189]             setwd(...future.workdir)
[09:31:45.189]         {
[09:31:45.189]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:45.189]                 ...future.oldOptions$nwarnings <- NULL
[09:31:45.189]             }
[09:31:45.189]             base::options(...future.oldOptions)
[09:31:45.189]             if (.Platform$OS.type == "windows") {
[09:31:45.189]                 old_names <- names(...future.oldEnvVars)
[09:31:45.189]                 envs <- base::Sys.getenv()
[09:31:45.189]                 names <- names(envs)
[09:31:45.189]                 common <- intersect(names, old_names)
[09:31:45.189]                 added <- setdiff(names, old_names)
[09:31:45.189]                 removed <- setdiff(old_names, names)
[09:31:45.189]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:45.189]                   envs[common]]
[09:31:45.189]                 NAMES <- toupper(changed)
[09:31:45.189]                 args <- list()
[09:31:45.189]                 for (kk in seq_along(NAMES)) {
[09:31:45.189]                   name <- changed[[kk]]
[09:31:45.189]                   NAME <- NAMES[[kk]]
[09:31:45.189]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.189]                     next
[09:31:45.189]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.189]                 }
[09:31:45.189]                 NAMES <- toupper(added)
[09:31:45.189]                 for (kk in seq_along(NAMES)) {
[09:31:45.189]                   name <- added[[kk]]
[09:31:45.189]                   NAME <- NAMES[[kk]]
[09:31:45.189]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.189]                     next
[09:31:45.189]                   args[[name]] <- ""
[09:31:45.189]                 }
[09:31:45.189]                 NAMES <- toupper(removed)
[09:31:45.189]                 for (kk in seq_along(NAMES)) {
[09:31:45.189]                   name <- removed[[kk]]
[09:31:45.189]                   NAME <- NAMES[[kk]]
[09:31:45.189]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.189]                     next
[09:31:45.189]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.189]                 }
[09:31:45.189]                 if (length(args) > 0) 
[09:31:45.189]                   base::do.call(base::Sys.setenv, args = args)
[09:31:45.189]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:45.189]             }
[09:31:45.189]             else {
[09:31:45.189]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:45.189]             }
[09:31:45.189]             {
[09:31:45.189]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:45.189]                   0L) {
[09:31:45.189]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:45.189]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:45.189]                   base::options(opts)
[09:31:45.189]                 }
[09:31:45.189]                 {
[09:31:45.189]                   {
[09:31:45.189]                     NULL
[09:31:45.189]                     RNGkind("Mersenne-Twister")
[09:31:45.189]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:45.189]                       inherits = FALSE)
[09:31:45.189]                   }
[09:31:45.189]                   options(future.plan = NULL)
[09:31:45.189]                   if (is.na(NA_character_)) 
[09:31:45.189]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.189]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:45.189]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:45.189]                     .init = FALSE)
[09:31:45.189]                 }
[09:31:45.189]             }
[09:31:45.189]         }
[09:31:45.189]     })
[09:31:45.189]     if (TRUE) {
[09:31:45.189]         base::sink(type = "output", split = FALSE)
[09:31:45.189]         if (TRUE) {
[09:31:45.189]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:45.189]         }
[09:31:45.189]         else {
[09:31:45.189]             ...future.result["stdout"] <- base::list(NULL)
[09:31:45.189]         }
[09:31:45.189]         base::close(...future.stdout)
[09:31:45.189]         ...future.stdout <- NULL
[09:31:45.189]     }
[09:31:45.189]     ...future.result$conditions <- ...future.conditions
[09:31:45.189]     ...future.result$finished <- base::Sys.time()
[09:31:45.189]     ...future.result
[09:31:45.189] }
[09:31:45.191] assign_globals() ...
[09:31:45.191] List of 1
[09:31:45.191]  $ a: num 0
[09:31:45.191]  - attr(*, "where")=List of 1
[09:31:45.191]   ..$ a:<environment: R_EmptyEnv> 
[09:31:45.191]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:31:45.191]  - attr(*, "resolved")= logi FALSE
[09:31:45.191]  - attr(*, "total_size")= num 56
[09:31:45.195] - copied ‘a’ to environment
[09:31:45.195] assign_globals() ... done
[09:31:45.195] plan(): Setting new future strategy stack:
[09:31:45.195] List of future strategies:
[09:31:45.195] 1. sequential:
[09:31:45.195]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:45.195]    - tweaked: FALSE
[09:31:45.195]    - call: NULL
[09:31:45.196] plan(): nbrOfWorkers() = 1
[09:31:45.196] plan(): Setting new future strategy stack:
[09:31:45.196] List of future strategies:
[09:31:45.196] 1. multicore:
[09:31:45.196]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:45.196]    - tweaked: FALSE
[09:31:45.196]    - call: plan(multicore)
[09:31:45.200] plan(): nbrOfWorkers() = 1
[09:31:45.200] SequentialFuture started (and completed)
SequentialFuture:
Label: ‘<none>’
Expression:
{
    b <- 3
    c <- 2
    a * b * c
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 56 bytes (numeric ‘a’ of 56 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 4dab417a-2fdd-f8a2-2e0a-d701ed5fedef
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[1] 0
*** multicore(..., globals = TRUE) with globals and blocking
 - Creating multicore future #1 ...
[09:31:45.204] getGlobalsAndPackages() ...
[09:31:45.204] Searching for globals...
[09:31:45.205] - globals found: [2] ‘{’, ‘ii’
[09:31:45.205] Searching for globals ... DONE
[09:31:45.205] Resolving globals: FALSE
[09:31:45.205] The total size of the 1 globals is 56 bytes (56 bytes)
[09:31:45.206] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[09:31:45.206] - globals: [1] ‘ii’
[09:31:45.206] 
[09:31:45.206] getGlobalsAndPackages() ... DONE
[09:31:45.206] Packages needed by the future expression (n = 0): <none>
[09:31:45.208] Packages needed by future strategies (n = 0): <none>
[09:31:45.208] {
[09:31:45.208]     {
[09:31:45.208]         {
[09:31:45.208]             ...future.startTime <- base::Sys.time()
[09:31:45.208]             {
[09:31:45.208]                 {
[09:31:45.208]                   {
[09:31:45.208]                     base::local({
[09:31:45.208]                       has_future <- base::requireNamespace("future", 
[09:31:45.208]                         quietly = TRUE)
[09:31:45.208]                       if (has_future) {
[09:31:45.208]                         ns <- base::getNamespace("future")
[09:31:45.208]                         version <- ns[[".package"]][["version"]]
[09:31:45.208]                         if (is.null(version)) 
[09:31:45.208]                           version <- utils::packageVersion("future")
[09:31:45.208]                       }
[09:31:45.208]                       else {
[09:31:45.208]                         version <- NULL
[09:31:45.208]                       }
[09:31:45.208]                       if (!has_future || version < "1.8.0") {
[09:31:45.208]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:45.208]                           "", base::R.version$version.string), 
[09:31:45.208]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:45.208]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:45.208]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:45.208]                             "release", "version")], collapse = " "), 
[09:31:45.208]                           hostname = base::Sys.info()[["nodename"]])
[09:31:45.208]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:45.208]                           info)
[09:31:45.208]                         info <- base::paste(info, collapse = "; ")
[09:31:45.208]                         if (!has_future) {
[09:31:45.208]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:45.208]                             info)
[09:31:45.208]                         }
[09:31:45.208]                         else {
[09:31:45.208]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:45.208]                             info, version)
[09:31:45.208]                         }
[09:31:45.208]                         base::stop(msg)
[09:31:45.208]                       }
[09:31:45.208]                     })
[09:31:45.208]                   }
[09:31:45.208]                   ...future.strategy.old <- future::plan("list")
[09:31:45.208]                   options(future.plan = NULL)
[09:31:45.208]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.208]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:45.208]                 }
[09:31:45.208]                 ...future.workdir <- getwd()
[09:31:45.208]             }
[09:31:45.208]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:45.208]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:45.208]         }
[09:31:45.208]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:45.208]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:45.208]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:45.208]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:45.208]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:45.208]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:45.208]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:45.208]             base::names(...future.oldOptions))
[09:31:45.208]     }
[09:31:45.208]     if (FALSE) {
[09:31:45.208]     }
[09:31:45.208]     else {
[09:31:45.208]         if (TRUE) {
[09:31:45.208]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:45.208]                 open = "w")
[09:31:45.208]         }
[09:31:45.208]         else {
[09:31:45.208]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:45.208]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:45.208]         }
[09:31:45.208]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:45.208]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:45.208]             base::sink(type = "output", split = FALSE)
[09:31:45.208]             base::close(...future.stdout)
[09:31:45.208]         }, add = TRUE)
[09:31:45.208]     }
[09:31:45.208]     ...future.frame <- base::sys.nframe()
[09:31:45.208]     ...future.conditions <- base::list()
[09:31:45.208]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:45.208]     if (FALSE) {
[09:31:45.208]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:45.208]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:45.208]     }
[09:31:45.208]     ...future.result <- base::tryCatch({
[09:31:45.208]         base::withCallingHandlers({
[09:31:45.208]             ...future.value <- base::withVisible(base::local({
[09:31:45.208]                 ii
[09:31:45.208]             }))
[09:31:45.208]             future::FutureResult(value = ...future.value$value, 
[09:31:45.208]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.208]                   ...future.rng), globalenv = if (FALSE) 
[09:31:45.208]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:45.208]                     ...future.globalenv.names))
[09:31:45.208]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:45.208]         }, condition = base::local({
[09:31:45.208]             c <- base::c
[09:31:45.208]             inherits <- base::inherits
[09:31:45.208]             invokeRestart <- base::invokeRestart
[09:31:45.208]             length <- base::length
[09:31:45.208]             list <- base::list
[09:31:45.208]             seq.int <- base::seq.int
[09:31:45.208]             signalCondition <- base::signalCondition
[09:31:45.208]             sys.calls <- base::sys.calls
[09:31:45.208]             `[[` <- base::`[[`
[09:31:45.208]             `+` <- base::`+`
[09:31:45.208]             `<<-` <- base::`<<-`
[09:31:45.208]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:45.208]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:45.208]                   3L)]
[09:31:45.208]             }
[09:31:45.208]             function(cond) {
[09:31:45.208]                 is_error <- inherits(cond, "error")
[09:31:45.208]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:45.208]                   NULL)
[09:31:45.208]                 if (is_error) {
[09:31:45.208]                   sessionInformation <- function() {
[09:31:45.208]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:45.208]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:45.208]                       search = base::search(), system = base::Sys.info())
[09:31:45.208]                   }
[09:31:45.208]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.208]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:45.208]                     cond$call), session = sessionInformation(), 
[09:31:45.208]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:45.208]                   signalCondition(cond)
[09:31:45.208]                 }
[09:31:45.208]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:45.208]                 "immediateCondition"))) {
[09:31:45.208]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:45.208]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.208]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:45.208]                   if (TRUE && !signal) {
[09:31:45.208]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.208]                     {
[09:31:45.208]                       inherits <- base::inherits
[09:31:45.208]                       invokeRestart <- base::invokeRestart
[09:31:45.208]                       is.null <- base::is.null
[09:31:45.208]                       muffled <- FALSE
[09:31:45.208]                       if (inherits(cond, "message")) {
[09:31:45.208]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.208]                         if (muffled) 
[09:31:45.208]                           invokeRestart("muffleMessage")
[09:31:45.208]                       }
[09:31:45.208]                       else if (inherits(cond, "warning")) {
[09:31:45.208]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.208]                         if (muffled) 
[09:31:45.208]                           invokeRestart("muffleWarning")
[09:31:45.208]                       }
[09:31:45.208]                       else if (inherits(cond, "condition")) {
[09:31:45.208]                         if (!is.null(pattern)) {
[09:31:45.208]                           computeRestarts <- base::computeRestarts
[09:31:45.208]                           grepl <- base::grepl
[09:31:45.208]                           restarts <- computeRestarts(cond)
[09:31:45.208]                           for (restart in restarts) {
[09:31:45.208]                             name <- restart$name
[09:31:45.208]                             if (is.null(name)) 
[09:31:45.208]                               next
[09:31:45.208]                             if (!grepl(pattern, name)) 
[09:31:45.208]                               next
[09:31:45.208]                             invokeRestart(restart)
[09:31:45.208]                             muffled <- TRUE
[09:31:45.208]                             break
[09:31:45.208]                           }
[09:31:45.208]                         }
[09:31:45.208]                       }
[09:31:45.208]                       invisible(muffled)
[09:31:45.208]                     }
[09:31:45.208]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.208]                   }
[09:31:45.208]                 }
[09:31:45.208]                 else {
[09:31:45.208]                   if (TRUE) {
[09:31:45.208]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.208]                     {
[09:31:45.208]                       inherits <- base::inherits
[09:31:45.208]                       invokeRestart <- base::invokeRestart
[09:31:45.208]                       is.null <- base::is.null
[09:31:45.208]                       muffled <- FALSE
[09:31:45.208]                       if (inherits(cond, "message")) {
[09:31:45.208]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.208]                         if (muffled) 
[09:31:45.208]                           invokeRestart("muffleMessage")
[09:31:45.208]                       }
[09:31:45.208]                       else if (inherits(cond, "warning")) {
[09:31:45.208]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.208]                         if (muffled) 
[09:31:45.208]                           invokeRestart("muffleWarning")
[09:31:45.208]                       }
[09:31:45.208]                       else if (inherits(cond, "condition")) {
[09:31:45.208]                         if (!is.null(pattern)) {
[09:31:45.208]                           computeRestarts <- base::computeRestarts
[09:31:45.208]                           grepl <- base::grepl
[09:31:45.208]                           restarts <- computeRestarts(cond)
[09:31:45.208]                           for (restart in restarts) {
[09:31:45.208]                             name <- restart$name
[09:31:45.208]                             if (is.null(name)) 
[09:31:45.208]                               next
[09:31:45.208]                             if (!grepl(pattern, name)) 
[09:31:45.208]                               next
[09:31:45.208]                             invokeRestart(restart)
[09:31:45.208]                             muffled <- TRUE
[09:31:45.208]                             break
[09:31:45.208]                           }
[09:31:45.208]                         }
[09:31:45.208]                       }
[09:31:45.208]                       invisible(muffled)
[09:31:45.208]                     }
[09:31:45.208]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.208]                   }
[09:31:45.208]                 }
[09:31:45.208]             }
[09:31:45.208]         }))
[09:31:45.208]     }, error = function(ex) {
[09:31:45.208]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:45.208]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.208]                 ...future.rng), started = ...future.startTime, 
[09:31:45.208]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:45.208]             version = "1.8"), class = "FutureResult")
[09:31:45.208]     }, finally = {
[09:31:45.208]         if (!identical(...future.workdir, getwd())) 
[09:31:45.208]             setwd(...future.workdir)
[09:31:45.208]         {
[09:31:45.208]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:45.208]                 ...future.oldOptions$nwarnings <- NULL
[09:31:45.208]             }
[09:31:45.208]             base::options(...future.oldOptions)
[09:31:45.208]             if (.Platform$OS.type == "windows") {
[09:31:45.208]                 old_names <- names(...future.oldEnvVars)
[09:31:45.208]                 envs <- base::Sys.getenv()
[09:31:45.208]                 names <- names(envs)
[09:31:45.208]                 common <- intersect(names, old_names)
[09:31:45.208]                 added <- setdiff(names, old_names)
[09:31:45.208]                 removed <- setdiff(old_names, names)
[09:31:45.208]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:45.208]                   envs[common]]
[09:31:45.208]                 NAMES <- toupper(changed)
[09:31:45.208]                 args <- list()
[09:31:45.208]                 for (kk in seq_along(NAMES)) {
[09:31:45.208]                   name <- changed[[kk]]
[09:31:45.208]                   NAME <- NAMES[[kk]]
[09:31:45.208]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.208]                     next
[09:31:45.208]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.208]                 }
[09:31:45.208]                 NAMES <- toupper(added)
[09:31:45.208]                 for (kk in seq_along(NAMES)) {
[09:31:45.208]                   name <- added[[kk]]
[09:31:45.208]                   NAME <- NAMES[[kk]]
[09:31:45.208]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.208]                     next
[09:31:45.208]                   args[[name]] <- ""
[09:31:45.208]                 }
[09:31:45.208]                 NAMES <- toupper(removed)
[09:31:45.208]                 for (kk in seq_along(NAMES)) {
[09:31:45.208]                   name <- removed[[kk]]
[09:31:45.208]                   NAME <- NAMES[[kk]]
[09:31:45.208]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.208]                     next
[09:31:45.208]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.208]                 }
[09:31:45.208]                 if (length(args) > 0) 
[09:31:45.208]                   base::do.call(base::Sys.setenv, args = args)
[09:31:45.208]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:45.208]             }
[09:31:45.208]             else {
[09:31:45.208]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:45.208]             }
[09:31:45.208]             {
[09:31:45.208]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:45.208]                   0L) {
[09:31:45.208]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:45.208]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:45.208]                   base::options(opts)
[09:31:45.208]                 }
[09:31:45.208]                 {
[09:31:45.208]                   {
[09:31:45.208]                     NULL
[09:31:45.208]                     RNGkind("Mersenne-Twister")
[09:31:45.208]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:45.208]                       inherits = FALSE)
[09:31:45.208]                   }
[09:31:45.208]                   options(future.plan = NULL)
[09:31:45.208]                   if (is.na(NA_character_)) 
[09:31:45.208]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.208]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:45.208]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:45.208]                     .init = FALSE)
[09:31:45.208]                 }
[09:31:45.208]             }
[09:31:45.208]         }
[09:31:45.208]     })
[09:31:45.208]     if (TRUE) {
[09:31:45.208]         base::sink(type = "output", split = FALSE)
[09:31:45.208]         if (TRUE) {
[09:31:45.208]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:45.208]         }
[09:31:45.208]         else {
[09:31:45.208]             ...future.result["stdout"] <- base::list(NULL)
[09:31:45.208]         }
[09:31:45.208]         base::close(...future.stdout)
[09:31:45.208]         ...future.stdout <- NULL
[09:31:45.208]     }
[09:31:45.208]     ...future.result$conditions <- ...future.conditions
[09:31:45.208]     ...future.result$finished <- base::Sys.time()
[09:31:45.208]     ...future.result
[09:31:45.208] }
[09:31:45.210] assign_globals() ...
[09:31:45.210] List of 1
[09:31:45.210]  $ ii: int 1
[09:31:45.210]  - attr(*, "where")=List of 1
[09:31:45.210]   ..$ ii:<environment: R_EmptyEnv> 
[09:31:45.210]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:31:45.210]  - attr(*, "resolved")= logi FALSE
[09:31:45.210]  - attr(*, "total_size")= num 56
[09:31:45.212] - copied ‘ii’ to environment
[09:31:45.212] assign_globals() ... done
[09:31:45.212] plan(): Setting new future strategy stack:
[09:31:45.213] List of future strategies:
[09:31:45.213] 1. sequential:
[09:31:45.213]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:45.213]    - tweaked: FALSE
[09:31:45.213]    - call: NULL
[09:31:45.213] plan(): nbrOfWorkers() = 1
[09:31:45.214] plan(): Setting new future strategy stack:
[09:31:45.214] List of future strategies:
[09:31:45.214] 1. multicore:
[09:31:45.214]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:45.214]    - tweaked: FALSE
[09:31:45.214]    - call: plan(multicore)
[09:31:45.217] plan(): nbrOfWorkers() = 1
[09:31:45.217] SequentialFuture started (and completed)
 - Creating multicore future #2 ...
[09:31:45.220] getGlobalsAndPackages() ...
[09:31:45.221] Searching for globals...
[09:31:45.221] - globals found: [2] ‘{’, ‘ii’
[09:31:45.221] Searching for globals ... DONE
[09:31:45.221] Resolving globals: FALSE
[09:31:45.222] The total size of the 1 globals is 56 bytes (56 bytes)
[09:31:45.222] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[09:31:45.222] - globals: [1] ‘ii’
[09:31:45.222] 
[09:31:45.222] getGlobalsAndPackages() ... DONE
[09:31:45.223] Packages needed by the future expression (n = 0): <none>
[09:31:45.223] Packages needed by future strategies (n = 0): <none>
[09:31:45.223] {
[09:31:45.223]     {
[09:31:45.223]         {
[09:31:45.223]             ...future.startTime <- base::Sys.time()
[09:31:45.223]             {
[09:31:45.223]                 {
[09:31:45.223]                   {
[09:31:45.223]                     base::local({
[09:31:45.223]                       has_future <- base::requireNamespace("future", 
[09:31:45.223]                         quietly = TRUE)
[09:31:45.223]                       if (has_future) {
[09:31:45.223]                         ns <- base::getNamespace("future")
[09:31:45.223]                         version <- ns[[".package"]][["version"]]
[09:31:45.223]                         if (is.null(version)) 
[09:31:45.223]                           version <- utils::packageVersion("future")
[09:31:45.223]                       }
[09:31:45.223]                       else {
[09:31:45.223]                         version <- NULL
[09:31:45.223]                       }
[09:31:45.223]                       if (!has_future || version < "1.8.0") {
[09:31:45.223]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:45.223]                           "", base::R.version$version.string), 
[09:31:45.223]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:45.223]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:45.223]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:45.223]                             "release", "version")], collapse = " "), 
[09:31:45.223]                           hostname = base::Sys.info()[["nodename"]])
[09:31:45.223]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:45.223]                           info)
[09:31:45.223]                         info <- base::paste(info, collapse = "; ")
[09:31:45.223]                         if (!has_future) {
[09:31:45.223]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:45.223]                             info)
[09:31:45.223]                         }
[09:31:45.223]                         else {
[09:31:45.223]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:45.223]                             info, version)
[09:31:45.223]                         }
[09:31:45.223]                         base::stop(msg)
[09:31:45.223]                       }
[09:31:45.223]                     })
[09:31:45.223]                   }
[09:31:45.223]                   ...future.strategy.old <- future::plan("list")
[09:31:45.223]                   options(future.plan = NULL)
[09:31:45.223]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.223]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:45.223]                 }
[09:31:45.223]                 ...future.workdir <- getwd()
[09:31:45.223]             }
[09:31:45.223]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:45.223]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:45.223]         }
[09:31:45.223]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:45.223]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:45.223]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:45.223]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:45.223]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:45.223]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:45.223]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:45.223]             base::names(...future.oldOptions))
[09:31:45.223]     }
[09:31:45.223]     if (FALSE) {
[09:31:45.223]     }
[09:31:45.223]     else {
[09:31:45.223]         if (TRUE) {
[09:31:45.223]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:45.223]                 open = "w")
[09:31:45.223]         }
[09:31:45.223]         else {
[09:31:45.223]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:45.223]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:45.223]         }
[09:31:45.223]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:45.223]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:45.223]             base::sink(type = "output", split = FALSE)
[09:31:45.223]             base::close(...future.stdout)
[09:31:45.223]         }, add = TRUE)
[09:31:45.223]     }
[09:31:45.223]     ...future.frame <- base::sys.nframe()
[09:31:45.223]     ...future.conditions <- base::list()
[09:31:45.223]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:45.223]     if (FALSE) {
[09:31:45.223]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:45.223]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:45.223]     }
[09:31:45.223]     ...future.result <- base::tryCatch({
[09:31:45.223]         base::withCallingHandlers({
[09:31:45.223]             ...future.value <- base::withVisible(base::local({
[09:31:45.223]                 ii
[09:31:45.223]             }))
[09:31:45.223]             future::FutureResult(value = ...future.value$value, 
[09:31:45.223]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.223]                   ...future.rng), globalenv = if (FALSE) 
[09:31:45.223]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:45.223]                     ...future.globalenv.names))
[09:31:45.223]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:45.223]         }, condition = base::local({
[09:31:45.223]             c <- base::c
[09:31:45.223]             inherits <- base::inherits
[09:31:45.223]             invokeRestart <- base::invokeRestart
[09:31:45.223]             length <- base::length
[09:31:45.223]             list <- base::list
[09:31:45.223]             seq.int <- base::seq.int
[09:31:45.223]             signalCondition <- base::signalCondition
[09:31:45.223]             sys.calls <- base::sys.calls
[09:31:45.223]             `[[` <- base::`[[`
[09:31:45.223]             `+` <- base::`+`
[09:31:45.223]             `<<-` <- base::`<<-`
[09:31:45.223]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:45.223]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:45.223]                   3L)]
[09:31:45.223]             }
[09:31:45.223]             function(cond) {
[09:31:45.223]                 is_error <- inherits(cond, "error")
[09:31:45.223]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:45.223]                   NULL)
[09:31:45.223]                 if (is_error) {
[09:31:45.223]                   sessionInformation <- function() {
[09:31:45.223]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:45.223]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:45.223]                       search = base::search(), system = base::Sys.info())
[09:31:45.223]                   }
[09:31:45.223]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.223]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:45.223]                     cond$call), session = sessionInformation(), 
[09:31:45.223]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:45.223]                   signalCondition(cond)
[09:31:45.223]                 }
[09:31:45.223]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:45.223]                 "immediateCondition"))) {
[09:31:45.223]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:45.223]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.223]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:45.223]                   if (TRUE && !signal) {
[09:31:45.223]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.223]                     {
[09:31:45.223]                       inherits <- base::inherits
[09:31:45.223]                       invokeRestart <- base::invokeRestart
[09:31:45.223]                       is.null <- base::is.null
[09:31:45.223]                       muffled <- FALSE
[09:31:45.223]                       if (inherits(cond, "message")) {
[09:31:45.223]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.223]                         if (muffled) 
[09:31:45.223]                           invokeRestart("muffleMessage")
[09:31:45.223]                       }
[09:31:45.223]                       else if (inherits(cond, "warning")) {
[09:31:45.223]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.223]                         if (muffled) 
[09:31:45.223]                           invokeRestart("muffleWarning")
[09:31:45.223]                       }
[09:31:45.223]                       else if (inherits(cond, "condition")) {
[09:31:45.223]                         if (!is.null(pattern)) {
[09:31:45.223]                           computeRestarts <- base::computeRestarts
[09:31:45.223]                           grepl <- base::grepl
[09:31:45.223]                           restarts <- computeRestarts(cond)
[09:31:45.223]                           for (restart in restarts) {
[09:31:45.223]                             name <- restart$name
[09:31:45.223]                             if (is.null(name)) 
[09:31:45.223]                               next
[09:31:45.223]                             if (!grepl(pattern, name)) 
[09:31:45.223]                               next
[09:31:45.223]                             invokeRestart(restart)
[09:31:45.223]                             muffled <- TRUE
[09:31:45.223]                             break
[09:31:45.223]                           }
[09:31:45.223]                         }
[09:31:45.223]                       }
[09:31:45.223]                       invisible(muffled)
[09:31:45.223]                     }
[09:31:45.223]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.223]                   }
[09:31:45.223]                 }
[09:31:45.223]                 else {
[09:31:45.223]                   if (TRUE) {
[09:31:45.223]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.223]                     {
[09:31:45.223]                       inherits <- base::inherits
[09:31:45.223]                       invokeRestart <- base::invokeRestart
[09:31:45.223]                       is.null <- base::is.null
[09:31:45.223]                       muffled <- FALSE
[09:31:45.223]                       if (inherits(cond, "message")) {
[09:31:45.223]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.223]                         if (muffled) 
[09:31:45.223]                           invokeRestart("muffleMessage")
[09:31:45.223]                       }
[09:31:45.223]                       else if (inherits(cond, "warning")) {
[09:31:45.223]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.223]                         if (muffled) 
[09:31:45.223]                           invokeRestart("muffleWarning")
[09:31:45.223]                       }
[09:31:45.223]                       else if (inherits(cond, "condition")) {
[09:31:45.223]                         if (!is.null(pattern)) {
[09:31:45.223]                           computeRestarts <- base::computeRestarts
[09:31:45.223]                           grepl <- base::grepl
[09:31:45.223]                           restarts <- computeRestarts(cond)
[09:31:45.223]                           for (restart in restarts) {
[09:31:45.223]                             name <- restart$name
[09:31:45.223]                             if (is.null(name)) 
[09:31:45.223]                               next
[09:31:45.223]                             if (!grepl(pattern, name)) 
[09:31:45.223]                               next
[09:31:45.223]                             invokeRestart(restart)
[09:31:45.223]                             muffled <- TRUE
[09:31:45.223]                             break
[09:31:45.223]                           }
[09:31:45.223]                         }
[09:31:45.223]                       }
[09:31:45.223]                       invisible(muffled)
[09:31:45.223]                     }
[09:31:45.223]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.223]                   }
[09:31:45.223]                 }
[09:31:45.223]             }
[09:31:45.223]         }))
[09:31:45.223]     }, error = function(ex) {
[09:31:45.223]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:45.223]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.223]                 ...future.rng), started = ...future.startTime, 
[09:31:45.223]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:45.223]             version = "1.8"), class = "FutureResult")
[09:31:45.223]     }, finally = {
[09:31:45.223]         if (!identical(...future.workdir, getwd())) 
[09:31:45.223]             setwd(...future.workdir)
[09:31:45.223]         {
[09:31:45.223]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:45.223]                 ...future.oldOptions$nwarnings <- NULL
[09:31:45.223]             }
[09:31:45.223]             base::options(...future.oldOptions)
[09:31:45.223]             if (.Platform$OS.type == "windows") {
[09:31:45.223]                 old_names <- names(...future.oldEnvVars)
[09:31:45.223]                 envs <- base::Sys.getenv()
[09:31:45.223]                 names <- names(envs)
[09:31:45.223]                 common <- intersect(names, old_names)
[09:31:45.223]                 added <- setdiff(names, old_names)
[09:31:45.223]                 removed <- setdiff(old_names, names)
[09:31:45.223]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:45.223]                   envs[common]]
[09:31:45.223]                 NAMES <- toupper(changed)
[09:31:45.223]                 args <- list()
[09:31:45.223]                 for (kk in seq_along(NAMES)) {
[09:31:45.223]                   name <- changed[[kk]]
[09:31:45.223]                   NAME <- NAMES[[kk]]
[09:31:45.223]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.223]                     next
[09:31:45.223]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.223]                 }
[09:31:45.223]                 NAMES <- toupper(added)
[09:31:45.223]                 for (kk in seq_along(NAMES)) {
[09:31:45.223]                   name <- added[[kk]]
[09:31:45.223]                   NAME <- NAMES[[kk]]
[09:31:45.223]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.223]                     next
[09:31:45.223]                   args[[name]] <- ""
[09:31:45.223]                 }
[09:31:45.223]                 NAMES <- toupper(removed)
[09:31:45.223]                 for (kk in seq_along(NAMES)) {
[09:31:45.223]                   name <- removed[[kk]]
[09:31:45.223]                   NAME <- NAMES[[kk]]
[09:31:45.223]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.223]                     next
[09:31:45.223]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.223]                 }
[09:31:45.223]                 if (length(args) > 0) 
[09:31:45.223]                   base::do.call(base::Sys.setenv, args = args)
[09:31:45.223]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:45.223]             }
[09:31:45.223]             else {
[09:31:45.223]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:45.223]             }
[09:31:45.223]             {
[09:31:45.223]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:45.223]                   0L) {
[09:31:45.223]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:45.223]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:45.223]                   base::options(opts)
[09:31:45.223]                 }
[09:31:45.223]                 {
[09:31:45.223]                   {
[09:31:45.223]                     NULL
[09:31:45.223]                     RNGkind("Mersenne-Twister")
[09:31:45.223]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:45.223]                       inherits = FALSE)
[09:31:45.223]                   }
[09:31:45.223]                   options(future.plan = NULL)
[09:31:45.223]                   if (is.na(NA_character_)) 
[09:31:45.223]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.223]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:45.223]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:45.223]                     .init = FALSE)
[09:31:45.223]                 }
[09:31:45.223]             }
[09:31:45.223]         }
[09:31:45.223]     })
[09:31:45.223]     if (TRUE) {
[09:31:45.223]         base::sink(type = "output", split = FALSE)
[09:31:45.223]         if (TRUE) {
[09:31:45.223]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:45.223]         }
[09:31:45.223]         else {
[09:31:45.223]             ...future.result["stdout"] <- base::list(NULL)
[09:31:45.223]         }
[09:31:45.223]         base::close(...future.stdout)
[09:31:45.223]         ...future.stdout <- NULL
[09:31:45.223]     }
[09:31:45.223]     ...future.result$conditions <- ...future.conditions
[09:31:45.223]     ...future.result$finished <- base::Sys.time()
[09:31:45.223]     ...future.result
[09:31:45.223] }
[09:31:45.225] assign_globals() ...
[09:31:45.225] List of 1
[09:31:45.225]  $ ii: int 2
[09:31:45.225]  - attr(*, "where")=List of 1
[09:31:45.225]   ..$ ii:<environment: R_EmptyEnv> 
[09:31:45.225]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:31:45.225]  - attr(*, "resolved")= logi FALSE
[09:31:45.225]  - attr(*, "total_size")= num 56
[09:31:45.227] - copied ‘ii’ to environment
[09:31:45.227] assign_globals() ... done
[09:31:45.227] plan(): Setting new future strategy stack:
[09:31:45.227] List of future strategies:
[09:31:45.227] 1. sequential:
[09:31:45.227]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:45.227]    - tweaked: FALSE
[09:31:45.227]    - call: NULL
[09:31:45.228] plan(): nbrOfWorkers() = 1
[09:31:45.228] plan(): Setting new future strategy stack:
[09:31:45.229] List of future strategies:
[09:31:45.229] 1. multicore:
[09:31:45.229]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:45.229]    - tweaked: FALSE
[09:31:45.229]    - call: plan(multicore)
[09:31:45.232] plan(): nbrOfWorkers() = 1
[09:31:45.232] SequentialFuture started (and completed)
 - Creating multicore future #3 ...
[09:31:45.235] getGlobalsAndPackages() ...
[09:31:45.235] Searching for globals...
[09:31:45.236] - globals found: [2] ‘{’, ‘ii’
[09:31:45.236] Searching for globals ... DONE
[09:31:45.236] Resolving globals: FALSE
[09:31:45.236] The total size of the 1 globals is 56 bytes (56 bytes)
[09:31:45.237] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[09:31:45.237] - globals: [1] ‘ii’
[09:31:45.237] 
[09:31:45.237] getGlobalsAndPackages() ... DONE
[09:31:45.237] Packages needed by the future expression (n = 0): <none>
[09:31:45.237] Packages needed by future strategies (n = 0): <none>
[09:31:45.238] {
[09:31:45.238]     {
[09:31:45.238]         {
[09:31:45.238]             ...future.startTime <- base::Sys.time()
[09:31:45.238]             {
[09:31:45.238]                 {
[09:31:45.238]                   {
[09:31:45.238]                     base::local({
[09:31:45.238]                       has_future <- base::requireNamespace("future", 
[09:31:45.238]                         quietly = TRUE)
[09:31:45.238]                       if (has_future) {
[09:31:45.238]                         ns <- base::getNamespace("future")
[09:31:45.238]                         version <- ns[[".package"]][["version"]]
[09:31:45.238]                         if (is.null(version)) 
[09:31:45.238]                           version <- utils::packageVersion("future")
[09:31:45.238]                       }
[09:31:45.238]                       else {
[09:31:45.238]                         version <- NULL
[09:31:45.238]                       }
[09:31:45.238]                       if (!has_future || version < "1.8.0") {
[09:31:45.238]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:45.238]                           "", base::R.version$version.string), 
[09:31:45.238]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:45.238]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:45.238]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:45.238]                             "release", "version")], collapse = " "), 
[09:31:45.238]                           hostname = base::Sys.info()[["nodename"]])
[09:31:45.238]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:45.238]                           info)
[09:31:45.238]                         info <- base::paste(info, collapse = "; ")
[09:31:45.238]                         if (!has_future) {
[09:31:45.238]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:45.238]                             info)
[09:31:45.238]                         }
[09:31:45.238]                         else {
[09:31:45.238]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:45.238]                             info, version)
[09:31:45.238]                         }
[09:31:45.238]                         base::stop(msg)
[09:31:45.238]                       }
[09:31:45.238]                     })
[09:31:45.238]                   }
[09:31:45.238]                   ...future.strategy.old <- future::plan("list")
[09:31:45.238]                   options(future.plan = NULL)
[09:31:45.238]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.238]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:45.238]                 }
[09:31:45.238]                 ...future.workdir <- getwd()
[09:31:45.238]             }
[09:31:45.238]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:45.238]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:45.238]         }
[09:31:45.238]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:45.238]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:45.238]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:45.238]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:45.238]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:45.238]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:45.238]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:45.238]             base::names(...future.oldOptions))
[09:31:45.238]     }
[09:31:45.238]     if (FALSE) {
[09:31:45.238]     }
[09:31:45.238]     else {
[09:31:45.238]         if (TRUE) {
[09:31:45.238]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:45.238]                 open = "w")
[09:31:45.238]         }
[09:31:45.238]         else {
[09:31:45.238]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:45.238]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:45.238]         }
[09:31:45.238]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:45.238]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:45.238]             base::sink(type = "output", split = FALSE)
[09:31:45.238]             base::close(...future.stdout)
[09:31:45.238]         }, add = TRUE)
[09:31:45.238]     }
[09:31:45.238]     ...future.frame <- base::sys.nframe()
[09:31:45.238]     ...future.conditions <- base::list()
[09:31:45.238]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:45.238]     if (FALSE) {
[09:31:45.238]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:45.238]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:45.238]     }
[09:31:45.238]     ...future.result <- base::tryCatch({
[09:31:45.238]         base::withCallingHandlers({
[09:31:45.238]             ...future.value <- base::withVisible(base::local({
[09:31:45.238]                 ii
[09:31:45.238]             }))
[09:31:45.238]             future::FutureResult(value = ...future.value$value, 
[09:31:45.238]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.238]                   ...future.rng), globalenv = if (FALSE) 
[09:31:45.238]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:45.238]                     ...future.globalenv.names))
[09:31:45.238]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:45.238]         }, condition = base::local({
[09:31:45.238]             c <- base::c
[09:31:45.238]             inherits <- base::inherits
[09:31:45.238]             invokeRestart <- base::invokeRestart
[09:31:45.238]             length <- base::length
[09:31:45.238]             list <- base::list
[09:31:45.238]             seq.int <- base::seq.int
[09:31:45.238]             signalCondition <- base::signalCondition
[09:31:45.238]             sys.calls <- base::sys.calls
[09:31:45.238]             `[[` <- base::`[[`
[09:31:45.238]             `+` <- base::`+`
[09:31:45.238]             `<<-` <- base::`<<-`
[09:31:45.238]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:45.238]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:45.238]                   3L)]
[09:31:45.238]             }
[09:31:45.238]             function(cond) {
[09:31:45.238]                 is_error <- inherits(cond, "error")
[09:31:45.238]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:45.238]                   NULL)
[09:31:45.238]                 if (is_error) {
[09:31:45.238]                   sessionInformation <- function() {
[09:31:45.238]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:45.238]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:45.238]                       search = base::search(), system = base::Sys.info())
[09:31:45.238]                   }
[09:31:45.238]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.238]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:45.238]                     cond$call), session = sessionInformation(), 
[09:31:45.238]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:45.238]                   signalCondition(cond)
[09:31:45.238]                 }
[09:31:45.238]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:45.238]                 "immediateCondition"))) {
[09:31:45.238]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:45.238]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.238]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:45.238]                   if (TRUE && !signal) {
[09:31:45.238]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.238]                     {
[09:31:45.238]                       inherits <- base::inherits
[09:31:45.238]                       invokeRestart <- base::invokeRestart
[09:31:45.238]                       is.null <- base::is.null
[09:31:45.238]                       muffled <- FALSE
[09:31:45.238]                       if (inherits(cond, "message")) {
[09:31:45.238]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.238]                         if (muffled) 
[09:31:45.238]                           invokeRestart("muffleMessage")
[09:31:45.238]                       }
[09:31:45.238]                       else if (inherits(cond, "warning")) {
[09:31:45.238]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.238]                         if (muffled) 
[09:31:45.238]                           invokeRestart("muffleWarning")
[09:31:45.238]                       }
[09:31:45.238]                       else if (inherits(cond, "condition")) {
[09:31:45.238]                         if (!is.null(pattern)) {
[09:31:45.238]                           computeRestarts <- base::computeRestarts
[09:31:45.238]                           grepl <- base::grepl
[09:31:45.238]                           restarts <- computeRestarts(cond)
[09:31:45.238]                           for (restart in restarts) {
[09:31:45.238]                             name <- restart$name
[09:31:45.238]                             if (is.null(name)) 
[09:31:45.238]                               next
[09:31:45.238]                             if (!grepl(pattern, name)) 
[09:31:45.238]                               next
[09:31:45.238]                             invokeRestart(restart)
[09:31:45.238]                             muffled <- TRUE
[09:31:45.238]                             break
[09:31:45.238]                           }
[09:31:45.238]                         }
[09:31:45.238]                       }
[09:31:45.238]                       invisible(muffled)
[09:31:45.238]                     }
[09:31:45.238]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.238]                   }
[09:31:45.238]                 }
[09:31:45.238]                 else {
[09:31:45.238]                   if (TRUE) {
[09:31:45.238]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.238]                     {
[09:31:45.238]                       inherits <- base::inherits
[09:31:45.238]                       invokeRestart <- base::invokeRestart
[09:31:45.238]                       is.null <- base::is.null
[09:31:45.238]                       muffled <- FALSE
[09:31:45.238]                       if (inherits(cond, "message")) {
[09:31:45.238]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.238]                         if (muffled) 
[09:31:45.238]                           invokeRestart("muffleMessage")
[09:31:45.238]                       }
[09:31:45.238]                       else if (inherits(cond, "warning")) {
[09:31:45.238]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.238]                         if (muffled) 
[09:31:45.238]                           invokeRestart("muffleWarning")
[09:31:45.238]                       }
[09:31:45.238]                       else if (inherits(cond, "condition")) {
[09:31:45.238]                         if (!is.null(pattern)) {
[09:31:45.238]                           computeRestarts <- base::computeRestarts
[09:31:45.238]                           grepl <- base::grepl
[09:31:45.238]                           restarts <- computeRestarts(cond)
[09:31:45.238]                           for (restart in restarts) {
[09:31:45.238]                             name <- restart$name
[09:31:45.238]                             if (is.null(name)) 
[09:31:45.238]                               next
[09:31:45.238]                             if (!grepl(pattern, name)) 
[09:31:45.238]                               next
[09:31:45.238]                             invokeRestart(restart)
[09:31:45.238]                             muffled <- TRUE
[09:31:45.238]                             break
[09:31:45.238]                           }
[09:31:45.238]                         }
[09:31:45.238]                       }
[09:31:45.238]                       invisible(muffled)
[09:31:45.238]                     }
[09:31:45.238]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.238]                   }
[09:31:45.238]                 }
[09:31:45.238]             }
[09:31:45.238]         }))
[09:31:45.238]     }, error = function(ex) {
[09:31:45.238]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:45.238]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.238]                 ...future.rng), started = ...future.startTime, 
[09:31:45.238]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:45.238]             version = "1.8"), class = "FutureResult")
[09:31:45.238]     }, finally = {
[09:31:45.238]         if (!identical(...future.workdir, getwd())) 
[09:31:45.238]             setwd(...future.workdir)
[09:31:45.238]         {
[09:31:45.238]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:45.238]                 ...future.oldOptions$nwarnings <- NULL
[09:31:45.238]             }
[09:31:45.238]             base::options(...future.oldOptions)
[09:31:45.238]             if (.Platform$OS.type == "windows") {
[09:31:45.238]                 old_names <- names(...future.oldEnvVars)
[09:31:45.238]                 envs <- base::Sys.getenv()
[09:31:45.238]                 names <- names(envs)
[09:31:45.238]                 common <- intersect(names, old_names)
[09:31:45.238]                 added <- setdiff(names, old_names)
[09:31:45.238]                 removed <- setdiff(old_names, names)
[09:31:45.238]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:45.238]                   envs[common]]
[09:31:45.238]                 NAMES <- toupper(changed)
[09:31:45.238]                 args <- list()
[09:31:45.238]                 for (kk in seq_along(NAMES)) {
[09:31:45.238]                   name <- changed[[kk]]
[09:31:45.238]                   NAME <- NAMES[[kk]]
[09:31:45.238]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.238]                     next
[09:31:45.238]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.238]                 }
[09:31:45.238]                 NAMES <- toupper(added)
[09:31:45.238]                 for (kk in seq_along(NAMES)) {
[09:31:45.238]                   name <- added[[kk]]
[09:31:45.238]                   NAME <- NAMES[[kk]]
[09:31:45.238]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.238]                     next
[09:31:45.238]                   args[[name]] <- ""
[09:31:45.238]                 }
[09:31:45.238]                 NAMES <- toupper(removed)
[09:31:45.238]                 for (kk in seq_along(NAMES)) {
[09:31:45.238]                   name <- removed[[kk]]
[09:31:45.238]                   NAME <- NAMES[[kk]]
[09:31:45.238]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.238]                     next
[09:31:45.238]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.238]                 }
[09:31:45.238]                 if (length(args) > 0) 
[09:31:45.238]                   base::do.call(base::Sys.setenv, args = args)
[09:31:45.238]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:45.238]             }
[09:31:45.238]             else {
[09:31:45.238]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:45.238]             }
[09:31:45.238]             {
[09:31:45.238]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:45.238]                   0L) {
[09:31:45.238]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:45.238]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:45.238]                   base::options(opts)
[09:31:45.238]                 }
[09:31:45.238]                 {
[09:31:45.238]                   {
[09:31:45.238]                     NULL
[09:31:45.238]                     RNGkind("Mersenne-Twister")
[09:31:45.238]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:45.238]                       inherits = FALSE)
[09:31:45.238]                   }
[09:31:45.238]                   options(future.plan = NULL)
[09:31:45.238]                   if (is.na(NA_character_)) 
[09:31:45.238]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.238]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:45.238]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:45.238]                     .init = FALSE)
[09:31:45.238]                 }
[09:31:45.238]             }
[09:31:45.238]         }
[09:31:45.238]     })
[09:31:45.238]     if (TRUE) {
[09:31:45.238]         base::sink(type = "output", split = FALSE)
[09:31:45.238]         if (TRUE) {
[09:31:45.238]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:45.238]         }
[09:31:45.238]         else {
[09:31:45.238]             ...future.result["stdout"] <- base::list(NULL)
[09:31:45.238]         }
[09:31:45.238]         base::close(...future.stdout)
[09:31:45.238]         ...future.stdout <- NULL
[09:31:45.238]     }
[09:31:45.238]     ...future.result$conditions <- ...future.conditions
[09:31:45.238]     ...future.result$finished <- base::Sys.time()
[09:31:45.238]     ...future.result
[09:31:45.238] }
[09:31:45.239] assign_globals() ...
[09:31:45.239] List of 1
[09:31:45.239]  $ ii: int 3
[09:31:45.239]  - attr(*, "where")=List of 1
[09:31:45.239]   ..$ ii:<environment: R_EmptyEnv> 
[09:31:45.239]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:31:45.239]  - attr(*, "resolved")= logi FALSE
[09:31:45.239]  - attr(*, "total_size")= num 56
[09:31:45.241] - copied ‘ii’ to environment
[09:31:45.242] assign_globals() ... done
[09:31:45.242] plan(): Setting new future strategy stack:
[09:31:45.242] List of future strategies:
[09:31:45.242] 1. sequential:
[09:31:45.242]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:45.242]    - tweaked: FALSE
[09:31:45.242]    - call: NULL
[09:31:45.242] plan(): nbrOfWorkers() = 1
[09:31:45.243] plan(): Setting new future strategy stack:
[09:31:45.243] List of future strategies:
[09:31:45.243] 1. multicore:
[09:31:45.243]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:45.243]    - tweaked: FALSE
[09:31:45.243]    - call: plan(multicore)
[09:31:45.246] plan(): nbrOfWorkers() = 1
[09:31:45.246] SequentialFuture started (and completed)
 - Creating multicore future #4 ...
[09:31:45.250] getGlobalsAndPackages() ...
[09:31:45.250] Searching for globals...
[09:31:45.252] - globals found: [2] ‘{’, ‘ii’
[09:31:45.252] Searching for globals ... DONE
[09:31:45.252] Resolving globals: FALSE
[09:31:45.252] The total size of the 1 globals is 56 bytes (56 bytes)
[09:31:45.253] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[09:31:45.253] - globals: [1] ‘ii’
[09:31:45.253] 
[09:31:45.253] getGlobalsAndPackages() ... DONE
[09:31:45.253] Packages needed by the future expression (n = 0): <none>
[09:31:45.253] Packages needed by future strategies (n = 0): <none>
[09:31:45.254] {
[09:31:45.254]     {
[09:31:45.254]         {
[09:31:45.254]             ...future.startTime <- base::Sys.time()
[09:31:45.254]             {
[09:31:45.254]                 {
[09:31:45.254]                   {
[09:31:45.254]                     base::local({
[09:31:45.254]                       has_future <- base::requireNamespace("future", 
[09:31:45.254]                         quietly = TRUE)
[09:31:45.254]                       if (has_future) {
[09:31:45.254]                         ns <- base::getNamespace("future")
[09:31:45.254]                         version <- ns[[".package"]][["version"]]
[09:31:45.254]                         if (is.null(version)) 
[09:31:45.254]                           version <- utils::packageVersion("future")
[09:31:45.254]                       }
[09:31:45.254]                       else {
[09:31:45.254]                         version <- NULL
[09:31:45.254]                       }
[09:31:45.254]                       if (!has_future || version < "1.8.0") {
[09:31:45.254]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:45.254]                           "", base::R.version$version.string), 
[09:31:45.254]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:45.254]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:45.254]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:45.254]                             "release", "version")], collapse = " "), 
[09:31:45.254]                           hostname = base::Sys.info()[["nodename"]])
[09:31:45.254]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:45.254]                           info)
[09:31:45.254]                         info <- base::paste(info, collapse = "; ")
[09:31:45.254]                         if (!has_future) {
[09:31:45.254]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:45.254]                             info)
[09:31:45.254]                         }
[09:31:45.254]                         else {
[09:31:45.254]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:45.254]                             info, version)
[09:31:45.254]                         }
[09:31:45.254]                         base::stop(msg)
[09:31:45.254]                       }
[09:31:45.254]                     })
[09:31:45.254]                   }
[09:31:45.254]                   ...future.strategy.old <- future::plan("list")
[09:31:45.254]                   options(future.plan = NULL)
[09:31:45.254]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.254]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:45.254]                 }
[09:31:45.254]                 ...future.workdir <- getwd()
[09:31:45.254]             }
[09:31:45.254]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:45.254]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:45.254]         }
[09:31:45.254]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:45.254]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:45.254]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:45.254]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:45.254]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:45.254]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:45.254]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:45.254]             base::names(...future.oldOptions))
[09:31:45.254]     }
[09:31:45.254]     if (FALSE) {
[09:31:45.254]     }
[09:31:45.254]     else {
[09:31:45.254]         if (TRUE) {
[09:31:45.254]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:45.254]                 open = "w")
[09:31:45.254]         }
[09:31:45.254]         else {
[09:31:45.254]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:45.254]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:45.254]         }
[09:31:45.254]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:45.254]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:45.254]             base::sink(type = "output", split = FALSE)
[09:31:45.254]             base::close(...future.stdout)
[09:31:45.254]         }, add = TRUE)
[09:31:45.254]     }
[09:31:45.254]     ...future.frame <- base::sys.nframe()
[09:31:45.254]     ...future.conditions <- base::list()
[09:31:45.254]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:45.254]     if (FALSE) {
[09:31:45.254]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:45.254]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:45.254]     }
[09:31:45.254]     ...future.result <- base::tryCatch({
[09:31:45.254]         base::withCallingHandlers({
[09:31:45.254]             ...future.value <- base::withVisible(base::local({
[09:31:45.254]                 ii
[09:31:45.254]             }))
[09:31:45.254]             future::FutureResult(value = ...future.value$value, 
[09:31:45.254]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.254]                   ...future.rng), globalenv = if (FALSE) 
[09:31:45.254]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:45.254]                     ...future.globalenv.names))
[09:31:45.254]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:45.254]         }, condition = base::local({
[09:31:45.254]             c <- base::c
[09:31:45.254]             inherits <- base::inherits
[09:31:45.254]             invokeRestart <- base::invokeRestart
[09:31:45.254]             length <- base::length
[09:31:45.254]             list <- base::list
[09:31:45.254]             seq.int <- base::seq.int
[09:31:45.254]             signalCondition <- base::signalCondition
[09:31:45.254]             sys.calls <- base::sys.calls
[09:31:45.254]             `[[` <- base::`[[`
[09:31:45.254]             `+` <- base::`+`
[09:31:45.254]             `<<-` <- base::`<<-`
[09:31:45.254]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:45.254]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:45.254]                   3L)]
[09:31:45.254]             }
[09:31:45.254]             function(cond) {
[09:31:45.254]                 is_error <- inherits(cond, "error")
[09:31:45.254]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:45.254]                   NULL)
[09:31:45.254]                 if (is_error) {
[09:31:45.254]                   sessionInformation <- function() {
[09:31:45.254]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:45.254]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:45.254]                       search = base::search(), system = base::Sys.info())
[09:31:45.254]                   }
[09:31:45.254]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.254]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:45.254]                     cond$call), session = sessionInformation(), 
[09:31:45.254]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:45.254]                   signalCondition(cond)
[09:31:45.254]                 }
[09:31:45.254]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:45.254]                 "immediateCondition"))) {
[09:31:45.254]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:45.254]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.254]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:45.254]                   if (TRUE && !signal) {
[09:31:45.254]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.254]                     {
[09:31:45.254]                       inherits <- base::inherits
[09:31:45.254]                       invokeRestart <- base::invokeRestart
[09:31:45.254]                       is.null <- base::is.null
[09:31:45.254]                       muffled <- FALSE
[09:31:45.254]                       if (inherits(cond, "message")) {
[09:31:45.254]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.254]                         if (muffled) 
[09:31:45.254]                           invokeRestart("muffleMessage")
[09:31:45.254]                       }
[09:31:45.254]                       else if (inherits(cond, "warning")) {
[09:31:45.254]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.254]                         if (muffled) 
[09:31:45.254]                           invokeRestart("muffleWarning")
[09:31:45.254]                       }
[09:31:45.254]                       else if (inherits(cond, "condition")) {
[09:31:45.254]                         if (!is.null(pattern)) {
[09:31:45.254]                           computeRestarts <- base::computeRestarts
[09:31:45.254]                           grepl <- base::grepl
[09:31:45.254]                           restarts <- computeRestarts(cond)
[09:31:45.254]                           for (restart in restarts) {
[09:31:45.254]                             name <- restart$name
[09:31:45.254]                             if (is.null(name)) 
[09:31:45.254]                               next
[09:31:45.254]                             if (!grepl(pattern, name)) 
[09:31:45.254]                               next
[09:31:45.254]                             invokeRestart(restart)
[09:31:45.254]                             muffled <- TRUE
[09:31:45.254]                             break
[09:31:45.254]                           }
[09:31:45.254]                         }
[09:31:45.254]                       }
[09:31:45.254]                       invisible(muffled)
[09:31:45.254]                     }
[09:31:45.254]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.254]                   }
[09:31:45.254]                 }
[09:31:45.254]                 else {
[09:31:45.254]                   if (TRUE) {
[09:31:45.254]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.254]                     {
[09:31:45.254]                       inherits <- base::inherits
[09:31:45.254]                       invokeRestart <- base::invokeRestart
[09:31:45.254]                       is.null <- base::is.null
[09:31:45.254]                       muffled <- FALSE
[09:31:45.254]                       if (inherits(cond, "message")) {
[09:31:45.254]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.254]                         if (muffled) 
[09:31:45.254]                           invokeRestart("muffleMessage")
[09:31:45.254]                       }
[09:31:45.254]                       else if (inherits(cond, "warning")) {
[09:31:45.254]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.254]                         if (muffled) 
[09:31:45.254]                           invokeRestart("muffleWarning")
[09:31:45.254]                       }
[09:31:45.254]                       else if (inherits(cond, "condition")) {
[09:31:45.254]                         if (!is.null(pattern)) {
[09:31:45.254]                           computeRestarts <- base::computeRestarts
[09:31:45.254]                           grepl <- base::grepl
[09:31:45.254]                           restarts <- computeRestarts(cond)
[09:31:45.254]                           for (restart in restarts) {
[09:31:45.254]                             name <- restart$name
[09:31:45.254]                             if (is.null(name)) 
[09:31:45.254]                               next
[09:31:45.254]                             if (!grepl(pattern, name)) 
[09:31:45.254]                               next
[09:31:45.254]                             invokeRestart(restart)
[09:31:45.254]                             muffled <- TRUE
[09:31:45.254]                             break
[09:31:45.254]                           }
[09:31:45.254]                         }
[09:31:45.254]                       }
[09:31:45.254]                       invisible(muffled)
[09:31:45.254]                     }
[09:31:45.254]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.254]                   }
[09:31:45.254]                 }
[09:31:45.254]             }
[09:31:45.254]         }))
[09:31:45.254]     }, error = function(ex) {
[09:31:45.254]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:45.254]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.254]                 ...future.rng), started = ...future.startTime, 
[09:31:45.254]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:45.254]             version = "1.8"), class = "FutureResult")
[09:31:45.254]     }, finally = {
[09:31:45.254]         if (!identical(...future.workdir, getwd())) 
[09:31:45.254]             setwd(...future.workdir)
[09:31:45.254]         {
[09:31:45.254]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:45.254]                 ...future.oldOptions$nwarnings <- NULL
[09:31:45.254]             }
[09:31:45.254]             base::options(...future.oldOptions)
[09:31:45.254]             if (.Platform$OS.type == "windows") {
[09:31:45.254]                 old_names <- names(...future.oldEnvVars)
[09:31:45.254]                 envs <- base::Sys.getenv()
[09:31:45.254]                 names <- names(envs)
[09:31:45.254]                 common <- intersect(names, old_names)
[09:31:45.254]                 added <- setdiff(names, old_names)
[09:31:45.254]                 removed <- setdiff(old_names, names)
[09:31:45.254]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:45.254]                   envs[common]]
[09:31:45.254]                 NAMES <- toupper(changed)
[09:31:45.254]                 args <- list()
[09:31:45.254]                 for (kk in seq_along(NAMES)) {
[09:31:45.254]                   name <- changed[[kk]]
[09:31:45.254]                   NAME <- NAMES[[kk]]
[09:31:45.254]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.254]                     next
[09:31:45.254]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.254]                 }
[09:31:45.254]                 NAMES <- toupper(added)
[09:31:45.254]                 for (kk in seq_along(NAMES)) {
[09:31:45.254]                   name <- added[[kk]]
[09:31:45.254]                   NAME <- NAMES[[kk]]
[09:31:45.254]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.254]                     next
[09:31:45.254]                   args[[name]] <- ""
[09:31:45.254]                 }
[09:31:45.254]                 NAMES <- toupper(removed)
[09:31:45.254]                 for (kk in seq_along(NAMES)) {
[09:31:45.254]                   name <- removed[[kk]]
[09:31:45.254]                   NAME <- NAMES[[kk]]
[09:31:45.254]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.254]                     next
[09:31:45.254]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.254]                 }
[09:31:45.254]                 if (length(args) > 0) 
[09:31:45.254]                   base::do.call(base::Sys.setenv, args = args)
[09:31:45.254]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:45.254]             }
[09:31:45.254]             else {
[09:31:45.254]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:45.254]             }
[09:31:45.254]             {
[09:31:45.254]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:45.254]                   0L) {
[09:31:45.254]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:45.254]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:45.254]                   base::options(opts)
[09:31:45.254]                 }
[09:31:45.254]                 {
[09:31:45.254]                   {
[09:31:45.254]                     NULL
[09:31:45.254]                     RNGkind("Mersenne-Twister")
[09:31:45.254]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:45.254]                       inherits = FALSE)
[09:31:45.254]                   }
[09:31:45.254]                   options(future.plan = NULL)
[09:31:45.254]                   if (is.na(NA_character_)) 
[09:31:45.254]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.254]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:45.254]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:45.254]                     .init = FALSE)
[09:31:45.254]                 }
[09:31:45.254]             }
[09:31:45.254]         }
[09:31:45.254]     })
[09:31:45.254]     if (TRUE) {
[09:31:45.254]         base::sink(type = "output", split = FALSE)
[09:31:45.254]         if (TRUE) {
[09:31:45.254]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:45.254]         }
[09:31:45.254]         else {
[09:31:45.254]             ...future.result["stdout"] <- base::list(NULL)
[09:31:45.254]         }
[09:31:45.254]         base::close(...future.stdout)
[09:31:45.254]         ...future.stdout <- NULL
[09:31:45.254]     }
[09:31:45.254]     ...future.result$conditions <- ...future.conditions
[09:31:45.254]     ...future.result$finished <- base::Sys.time()
[09:31:45.254]     ...future.result
[09:31:45.254] }
[09:31:45.255] assign_globals() ...
[09:31:45.255] List of 1
[09:31:45.255]  $ ii: int 4
[09:31:45.255]  - attr(*, "where")=List of 1
[09:31:45.255]   ..$ ii:<environment: R_EmptyEnv> 
[09:31:45.255]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:31:45.255]  - attr(*, "resolved")= logi FALSE
[09:31:45.255]  - attr(*, "total_size")= num 56
[09:31:45.257] - copied ‘ii’ to environment
[09:31:45.258] assign_globals() ... done
[09:31:45.258] plan(): Setting new future strategy stack:
[09:31:45.258] List of future strategies:
[09:31:45.258] 1. sequential:
[09:31:45.258]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:45.258]    - tweaked: FALSE
[09:31:45.258]    - call: NULL
[09:31:45.258] plan(): nbrOfWorkers() = 1
[09:31:45.259] plan(): Setting new future strategy stack:
[09:31:45.259] List of future strategies:
[09:31:45.259] 1. multicore:
[09:31:45.259]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:45.259]    - tweaked: FALSE
[09:31:45.259]    - call: plan(multicore)
[09:31:45.262] plan(): nbrOfWorkers() = 1
[09:31:45.262] SequentialFuture started (and completed)
 - Resolving 4 multicore futures
*** multicore(..., globals = TRUE) and errors
[09:31:45.266] getGlobalsAndPackages() ...
[09:31:45.266] Searching for globals...
[09:31:45.267] - globals found: [2] ‘{’, ‘stop’
[09:31:45.267] Searching for globals ... DONE
[09:31:45.267] Resolving globals: FALSE
[09:31:45.267] 
[09:31:45.268] 
[09:31:45.268] getGlobalsAndPackages() ... DONE
[09:31:45.268] Packages needed by the future expression (n = 0): <none>
[09:31:45.268] Packages needed by future strategies (n = 0): <none>
[09:31:45.268] {
[09:31:45.268]     {
[09:31:45.268]         {
[09:31:45.268]             ...future.startTime <- base::Sys.time()
[09:31:45.268]             {
[09:31:45.268]                 {
[09:31:45.268]                   {
[09:31:45.268]                     base::local({
[09:31:45.268]                       has_future <- base::requireNamespace("future", 
[09:31:45.268]                         quietly = TRUE)
[09:31:45.268]                       if (has_future) {
[09:31:45.268]                         ns <- base::getNamespace("future")
[09:31:45.268]                         version <- ns[[".package"]][["version"]]
[09:31:45.268]                         if (is.null(version)) 
[09:31:45.268]                           version <- utils::packageVersion("future")
[09:31:45.268]                       }
[09:31:45.268]                       else {
[09:31:45.268]                         version <- NULL
[09:31:45.268]                       }
[09:31:45.268]                       if (!has_future || version < "1.8.0") {
[09:31:45.268]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:45.268]                           "", base::R.version$version.string), 
[09:31:45.268]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:45.268]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:45.268]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:45.268]                             "release", "version")], collapse = " "), 
[09:31:45.268]                           hostname = base::Sys.info()[["nodename"]])
[09:31:45.268]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:45.268]                           info)
[09:31:45.268]                         info <- base::paste(info, collapse = "; ")
[09:31:45.268]                         if (!has_future) {
[09:31:45.268]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:45.268]                             info)
[09:31:45.268]                         }
[09:31:45.268]                         else {
[09:31:45.268]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:45.268]                             info, version)
[09:31:45.268]                         }
[09:31:45.268]                         base::stop(msg)
[09:31:45.268]                       }
[09:31:45.268]                     })
[09:31:45.268]                   }
[09:31:45.268]                   ...future.strategy.old <- future::plan("list")
[09:31:45.268]                   options(future.plan = NULL)
[09:31:45.268]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.268]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:45.268]                 }
[09:31:45.268]                 ...future.workdir <- getwd()
[09:31:45.268]             }
[09:31:45.268]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:45.268]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:45.268]         }
[09:31:45.268]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:45.268]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:45.268]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:45.268]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:45.268]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:45.268]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:45.268]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:45.268]             base::names(...future.oldOptions))
[09:31:45.268]     }
[09:31:45.268]     if (FALSE) {
[09:31:45.268]     }
[09:31:45.268]     else {
[09:31:45.268]         if (TRUE) {
[09:31:45.268]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:45.268]                 open = "w")
[09:31:45.268]         }
[09:31:45.268]         else {
[09:31:45.268]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:45.268]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:45.268]         }
[09:31:45.268]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:45.268]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:45.268]             base::sink(type = "output", split = FALSE)
[09:31:45.268]             base::close(...future.stdout)
[09:31:45.268]         }, add = TRUE)
[09:31:45.268]     }
[09:31:45.268]     ...future.frame <- base::sys.nframe()
[09:31:45.268]     ...future.conditions <- base::list()
[09:31:45.268]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:45.268]     if (FALSE) {
[09:31:45.268]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:45.268]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:45.268]     }
[09:31:45.268]     ...future.result <- base::tryCatch({
[09:31:45.268]         base::withCallingHandlers({
[09:31:45.268]             ...future.value <- base::withVisible(base::local({
[09:31:45.268]                 stop("Whoops!")
[09:31:45.268]                 1
[09:31:45.268]             }))
[09:31:45.268]             future::FutureResult(value = ...future.value$value, 
[09:31:45.268]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.268]                   ...future.rng), globalenv = if (FALSE) 
[09:31:45.268]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:45.268]                     ...future.globalenv.names))
[09:31:45.268]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:45.268]         }, condition = base::local({
[09:31:45.268]             c <- base::c
[09:31:45.268]             inherits <- base::inherits
[09:31:45.268]             invokeRestart <- base::invokeRestart
[09:31:45.268]             length <- base::length
[09:31:45.268]             list <- base::list
[09:31:45.268]             seq.int <- base::seq.int
[09:31:45.268]             signalCondition <- base::signalCondition
[09:31:45.268]             sys.calls <- base::sys.calls
[09:31:45.268]             `[[` <- base::`[[`
[09:31:45.268]             `+` <- base::`+`
[09:31:45.268]             `<<-` <- base::`<<-`
[09:31:45.268]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:45.268]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:45.268]                   3L)]
[09:31:45.268]             }
[09:31:45.268]             function(cond) {
[09:31:45.268]                 is_error <- inherits(cond, "error")
[09:31:45.268]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:45.268]                   NULL)
[09:31:45.268]                 if (is_error) {
[09:31:45.268]                   sessionInformation <- function() {
[09:31:45.268]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:45.268]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:45.268]                       search = base::search(), system = base::Sys.info())
[09:31:45.268]                   }
[09:31:45.268]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.268]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:45.268]                     cond$call), session = sessionInformation(), 
[09:31:45.268]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:45.268]                   signalCondition(cond)
[09:31:45.268]                 }
[09:31:45.268]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:45.268]                 "immediateCondition"))) {
[09:31:45.268]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:45.268]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.268]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:45.268]                   if (TRUE && !signal) {
[09:31:45.268]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.268]                     {
[09:31:45.268]                       inherits <- base::inherits
[09:31:45.268]                       invokeRestart <- base::invokeRestart
[09:31:45.268]                       is.null <- base::is.null
[09:31:45.268]                       muffled <- FALSE
[09:31:45.268]                       if (inherits(cond, "message")) {
[09:31:45.268]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.268]                         if (muffled) 
[09:31:45.268]                           invokeRestart("muffleMessage")
[09:31:45.268]                       }
[09:31:45.268]                       else if (inherits(cond, "warning")) {
[09:31:45.268]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.268]                         if (muffled) 
[09:31:45.268]                           invokeRestart("muffleWarning")
[09:31:45.268]                       }
[09:31:45.268]                       else if (inherits(cond, "condition")) {
[09:31:45.268]                         if (!is.null(pattern)) {
[09:31:45.268]                           computeRestarts <- base::computeRestarts
[09:31:45.268]                           grepl <- base::grepl
[09:31:45.268]                           restarts <- computeRestarts(cond)
[09:31:45.268]                           for (restart in restarts) {
[09:31:45.268]                             name <- restart$name
[09:31:45.268]                             if (is.null(name)) 
[09:31:45.268]                               next
[09:31:45.268]                             if (!grepl(pattern, name)) 
[09:31:45.268]                               next
[09:31:45.268]                             invokeRestart(restart)
[09:31:45.268]                             muffled <- TRUE
[09:31:45.268]                             break
[09:31:45.268]                           }
[09:31:45.268]                         }
[09:31:45.268]                       }
[09:31:45.268]                       invisible(muffled)
[09:31:45.268]                     }
[09:31:45.268]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.268]                   }
[09:31:45.268]                 }
[09:31:45.268]                 else {
[09:31:45.268]                   if (TRUE) {
[09:31:45.268]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.268]                     {
[09:31:45.268]                       inherits <- base::inherits
[09:31:45.268]                       invokeRestart <- base::invokeRestart
[09:31:45.268]                       is.null <- base::is.null
[09:31:45.268]                       muffled <- FALSE
[09:31:45.268]                       if (inherits(cond, "message")) {
[09:31:45.268]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.268]                         if (muffled) 
[09:31:45.268]                           invokeRestart("muffleMessage")
[09:31:45.268]                       }
[09:31:45.268]                       else if (inherits(cond, "warning")) {
[09:31:45.268]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.268]                         if (muffled) 
[09:31:45.268]                           invokeRestart("muffleWarning")
[09:31:45.268]                       }
[09:31:45.268]                       else if (inherits(cond, "condition")) {
[09:31:45.268]                         if (!is.null(pattern)) {
[09:31:45.268]                           computeRestarts <- base::computeRestarts
[09:31:45.268]                           grepl <- base::grepl
[09:31:45.268]                           restarts <- computeRestarts(cond)
[09:31:45.268]                           for (restart in restarts) {
[09:31:45.268]                             name <- restart$name
[09:31:45.268]                             if (is.null(name)) 
[09:31:45.268]                               next
[09:31:45.268]                             if (!grepl(pattern, name)) 
[09:31:45.268]                               next
[09:31:45.268]                             invokeRestart(restart)
[09:31:45.268]                             muffled <- TRUE
[09:31:45.268]                             break
[09:31:45.268]                           }
[09:31:45.268]                         }
[09:31:45.268]                       }
[09:31:45.268]                       invisible(muffled)
[09:31:45.268]                     }
[09:31:45.268]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.268]                   }
[09:31:45.268]                 }
[09:31:45.268]             }
[09:31:45.268]         }))
[09:31:45.268]     }, error = function(ex) {
[09:31:45.268]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:45.268]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.268]                 ...future.rng), started = ...future.startTime, 
[09:31:45.268]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:45.268]             version = "1.8"), class = "FutureResult")
[09:31:45.268]     }, finally = {
[09:31:45.268]         if (!identical(...future.workdir, getwd())) 
[09:31:45.268]             setwd(...future.workdir)
[09:31:45.268]         {
[09:31:45.268]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:45.268]                 ...future.oldOptions$nwarnings <- NULL
[09:31:45.268]             }
[09:31:45.268]             base::options(...future.oldOptions)
[09:31:45.268]             if (.Platform$OS.type == "windows") {
[09:31:45.268]                 old_names <- names(...future.oldEnvVars)
[09:31:45.268]                 envs <- base::Sys.getenv()
[09:31:45.268]                 names <- names(envs)
[09:31:45.268]                 common <- intersect(names, old_names)
[09:31:45.268]                 added <- setdiff(names, old_names)
[09:31:45.268]                 removed <- setdiff(old_names, names)
[09:31:45.268]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:45.268]                   envs[common]]
[09:31:45.268]                 NAMES <- toupper(changed)
[09:31:45.268]                 args <- list()
[09:31:45.268]                 for (kk in seq_along(NAMES)) {
[09:31:45.268]                   name <- changed[[kk]]
[09:31:45.268]                   NAME <- NAMES[[kk]]
[09:31:45.268]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.268]                     next
[09:31:45.268]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.268]                 }
[09:31:45.268]                 NAMES <- toupper(added)
[09:31:45.268]                 for (kk in seq_along(NAMES)) {
[09:31:45.268]                   name <- added[[kk]]
[09:31:45.268]                   NAME <- NAMES[[kk]]
[09:31:45.268]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.268]                     next
[09:31:45.268]                   args[[name]] <- ""
[09:31:45.268]                 }
[09:31:45.268]                 NAMES <- toupper(removed)
[09:31:45.268]                 for (kk in seq_along(NAMES)) {
[09:31:45.268]                   name <- removed[[kk]]
[09:31:45.268]                   NAME <- NAMES[[kk]]
[09:31:45.268]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.268]                     next
[09:31:45.268]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.268]                 }
[09:31:45.268]                 if (length(args) > 0) 
[09:31:45.268]                   base::do.call(base::Sys.setenv, args = args)
[09:31:45.268]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:45.268]             }
[09:31:45.268]             else {
[09:31:45.268]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:45.268]             }
[09:31:45.268]             {
[09:31:45.268]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:45.268]                   0L) {
[09:31:45.268]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:45.268]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:45.268]                   base::options(opts)
[09:31:45.268]                 }
[09:31:45.268]                 {
[09:31:45.268]                   {
[09:31:45.268]                     NULL
[09:31:45.268]                     RNGkind("Mersenne-Twister")
[09:31:45.268]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:45.268]                       inherits = FALSE)
[09:31:45.268]                   }
[09:31:45.268]                   options(future.plan = NULL)
[09:31:45.268]                   if (is.na(NA_character_)) 
[09:31:45.268]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.268]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:45.268]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:45.268]                     .init = FALSE)
[09:31:45.268]                 }
[09:31:45.268]             }
[09:31:45.268]         }
[09:31:45.268]     })
[09:31:45.268]     if (TRUE) {
[09:31:45.268]         base::sink(type = "output", split = FALSE)
[09:31:45.268]         if (TRUE) {
[09:31:45.268]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:45.268]         }
[09:31:45.268]         else {
[09:31:45.268]             ...future.result["stdout"] <- base::list(NULL)
[09:31:45.268]         }
[09:31:45.268]         base::close(...future.stdout)
[09:31:45.268]         ...future.stdout <- NULL
[09:31:45.268]     }
[09:31:45.268]     ...future.result$conditions <- ...future.conditions
[09:31:45.268]     ...future.result$finished <- base::Sys.time()
[09:31:45.268]     ...future.result
[09:31:45.268] }
[09:31:45.270] plan(): Setting new future strategy stack:
[09:31:45.270] List of future strategies:
[09:31:45.270] 1. sequential:
[09:31:45.270]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:45.270]    - tweaked: FALSE
[09:31:45.270]    - call: NULL
[09:31:45.271] plan(): nbrOfWorkers() = 1
[09:31:45.271] plan(): Setting new future strategy stack:
[09:31:45.271] List of future strategies:
[09:31:45.271] 1. multicore:
[09:31:45.271]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:45.271]    - tweaked: FALSE
[09:31:45.271]    - call: plan(multicore)
[09:31:45.275] plan(): nbrOfWorkers() = 1
[09:31:45.275] SequentialFuture started (and completed)
[09:31:45.275] signalConditions() ...
[09:31:45.275]  - include = ‘immediateCondition’
[09:31:45.275]  - exclude = 
[09:31:45.275]  - resignal = FALSE
[09:31:45.275]  - Number of conditions: 1
[09:31:45.275] signalConditions() ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    stop("Whoops!")
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 0 bytes of class ‘NULL’
Conditions captured: [n=1] ‘simpleError’
Early signaling: FALSE
Owner process: 4dab417a-2fdd-f8a2-2e0a-d701ed5fedef
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:45.276] signalConditions() ...
[09:31:45.276]  - include = ‘immediateCondition’
[09:31:45.276]  - exclude = 
[09:31:45.276]  - resignal = FALSE
[09:31:45.276]  - Number of conditions: 1
[09:31:45.276] signalConditions() ... done
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[09:31:45.277] signalConditions() ...
[09:31:45.277]  - include = ‘immediateCondition’
[09:31:45.277]  - exclude = 
[09:31:45.277]  - resignal = FALSE
[09:31:45.277]  - Number of conditions: 1
[09:31:45.277] signalConditions() ... done
[09:31:45.277] Future state: ‘finished’
[09:31:45.277] signalConditions() ...
[09:31:45.277]  - include = ‘condition’
[09:31:45.277]  - exclude = ‘immediateCondition’
[09:31:45.278]  - resignal = TRUE
[09:31:45.278]  - Number of conditions: 1
[09:31:45.278]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[09:31:45.278] signalConditions() ... done
[1] "Error in eval(quote({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[09:31:45.278] signalConditions() ...
[09:31:45.278]  - include = ‘immediateCondition’
[09:31:45.278]  - exclude = 
[09:31:45.278]  - resignal = FALSE
[09:31:45.278]  - Number of conditions: 1
[09:31:45.279] signalConditions() ... done
[09:31:45.279] Future state: ‘finished’
[09:31:45.279] signalConditions() ...
[09:31:45.279]  - include = ‘condition’
[09:31:45.279]  - exclude = ‘immediateCondition’
[09:31:45.279]  - resignal = TRUE
[09:31:45.279]  - Number of conditions: 1
[09:31:45.279]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[09:31:45.279] signalConditions() ... done
[1] "Error in eval(quote({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[09:31:45.283] getGlobalsAndPackages() ...
[09:31:45.283] Searching for globals...
[09:31:45.284] - globals found: [5] ‘{’, ‘stop’, ‘structure’, ‘list’, ‘c’
[09:31:45.284] Searching for globals ... DONE
[09:31:45.284] Resolving globals: FALSE
[09:31:45.284] 
[09:31:45.284] 
[09:31:45.284] getGlobalsAndPackages() ... DONE
[09:31:45.285] Packages needed by the future expression (n = 0): <none>
[09:31:45.285] Packages needed by future strategies (n = 0): <none>
[09:31:45.285] {
[09:31:45.285]     {
[09:31:45.285]         {
[09:31:45.285]             ...future.startTime <- base::Sys.time()
[09:31:45.285]             {
[09:31:45.285]                 {
[09:31:45.285]                   {
[09:31:45.285]                     base::local({
[09:31:45.285]                       has_future <- base::requireNamespace("future", 
[09:31:45.285]                         quietly = TRUE)
[09:31:45.285]                       if (has_future) {
[09:31:45.285]                         ns <- base::getNamespace("future")
[09:31:45.285]                         version <- ns[[".package"]][["version"]]
[09:31:45.285]                         if (is.null(version)) 
[09:31:45.285]                           version <- utils::packageVersion("future")
[09:31:45.285]                       }
[09:31:45.285]                       else {
[09:31:45.285]                         version <- NULL
[09:31:45.285]                       }
[09:31:45.285]                       if (!has_future || version < "1.8.0") {
[09:31:45.285]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:45.285]                           "", base::R.version$version.string), 
[09:31:45.285]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:45.285]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:45.285]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:45.285]                             "release", "version")], collapse = " "), 
[09:31:45.285]                           hostname = base::Sys.info()[["nodename"]])
[09:31:45.285]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:45.285]                           info)
[09:31:45.285]                         info <- base::paste(info, collapse = "; ")
[09:31:45.285]                         if (!has_future) {
[09:31:45.285]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:45.285]                             info)
[09:31:45.285]                         }
[09:31:45.285]                         else {
[09:31:45.285]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:45.285]                             info, version)
[09:31:45.285]                         }
[09:31:45.285]                         base::stop(msg)
[09:31:45.285]                       }
[09:31:45.285]                     })
[09:31:45.285]                   }
[09:31:45.285]                   ...future.strategy.old <- future::plan("list")
[09:31:45.285]                   options(future.plan = NULL)
[09:31:45.285]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.285]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:45.285]                 }
[09:31:45.285]                 ...future.workdir <- getwd()
[09:31:45.285]             }
[09:31:45.285]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:45.285]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:45.285]         }
[09:31:45.285]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:45.285]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:45.285]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:45.285]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:45.285]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:45.285]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:45.285]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:45.285]             base::names(...future.oldOptions))
[09:31:45.285]     }
[09:31:45.285]     if (FALSE) {
[09:31:45.285]     }
[09:31:45.285]     else {
[09:31:45.285]         if (TRUE) {
[09:31:45.285]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:45.285]                 open = "w")
[09:31:45.285]         }
[09:31:45.285]         else {
[09:31:45.285]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:45.285]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:45.285]         }
[09:31:45.285]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:45.285]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:45.285]             base::sink(type = "output", split = FALSE)
[09:31:45.285]             base::close(...future.stdout)
[09:31:45.285]         }, add = TRUE)
[09:31:45.285]     }
[09:31:45.285]     ...future.frame <- base::sys.nframe()
[09:31:45.285]     ...future.conditions <- base::list()
[09:31:45.285]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:45.285]     if (FALSE) {
[09:31:45.285]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:45.285]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:45.285]     }
[09:31:45.285]     ...future.result <- base::tryCatch({
[09:31:45.285]         base::withCallingHandlers({
[09:31:45.285]             ...future.value <- base::withVisible(base::local({
[09:31:45.285]                 stop(structure(list(message = "boom"), class = c("MyError", 
[09:31:45.285]                   "error", "condition")))
[09:31:45.285]             }))
[09:31:45.285]             future::FutureResult(value = ...future.value$value, 
[09:31:45.285]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.285]                   ...future.rng), globalenv = if (FALSE) 
[09:31:45.285]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:45.285]                     ...future.globalenv.names))
[09:31:45.285]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:45.285]         }, condition = base::local({
[09:31:45.285]             c <- base::c
[09:31:45.285]             inherits <- base::inherits
[09:31:45.285]             invokeRestart <- base::invokeRestart
[09:31:45.285]             length <- base::length
[09:31:45.285]             list <- base::list
[09:31:45.285]             seq.int <- base::seq.int
[09:31:45.285]             signalCondition <- base::signalCondition
[09:31:45.285]             sys.calls <- base::sys.calls
[09:31:45.285]             `[[` <- base::`[[`
[09:31:45.285]             `+` <- base::`+`
[09:31:45.285]             `<<-` <- base::`<<-`
[09:31:45.285]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:45.285]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:45.285]                   3L)]
[09:31:45.285]             }
[09:31:45.285]             function(cond) {
[09:31:45.285]                 is_error <- inherits(cond, "error")
[09:31:45.285]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:45.285]                   NULL)
[09:31:45.285]                 if (is_error) {
[09:31:45.285]                   sessionInformation <- function() {
[09:31:45.285]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:45.285]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:45.285]                       search = base::search(), system = base::Sys.info())
[09:31:45.285]                   }
[09:31:45.285]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.285]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:45.285]                     cond$call), session = sessionInformation(), 
[09:31:45.285]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:45.285]                   signalCondition(cond)
[09:31:45.285]                 }
[09:31:45.285]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:45.285]                 "immediateCondition"))) {
[09:31:45.285]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:45.285]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.285]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:45.285]                   if (TRUE && !signal) {
[09:31:45.285]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.285]                     {
[09:31:45.285]                       inherits <- base::inherits
[09:31:45.285]                       invokeRestart <- base::invokeRestart
[09:31:45.285]                       is.null <- base::is.null
[09:31:45.285]                       muffled <- FALSE
[09:31:45.285]                       if (inherits(cond, "message")) {
[09:31:45.285]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.285]                         if (muffled) 
[09:31:45.285]                           invokeRestart("muffleMessage")
[09:31:45.285]                       }
[09:31:45.285]                       else if (inherits(cond, "warning")) {
[09:31:45.285]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.285]                         if (muffled) 
[09:31:45.285]                           invokeRestart("muffleWarning")
[09:31:45.285]                       }
[09:31:45.285]                       else if (inherits(cond, "condition")) {
[09:31:45.285]                         if (!is.null(pattern)) {
[09:31:45.285]                           computeRestarts <- base::computeRestarts
[09:31:45.285]                           grepl <- base::grepl
[09:31:45.285]                           restarts <- computeRestarts(cond)
[09:31:45.285]                           for (restart in restarts) {
[09:31:45.285]                             name <- restart$name
[09:31:45.285]                             if (is.null(name)) 
[09:31:45.285]                               next
[09:31:45.285]                             if (!grepl(pattern, name)) 
[09:31:45.285]                               next
[09:31:45.285]                             invokeRestart(restart)
[09:31:45.285]                             muffled <- TRUE
[09:31:45.285]                             break
[09:31:45.285]                           }
[09:31:45.285]                         }
[09:31:45.285]                       }
[09:31:45.285]                       invisible(muffled)
[09:31:45.285]                     }
[09:31:45.285]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.285]                   }
[09:31:45.285]                 }
[09:31:45.285]                 else {
[09:31:45.285]                   if (TRUE) {
[09:31:45.285]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.285]                     {
[09:31:45.285]                       inherits <- base::inherits
[09:31:45.285]                       invokeRestart <- base::invokeRestart
[09:31:45.285]                       is.null <- base::is.null
[09:31:45.285]                       muffled <- FALSE
[09:31:45.285]                       if (inherits(cond, "message")) {
[09:31:45.285]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.285]                         if (muffled) 
[09:31:45.285]                           invokeRestart("muffleMessage")
[09:31:45.285]                       }
[09:31:45.285]                       else if (inherits(cond, "warning")) {
[09:31:45.285]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.285]                         if (muffled) 
[09:31:45.285]                           invokeRestart("muffleWarning")
[09:31:45.285]                       }
[09:31:45.285]                       else if (inherits(cond, "condition")) {
[09:31:45.285]                         if (!is.null(pattern)) {
[09:31:45.285]                           computeRestarts <- base::computeRestarts
[09:31:45.285]                           grepl <- base::grepl
[09:31:45.285]                           restarts <- computeRestarts(cond)
[09:31:45.285]                           for (restart in restarts) {
[09:31:45.285]                             name <- restart$name
[09:31:45.285]                             if (is.null(name)) 
[09:31:45.285]                               next
[09:31:45.285]                             if (!grepl(pattern, name)) 
[09:31:45.285]                               next
[09:31:45.285]                             invokeRestart(restart)
[09:31:45.285]                             muffled <- TRUE
[09:31:45.285]                             break
[09:31:45.285]                           }
[09:31:45.285]                         }
[09:31:45.285]                       }
[09:31:45.285]                       invisible(muffled)
[09:31:45.285]                     }
[09:31:45.285]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.285]                   }
[09:31:45.285]                 }
[09:31:45.285]             }
[09:31:45.285]         }))
[09:31:45.285]     }, error = function(ex) {
[09:31:45.285]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:45.285]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.285]                 ...future.rng), started = ...future.startTime, 
[09:31:45.285]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:45.285]             version = "1.8"), class = "FutureResult")
[09:31:45.285]     }, finally = {
[09:31:45.285]         if (!identical(...future.workdir, getwd())) 
[09:31:45.285]             setwd(...future.workdir)
[09:31:45.285]         {
[09:31:45.285]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:45.285]                 ...future.oldOptions$nwarnings <- NULL
[09:31:45.285]             }
[09:31:45.285]             base::options(...future.oldOptions)
[09:31:45.285]             if (.Platform$OS.type == "windows") {
[09:31:45.285]                 old_names <- names(...future.oldEnvVars)
[09:31:45.285]                 envs <- base::Sys.getenv()
[09:31:45.285]                 names <- names(envs)
[09:31:45.285]                 common <- intersect(names, old_names)
[09:31:45.285]                 added <- setdiff(names, old_names)
[09:31:45.285]                 removed <- setdiff(old_names, names)
[09:31:45.285]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:45.285]                   envs[common]]
[09:31:45.285]                 NAMES <- toupper(changed)
[09:31:45.285]                 args <- list()
[09:31:45.285]                 for (kk in seq_along(NAMES)) {
[09:31:45.285]                   name <- changed[[kk]]
[09:31:45.285]                   NAME <- NAMES[[kk]]
[09:31:45.285]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.285]                     next
[09:31:45.285]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.285]                 }
[09:31:45.285]                 NAMES <- toupper(added)
[09:31:45.285]                 for (kk in seq_along(NAMES)) {
[09:31:45.285]                   name <- added[[kk]]
[09:31:45.285]                   NAME <- NAMES[[kk]]
[09:31:45.285]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.285]                     next
[09:31:45.285]                   args[[name]] <- ""
[09:31:45.285]                 }
[09:31:45.285]                 NAMES <- toupper(removed)
[09:31:45.285]                 for (kk in seq_along(NAMES)) {
[09:31:45.285]                   name <- removed[[kk]]
[09:31:45.285]                   NAME <- NAMES[[kk]]
[09:31:45.285]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.285]                     next
[09:31:45.285]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.285]                 }
[09:31:45.285]                 if (length(args) > 0) 
[09:31:45.285]                   base::do.call(base::Sys.setenv, args = args)
[09:31:45.285]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:45.285]             }
[09:31:45.285]             else {
[09:31:45.285]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:45.285]             }
[09:31:45.285]             {
[09:31:45.285]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:45.285]                   0L) {
[09:31:45.285]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:45.285]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:45.285]                   base::options(opts)
[09:31:45.285]                 }
[09:31:45.285]                 {
[09:31:45.285]                   {
[09:31:45.285]                     NULL
[09:31:45.285]                     RNGkind("Mersenne-Twister")
[09:31:45.285]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:45.285]                       inherits = FALSE)
[09:31:45.285]                   }
[09:31:45.285]                   options(future.plan = NULL)
[09:31:45.285]                   if (is.na(NA_character_)) 
[09:31:45.285]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.285]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:45.285]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:45.285]                     .init = FALSE)
[09:31:45.285]                 }
[09:31:45.285]             }
[09:31:45.285]         }
[09:31:45.285]     })
[09:31:45.285]     if (TRUE) {
[09:31:45.285]         base::sink(type = "output", split = FALSE)
[09:31:45.285]         if (TRUE) {
[09:31:45.285]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:45.285]         }
[09:31:45.285]         else {
[09:31:45.285]             ...future.result["stdout"] <- base::list(NULL)
[09:31:45.285]         }
[09:31:45.285]         base::close(...future.stdout)
[09:31:45.285]         ...future.stdout <- NULL
[09:31:45.285]     }
[09:31:45.285]     ...future.result$conditions <- ...future.conditions
[09:31:45.285]     ...future.result$finished <- base::Sys.time()
[09:31:45.285]     ...future.result
[09:31:45.285] }
[09:31:45.287] plan(): Setting new future strategy stack:
[09:31:45.287] List of future strategies:
[09:31:45.287] 1. sequential:
[09:31:45.287]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:45.287]    - tweaked: FALSE
[09:31:45.287]    - call: NULL
[09:31:45.287] plan(): nbrOfWorkers() = 1
[09:31:45.288] plan(): Setting new future strategy stack:
[09:31:45.288] List of future strategies:
[09:31:45.288] 1. multicore:
[09:31:45.288]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:45.288]    - tweaked: FALSE
[09:31:45.288]    - call: plan(multicore)
[09:31:45.293] plan(): nbrOfWorkers() = 1
[09:31:45.293] SequentialFuture started (and completed)
[09:31:45.293] signalConditions() ...
[09:31:45.293]  - include = ‘immediateCondition’
[09:31:45.293]  - exclude = 
[09:31:45.293]  - resignal = FALSE
[09:31:45.293]  - Number of conditions: 1
[09:31:45.293] signalConditions() ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    stop(structure(list(message = "boom"), class = c("MyError", 
        "error", "condition")))
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 0 bytes of class ‘NULL’
Conditions captured: [n=1] ‘MyError’
Early signaling: FALSE
Owner process: 4dab417a-2fdd-f8a2-2e0a-d701ed5fedef
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:45.294] signalConditions() ...
[09:31:45.294]  - include = ‘immediateCondition’
[09:31:45.294]  - exclude = 
[09:31:45.294]  - resignal = FALSE
[09:31:45.294]  - Number of conditions: 1
[09:31:45.294] signalConditions() ... done
<MyError: boom>
[09:31:45.295] signalConditions() ...
[09:31:45.295]  - include = ‘immediateCondition’
[09:31:45.295]  - exclude = 
[09:31:45.295]  - resignal = FALSE
[09:31:45.295]  - Number of conditions: 1
[09:31:45.295] signalConditions() ... done
[09:31:45.295] Future state: ‘finished’
[09:31:45.295] signalConditions() ...
[09:31:45.295]  - include = ‘condition’
[09:31:45.295]  - exclude = ‘immediateCondition’
[09:31:45.295]  - resignal = TRUE
[09:31:45.296]  - Number of conditions: 1
[09:31:45.296]  - Condition #1: ‘MyError’, ‘error’, ‘condition’
[09:31:45.296] signalConditions() ... done
*** multicore(..., workers = 1L) ...
[09:31:45.296] getGlobalsAndPackages() ...
[09:31:45.296] Searching for globals...
[09:31:45.297] - globals found: [4] ‘{’, ‘*’, ‘a’, ‘b’
[09:31:45.297] Searching for globals ... DONE
[09:31:45.297] Resolving globals: FALSE
[09:31:45.297] The total size of the 2 globals is 112 bytes (112 bytes)
[09:31:45.298] The total size of the 2 globals exported for future expression (‘{; a * b; }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘a’ (56 bytes of class ‘numeric’) and ‘b’ (56 bytes of class ‘numeric’)
[09:31:45.298] - globals: [2] ‘a’, ‘b’
[09:31:45.298] 
[09:31:45.298] getGlobalsAndPackages() ... DONE
[09:31:45.298] Packages needed by the future expression (n = 0): <none>
[09:31:45.298] Packages needed by future strategies (n = 0): <none>
[09:31:45.299] {
[09:31:45.299]     {
[09:31:45.299]         {
[09:31:45.299]             ...future.startTime <- base::Sys.time()
[09:31:45.299]             {
[09:31:45.299]                 {
[09:31:45.299]                   {
[09:31:45.299]                     base::local({
[09:31:45.299]                       has_future <- base::requireNamespace("future", 
[09:31:45.299]                         quietly = TRUE)
[09:31:45.299]                       if (has_future) {
[09:31:45.299]                         ns <- base::getNamespace("future")
[09:31:45.299]                         version <- ns[[".package"]][["version"]]
[09:31:45.299]                         if (is.null(version)) 
[09:31:45.299]                           version <- utils::packageVersion("future")
[09:31:45.299]                       }
[09:31:45.299]                       else {
[09:31:45.299]                         version <- NULL
[09:31:45.299]                       }
[09:31:45.299]                       if (!has_future || version < "1.8.0") {
[09:31:45.299]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:45.299]                           "", base::R.version$version.string), 
[09:31:45.299]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:45.299]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:45.299]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:45.299]                             "release", "version")], collapse = " "), 
[09:31:45.299]                           hostname = base::Sys.info()[["nodename"]])
[09:31:45.299]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:45.299]                           info)
[09:31:45.299]                         info <- base::paste(info, collapse = "; ")
[09:31:45.299]                         if (!has_future) {
[09:31:45.299]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:45.299]                             info)
[09:31:45.299]                         }
[09:31:45.299]                         else {
[09:31:45.299]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:45.299]                             info, version)
[09:31:45.299]                         }
[09:31:45.299]                         base::stop(msg)
[09:31:45.299]                       }
[09:31:45.299]                     })
[09:31:45.299]                   }
[09:31:45.299]                   ...future.strategy.old <- future::plan("list")
[09:31:45.299]                   options(future.plan = NULL)
[09:31:45.299]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.299]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:45.299]                 }
[09:31:45.299]                 ...future.workdir <- getwd()
[09:31:45.299]             }
[09:31:45.299]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:45.299]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:45.299]         }
[09:31:45.299]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:45.299]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:45.299]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:45.299]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:45.299]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:45.299]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:45.299]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:45.299]             base::names(...future.oldOptions))
[09:31:45.299]     }
[09:31:45.299]     if (FALSE) {
[09:31:45.299]     }
[09:31:45.299]     else {
[09:31:45.299]         if (TRUE) {
[09:31:45.299]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:45.299]                 open = "w")
[09:31:45.299]         }
[09:31:45.299]         else {
[09:31:45.299]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:45.299]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:45.299]         }
[09:31:45.299]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:45.299]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:45.299]             base::sink(type = "output", split = FALSE)
[09:31:45.299]             base::close(...future.stdout)
[09:31:45.299]         }, add = TRUE)
[09:31:45.299]     }
[09:31:45.299]     ...future.frame <- base::sys.nframe()
[09:31:45.299]     ...future.conditions <- base::list()
[09:31:45.299]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:45.299]     if (FALSE) {
[09:31:45.299]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:45.299]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:45.299]     }
[09:31:45.299]     ...future.result <- base::tryCatch({
[09:31:45.299]         base::withCallingHandlers({
[09:31:45.299]             ...future.value <- base::withVisible(base::local({
[09:31:45.299]                 a * b
[09:31:45.299]             }))
[09:31:45.299]             future::FutureResult(value = ...future.value$value, 
[09:31:45.299]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.299]                   ...future.rng), globalenv = if (FALSE) 
[09:31:45.299]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:45.299]                     ...future.globalenv.names))
[09:31:45.299]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:45.299]         }, condition = base::local({
[09:31:45.299]             c <- base::c
[09:31:45.299]             inherits <- base::inherits
[09:31:45.299]             invokeRestart <- base::invokeRestart
[09:31:45.299]             length <- base::length
[09:31:45.299]             list <- base::list
[09:31:45.299]             seq.int <- base::seq.int
[09:31:45.299]             signalCondition <- base::signalCondition
[09:31:45.299]             sys.calls <- base::sys.calls
[09:31:45.299]             `[[` <- base::`[[`
[09:31:45.299]             `+` <- base::`+`
[09:31:45.299]             `<<-` <- base::`<<-`
[09:31:45.299]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:45.299]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:45.299]                   3L)]
[09:31:45.299]             }
[09:31:45.299]             function(cond) {
[09:31:45.299]                 is_error <- inherits(cond, "error")
[09:31:45.299]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:45.299]                   NULL)
[09:31:45.299]                 if (is_error) {
[09:31:45.299]                   sessionInformation <- function() {
[09:31:45.299]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:45.299]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:45.299]                       search = base::search(), system = base::Sys.info())
[09:31:45.299]                   }
[09:31:45.299]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.299]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:45.299]                     cond$call), session = sessionInformation(), 
[09:31:45.299]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:45.299]                   signalCondition(cond)
[09:31:45.299]                 }
[09:31:45.299]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:45.299]                 "immediateCondition"))) {
[09:31:45.299]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:45.299]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.299]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:45.299]                   if (TRUE && !signal) {
[09:31:45.299]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.299]                     {
[09:31:45.299]                       inherits <- base::inherits
[09:31:45.299]                       invokeRestart <- base::invokeRestart
[09:31:45.299]                       is.null <- base::is.null
[09:31:45.299]                       muffled <- FALSE
[09:31:45.299]                       if (inherits(cond, "message")) {
[09:31:45.299]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.299]                         if (muffled) 
[09:31:45.299]                           invokeRestart("muffleMessage")
[09:31:45.299]                       }
[09:31:45.299]                       else if (inherits(cond, "warning")) {
[09:31:45.299]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.299]                         if (muffled) 
[09:31:45.299]                           invokeRestart("muffleWarning")
[09:31:45.299]                       }
[09:31:45.299]                       else if (inherits(cond, "condition")) {
[09:31:45.299]                         if (!is.null(pattern)) {
[09:31:45.299]                           computeRestarts <- base::computeRestarts
[09:31:45.299]                           grepl <- base::grepl
[09:31:45.299]                           restarts <- computeRestarts(cond)
[09:31:45.299]                           for (restart in restarts) {
[09:31:45.299]                             name <- restart$name
[09:31:45.299]                             if (is.null(name)) 
[09:31:45.299]                               next
[09:31:45.299]                             if (!grepl(pattern, name)) 
[09:31:45.299]                               next
[09:31:45.299]                             invokeRestart(restart)
[09:31:45.299]                             muffled <- TRUE
[09:31:45.299]                             break
[09:31:45.299]                           }
[09:31:45.299]                         }
[09:31:45.299]                       }
[09:31:45.299]                       invisible(muffled)
[09:31:45.299]                     }
[09:31:45.299]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.299]                   }
[09:31:45.299]                 }
[09:31:45.299]                 else {
[09:31:45.299]                   if (TRUE) {
[09:31:45.299]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.299]                     {
[09:31:45.299]                       inherits <- base::inherits
[09:31:45.299]                       invokeRestart <- base::invokeRestart
[09:31:45.299]                       is.null <- base::is.null
[09:31:45.299]                       muffled <- FALSE
[09:31:45.299]                       if (inherits(cond, "message")) {
[09:31:45.299]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.299]                         if (muffled) 
[09:31:45.299]                           invokeRestart("muffleMessage")
[09:31:45.299]                       }
[09:31:45.299]                       else if (inherits(cond, "warning")) {
[09:31:45.299]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.299]                         if (muffled) 
[09:31:45.299]                           invokeRestart("muffleWarning")
[09:31:45.299]                       }
[09:31:45.299]                       else if (inherits(cond, "condition")) {
[09:31:45.299]                         if (!is.null(pattern)) {
[09:31:45.299]                           computeRestarts <- base::computeRestarts
[09:31:45.299]                           grepl <- base::grepl
[09:31:45.299]                           restarts <- computeRestarts(cond)
[09:31:45.299]                           for (restart in restarts) {
[09:31:45.299]                             name <- restart$name
[09:31:45.299]                             if (is.null(name)) 
[09:31:45.299]                               next
[09:31:45.299]                             if (!grepl(pattern, name)) 
[09:31:45.299]                               next
[09:31:45.299]                             invokeRestart(restart)
[09:31:45.299]                             muffled <- TRUE
[09:31:45.299]                             break
[09:31:45.299]                           }
[09:31:45.299]                         }
[09:31:45.299]                       }
[09:31:45.299]                       invisible(muffled)
[09:31:45.299]                     }
[09:31:45.299]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.299]                   }
[09:31:45.299]                 }
[09:31:45.299]             }
[09:31:45.299]         }))
[09:31:45.299]     }, error = function(ex) {
[09:31:45.299]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:45.299]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.299]                 ...future.rng), started = ...future.startTime, 
[09:31:45.299]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:45.299]             version = "1.8"), class = "FutureResult")
[09:31:45.299]     }, finally = {
[09:31:45.299]         if (!identical(...future.workdir, getwd())) 
[09:31:45.299]             setwd(...future.workdir)
[09:31:45.299]         {
[09:31:45.299]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:45.299]                 ...future.oldOptions$nwarnings <- NULL
[09:31:45.299]             }
[09:31:45.299]             base::options(...future.oldOptions)
[09:31:45.299]             if (.Platform$OS.type == "windows") {
[09:31:45.299]                 old_names <- names(...future.oldEnvVars)
[09:31:45.299]                 envs <- base::Sys.getenv()
[09:31:45.299]                 names <- names(envs)
[09:31:45.299]                 common <- intersect(names, old_names)
[09:31:45.299]                 added <- setdiff(names, old_names)
[09:31:45.299]                 removed <- setdiff(old_names, names)
[09:31:45.299]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:45.299]                   envs[common]]
[09:31:45.299]                 NAMES <- toupper(changed)
[09:31:45.299]                 args <- list()
[09:31:45.299]                 for (kk in seq_along(NAMES)) {
[09:31:45.299]                   name <- changed[[kk]]
[09:31:45.299]                   NAME <- NAMES[[kk]]
[09:31:45.299]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.299]                     next
[09:31:45.299]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.299]                 }
[09:31:45.299]                 NAMES <- toupper(added)
[09:31:45.299]                 for (kk in seq_along(NAMES)) {
[09:31:45.299]                   name <- added[[kk]]
[09:31:45.299]                   NAME <- NAMES[[kk]]
[09:31:45.299]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.299]                     next
[09:31:45.299]                   args[[name]] <- ""
[09:31:45.299]                 }
[09:31:45.299]                 NAMES <- toupper(removed)
[09:31:45.299]                 for (kk in seq_along(NAMES)) {
[09:31:45.299]                   name <- removed[[kk]]
[09:31:45.299]                   NAME <- NAMES[[kk]]
[09:31:45.299]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.299]                     next
[09:31:45.299]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.299]                 }
[09:31:45.299]                 if (length(args) > 0) 
[09:31:45.299]                   base::do.call(base::Sys.setenv, args = args)
[09:31:45.299]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:45.299]             }
[09:31:45.299]             else {
[09:31:45.299]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:45.299]             }
[09:31:45.299]             {
[09:31:45.299]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:45.299]                   0L) {
[09:31:45.299]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:45.299]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:45.299]                   base::options(opts)
[09:31:45.299]                 }
[09:31:45.299]                 {
[09:31:45.299]                   {
[09:31:45.299]                     NULL
[09:31:45.299]                     RNGkind("Mersenne-Twister")
[09:31:45.299]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:45.299]                       inherits = FALSE)
[09:31:45.299]                   }
[09:31:45.299]                   options(future.plan = NULL)
[09:31:45.299]                   if (is.na(NA_character_)) 
[09:31:45.299]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.299]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:45.299]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:45.299]                     .init = FALSE)
[09:31:45.299]                 }
[09:31:45.299]             }
[09:31:45.299]         }
[09:31:45.299]     })
[09:31:45.299]     if (TRUE) {
[09:31:45.299]         base::sink(type = "output", split = FALSE)
[09:31:45.299]         if (TRUE) {
[09:31:45.299]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:45.299]         }
[09:31:45.299]         else {
[09:31:45.299]             ...future.result["stdout"] <- base::list(NULL)
[09:31:45.299]         }
[09:31:45.299]         base::close(...future.stdout)
[09:31:45.299]         ...future.stdout <- NULL
[09:31:45.299]     }
[09:31:45.299]     ...future.result$conditions <- ...future.conditions
[09:31:45.299]     ...future.result$finished <- base::Sys.time()
[09:31:45.299]     ...future.result
[09:31:45.299] }
[09:31:45.300] assign_globals() ...
[09:31:45.300] List of 2
[09:31:45.300]  $ a: num 2
[09:31:45.300]  $ b: num 3
[09:31:45.300]  - attr(*, "where")=List of 2
[09:31:45.300]   ..$ a:<environment: R_EmptyEnv> 
[09:31:45.300]   ..$ b:<environment: R_EmptyEnv> 
[09:31:45.300]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:31:45.300]  - attr(*, "resolved")= logi FALSE
[09:31:45.300]  - attr(*, "total_size")= num 112
[09:31:45.303] - copied ‘a’ to environment
[09:31:45.303] - copied ‘b’ to environment
[09:31:45.303] assign_globals() ... done
[09:31:45.303] plan(): Setting new future strategy stack:
[09:31:45.303] List of future strategies:
[09:31:45.303] 1. sequential:
[09:31:45.303]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:45.303]    - tweaked: FALSE
[09:31:45.303]    - call: NULL
[09:31:45.304] plan(): nbrOfWorkers() = 1
[09:31:45.304] plan(): Setting new future strategy stack:
[09:31:45.305] List of future strategies:
[09:31:45.305] 1. multicore:
[09:31:45.305]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:45.305]    - tweaked: FALSE
[09:31:45.305]    - call: plan(multicore)
[09:31:45.308] plan(): nbrOfWorkers() = 1
[09:31:45.308] SequentialFuture started (and completed)
[1] 6
*** multicore(..., workers = 1L) ... DONE
Testing with 1 cores ... DONE
Testing with 2 cores ...
Number of workers: 2
*** multicore(..., globals = FALSE) without globals
[09:31:45.314] getGlobalsAndPackages() ...
[09:31:45.314] Not searching for globals
[09:31:45.315] - globals: [0] <none>
[09:31:45.315] getGlobalsAndPackages() ... DONE
[09:31:45.316] Packages needed by the future expression (n = 0): <none>
[09:31:45.316] Packages needed by future strategies (n = 0): <none>
[09:31:45.316] {
[09:31:45.316]     {
[09:31:45.316]         {
[09:31:45.316]             ...future.startTime <- base::Sys.time()
[09:31:45.316]             {
[09:31:45.316]                 {
[09:31:45.316]                   {
[09:31:45.316]                     {
[09:31:45.316]                       base::local({
[09:31:45.316]                         has_future <- base::requireNamespace("future", 
[09:31:45.316]                           quietly = TRUE)
[09:31:45.316]                         if (has_future) {
[09:31:45.316]                           ns <- base::getNamespace("future")
[09:31:45.316]                           version <- ns[[".package"]][["version"]]
[09:31:45.316]                           if (is.null(version)) 
[09:31:45.316]                             version <- utils::packageVersion("future")
[09:31:45.316]                         }
[09:31:45.316]                         else {
[09:31:45.316]                           version <- NULL
[09:31:45.316]                         }
[09:31:45.316]                         if (!has_future || version < "1.8.0") {
[09:31:45.316]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:45.316]                             "", base::R.version$version.string), 
[09:31:45.316]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:45.316]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:45.316]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:45.316]                               "release", "version")], collapse = " "), 
[09:31:45.316]                             hostname = base::Sys.info()[["nodename"]])
[09:31:45.316]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:45.316]                             info)
[09:31:45.316]                           info <- base::paste(info, collapse = "; ")
[09:31:45.316]                           if (!has_future) {
[09:31:45.316]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:45.316]                               info)
[09:31:45.316]                           }
[09:31:45.316]                           else {
[09:31:45.316]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:45.316]                               info, version)
[09:31:45.316]                           }
[09:31:45.316]                           base::stop(msg)
[09:31:45.316]                         }
[09:31:45.316]                       })
[09:31:45.316]                     }
[09:31:45.316]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:45.316]                     base::options(mc.cores = 1L)
[09:31:45.316]                   }
[09:31:45.316]                   ...future.strategy.old <- future::plan("list")
[09:31:45.316]                   options(future.plan = NULL)
[09:31:45.316]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.316]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:45.316]                 }
[09:31:45.316]                 ...future.workdir <- getwd()
[09:31:45.316]             }
[09:31:45.316]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:45.316]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:45.316]         }
[09:31:45.316]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:45.316]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:45.316]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:45.316]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:45.316]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:45.316]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:45.316]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:45.316]             base::names(...future.oldOptions))
[09:31:45.316]     }
[09:31:45.316]     if (FALSE) {
[09:31:45.316]     }
[09:31:45.316]     else {
[09:31:45.316]         if (TRUE) {
[09:31:45.316]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:45.316]                 open = "w")
[09:31:45.316]         }
[09:31:45.316]         else {
[09:31:45.316]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:45.316]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:45.316]         }
[09:31:45.316]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:45.316]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:45.316]             base::sink(type = "output", split = FALSE)
[09:31:45.316]             base::close(...future.stdout)
[09:31:45.316]         }, add = TRUE)
[09:31:45.316]     }
[09:31:45.316]     ...future.frame <- base::sys.nframe()
[09:31:45.316]     ...future.conditions <- base::list()
[09:31:45.316]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:45.316]     if (FALSE) {
[09:31:45.316]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:45.316]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:45.316]     }
[09:31:45.316]     ...future.result <- base::tryCatch({
[09:31:45.316]         base::withCallingHandlers({
[09:31:45.316]             ...future.value <- base::withVisible(base::local({
[09:31:45.316]                 withCallingHandlers({
[09:31:45.316]                   {
[09:31:45.316]                     42L
[09:31:45.316]                   }
[09:31:45.316]                 }, immediateCondition = function(cond) {
[09:31:45.316]                   save_rds <- function (object, pathname, ...) 
[09:31:45.316]                   {
[09:31:45.316]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:31:45.316]                     if (file_test("-f", pathname_tmp)) {
[09:31:45.316]                       fi_tmp <- file.info(pathname_tmp)
[09:31:45.316]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:31:45.316]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:45.316]                         fi_tmp[["mtime"]])
[09:31:45.316]                     }
[09:31:45.316]                     tryCatch({
[09:31:45.316]                       saveRDS(object, file = pathname_tmp, ...)
[09:31:45.316]                     }, error = function(ex) {
[09:31:45.316]                       msg <- conditionMessage(ex)
[09:31:45.316]                       fi_tmp <- file.info(pathname_tmp)
[09:31:45.316]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:31:45.316]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:45.316]                         fi_tmp[["mtime"]], msg)
[09:31:45.316]                       ex$message <- msg
[09:31:45.316]                       stop(ex)
[09:31:45.316]                     })
[09:31:45.316]                     stopifnot(file_test("-f", pathname_tmp))
[09:31:45.316]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:31:45.316]                     if (!res || file_test("-f", pathname_tmp)) {
[09:31:45.316]                       fi_tmp <- file.info(pathname_tmp)
[09:31:45.316]                       fi <- file.info(pathname)
[09:31:45.316]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:31:45.316]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:45.316]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:31:45.316]                         fi[["size"]], fi[["mtime"]])
[09:31:45.316]                       stop(msg)
[09:31:45.316]                     }
[09:31:45.316]                     invisible(pathname)
[09:31:45.316]                   }
[09:31:45.316]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:31:45.316]                     rootPath = tempdir()) 
[09:31:45.316]                   {
[09:31:45.316]                     obj <- list(time = Sys.time(), condition = cond)
[09:31:45.316]                     file <- tempfile(pattern = class(cond)[1], 
[09:31:45.316]                       tmpdir = path, fileext = ".rds")
[09:31:45.316]                     save_rds(obj, file)
[09:31:45.316]                   }
[09:31:45.316]                   saveImmediateCondition(cond, path = "/tmp/RtmpMXzm1h/.future/immediateConditions")
[09:31:45.316]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.316]                   {
[09:31:45.316]                     inherits <- base::inherits
[09:31:45.316]                     invokeRestart <- base::invokeRestart
[09:31:45.316]                     is.null <- base::is.null
[09:31:45.316]                     muffled <- FALSE
[09:31:45.316]                     if (inherits(cond, "message")) {
[09:31:45.316]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:45.316]                       if (muffled) 
[09:31:45.316]                         invokeRestart("muffleMessage")
[09:31:45.316]                     }
[09:31:45.316]                     else if (inherits(cond, "warning")) {
[09:31:45.316]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:45.316]                       if (muffled) 
[09:31:45.316]                         invokeRestart("muffleWarning")
[09:31:45.316]                     }
[09:31:45.316]                     else if (inherits(cond, "condition")) {
[09:31:45.316]                       if (!is.null(pattern)) {
[09:31:45.316]                         computeRestarts <- base::computeRestarts
[09:31:45.316]                         grepl <- base::grepl
[09:31:45.316]                         restarts <- computeRestarts(cond)
[09:31:45.316]                         for (restart in restarts) {
[09:31:45.316]                           name <- restart$name
[09:31:45.316]                           if (is.null(name)) 
[09:31:45.316]                             next
[09:31:45.316]                           if (!grepl(pattern, name)) 
[09:31:45.316]                             next
[09:31:45.316]                           invokeRestart(restart)
[09:31:45.316]                           muffled <- TRUE
[09:31:45.316]                           break
[09:31:45.316]                         }
[09:31:45.316]                       }
[09:31:45.316]                     }
[09:31:45.316]                     invisible(muffled)
[09:31:45.316]                   }
[09:31:45.316]                   muffleCondition(cond)
[09:31:45.316]                 })
[09:31:45.316]             }))
[09:31:45.316]             future::FutureResult(value = ...future.value$value, 
[09:31:45.316]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.316]                   ...future.rng), globalenv = if (FALSE) 
[09:31:45.316]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:45.316]                     ...future.globalenv.names))
[09:31:45.316]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:45.316]         }, condition = base::local({
[09:31:45.316]             c <- base::c
[09:31:45.316]             inherits <- base::inherits
[09:31:45.316]             invokeRestart <- base::invokeRestart
[09:31:45.316]             length <- base::length
[09:31:45.316]             list <- base::list
[09:31:45.316]             seq.int <- base::seq.int
[09:31:45.316]             signalCondition <- base::signalCondition
[09:31:45.316]             sys.calls <- base::sys.calls
[09:31:45.316]             `[[` <- base::`[[`
[09:31:45.316]             `+` <- base::`+`
[09:31:45.316]             `<<-` <- base::`<<-`
[09:31:45.316]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:45.316]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:45.316]                   3L)]
[09:31:45.316]             }
[09:31:45.316]             function(cond) {
[09:31:45.316]                 is_error <- inherits(cond, "error")
[09:31:45.316]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:45.316]                   NULL)
[09:31:45.316]                 if (is_error) {
[09:31:45.316]                   sessionInformation <- function() {
[09:31:45.316]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:45.316]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:45.316]                       search = base::search(), system = base::Sys.info())
[09:31:45.316]                   }
[09:31:45.316]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.316]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:45.316]                     cond$call), session = sessionInformation(), 
[09:31:45.316]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:45.316]                   signalCondition(cond)
[09:31:45.316]                 }
[09:31:45.316]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:45.316]                 "immediateCondition"))) {
[09:31:45.316]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:45.316]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.316]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:45.316]                   if (TRUE && !signal) {
[09:31:45.316]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.316]                     {
[09:31:45.316]                       inherits <- base::inherits
[09:31:45.316]                       invokeRestart <- base::invokeRestart
[09:31:45.316]                       is.null <- base::is.null
[09:31:45.316]                       muffled <- FALSE
[09:31:45.316]                       if (inherits(cond, "message")) {
[09:31:45.316]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.316]                         if (muffled) 
[09:31:45.316]                           invokeRestart("muffleMessage")
[09:31:45.316]                       }
[09:31:45.316]                       else if (inherits(cond, "warning")) {
[09:31:45.316]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.316]                         if (muffled) 
[09:31:45.316]                           invokeRestart("muffleWarning")
[09:31:45.316]                       }
[09:31:45.316]                       else if (inherits(cond, "condition")) {
[09:31:45.316]                         if (!is.null(pattern)) {
[09:31:45.316]                           computeRestarts <- base::computeRestarts
[09:31:45.316]                           grepl <- base::grepl
[09:31:45.316]                           restarts <- computeRestarts(cond)
[09:31:45.316]                           for (restart in restarts) {
[09:31:45.316]                             name <- restart$name
[09:31:45.316]                             if (is.null(name)) 
[09:31:45.316]                               next
[09:31:45.316]                             if (!grepl(pattern, name)) 
[09:31:45.316]                               next
[09:31:45.316]                             invokeRestart(restart)
[09:31:45.316]                             muffled <- TRUE
[09:31:45.316]                             break
[09:31:45.316]                           }
[09:31:45.316]                         }
[09:31:45.316]                       }
[09:31:45.316]                       invisible(muffled)
[09:31:45.316]                     }
[09:31:45.316]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.316]                   }
[09:31:45.316]                 }
[09:31:45.316]                 else {
[09:31:45.316]                   if (TRUE) {
[09:31:45.316]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.316]                     {
[09:31:45.316]                       inherits <- base::inherits
[09:31:45.316]                       invokeRestart <- base::invokeRestart
[09:31:45.316]                       is.null <- base::is.null
[09:31:45.316]                       muffled <- FALSE
[09:31:45.316]                       if (inherits(cond, "message")) {
[09:31:45.316]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.316]                         if (muffled) 
[09:31:45.316]                           invokeRestart("muffleMessage")
[09:31:45.316]                       }
[09:31:45.316]                       else if (inherits(cond, "warning")) {
[09:31:45.316]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.316]                         if (muffled) 
[09:31:45.316]                           invokeRestart("muffleWarning")
[09:31:45.316]                       }
[09:31:45.316]                       else if (inherits(cond, "condition")) {
[09:31:45.316]                         if (!is.null(pattern)) {
[09:31:45.316]                           computeRestarts <- base::computeRestarts
[09:31:45.316]                           grepl <- base::grepl
[09:31:45.316]                           restarts <- computeRestarts(cond)
[09:31:45.316]                           for (restart in restarts) {
[09:31:45.316]                             name <- restart$name
[09:31:45.316]                             if (is.null(name)) 
[09:31:45.316]                               next
[09:31:45.316]                             if (!grepl(pattern, name)) 
[09:31:45.316]                               next
[09:31:45.316]                             invokeRestart(restart)
[09:31:45.316]                             muffled <- TRUE
[09:31:45.316]                             break
[09:31:45.316]                           }
[09:31:45.316]                         }
[09:31:45.316]                       }
[09:31:45.316]                       invisible(muffled)
[09:31:45.316]                     }
[09:31:45.316]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.316]                   }
[09:31:45.316]                 }
[09:31:45.316]             }
[09:31:45.316]         }))
[09:31:45.316]     }, error = function(ex) {
[09:31:45.316]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:45.316]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.316]                 ...future.rng), started = ...future.startTime, 
[09:31:45.316]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:45.316]             version = "1.8"), class = "FutureResult")
[09:31:45.316]     }, finally = {
[09:31:45.316]         if (!identical(...future.workdir, getwd())) 
[09:31:45.316]             setwd(...future.workdir)
[09:31:45.316]         {
[09:31:45.316]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:45.316]                 ...future.oldOptions$nwarnings <- NULL
[09:31:45.316]             }
[09:31:45.316]             base::options(...future.oldOptions)
[09:31:45.316]             if (.Platform$OS.type == "windows") {
[09:31:45.316]                 old_names <- names(...future.oldEnvVars)
[09:31:45.316]                 envs <- base::Sys.getenv()
[09:31:45.316]                 names <- names(envs)
[09:31:45.316]                 common <- intersect(names, old_names)
[09:31:45.316]                 added <- setdiff(names, old_names)
[09:31:45.316]                 removed <- setdiff(old_names, names)
[09:31:45.316]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:45.316]                   envs[common]]
[09:31:45.316]                 NAMES <- toupper(changed)
[09:31:45.316]                 args <- list()
[09:31:45.316]                 for (kk in seq_along(NAMES)) {
[09:31:45.316]                   name <- changed[[kk]]
[09:31:45.316]                   NAME <- NAMES[[kk]]
[09:31:45.316]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.316]                     next
[09:31:45.316]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.316]                 }
[09:31:45.316]                 NAMES <- toupper(added)
[09:31:45.316]                 for (kk in seq_along(NAMES)) {
[09:31:45.316]                   name <- added[[kk]]
[09:31:45.316]                   NAME <- NAMES[[kk]]
[09:31:45.316]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.316]                     next
[09:31:45.316]                   args[[name]] <- ""
[09:31:45.316]                 }
[09:31:45.316]                 NAMES <- toupper(removed)
[09:31:45.316]                 for (kk in seq_along(NAMES)) {
[09:31:45.316]                   name <- removed[[kk]]
[09:31:45.316]                   NAME <- NAMES[[kk]]
[09:31:45.316]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.316]                     next
[09:31:45.316]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.316]                 }
[09:31:45.316]                 if (length(args) > 0) 
[09:31:45.316]                   base::do.call(base::Sys.setenv, args = args)
[09:31:45.316]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:45.316]             }
[09:31:45.316]             else {
[09:31:45.316]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:45.316]             }
[09:31:45.316]             {
[09:31:45.316]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:45.316]                   0L) {
[09:31:45.316]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:45.316]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:45.316]                   base::options(opts)
[09:31:45.316]                 }
[09:31:45.316]                 {
[09:31:45.316]                   {
[09:31:45.316]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:45.316]                     NULL
[09:31:45.316]                   }
[09:31:45.316]                   options(future.plan = NULL)
[09:31:45.316]                   if (is.na(NA_character_)) 
[09:31:45.316]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.316]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:45.316]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:45.316]                     .init = FALSE)
[09:31:45.316]                 }
[09:31:45.316]             }
[09:31:45.316]         }
[09:31:45.316]     })
[09:31:45.316]     if (TRUE) {
[09:31:45.316]         base::sink(type = "output", split = FALSE)
[09:31:45.316]         if (TRUE) {
[09:31:45.316]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:45.316]         }
[09:31:45.316]         else {
[09:31:45.316]             ...future.result["stdout"] <- base::list(NULL)
[09:31:45.316]         }
[09:31:45.316]         base::close(...future.stdout)
[09:31:45.316]         ...future.stdout <- NULL
[09:31:45.316]     }
[09:31:45.316]     ...future.result$conditions <- ...future.conditions
[09:31:45.316]     ...future.result$finished <- base::Sys.time()
[09:31:45.316]     ...future.result
[09:31:45.316] }
[09:31:45.318] requestCore(): workers = 2
[09:31:45.321] MulticoreFuture started
[09:31:45.322] plan(): Setting new future strategy stack:
[09:31:45.322] List of future strategies:
[09:31:45.322] 1. sequential:
[09:31:45.322]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:45.322]    - tweaked: FALSE
[09:31:45.322]    - call: NULL
[09:31:45.323] plan(): nbrOfWorkers() = 1
[09:31:45.325] plan(): Setting new future strategy stack:
[09:31:45.325] List of future strategies:
[09:31:45.325] 1. multicore:
[09:31:45.325]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:45.325]    - tweaked: FALSE
[09:31:45.325]    - call: plan(multicore)
[09:31:45.330] plan(): nbrOfWorkers() = 2
[1] TRUE
[09:31:45.331] result() for MulticoreFuture ...
[09:31:45.336] result() for MulticoreFuture ...
[09:31:45.336] result() for MulticoreFuture ... done
[09:31:45.336] result() for MulticoreFuture ... done
[09:31:45.336] result() for MulticoreFuture ...
[09:31:45.336] result() for MulticoreFuture ... done
[1] 42
*** multicore(..., globals = FALSE) with globals
[09:31:45.340] getGlobalsAndPackages() ...
[09:31:45.340] Not searching for globals
[09:31:45.340] - globals: [0] <none>
[09:31:45.341] getGlobalsAndPackages() ... DONE
[09:31:45.341] Packages needed by the future expression (n = 0): <none>
[09:31:45.341] Packages needed by future strategies (n = 0): <none>
[09:31:45.342] {
[09:31:45.342]     {
[09:31:45.342]         {
[09:31:45.342]             ...future.startTime <- base::Sys.time()
[09:31:45.342]             {
[09:31:45.342]                 {
[09:31:45.342]                   {
[09:31:45.342]                     {
[09:31:45.342]                       base::local({
[09:31:45.342]                         has_future <- base::requireNamespace("future", 
[09:31:45.342]                           quietly = TRUE)
[09:31:45.342]                         if (has_future) {
[09:31:45.342]                           ns <- base::getNamespace("future")
[09:31:45.342]                           version <- ns[[".package"]][["version"]]
[09:31:45.342]                           if (is.null(version)) 
[09:31:45.342]                             version <- utils::packageVersion("future")
[09:31:45.342]                         }
[09:31:45.342]                         else {
[09:31:45.342]                           version <- NULL
[09:31:45.342]                         }
[09:31:45.342]                         if (!has_future || version < "1.8.0") {
[09:31:45.342]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:45.342]                             "", base::R.version$version.string), 
[09:31:45.342]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:45.342]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:45.342]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:45.342]                               "release", "version")], collapse = " "), 
[09:31:45.342]                             hostname = base::Sys.info()[["nodename"]])
[09:31:45.342]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:45.342]                             info)
[09:31:45.342]                           info <- base::paste(info, collapse = "; ")
[09:31:45.342]                           if (!has_future) {
[09:31:45.342]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:45.342]                               info)
[09:31:45.342]                           }
[09:31:45.342]                           else {
[09:31:45.342]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:45.342]                               info, version)
[09:31:45.342]                           }
[09:31:45.342]                           base::stop(msg)
[09:31:45.342]                         }
[09:31:45.342]                       })
[09:31:45.342]                     }
[09:31:45.342]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:45.342]                     base::options(mc.cores = 1L)
[09:31:45.342]                   }
[09:31:45.342]                   ...future.strategy.old <- future::plan("list")
[09:31:45.342]                   options(future.plan = NULL)
[09:31:45.342]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.342]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:45.342]                 }
[09:31:45.342]                 ...future.workdir <- getwd()
[09:31:45.342]             }
[09:31:45.342]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:45.342]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:45.342]         }
[09:31:45.342]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:45.342]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:45.342]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:45.342]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:45.342]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:45.342]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:45.342]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:45.342]             base::names(...future.oldOptions))
[09:31:45.342]     }
[09:31:45.342]     if (FALSE) {
[09:31:45.342]     }
[09:31:45.342]     else {
[09:31:45.342]         if (TRUE) {
[09:31:45.342]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:45.342]                 open = "w")
[09:31:45.342]         }
[09:31:45.342]         else {
[09:31:45.342]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:45.342]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:45.342]         }
[09:31:45.342]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:45.342]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:45.342]             base::sink(type = "output", split = FALSE)
[09:31:45.342]             base::close(...future.stdout)
[09:31:45.342]         }, add = TRUE)
[09:31:45.342]     }
[09:31:45.342]     ...future.frame <- base::sys.nframe()
[09:31:45.342]     ...future.conditions <- base::list()
[09:31:45.342]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:45.342]     if (FALSE) {
[09:31:45.342]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:45.342]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:45.342]     }
[09:31:45.342]     ...future.result <- base::tryCatch({
[09:31:45.342]         base::withCallingHandlers({
[09:31:45.342]             ...future.value <- base::withVisible(base::local({
[09:31:45.342]                 withCallingHandlers({
[09:31:45.342]                   {
[09:31:45.342]                     b <- 3
[09:31:45.342]                     c <- 2
[09:31:45.342]                     a * b * c
[09:31:45.342]                   }
[09:31:45.342]                 }, immediateCondition = function(cond) {
[09:31:45.342]                   save_rds <- function (object, pathname, ...) 
[09:31:45.342]                   {
[09:31:45.342]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:31:45.342]                     if (file_test("-f", pathname_tmp)) {
[09:31:45.342]                       fi_tmp <- file.info(pathname_tmp)
[09:31:45.342]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:31:45.342]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:45.342]                         fi_tmp[["mtime"]])
[09:31:45.342]                     }
[09:31:45.342]                     tryCatch({
[09:31:45.342]                       saveRDS(object, file = pathname_tmp, ...)
[09:31:45.342]                     }, error = function(ex) {
[09:31:45.342]                       msg <- conditionMessage(ex)
[09:31:45.342]                       fi_tmp <- file.info(pathname_tmp)
[09:31:45.342]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:31:45.342]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:45.342]                         fi_tmp[["mtime"]], msg)
[09:31:45.342]                       ex$message <- msg
[09:31:45.342]                       stop(ex)
[09:31:45.342]                     })
[09:31:45.342]                     stopifnot(file_test("-f", pathname_tmp))
[09:31:45.342]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:31:45.342]                     if (!res || file_test("-f", pathname_tmp)) {
[09:31:45.342]                       fi_tmp <- file.info(pathname_tmp)
[09:31:45.342]                       fi <- file.info(pathname)
[09:31:45.342]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:31:45.342]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:45.342]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:31:45.342]                         fi[["size"]], fi[["mtime"]])
[09:31:45.342]                       stop(msg)
[09:31:45.342]                     }
[09:31:45.342]                     invisible(pathname)
[09:31:45.342]                   }
[09:31:45.342]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:31:45.342]                     rootPath = tempdir()) 
[09:31:45.342]                   {
[09:31:45.342]                     obj <- list(time = Sys.time(), condition = cond)
[09:31:45.342]                     file <- tempfile(pattern = class(cond)[1], 
[09:31:45.342]                       tmpdir = path, fileext = ".rds")
[09:31:45.342]                     save_rds(obj, file)
[09:31:45.342]                   }
[09:31:45.342]                   saveImmediateCondition(cond, path = "/tmp/RtmpMXzm1h/.future/immediateConditions")
[09:31:45.342]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.342]                   {
[09:31:45.342]                     inherits <- base::inherits
[09:31:45.342]                     invokeRestart <- base::invokeRestart
[09:31:45.342]                     is.null <- base::is.null
[09:31:45.342]                     muffled <- FALSE
[09:31:45.342]                     if (inherits(cond, "message")) {
[09:31:45.342]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:45.342]                       if (muffled) 
[09:31:45.342]                         invokeRestart("muffleMessage")
[09:31:45.342]                     }
[09:31:45.342]                     else if (inherits(cond, "warning")) {
[09:31:45.342]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:45.342]                       if (muffled) 
[09:31:45.342]                         invokeRestart("muffleWarning")
[09:31:45.342]                     }
[09:31:45.342]                     else if (inherits(cond, "condition")) {
[09:31:45.342]                       if (!is.null(pattern)) {
[09:31:45.342]                         computeRestarts <- base::computeRestarts
[09:31:45.342]                         grepl <- base::grepl
[09:31:45.342]                         restarts <- computeRestarts(cond)
[09:31:45.342]                         for (restart in restarts) {
[09:31:45.342]                           name <- restart$name
[09:31:45.342]                           if (is.null(name)) 
[09:31:45.342]                             next
[09:31:45.342]                           if (!grepl(pattern, name)) 
[09:31:45.342]                             next
[09:31:45.342]                           invokeRestart(restart)
[09:31:45.342]                           muffled <- TRUE
[09:31:45.342]                           break
[09:31:45.342]                         }
[09:31:45.342]                       }
[09:31:45.342]                     }
[09:31:45.342]                     invisible(muffled)
[09:31:45.342]                   }
[09:31:45.342]                   muffleCondition(cond)
[09:31:45.342]                 })
[09:31:45.342]             }))
[09:31:45.342]             future::FutureResult(value = ...future.value$value, 
[09:31:45.342]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.342]                   ...future.rng), globalenv = if (FALSE) 
[09:31:45.342]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:45.342]                     ...future.globalenv.names))
[09:31:45.342]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:45.342]         }, condition = base::local({
[09:31:45.342]             c <- base::c
[09:31:45.342]             inherits <- base::inherits
[09:31:45.342]             invokeRestart <- base::invokeRestart
[09:31:45.342]             length <- base::length
[09:31:45.342]             list <- base::list
[09:31:45.342]             seq.int <- base::seq.int
[09:31:45.342]             signalCondition <- base::signalCondition
[09:31:45.342]             sys.calls <- base::sys.calls
[09:31:45.342]             `[[` <- base::`[[`
[09:31:45.342]             `+` <- base::`+`
[09:31:45.342]             `<<-` <- base::`<<-`
[09:31:45.342]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:45.342]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:45.342]                   3L)]
[09:31:45.342]             }
[09:31:45.342]             function(cond) {
[09:31:45.342]                 is_error <- inherits(cond, "error")
[09:31:45.342]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:45.342]                   NULL)
[09:31:45.342]                 if (is_error) {
[09:31:45.342]                   sessionInformation <- function() {
[09:31:45.342]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:45.342]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:45.342]                       search = base::search(), system = base::Sys.info())
[09:31:45.342]                   }
[09:31:45.342]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.342]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:45.342]                     cond$call), session = sessionInformation(), 
[09:31:45.342]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:45.342]                   signalCondition(cond)
[09:31:45.342]                 }
[09:31:45.342]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:45.342]                 "immediateCondition"))) {
[09:31:45.342]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:45.342]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.342]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:45.342]                   if (TRUE && !signal) {
[09:31:45.342]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.342]                     {
[09:31:45.342]                       inherits <- base::inherits
[09:31:45.342]                       invokeRestart <- base::invokeRestart
[09:31:45.342]                       is.null <- base::is.null
[09:31:45.342]                       muffled <- FALSE
[09:31:45.342]                       if (inherits(cond, "message")) {
[09:31:45.342]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.342]                         if (muffled) 
[09:31:45.342]                           invokeRestart("muffleMessage")
[09:31:45.342]                       }
[09:31:45.342]                       else if (inherits(cond, "warning")) {
[09:31:45.342]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.342]                         if (muffled) 
[09:31:45.342]                           invokeRestart("muffleWarning")
[09:31:45.342]                       }
[09:31:45.342]                       else if (inherits(cond, "condition")) {
[09:31:45.342]                         if (!is.null(pattern)) {
[09:31:45.342]                           computeRestarts <- base::computeRestarts
[09:31:45.342]                           grepl <- base::grepl
[09:31:45.342]                           restarts <- computeRestarts(cond)
[09:31:45.342]                           for (restart in restarts) {
[09:31:45.342]                             name <- restart$name
[09:31:45.342]                             if (is.null(name)) 
[09:31:45.342]                               next
[09:31:45.342]                             if (!grepl(pattern, name)) 
[09:31:45.342]                               next
[09:31:45.342]                             invokeRestart(restart)
[09:31:45.342]                             muffled <- TRUE
[09:31:45.342]                             break
[09:31:45.342]                           }
[09:31:45.342]                         }
[09:31:45.342]                       }
[09:31:45.342]                       invisible(muffled)
[09:31:45.342]                     }
[09:31:45.342]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.342]                   }
[09:31:45.342]                 }
[09:31:45.342]                 else {
[09:31:45.342]                   if (TRUE) {
[09:31:45.342]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.342]                     {
[09:31:45.342]                       inherits <- base::inherits
[09:31:45.342]                       invokeRestart <- base::invokeRestart
[09:31:45.342]                       is.null <- base::is.null
[09:31:45.342]                       muffled <- FALSE
[09:31:45.342]                       if (inherits(cond, "message")) {
[09:31:45.342]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.342]                         if (muffled) 
[09:31:45.342]                           invokeRestart("muffleMessage")
[09:31:45.342]                       }
[09:31:45.342]                       else if (inherits(cond, "warning")) {
[09:31:45.342]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.342]                         if (muffled) 
[09:31:45.342]                           invokeRestart("muffleWarning")
[09:31:45.342]                       }
[09:31:45.342]                       else if (inherits(cond, "condition")) {
[09:31:45.342]                         if (!is.null(pattern)) {
[09:31:45.342]                           computeRestarts <- base::computeRestarts
[09:31:45.342]                           grepl <- base::grepl
[09:31:45.342]                           restarts <- computeRestarts(cond)
[09:31:45.342]                           for (restart in restarts) {
[09:31:45.342]                             name <- restart$name
[09:31:45.342]                             if (is.null(name)) 
[09:31:45.342]                               next
[09:31:45.342]                             if (!grepl(pattern, name)) 
[09:31:45.342]                               next
[09:31:45.342]                             invokeRestart(restart)
[09:31:45.342]                             muffled <- TRUE
[09:31:45.342]                             break
[09:31:45.342]                           }
[09:31:45.342]                         }
[09:31:45.342]                       }
[09:31:45.342]                       invisible(muffled)
[09:31:45.342]                     }
[09:31:45.342]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.342]                   }
[09:31:45.342]                 }
[09:31:45.342]             }
[09:31:45.342]         }))
[09:31:45.342]     }, error = function(ex) {
[09:31:45.342]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:45.342]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.342]                 ...future.rng), started = ...future.startTime, 
[09:31:45.342]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:45.342]             version = "1.8"), class = "FutureResult")
[09:31:45.342]     }, finally = {
[09:31:45.342]         if (!identical(...future.workdir, getwd())) 
[09:31:45.342]             setwd(...future.workdir)
[09:31:45.342]         {
[09:31:45.342]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:45.342]                 ...future.oldOptions$nwarnings <- NULL
[09:31:45.342]             }
[09:31:45.342]             base::options(...future.oldOptions)
[09:31:45.342]             if (.Platform$OS.type == "windows") {
[09:31:45.342]                 old_names <- names(...future.oldEnvVars)
[09:31:45.342]                 envs <- base::Sys.getenv()
[09:31:45.342]                 names <- names(envs)
[09:31:45.342]                 common <- intersect(names, old_names)
[09:31:45.342]                 added <- setdiff(names, old_names)
[09:31:45.342]                 removed <- setdiff(old_names, names)
[09:31:45.342]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:45.342]                   envs[common]]
[09:31:45.342]                 NAMES <- toupper(changed)
[09:31:45.342]                 args <- list()
[09:31:45.342]                 for (kk in seq_along(NAMES)) {
[09:31:45.342]                   name <- changed[[kk]]
[09:31:45.342]                   NAME <- NAMES[[kk]]
[09:31:45.342]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.342]                     next
[09:31:45.342]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.342]                 }
[09:31:45.342]                 NAMES <- toupper(added)
[09:31:45.342]                 for (kk in seq_along(NAMES)) {
[09:31:45.342]                   name <- added[[kk]]
[09:31:45.342]                   NAME <- NAMES[[kk]]
[09:31:45.342]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.342]                     next
[09:31:45.342]                   args[[name]] <- ""
[09:31:45.342]                 }
[09:31:45.342]                 NAMES <- toupper(removed)
[09:31:45.342]                 for (kk in seq_along(NAMES)) {
[09:31:45.342]                   name <- removed[[kk]]
[09:31:45.342]                   NAME <- NAMES[[kk]]
[09:31:45.342]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.342]                     next
[09:31:45.342]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.342]                 }
[09:31:45.342]                 if (length(args) > 0) 
[09:31:45.342]                   base::do.call(base::Sys.setenv, args = args)
[09:31:45.342]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:45.342]             }
[09:31:45.342]             else {
[09:31:45.342]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:45.342]             }
[09:31:45.342]             {
[09:31:45.342]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:45.342]                   0L) {
[09:31:45.342]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:45.342]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:45.342]                   base::options(opts)
[09:31:45.342]                 }
[09:31:45.342]                 {
[09:31:45.342]                   {
[09:31:45.342]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:45.342]                     NULL
[09:31:45.342]                   }
[09:31:45.342]                   options(future.plan = NULL)
[09:31:45.342]                   if (is.na(NA_character_)) 
[09:31:45.342]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.342]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:45.342]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:45.342]                     .init = FALSE)
[09:31:45.342]                 }
[09:31:45.342]             }
[09:31:45.342]         }
[09:31:45.342]     })
[09:31:45.342]     if (TRUE) {
[09:31:45.342]         base::sink(type = "output", split = FALSE)
[09:31:45.342]         if (TRUE) {
[09:31:45.342]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:45.342]         }
[09:31:45.342]         else {
[09:31:45.342]             ...future.result["stdout"] <- base::list(NULL)
[09:31:45.342]         }
[09:31:45.342]         base::close(...future.stdout)
[09:31:45.342]         ...future.stdout <- NULL
[09:31:45.342]     }
[09:31:45.342]     ...future.result$conditions <- ...future.conditions
[09:31:45.342]     ...future.result$finished <- base::Sys.time()
[09:31:45.342]     ...future.result
[09:31:45.342] }
[09:31:45.344] requestCore(): workers = 2
[09:31:45.346] MulticoreFuture started
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    b <- 3
    c <- 2
    a * b * c
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[09:31:45.347] plan(): Setting new future strategy stack:
[09:31:45.347] List of future strategies:
[09:31:45.347] 1. sequential:
[09:31:45.347]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:45.347]    - tweaked: FALSE
[09:31:45.347]    - call: NULL
[09:31:45.354] plan(): nbrOfWorkers() = 1
[09:31:45.355] plan(): Setting new future strategy stack:
[09:31:45.356] List of future strategies:
[09:31:45.356] 1. multicore:
[09:31:45.356]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:45.356]    - tweaked: FALSE
[09:31:45.356]    - call: plan(multicore)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 4dab417a-2fdd-f8a2-2e0a-d701ed5fedef
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:45.357] result() for MulticoreFuture ...
[09:31:45.360] plan(): nbrOfWorkers() = 2
[09:31:45.361] result() for MulticoreFuture ...
[09:31:45.361] result() for MulticoreFuture ... done
[09:31:45.361] result() for MulticoreFuture ... done
[09:31:45.362] result() for MulticoreFuture ...
[09:31:45.362] result() for MulticoreFuture ... done
[1] 0
*** multicore(..., globals = FALSE) with globals and blocking
 - Creating multicore future #1 ...
[09:31:45.366] getGlobalsAndPackages() ...
[09:31:45.366] Not searching for globals
[09:31:45.366] - globals: [0] <none>
[09:31:45.366] getGlobalsAndPackages() ... DONE
[09:31:45.367] Packages needed by the future expression (n = 0): <none>
[09:31:45.367] Packages needed by future strategies (n = 0): <none>
[09:31:45.368] {
[09:31:45.368]     {
[09:31:45.368]         {
[09:31:45.368]             ...future.startTime <- base::Sys.time()
[09:31:45.368]             {
[09:31:45.368]                 {
[09:31:45.368]                   {
[09:31:45.368]                     {
[09:31:45.368]                       base::local({
[09:31:45.368]                         has_future <- base::requireNamespace("future", 
[09:31:45.368]                           quietly = TRUE)
[09:31:45.368]                         if (has_future) {
[09:31:45.368]                           ns <- base::getNamespace("future")
[09:31:45.368]                           version <- ns[[".package"]][["version"]]
[09:31:45.368]                           if (is.null(version)) 
[09:31:45.368]                             version <- utils::packageVersion("future")
[09:31:45.368]                         }
[09:31:45.368]                         else {
[09:31:45.368]                           version <- NULL
[09:31:45.368]                         }
[09:31:45.368]                         if (!has_future || version < "1.8.0") {
[09:31:45.368]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:45.368]                             "", base::R.version$version.string), 
[09:31:45.368]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:45.368]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:45.368]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:45.368]                               "release", "version")], collapse = " "), 
[09:31:45.368]                             hostname = base::Sys.info()[["nodename"]])
[09:31:45.368]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:45.368]                             info)
[09:31:45.368]                           info <- base::paste(info, collapse = "; ")
[09:31:45.368]                           if (!has_future) {
[09:31:45.368]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:45.368]                               info)
[09:31:45.368]                           }
[09:31:45.368]                           else {
[09:31:45.368]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:45.368]                               info, version)
[09:31:45.368]                           }
[09:31:45.368]                           base::stop(msg)
[09:31:45.368]                         }
[09:31:45.368]                       })
[09:31:45.368]                     }
[09:31:45.368]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:45.368]                     base::options(mc.cores = 1L)
[09:31:45.368]                   }
[09:31:45.368]                   ...future.strategy.old <- future::plan("list")
[09:31:45.368]                   options(future.plan = NULL)
[09:31:45.368]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.368]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:45.368]                 }
[09:31:45.368]                 ...future.workdir <- getwd()
[09:31:45.368]             }
[09:31:45.368]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:45.368]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:45.368]         }
[09:31:45.368]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:45.368]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:45.368]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:45.368]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:45.368]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:45.368]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:45.368]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:45.368]             base::names(...future.oldOptions))
[09:31:45.368]     }
[09:31:45.368]     if (FALSE) {
[09:31:45.368]     }
[09:31:45.368]     else {
[09:31:45.368]         if (TRUE) {
[09:31:45.368]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:45.368]                 open = "w")
[09:31:45.368]         }
[09:31:45.368]         else {
[09:31:45.368]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:45.368]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:45.368]         }
[09:31:45.368]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:45.368]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:45.368]             base::sink(type = "output", split = FALSE)
[09:31:45.368]             base::close(...future.stdout)
[09:31:45.368]         }, add = TRUE)
[09:31:45.368]     }
[09:31:45.368]     ...future.frame <- base::sys.nframe()
[09:31:45.368]     ...future.conditions <- base::list()
[09:31:45.368]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:45.368]     if (FALSE) {
[09:31:45.368]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:45.368]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:45.368]     }
[09:31:45.368]     ...future.result <- base::tryCatch({
[09:31:45.368]         base::withCallingHandlers({
[09:31:45.368]             ...future.value <- base::withVisible(base::local({
[09:31:45.368]                 withCallingHandlers({
[09:31:45.368]                   {
[09:31:45.368]                     ii
[09:31:45.368]                   }
[09:31:45.368]                 }, immediateCondition = function(cond) {
[09:31:45.368]                   save_rds <- function (object, pathname, ...) 
[09:31:45.368]                   {
[09:31:45.368]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:31:45.368]                     if (file_test("-f", pathname_tmp)) {
[09:31:45.368]                       fi_tmp <- file.info(pathname_tmp)
[09:31:45.368]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:31:45.368]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:45.368]                         fi_tmp[["mtime"]])
[09:31:45.368]                     }
[09:31:45.368]                     tryCatch({
[09:31:45.368]                       saveRDS(object, file = pathname_tmp, ...)
[09:31:45.368]                     }, error = function(ex) {
[09:31:45.368]                       msg <- conditionMessage(ex)
[09:31:45.368]                       fi_tmp <- file.info(pathname_tmp)
[09:31:45.368]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:31:45.368]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:45.368]                         fi_tmp[["mtime"]], msg)
[09:31:45.368]                       ex$message <- msg
[09:31:45.368]                       stop(ex)
[09:31:45.368]                     })
[09:31:45.368]                     stopifnot(file_test("-f", pathname_tmp))
[09:31:45.368]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:31:45.368]                     if (!res || file_test("-f", pathname_tmp)) {
[09:31:45.368]                       fi_tmp <- file.info(pathname_tmp)
[09:31:45.368]                       fi <- file.info(pathname)
[09:31:45.368]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:31:45.368]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:45.368]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:31:45.368]                         fi[["size"]], fi[["mtime"]])
[09:31:45.368]                       stop(msg)
[09:31:45.368]                     }
[09:31:45.368]                     invisible(pathname)
[09:31:45.368]                   }
[09:31:45.368]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:31:45.368]                     rootPath = tempdir()) 
[09:31:45.368]                   {
[09:31:45.368]                     obj <- list(time = Sys.time(), condition = cond)
[09:31:45.368]                     file <- tempfile(pattern = class(cond)[1], 
[09:31:45.368]                       tmpdir = path, fileext = ".rds")
[09:31:45.368]                     save_rds(obj, file)
[09:31:45.368]                   }
[09:31:45.368]                   saveImmediateCondition(cond, path = "/tmp/RtmpMXzm1h/.future/immediateConditions")
[09:31:45.368]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.368]                   {
[09:31:45.368]                     inherits <- base::inherits
[09:31:45.368]                     invokeRestart <- base::invokeRestart
[09:31:45.368]                     is.null <- base::is.null
[09:31:45.368]                     muffled <- FALSE
[09:31:45.368]                     if (inherits(cond, "message")) {
[09:31:45.368]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:45.368]                       if (muffled) 
[09:31:45.368]                         invokeRestart("muffleMessage")
[09:31:45.368]                     }
[09:31:45.368]                     else if (inherits(cond, "warning")) {
[09:31:45.368]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:45.368]                       if (muffled) 
[09:31:45.368]                         invokeRestart("muffleWarning")
[09:31:45.368]                     }
[09:31:45.368]                     else if (inherits(cond, "condition")) {
[09:31:45.368]                       if (!is.null(pattern)) {
[09:31:45.368]                         computeRestarts <- base::computeRestarts
[09:31:45.368]                         grepl <- base::grepl
[09:31:45.368]                         restarts <- computeRestarts(cond)
[09:31:45.368]                         for (restart in restarts) {
[09:31:45.368]                           name <- restart$name
[09:31:45.368]                           if (is.null(name)) 
[09:31:45.368]                             next
[09:31:45.368]                           if (!grepl(pattern, name)) 
[09:31:45.368]                             next
[09:31:45.368]                           invokeRestart(restart)
[09:31:45.368]                           muffled <- TRUE
[09:31:45.368]                           break
[09:31:45.368]                         }
[09:31:45.368]                       }
[09:31:45.368]                     }
[09:31:45.368]                     invisible(muffled)
[09:31:45.368]                   }
[09:31:45.368]                   muffleCondition(cond)
[09:31:45.368]                 })
[09:31:45.368]             }))
[09:31:45.368]             future::FutureResult(value = ...future.value$value, 
[09:31:45.368]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.368]                   ...future.rng), globalenv = if (FALSE) 
[09:31:45.368]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:45.368]                     ...future.globalenv.names))
[09:31:45.368]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:45.368]         }, condition = base::local({
[09:31:45.368]             c <- base::c
[09:31:45.368]             inherits <- base::inherits
[09:31:45.368]             invokeRestart <- base::invokeRestart
[09:31:45.368]             length <- base::length
[09:31:45.368]             list <- base::list
[09:31:45.368]             seq.int <- base::seq.int
[09:31:45.368]             signalCondition <- base::signalCondition
[09:31:45.368]             sys.calls <- base::sys.calls
[09:31:45.368]             `[[` <- base::`[[`
[09:31:45.368]             `+` <- base::`+`
[09:31:45.368]             `<<-` <- base::`<<-`
[09:31:45.368]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:45.368]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:45.368]                   3L)]
[09:31:45.368]             }
[09:31:45.368]             function(cond) {
[09:31:45.368]                 is_error <- inherits(cond, "error")
[09:31:45.368]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:45.368]                   NULL)
[09:31:45.368]                 if (is_error) {
[09:31:45.368]                   sessionInformation <- function() {
[09:31:45.368]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:45.368]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:45.368]                       search = base::search(), system = base::Sys.info())
[09:31:45.368]                   }
[09:31:45.368]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.368]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:45.368]                     cond$call), session = sessionInformation(), 
[09:31:45.368]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:45.368]                   signalCondition(cond)
[09:31:45.368]                 }
[09:31:45.368]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:45.368]                 "immediateCondition"))) {
[09:31:45.368]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:45.368]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.368]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:45.368]                   if (TRUE && !signal) {
[09:31:45.368]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.368]                     {
[09:31:45.368]                       inherits <- base::inherits
[09:31:45.368]                       invokeRestart <- base::invokeRestart
[09:31:45.368]                       is.null <- base::is.null
[09:31:45.368]                       muffled <- FALSE
[09:31:45.368]                       if (inherits(cond, "message")) {
[09:31:45.368]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.368]                         if (muffled) 
[09:31:45.368]                           invokeRestart("muffleMessage")
[09:31:45.368]                       }
[09:31:45.368]                       else if (inherits(cond, "warning")) {
[09:31:45.368]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.368]                         if (muffled) 
[09:31:45.368]                           invokeRestart("muffleWarning")
[09:31:45.368]                       }
[09:31:45.368]                       else if (inherits(cond, "condition")) {
[09:31:45.368]                         if (!is.null(pattern)) {
[09:31:45.368]                           computeRestarts <- base::computeRestarts
[09:31:45.368]                           grepl <- base::grepl
[09:31:45.368]                           restarts <- computeRestarts(cond)
[09:31:45.368]                           for (restart in restarts) {
[09:31:45.368]                             name <- restart$name
[09:31:45.368]                             if (is.null(name)) 
[09:31:45.368]                               next
[09:31:45.368]                             if (!grepl(pattern, name)) 
[09:31:45.368]                               next
[09:31:45.368]                             invokeRestart(restart)
[09:31:45.368]                             muffled <- TRUE
[09:31:45.368]                             break
[09:31:45.368]                           }
[09:31:45.368]                         }
[09:31:45.368]                       }
[09:31:45.368]                       invisible(muffled)
[09:31:45.368]                     }
[09:31:45.368]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.368]                   }
[09:31:45.368]                 }
[09:31:45.368]                 else {
[09:31:45.368]                   if (TRUE) {
[09:31:45.368]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.368]                     {
[09:31:45.368]                       inherits <- base::inherits
[09:31:45.368]                       invokeRestart <- base::invokeRestart
[09:31:45.368]                       is.null <- base::is.null
[09:31:45.368]                       muffled <- FALSE
[09:31:45.368]                       if (inherits(cond, "message")) {
[09:31:45.368]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.368]                         if (muffled) 
[09:31:45.368]                           invokeRestart("muffleMessage")
[09:31:45.368]                       }
[09:31:45.368]                       else if (inherits(cond, "warning")) {
[09:31:45.368]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.368]                         if (muffled) 
[09:31:45.368]                           invokeRestart("muffleWarning")
[09:31:45.368]                       }
[09:31:45.368]                       else if (inherits(cond, "condition")) {
[09:31:45.368]                         if (!is.null(pattern)) {
[09:31:45.368]                           computeRestarts <- base::computeRestarts
[09:31:45.368]                           grepl <- base::grepl
[09:31:45.368]                           restarts <- computeRestarts(cond)
[09:31:45.368]                           for (restart in restarts) {
[09:31:45.368]                             name <- restart$name
[09:31:45.368]                             if (is.null(name)) 
[09:31:45.368]                               next
[09:31:45.368]                             if (!grepl(pattern, name)) 
[09:31:45.368]                               next
[09:31:45.368]                             invokeRestart(restart)
[09:31:45.368]                             muffled <- TRUE
[09:31:45.368]                             break
[09:31:45.368]                           }
[09:31:45.368]                         }
[09:31:45.368]                       }
[09:31:45.368]                       invisible(muffled)
[09:31:45.368]                     }
[09:31:45.368]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.368]                   }
[09:31:45.368]                 }
[09:31:45.368]             }
[09:31:45.368]         }))
[09:31:45.368]     }, error = function(ex) {
[09:31:45.368]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:45.368]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.368]                 ...future.rng), started = ...future.startTime, 
[09:31:45.368]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:45.368]             version = "1.8"), class = "FutureResult")
[09:31:45.368]     }, finally = {
[09:31:45.368]         if (!identical(...future.workdir, getwd())) 
[09:31:45.368]             setwd(...future.workdir)
[09:31:45.368]         {
[09:31:45.368]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:45.368]                 ...future.oldOptions$nwarnings <- NULL
[09:31:45.368]             }
[09:31:45.368]             base::options(...future.oldOptions)
[09:31:45.368]             if (.Platform$OS.type == "windows") {
[09:31:45.368]                 old_names <- names(...future.oldEnvVars)
[09:31:45.368]                 envs <- base::Sys.getenv()
[09:31:45.368]                 names <- names(envs)
[09:31:45.368]                 common <- intersect(names, old_names)
[09:31:45.368]                 added <- setdiff(names, old_names)
[09:31:45.368]                 removed <- setdiff(old_names, names)
[09:31:45.368]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:45.368]                   envs[common]]
[09:31:45.368]                 NAMES <- toupper(changed)
[09:31:45.368]                 args <- list()
[09:31:45.368]                 for (kk in seq_along(NAMES)) {
[09:31:45.368]                   name <- changed[[kk]]
[09:31:45.368]                   NAME <- NAMES[[kk]]
[09:31:45.368]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.368]                     next
[09:31:45.368]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.368]                 }
[09:31:45.368]                 NAMES <- toupper(added)
[09:31:45.368]                 for (kk in seq_along(NAMES)) {
[09:31:45.368]                   name <- added[[kk]]
[09:31:45.368]                   NAME <- NAMES[[kk]]
[09:31:45.368]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.368]                     next
[09:31:45.368]                   args[[name]] <- ""
[09:31:45.368]                 }
[09:31:45.368]                 NAMES <- toupper(removed)
[09:31:45.368]                 for (kk in seq_along(NAMES)) {
[09:31:45.368]                   name <- removed[[kk]]
[09:31:45.368]                   NAME <- NAMES[[kk]]
[09:31:45.368]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.368]                     next
[09:31:45.368]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.368]                 }
[09:31:45.368]                 if (length(args) > 0) 
[09:31:45.368]                   base::do.call(base::Sys.setenv, args = args)
[09:31:45.368]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:45.368]             }
[09:31:45.368]             else {
[09:31:45.368]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:45.368]             }
[09:31:45.368]             {
[09:31:45.368]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:45.368]                   0L) {
[09:31:45.368]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:45.368]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:45.368]                   base::options(opts)
[09:31:45.368]                 }
[09:31:45.368]                 {
[09:31:45.368]                   {
[09:31:45.368]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:45.368]                     NULL
[09:31:45.368]                   }
[09:31:45.368]                   options(future.plan = NULL)
[09:31:45.368]                   if (is.na(NA_character_)) 
[09:31:45.368]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.368]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:45.368]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:45.368]                     .init = FALSE)
[09:31:45.368]                 }
[09:31:45.368]             }
[09:31:45.368]         }
[09:31:45.368]     })
[09:31:45.368]     if (TRUE) {
[09:31:45.368]         base::sink(type = "output", split = FALSE)
[09:31:45.368]         if (TRUE) {
[09:31:45.368]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:45.368]         }
[09:31:45.368]         else {
[09:31:45.368]             ...future.result["stdout"] <- base::list(NULL)
[09:31:45.368]         }
[09:31:45.368]         base::close(...future.stdout)
[09:31:45.368]         ...future.stdout <- NULL
[09:31:45.368]     }
[09:31:45.368]     ...future.result$conditions <- ...future.conditions
[09:31:45.368]     ...future.result$finished <- base::Sys.time()
[09:31:45.368]     ...future.result
[09:31:45.368] }
[09:31:45.370] requestCore(): workers = 2
[09:31:45.371] MulticoreFuture started
 - Creating multicore future #2 ...
[09:31:45.372] plan(): Setting new future strategy stack:
[09:31:45.373] List of future strategies:
[09:31:45.373] 1. sequential:
[09:31:45.373]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:45.373]    - tweaked: FALSE
[09:31:45.373]    - call: NULL
[09:31:45.374] plan(): nbrOfWorkers() = 1
[09:31:45.376] plan(): Setting new future strategy stack:
[09:31:45.376] List of future strategies:
[09:31:45.376] 1. multicore:
[09:31:45.376]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:45.376]    - tweaked: FALSE
[09:31:45.376]    - call: plan(multicore)
[09:31:45.377] getGlobalsAndPackages() ...
[09:31:45.377] Not searching for globals
[09:31:45.377] - globals: [0] <none>
[09:31:45.377] getGlobalsAndPackages() ... DONE
[09:31:45.378] Packages needed by the future expression (n = 0): <none>
[09:31:45.378] Packages needed by future strategies (n = 0): <none>
[09:31:45.380] plan(): nbrOfWorkers() = 2
[09:31:45.379] {
[09:31:45.379]     {
[09:31:45.379]         {
[09:31:45.379]             ...future.startTime <- base::Sys.time()
[09:31:45.379]             {
[09:31:45.379]                 {
[09:31:45.379]                   {
[09:31:45.379]                     {
[09:31:45.379]                       base::local({
[09:31:45.379]                         has_future <- base::requireNamespace("future", 
[09:31:45.379]                           quietly = TRUE)
[09:31:45.379]                         if (has_future) {
[09:31:45.379]                           ns <- base::getNamespace("future")
[09:31:45.379]                           version <- ns[[".package"]][["version"]]
[09:31:45.379]                           if (is.null(version)) 
[09:31:45.379]                             version <- utils::packageVersion("future")
[09:31:45.379]                         }
[09:31:45.379]                         else {
[09:31:45.379]                           version <- NULL
[09:31:45.379]                         }
[09:31:45.379]                         if (!has_future || version < "1.8.0") {
[09:31:45.379]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:45.379]                             "", base::R.version$version.string), 
[09:31:45.379]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:45.379]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:45.379]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:45.379]                               "release", "version")], collapse = " "), 
[09:31:45.379]                             hostname = base::Sys.info()[["nodename"]])
[09:31:45.379]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:45.379]                             info)
[09:31:45.379]                           info <- base::paste(info, collapse = "; ")
[09:31:45.379]                           if (!has_future) {
[09:31:45.379]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:45.379]                               info)
[09:31:45.379]                           }
[09:31:45.379]                           else {
[09:31:45.379]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:45.379]                               info, version)
[09:31:45.379]                           }
[09:31:45.379]                           base::stop(msg)
[09:31:45.379]                         }
[09:31:45.379]                       })
[09:31:45.379]                     }
[09:31:45.379]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:45.379]                     base::options(mc.cores = 1L)
[09:31:45.379]                   }
[09:31:45.379]                   ...future.strategy.old <- future::plan("list")
[09:31:45.379]                   options(future.plan = NULL)
[09:31:45.379]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.379]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:45.379]                 }
[09:31:45.379]                 ...future.workdir <- getwd()
[09:31:45.379]             }
[09:31:45.379]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:45.379]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:45.379]         }
[09:31:45.379]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:45.379]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:45.379]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:45.379]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:45.379]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:45.379]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:45.379]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:45.379]             base::names(...future.oldOptions))
[09:31:45.379]     }
[09:31:45.379]     if (FALSE) {
[09:31:45.379]     }
[09:31:45.379]     else {
[09:31:45.379]         if (TRUE) {
[09:31:45.379]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:45.379]                 open = "w")
[09:31:45.379]         }
[09:31:45.379]         else {
[09:31:45.379]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:45.379]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:45.379]         }
[09:31:45.379]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:45.379]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:45.379]             base::sink(type = "output", split = FALSE)
[09:31:45.379]             base::close(...future.stdout)
[09:31:45.379]         }, add = TRUE)
[09:31:45.379]     }
[09:31:45.379]     ...future.frame <- base::sys.nframe()
[09:31:45.379]     ...future.conditions <- base::list()
[09:31:45.379]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:45.379]     if (FALSE) {
[09:31:45.379]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:45.379]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:45.379]     }
[09:31:45.379]     ...future.result <- base::tryCatch({
[09:31:45.379]         base::withCallingHandlers({
[09:31:45.379]             ...future.value <- base::withVisible(base::local({
[09:31:45.379]                 withCallingHandlers({
[09:31:45.379]                   {
[09:31:45.379]                     ii
[09:31:45.379]                   }
[09:31:45.379]                 }, immediateCondition = function(cond) {
[09:31:45.379]                   save_rds <- function (object, pathname, ...) 
[09:31:45.379]                   {
[09:31:45.379]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:31:45.379]                     if (file_test("-f", pathname_tmp)) {
[09:31:45.379]                       fi_tmp <- file.info(pathname_tmp)
[09:31:45.379]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:31:45.379]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:45.379]                         fi_tmp[["mtime"]])
[09:31:45.379]                     }
[09:31:45.379]                     tryCatch({
[09:31:45.379]                       saveRDS(object, file = pathname_tmp, ...)
[09:31:45.379]                     }, error = function(ex) {
[09:31:45.379]                       msg <- conditionMessage(ex)
[09:31:45.379]                       fi_tmp <- file.info(pathname_tmp)
[09:31:45.379]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:31:45.379]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:45.379]                         fi_tmp[["mtime"]], msg)
[09:31:45.379]                       ex$message <- msg
[09:31:45.379]                       stop(ex)
[09:31:45.379]                     })
[09:31:45.379]                     stopifnot(file_test("-f", pathname_tmp))
[09:31:45.379]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:31:45.379]                     if (!res || file_test("-f", pathname_tmp)) {
[09:31:45.379]                       fi_tmp <- file.info(pathname_tmp)
[09:31:45.379]                       fi <- file.info(pathname)
[09:31:45.379]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:31:45.379]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:45.379]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:31:45.379]                         fi[["size"]], fi[["mtime"]])
[09:31:45.379]                       stop(msg)
[09:31:45.379]                     }
[09:31:45.379]                     invisible(pathname)
[09:31:45.379]                   }
[09:31:45.379]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:31:45.379]                     rootPath = tempdir()) 
[09:31:45.379]                   {
[09:31:45.379]                     obj <- list(time = Sys.time(), condition = cond)
[09:31:45.379]                     file <- tempfile(pattern = class(cond)[1], 
[09:31:45.379]                       tmpdir = path, fileext = ".rds")
[09:31:45.379]                     save_rds(obj, file)
[09:31:45.379]                   }
[09:31:45.379]                   saveImmediateCondition(cond, path = "/tmp/RtmpMXzm1h/.future/immediateConditions")
[09:31:45.379]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.379]                   {
[09:31:45.379]                     inherits <- base::inherits
[09:31:45.379]                     invokeRestart <- base::invokeRestart
[09:31:45.379]                     is.null <- base::is.null
[09:31:45.379]                     muffled <- FALSE
[09:31:45.379]                     if (inherits(cond, "message")) {
[09:31:45.379]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:45.379]                       if (muffled) 
[09:31:45.379]                         invokeRestart("muffleMessage")
[09:31:45.379]                     }
[09:31:45.379]                     else if (inherits(cond, "warning")) {
[09:31:45.379]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:45.379]                       if (muffled) 
[09:31:45.379]                         invokeRestart("muffleWarning")
[09:31:45.379]                     }
[09:31:45.379]                     else if (inherits(cond, "condition")) {
[09:31:45.379]                       if (!is.null(pattern)) {
[09:31:45.379]                         computeRestarts <- base::computeRestarts
[09:31:45.379]                         grepl <- base::grepl
[09:31:45.379]                         restarts <- computeRestarts(cond)
[09:31:45.379]                         for (restart in restarts) {
[09:31:45.379]                           name <- restart$name
[09:31:45.379]                           if (is.null(name)) 
[09:31:45.379]                             next
[09:31:45.379]                           if (!grepl(pattern, name)) 
[09:31:45.379]                             next
[09:31:45.379]                           invokeRestart(restart)
[09:31:45.379]                           muffled <- TRUE
[09:31:45.379]                           break
[09:31:45.379]                         }
[09:31:45.379]                       }
[09:31:45.379]                     }
[09:31:45.379]                     invisible(muffled)
[09:31:45.379]                   }
[09:31:45.379]                   muffleCondition(cond)
[09:31:45.379]                 })
[09:31:45.379]             }))
[09:31:45.379]             future::FutureResult(value = ...future.value$value, 
[09:31:45.379]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.379]                   ...future.rng), globalenv = if (FALSE) 
[09:31:45.379]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:45.379]                     ...future.globalenv.names))
[09:31:45.379]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:45.379]         }, condition = base::local({
[09:31:45.379]             c <- base::c
[09:31:45.379]             inherits <- base::inherits
[09:31:45.379]             invokeRestart <- base::invokeRestart
[09:31:45.379]             length <- base::length
[09:31:45.379]             list <- base::list
[09:31:45.379]             seq.int <- base::seq.int
[09:31:45.379]             signalCondition <- base::signalCondition
[09:31:45.379]             sys.calls <- base::sys.calls
[09:31:45.379]             `[[` <- base::`[[`
[09:31:45.379]             `+` <- base::`+`
[09:31:45.379]             `<<-` <- base::`<<-`
[09:31:45.379]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:45.379]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:45.379]                   3L)]
[09:31:45.379]             }
[09:31:45.379]             function(cond) {
[09:31:45.379]                 is_error <- inherits(cond, "error")
[09:31:45.379]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:45.379]                   NULL)
[09:31:45.379]                 if (is_error) {
[09:31:45.379]                   sessionInformation <- function() {
[09:31:45.379]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:45.379]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:45.379]                       search = base::search(), system = base::Sys.info())
[09:31:45.379]                   }
[09:31:45.379]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.379]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:45.379]                     cond$call), session = sessionInformation(), 
[09:31:45.379]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:45.379]                   signalCondition(cond)
[09:31:45.379]                 }
[09:31:45.379]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:45.379]                 "immediateCondition"))) {
[09:31:45.379]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:45.379]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.379]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:45.379]                   if (TRUE && !signal) {
[09:31:45.379]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.379]                     {
[09:31:45.379]                       inherits <- base::inherits
[09:31:45.379]                       invokeRestart <- base::invokeRestart
[09:31:45.379]                       is.null <- base::is.null
[09:31:45.379]                       muffled <- FALSE
[09:31:45.379]                       if (inherits(cond, "message")) {
[09:31:45.379]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.379]                         if (muffled) 
[09:31:45.379]                           invokeRestart("muffleMessage")
[09:31:45.379]                       }
[09:31:45.379]                       else if (inherits(cond, "warning")) {
[09:31:45.379]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.379]                         if (muffled) 
[09:31:45.379]                           invokeRestart("muffleWarning")
[09:31:45.379]                       }
[09:31:45.379]                       else if (inherits(cond, "condition")) {
[09:31:45.379]                         if (!is.null(pattern)) {
[09:31:45.379]                           computeRestarts <- base::computeRestarts
[09:31:45.379]                           grepl <- base::grepl
[09:31:45.379]                           restarts <- computeRestarts(cond)
[09:31:45.379]                           for (restart in restarts) {
[09:31:45.379]                             name <- restart$name
[09:31:45.379]                             if (is.null(name)) 
[09:31:45.379]                               next
[09:31:45.379]                             if (!grepl(pattern, name)) 
[09:31:45.379]                               next
[09:31:45.379]                             invokeRestart(restart)
[09:31:45.379]                             muffled <- TRUE
[09:31:45.379]                             break
[09:31:45.379]                           }
[09:31:45.379]                         }
[09:31:45.379]                       }
[09:31:45.379]                       invisible(muffled)
[09:31:45.379]                     }
[09:31:45.379]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.379]                   }
[09:31:45.379]                 }
[09:31:45.379]                 else {
[09:31:45.379]                   if (TRUE) {
[09:31:45.379]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.379]                     {
[09:31:45.379]                       inherits <- base::inherits
[09:31:45.379]                       invokeRestart <- base::invokeRestart
[09:31:45.379]                       is.null <- base::is.null
[09:31:45.379]                       muffled <- FALSE
[09:31:45.379]                       if (inherits(cond, "message")) {
[09:31:45.379]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.379]                         if (muffled) 
[09:31:45.379]                           invokeRestart("muffleMessage")
[09:31:45.379]                       }
[09:31:45.379]                       else if (inherits(cond, "warning")) {
[09:31:45.379]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.379]                         if (muffled) 
[09:31:45.379]                           invokeRestart("muffleWarning")
[09:31:45.379]                       }
[09:31:45.379]                       else if (inherits(cond, "condition")) {
[09:31:45.379]                         if (!is.null(pattern)) {
[09:31:45.379]                           computeRestarts <- base::computeRestarts
[09:31:45.379]                           grepl <- base::grepl
[09:31:45.379]                           restarts <- computeRestarts(cond)
[09:31:45.379]                           for (restart in restarts) {
[09:31:45.379]                             name <- restart$name
[09:31:45.379]                             if (is.null(name)) 
[09:31:45.379]                               next
[09:31:45.379]                             if (!grepl(pattern, name)) 
[09:31:45.379]                               next
[09:31:45.379]                             invokeRestart(restart)
[09:31:45.379]                             muffled <- TRUE
[09:31:45.379]                             break
[09:31:45.379]                           }
[09:31:45.379]                         }
[09:31:45.379]                       }
[09:31:45.379]                       invisible(muffled)
[09:31:45.379]                     }
[09:31:45.379]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.379]                   }
[09:31:45.379]                 }
[09:31:45.379]             }
[09:31:45.379]         }))
[09:31:45.379]     }, error = function(ex) {
[09:31:45.379]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:45.379]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.379]                 ...future.rng), started = ...future.startTime, 
[09:31:45.379]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:45.379]             version = "1.8"), class = "FutureResult")
[09:31:45.379]     }, finally = {
[09:31:45.379]         if (!identical(...future.workdir, getwd())) 
[09:31:45.379]             setwd(...future.workdir)
[09:31:45.379]         {
[09:31:45.379]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:45.379]                 ...future.oldOptions$nwarnings <- NULL
[09:31:45.379]             }
[09:31:45.379]             base::options(...future.oldOptions)
[09:31:45.379]             if (.Platform$OS.type == "windows") {
[09:31:45.379]                 old_names <- names(...future.oldEnvVars)
[09:31:45.379]                 envs <- base::Sys.getenv()
[09:31:45.379]                 names <- names(envs)
[09:31:45.379]                 common <- intersect(names, old_names)
[09:31:45.379]                 added <- setdiff(names, old_names)
[09:31:45.379]                 removed <- setdiff(old_names, names)
[09:31:45.379]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:45.379]                   envs[common]]
[09:31:45.379]                 NAMES <- toupper(changed)
[09:31:45.379]                 args <- list()
[09:31:45.379]                 for (kk in seq_along(NAMES)) {
[09:31:45.379]                   name <- changed[[kk]]
[09:31:45.379]                   NAME <- NAMES[[kk]]
[09:31:45.379]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.379]                     next
[09:31:45.379]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.379]                 }
[09:31:45.379]                 NAMES <- toupper(added)
[09:31:45.379]                 for (kk in seq_along(NAMES)) {
[09:31:45.379]                   name <- added[[kk]]
[09:31:45.379]                   NAME <- NAMES[[kk]]
[09:31:45.379]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.379]                     next
[09:31:45.379]                   args[[name]] <- ""
[09:31:45.379]                 }
[09:31:45.379]                 NAMES <- toupper(removed)
[09:31:45.379]                 for (kk in seq_along(NAMES)) {
[09:31:45.379]                   name <- removed[[kk]]
[09:31:45.379]                   NAME <- NAMES[[kk]]
[09:31:45.379]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.379]                     next
[09:31:45.379]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.379]                 }
[09:31:45.379]                 if (length(args) > 0) 
[09:31:45.379]                   base::do.call(base::Sys.setenv, args = args)
[09:31:45.379]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:45.379]             }
[09:31:45.379]             else {
[09:31:45.379]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:45.379]             }
[09:31:45.379]             {
[09:31:45.379]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:45.379]                   0L) {
[09:31:45.379]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:45.379]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:45.379]                   base::options(opts)
[09:31:45.379]                 }
[09:31:45.379]                 {
[09:31:45.379]                   {
[09:31:45.379]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:45.379]                     NULL
[09:31:45.379]                   }
[09:31:45.379]                   options(future.plan = NULL)
[09:31:45.379]                   if (is.na(NA_character_)) 
[09:31:45.379]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.379]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:45.379]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:45.379]                     .init = FALSE)
[09:31:45.379]                 }
[09:31:45.379]             }
[09:31:45.379]         }
[09:31:45.379]     })
[09:31:45.379]     if (TRUE) {
[09:31:45.379]         base::sink(type = "output", split = FALSE)
[09:31:45.379]         if (TRUE) {
[09:31:45.379]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:45.379]         }
[09:31:45.379]         else {
[09:31:45.379]             ...future.result["stdout"] <- base::list(NULL)
[09:31:45.379]         }
[09:31:45.379]         base::close(...future.stdout)
[09:31:45.379]         ...future.stdout <- NULL
[09:31:45.379]     }
[09:31:45.379]     ...future.result$conditions <- ...future.conditions
[09:31:45.379]     ...future.result$finished <- base::Sys.time()
[09:31:45.379]     ...future.result
[09:31:45.379] }
[09:31:45.382] requestCore(): workers = 2
[09:31:45.384] MulticoreFuture started
 - Creating multicore future #3 ...
[09:31:45.385] plan(): Setting new future strategy stack:
[09:31:45.385] List of future strategies:
[09:31:45.385] 1. sequential:
[09:31:45.385]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:45.385]    - tweaked: FALSE
[09:31:45.385]    - call: NULL
[09:31:45.386] plan(): nbrOfWorkers() = 1
[09:31:45.388] plan(): Setting new future strategy stack:
[09:31:45.388] List of future strategies:
[09:31:45.388] 1. multicore:
[09:31:45.388]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:45.388]    - tweaked: FALSE
[09:31:45.388]    - call: plan(multicore)
[09:31:45.389] getGlobalsAndPackages() ...
[09:31:45.390] Not searching for globals
[09:31:45.390] - globals: [0] <none>
[09:31:45.390] getGlobalsAndPackages() ... DONE
[09:31:45.391] Packages needed by the future expression (n = 0): <none>
[09:31:45.391] Packages needed by future strategies (n = 0): <none>
[09:31:45.393] plan(): nbrOfWorkers() = 2
[09:31:45.392] {
[09:31:45.392]     {
[09:31:45.392]         {
[09:31:45.392]             ...future.startTime <- base::Sys.time()
[09:31:45.392]             {
[09:31:45.392]                 {
[09:31:45.392]                   {
[09:31:45.392]                     {
[09:31:45.392]                       base::local({
[09:31:45.392]                         has_future <- base::requireNamespace("future", 
[09:31:45.392]                           quietly = TRUE)
[09:31:45.392]                         if (has_future) {
[09:31:45.392]                           ns <- base::getNamespace("future")
[09:31:45.392]                           version <- ns[[".package"]][["version"]]
[09:31:45.392]                           if (is.null(version)) 
[09:31:45.392]                             version <- utils::packageVersion("future")
[09:31:45.392]                         }
[09:31:45.392]                         else {
[09:31:45.392]                           version <- NULL
[09:31:45.392]                         }
[09:31:45.392]                         if (!has_future || version < "1.8.0") {
[09:31:45.392]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:45.392]                             "", base::R.version$version.string), 
[09:31:45.392]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:45.392]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:45.392]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:45.392]                               "release", "version")], collapse = " "), 
[09:31:45.392]                             hostname = base::Sys.info()[["nodename"]])
[09:31:45.392]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:45.392]                             info)
[09:31:45.392]                           info <- base::paste(info, collapse = "; ")
[09:31:45.392]                           if (!has_future) {
[09:31:45.392]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:45.392]                               info)
[09:31:45.392]                           }
[09:31:45.392]                           else {
[09:31:45.392]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:45.392]                               info, version)
[09:31:45.392]                           }
[09:31:45.392]                           base::stop(msg)
[09:31:45.392]                         }
[09:31:45.392]                       })
[09:31:45.392]                     }
[09:31:45.392]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:45.392]                     base::options(mc.cores = 1L)
[09:31:45.392]                   }
[09:31:45.392]                   ...future.strategy.old <- future::plan("list")
[09:31:45.392]                   options(future.plan = NULL)
[09:31:45.392]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.392]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:45.392]                 }
[09:31:45.392]                 ...future.workdir <- getwd()
[09:31:45.392]             }
[09:31:45.392]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:45.392]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:45.392]         }
[09:31:45.392]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:45.392]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:45.392]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:45.392]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:45.392]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:45.392]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:45.392]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:45.392]             base::names(...future.oldOptions))
[09:31:45.392]     }
[09:31:45.392]     if (FALSE) {
[09:31:45.392]     }
[09:31:45.392]     else {
[09:31:45.392]         if (TRUE) {
[09:31:45.392]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:45.392]                 open = "w")
[09:31:45.392]         }
[09:31:45.392]         else {
[09:31:45.392]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:45.392]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:45.392]         }
[09:31:45.392]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:45.392]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:45.392]             base::sink(type = "output", split = FALSE)
[09:31:45.392]             base::close(...future.stdout)
[09:31:45.392]         }, add = TRUE)
[09:31:45.392]     }
[09:31:45.392]     ...future.frame <- base::sys.nframe()
[09:31:45.392]     ...future.conditions <- base::list()
[09:31:45.392]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:45.392]     if (FALSE) {
[09:31:45.392]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:45.392]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:45.392]     }
[09:31:45.392]     ...future.result <- base::tryCatch({
[09:31:45.392]         base::withCallingHandlers({
[09:31:45.392]             ...future.value <- base::withVisible(base::local({
[09:31:45.392]                 withCallingHandlers({
[09:31:45.392]                   {
[09:31:45.392]                     ii
[09:31:45.392]                   }
[09:31:45.392]                 }, immediateCondition = function(cond) {
[09:31:45.392]                   save_rds <- function (object, pathname, ...) 
[09:31:45.392]                   {
[09:31:45.392]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:31:45.392]                     if (file_test("-f", pathname_tmp)) {
[09:31:45.392]                       fi_tmp <- file.info(pathname_tmp)
[09:31:45.392]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:31:45.392]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:45.392]                         fi_tmp[["mtime"]])
[09:31:45.392]                     }
[09:31:45.392]                     tryCatch({
[09:31:45.392]                       saveRDS(object, file = pathname_tmp, ...)
[09:31:45.392]                     }, error = function(ex) {
[09:31:45.392]                       msg <- conditionMessage(ex)
[09:31:45.392]                       fi_tmp <- file.info(pathname_tmp)
[09:31:45.392]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:31:45.392]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:45.392]                         fi_tmp[["mtime"]], msg)
[09:31:45.392]                       ex$message <- msg
[09:31:45.392]                       stop(ex)
[09:31:45.392]                     })
[09:31:45.392]                     stopifnot(file_test("-f", pathname_tmp))
[09:31:45.392]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:31:45.392]                     if (!res || file_test("-f", pathname_tmp)) {
[09:31:45.392]                       fi_tmp <- file.info(pathname_tmp)
[09:31:45.392]                       fi <- file.info(pathname)
[09:31:45.392]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:31:45.392]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:45.392]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:31:45.392]                         fi[["size"]], fi[["mtime"]])
[09:31:45.392]                       stop(msg)
[09:31:45.392]                     }
[09:31:45.392]                     invisible(pathname)
[09:31:45.392]                   }
[09:31:45.392]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:31:45.392]                     rootPath = tempdir()) 
[09:31:45.392]                   {
[09:31:45.392]                     obj <- list(time = Sys.time(), condition = cond)
[09:31:45.392]                     file <- tempfile(pattern = class(cond)[1], 
[09:31:45.392]                       tmpdir = path, fileext = ".rds")
[09:31:45.392]                     save_rds(obj, file)
[09:31:45.392]                   }
[09:31:45.392]                   saveImmediateCondition(cond, path = "/tmp/RtmpMXzm1h/.future/immediateConditions")
[09:31:45.392]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.392]                   {
[09:31:45.392]                     inherits <- base::inherits
[09:31:45.392]                     invokeRestart <- base::invokeRestart
[09:31:45.392]                     is.null <- base::is.null
[09:31:45.392]                     muffled <- FALSE
[09:31:45.392]                     if (inherits(cond, "message")) {
[09:31:45.392]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:45.392]                       if (muffled) 
[09:31:45.392]                         invokeRestart("muffleMessage")
[09:31:45.392]                     }
[09:31:45.392]                     else if (inherits(cond, "warning")) {
[09:31:45.392]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:45.392]                       if (muffled) 
[09:31:45.392]                         invokeRestart("muffleWarning")
[09:31:45.392]                     }
[09:31:45.392]                     else if (inherits(cond, "condition")) {
[09:31:45.392]                       if (!is.null(pattern)) {
[09:31:45.392]                         computeRestarts <- base::computeRestarts
[09:31:45.392]                         grepl <- base::grepl
[09:31:45.392]                         restarts <- computeRestarts(cond)
[09:31:45.392]                         for (restart in restarts) {
[09:31:45.392]                           name <- restart$name
[09:31:45.392]                           if (is.null(name)) 
[09:31:45.392]                             next
[09:31:45.392]                           if (!grepl(pattern, name)) 
[09:31:45.392]                             next
[09:31:45.392]                           invokeRestart(restart)
[09:31:45.392]                           muffled <- TRUE
[09:31:45.392]                           break
[09:31:45.392]                         }
[09:31:45.392]                       }
[09:31:45.392]                     }
[09:31:45.392]                     invisible(muffled)
[09:31:45.392]                   }
[09:31:45.392]                   muffleCondition(cond)
[09:31:45.392]                 })
[09:31:45.392]             }))
[09:31:45.392]             future::FutureResult(value = ...future.value$value, 
[09:31:45.392]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.392]                   ...future.rng), globalenv = if (FALSE) 
[09:31:45.392]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:45.392]                     ...future.globalenv.names))
[09:31:45.392]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:45.392]         }, condition = base::local({
[09:31:45.392]             c <- base::c
[09:31:45.392]             inherits <- base::inherits
[09:31:45.392]             invokeRestart <- base::invokeRestart
[09:31:45.392]             length <- base::length
[09:31:45.392]             list <- base::list
[09:31:45.392]             seq.int <- base::seq.int
[09:31:45.392]             signalCondition <- base::signalCondition
[09:31:45.392]             sys.calls <- base::sys.calls
[09:31:45.392]             `[[` <- base::`[[`
[09:31:45.392]             `+` <- base::`+`
[09:31:45.392]             `<<-` <- base::`<<-`
[09:31:45.392]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:45.392]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:45.392]                   3L)]
[09:31:45.392]             }
[09:31:45.392]             function(cond) {
[09:31:45.392]                 is_error <- inherits(cond, "error")
[09:31:45.392]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:45.392]                   NULL)
[09:31:45.392]                 if (is_error) {
[09:31:45.392]                   sessionInformation <- function() {
[09:31:45.392]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:45.392]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:45.392]                       search = base::search(), system = base::Sys.info())
[09:31:45.392]                   }
[09:31:45.392]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.392]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:45.392]                     cond$call), session = sessionInformation(), 
[09:31:45.392]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:45.392]                   signalCondition(cond)
[09:31:45.392]                 }
[09:31:45.392]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:45.392]                 "immediateCondition"))) {
[09:31:45.392]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:45.392]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.392]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:45.392]                   if (TRUE && !signal) {
[09:31:45.392]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.392]                     {
[09:31:45.392]                       inherits <- base::inherits
[09:31:45.392]                       invokeRestart <- base::invokeRestart
[09:31:45.392]                       is.null <- base::is.null
[09:31:45.392]                       muffled <- FALSE
[09:31:45.392]                       if (inherits(cond, "message")) {
[09:31:45.392]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.392]                         if (muffled) 
[09:31:45.392]                           invokeRestart("muffleMessage")
[09:31:45.392]                       }
[09:31:45.392]                       else if (inherits(cond, "warning")) {
[09:31:45.392]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.392]                         if (muffled) 
[09:31:45.392]                           invokeRestart("muffleWarning")
[09:31:45.392]                       }
[09:31:45.392]                       else if (inherits(cond, "condition")) {
[09:31:45.392]                         if (!is.null(pattern)) {
[09:31:45.392]                           computeRestarts <- base::computeRestarts
[09:31:45.392]                           grepl <- base::grepl
[09:31:45.392]                           restarts <- computeRestarts(cond)
[09:31:45.392]                           for (restart in restarts) {
[09:31:45.392]                             name <- restart$name
[09:31:45.392]                             if (is.null(name)) 
[09:31:45.392]                               next
[09:31:45.392]                             if (!grepl(pattern, name)) 
[09:31:45.392]                               next
[09:31:45.392]                             invokeRestart(restart)
[09:31:45.392]                             muffled <- TRUE
[09:31:45.392]                             break
[09:31:45.392]                           }
[09:31:45.392]                         }
[09:31:45.392]                       }
[09:31:45.392]                       invisible(muffled)
[09:31:45.392]                     }
[09:31:45.392]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.392]                   }
[09:31:45.392]                 }
[09:31:45.392]                 else {
[09:31:45.392]                   if (TRUE) {
[09:31:45.392]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.392]                     {
[09:31:45.392]                       inherits <- base::inherits
[09:31:45.392]                       invokeRestart <- base::invokeRestart
[09:31:45.392]                       is.null <- base::is.null
[09:31:45.392]                       muffled <- FALSE
[09:31:45.392]                       if (inherits(cond, "message")) {
[09:31:45.392]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.392]                         if (muffled) 
[09:31:45.392]                           invokeRestart("muffleMessage")
[09:31:45.392]                       }
[09:31:45.392]                       else if (inherits(cond, "warning")) {
[09:31:45.392]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.392]                         if (muffled) 
[09:31:45.392]                           invokeRestart("muffleWarning")
[09:31:45.392]                       }
[09:31:45.392]                       else if (inherits(cond, "condition")) {
[09:31:45.392]                         if (!is.null(pattern)) {
[09:31:45.392]                           computeRestarts <- base::computeRestarts
[09:31:45.392]                           grepl <- base::grepl
[09:31:45.392]                           restarts <- computeRestarts(cond)
[09:31:45.392]                           for (restart in restarts) {
[09:31:45.392]                             name <- restart$name
[09:31:45.392]                             if (is.null(name)) 
[09:31:45.392]                               next
[09:31:45.392]                             if (!grepl(pattern, name)) 
[09:31:45.392]                               next
[09:31:45.392]                             invokeRestart(restart)
[09:31:45.392]                             muffled <- TRUE
[09:31:45.392]                             break
[09:31:45.392]                           }
[09:31:45.392]                         }
[09:31:45.392]                       }
[09:31:45.392]                       invisible(muffled)
[09:31:45.392]                     }
[09:31:45.392]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.392]                   }
[09:31:45.392]                 }
[09:31:45.392]             }
[09:31:45.392]         }))
[09:31:45.392]     }, error = function(ex) {
[09:31:45.392]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:45.392]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.392]                 ...future.rng), started = ...future.startTime, 
[09:31:45.392]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:45.392]             version = "1.8"), class = "FutureResult")
[09:31:45.392]     }, finally = {
[09:31:45.392]         if (!identical(...future.workdir, getwd())) 
[09:31:45.392]             setwd(...future.workdir)
[09:31:45.392]         {
[09:31:45.392]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:45.392]                 ...future.oldOptions$nwarnings <- NULL
[09:31:45.392]             }
[09:31:45.392]             base::options(...future.oldOptions)
[09:31:45.392]             if (.Platform$OS.type == "windows") {
[09:31:45.392]                 old_names <- names(...future.oldEnvVars)
[09:31:45.392]                 envs <- base::Sys.getenv()
[09:31:45.392]                 names <- names(envs)
[09:31:45.392]                 common <- intersect(names, old_names)
[09:31:45.392]                 added <- setdiff(names, old_names)
[09:31:45.392]                 removed <- setdiff(old_names, names)
[09:31:45.392]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:45.392]                   envs[common]]
[09:31:45.392]                 NAMES <- toupper(changed)
[09:31:45.392]                 args <- list()
[09:31:45.392]                 for (kk in seq_along(NAMES)) {
[09:31:45.392]                   name <- changed[[kk]]
[09:31:45.392]                   NAME <- NAMES[[kk]]
[09:31:45.392]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.392]                     next
[09:31:45.392]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.392]                 }
[09:31:45.392]                 NAMES <- toupper(added)
[09:31:45.392]                 for (kk in seq_along(NAMES)) {
[09:31:45.392]                   name <- added[[kk]]
[09:31:45.392]                   NAME <- NAMES[[kk]]
[09:31:45.392]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.392]                     next
[09:31:45.392]                   args[[name]] <- ""
[09:31:45.392]                 }
[09:31:45.392]                 NAMES <- toupper(removed)
[09:31:45.392]                 for (kk in seq_along(NAMES)) {
[09:31:45.392]                   name <- removed[[kk]]
[09:31:45.392]                   NAME <- NAMES[[kk]]
[09:31:45.392]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.392]                     next
[09:31:45.392]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.392]                 }
[09:31:45.392]                 if (length(args) > 0) 
[09:31:45.392]                   base::do.call(base::Sys.setenv, args = args)
[09:31:45.392]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:45.392]             }
[09:31:45.392]             else {
[09:31:45.392]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:45.392]             }
[09:31:45.392]             {
[09:31:45.392]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:45.392]                   0L) {
[09:31:45.392]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:45.392]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:45.392]                   base::options(opts)
[09:31:45.392]                 }
[09:31:45.392]                 {
[09:31:45.392]                   {
[09:31:45.392]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:45.392]                     NULL
[09:31:45.392]                   }
[09:31:45.392]                   options(future.plan = NULL)
[09:31:45.392]                   if (is.na(NA_character_)) 
[09:31:45.392]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.392]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:45.392]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:45.392]                     .init = FALSE)
[09:31:45.392]                 }
[09:31:45.392]             }
[09:31:45.392]         }
[09:31:45.392]     })
[09:31:45.392]     if (TRUE) {
[09:31:45.392]         base::sink(type = "output", split = FALSE)
[09:31:45.392]         if (TRUE) {
[09:31:45.392]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:45.392]         }
[09:31:45.392]         else {
[09:31:45.392]             ...future.result["stdout"] <- base::list(NULL)
[09:31:45.392]         }
[09:31:45.392]         base::close(...future.stdout)
[09:31:45.392]         ...future.stdout <- NULL
[09:31:45.392]     }
[09:31:45.392]     ...future.result$conditions <- ...future.conditions
[09:31:45.392]     ...future.result$finished <- base::Sys.time()
[09:31:45.392]     ...future.result
[09:31:45.392] }
[09:31:45.395] requestCore(): workers = 2
[09:31:45.395] Poll #1 (0): usedCores() = 2, workers = 2
[09:31:45.406] result() for MulticoreFuture ...
[09:31:45.407] result() for MulticoreFuture ...
[09:31:45.407] result() for MulticoreFuture ... done
[09:31:45.407] result() for MulticoreFuture ... done
[09:31:45.408] result() for MulticoreFuture ...
[09:31:45.408] result() for MulticoreFuture ... done
[09:31:45.410] MulticoreFuture started
 - Creating multicore future #4 ...
[09:31:45.411] plan(): Setting new future strategy stack:
[09:31:45.411] List of future strategies:
[09:31:45.411] 1. sequential:
[09:31:45.411]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:45.411]    - tweaked: FALSE
[09:31:45.411]    - call: NULL
[09:31:45.413] plan(): nbrOfWorkers() = 1
[09:31:45.414] plan(): Setting new future strategy stack:
[09:31:45.414] List of future strategies:
[09:31:45.414] 1. multicore:
[09:31:45.414]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:45.414]    - tweaked: FALSE
[09:31:45.414]    - call: plan(multicore)
[09:31:45.415] getGlobalsAndPackages() ...
[09:31:45.416] Not searching for globals
[09:31:45.416] - globals: [0] <none>
[09:31:45.416] getGlobalsAndPackages() ... DONE
[09:31:45.417] Packages needed by the future expression (n = 0): <none>
[09:31:45.417] Packages needed by future strategies (n = 0): <none>
[09:31:45.419] plan(): nbrOfWorkers() = 2
[09:31:45.418] {
[09:31:45.418]     {
[09:31:45.418]         {
[09:31:45.418]             ...future.startTime <- base::Sys.time()
[09:31:45.418]             {
[09:31:45.418]                 {
[09:31:45.418]                   {
[09:31:45.418]                     {
[09:31:45.418]                       base::local({
[09:31:45.418]                         has_future <- base::requireNamespace("future", 
[09:31:45.418]                           quietly = TRUE)
[09:31:45.418]                         if (has_future) {
[09:31:45.418]                           ns <- base::getNamespace("future")
[09:31:45.418]                           version <- ns[[".package"]][["version"]]
[09:31:45.418]                           if (is.null(version)) 
[09:31:45.418]                             version <- utils::packageVersion("future")
[09:31:45.418]                         }
[09:31:45.418]                         else {
[09:31:45.418]                           version <- NULL
[09:31:45.418]                         }
[09:31:45.418]                         if (!has_future || version < "1.8.0") {
[09:31:45.418]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:45.418]                             "", base::R.version$version.string), 
[09:31:45.418]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:45.418]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:45.418]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:45.418]                               "release", "version")], collapse = " "), 
[09:31:45.418]                             hostname = base::Sys.info()[["nodename"]])
[09:31:45.418]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:45.418]                             info)
[09:31:45.418]                           info <- base::paste(info, collapse = "; ")
[09:31:45.418]                           if (!has_future) {
[09:31:45.418]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:45.418]                               info)
[09:31:45.418]                           }
[09:31:45.418]                           else {
[09:31:45.418]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:45.418]                               info, version)
[09:31:45.418]                           }
[09:31:45.418]                           base::stop(msg)
[09:31:45.418]                         }
[09:31:45.418]                       })
[09:31:45.418]                     }
[09:31:45.418]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:45.418]                     base::options(mc.cores = 1L)
[09:31:45.418]                   }
[09:31:45.418]                   ...future.strategy.old <- future::plan("list")
[09:31:45.418]                   options(future.plan = NULL)
[09:31:45.418]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.418]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:45.418]                 }
[09:31:45.418]                 ...future.workdir <- getwd()
[09:31:45.418]             }
[09:31:45.418]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:45.418]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:45.418]         }
[09:31:45.418]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:45.418]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:45.418]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:45.418]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:45.418]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:45.418]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:45.418]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:45.418]             base::names(...future.oldOptions))
[09:31:45.418]     }
[09:31:45.418]     if (FALSE) {
[09:31:45.418]     }
[09:31:45.418]     else {
[09:31:45.418]         if (TRUE) {
[09:31:45.418]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:45.418]                 open = "w")
[09:31:45.418]         }
[09:31:45.418]         else {
[09:31:45.418]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:45.418]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:45.418]         }
[09:31:45.418]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:45.418]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:45.418]             base::sink(type = "output", split = FALSE)
[09:31:45.418]             base::close(...future.stdout)
[09:31:45.418]         }, add = TRUE)
[09:31:45.418]     }
[09:31:45.418]     ...future.frame <- base::sys.nframe()
[09:31:45.418]     ...future.conditions <- base::list()
[09:31:45.418]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:45.418]     if (FALSE) {
[09:31:45.418]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:45.418]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:45.418]     }
[09:31:45.418]     ...future.result <- base::tryCatch({
[09:31:45.418]         base::withCallingHandlers({
[09:31:45.418]             ...future.value <- base::withVisible(base::local({
[09:31:45.418]                 withCallingHandlers({
[09:31:45.418]                   {
[09:31:45.418]                     ii
[09:31:45.418]                   }
[09:31:45.418]                 }, immediateCondition = function(cond) {
[09:31:45.418]                   save_rds <- function (object, pathname, ...) 
[09:31:45.418]                   {
[09:31:45.418]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:31:45.418]                     if (file_test("-f", pathname_tmp)) {
[09:31:45.418]                       fi_tmp <- file.info(pathname_tmp)
[09:31:45.418]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:31:45.418]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:45.418]                         fi_tmp[["mtime"]])
[09:31:45.418]                     }
[09:31:45.418]                     tryCatch({
[09:31:45.418]                       saveRDS(object, file = pathname_tmp, ...)
[09:31:45.418]                     }, error = function(ex) {
[09:31:45.418]                       msg <- conditionMessage(ex)
[09:31:45.418]                       fi_tmp <- file.info(pathname_tmp)
[09:31:45.418]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:31:45.418]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:45.418]                         fi_tmp[["mtime"]], msg)
[09:31:45.418]                       ex$message <- msg
[09:31:45.418]                       stop(ex)
[09:31:45.418]                     })
[09:31:45.418]                     stopifnot(file_test("-f", pathname_tmp))
[09:31:45.418]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:31:45.418]                     if (!res || file_test("-f", pathname_tmp)) {
[09:31:45.418]                       fi_tmp <- file.info(pathname_tmp)
[09:31:45.418]                       fi <- file.info(pathname)
[09:31:45.418]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:31:45.418]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:45.418]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:31:45.418]                         fi[["size"]], fi[["mtime"]])
[09:31:45.418]                       stop(msg)
[09:31:45.418]                     }
[09:31:45.418]                     invisible(pathname)
[09:31:45.418]                   }
[09:31:45.418]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:31:45.418]                     rootPath = tempdir()) 
[09:31:45.418]                   {
[09:31:45.418]                     obj <- list(time = Sys.time(), condition = cond)
[09:31:45.418]                     file <- tempfile(pattern = class(cond)[1], 
[09:31:45.418]                       tmpdir = path, fileext = ".rds")
[09:31:45.418]                     save_rds(obj, file)
[09:31:45.418]                   }
[09:31:45.418]                   saveImmediateCondition(cond, path = "/tmp/RtmpMXzm1h/.future/immediateConditions")
[09:31:45.418]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.418]                   {
[09:31:45.418]                     inherits <- base::inherits
[09:31:45.418]                     invokeRestart <- base::invokeRestart
[09:31:45.418]                     is.null <- base::is.null
[09:31:45.418]                     muffled <- FALSE
[09:31:45.418]                     if (inherits(cond, "message")) {
[09:31:45.418]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:45.418]                       if (muffled) 
[09:31:45.418]                         invokeRestart("muffleMessage")
[09:31:45.418]                     }
[09:31:45.418]                     else if (inherits(cond, "warning")) {
[09:31:45.418]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:45.418]                       if (muffled) 
[09:31:45.418]                         invokeRestart("muffleWarning")
[09:31:45.418]                     }
[09:31:45.418]                     else if (inherits(cond, "condition")) {
[09:31:45.418]                       if (!is.null(pattern)) {
[09:31:45.418]                         computeRestarts <- base::computeRestarts
[09:31:45.418]                         grepl <- base::grepl
[09:31:45.418]                         restarts <- computeRestarts(cond)
[09:31:45.418]                         for (restart in restarts) {
[09:31:45.418]                           name <- restart$name
[09:31:45.418]                           if (is.null(name)) 
[09:31:45.418]                             next
[09:31:45.418]                           if (!grepl(pattern, name)) 
[09:31:45.418]                             next
[09:31:45.418]                           invokeRestart(restart)
[09:31:45.418]                           muffled <- TRUE
[09:31:45.418]                           break
[09:31:45.418]                         }
[09:31:45.418]                       }
[09:31:45.418]                     }
[09:31:45.418]                     invisible(muffled)
[09:31:45.418]                   }
[09:31:45.418]                   muffleCondition(cond)
[09:31:45.418]                 })
[09:31:45.418]             }))
[09:31:45.418]             future::FutureResult(value = ...future.value$value, 
[09:31:45.418]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.418]                   ...future.rng), globalenv = if (FALSE) 
[09:31:45.418]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:45.418]                     ...future.globalenv.names))
[09:31:45.418]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:45.418]         }, condition = base::local({
[09:31:45.418]             c <- base::c
[09:31:45.418]             inherits <- base::inherits
[09:31:45.418]             invokeRestart <- base::invokeRestart
[09:31:45.418]             length <- base::length
[09:31:45.418]             list <- base::list
[09:31:45.418]             seq.int <- base::seq.int
[09:31:45.418]             signalCondition <- base::signalCondition
[09:31:45.418]             sys.calls <- base::sys.calls
[09:31:45.418]             `[[` <- base::`[[`
[09:31:45.418]             `+` <- base::`+`
[09:31:45.418]             `<<-` <- base::`<<-`
[09:31:45.418]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:45.418]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:45.418]                   3L)]
[09:31:45.418]             }
[09:31:45.418]             function(cond) {
[09:31:45.418]                 is_error <- inherits(cond, "error")
[09:31:45.418]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:45.418]                   NULL)
[09:31:45.418]                 if (is_error) {
[09:31:45.418]                   sessionInformation <- function() {
[09:31:45.418]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:45.418]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:45.418]                       search = base::search(), system = base::Sys.info())
[09:31:45.418]                   }
[09:31:45.418]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.418]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:45.418]                     cond$call), session = sessionInformation(), 
[09:31:45.418]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:45.418]                   signalCondition(cond)
[09:31:45.418]                 }
[09:31:45.418]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:45.418]                 "immediateCondition"))) {
[09:31:45.418]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:45.418]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.418]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:45.418]                   if (TRUE && !signal) {
[09:31:45.418]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.418]                     {
[09:31:45.418]                       inherits <- base::inherits
[09:31:45.418]                       invokeRestart <- base::invokeRestart
[09:31:45.418]                       is.null <- base::is.null
[09:31:45.418]                       muffled <- FALSE
[09:31:45.418]                       if (inherits(cond, "message")) {
[09:31:45.418]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.418]                         if (muffled) 
[09:31:45.418]                           invokeRestart("muffleMessage")
[09:31:45.418]                       }
[09:31:45.418]                       else if (inherits(cond, "warning")) {
[09:31:45.418]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.418]                         if (muffled) 
[09:31:45.418]                           invokeRestart("muffleWarning")
[09:31:45.418]                       }
[09:31:45.418]                       else if (inherits(cond, "condition")) {
[09:31:45.418]                         if (!is.null(pattern)) {
[09:31:45.418]                           computeRestarts <- base::computeRestarts
[09:31:45.418]                           grepl <- base::grepl
[09:31:45.418]                           restarts <- computeRestarts(cond)
[09:31:45.418]                           for (restart in restarts) {
[09:31:45.418]                             name <- restart$name
[09:31:45.418]                             if (is.null(name)) 
[09:31:45.418]                               next
[09:31:45.418]                             if (!grepl(pattern, name)) 
[09:31:45.418]                               next
[09:31:45.418]                             invokeRestart(restart)
[09:31:45.418]                             muffled <- TRUE
[09:31:45.418]                             break
[09:31:45.418]                           }
[09:31:45.418]                         }
[09:31:45.418]                       }
[09:31:45.418]                       invisible(muffled)
[09:31:45.418]                     }
[09:31:45.418]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.418]                   }
[09:31:45.418]                 }
[09:31:45.418]                 else {
[09:31:45.418]                   if (TRUE) {
[09:31:45.418]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.418]                     {
[09:31:45.418]                       inherits <- base::inherits
[09:31:45.418]                       invokeRestart <- base::invokeRestart
[09:31:45.418]                       is.null <- base::is.null
[09:31:45.418]                       muffled <- FALSE
[09:31:45.418]                       if (inherits(cond, "message")) {
[09:31:45.418]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.418]                         if (muffled) 
[09:31:45.418]                           invokeRestart("muffleMessage")
[09:31:45.418]                       }
[09:31:45.418]                       else if (inherits(cond, "warning")) {
[09:31:45.418]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.418]                         if (muffled) 
[09:31:45.418]                           invokeRestart("muffleWarning")
[09:31:45.418]                       }
[09:31:45.418]                       else if (inherits(cond, "condition")) {
[09:31:45.418]                         if (!is.null(pattern)) {
[09:31:45.418]                           computeRestarts <- base::computeRestarts
[09:31:45.418]                           grepl <- base::grepl
[09:31:45.418]                           restarts <- computeRestarts(cond)
[09:31:45.418]                           for (restart in restarts) {
[09:31:45.418]                             name <- restart$name
[09:31:45.418]                             if (is.null(name)) 
[09:31:45.418]                               next
[09:31:45.418]                             if (!grepl(pattern, name)) 
[09:31:45.418]                               next
[09:31:45.418]                             invokeRestart(restart)
[09:31:45.418]                             muffled <- TRUE
[09:31:45.418]                             break
[09:31:45.418]                           }
[09:31:45.418]                         }
[09:31:45.418]                       }
[09:31:45.418]                       invisible(muffled)
[09:31:45.418]                     }
[09:31:45.418]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.418]                   }
[09:31:45.418]                 }
[09:31:45.418]             }
[09:31:45.418]         }))
[09:31:45.418]     }, error = function(ex) {
[09:31:45.418]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:45.418]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.418]                 ...future.rng), started = ...future.startTime, 
[09:31:45.418]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:45.418]             version = "1.8"), class = "FutureResult")
[09:31:45.418]     }, finally = {
[09:31:45.418]         if (!identical(...future.workdir, getwd())) 
[09:31:45.418]             setwd(...future.workdir)
[09:31:45.418]         {
[09:31:45.418]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:45.418]                 ...future.oldOptions$nwarnings <- NULL
[09:31:45.418]             }
[09:31:45.418]             base::options(...future.oldOptions)
[09:31:45.418]             if (.Platform$OS.type == "windows") {
[09:31:45.418]                 old_names <- names(...future.oldEnvVars)
[09:31:45.418]                 envs <- base::Sys.getenv()
[09:31:45.418]                 names <- names(envs)
[09:31:45.418]                 common <- intersect(names, old_names)
[09:31:45.418]                 added <- setdiff(names, old_names)
[09:31:45.418]                 removed <- setdiff(old_names, names)
[09:31:45.418]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:45.418]                   envs[common]]
[09:31:45.418]                 NAMES <- toupper(changed)
[09:31:45.418]                 args <- list()
[09:31:45.418]                 for (kk in seq_along(NAMES)) {
[09:31:45.418]                   name <- changed[[kk]]
[09:31:45.418]                   NAME <- NAMES[[kk]]
[09:31:45.418]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.418]                     next
[09:31:45.418]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.418]                 }
[09:31:45.418]                 NAMES <- toupper(added)
[09:31:45.418]                 for (kk in seq_along(NAMES)) {
[09:31:45.418]                   name <- added[[kk]]
[09:31:45.418]                   NAME <- NAMES[[kk]]
[09:31:45.418]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.418]                     next
[09:31:45.418]                   args[[name]] <- ""
[09:31:45.418]                 }
[09:31:45.418]                 NAMES <- toupper(removed)
[09:31:45.418]                 for (kk in seq_along(NAMES)) {
[09:31:45.418]                   name <- removed[[kk]]
[09:31:45.418]                   NAME <- NAMES[[kk]]
[09:31:45.418]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.418]                     next
[09:31:45.418]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.418]                 }
[09:31:45.418]                 if (length(args) > 0) 
[09:31:45.418]                   base::do.call(base::Sys.setenv, args = args)
[09:31:45.418]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:45.418]             }
[09:31:45.418]             else {
[09:31:45.418]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:45.418]             }
[09:31:45.418]             {
[09:31:45.418]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:45.418]                   0L) {
[09:31:45.418]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:45.418]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:45.418]                   base::options(opts)
[09:31:45.418]                 }
[09:31:45.418]                 {
[09:31:45.418]                   {
[09:31:45.418]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:45.418]                     NULL
[09:31:45.418]                   }
[09:31:45.418]                   options(future.plan = NULL)
[09:31:45.418]                   if (is.na(NA_character_)) 
[09:31:45.418]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.418]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:45.418]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:45.418]                     .init = FALSE)
[09:31:45.418]                 }
[09:31:45.418]             }
[09:31:45.418]         }
[09:31:45.418]     })
[09:31:45.418]     if (TRUE) {
[09:31:45.418]         base::sink(type = "output", split = FALSE)
[09:31:45.418]         if (TRUE) {
[09:31:45.418]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:45.418]         }
[09:31:45.418]         else {
[09:31:45.418]             ...future.result["stdout"] <- base::list(NULL)
[09:31:45.418]         }
[09:31:45.418]         base::close(...future.stdout)
[09:31:45.418]         ...future.stdout <- NULL
[09:31:45.418]     }
[09:31:45.418]     ...future.result$conditions <- ...future.conditions
[09:31:45.418]     ...future.result$finished <- base::Sys.time()
[09:31:45.418]     ...future.result
[09:31:45.418] }
[09:31:45.421] requestCore(): workers = 2
[09:31:45.421] Poll #1 (0): usedCores() = 2, workers = 2
[09:31:45.445] result() for MulticoreFuture ...
[09:31:45.446] result() for MulticoreFuture ...
[09:31:45.446] result() for MulticoreFuture ... done
[09:31:45.446] result() for MulticoreFuture ... done
[09:31:45.446] result() for MulticoreFuture ...
[09:31:45.450] result() for MulticoreFuture ... done
[09:31:45.452] MulticoreFuture started
 - Resolving 4 multicore futures
[09:31:45.453] result() for MulticoreFuture ...
[09:31:45.454] result() for MulticoreFuture ... done
[09:31:45.454] plan(): Setting new future strategy stack:
[09:31:45.454] result() for MulticoreFuture ...
[09:31:45.454] result() for MulticoreFuture ... done
[09:31:45.454] result() for MulticoreFuture ...
[09:31:45.455] result() for MulticoreFuture ... done
[09:31:45.455] result() for MulticoreFuture ...
[09:31:45.454] List of future strategies:
[09:31:45.454] 1. sequential:
[09:31:45.454]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:45.454]    - tweaked: FALSE
[09:31:45.454]    - call: NULL
[09:31:45.455] result() for MulticoreFuture ... done
[09:31:45.455] result() for MulticoreFuture ...
[09:31:45.455] plan(): nbrOfWorkers() = 1
[09:31:45.457] result() for MulticoreFuture ...
[09:31:45.457] result() for MulticoreFuture ... done
[09:31:45.457] result() for MulticoreFuture ... done
[09:31:45.457] result() for MulticoreFuture ...
[09:31:45.457] result() for MulticoreFuture ... done
[09:31:45.458] result() for MulticoreFuture ...
[09:31:45.458] plan(): Setting new future strategy stack:
[09:31:45.458] List of future strategies:
[09:31:45.458] 1. multicore:
[09:31:45.458]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:45.458]    - tweaked: FALSE
[09:31:45.458]    - call: plan(multicore)
[09:31:45.463] plan(): nbrOfWorkers() = 2
[09:31:45.464] result() for MulticoreFuture ...
[09:31:45.464] result() for MulticoreFuture ... done
[09:31:45.464] result() for MulticoreFuture ... done
[09:31:45.465] result() for MulticoreFuture ...
[09:31:45.465] result() for MulticoreFuture ... done
*** multicore(..., globals = FALSE) and errors
[09:31:45.469] getGlobalsAndPackages() ...
[09:31:45.469] Not searching for globals
[09:31:45.469] - globals: [0] <none>
[09:31:45.469] getGlobalsAndPackages() ... DONE
[09:31:45.470] Packages needed by the future expression (n = 0): <none>
[09:31:45.470] Packages needed by future strategies (n = 0): <none>
[09:31:45.470] {
[09:31:45.470]     {
[09:31:45.470]         {
[09:31:45.470]             ...future.startTime <- base::Sys.time()
[09:31:45.470]             {
[09:31:45.470]                 {
[09:31:45.470]                   {
[09:31:45.470]                     {
[09:31:45.470]                       base::local({
[09:31:45.470]                         has_future <- base::requireNamespace("future", 
[09:31:45.470]                           quietly = TRUE)
[09:31:45.470]                         if (has_future) {
[09:31:45.470]                           ns <- base::getNamespace("future")
[09:31:45.470]                           version <- ns[[".package"]][["version"]]
[09:31:45.470]                           if (is.null(version)) 
[09:31:45.470]                             version <- utils::packageVersion("future")
[09:31:45.470]                         }
[09:31:45.470]                         else {
[09:31:45.470]                           version <- NULL
[09:31:45.470]                         }
[09:31:45.470]                         if (!has_future || version < "1.8.0") {
[09:31:45.470]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:45.470]                             "", base::R.version$version.string), 
[09:31:45.470]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:45.470]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:45.470]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:45.470]                               "release", "version")], collapse = " "), 
[09:31:45.470]                             hostname = base::Sys.info()[["nodename"]])
[09:31:45.470]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:45.470]                             info)
[09:31:45.470]                           info <- base::paste(info, collapse = "; ")
[09:31:45.470]                           if (!has_future) {
[09:31:45.470]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:45.470]                               info)
[09:31:45.470]                           }
[09:31:45.470]                           else {
[09:31:45.470]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:45.470]                               info, version)
[09:31:45.470]                           }
[09:31:45.470]                           base::stop(msg)
[09:31:45.470]                         }
[09:31:45.470]                       })
[09:31:45.470]                     }
[09:31:45.470]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:45.470]                     base::options(mc.cores = 1L)
[09:31:45.470]                   }
[09:31:45.470]                   ...future.strategy.old <- future::plan("list")
[09:31:45.470]                   options(future.plan = NULL)
[09:31:45.470]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.470]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:45.470]                 }
[09:31:45.470]                 ...future.workdir <- getwd()
[09:31:45.470]             }
[09:31:45.470]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:45.470]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:45.470]         }
[09:31:45.470]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:45.470]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:45.470]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:45.470]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:45.470]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:45.470]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:45.470]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:45.470]             base::names(...future.oldOptions))
[09:31:45.470]     }
[09:31:45.470]     if (FALSE) {
[09:31:45.470]     }
[09:31:45.470]     else {
[09:31:45.470]         if (TRUE) {
[09:31:45.470]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:45.470]                 open = "w")
[09:31:45.470]         }
[09:31:45.470]         else {
[09:31:45.470]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:45.470]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:45.470]         }
[09:31:45.470]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:45.470]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:45.470]             base::sink(type = "output", split = FALSE)
[09:31:45.470]             base::close(...future.stdout)
[09:31:45.470]         }, add = TRUE)
[09:31:45.470]     }
[09:31:45.470]     ...future.frame <- base::sys.nframe()
[09:31:45.470]     ...future.conditions <- base::list()
[09:31:45.470]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:45.470]     if (FALSE) {
[09:31:45.470]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:45.470]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:45.470]     }
[09:31:45.470]     ...future.result <- base::tryCatch({
[09:31:45.470]         base::withCallingHandlers({
[09:31:45.470]             ...future.value <- base::withVisible(base::local({
[09:31:45.470]                 withCallingHandlers({
[09:31:45.470]                   {
[09:31:45.470]                     stop("Whoops!")
[09:31:45.470]                     1
[09:31:45.470]                   }
[09:31:45.470]                 }, immediateCondition = function(cond) {
[09:31:45.470]                   save_rds <- function (object, pathname, ...) 
[09:31:45.470]                   {
[09:31:45.470]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:31:45.470]                     if (file_test("-f", pathname_tmp)) {
[09:31:45.470]                       fi_tmp <- file.info(pathname_tmp)
[09:31:45.470]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:31:45.470]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:45.470]                         fi_tmp[["mtime"]])
[09:31:45.470]                     }
[09:31:45.470]                     tryCatch({
[09:31:45.470]                       saveRDS(object, file = pathname_tmp, ...)
[09:31:45.470]                     }, error = function(ex) {
[09:31:45.470]                       msg <- conditionMessage(ex)
[09:31:45.470]                       fi_tmp <- file.info(pathname_tmp)
[09:31:45.470]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:31:45.470]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:45.470]                         fi_tmp[["mtime"]], msg)
[09:31:45.470]                       ex$message <- msg
[09:31:45.470]                       stop(ex)
[09:31:45.470]                     })
[09:31:45.470]                     stopifnot(file_test("-f", pathname_tmp))
[09:31:45.470]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:31:45.470]                     if (!res || file_test("-f", pathname_tmp)) {
[09:31:45.470]                       fi_tmp <- file.info(pathname_tmp)
[09:31:45.470]                       fi <- file.info(pathname)
[09:31:45.470]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:31:45.470]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:45.470]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:31:45.470]                         fi[["size"]], fi[["mtime"]])
[09:31:45.470]                       stop(msg)
[09:31:45.470]                     }
[09:31:45.470]                     invisible(pathname)
[09:31:45.470]                   }
[09:31:45.470]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:31:45.470]                     rootPath = tempdir()) 
[09:31:45.470]                   {
[09:31:45.470]                     obj <- list(time = Sys.time(), condition = cond)
[09:31:45.470]                     file <- tempfile(pattern = class(cond)[1], 
[09:31:45.470]                       tmpdir = path, fileext = ".rds")
[09:31:45.470]                     save_rds(obj, file)
[09:31:45.470]                   }
[09:31:45.470]                   saveImmediateCondition(cond, path = "/tmp/RtmpMXzm1h/.future/immediateConditions")
[09:31:45.470]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.470]                   {
[09:31:45.470]                     inherits <- base::inherits
[09:31:45.470]                     invokeRestart <- base::invokeRestart
[09:31:45.470]                     is.null <- base::is.null
[09:31:45.470]                     muffled <- FALSE
[09:31:45.470]                     if (inherits(cond, "message")) {
[09:31:45.470]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:45.470]                       if (muffled) 
[09:31:45.470]                         invokeRestart("muffleMessage")
[09:31:45.470]                     }
[09:31:45.470]                     else if (inherits(cond, "warning")) {
[09:31:45.470]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:45.470]                       if (muffled) 
[09:31:45.470]                         invokeRestart("muffleWarning")
[09:31:45.470]                     }
[09:31:45.470]                     else if (inherits(cond, "condition")) {
[09:31:45.470]                       if (!is.null(pattern)) {
[09:31:45.470]                         computeRestarts <- base::computeRestarts
[09:31:45.470]                         grepl <- base::grepl
[09:31:45.470]                         restarts <- computeRestarts(cond)
[09:31:45.470]                         for (restart in restarts) {
[09:31:45.470]                           name <- restart$name
[09:31:45.470]                           if (is.null(name)) 
[09:31:45.470]                             next
[09:31:45.470]                           if (!grepl(pattern, name)) 
[09:31:45.470]                             next
[09:31:45.470]                           invokeRestart(restart)
[09:31:45.470]                           muffled <- TRUE
[09:31:45.470]                           break
[09:31:45.470]                         }
[09:31:45.470]                       }
[09:31:45.470]                     }
[09:31:45.470]                     invisible(muffled)
[09:31:45.470]                   }
[09:31:45.470]                   muffleCondition(cond)
[09:31:45.470]                 })
[09:31:45.470]             }))
[09:31:45.470]             future::FutureResult(value = ...future.value$value, 
[09:31:45.470]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.470]                   ...future.rng), globalenv = if (FALSE) 
[09:31:45.470]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:45.470]                     ...future.globalenv.names))
[09:31:45.470]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:45.470]         }, condition = base::local({
[09:31:45.470]             c <- base::c
[09:31:45.470]             inherits <- base::inherits
[09:31:45.470]             invokeRestart <- base::invokeRestart
[09:31:45.470]             length <- base::length
[09:31:45.470]             list <- base::list
[09:31:45.470]             seq.int <- base::seq.int
[09:31:45.470]             signalCondition <- base::signalCondition
[09:31:45.470]             sys.calls <- base::sys.calls
[09:31:45.470]             `[[` <- base::`[[`
[09:31:45.470]             `+` <- base::`+`
[09:31:45.470]             `<<-` <- base::`<<-`
[09:31:45.470]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:45.470]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:45.470]                   3L)]
[09:31:45.470]             }
[09:31:45.470]             function(cond) {
[09:31:45.470]                 is_error <- inherits(cond, "error")
[09:31:45.470]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:45.470]                   NULL)
[09:31:45.470]                 if (is_error) {
[09:31:45.470]                   sessionInformation <- function() {
[09:31:45.470]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:45.470]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:45.470]                       search = base::search(), system = base::Sys.info())
[09:31:45.470]                   }
[09:31:45.470]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.470]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:45.470]                     cond$call), session = sessionInformation(), 
[09:31:45.470]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:45.470]                   signalCondition(cond)
[09:31:45.470]                 }
[09:31:45.470]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:45.470]                 "immediateCondition"))) {
[09:31:45.470]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:45.470]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.470]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:45.470]                   if (TRUE && !signal) {
[09:31:45.470]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.470]                     {
[09:31:45.470]                       inherits <- base::inherits
[09:31:45.470]                       invokeRestart <- base::invokeRestart
[09:31:45.470]                       is.null <- base::is.null
[09:31:45.470]                       muffled <- FALSE
[09:31:45.470]                       if (inherits(cond, "message")) {
[09:31:45.470]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.470]                         if (muffled) 
[09:31:45.470]                           invokeRestart("muffleMessage")
[09:31:45.470]                       }
[09:31:45.470]                       else if (inherits(cond, "warning")) {
[09:31:45.470]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.470]                         if (muffled) 
[09:31:45.470]                           invokeRestart("muffleWarning")
[09:31:45.470]                       }
[09:31:45.470]                       else if (inherits(cond, "condition")) {
[09:31:45.470]                         if (!is.null(pattern)) {
[09:31:45.470]                           computeRestarts <- base::computeRestarts
[09:31:45.470]                           grepl <- base::grepl
[09:31:45.470]                           restarts <- computeRestarts(cond)
[09:31:45.470]                           for (restart in restarts) {
[09:31:45.470]                             name <- restart$name
[09:31:45.470]                             if (is.null(name)) 
[09:31:45.470]                               next
[09:31:45.470]                             if (!grepl(pattern, name)) 
[09:31:45.470]                               next
[09:31:45.470]                             invokeRestart(restart)
[09:31:45.470]                             muffled <- TRUE
[09:31:45.470]                             break
[09:31:45.470]                           }
[09:31:45.470]                         }
[09:31:45.470]                       }
[09:31:45.470]                       invisible(muffled)
[09:31:45.470]                     }
[09:31:45.470]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.470]                   }
[09:31:45.470]                 }
[09:31:45.470]                 else {
[09:31:45.470]                   if (TRUE) {
[09:31:45.470]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.470]                     {
[09:31:45.470]                       inherits <- base::inherits
[09:31:45.470]                       invokeRestart <- base::invokeRestart
[09:31:45.470]                       is.null <- base::is.null
[09:31:45.470]                       muffled <- FALSE
[09:31:45.470]                       if (inherits(cond, "message")) {
[09:31:45.470]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.470]                         if (muffled) 
[09:31:45.470]                           invokeRestart("muffleMessage")
[09:31:45.470]                       }
[09:31:45.470]                       else if (inherits(cond, "warning")) {
[09:31:45.470]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.470]                         if (muffled) 
[09:31:45.470]                           invokeRestart("muffleWarning")
[09:31:45.470]                       }
[09:31:45.470]                       else if (inherits(cond, "condition")) {
[09:31:45.470]                         if (!is.null(pattern)) {
[09:31:45.470]                           computeRestarts <- base::computeRestarts
[09:31:45.470]                           grepl <- base::grepl
[09:31:45.470]                           restarts <- computeRestarts(cond)
[09:31:45.470]                           for (restart in restarts) {
[09:31:45.470]                             name <- restart$name
[09:31:45.470]                             if (is.null(name)) 
[09:31:45.470]                               next
[09:31:45.470]                             if (!grepl(pattern, name)) 
[09:31:45.470]                               next
[09:31:45.470]                             invokeRestart(restart)
[09:31:45.470]                             muffled <- TRUE
[09:31:45.470]                             break
[09:31:45.470]                           }
[09:31:45.470]                         }
[09:31:45.470]                       }
[09:31:45.470]                       invisible(muffled)
[09:31:45.470]                     }
[09:31:45.470]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.470]                   }
[09:31:45.470]                 }
[09:31:45.470]             }
[09:31:45.470]         }))
[09:31:45.470]     }, error = function(ex) {
[09:31:45.470]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:45.470]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.470]                 ...future.rng), started = ...future.startTime, 
[09:31:45.470]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:45.470]             version = "1.8"), class = "FutureResult")
[09:31:45.470]     }, finally = {
[09:31:45.470]         if (!identical(...future.workdir, getwd())) 
[09:31:45.470]             setwd(...future.workdir)
[09:31:45.470]         {
[09:31:45.470]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:45.470]                 ...future.oldOptions$nwarnings <- NULL
[09:31:45.470]             }
[09:31:45.470]             base::options(...future.oldOptions)
[09:31:45.470]             if (.Platform$OS.type == "windows") {
[09:31:45.470]                 old_names <- names(...future.oldEnvVars)
[09:31:45.470]                 envs <- base::Sys.getenv()
[09:31:45.470]                 names <- names(envs)
[09:31:45.470]                 common <- intersect(names, old_names)
[09:31:45.470]                 added <- setdiff(names, old_names)
[09:31:45.470]                 removed <- setdiff(old_names, names)
[09:31:45.470]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:45.470]                   envs[common]]
[09:31:45.470]                 NAMES <- toupper(changed)
[09:31:45.470]                 args <- list()
[09:31:45.470]                 for (kk in seq_along(NAMES)) {
[09:31:45.470]                   name <- changed[[kk]]
[09:31:45.470]                   NAME <- NAMES[[kk]]
[09:31:45.470]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.470]                     next
[09:31:45.470]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.470]                 }
[09:31:45.470]                 NAMES <- toupper(added)
[09:31:45.470]                 for (kk in seq_along(NAMES)) {
[09:31:45.470]                   name <- added[[kk]]
[09:31:45.470]                   NAME <- NAMES[[kk]]
[09:31:45.470]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.470]                     next
[09:31:45.470]                   args[[name]] <- ""
[09:31:45.470]                 }
[09:31:45.470]                 NAMES <- toupper(removed)
[09:31:45.470]                 for (kk in seq_along(NAMES)) {
[09:31:45.470]                   name <- removed[[kk]]
[09:31:45.470]                   NAME <- NAMES[[kk]]
[09:31:45.470]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.470]                     next
[09:31:45.470]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.470]                 }
[09:31:45.470]                 if (length(args) > 0) 
[09:31:45.470]                   base::do.call(base::Sys.setenv, args = args)
[09:31:45.470]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:45.470]             }
[09:31:45.470]             else {
[09:31:45.470]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:45.470]             }
[09:31:45.470]             {
[09:31:45.470]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:45.470]                   0L) {
[09:31:45.470]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:45.470]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:45.470]                   base::options(opts)
[09:31:45.470]                 }
[09:31:45.470]                 {
[09:31:45.470]                   {
[09:31:45.470]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:45.470]                     NULL
[09:31:45.470]                   }
[09:31:45.470]                   options(future.plan = NULL)
[09:31:45.470]                   if (is.na(NA_character_)) 
[09:31:45.470]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.470]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:45.470]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:45.470]                     .init = FALSE)
[09:31:45.470]                 }
[09:31:45.470]             }
[09:31:45.470]         }
[09:31:45.470]     })
[09:31:45.470]     if (TRUE) {
[09:31:45.470]         base::sink(type = "output", split = FALSE)
[09:31:45.470]         if (TRUE) {
[09:31:45.470]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:45.470]         }
[09:31:45.470]         else {
[09:31:45.470]             ...future.result["stdout"] <- base::list(NULL)
[09:31:45.470]         }
[09:31:45.470]         base::close(...future.stdout)
[09:31:45.470]         ...future.stdout <- NULL
[09:31:45.470]     }
[09:31:45.470]     ...future.result$conditions <- ...future.conditions
[09:31:45.470]     ...future.result$finished <- base::Sys.time()
[09:31:45.470]     ...future.result
[09:31:45.470] }
[09:31:45.473] requestCore(): workers = 2
[09:31:45.475] MulticoreFuture started
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    stop("Whoops!")
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[09:31:45.476] plan(): Setting new future strategy stack:
[09:31:45.476] List of future strategies:
[09:31:45.476] 1. sequential:
[09:31:45.476]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:45.476]    - tweaked: FALSE
[09:31:45.476]    - call: NULL
[09:31:45.477] plan(): nbrOfWorkers() = 1
[09:31:45.479] plan(): Setting new future strategy stack:
[09:31:45.479] List of future strategies:
[09:31:45.479] 1. multicore:
[09:31:45.479]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:45.479]    - tweaked: FALSE
[09:31:45.479]    - call: plan(multicore)
[09:31:45.484] plan(): nbrOfWorkers() = 2
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 4dab417a-2fdd-f8a2-2e0a-d701ed5fedef
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:45.487] result() for MulticoreFuture ...
[09:31:45.489] result() for MulticoreFuture ...
[09:31:45.490] result() for MulticoreFuture ... done
[09:31:45.490] signalConditions() ...
[09:31:45.490]  - include = ‘immediateCondition’
[09:31:45.490]  - exclude = 
[09:31:45.490]  - resignal = FALSE
[09:31:45.490]  - Number of conditions: 1
[09:31:45.491] signalConditions() ... done
[09:31:45.491] result() for MulticoreFuture ... done
[09:31:45.491] result() for MulticoreFuture ...
[09:31:45.491] result() for MulticoreFuture ... done
[09:31:45.491] signalConditions() ...
[09:31:45.491]  - include = ‘immediateCondition’
[09:31:45.492]  - exclude = 
[09:31:45.492]  - resignal = FALSE
[09:31:45.492]  - Number of conditions: 1
[09:31:45.492] signalConditions() ... done
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    save_rds <- function (object, pathname, ...)     {        pathname_tmp <- sprintf("%s.tmp", pathname)        if (file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]])        }        tryCatch({            saveRDS(object, file = pathname_tmp, ...)        }, error = function(ex) {            msg <- conditionMessage(ex)            fi_tmp <- file.info(pathname_tmp)            msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 msg)            ex$message <- msg            stop(ex)        })        stopifnot(file_test("-f", pathname_tmp))        res <- file.rename(from = pathname_tmp, to = pathname)        if (!res || file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            fi <- file.info(pathname)            msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 sQuote(pathname), fi[["size"]], fi[["mtime"]])            stop(msg)        }        invisible(pathname)    }    saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath),         rootPath = tempdir())     {        obj <- list(time = Sys.time(), condition = cond)        file <- tempfile(pattern = class(cond)[1], tmpdir = path,             fileext = ".rds")        save_rds(obj, file)    }    saveImmediateCondition(cond, path = "/tmp/RtmpMXzm1h/.future/immediateConditions")    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[09:31:45.493] result() for MulticoreFuture ...
[09:31:45.493] result() for MulticoreFuture ... done
[09:31:45.493] result() for MulticoreFuture ...
[09:31:45.493] result() for MulticoreFuture ... done
[09:31:45.493] signalConditions() ...
[09:31:45.493]  - include = ‘immediateCondition’
[09:31:45.494]  - exclude = 
[09:31:45.494]  - resignal = FALSE
[09:31:45.494]  - Number of conditions: 1
[09:31:45.494] signalConditions() ... done
[09:31:45.494] Future state: ‘finished’
[09:31:45.494] result() for MulticoreFuture ...
[09:31:45.494] result() for MulticoreFuture ... done
[09:31:45.494] signalConditions() ...
[09:31:45.494]  - include = ‘condition’
[09:31:45.495]  - exclude = ‘immediateCondition’
[09:31:45.495]  - resignal = TRUE
[09:31:45.495]  - Number of conditions: 1
[09:31:45.495]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[09:31:45.495] signalConditions() ... done
[1] "Error in withCallingHandlers({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    save_rds <- function (object, pathname, ...)     {        pathname_tmp <- sprintf("%s.tmp", pathname)        if (file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]])        }        tryCatch({            saveRDS(object, file = pathname_tmp, ...)        }, error = function(ex) {            msg <- conditionMessage(ex)            fi_tmp <- file.info(pathname_tmp)            msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 msg)            ex$message <- msg            stop(ex)        })        stopifnot(file_test("-f", pathname_tmp))        res <- file.rename(from = pathname_tmp, to = pathname)        if (!res || file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            fi <- file.info(pathname)            msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 sQuote(pathname), fi[["size"]], fi[["mtime"]])            stop(msg)        }        invisible(pathname)    }    saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath),         rootPath = tempdir())     {        obj <- list(time = Sys.time(), condition = cond)        file <- tempfile(pattern = class(cond)[1], tmpdir = path,             fileext = ".rds")        save_rds(obj, file)    }    saveImmediateCondition(cond, path = "/tmp/RtmpMXzm1h/.future/immediateConditions")    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[09:31:45.496] result() for MulticoreFuture ...
[09:31:45.496] result() for MulticoreFuture ... done
[09:31:45.496] result() for MulticoreFuture ...
[09:31:45.496] result() for MulticoreFuture ... done
[09:31:45.496] signalConditions() ...
[09:31:45.496]  - include = ‘immediateCondition’
[09:31:45.497]  - exclude = 
[09:31:45.497]  - resignal = FALSE
[09:31:45.497]  - Number of conditions: 1
[09:31:45.497] signalConditions() ... done
[09:31:45.497] Future state: ‘finished’
[09:31:45.497] result() for MulticoreFuture ...
[09:31:45.497] result() for MulticoreFuture ... done
[09:31:45.497] signalConditions() ...
[09:31:45.497]  - include = ‘condition’
[09:31:45.498]  - exclude = ‘immediateCondition’
[09:31:45.498]  - resignal = TRUE
[09:31:45.498]  - Number of conditions: 1
[09:31:45.498]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[09:31:45.498] signalConditions() ... done
[1] "Error in withCallingHandlers({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    save_rds <- function (object, pathname, ...)     {        pathname_tmp <- sprintf("%s.tmp", pathname)        if (file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]])        }        tryCatch({            saveRDS(object, file = pathname_tmp, ...)        }, error = function(ex) {            msg <- conditionMessage(ex)            fi_tmp <- file.info(pathname_tmp)            msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 msg)            ex$message <- msg            stop(ex)        })        stopifnot(file_test("-f", pathname_tmp))        res <- file.rename(from = pathname_tmp, to = pathname)        if (!res || file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            fi <- file.info(pathname)            msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 sQuote(pathname), fi[["size"]], fi[["mtime"]])            stop(msg)        }        invisible(pathname)    }    saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath),         rootPath = tempdir())     {        obj <- list(time = Sys.time(), condition = cond)        file <- tempfile(pattern = class(cond)[1], tmpdir = path,             fileext = ".rds")        save_rds(obj, file)    }    saveImmediateCondition(cond, path = "/tmp/RtmpMXzm1h/.future/immediateConditions")    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[09:31:45.502] getGlobalsAndPackages() ...
[09:31:45.503] 
[09:31:45.503] - globals: [0] <none>
[09:31:45.503] getGlobalsAndPackages() ... DONE
[09:31:45.503] Packages needed by the future expression (n = 0): <none>
[09:31:45.504] Packages needed by future strategies (n = 0): <none>
[09:31:45.504] {
[09:31:45.504]     {
[09:31:45.504]         {
[09:31:45.504]             ...future.startTime <- base::Sys.time()
[09:31:45.504]             {
[09:31:45.504]                 {
[09:31:45.504]                   {
[09:31:45.504]                     {
[09:31:45.504]                       base::local({
[09:31:45.504]                         has_future <- base::requireNamespace("future", 
[09:31:45.504]                           quietly = TRUE)
[09:31:45.504]                         if (has_future) {
[09:31:45.504]                           ns <- base::getNamespace("future")
[09:31:45.504]                           version <- ns[[".package"]][["version"]]
[09:31:45.504]                           if (is.null(version)) 
[09:31:45.504]                             version <- utils::packageVersion("future")
[09:31:45.504]                         }
[09:31:45.504]                         else {
[09:31:45.504]                           version <- NULL
[09:31:45.504]                         }
[09:31:45.504]                         if (!has_future || version < "1.8.0") {
[09:31:45.504]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:45.504]                             "", base::R.version$version.string), 
[09:31:45.504]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:45.504]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:45.504]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:45.504]                               "release", "version")], collapse = " "), 
[09:31:45.504]                             hostname = base::Sys.info()[["nodename"]])
[09:31:45.504]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:45.504]                             info)
[09:31:45.504]                           info <- base::paste(info, collapse = "; ")
[09:31:45.504]                           if (!has_future) {
[09:31:45.504]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:45.504]                               info)
[09:31:45.504]                           }
[09:31:45.504]                           else {
[09:31:45.504]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:45.504]                               info, version)
[09:31:45.504]                           }
[09:31:45.504]                           base::stop(msg)
[09:31:45.504]                         }
[09:31:45.504]                       })
[09:31:45.504]                     }
[09:31:45.504]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:45.504]                     base::options(mc.cores = 1L)
[09:31:45.504]                   }
[09:31:45.504]                   ...future.strategy.old <- future::plan("list")
[09:31:45.504]                   options(future.plan = NULL)
[09:31:45.504]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.504]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:45.504]                 }
[09:31:45.504]                 ...future.workdir <- getwd()
[09:31:45.504]             }
[09:31:45.504]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:45.504]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:45.504]         }
[09:31:45.504]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:45.504]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:45.504]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:45.504]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:45.504]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:45.504]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:45.504]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:45.504]             base::names(...future.oldOptions))
[09:31:45.504]     }
[09:31:45.504]     if (FALSE) {
[09:31:45.504]     }
[09:31:45.504]     else {
[09:31:45.504]         if (TRUE) {
[09:31:45.504]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:45.504]                 open = "w")
[09:31:45.504]         }
[09:31:45.504]         else {
[09:31:45.504]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:45.504]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:45.504]         }
[09:31:45.504]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:45.504]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:45.504]             base::sink(type = "output", split = FALSE)
[09:31:45.504]             base::close(...future.stdout)
[09:31:45.504]         }, add = TRUE)
[09:31:45.504]     }
[09:31:45.504]     ...future.frame <- base::sys.nframe()
[09:31:45.504]     ...future.conditions <- base::list()
[09:31:45.504]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:45.504]     if (FALSE) {
[09:31:45.504]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:45.504]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:45.504]     }
[09:31:45.504]     ...future.result <- base::tryCatch({
[09:31:45.504]         base::withCallingHandlers({
[09:31:45.504]             ...future.value <- base::withVisible(base::local({
[09:31:45.504]                 withCallingHandlers({
[09:31:45.504]                   {
[09:31:45.504]                     stop(structure(list(message = "boom"), class = c("MyError", 
[09:31:45.504]                       "error", "condition")))
[09:31:45.504]                   }
[09:31:45.504]                 }, immediateCondition = function(cond) {
[09:31:45.504]                   save_rds <- function (object, pathname, ...) 
[09:31:45.504]                   {
[09:31:45.504]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:31:45.504]                     if (file_test("-f", pathname_tmp)) {
[09:31:45.504]                       fi_tmp <- file.info(pathname_tmp)
[09:31:45.504]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:31:45.504]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:45.504]                         fi_tmp[["mtime"]])
[09:31:45.504]                     }
[09:31:45.504]                     tryCatch({
[09:31:45.504]                       saveRDS(object, file = pathname_tmp, ...)
[09:31:45.504]                     }, error = function(ex) {
[09:31:45.504]                       msg <- conditionMessage(ex)
[09:31:45.504]                       fi_tmp <- file.info(pathname_tmp)
[09:31:45.504]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:31:45.504]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:45.504]                         fi_tmp[["mtime"]], msg)
[09:31:45.504]                       ex$message <- msg
[09:31:45.504]                       stop(ex)
[09:31:45.504]                     })
[09:31:45.504]                     stopifnot(file_test("-f", pathname_tmp))
[09:31:45.504]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:31:45.504]                     if (!res || file_test("-f", pathname_tmp)) {
[09:31:45.504]                       fi_tmp <- file.info(pathname_tmp)
[09:31:45.504]                       fi <- file.info(pathname)
[09:31:45.504]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:31:45.504]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:45.504]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:31:45.504]                         fi[["size"]], fi[["mtime"]])
[09:31:45.504]                       stop(msg)
[09:31:45.504]                     }
[09:31:45.504]                     invisible(pathname)
[09:31:45.504]                   }
[09:31:45.504]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:31:45.504]                     rootPath = tempdir()) 
[09:31:45.504]                   {
[09:31:45.504]                     obj <- list(time = Sys.time(), condition = cond)
[09:31:45.504]                     file <- tempfile(pattern = class(cond)[1], 
[09:31:45.504]                       tmpdir = path, fileext = ".rds")
[09:31:45.504]                     save_rds(obj, file)
[09:31:45.504]                   }
[09:31:45.504]                   saveImmediateCondition(cond, path = "/tmp/RtmpMXzm1h/.future/immediateConditions")
[09:31:45.504]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.504]                   {
[09:31:45.504]                     inherits <- base::inherits
[09:31:45.504]                     invokeRestart <- base::invokeRestart
[09:31:45.504]                     is.null <- base::is.null
[09:31:45.504]                     muffled <- FALSE
[09:31:45.504]                     if (inherits(cond, "message")) {
[09:31:45.504]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:45.504]                       if (muffled) 
[09:31:45.504]                         invokeRestart("muffleMessage")
[09:31:45.504]                     }
[09:31:45.504]                     else if (inherits(cond, "warning")) {
[09:31:45.504]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:45.504]                       if (muffled) 
[09:31:45.504]                         invokeRestart("muffleWarning")
[09:31:45.504]                     }
[09:31:45.504]                     else if (inherits(cond, "condition")) {
[09:31:45.504]                       if (!is.null(pattern)) {
[09:31:45.504]                         computeRestarts <- base::computeRestarts
[09:31:45.504]                         grepl <- base::grepl
[09:31:45.504]                         restarts <- computeRestarts(cond)
[09:31:45.504]                         for (restart in restarts) {
[09:31:45.504]                           name <- restart$name
[09:31:45.504]                           if (is.null(name)) 
[09:31:45.504]                             next
[09:31:45.504]                           if (!grepl(pattern, name)) 
[09:31:45.504]                             next
[09:31:45.504]                           invokeRestart(restart)
[09:31:45.504]                           muffled <- TRUE
[09:31:45.504]                           break
[09:31:45.504]                         }
[09:31:45.504]                       }
[09:31:45.504]                     }
[09:31:45.504]                     invisible(muffled)
[09:31:45.504]                   }
[09:31:45.504]                   muffleCondition(cond)
[09:31:45.504]                 })
[09:31:45.504]             }))
[09:31:45.504]             future::FutureResult(value = ...future.value$value, 
[09:31:45.504]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.504]                   ...future.rng), globalenv = if (FALSE) 
[09:31:45.504]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:45.504]                     ...future.globalenv.names))
[09:31:45.504]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:45.504]         }, condition = base::local({
[09:31:45.504]             c <- base::c
[09:31:45.504]             inherits <- base::inherits
[09:31:45.504]             invokeRestart <- base::invokeRestart
[09:31:45.504]             length <- base::length
[09:31:45.504]             list <- base::list
[09:31:45.504]             seq.int <- base::seq.int
[09:31:45.504]             signalCondition <- base::signalCondition
[09:31:45.504]             sys.calls <- base::sys.calls
[09:31:45.504]             `[[` <- base::`[[`
[09:31:45.504]             `+` <- base::`+`
[09:31:45.504]             `<<-` <- base::`<<-`
[09:31:45.504]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:45.504]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:45.504]                   3L)]
[09:31:45.504]             }
[09:31:45.504]             function(cond) {
[09:31:45.504]                 is_error <- inherits(cond, "error")
[09:31:45.504]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:45.504]                   NULL)
[09:31:45.504]                 if (is_error) {
[09:31:45.504]                   sessionInformation <- function() {
[09:31:45.504]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:45.504]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:45.504]                       search = base::search(), system = base::Sys.info())
[09:31:45.504]                   }
[09:31:45.504]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.504]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:45.504]                     cond$call), session = sessionInformation(), 
[09:31:45.504]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:45.504]                   signalCondition(cond)
[09:31:45.504]                 }
[09:31:45.504]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:45.504]                 "immediateCondition"))) {
[09:31:45.504]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:45.504]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.504]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:45.504]                   if (TRUE && !signal) {
[09:31:45.504]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.504]                     {
[09:31:45.504]                       inherits <- base::inherits
[09:31:45.504]                       invokeRestart <- base::invokeRestart
[09:31:45.504]                       is.null <- base::is.null
[09:31:45.504]                       muffled <- FALSE
[09:31:45.504]                       if (inherits(cond, "message")) {
[09:31:45.504]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.504]                         if (muffled) 
[09:31:45.504]                           invokeRestart("muffleMessage")
[09:31:45.504]                       }
[09:31:45.504]                       else if (inherits(cond, "warning")) {
[09:31:45.504]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.504]                         if (muffled) 
[09:31:45.504]                           invokeRestart("muffleWarning")
[09:31:45.504]                       }
[09:31:45.504]                       else if (inherits(cond, "condition")) {
[09:31:45.504]                         if (!is.null(pattern)) {
[09:31:45.504]                           computeRestarts <- base::computeRestarts
[09:31:45.504]                           grepl <- base::grepl
[09:31:45.504]                           restarts <- computeRestarts(cond)
[09:31:45.504]                           for (restart in restarts) {
[09:31:45.504]                             name <- restart$name
[09:31:45.504]                             if (is.null(name)) 
[09:31:45.504]                               next
[09:31:45.504]                             if (!grepl(pattern, name)) 
[09:31:45.504]                               next
[09:31:45.504]                             invokeRestart(restart)
[09:31:45.504]                             muffled <- TRUE
[09:31:45.504]                             break
[09:31:45.504]                           }
[09:31:45.504]                         }
[09:31:45.504]                       }
[09:31:45.504]                       invisible(muffled)
[09:31:45.504]                     }
[09:31:45.504]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.504]                   }
[09:31:45.504]                 }
[09:31:45.504]                 else {
[09:31:45.504]                   if (TRUE) {
[09:31:45.504]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.504]                     {
[09:31:45.504]                       inherits <- base::inherits
[09:31:45.504]                       invokeRestart <- base::invokeRestart
[09:31:45.504]                       is.null <- base::is.null
[09:31:45.504]                       muffled <- FALSE
[09:31:45.504]                       if (inherits(cond, "message")) {
[09:31:45.504]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.504]                         if (muffled) 
[09:31:45.504]                           invokeRestart("muffleMessage")
[09:31:45.504]                       }
[09:31:45.504]                       else if (inherits(cond, "warning")) {
[09:31:45.504]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.504]                         if (muffled) 
[09:31:45.504]                           invokeRestart("muffleWarning")
[09:31:45.504]                       }
[09:31:45.504]                       else if (inherits(cond, "condition")) {
[09:31:45.504]                         if (!is.null(pattern)) {
[09:31:45.504]                           computeRestarts <- base::computeRestarts
[09:31:45.504]                           grepl <- base::grepl
[09:31:45.504]                           restarts <- computeRestarts(cond)
[09:31:45.504]                           for (restart in restarts) {
[09:31:45.504]                             name <- restart$name
[09:31:45.504]                             if (is.null(name)) 
[09:31:45.504]                               next
[09:31:45.504]                             if (!grepl(pattern, name)) 
[09:31:45.504]                               next
[09:31:45.504]                             invokeRestart(restart)
[09:31:45.504]                             muffled <- TRUE
[09:31:45.504]                             break
[09:31:45.504]                           }
[09:31:45.504]                         }
[09:31:45.504]                       }
[09:31:45.504]                       invisible(muffled)
[09:31:45.504]                     }
[09:31:45.504]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.504]                   }
[09:31:45.504]                 }
[09:31:45.504]             }
[09:31:45.504]         }))
[09:31:45.504]     }, error = function(ex) {
[09:31:45.504]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:45.504]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.504]                 ...future.rng), started = ...future.startTime, 
[09:31:45.504]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:45.504]             version = "1.8"), class = "FutureResult")
[09:31:45.504]     }, finally = {
[09:31:45.504]         if (!identical(...future.workdir, getwd())) 
[09:31:45.504]             setwd(...future.workdir)
[09:31:45.504]         {
[09:31:45.504]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:45.504]                 ...future.oldOptions$nwarnings <- NULL
[09:31:45.504]             }
[09:31:45.504]             base::options(...future.oldOptions)
[09:31:45.504]             if (.Platform$OS.type == "windows") {
[09:31:45.504]                 old_names <- names(...future.oldEnvVars)
[09:31:45.504]                 envs <- base::Sys.getenv()
[09:31:45.504]                 names <- names(envs)
[09:31:45.504]                 common <- intersect(names, old_names)
[09:31:45.504]                 added <- setdiff(names, old_names)
[09:31:45.504]                 removed <- setdiff(old_names, names)
[09:31:45.504]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:45.504]                   envs[common]]
[09:31:45.504]                 NAMES <- toupper(changed)
[09:31:45.504]                 args <- list()
[09:31:45.504]                 for (kk in seq_along(NAMES)) {
[09:31:45.504]                   name <- changed[[kk]]
[09:31:45.504]                   NAME <- NAMES[[kk]]
[09:31:45.504]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.504]                     next
[09:31:45.504]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.504]                 }
[09:31:45.504]                 NAMES <- toupper(added)
[09:31:45.504]                 for (kk in seq_along(NAMES)) {
[09:31:45.504]                   name <- added[[kk]]
[09:31:45.504]                   NAME <- NAMES[[kk]]
[09:31:45.504]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.504]                     next
[09:31:45.504]                   args[[name]] <- ""
[09:31:45.504]                 }
[09:31:45.504]                 NAMES <- toupper(removed)
[09:31:45.504]                 for (kk in seq_along(NAMES)) {
[09:31:45.504]                   name <- removed[[kk]]
[09:31:45.504]                   NAME <- NAMES[[kk]]
[09:31:45.504]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.504]                     next
[09:31:45.504]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.504]                 }
[09:31:45.504]                 if (length(args) > 0) 
[09:31:45.504]                   base::do.call(base::Sys.setenv, args = args)
[09:31:45.504]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:45.504]             }
[09:31:45.504]             else {
[09:31:45.504]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:45.504]             }
[09:31:45.504]             {
[09:31:45.504]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:45.504]                   0L) {
[09:31:45.504]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:45.504]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:45.504]                   base::options(opts)
[09:31:45.504]                 }
[09:31:45.504]                 {
[09:31:45.504]                   {
[09:31:45.504]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:45.504]                     NULL
[09:31:45.504]                   }
[09:31:45.504]                   options(future.plan = NULL)
[09:31:45.504]                   if (is.na(NA_character_)) 
[09:31:45.504]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.504]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:45.504]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:45.504]                     .init = FALSE)
[09:31:45.504]                 }
[09:31:45.504]             }
[09:31:45.504]         }
[09:31:45.504]     })
[09:31:45.504]     if (TRUE) {
[09:31:45.504]         base::sink(type = "output", split = FALSE)
[09:31:45.504]         if (TRUE) {
[09:31:45.504]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:45.504]         }
[09:31:45.504]         else {
[09:31:45.504]             ...future.result["stdout"] <- base::list(NULL)
[09:31:45.504]         }
[09:31:45.504]         base::close(...future.stdout)
[09:31:45.504]         ...future.stdout <- NULL
[09:31:45.504]     }
[09:31:45.504]     ...future.result$conditions <- ...future.conditions
[09:31:45.504]     ...future.result$finished <- base::Sys.time()
[09:31:45.504]     ...future.result
[09:31:45.504] }
[09:31:45.507] requestCore(): workers = 2
[09:31:45.508] MulticoreFuture started
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    stop(structure(list(message = "boom"), class = c("MyError", 
        "error", "condition")))
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[09:31:45.509] plan(): Setting new future strategy stack:
[09:31:45.510] List of future strategies:
[09:31:45.510] 1. sequential:
[09:31:45.510]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:45.510]    - tweaked: FALSE
[09:31:45.510]    - call: NULL
[09:31:45.511] plan(): nbrOfWorkers() = 1
[09:31:45.513] plan(): Setting new future strategy stack:
[09:31:45.513] List of future strategies:
[09:31:45.513] 1. multicore:
[09:31:45.513]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:45.513]    - tweaked: FALSE
[09:31:45.513]    - call: plan(multicore)
[09:31:45.518] plan(): nbrOfWorkers() = 2
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 4dab417a-2fdd-f8a2-2e0a-d701ed5fedef
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:45.520] result() for MulticoreFuture ...
[09:31:45.522] result() for MulticoreFuture ...
[09:31:45.522] result() for MulticoreFuture ... done
[09:31:45.523] signalConditions() ...
[09:31:45.523]  - include = ‘immediateCondition’
[09:31:45.523]  - exclude = 
[09:31:45.523]  - resignal = FALSE
[09:31:45.523]  - Number of conditions: 1
[09:31:45.523] signalConditions() ... done
[09:31:45.523] result() for MulticoreFuture ... done
[09:31:45.524] result() for MulticoreFuture ...
[09:31:45.524] result() for MulticoreFuture ... done
[09:31:45.524] signalConditions() ...
[09:31:45.524]  - include = ‘immediateCondition’
[09:31:45.524]  - exclude = 
[09:31:45.525]  - resignal = FALSE
[09:31:45.525]  - Number of conditions: 1
[09:31:45.525] signalConditions() ... done
<MyError: boom>
[09:31:45.525] result() for MulticoreFuture ...
[09:31:45.525] result() for MulticoreFuture ... done
[09:31:45.525] result() for MulticoreFuture ...
[09:31:45.525] result() for MulticoreFuture ... done
[09:31:45.525] signalConditions() ...
[09:31:45.526]  - include = ‘immediateCondition’
[09:31:45.526]  - exclude = 
[09:31:45.526]  - resignal = FALSE
[09:31:45.526]  - Number of conditions: 1
[09:31:45.526] signalConditions() ... done
[09:31:45.526] Future state: ‘finished’
[09:31:45.526] result() for MulticoreFuture ...
[09:31:45.526] result() for MulticoreFuture ... done
[09:31:45.526] signalConditions() ...
[09:31:45.527]  - include = ‘condition’
[09:31:45.527]  - exclude = ‘immediateCondition’
[09:31:45.527]  - resignal = TRUE
[09:31:45.527]  - Number of conditions: 1
[09:31:45.527]  - Condition #1: ‘MyError’, ‘error’, ‘condition’
[09:31:45.527] signalConditions() ... done
*** multicore(..., globals = TRUE) without globals
[09:31:45.531] getGlobalsAndPackages() ...
[09:31:45.531] Searching for globals...
[09:31:45.532] - globals found: [1] ‘{’
[09:31:45.532] Searching for globals ... DONE
[09:31:45.532] Resolving globals: FALSE
[09:31:45.533] 
[09:31:45.535] 
[09:31:45.536] getGlobalsAndPackages() ... DONE
[09:31:45.536] Packages needed by the future expression (n = 0): <none>
[09:31:45.536] Packages needed by future strategies (n = 0): <none>
[09:31:45.537] {
[09:31:45.537]     {
[09:31:45.537]         {
[09:31:45.537]             ...future.startTime <- base::Sys.time()
[09:31:45.537]             {
[09:31:45.537]                 {
[09:31:45.537]                   {
[09:31:45.537]                     {
[09:31:45.537]                       base::local({
[09:31:45.537]                         has_future <- base::requireNamespace("future", 
[09:31:45.537]                           quietly = TRUE)
[09:31:45.537]                         if (has_future) {
[09:31:45.537]                           ns <- base::getNamespace("future")
[09:31:45.537]                           version <- ns[[".package"]][["version"]]
[09:31:45.537]                           if (is.null(version)) 
[09:31:45.537]                             version <- utils::packageVersion("future")
[09:31:45.537]                         }
[09:31:45.537]                         else {
[09:31:45.537]                           version <- NULL
[09:31:45.537]                         }
[09:31:45.537]                         if (!has_future || version < "1.8.0") {
[09:31:45.537]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:45.537]                             "", base::R.version$version.string), 
[09:31:45.537]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:45.537]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:45.537]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:45.537]                               "release", "version")], collapse = " "), 
[09:31:45.537]                             hostname = base::Sys.info()[["nodename"]])
[09:31:45.537]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:45.537]                             info)
[09:31:45.537]                           info <- base::paste(info, collapse = "; ")
[09:31:45.537]                           if (!has_future) {
[09:31:45.537]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:45.537]                               info)
[09:31:45.537]                           }
[09:31:45.537]                           else {
[09:31:45.537]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:45.537]                               info, version)
[09:31:45.537]                           }
[09:31:45.537]                           base::stop(msg)
[09:31:45.537]                         }
[09:31:45.537]                       })
[09:31:45.537]                     }
[09:31:45.537]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:45.537]                     base::options(mc.cores = 1L)
[09:31:45.537]                   }
[09:31:45.537]                   ...future.strategy.old <- future::plan("list")
[09:31:45.537]                   options(future.plan = NULL)
[09:31:45.537]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.537]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:45.537]                 }
[09:31:45.537]                 ...future.workdir <- getwd()
[09:31:45.537]             }
[09:31:45.537]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:45.537]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:45.537]         }
[09:31:45.537]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:45.537]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:45.537]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:45.537]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:45.537]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:45.537]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:45.537]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:45.537]             base::names(...future.oldOptions))
[09:31:45.537]     }
[09:31:45.537]     if (FALSE) {
[09:31:45.537]     }
[09:31:45.537]     else {
[09:31:45.537]         if (TRUE) {
[09:31:45.537]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:45.537]                 open = "w")
[09:31:45.537]         }
[09:31:45.537]         else {
[09:31:45.537]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:45.537]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:45.537]         }
[09:31:45.537]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:45.537]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:45.537]             base::sink(type = "output", split = FALSE)
[09:31:45.537]             base::close(...future.stdout)
[09:31:45.537]         }, add = TRUE)
[09:31:45.537]     }
[09:31:45.537]     ...future.frame <- base::sys.nframe()
[09:31:45.537]     ...future.conditions <- base::list()
[09:31:45.537]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:45.537]     if (FALSE) {
[09:31:45.537]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:45.537]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:45.537]     }
[09:31:45.537]     ...future.result <- base::tryCatch({
[09:31:45.537]         base::withCallingHandlers({
[09:31:45.537]             ...future.value <- base::withVisible(base::local({
[09:31:45.537]                 withCallingHandlers({
[09:31:45.537]                   {
[09:31:45.537]                     42L
[09:31:45.537]                   }
[09:31:45.537]                 }, immediateCondition = function(cond) {
[09:31:45.537]                   save_rds <- function (object, pathname, ...) 
[09:31:45.537]                   {
[09:31:45.537]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:31:45.537]                     if (file_test("-f", pathname_tmp)) {
[09:31:45.537]                       fi_tmp <- file.info(pathname_tmp)
[09:31:45.537]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:31:45.537]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:45.537]                         fi_tmp[["mtime"]])
[09:31:45.537]                     }
[09:31:45.537]                     tryCatch({
[09:31:45.537]                       saveRDS(object, file = pathname_tmp, ...)
[09:31:45.537]                     }, error = function(ex) {
[09:31:45.537]                       msg <- conditionMessage(ex)
[09:31:45.537]                       fi_tmp <- file.info(pathname_tmp)
[09:31:45.537]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:31:45.537]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:45.537]                         fi_tmp[["mtime"]], msg)
[09:31:45.537]                       ex$message <- msg
[09:31:45.537]                       stop(ex)
[09:31:45.537]                     })
[09:31:45.537]                     stopifnot(file_test("-f", pathname_tmp))
[09:31:45.537]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:31:45.537]                     if (!res || file_test("-f", pathname_tmp)) {
[09:31:45.537]                       fi_tmp <- file.info(pathname_tmp)
[09:31:45.537]                       fi <- file.info(pathname)
[09:31:45.537]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:31:45.537]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:45.537]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:31:45.537]                         fi[["size"]], fi[["mtime"]])
[09:31:45.537]                       stop(msg)
[09:31:45.537]                     }
[09:31:45.537]                     invisible(pathname)
[09:31:45.537]                   }
[09:31:45.537]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:31:45.537]                     rootPath = tempdir()) 
[09:31:45.537]                   {
[09:31:45.537]                     obj <- list(time = Sys.time(), condition = cond)
[09:31:45.537]                     file <- tempfile(pattern = class(cond)[1], 
[09:31:45.537]                       tmpdir = path, fileext = ".rds")
[09:31:45.537]                     save_rds(obj, file)
[09:31:45.537]                   }
[09:31:45.537]                   saveImmediateCondition(cond, path = "/tmp/RtmpMXzm1h/.future/immediateConditions")
[09:31:45.537]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.537]                   {
[09:31:45.537]                     inherits <- base::inherits
[09:31:45.537]                     invokeRestart <- base::invokeRestart
[09:31:45.537]                     is.null <- base::is.null
[09:31:45.537]                     muffled <- FALSE
[09:31:45.537]                     if (inherits(cond, "message")) {
[09:31:45.537]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:45.537]                       if (muffled) 
[09:31:45.537]                         invokeRestart("muffleMessage")
[09:31:45.537]                     }
[09:31:45.537]                     else if (inherits(cond, "warning")) {
[09:31:45.537]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:45.537]                       if (muffled) 
[09:31:45.537]                         invokeRestart("muffleWarning")
[09:31:45.537]                     }
[09:31:45.537]                     else if (inherits(cond, "condition")) {
[09:31:45.537]                       if (!is.null(pattern)) {
[09:31:45.537]                         computeRestarts <- base::computeRestarts
[09:31:45.537]                         grepl <- base::grepl
[09:31:45.537]                         restarts <- computeRestarts(cond)
[09:31:45.537]                         for (restart in restarts) {
[09:31:45.537]                           name <- restart$name
[09:31:45.537]                           if (is.null(name)) 
[09:31:45.537]                             next
[09:31:45.537]                           if (!grepl(pattern, name)) 
[09:31:45.537]                             next
[09:31:45.537]                           invokeRestart(restart)
[09:31:45.537]                           muffled <- TRUE
[09:31:45.537]                           break
[09:31:45.537]                         }
[09:31:45.537]                       }
[09:31:45.537]                     }
[09:31:45.537]                     invisible(muffled)
[09:31:45.537]                   }
[09:31:45.537]                   muffleCondition(cond)
[09:31:45.537]                 })
[09:31:45.537]             }))
[09:31:45.537]             future::FutureResult(value = ...future.value$value, 
[09:31:45.537]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.537]                   ...future.rng), globalenv = if (FALSE) 
[09:31:45.537]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:45.537]                     ...future.globalenv.names))
[09:31:45.537]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:45.537]         }, condition = base::local({
[09:31:45.537]             c <- base::c
[09:31:45.537]             inherits <- base::inherits
[09:31:45.537]             invokeRestart <- base::invokeRestart
[09:31:45.537]             length <- base::length
[09:31:45.537]             list <- base::list
[09:31:45.537]             seq.int <- base::seq.int
[09:31:45.537]             signalCondition <- base::signalCondition
[09:31:45.537]             sys.calls <- base::sys.calls
[09:31:45.537]             `[[` <- base::`[[`
[09:31:45.537]             `+` <- base::`+`
[09:31:45.537]             `<<-` <- base::`<<-`
[09:31:45.537]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:45.537]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:45.537]                   3L)]
[09:31:45.537]             }
[09:31:45.537]             function(cond) {
[09:31:45.537]                 is_error <- inherits(cond, "error")
[09:31:45.537]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:45.537]                   NULL)
[09:31:45.537]                 if (is_error) {
[09:31:45.537]                   sessionInformation <- function() {
[09:31:45.537]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:45.537]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:45.537]                       search = base::search(), system = base::Sys.info())
[09:31:45.537]                   }
[09:31:45.537]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.537]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:45.537]                     cond$call), session = sessionInformation(), 
[09:31:45.537]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:45.537]                   signalCondition(cond)
[09:31:45.537]                 }
[09:31:45.537]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:45.537]                 "immediateCondition"))) {
[09:31:45.537]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:45.537]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.537]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:45.537]                   if (TRUE && !signal) {
[09:31:45.537]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.537]                     {
[09:31:45.537]                       inherits <- base::inherits
[09:31:45.537]                       invokeRestart <- base::invokeRestart
[09:31:45.537]                       is.null <- base::is.null
[09:31:45.537]                       muffled <- FALSE
[09:31:45.537]                       if (inherits(cond, "message")) {
[09:31:45.537]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.537]                         if (muffled) 
[09:31:45.537]                           invokeRestart("muffleMessage")
[09:31:45.537]                       }
[09:31:45.537]                       else if (inherits(cond, "warning")) {
[09:31:45.537]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.537]                         if (muffled) 
[09:31:45.537]                           invokeRestart("muffleWarning")
[09:31:45.537]                       }
[09:31:45.537]                       else if (inherits(cond, "condition")) {
[09:31:45.537]                         if (!is.null(pattern)) {
[09:31:45.537]                           computeRestarts <- base::computeRestarts
[09:31:45.537]                           grepl <- base::grepl
[09:31:45.537]                           restarts <- computeRestarts(cond)
[09:31:45.537]                           for (restart in restarts) {
[09:31:45.537]                             name <- restart$name
[09:31:45.537]                             if (is.null(name)) 
[09:31:45.537]                               next
[09:31:45.537]                             if (!grepl(pattern, name)) 
[09:31:45.537]                               next
[09:31:45.537]                             invokeRestart(restart)
[09:31:45.537]                             muffled <- TRUE
[09:31:45.537]                             break
[09:31:45.537]                           }
[09:31:45.537]                         }
[09:31:45.537]                       }
[09:31:45.537]                       invisible(muffled)
[09:31:45.537]                     }
[09:31:45.537]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.537]                   }
[09:31:45.537]                 }
[09:31:45.537]                 else {
[09:31:45.537]                   if (TRUE) {
[09:31:45.537]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.537]                     {
[09:31:45.537]                       inherits <- base::inherits
[09:31:45.537]                       invokeRestart <- base::invokeRestart
[09:31:45.537]                       is.null <- base::is.null
[09:31:45.537]                       muffled <- FALSE
[09:31:45.537]                       if (inherits(cond, "message")) {
[09:31:45.537]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.537]                         if (muffled) 
[09:31:45.537]                           invokeRestart("muffleMessage")
[09:31:45.537]                       }
[09:31:45.537]                       else if (inherits(cond, "warning")) {
[09:31:45.537]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.537]                         if (muffled) 
[09:31:45.537]                           invokeRestart("muffleWarning")
[09:31:45.537]                       }
[09:31:45.537]                       else if (inherits(cond, "condition")) {
[09:31:45.537]                         if (!is.null(pattern)) {
[09:31:45.537]                           computeRestarts <- base::computeRestarts
[09:31:45.537]                           grepl <- base::grepl
[09:31:45.537]                           restarts <- computeRestarts(cond)
[09:31:45.537]                           for (restart in restarts) {
[09:31:45.537]                             name <- restart$name
[09:31:45.537]                             if (is.null(name)) 
[09:31:45.537]                               next
[09:31:45.537]                             if (!grepl(pattern, name)) 
[09:31:45.537]                               next
[09:31:45.537]                             invokeRestart(restart)
[09:31:45.537]                             muffled <- TRUE
[09:31:45.537]                             break
[09:31:45.537]                           }
[09:31:45.537]                         }
[09:31:45.537]                       }
[09:31:45.537]                       invisible(muffled)
[09:31:45.537]                     }
[09:31:45.537]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.537]                   }
[09:31:45.537]                 }
[09:31:45.537]             }
[09:31:45.537]         }))
[09:31:45.537]     }, error = function(ex) {
[09:31:45.537]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:45.537]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.537]                 ...future.rng), started = ...future.startTime, 
[09:31:45.537]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:45.537]             version = "1.8"), class = "FutureResult")
[09:31:45.537]     }, finally = {
[09:31:45.537]         if (!identical(...future.workdir, getwd())) 
[09:31:45.537]             setwd(...future.workdir)
[09:31:45.537]         {
[09:31:45.537]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:45.537]                 ...future.oldOptions$nwarnings <- NULL
[09:31:45.537]             }
[09:31:45.537]             base::options(...future.oldOptions)
[09:31:45.537]             if (.Platform$OS.type == "windows") {
[09:31:45.537]                 old_names <- names(...future.oldEnvVars)
[09:31:45.537]                 envs <- base::Sys.getenv()
[09:31:45.537]                 names <- names(envs)
[09:31:45.537]                 common <- intersect(names, old_names)
[09:31:45.537]                 added <- setdiff(names, old_names)
[09:31:45.537]                 removed <- setdiff(old_names, names)
[09:31:45.537]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:45.537]                   envs[common]]
[09:31:45.537]                 NAMES <- toupper(changed)
[09:31:45.537]                 args <- list()
[09:31:45.537]                 for (kk in seq_along(NAMES)) {
[09:31:45.537]                   name <- changed[[kk]]
[09:31:45.537]                   NAME <- NAMES[[kk]]
[09:31:45.537]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.537]                     next
[09:31:45.537]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.537]                 }
[09:31:45.537]                 NAMES <- toupper(added)
[09:31:45.537]                 for (kk in seq_along(NAMES)) {
[09:31:45.537]                   name <- added[[kk]]
[09:31:45.537]                   NAME <- NAMES[[kk]]
[09:31:45.537]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.537]                     next
[09:31:45.537]                   args[[name]] <- ""
[09:31:45.537]                 }
[09:31:45.537]                 NAMES <- toupper(removed)
[09:31:45.537]                 for (kk in seq_along(NAMES)) {
[09:31:45.537]                   name <- removed[[kk]]
[09:31:45.537]                   NAME <- NAMES[[kk]]
[09:31:45.537]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.537]                     next
[09:31:45.537]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.537]                 }
[09:31:45.537]                 if (length(args) > 0) 
[09:31:45.537]                   base::do.call(base::Sys.setenv, args = args)
[09:31:45.537]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:45.537]             }
[09:31:45.537]             else {
[09:31:45.537]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:45.537]             }
[09:31:45.537]             {
[09:31:45.537]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:45.537]                   0L) {
[09:31:45.537]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:45.537]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:45.537]                   base::options(opts)
[09:31:45.537]                 }
[09:31:45.537]                 {
[09:31:45.537]                   {
[09:31:45.537]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:45.537]                     NULL
[09:31:45.537]                   }
[09:31:45.537]                   options(future.plan = NULL)
[09:31:45.537]                   if (is.na(NA_character_)) 
[09:31:45.537]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.537]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:45.537]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:45.537]                     .init = FALSE)
[09:31:45.537]                 }
[09:31:45.537]             }
[09:31:45.537]         }
[09:31:45.537]     })
[09:31:45.537]     if (TRUE) {
[09:31:45.537]         base::sink(type = "output", split = FALSE)
[09:31:45.537]         if (TRUE) {
[09:31:45.537]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:45.537]         }
[09:31:45.537]         else {
[09:31:45.537]             ...future.result["stdout"] <- base::list(NULL)
[09:31:45.537]         }
[09:31:45.537]         base::close(...future.stdout)
[09:31:45.537]         ...future.stdout <- NULL
[09:31:45.537]     }
[09:31:45.537]     ...future.result$conditions <- ...future.conditions
[09:31:45.537]     ...future.result$finished <- base::Sys.time()
[09:31:45.537]     ...future.result
[09:31:45.537] }
[09:31:45.539] requestCore(): workers = 2
[09:31:45.541] MulticoreFuture started
[09:31:45.542] plan(): Setting new future strategy stack:
[09:31:45.542] List of future strategies:
[09:31:45.542] 1. sequential:
[09:31:45.542]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:45.542]    - tweaked: FALSE
[09:31:45.542]    - call: NULL
[09:31:45.543] plan(): nbrOfWorkers() = 1
[09:31:45.546] plan(): Setting new future strategy stack:
[09:31:45.546] List of future strategies:
[09:31:45.546] 1. multicore:
[09:31:45.546]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:45.546]    - tweaked: FALSE
[09:31:45.546]    - call: plan(multicore)
[09:31:45.551] plan(): nbrOfWorkers() = 2
[1] TRUE
[09:31:45.551] result() for MulticoreFuture ...
[09:31:45.552] result() for MulticoreFuture ...
[09:31:45.553] result() for MulticoreFuture ... done
[09:31:45.553] result() for MulticoreFuture ... done
[09:31:45.553] result() for MulticoreFuture ...
[09:31:45.553] result() for MulticoreFuture ... done
[1] 42
*** multicore(..., globals = TRUE) with globals
[09:31:45.557] getGlobalsAndPackages() ...
[09:31:45.557] Searching for globals...
[09:31:45.559] - globals found: [4] ‘{’, ‘<-’, ‘*’, ‘a’
[09:31:45.560] Searching for globals ... DONE
[09:31:45.560] Resolving globals: FALSE
[09:31:45.560] The total size of the 1 globals is 56 bytes (56 bytes)
[09:31:45.561] The total size of the 1 globals exported for future expression (‘{; b <- 3; c <- 2; a * b * c; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[09:31:45.561] - globals: [1] ‘a’
[09:31:45.561] 
[09:31:45.561] getGlobalsAndPackages() ... DONE
[09:31:45.562] Packages needed by the future expression (n = 0): <none>
[09:31:45.562] Packages needed by future strategies (n = 0): <none>
[09:31:45.562] {
[09:31:45.562]     {
[09:31:45.562]         {
[09:31:45.562]             ...future.startTime <- base::Sys.time()
[09:31:45.562]             {
[09:31:45.562]                 {
[09:31:45.562]                   {
[09:31:45.562]                     {
[09:31:45.562]                       base::local({
[09:31:45.562]                         has_future <- base::requireNamespace("future", 
[09:31:45.562]                           quietly = TRUE)
[09:31:45.562]                         if (has_future) {
[09:31:45.562]                           ns <- base::getNamespace("future")
[09:31:45.562]                           version <- ns[[".package"]][["version"]]
[09:31:45.562]                           if (is.null(version)) 
[09:31:45.562]                             version <- utils::packageVersion("future")
[09:31:45.562]                         }
[09:31:45.562]                         else {
[09:31:45.562]                           version <- NULL
[09:31:45.562]                         }
[09:31:45.562]                         if (!has_future || version < "1.8.0") {
[09:31:45.562]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:45.562]                             "", base::R.version$version.string), 
[09:31:45.562]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:45.562]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:45.562]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:45.562]                               "release", "version")], collapse = " "), 
[09:31:45.562]                             hostname = base::Sys.info()[["nodename"]])
[09:31:45.562]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:45.562]                             info)
[09:31:45.562]                           info <- base::paste(info, collapse = "; ")
[09:31:45.562]                           if (!has_future) {
[09:31:45.562]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:45.562]                               info)
[09:31:45.562]                           }
[09:31:45.562]                           else {
[09:31:45.562]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:45.562]                               info, version)
[09:31:45.562]                           }
[09:31:45.562]                           base::stop(msg)
[09:31:45.562]                         }
[09:31:45.562]                       })
[09:31:45.562]                     }
[09:31:45.562]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:45.562]                     base::options(mc.cores = 1L)
[09:31:45.562]                   }
[09:31:45.562]                   ...future.strategy.old <- future::plan("list")
[09:31:45.562]                   options(future.plan = NULL)
[09:31:45.562]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.562]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:45.562]                 }
[09:31:45.562]                 ...future.workdir <- getwd()
[09:31:45.562]             }
[09:31:45.562]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:45.562]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:45.562]         }
[09:31:45.562]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:45.562]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:45.562]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:45.562]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:45.562]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:45.562]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:45.562]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:45.562]             base::names(...future.oldOptions))
[09:31:45.562]     }
[09:31:45.562]     if (FALSE) {
[09:31:45.562]     }
[09:31:45.562]     else {
[09:31:45.562]         if (TRUE) {
[09:31:45.562]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:45.562]                 open = "w")
[09:31:45.562]         }
[09:31:45.562]         else {
[09:31:45.562]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:45.562]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:45.562]         }
[09:31:45.562]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:45.562]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:45.562]             base::sink(type = "output", split = FALSE)
[09:31:45.562]             base::close(...future.stdout)
[09:31:45.562]         }, add = TRUE)
[09:31:45.562]     }
[09:31:45.562]     ...future.frame <- base::sys.nframe()
[09:31:45.562]     ...future.conditions <- base::list()
[09:31:45.562]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:45.562]     if (FALSE) {
[09:31:45.562]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:45.562]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:45.562]     }
[09:31:45.562]     ...future.result <- base::tryCatch({
[09:31:45.562]         base::withCallingHandlers({
[09:31:45.562]             ...future.value <- base::withVisible(base::local({
[09:31:45.562]                 withCallingHandlers({
[09:31:45.562]                   {
[09:31:45.562]                     b <- 3
[09:31:45.562]                     c <- 2
[09:31:45.562]                     a * b * c
[09:31:45.562]                   }
[09:31:45.562]                 }, immediateCondition = function(cond) {
[09:31:45.562]                   save_rds <- function (object, pathname, ...) 
[09:31:45.562]                   {
[09:31:45.562]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:31:45.562]                     if (file_test("-f", pathname_tmp)) {
[09:31:45.562]                       fi_tmp <- file.info(pathname_tmp)
[09:31:45.562]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:31:45.562]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:45.562]                         fi_tmp[["mtime"]])
[09:31:45.562]                     }
[09:31:45.562]                     tryCatch({
[09:31:45.562]                       saveRDS(object, file = pathname_tmp, ...)
[09:31:45.562]                     }, error = function(ex) {
[09:31:45.562]                       msg <- conditionMessage(ex)
[09:31:45.562]                       fi_tmp <- file.info(pathname_tmp)
[09:31:45.562]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:31:45.562]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:45.562]                         fi_tmp[["mtime"]], msg)
[09:31:45.562]                       ex$message <- msg
[09:31:45.562]                       stop(ex)
[09:31:45.562]                     })
[09:31:45.562]                     stopifnot(file_test("-f", pathname_tmp))
[09:31:45.562]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:31:45.562]                     if (!res || file_test("-f", pathname_tmp)) {
[09:31:45.562]                       fi_tmp <- file.info(pathname_tmp)
[09:31:45.562]                       fi <- file.info(pathname)
[09:31:45.562]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:31:45.562]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:45.562]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:31:45.562]                         fi[["size"]], fi[["mtime"]])
[09:31:45.562]                       stop(msg)
[09:31:45.562]                     }
[09:31:45.562]                     invisible(pathname)
[09:31:45.562]                   }
[09:31:45.562]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:31:45.562]                     rootPath = tempdir()) 
[09:31:45.562]                   {
[09:31:45.562]                     obj <- list(time = Sys.time(), condition = cond)
[09:31:45.562]                     file <- tempfile(pattern = class(cond)[1], 
[09:31:45.562]                       tmpdir = path, fileext = ".rds")
[09:31:45.562]                     save_rds(obj, file)
[09:31:45.562]                   }
[09:31:45.562]                   saveImmediateCondition(cond, path = "/tmp/RtmpMXzm1h/.future/immediateConditions")
[09:31:45.562]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.562]                   {
[09:31:45.562]                     inherits <- base::inherits
[09:31:45.562]                     invokeRestart <- base::invokeRestart
[09:31:45.562]                     is.null <- base::is.null
[09:31:45.562]                     muffled <- FALSE
[09:31:45.562]                     if (inherits(cond, "message")) {
[09:31:45.562]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:45.562]                       if (muffled) 
[09:31:45.562]                         invokeRestart("muffleMessage")
[09:31:45.562]                     }
[09:31:45.562]                     else if (inherits(cond, "warning")) {
[09:31:45.562]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:45.562]                       if (muffled) 
[09:31:45.562]                         invokeRestart("muffleWarning")
[09:31:45.562]                     }
[09:31:45.562]                     else if (inherits(cond, "condition")) {
[09:31:45.562]                       if (!is.null(pattern)) {
[09:31:45.562]                         computeRestarts <- base::computeRestarts
[09:31:45.562]                         grepl <- base::grepl
[09:31:45.562]                         restarts <- computeRestarts(cond)
[09:31:45.562]                         for (restart in restarts) {
[09:31:45.562]                           name <- restart$name
[09:31:45.562]                           if (is.null(name)) 
[09:31:45.562]                             next
[09:31:45.562]                           if (!grepl(pattern, name)) 
[09:31:45.562]                             next
[09:31:45.562]                           invokeRestart(restart)
[09:31:45.562]                           muffled <- TRUE
[09:31:45.562]                           break
[09:31:45.562]                         }
[09:31:45.562]                       }
[09:31:45.562]                     }
[09:31:45.562]                     invisible(muffled)
[09:31:45.562]                   }
[09:31:45.562]                   muffleCondition(cond)
[09:31:45.562]                 })
[09:31:45.562]             }))
[09:31:45.562]             future::FutureResult(value = ...future.value$value, 
[09:31:45.562]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.562]                   ...future.rng), globalenv = if (FALSE) 
[09:31:45.562]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:45.562]                     ...future.globalenv.names))
[09:31:45.562]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:45.562]         }, condition = base::local({
[09:31:45.562]             c <- base::c
[09:31:45.562]             inherits <- base::inherits
[09:31:45.562]             invokeRestart <- base::invokeRestart
[09:31:45.562]             length <- base::length
[09:31:45.562]             list <- base::list
[09:31:45.562]             seq.int <- base::seq.int
[09:31:45.562]             signalCondition <- base::signalCondition
[09:31:45.562]             sys.calls <- base::sys.calls
[09:31:45.562]             `[[` <- base::`[[`
[09:31:45.562]             `+` <- base::`+`
[09:31:45.562]             `<<-` <- base::`<<-`
[09:31:45.562]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:45.562]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:45.562]                   3L)]
[09:31:45.562]             }
[09:31:45.562]             function(cond) {
[09:31:45.562]                 is_error <- inherits(cond, "error")
[09:31:45.562]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:45.562]                   NULL)
[09:31:45.562]                 if (is_error) {
[09:31:45.562]                   sessionInformation <- function() {
[09:31:45.562]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:45.562]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:45.562]                       search = base::search(), system = base::Sys.info())
[09:31:45.562]                   }
[09:31:45.562]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.562]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:45.562]                     cond$call), session = sessionInformation(), 
[09:31:45.562]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:45.562]                   signalCondition(cond)
[09:31:45.562]                 }
[09:31:45.562]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:45.562]                 "immediateCondition"))) {
[09:31:45.562]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:45.562]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.562]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:45.562]                   if (TRUE && !signal) {
[09:31:45.562]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.562]                     {
[09:31:45.562]                       inherits <- base::inherits
[09:31:45.562]                       invokeRestart <- base::invokeRestart
[09:31:45.562]                       is.null <- base::is.null
[09:31:45.562]                       muffled <- FALSE
[09:31:45.562]                       if (inherits(cond, "message")) {
[09:31:45.562]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.562]                         if (muffled) 
[09:31:45.562]                           invokeRestart("muffleMessage")
[09:31:45.562]                       }
[09:31:45.562]                       else if (inherits(cond, "warning")) {
[09:31:45.562]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.562]                         if (muffled) 
[09:31:45.562]                           invokeRestart("muffleWarning")
[09:31:45.562]                       }
[09:31:45.562]                       else if (inherits(cond, "condition")) {
[09:31:45.562]                         if (!is.null(pattern)) {
[09:31:45.562]                           computeRestarts <- base::computeRestarts
[09:31:45.562]                           grepl <- base::grepl
[09:31:45.562]                           restarts <- computeRestarts(cond)
[09:31:45.562]                           for (restart in restarts) {
[09:31:45.562]                             name <- restart$name
[09:31:45.562]                             if (is.null(name)) 
[09:31:45.562]                               next
[09:31:45.562]                             if (!grepl(pattern, name)) 
[09:31:45.562]                               next
[09:31:45.562]                             invokeRestart(restart)
[09:31:45.562]                             muffled <- TRUE
[09:31:45.562]                             break
[09:31:45.562]                           }
[09:31:45.562]                         }
[09:31:45.562]                       }
[09:31:45.562]                       invisible(muffled)
[09:31:45.562]                     }
[09:31:45.562]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.562]                   }
[09:31:45.562]                 }
[09:31:45.562]                 else {
[09:31:45.562]                   if (TRUE) {
[09:31:45.562]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.562]                     {
[09:31:45.562]                       inherits <- base::inherits
[09:31:45.562]                       invokeRestart <- base::invokeRestart
[09:31:45.562]                       is.null <- base::is.null
[09:31:45.562]                       muffled <- FALSE
[09:31:45.562]                       if (inherits(cond, "message")) {
[09:31:45.562]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.562]                         if (muffled) 
[09:31:45.562]                           invokeRestart("muffleMessage")
[09:31:45.562]                       }
[09:31:45.562]                       else if (inherits(cond, "warning")) {
[09:31:45.562]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.562]                         if (muffled) 
[09:31:45.562]                           invokeRestart("muffleWarning")
[09:31:45.562]                       }
[09:31:45.562]                       else if (inherits(cond, "condition")) {
[09:31:45.562]                         if (!is.null(pattern)) {
[09:31:45.562]                           computeRestarts <- base::computeRestarts
[09:31:45.562]                           grepl <- base::grepl
[09:31:45.562]                           restarts <- computeRestarts(cond)
[09:31:45.562]                           for (restart in restarts) {
[09:31:45.562]                             name <- restart$name
[09:31:45.562]                             if (is.null(name)) 
[09:31:45.562]                               next
[09:31:45.562]                             if (!grepl(pattern, name)) 
[09:31:45.562]                               next
[09:31:45.562]                             invokeRestart(restart)
[09:31:45.562]                             muffled <- TRUE
[09:31:45.562]                             break
[09:31:45.562]                           }
[09:31:45.562]                         }
[09:31:45.562]                       }
[09:31:45.562]                       invisible(muffled)
[09:31:45.562]                     }
[09:31:45.562]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.562]                   }
[09:31:45.562]                 }
[09:31:45.562]             }
[09:31:45.562]         }))
[09:31:45.562]     }, error = function(ex) {
[09:31:45.562]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:45.562]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.562]                 ...future.rng), started = ...future.startTime, 
[09:31:45.562]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:45.562]             version = "1.8"), class = "FutureResult")
[09:31:45.562]     }, finally = {
[09:31:45.562]         if (!identical(...future.workdir, getwd())) 
[09:31:45.562]             setwd(...future.workdir)
[09:31:45.562]         {
[09:31:45.562]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:45.562]                 ...future.oldOptions$nwarnings <- NULL
[09:31:45.562]             }
[09:31:45.562]             base::options(...future.oldOptions)
[09:31:45.562]             if (.Platform$OS.type == "windows") {
[09:31:45.562]                 old_names <- names(...future.oldEnvVars)
[09:31:45.562]                 envs <- base::Sys.getenv()
[09:31:45.562]                 names <- names(envs)
[09:31:45.562]                 common <- intersect(names, old_names)
[09:31:45.562]                 added <- setdiff(names, old_names)
[09:31:45.562]                 removed <- setdiff(old_names, names)
[09:31:45.562]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:45.562]                   envs[common]]
[09:31:45.562]                 NAMES <- toupper(changed)
[09:31:45.562]                 args <- list()
[09:31:45.562]                 for (kk in seq_along(NAMES)) {
[09:31:45.562]                   name <- changed[[kk]]
[09:31:45.562]                   NAME <- NAMES[[kk]]
[09:31:45.562]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.562]                     next
[09:31:45.562]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.562]                 }
[09:31:45.562]                 NAMES <- toupper(added)
[09:31:45.562]                 for (kk in seq_along(NAMES)) {
[09:31:45.562]                   name <- added[[kk]]
[09:31:45.562]                   NAME <- NAMES[[kk]]
[09:31:45.562]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.562]                     next
[09:31:45.562]                   args[[name]] <- ""
[09:31:45.562]                 }
[09:31:45.562]                 NAMES <- toupper(removed)
[09:31:45.562]                 for (kk in seq_along(NAMES)) {
[09:31:45.562]                   name <- removed[[kk]]
[09:31:45.562]                   NAME <- NAMES[[kk]]
[09:31:45.562]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.562]                     next
[09:31:45.562]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.562]                 }
[09:31:45.562]                 if (length(args) > 0) 
[09:31:45.562]                   base::do.call(base::Sys.setenv, args = args)
[09:31:45.562]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:45.562]             }
[09:31:45.562]             else {
[09:31:45.562]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:45.562]             }
[09:31:45.562]             {
[09:31:45.562]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:45.562]                   0L) {
[09:31:45.562]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:45.562]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:45.562]                   base::options(opts)
[09:31:45.562]                 }
[09:31:45.562]                 {
[09:31:45.562]                   {
[09:31:45.562]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:45.562]                     NULL
[09:31:45.562]                   }
[09:31:45.562]                   options(future.plan = NULL)
[09:31:45.562]                   if (is.na(NA_character_)) 
[09:31:45.562]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.562]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:45.562]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:45.562]                     .init = FALSE)
[09:31:45.562]                 }
[09:31:45.562]             }
[09:31:45.562]         }
[09:31:45.562]     })
[09:31:45.562]     if (TRUE) {
[09:31:45.562]         base::sink(type = "output", split = FALSE)
[09:31:45.562]         if (TRUE) {
[09:31:45.562]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:45.562]         }
[09:31:45.562]         else {
[09:31:45.562]             ...future.result["stdout"] <- base::list(NULL)
[09:31:45.562]         }
[09:31:45.562]         base::close(...future.stdout)
[09:31:45.562]         ...future.stdout <- NULL
[09:31:45.562]     }
[09:31:45.562]     ...future.result$conditions <- ...future.conditions
[09:31:45.562]     ...future.result$finished <- base::Sys.time()
[09:31:45.562]     ...future.result
[09:31:45.562] }
[09:31:45.565] assign_globals() ...
[09:31:45.565] List of 1
[09:31:45.565]  $ a: num 0
[09:31:45.565]  - attr(*, "where")=List of 1
[09:31:45.565]   ..$ a:<environment: R_EmptyEnv> 
[09:31:45.565]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:31:45.565]  - attr(*, "resolved")= logi FALSE
[09:31:45.565]  - attr(*, "total_size")= num 56
[09:31:45.568] - copied ‘a’ to environment
[09:31:45.568] assign_globals() ... done
[09:31:45.568] requestCore(): workers = 2
[09:31:45.570] MulticoreFuture started
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    b <- 3
    c <- 2
    a * b * c
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
[09:31:45.570] plan(): Setting new future strategy stack:
Globals: 1 objects totaling 56 bytes (numeric ‘a’ of 56 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[09:31:45.571] List of future strategies:
[09:31:45.571] 1. sequential:
[09:31:45.571]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:45.571]    - tweaked: FALSE
[09:31:45.571]    - call: NULL
[09:31:45.572] plan(): nbrOfWorkers() = 1
[09:31:45.574] plan(): Setting new future strategy stack:
[09:31:45.574] List of future strategies:
[09:31:45.574] 1. multicore:
[09:31:45.574]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:45.574]    - tweaked: FALSE
[09:31:45.574]    - call: plan(multicore)
[09:31:45.579] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 4dab417a-2fdd-f8a2-2e0a-d701ed5fedef
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:45.579] result() for MulticoreFuture ...
[09:31:45.580] result() for MulticoreFuture ...
[09:31:45.580] result() for MulticoreFuture ... done
[09:31:45.581] result() for MulticoreFuture ... done
[09:31:45.581] result() for MulticoreFuture ...
[09:31:45.581] result() for MulticoreFuture ... done
[1] 0
*** multicore(..., globals = TRUE) with globals and blocking
 - Creating multicore future #1 ...
[09:31:45.585] getGlobalsAndPackages() ...
[09:31:45.586] Searching for globals...
[09:31:45.586] - globals found: [2] ‘{’, ‘ii’
[09:31:45.587] Searching for globals ... DONE
[09:31:45.587] Resolving globals: FALSE
[09:31:45.587] The total size of the 1 globals is 56 bytes (56 bytes)
[09:31:45.588] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[09:31:45.588] - globals: [1] ‘ii’
[09:31:45.588] 
[09:31:45.588] getGlobalsAndPackages() ... DONE
[09:31:45.588] Packages needed by the future expression (n = 0): <none>
[09:31:45.589] Packages needed by future strategies (n = 0): <none>
[09:31:45.589] {
[09:31:45.589]     {
[09:31:45.589]         {
[09:31:45.589]             ...future.startTime <- base::Sys.time()
[09:31:45.589]             {
[09:31:45.589]                 {
[09:31:45.589]                   {
[09:31:45.589]                     {
[09:31:45.589]                       base::local({
[09:31:45.589]                         has_future <- base::requireNamespace("future", 
[09:31:45.589]                           quietly = TRUE)
[09:31:45.589]                         if (has_future) {
[09:31:45.589]                           ns <- base::getNamespace("future")
[09:31:45.589]                           version <- ns[[".package"]][["version"]]
[09:31:45.589]                           if (is.null(version)) 
[09:31:45.589]                             version <- utils::packageVersion("future")
[09:31:45.589]                         }
[09:31:45.589]                         else {
[09:31:45.589]                           version <- NULL
[09:31:45.589]                         }
[09:31:45.589]                         if (!has_future || version < "1.8.0") {
[09:31:45.589]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:45.589]                             "", base::R.version$version.string), 
[09:31:45.589]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:45.589]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:45.589]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:45.589]                               "release", "version")], collapse = " "), 
[09:31:45.589]                             hostname = base::Sys.info()[["nodename"]])
[09:31:45.589]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:45.589]                             info)
[09:31:45.589]                           info <- base::paste(info, collapse = "; ")
[09:31:45.589]                           if (!has_future) {
[09:31:45.589]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:45.589]                               info)
[09:31:45.589]                           }
[09:31:45.589]                           else {
[09:31:45.589]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:45.589]                               info, version)
[09:31:45.589]                           }
[09:31:45.589]                           base::stop(msg)
[09:31:45.589]                         }
[09:31:45.589]                       })
[09:31:45.589]                     }
[09:31:45.589]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:45.589]                     base::options(mc.cores = 1L)
[09:31:45.589]                   }
[09:31:45.589]                   ...future.strategy.old <- future::plan("list")
[09:31:45.589]                   options(future.plan = NULL)
[09:31:45.589]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.589]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:45.589]                 }
[09:31:45.589]                 ...future.workdir <- getwd()
[09:31:45.589]             }
[09:31:45.589]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:45.589]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:45.589]         }
[09:31:45.589]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:45.589]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:45.589]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:45.589]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:45.589]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:45.589]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:45.589]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:45.589]             base::names(...future.oldOptions))
[09:31:45.589]     }
[09:31:45.589]     if (FALSE) {
[09:31:45.589]     }
[09:31:45.589]     else {
[09:31:45.589]         if (TRUE) {
[09:31:45.589]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:45.589]                 open = "w")
[09:31:45.589]         }
[09:31:45.589]         else {
[09:31:45.589]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:45.589]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:45.589]         }
[09:31:45.589]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:45.589]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:45.589]             base::sink(type = "output", split = FALSE)
[09:31:45.589]             base::close(...future.stdout)
[09:31:45.589]         }, add = TRUE)
[09:31:45.589]     }
[09:31:45.589]     ...future.frame <- base::sys.nframe()
[09:31:45.589]     ...future.conditions <- base::list()
[09:31:45.589]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:45.589]     if (FALSE) {
[09:31:45.589]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:45.589]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:45.589]     }
[09:31:45.589]     ...future.result <- base::tryCatch({
[09:31:45.589]         base::withCallingHandlers({
[09:31:45.589]             ...future.value <- base::withVisible(base::local({
[09:31:45.589]                 withCallingHandlers({
[09:31:45.589]                   {
[09:31:45.589]                     ii
[09:31:45.589]                   }
[09:31:45.589]                 }, immediateCondition = function(cond) {
[09:31:45.589]                   save_rds <- function (object, pathname, ...) 
[09:31:45.589]                   {
[09:31:45.589]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:31:45.589]                     if (file_test("-f", pathname_tmp)) {
[09:31:45.589]                       fi_tmp <- file.info(pathname_tmp)
[09:31:45.589]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:31:45.589]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:45.589]                         fi_tmp[["mtime"]])
[09:31:45.589]                     }
[09:31:45.589]                     tryCatch({
[09:31:45.589]                       saveRDS(object, file = pathname_tmp, ...)
[09:31:45.589]                     }, error = function(ex) {
[09:31:45.589]                       msg <- conditionMessage(ex)
[09:31:45.589]                       fi_tmp <- file.info(pathname_tmp)
[09:31:45.589]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:31:45.589]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:45.589]                         fi_tmp[["mtime"]], msg)
[09:31:45.589]                       ex$message <- msg
[09:31:45.589]                       stop(ex)
[09:31:45.589]                     })
[09:31:45.589]                     stopifnot(file_test("-f", pathname_tmp))
[09:31:45.589]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:31:45.589]                     if (!res || file_test("-f", pathname_tmp)) {
[09:31:45.589]                       fi_tmp <- file.info(pathname_tmp)
[09:31:45.589]                       fi <- file.info(pathname)
[09:31:45.589]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:31:45.589]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:45.589]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:31:45.589]                         fi[["size"]], fi[["mtime"]])
[09:31:45.589]                       stop(msg)
[09:31:45.589]                     }
[09:31:45.589]                     invisible(pathname)
[09:31:45.589]                   }
[09:31:45.589]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:31:45.589]                     rootPath = tempdir()) 
[09:31:45.589]                   {
[09:31:45.589]                     obj <- list(time = Sys.time(), condition = cond)
[09:31:45.589]                     file <- tempfile(pattern = class(cond)[1], 
[09:31:45.589]                       tmpdir = path, fileext = ".rds")
[09:31:45.589]                     save_rds(obj, file)
[09:31:45.589]                   }
[09:31:45.589]                   saveImmediateCondition(cond, path = "/tmp/RtmpMXzm1h/.future/immediateConditions")
[09:31:45.589]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.589]                   {
[09:31:45.589]                     inherits <- base::inherits
[09:31:45.589]                     invokeRestart <- base::invokeRestart
[09:31:45.589]                     is.null <- base::is.null
[09:31:45.589]                     muffled <- FALSE
[09:31:45.589]                     if (inherits(cond, "message")) {
[09:31:45.589]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:45.589]                       if (muffled) 
[09:31:45.589]                         invokeRestart("muffleMessage")
[09:31:45.589]                     }
[09:31:45.589]                     else if (inherits(cond, "warning")) {
[09:31:45.589]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:45.589]                       if (muffled) 
[09:31:45.589]                         invokeRestart("muffleWarning")
[09:31:45.589]                     }
[09:31:45.589]                     else if (inherits(cond, "condition")) {
[09:31:45.589]                       if (!is.null(pattern)) {
[09:31:45.589]                         computeRestarts <- base::computeRestarts
[09:31:45.589]                         grepl <- base::grepl
[09:31:45.589]                         restarts <- computeRestarts(cond)
[09:31:45.589]                         for (restart in restarts) {
[09:31:45.589]                           name <- restart$name
[09:31:45.589]                           if (is.null(name)) 
[09:31:45.589]                             next
[09:31:45.589]                           if (!grepl(pattern, name)) 
[09:31:45.589]                             next
[09:31:45.589]                           invokeRestart(restart)
[09:31:45.589]                           muffled <- TRUE
[09:31:45.589]                           break
[09:31:45.589]                         }
[09:31:45.589]                       }
[09:31:45.589]                     }
[09:31:45.589]                     invisible(muffled)
[09:31:45.589]                   }
[09:31:45.589]                   muffleCondition(cond)
[09:31:45.589]                 })
[09:31:45.589]             }))
[09:31:45.589]             future::FutureResult(value = ...future.value$value, 
[09:31:45.589]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.589]                   ...future.rng), globalenv = if (FALSE) 
[09:31:45.589]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:45.589]                     ...future.globalenv.names))
[09:31:45.589]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:45.589]         }, condition = base::local({
[09:31:45.589]             c <- base::c
[09:31:45.589]             inherits <- base::inherits
[09:31:45.589]             invokeRestart <- base::invokeRestart
[09:31:45.589]             length <- base::length
[09:31:45.589]             list <- base::list
[09:31:45.589]             seq.int <- base::seq.int
[09:31:45.589]             signalCondition <- base::signalCondition
[09:31:45.589]             sys.calls <- base::sys.calls
[09:31:45.589]             `[[` <- base::`[[`
[09:31:45.589]             `+` <- base::`+`
[09:31:45.589]             `<<-` <- base::`<<-`
[09:31:45.589]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:45.589]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:45.589]                   3L)]
[09:31:45.589]             }
[09:31:45.589]             function(cond) {
[09:31:45.589]                 is_error <- inherits(cond, "error")
[09:31:45.589]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:45.589]                   NULL)
[09:31:45.589]                 if (is_error) {
[09:31:45.589]                   sessionInformation <- function() {
[09:31:45.589]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:45.589]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:45.589]                       search = base::search(), system = base::Sys.info())
[09:31:45.589]                   }
[09:31:45.589]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.589]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:45.589]                     cond$call), session = sessionInformation(), 
[09:31:45.589]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:45.589]                   signalCondition(cond)
[09:31:45.589]                 }
[09:31:45.589]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:45.589]                 "immediateCondition"))) {
[09:31:45.589]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:45.589]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.589]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:45.589]                   if (TRUE && !signal) {
[09:31:45.589]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.589]                     {
[09:31:45.589]                       inherits <- base::inherits
[09:31:45.589]                       invokeRestart <- base::invokeRestart
[09:31:45.589]                       is.null <- base::is.null
[09:31:45.589]                       muffled <- FALSE
[09:31:45.589]                       if (inherits(cond, "message")) {
[09:31:45.589]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.589]                         if (muffled) 
[09:31:45.589]                           invokeRestart("muffleMessage")
[09:31:45.589]                       }
[09:31:45.589]                       else if (inherits(cond, "warning")) {
[09:31:45.589]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.589]                         if (muffled) 
[09:31:45.589]                           invokeRestart("muffleWarning")
[09:31:45.589]                       }
[09:31:45.589]                       else if (inherits(cond, "condition")) {
[09:31:45.589]                         if (!is.null(pattern)) {
[09:31:45.589]                           computeRestarts <- base::computeRestarts
[09:31:45.589]                           grepl <- base::grepl
[09:31:45.589]                           restarts <- computeRestarts(cond)
[09:31:45.589]                           for (restart in restarts) {
[09:31:45.589]                             name <- restart$name
[09:31:45.589]                             if (is.null(name)) 
[09:31:45.589]                               next
[09:31:45.589]                             if (!grepl(pattern, name)) 
[09:31:45.589]                               next
[09:31:45.589]                             invokeRestart(restart)
[09:31:45.589]                             muffled <- TRUE
[09:31:45.589]                             break
[09:31:45.589]                           }
[09:31:45.589]                         }
[09:31:45.589]                       }
[09:31:45.589]                       invisible(muffled)
[09:31:45.589]                     }
[09:31:45.589]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.589]                   }
[09:31:45.589]                 }
[09:31:45.589]                 else {
[09:31:45.589]                   if (TRUE) {
[09:31:45.589]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.589]                     {
[09:31:45.589]                       inherits <- base::inherits
[09:31:45.589]                       invokeRestart <- base::invokeRestart
[09:31:45.589]                       is.null <- base::is.null
[09:31:45.589]                       muffled <- FALSE
[09:31:45.589]                       if (inherits(cond, "message")) {
[09:31:45.589]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.589]                         if (muffled) 
[09:31:45.589]                           invokeRestart("muffleMessage")
[09:31:45.589]                       }
[09:31:45.589]                       else if (inherits(cond, "warning")) {
[09:31:45.589]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.589]                         if (muffled) 
[09:31:45.589]                           invokeRestart("muffleWarning")
[09:31:45.589]                       }
[09:31:45.589]                       else if (inherits(cond, "condition")) {
[09:31:45.589]                         if (!is.null(pattern)) {
[09:31:45.589]                           computeRestarts <- base::computeRestarts
[09:31:45.589]                           grepl <- base::grepl
[09:31:45.589]                           restarts <- computeRestarts(cond)
[09:31:45.589]                           for (restart in restarts) {
[09:31:45.589]                             name <- restart$name
[09:31:45.589]                             if (is.null(name)) 
[09:31:45.589]                               next
[09:31:45.589]                             if (!grepl(pattern, name)) 
[09:31:45.589]                               next
[09:31:45.589]                             invokeRestart(restart)
[09:31:45.589]                             muffled <- TRUE
[09:31:45.589]                             break
[09:31:45.589]                           }
[09:31:45.589]                         }
[09:31:45.589]                       }
[09:31:45.589]                       invisible(muffled)
[09:31:45.589]                     }
[09:31:45.589]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.589]                   }
[09:31:45.589]                 }
[09:31:45.589]             }
[09:31:45.589]         }))
[09:31:45.589]     }, error = function(ex) {
[09:31:45.589]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:45.589]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.589]                 ...future.rng), started = ...future.startTime, 
[09:31:45.589]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:45.589]             version = "1.8"), class = "FutureResult")
[09:31:45.589]     }, finally = {
[09:31:45.589]         if (!identical(...future.workdir, getwd())) 
[09:31:45.589]             setwd(...future.workdir)
[09:31:45.589]         {
[09:31:45.589]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:45.589]                 ...future.oldOptions$nwarnings <- NULL
[09:31:45.589]             }
[09:31:45.589]             base::options(...future.oldOptions)
[09:31:45.589]             if (.Platform$OS.type == "windows") {
[09:31:45.589]                 old_names <- names(...future.oldEnvVars)
[09:31:45.589]                 envs <- base::Sys.getenv()
[09:31:45.589]                 names <- names(envs)
[09:31:45.589]                 common <- intersect(names, old_names)
[09:31:45.589]                 added <- setdiff(names, old_names)
[09:31:45.589]                 removed <- setdiff(old_names, names)
[09:31:45.589]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:45.589]                   envs[common]]
[09:31:45.589]                 NAMES <- toupper(changed)
[09:31:45.589]                 args <- list()
[09:31:45.589]                 for (kk in seq_along(NAMES)) {
[09:31:45.589]                   name <- changed[[kk]]
[09:31:45.589]                   NAME <- NAMES[[kk]]
[09:31:45.589]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.589]                     next
[09:31:45.589]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.589]                 }
[09:31:45.589]                 NAMES <- toupper(added)
[09:31:45.589]                 for (kk in seq_along(NAMES)) {
[09:31:45.589]                   name <- added[[kk]]
[09:31:45.589]                   NAME <- NAMES[[kk]]
[09:31:45.589]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.589]                     next
[09:31:45.589]                   args[[name]] <- ""
[09:31:45.589]                 }
[09:31:45.589]                 NAMES <- toupper(removed)
[09:31:45.589]                 for (kk in seq_along(NAMES)) {
[09:31:45.589]                   name <- removed[[kk]]
[09:31:45.589]                   NAME <- NAMES[[kk]]
[09:31:45.589]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.589]                     next
[09:31:45.589]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.589]                 }
[09:31:45.589]                 if (length(args) > 0) 
[09:31:45.589]                   base::do.call(base::Sys.setenv, args = args)
[09:31:45.589]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:45.589]             }
[09:31:45.589]             else {
[09:31:45.589]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:45.589]             }
[09:31:45.589]             {
[09:31:45.589]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:45.589]                   0L) {
[09:31:45.589]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:45.589]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:45.589]                   base::options(opts)
[09:31:45.589]                 }
[09:31:45.589]                 {
[09:31:45.589]                   {
[09:31:45.589]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:45.589]                     NULL
[09:31:45.589]                   }
[09:31:45.589]                   options(future.plan = NULL)
[09:31:45.589]                   if (is.na(NA_character_)) 
[09:31:45.589]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.589]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:45.589]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:45.589]                     .init = FALSE)
[09:31:45.589]                 }
[09:31:45.589]             }
[09:31:45.589]         }
[09:31:45.589]     })
[09:31:45.589]     if (TRUE) {
[09:31:45.589]         base::sink(type = "output", split = FALSE)
[09:31:45.589]         if (TRUE) {
[09:31:45.589]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:45.589]         }
[09:31:45.589]         else {
[09:31:45.589]             ...future.result["stdout"] <- base::list(NULL)
[09:31:45.589]         }
[09:31:45.589]         base::close(...future.stdout)
[09:31:45.589]         ...future.stdout <- NULL
[09:31:45.589]     }
[09:31:45.589]     ...future.result$conditions <- ...future.conditions
[09:31:45.589]     ...future.result$finished <- base::Sys.time()
[09:31:45.589]     ...future.result
[09:31:45.589] }
[09:31:45.592] assign_globals() ...
[09:31:45.592] List of 1
[09:31:45.592]  $ ii: int 1
[09:31:45.592]  - attr(*, "where")=List of 1
[09:31:45.592]   ..$ ii:<environment: R_EmptyEnv> 
[09:31:45.592]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:31:45.592]  - attr(*, "resolved")= logi FALSE
[09:31:45.592]  - attr(*, "total_size")= num 56
[09:31:45.594] - copied ‘ii’ to environment
[09:31:45.594] assign_globals() ... done
[09:31:45.594] requestCore(): workers = 2
[09:31:45.596] MulticoreFuture started
 - Creating multicore future #2 ...
[09:31:45.597] plan(): Setting new future strategy stack:
[09:31:45.597] List of future strategies:
[09:31:45.597] 1. sequential:
[09:31:45.597]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:45.597]    - tweaked: FALSE
[09:31:45.597]    - call: NULL
[09:31:45.599] plan(): nbrOfWorkers() = 1
[09:31:45.600] plan(): Setting new future strategy stack:
[09:31:45.600] List of future strategies:
[09:31:45.600] 1. multicore:
[09:31:45.600]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:45.600]    - tweaked: FALSE
[09:31:45.600]    - call: plan(multicore)
[09:31:45.601] getGlobalsAndPackages() ...
[09:31:45.601] Searching for globals...
[09:31:45.603] - globals found: [2] ‘{’, ‘ii’
[09:31:45.603] Searching for globals ... DONE
[09:31:45.603] Resolving globals: FALSE
[09:31:45.604] The total size of the 1 globals is 56 bytes (56 bytes)
[09:31:45.604] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[09:31:45.604] - globals: [1] ‘ii’
[09:31:45.605] 
[09:31:45.605] plan(): nbrOfWorkers() = 2
[09:31:45.605] getGlobalsAndPackages() ... DONE
[09:31:45.605] Packages needed by the future expression (n = 0): <none>
[09:31:45.606] Packages needed by future strategies (n = 0): <none>
[09:31:45.611] {
[09:31:45.611]     {
[09:31:45.611]         {
[09:31:45.611]             ...future.startTime <- base::Sys.time()
[09:31:45.611]             {
[09:31:45.611]                 {
[09:31:45.611]                   {
[09:31:45.611]                     {
[09:31:45.611]                       base::local({
[09:31:45.611]                         has_future <- base::requireNamespace("future", 
[09:31:45.611]                           quietly = TRUE)
[09:31:45.611]                         if (has_future) {
[09:31:45.611]                           ns <- base::getNamespace("future")
[09:31:45.611]                           version <- ns[[".package"]][["version"]]
[09:31:45.611]                           if (is.null(version)) 
[09:31:45.611]                             version <- utils::packageVersion("future")
[09:31:45.611]                         }
[09:31:45.611]                         else {
[09:31:45.611]                           version <- NULL
[09:31:45.611]                         }
[09:31:45.611]                         if (!has_future || version < "1.8.0") {
[09:31:45.611]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:45.611]                             "", base::R.version$version.string), 
[09:31:45.611]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:45.611]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:45.611]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:45.611]                               "release", "version")], collapse = " "), 
[09:31:45.611]                             hostname = base::Sys.info()[["nodename"]])
[09:31:45.611]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:45.611]                             info)
[09:31:45.611]                           info <- base::paste(info, collapse = "; ")
[09:31:45.611]                           if (!has_future) {
[09:31:45.611]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:45.611]                               info)
[09:31:45.611]                           }
[09:31:45.611]                           else {
[09:31:45.611]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:45.611]                               info, version)
[09:31:45.611]                           }
[09:31:45.611]                           base::stop(msg)
[09:31:45.611]                         }
[09:31:45.611]                       })
[09:31:45.611]                     }
[09:31:45.611]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:45.611]                     base::options(mc.cores = 1L)
[09:31:45.611]                   }
[09:31:45.611]                   ...future.strategy.old <- future::plan("list")
[09:31:45.611]                   options(future.plan = NULL)
[09:31:45.611]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.611]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:45.611]                 }
[09:31:45.611]                 ...future.workdir <- getwd()
[09:31:45.611]             }
[09:31:45.611]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:45.611]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:45.611]         }
[09:31:45.611]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:45.611]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:45.611]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:45.611]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:45.611]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:45.611]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:45.611]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:45.611]             base::names(...future.oldOptions))
[09:31:45.611]     }
[09:31:45.611]     if (FALSE) {
[09:31:45.611]     }
[09:31:45.611]     else {
[09:31:45.611]         if (TRUE) {
[09:31:45.611]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:45.611]                 open = "w")
[09:31:45.611]         }
[09:31:45.611]         else {
[09:31:45.611]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:45.611]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:45.611]         }
[09:31:45.611]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:45.611]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:45.611]             base::sink(type = "output", split = FALSE)
[09:31:45.611]             base::close(...future.stdout)
[09:31:45.611]         }, add = TRUE)
[09:31:45.611]     }
[09:31:45.611]     ...future.frame <- base::sys.nframe()
[09:31:45.611]     ...future.conditions <- base::list()
[09:31:45.611]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:45.611]     if (FALSE) {
[09:31:45.611]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:45.611]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:45.611]     }
[09:31:45.611]     ...future.result <- base::tryCatch({
[09:31:45.611]         base::withCallingHandlers({
[09:31:45.611]             ...future.value <- base::withVisible(base::local({
[09:31:45.611]                 withCallingHandlers({
[09:31:45.611]                   {
[09:31:45.611]                     ii
[09:31:45.611]                   }
[09:31:45.611]                 }, immediateCondition = function(cond) {
[09:31:45.611]                   save_rds <- function (object, pathname, ...) 
[09:31:45.611]                   {
[09:31:45.611]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:31:45.611]                     if (file_test("-f", pathname_tmp)) {
[09:31:45.611]                       fi_tmp <- file.info(pathname_tmp)
[09:31:45.611]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:31:45.611]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:45.611]                         fi_tmp[["mtime"]])
[09:31:45.611]                     }
[09:31:45.611]                     tryCatch({
[09:31:45.611]                       saveRDS(object, file = pathname_tmp, ...)
[09:31:45.611]                     }, error = function(ex) {
[09:31:45.611]                       msg <- conditionMessage(ex)
[09:31:45.611]                       fi_tmp <- file.info(pathname_tmp)
[09:31:45.611]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:31:45.611]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:45.611]                         fi_tmp[["mtime"]], msg)
[09:31:45.611]                       ex$message <- msg
[09:31:45.611]                       stop(ex)
[09:31:45.611]                     })
[09:31:45.611]                     stopifnot(file_test("-f", pathname_tmp))
[09:31:45.611]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:31:45.611]                     if (!res || file_test("-f", pathname_tmp)) {
[09:31:45.611]                       fi_tmp <- file.info(pathname_tmp)
[09:31:45.611]                       fi <- file.info(pathname)
[09:31:45.611]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:31:45.611]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:45.611]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:31:45.611]                         fi[["size"]], fi[["mtime"]])
[09:31:45.611]                       stop(msg)
[09:31:45.611]                     }
[09:31:45.611]                     invisible(pathname)
[09:31:45.611]                   }
[09:31:45.611]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:31:45.611]                     rootPath = tempdir()) 
[09:31:45.611]                   {
[09:31:45.611]                     obj <- list(time = Sys.time(), condition = cond)
[09:31:45.611]                     file <- tempfile(pattern = class(cond)[1], 
[09:31:45.611]                       tmpdir = path, fileext = ".rds")
[09:31:45.611]                     save_rds(obj, file)
[09:31:45.611]                   }
[09:31:45.611]                   saveImmediateCondition(cond, path = "/tmp/RtmpMXzm1h/.future/immediateConditions")
[09:31:45.611]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.611]                   {
[09:31:45.611]                     inherits <- base::inherits
[09:31:45.611]                     invokeRestart <- base::invokeRestart
[09:31:45.611]                     is.null <- base::is.null
[09:31:45.611]                     muffled <- FALSE
[09:31:45.611]                     if (inherits(cond, "message")) {
[09:31:45.611]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:45.611]                       if (muffled) 
[09:31:45.611]                         invokeRestart("muffleMessage")
[09:31:45.611]                     }
[09:31:45.611]                     else if (inherits(cond, "warning")) {
[09:31:45.611]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:45.611]                       if (muffled) 
[09:31:45.611]                         invokeRestart("muffleWarning")
[09:31:45.611]                     }
[09:31:45.611]                     else if (inherits(cond, "condition")) {
[09:31:45.611]                       if (!is.null(pattern)) {
[09:31:45.611]                         computeRestarts <- base::computeRestarts
[09:31:45.611]                         grepl <- base::grepl
[09:31:45.611]                         restarts <- computeRestarts(cond)
[09:31:45.611]                         for (restart in restarts) {
[09:31:45.611]                           name <- restart$name
[09:31:45.611]                           if (is.null(name)) 
[09:31:45.611]                             next
[09:31:45.611]                           if (!grepl(pattern, name)) 
[09:31:45.611]                             next
[09:31:45.611]                           invokeRestart(restart)
[09:31:45.611]                           muffled <- TRUE
[09:31:45.611]                           break
[09:31:45.611]                         }
[09:31:45.611]                       }
[09:31:45.611]                     }
[09:31:45.611]                     invisible(muffled)
[09:31:45.611]                   }
[09:31:45.611]                   muffleCondition(cond)
[09:31:45.611]                 })
[09:31:45.611]             }))
[09:31:45.611]             future::FutureResult(value = ...future.value$value, 
[09:31:45.611]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.611]                   ...future.rng), globalenv = if (FALSE) 
[09:31:45.611]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:45.611]                     ...future.globalenv.names))
[09:31:45.611]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:45.611]         }, condition = base::local({
[09:31:45.611]             c <- base::c
[09:31:45.611]             inherits <- base::inherits
[09:31:45.611]             invokeRestart <- base::invokeRestart
[09:31:45.611]             length <- base::length
[09:31:45.611]             list <- base::list
[09:31:45.611]             seq.int <- base::seq.int
[09:31:45.611]             signalCondition <- base::signalCondition
[09:31:45.611]             sys.calls <- base::sys.calls
[09:31:45.611]             `[[` <- base::`[[`
[09:31:45.611]             `+` <- base::`+`
[09:31:45.611]             `<<-` <- base::`<<-`
[09:31:45.611]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:45.611]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:45.611]                   3L)]
[09:31:45.611]             }
[09:31:45.611]             function(cond) {
[09:31:45.611]                 is_error <- inherits(cond, "error")
[09:31:45.611]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:45.611]                   NULL)
[09:31:45.611]                 if (is_error) {
[09:31:45.611]                   sessionInformation <- function() {
[09:31:45.611]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:45.611]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:45.611]                       search = base::search(), system = base::Sys.info())
[09:31:45.611]                   }
[09:31:45.611]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.611]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:45.611]                     cond$call), session = sessionInformation(), 
[09:31:45.611]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:45.611]                   signalCondition(cond)
[09:31:45.611]                 }
[09:31:45.611]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:45.611]                 "immediateCondition"))) {
[09:31:45.611]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:45.611]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.611]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:45.611]                   if (TRUE && !signal) {
[09:31:45.611]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.611]                     {
[09:31:45.611]                       inherits <- base::inherits
[09:31:45.611]                       invokeRestart <- base::invokeRestart
[09:31:45.611]                       is.null <- base::is.null
[09:31:45.611]                       muffled <- FALSE
[09:31:45.611]                       if (inherits(cond, "message")) {
[09:31:45.611]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.611]                         if (muffled) 
[09:31:45.611]                           invokeRestart("muffleMessage")
[09:31:45.611]                       }
[09:31:45.611]                       else if (inherits(cond, "warning")) {
[09:31:45.611]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.611]                         if (muffled) 
[09:31:45.611]                           invokeRestart("muffleWarning")
[09:31:45.611]                       }
[09:31:45.611]                       else if (inherits(cond, "condition")) {
[09:31:45.611]                         if (!is.null(pattern)) {
[09:31:45.611]                           computeRestarts <- base::computeRestarts
[09:31:45.611]                           grepl <- base::grepl
[09:31:45.611]                           restarts <- computeRestarts(cond)
[09:31:45.611]                           for (restart in restarts) {
[09:31:45.611]                             name <- restart$name
[09:31:45.611]                             if (is.null(name)) 
[09:31:45.611]                               next
[09:31:45.611]                             if (!grepl(pattern, name)) 
[09:31:45.611]                               next
[09:31:45.611]                             invokeRestart(restart)
[09:31:45.611]                             muffled <- TRUE
[09:31:45.611]                             break
[09:31:45.611]                           }
[09:31:45.611]                         }
[09:31:45.611]                       }
[09:31:45.611]                       invisible(muffled)
[09:31:45.611]                     }
[09:31:45.611]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.611]                   }
[09:31:45.611]                 }
[09:31:45.611]                 else {
[09:31:45.611]                   if (TRUE) {
[09:31:45.611]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.611]                     {
[09:31:45.611]                       inherits <- base::inherits
[09:31:45.611]                       invokeRestart <- base::invokeRestart
[09:31:45.611]                       is.null <- base::is.null
[09:31:45.611]                       muffled <- FALSE
[09:31:45.611]                       if (inherits(cond, "message")) {
[09:31:45.611]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.611]                         if (muffled) 
[09:31:45.611]                           invokeRestart("muffleMessage")
[09:31:45.611]                       }
[09:31:45.611]                       else if (inherits(cond, "warning")) {
[09:31:45.611]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.611]                         if (muffled) 
[09:31:45.611]                           invokeRestart("muffleWarning")
[09:31:45.611]                       }
[09:31:45.611]                       else if (inherits(cond, "condition")) {
[09:31:45.611]                         if (!is.null(pattern)) {
[09:31:45.611]                           computeRestarts <- base::computeRestarts
[09:31:45.611]                           grepl <- base::grepl
[09:31:45.611]                           restarts <- computeRestarts(cond)
[09:31:45.611]                           for (restart in restarts) {
[09:31:45.611]                             name <- restart$name
[09:31:45.611]                             if (is.null(name)) 
[09:31:45.611]                               next
[09:31:45.611]                             if (!grepl(pattern, name)) 
[09:31:45.611]                               next
[09:31:45.611]                             invokeRestart(restart)
[09:31:45.611]                             muffled <- TRUE
[09:31:45.611]                             break
[09:31:45.611]                           }
[09:31:45.611]                         }
[09:31:45.611]                       }
[09:31:45.611]                       invisible(muffled)
[09:31:45.611]                     }
[09:31:45.611]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.611]                   }
[09:31:45.611]                 }
[09:31:45.611]             }
[09:31:45.611]         }))
[09:31:45.611]     }, error = function(ex) {
[09:31:45.611]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:45.611]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.611]                 ...future.rng), started = ...future.startTime, 
[09:31:45.611]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:45.611]             version = "1.8"), class = "FutureResult")
[09:31:45.611]     }, finally = {
[09:31:45.611]         if (!identical(...future.workdir, getwd())) 
[09:31:45.611]             setwd(...future.workdir)
[09:31:45.611]         {
[09:31:45.611]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:45.611]                 ...future.oldOptions$nwarnings <- NULL
[09:31:45.611]             }
[09:31:45.611]             base::options(...future.oldOptions)
[09:31:45.611]             if (.Platform$OS.type == "windows") {
[09:31:45.611]                 old_names <- names(...future.oldEnvVars)
[09:31:45.611]                 envs <- base::Sys.getenv()
[09:31:45.611]                 names <- names(envs)
[09:31:45.611]                 common <- intersect(names, old_names)
[09:31:45.611]                 added <- setdiff(names, old_names)
[09:31:45.611]                 removed <- setdiff(old_names, names)
[09:31:45.611]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:45.611]                   envs[common]]
[09:31:45.611]                 NAMES <- toupper(changed)
[09:31:45.611]                 args <- list()
[09:31:45.611]                 for (kk in seq_along(NAMES)) {
[09:31:45.611]                   name <- changed[[kk]]
[09:31:45.611]                   NAME <- NAMES[[kk]]
[09:31:45.611]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.611]                     next
[09:31:45.611]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.611]                 }
[09:31:45.611]                 NAMES <- toupper(added)
[09:31:45.611]                 for (kk in seq_along(NAMES)) {
[09:31:45.611]                   name <- added[[kk]]
[09:31:45.611]                   NAME <- NAMES[[kk]]
[09:31:45.611]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.611]                     next
[09:31:45.611]                   args[[name]] <- ""
[09:31:45.611]                 }
[09:31:45.611]                 NAMES <- toupper(removed)
[09:31:45.611]                 for (kk in seq_along(NAMES)) {
[09:31:45.611]                   name <- removed[[kk]]
[09:31:45.611]                   NAME <- NAMES[[kk]]
[09:31:45.611]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.611]                     next
[09:31:45.611]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.611]                 }
[09:31:45.611]                 if (length(args) > 0) 
[09:31:45.611]                   base::do.call(base::Sys.setenv, args = args)
[09:31:45.611]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:45.611]             }
[09:31:45.611]             else {
[09:31:45.611]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:45.611]             }
[09:31:45.611]             {
[09:31:45.611]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:45.611]                   0L) {
[09:31:45.611]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:45.611]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:45.611]                   base::options(opts)
[09:31:45.611]                 }
[09:31:45.611]                 {
[09:31:45.611]                   {
[09:31:45.611]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:45.611]                     NULL
[09:31:45.611]                   }
[09:31:45.611]                   options(future.plan = NULL)
[09:31:45.611]                   if (is.na(NA_character_)) 
[09:31:45.611]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.611]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:45.611]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:45.611]                     .init = FALSE)
[09:31:45.611]                 }
[09:31:45.611]             }
[09:31:45.611]         }
[09:31:45.611]     })
[09:31:45.611]     if (TRUE) {
[09:31:45.611]         base::sink(type = "output", split = FALSE)
[09:31:45.611]         if (TRUE) {
[09:31:45.611]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:45.611]         }
[09:31:45.611]         else {
[09:31:45.611]             ...future.result["stdout"] <- base::list(NULL)
[09:31:45.611]         }
[09:31:45.611]         base::close(...future.stdout)
[09:31:45.611]         ...future.stdout <- NULL
[09:31:45.611]     }
[09:31:45.611]     ...future.result$conditions <- ...future.conditions
[09:31:45.611]     ...future.result$finished <- base::Sys.time()
[09:31:45.611]     ...future.result
[09:31:45.611] }
[09:31:45.613] assign_globals() ...
[09:31:45.614] List of 1
[09:31:45.614]  $ ii: int 2
[09:31:45.614]  - attr(*, "where")=List of 1
[09:31:45.614]   ..$ ii:<environment: R_EmptyEnv> 
[09:31:45.614]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:31:45.614]  - attr(*, "resolved")= logi FALSE
[09:31:45.614]  - attr(*, "total_size")= num 56
[09:31:45.617] - copied ‘ii’ to environment
[09:31:45.618] assign_globals() ... done
[09:31:45.618] requestCore(): workers = 2
[09:31:45.620] MulticoreFuture started
 - Creating multicore future #3 ...
[09:31:45.621] plan(): Setting new future strategy stack:
[09:31:45.621] List of future strategies:
[09:31:45.621] 1. sequential:
[09:31:45.621]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:45.621]    - tweaked: FALSE
[09:31:45.621]    - call: NULL
[09:31:45.622] plan(): nbrOfWorkers() = 1
[09:31:45.624] plan(): Setting new future strategy stack:
[09:31:45.625] List of future strategies:
[09:31:45.625] 1. multicore:
[09:31:45.625]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:45.625]    - tweaked: FALSE
[09:31:45.625]    - call: plan(multicore)
[09:31:45.626] getGlobalsAndPackages() ...
[09:31:45.626] Searching for globals...
[09:31:45.627] - globals found: [2] ‘{’, ‘ii’
[09:31:45.627] Searching for globals ... DONE
[09:31:45.628] Resolving globals: FALSE
[09:31:45.628] The total size of the 1 globals is 56 bytes (56 bytes)
[09:31:45.629] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[09:31:45.629] - globals: [1] ‘ii’
[09:31:45.629] plan(): nbrOfWorkers() = 2
[09:31:45.629] 
[09:31:45.629] getGlobalsAndPackages() ... DONE
[09:31:45.630] Packages needed by the future expression (n = 0): <none>
[09:31:45.630] Packages needed by future strategies (n = 0): <none>
[09:31:45.631] {
[09:31:45.631]     {
[09:31:45.631]         {
[09:31:45.631]             ...future.startTime <- base::Sys.time()
[09:31:45.631]             {
[09:31:45.631]                 {
[09:31:45.631]                   {
[09:31:45.631]                     {
[09:31:45.631]                       base::local({
[09:31:45.631]                         has_future <- base::requireNamespace("future", 
[09:31:45.631]                           quietly = TRUE)
[09:31:45.631]                         if (has_future) {
[09:31:45.631]                           ns <- base::getNamespace("future")
[09:31:45.631]                           version <- ns[[".package"]][["version"]]
[09:31:45.631]                           if (is.null(version)) 
[09:31:45.631]                             version <- utils::packageVersion("future")
[09:31:45.631]                         }
[09:31:45.631]                         else {
[09:31:45.631]                           version <- NULL
[09:31:45.631]                         }
[09:31:45.631]                         if (!has_future || version < "1.8.0") {
[09:31:45.631]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:45.631]                             "", base::R.version$version.string), 
[09:31:45.631]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:45.631]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:45.631]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:45.631]                               "release", "version")], collapse = " "), 
[09:31:45.631]                             hostname = base::Sys.info()[["nodename"]])
[09:31:45.631]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:45.631]                             info)
[09:31:45.631]                           info <- base::paste(info, collapse = "; ")
[09:31:45.631]                           if (!has_future) {
[09:31:45.631]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:45.631]                               info)
[09:31:45.631]                           }
[09:31:45.631]                           else {
[09:31:45.631]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:45.631]                               info, version)
[09:31:45.631]                           }
[09:31:45.631]                           base::stop(msg)
[09:31:45.631]                         }
[09:31:45.631]                       })
[09:31:45.631]                     }
[09:31:45.631]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:45.631]                     base::options(mc.cores = 1L)
[09:31:45.631]                   }
[09:31:45.631]                   ...future.strategy.old <- future::plan("list")
[09:31:45.631]                   options(future.plan = NULL)
[09:31:45.631]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.631]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:45.631]                 }
[09:31:45.631]                 ...future.workdir <- getwd()
[09:31:45.631]             }
[09:31:45.631]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:45.631]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:45.631]         }
[09:31:45.631]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:45.631]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:45.631]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:45.631]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:45.631]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:45.631]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:45.631]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:45.631]             base::names(...future.oldOptions))
[09:31:45.631]     }
[09:31:45.631]     if (FALSE) {
[09:31:45.631]     }
[09:31:45.631]     else {
[09:31:45.631]         if (TRUE) {
[09:31:45.631]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:45.631]                 open = "w")
[09:31:45.631]         }
[09:31:45.631]         else {
[09:31:45.631]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:45.631]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:45.631]         }
[09:31:45.631]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:45.631]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:45.631]             base::sink(type = "output", split = FALSE)
[09:31:45.631]             base::close(...future.stdout)
[09:31:45.631]         }, add = TRUE)
[09:31:45.631]     }
[09:31:45.631]     ...future.frame <- base::sys.nframe()
[09:31:45.631]     ...future.conditions <- base::list()
[09:31:45.631]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:45.631]     if (FALSE) {
[09:31:45.631]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:45.631]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:45.631]     }
[09:31:45.631]     ...future.result <- base::tryCatch({
[09:31:45.631]         base::withCallingHandlers({
[09:31:45.631]             ...future.value <- base::withVisible(base::local({
[09:31:45.631]                 withCallingHandlers({
[09:31:45.631]                   {
[09:31:45.631]                     ii
[09:31:45.631]                   }
[09:31:45.631]                 }, immediateCondition = function(cond) {
[09:31:45.631]                   save_rds <- function (object, pathname, ...) 
[09:31:45.631]                   {
[09:31:45.631]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:31:45.631]                     if (file_test("-f", pathname_tmp)) {
[09:31:45.631]                       fi_tmp <- file.info(pathname_tmp)
[09:31:45.631]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:31:45.631]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:45.631]                         fi_tmp[["mtime"]])
[09:31:45.631]                     }
[09:31:45.631]                     tryCatch({
[09:31:45.631]                       saveRDS(object, file = pathname_tmp, ...)
[09:31:45.631]                     }, error = function(ex) {
[09:31:45.631]                       msg <- conditionMessage(ex)
[09:31:45.631]                       fi_tmp <- file.info(pathname_tmp)
[09:31:45.631]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:31:45.631]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:45.631]                         fi_tmp[["mtime"]], msg)
[09:31:45.631]                       ex$message <- msg
[09:31:45.631]                       stop(ex)
[09:31:45.631]                     })
[09:31:45.631]                     stopifnot(file_test("-f", pathname_tmp))
[09:31:45.631]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:31:45.631]                     if (!res || file_test("-f", pathname_tmp)) {
[09:31:45.631]                       fi_tmp <- file.info(pathname_tmp)
[09:31:45.631]                       fi <- file.info(pathname)
[09:31:45.631]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:31:45.631]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:45.631]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:31:45.631]                         fi[["size"]], fi[["mtime"]])
[09:31:45.631]                       stop(msg)
[09:31:45.631]                     }
[09:31:45.631]                     invisible(pathname)
[09:31:45.631]                   }
[09:31:45.631]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:31:45.631]                     rootPath = tempdir()) 
[09:31:45.631]                   {
[09:31:45.631]                     obj <- list(time = Sys.time(), condition = cond)
[09:31:45.631]                     file <- tempfile(pattern = class(cond)[1], 
[09:31:45.631]                       tmpdir = path, fileext = ".rds")
[09:31:45.631]                     save_rds(obj, file)
[09:31:45.631]                   }
[09:31:45.631]                   saveImmediateCondition(cond, path = "/tmp/RtmpMXzm1h/.future/immediateConditions")
[09:31:45.631]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.631]                   {
[09:31:45.631]                     inherits <- base::inherits
[09:31:45.631]                     invokeRestart <- base::invokeRestart
[09:31:45.631]                     is.null <- base::is.null
[09:31:45.631]                     muffled <- FALSE
[09:31:45.631]                     if (inherits(cond, "message")) {
[09:31:45.631]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:45.631]                       if (muffled) 
[09:31:45.631]                         invokeRestart("muffleMessage")
[09:31:45.631]                     }
[09:31:45.631]                     else if (inherits(cond, "warning")) {
[09:31:45.631]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:45.631]                       if (muffled) 
[09:31:45.631]                         invokeRestart("muffleWarning")
[09:31:45.631]                     }
[09:31:45.631]                     else if (inherits(cond, "condition")) {
[09:31:45.631]                       if (!is.null(pattern)) {
[09:31:45.631]                         computeRestarts <- base::computeRestarts
[09:31:45.631]                         grepl <- base::grepl
[09:31:45.631]                         restarts <- computeRestarts(cond)
[09:31:45.631]                         for (restart in restarts) {
[09:31:45.631]                           name <- restart$name
[09:31:45.631]                           if (is.null(name)) 
[09:31:45.631]                             next
[09:31:45.631]                           if (!grepl(pattern, name)) 
[09:31:45.631]                             next
[09:31:45.631]                           invokeRestart(restart)
[09:31:45.631]                           muffled <- TRUE
[09:31:45.631]                           break
[09:31:45.631]                         }
[09:31:45.631]                       }
[09:31:45.631]                     }
[09:31:45.631]                     invisible(muffled)
[09:31:45.631]                   }
[09:31:45.631]                   muffleCondition(cond)
[09:31:45.631]                 })
[09:31:45.631]             }))
[09:31:45.631]             future::FutureResult(value = ...future.value$value, 
[09:31:45.631]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.631]                   ...future.rng), globalenv = if (FALSE) 
[09:31:45.631]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:45.631]                     ...future.globalenv.names))
[09:31:45.631]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:45.631]         }, condition = base::local({
[09:31:45.631]             c <- base::c
[09:31:45.631]             inherits <- base::inherits
[09:31:45.631]             invokeRestart <- base::invokeRestart
[09:31:45.631]             length <- base::length
[09:31:45.631]             list <- base::list
[09:31:45.631]             seq.int <- base::seq.int
[09:31:45.631]             signalCondition <- base::signalCondition
[09:31:45.631]             sys.calls <- base::sys.calls
[09:31:45.631]             `[[` <- base::`[[`
[09:31:45.631]             `+` <- base::`+`
[09:31:45.631]             `<<-` <- base::`<<-`
[09:31:45.631]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:45.631]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:45.631]                   3L)]
[09:31:45.631]             }
[09:31:45.631]             function(cond) {
[09:31:45.631]                 is_error <- inherits(cond, "error")
[09:31:45.631]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:45.631]                   NULL)
[09:31:45.631]                 if (is_error) {
[09:31:45.631]                   sessionInformation <- function() {
[09:31:45.631]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:45.631]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:45.631]                       search = base::search(), system = base::Sys.info())
[09:31:45.631]                   }
[09:31:45.631]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.631]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:45.631]                     cond$call), session = sessionInformation(), 
[09:31:45.631]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:45.631]                   signalCondition(cond)
[09:31:45.631]                 }
[09:31:45.631]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:45.631]                 "immediateCondition"))) {
[09:31:45.631]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:45.631]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.631]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:45.631]                   if (TRUE && !signal) {
[09:31:45.631]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.631]                     {
[09:31:45.631]                       inherits <- base::inherits
[09:31:45.631]                       invokeRestart <- base::invokeRestart
[09:31:45.631]                       is.null <- base::is.null
[09:31:45.631]                       muffled <- FALSE
[09:31:45.631]                       if (inherits(cond, "message")) {
[09:31:45.631]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.631]                         if (muffled) 
[09:31:45.631]                           invokeRestart("muffleMessage")
[09:31:45.631]                       }
[09:31:45.631]                       else if (inherits(cond, "warning")) {
[09:31:45.631]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.631]                         if (muffled) 
[09:31:45.631]                           invokeRestart("muffleWarning")
[09:31:45.631]                       }
[09:31:45.631]                       else if (inherits(cond, "condition")) {
[09:31:45.631]                         if (!is.null(pattern)) {
[09:31:45.631]                           computeRestarts <- base::computeRestarts
[09:31:45.631]                           grepl <- base::grepl
[09:31:45.631]                           restarts <- computeRestarts(cond)
[09:31:45.631]                           for (restart in restarts) {
[09:31:45.631]                             name <- restart$name
[09:31:45.631]                             if (is.null(name)) 
[09:31:45.631]                               next
[09:31:45.631]                             if (!grepl(pattern, name)) 
[09:31:45.631]                               next
[09:31:45.631]                             invokeRestart(restart)
[09:31:45.631]                             muffled <- TRUE
[09:31:45.631]                             break
[09:31:45.631]                           }
[09:31:45.631]                         }
[09:31:45.631]                       }
[09:31:45.631]                       invisible(muffled)
[09:31:45.631]                     }
[09:31:45.631]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.631]                   }
[09:31:45.631]                 }
[09:31:45.631]                 else {
[09:31:45.631]                   if (TRUE) {
[09:31:45.631]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.631]                     {
[09:31:45.631]                       inherits <- base::inherits
[09:31:45.631]                       invokeRestart <- base::invokeRestart
[09:31:45.631]                       is.null <- base::is.null
[09:31:45.631]                       muffled <- FALSE
[09:31:45.631]                       if (inherits(cond, "message")) {
[09:31:45.631]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.631]                         if (muffled) 
[09:31:45.631]                           invokeRestart("muffleMessage")
[09:31:45.631]                       }
[09:31:45.631]                       else if (inherits(cond, "warning")) {
[09:31:45.631]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.631]                         if (muffled) 
[09:31:45.631]                           invokeRestart("muffleWarning")
[09:31:45.631]                       }
[09:31:45.631]                       else if (inherits(cond, "condition")) {
[09:31:45.631]                         if (!is.null(pattern)) {
[09:31:45.631]                           computeRestarts <- base::computeRestarts
[09:31:45.631]                           grepl <- base::grepl
[09:31:45.631]                           restarts <- computeRestarts(cond)
[09:31:45.631]                           for (restart in restarts) {
[09:31:45.631]                             name <- restart$name
[09:31:45.631]                             if (is.null(name)) 
[09:31:45.631]                               next
[09:31:45.631]                             if (!grepl(pattern, name)) 
[09:31:45.631]                               next
[09:31:45.631]                             invokeRestart(restart)
[09:31:45.631]                             muffled <- TRUE
[09:31:45.631]                             break
[09:31:45.631]                           }
[09:31:45.631]                         }
[09:31:45.631]                       }
[09:31:45.631]                       invisible(muffled)
[09:31:45.631]                     }
[09:31:45.631]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.631]                   }
[09:31:45.631]                 }
[09:31:45.631]             }
[09:31:45.631]         }))
[09:31:45.631]     }, error = function(ex) {
[09:31:45.631]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:45.631]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.631]                 ...future.rng), started = ...future.startTime, 
[09:31:45.631]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:45.631]             version = "1.8"), class = "FutureResult")
[09:31:45.631]     }, finally = {
[09:31:45.631]         if (!identical(...future.workdir, getwd())) 
[09:31:45.631]             setwd(...future.workdir)
[09:31:45.631]         {
[09:31:45.631]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:45.631]                 ...future.oldOptions$nwarnings <- NULL
[09:31:45.631]             }
[09:31:45.631]             base::options(...future.oldOptions)
[09:31:45.631]             if (.Platform$OS.type == "windows") {
[09:31:45.631]                 old_names <- names(...future.oldEnvVars)
[09:31:45.631]                 envs <- base::Sys.getenv()
[09:31:45.631]                 names <- names(envs)
[09:31:45.631]                 common <- intersect(names, old_names)
[09:31:45.631]                 added <- setdiff(names, old_names)
[09:31:45.631]                 removed <- setdiff(old_names, names)
[09:31:45.631]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:45.631]                   envs[common]]
[09:31:45.631]                 NAMES <- toupper(changed)
[09:31:45.631]                 args <- list()
[09:31:45.631]                 for (kk in seq_along(NAMES)) {
[09:31:45.631]                   name <- changed[[kk]]
[09:31:45.631]                   NAME <- NAMES[[kk]]
[09:31:45.631]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.631]                     next
[09:31:45.631]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.631]                 }
[09:31:45.631]                 NAMES <- toupper(added)
[09:31:45.631]                 for (kk in seq_along(NAMES)) {
[09:31:45.631]                   name <- added[[kk]]
[09:31:45.631]                   NAME <- NAMES[[kk]]
[09:31:45.631]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.631]                     next
[09:31:45.631]                   args[[name]] <- ""
[09:31:45.631]                 }
[09:31:45.631]                 NAMES <- toupper(removed)
[09:31:45.631]                 for (kk in seq_along(NAMES)) {
[09:31:45.631]                   name <- removed[[kk]]
[09:31:45.631]                   NAME <- NAMES[[kk]]
[09:31:45.631]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.631]                     next
[09:31:45.631]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.631]                 }
[09:31:45.631]                 if (length(args) > 0) 
[09:31:45.631]                   base::do.call(base::Sys.setenv, args = args)
[09:31:45.631]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:45.631]             }
[09:31:45.631]             else {
[09:31:45.631]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:45.631]             }
[09:31:45.631]             {
[09:31:45.631]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:45.631]                   0L) {
[09:31:45.631]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:45.631]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:45.631]                   base::options(opts)
[09:31:45.631]                 }
[09:31:45.631]                 {
[09:31:45.631]                   {
[09:31:45.631]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:45.631]                     NULL
[09:31:45.631]                   }
[09:31:45.631]                   options(future.plan = NULL)
[09:31:45.631]                   if (is.na(NA_character_)) 
[09:31:45.631]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.631]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:45.631]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:45.631]                     .init = FALSE)
[09:31:45.631]                 }
[09:31:45.631]             }
[09:31:45.631]         }
[09:31:45.631]     })
[09:31:45.631]     if (TRUE) {
[09:31:45.631]         base::sink(type = "output", split = FALSE)
[09:31:45.631]         if (TRUE) {
[09:31:45.631]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:45.631]         }
[09:31:45.631]         else {
[09:31:45.631]             ...future.result["stdout"] <- base::list(NULL)
[09:31:45.631]         }
[09:31:45.631]         base::close(...future.stdout)
[09:31:45.631]         ...future.stdout <- NULL
[09:31:45.631]     }
[09:31:45.631]     ...future.result$conditions <- ...future.conditions
[09:31:45.631]     ...future.result$finished <- base::Sys.time()
[09:31:45.631]     ...future.result
[09:31:45.631] }
[09:31:45.634] assign_globals() ...
[09:31:45.634] List of 1
[09:31:45.634]  $ ii: int 3
[09:31:45.634]  - attr(*, "where")=List of 1
[09:31:45.634]   ..$ ii:<environment: R_EmptyEnv> 
[09:31:45.634]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:31:45.634]  - attr(*, "resolved")= logi FALSE
[09:31:45.634]  - attr(*, "total_size")= num 56
[09:31:45.638] - copied ‘ii’ to environment
[09:31:45.638] assign_globals() ... done
[09:31:45.638] requestCore(): workers = 2
[09:31:45.639] Poll #1 (0): usedCores() = 2, workers = 2
[09:31:45.649] result() for MulticoreFuture ...
[09:31:45.650] result() for MulticoreFuture ...
[09:31:45.650] result() for MulticoreFuture ... done
[09:31:45.651] result() for MulticoreFuture ... done
[09:31:45.651] result() for MulticoreFuture ...
[09:31:45.651] result() for MulticoreFuture ... done
[09:31:45.653] MulticoreFuture started
 - Creating multicore future #4 ...
[09:31:45.654] plan(): Setting new future strategy stack:
[09:31:45.655] List of future strategies:
[09:31:45.655] 1. sequential:
[09:31:45.655]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:45.655]    - tweaked: FALSE
[09:31:45.655]    - call: NULL
[09:31:45.656] plan(): nbrOfWorkers() = 1
[09:31:45.658] plan(): Setting new future strategy stack:
[09:31:45.659] List of future strategies:
[09:31:45.659] 1. multicore:
[09:31:45.659]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:45.659]    - tweaked: FALSE
[09:31:45.659]    - call: plan(multicore)
[09:31:45.661] getGlobalsAndPackages() ...
[09:31:45.661] Searching for globals...
[09:31:45.662] - globals found: [2] ‘{’, ‘ii’
[09:31:45.663] Searching for globals ... DONE
[09:31:45.663] Resolving globals: FALSE
[09:31:45.663] The total size of the 1 globals is 56 bytes (56 bytes)
[09:31:45.664] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[09:31:45.664] plan(): nbrOfWorkers() = 2
[09:31:45.664] - globals: [1] ‘ii’
[09:31:45.664] 
[09:31:45.665] getGlobalsAndPackages() ... DONE
[09:31:45.665] Packages needed by the future expression (n = 0): <none>
[09:31:45.665] Packages needed by future strategies (n = 0): <none>
[09:31:45.666] {
[09:31:45.666]     {
[09:31:45.666]         {
[09:31:45.666]             ...future.startTime <- base::Sys.time()
[09:31:45.666]             {
[09:31:45.666]                 {
[09:31:45.666]                   {
[09:31:45.666]                     {
[09:31:45.666]                       base::local({
[09:31:45.666]                         has_future <- base::requireNamespace("future", 
[09:31:45.666]                           quietly = TRUE)
[09:31:45.666]                         if (has_future) {
[09:31:45.666]                           ns <- base::getNamespace("future")
[09:31:45.666]                           version <- ns[[".package"]][["version"]]
[09:31:45.666]                           if (is.null(version)) 
[09:31:45.666]                             version <- utils::packageVersion("future")
[09:31:45.666]                         }
[09:31:45.666]                         else {
[09:31:45.666]                           version <- NULL
[09:31:45.666]                         }
[09:31:45.666]                         if (!has_future || version < "1.8.0") {
[09:31:45.666]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:45.666]                             "", base::R.version$version.string), 
[09:31:45.666]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:45.666]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:45.666]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:45.666]                               "release", "version")], collapse = " "), 
[09:31:45.666]                             hostname = base::Sys.info()[["nodename"]])
[09:31:45.666]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:45.666]                             info)
[09:31:45.666]                           info <- base::paste(info, collapse = "; ")
[09:31:45.666]                           if (!has_future) {
[09:31:45.666]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:45.666]                               info)
[09:31:45.666]                           }
[09:31:45.666]                           else {
[09:31:45.666]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:45.666]                               info, version)
[09:31:45.666]                           }
[09:31:45.666]                           base::stop(msg)
[09:31:45.666]                         }
[09:31:45.666]                       })
[09:31:45.666]                     }
[09:31:45.666]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:45.666]                     base::options(mc.cores = 1L)
[09:31:45.666]                   }
[09:31:45.666]                   ...future.strategy.old <- future::plan("list")
[09:31:45.666]                   options(future.plan = NULL)
[09:31:45.666]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.666]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:45.666]                 }
[09:31:45.666]                 ...future.workdir <- getwd()
[09:31:45.666]             }
[09:31:45.666]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:45.666]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:45.666]         }
[09:31:45.666]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:45.666]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:45.666]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:45.666]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:45.666]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:45.666]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:45.666]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:45.666]             base::names(...future.oldOptions))
[09:31:45.666]     }
[09:31:45.666]     if (FALSE) {
[09:31:45.666]     }
[09:31:45.666]     else {
[09:31:45.666]         if (TRUE) {
[09:31:45.666]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:45.666]                 open = "w")
[09:31:45.666]         }
[09:31:45.666]         else {
[09:31:45.666]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:45.666]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:45.666]         }
[09:31:45.666]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:45.666]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:45.666]             base::sink(type = "output", split = FALSE)
[09:31:45.666]             base::close(...future.stdout)
[09:31:45.666]         }, add = TRUE)
[09:31:45.666]     }
[09:31:45.666]     ...future.frame <- base::sys.nframe()
[09:31:45.666]     ...future.conditions <- base::list()
[09:31:45.666]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:45.666]     if (FALSE) {
[09:31:45.666]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:45.666]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:45.666]     }
[09:31:45.666]     ...future.result <- base::tryCatch({
[09:31:45.666]         base::withCallingHandlers({
[09:31:45.666]             ...future.value <- base::withVisible(base::local({
[09:31:45.666]                 withCallingHandlers({
[09:31:45.666]                   {
[09:31:45.666]                     ii
[09:31:45.666]                   }
[09:31:45.666]                 }, immediateCondition = function(cond) {
[09:31:45.666]                   save_rds <- function (object, pathname, ...) 
[09:31:45.666]                   {
[09:31:45.666]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:31:45.666]                     if (file_test("-f", pathname_tmp)) {
[09:31:45.666]                       fi_tmp <- file.info(pathname_tmp)
[09:31:45.666]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:31:45.666]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:45.666]                         fi_tmp[["mtime"]])
[09:31:45.666]                     }
[09:31:45.666]                     tryCatch({
[09:31:45.666]                       saveRDS(object, file = pathname_tmp, ...)
[09:31:45.666]                     }, error = function(ex) {
[09:31:45.666]                       msg <- conditionMessage(ex)
[09:31:45.666]                       fi_tmp <- file.info(pathname_tmp)
[09:31:45.666]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:31:45.666]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:45.666]                         fi_tmp[["mtime"]], msg)
[09:31:45.666]                       ex$message <- msg
[09:31:45.666]                       stop(ex)
[09:31:45.666]                     })
[09:31:45.666]                     stopifnot(file_test("-f", pathname_tmp))
[09:31:45.666]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:31:45.666]                     if (!res || file_test("-f", pathname_tmp)) {
[09:31:45.666]                       fi_tmp <- file.info(pathname_tmp)
[09:31:45.666]                       fi <- file.info(pathname)
[09:31:45.666]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:31:45.666]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:45.666]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:31:45.666]                         fi[["size"]], fi[["mtime"]])
[09:31:45.666]                       stop(msg)
[09:31:45.666]                     }
[09:31:45.666]                     invisible(pathname)
[09:31:45.666]                   }
[09:31:45.666]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:31:45.666]                     rootPath = tempdir()) 
[09:31:45.666]                   {
[09:31:45.666]                     obj <- list(time = Sys.time(), condition = cond)
[09:31:45.666]                     file <- tempfile(pattern = class(cond)[1], 
[09:31:45.666]                       tmpdir = path, fileext = ".rds")
[09:31:45.666]                     save_rds(obj, file)
[09:31:45.666]                   }
[09:31:45.666]                   saveImmediateCondition(cond, path = "/tmp/RtmpMXzm1h/.future/immediateConditions")
[09:31:45.666]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.666]                   {
[09:31:45.666]                     inherits <- base::inherits
[09:31:45.666]                     invokeRestart <- base::invokeRestart
[09:31:45.666]                     is.null <- base::is.null
[09:31:45.666]                     muffled <- FALSE
[09:31:45.666]                     if (inherits(cond, "message")) {
[09:31:45.666]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:45.666]                       if (muffled) 
[09:31:45.666]                         invokeRestart("muffleMessage")
[09:31:45.666]                     }
[09:31:45.666]                     else if (inherits(cond, "warning")) {
[09:31:45.666]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:45.666]                       if (muffled) 
[09:31:45.666]                         invokeRestart("muffleWarning")
[09:31:45.666]                     }
[09:31:45.666]                     else if (inherits(cond, "condition")) {
[09:31:45.666]                       if (!is.null(pattern)) {
[09:31:45.666]                         computeRestarts <- base::computeRestarts
[09:31:45.666]                         grepl <- base::grepl
[09:31:45.666]                         restarts <- computeRestarts(cond)
[09:31:45.666]                         for (restart in restarts) {
[09:31:45.666]                           name <- restart$name
[09:31:45.666]                           if (is.null(name)) 
[09:31:45.666]                             next
[09:31:45.666]                           if (!grepl(pattern, name)) 
[09:31:45.666]                             next
[09:31:45.666]                           invokeRestart(restart)
[09:31:45.666]                           muffled <- TRUE
[09:31:45.666]                           break
[09:31:45.666]                         }
[09:31:45.666]                       }
[09:31:45.666]                     }
[09:31:45.666]                     invisible(muffled)
[09:31:45.666]                   }
[09:31:45.666]                   muffleCondition(cond)
[09:31:45.666]                 })
[09:31:45.666]             }))
[09:31:45.666]             future::FutureResult(value = ...future.value$value, 
[09:31:45.666]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.666]                   ...future.rng), globalenv = if (FALSE) 
[09:31:45.666]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:45.666]                     ...future.globalenv.names))
[09:31:45.666]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:45.666]         }, condition = base::local({
[09:31:45.666]             c <- base::c
[09:31:45.666]             inherits <- base::inherits
[09:31:45.666]             invokeRestart <- base::invokeRestart
[09:31:45.666]             length <- base::length
[09:31:45.666]             list <- base::list
[09:31:45.666]             seq.int <- base::seq.int
[09:31:45.666]             signalCondition <- base::signalCondition
[09:31:45.666]             sys.calls <- base::sys.calls
[09:31:45.666]             `[[` <- base::`[[`
[09:31:45.666]             `+` <- base::`+`
[09:31:45.666]             `<<-` <- base::`<<-`
[09:31:45.666]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:45.666]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:45.666]                   3L)]
[09:31:45.666]             }
[09:31:45.666]             function(cond) {
[09:31:45.666]                 is_error <- inherits(cond, "error")
[09:31:45.666]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:45.666]                   NULL)
[09:31:45.666]                 if (is_error) {
[09:31:45.666]                   sessionInformation <- function() {
[09:31:45.666]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:45.666]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:45.666]                       search = base::search(), system = base::Sys.info())
[09:31:45.666]                   }
[09:31:45.666]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.666]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:45.666]                     cond$call), session = sessionInformation(), 
[09:31:45.666]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:45.666]                   signalCondition(cond)
[09:31:45.666]                 }
[09:31:45.666]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:45.666]                 "immediateCondition"))) {
[09:31:45.666]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:45.666]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.666]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:45.666]                   if (TRUE && !signal) {
[09:31:45.666]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.666]                     {
[09:31:45.666]                       inherits <- base::inherits
[09:31:45.666]                       invokeRestart <- base::invokeRestart
[09:31:45.666]                       is.null <- base::is.null
[09:31:45.666]                       muffled <- FALSE
[09:31:45.666]                       if (inherits(cond, "message")) {
[09:31:45.666]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.666]                         if (muffled) 
[09:31:45.666]                           invokeRestart("muffleMessage")
[09:31:45.666]                       }
[09:31:45.666]                       else if (inherits(cond, "warning")) {
[09:31:45.666]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.666]                         if (muffled) 
[09:31:45.666]                           invokeRestart("muffleWarning")
[09:31:45.666]                       }
[09:31:45.666]                       else if (inherits(cond, "condition")) {
[09:31:45.666]                         if (!is.null(pattern)) {
[09:31:45.666]                           computeRestarts <- base::computeRestarts
[09:31:45.666]                           grepl <- base::grepl
[09:31:45.666]                           restarts <- computeRestarts(cond)
[09:31:45.666]                           for (restart in restarts) {
[09:31:45.666]                             name <- restart$name
[09:31:45.666]                             if (is.null(name)) 
[09:31:45.666]                               next
[09:31:45.666]                             if (!grepl(pattern, name)) 
[09:31:45.666]                               next
[09:31:45.666]                             invokeRestart(restart)
[09:31:45.666]                             muffled <- TRUE
[09:31:45.666]                             break
[09:31:45.666]                           }
[09:31:45.666]                         }
[09:31:45.666]                       }
[09:31:45.666]                       invisible(muffled)
[09:31:45.666]                     }
[09:31:45.666]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.666]                   }
[09:31:45.666]                 }
[09:31:45.666]                 else {
[09:31:45.666]                   if (TRUE) {
[09:31:45.666]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.666]                     {
[09:31:45.666]                       inherits <- base::inherits
[09:31:45.666]                       invokeRestart <- base::invokeRestart
[09:31:45.666]                       is.null <- base::is.null
[09:31:45.666]                       muffled <- FALSE
[09:31:45.666]                       if (inherits(cond, "message")) {
[09:31:45.666]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.666]                         if (muffled) 
[09:31:45.666]                           invokeRestart("muffleMessage")
[09:31:45.666]                       }
[09:31:45.666]                       else if (inherits(cond, "warning")) {
[09:31:45.666]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.666]                         if (muffled) 
[09:31:45.666]                           invokeRestart("muffleWarning")
[09:31:45.666]                       }
[09:31:45.666]                       else if (inherits(cond, "condition")) {
[09:31:45.666]                         if (!is.null(pattern)) {
[09:31:45.666]                           computeRestarts <- base::computeRestarts
[09:31:45.666]                           grepl <- base::grepl
[09:31:45.666]                           restarts <- computeRestarts(cond)
[09:31:45.666]                           for (restart in restarts) {
[09:31:45.666]                             name <- restart$name
[09:31:45.666]                             if (is.null(name)) 
[09:31:45.666]                               next
[09:31:45.666]                             if (!grepl(pattern, name)) 
[09:31:45.666]                               next
[09:31:45.666]                             invokeRestart(restart)
[09:31:45.666]                             muffled <- TRUE
[09:31:45.666]                             break
[09:31:45.666]                           }
[09:31:45.666]                         }
[09:31:45.666]                       }
[09:31:45.666]                       invisible(muffled)
[09:31:45.666]                     }
[09:31:45.666]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.666]                   }
[09:31:45.666]                 }
[09:31:45.666]             }
[09:31:45.666]         }))
[09:31:45.666]     }, error = function(ex) {
[09:31:45.666]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:45.666]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.666]                 ...future.rng), started = ...future.startTime, 
[09:31:45.666]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:45.666]             version = "1.8"), class = "FutureResult")
[09:31:45.666]     }, finally = {
[09:31:45.666]         if (!identical(...future.workdir, getwd())) 
[09:31:45.666]             setwd(...future.workdir)
[09:31:45.666]         {
[09:31:45.666]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:45.666]                 ...future.oldOptions$nwarnings <- NULL
[09:31:45.666]             }
[09:31:45.666]             base::options(...future.oldOptions)
[09:31:45.666]             if (.Platform$OS.type == "windows") {
[09:31:45.666]                 old_names <- names(...future.oldEnvVars)
[09:31:45.666]                 envs <- base::Sys.getenv()
[09:31:45.666]                 names <- names(envs)
[09:31:45.666]                 common <- intersect(names, old_names)
[09:31:45.666]                 added <- setdiff(names, old_names)
[09:31:45.666]                 removed <- setdiff(old_names, names)
[09:31:45.666]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:45.666]                   envs[common]]
[09:31:45.666]                 NAMES <- toupper(changed)
[09:31:45.666]                 args <- list()
[09:31:45.666]                 for (kk in seq_along(NAMES)) {
[09:31:45.666]                   name <- changed[[kk]]
[09:31:45.666]                   NAME <- NAMES[[kk]]
[09:31:45.666]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.666]                     next
[09:31:45.666]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.666]                 }
[09:31:45.666]                 NAMES <- toupper(added)
[09:31:45.666]                 for (kk in seq_along(NAMES)) {
[09:31:45.666]                   name <- added[[kk]]
[09:31:45.666]                   NAME <- NAMES[[kk]]
[09:31:45.666]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.666]                     next
[09:31:45.666]                   args[[name]] <- ""
[09:31:45.666]                 }
[09:31:45.666]                 NAMES <- toupper(removed)
[09:31:45.666]                 for (kk in seq_along(NAMES)) {
[09:31:45.666]                   name <- removed[[kk]]
[09:31:45.666]                   NAME <- NAMES[[kk]]
[09:31:45.666]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.666]                     next
[09:31:45.666]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.666]                 }
[09:31:45.666]                 if (length(args) > 0) 
[09:31:45.666]                   base::do.call(base::Sys.setenv, args = args)
[09:31:45.666]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:45.666]             }
[09:31:45.666]             else {
[09:31:45.666]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:45.666]             }
[09:31:45.666]             {
[09:31:45.666]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:45.666]                   0L) {
[09:31:45.666]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:45.666]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:45.666]                   base::options(opts)
[09:31:45.666]                 }
[09:31:45.666]                 {
[09:31:45.666]                   {
[09:31:45.666]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:45.666]                     NULL
[09:31:45.666]                   }
[09:31:45.666]                   options(future.plan = NULL)
[09:31:45.666]                   if (is.na(NA_character_)) 
[09:31:45.666]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.666]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:45.666]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:45.666]                     .init = FALSE)
[09:31:45.666]                 }
[09:31:45.666]             }
[09:31:45.666]         }
[09:31:45.666]     })
[09:31:45.666]     if (TRUE) {
[09:31:45.666]         base::sink(type = "output", split = FALSE)
[09:31:45.666]         if (TRUE) {
[09:31:45.666]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:45.666]         }
[09:31:45.666]         else {
[09:31:45.666]             ...future.result["stdout"] <- base::list(NULL)
[09:31:45.666]         }
[09:31:45.666]         base::close(...future.stdout)
[09:31:45.666]         ...future.stdout <- NULL
[09:31:45.666]     }
[09:31:45.666]     ...future.result$conditions <- ...future.conditions
[09:31:45.666]     ...future.result$finished <- base::Sys.time()
[09:31:45.666]     ...future.result
[09:31:45.666] }
[09:31:45.669] assign_globals() ...
[09:31:45.670] List of 1
[09:31:45.670]  $ ii: int 4
[09:31:45.670]  - attr(*, "where")=List of 1
[09:31:45.670]   ..$ ii:<environment: R_EmptyEnv> 
[09:31:45.670]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:31:45.670]  - attr(*, "resolved")= logi FALSE
[09:31:45.670]  - attr(*, "total_size")= num 56
[09:31:45.673] - copied ‘ii’ to environment
[09:31:45.673] assign_globals() ... done
[09:31:45.673] requestCore(): workers = 2
[09:31:45.674] Poll #1 (0): usedCores() = 2, workers = 2
[09:31:45.684] result() for MulticoreFuture ...
[09:31:45.685] result() for MulticoreFuture ...
[09:31:45.685] result() for MulticoreFuture ... done
[09:31:45.685] result() for MulticoreFuture ... done
[09:31:45.686] result() for MulticoreFuture ...
[09:31:45.686] result() for MulticoreFuture ... done
[09:31:45.688] MulticoreFuture started
 - Resolving 4 multicore futures
[09:31:45.689] result() for MulticoreFuture ...
[09:31:45.689] plan(): Setting new future strategy stack:
[09:31:45.689] result() for MulticoreFuture ... done
[09:31:45.689] result() for MulticoreFuture ...
[09:31:45.690] result() for MulticoreFuture ... done
[09:31:45.690] result() for MulticoreFuture ...
[09:31:45.690] result() for MulticoreFuture ... done
[09:31:45.690] result() for MulticoreFuture ...
[09:31:45.689] List of future strategies:
[09:31:45.689] 1. sequential:
[09:31:45.689]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:45.689]    - tweaked: FALSE
[09:31:45.689]    - call: NULL
[09:31:45.691] result() for MulticoreFuture ... done
[09:31:45.691] plan(): nbrOfWorkers() = 1
[09:31:45.691] result() for MulticoreFuture ...
[09:31:45.692] result() for MulticoreFuture ...
[09:31:45.693] result() for MulticoreFuture ... done
[09:31:45.693] result() for MulticoreFuture ... done
[09:31:45.693] result() for MulticoreFuture ...
[09:31:45.693] result() for MulticoreFuture ... done
[09:31:45.693] plan(): Setting new future strategy stack:
[09:31:45.694] result() for MulticoreFuture ...
[09:31:45.694] List of future strategies:
[09:31:45.694] 1. multicore:
[09:31:45.694]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:45.694]    - tweaked: FALSE
[09:31:45.694]    - call: plan(multicore)
[09:31:45.699] plan(): nbrOfWorkers() = 2
[09:31:45.699] result() for MulticoreFuture ...
[09:31:45.700] result() for MulticoreFuture ... done
[09:31:45.700] result() for MulticoreFuture ... done
[09:31:45.700] result() for MulticoreFuture ...
[09:31:45.700] result() for MulticoreFuture ... done
*** multicore(..., globals = TRUE) and errors
[09:31:45.707] getGlobalsAndPackages() ...
[09:31:45.708] Searching for globals...
[09:31:45.709] - globals found: [2] ‘{’, ‘stop’
[09:31:45.709] Searching for globals ... DONE
[09:31:45.709] Resolving globals: FALSE
[09:31:45.710] 
[09:31:45.710] 
[09:31:45.710] getGlobalsAndPackages() ... DONE
[09:31:45.711] Packages needed by the future expression (n = 0): <none>
[09:31:45.711] Packages needed by future strategies (n = 0): <none>
[09:31:45.711] {
[09:31:45.711]     {
[09:31:45.711]         {
[09:31:45.711]             ...future.startTime <- base::Sys.time()
[09:31:45.711]             {
[09:31:45.711]                 {
[09:31:45.711]                   {
[09:31:45.711]                     {
[09:31:45.711]                       base::local({
[09:31:45.711]                         has_future <- base::requireNamespace("future", 
[09:31:45.711]                           quietly = TRUE)
[09:31:45.711]                         if (has_future) {
[09:31:45.711]                           ns <- base::getNamespace("future")
[09:31:45.711]                           version <- ns[[".package"]][["version"]]
[09:31:45.711]                           if (is.null(version)) 
[09:31:45.711]                             version <- utils::packageVersion("future")
[09:31:45.711]                         }
[09:31:45.711]                         else {
[09:31:45.711]                           version <- NULL
[09:31:45.711]                         }
[09:31:45.711]                         if (!has_future || version < "1.8.0") {
[09:31:45.711]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:45.711]                             "", base::R.version$version.string), 
[09:31:45.711]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:45.711]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:45.711]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:45.711]                               "release", "version")], collapse = " "), 
[09:31:45.711]                             hostname = base::Sys.info()[["nodename"]])
[09:31:45.711]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:45.711]                             info)
[09:31:45.711]                           info <- base::paste(info, collapse = "; ")
[09:31:45.711]                           if (!has_future) {
[09:31:45.711]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:45.711]                               info)
[09:31:45.711]                           }
[09:31:45.711]                           else {
[09:31:45.711]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:45.711]                               info, version)
[09:31:45.711]                           }
[09:31:45.711]                           base::stop(msg)
[09:31:45.711]                         }
[09:31:45.711]                       })
[09:31:45.711]                     }
[09:31:45.711]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:45.711]                     base::options(mc.cores = 1L)
[09:31:45.711]                   }
[09:31:45.711]                   ...future.strategy.old <- future::plan("list")
[09:31:45.711]                   options(future.plan = NULL)
[09:31:45.711]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.711]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:45.711]                 }
[09:31:45.711]                 ...future.workdir <- getwd()
[09:31:45.711]             }
[09:31:45.711]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:45.711]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:45.711]         }
[09:31:45.711]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:45.711]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:45.711]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:45.711]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:45.711]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:45.711]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:45.711]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:45.711]             base::names(...future.oldOptions))
[09:31:45.711]     }
[09:31:45.711]     if (FALSE) {
[09:31:45.711]     }
[09:31:45.711]     else {
[09:31:45.711]         if (TRUE) {
[09:31:45.711]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:45.711]                 open = "w")
[09:31:45.711]         }
[09:31:45.711]         else {
[09:31:45.711]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:45.711]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:45.711]         }
[09:31:45.711]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:45.711]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:45.711]             base::sink(type = "output", split = FALSE)
[09:31:45.711]             base::close(...future.stdout)
[09:31:45.711]         }, add = TRUE)
[09:31:45.711]     }
[09:31:45.711]     ...future.frame <- base::sys.nframe()
[09:31:45.711]     ...future.conditions <- base::list()
[09:31:45.711]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:45.711]     if (FALSE) {
[09:31:45.711]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:45.711]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:45.711]     }
[09:31:45.711]     ...future.result <- base::tryCatch({
[09:31:45.711]         base::withCallingHandlers({
[09:31:45.711]             ...future.value <- base::withVisible(base::local({
[09:31:45.711]                 withCallingHandlers({
[09:31:45.711]                   {
[09:31:45.711]                     stop("Whoops!")
[09:31:45.711]                     1
[09:31:45.711]                   }
[09:31:45.711]                 }, immediateCondition = function(cond) {
[09:31:45.711]                   save_rds <- function (object, pathname, ...) 
[09:31:45.711]                   {
[09:31:45.711]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:31:45.711]                     if (file_test("-f", pathname_tmp)) {
[09:31:45.711]                       fi_tmp <- file.info(pathname_tmp)
[09:31:45.711]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:31:45.711]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:45.711]                         fi_tmp[["mtime"]])
[09:31:45.711]                     }
[09:31:45.711]                     tryCatch({
[09:31:45.711]                       saveRDS(object, file = pathname_tmp, ...)
[09:31:45.711]                     }, error = function(ex) {
[09:31:45.711]                       msg <- conditionMessage(ex)
[09:31:45.711]                       fi_tmp <- file.info(pathname_tmp)
[09:31:45.711]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:31:45.711]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:45.711]                         fi_tmp[["mtime"]], msg)
[09:31:45.711]                       ex$message <- msg
[09:31:45.711]                       stop(ex)
[09:31:45.711]                     })
[09:31:45.711]                     stopifnot(file_test("-f", pathname_tmp))
[09:31:45.711]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:31:45.711]                     if (!res || file_test("-f", pathname_tmp)) {
[09:31:45.711]                       fi_tmp <- file.info(pathname_tmp)
[09:31:45.711]                       fi <- file.info(pathname)
[09:31:45.711]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:31:45.711]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:45.711]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:31:45.711]                         fi[["size"]], fi[["mtime"]])
[09:31:45.711]                       stop(msg)
[09:31:45.711]                     }
[09:31:45.711]                     invisible(pathname)
[09:31:45.711]                   }
[09:31:45.711]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:31:45.711]                     rootPath = tempdir()) 
[09:31:45.711]                   {
[09:31:45.711]                     obj <- list(time = Sys.time(), condition = cond)
[09:31:45.711]                     file <- tempfile(pattern = class(cond)[1], 
[09:31:45.711]                       tmpdir = path, fileext = ".rds")
[09:31:45.711]                     save_rds(obj, file)
[09:31:45.711]                   }
[09:31:45.711]                   saveImmediateCondition(cond, path = "/tmp/RtmpMXzm1h/.future/immediateConditions")
[09:31:45.711]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.711]                   {
[09:31:45.711]                     inherits <- base::inherits
[09:31:45.711]                     invokeRestart <- base::invokeRestart
[09:31:45.711]                     is.null <- base::is.null
[09:31:45.711]                     muffled <- FALSE
[09:31:45.711]                     if (inherits(cond, "message")) {
[09:31:45.711]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:45.711]                       if (muffled) 
[09:31:45.711]                         invokeRestart("muffleMessage")
[09:31:45.711]                     }
[09:31:45.711]                     else if (inherits(cond, "warning")) {
[09:31:45.711]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:45.711]                       if (muffled) 
[09:31:45.711]                         invokeRestart("muffleWarning")
[09:31:45.711]                     }
[09:31:45.711]                     else if (inherits(cond, "condition")) {
[09:31:45.711]                       if (!is.null(pattern)) {
[09:31:45.711]                         computeRestarts <- base::computeRestarts
[09:31:45.711]                         grepl <- base::grepl
[09:31:45.711]                         restarts <- computeRestarts(cond)
[09:31:45.711]                         for (restart in restarts) {
[09:31:45.711]                           name <- restart$name
[09:31:45.711]                           if (is.null(name)) 
[09:31:45.711]                             next
[09:31:45.711]                           if (!grepl(pattern, name)) 
[09:31:45.711]                             next
[09:31:45.711]                           invokeRestart(restart)
[09:31:45.711]                           muffled <- TRUE
[09:31:45.711]                           break
[09:31:45.711]                         }
[09:31:45.711]                       }
[09:31:45.711]                     }
[09:31:45.711]                     invisible(muffled)
[09:31:45.711]                   }
[09:31:45.711]                   muffleCondition(cond)
[09:31:45.711]                 })
[09:31:45.711]             }))
[09:31:45.711]             future::FutureResult(value = ...future.value$value, 
[09:31:45.711]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.711]                   ...future.rng), globalenv = if (FALSE) 
[09:31:45.711]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:45.711]                     ...future.globalenv.names))
[09:31:45.711]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:45.711]         }, condition = base::local({
[09:31:45.711]             c <- base::c
[09:31:45.711]             inherits <- base::inherits
[09:31:45.711]             invokeRestart <- base::invokeRestart
[09:31:45.711]             length <- base::length
[09:31:45.711]             list <- base::list
[09:31:45.711]             seq.int <- base::seq.int
[09:31:45.711]             signalCondition <- base::signalCondition
[09:31:45.711]             sys.calls <- base::sys.calls
[09:31:45.711]             `[[` <- base::`[[`
[09:31:45.711]             `+` <- base::`+`
[09:31:45.711]             `<<-` <- base::`<<-`
[09:31:45.711]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:45.711]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:45.711]                   3L)]
[09:31:45.711]             }
[09:31:45.711]             function(cond) {
[09:31:45.711]                 is_error <- inherits(cond, "error")
[09:31:45.711]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:45.711]                   NULL)
[09:31:45.711]                 if (is_error) {
[09:31:45.711]                   sessionInformation <- function() {
[09:31:45.711]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:45.711]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:45.711]                       search = base::search(), system = base::Sys.info())
[09:31:45.711]                   }
[09:31:45.711]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.711]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:45.711]                     cond$call), session = sessionInformation(), 
[09:31:45.711]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:45.711]                   signalCondition(cond)
[09:31:45.711]                 }
[09:31:45.711]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:45.711]                 "immediateCondition"))) {
[09:31:45.711]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:45.711]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.711]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:45.711]                   if (TRUE && !signal) {
[09:31:45.711]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.711]                     {
[09:31:45.711]                       inherits <- base::inherits
[09:31:45.711]                       invokeRestart <- base::invokeRestart
[09:31:45.711]                       is.null <- base::is.null
[09:31:45.711]                       muffled <- FALSE
[09:31:45.711]                       if (inherits(cond, "message")) {
[09:31:45.711]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.711]                         if (muffled) 
[09:31:45.711]                           invokeRestart("muffleMessage")
[09:31:45.711]                       }
[09:31:45.711]                       else if (inherits(cond, "warning")) {
[09:31:45.711]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.711]                         if (muffled) 
[09:31:45.711]                           invokeRestart("muffleWarning")
[09:31:45.711]                       }
[09:31:45.711]                       else if (inherits(cond, "condition")) {
[09:31:45.711]                         if (!is.null(pattern)) {
[09:31:45.711]                           computeRestarts <- base::computeRestarts
[09:31:45.711]                           grepl <- base::grepl
[09:31:45.711]                           restarts <- computeRestarts(cond)
[09:31:45.711]                           for (restart in restarts) {
[09:31:45.711]                             name <- restart$name
[09:31:45.711]                             if (is.null(name)) 
[09:31:45.711]                               next
[09:31:45.711]                             if (!grepl(pattern, name)) 
[09:31:45.711]                               next
[09:31:45.711]                             invokeRestart(restart)
[09:31:45.711]                             muffled <- TRUE
[09:31:45.711]                             break
[09:31:45.711]                           }
[09:31:45.711]                         }
[09:31:45.711]                       }
[09:31:45.711]                       invisible(muffled)
[09:31:45.711]                     }
[09:31:45.711]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.711]                   }
[09:31:45.711]                 }
[09:31:45.711]                 else {
[09:31:45.711]                   if (TRUE) {
[09:31:45.711]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.711]                     {
[09:31:45.711]                       inherits <- base::inherits
[09:31:45.711]                       invokeRestart <- base::invokeRestart
[09:31:45.711]                       is.null <- base::is.null
[09:31:45.711]                       muffled <- FALSE
[09:31:45.711]                       if (inherits(cond, "message")) {
[09:31:45.711]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.711]                         if (muffled) 
[09:31:45.711]                           invokeRestart("muffleMessage")
[09:31:45.711]                       }
[09:31:45.711]                       else if (inherits(cond, "warning")) {
[09:31:45.711]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.711]                         if (muffled) 
[09:31:45.711]                           invokeRestart("muffleWarning")
[09:31:45.711]                       }
[09:31:45.711]                       else if (inherits(cond, "condition")) {
[09:31:45.711]                         if (!is.null(pattern)) {
[09:31:45.711]                           computeRestarts <- base::computeRestarts
[09:31:45.711]                           grepl <- base::grepl
[09:31:45.711]                           restarts <- computeRestarts(cond)
[09:31:45.711]                           for (restart in restarts) {
[09:31:45.711]                             name <- restart$name
[09:31:45.711]                             if (is.null(name)) 
[09:31:45.711]                               next
[09:31:45.711]                             if (!grepl(pattern, name)) 
[09:31:45.711]                               next
[09:31:45.711]                             invokeRestart(restart)
[09:31:45.711]                             muffled <- TRUE
[09:31:45.711]                             break
[09:31:45.711]                           }
[09:31:45.711]                         }
[09:31:45.711]                       }
[09:31:45.711]                       invisible(muffled)
[09:31:45.711]                     }
[09:31:45.711]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.711]                   }
[09:31:45.711]                 }
[09:31:45.711]             }
[09:31:45.711]         }))
[09:31:45.711]     }, error = function(ex) {
[09:31:45.711]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:45.711]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.711]                 ...future.rng), started = ...future.startTime, 
[09:31:45.711]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:45.711]             version = "1.8"), class = "FutureResult")
[09:31:45.711]     }, finally = {
[09:31:45.711]         if (!identical(...future.workdir, getwd())) 
[09:31:45.711]             setwd(...future.workdir)
[09:31:45.711]         {
[09:31:45.711]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:45.711]                 ...future.oldOptions$nwarnings <- NULL
[09:31:45.711]             }
[09:31:45.711]             base::options(...future.oldOptions)
[09:31:45.711]             if (.Platform$OS.type == "windows") {
[09:31:45.711]                 old_names <- names(...future.oldEnvVars)
[09:31:45.711]                 envs <- base::Sys.getenv()
[09:31:45.711]                 names <- names(envs)
[09:31:45.711]                 common <- intersect(names, old_names)
[09:31:45.711]                 added <- setdiff(names, old_names)
[09:31:45.711]                 removed <- setdiff(old_names, names)
[09:31:45.711]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:45.711]                   envs[common]]
[09:31:45.711]                 NAMES <- toupper(changed)
[09:31:45.711]                 args <- list()
[09:31:45.711]                 for (kk in seq_along(NAMES)) {
[09:31:45.711]                   name <- changed[[kk]]
[09:31:45.711]                   NAME <- NAMES[[kk]]
[09:31:45.711]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.711]                     next
[09:31:45.711]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.711]                 }
[09:31:45.711]                 NAMES <- toupper(added)
[09:31:45.711]                 for (kk in seq_along(NAMES)) {
[09:31:45.711]                   name <- added[[kk]]
[09:31:45.711]                   NAME <- NAMES[[kk]]
[09:31:45.711]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.711]                     next
[09:31:45.711]                   args[[name]] <- ""
[09:31:45.711]                 }
[09:31:45.711]                 NAMES <- toupper(removed)
[09:31:45.711]                 for (kk in seq_along(NAMES)) {
[09:31:45.711]                   name <- removed[[kk]]
[09:31:45.711]                   NAME <- NAMES[[kk]]
[09:31:45.711]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.711]                     next
[09:31:45.711]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.711]                 }
[09:31:45.711]                 if (length(args) > 0) 
[09:31:45.711]                   base::do.call(base::Sys.setenv, args = args)
[09:31:45.711]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:45.711]             }
[09:31:45.711]             else {
[09:31:45.711]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:45.711]             }
[09:31:45.711]             {
[09:31:45.711]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:45.711]                   0L) {
[09:31:45.711]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:45.711]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:45.711]                   base::options(opts)
[09:31:45.711]                 }
[09:31:45.711]                 {
[09:31:45.711]                   {
[09:31:45.711]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:45.711]                     NULL
[09:31:45.711]                   }
[09:31:45.711]                   options(future.plan = NULL)
[09:31:45.711]                   if (is.na(NA_character_)) 
[09:31:45.711]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.711]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:45.711]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:45.711]                     .init = FALSE)
[09:31:45.711]                 }
[09:31:45.711]             }
[09:31:45.711]         }
[09:31:45.711]     })
[09:31:45.711]     if (TRUE) {
[09:31:45.711]         base::sink(type = "output", split = FALSE)
[09:31:45.711]         if (TRUE) {
[09:31:45.711]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:45.711]         }
[09:31:45.711]         else {
[09:31:45.711]             ...future.result["stdout"] <- base::list(NULL)
[09:31:45.711]         }
[09:31:45.711]         base::close(...future.stdout)
[09:31:45.711]         ...future.stdout <- NULL
[09:31:45.711]     }
[09:31:45.711]     ...future.result$conditions <- ...future.conditions
[09:31:45.711]     ...future.result$finished <- base::Sys.time()
[09:31:45.711]     ...future.result
[09:31:45.711] }
[09:31:45.714] requestCore(): workers = 2
[09:31:45.715] MulticoreFuture started
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    stop("Whoops!")
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[09:31:45.716] plan(): Setting new future strategy stack:
[09:31:45.717] List of future strategies:
[09:31:45.717] 1. sequential:
[09:31:45.717]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:45.717]    - tweaked: FALSE
[09:31:45.717]    - call: NULL
[09:31:45.718] plan(): nbrOfWorkers() = 1
[09:31:45.720] plan(): Setting new future strategy stack:
[09:31:45.720] List of future strategies:
[09:31:45.720] 1. multicore:
[09:31:45.720]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:45.720]    - tweaked: FALSE
[09:31:45.720]    - call: plan(multicore)
[09:31:45.725] plan(): nbrOfWorkers() = 2
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 4dab417a-2fdd-f8a2-2e0a-d701ed5fedef
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:45.727] result() for MulticoreFuture ...
[09:31:45.730] result() for MulticoreFuture ...
[09:31:45.730] result() for MulticoreFuture ... done
[09:31:45.730] signalConditions() ...
[09:31:45.731]  - include = ‘immediateCondition’
[09:31:45.731]  - exclude = 
[09:31:45.731]  - resignal = FALSE
[09:31:45.731]  - Number of conditions: 1
[09:31:45.731] signalConditions() ... done
[09:31:45.731] result() for MulticoreFuture ... done
[09:31:45.732] result() for MulticoreFuture ...
[09:31:45.732] result() for MulticoreFuture ... done
[09:31:45.732] signalConditions() ...
[09:31:45.732]  - include = ‘immediateCondition’
[09:31:45.732]  - exclude = 
[09:31:45.733]  - resignal = FALSE
[09:31:45.733]  - Number of conditions: 1
[09:31:45.733] signalConditions() ... done
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    save_rds <- function (object, pathname, ...)     {        pathname_tmp <- sprintf("%s.tmp", pathname)        if (file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]])        }        tryCatch({            saveRDS(object, file = pathname_tmp, ...)        }, error = function(ex) {            msg <- conditionMessage(ex)            fi_tmp <- file.info(pathname_tmp)            msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 msg)            ex$message <- msg            stop(ex)        })        stopifnot(file_test("-f", pathname_tmp))        res <- file.rename(from = pathname_tmp, to = pathname)        if (!res || file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            fi <- file.info(pathname)            msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 sQuote(pathname), fi[["size"]], fi[["mtime"]])            stop(msg)        }        invisible(pathname)    }    saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath),         rootPath = tempdir())     {        obj <- list(time = Sys.time(), condition = cond)        file <- tempfile(pattern = class(cond)[1], tmpdir = path,             fileext = ".rds")        save_rds(obj, file)    }    saveImmediateCondition(cond, path = "/tmp/RtmpMXzm1h/.future/immediateConditions")    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[09:31:45.734] result() for MulticoreFuture ...
[09:31:45.734] result() for MulticoreFuture ... done
[09:31:45.734] result() for MulticoreFuture ...
[09:31:45.734] result() for MulticoreFuture ... done
[09:31:45.734] signalConditions() ...
[09:31:45.734]  - include = ‘immediateCondition’
[09:31:45.734]  - exclude = 
[09:31:45.734]  - resignal = FALSE
[09:31:45.734]  - Number of conditions: 1
[09:31:45.735] signalConditions() ... done
[09:31:45.735] Future state: ‘finished’
[09:31:45.735] result() for MulticoreFuture ...
[09:31:45.735] result() for MulticoreFuture ... done
[09:31:45.735] signalConditions() ...
[09:31:45.735]  - include = ‘condition’
[09:31:45.735]  - exclude = ‘immediateCondition’
[09:31:45.735]  - resignal = TRUE
[09:31:45.735]  - Number of conditions: 1
[09:31:45.736]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[09:31:45.736] signalConditions() ... done
[1] "Error in withCallingHandlers({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    save_rds <- function (object, pathname, ...)     {        pathname_tmp <- sprintf("%s.tmp", pathname)        if (file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]])        }        tryCatch({            saveRDS(object, file = pathname_tmp, ...)        }, error = function(ex) {            msg <- conditionMessage(ex)            fi_tmp <- file.info(pathname_tmp)            msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 msg)            ex$message <- msg            stop(ex)        })        stopifnot(file_test("-f", pathname_tmp))        res <- file.rename(from = pathname_tmp, to = pathname)        if (!res || file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            fi <- file.info(pathname)            msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 sQuote(pathname), fi[["size"]], fi[["mtime"]])            stop(msg)        }        invisible(pathname)    }    saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath),         rootPath = tempdir())     {        obj <- list(time = Sys.time(), condition = cond)        file <- tempfile(pattern = class(cond)[1], tmpdir = path,             fileext = ".rds")        save_rds(obj, file)    }    saveImmediateCondition(cond, path = "/tmp/RtmpMXzm1h/.future/immediateConditions")    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[09:31:45.737] result() for MulticoreFuture ...
[09:31:45.737] result() for MulticoreFuture ... done
[09:31:45.737] result() for MulticoreFuture ...
[09:31:45.737] result() for MulticoreFuture ... done
[09:31:45.737] signalConditions() ...
[09:31:45.737]  - include = ‘immediateCondition’
[09:31:45.737]  - exclude = 
[09:31:45.737]  - resignal = FALSE
[09:31:45.737]  - Number of conditions: 1
[09:31:45.738] signalConditions() ... done
[09:31:45.738] Future state: ‘finished’
[09:31:45.738] result() for MulticoreFuture ...
[09:31:45.738] result() for MulticoreFuture ... done
[09:31:45.738] signalConditions() ...
[09:31:45.738]  - include = ‘condition’
[09:31:45.738]  - exclude = ‘immediateCondition’
[09:31:45.738]  - resignal = TRUE
[09:31:45.738]  - Number of conditions: 1
[09:31:45.739]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[09:31:45.739] signalConditions() ... done
[1] "Error in withCallingHandlers({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    save_rds <- function (object, pathname, ...)     {        pathname_tmp <- sprintf("%s.tmp", pathname)        if (file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]])        }        tryCatch({            saveRDS(object, file = pathname_tmp, ...)        }, error = function(ex) {            msg <- conditionMessage(ex)            fi_tmp <- file.info(pathname_tmp)            msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 msg)            ex$message <- msg            stop(ex)        })        stopifnot(file_test("-f", pathname_tmp))        res <- file.rename(from = pathname_tmp, to = pathname)        if (!res || file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            fi <- file.info(pathname)            msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 sQuote(pathname), fi[["size"]], fi[["mtime"]])            stop(msg)        }        invisible(pathname)    }    saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath),         rootPath = tempdir())     {        obj <- list(time = Sys.time(), condition = cond)        file <- tempfile(pattern = class(cond)[1], tmpdir = path,             fileext = ".rds")        save_rds(obj, file)    }    saveImmediateCondition(cond, path = "/tmp/RtmpMXzm1h/.future/immediateConditions")    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[09:31:45.743] getGlobalsAndPackages() ...
[09:31:45.743] 
[09:31:45.743] - globals: [0] <none>
[09:31:45.743] getGlobalsAndPackages() ... DONE
[09:31:45.744] Packages needed by the future expression (n = 0): <none>
[09:31:45.744] Packages needed by future strategies (n = 0): <none>
[09:31:45.745] {
[09:31:45.745]     {
[09:31:45.745]         {
[09:31:45.745]             ...future.startTime <- base::Sys.time()
[09:31:45.745]             {
[09:31:45.745]                 {
[09:31:45.745]                   {
[09:31:45.745]                     {
[09:31:45.745]                       base::local({
[09:31:45.745]                         has_future <- base::requireNamespace("future", 
[09:31:45.745]                           quietly = TRUE)
[09:31:45.745]                         if (has_future) {
[09:31:45.745]                           ns <- base::getNamespace("future")
[09:31:45.745]                           version <- ns[[".package"]][["version"]]
[09:31:45.745]                           if (is.null(version)) 
[09:31:45.745]                             version <- utils::packageVersion("future")
[09:31:45.745]                         }
[09:31:45.745]                         else {
[09:31:45.745]                           version <- NULL
[09:31:45.745]                         }
[09:31:45.745]                         if (!has_future || version < "1.8.0") {
[09:31:45.745]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:45.745]                             "", base::R.version$version.string), 
[09:31:45.745]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:45.745]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:45.745]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:45.745]                               "release", "version")], collapse = " "), 
[09:31:45.745]                             hostname = base::Sys.info()[["nodename"]])
[09:31:45.745]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:45.745]                             info)
[09:31:45.745]                           info <- base::paste(info, collapse = "; ")
[09:31:45.745]                           if (!has_future) {
[09:31:45.745]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:45.745]                               info)
[09:31:45.745]                           }
[09:31:45.745]                           else {
[09:31:45.745]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:45.745]                               info, version)
[09:31:45.745]                           }
[09:31:45.745]                           base::stop(msg)
[09:31:45.745]                         }
[09:31:45.745]                       })
[09:31:45.745]                     }
[09:31:45.745]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:45.745]                     base::options(mc.cores = 1L)
[09:31:45.745]                   }
[09:31:45.745]                   ...future.strategy.old <- future::plan("list")
[09:31:45.745]                   options(future.plan = NULL)
[09:31:45.745]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.745]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:45.745]                 }
[09:31:45.745]                 ...future.workdir <- getwd()
[09:31:45.745]             }
[09:31:45.745]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:45.745]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:45.745]         }
[09:31:45.745]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:45.745]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:45.745]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:45.745]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:45.745]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:45.745]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:45.745]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:45.745]             base::names(...future.oldOptions))
[09:31:45.745]     }
[09:31:45.745]     if (FALSE) {
[09:31:45.745]     }
[09:31:45.745]     else {
[09:31:45.745]         if (TRUE) {
[09:31:45.745]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:45.745]                 open = "w")
[09:31:45.745]         }
[09:31:45.745]         else {
[09:31:45.745]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:45.745]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:45.745]         }
[09:31:45.745]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:45.745]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:45.745]             base::sink(type = "output", split = FALSE)
[09:31:45.745]             base::close(...future.stdout)
[09:31:45.745]         }, add = TRUE)
[09:31:45.745]     }
[09:31:45.745]     ...future.frame <- base::sys.nframe()
[09:31:45.745]     ...future.conditions <- base::list()
[09:31:45.745]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:45.745]     if (FALSE) {
[09:31:45.745]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:45.745]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:45.745]     }
[09:31:45.745]     ...future.result <- base::tryCatch({
[09:31:45.745]         base::withCallingHandlers({
[09:31:45.745]             ...future.value <- base::withVisible(base::local({
[09:31:45.745]                 withCallingHandlers({
[09:31:45.745]                   {
[09:31:45.745]                     stop(structure(list(message = "boom"), class = c("MyError", 
[09:31:45.745]                       "error", "condition")))
[09:31:45.745]                   }
[09:31:45.745]                 }, immediateCondition = function(cond) {
[09:31:45.745]                   save_rds <- function (object, pathname, ...) 
[09:31:45.745]                   {
[09:31:45.745]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:31:45.745]                     if (file_test("-f", pathname_tmp)) {
[09:31:45.745]                       fi_tmp <- file.info(pathname_tmp)
[09:31:45.745]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:31:45.745]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:45.745]                         fi_tmp[["mtime"]])
[09:31:45.745]                     }
[09:31:45.745]                     tryCatch({
[09:31:45.745]                       saveRDS(object, file = pathname_tmp, ...)
[09:31:45.745]                     }, error = function(ex) {
[09:31:45.745]                       msg <- conditionMessage(ex)
[09:31:45.745]                       fi_tmp <- file.info(pathname_tmp)
[09:31:45.745]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:31:45.745]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:45.745]                         fi_tmp[["mtime"]], msg)
[09:31:45.745]                       ex$message <- msg
[09:31:45.745]                       stop(ex)
[09:31:45.745]                     })
[09:31:45.745]                     stopifnot(file_test("-f", pathname_tmp))
[09:31:45.745]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:31:45.745]                     if (!res || file_test("-f", pathname_tmp)) {
[09:31:45.745]                       fi_tmp <- file.info(pathname_tmp)
[09:31:45.745]                       fi <- file.info(pathname)
[09:31:45.745]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:31:45.745]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:45.745]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:31:45.745]                         fi[["size"]], fi[["mtime"]])
[09:31:45.745]                       stop(msg)
[09:31:45.745]                     }
[09:31:45.745]                     invisible(pathname)
[09:31:45.745]                   }
[09:31:45.745]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:31:45.745]                     rootPath = tempdir()) 
[09:31:45.745]                   {
[09:31:45.745]                     obj <- list(time = Sys.time(), condition = cond)
[09:31:45.745]                     file <- tempfile(pattern = class(cond)[1], 
[09:31:45.745]                       tmpdir = path, fileext = ".rds")
[09:31:45.745]                     save_rds(obj, file)
[09:31:45.745]                   }
[09:31:45.745]                   saveImmediateCondition(cond, path = "/tmp/RtmpMXzm1h/.future/immediateConditions")
[09:31:45.745]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.745]                   {
[09:31:45.745]                     inherits <- base::inherits
[09:31:45.745]                     invokeRestart <- base::invokeRestart
[09:31:45.745]                     is.null <- base::is.null
[09:31:45.745]                     muffled <- FALSE
[09:31:45.745]                     if (inherits(cond, "message")) {
[09:31:45.745]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:45.745]                       if (muffled) 
[09:31:45.745]                         invokeRestart("muffleMessage")
[09:31:45.745]                     }
[09:31:45.745]                     else if (inherits(cond, "warning")) {
[09:31:45.745]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:45.745]                       if (muffled) 
[09:31:45.745]                         invokeRestart("muffleWarning")
[09:31:45.745]                     }
[09:31:45.745]                     else if (inherits(cond, "condition")) {
[09:31:45.745]                       if (!is.null(pattern)) {
[09:31:45.745]                         computeRestarts <- base::computeRestarts
[09:31:45.745]                         grepl <- base::grepl
[09:31:45.745]                         restarts <- computeRestarts(cond)
[09:31:45.745]                         for (restart in restarts) {
[09:31:45.745]                           name <- restart$name
[09:31:45.745]                           if (is.null(name)) 
[09:31:45.745]                             next
[09:31:45.745]                           if (!grepl(pattern, name)) 
[09:31:45.745]                             next
[09:31:45.745]                           invokeRestart(restart)
[09:31:45.745]                           muffled <- TRUE
[09:31:45.745]                           break
[09:31:45.745]                         }
[09:31:45.745]                       }
[09:31:45.745]                     }
[09:31:45.745]                     invisible(muffled)
[09:31:45.745]                   }
[09:31:45.745]                   muffleCondition(cond)
[09:31:45.745]                 })
[09:31:45.745]             }))
[09:31:45.745]             future::FutureResult(value = ...future.value$value, 
[09:31:45.745]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.745]                   ...future.rng), globalenv = if (FALSE) 
[09:31:45.745]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:45.745]                     ...future.globalenv.names))
[09:31:45.745]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:45.745]         }, condition = base::local({
[09:31:45.745]             c <- base::c
[09:31:45.745]             inherits <- base::inherits
[09:31:45.745]             invokeRestart <- base::invokeRestart
[09:31:45.745]             length <- base::length
[09:31:45.745]             list <- base::list
[09:31:45.745]             seq.int <- base::seq.int
[09:31:45.745]             signalCondition <- base::signalCondition
[09:31:45.745]             sys.calls <- base::sys.calls
[09:31:45.745]             `[[` <- base::`[[`
[09:31:45.745]             `+` <- base::`+`
[09:31:45.745]             `<<-` <- base::`<<-`
[09:31:45.745]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:45.745]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:45.745]                   3L)]
[09:31:45.745]             }
[09:31:45.745]             function(cond) {
[09:31:45.745]                 is_error <- inherits(cond, "error")
[09:31:45.745]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:45.745]                   NULL)
[09:31:45.745]                 if (is_error) {
[09:31:45.745]                   sessionInformation <- function() {
[09:31:45.745]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:45.745]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:45.745]                       search = base::search(), system = base::Sys.info())
[09:31:45.745]                   }
[09:31:45.745]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.745]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:45.745]                     cond$call), session = sessionInformation(), 
[09:31:45.745]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:45.745]                   signalCondition(cond)
[09:31:45.745]                 }
[09:31:45.745]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:45.745]                 "immediateCondition"))) {
[09:31:45.745]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:45.745]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.745]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:45.745]                   if (TRUE && !signal) {
[09:31:45.745]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.745]                     {
[09:31:45.745]                       inherits <- base::inherits
[09:31:45.745]                       invokeRestart <- base::invokeRestart
[09:31:45.745]                       is.null <- base::is.null
[09:31:45.745]                       muffled <- FALSE
[09:31:45.745]                       if (inherits(cond, "message")) {
[09:31:45.745]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.745]                         if (muffled) 
[09:31:45.745]                           invokeRestart("muffleMessage")
[09:31:45.745]                       }
[09:31:45.745]                       else if (inherits(cond, "warning")) {
[09:31:45.745]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.745]                         if (muffled) 
[09:31:45.745]                           invokeRestart("muffleWarning")
[09:31:45.745]                       }
[09:31:45.745]                       else if (inherits(cond, "condition")) {
[09:31:45.745]                         if (!is.null(pattern)) {
[09:31:45.745]                           computeRestarts <- base::computeRestarts
[09:31:45.745]                           grepl <- base::grepl
[09:31:45.745]                           restarts <- computeRestarts(cond)
[09:31:45.745]                           for (restart in restarts) {
[09:31:45.745]                             name <- restart$name
[09:31:45.745]                             if (is.null(name)) 
[09:31:45.745]                               next
[09:31:45.745]                             if (!grepl(pattern, name)) 
[09:31:45.745]                               next
[09:31:45.745]                             invokeRestart(restart)
[09:31:45.745]                             muffled <- TRUE
[09:31:45.745]                             break
[09:31:45.745]                           }
[09:31:45.745]                         }
[09:31:45.745]                       }
[09:31:45.745]                       invisible(muffled)
[09:31:45.745]                     }
[09:31:45.745]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.745]                   }
[09:31:45.745]                 }
[09:31:45.745]                 else {
[09:31:45.745]                   if (TRUE) {
[09:31:45.745]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.745]                     {
[09:31:45.745]                       inherits <- base::inherits
[09:31:45.745]                       invokeRestart <- base::invokeRestart
[09:31:45.745]                       is.null <- base::is.null
[09:31:45.745]                       muffled <- FALSE
[09:31:45.745]                       if (inherits(cond, "message")) {
[09:31:45.745]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.745]                         if (muffled) 
[09:31:45.745]                           invokeRestart("muffleMessage")
[09:31:45.745]                       }
[09:31:45.745]                       else if (inherits(cond, "warning")) {
[09:31:45.745]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.745]                         if (muffled) 
[09:31:45.745]                           invokeRestart("muffleWarning")
[09:31:45.745]                       }
[09:31:45.745]                       else if (inherits(cond, "condition")) {
[09:31:45.745]                         if (!is.null(pattern)) {
[09:31:45.745]                           computeRestarts <- base::computeRestarts
[09:31:45.745]                           grepl <- base::grepl
[09:31:45.745]                           restarts <- computeRestarts(cond)
[09:31:45.745]                           for (restart in restarts) {
[09:31:45.745]                             name <- restart$name
[09:31:45.745]                             if (is.null(name)) 
[09:31:45.745]                               next
[09:31:45.745]                             if (!grepl(pattern, name)) 
[09:31:45.745]                               next
[09:31:45.745]                             invokeRestart(restart)
[09:31:45.745]                             muffled <- TRUE
[09:31:45.745]                             break
[09:31:45.745]                           }
[09:31:45.745]                         }
[09:31:45.745]                       }
[09:31:45.745]                       invisible(muffled)
[09:31:45.745]                     }
[09:31:45.745]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.745]                   }
[09:31:45.745]                 }
[09:31:45.745]             }
[09:31:45.745]         }))
[09:31:45.745]     }, error = function(ex) {
[09:31:45.745]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:45.745]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.745]                 ...future.rng), started = ...future.startTime, 
[09:31:45.745]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:45.745]             version = "1.8"), class = "FutureResult")
[09:31:45.745]     }, finally = {
[09:31:45.745]         if (!identical(...future.workdir, getwd())) 
[09:31:45.745]             setwd(...future.workdir)
[09:31:45.745]         {
[09:31:45.745]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:45.745]                 ...future.oldOptions$nwarnings <- NULL
[09:31:45.745]             }
[09:31:45.745]             base::options(...future.oldOptions)
[09:31:45.745]             if (.Platform$OS.type == "windows") {
[09:31:45.745]                 old_names <- names(...future.oldEnvVars)
[09:31:45.745]                 envs <- base::Sys.getenv()
[09:31:45.745]                 names <- names(envs)
[09:31:45.745]                 common <- intersect(names, old_names)
[09:31:45.745]                 added <- setdiff(names, old_names)
[09:31:45.745]                 removed <- setdiff(old_names, names)
[09:31:45.745]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:45.745]                   envs[common]]
[09:31:45.745]                 NAMES <- toupper(changed)
[09:31:45.745]                 args <- list()
[09:31:45.745]                 for (kk in seq_along(NAMES)) {
[09:31:45.745]                   name <- changed[[kk]]
[09:31:45.745]                   NAME <- NAMES[[kk]]
[09:31:45.745]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.745]                     next
[09:31:45.745]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.745]                 }
[09:31:45.745]                 NAMES <- toupper(added)
[09:31:45.745]                 for (kk in seq_along(NAMES)) {
[09:31:45.745]                   name <- added[[kk]]
[09:31:45.745]                   NAME <- NAMES[[kk]]
[09:31:45.745]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.745]                     next
[09:31:45.745]                   args[[name]] <- ""
[09:31:45.745]                 }
[09:31:45.745]                 NAMES <- toupper(removed)
[09:31:45.745]                 for (kk in seq_along(NAMES)) {
[09:31:45.745]                   name <- removed[[kk]]
[09:31:45.745]                   NAME <- NAMES[[kk]]
[09:31:45.745]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.745]                     next
[09:31:45.745]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.745]                 }
[09:31:45.745]                 if (length(args) > 0) 
[09:31:45.745]                   base::do.call(base::Sys.setenv, args = args)
[09:31:45.745]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:45.745]             }
[09:31:45.745]             else {
[09:31:45.745]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:45.745]             }
[09:31:45.745]             {
[09:31:45.745]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:45.745]                   0L) {
[09:31:45.745]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:45.745]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:45.745]                   base::options(opts)
[09:31:45.745]                 }
[09:31:45.745]                 {
[09:31:45.745]                   {
[09:31:45.745]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:45.745]                     NULL
[09:31:45.745]                   }
[09:31:45.745]                   options(future.plan = NULL)
[09:31:45.745]                   if (is.na(NA_character_)) 
[09:31:45.745]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.745]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:45.745]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:45.745]                     .init = FALSE)
[09:31:45.745]                 }
[09:31:45.745]             }
[09:31:45.745]         }
[09:31:45.745]     })
[09:31:45.745]     if (TRUE) {
[09:31:45.745]         base::sink(type = "output", split = FALSE)
[09:31:45.745]         if (TRUE) {
[09:31:45.745]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:45.745]         }
[09:31:45.745]         else {
[09:31:45.745]             ...future.result["stdout"] <- base::list(NULL)
[09:31:45.745]         }
[09:31:45.745]         base::close(...future.stdout)
[09:31:45.745]         ...future.stdout <- NULL
[09:31:45.745]     }
[09:31:45.745]     ...future.result$conditions <- ...future.conditions
[09:31:45.745]     ...future.result$finished <- base::Sys.time()
[09:31:45.745]     ...future.result
[09:31:45.745] }
[09:31:45.747] requestCore(): workers = 2
[09:31:45.749] MulticoreFuture started
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    stop(structure(list(message = "boom"), class = c("MyError", 
        "error", "condition")))
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[09:31:45.750] plan(): Setting new future strategy stack:
[09:31:45.750] List of future strategies:
[09:31:45.750] 1. sequential:
[09:31:45.750]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:45.750]    - tweaked: FALSE
[09:31:45.750]    - call: NULL
[09:31:45.751] plan(): nbrOfWorkers() = 1
[09:31:45.753] plan(): Setting new future strategy stack:
[09:31:45.753] List of future strategies:
[09:31:45.753] 1. multicore:
[09:31:45.753]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:45.753]    - tweaked: FALSE
[09:31:45.753]    - call: plan(multicore)
[09:31:45.758] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 4dab417a-2fdd-f8a2-2e0a-d701ed5fedef
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:45.760] result() for MulticoreFuture ...
[09:31:45.763] result() for MulticoreFuture ...
[09:31:45.763] result() for MulticoreFuture ... done
[09:31:45.763] signalConditions() ...
[09:31:45.763]  - include = ‘immediateCondition’
[09:31:45.763]  - exclude = 
[09:31:45.763]  - resignal = FALSE
[09:31:45.763]  - Number of conditions: 1
[09:31:45.763] signalConditions() ... done
[09:31:45.764] result() for MulticoreFuture ... done
[09:31:45.764] result() for MulticoreFuture ...
[09:31:45.764] result() for MulticoreFuture ... done
[09:31:45.764] signalConditions() ...
[09:31:45.764]  - include = ‘immediateCondition’
[09:31:45.764]  - exclude = 
[09:31:45.764]  - resignal = FALSE
[09:31:45.764]  - Number of conditions: 1
[09:31:45.764] signalConditions() ... done
<MyError: boom>
[09:31:45.765] result() for MulticoreFuture ...
[09:31:45.765] result() for MulticoreFuture ... done
[09:31:45.765] result() for MulticoreFuture ...
[09:31:45.765] result() for MulticoreFuture ... done
[09:31:45.765] signalConditions() ...
[09:31:45.765]  - include = ‘immediateCondition’
[09:31:45.765]  - exclude = 
[09:31:45.765]  - resignal = FALSE
[09:31:45.766]  - Number of conditions: 1
[09:31:45.766] signalConditions() ... done
[09:31:45.766] Future state: ‘finished’
[09:31:45.766] result() for MulticoreFuture ...
[09:31:45.766] result() for MulticoreFuture ... done
[09:31:45.766] signalConditions() ...
[09:31:45.766]  - include = ‘condition’
[09:31:45.766]  - exclude = ‘immediateCondition’
[09:31:45.766]  - resignal = TRUE
[09:31:45.767]  - Number of conditions: 1
[09:31:45.767]  - Condition #1: ‘MyError’, ‘error’, ‘condition’
[09:31:45.767] signalConditions() ... done
*** multicore(..., workers = 1L) ...
[09:31:45.767] getGlobalsAndPackages() ...
[09:31:45.767] Searching for globals...
[09:31:45.768] - globals found: [4] ‘{’, ‘*’, ‘a’, ‘b’
[09:31:45.769] Searching for globals ... DONE
[09:31:45.769] Resolving globals: FALSE
[09:31:45.769] The total size of the 2 globals is 112 bytes (112 bytes)
[09:31:45.770] The total size of the 2 globals exported for future expression (‘{; a * b; }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘a’ (56 bytes of class ‘numeric’) and ‘b’ (56 bytes of class ‘numeric’)
[09:31:45.770] - globals: [2] ‘a’, ‘b’
[09:31:45.770] 
[09:31:45.770] getGlobalsAndPackages() ... DONE
[09:31:45.770] Packages needed by the future expression (n = 0): <none>
[09:31:45.774] Packages needed by future strategies (n = 0): <none>
[09:31:45.774] {
[09:31:45.774]     {
[09:31:45.774]         {
[09:31:45.774]             ...future.startTime <- base::Sys.time()
[09:31:45.774]             {
[09:31:45.774]                 {
[09:31:45.774]                   {
[09:31:45.774]                     base::local({
[09:31:45.774]                       has_future <- base::requireNamespace("future", 
[09:31:45.774]                         quietly = TRUE)
[09:31:45.774]                       if (has_future) {
[09:31:45.774]                         ns <- base::getNamespace("future")
[09:31:45.774]                         version <- ns[[".package"]][["version"]]
[09:31:45.774]                         if (is.null(version)) 
[09:31:45.774]                           version <- utils::packageVersion("future")
[09:31:45.774]                       }
[09:31:45.774]                       else {
[09:31:45.774]                         version <- NULL
[09:31:45.774]                       }
[09:31:45.774]                       if (!has_future || version < "1.8.0") {
[09:31:45.774]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:45.774]                           "", base::R.version$version.string), 
[09:31:45.774]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:45.774]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:45.774]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:45.774]                             "release", "version")], collapse = " "), 
[09:31:45.774]                           hostname = base::Sys.info()[["nodename"]])
[09:31:45.774]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:45.774]                           info)
[09:31:45.774]                         info <- base::paste(info, collapse = "; ")
[09:31:45.774]                         if (!has_future) {
[09:31:45.774]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:45.774]                             info)
[09:31:45.774]                         }
[09:31:45.774]                         else {
[09:31:45.774]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:45.774]                             info, version)
[09:31:45.774]                         }
[09:31:45.774]                         base::stop(msg)
[09:31:45.774]                       }
[09:31:45.774]                     })
[09:31:45.774]                   }
[09:31:45.774]                   ...future.strategy.old <- future::plan("list")
[09:31:45.774]                   options(future.plan = NULL)
[09:31:45.774]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.774]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:45.774]                 }
[09:31:45.774]                 ...future.workdir <- getwd()
[09:31:45.774]             }
[09:31:45.774]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:45.774]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:45.774]         }
[09:31:45.774]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:45.774]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:45.774]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:45.774]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:45.774]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:45.774]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:45.774]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:45.774]             base::names(...future.oldOptions))
[09:31:45.774]     }
[09:31:45.774]     if (FALSE) {
[09:31:45.774]     }
[09:31:45.774]     else {
[09:31:45.774]         if (TRUE) {
[09:31:45.774]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:45.774]                 open = "w")
[09:31:45.774]         }
[09:31:45.774]         else {
[09:31:45.774]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:45.774]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:45.774]         }
[09:31:45.774]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:45.774]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:45.774]             base::sink(type = "output", split = FALSE)
[09:31:45.774]             base::close(...future.stdout)
[09:31:45.774]         }, add = TRUE)
[09:31:45.774]     }
[09:31:45.774]     ...future.frame <- base::sys.nframe()
[09:31:45.774]     ...future.conditions <- base::list()
[09:31:45.774]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:45.774]     if (FALSE) {
[09:31:45.774]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:45.774]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:45.774]     }
[09:31:45.774]     ...future.result <- base::tryCatch({
[09:31:45.774]         base::withCallingHandlers({
[09:31:45.774]             ...future.value <- base::withVisible(base::local({
[09:31:45.774]                 a * b
[09:31:45.774]             }))
[09:31:45.774]             future::FutureResult(value = ...future.value$value, 
[09:31:45.774]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.774]                   ...future.rng), globalenv = if (FALSE) 
[09:31:45.774]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:45.774]                     ...future.globalenv.names))
[09:31:45.774]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:45.774]         }, condition = base::local({
[09:31:45.774]             c <- base::c
[09:31:45.774]             inherits <- base::inherits
[09:31:45.774]             invokeRestart <- base::invokeRestart
[09:31:45.774]             length <- base::length
[09:31:45.774]             list <- base::list
[09:31:45.774]             seq.int <- base::seq.int
[09:31:45.774]             signalCondition <- base::signalCondition
[09:31:45.774]             sys.calls <- base::sys.calls
[09:31:45.774]             `[[` <- base::`[[`
[09:31:45.774]             `+` <- base::`+`
[09:31:45.774]             `<<-` <- base::`<<-`
[09:31:45.774]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:45.774]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:45.774]                   3L)]
[09:31:45.774]             }
[09:31:45.774]             function(cond) {
[09:31:45.774]                 is_error <- inherits(cond, "error")
[09:31:45.774]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:45.774]                   NULL)
[09:31:45.774]                 if (is_error) {
[09:31:45.774]                   sessionInformation <- function() {
[09:31:45.774]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:45.774]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:45.774]                       search = base::search(), system = base::Sys.info())
[09:31:45.774]                   }
[09:31:45.774]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.774]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:45.774]                     cond$call), session = sessionInformation(), 
[09:31:45.774]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:45.774]                   signalCondition(cond)
[09:31:45.774]                 }
[09:31:45.774]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:45.774]                 "immediateCondition"))) {
[09:31:45.774]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:45.774]                   ...future.conditions[[length(...future.conditions) + 
[09:31:45.774]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:45.774]                   if (TRUE && !signal) {
[09:31:45.774]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.774]                     {
[09:31:45.774]                       inherits <- base::inherits
[09:31:45.774]                       invokeRestart <- base::invokeRestart
[09:31:45.774]                       is.null <- base::is.null
[09:31:45.774]                       muffled <- FALSE
[09:31:45.774]                       if (inherits(cond, "message")) {
[09:31:45.774]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.774]                         if (muffled) 
[09:31:45.774]                           invokeRestart("muffleMessage")
[09:31:45.774]                       }
[09:31:45.774]                       else if (inherits(cond, "warning")) {
[09:31:45.774]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.774]                         if (muffled) 
[09:31:45.774]                           invokeRestart("muffleWarning")
[09:31:45.774]                       }
[09:31:45.774]                       else if (inherits(cond, "condition")) {
[09:31:45.774]                         if (!is.null(pattern)) {
[09:31:45.774]                           computeRestarts <- base::computeRestarts
[09:31:45.774]                           grepl <- base::grepl
[09:31:45.774]                           restarts <- computeRestarts(cond)
[09:31:45.774]                           for (restart in restarts) {
[09:31:45.774]                             name <- restart$name
[09:31:45.774]                             if (is.null(name)) 
[09:31:45.774]                               next
[09:31:45.774]                             if (!grepl(pattern, name)) 
[09:31:45.774]                               next
[09:31:45.774]                             invokeRestart(restart)
[09:31:45.774]                             muffled <- TRUE
[09:31:45.774]                             break
[09:31:45.774]                           }
[09:31:45.774]                         }
[09:31:45.774]                       }
[09:31:45.774]                       invisible(muffled)
[09:31:45.774]                     }
[09:31:45.774]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.774]                   }
[09:31:45.774]                 }
[09:31:45.774]                 else {
[09:31:45.774]                   if (TRUE) {
[09:31:45.774]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:45.774]                     {
[09:31:45.774]                       inherits <- base::inherits
[09:31:45.774]                       invokeRestart <- base::invokeRestart
[09:31:45.774]                       is.null <- base::is.null
[09:31:45.774]                       muffled <- FALSE
[09:31:45.774]                       if (inherits(cond, "message")) {
[09:31:45.774]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:45.774]                         if (muffled) 
[09:31:45.774]                           invokeRestart("muffleMessage")
[09:31:45.774]                       }
[09:31:45.774]                       else if (inherits(cond, "warning")) {
[09:31:45.774]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:45.774]                         if (muffled) 
[09:31:45.774]                           invokeRestart("muffleWarning")
[09:31:45.774]                       }
[09:31:45.774]                       else if (inherits(cond, "condition")) {
[09:31:45.774]                         if (!is.null(pattern)) {
[09:31:45.774]                           computeRestarts <- base::computeRestarts
[09:31:45.774]                           grepl <- base::grepl
[09:31:45.774]                           restarts <- computeRestarts(cond)
[09:31:45.774]                           for (restart in restarts) {
[09:31:45.774]                             name <- restart$name
[09:31:45.774]                             if (is.null(name)) 
[09:31:45.774]                               next
[09:31:45.774]                             if (!grepl(pattern, name)) 
[09:31:45.774]                               next
[09:31:45.774]                             invokeRestart(restart)
[09:31:45.774]                             muffled <- TRUE
[09:31:45.774]                             break
[09:31:45.774]                           }
[09:31:45.774]                         }
[09:31:45.774]                       }
[09:31:45.774]                       invisible(muffled)
[09:31:45.774]                     }
[09:31:45.774]                     muffleCondition(cond, pattern = "^muffle")
[09:31:45.774]                   }
[09:31:45.774]                 }
[09:31:45.774]             }
[09:31:45.774]         }))
[09:31:45.774]     }, error = function(ex) {
[09:31:45.774]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:45.774]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:45.774]                 ...future.rng), started = ...future.startTime, 
[09:31:45.774]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:45.774]             version = "1.8"), class = "FutureResult")
[09:31:45.774]     }, finally = {
[09:31:45.774]         if (!identical(...future.workdir, getwd())) 
[09:31:45.774]             setwd(...future.workdir)
[09:31:45.774]         {
[09:31:45.774]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:45.774]                 ...future.oldOptions$nwarnings <- NULL
[09:31:45.774]             }
[09:31:45.774]             base::options(...future.oldOptions)
[09:31:45.774]             if (.Platform$OS.type == "windows") {
[09:31:45.774]                 old_names <- names(...future.oldEnvVars)
[09:31:45.774]                 envs <- base::Sys.getenv()
[09:31:45.774]                 names <- names(envs)
[09:31:45.774]                 common <- intersect(names, old_names)
[09:31:45.774]                 added <- setdiff(names, old_names)
[09:31:45.774]                 removed <- setdiff(old_names, names)
[09:31:45.774]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:45.774]                   envs[common]]
[09:31:45.774]                 NAMES <- toupper(changed)
[09:31:45.774]                 args <- list()
[09:31:45.774]                 for (kk in seq_along(NAMES)) {
[09:31:45.774]                   name <- changed[[kk]]
[09:31:45.774]                   NAME <- NAMES[[kk]]
[09:31:45.774]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.774]                     next
[09:31:45.774]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.774]                 }
[09:31:45.774]                 NAMES <- toupper(added)
[09:31:45.774]                 for (kk in seq_along(NAMES)) {
[09:31:45.774]                   name <- added[[kk]]
[09:31:45.774]                   NAME <- NAMES[[kk]]
[09:31:45.774]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.774]                     next
[09:31:45.774]                   args[[name]] <- ""
[09:31:45.774]                 }
[09:31:45.774]                 NAMES <- toupper(removed)
[09:31:45.774]                 for (kk in seq_along(NAMES)) {
[09:31:45.774]                   name <- removed[[kk]]
[09:31:45.774]                   NAME <- NAMES[[kk]]
[09:31:45.774]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:45.774]                     next
[09:31:45.774]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:45.774]                 }
[09:31:45.774]                 if (length(args) > 0) 
[09:31:45.774]                   base::do.call(base::Sys.setenv, args = args)
[09:31:45.774]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:45.774]             }
[09:31:45.774]             else {
[09:31:45.774]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:45.774]             }
[09:31:45.774]             {
[09:31:45.774]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:45.774]                   0L) {
[09:31:45.774]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:45.774]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:45.774]                   base::options(opts)
[09:31:45.774]                 }
[09:31:45.774]                 {
[09:31:45.774]                   {
[09:31:45.774]                     NULL
[09:31:45.774]                     RNGkind("Mersenne-Twister")
[09:31:45.774]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:45.774]                       inherits = FALSE)
[09:31:45.774]                   }
[09:31:45.774]                   options(future.plan = NULL)
[09:31:45.774]                   if (is.na(NA_character_)) 
[09:31:45.774]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:45.774]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:45.774]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:45.774]                     .init = FALSE)
[09:31:45.774]                 }
[09:31:45.774]             }
[09:31:45.774]         }
[09:31:45.774]     })
[09:31:45.774]     if (TRUE) {
[09:31:45.774]         base::sink(type = "output", split = FALSE)
[09:31:45.774]         if (TRUE) {
[09:31:45.774]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:45.774]         }
[09:31:45.774]         else {
[09:31:45.774]             ...future.result["stdout"] <- base::list(NULL)
[09:31:45.774]         }
[09:31:45.774]         base::close(...future.stdout)
[09:31:45.774]         ...future.stdout <- NULL
[09:31:45.774]     }
[09:31:45.774]     ...future.result$conditions <- ...future.conditions
[09:31:45.774]     ...future.result$finished <- base::Sys.time()
[09:31:45.774]     ...future.result
[09:31:45.774] }
[09:31:45.776] assign_globals() ...
[09:31:45.776] List of 2
[09:31:45.776]  $ a: num 2
[09:31:45.776]  $ b: num 3
[09:31:45.776]  - attr(*, "where")=List of 2
[09:31:45.776]   ..$ a:<environment: R_EmptyEnv> 
[09:31:45.776]   ..$ b:<environment: R_EmptyEnv> 
[09:31:45.776]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:31:45.776]  - attr(*, "resolved")= logi FALSE
[09:31:45.776]  - attr(*, "total_size")= num 112
[09:31:45.780] - copied ‘a’ to environment
[09:31:45.780] - copied ‘b’ to environment
[09:31:45.780] assign_globals() ... done
[09:31:45.780] plan(): Setting new future strategy stack:
[09:31:45.781] List of future strategies:
[09:31:45.781] 1. sequential:
[09:31:45.781]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:45.781]    - tweaked: FALSE
[09:31:45.781]    - call: NULL
[09:31:45.781] plan(): nbrOfWorkers() = 1
[09:31:45.782] plan(): Setting new future strategy stack:
[09:31:45.782] List of future strategies:
[09:31:45.782] 1. multicore:
[09:31:45.782]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:45.782]    - tweaked: FALSE
[09:31:45.782]    - call: plan(multicore)
[09:31:45.786] plan(): nbrOfWorkers() = 2
[09:31:45.786] SequentialFuture started (and completed)
[1] 6
*** multicore(..., workers = 1L) ... DONE
Testing with 2 cores ... DONE
> 
> message("*** multicore() ... DONE")
*** multicore() ... DONE
> 
> source("incl/end.R")
[09:31:45.787] plan(): Setting new future strategy stack:
[09:31:45.787] List of future strategies:
[09:31:45.787] 1. FutureStrategy:
[09:31:45.787]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:45.787]    - tweaked: FALSE
[09:31:45.787]    - call: future::plan(oplan)
[09:31:45.787] plan(): nbrOfWorkers() = 1
> 
