
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:40:07.617] plan(): Setting new future strategy stack:
[17:40:07.618] List of future strategies:
[17:40:07.618] 1. sequential:
[17:40:07.618]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:40:07.618]    - tweaked: FALSE
[17:40:07.618]    - call: future::plan("sequential")
[17:40:07.628] plan(): nbrOfWorkers() = 1
> library("listenv")
> plan(multicore)
[17:40:07.643] plan(): Setting new future strategy stack:
[17:40:07.643] List of future strategies:
[17:40:07.643] 1. multicore:
[17:40:07.643]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:40:07.643]    - tweaked: FALSE
[17:40:07.643]    - call: plan(multicore)
[17:40:07.656] plan(): nbrOfWorkers() = 2
> 
> message("*** multicore() ...")
*** multicore() ...
> 
> for (cores in 1:min(2L, availableCores("multicore"))) {
+   message(sprintf("Testing with %d cores ...", cores))
+   options(mc.cores = cores)
+ 
+   if (!supportsMulticore()) {
+     message(sprintf("Multicore futures are not supporting on '%s'. Falling back to use synchronous sequential futures", .Platform$OS.type))
+   }
+ 
+   nworkers <- nbrOfWorkers()
+   message("Number of workers: ", nworkers)
+   stopifnot(nworkers == cores)
+   
+   for (globals in c(FALSE, TRUE)) {
+ 
+     message(sprintf("*** multicore(..., globals = %s) without globals", globals))
+   
+     f <- multicore({
+       42L
+     }, globals = globals)
+     stopifnot(inherits(f, "MulticoreFuture") || ((cores ==1 || !supportsMulticore()) && inherits(f, "SequentialFuture")))
+   
+     print(resolved(f))
+     y <- value(f)
+     print(y)
+     stopifnot(y == 42L)
+   
+   
+     message(sprintf("*** multicore(..., globals = %s) with globals", globals))
+     ## A global variable
+     a <- 0
+     f <- multicore({
+       b <- 3
+       c <- 2
+       a * b * c
+     }, globals = globals)
+     print(f)
+   
+   
+     ## A multicore future is evaluated in a separated
+     ## forked process.  Changing the value of a global
+     ## variable should not affect the result of the
+     ## future.
+     a <- 7  ## Make sure globals are frozen
+     v <- value(f)
+     print(v)
+     stopifnot(v == 0)
+   
+   
+     message(sprintf("*** multicore(..., globals = %s) with globals and blocking", globals))
+     x <- listenv()
+     for (ii in 1:4) {
+       message(sprintf(" - Creating multicore future #%d ...", ii))
+       x[[ii]] <- multicore({ ii }, globals = globals)
+     }
+     message(sprintf(" - Resolving %d multicore futures", length(x)))
+     v <- sapply(x, FUN = value)
+     stopifnot(all(v == 1:4))
+   
+   
+     message(sprintf("*** multicore(..., globals = %s) and errors", globals))
+     f <- multicore({
+       stop("Whoops!")
+       1
+     }, globals = globals)
+     print(f)
+     v <- value(f, signal = FALSE)
+     print(v)
+     stopifnot(inherits(v, "simpleError"))
+   
+     res <- try(value(f), silent = TRUE)
+     print(res)
+     stopifnot(inherits(res, "try-error"))
+   
+     ## Error is repeated
+     res <- try(value(f), silent = TRUE)
+     print(res)
+     stopifnot(inherits(res, "try-error"))
+ 
+     ## Custom error class
+     f <- multicore({
+       stop(structure(list(message = "boom"),
+                      class = c("MyError", "error", "condition")))
+     })
+     print(f)
+     v <- value(f, signal = FALSE)
+     print(v)
+     stopifnot(inherits(v, "error"), inherits(v, "MyError"))
+   
+     ## Make sure error is signaled
+     res <- tryCatch(value(f), error = identity)
+     stopifnot(inherits(res, "error"))
+   
+     ## Issue #200: Custom condition class attributes are lost 
+     stopifnot(inherits(res, "MyError"))    
+   } # for (globals ...)
+ 
+ 
+   message("*** multicore(..., workers = 1L) ...")
+ 
+   a <- 2
+   b <- 3
+   yTruth <- a * b
+ 
+   f <- multicore({ a * b }, globals = TRUE, workers = 1L)
+   rm(list = c("a", "b"))
+ 
+   v <- value(f)
+   print(v)
+   stopifnot(v == yTruth)
+ 
+   message("*** multicore(..., workers = 1L) ... DONE")
+ 
+   message(sprintf("Testing with %d cores ... DONE", cores))
+ } ## for (cores ...)
Testing with 1 cores ...
Number of workers: 1
*** multicore(..., globals = FALSE) without globals
[17:40:07.711] getGlobalsAndPackages() ...
[17:40:07.711] Not searching for globals
[17:40:07.712] - globals: [0] <none>
[17:40:07.712] getGlobalsAndPackages() ... DONE
[17:40:07.713] Packages needed by the future expression (n = 0): <none>
[17:40:07.713] Packages needed by future strategies (n = 0): <none>
[17:40:07.714] {
[17:40:07.714]     {
[17:40:07.714]         {
[17:40:07.714]             ...future.startTime <- base::Sys.time()
[17:40:07.714]             {
[17:40:07.714]                 {
[17:40:07.714]                   {
[17:40:07.714]                     base::local({
[17:40:07.714]                       has_future <- base::requireNamespace("future", 
[17:40:07.714]                         quietly = TRUE)
[17:40:07.714]                       if (has_future) {
[17:40:07.714]                         ns <- base::getNamespace("future")
[17:40:07.714]                         version <- ns[[".package"]][["version"]]
[17:40:07.714]                         if (is.null(version)) 
[17:40:07.714]                           version <- utils::packageVersion("future")
[17:40:07.714]                       }
[17:40:07.714]                       else {
[17:40:07.714]                         version <- NULL
[17:40:07.714]                       }
[17:40:07.714]                       if (!has_future || version < "1.8.0") {
[17:40:07.714]                         info <- base::c(r_version = base::gsub("R version ", 
[17:40:07.714]                           "", base::R.version$version.string), 
[17:40:07.714]                           platform = base::sprintf("%s (%s-bit)", 
[17:40:07.714]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:07.714]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:07.714]                             "release", "version")], collapse = " "), 
[17:40:07.714]                           hostname = base::Sys.info()[["nodename"]])
[17:40:07.714]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:40:07.714]                           info)
[17:40:07.714]                         info <- base::paste(info, collapse = "; ")
[17:40:07.714]                         if (!has_future) {
[17:40:07.714]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:07.714]                             info)
[17:40:07.714]                         }
[17:40:07.714]                         else {
[17:40:07.714]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:07.714]                             info, version)
[17:40:07.714]                         }
[17:40:07.714]                         base::stop(msg)
[17:40:07.714]                       }
[17:40:07.714]                     })
[17:40:07.714]                   }
[17:40:07.714]                   ...future.strategy.old <- future::plan("list")
[17:40:07.714]                   options(future.plan = NULL)
[17:40:07.714]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:07.714]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:07.714]                 }
[17:40:07.714]                 ...future.workdir <- getwd()
[17:40:07.714]             }
[17:40:07.714]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:07.714]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:07.714]         }
[17:40:07.714]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:07.714]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:40:07.714]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:07.714]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:07.714]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:07.714]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:07.714]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:07.714]             base::names(...future.oldOptions))
[17:40:07.714]     }
[17:40:07.714]     if (FALSE) {
[17:40:07.714]     }
[17:40:07.714]     else {
[17:40:07.714]         if (TRUE) {
[17:40:07.714]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:07.714]                 open = "w")
[17:40:07.714]         }
[17:40:07.714]         else {
[17:40:07.714]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:07.714]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:07.714]         }
[17:40:07.714]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:07.714]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:07.714]             base::sink(type = "output", split = FALSE)
[17:40:07.714]             base::close(...future.stdout)
[17:40:07.714]         }, add = TRUE)
[17:40:07.714]     }
[17:40:07.714]     ...future.frame <- base::sys.nframe()
[17:40:07.714]     ...future.conditions <- base::list()
[17:40:07.714]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:07.714]     if (FALSE) {
[17:40:07.714]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:07.714]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:07.714]     }
[17:40:07.714]     ...future.result <- base::tryCatch({
[17:40:07.714]         base::withCallingHandlers({
[17:40:07.714]             ...future.value <- base::withVisible(base::local({
[17:40:07.714]                 42L
[17:40:07.714]             }))
[17:40:07.714]             future::FutureResult(value = ...future.value$value, 
[17:40:07.714]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:07.714]                   ...future.rng), globalenv = if (FALSE) 
[17:40:07.714]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:07.714]                     ...future.globalenv.names))
[17:40:07.714]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:07.714]         }, condition = base::local({
[17:40:07.714]             c <- base::c
[17:40:07.714]             inherits <- base::inherits
[17:40:07.714]             invokeRestart <- base::invokeRestart
[17:40:07.714]             length <- base::length
[17:40:07.714]             list <- base::list
[17:40:07.714]             seq.int <- base::seq.int
[17:40:07.714]             signalCondition <- base::signalCondition
[17:40:07.714]             sys.calls <- base::sys.calls
[17:40:07.714]             `[[` <- base::`[[`
[17:40:07.714]             `+` <- base::`+`
[17:40:07.714]             `<<-` <- base::`<<-`
[17:40:07.714]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:07.714]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:07.714]                   3L)]
[17:40:07.714]             }
[17:40:07.714]             function(cond) {
[17:40:07.714]                 is_error <- inherits(cond, "error")
[17:40:07.714]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:07.714]                   NULL)
[17:40:07.714]                 if (is_error) {
[17:40:07.714]                   sessionInformation <- function() {
[17:40:07.714]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:07.714]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:07.714]                       search = base::search(), system = base::Sys.info())
[17:40:07.714]                   }
[17:40:07.714]                   ...future.conditions[[length(...future.conditions) + 
[17:40:07.714]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:07.714]                     cond$call), session = sessionInformation(), 
[17:40:07.714]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:07.714]                   signalCondition(cond)
[17:40:07.714]                 }
[17:40:07.714]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:07.714]                 "immediateCondition"))) {
[17:40:07.714]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:07.714]                   ...future.conditions[[length(...future.conditions) + 
[17:40:07.714]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:07.714]                   if (TRUE && !signal) {
[17:40:07.714]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:07.714]                     {
[17:40:07.714]                       inherits <- base::inherits
[17:40:07.714]                       invokeRestart <- base::invokeRestart
[17:40:07.714]                       is.null <- base::is.null
[17:40:07.714]                       muffled <- FALSE
[17:40:07.714]                       if (inherits(cond, "message")) {
[17:40:07.714]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:07.714]                         if (muffled) 
[17:40:07.714]                           invokeRestart("muffleMessage")
[17:40:07.714]                       }
[17:40:07.714]                       else if (inherits(cond, "warning")) {
[17:40:07.714]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:07.714]                         if (muffled) 
[17:40:07.714]                           invokeRestart("muffleWarning")
[17:40:07.714]                       }
[17:40:07.714]                       else if (inherits(cond, "condition")) {
[17:40:07.714]                         if (!is.null(pattern)) {
[17:40:07.714]                           computeRestarts <- base::computeRestarts
[17:40:07.714]                           grepl <- base::grepl
[17:40:07.714]                           restarts <- computeRestarts(cond)
[17:40:07.714]                           for (restart in restarts) {
[17:40:07.714]                             name <- restart$name
[17:40:07.714]                             if (is.null(name)) 
[17:40:07.714]                               next
[17:40:07.714]                             if (!grepl(pattern, name)) 
[17:40:07.714]                               next
[17:40:07.714]                             invokeRestart(restart)
[17:40:07.714]                             muffled <- TRUE
[17:40:07.714]                             break
[17:40:07.714]                           }
[17:40:07.714]                         }
[17:40:07.714]                       }
[17:40:07.714]                       invisible(muffled)
[17:40:07.714]                     }
[17:40:07.714]                     muffleCondition(cond, pattern = "^muffle")
[17:40:07.714]                   }
[17:40:07.714]                 }
[17:40:07.714]                 else {
[17:40:07.714]                   if (TRUE) {
[17:40:07.714]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:07.714]                     {
[17:40:07.714]                       inherits <- base::inherits
[17:40:07.714]                       invokeRestart <- base::invokeRestart
[17:40:07.714]                       is.null <- base::is.null
[17:40:07.714]                       muffled <- FALSE
[17:40:07.714]                       if (inherits(cond, "message")) {
[17:40:07.714]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:07.714]                         if (muffled) 
[17:40:07.714]                           invokeRestart("muffleMessage")
[17:40:07.714]                       }
[17:40:07.714]                       else if (inherits(cond, "warning")) {
[17:40:07.714]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:07.714]                         if (muffled) 
[17:40:07.714]                           invokeRestart("muffleWarning")
[17:40:07.714]                       }
[17:40:07.714]                       else if (inherits(cond, "condition")) {
[17:40:07.714]                         if (!is.null(pattern)) {
[17:40:07.714]                           computeRestarts <- base::computeRestarts
[17:40:07.714]                           grepl <- base::grepl
[17:40:07.714]                           restarts <- computeRestarts(cond)
[17:40:07.714]                           for (restart in restarts) {
[17:40:07.714]                             name <- restart$name
[17:40:07.714]                             if (is.null(name)) 
[17:40:07.714]                               next
[17:40:07.714]                             if (!grepl(pattern, name)) 
[17:40:07.714]                               next
[17:40:07.714]                             invokeRestart(restart)
[17:40:07.714]                             muffled <- TRUE
[17:40:07.714]                             break
[17:40:07.714]                           }
[17:40:07.714]                         }
[17:40:07.714]                       }
[17:40:07.714]                       invisible(muffled)
[17:40:07.714]                     }
[17:40:07.714]                     muffleCondition(cond, pattern = "^muffle")
[17:40:07.714]                   }
[17:40:07.714]                 }
[17:40:07.714]             }
[17:40:07.714]         }))
[17:40:07.714]     }, error = function(ex) {
[17:40:07.714]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:07.714]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:07.714]                 ...future.rng), started = ...future.startTime, 
[17:40:07.714]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:07.714]             version = "1.8"), class = "FutureResult")
[17:40:07.714]     }, finally = {
[17:40:07.714]         if (!identical(...future.workdir, getwd())) 
[17:40:07.714]             setwd(...future.workdir)
[17:40:07.714]         {
[17:40:07.714]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:07.714]                 ...future.oldOptions$nwarnings <- NULL
[17:40:07.714]             }
[17:40:07.714]             base::options(...future.oldOptions)
[17:40:07.714]             if (.Platform$OS.type == "windows") {
[17:40:07.714]                 old_names <- names(...future.oldEnvVars)
[17:40:07.714]                 envs <- base::Sys.getenv()
[17:40:07.714]                 names <- names(envs)
[17:40:07.714]                 common <- intersect(names, old_names)
[17:40:07.714]                 added <- setdiff(names, old_names)
[17:40:07.714]                 removed <- setdiff(old_names, names)
[17:40:07.714]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:07.714]                   envs[common]]
[17:40:07.714]                 NAMES <- toupper(changed)
[17:40:07.714]                 args <- list()
[17:40:07.714]                 for (kk in seq_along(NAMES)) {
[17:40:07.714]                   name <- changed[[kk]]
[17:40:07.714]                   NAME <- NAMES[[kk]]
[17:40:07.714]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:07.714]                     next
[17:40:07.714]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:07.714]                 }
[17:40:07.714]                 NAMES <- toupper(added)
[17:40:07.714]                 for (kk in seq_along(NAMES)) {
[17:40:07.714]                   name <- added[[kk]]
[17:40:07.714]                   NAME <- NAMES[[kk]]
[17:40:07.714]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:07.714]                     next
[17:40:07.714]                   args[[name]] <- ""
[17:40:07.714]                 }
[17:40:07.714]                 NAMES <- toupper(removed)
[17:40:07.714]                 for (kk in seq_along(NAMES)) {
[17:40:07.714]                   name <- removed[[kk]]
[17:40:07.714]                   NAME <- NAMES[[kk]]
[17:40:07.714]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:07.714]                     next
[17:40:07.714]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:07.714]                 }
[17:40:07.714]                 if (length(args) > 0) 
[17:40:07.714]                   base::do.call(base::Sys.setenv, args = args)
[17:40:07.714]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:07.714]             }
[17:40:07.714]             else {
[17:40:07.714]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:07.714]             }
[17:40:07.714]             {
[17:40:07.714]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:07.714]                   0L) {
[17:40:07.714]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:07.714]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:07.714]                   base::options(opts)
[17:40:07.714]                 }
[17:40:07.714]                 {
[17:40:07.714]                   {
[17:40:07.714]                     NULL
[17:40:07.714]                     RNGkind("Mersenne-Twister")
[17:40:07.714]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:40:07.714]                       inherits = FALSE)
[17:40:07.714]                   }
[17:40:07.714]                   options(future.plan = NULL)
[17:40:07.714]                   if (is.na(NA_character_)) 
[17:40:07.714]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:07.714]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:07.714]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:40:07.714]                     .init = FALSE)
[17:40:07.714]                 }
[17:40:07.714]             }
[17:40:07.714]         }
[17:40:07.714]     })
[17:40:07.714]     if (TRUE) {
[17:40:07.714]         base::sink(type = "output", split = FALSE)
[17:40:07.714]         if (TRUE) {
[17:40:07.714]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:07.714]         }
[17:40:07.714]         else {
[17:40:07.714]             ...future.result["stdout"] <- base::list(NULL)
[17:40:07.714]         }
[17:40:07.714]         base::close(...future.stdout)
[17:40:07.714]         ...future.stdout <- NULL
[17:40:07.714]     }
[17:40:07.714]     ...future.result$conditions <- ...future.conditions
[17:40:07.714]     ...future.result$finished <- base::Sys.time()
[17:40:07.714]     ...future.result
[17:40:07.714] }
[17:40:07.716] plan(): Setting new future strategy stack:
[17:40:07.716] List of future strategies:
[17:40:07.716] 1. sequential:
[17:40:07.716]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:40:07.716]    - tweaked: FALSE
[17:40:07.716]    - call: NULL
[17:40:07.716] plan(): nbrOfWorkers() = 1
[17:40:07.717] plan(): Setting new future strategy stack:
[17:40:07.717] List of future strategies:
[17:40:07.717] 1. multicore:
[17:40:07.717]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:40:07.717]    - tweaked: FALSE
[17:40:07.717]    - call: plan(multicore)
[17:40:07.721] plan(): nbrOfWorkers() = 1
[17:40:07.721] SequentialFuture started (and completed)
[17:40:07.721] resolved() for ‘SequentialFuture’ ...
[17:40:07.722] - state: ‘finished’
[17:40:07.722] - run: TRUE
[17:40:07.722] - result: ‘FutureResult’
[17:40:07.722] resolved() for ‘SequentialFuture’ ... done
[1] TRUE
[1] 42
*** multicore(..., globals = FALSE) with globals
[17:40:07.725] getGlobalsAndPackages() ...
[17:40:07.726] Not searching for globals
[17:40:07.726] - globals: [0] <none>
[17:40:07.726] getGlobalsAndPackages() ... DONE
[17:40:07.726] Packages needed by the future expression (n = 0): <none>
[17:40:07.726] Packages needed by future strategies (n = 0): <none>
[17:40:07.727] {
[17:40:07.727]     {
[17:40:07.727]         {
[17:40:07.727]             ...future.startTime <- base::Sys.time()
[17:40:07.727]             {
[17:40:07.727]                 {
[17:40:07.727]                   {
[17:40:07.727]                     base::local({
[17:40:07.727]                       has_future <- base::requireNamespace("future", 
[17:40:07.727]                         quietly = TRUE)
[17:40:07.727]                       if (has_future) {
[17:40:07.727]                         ns <- base::getNamespace("future")
[17:40:07.727]                         version <- ns[[".package"]][["version"]]
[17:40:07.727]                         if (is.null(version)) 
[17:40:07.727]                           version <- utils::packageVersion("future")
[17:40:07.727]                       }
[17:40:07.727]                       else {
[17:40:07.727]                         version <- NULL
[17:40:07.727]                       }
[17:40:07.727]                       if (!has_future || version < "1.8.0") {
[17:40:07.727]                         info <- base::c(r_version = base::gsub("R version ", 
[17:40:07.727]                           "", base::R.version$version.string), 
[17:40:07.727]                           platform = base::sprintf("%s (%s-bit)", 
[17:40:07.727]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:07.727]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:07.727]                             "release", "version")], collapse = " "), 
[17:40:07.727]                           hostname = base::Sys.info()[["nodename"]])
[17:40:07.727]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:40:07.727]                           info)
[17:40:07.727]                         info <- base::paste(info, collapse = "; ")
[17:40:07.727]                         if (!has_future) {
[17:40:07.727]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:07.727]                             info)
[17:40:07.727]                         }
[17:40:07.727]                         else {
[17:40:07.727]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:07.727]                             info, version)
[17:40:07.727]                         }
[17:40:07.727]                         base::stop(msg)
[17:40:07.727]                       }
[17:40:07.727]                     })
[17:40:07.727]                   }
[17:40:07.727]                   ...future.strategy.old <- future::plan("list")
[17:40:07.727]                   options(future.plan = NULL)
[17:40:07.727]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:07.727]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:07.727]                 }
[17:40:07.727]                 ...future.workdir <- getwd()
[17:40:07.727]             }
[17:40:07.727]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:07.727]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:07.727]         }
[17:40:07.727]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:07.727]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:40:07.727]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:07.727]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:07.727]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:07.727]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:07.727]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:07.727]             base::names(...future.oldOptions))
[17:40:07.727]     }
[17:40:07.727]     if (FALSE) {
[17:40:07.727]     }
[17:40:07.727]     else {
[17:40:07.727]         if (TRUE) {
[17:40:07.727]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:07.727]                 open = "w")
[17:40:07.727]         }
[17:40:07.727]         else {
[17:40:07.727]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:07.727]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:07.727]         }
[17:40:07.727]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:07.727]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:07.727]             base::sink(type = "output", split = FALSE)
[17:40:07.727]             base::close(...future.stdout)
[17:40:07.727]         }, add = TRUE)
[17:40:07.727]     }
[17:40:07.727]     ...future.frame <- base::sys.nframe()
[17:40:07.727]     ...future.conditions <- base::list()
[17:40:07.727]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:07.727]     if (FALSE) {
[17:40:07.727]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:07.727]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:07.727]     }
[17:40:07.727]     ...future.result <- base::tryCatch({
[17:40:07.727]         base::withCallingHandlers({
[17:40:07.727]             ...future.value <- base::withVisible(base::local({
[17:40:07.727]                 b <- 3
[17:40:07.727]                 c <- 2
[17:40:07.727]                 a * b * c
[17:40:07.727]             }))
[17:40:07.727]             future::FutureResult(value = ...future.value$value, 
[17:40:07.727]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:07.727]                   ...future.rng), globalenv = if (FALSE) 
[17:40:07.727]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:07.727]                     ...future.globalenv.names))
[17:40:07.727]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:07.727]         }, condition = base::local({
[17:40:07.727]             c <- base::c
[17:40:07.727]             inherits <- base::inherits
[17:40:07.727]             invokeRestart <- base::invokeRestart
[17:40:07.727]             length <- base::length
[17:40:07.727]             list <- base::list
[17:40:07.727]             seq.int <- base::seq.int
[17:40:07.727]             signalCondition <- base::signalCondition
[17:40:07.727]             sys.calls <- base::sys.calls
[17:40:07.727]             `[[` <- base::`[[`
[17:40:07.727]             `+` <- base::`+`
[17:40:07.727]             `<<-` <- base::`<<-`
[17:40:07.727]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:07.727]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:07.727]                   3L)]
[17:40:07.727]             }
[17:40:07.727]             function(cond) {
[17:40:07.727]                 is_error <- inherits(cond, "error")
[17:40:07.727]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:07.727]                   NULL)
[17:40:07.727]                 if (is_error) {
[17:40:07.727]                   sessionInformation <- function() {
[17:40:07.727]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:07.727]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:07.727]                       search = base::search(), system = base::Sys.info())
[17:40:07.727]                   }
[17:40:07.727]                   ...future.conditions[[length(...future.conditions) + 
[17:40:07.727]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:07.727]                     cond$call), session = sessionInformation(), 
[17:40:07.727]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:07.727]                   signalCondition(cond)
[17:40:07.727]                 }
[17:40:07.727]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:07.727]                 "immediateCondition"))) {
[17:40:07.727]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:07.727]                   ...future.conditions[[length(...future.conditions) + 
[17:40:07.727]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:07.727]                   if (TRUE && !signal) {
[17:40:07.727]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:07.727]                     {
[17:40:07.727]                       inherits <- base::inherits
[17:40:07.727]                       invokeRestart <- base::invokeRestart
[17:40:07.727]                       is.null <- base::is.null
[17:40:07.727]                       muffled <- FALSE
[17:40:07.727]                       if (inherits(cond, "message")) {
[17:40:07.727]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:07.727]                         if (muffled) 
[17:40:07.727]                           invokeRestart("muffleMessage")
[17:40:07.727]                       }
[17:40:07.727]                       else if (inherits(cond, "warning")) {
[17:40:07.727]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:07.727]                         if (muffled) 
[17:40:07.727]                           invokeRestart("muffleWarning")
[17:40:07.727]                       }
[17:40:07.727]                       else if (inherits(cond, "condition")) {
[17:40:07.727]                         if (!is.null(pattern)) {
[17:40:07.727]                           computeRestarts <- base::computeRestarts
[17:40:07.727]                           grepl <- base::grepl
[17:40:07.727]                           restarts <- computeRestarts(cond)
[17:40:07.727]                           for (restart in restarts) {
[17:40:07.727]                             name <- restart$name
[17:40:07.727]                             if (is.null(name)) 
[17:40:07.727]                               next
[17:40:07.727]                             if (!grepl(pattern, name)) 
[17:40:07.727]                               next
[17:40:07.727]                             invokeRestart(restart)
[17:40:07.727]                             muffled <- TRUE
[17:40:07.727]                             break
[17:40:07.727]                           }
[17:40:07.727]                         }
[17:40:07.727]                       }
[17:40:07.727]                       invisible(muffled)
[17:40:07.727]                     }
[17:40:07.727]                     muffleCondition(cond, pattern = "^muffle")
[17:40:07.727]                   }
[17:40:07.727]                 }
[17:40:07.727]                 else {
[17:40:07.727]                   if (TRUE) {
[17:40:07.727]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:07.727]                     {
[17:40:07.727]                       inherits <- base::inherits
[17:40:07.727]                       invokeRestart <- base::invokeRestart
[17:40:07.727]                       is.null <- base::is.null
[17:40:07.727]                       muffled <- FALSE
[17:40:07.727]                       if (inherits(cond, "message")) {
[17:40:07.727]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:07.727]                         if (muffled) 
[17:40:07.727]                           invokeRestart("muffleMessage")
[17:40:07.727]                       }
[17:40:07.727]                       else if (inherits(cond, "warning")) {
[17:40:07.727]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:07.727]                         if (muffled) 
[17:40:07.727]                           invokeRestart("muffleWarning")
[17:40:07.727]                       }
[17:40:07.727]                       else if (inherits(cond, "condition")) {
[17:40:07.727]                         if (!is.null(pattern)) {
[17:40:07.727]                           computeRestarts <- base::computeRestarts
[17:40:07.727]                           grepl <- base::grepl
[17:40:07.727]                           restarts <- computeRestarts(cond)
[17:40:07.727]                           for (restart in restarts) {
[17:40:07.727]                             name <- restart$name
[17:40:07.727]                             if (is.null(name)) 
[17:40:07.727]                               next
[17:40:07.727]                             if (!grepl(pattern, name)) 
[17:40:07.727]                               next
[17:40:07.727]                             invokeRestart(restart)
[17:40:07.727]                             muffled <- TRUE
[17:40:07.727]                             break
[17:40:07.727]                           }
[17:40:07.727]                         }
[17:40:07.727]                       }
[17:40:07.727]                       invisible(muffled)
[17:40:07.727]                     }
[17:40:07.727]                     muffleCondition(cond, pattern = "^muffle")
[17:40:07.727]                   }
[17:40:07.727]                 }
[17:40:07.727]             }
[17:40:07.727]         }))
[17:40:07.727]     }, error = function(ex) {
[17:40:07.727]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:07.727]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:07.727]                 ...future.rng), started = ...future.startTime, 
[17:40:07.727]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:07.727]             version = "1.8"), class = "FutureResult")
[17:40:07.727]     }, finally = {
[17:40:07.727]         if (!identical(...future.workdir, getwd())) 
[17:40:07.727]             setwd(...future.workdir)
[17:40:07.727]         {
[17:40:07.727]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:07.727]                 ...future.oldOptions$nwarnings <- NULL
[17:40:07.727]             }
[17:40:07.727]             base::options(...future.oldOptions)
[17:40:07.727]             if (.Platform$OS.type == "windows") {
[17:40:07.727]                 old_names <- names(...future.oldEnvVars)
[17:40:07.727]                 envs <- base::Sys.getenv()
[17:40:07.727]                 names <- names(envs)
[17:40:07.727]                 common <- intersect(names, old_names)
[17:40:07.727]                 added <- setdiff(names, old_names)
[17:40:07.727]                 removed <- setdiff(old_names, names)
[17:40:07.727]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:07.727]                   envs[common]]
[17:40:07.727]                 NAMES <- toupper(changed)
[17:40:07.727]                 args <- list()
[17:40:07.727]                 for (kk in seq_along(NAMES)) {
[17:40:07.727]                   name <- changed[[kk]]
[17:40:07.727]                   NAME <- NAMES[[kk]]
[17:40:07.727]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:07.727]                     next
[17:40:07.727]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:07.727]                 }
[17:40:07.727]                 NAMES <- toupper(added)
[17:40:07.727]                 for (kk in seq_along(NAMES)) {
[17:40:07.727]                   name <- added[[kk]]
[17:40:07.727]                   NAME <- NAMES[[kk]]
[17:40:07.727]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:07.727]                     next
[17:40:07.727]                   args[[name]] <- ""
[17:40:07.727]                 }
[17:40:07.727]                 NAMES <- toupper(removed)
[17:40:07.727]                 for (kk in seq_along(NAMES)) {
[17:40:07.727]                   name <- removed[[kk]]
[17:40:07.727]                   NAME <- NAMES[[kk]]
[17:40:07.727]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:07.727]                     next
[17:40:07.727]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:07.727]                 }
[17:40:07.727]                 if (length(args) > 0) 
[17:40:07.727]                   base::do.call(base::Sys.setenv, args = args)
[17:40:07.727]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:07.727]             }
[17:40:07.727]             else {
[17:40:07.727]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:07.727]             }
[17:40:07.727]             {
[17:40:07.727]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:07.727]                   0L) {
[17:40:07.727]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:07.727]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:07.727]                   base::options(opts)
[17:40:07.727]                 }
[17:40:07.727]                 {
[17:40:07.727]                   {
[17:40:07.727]                     NULL
[17:40:07.727]                     RNGkind("Mersenne-Twister")
[17:40:07.727]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:40:07.727]                       inherits = FALSE)
[17:40:07.727]                   }
[17:40:07.727]                   options(future.plan = NULL)
[17:40:07.727]                   if (is.na(NA_character_)) 
[17:40:07.727]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:07.727]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:07.727]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:40:07.727]                     .init = FALSE)
[17:40:07.727]                 }
[17:40:07.727]             }
[17:40:07.727]         }
[17:40:07.727]     })
[17:40:07.727]     if (TRUE) {
[17:40:07.727]         base::sink(type = "output", split = FALSE)
[17:40:07.727]         if (TRUE) {
[17:40:07.727]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:07.727]         }
[17:40:07.727]         else {
[17:40:07.727]             ...future.result["stdout"] <- base::list(NULL)
[17:40:07.727]         }
[17:40:07.727]         base::close(...future.stdout)
[17:40:07.727]         ...future.stdout <- NULL
[17:40:07.727]     }
[17:40:07.727]     ...future.result$conditions <- ...future.conditions
[17:40:07.727]     ...future.result$finished <- base::Sys.time()
[17:40:07.727]     ...future.result
[17:40:07.727] }
[17:40:07.728] plan(): Setting new future strategy stack:
[17:40:07.728] List of future strategies:
[17:40:07.728] 1. sequential:
[17:40:07.728]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:40:07.728]    - tweaked: FALSE
[17:40:07.728]    - call: NULL
[17:40:07.729] plan(): nbrOfWorkers() = 1
[17:40:07.730] plan(): Setting new future strategy stack:
[17:40:07.730] List of future strategies:
[17:40:07.730] 1. multicore:
[17:40:07.730]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:40:07.730]    - tweaked: FALSE
[17:40:07.730]    - call: plan(multicore)
[17:40:07.733] plan(): nbrOfWorkers() = 1
[17:40:07.733] SequentialFuture started (and completed)
SequentialFuture:
Label: ‘<none>’
Expression:
{
    b <- 3
    c <- 2
    a * b * c
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 33d8ef81-66c6-1c88-ad16-a15781be79ec
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[1] 0
*** multicore(..., globals = FALSE) with globals and blocking
 - Creating multicore future #1 ...
[17:40:07.738] getGlobalsAndPackages() ...
[17:40:07.738] Not searching for globals
[17:40:07.738] - globals: [0] <none>
[17:40:07.738] getGlobalsAndPackages() ... DONE
[17:40:07.738] Packages needed by the future expression (n = 0): <none>
[17:40:07.739] Packages needed by future strategies (n = 0): <none>
[17:40:07.739] {
[17:40:07.739]     {
[17:40:07.739]         {
[17:40:07.739]             ...future.startTime <- base::Sys.time()
[17:40:07.739]             {
[17:40:07.739]                 {
[17:40:07.739]                   {
[17:40:07.739]                     base::local({
[17:40:07.739]                       has_future <- base::requireNamespace("future", 
[17:40:07.739]                         quietly = TRUE)
[17:40:07.739]                       if (has_future) {
[17:40:07.739]                         ns <- base::getNamespace("future")
[17:40:07.739]                         version <- ns[[".package"]][["version"]]
[17:40:07.739]                         if (is.null(version)) 
[17:40:07.739]                           version <- utils::packageVersion("future")
[17:40:07.739]                       }
[17:40:07.739]                       else {
[17:40:07.739]                         version <- NULL
[17:40:07.739]                       }
[17:40:07.739]                       if (!has_future || version < "1.8.0") {
[17:40:07.739]                         info <- base::c(r_version = base::gsub("R version ", 
[17:40:07.739]                           "", base::R.version$version.string), 
[17:40:07.739]                           platform = base::sprintf("%s (%s-bit)", 
[17:40:07.739]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:07.739]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:07.739]                             "release", "version")], collapse = " "), 
[17:40:07.739]                           hostname = base::Sys.info()[["nodename"]])
[17:40:07.739]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:40:07.739]                           info)
[17:40:07.739]                         info <- base::paste(info, collapse = "; ")
[17:40:07.739]                         if (!has_future) {
[17:40:07.739]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:07.739]                             info)
[17:40:07.739]                         }
[17:40:07.739]                         else {
[17:40:07.739]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:07.739]                             info, version)
[17:40:07.739]                         }
[17:40:07.739]                         base::stop(msg)
[17:40:07.739]                       }
[17:40:07.739]                     })
[17:40:07.739]                   }
[17:40:07.739]                   ...future.strategy.old <- future::plan("list")
[17:40:07.739]                   options(future.plan = NULL)
[17:40:07.739]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:07.739]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:07.739]                 }
[17:40:07.739]                 ...future.workdir <- getwd()
[17:40:07.739]             }
[17:40:07.739]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:07.739]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:07.739]         }
[17:40:07.739]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:07.739]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:40:07.739]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:07.739]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:07.739]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:07.739]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:07.739]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:07.739]             base::names(...future.oldOptions))
[17:40:07.739]     }
[17:40:07.739]     if (FALSE) {
[17:40:07.739]     }
[17:40:07.739]     else {
[17:40:07.739]         if (TRUE) {
[17:40:07.739]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:07.739]                 open = "w")
[17:40:07.739]         }
[17:40:07.739]         else {
[17:40:07.739]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:07.739]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:07.739]         }
[17:40:07.739]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:07.739]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:07.739]             base::sink(type = "output", split = FALSE)
[17:40:07.739]             base::close(...future.stdout)
[17:40:07.739]         }, add = TRUE)
[17:40:07.739]     }
[17:40:07.739]     ...future.frame <- base::sys.nframe()
[17:40:07.739]     ...future.conditions <- base::list()
[17:40:07.739]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:07.739]     if (FALSE) {
[17:40:07.739]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:07.739]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:07.739]     }
[17:40:07.739]     ...future.result <- base::tryCatch({
[17:40:07.739]         base::withCallingHandlers({
[17:40:07.739]             ...future.value <- base::withVisible(base::local({
[17:40:07.739]                 ii
[17:40:07.739]             }))
[17:40:07.739]             future::FutureResult(value = ...future.value$value, 
[17:40:07.739]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:07.739]                   ...future.rng), globalenv = if (FALSE) 
[17:40:07.739]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:07.739]                     ...future.globalenv.names))
[17:40:07.739]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:07.739]         }, condition = base::local({
[17:40:07.739]             c <- base::c
[17:40:07.739]             inherits <- base::inherits
[17:40:07.739]             invokeRestart <- base::invokeRestart
[17:40:07.739]             length <- base::length
[17:40:07.739]             list <- base::list
[17:40:07.739]             seq.int <- base::seq.int
[17:40:07.739]             signalCondition <- base::signalCondition
[17:40:07.739]             sys.calls <- base::sys.calls
[17:40:07.739]             `[[` <- base::`[[`
[17:40:07.739]             `+` <- base::`+`
[17:40:07.739]             `<<-` <- base::`<<-`
[17:40:07.739]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:07.739]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:07.739]                   3L)]
[17:40:07.739]             }
[17:40:07.739]             function(cond) {
[17:40:07.739]                 is_error <- inherits(cond, "error")
[17:40:07.739]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:07.739]                   NULL)
[17:40:07.739]                 if (is_error) {
[17:40:07.739]                   sessionInformation <- function() {
[17:40:07.739]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:07.739]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:07.739]                       search = base::search(), system = base::Sys.info())
[17:40:07.739]                   }
[17:40:07.739]                   ...future.conditions[[length(...future.conditions) + 
[17:40:07.739]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:07.739]                     cond$call), session = sessionInformation(), 
[17:40:07.739]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:07.739]                   signalCondition(cond)
[17:40:07.739]                 }
[17:40:07.739]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:07.739]                 "immediateCondition"))) {
[17:40:07.739]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:07.739]                   ...future.conditions[[length(...future.conditions) + 
[17:40:07.739]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:07.739]                   if (TRUE && !signal) {
[17:40:07.739]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:07.739]                     {
[17:40:07.739]                       inherits <- base::inherits
[17:40:07.739]                       invokeRestart <- base::invokeRestart
[17:40:07.739]                       is.null <- base::is.null
[17:40:07.739]                       muffled <- FALSE
[17:40:07.739]                       if (inherits(cond, "message")) {
[17:40:07.739]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:07.739]                         if (muffled) 
[17:40:07.739]                           invokeRestart("muffleMessage")
[17:40:07.739]                       }
[17:40:07.739]                       else if (inherits(cond, "warning")) {
[17:40:07.739]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:07.739]                         if (muffled) 
[17:40:07.739]                           invokeRestart("muffleWarning")
[17:40:07.739]                       }
[17:40:07.739]                       else if (inherits(cond, "condition")) {
[17:40:07.739]                         if (!is.null(pattern)) {
[17:40:07.739]                           computeRestarts <- base::computeRestarts
[17:40:07.739]                           grepl <- base::grepl
[17:40:07.739]                           restarts <- computeRestarts(cond)
[17:40:07.739]                           for (restart in restarts) {
[17:40:07.739]                             name <- restart$name
[17:40:07.739]                             if (is.null(name)) 
[17:40:07.739]                               next
[17:40:07.739]                             if (!grepl(pattern, name)) 
[17:40:07.739]                               next
[17:40:07.739]                             invokeRestart(restart)
[17:40:07.739]                             muffled <- TRUE
[17:40:07.739]                             break
[17:40:07.739]                           }
[17:40:07.739]                         }
[17:40:07.739]                       }
[17:40:07.739]                       invisible(muffled)
[17:40:07.739]                     }
[17:40:07.739]                     muffleCondition(cond, pattern = "^muffle")
[17:40:07.739]                   }
[17:40:07.739]                 }
[17:40:07.739]                 else {
[17:40:07.739]                   if (TRUE) {
[17:40:07.739]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:07.739]                     {
[17:40:07.739]                       inherits <- base::inherits
[17:40:07.739]                       invokeRestart <- base::invokeRestart
[17:40:07.739]                       is.null <- base::is.null
[17:40:07.739]                       muffled <- FALSE
[17:40:07.739]                       if (inherits(cond, "message")) {
[17:40:07.739]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:07.739]                         if (muffled) 
[17:40:07.739]                           invokeRestart("muffleMessage")
[17:40:07.739]                       }
[17:40:07.739]                       else if (inherits(cond, "warning")) {
[17:40:07.739]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:07.739]                         if (muffled) 
[17:40:07.739]                           invokeRestart("muffleWarning")
[17:40:07.739]                       }
[17:40:07.739]                       else if (inherits(cond, "condition")) {
[17:40:07.739]                         if (!is.null(pattern)) {
[17:40:07.739]                           computeRestarts <- base::computeRestarts
[17:40:07.739]                           grepl <- base::grepl
[17:40:07.739]                           restarts <- computeRestarts(cond)
[17:40:07.739]                           for (restart in restarts) {
[17:40:07.739]                             name <- restart$name
[17:40:07.739]                             if (is.null(name)) 
[17:40:07.739]                               next
[17:40:07.739]                             if (!grepl(pattern, name)) 
[17:40:07.739]                               next
[17:40:07.739]                             invokeRestart(restart)
[17:40:07.739]                             muffled <- TRUE
[17:40:07.739]                             break
[17:40:07.739]                           }
[17:40:07.739]                         }
[17:40:07.739]                       }
[17:40:07.739]                       invisible(muffled)
[17:40:07.739]                     }
[17:40:07.739]                     muffleCondition(cond, pattern = "^muffle")
[17:40:07.739]                   }
[17:40:07.739]                 }
[17:40:07.739]             }
[17:40:07.739]         }))
[17:40:07.739]     }, error = function(ex) {
[17:40:07.739]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:07.739]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:07.739]                 ...future.rng), started = ...future.startTime, 
[17:40:07.739]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:07.739]             version = "1.8"), class = "FutureResult")
[17:40:07.739]     }, finally = {
[17:40:07.739]         if (!identical(...future.workdir, getwd())) 
[17:40:07.739]             setwd(...future.workdir)
[17:40:07.739]         {
[17:40:07.739]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:07.739]                 ...future.oldOptions$nwarnings <- NULL
[17:40:07.739]             }
[17:40:07.739]             base::options(...future.oldOptions)
[17:40:07.739]             if (.Platform$OS.type == "windows") {
[17:40:07.739]                 old_names <- names(...future.oldEnvVars)
[17:40:07.739]                 envs <- base::Sys.getenv()
[17:40:07.739]                 names <- names(envs)
[17:40:07.739]                 common <- intersect(names, old_names)
[17:40:07.739]                 added <- setdiff(names, old_names)
[17:40:07.739]                 removed <- setdiff(old_names, names)
[17:40:07.739]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:07.739]                   envs[common]]
[17:40:07.739]                 NAMES <- toupper(changed)
[17:40:07.739]                 args <- list()
[17:40:07.739]                 for (kk in seq_along(NAMES)) {
[17:40:07.739]                   name <- changed[[kk]]
[17:40:07.739]                   NAME <- NAMES[[kk]]
[17:40:07.739]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:07.739]                     next
[17:40:07.739]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:07.739]                 }
[17:40:07.739]                 NAMES <- toupper(added)
[17:40:07.739]                 for (kk in seq_along(NAMES)) {
[17:40:07.739]                   name <- added[[kk]]
[17:40:07.739]                   NAME <- NAMES[[kk]]
[17:40:07.739]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:07.739]                     next
[17:40:07.739]                   args[[name]] <- ""
[17:40:07.739]                 }
[17:40:07.739]                 NAMES <- toupper(removed)
[17:40:07.739]                 for (kk in seq_along(NAMES)) {
[17:40:07.739]                   name <- removed[[kk]]
[17:40:07.739]                   NAME <- NAMES[[kk]]
[17:40:07.739]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:07.739]                     next
[17:40:07.739]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:07.739]                 }
[17:40:07.739]                 if (length(args) > 0) 
[17:40:07.739]                   base::do.call(base::Sys.setenv, args = args)
[17:40:07.739]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:07.739]             }
[17:40:07.739]             else {
[17:40:07.739]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:07.739]             }
[17:40:07.739]             {
[17:40:07.739]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:07.739]                   0L) {
[17:40:07.739]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:07.739]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:07.739]                   base::options(opts)
[17:40:07.739]                 }
[17:40:07.739]                 {
[17:40:07.739]                   {
[17:40:07.739]                     NULL
[17:40:07.739]                     RNGkind("Mersenne-Twister")
[17:40:07.739]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:40:07.739]                       inherits = FALSE)
[17:40:07.739]                   }
[17:40:07.739]                   options(future.plan = NULL)
[17:40:07.739]                   if (is.na(NA_character_)) 
[17:40:07.739]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:07.739]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:07.739]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:40:07.739]                     .init = FALSE)
[17:40:07.739]                 }
[17:40:07.739]             }
[17:40:07.739]         }
[17:40:07.739]     })
[17:40:07.739]     if (TRUE) {
[17:40:07.739]         base::sink(type = "output", split = FALSE)
[17:40:07.739]         if (TRUE) {
[17:40:07.739]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:07.739]         }
[17:40:07.739]         else {
[17:40:07.739]             ...future.result["stdout"] <- base::list(NULL)
[17:40:07.739]         }
[17:40:07.739]         base::close(...future.stdout)
[17:40:07.739]         ...future.stdout <- NULL
[17:40:07.739]     }
[17:40:07.739]     ...future.result$conditions <- ...future.conditions
[17:40:07.739]     ...future.result$finished <- base::Sys.time()
[17:40:07.739]     ...future.result
[17:40:07.739] }
[17:40:07.741] plan(): Setting new future strategy stack:
[17:40:07.741] List of future strategies:
[17:40:07.741] 1. sequential:
[17:40:07.741]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:40:07.741]    - tweaked: FALSE
[17:40:07.741]    - call: NULL
[17:40:07.741] plan(): nbrOfWorkers() = 1
[17:40:07.742] plan(): Setting new future strategy stack:
[17:40:07.742] List of future strategies:
[17:40:07.742] 1. multicore:
[17:40:07.742]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:40:07.742]    - tweaked: FALSE
[17:40:07.742]    - call: plan(multicore)
[17:40:07.745] plan(): nbrOfWorkers() = 1
[17:40:07.746] SequentialFuture started (and completed)
 - Creating multicore future #2 ...
[17:40:07.749] getGlobalsAndPackages() ...
[17:40:07.749] Not searching for globals
[17:40:07.749] - globals: [0] <none>
[17:40:07.749] getGlobalsAndPackages() ... DONE
[17:40:07.750] Packages needed by the future expression (n = 0): <none>
[17:40:07.750] Packages needed by future strategies (n = 0): <none>
[17:40:07.750] {
[17:40:07.750]     {
[17:40:07.750]         {
[17:40:07.750]             ...future.startTime <- base::Sys.time()
[17:40:07.750]             {
[17:40:07.750]                 {
[17:40:07.750]                   {
[17:40:07.750]                     base::local({
[17:40:07.750]                       has_future <- base::requireNamespace("future", 
[17:40:07.750]                         quietly = TRUE)
[17:40:07.750]                       if (has_future) {
[17:40:07.750]                         ns <- base::getNamespace("future")
[17:40:07.750]                         version <- ns[[".package"]][["version"]]
[17:40:07.750]                         if (is.null(version)) 
[17:40:07.750]                           version <- utils::packageVersion("future")
[17:40:07.750]                       }
[17:40:07.750]                       else {
[17:40:07.750]                         version <- NULL
[17:40:07.750]                       }
[17:40:07.750]                       if (!has_future || version < "1.8.0") {
[17:40:07.750]                         info <- base::c(r_version = base::gsub("R version ", 
[17:40:07.750]                           "", base::R.version$version.string), 
[17:40:07.750]                           platform = base::sprintf("%s (%s-bit)", 
[17:40:07.750]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:07.750]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:07.750]                             "release", "version")], collapse = " "), 
[17:40:07.750]                           hostname = base::Sys.info()[["nodename"]])
[17:40:07.750]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:40:07.750]                           info)
[17:40:07.750]                         info <- base::paste(info, collapse = "; ")
[17:40:07.750]                         if (!has_future) {
[17:40:07.750]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:07.750]                             info)
[17:40:07.750]                         }
[17:40:07.750]                         else {
[17:40:07.750]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:07.750]                             info, version)
[17:40:07.750]                         }
[17:40:07.750]                         base::stop(msg)
[17:40:07.750]                       }
[17:40:07.750]                     })
[17:40:07.750]                   }
[17:40:07.750]                   ...future.strategy.old <- future::plan("list")
[17:40:07.750]                   options(future.plan = NULL)
[17:40:07.750]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:07.750]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:07.750]                 }
[17:40:07.750]                 ...future.workdir <- getwd()
[17:40:07.750]             }
[17:40:07.750]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:07.750]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:07.750]         }
[17:40:07.750]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:07.750]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:40:07.750]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:07.750]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:07.750]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:07.750]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:07.750]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:07.750]             base::names(...future.oldOptions))
[17:40:07.750]     }
[17:40:07.750]     if (FALSE) {
[17:40:07.750]     }
[17:40:07.750]     else {
[17:40:07.750]         if (TRUE) {
[17:40:07.750]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:07.750]                 open = "w")
[17:40:07.750]         }
[17:40:07.750]         else {
[17:40:07.750]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:07.750]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:07.750]         }
[17:40:07.750]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:07.750]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:07.750]             base::sink(type = "output", split = FALSE)
[17:40:07.750]             base::close(...future.stdout)
[17:40:07.750]         }, add = TRUE)
[17:40:07.750]     }
[17:40:07.750]     ...future.frame <- base::sys.nframe()
[17:40:07.750]     ...future.conditions <- base::list()
[17:40:07.750]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:07.750]     if (FALSE) {
[17:40:07.750]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:07.750]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:07.750]     }
[17:40:07.750]     ...future.result <- base::tryCatch({
[17:40:07.750]         base::withCallingHandlers({
[17:40:07.750]             ...future.value <- base::withVisible(base::local({
[17:40:07.750]                 ii
[17:40:07.750]             }))
[17:40:07.750]             future::FutureResult(value = ...future.value$value, 
[17:40:07.750]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:07.750]                   ...future.rng), globalenv = if (FALSE) 
[17:40:07.750]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:07.750]                     ...future.globalenv.names))
[17:40:07.750]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:07.750]         }, condition = base::local({
[17:40:07.750]             c <- base::c
[17:40:07.750]             inherits <- base::inherits
[17:40:07.750]             invokeRestart <- base::invokeRestart
[17:40:07.750]             length <- base::length
[17:40:07.750]             list <- base::list
[17:40:07.750]             seq.int <- base::seq.int
[17:40:07.750]             signalCondition <- base::signalCondition
[17:40:07.750]             sys.calls <- base::sys.calls
[17:40:07.750]             `[[` <- base::`[[`
[17:40:07.750]             `+` <- base::`+`
[17:40:07.750]             `<<-` <- base::`<<-`
[17:40:07.750]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:07.750]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:07.750]                   3L)]
[17:40:07.750]             }
[17:40:07.750]             function(cond) {
[17:40:07.750]                 is_error <- inherits(cond, "error")
[17:40:07.750]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:07.750]                   NULL)
[17:40:07.750]                 if (is_error) {
[17:40:07.750]                   sessionInformation <- function() {
[17:40:07.750]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:07.750]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:07.750]                       search = base::search(), system = base::Sys.info())
[17:40:07.750]                   }
[17:40:07.750]                   ...future.conditions[[length(...future.conditions) + 
[17:40:07.750]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:07.750]                     cond$call), session = sessionInformation(), 
[17:40:07.750]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:07.750]                   signalCondition(cond)
[17:40:07.750]                 }
[17:40:07.750]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:07.750]                 "immediateCondition"))) {
[17:40:07.750]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:07.750]                   ...future.conditions[[length(...future.conditions) + 
[17:40:07.750]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:07.750]                   if (TRUE && !signal) {
[17:40:07.750]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:07.750]                     {
[17:40:07.750]                       inherits <- base::inherits
[17:40:07.750]                       invokeRestart <- base::invokeRestart
[17:40:07.750]                       is.null <- base::is.null
[17:40:07.750]                       muffled <- FALSE
[17:40:07.750]                       if (inherits(cond, "message")) {
[17:40:07.750]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:07.750]                         if (muffled) 
[17:40:07.750]                           invokeRestart("muffleMessage")
[17:40:07.750]                       }
[17:40:07.750]                       else if (inherits(cond, "warning")) {
[17:40:07.750]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:07.750]                         if (muffled) 
[17:40:07.750]                           invokeRestart("muffleWarning")
[17:40:07.750]                       }
[17:40:07.750]                       else if (inherits(cond, "condition")) {
[17:40:07.750]                         if (!is.null(pattern)) {
[17:40:07.750]                           computeRestarts <- base::computeRestarts
[17:40:07.750]                           grepl <- base::grepl
[17:40:07.750]                           restarts <- computeRestarts(cond)
[17:40:07.750]                           for (restart in restarts) {
[17:40:07.750]                             name <- restart$name
[17:40:07.750]                             if (is.null(name)) 
[17:40:07.750]                               next
[17:40:07.750]                             if (!grepl(pattern, name)) 
[17:40:07.750]                               next
[17:40:07.750]                             invokeRestart(restart)
[17:40:07.750]                             muffled <- TRUE
[17:40:07.750]                             break
[17:40:07.750]                           }
[17:40:07.750]                         }
[17:40:07.750]                       }
[17:40:07.750]                       invisible(muffled)
[17:40:07.750]                     }
[17:40:07.750]                     muffleCondition(cond, pattern = "^muffle")
[17:40:07.750]                   }
[17:40:07.750]                 }
[17:40:07.750]                 else {
[17:40:07.750]                   if (TRUE) {
[17:40:07.750]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:07.750]                     {
[17:40:07.750]                       inherits <- base::inherits
[17:40:07.750]                       invokeRestart <- base::invokeRestart
[17:40:07.750]                       is.null <- base::is.null
[17:40:07.750]                       muffled <- FALSE
[17:40:07.750]                       if (inherits(cond, "message")) {
[17:40:07.750]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:07.750]                         if (muffled) 
[17:40:07.750]                           invokeRestart("muffleMessage")
[17:40:07.750]                       }
[17:40:07.750]                       else if (inherits(cond, "warning")) {
[17:40:07.750]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:07.750]                         if (muffled) 
[17:40:07.750]                           invokeRestart("muffleWarning")
[17:40:07.750]                       }
[17:40:07.750]                       else if (inherits(cond, "condition")) {
[17:40:07.750]                         if (!is.null(pattern)) {
[17:40:07.750]                           computeRestarts <- base::computeRestarts
[17:40:07.750]                           grepl <- base::grepl
[17:40:07.750]                           restarts <- computeRestarts(cond)
[17:40:07.750]                           for (restart in restarts) {
[17:40:07.750]                             name <- restart$name
[17:40:07.750]                             if (is.null(name)) 
[17:40:07.750]                               next
[17:40:07.750]                             if (!grepl(pattern, name)) 
[17:40:07.750]                               next
[17:40:07.750]                             invokeRestart(restart)
[17:40:07.750]                             muffled <- TRUE
[17:40:07.750]                             break
[17:40:07.750]                           }
[17:40:07.750]                         }
[17:40:07.750]                       }
[17:40:07.750]                       invisible(muffled)
[17:40:07.750]                     }
[17:40:07.750]                     muffleCondition(cond, pattern = "^muffle")
[17:40:07.750]                   }
[17:40:07.750]                 }
[17:40:07.750]             }
[17:40:07.750]         }))
[17:40:07.750]     }, error = function(ex) {
[17:40:07.750]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:07.750]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:07.750]                 ...future.rng), started = ...future.startTime, 
[17:40:07.750]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:07.750]             version = "1.8"), class = "FutureResult")
[17:40:07.750]     }, finally = {
[17:40:07.750]         if (!identical(...future.workdir, getwd())) 
[17:40:07.750]             setwd(...future.workdir)
[17:40:07.750]         {
[17:40:07.750]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:07.750]                 ...future.oldOptions$nwarnings <- NULL
[17:40:07.750]             }
[17:40:07.750]             base::options(...future.oldOptions)
[17:40:07.750]             if (.Platform$OS.type == "windows") {
[17:40:07.750]                 old_names <- names(...future.oldEnvVars)
[17:40:07.750]                 envs <- base::Sys.getenv()
[17:40:07.750]                 names <- names(envs)
[17:40:07.750]                 common <- intersect(names, old_names)
[17:40:07.750]                 added <- setdiff(names, old_names)
[17:40:07.750]                 removed <- setdiff(old_names, names)
[17:40:07.750]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:07.750]                   envs[common]]
[17:40:07.750]                 NAMES <- toupper(changed)
[17:40:07.750]                 args <- list()
[17:40:07.750]                 for (kk in seq_along(NAMES)) {
[17:40:07.750]                   name <- changed[[kk]]
[17:40:07.750]                   NAME <- NAMES[[kk]]
[17:40:07.750]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:07.750]                     next
[17:40:07.750]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:07.750]                 }
[17:40:07.750]                 NAMES <- toupper(added)
[17:40:07.750]                 for (kk in seq_along(NAMES)) {
[17:40:07.750]                   name <- added[[kk]]
[17:40:07.750]                   NAME <- NAMES[[kk]]
[17:40:07.750]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:07.750]                     next
[17:40:07.750]                   args[[name]] <- ""
[17:40:07.750]                 }
[17:40:07.750]                 NAMES <- toupper(removed)
[17:40:07.750]                 for (kk in seq_along(NAMES)) {
[17:40:07.750]                   name <- removed[[kk]]
[17:40:07.750]                   NAME <- NAMES[[kk]]
[17:40:07.750]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:07.750]                     next
[17:40:07.750]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:07.750]                 }
[17:40:07.750]                 if (length(args) > 0) 
[17:40:07.750]                   base::do.call(base::Sys.setenv, args = args)
[17:40:07.750]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:07.750]             }
[17:40:07.750]             else {
[17:40:07.750]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:07.750]             }
[17:40:07.750]             {
[17:40:07.750]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:07.750]                   0L) {
[17:40:07.750]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:07.750]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:07.750]                   base::options(opts)
[17:40:07.750]                 }
[17:40:07.750]                 {
[17:40:07.750]                   {
[17:40:07.750]                     NULL
[17:40:07.750]                     RNGkind("Mersenne-Twister")
[17:40:07.750]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:40:07.750]                       inherits = FALSE)
[17:40:07.750]                   }
[17:40:07.750]                   options(future.plan = NULL)
[17:40:07.750]                   if (is.na(NA_character_)) 
[17:40:07.750]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:07.750]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:07.750]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:40:07.750]                     .init = FALSE)
[17:40:07.750]                 }
[17:40:07.750]             }
[17:40:07.750]         }
[17:40:07.750]     })
[17:40:07.750]     if (TRUE) {
[17:40:07.750]         base::sink(type = "output", split = FALSE)
[17:40:07.750]         if (TRUE) {
[17:40:07.750]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:07.750]         }
[17:40:07.750]         else {
[17:40:07.750]             ...future.result["stdout"] <- base::list(NULL)
[17:40:07.750]         }
[17:40:07.750]         base::close(...future.stdout)
[17:40:07.750]         ...future.stdout <- NULL
[17:40:07.750]     }
[17:40:07.750]     ...future.result$conditions <- ...future.conditions
[17:40:07.750]     ...future.result$finished <- base::Sys.time()
[17:40:07.750]     ...future.result
[17:40:07.750] }
[17:40:07.752] plan(): Setting new future strategy stack:
[17:40:07.752] List of future strategies:
[17:40:07.752] 1. sequential:
[17:40:07.752]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:40:07.752]    - tweaked: FALSE
[17:40:07.752]    - call: NULL
[17:40:07.753] plan(): nbrOfWorkers() = 1
[17:40:07.753] plan(): Setting new future strategy stack:
[17:40:07.753] List of future strategies:
[17:40:07.753] 1. multicore:
[17:40:07.753]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:40:07.753]    - tweaked: FALSE
[17:40:07.753]    - call: plan(multicore)
[17:40:07.757] plan(): nbrOfWorkers() = 1
[17:40:07.757] SequentialFuture started (and completed)
 - Creating multicore future #3 ...
[17:40:07.762] getGlobalsAndPackages() ...
[17:40:07.762] Not searching for globals
[17:40:07.763] - globals: [0] <none>
[17:40:07.763] getGlobalsAndPackages() ... DONE
[17:40:07.763] Packages needed by the future expression (n = 0): <none>
[17:40:07.763] Packages needed by future strategies (n = 0): <none>
[17:40:07.763] {
[17:40:07.763]     {
[17:40:07.763]         {
[17:40:07.763]             ...future.startTime <- base::Sys.time()
[17:40:07.763]             {
[17:40:07.763]                 {
[17:40:07.763]                   {
[17:40:07.763]                     base::local({
[17:40:07.763]                       has_future <- base::requireNamespace("future", 
[17:40:07.763]                         quietly = TRUE)
[17:40:07.763]                       if (has_future) {
[17:40:07.763]                         ns <- base::getNamespace("future")
[17:40:07.763]                         version <- ns[[".package"]][["version"]]
[17:40:07.763]                         if (is.null(version)) 
[17:40:07.763]                           version <- utils::packageVersion("future")
[17:40:07.763]                       }
[17:40:07.763]                       else {
[17:40:07.763]                         version <- NULL
[17:40:07.763]                       }
[17:40:07.763]                       if (!has_future || version < "1.8.0") {
[17:40:07.763]                         info <- base::c(r_version = base::gsub("R version ", 
[17:40:07.763]                           "", base::R.version$version.string), 
[17:40:07.763]                           platform = base::sprintf("%s (%s-bit)", 
[17:40:07.763]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:07.763]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:07.763]                             "release", "version")], collapse = " "), 
[17:40:07.763]                           hostname = base::Sys.info()[["nodename"]])
[17:40:07.763]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:40:07.763]                           info)
[17:40:07.763]                         info <- base::paste(info, collapse = "; ")
[17:40:07.763]                         if (!has_future) {
[17:40:07.763]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:07.763]                             info)
[17:40:07.763]                         }
[17:40:07.763]                         else {
[17:40:07.763]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:07.763]                             info, version)
[17:40:07.763]                         }
[17:40:07.763]                         base::stop(msg)
[17:40:07.763]                       }
[17:40:07.763]                     })
[17:40:07.763]                   }
[17:40:07.763]                   ...future.strategy.old <- future::plan("list")
[17:40:07.763]                   options(future.plan = NULL)
[17:40:07.763]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:07.763]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:07.763]                 }
[17:40:07.763]                 ...future.workdir <- getwd()
[17:40:07.763]             }
[17:40:07.763]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:07.763]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:07.763]         }
[17:40:07.763]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:07.763]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:40:07.763]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:07.763]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:07.763]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:07.763]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:07.763]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:07.763]             base::names(...future.oldOptions))
[17:40:07.763]     }
[17:40:07.763]     if (FALSE) {
[17:40:07.763]     }
[17:40:07.763]     else {
[17:40:07.763]         if (TRUE) {
[17:40:07.763]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:07.763]                 open = "w")
[17:40:07.763]         }
[17:40:07.763]         else {
[17:40:07.763]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:07.763]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:07.763]         }
[17:40:07.763]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:07.763]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:07.763]             base::sink(type = "output", split = FALSE)
[17:40:07.763]             base::close(...future.stdout)
[17:40:07.763]         }, add = TRUE)
[17:40:07.763]     }
[17:40:07.763]     ...future.frame <- base::sys.nframe()
[17:40:07.763]     ...future.conditions <- base::list()
[17:40:07.763]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:07.763]     if (FALSE) {
[17:40:07.763]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:07.763]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:07.763]     }
[17:40:07.763]     ...future.result <- base::tryCatch({
[17:40:07.763]         base::withCallingHandlers({
[17:40:07.763]             ...future.value <- base::withVisible(base::local({
[17:40:07.763]                 ii
[17:40:07.763]             }))
[17:40:07.763]             future::FutureResult(value = ...future.value$value, 
[17:40:07.763]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:07.763]                   ...future.rng), globalenv = if (FALSE) 
[17:40:07.763]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:07.763]                     ...future.globalenv.names))
[17:40:07.763]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:07.763]         }, condition = base::local({
[17:40:07.763]             c <- base::c
[17:40:07.763]             inherits <- base::inherits
[17:40:07.763]             invokeRestart <- base::invokeRestart
[17:40:07.763]             length <- base::length
[17:40:07.763]             list <- base::list
[17:40:07.763]             seq.int <- base::seq.int
[17:40:07.763]             signalCondition <- base::signalCondition
[17:40:07.763]             sys.calls <- base::sys.calls
[17:40:07.763]             `[[` <- base::`[[`
[17:40:07.763]             `+` <- base::`+`
[17:40:07.763]             `<<-` <- base::`<<-`
[17:40:07.763]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:07.763]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:07.763]                   3L)]
[17:40:07.763]             }
[17:40:07.763]             function(cond) {
[17:40:07.763]                 is_error <- inherits(cond, "error")
[17:40:07.763]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:07.763]                   NULL)
[17:40:07.763]                 if (is_error) {
[17:40:07.763]                   sessionInformation <- function() {
[17:40:07.763]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:07.763]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:07.763]                       search = base::search(), system = base::Sys.info())
[17:40:07.763]                   }
[17:40:07.763]                   ...future.conditions[[length(...future.conditions) + 
[17:40:07.763]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:07.763]                     cond$call), session = sessionInformation(), 
[17:40:07.763]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:07.763]                   signalCondition(cond)
[17:40:07.763]                 }
[17:40:07.763]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:07.763]                 "immediateCondition"))) {
[17:40:07.763]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:07.763]                   ...future.conditions[[length(...future.conditions) + 
[17:40:07.763]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:07.763]                   if (TRUE && !signal) {
[17:40:07.763]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:07.763]                     {
[17:40:07.763]                       inherits <- base::inherits
[17:40:07.763]                       invokeRestart <- base::invokeRestart
[17:40:07.763]                       is.null <- base::is.null
[17:40:07.763]                       muffled <- FALSE
[17:40:07.763]                       if (inherits(cond, "message")) {
[17:40:07.763]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:07.763]                         if (muffled) 
[17:40:07.763]                           invokeRestart("muffleMessage")
[17:40:07.763]                       }
[17:40:07.763]                       else if (inherits(cond, "warning")) {
[17:40:07.763]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:07.763]                         if (muffled) 
[17:40:07.763]                           invokeRestart("muffleWarning")
[17:40:07.763]                       }
[17:40:07.763]                       else if (inherits(cond, "condition")) {
[17:40:07.763]                         if (!is.null(pattern)) {
[17:40:07.763]                           computeRestarts <- base::computeRestarts
[17:40:07.763]                           grepl <- base::grepl
[17:40:07.763]                           restarts <- computeRestarts(cond)
[17:40:07.763]                           for (restart in restarts) {
[17:40:07.763]                             name <- restart$name
[17:40:07.763]                             if (is.null(name)) 
[17:40:07.763]                               next
[17:40:07.763]                             if (!grepl(pattern, name)) 
[17:40:07.763]                               next
[17:40:07.763]                             invokeRestart(restart)
[17:40:07.763]                             muffled <- TRUE
[17:40:07.763]                             break
[17:40:07.763]                           }
[17:40:07.763]                         }
[17:40:07.763]                       }
[17:40:07.763]                       invisible(muffled)
[17:40:07.763]                     }
[17:40:07.763]                     muffleCondition(cond, pattern = "^muffle")
[17:40:07.763]                   }
[17:40:07.763]                 }
[17:40:07.763]                 else {
[17:40:07.763]                   if (TRUE) {
[17:40:07.763]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:07.763]                     {
[17:40:07.763]                       inherits <- base::inherits
[17:40:07.763]                       invokeRestart <- base::invokeRestart
[17:40:07.763]                       is.null <- base::is.null
[17:40:07.763]                       muffled <- FALSE
[17:40:07.763]                       if (inherits(cond, "message")) {
[17:40:07.763]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:07.763]                         if (muffled) 
[17:40:07.763]                           invokeRestart("muffleMessage")
[17:40:07.763]                       }
[17:40:07.763]                       else if (inherits(cond, "warning")) {
[17:40:07.763]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:07.763]                         if (muffled) 
[17:40:07.763]                           invokeRestart("muffleWarning")
[17:40:07.763]                       }
[17:40:07.763]                       else if (inherits(cond, "condition")) {
[17:40:07.763]                         if (!is.null(pattern)) {
[17:40:07.763]                           computeRestarts <- base::computeRestarts
[17:40:07.763]                           grepl <- base::grepl
[17:40:07.763]                           restarts <- computeRestarts(cond)
[17:40:07.763]                           for (restart in restarts) {
[17:40:07.763]                             name <- restart$name
[17:40:07.763]                             if (is.null(name)) 
[17:40:07.763]                               next
[17:40:07.763]                             if (!grepl(pattern, name)) 
[17:40:07.763]                               next
[17:40:07.763]                             invokeRestart(restart)
[17:40:07.763]                             muffled <- TRUE
[17:40:07.763]                             break
[17:40:07.763]                           }
[17:40:07.763]                         }
[17:40:07.763]                       }
[17:40:07.763]                       invisible(muffled)
[17:40:07.763]                     }
[17:40:07.763]                     muffleCondition(cond, pattern = "^muffle")
[17:40:07.763]                   }
[17:40:07.763]                 }
[17:40:07.763]             }
[17:40:07.763]         }))
[17:40:07.763]     }, error = function(ex) {
[17:40:07.763]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:07.763]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:07.763]                 ...future.rng), started = ...future.startTime, 
[17:40:07.763]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:07.763]             version = "1.8"), class = "FutureResult")
[17:40:07.763]     }, finally = {
[17:40:07.763]         if (!identical(...future.workdir, getwd())) 
[17:40:07.763]             setwd(...future.workdir)
[17:40:07.763]         {
[17:40:07.763]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:07.763]                 ...future.oldOptions$nwarnings <- NULL
[17:40:07.763]             }
[17:40:07.763]             base::options(...future.oldOptions)
[17:40:07.763]             if (.Platform$OS.type == "windows") {
[17:40:07.763]                 old_names <- names(...future.oldEnvVars)
[17:40:07.763]                 envs <- base::Sys.getenv()
[17:40:07.763]                 names <- names(envs)
[17:40:07.763]                 common <- intersect(names, old_names)
[17:40:07.763]                 added <- setdiff(names, old_names)
[17:40:07.763]                 removed <- setdiff(old_names, names)
[17:40:07.763]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:07.763]                   envs[common]]
[17:40:07.763]                 NAMES <- toupper(changed)
[17:40:07.763]                 args <- list()
[17:40:07.763]                 for (kk in seq_along(NAMES)) {
[17:40:07.763]                   name <- changed[[kk]]
[17:40:07.763]                   NAME <- NAMES[[kk]]
[17:40:07.763]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:07.763]                     next
[17:40:07.763]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:07.763]                 }
[17:40:07.763]                 NAMES <- toupper(added)
[17:40:07.763]                 for (kk in seq_along(NAMES)) {
[17:40:07.763]                   name <- added[[kk]]
[17:40:07.763]                   NAME <- NAMES[[kk]]
[17:40:07.763]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:07.763]                     next
[17:40:07.763]                   args[[name]] <- ""
[17:40:07.763]                 }
[17:40:07.763]                 NAMES <- toupper(removed)
[17:40:07.763]                 for (kk in seq_along(NAMES)) {
[17:40:07.763]                   name <- removed[[kk]]
[17:40:07.763]                   NAME <- NAMES[[kk]]
[17:40:07.763]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:07.763]                     next
[17:40:07.763]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:07.763]                 }
[17:40:07.763]                 if (length(args) > 0) 
[17:40:07.763]                   base::do.call(base::Sys.setenv, args = args)
[17:40:07.763]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:07.763]             }
[17:40:07.763]             else {
[17:40:07.763]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:07.763]             }
[17:40:07.763]             {
[17:40:07.763]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:07.763]                   0L) {
[17:40:07.763]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:07.763]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:07.763]                   base::options(opts)
[17:40:07.763]                 }
[17:40:07.763]                 {
[17:40:07.763]                   {
[17:40:07.763]                     NULL
[17:40:07.763]                     RNGkind("Mersenne-Twister")
[17:40:07.763]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:40:07.763]                       inherits = FALSE)
[17:40:07.763]                   }
[17:40:07.763]                   options(future.plan = NULL)
[17:40:07.763]                   if (is.na(NA_character_)) 
[17:40:07.763]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:07.763]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:07.763]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:40:07.763]                     .init = FALSE)
[17:40:07.763]                 }
[17:40:07.763]             }
[17:40:07.763]         }
[17:40:07.763]     })
[17:40:07.763]     if (TRUE) {
[17:40:07.763]         base::sink(type = "output", split = FALSE)
[17:40:07.763]         if (TRUE) {
[17:40:07.763]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:07.763]         }
[17:40:07.763]         else {
[17:40:07.763]             ...future.result["stdout"] <- base::list(NULL)
[17:40:07.763]         }
[17:40:07.763]         base::close(...future.stdout)
[17:40:07.763]         ...future.stdout <- NULL
[17:40:07.763]     }
[17:40:07.763]     ...future.result$conditions <- ...future.conditions
[17:40:07.763]     ...future.result$finished <- base::Sys.time()
[17:40:07.763]     ...future.result
[17:40:07.763] }
[17:40:07.765] plan(): Setting new future strategy stack:
[17:40:07.765] List of future strategies:
[17:40:07.765] 1. sequential:
[17:40:07.765]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:40:07.765]    - tweaked: FALSE
[17:40:07.765]    - call: NULL
[17:40:07.766] plan(): nbrOfWorkers() = 1
[17:40:07.766] plan(): Setting new future strategy stack:
[17:40:07.767] List of future strategies:
[17:40:07.767] 1. multicore:
[17:40:07.767]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:40:07.767]    - tweaked: FALSE
[17:40:07.767]    - call: plan(multicore)
[17:40:07.770] plan(): nbrOfWorkers() = 1
[17:40:07.770] SequentialFuture started (and completed)
 - Creating multicore future #4 ...
[17:40:07.773] getGlobalsAndPackages() ...
[17:40:07.774] Not searching for globals
[17:40:07.774] - globals: [0] <none>
[17:40:07.774] getGlobalsAndPackages() ... DONE
[17:40:07.774] Packages needed by the future expression (n = 0): <none>
[17:40:07.774] Packages needed by future strategies (n = 0): <none>
[17:40:07.774] {
[17:40:07.774]     {
[17:40:07.774]         {
[17:40:07.774]             ...future.startTime <- base::Sys.time()
[17:40:07.774]             {
[17:40:07.774]                 {
[17:40:07.774]                   {
[17:40:07.774]                     base::local({
[17:40:07.774]                       has_future <- base::requireNamespace("future", 
[17:40:07.774]                         quietly = TRUE)
[17:40:07.774]                       if (has_future) {
[17:40:07.774]                         ns <- base::getNamespace("future")
[17:40:07.774]                         version <- ns[[".package"]][["version"]]
[17:40:07.774]                         if (is.null(version)) 
[17:40:07.774]                           version <- utils::packageVersion("future")
[17:40:07.774]                       }
[17:40:07.774]                       else {
[17:40:07.774]                         version <- NULL
[17:40:07.774]                       }
[17:40:07.774]                       if (!has_future || version < "1.8.0") {
[17:40:07.774]                         info <- base::c(r_version = base::gsub("R version ", 
[17:40:07.774]                           "", base::R.version$version.string), 
[17:40:07.774]                           platform = base::sprintf("%s (%s-bit)", 
[17:40:07.774]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:07.774]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:07.774]                             "release", "version")], collapse = " "), 
[17:40:07.774]                           hostname = base::Sys.info()[["nodename"]])
[17:40:07.774]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:40:07.774]                           info)
[17:40:07.774]                         info <- base::paste(info, collapse = "; ")
[17:40:07.774]                         if (!has_future) {
[17:40:07.774]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:07.774]                             info)
[17:40:07.774]                         }
[17:40:07.774]                         else {
[17:40:07.774]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:07.774]                             info, version)
[17:40:07.774]                         }
[17:40:07.774]                         base::stop(msg)
[17:40:07.774]                       }
[17:40:07.774]                     })
[17:40:07.774]                   }
[17:40:07.774]                   ...future.strategy.old <- future::plan("list")
[17:40:07.774]                   options(future.plan = NULL)
[17:40:07.774]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:07.774]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:07.774]                 }
[17:40:07.774]                 ...future.workdir <- getwd()
[17:40:07.774]             }
[17:40:07.774]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:07.774]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:07.774]         }
[17:40:07.774]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:07.774]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:40:07.774]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:07.774]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:07.774]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:07.774]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:07.774]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:07.774]             base::names(...future.oldOptions))
[17:40:07.774]     }
[17:40:07.774]     if (FALSE) {
[17:40:07.774]     }
[17:40:07.774]     else {
[17:40:07.774]         if (TRUE) {
[17:40:07.774]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:07.774]                 open = "w")
[17:40:07.774]         }
[17:40:07.774]         else {
[17:40:07.774]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:07.774]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:07.774]         }
[17:40:07.774]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:07.774]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:07.774]             base::sink(type = "output", split = FALSE)
[17:40:07.774]             base::close(...future.stdout)
[17:40:07.774]         }, add = TRUE)
[17:40:07.774]     }
[17:40:07.774]     ...future.frame <- base::sys.nframe()
[17:40:07.774]     ...future.conditions <- base::list()
[17:40:07.774]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:07.774]     if (FALSE) {
[17:40:07.774]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:07.774]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:07.774]     }
[17:40:07.774]     ...future.result <- base::tryCatch({
[17:40:07.774]         base::withCallingHandlers({
[17:40:07.774]             ...future.value <- base::withVisible(base::local({
[17:40:07.774]                 ii
[17:40:07.774]             }))
[17:40:07.774]             future::FutureResult(value = ...future.value$value, 
[17:40:07.774]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:07.774]                   ...future.rng), globalenv = if (FALSE) 
[17:40:07.774]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:07.774]                     ...future.globalenv.names))
[17:40:07.774]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:07.774]         }, condition = base::local({
[17:40:07.774]             c <- base::c
[17:40:07.774]             inherits <- base::inherits
[17:40:07.774]             invokeRestart <- base::invokeRestart
[17:40:07.774]             length <- base::length
[17:40:07.774]             list <- base::list
[17:40:07.774]             seq.int <- base::seq.int
[17:40:07.774]             signalCondition <- base::signalCondition
[17:40:07.774]             sys.calls <- base::sys.calls
[17:40:07.774]             `[[` <- base::`[[`
[17:40:07.774]             `+` <- base::`+`
[17:40:07.774]             `<<-` <- base::`<<-`
[17:40:07.774]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:07.774]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:07.774]                   3L)]
[17:40:07.774]             }
[17:40:07.774]             function(cond) {
[17:40:07.774]                 is_error <- inherits(cond, "error")
[17:40:07.774]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:07.774]                   NULL)
[17:40:07.774]                 if (is_error) {
[17:40:07.774]                   sessionInformation <- function() {
[17:40:07.774]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:07.774]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:07.774]                       search = base::search(), system = base::Sys.info())
[17:40:07.774]                   }
[17:40:07.774]                   ...future.conditions[[length(...future.conditions) + 
[17:40:07.774]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:07.774]                     cond$call), session = sessionInformation(), 
[17:40:07.774]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:07.774]                   signalCondition(cond)
[17:40:07.774]                 }
[17:40:07.774]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:07.774]                 "immediateCondition"))) {
[17:40:07.774]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:07.774]                   ...future.conditions[[length(...future.conditions) + 
[17:40:07.774]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:07.774]                   if (TRUE && !signal) {
[17:40:07.774]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:07.774]                     {
[17:40:07.774]                       inherits <- base::inherits
[17:40:07.774]                       invokeRestart <- base::invokeRestart
[17:40:07.774]                       is.null <- base::is.null
[17:40:07.774]                       muffled <- FALSE
[17:40:07.774]                       if (inherits(cond, "message")) {
[17:40:07.774]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:07.774]                         if (muffled) 
[17:40:07.774]                           invokeRestart("muffleMessage")
[17:40:07.774]                       }
[17:40:07.774]                       else if (inherits(cond, "warning")) {
[17:40:07.774]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:07.774]                         if (muffled) 
[17:40:07.774]                           invokeRestart("muffleWarning")
[17:40:07.774]                       }
[17:40:07.774]                       else if (inherits(cond, "condition")) {
[17:40:07.774]                         if (!is.null(pattern)) {
[17:40:07.774]                           computeRestarts <- base::computeRestarts
[17:40:07.774]                           grepl <- base::grepl
[17:40:07.774]                           restarts <- computeRestarts(cond)
[17:40:07.774]                           for (restart in restarts) {
[17:40:07.774]                             name <- restart$name
[17:40:07.774]                             if (is.null(name)) 
[17:40:07.774]                               next
[17:40:07.774]                             if (!grepl(pattern, name)) 
[17:40:07.774]                               next
[17:40:07.774]                             invokeRestart(restart)
[17:40:07.774]                             muffled <- TRUE
[17:40:07.774]                             break
[17:40:07.774]                           }
[17:40:07.774]                         }
[17:40:07.774]                       }
[17:40:07.774]                       invisible(muffled)
[17:40:07.774]                     }
[17:40:07.774]                     muffleCondition(cond, pattern = "^muffle")
[17:40:07.774]                   }
[17:40:07.774]                 }
[17:40:07.774]                 else {
[17:40:07.774]                   if (TRUE) {
[17:40:07.774]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:07.774]                     {
[17:40:07.774]                       inherits <- base::inherits
[17:40:07.774]                       invokeRestart <- base::invokeRestart
[17:40:07.774]                       is.null <- base::is.null
[17:40:07.774]                       muffled <- FALSE
[17:40:07.774]                       if (inherits(cond, "message")) {
[17:40:07.774]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:07.774]                         if (muffled) 
[17:40:07.774]                           invokeRestart("muffleMessage")
[17:40:07.774]                       }
[17:40:07.774]                       else if (inherits(cond, "warning")) {
[17:40:07.774]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:07.774]                         if (muffled) 
[17:40:07.774]                           invokeRestart("muffleWarning")
[17:40:07.774]                       }
[17:40:07.774]                       else if (inherits(cond, "condition")) {
[17:40:07.774]                         if (!is.null(pattern)) {
[17:40:07.774]                           computeRestarts <- base::computeRestarts
[17:40:07.774]                           grepl <- base::grepl
[17:40:07.774]                           restarts <- computeRestarts(cond)
[17:40:07.774]                           for (restart in restarts) {
[17:40:07.774]                             name <- restart$name
[17:40:07.774]                             if (is.null(name)) 
[17:40:07.774]                               next
[17:40:07.774]                             if (!grepl(pattern, name)) 
[17:40:07.774]                               next
[17:40:07.774]                             invokeRestart(restart)
[17:40:07.774]                             muffled <- TRUE
[17:40:07.774]                             break
[17:40:07.774]                           }
[17:40:07.774]                         }
[17:40:07.774]                       }
[17:40:07.774]                       invisible(muffled)
[17:40:07.774]                     }
[17:40:07.774]                     muffleCondition(cond, pattern = "^muffle")
[17:40:07.774]                   }
[17:40:07.774]                 }
[17:40:07.774]             }
[17:40:07.774]         }))
[17:40:07.774]     }, error = function(ex) {
[17:40:07.774]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:07.774]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:07.774]                 ...future.rng), started = ...future.startTime, 
[17:40:07.774]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:07.774]             version = "1.8"), class = "FutureResult")
[17:40:07.774]     }, finally = {
[17:40:07.774]         if (!identical(...future.workdir, getwd())) 
[17:40:07.774]             setwd(...future.workdir)
[17:40:07.774]         {
[17:40:07.774]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:07.774]                 ...future.oldOptions$nwarnings <- NULL
[17:40:07.774]             }
[17:40:07.774]             base::options(...future.oldOptions)
[17:40:07.774]             if (.Platform$OS.type == "windows") {
[17:40:07.774]                 old_names <- names(...future.oldEnvVars)
[17:40:07.774]                 envs <- base::Sys.getenv()
[17:40:07.774]                 names <- names(envs)
[17:40:07.774]                 common <- intersect(names, old_names)
[17:40:07.774]                 added <- setdiff(names, old_names)
[17:40:07.774]                 removed <- setdiff(old_names, names)
[17:40:07.774]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:07.774]                   envs[common]]
[17:40:07.774]                 NAMES <- toupper(changed)
[17:40:07.774]                 args <- list()
[17:40:07.774]                 for (kk in seq_along(NAMES)) {
[17:40:07.774]                   name <- changed[[kk]]
[17:40:07.774]                   NAME <- NAMES[[kk]]
[17:40:07.774]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:07.774]                     next
[17:40:07.774]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:07.774]                 }
[17:40:07.774]                 NAMES <- toupper(added)
[17:40:07.774]                 for (kk in seq_along(NAMES)) {
[17:40:07.774]                   name <- added[[kk]]
[17:40:07.774]                   NAME <- NAMES[[kk]]
[17:40:07.774]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:07.774]                     next
[17:40:07.774]                   args[[name]] <- ""
[17:40:07.774]                 }
[17:40:07.774]                 NAMES <- toupper(removed)
[17:40:07.774]                 for (kk in seq_along(NAMES)) {
[17:40:07.774]                   name <- removed[[kk]]
[17:40:07.774]                   NAME <- NAMES[[kk]]
[17:40:07.774]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:07.774]                     next
[17:40:07.774]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:07.774]                 }
[17:40:07.774]                 if (length(args) > 0) 
[17:40:07.774]                   base::do.call(base::Sys.setenv, args = args)
[17:40:07.774]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:07.774]             }
[17:40:07.774]             else {
[17:40:07.774]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:07.774]             }
[17:40:07.774]             {
[17:40:07.774]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:07.774]                   0L) {
[17:40:07.774]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:07.774]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:07.774]                   base::options(opts)
[17:40:07.774]                 }
[17:40:07.774]                 {
[17:40:07.774]                   {
[17:40:07.774]                     NULL
[17:40:07.774]                     RNGkind("Mersenne-Twister")
[17:40:07.774]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:40:07.774]                       inherits = FALSE)
[17:40:07.774]                   }
[17:40:07.774]                   options(future.plan = NULL)
[17:40:07.774]                   if (is.na(NA_character_)) 
[17:40:07.774]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:07.774]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:07.774]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:40:07.774]                     .init = FALSE)
[17:40:07.774]                 }
[17:40:07.774]             }
[17:40:07.774]         }
[17:40:07.774]     })
[17:40:07.774]     if (TRUE) {
[17:40:07.774]         base::sink(type = "output", split = FALSE)
[17:40:07.774]         if (TRUE) {
[17:40:07.774]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:07.774]         }
[17:40:07.774]         else {
[17:40:07.774]             ...future.result["stdout"] <- base::list(NULL)
[17:40:07.774]         }
[17:40:07.774]         base::close(...future.stdout)
[17:40:07.774]         ...future.stdout <- NULL
[17:40:07.774]     }
[17:40:07.774]     ...future.result$conditions <- ...future.conditions
[17:40:07.774]     ...future.result$finished <- base::Sys.time()
[17:40:07.774]     ...future.result
[17:40:07.774] }
[17:40:07.776] plan(): Setting new future strategy stack:
[17:40:07.776] List of future strategies:
[17:40:07.776] 1. sequential:
[17:40:07.776]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:40:07.776]    - tweaked: FALSE
[17:40:07.776]    - call: NULL
[17:40:07.777] plan(): nbrOfWorkers() = 1
[17:40:07.777] plan(): Setting new future strategy stack:
[17:40:07.777] List of future strategies:
[17:40:07.777] 1. multicore:
[17:40:07.777]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:40:07.777]    - tweaked: FALSE
[17:40:07.777]    - call: plan(multicore)
[17:40:07.781] plan(): nbrOfWorkers() = 1
[17:40:07.781] SequentialFuture started (and completed)
 - Resolving 4 multicore futures
*** multicore(..., globals = FALSE) and errors
[17:40:07.785] getGlobalsAndPackages() ...
[17:40:07.785] Not searching for globals
[17:40:07.785] - globals: [0] <none>
[17:40:07.785] getGlobalsAndPackages() ... DONE
[17:40:07.785] Packages needed by the future expression (n = 0): <none>
[17:40:07.786] Packages needed by future strategies (n = 0): <none>
[17:40:07.786] {
[17:40:07.786]     {
[17:40:07.786]         {
[17:40:07.786]             ...future.startTime <- base::Sys.time()
[17:40:07.786]             {
[17:40:07.786]                 {
[17:40:07.786]                   {
[17:40:07.786]                     base::local({
[17:40:07.786]                       has_future <- base::requireNamespace("future", 
[17:40:07.786]                         quietly = TRUE)
[17:40:07.786]                       if (has_future) {
[17:40:07.786]                         ns <- base::getNamespace("future")
[17:40:07.786]                         version <- ns[[".package"]][["version"]]
[17:40:07.786]                         if (is.null(version)) 
[17:40:07.786]                           version <- utils::packageVersion("future")
[17:40:07.786]                       }
[17:40:07.786]                       else {
[17:40:07.786]                         version <- NULL
[17:40:07.786]                       }
[17:40:07.786]                       if (!has_future || version < "1.8.0") {
[17:40:07.786]                         info <- base::c(r_version = base::gsub("R version ", 
[17:40:07.786]                           "", base::R.version$version.string), 
[17:40:07.786]                           platform = base::sprintf("%s (%s-bit)", 
[17:40:07.786]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:07.786]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:07.786]                             "release", "version")], collapse = " "), 
[17:40:07.786]                           hostname = base::Sys.info()[["nodename"]])
[17:40:07.786]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:40:07.786]                           info)
[17:40:07.786]                         info <- base::paste(info, collapse = "; ")
[17:40:07.786]                         if (!has_future) {
[17:40:07.786]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:07.786]                             info)
[17:40:07.786]                         }
[17:40:07.786]                         else {
[17:40:07.786]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:07.786]                             info, version)
[17:40:07.786]                         }
[17:40:07.786]                         base::stop(msg)
[17:40:07.786]                       }
[17:40:07.786]                     })
[17:40:07.786]                   }
[17:40:07.786]                   ...future.strategy.old <- future::plan("list")
[17:40:07.786]                   options(future.plan = NULL)
[17:40:07.786]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:07.786]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:07.786]                 }
[17:40:07.786]                 ...future.workdir <- getwd()
[17:40:07.786]             }
[17:40:07.786]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:07.786]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:07.786]         }
[17:40:07.786]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:07.786]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:40:07.786]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:07.786]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:07.786]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:07.786]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:07.786]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:07.786]             base::names(...future.oldOptions))
[17:40:07.786]     }
[17:40:07.786]     if (FALSE) {
[17:40:07.786]     }
[17:40:07.786]     else {
[17:40:07.786]         if (TRUE) {
[17:40:07.786]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:07.786]                 open = "w")
[17:40:07.786]         }
[17:40:07.786]         else {
[17:40:07.786]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:07.786]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:07.786]         }
[17:40:07.786]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:07.786]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:07.786]             base::sink(type = "output", split = FALSE)
[17:40:07.786]             base::close(...future.stdout)
[17:40:07.786]         }, add = TRUE)
[17:40:07.786]     }
[17:40:07.786]     ...future.frame <- base::sys.nframe()
[17:40:07.786]     ...future.conditions <- base::list()
[17:40:07.786]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:07.786]     if (FALSE) {
[17:40:07.786]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:07.786]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:07.786]     }
[17:40:07.786]     ...future.result <- base::tryCatch({
[17:40:07.786]         base::withCallingHandlers({
[17:40:07.786]             ...future.value <- base::withVisible(base::local({
[17:40:07.786]                 stop("Whoops!")
[17:40:07.786]                 1
[17:40:07.786]             }))
[17:40:07.786]             future::FutureResult(value = ...future.value$value, 
[17:40:07.786]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:07.786]                   ...future.rng), globalenv = if (FALSE) 
[17:40:07.786]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:07.786]                     ...future.globalenv.names))
[17:40:07.786]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:07.786]         }, condition = base::local({
[17:40:07.786]             c <- base::c
[17:40:07.786]             inherits <- base::inherits
[17:40:07.786]             invokeRestart <- base::invokeRestart
[17:40:07.786]             length <- base::length
[17:40:07.786]             list <- base::list
[17:40:07.786]             seq.int <- base::seq.int
[17:40:07.786]             signalCondition <- base::signalCondition
[17:40:07.786]             sys.calls <- base::sys.calls
[17:40:07.786]             `[[` <- base::`[[`
[17:40:07.786]             `+` <- base::`+`
[17:40:07.786]             `<<-` <- base::`<<-`
[17:40:07.786]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:07.786]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:07.786]                   3L)]
[17:40:07.786]             }
[17:40:07.786]             function(cond) {
[17:40:07.786]                 is_error <- inherits(cond, "error")
[17:40:07.786]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:07.786]                   NULL)
[17:40:07.786]                 if (is_error) {
[17:40:07.786]                   sessionInformation <- function() {
[17:40:07.786]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:07.786]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:07.786]                       search = base::search(), system = base::Sys.info())
[17:40:07.786]                   }
[17:40:07.786]                   ...future.conditions[[length(...future.conditions) + 
[17:40:07.786]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:07.786]                     cond$call), session = sessionInformation(), 
[17:40:07.786]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:07.786]                   signalCondition(cond)
[17:40:07.786]                 }
[17:40:07.786]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:07.786]                 "immediateCondition"))) {
[17:40:07.786]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:07.786]                   ...future.conditions[[length(...future.conditions) + 
[17:40:07.786]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:07.786]                   if (TRUE && !signal) {
[17:40:07.786]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:07.786]                     {
[17:40:07.786]                       inherits <- base::inherits
[17:40:07.786]                       invokeRestart <- base::invokeRestart
[17:40:07.786]                       is.null <- base::is.null
[17:40:07.786]                       muffled <- FALSE
[17:40:07.786]                       if (inherits(cond, "message")) {
[17:40:07.786]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:07.786]                         if (muffled) 
[17:40:07.786]                           invokeRestart("muffleMessage")
[17:40:07.786]                       }
[17:40:07.786]                       else if (inherits(cond, "warning")) {
[17:40:07.786]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:07.786]                         if (muffled) 
[17:40:07.786]                           invokeRestart("muffleWarning")
[17:40:07.786]                       }
[17:40:07.786]                       else if (inherits(cond, "condition")) {
[17:40:07.786]                         if (!is.null(pattern)) {
[17:40:07.786]                           computeRestarts <- base::computeRestarts
[17:40:07.786]                           grepl <- base::grepl
[17:40:07.786]                           restarts <- computeRestarts(cond)
[17:40:07.786]                           for (restart in restarts) {
[17:40:07.786]                             name <- restart$name
[17:40:07.786]                             if (is.null(name)) 
[17:40:07.786]                               next
[17:40:07.786]                             if (!grepl(pattern, name)) 
[17:40:07.786]                               next
[17:40:07.786]                             invokeRestart(restart)
[17:40:07.786]                             muffled <- TRUE
[17:40:07.786]                             break
[17:40:07.786]                           }
[17:40:07.786]                         }
[17:40:07.786]                       }
[17:40:07.786]                       invisible(muffled)
[17:40:07.786]                     }
[17:40:07.786]                     muffleCondition(cond, pattern = "^muffle")
[17:40:07.786]                   }
[17:40:07.786]                 }
[17:40:07.786]                 else {
[17:40:07.786]                   if (TRUE) {
[17:40:07.786]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:07.786]                     {
[17:40:07.786]                       inherits <- base::inherits
[17:40:07.786]                       invokeRestart <- base::invokeRestart
[17:40:07.786]                       is.null <- base::is.null
[17:40:07.786]                       muffled <- FALSE
[17:40:07.786]                       if (inherits(cond, "message")) {
[17:40:07.786]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:07.786]                         if (muffled) 
[17:40:07.786]                           invokeRestart("muffleMessage")
[17:40:07.786]                       }
[17:40:07.786]                       else if (inherits(cond, "warning")) {
[17:40:07.786]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:07.786]                         if (muffled) 
[17:40:07.786]                           invokeRestart("muffleWarning")
[17:40:07.786]                       }
[17:40:07.786]                       else if (inherits(cond, "condition")) {
[17:40:07.786]                         if (!is.null(pattern)) {
[17:40:07.786]                           computeRestarts <- base::computeRestarts
[17:40:07.786]                           grepl <- base::grepl
[17:40:07.786]                           restarts <- computeRestarts(cond)
[17:40:07.786]                           for (restart in restarts) {
[17:40:07.786]                             name <- restart$name
[17:40:07.786]                             if (is.null(name)) 
[17:40:07.786]                               next
[17:40:07.786]                             if (!grepl(pattern, name)) 
[17:40:07.786]                               next
[17:40:07.786]                             invokeRestart(restart)
[17:40:07.786]                             muffled <- TRUE
[17:40:07.786]                             break
[17:40:07.786]                           }
[17:40:07.786]                         }
[17:40:07.786]                       }
[17:40:07.786]                       invisible(muffled)
[17:40:07.786]                     }
[17:40:07.786]                     muffleCondition(cond, pattern = "^muffle")
[17:40:07.786]                   }
[17:40:07.786]                 }
[17:40:07.786]             }
[17:40:07.786]         }))
[17:40:07.786]     }, error = function(ex) {
[17:40:07.786]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:07.786]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:07.786]                 ...future.rng), started = ...future.startTime, 
[17:40:07.786]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:07.786]             version = "1.8"), class = "FutureResult")
[17:40:07.786]     }, finally = {
[17:40:07.786]         if (!identical(...future.workdir, getwd())) 
[17:40:07.786]             setwd(...future.workdir)
[17:40:07.786]         {
[17:40:07.786]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:07.786]                 ...future.oldOptions$nwarnings <- NULL
[17:40:07.786]             }
[17:40:07.786]             base::options(...future.oldOptions)
[17:40:07.786]             if (.Platform$OS.type == "windows") {
[17:40:07.786]                 old_names <- names(...future.oldEnvVars)
[17:40:07.786]                 envs <- base::Sys.getenv()
[17:40:07.786]                 names <- names(envs)
[17:40:07.786]                 common <- intersect(names, old_names)
[17:40:07.786]                 added <- setdiff(names, old_names)
[17:40:07.786]                 removed <- setdiff(old_names, names)
[17:40:07.786]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:07.786]                   envs[common]]
[17:40:07.786]                 NAMES <- toupper(changed)
[17:40:07.786]                 args <- list()
[17:40:07.786]                 for (kk in seq_along(NAMES)) {
[17:40:07.786]                   name <- changed[[kk]]
[17:40:07.786]                   NAME <- NAMES[[kk]]
[17:40:07.786]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:07.786]                     next
[17:40:07.786]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:07.786]                 }
[17:40:07.786]                 NAMES <- toupper(added)
[17:40:07.786]                 for (kk in seq_along(NAMES)) {
[17:40:07.786]                   name <- added[[kk]]
[17:40:07.786]                   NAME <- NAMES[[kk]]
[17:40:07.786]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:07.786]                     next
[17:40:07.786]                   args[[name]] <- ""
[17:40:07.786]                 }
[17:40:07.786]                 NAMES <- toupper(removed)
[17:40:07.786]                 for (kk in seq_along(NAMES)) {
[17:40:07.786]                   name <- removed[[kk]]
[17:40:07.786]                   NAME <- NAMES[[kk]]
[17:40:07.786]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:07.786]                     next
[17:40:07.786]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:07.786]                 }
[17:40:07.786]                 if (length(args) > 0) 
[17:40:07.786]                   base::do.call(base::Sys.setenv, args = args)
[17:40:07.786]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:07.786]             }
[17:40:07.786]             else {
[17:40:07.786]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:07.786]             }
[17:40:07.786]             {
[17:40:07.786]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:07.786]                   0L) {
[17:40:07.786]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:07.786]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:07.786]                   base::options(opts)
[17:40:07.786]                 }
[17:40:07.786]                 {
[17:40:07.786]                   {
[17:40:07.786]                     NULL
[17:40:07.786]                     RNGkind("Mersenne-Twister")
[17:40:07.786]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:40:07.786]                       inherits = FALSE)
[17:40:07.786]                   }
[17:40:07.786]                   options(future.plan = NULL)
[17:40:07.786]                   if (is.na(NA_character_)) 
[17:40:07.786]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:07.786]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:07.786]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:40:07.786]                     .init = FALSE)
[17:40:07.786]                 }
[17:40:07.786]             }
[17:40:07.786]         }
[17:40:07.786]     })
[17:40:07.786]     if (TRUE) {
[17:40:07.786]         base::sink(type = "output", split = FALSE)
[17:40:07.786]         if (TRUE) {
[17:40:07.786]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:07.786]         }
[17:40:07.786]         else {
[17:40:07.786]             ...future.result["stdout"] <- base::list(NULL)
[17:40:07.786]         }
[17:40:07.786]         base::close(...future.stdout)
[17:40:07.786]         ...future.stdout <- NULL
[17:40:07.786]     }
[17:40:07.786]     ...future.result$conditions <- ...future.conditions
[17:40:07.786]     ...future.result$finished <- base::Sys.time()
[17:40:07.786]     ...future.result
[17:40:07.786] }
[17:40:07.788] plan(): Setting new future strategy stack:
[17:40:07.788] List of future strategies:
[17:40:07.788] 1. sequential:
[17:40:07.788]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:40:07.788]    - tweaked: FALSE
[17:40:07.788]    - call: NULL
[17:40:07.788] plan(): nbrOfWorkers() = 1
[17:40:07.789] plan(): Setting new future strategy stack:
[17:40:07.789] List of future strategies:
[17:40:07.789] 1. multicore:
[17:40:07.789]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:40:07.789]    - tweaked: FALSE
[17:40:07.789]    - call: plan(multicore)
[17:40:07.793] plan(): nbrOfWorkers() = 1
[17:40:07.793] SequentialFuture started (and completed)
[17:40:07.793] signalConditions() ...
[17:40:07.793]  - include = ‘immediateCondition’
[17:40:07.793]  - exclude = 
[17:40:07.793]  - resignal = FALSE
[17:40:07.793]  - Number of conditions: 1
[17:40:07.793] signalConditions() ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    stop("Whoops!")
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 0 bytes of class ‘NULL’
Conditions captured: [n=1] ‘simpleError’
Early signaling: FALSE
Owner process: 33d8ef81-66c6-1c88-ad16-a15781be79ec
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:40:07.794] signalConditions() ...
[17:40:07.794]  - include = ‘immediateCondition’
[17:40:07.794]  - exclude = 
[17:40:07.794]  - resignal = FALSE
[17:40:07.794]  - Number of conditions: 1
[17:40:07.794] signalConditions() ... done
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[17:40:07.795] signalConditions() ...
[17:40:07.795]  - include = ‘immediateCondition’
[17:40:07.795]  - exclude = 
[17:40:07.795]  - resignal = FALSE
[17:40:07.795]  - Number of conditions: 1
[17:40:07.795] signalConditions() ... done
[17:40:07.795] Future state: ‘finished’
[17:40:07.795] signalConditions() ...
[17:40:07.795]  - include = ‘condition’
[17:40:07.795]  - exclude = ‘immediateCondition’
[17:40:07.796]  - resignal = TRUE
[17:40:07.796]  - Number of conditions: 1
[17:40:07.796]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:40:07.796] signalConditions() ... done
[1] "Error in eval(quote({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[17:40:07.796] signalConditions() ...
[17:40:07.796]  - include = ‘immediateCondition’
[17:40:07.796]  - exclude = 
[17:40:07.797]  - resignal = FALSE
[17:40:07.797]  - Number of conditions: 1
[17:40:07.797] signalConditions() ... done
[17:40:07.797] Future state: ‘finished’
[17:40:07.797] signalConditions() ...
[17:40:07.797]  - include = ‘condition’
[17:40:07.797]  - exclude = ‘immediateCondition’
[17:40:07.797]  - resignal = TRUE
[17:40:07.797]  - Number of conditions: 1
[17:40:07.797]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:40:07.798] signalConditions() ... done
[1] "Error in eval(quote({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[17:40:07.801] getGlobalsAndPackages() ...
[17:40:07.801] Searching for globals...
[17:40:07.807] - globals found: [5] ‘{’, ‘stop’, ‘structure’, ‘list’, ‘c’
[17:40:07.807] Searching for globals ... DONE
[17:40:07.807] Resolving globals: FALSE
[17:40:07.808] 
[17:40:07.808] 
[17:40:07.808] getGlobalsAndPackages() ... DONE
[17:40:07.809] Packages needed by the future expression (n = 0): <none>
[17:40:07.809] Packages needed by future strategies (n = 0): <none>
[17:40:07.809] {
[17:40:07.809]     {
[17:40:07.809]         {
[17:40:07.809]             ...future.startTime <- base::Sys.time()
[17:40:07.809]             {
[17:40:07.809]                 {
[17:40:07.809]                   {
[17:40:07.809]                     base::local({
[17:40:07.809]                       has_future <- base::requireNamespace("future", 
[17:40:07.809]                         quietly = TRUE)
[17:40:07.809]                       if (has_future) {
[17:40:07.809]                         ns <- base::getNamespace("future")
[17:40:07.809]                         version <- ns[[".package"]][["version"]]
[17:40:07.809]                         if (is.null(version)) 
[17:40:07.809]                           version <- utils::packageVersion("future")
[17:40:07.809]                       }
[17:40:07.809]                       else {
[17:40:07.809]                         version <- NULL
[17:40:07.809]                       }
[17:40:07.809]                       if (!has_future || version < "1.8.0") {
[17:40:07.809]                         info <- base::c(r_version = base::gsub("R version ", 
[17:40:07.809]                           "", base::R.version$version.string), 
[17:40:07.809]                           platform = base::sprintf("%s (%s-bit)", 
[17:40:07.809]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:07.809]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:07.809]                             "release", "version")], collapse = " "), 
[17:40:07.809]                           hostname = base::Sys.info()[["nodename"]])
[17:40:07.809]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:40:07.809]                           info)
[17:40:07.809]                         info <- base::paste(info, collapse = "; ")
[17:40:07.809]                         if (!has_future) {
[17:40:07.809]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:07.809]                             info)
[17:40:07.809]                         }
[17:40:07.809]                         else {
[17:40:07.809]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:07.809]                             info, version)
[17:40:07.809]                         }
[17:40:07.809]                         base::stop(msg)
[17:40:07.809]                       }
[17:40:07.809]                     })
[17:40:07.809]                   }
[17:40:07.809]                   ...future.strategy.old <- future::plan("list")
[17:40:07.809]                   options(future.plan = NULL)
[17:40:07.809]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:07.809]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:07.809]                 }
[17:40:07.809]                 ...future.workdir <- getwd()
[17:40:07.809]             }
[17:40:07.809]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:07.809]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:07.809]         }
[17:40:07.809]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:07.809]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:40:07.809]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:07.809]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:07.809]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:07.809]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:07.809]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:07.809]             base::names(...future.oldOptions))
[17:40:07.809]     }
[17:40:07.809]     if (FALSE) {
[17:40:07.809]     }
[17:40:07.809]     else {
[17:40:07.809]         if (TRUE) {
[17:40:07.809]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:07.809]                 open = "w")
[17:40:07.809]         }
[17:40:07.809]         else {
[17:40:07.809]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:07.809]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:07.809]         }
[17:40:07.809]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:07.809]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:07.809]             base::sink(type = "output", split = FALSE)
[17:40:07.809]             base::close(...future.stdout)
[17:40:07.809]         }, add = TRUE)
[17:40:07.809]     }
[17:40:07.809]     ...future.frame <- base::sys.nframe()
[17:40:07.809]     ...future.conditions <- base::list()
[17:40:07.809]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:07.809]     if (FALSE) {
[17:40:07.809]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:07.809]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:07.809]     }
[17:40:07.809]     ...future.result <- base::tryCatch({
[17:40:07.809]         base::withCallingHandlers({
[17:40:07.809]             ...future.value <- base::withVisible(base::local({
[17:40:07.809]                 stop(structure(list(message = "boom"), class = c("MyError", 
[17:40:07.809]                   "error", "condition")))
[17:40:07.809]             }))
[17:40:07.809]             future::FutureResult(value = ...future.value$value, 
[17:40:07.809]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:07.809]                   ...future.rng), globalenv = if (FALSE) 
[17:40:07.809]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:07.809]                     ...future.globalenv.names))
[17:40:07.809]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:07.809]         }, condition = base::local({
[17:40:07.809]             c <- base::c
[17:40:07.809]             inherits <- base::inherits
[17:40:07.809]             invokeRestart <- base::invokeRestart
[17:40:07.809]             length <- base::length
[17:40:07.809]             list <- base::list
[17:40:07.809]             seq.int <- base::seq.int
[17:40:07.809]             signalCondition <- base::signalCondition
[17:40:07.809]             sys.calls <- base::sys.calls
[17:40:07.809]             `[[` <- base::`[[`
[17:40:07.809]             `+` <- base::`+`
[17:40:07.809]             `<<-` <- base::`<<-`
[17:40:07.809]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:07.809]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:07.809]                   3L)]
[17:40:07.809]             }
[17:40:07.809]             function(cond) {
[17:40:07.809]                 is_error <- inherits(cond, "error")
[17:40:07.809]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:07.809]                   NULL)
[17:40:07.809]                 if (is_error) {
[17:40:07.809]                   sessionInformation <- function() {
[17:40:07.809]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:07.809]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:07.809]                       search = base::search(), system = base::Sys.info())
[17:40:07.809]                   }
[17:40:07.809]                   ...future.conditions[[length(...future.conditions) + 
[17:40:07.809]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:07.809]                     cond$call), session = sessionInformation(), 
[17:40:07.809]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:07.809]                   signalCondition(cond)
[17:40:07.809]                 }
[17:40:07.809]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:07.809]                 "immediateCondition"))) {
[17:40:07.809]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:07.809]                   ...future.conditions[[length(...future.conditions) + 
[17:40:07.809]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:07.809]                   if (TRUE && !signal) {
[17:40:07.809]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:07.809]                     {
[17:40:07.809]                       inherits <- base::inherits
[17:40:07.809]                       invokeRestart <- base::invokeRestart
[17:40:07.809]                       is.null <- base::is.null
[17:40:07.809]                       muffled <- FALSE
[17:40:07.809]                       if (inherits(cond, "message")) {
[17:40:07.809]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:07.809]                         if (muffled) 
[17:40:07.809]                           invokeRestart("muffleMessage")
[17:40:07.809]                       }
[17:40:07.809]                       else if (inherits(cond, "warning")) {
[17:40:07.809]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:07.809]                         if (muffled) 
[17:40:07.809]                           invokeRestart("muffleWarning")
[17:40:07.809]                       }
[17:40:07.809]                       else if (inherits(cond, "condition")) {
[17:40:07.809]                         if (!is.null(pattern)) {
[17:40:07.809]                           computeRestarts <- base::computeRestarts
[17:40:07.809]                           grepl <- base::grepl
[17:40:07.809]                           restarts <- computeRestarts(cond)
[17:40:07.809]                           for (restart in restarts) {
[17:40:07.809]                             name <- restart$name
[17:40:07.809]                             if (is.null(name)) 
[17:40:07.809]                               next
[17:40:07.809]                             if (!grepl(pattern, name)) 
[17:40:07.809]                               next
[17:40:07.809]                             invokeRestart(restart)
[17:40:07.809]                             muffled <- TRUE
[17:40:07.809]                             break
[17:40:07.809]                           }
[17:40:07.809]                         }
[17:40:07.809]                       }
[17:40:07.809]                       invisible(muffled)
[17:40:07.809]                     }
[17:40:07.809]                     muffleCondition(cond, pattern = "^muffle")
[17:40:07.809]                   }
[17:40:07.809]                 }
[17:40:07.809]                 else {
[17:40:07.809]                   if (TRUE) {
[17:40:07.809]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:07.809]                     {
[17:40:07.809]                       inherits <- base::inherits
[17:40:07.809]                       invokeRestart <- base::invokeRestart
[17:40:07.809]                       is.null <- base::is.null
[17:40:07.809]                       muffled <- FALSE
[17:40:07.809]                       if (inherits(cond, "message")) {
[17:40:07.809]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:07.809]                         if (muffled) 
[17:40:07.809]                           invokeRestart("muffleMessage")
[17:40:07.809]                       }
[17:40:07.809]                       else if (inherits(cond, "warning")) {
[17:40:07.809]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:07.809]                         if (muffled) 
[17:40:07.809]                           invokeRestart("muffleWarning")
[17:40:07.809]                       }
[17:40:07.809]                       else if (inherits(cond, "condition")) {
[17:40:07.809]                         if (!is.null(pattern)) {
[17:40:07.809]                           computeRestarts <- base::computeRestarts
[17:40:07.809]                           grepl <- base::grepl
[17:40:07.809]                           restarts <- computeRestarts(cond)
[17:40:07.809]                           for (restart in restarts) {
[17:40:07.809]                             name <- restart$name
[17:40:07.809]                             if (is.null(name)) 
[17:40:07.809]                               next
[17:40:07.809]                             if (!grepl(pattern, name)) 
[17:40:07.809]                               next
[17:40:07.809]                             invokeRestart(restart)
[17:40:07.809]                             muffled <- TRUE
[17:40:07.809]                             break
[17:40:07.809]                           }
[17:40:07.809]                         }
[17:40:07.809]                       }
[17:40:07.809]                       invisible(muffled)
[17:40:07.809]                     }
[17:40:07.809]                     muffleCondition(cond, pattern = "^muffle")
[17:40:07.809]                   }
[17:40:07.809]                 }
[17:40:07.809]             }
[17:40:07.809]         }))
[17:40:07.809]     }, error = function(ex) {
[17:40:07.809]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:07.809]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:07.809]                 ...future.rng), started = ...future.startTime, 
[17:40:07.809]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:07.809]             version = "1.8"), class = "FutureResult")
[17:40:07.809]     }, finally = {
[17:40:07.809]         if (!identical(...future.workdir, getwd())) 
[17:40:07.809]             setwd(...future.workdir)
[17:40:07.809]         {
[17:40:07.809]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:07.809]                 ...future.oldOptions$nwarnings <- NULL
[17:40:07.809]             }
[17:40:07.809]             base::options(...future.oldOptions)
[17:40:07.809]             if (.Platform$OS.type == "windows") {
[17:40:07.809]                 old_names <- names(...future.oldEnvVars)
[17:40:07.809]                 envs <- base::Sys.getenv()
[17:40:07.809]                 names <- names(envs)
[17:40:07.809]                 common <- intersect(names, old_names)
[17:40:07.809]                 added <- setdiff(names, old_names)
[17:40:07.809]                 removed <- setdiff(old_names, names)
[17:40:07.809]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:07.809]                   envs[common]]
[17:40:07.809]                 NAMES <- toupper(changed)
[17:40:07.809]                 args <- list()
[17:40:07.809]                 for (kk in seq_along(NAMES)) {
[17:40:07.809]                   name <- changed[[kk]]
[17:40:07.809]                   NAME <- NAMES[[kk]]
[17:40:07.809]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:07.809]                     next
[17:40:07.809]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:07.809]                 }
[17:40:07.809]                 NAMES <- toupper(added)
[17:40:07.809]                 for (kk in seq_along(NAMES)) {
[17:40:07.809]                   name <- added[[kk]]
[17:40:07.809]                   NAME <- NAMES[[kk]]
[17:40:07.809]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:07.809]                     next
[17:40:07.809]                   args[[name]] <- ""
[17:40:07.809]                 }
[17:40:07.809]                 NAMES <- toupper(removed)
[17:40:07.809]                 for (kk in seq_along(NAMES)) {
[17:40:07.809]                   name <- removed[[kk]]
[17:40:07.809]                   NAME <- NAMES[[kk]]
[17:40:07.809]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:07.809]                     next
[17:40:07.809]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:07.809]                 }
[17:40:07.809]                 if (length(args) > 0) 
[17:40:07.809]                   base::do.call(base::Sys.setenv, args = args)
[17:40:07.809]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:07.809]             }
[17:40:07.809]             else {
[17:40:07.809]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:07.809]             }
[17:40:07.809]             {
[17:40:07.809]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:07.809]                   0L) {
[17:40:07.809]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:07.809]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:07.809]                   base::options(opts)
[17:40:07.809]                 }
[17:40:07.809]                 {
[17:40:07.809]                   {
[17:40:07.809]                     NULL
[17:40:07.809]                     RNGkind("Mersenne-Twister")
[17:40:07.809]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:40:07.809]                       inherits = FALSE)
[17:40:07.809]                   }
[17:40:07.809]                   options(future.plan = NULL)
[17:40:07.809]                   if (is.na(NA_character_)) 
[17:40:07.809]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:07.809]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:07.809]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:40:07.809]                     .init = FALSE)
[17:40:07.809]                 }
[17:40:07.809]             }
[17:40:07.809]         }
[17:40:07.809]     })
[17:40:07.809]     if (TRUE) {
[17:40:07.809]         base::sink(type = "output", split = FALSE)
[17:40:07.809]         if (TRUE) {
[17:40:07.809]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:07.809]         }
[17:40:07.809]         else {
[17:40:07.809]             ...future.result["stdout"] <- base::list(NULL)
[17:40:07.809]         }
[17:40:07.809]         base::close(...future.stdout)
[17:40:07.809]         ...future.stdout <- NULL
[17:40:07.809]     }
[17:40:07.809]     ...future.result$conditions <- ...future.conditions
[17:40:07.809]     ...future.result$finished <- base::Sys.time()
[17:40:07.809]     ...future.result
[17:40:07.809] }
[17:40:07.811] plan(): Setting new future strategy stack:
[17:40:07.811] List of future strategies:
[17:40:07.811] 1. sequential:
[17:40:07.811]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:40:07.811]    - tweaked: FALSE
[17:40:07.811]    - call: NULL
[17:40:07.811] plan(): nbrOfWorkers() = 1
[17:40:07.812] plan(): Setting new future strategy stack:
[17:40:07.814] List of future strategies:
[17:40:07.814] 1. multicore:
[17:40:07.814]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:40:07.814]    - tweaked: FALSE
[17:40:07.814]    - call: plan(multicore)
[17:40:07.817] plan(): nbrOfWorkers() = 1
[17:40:07.818] SequentialFuture started (and completed)
[17:40:07.818] signalConditions() ...
[17:40:07.818]  - include = ‘immediateCondition’
[17:40:07.818]  - exclude = 
[17:40:07.818]  - resignal = FALSE
[17:40:07.818]  - Number of conditions: 1
[17:40:07.818] signalConditions() ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    stop(structure(list(message = "boom"), class = c("MyError", 
        "error", "condition")))
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 0 bytes of class ‘NULL’
Conditions captured: [n=1] ‘MyError’
Early signaling: FALSE
Owner process: 33d8ef81-66c6-1c88-ad16-a15781be79ec
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:40:07.819] signalConditions() ...
[17:40:07.819]  - include = ‘immediateCondition’
[17:40:07.819]  - exclude = 
[17:40:07.819]  - resignal = FALSE
[17:40:07.819]  - Number of conditions: 1
[17:40:07.819] signalConditions() ... done
<MyError: boom>
[17:40:07.819] signalConditions() ...
[17:40:07.819]  - include = ‘immediateCondition’
[17:40:07.820]  - exclude = 
[17:40:07.820]  - resignal = FALSE
[17:40:07.820]  - Number of conditions: 1
[17:40:07.820] signalConditions() ... done
[17:40:07.820] Future state: ‘finished’
[17:40:07.820] signalConditions() ...
[17:40:07.820]  - include = ‘condition’
[17:40:07.820]  - exclude = ‘immediateCondition’
[17:40:07.820]  - resignal = TRUE
[17:40:07.820]  - Number of conditions: 1
[17:40:07.821]  - Condition #1: ‘MyError’, ‘error’, ‘condition’
[17:40:07.821] signalConditions() ... done
*** multicore(..., globals = TRUE) without globals
[17:40:07.824] getGlobalsAndPackages() ...
[17:40:07.824] Searching for globals...
[17:40:07.824] - globals found: [1] ‘{’
[17:40:07.825] Searching for globals ... DONE
[17:40:07.825] Resolving globals: FALSE
[17:40:07.825] 
[17:40:07.825] 
[17:40:07.825] getGlobalsAndPackages() ... DONE
[17:40:07.825] Packages needed by the future expression (n = 0): <none>
[17:40:07.826] Packages needed by future strategies (n = 0): <none>
[17:40:07.826] {
[17:40:07.826]     {
[17:40:07.826]         {
[17:40:07.826]             ...future.startTime <- base::Sys.time()
[17:40:07.826]             {
[17:40:07.826]                 {
[17:40:07.826]                   {
[17:40:07.826]                     base::local({
[17:40:07.826]                       has_future <- base::requireNamespace("future", 
[17:40:07.826]                         quietly = TRUE)
[17:40:07.826]                       if (has_future) {
[17:40:07.826]                         ns <- base::getNamespace("future")
[17:40:07.826]                         version <- ns[[".package"]][["version"]]
[17:40:07.826]                         if (is.null(version)) 
[17:40:07.826]                           version <- utils::packageVersion("future")
[17:40:07.826]                       }
[17:40:07.826]                       else {
[17:40:07.826]                         version <- NULL
[17:40:07.826]                       }
[17:40:07.826]                       if (!has_future || version < "1.8.0") {
[17:40:07.826]                         info <- base::c(r_version = base::gsub("R version ", 
[17:40:07.826]                           "", base::R.version$version.string), 
[17:40:07.826]                           platform = base::sprintf("%s (%s-bit)", 
[17:40:07.826]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:07.826]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:07.826]                             "release", "version")], collapse = " "), 
[17:40:07.826]                           hostname = base::Sys.info()[["nodename"]])
[17:40:07.826]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:40:07.826]                           info)
[17:40:07.826]                         info <- base::paste(info, collapse = "; ")
[17:40:07.826]                         if (!has_future) {
[17:40:07.826]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:07.826]                             info)
[17:40:07.826]                         }
[17:40:07.826]                         else {
[17:40:07.826]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:07.826]                             info, version)
[17:40:07.826]                         }
[17:40:07.826]                         base::stop(msg)
[17:40:07.826]                       }
[17:40:07.826]                     })
[17:40:07.826]                   }
[17:40:07.826]                   ...future.strategy.old <- future::plan("list")
[17:40:07.826]                   options(future.plan = NULL)
[17:40:07.826]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:07.826]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:07.826]                 }
[17:40:07.826]                 ...future.workdir <- getwd()
[17:40:07.826]             }
[17:40:07.826]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:07.826]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:07.826]         }
[17:40:07.826]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:07.826]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:40:07.826]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:07.826]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:07.826]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:07.826]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:07.826]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:07.826]             base::names(...future.oldOptions))
[17:40:07.826]     }
[17:40:07.826]     if (FALSE) {
[17:40:07.826]     }
[17:40:07.826]     else {
[17:40:07.826]         if (TRUE) {
[17:40:07.826]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:07.826]                 open = "w")
[17:40:07.826]         }
[17:40:07.826]         else {
[17:40:07.826]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:07.826]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:07.826]         }
[17:40:07.826]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:07.826]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:07.826]             base::sink(type = "output", split = FALSE)
[17:40:07.826]             base::close(...future.stdout)
[17:40:07.826]         }, add = TRUE)
[17:40:07.826]     }
[17:40:07.826]     ...future.frame <- base::sys.nframe()
[17:40:07.826]     ...future.conditions <- base::list()
[17:40:07.826]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:07.826]     if (FALSE) {
[17:40:07.826]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:07.826]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:07.826]     }
[17:40:07.826]     ...future.result <- base::tryCatch({
[17:40:07.826]         base::withCallingHandlers({
[17:40:07.826]             ...future.value <- base::withVisible(base::local({
[17:40:07.826]                 42L
[17:40:07.826]             }))
[17:40:07.826]             future::FutureResult(value = ...future.value$value, 
[17:40:07.826]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:07.826]                   ...future.rng), globalenv = if (FALSE) 
[17:40:07.826]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:07.826]                     ...future.globalenv.names))
[17:40:07.826]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:07.826]         }, condition = base::local({
[17:40:07.826]             c <- base::c
[17:40:07.826]             inherits <- base::inherits
[17:40:07.826]             invokeRestart <- base::invokeRestart
[17:40:07.826]             length <- base::length
[17:40:07.826]             list <- base::list
[17:40:07.826]             seq.int <- base::seq.int
[17:40:07.826]             signalCondition <- base::signalCondition
[17:40:07.826]             sys.calls <- base::sys.calls
[17:40:07.826]             `[[` <- base::`[[`
[17:40:07.826]             `+` <- base::`+`
[17:40:07.826]             `<<-` <- base::`<<-`
[17:40:07.826]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:07.826]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:07.826]                   3L)]
[17:40:07.826]             }
[17:40:07.826]             function(cond) {
[17:40:07.826]                 is_error <- inherits(cond, "error")
[17:40:07.826]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:07.826]                   NULL)
[17:40:07.826]                 if (is_error) {
[17:40:07.826]                   sessionInformation <- function() {
[17:40:07.826]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:07.826]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:07.826]                       search = base::search(), system = base::Sys.info())
[17:40:07.826]                   }
[17:40:07.826]                   ...future.conditions[[length(...future.conditions) + 
[17:40:07.826]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:07.826]                     cond$call), session = sessionInformation(), 
[17:40:07.826]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:07.826]                   signalCondition(cond)
[17:40:07.826]                 }
[17:40:07.826]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:07.826]                 "immediateCondition"))) {
[17:40:07.826]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:07.826]                   ...future.conditions[[length(...future.conditions) + 
[17:40:07.826]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:07.826]                   if (TRUE && !signal) {
[17:40:07.826]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:07.826]                     {
[17:40:07.826]                       inherits <- base::inherits
[17:40:07.826]                       invokeRestart <- base::invokeRestart
[17:40:07.826]                       is.null <- base::is.null
[17:40:07.826]                       muffled <- FALSE
[17:40:07.826]                       if (inherits(cond, "message")) {
[17:40:07.826]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:07.826]                         if (muffled) 
[17:40:07.826]                           invokeRestart("muffleMessage")
[17:40:07.826]                       }
[17:40:07.826]                       else if (inherits(cond, "warning")) {
[17:40:07.826]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:07.826]                         if (muffled) 
[17:40:07.826]                           invokeRestart("muffleWarning")
[17:40:07.826]                       }
[17:40:07.826]                       else if (inherits(cond, "condition")) {
[17:40:07.826]                         if (!is.null(pattern)) {
[17:40:07.826]                           computeRestarts <- base::computeRestarts
[17:40:07.826]                           grepl <- base::grepl
[17:40:07.826]                           restarts <- computeRestarts(cond)
[17:40:07.826]                           for (restart in restarts) {
[17:40:07.826]                             name <- restart$name
[17:40:07.826]                             if (is.null(name)) 
[17:40:07.826]                               next
[17:40:07.826]                             if (!grepl(pattern, name)) 
[17:40:07.826]                               next
[17:40:07.826]                             invokeRestart(restart)
[17:40:07.826]                             muffled <- TRUE
[17:40:07.826]                             break
[17:40:07.826]                           }
[17:40:07.826]                         }
[17:40:07.826]                       }
[17:40:07.826]                       invisible(muffled)
[17:40:07.826]                     }
[17:40:07.826]                     muffleCondition(cond, pattern = "^muffle")
[17:40:07.826]                   }
[17:40:07.826]                 }
[17:40:07.826]                 else {
[17:40:07.826]                   if (TRUE) {
[17:40:07.826]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:07.826]                     {
[17:40:07.826]                       inherits <- base::inherits
[17:40:07.826]                       invokeRestart <- base::invokeRestart
[17:40:07.826]                       is.null <- base::is.null
[17:40:07.826]                       muffled <- FALSE
[17:40:07.826]                       if (inherits(cond, "message")) {
[17:40:07.826]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:07.826]                         if (muffled) 
[17:40:07.826]                           invokeRestart("muffleMessage")
[17:40:07.826]                       }
[17:40:07.826]                       else if (inherits(cond, "warning")) {
[17:40:07.826]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:07.826]                         if (muffled) 
[17:40:07.826]                           invokeRestart("muffleWarning")
[17:40:07.826]                       }
[17:40:07.826]                       else if (inherits(cond, "condition")) {
[17:40:07.826]                         if (!is.null(pattern)) {
[17:40:07.826]                           computeRestarts <- base::computeRestarts
[17:40:07.826]                           grepl <- base::grepl
[17:40:07.826]                           restarts <- computeRestarts(cond)
[17:40:07.826]                           for (restart in restarts) {
[17:40:07.826]                             name <- restart$name
[17:40:07.826]                             if (is.null(name)) 
[17:40:07.826]                               next
[17:40:07.826]                             if (!grepl(pattern, name)) 
[17:40:07.826]                               next
[17:40:07.826]                             invokeRestart(restart)
[17:40:07.826]                             muffled <- TRUE
[17:40:07.826]                             break
[17:40:07.826]                           }
[17:40:07.826]                         }
[17:40:07.826]                       }
[17:40:07.826]                       invisible(muffled)
[17:40:07.826]                     }
[17:40:07.826]                     muffleCondition(cond, pattern = "^muffle")
[17:40:07.826]                   }
[17:40:07.826]                 }
[17:40:07.826]             }
[17:40:07.826]         }))
[17:40:07.826]     }, error = function(ex) {
[17:40:07.826]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:07.826]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:07.826]                 ...future.rng), started = ...future.startTime, 
[17:40:07.826]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:07.826]             version = "1.8"), class = "FutureResult")
[17:40:07.826]     }, finally = {
[17:40:07.826]         if (!identical(...future.workdir, getwd())) 
[17:40:07.826]             setwd(...future.workdir)
[17:40:07.826]         {
[17:40:07.826]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:07.826]                 ...future.oldOptions$nwarnings <- NULL
[17:40:07.826]             }
[17:40:07.826]             base::options(...future.oldOptions)
[17:40:07.826]             if (.Platform$OS.type == "windows") {
[17:40:07.826]                 old_names <- names(...future.oldEnvVars)
[17:40:07.826]                 envs <- base::Sys.getenv()
[17:40:07.826]                 names <- names(envs)
[17:40:07.826]                 common <- intersect(names, old_names)
[17:40:07.826]                 added <- setdiff(names, old_names)
[17:40:07.826]                 removed <- setdiff(old_names, names)
[17:40:07.826]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:07.826]                   envs[common]]
[17:40:07.826]                 NAMES <- toupper(changed)
[17:40:07.826]                 args <- list()
[17:40:07.826]                 for (kk in seq_along(NAMES)) {
[17:40:07.826]                   name <- changed[[kk]]
[17:40:07.826]                   NAME <- NAMES[[kk]]
[17:40:07.826]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:07.826]                     next
[17:40:07.826]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:07.826]                 }
[17:40:07.826]                 NAMES <- toupper(added)
[17:40:07.826]                 for (kk in seq_along(NAMES)) {
[17:40:07.826]                   name <- added[[kk]]
[17:40:07.826]                   NAME <- NAMES[[kk]]
[17:40:07.826]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:07.826]                     next
[17:40:07.826]                   args[[name]] <- ""
[17:40:07.826]                 }
[17:40:07.826]                 NAMES <- toupper(removed)
[17:40:07.826]                 for (kk in seq_along(NAMES)) {
[17:40:07.826]                   name <- removed[[kk]]
[17:40:07.826]                   NAME <- NAMES[[kk]]
[17:40:07.826]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:07.826]                     next
[17:40:07.826]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:07.826]                 }
[17:40:07.826]                 if (length(args) > 0) 
[17:40:07.826]                   base::do.call(base::Sys.setenv, args = args)
[17:40:07.826]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:07.826]             }
[17:40:07.826]             else {
[17:40:07.826]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:07.826]             }
[17:40:07.826]             {
[17:40:07.826]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:07.826]                   0L) {
[17:40:07.826]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:07.826]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:07.826]                   base::options(opts)
[17:40:07.826]                 }
[17:40:07.826]                 {
[17:40:07.826]                   {
[17:40:07.826]                     NULL
[17:40:07.826]                     RNGkind("Mersenne-Twister")
[17:40:07.826]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:40:07.826]                       inherits = FALSE)
[17:40:07.826]                   }
[17:40:07.826]                   options(future.plan = NULL)
[17:40:07.826]                   if (is.na(NA_character_)) 
[17:40:07.826]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:07.826]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:07.826]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:40:07.826]                     .init = FALSE)
[17:40:07.826]                 }
[17:40:07.826]             }
[17:40:07.826]         }
[17:40:07.826]     })
[17:40:07.826]     if (TRUE) {
[17:40:07.826]         base::sink(type = "output", split = FALSE)
[17:40:07.826]         if (TRUE) {
[17:40:07.826]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:07.826]         }
[17:40:07.826]         else {
[17:40:07.826]             ...future.result["stdout"] <- base::list(NULL)
[17:40:07.826]         }
[17:40:07.826]         base::close(...future.stdout)
[17:40:07.826]         ...future.stdout <- NULL
[17:40:07.826]     }
[17:40:07.826]     ...future.result$conditions <- ...future.conditions
[17:40:07.826]     ...future.result$finished <- base::Sys.time()
[17:40:07.826]     ...future.result
[17:40:07.826] }
[17:40:07.828] plan(): Setting new future strategy stack:
[17:40:07.828] List of future strategies:
[17:40:07.828] 1. sequential:
[17:40:07.828]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:40:07.828]    - tweaked: FALSE
[17:40:07.828]    - call: NULL
[17:40:07.828] plan(): nbrOfWorkers() = 1
[17:40:07.829] plan(): Setting new future strategy stack:
[17:40:07.829] List of future strategies:
[17:40:07.829] 1. multicore:
[17:40:07.829]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:40:07.829]    - tweaked: FALSE
[17:40:07.829]    - call: plan(multicore)
[17:40:07.832] plan(): nbrOfWorkers() = 1
[17:40:07.833] SequentialFuture started (and completed)
[17:40:07.833] resolved() for ‘SequentialFuture’ ...
[17:40:07.833] - state: ‘finished’
[17:40:07.833] - run: TRUE
[17:40:07.833] - result: ‘FutureResult’
[17:40:07.833] resolved() for ‘SequentialFuture’ ... done
[1] TRUE
[1] 42
*** multicore(..., globals = TRUE) with globals
[17:40:07.836] getGlobalsAndPackages() ...
[17:40:07.837] Searching for globals...
[17:40:07.838] - globals found: [4] ‘{’, ‘<-’, ‘*’, ‘a’
[17:40:07.838] Searching for globals ... DONE
[17:40:07.839] Resolving globals: FALSE
[17:40:07.839] The total size of the 1 globals is 56 bytes (56 bytes)
[17:40:07.839] The total size of the 1 globals exported for future expression (‘{; b <- 3; c <- 2; a * b * c; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:40:07.840] - globals: [1] ‘a’
[17:40:07.840] 
[17:40:07.840] getGlobalsAndPackages() ... DONE
[17:40:07.840] Packages needed by the future expression (n = 0): <none>
[17:40:07.840] Packages needed by future strategies (n = 0): <none>
[17:40:07.841] {
[17:40:07.841]     {
[17:40:07.841]         {
[17:40:07.841]             ...future.startTime <- base::Sys.time()
[17:40:07.841]             {
[17:40:07.841]                 {
[17:40:07.841]                   {
[17:40:07.841]                     base::local({
[17:40:07.841]                       has_future <- base::requireNamespace("future", 
[17:40:07.841]                         quietly = TRUE)
[17:40:07.841]                       if (has_future) {
[17:40:07.841]                         ns <- base::getNamespace("future")
[17:40:07.841]                         version <- ns[[".package"]][["version"]]
[17:40:07.841]                         if (is.null(version)) 
[17:40:07.841]                           version <- utils::packageVersion("future")
[17:40:07.841]                       }
[17:40:07.841]                       else {
[17:40:07.841]                         version <- NULL
[17:40:07.841]                       }
[17:40:07.841]                       if (!has_future || version < "1.8.0") {
[17:40:07.841]                         info <- base::c(r_version = base::gsub("R version ", 
[17:40:07.841]                           "", base::R.version$version.string), 
[17:40:07.841]                           platform = base::sprintf("%s (%s-bit)", 
[17:40:07.841]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:07.841]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:07.841]                             "release", "version")], collapse = " "), 
[17:40:07.841]                           hostname = base::Sys.info()[["nodename"]])
[17:40:07.841]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:40:07.841]                           info)
[17:40:07.841]                         info <- base::paste(info, collapse = "; ")
[17:40:07.841]                         if (!has_future) {
[17:40:07.841]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:07.841]                             info)
[17:40:07.841]                         }
[17:40:07.841]                         else {
[17:40:07.841]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:07.841]                             info, version)
[17:40:07.841]                         }
[17:40:07.841]                         base::stop(msg)
[17:40:07.841]                       }
[17:40:07.841]                     })
[17:40:07.841]                   }
[17:40:07.841]                   ...future.strategy.old <- future::plan("list")
[17:40:07.841]                   options(future.plan = NULL)
[17:40:07.841]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:07.841]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:07.841]                 }
[17:40:07.841]                 ...future.workdir <- getwd()
[17:40:07.841]             }
[17:40:07.841]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:07.841]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:07.841]         }
[17:40:07.841]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:07.841]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:40:07.841]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:07.841]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:07.841]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:07.841]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:07.841]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:07.841]             base::names(...future.oldOptions))
[17:40:07.841]     }
[17:40:07.841]     if (FALSE) {
[17:40:07.841]     }
[17:40:07.841]     else {
[17:40:07.841]         if (TRUE) {
[17:40:07.841]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:07.841]                 open = "w")
[17:40:07.841]         }
[17:40:07.841]         else {
[17:40:07.841]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:07.841]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:07.841]         }
[17:40:07.841]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:07.841]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:07.841]             base::sink(type = "output", split = FALSE)
[17:40:07.841]             base::close(...future.stdout)
[17:40:07.841]         }, add = TRUE)
[17:40:07.841]     }
[17:40:07.841]     ...future.frame <- base::sys.nframe()
[17:40:07.841]     ...future.conditions <- base::list()
[17:40:07.841]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:07.841]     if (FALSE) {
[17:40:07.841]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:07.841]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:07.841]     }
[17:40:07.841]     ...future.result <- base::tryCatch({
[17:40:07.841]         base::withCallingHandlers({
[17:40:07.841]             ...future.value <- base::withVisible(base::local({
[17:40:07.841]                 b <- 3
[17:40:07.841]                 c <- 2
[17:40:07.841]                 a * b * c
[17:40:07.841]             }))
[17:40:07.841]             future::FutureResult(value = ...future.value$value, 
[17:40:07.841]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:07.841]                   ...future.rng), globalenv = if (FALSE) 
[17:40:07.841]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:07.841]                     ...future.globalenv.names))
[17:40:07.841]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:07.841]         }, condition = base::local({
[17:40:07.841]             c <- base::c
[17:40:07.841]             inherits <- base::inherits
[17:40:07.841]             invokeRestart <- base::invokeRestart
[17:40:07.841]             length <- base::length
[17:40:07.841]             list <- base::list
[17:40:07.841]             seq.int <- base::seq.int
[17:40:07.841]             signalCondition <- base::signalCondition
[17:40:07.841]             sys.calls <- base::sys.calls
[17:40:07.841]             `[[` <- base::`[[`
[17:40:07.841]             `+` <- base::`+`
[17:40:07.841]             `<<-` <- base::`<<-`
[17:40:07.841]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:07.841]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:07.841]                   3L)]
[17:40:07.841]             }
[17:40:07.841]             function(cond) {
[17:40:07.841]                 is_error <- inherits(cond, "error")
[17:40:07.841]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:07.841]                   NULL)
[17:40:07.841]                 if (is_error) {
[17:40:07.841]                   sessionInformation <- function() {
[17:40:07.841]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:07.841]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:07.841]                       search = base::search(), system = base::Sys.info())
[17:40:07.841]                   }
[17:40:07.841]                   ...future.conditions[[length(...future.conditions) + 
[17:40:07.841]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:07.841]                     cond$call), session = sessionInformation(), 
[17:40:07.841]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:07.841]                   signalCondition(cond)
[17:40:07.841]                 }
[17:40:07.841]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:07.841]                 "immediateCondition"))) {
[17:40:07.841]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:07.841]                   ...future.conditions[[length(...future.conditions) + 
[17:40:07.841]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:07.841]                   if (TRUE && !signal) {
[17:40:07.841]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:07.841]                     {
[17:40:07.841]                       inherits <- base::inherits
[17:40:07.841]                       invokeRestart <- base::invokeRestart
[17:40:07.841]                       is.null <- base::is.null
[17:40:07.841]                       muffled <- FALSE
[17:40:07.841]                       if (inherits(cond, "message")) {
[17:40:07.841]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:07.841]                         if (muffled) 
[17:40:07.841]                           invokeRestart("muffleMessage")
[17:40:07.841]                       }
[17:40:07.841]                       else if (inherits(cond, "warning")) {
[17:40:07.841]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:07.841]                         if (muffled) 
[17:40:07.841]                           invokeRestart("muffleWarning")
[17:40:07.841]                       }
[17:40:07.841]                       else if (inherits(cond, "condition")) {
[17:40:07.841]                         if (!is.null(pattern)) {
[17:40:07.841]                           computeRestarts <- base::computeRestarts
[17:40:07.841]                           grepl <- base::grepl
[17:40:07.841]                           restarts <- computeRestarts(cond)
[17:40:07.841]                           for (restart in restarts) {
[17:40:07.841]                             name <- restart$name
[17:40:07.841]                             if (is.null(name)) 
[17:40:07.841]                               next
[17:40:07.841]                             if (!grepl(pattern, name)) 
[17:40:07.841]                               next
[17:40:07.841]                             invokeRestart(restart)
[17:40:07.841]                             muffled <- TRUE
[17:40:07.841]                             break
[17:40:07.841]                           }
[17:40:07.841]                         }
[17:40:07.841]                       }
[17:40:07.841]                       invisible(muffled)
[17:40:07.841]                     }
[17:40:07.841]                     muffleCondition(cond, pattern = "^muffle")
[17:40:07.841]                   }
[17:40:07.841]                 }
[17:40:07.841]                 else {
[17:40:07.841]                   if (TRUE) {
[17:40:07.841]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:07.841]                     {
[17:40:07.841]                       inherits <- base::inherits
[17:40:07.841]                       invokeRestart <- base::invokeRestart
[17:40:07.841]                       is.null <- base::is.null
[17:40:07.841]                       muffled <- FALSE
[17:40:07.841]                       if (inherits(cond, "message")) {
[17:40:07.841]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:07.841]                         if (muffled) 
[17:40:07.841]                           invokeRestart("muffleMessage")
[17:40:07.841]                       }
[17:40:07.841]                       else if (inherits(cond, "warning")) {
[17:40:07.841]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:07.841]                         if (muffled) 
[17:40:07.841]                           invokeRestart("muffleWarning")
[17:40:07.841]                       }
[17:40:07.841]                       else if (inherits(cond, "condition")) {
[17:40:07.841]                         if (!is.null(pattern)) {
[17:40:07.841]                           computeRestarts <- base::computeRestarts
[17:40:07.841]                           grepl <- base::grepl
[17:40:07.841]                           restarts <- computeRestarts(cond)
[17:40:07.841]                           for (restart in restarts) {
[17:40:07.841]                             name <- restart$name
[17:40:07.841]                             if (is.null(name)) 
[17:40:07.841]                               next
[17:40:07.841]                             if (!grepl(pattern, name)) 
[17:40:07.841]                               next
[17:40:07.841]                             invokeRestart(restart)
[17:40:07.841]                             muffled <- TRUE
[17:40:07.841]                             break
[17:40:07.841]                           }
[17:40:07.841]                         }
[17:40:07.841]                       }
[17:40:07.841]                       invisible(muffled)
[17:40:07.841]                     }
[17:40:07.841]                     muffleCondition(cond, pattern = "^muffle")
[17:40:07.841]                   }
[17:40:07.841]                 }
[17:40:07.841]             }
[17:40:07.841]         }))
[17:40:07.841]     }, error = function(ex) {
[17:40:07.841]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:07.841]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:07.841]                 ...future.rng), started = ...future.startTime, 
[17:40:07.841]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:07.841]             version = "1.8"), class = "FutureResult")
[17:40:07.841]     }, finally = {
[17:40:07.841]         if (!identical(...future.workdir, getwd())) 
[17:40:07.841]             setwd(...future.workdir)
[17:40:07.841]         {
[17:40:07.841]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:07.841]                 ...future.oldOptions$nwarnings <- NULL
[17:40:07.841]             }
[17:40:07.841]             base::options(...future.oldOptions)
[17:40:07.841]             if (.Platform$OS.type == "windows") {
[17:40:07.841]                 old_names <- names(...future.oldEnvVars)
[17:40:07.841]                 envs <- base::Sys.getenv()
[17:40:07.841]                 names <- names(envs)
[17:40:07.841]                 common <- intersect(names, old_names)
[17:40:07.841]                 added <- setdiff(names, old_names)
[17:40:07.841]                 removed <- setdiff(old_names, names)
[17:40:07.841]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:07.841]                   envs[common]]
[17:40:07.841]                 NAMES <- toupper(changed)
[17:40:07.841]                 args <- list()
[17:40:07.841]                 for (kk in seq_along(NAMES)) {
[17:40:07.841]                   name <- changed[[kk]]
[17:40:07.841]                   NAME <- NAMES[[kk]]
[17:40:07.841]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:07.841]                     next
[17:40:07.841]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:07.841]                 }
[17:40:07.841]                 NAMES <- toupper(added)
[17:40:07.841]                 for (kk in seq_along(NAMES)) {
[17:40:07.841]                   name <- added[[kk]]
[17:40:07.841]                   NAME <- NAMES[[kk]]
[17:40:07.841]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:07.841]                     next
[17:40:07.841]                   args[[name]] <- ""
[17:40:07.841]                 }
[17:40:07.841]                 NAMES <- toupper(removed)
[17:40:07.841]                 for (kk in seq_along(NAMES)) {
[17:40:07.841]                   name <- removed[[kk]]
[17:40:07.841]                   NAME <- NAMES[[kk]]
[17:40:07.841]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:07.841]                     next
[17:40:07.841]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:07.841]                 }
[17:40:07.841]                 if (length(args) > 0) 
[17:40:07.841]                   base::do.call(base::Sys.setenv, args = args)
[17:40:07.841]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:07.841]             }
[17:40:07.841]             else {
[17:40:07.841]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:07.841]             }
[17:40:07.841]             {
[17:40:07.841]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:07.841]                   0L) {
[17:40:07.841]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:07.841]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:07.841]                   base::options(opts)
[17:40:07.841]                 }
[17:40:07.841]                 {
[17:40:07.841]                   {
[17:40:07.841]                     NULL
[17:40:07.841]                     RNGkind("Mersenne-Twister")
[17:40:07.841]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:40:07.841]                       inherits = FALSE)
[17:40:07.841]                   }
[17:40:07.841]                   options(future.plan = NULL)
[17:40:07.841]                   if (is.na(NA_character_)) 
[17:40:07.841]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:07.841]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:07.841]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:40:07.841]                     .init = FALSE)
[17:40:07.841]                 }
[17:40:07.841]             }
[17:40:07.841]         }
[17:40:07.841]     })
[17:40:07.841]     if (TRUE) {
[17:40:07.841]         base::sink(type = "output", split = FALSE)
[17:40:07.841]         if (TRUE) {
[17:40:07.841]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:07.841]         }
[17:40:07.841]         else {
[17:40:07.841]             ...future.result["stdout"] <- base::list(NULL)
[17:40:07.841]         }
[17:40:07.841]         base::close(...future.stdout)
[17:40:07.841]         ...future.stdout <- NULL
[17:40:07.841]     }
[17:40:07.841]     ...future.result$conditions <- ...future.conditions
[17:40:07.841]     ...future.result$finished <- base::Sys.time()
[17:40:07.841]     ...future.result
[17:40:07.841] }
[17:40:07.842] assign_globals() ...
[17:40:07.842] List of 1
[17:40:07.842]  $ a: num 0
[17:40:07.842]  - attr(*, "where")=List of 1
[17:40:07.842]   ..$ a:<environment: R_EmptyEnv> 
[17:40:07.842]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:07.842]  - attr(*, "resolved")= logi FALSE
[17:40:07.842]  - attr(*, "total_size")= num 56
[17:40:07.846] - copied ‘a’ to environment
[17:40:07.846] assign_globals() ... done
[17:40:07.847] plan(): Setting new future strategy stack:
[17:40:07.847] List of future strategies:
[17:40:07.847] 1. sequential:
[17:40:07.847]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:40:07.847]    - tweaked: FALSE
[17:40:07.847]    - call: NULL
[17:40:07.847] plan(): nbrOfWorkers() = 1
[17:40:07.848] plan(): Setting new future strategy stack:
[17:40:07.848] List of future strategies:
[17:40:07.848] 1. multicore:
[17:40:07.848]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:40:07.848]    - tweaked: FALSE
[17:40:07.848]    - call: plan(multicore)
[17:40:07.851] plan(): nbrOfWorkers() = 1
[17:40:07.851] SequentialFuture started (and completed)
SequentialFuture:
Label: ‘<none>’
Expression:
{
    b <- 3
    c <- 2
    a * b * c
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 56 bytes (numeric ‘a’ of 56 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 33d8ef81-66c6-1c88-ad16-a15781be79ec
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[1] 0
*** multicore(..., globals = TRUE) with globals and blocking
 - Creating multicore future #1 ...
[17:40:07.855] getGlobalsAndPackages() ...
[17:40:07.855] Searching for globals...
[17:40:07.856] - globals found: [2] ‘{’, ‘ii’
[17:40:07.856] Searching for globals ... DONE
[17:40:07.856] Resolving globals: FALSE
[17:40:07.857] The total size of the 1 globals is 56 bytes (56 bytes)
[17:40:07.857] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[17:40:07.857] - globals: [1] ‘ii’
[17:40:07.857] 
[17:40:07.857] getGlobalsAndPackages() ... DONE
[17:40:07.857] Packages needed by the future expression (n = 0): <none>
[17:40:07.859] Packages needed by future strategies (n = 0): <none>
[17:40:07.859] {
[17:40:07.859]     {
[17:40:07.859]         {
[17:40:07.859]             ...future.startTime <- base::Sys.time()
[17:40:07.859]             {
[17:40:07.859]                 {
[17:40:07.859]                   {
[17:40:07.859]                     base::local({
[17:40:07.859]                       has_future <- base::requireNamespace("future", 
[17:40:07.859]                         quietly = TRUE)
[17:40:07.859]                       if (has_future) {
[17:40:07.859]                         ns <- base::getNamespace("future")
[17:40:07.859]                         version <- ns[[".package"]][["version"]]
[17:40:07.859]                         if (is.null(version)) 
[17:40:07.859]                           version <- utils::packageVersion("future")
[17:40:07.859]                       }
[17:40:07.859]                       else {
[17:40:07.859]                         version <- NULL
[17:40:07.859]                       }
[17:40:07.859]                       if (!has_future || version < "1.8.0") {
[17:40:07.859]                         info <- base::c(r_version = base::gsub("R version ", 
[17:40:07.859]                           "", base::R.version$version.string), 
[17:40:07.859]                           platform = base::sprintf("%s (%s-bit)", 
[17:40:07.859]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:07.859]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:07.859]                             "release", "version")], collapse = " "), 
[17:40:07.859]                           hostname = base::Sys.info()[["nodename"]])
[17:40:07.859]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:40:07.859]                           info)
[17:40:07.859]                         info <- base::paste(info, collapse = "; ")
[17:40:07.859]                         if (!has_future) {
[17:40:07.859]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:07.859]                             info)
[17:40:07.859]                         }
[17:40:07.859]                         else {
[17:40:07.859]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:07.859]                             info, version)
[17:40:07.859]                         }
[17:40:07.859]                         base::stop(msg)
[17:40:07.859]                       }
[17:40:07.859]                     })
[17:40:07.859]                   }
[17:40:07.859]                   ...future.strategy.old <- future::plan("list")
[17:40:07.859]                   options(future.plan = NULL)
[17:40:07.859]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:07.859]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:07.859]                 }
[17:40:07.859]                 ...future.workdir <- getwd()
[17:40:07.859]             }
[17:40:07.859]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:07.859]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:07.859]         }
[17:40:07.859]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:07.859]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:40:07.859]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:07.859]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:07.859]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:07.859]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:07.859]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:07.859]             base::names(...future.oldOptions))
[17:40:07.859]     }
[17:40:07.859]     if (FALSE) {
[17:40:07.859]     }
[17:40:07.859]     else {
[17:40:07.859]         if (TRUE) {
[17:40:07.859]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:07.859]                 open = "w")
[17:40:07.859]         }
[17:40:07.859]         else {
[17:40:07.859]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:07.859]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:07.859]         }
[17:40:07.859]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:07.859]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:07.859]             base::sink(type = "output", split = FALSE)
[17:40:07.859]             base::close(...future.stdout)
[17:40:07.859]         }, add = TRUE)
[17:40:07.859]     }
[17:40:07.859]     ...future.frame <- base::sys.nframe()
[17:40:07.859]     ...future.conditions <- base::list()
[17:40:07.859]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:07.859]     if (FALSE) {
[17:40:07.859]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:07.859]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:07.859]     }
[17:40:07.859]     ...future.result <- base::tryCatch({
[17:40:07.859]         base::withCallingHandlers({
[17:40:07.859]             ...future.value <- base::withVisible(base::local({
[17:40:07.859]                 ii
[17:40:07.859]             }))
[17:40:07.859]             future::FutureResult(value = ...future.value$value, 
[17:40:07.859]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:07.859]                   ...future.rng), globalenv = if (FALSE) 
[17:40:07.859]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:07.859]                     ...future.globalenv.names))
[17:40:07.859]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:07.859]         }, condition = base::local({
[17:40:07.859]             c <- base::c
[17:40:07.859]             inherits <- base::inherits
[17:40:07.859]             invokeRestart <- base::invokeRestart
[17:40:07.859]             length <- base::length
[17:40:07.859]             list <- base::list
[17:40:07.859]             seq.int <- base::seq.int
[17:40:07.859]             signalCondition <- base::signalCondition
[17:40:07.859]             sys.calls <- base::sys.calls
[17:40:07.859]             `[[` <- base::`[[`
[17:40:07.859]             `+` <- base::`+`
[17:40:07.859]             `<<-` <- base::`<<-`
[17:40:07.859]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:07.859]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:07.859]                   3L)]
[17:40:07.859]             }
[17:40:07.859]             function(cond) {
[17:40:07.859]                 is_error <- inherits(cond, "error")
[17:40:07.859]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:07.859]                   NULL)
[17:40:07.859]                 if (is_error) {
[17:40:07.859]                   sessionInformation <- function() {
[17:40:07.859]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:07.859]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:07.859]                       search = base::search(), system = base::Sys.info())
[17:40:07.859]                   }
[17:40:07.859]                   ...future.conditions[[length(...future.conditions) + 
[17:40:07.859]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:07.859]                     cond$call), session = sessionInformation(), 
[17:40:07.859]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:07.859]                   signalCondition(cond)
[17:40:07.859]                 }
[17:40:07.859]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:07.859]                 "immediateCondition"))) {
[17:40:07.859]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:07.859]                   ...future.conditions[[length(...future.conditions) + 
[17:40:07.859]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:07.859]                   if (TRUE && !signal) {
[17:40:07.859]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:07.859]                     {
[17:40:07.859]                       inherits <- base::inherits
[17:40:07.859]                       invokeRestart <- base::invokeRestart
[17:40:07.859]                       is.null <- base::is.null
[17:40:07.859]                       muffled <- FALSE
[17:40:07.859]                       if (inherits(cond, "message")) {
[17:40:07.859]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:07.859]                         if (muffled) 
[17:40:07.859]                           invokeRestart("muffleMessage")
[17:40:07.859]                       }
[17:40:07.859]                       else if (inherits(cond, "warning")) {
[17:40:07.859]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:07.859]                         if (muffled) 
[17:40:07.859]                           invokeRestart("muffleWarning")
[17:40:07.859]                       }
[17:40:07.859]                       else if (inherits(cond, "condition")) {
[17:40:07.859]                         if (!is.null(pattern)) {
[17:40:07.859]                           computeRestarts <- base::computeRestarts
[17:40:07.859]                           grepl <- base::grepl
[17:40:07.859]                           restarts <- computeRestarts(cond)
[17:40:07.859]                           for (restart in restarts) {
[17:40:07.859]                             name <- restart$name
[17:40:07.859]                             if (is.null(name)) 
[17:40:07.859]                               next
[17:40:07.859]                             if (!grepl(pattern, name)) 
[17:40:07.859]                               next
[17:40:07.859]                             invokeRestart(restart)
[17:40:07.859]                             muffled <- TRUE
[17:40:07.859]                             break
[17:40:07.859]                           }
[17:40:07.859]                         }
[17:40:07.859]                       }
[17:40:07.859]                       invisible(muffled)
[17:40:07.859]                     }
[17:40:07.859]                     muffleCondition(cond, pattern = "^muffle")
[17:40:07.859]                   }
[17:40:07.859]                 }
[17:40:07.859]                 else {
[17:40:07.859]                   if (TRUE) {
[17:40:07.859]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:07.859]                     {
[17:40:07.859]                       inherits <- base::inherits
[17:40:07.859]                       invokeRestart <- base::invokeRestart
[17:40:07.859]                       is.null <- base::is.null
[17:40:07.859]                       muffled <- FALSE
[17:40:07.859]                       if (inherits(cond, "message")) {
[17:40:07.859]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:07.859]                         if (muffled) 
[17:40:07.859]                           invokeRestart("muffleMessage")
[17:40:07.859]                       }
[17:40:07.859]                       else if (inherits(cond, "warning")) {
[17:40:07.859]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:07.859]                         if (muffled) 
[17:40:07.859]                           invokeRestart("muffleWarning")
[17:40:07.859]                       }
[17:40:07.859]                       else if (inherits(cond, "condition")) {
[17:40:07.859]                         if (!is.null(pattern)) {
[17:40:07.859]                           computeRestarts <- base::computeRestarts
[17:40:07.859]                           grepl <- base::grepl
[17:40:07.859]                           restarts <- computeRestarts(cond)
[17:40:07.859]                           for (restart in restarts) {
[17:40:07.859]                             name <- restart$name
[17:40:07.859]                             if (is.null(name)) 
[17:40:07.859]                               next
[17:40:07.859]                             if (!grepl(pattern, name)) 
[17:40:07.859]                               next
[17:40:07.859]                             invokeRestart(restart)
[17:40:07.859]                             muffled <- TRUE
[17:40:07.859]                             break
[17:40:07.859]                           }
[17:40:07.859]                         }
[17:40:07.859]                       }
[17:40:07.859]                       invisible(muffled)
[17:40:07.859]                     }
[17:40:07.859]                     muffleCondition(cond, pattern = "^muffle")
[17:40:07.859]                   }
[17:40:07.859]                 }
[17:40:07.859]             }
[17:40:07.859]         }))
[17:40:07.859]     }, error = function(ex) {
[17:40:07.859]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:07.859]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:07.859]                 ...future.rng), started = ...future.startTime, 
[17:40:07.859]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:07.859]             version = "1.8"), class = "FutureResult")
[17:40:07.859]     }, finally = {
[17:40:07.859]         if (!identical(...future.workdir, getwd())) 
[17:40:07.859]             setwd(...future.workdir)
[17:40:07.859]         {
[17:40:07.859]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:07.859]                 ...future.oldOptions$nwarnings <- NULL
[17:40:07.859]             }
[17:40:07.859]             base::options(...future.oldOptions)
[17:40:07.859]             if (.Platform$OS.type == "windows") {
[17:40:07.859]                 old_names <- names(...future.oldEnvVars)
[17:40:07.859]                 envs <- base::Sys.getenv()
[17:40:07.859]                 names <- names(envs)
[17:40:07.859]                 common <- intersect(names, old_names)
[17:40:07.859]                 added <- setdiff(names, old_names)
[17:40:07.859]                 removed <- setdiff(old_names, names)
[17:40:07.859]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:07.859]                   envs[common]]
[17:40:07.859]                 NAMES <- toupper(changed)
[17:40:07.859]                 args <- list()
[17:40:07.859]                 for (kk in seq_along(NAMES)) {
[17:40:07.859]                   name <- changed[[kk]]
[17:40:07.859]                   NAME <- NAMES[[kk]]
[17:40:07.859]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:07.859]                     next
[17:40:07.859]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:07.859]                 }
[17:40:07.859]                 NAMES <- toupper(added)
[17:40:07.859]                 for (kk in seq_along(NAMES)) {
[17:40:07.859]                   name <- added[[kk]]
[17:40:07.859]                   NAME <- NAMES[[kk]]
[17:40:07.859]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:07.859]                     next
[17:40:07.859]                   args[[name]] <- ""
[17:40:07.859]                 }
[17:40:07.859]                 NAMES <- toupper(removed)
[17:40:07.859]                 for (kk in seq_along(NAMES)) {
[17:40:07.859]                   name <- removed[[kk]]
[17:40:07.859]                   NAME <- NAMES[[kk]]
[17:40:07.859]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:07.859]                     next
[17:40:07.859]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:07.859]                 }
[17:40:07.859]                 if (length(args) > 0) 
[17:40:07.859]                   base::do.call(base::Sys.setenv, args = args)
[17:40:07.859]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:07.859]             }
[17:40:07.859]             else {
[17:40:07.859]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:07.859]             }
[17:40:07.859]             {
[17:40:07.859]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:07.859]                   0L) {
[17:40:07.859]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:07.859]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:07.859]                   base::options(opts)
[17:40:07.859]                 }
[17:40:07.859]                 {
[17:40:07.859]                   {
[17:40:07.859]                     NULL
[17:40:07.859]                     RNGkind("Mersenne-Twister")
[17:40:07.859]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:40:07.859]                       inherits = FALSE)
[17:40:07.859]                   }
[17:40:07.859]                   options(future.plan = NULL)
[17:40:07.859]                   if (is.na(NA_character_)) 
[17:40:07.859]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:07.859]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:07.859]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:40:07.859]                     .init = FALSE)
[17:40:07.859]                 }
[17:40:07.859]             }
[17:40:07.859]         }
[17:40:07.859]     })
[17:40:07.859]     if (TRUE) {
[17:40:07.859]         base::sink(type = "output", split = FALSE)
[17:40:07.859]         if (TRUE) {
[17:40:07.859]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:07.859]         }
[17:40:07.859]         else {
[17:40:07.859]             ...future.result["stdout"] <- base::list(NULL)
[17:40:07.859]         }
[17:40:07.859]         base::close(...future.stdout)
[17:40:07.859]         ...future.stdout <- NULL
[17:40:07.859]     }
[17:40:07.859]     ...future.result$conditions <- ...future.conditions
[17:40:07.859]     ...future.result$finished <- base::Sys.time()
[17:40:07.859]     ...future.result
[17:40:07.859] }
[17:40:07.861] assign_globals() ...
[17:40:07.861] List of 1
[17:40:07.861]  $ ii: int 1
[17:40:07.861]  - attr(*, "where")=List of 1
[17:40:07.861]   ..$ ii:<environment: R_EmptyEnv> 
[17:40:07.861]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:07.861]  - attr(*, "resolved")= logi FALSE
[17:40:07.861]  - attr(*, "total_size")= num 56
[17:40:07.863] - copied ‘ii’ to environment
[17:40:07.863] assign_globals() ... done
[17:40:07.863] plan(): Setting new future strategy stack:
[17:40:07.863] List of future strategies:
[17:40:07.863] 1. sequential:
[17:40:07.863]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:40:07.863]    - tweaked: FALSE
[17:40:07.863]    - call: NULL
[17:40:07.864] plan(): nbrOfWorkers() = 1
[17:40:07.865] plan(): Setting new future strategy stack:
[17:40:07.865] List of future strategies:
[17:40:07.865] 1. multicore:
[17:40:07.865]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:40:07.865]    - tweaked: FALSE
[17:40:07.865]    - call: plan(multicore)
[17:40:07.868] plan(): nbrOfWorkers() = 1
[17:40:07.868] SequentialFuture started (and completed)
 - Creating multicore future #2 ...
[17:40:07.871] getGlobalsAndPackages() ...
[17:40:07.871] Searching for globals...
[17:40:07.872] - globals found: [2] ‘{’, ‘ii’
[17:40:07.872] Searching for globals ... DONE
[17:40:07.872] Resolving globals: FALSE
[17:40:07.872] The total size of the 1 globals is 56 bytes (56 bytes)
[17:40:07.873] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[17:40:07.873] - globals: [1] ‘ii’
[17:40:07.873] 
[17:40:07.873] getGlobalsAndPackages() ... DONE
[17:40:07.873] Packages needed by the future expression (n = 0): <none>
[17:40:07.873] Packages needed by future strategies (n = 0): <none>
[17:40:07.874] {
[17:40:07.874]     {
[17:40:07.874]         {
[17:40:07.874]             ...future.startTime <- base::Sys.time()
[17:40:07.874]             {
[17:40:07.874]                 {
[17:40:07.874]                   {
[17:40:07.874]                     base::local({
[17:40:07.874]                       has_future <- base::requireNamespace("future", 
[17:40:07.874]                         quietly = TRUE)
[17:40:07.874]                       if (has_future) {
[17:40:07.874]                         ns <- base::getNamespace("future")
[17:40:07.874]                         version <- ns[[".package"]][["version"]]
[17:40:07.874]                         if (is.null(version)) 
[17:40:07.874]                           version <- utils::packageVersion("future")
[17:40:07.874]                       }
[17:40:07.874]                       else {
[17:40:07.874]                         version <- NULL
[17:40:07.874]                       }
[17:40:07.874]                       if (!has_future || version < "1.8.0") {
[17:40:07.874]                         info <- base::c(r_version = base::gsub("R version ", 
[17:40:07.874]                           "", base::R.version$version.string), 
[17:40:07.874]                           platform = base::sprintf("%s (%s-bit)", 
[17:40:07.874]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:07.874]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:07.874]                             "release", "version")], collapse = " "), 
[17:40:07.874]                           hostname = base::Sys.info()[["nodename"]])
[17:40:07.874]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:40:07.874]                           info)
[17:40:07.874]                         info <- base::paste(info, collapse = "; ")
[17:40:07.874]                         if (!has_future) {
[17:40:07.874]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:07.874]                             info)
[17:40:07.874]                         }
[17:40:07.874]                         else {
[17:40:07.874]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:07.874]                             info, version)
[17:40:07.874]                         }
[17:40:07.874]                         base::stop(msg)
[17:40:07.874]                       }
[17:40:07.874]                     })
[17:40:07.874]                   }
[17:40:07.874]                   ...future.strategy.old <- future::plan("list")
[17:40:07.874]                   options(future.plan = NULL)
[17:40:07.874]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:07.874]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:07.874]                 }
[17:40:07.874]                 ...future.workdir <- getwd()
[17:40:07.874]             }
[17:40:07.874]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:07.874]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:07.874]         }
[17:40:07.874]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:07.874]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:40:07.874]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:07.874]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:07.874]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:07.874]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:07.874]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:07.874]             base::names(...future.oldOptions))
[17:40:07.874]     }
[17:40:07.874]     if (FALSE) {
[17:40:07.874]     }
[17:40:07.874]     else {
[17:40:07.874]         if (TRUE) {
[17:40:07.874]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:07.874]                 open = "w")
[17:40:07.874]         }
[17:40:07.874]         else {
[17:40:07.874]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:07.874]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:07.874]         }
[17:40:07.874]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:07.874]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:07.874]             base::sink(type = "output", split = FALSE)
[17:40:07.874]             base::close(...future.stdout)
[17:40:07.874]         }, add = TRUE)
[17:40:07.874]     }
[17:40:07.874]     ...future.frame <- base::sys.nframe()
[17:40:07.874]     ...future.conditions <- base::list()
[17:40:07.874]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:07.874]     if (FALSE) {
[17:40:07.874]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:07.874]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:07.874]     }
[17:40:07.874]     ...future.result <- base::tryCatch({
[17:40:07.874]         base::withCallingHandlers({
[17:40:07.874]             ...future.value <- base::withVisible(base::local({
[17:40:07.874]                 ii
[17:40:07.874]             }))
[17:40:07.874]             future::FutureResult(value = ...future.value$value, 
[17:40:07.874]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:07.874]                   ...future.rng), globalenv = if (FALSE) 
[17:40:07.874]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:07.874]                     ...future.globalenv.names))
[17:40:07.874]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:07.874]         }, condition = base::local({
[17:40:07.874]             c <- base::c
[17:40:07.874]             inherits <- base::inherits
[17:40:07.874]             invokeRestart <- base::invokeRestart
[17:40:07.874]             length <- base::length
[17:40:07.874]             list <- base::list
[17:40:07.874]             seq.int <- base::seq.int
[17:40:07.874]             signalCondition <- base::signalCondition
[17:40:07.874]             sys.calls <- base::sys.calls
[17:40:07.874]             `[[` <- base::`[[`
[17:40:07.874]             `+` <- base::`+`
[17:40:07.874]             `<<-` <- base::`<<-`
[17:40:07.874]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:07.874]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:07.874]                   3L)]
[17:40:07.874]             }
[17:40:07.874]             function(cond) {
[17:40:07.874]                 is_error <- inherits(cond, "error")
[17:40:07.874]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:07.874]                   NULL)
[17:40:07.874]                 if (is_error) {
[17:40:07.874]                   sessionInformation <- function() {
[17:40:07.874]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:07.874]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:07.874]                       search = base::search(), system = base::Sys.info())
[17:40:07.874]                   }
[17:40:07.874]                   ...future.conditions[[length(...future.conditions) + 
[17:40:07.874]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:07.874]                     cond$call), session = sessionInformation(), 
[17:40:07.874]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:07.874]                   signalCondition(cond)
[17:40:07.874]                 }
[17:40:07.874]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:07.874]                 "immediateCondition"))) {
[17:40:07.874]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:07.874]                   ...future.conditions[[length(...future.conditions) + 
[17:40:07.874]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:07.874]                   if (TRUE && !signal) {
[17:40:07.874]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:07.874]                     {
[17:40:07.874]                       inherits <- base::inherits
[17:40:07.874]                       invokeRestart <- base::invokeRestart
[17:40:07.874]                       is.null <- base::is.null
[17:40:07.874]                       muffled <- FALSE
[17:40:07.874]                       if (inherits(cond, "message")) {
[17:40:07.874]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:07.874]                         if (muffled) 
[17:40:07.874]                           invokeRestart("muffleMessage")
[17:40:07.874]                       }
[17:40:07.874]                       else if (inherits(cond, "warning")) {
[17:40:07.874]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:07.874]                         if (muffled) 
[17:40:07.874]                           invokeRestart("muffleWarning")
[17:40:07.874]                       }
[17:40:07.874]                       else if (inherits(cond, "condition")) {
[17:40:07.874]                         if (!is.null(pattern)) {
[17:40:07.874]                           computeRestarts <- base::computeRestarts
[17:40:07.874]                           grepl <- base::grepl
[17:40:07.874]                           restarts <- computeRestarts(cond)
[17:40:07.874]                           for (restart in restarts) {
[17:40:07.874]                             name <- restart$name
[17:40:07.874]                             if (is.null(name)) 
[17:40:07.874]                               next
[17:40:07.874]                             if (!grepl(pattern, name)) 
[17:40:07.874]                               next
[17:40:07.874]                             invokeRestart(restart)
[17:40:07.874]                             muffled <- TRUE
[17:40:07.874]                             break
[17:40:07.874]                           }
[17:40:07.874]                         }
[17:40:07.874]                       }
[17:40:07.874]                       invisible(muffled)
[17:40:07.874]                     }
[17:40:07.874]                     muffleCondition(cond, pattern = "^muffle")
[17:40:07.874]                   }
[17:40:07.874]                 }
[17:40:07.874]                 else {
[17:40:07.874]                   if (TRUE) {
[17:40:07.874]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:07.874]                     {
[17:40:07.874]                       inherits <- base::inherits
[17:40:07.874]                       invokeRestart <- base::invokeRestart
[17:40:07.874]                       is.null <- base::is.null
[17:40:07.874]                       muffled <- FALSE
[17:40:07.874]                       if (inherits(cond, "message")) {
[17:40:07.874]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:07.874]                         if (muffled) 
[17:40:07.874]                           invokeRestart("muffleMessage")
[17:40:07.874]                       }
[17:40:07.874]                       else if (inherits(cond, "warning")) {
[17:40:07.874]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:07.874]                         if (muffled) 
[17:40:07.874]                           invokeRestart("muffleWarning")
[17:40:07.874]                       }
[17:40:07.874]                       else if (inherits(cond, "condition")) {
[17:40:07.874]                         if (!is.null(pattern)) {
[17:40:07.874]                           computeRestarts <- base::computeRestarts
[17:40:07.874]                           grepl <- base::grepl
[17:40:07.874]                           restarts <- computeRestarts(cond)
[17:40:07.874]                           for (restart in restarts) {
[17:40:07.874]                             name <- restart$name
[17:40:07.874]                             if (is.null(name)) 
[17:40:07.874]                               next
[17:40:07.874]                             if (!grepl(pattern, name)) 
[17:40:07.874]                               next
[17:40:07.874]                             invokeRestart(restart)
[17:40:07.874]                             muffled <- TRUE
[17:40:07.874]                             break
[17:40:07.874]                           }
[17:40:07.874]                         }
[17:40:07.874]                       }
[17:40:07.874]                       invisible(muffled)
[17:40:07.874]                     }
[17:40:07.874]                     muffleCondition(cond, pattern = "^muffle")
[17:40:07.874]                   }
[17:40:07.874]                 }
[17:40:07.874]             }
[17:40:07.874]         }))
[17:40:07.874]     }, error = function(ex) {
[17:40:07.874]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:07.874]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:07.874]                 ...future.rng), started = ...future.startTime, 
[17:40:07.874]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:07.874]             version = "1.8"), class = "FutureResult")
[17:40:07.874]     }, finally = {
[17:40:07.874]         if (!identical(...future.workdir, getwd())) 
[17:40:07.874]             setwd(...future.workdir)
[17:40:07.874]         {
[17:40:07.874]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:07.874]                 ...future.oldOptions$nwarnings <- NULL
[17:40:07.874]             }
[17:40:07.874]             base::options(...future.oldOptions)
[17:40:07.874]             if (.Platform$OS.type == "windows") {
[17:40:07.874]                 old_names <- names(...future.oldEnvVars)
[17:40:07.874]                 envs <- base::Sys.getenv()
[17:40:07.874]                 names <- names(envs)
[17:40:07.874]                 common <- intersect(names, old_names)
[17:40:07.874]                 added <- setdiff(names, old_names)
[17:40:07.874]                 removed <- setdiff(old_names, names)
[17:40:07.874]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:07.874]                   envs[common]]
[17:40:07.874]                 NAMES <- toupper(changed)
[17:40:07.874]                 args <- list()
[17:40:07.874]                 for (kk in seq_along(NAMES)) {
[17:40:07.874]                   name <- changed[[kk]]
[17:40:07.874]                   NAME <- NAMES[[kk]]
[17:40:07.874]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:07.874]                     next
[17:40:07.874]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:07.874]                 }
[17:40:07.874]                 NAMES <- toupper(added)
[17:40:07.874]                 for (kk in seq_along(NAMES)) {
[17:40:07.874]                   name <- added[[kk]]
[17:40:07.874]                   NAME <- NAMES[[kk]]
[17:40:07.874]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:07.874]                     next
[17:40:07.874]                   args[[name]] <- ""
[17:40:07.874]                 }
[17:40:07.874]                 NAMES <- toupper(removed)
[17:40:07.874]                 for (kk in seq_along(NAMES)) {
[17:40:07.874]                   name <- removed[[kk]]
[17:40:07.874]                   NAME <- NAMES[[kk]]
[17:40:07.874]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:07.874]                     next
[17:40:07.874]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:07.874]                 }
[17:40:07.874]                 if (length(args) > 0) 
[17:40:07.874]                   base::do.call(base::Sys.setenv, args = args)
[17:40:07.874]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:07.874]             }
[17:40:07.874]             else {
[17:40:07.874]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:07.874]             }
[17:40:07.874]             {
[17:40:07.874]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:07.874]                   0L) {
[17:40:07.874]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:07.874]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:07.874]                   base::options(opts)
[17:40:07.874]                 }
[17:40:07.874]                 {
[17:40:07.874]                   {
[17:40:07.874]                     NULL
[17:40:07.874]                     RNGkind("Mersenne-Twister")
[17:40:07.874]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:40:07.874]                       inherits = FALSE)
[17:40:07.874]                   }
[17:40:07.874]                   options(future.plan = NULL)
[17:40:07.874]                   if (is.na(NA_character_)) 
[17:40:07.874]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:07.874]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:07.874]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:40:07.874]                     .init = FALSE)
[17:40:07.874]                 }
[17:40:07.874]             }
[17:40:07.874]         }
[17:40:07.874]     })
[17:40:07.874]     if (TRUE) {
[17:40:07.874]         base::sink(type = "output", split = FALSE)
[17:40:07.874]         if (TRUE) {
[17:40:07.874]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:07.874]         }
[17:40:07.874]         else {
[17:40:07.874]             ...future.result["stdout"] <- base::list(NULL)
[17:40:07.874]         }
[17:40:07.874]         base::close(...future.stdout)
[17:40:07.874]         ...future.stdout <- NULL
[17:40:07.874]     }
[17:40:07.874]     ...future.result$conditions <- ...future.conditions
[17:40:07.874]     ...future.result$finished <- base::Sys.time()
[17:40:07.874]     ...future.result
[17:40:07.874] }
[17:40:07.875] assign_globals() ...
[17:40:07.875] List of 1
[17:40:07.875]  $ ii: int 2
[17:40:07.875]  - attr(*, "where")=List of 1
[17:40:07.875]   ..$ ii:<environment: R_EmptyEnv> 
[17:40:07.875]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:07.875]  - attr(*, "resolved")= logi FALSE
[17:40:07.875]  - attr(*, "total_size")= num 56
[17:40:07.877] - copied ‘ii’ to environment
[17:40:07.878] assign_globals() ... done
[17:40:07.878] plan(): Setting new future strategy stack:
[17:40:07.878] List of future strategies:
[17:40:07.878] 1. sequential:
[17:40:07.878]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:40:07.878]    - tweaked: FALSE
[17:40:07.878]    - call: NULL
[17:40:07.878] plan(): nbrOfWorkers() = 1
[17:40:07.879] plan(): Setting new future strategy stack:
[17:40:07.879] List of future strategies:
[17:40:07.879] 1. multicore:
[17:40:07.879]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:40:07.879]    - tweaked: FALSE
[17:40:07.879]    - call: plan(multicore)
[17:40:07.882] plan(): nbrOfWorkers() = 1
[17:40:07.883] SequentialFuture started (and completed)
 - Creating multicore future #3 ...
[17:40:07.886] getGlobalsAndPackages() ...
[17:40:07.886] Searching for globals...
[17:40:07.886] - globals found: [2] ‘{’, ‘ii’
[17:40:07.887] Searching for globals ... DONE
[17:40:07.887] Resolving globals: FALSE
[17:40:07.887] The total size of the 1 globals is 56 bytes (56 bytes)
[17:40:07.887] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[17:40:07.887] - globals: [1] ‘ii’
[17:40:07.888] 
[17:40:07.888] getGlobalsAndPackages() ... DONE
[17:40:07.888] Packages needed by the future expression (n = 0): <none>
[17:40:07.888] Packages needed by future strategies (n = 0): <none>
[17:40:07.888] {
[17:40:07.888]     {
[17:40:07.888]         {
[17:40:07.888]             ...future.startTime <- base::Sys.time()
[17:40:07.888]             {
[17:40:07.888]                 {
[17:40:07.888]                   {
[17:40:07.888]                     base::local({
[17:40:07.888]                       has_future <- base::requireNamespace("future", 
[17:40:07.888]                         quietly = TRUE)
[17:40:07.888]                       if (has_future) {
[17:40:07.888]                         ns <- base::getNamespace("future")
[17:40:07.888]                         version <- ns[[".package"]][["version"]]
[17:40:07.888]                         if (is.null(version)) 
[17:40:07.888]                           version <- utils::packageVersion("future")
[17:40:07.888]                       }
[17:40:07.888]                       else {
[17:40:07.888]                         version <- NULL
[17:40:07.888]                       }
[17:40:07.888]                       if (!has_future || version < "1.8.0") {
[17:40:07.888]                         info <- base::c(r_version = base::gsub("R version ", 
[17:40:07.888]                           "", base::R.version$version.string), 
[17:40:07.888]                           platform = base::sprintf("%s (%s-bit)", 
[17:40:07.888]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:07.888]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:07.888]                             "release", "version")], collapse = " "), 
[17:40:07.888]                           hostname = base::Sys.info()[["nodename"]])
[17:40:07.888]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:40:07.888]                           info)
[17:40:07.888]                         info <- base::paste(info, collapse = "; ")
[17:40:07.888]                         if (!has_future) {
[17:40:07.888]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:07.888]                             info)
[17:40:07.888]                         }
[17:40:07.888]                         else {
[17:40:07.888]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:07.888]                             info, version)
[17:40:07.888]                         }
[17:40:07.888]                         base::stop(msg)
[17:40:07.888]                       }
[17:40:07.888]                     })
[17:40:07.888]                   }
[17:40:07.888]                   ...future.strategy.old <- future::plan("list")
[17:40:07.888]                   options(future.plan = NULL)
[17:40:07.888]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:07.888]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:07.888]                 }
[17:40:07.888]                 ...future.workdir <- getwd()
[17:40:07.888]             }
[17:40:07.888]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:07.888]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:07.888]         }
[17:40:07.888]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:07.888]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:40:07.888]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:07.888]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:07.888]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:07.888]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:07.888]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:07.888]             base::names(...future.oldOptions))
[17:40:07.888]     }
[17:40:07.888]     if (FALSE) {
[17:40:07.888]     }
[17:40:07.888]     else {
[17:40:07.888]         if (TRUE) {
[17:40:07.888]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:07.888]                 open = "w")
[17:40:07.888]         }
[17:40:07.888]         else {
[17:40:07.888]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:07.888]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:07.888]         }
[17:40:07.888]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:07.888]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:07.888]             base::sink(type = "output", split = FALSE)
[17:40:07.888]             base::close(...future.stdout)
[17:40:07.888]         }, add = TRUE)
[17:40:07.888]     }
[17:40:07.888]     ...future.frame <- base::sys.nframe()
[17:40:07.888]     ...future.conditions <- base::list()
[17:40:07.888]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:07.888]     if (FALSE) {
[17:40:07.888]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:07.888]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:07.888]     }
[17:40:07.888]     ...future.result <- base::tryCatch({
[17:40:07.888]         base::withCallingHandlers({
[17:40:07.888]             ...future.value <- base::withVisible(base::local({
[17:40:07.888]                 ii
[17:40:07.888]             }))
[17:40:07.888]             future::FutureResult(value = ...future.value$value, 
[17:40:07.888]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:07.888]                   ...future.rng), globalenv = if (FALSE) 
[17:40:07.888]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:07.888]                     ...future.globalenv.names))
[17:40:07.888]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:07.888]         }, condition = base::local({
[17:40:07.888]             c <- base::c
[17:40:07.888]             inherits <- base::inherits
[17:40:07.888]             invokeRestart <- base::invokeRestart
[17:40:07.888]             length <- base::length
[17:40:07.888]             list <- base::list
[17:40:07.888]             seq.int <- base::seq.int
[17:40:07.888]             signalCondition <- base::signalCondition
[17:40:07.888]             sys.calls <- base::sys.calls
[17:40:07.888]             `[[` <- base::`[[`
[17:40:07.888]             `+` <- base::`+`
[17:40:07.888]             `<<-` <- base::`<<-`
[17:40:07.888]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:07.888]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:07.888]                   3L)]
[17:40:07.888]             }
[17:40:07.888]             function(cond) {
[17:40:07.888]                 is_error <- inherits(cond, "error")
[17:40:07.888]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:07.888]                   NULL)
[17:40:07.888]                 if (is_error) {
[17:40:07.888]                   sessionInformation <- function() {
[17:40:07.888]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:07.888]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:07.888]                       search = base::search(), system = base::Sys.info())
[17:40:07.888]                   }
[17:40:07.888]                   ...future.conditions[[length(...future.conditions) + 
[17:40:07.888]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:07.888]                     cond$call), session = sessionInformation(), 
[17:40:07.888]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:07.888]                   signalCondition(cond)
[17:40:07.888]                 }
[17:40:07.888]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:07.888]                 "immediateCondition"))) {
[17:40:07.888]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:07.888]                   ...future.conditions[[length(...future.conditions) + 
[17:40:07.888]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:07.888]                   if (TRUE && !signal) {
[17:40:07.888]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:07.888]                     {
[17:40:07.888]                       inherits <- base::inherits
[17:40:07.888]                       invokeRestart <- base::invokeRestart
[17:40:07.888]                       is.null <- base::is.null
[17:40:07.888]                       muffled <- FALSE
[17:40:07.888]                       if (inherits(cond, "message")) {
[17:40:07.888]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:07.888]                         if (muffled) 
[17:40:07.888]                           invokeRestart("muffleMessage")
[17:40:07.888]                       }
[17:40:07.888]                       else if (inherits(cond, "warning")) {
[17:40:07.888]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:07.888]                         if (muffled) 
[17:40:07.888]                           invokeRestart("muffleWarning")
[17:40:07.888]                       }
[17:40:07.888]                       else if (inherits(cond, "condition")) {
[17:40:07.888]                         if (!is.null(pattern)) {
[17:40:07.888]                           computeRestarts <- base::computeRestarts
[17:40:07.888]                           grepl <- base::grepl
[17:40:07.888]                           restarts <- computeRestarts(cond)
[17:40:07.888]                           for (restart in restarts) {
[17:40:07.888]                             name <- restart$name
[17:40:07.888]                             if (is.null(name)) 
[17:40:07.888]                               next
[17:40:07.888]                             if (!grepl(pattern, name)) 
[17:40:07.888]                               next
[17:40:07.888]                             invokeRestart(restart)
[17:40:07.888]                             muffled <- TRUE
[17:40:07.888]                             break
[17:40:07.888]                           }
[17:40:07.888]                         }
[17:40:07.888]                       }
[17:40:07.888]                       invisible(muffled)
[17:40:07.888]                     }
[17:40:07.888]                     muffleCondition(cond, pattern = "^muffle")
[17:40:07.888]                   }
[17:40:07.888]                 }
[17:40:07.888]                 else {
[17:40:07.888]                   if (TRUE) {
[17:40:07.888]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:07.888]                     {
[17:40:07.888]                       inherits <- base::inherits
[17:40:07.888]                       invokeRestart <- base::invokeRestart
[17:40:07.888]                       is.null <- base::is.null
[17:40:07.888]                       muffled <- FALSE
[17:40:07.888]                       if (inherits(cond, "message")) {
[17:40:07.888]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:07.888]                         if (muffled) 
[17:40:07.888]                           invokeRestart("muffleMessage")
[17:40:07.888]                       }
[17:40:07.888]                       else if (inherits(cond, "warning")) {
[17:40:07.888]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:07.888]                         if (muffled) 
[17:40:07.888]                           invokeRestart("muffleWarning")
[17:40:07.888]                       }
[17:40:07.888]                       else if (inherits(cond, "condition")) {
[17:40:07.888]                         if (!is.null(pattern)) {
[17:40:07.888]                           computeRestarts <- base::computeRestarts
[17:40:07.888]                           grepl <- base::grepl
[17:40:07.888]                           restarts <- computeRestarts(cond)
[17:40:07.888]                           for (restart in restarts) {
[17:40:07.888]                             name <- restart$name
[17:40:07.888]                             if (is.null(name)) 
[17:40:07.888]                               next
[17:40:07.888]                             if (!grepl(pattern, name)) 
[17:40:07.888]                               next
[17:40:07.888]                             invokeRestart(restart)
[17:40:07.888]                             muffled <- TRUE
[17:40:07.888]                             break
[17:40:07.888]                           }
[17:40:07.888]                         }
[17:40:07.888]                       }
[17:40:07.888]                       invisible(muffled)
[17:40:07.888]                     }
[17:40:07.888]                     muffleCondition(cond, pattern = "^muffle")
[17:40:07.888]                   }
[17:40:07.888]                 }
[17:40:07.888]             }
[17:40:07.888]         }))
[17:40:07.888]     }, error = function(ex) {
[17:40:07.888]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:07.888]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:07.888]                 ...future.rng), started = ...future.startTime, 
[17:40:07.888]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:07.888]             version = "1.8"), class = "FutureResult")
[17:40:07.888]     }, finally = {
[17:40:07.888]         if (!identical(...future.workdir, getwd())) 
[17:40:07.888]             setwd(...future.workdir)
[17:40:07.888]         {
[17:40:07.888]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:07.888]                 ...future.oldOptions$nwarnings <- NULL
[17:40:07.888]             }
[17:40:07.888]             base::options(...future.oldOptions)
[17:40:07.888]             if (.Platform$OS.type == "windows") {
[17:40:07.888]                 old_names <- names(...future.oldEnvVars)
[17:40:07.888]                 envs <- base::Sys.getenv()
[17:40:07.888]                 names <- names(envs)
[17:40:07.888]                 common <- intersect(names, old_names)
[17:40:07.888]                 added <- setdiff(names, old_names)
[17:40:07.888]                 removed <- setdiff(old_names, names)
[17:40:07.888]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:07.888]                   envs[common]]
[17:40:07.888]                 NAMES <- toupper(changed)
[17:40:07.888]                 args <- list()
[17:40:07.888]                 for (kk in seq_along(NAMES)) {
[17:40:07.888]                   name <- changed[[kk]]
[17:40:07.888]                   NAME <- NAMES[[kk]]
[17:40:07.888]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:07.888]                     next
[17:40:07.888]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:07.888]                 }
[17:40:07.888]                 NAMES <- toupper(added)
[17:40:07.888]                 for (kk in seq_along(NAMES)) {
[17:40:07.888]                   name <- added[[kk]]
[17:40:07.888]                   NAME <- NAMES[[kk]]
[17:40:07.888]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:07.888]                     next
[17:40:07.888]                   args[[name]] <- ""
[17:40:07.888]                 }
[17:40:07.888]                 NAMES <- toupper(removed)
[17:40:07.888]                 for (kk in seq_along(NAMES)) {
[17:40:07.888]                   name <- removed[[kk]]
[17:40:07.888]                   NAME <- NAMES[[kk]]
[17:40:07.888]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:07.888]                     next
[17:40:07.888]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:07.888]                 }
[17:40:07.888]                 if (length(args) > 0) 
[17:40:07.888]                   base::do.call(base::Sys.setenv, args = args)
[17:40:07.888]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:07.888]             }
[17:40:07.888]             else {
[17:40:07.888]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:07.888]             }
[17:40:07.888]             {
[17:40:07.888]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:07.888]                   0L) {
[17:40:07.888]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:07.888]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:07.888]                   base::options(opts)
[17:40:07.888]                 }
[17:40:07.888]                 {
[17:40:07.888]                   {
[17:40:07.888]                     NULL
[17:40:07.888]                     RNGkind("Mersenne-Twister")
[17:40:07.888]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:40:07.888]                       inherits = FALSE)
[17:40:07.888]                   }
[17:40:07.888]                   options(future.plan = NULL)
[17:40:07.888]                   if (is.na(NA_character_)) 
[17:40:07.888]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:07.888]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:07.888]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:40:07.888]                     .init = FALSE)
[17:40:07.888]                 }
[17:40:07.888]             }
[17:40:07.888]         }
[17:40:07.888]     })
[17:40:07.888]     if (TRUE) {
[17:40:07.888]         base::sink(type = "output", split = FALSE)
[17:40:07.888]         if (TRUE) {
[17:40:07.888]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:07.888]         }
[17:40:07.888]         else {
[17:40:07.888]             ...future.result["stdout"] <- base::list(NULL)
[17:40:07.888]         }
[17:40:07.888]         base::close(...future.stdout)
[17:40:07.888]         ...future.stdout <- NULL
[17:40:07.888]     }
[17:40:07.888]     ...future.result$conditions <- ...future.conditions
[17:40:07.888]     ...future.result$finished <- base::Sys.time()
[17:40:07.888]     ...future.result
[17:40:07.888] }
[17:40:07.890] assign_globals() ...
[17:40:07.890] List of 1
[17:40:07.890]  $ ii: int 3
[17:40:07.890]  - attr(*, "where")=List of 1
[17:40:07.890]   ..$ ii:<environment: R_EmptyEnv> 
[17:40:07.890]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:07.890]  - attr(*, "resolved")= logi FALSE
[17:40:07.890]  - attr(*, "total_size")= num 56
[17:40:07.892] - copied ‘ii’ to environment
[17:40:07.892] assign_globals() ... done
[17:40:07.892] plan(): Setting new future strategy stack:
[17:40:07.892] List of future strategies:
[17:40:07.892] 1. sequential:
[17:40:07.892]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:40:07.892]    - tweaked: FALSE
[17:40:07.892]    - call: NULL
[17:40:07.893] plan(): nbrOfWorkers() = 1
[17:40:07.894] plan(): Setting new future strategy stack:
[17:40:07.894] List of future strategies:
[17:40:07.894] 1. multicore:
[17:40:07.894]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:40:07.894]    - tweaked: FALSE
[17:40:07.894]    - call: plan(multicore)
[17:40:07.897] plan(): nbrOfWorkers() = 1
[17:40:07.897] SequentialFuture started (and completed)
 - Creating multicore future #4 ...
[17:40:07.900] getGlobalsAndPackages() ...
[17:40:07.900] Searching for globals...
[17:40:07.903] - globals found: [2] ‘{’, ‘ii’
[17:40:07.903] Searching for globals ... DONE
[17:40:07.903] Resolving globals: FALSE
[17:40:07.903] The total size of the 1 globals is 56 bytes (56 bytes)
[17:40:07.903] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[17:40:07.904] - globals: [1] ‘ii’
[17:40:07.904] 
[17:40:07.904] getGlobalsAndPackages() ... DONE
[17:40:07.904] Packages needed by the future expression (n = 0): <none>
[17:40:07.904] Packages needed by future strategies (n = 0): <none>
[17:40:07.905] {
[17:40:07.905]     {
[17:40:07.905]         {
[17:40:07.905]             ...future.startTime <- base::Sys.time()
[17:40:07.905]             {
[17:40:07.905]                 {
[17:40:07.905]                   {
[17:40:07.905]                     base::local({
[17:40:07.905]                       has_future <- base::requireNamespace("future", 
[17:40:07.905]                         quietly = TRUE)
[17:40:07.905]                       if (has_future) {
[17:40:07.905]                         ns <- base::getNamespace("future")
[17:40:07.905]                         version <- ns[[".package"]][["version"]]
[17:40:07.905]                         if (is.null(version)) 
[17:40:07.905]                           version <- utils::packageVersion("future")
[17:40:07.905]                       }
[17:40:07.905]                       else {
[17:40:07.905]                         version <- NULL
[17:40:07.905]                       }
[17:40:07.905]                       if (!has_future || version < "1.8.0") {
[17:40:07.905]                         info <- base::c(r_version = base::gsub("R version ", 
[17:40:07.905]                           "", base::R.version$version.string), 
[17:40:07.905]                           platform = base::sprintf("%s (%s-bit)", 
[17:40:07.905]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:07.905]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:07.905]                             "release", "version")], collapse = " "), 
[17:40:07.905]                           hostname = base::Sys.info()[["nodename"]])
[17:40:07.905]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:40:07.905]                           info)
[17:40:07.905]                         info <- base::paste(info, collapse = "; ")
[17:40:07.905]                         if (!has_future) {
[17:40:07.905]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:07.905]                             info)
[17:40:07.905]                         }
[17:40:07.905]                         else {
[17:40:07.905]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:07.905]                             info, version)
[17:40:07.905]                         }
[17:40:07.905]                         base::stop(msg)
[17:40:07.905]                       }
[17:40:07.905]                     })
[17:40:07.905]                   }
[17:40:07.905]                   ...future.strategy.old <- future::plan("list")
[17:40:07.905]                   options(future.plan = NULL)
[17:40:07.905]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:07.905]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:07.905]                 }
[17:40:07.905]                 ...future.workdir <- getwd()
[17:40:07.905]             }
[17:40:07.905]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:07.905]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:07.905]         }
[17:40:07.905]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:07.905]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:40:07.905]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:07.905]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:07.905]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:07.905]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:07.905]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:07.905]             base::names(...future.oldOptions))
[17:40:07.905]     }
[17:40:07.905]     if (FALSE) {
[17:40:07.905]     }
[17:40:07.905]     else {
[17:40:07.905]         if (TRUE) {
[17:40:07.905]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:07.905]                 open = "w")
[17:40:07.905]         }
[17:40:07.905]         else {
[17:40:07.905]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:07.905]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:07.905]         }
[17:40:07.905]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:07.905]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:07.905]             base::sink(type = "output", split = FALSE)
[17:40:07.905]             base::close(...future.stdout)
[17:40:07.905]         }, add = TRUE)
[17:40:07.905]     }
[17:40:07.905]     ...future.frame <- base::sys.nframe()
[17:40:07.905]     ...future.conditions <- base::list()
[17:40:07.905]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:07.905]     if (FALSE) {
[17:40:07.905]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:07.905]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:07.905]     }
[17:40:07.905]     ...future.result <- base::tryCatch({
[17:40:07.905]         base::withCallingHandlers({
[17:40:07.905]             ...future.value <- base::withVisible(base::local({
[17:40:07.905]                 ii
[17:40:07.905]             }))
[17:40:07.905]             future::FutureResult(value = ...future.value$value, 
[17:40:07.905]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:07.905]                   ...future.rng), globalenv = if (FALSE) 
[17:40:07.905]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:07.905]                     ...future.globalenv.names))
[17:40:07.905]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:07.905]         }, condition = base::local({
[17:40:07.905]             c <- base::c
[17:40:07.905]             inherits <- base::inherits
[17:40:07.905]             invokeRestart <- base::invokeRestart
[17:40:07.905]             length <- base::length
[17:40:07.905]             list <- base::list
[17:40:07.905]             seq.int <- base::seq.int
[17:40:07.905]             signalCondition <- base::signalCondition
[17:40:07.905]             sys.calls <- base::sys.calls
[17:40:07.905]             `[[` <- base::`[[`
[17:40:07.905]             `+` <- base::`+`
[17:40:07.905]             `<<-` <- base::`<<-`
[17:40:07.905]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:07.905]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:07.905]                   3L)]
[17:40:07.905]             }
[17:40:07.905]             function(cond) {
[17:40:07.905]                 is_error <- inherits(cond, "error")
[17:40:07.905]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:07.905]                   NULL)
[17:40:07.905]                 if (is_error) {
[17:40:07.905]                   sessionInformation <- function() {
[17:40:07.905]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:07.905]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:07.905]                       search = base::search(), system = base::Sys.info())
[17:40:07.905]                   }
[17:40:07.905]                   ...future.conditions[[length(...future.conditions) + 
[17:40:07.905]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:07.905]                     cond$call), session = sessionInformation(), 
[17:40:07.905]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:07.905]                   signalCondition(cond)
[17:40:07.905]                 }
[17:40:07.905]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:07.905]                 "immediateCondition"))) {
[17:40:07.905]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:07.905]                   ...future.conditions[[length(...future.conditions) + 
[17:40:07.905]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:07.905]                   if (TRUE && !signal) {
[17:40:07.905]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:07.905]                     {
[17:40:07.905]                       inherits <- base::inherits
[17:40:07.905]                       invokeRestart <- base::invokeRestart
[17:40:07.905]                       is.null <- base::is.null
[17:40:07.905]                       muffled <- FALSE
[17:40:07.905]                       if (inherits(cond, "message")) {
[17:40:07.905]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:07.905]                         if (muffled) 
[17:40:07.905]                           invokeRestart("muffleMessage")
[17:40:07.905]                       }
[17:40:07.905]                       else if (inherits(cond, "warning")) {
[17:40:07.905]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:07.905]                         if (muffled) 
[17:40:07.905]                           invokeRestart("muffleWarning")
[17:40:07.905]                       }
[17:40:07.905]                       else if (inherits(cond, "condition")) {
[17:40:07.905]                         if (!is.null(pattern)) {
[17:40:07.905]                           computeRestarts <- base::computeRestarts
[17:40:07.905]                           grepl <- base::grepl
[17:40:07.905]                           restarts <- computeRestarts(cond)
[17:40:07.905]                           for (restart in restarts) {
[17:40:07.905]                             name <- restart$name
[17:40:07.905]                             if (is.null(name)) 
[17:40:07.905]                               next
[17:40:07.905]                             if (!grepl(pattern, name)) 
[17:40:07.905]                               next
[17:40:07.905]                             invokeRestart(restart)
[17:40:07.905]                             muffled <- TRUE
[17:40:07.905]                             break
[17:40:07.905]                           }
[17:40:07.905]                         }
[17:40:07.905]                       }
[17:40:07.905]                       invisible(muffled)
[17:40:07.905]                     }
[17:40:07.905]                     muffleCondition(cond, pattern = "^muffle")
[17:40:07.905]                   }
[17:40:07.905]                 }
[17:40:07.905]                 else {
[17:40:07.905]                   if (TRUE) {
[17:40:07.905]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:07.905]                     {
[17:40:07.905]                       inherits <- base::inherits
[17:40:07.905]                       invokeRestart <- base::invokeRestart
[17:40:07.905]                       is.null <- base::is.null
[17:40:07.905]                       muffled <- FALSE
[17:40:07.905]                       if (inherits(cond, "message")) {
[17:40:07.905]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:07.905]                         if (muffled) 
[17:40:07.905]                           invokeRestart("muffleMessage")
[17:40:07.905]                       }
[17:40:07.905]                       else if (inherits(cond, "warning")) {
[17:40:07.905]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:07.905]                         if (muffled) 
[17:40:07.905]                           invokeRestart("muffleWarning")
[17:40:07.905]                       }
[17:40:07.905]                       else if (inherits(cond, "condition")) {
[17:40:07.905]                         if (!is.null(pattern)) {
[17:40:07.905]                           computeRestarts <- base::computeRestarts
[17:40:07.905]                           grepl <- base::grepl
[17:40:07.905]                           restarts <- computeRestarts(cond)
[17:40:07.905]                           for (restart in restarts) {
[17:40:07.905]                             name <- restart$name
[17:40:07.905]                             if (is.null(name)) 
[17:40:07.905]                               next
[17:40:07.905]                             if (!grepl(pattern, name)) 
[17:40:07.905]                               next
[17:40:07.905]                             invokeRestart(restart)
[17:40:07.905]                             muffled <- TRUE
[17:40:07.905]                             break
[17:40:07.905]                           }
[17:40:07.905]                         }
[17:40:07.905]                       }
[17:40:07.905]                       invisible(muffled)
[17:40:07.905]                     }
[17:40:07.905]                     muffleCondition(cond, pattern = "^muffle")
[17:40:07.905]                   }
[17:40:07.905]                 }
[17:40:07.905]             }
[17:40:07.905]         }))
[17:40:07.905]     }, error = function(ex) {
[17:40:07.905]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:07.905]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:07.905]                 ...future.rng), started = ...future.startTime, 
[17:40:07.905]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:07.905]             version = "1.8"), class = "FutureResult")
[17:40:07.905]     }, finally = {
[17:40:07.905]         if (!identical(...future.workdir, getwd())) 
[17:40:07.905]             setwd(...future.workdir)
[17:40:07.905]         {
[17:40:07.905]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:07.905]                 ...future.oldOptions$nwarnings <- NULL
[17:40:07.905]             }
[17:40:07.905]             base::options(...future.oldOptions)
[17:40:07.905]             if (.Platform$OS.type == "windows") {
[17:40:07.905]                 old_names <- names(...future.oldEnvVars)
[17:40:07.905]                 envs <- base::Sys.getenv()
[17:40:07.905]                 names <- names(envs)
[17:40:07.905]                 common <- intersect(names, old_names)
[17:40:07.905]                 added <- setdiff(names, old_names)
[17:40:07.905]                 removed <- setdiff(old_names, names)
[17:40:07.905]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:07.905]                   envs[common]]
[17:40:07.905]                 NAMES <- toupper(changed)
[17:40:07.905]                 args <- list()
[17:40:07.905]                 for (kk in seq_along(NAMES)) {
[17:40:07.905]                   name <- changed[[kk]]
[17:40:07.905]                   NAME <- NAMES[[kk]]
[17:40:07.905]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:07.905]                     next
[17:40:07.905]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:07.905]                 }
[17:40:07.905]                 NAMES <- toupper(added)
[17:40:07.905]                 for (kk in seq_along(NAMES)) {
[17:40:07.905]                   name <- added[[kk]]
[17:40:07.905]                   NAME <- NAMES[[kk]]
[17:40:07.905]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:07.905]                     next
[17:40:07.905]                   args[[name]] <- ""
[17:40:07.905]                 }
[17:40:07.905]                 NAMES <- toupper(removed)
[17:40:07.905]                 for (kk in seq_along(NAMES)) {
[17:40:07.905]                   name <- removed[[kk]]
[17:40:07.905]                   NAME <- NAMES[[kk]]
[17:40:07.905]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:07.905]                     next
[17:40:07.905]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:07.905]                 }
[17:40:07.905]                 if (length(args) > 0) 
[17:40:07.905]                   base::do.call(base::Sys.setenv, args = args)
[17:40:07.905]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:07.905]             }
[17:40:07.905]             else {
[17:40:07.905]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:07.905]             }
[17:40:07.905]             {
[17:40:07.905]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:07.905]                   0L) {
[17:40:07.905]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:07.905]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:07.905]                   base::options(opts)
[17:40:07.905]                 }
[17:40:07.905]                 {
[17:40:07.905]                   {
[17:40:07.905]                     NULL
[17:40:07.905]                     RNGkind("Mersenne-Twister")
[17:40:07.905]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:40:07.905]                       inherits = FALSE)
[17:40:07.905]                   }
[17:40:07.905]                   options(future.plan = NULL)
[17:40:07.905]                   if (is.na(NA_character_)) 
[17:40:07.905]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:07.905]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:07.905]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:40:07.905]                     .init = FALSE)
[17:40:07.905]                 }
[17:40:07.905]             }
[17:40:07.905]         }
[17:40:07.905]     })
[17:40:07.905]     if (TRUE) {
[17:40:07.905]         base::sink(type = "output", split = FALSE)
[17:40:07.905]         if (TRUE) {
[17:40:07.905]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:07.905]         }
[17:40:07.905]         else {
[17:40:07.905]             ...future.result["stdout"] <- base::list(NULL)
[17:40:07.905]         }
[17:40:07.905]         base::close(...future.stdout)
[17:40:07.905]         ...future.stdout <- NULL
[17:40:07.905]     }
[17:40:07.905]     ...future.result$conditions <- ...future.conditions
[17:40:07.905]     ...future.result$finished <- base::Sys.time()
[17:40:07.905]     ...future.result
[17:40:07.905] }
[17:40:07.906] assign_globals() ...
[17:40:07.906] List of 1
[17:40:07.906]  $ ii: int 4
[17:40:07.906]  - attr(*, "where")=List of 1
[17:40:07.906]   ..$ ii:<environment: R_EmptyEnv> 
[17:40:07.906]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:07.906]  - attr(*, "resolved")= logi FALSE
[17:40:07.906]  - attr(*, "total_size")= num 56
[17:40:07.908] - copied ‘ii’ to environment
[17:40:07.908] assign_globals() ... done
[17:40:07.909] plan(): Setting new future strategy stack:
[17:40:07.909] List of future strategies:
[17:40:07.909] 1. sequential:
[17:40:07.909]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:40:07.909]    - tweaked: FALSE
[17:40:07.909]    - call: NULL
[17:40:07.909] plan(): nbrOfWorkers() = 1
[17:40:07.910] plan(): Setting new future strategy stack:
[17:40:07.910] List of future strategies:
[17:40:07.910] 1. multicore:
[17:40:07.910]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:40:07.910]    - tweaked: FALSE
[17:40:07.910]    - call: plan(multicore)
[17:40:07.913] plan(): nbrOfWorkers() = 1
[17:40:07.913] SequentialFuture started (and completed)
 - Resolving 4 multicore futures
*** multicore(..., globals = TRUE) and errors
[17:40:07.917] getGlobalsAndPackages() ...
[17:40:07.917] Searching for globals...
[17:40:07.918] - globals found: [2] ‘{’, ‘stop’
[17:40:07.918] Searching for globals ... DONE
[17:40:07.918] Resolving globals: FALSE
[17:40:07.918] 
[17:40:07.918] 
[17:40:07.919] getGlobalsAndPackages() ... DONE
[17:40:07.919] Packages needed by the future expression (n = 0): <none>
[17:40:07.919] Packages needed by future strategies (n = 0): <none>
[17:40:07.919] {
[17:40:07.919]     {
[17:40:07.919]         {
[17:40:07.919]             ...future.startTime <- base::Sys.time()
[17:40:07.919]             {
[17:40:07.919]                 {
[17:40:07.919]                   {
[17:40:07.919]                     base::local({
[17:40:07.919]                       has_future <- base::requireNamespace("future", 
[17:40:07.919]                         quietly = TRUE)
[17:40:07.919]                       if (has_future) {
[17:40:07.919]                         ns <- base::getNamespace("future")
[17:40:07.919]                         version <- ns[[".package"]][["version"]]
[17:40:07.919]                         if (is.null(version)) 
[17:40:07.919]                           version <- utils::packageVersion("future")
[17:40:07.919]                       }
[17:40:07.919]                       else {
[17:40:07.919]                         version <- NULL
[17:40:07.919]                       }
[17:40:07.919]                       if (!has_future || version < "1.8.0") {
[17:40:07.919]                         info <- base::c(r_version = base::gsub("R version ", 
[17:40:07.919]                           "", base::R.version$version.string), 
[17:40:07.919]                           platform = base::sprintf("%s (%s-bit)", 
[17:40:07.919]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:07.919]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:07.919]                             "release", "version")], collapse = " "), 
[17:40:07.919]                           hostname = base::Sys.info()[["nodename"]])
[17:40:07.919]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:40:07.919]                           info)
[17:40:07.919]                         info <- base::paste(info, collapse = "; ")
[17:40:07.919]                         if (!has_future) {
[17:40:07.919]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:07.919]                             info)
[17:40:07.919]                         }
[17:40:07.919]                         else {
[17:40:07.919]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:07.919]                             info, version)
[17:40:07.919]                         }
[17:40:07.919]                         base::stop(msg)
[17:40:07.919]                       }
[17:40:07.919]                     })
[17:40:07.919]                   }
[17:40:07.919]                   ...future.strategy.old <- future::plan("list")
[17:40:07.919]                   options(future.plan = NULL)
[17:40:07.919]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:07.919]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:07.919]                 }
[17:40:07.919]                 ...future.workdir <- getwd()
[17:40:07.919]             }
[17:40:07.919]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:07.919]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:07.919]         }
[17:40:07.919]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:07.919]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:40:07.919]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:07.919]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:07.919]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:07.919]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:07.919]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:07.919]             base::names(...future.oldOptions))
[17:40:07.919]     }
[17:40:07.919]     if (FALSE) {
[17:40:07.919]     }
[17:40:07.919]     else {
[17:40:07.919]         if (TRUE) {
[17:40:07.919]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:07.919]                 open = "w")
[17:40:07.919]         }
[17:40:07.919]         else {
[17:40:07.919]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:07.919]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:07.919]         }
[17:40:07.919]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:07.919]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:07.919]             base::sink(type = "output", split = FALSE)
[17:40:07.919]             base::close(...future.stdout)
[17:40:07.919]         }, add = TRUE)
[17:40:07.919]     }
[17:40:07.919]     ...future.frame <- base::sys.nframe()
[17:40:07.919]     ...future.conditions <- base::list()
[17:40:07.919]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:07.919]     if (FALSE) {
[17:40:07.919]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:07.919]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:07.919]     }
[17:40:07.919]     ...future.result <- base::tryCatch({
[17:40:07.919]         base::withCallingHandlers({
[17:40:07.919]             ...future.value <- base::withVisible(base::local({
[17:40:07.919]                 stop("Whoops!")
[17:40:07.919]                 1
[17:40:07.919]             }))
[17:40:07.919]             future::FutureResult(value = ...future.value$value, 
[17:40:07.919]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:07.919]                   ...future.rng), globalenv = if (FALSE) 
[17:40:07.919]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:07.919]                     ...future.globalenv.names))
[17:40:07.919]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:07.919]         }, condition = base::local({
[17:40:07.919]             c <- base::c
[17:40:07.919]             inherits <- base::inherits
[17:40:07.919]             invokeRestart <- base::invokeRestart
[17:40:07.919]             length <- base::length
[17:40:07.919]             list <- base::list
[17:40:07.919]             seq.int <- base::seq.int
[17:40:07.919]             signalCondition <- base::signalCondition
[17:40:07.919]             sys.calls <- base::sys.calls
[17:40:07.919]             `[[` <- base::`[[`
[17:40:07.919]             `+` <- base::`+`
[17:40:07.919]             `<<-` <- base::`<<-`
[17:40:07.919]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:07.919]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:07.919]                   3L)]
[17:40:07.919]             }
[17:40:07.919]             function(cond) {
[17:40:07.919]                 is_error <- inherits(cond, "error")
[17:40:07.919]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:07.919]                   NULL)
[17:40:07.919]                 if (is_error) {
[17:40:07.919]                   sessionInformation <- function() {
[17:40:07.919]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:07.919]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:07.919]                       search = base::search(), system = base::Sys.info())
[17:40:07.919]                   }
[17:40:07.919]                   ...future.conditions[[length(...future.conditions) + 
[17:40:07.919]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:07.919]                     cond$call), session = sessionInformation(), 
[17:40:07.919]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:07.919]                   signalCondition(cond)
[17:40:07.919]                 }
[17:40:07.919]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:07.919]                 "immediateCondition"))) {
[17:40:07.919]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:07.919]                   ...future.conditions[[length(...future.conditions) + 
[17:40:07.919]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:07.919]                   if (TRUE && !signal) {
[17:40:07.919]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:07.919]                     {
[17:40:07.919]                       inherits <- base::inherits
[17:40:07.919]                       invokeRestart <- base::invokeRestart
[17:40:07.919]                       is.null <- base::is.null
[17:40:07.919]                       muffled <- FALSE
[17:40:07.919]                       if (inherits(cond, "message")) {
[17:40:07.919]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:07.919]                         if (muffled) 
[17:40:07.919]                           invokeRestart("muffleMessage")
[17:40:07.919]                       }
[17:40:07.919]                       else if (inherits(cond, "warning")) {
[17:40:07.919]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:07.919]                         if (muffled) 
[17:40:07.919]                           invokeRestart("muffleWarning")
[17:40:07.919]                       }
[17:40:07.919]                       else if (inherits(cond, "condition")) {
[17:40:07.919]                         if (!is.null(pattern)) {
[17:40:07.919]                           computeRestarts <- base::computeRestarts
[17:40:07.919]                           grepl <- base::grepl
[17:40:07.919]                           restarts <- computeRestarts(cond)
[17:40:07.919]                           for (restart in restarts) {
[17:40:07.919]                             name <- restart$name
[17:40:07.919]                             if (is.null(name)) 
[17:40:07.919]                               next
[17:40:07.919]                             if (!grepl(pattern, name)) 
[17:40:07.919]                               next
[17:40:07.919]                             invokeRestart(restart)
[17:40:07.919]                             muffled <- TRUE
[17:40:07.919]                             break
[17:40:07.919]                           }
[17:40:07.919]                         }
[17:40:07.919]                       }
[17:40:07.919]                       invisible(muffled)
[17:40:07.919]                     }
[17:40:07.919]                     muffleCondition(cond, pattern = "^muffle")
[17:40:07.919]                   }
[17:40:07.919]                 }
[17:40:07.919]                 else {
[17:40:07.919]                   if (TRUE) {
[17:40:07.919]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:07.919]                     {
[17:40:07.919]                       inherits <- base::inherits
[17:40:07.919]                       invokeRestart <- base::invokeRestart
[17:40:07.919]                       is.null <- base::is.null
[17:40:07.919]                       muffled <- FALSE
[17:40:07.919]                       if (inherits(cond, "message")) {
[17:40:07.919]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:07.919]                         if (muffled) 
[17:40:07.919]                           invokeRestart("muffleMessage")
[17:40:07.919]                       }
[17:40:07.919]                       else if (inherits(cond, "warning")) {
[17:40:07.919]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:07.919]                         if (muffled) 
[17:40:07.919]                           invokeRestart("muffleWarning")
[17:40:07.919]                       }
[17:40:07.919]                       else if (inherits(cond, "condition")) {
[17:40:07.919]                         if (!is.null(pattern)) {
[17:40:07.919]                           computeRestarts <- base::computeRestarts
[17:40:07.919]                           grepl <- base::grepl
[17:40:07.919]                           restarts <- computeRestarts(cond)
[17:40:07.919]                           for (restart in restarts) {
[17:40:07.919]                             name <- restart$name
[17:40:07.919]                             if (is.null(name)) 
[17:40:07.919]                               next
[17:40:07.919]                             if (!grepl(pattern, name)) 
[17:40:07.919]                               next
[17:40:07.919]                             invokeRestart(restart)
[17:40:07.919]                             muffled <- TRUE
[17:40:07.919]                             break
[17:40:07.919]                           }
[17:40:07.919]                         }
[17:40:07.919]                       }
[17:40:07.919]                       invisible(muffled)
[17:40:07.919]                     }
[17:40:07.919]                     muffleCondition(cond, pattern = "^muffle")
[17:40:07.919]                   }
[17:40:07.919]                 }
[17:40:07.919]             }
[17:40:07.919]         }))
[17:40:07.919]     }, error = function(ex) {
[17:40:07.919]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:07.919]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:07.919]                 ...future.rng), started = ...future.startTime, 
[17:40:07.919]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:07.919]             version = "1.8"), class = "FutureResult")
[17:40:07.919]     }, finally = {
[17:40:07.919]         if (!identical(...future.workdir, getwd())) 
[17:40:07.919]             setwd(...future.workdir)
[17:40:07.919]         {
[17:40:07.919]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:07.919]                 ...future.oldOptions$nwarnings <- NULL
[17:40:07.919]             }
[17:40:07.919]             base::options(...future.oldOptions)
[17:40:07.919]             if (.Platform$OS.type == "windows") {
[17:40:07.919]                 old_names <- names(...future.oldEnvVars)
[17:40:07.919]                 envs <- base::Sys.getenv()
[17:40:07.919]                 names <- names(envs)
[17:40:07.919]                 common <- intersect(names, old_names)
[17:40:07.919]                 added <- setdiff(names, old_names)
[17:40:07.919]                 removed <- setdiff(old_names, names)
[17:40:07.919]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:07.919]                   envs[common]]
[17:40:07.919]                 NAMES <- toupper(changed)
[17:40:07.919]                 args <- list()
[17:40:07.919]                 for (kk in seq_along(NAMES)) {
[17:40:07.919]                   name <- changed[[kk]]
[17:40:07.919]                   NAME <- NAMES[[kk]]
[17:40:07.919]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:07.919]                     next
[17:40:07.919]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:07.919]                 }
[17:40:07.919]                 NAMES <- toupper(added)
[17:40:07.919]                 for (kk in seq_along(NAMES)) {
[17:40:07.919]                   name <- added[[kk]]
[17:40:07.919]                   NAME <- NAMES[[kk]]
[17:40:07.919]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:07.919]                     next
[17:40:07.919]                   args[[name]] <- ""
[17:40:07.919]                 }
[17:40:07.919]                 NAMES <- toupper(removed)
[17:40:07.919]                 for (kk in seq_along(NAMES)) {
[17:40:07.919]                   name <- removed[[kk]]
[17:40:07.919]                   NAME <- NAMES[[kk]]
[17:40:07.919]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:07.919]                     next
[17:40:07.919]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:07.919]                 }
[17:40:07.919]                 if (length(args) > 0) 
[17:40:07.919]                   base::do.call(base::Sys.setenv, args = args)
[17:40:07.919]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:07.919]             }
[17:40:07.919]             else {
[17:40:07.919]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:07.919]             }
[17:40:07.919]             {
[17:40:07.919]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:07.919]                   0L) {
[17:40:07.919]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:07.919]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:07.919]                   base::options(opts)
[17:40:07.919]                 }
[17:40:07.919]                 {
[17:40:07.919]                   {
[17:40:07.919]                     NULL
[17:40:07.919]                     RNGkind("Mersenne-Twister")
[17:40:07.919]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:40:07.919]                       inherits = FALSE)
[17:40:07.919]                   }
[17:40:07.919]                   options(future.plan = NULL)
[17:40:07.919]                   if (is.na(NA_character_)) 
[17:40:07.919]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:07.919]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:07.919]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:40:07.919]                     .init = FALSE)
[17:40:07.919]                 }
[17:40:07.919]             }
[17:40:07.919]         }
[17:40:07.919]     })
[17:40:07.919]     if (TRUE) {
[17:40:07.919]         base::sink(type = "output", split = FALSE)
[17:40:07.919]         if (TRUE) {
[17:40:07.919]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:07.919]         }
[17:40:07.919]         else {
[17:40:07.919]             ...future.result["stdout"] <- base::list(NULL)
[17:40:07.919]         }
[17:40:07.919]         base::close(...future.stdout)
[17:40:07.919]         ...future.stdout <- NULL
[17:40:07.919]     }
[17:40:07.919]     ...future.result$conditions <- ...future.conditions
[17:40:07.919]     ...future.result$finished <- base::Sys.time()
[17:40:07.919]     ...future.result
[17:40:07.919] }
[17:40:07.921] plan(): Setting new future strategy stack:
[17:40:07.921] List of future strategies:
[17:40:07.921] 1. sequential:
[17:40:07.921]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:40:07.921]    - tweaked: FALSE
[17:40:07.921]    - call: NULL
[17:40:07.922] plan(): nbrOfWorkers() = 1
[17:40:07.922] plan(): Setting new future strategy stack:
[17:40:07.922] List of future strategies:
[17:40:07.922] 1. multicore:
[17:40:07.922]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:40:07.922]    - tweaked: FALSE
[17:40:07.922]    - call: plan(multicore)
[17:40:07.926] plan(): nbrOfWorkers() = 1
[17:40:07.926] SequentialFuture started (and completed)
[17:40:07.926] signalConditions() ...
[17:40:07.926]  - include = ‘immediateCondition’
[17:40:07.926]  - exclude = 
[17:40:07.926]  - resignal = FALSE
[17:40:07.926]  - Number of conditions: 1
[17:40:07.927] signalConditions() ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    stop("Whoops!")
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 0 bytes of class ‘NULL’
Conditions captured: [n=1] ‘simpleError’
Early signaling: FALSE
Owner process: 33d8ef81-66c6-1c88-ad16-a15781be79ec
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:40:07.927] signalConditions() ...
[17:40:07.927]  - include = ‘immediateCondition’
[17:40:07.927]  - exclude = 
[17:40:07.927]  - resignal = FALSE
[17:40:07.927]  - Number of conditions: 1
[17:40:07.928] signalConditions() ... done
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[17:40:07.928] signalConditions() ...
[17:40:07.928]  - include = ‘immediateCondition’
[17:40:07.928]  - exclude = 
[17:40:07.928]  - resignal = FALSE
[17:40:07.928]  - Number of conditions: 1
[17:40:07.928] signalConditions() ... done
[17:40:07.928] Future state: ‘finished’
[17:40:07.928] signalConditions() ...
[17:40:07.929]  - include = ‘condition’
[17:40:07.929]  - exclude = ‘immediateCondition’
[17:40:07.929]  - resignal = TRUE
[17:40:07.929]  - Number of conditions: 1
[17:40:07.929]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:40:07.929] signalConditions() ... done
[1] "Error in eval(quote({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[17:40:07.929] signalConditions() ...
[17:40:07.929]  - include = ‘immediateCondition’
[17:40:07.930]  - exclude = 
[17:40:07.930]  - resignal = FALSE
[17:40:07.930]  - Number of conditions: 1
[17:40:07.930] signalConditions() ... done
[17:40:07.930] Future state: ‘finished’
[17:40:07.930] signalConditions() ...
[17:40:07.930]  - include = ‘condition’
[17:40:07.930]  - exclude = ‘immediateCondition’
[17:40:07.930]  - resignal = TRUE
[17:40:07.930]  - Number of conditions: 1
[17:40:07.930]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:40:07.931] signalConditions() ... done
[1] "Error in eval(quote({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[17:40:07.934] getGlobalsAndPackages() ...
[17:40:07.934] Searching for globals...
[17:40:07.935] - globals found: [5] ‘{’, ‘stop’, ‘structure’, ‘list’, ‘c’
[17:40:07.935] Searching for globals ... DONE
[17:40:07.935] Resolving globals: FALSE
[17:40:07.936] 
[17:40:07.936] 
[17:40:07.936] getGlobalsAndPackages() ... DONE
[17:40:07.936] Packages needed by the future expression (n = 0): <none>
[17:40:07.936] Packages needed by future strategies (n = 0): <none>
[17:40:07.937] {
[17:40:07.937]     {
[17:40:07.937]         {
[17:40:07.937]             ...future.startTime <- base::Sys.time()
[17:40:07.937]             {
[17:40:07.937]                 {
[17:40:07.937]                   {
[17:40:07.937]                     base::local({
[17:40:07.937]                       has_future <- base::requireNamespace("future", 
[17:40:07.937]                         quietly = TRUE)
[17:40:07.937]                       if (has_future) {
[17:40:07.937]                         ns <- base::getNamespace("future")
[17:40:07.937]                         version <- ns[[".package"]][["version"]]
[17:40:07.937]                         if (is.null(version)) 
[17:40:07.937]                           version <- utils::packageVersion("future")
[17:40:07.937]                       }
[17:40:07.937]                       else {
[17:40:07.937]                         version <- NULL
[17:40:07.937]                       }
[17:40:07.937]                       if (!has_future || version < "1.8.0") {
[17:40:07.937]                         info <- base::c(r_version = base::gsub("R version ", 
[17:40:07.937]                           "", base::R.version$version.string), 
[17:40:07.937]                           platform = base::sprintf("%s (%s-bit)", 
[17:40:07.937]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:07.937]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:07.937]                             "release", "version")], collapse = " "), 
[17:40:07.937]                           hostname = base::Sys.info()[["nodename"]])
[17:40:07.937]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:40:07.937]                           info)
[17:40:07.937]                         info <- base::paste(info, collapse = "; ")
[17:40:07.937]                         if (!has_future) {
[17:40:07.937]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:07.937]                             info)
[17:40:07.937]                         }
[17:40:07.937]                         else {
[17:40:07.937]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:07.937]                             info, version)
[17:40:07.937]                         }
[17:40:07.937]                         base::stop(msg)
[17:40:07.937]                       }
[17:40:07.937]                     })
[17:40:07.937]                   }
[17:40:07.937]                   ...future.strategy.old <- future::plan("list")
[17:40:07.937]                   options(future.plan = NULL)
[17:40:07.937]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:07.937]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:07.937]                 }
[17:40:07.937]                 ...future.workdir <- getwd()
[17:40:07.937]             }
[17:40:07.937]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:07.937]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:07.937]         }
[17:40:07.937]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:07.937]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:40:07.937]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:07.937]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:07.937]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:07.937]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:07.937]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:07.937]             base::names(...future.oldOptions))
[17:40:07.937]     }
[17:40:07.937]     if (FALSE) {
[17:40:07.937]     }
[17:40:07.937]     else {
[17:40:07.937]         if (TRUE) {
[17:40:07.937]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:07.937]                 open = "w")
[17:40:07.937]         }
[17:40:07.937]         else {
[17:40:07.937]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:07.937]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:07.937]         }
[17:40:07.937]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:07.937]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:07.937]             base::sink(type = "output", split = FALSE)
[17:40:07.937]             base::close(...future.stdout)
[17:40:07.937]         }, add = TRUE)
[17:40:07.937]     }
[17:40:07.937]     ...future.frame <- base::sys.nframe()
[17:40:07.937]     ...future.conditions <- base::list()
[17:40:07.937]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:07.937]     if (FALSE) {
[17:40:07.937]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:07.937]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:07.937]     }
[17:40:07.937]     ...future.result <- base::tryCatch({
[17:40:07.937]         base::withCallingHandlers({
[17:40:07.937]             ...future.value <- base::withVisible(base::local({
[17:40:07.937]                 stop(structure(list(message = "boom"), class = c("MyError", 
[17:40:07.937]                   "error", "condition")))
[17:40:07.937]             }))
[17:40:07.937]             future::FutureResult(value = ...future.value$value, 
[17:40:07.937]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:07.937]                   ...future.rng), globalenv = if (FALSE) 
[17:40:07.937]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:07.937]                     ...future.globalenv.names))
[17:40:07.937]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:07.937]         }, condition = base::local({
[17:40:07.937]             c <- base::c
[17:40:07.937]             inherits <- base::inherits
[17:40:07.937]             invokeRestart <- base::invokeRestart
[17:40:07.937]             length <- base::length
[17:40:07.937]             list <- base::list
[17:40:07.937]             seq.int <- base::seq.int
[17:40:07.937]             signalCondition <- base::signalCondition
[17:40:07.937]             sys.calls <- base::sys.calls
[17:40:07.937]             `[[` <- base::`[[`
[17:40:07.937]             `+` <- base::`+`
[17:40:07.937]             `<<-` <- base::`<<-`
[17:40:07.937]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:07.937]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:07.937]                   3L)]
[17:40:07.937]             }
[17:40:07.937]             function(cond) {
[17:40:07.937]                 is_error <- inherits(cond, "error")
[17:40:07.937]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:07.937]                   NULL)
[17:40:07.937]                 if (is_error) {
[17:40:07.937]                   sessionInformation <- function() {
[17:40:07.937]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:07.937]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:07.937]                       search = base::search(), system = base::Sys.info())
[17:40:07.937]                   }
[17:40:07.937]                   ...future.conditions[[length(...future.conditions) + 
[17:40:07.937]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:07.937]                     cond$call), session = sessionInformation(), 
[17:40:07.937]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:07.937]                   signalCondition(cond)
[17:40:07.937]                 }
[17:40:07.937]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:07.937]                 "immediateCondition"))) {
[17:40:07.937]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:07.937]                   ...future.conditions[[length(...future.conditions) + 
[17:40:07.937]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:07.937]                   if (TRUE && !signal) {
[17:40:07.937]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:07.937]                     {
[17:40:07.937]                       inherits <- base::inherits
[17:40:07.937]                       invokeRestart <- base::invokeRestart
[17:40:07.937]                       is.null <- base::is.null
[17:40:07.937]                       muffled <- FALSE
[17:40:07.937]                       if (inherits(cond, "message")) {
[17:40:07.937]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:07.937]                         if (muffled) 
[17:40:07.937]                           invokeRestart("muffleMessage")
[17:40:07.937]                       }
[17:40:07.937]                       else if (inherits(cond, "warning")) {
[17:40:07.937]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:07.937]                         if (muffled) 
[17:40:07.937]                           invokeRestart("muffleWarning")
[17:40:07.937]                       }
[17:40:07.937]                       else if (inherits(cond, "condition")) {
[17:40:07.937]                         if (!is.null(pattern)) {
[17:40:07.937]                           computeRestarts <- base::computeRestarts
[17:40:07.937]                           grepl <- base::grepl
[17:40:07.937]                           restarts <- computeRestarts(cond)
[17:40:07.937]                           for (restart in restarts) {
[17:40:07.937]                             name <- restart$name
[17:40:07.937]                             if (is.null(name)) 
[17:40:07.937]                               next
[17:40:07.937]                             if (!grepl(pattern, name)) 
[17:40:07.937]                               next
[17:40:07.937]                             invokeRestart(restart)
[17:40:07.937]                             muffled <- TRUE
[17:40:07.937]                             break
[17:40:07.937]                           }
[17:40:07.937]                         }
[17:40:07.937]                       }
[17:40:07.937]                       invisible(muffled)
[17:40:07.937]                     }
[17:40:07.937]                     muffleCondition(cond, pattern = "^muffle")
[17:40:07.937]                   }
[17:40:07.937]                 }
[17:40:07.937]                 else {
[17:40:07.937]                   if (TRUE) {
[17:40:07.937]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:07.937]                     {
[17:40:07.937]                       inherits <- base::inherits
[17:40:07.937]                       invokeRestart <- base::invokeRestart
[17:40:07.937]                       is.null <- base::is.null
[17:40:07.937]                       muffled <- FALSE
[17:40:07.937]                       if (inherits(cond, "message")) {
[17:40:07.937]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:07.937]                         if (muffled) 
[17:40:07.937]                           invokeRestart("muffleMessage")
[17:40:07.937]                       }
[17:40:07.937]                       else if (inherits(cond, "warning")) {
[17:40:07.937]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:07.937]                         if (muffled) 
[17:40:07.937]                           invokeRestart("muffleWarning")
[17:40:07.937]                       }
[17:40:07.937]                       else if (inherits(cond, "condition")) {
[17:40:07.937]                         if (!is.null(pattern)) {
[17:40:07.937]                           computeRestarts <- base::computeRestarts
[17:40:07.937]                           grepl <- base::grepl
[17:40:07.937]                           restarts <- computeRestarts(cond)
[17:40:07.937]                           for (restart in restarts) {
[17:40:07.937]                             name <- restart$name
[17:40:07.937]                             if (is.null(name)) 
[17:40:07.937]                               next
[17:40:07.937]                             if (!grepl(pattern, name)) 
[17:40:07.937]                               next
[17:40:07.937]                             invokeRestart(restart)
[17:40:07.937]                             muffled <- TRUE
[17:40:07.937]                             break
[17:40:07.937]                           }
[17:40:07.937]                         }
[17:40:07.937]                       }
[17:40:07.937]                       invisible(muffled)
[17:40:07.937]                     }
[17:40:07.937]                     muffleCondition(cond, pattern = "^muffle")
[17:40:07.937]                   }
[17:40:07.937]                 }
[17:40:07.937]             }
[17:40:07.937]         }))
[17:40:07.937]     }, error = function(ex) {
[17:40:07.937]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:07.937]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:07.937]                 ...future.rng), started = ...future.startTime, 
[17:40:07.937]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:07.937]             version = "1.8"), class = "FutureResult")
[17:40:07.937]     }, finally = {
[17:40:07.937]         if (!identical(...future.workdir, getwd())) 
[17:40:07.937]             setwd(...future.workdir)
[17:40:07.937]         {
[17:40:07.937]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:07.937]                 ...future.oldOptions$nwarnings <- NULL
[17:40:07.937]             }
[17:40:07.937]             base::options(...future.oldOptions)
[17:40:07.937]             if (.Platform$OS.type == "windows") {
[17:40:07.937]                 old_names <- names(...future.oldEnvVars)
[17:40:07.937]                 envs <- base::Sys.getenv()
[17:40:07.937]                 names <- names(envs)
[17:40:07.937]                 common <- intersect(names, old_names)
[17:40:07.937]                 added <- setdiff(names, old_names)
[17:40:07.937]                 removed <- setdiff(old_names, names)
[17:40:07.937]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:07.937]                   envs[common]]
[17:40:07.937]                 NAMES <- toupper(changed)
[17:40:07.937]                 args <- list()
[17:40:07.937]                 for (kk in seq_along(NAMES)) {
[17:40:07.937]                   name <- changed[[kk]]
[17:40:07.937]                   NAME <- NAMES[[kk]]
[17:40:07.937]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:07.937]                     next
[17:40:07.937]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:07.937]                 }
[17:40:07.937]                 NAMES <- toupper(added)
[17:40:07.937]                 for (kk in seq_along(NAMES)) {
[17:40:07.937]                   name <- added[[kk]]
[17:40:07.937]                   NAME <- NAMES[[kk]]
[17:40:07.937]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:07.937]                     next
[17:40:07.937]                   args[[name]] <- ""
[17:40:07.937]                 }
[17:40:07.937]                 NAMES <- toupper(removed)
[17:40:07.937]                 for (kk in seq_along(NAMES)) {
[17:40:07.937]                   name <- removed[[kk]]
[17:40:07.937]                   NAME <- NAMES[[kk]]
[17:40:07.937]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:07.937]                     next
[17:40:07.937]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:07.937]                 }
[17:40:07.937]                 if (length(args) > 0) 
[17:40:07.937]                   base::do.call(base::Sys.setenv, args = args)
[17:40:07.937]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:07.937]             }
[17:40:07.937]             else {
[17:40:07.937]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:07.937]             }
[17:40:07.937]             {
[17:40:07.937]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:07.937]                   0L) {
[17:40:07.937]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:07.937]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:07.937]                   base::options(opts)
[17:40:07.937]                 }
[17:40:07.937]                 {
[17:40:07.937]                   {
[17:40:07.937]                     NULL
[17:40:07.937]                     RNGkind("Mersenne-Twister")
[17:40:07.937]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:40:07.937]                       inherits = FALSE)
[17:40:07.937]                   }
[17:40:07.937]                   options(future.plan = NULL)
[17:40:07.937]                   if (is.na(NA_character_)) 
[17:40:07.937]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:07.937]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:07.937]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:40:07.937]                     .init = FALSE)
[17:40:07.937]                 }
[17:40:07.937]             }
[17:40:07.937]         }
[17:40:07.937]     })
[17:40:07.937]     if (TRUE) {
[17:40:07.937]         base::sink(type = "output", split = FALSE)
[17:40:07.937]         if (TRUE) {
[17:40:07.937]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:07.937]         }
[17:40:07.937]         else {
[17:40:07.937]             ...future.result["stdout"] <- base::list(NULL)
[17:40:07.937]         }
[17:40:07.937]         base::close(...future.stdout)
[17:40:07.937]         ...future.stdout <- NULL
[17:40:07.937]     }
[17:40:07.937]     ...future.result$conditions <- ...future.conditions
[17:40:07.937]     ...future.result$finished <- base::Sys.time()
[17:40:07.937]     ...future.result
[17:40:07.937] }
[17:40:07.938] plan(): Setting new future strategy stack:
[17:40:07.938] List of future strategies:
[17:40:07.938] 1. sequential:
[17:40:07.938]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:40:07.938]    - tweaked: FALSE
[17:40:07.938]    - call: NULL
[17:40:07.939] plan(): nbrOfWorkers() = 1
[17:40:07.940] plan(): Setting new future strategy stack:
[17:40:07.940] List of future strategies:
[17:40:07.940] 1. multicore:
[17:40:07.940]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:40:07.940]    - tweaked: FALSE
[17:40:07.940]    - call: plan(multicore)
[17:40:07.945] plan(): nbrOfWorkers() = 1
[17:40:07.945] SequentialFuture started (and completed)
[17:40:07.945] signalConditions() ...
[17:40:07.945]  - include = ‘immediateCondition’
[17:40:07.945]  - exclude = 
[17:40:07.945]  - resignal = FALSE
[17:40:07.945]  - Number of conditions: 1
[17:40:07.945] signalConditions() ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    stop(structure(list(message = "boom"), class = c("MyError", 
        "error", "condition")))
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 0 bytes of class ‘NULL’
Conditions captured: [n=1] ‘MyError’
Early signaling: FALSE
Owner process: 33d8ef81-66c6-1c88-ad16-a15781be79ec
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:40:07.946] signalConditions() ...
[17:40:07.946]  - include = ‘immediateCondition’
[17:40:07.946]  - exclude = 
[17:40:07.946]  - resignal = FALSE
[17:40:07.946]  - Number of conditions: 1
[17:40:07.946] signalConditions() ... done
<MyError: boom>
[17:40:07.947] signalConditions() ...
[17:40:07.947]  - include = ‘immediateCondition’
[17:40:07.947]  - exclude = 
[17:40:07.947]  - resignal = FALSE
[17:40:07.947]  - Number of conditions: 1
[17:40:07.947] signalConditions() ... done
[17:40:07.947] Future state: ‘finished’
[17:40:07.947] signalConditions() ...
[17:40:07.947]  - include = ‘condition’
[17:40:07.947]  - exclude = ‘immediateCondition’
[17:40:07.947]  - resignal = TRUE
[17:40:07.948]  - Number of conditions: 1
[17:40:07.948]  - Condition #1: ‘MyError’, ‘error’, ‘condition’
[17:40:07.948] signalConditions() ... done
*** multicore(..., workers = 1L) ...
[17:40:07.948] getGlobalsAndPackages() ...
[17:40:07.948] Searching for globals...
[17:40:07.949] - globals found: [4] ‘{’, ‘*’, ‘a’, ‘b’
[17:40:07.949] Searching for globals ... DONE
[17:40:07.949] Resolving globals: FALSE
[17:40:07.949] The total size of the 2 globals is 112 bytes (112 bytes)
[17:40:07.950] The total size of the 2 globals exported for future expression (‘{; a * b; }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘a’ (56 bytes of class ‘numeric’) and ‘b’ (56 bytes of class ‘numeric’)
[17:40:07.950] - globals: [2] ‘a’, ‘b’
[17:40:07.950] 
[17:40:07.950] getGlobalsAndPackages() ... DONE
[17:40:07.950] Packages needed by the future expression (n = 0): <none>
[17:40:07.950] Packages needed by future strategies (n = 0): <none>
[17:40:07.951] {
[17:40:07.951]     {
[17:40:07.951]         {
[17:40:07.951]             ...future.startTime <- base::Sys.time()
[17:40:07.951]             {
[17:40:07.951]                 {
[17:40:07.951]                   {
[17:40:07.951]                     base::local({
[17:40:07.951]                       has_future <- base::requireNamespace("future", 
[17:40:07.951]                         quietly = TRUE)
[17:40:07.951]                       if (has_future) {
[17:40:07.951]                         ns <- base::getNamespace("future")
[17:40:07.951]                         version <- ns[[".package"]][["version"]]
[17:40:07.951]                         if (is.null(version)) 
[17:40:07.951]                           version <- utils::packageVersion("future")
[17:40:07.951]                       }
[17:40:07.951]                       else {
[17:40:07.951]                         version <- NULL
[17:40:07.951]                       }
[17:40:07.951]                       if (!has_future || version < "1.8.0") {
[17:40:07.951]                         info <- base::c(r_version = base::gsub("R version ", 
[17:40:07.951]                           "", base::R.version$version.string), 
[17:40:07.951]                           platform = base::sprintf("%s (%s-bit)", 
[17:40:07.951]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:07.951]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:07.951]                             "release", "version")], collapse = " "), 
[17:40:07.951]                           hostname = base::Sys.info()[["nodename"]])
[17:40:07.951]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:40:07.951]                           info)
[17:40:07.951]                         info <- base::paste(info, collapse = "; ")
[17:40:07.951]                         if (!has_future) {
[17:40:07.951]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:07.951]                             info)
[17:40:07.951]                         }
[17:40:07.951]                         else {
[17:40:07.951]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:07.951]                             info, version)
[17:40:07.951]                         }
[17:40:07.951]                         base::stop(msg)
[17:40:07.951]                       }
[17:40:07.951]                     })
[17:40:07.951]                   }
[17:40:07.951]                   ...future.strategy.old <- future::plan("list")
[17:40:07.951]                   options(future.plan = NULL)
[17:40:07.951]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:07.951]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:07.951]                 }
[17:40:07.951]                 ...future.workdir <- getwd()
[17:40:07.951]             }
[17:40:07.951]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:07.951]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:07.951]         }
[17:40:07.951]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:07.951]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:40:07.951]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:07.951]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:07.951]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:07.951]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:07.951]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:07.951]             base::names(...future.oldOptions))
[17:40:07.951]     }
[17:40:07.951]     if (FALSE) {
[17:40:07.951]     }
[17:40:07.951]     else {
[17:40:07.951]         if (TRUE) {
[17:40:07.951]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:07.951]                 open = "w")
[17:40:07.951]         }
[17:40:07.951]         else {
[17:40:07.951]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:07.951]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:07.951]         }
[17:40:07.951]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:07.951]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:07.951]             base::sink(type = "output", split = FALSE)
[17:40:07.951]             base::close(...future.stdout)
[17:40:07.951]         }, add = TRUE)
[17:40:07.951]     }
[17:40:07.951]     ...future.frame <- base::sys.nframe()
[17:40:07.951]     ...future.conditions <- base::list()
[17:40:07.951]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:07.951]     if (FALSE) {
[17:40:07.951]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:07.951]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:07.951]     }
[17:40:07.951]     ...future.result <- base::tryCatch({
[17:40:07.951]         base::withCallingHandlers({
[17:40:07.951]             ...future.value <- base::withVisible(base::local({
[17:40:07.951]                 a * b
[17:40:07.951]             }))
[17:40:07.951]             future::FutureResult(value = ...future.value$value, 
[17:40:07.951]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:07.951]                   ...future.rng), globalenv = if (FALSE) 
[17:40:07.951]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:07.951]                     ...future.globalenv.names))
[17:40:07.951]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:07.951]         }, condition = base::local({
[17:40:07.951]             c <- base::c
[17:40:07.951]             inherits <- base::inherits
[17:40:07.951]             invokeRestart <- base::invokeRestart
[17:40:07.951]             length <- base::length
[17:40:07.951]             list <- base::list
[17:40:07.951]             seq.int <- base::seq.int
[17:40:07.951]             signalCondition <- base::signalCondition
[17:40:07.951]             sys.calls <- base::sys.calls
[17:40:07.951]             `[[` <- base::`[[`
[17:40:07.951]             `+` <- base::`+`
[17:40:07.951]             `<<-` <- base::`<<-`
[17:40:07.951]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:07.951]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:07.951]                   3L)]
[17:40:07.951]             }
[17:40:07.951]             function(cond) {
[17:40:07.951]                 is_error <- inherits(cond, "error")
[17:40:07.951]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:07.951]                   NULL)
[17:40:07.951]                 if (is_error) {
[17:40:07.951]                   sessionInformation <- function() {
[17:40:07.951]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:07.951]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:07.951]                       search = base::search(), system = base::Sys.info())
[17:40:07.951]                   }
[17:40:07.951]                   ...future.conditions[[length(...future.conditions) + 
[17:40:07.951]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:07.951]                     cond$call), session = sessionInformation(), 
[17:40:07.951]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:07.951]                   signalCondition(cond)
[17:40:07.951]                 }
[17:40:07.951]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:07.951]                 "immediateCondition"))) {
[17:40:07.951]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:07.951]                   ...future.conditions[[length(...future.conditions) + 
[17:40:07.951]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:07.951]                   if (TRUE && !signal) {
[17:40:07.951]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:07.951]                     {
[17:40:07.951]                       inherits <- base::inherits
[17:40:07.951]                       invokeRestart <- base::invokeRestart
[17:40:07.951]                       is.null <- base::is.null
[17:40:07.951]                       muffled <- FALSE
[17:40:07.951]                       if (inherits(cond, "message")) {
[17:40:07.951]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:07.951]                         if (muffled) 
[17:40:07.951]                           invokeRestart("muffleMessage")
[17:40:07.951]                       }
[17:40:07.951]                       else if (inherits(cond, "warning")) {
[17:40:07.951]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:07.951]                         if (muffled) 
[17:40:07.951]                           invokeRestart("muffleWarning")
[17:40:07.951]                       }
[17:40:07.951]                       else if (inherits(cond, "condition")) {
[17:40:07.951]                         if (!is.null(pattern)) {
[17:40:07.951]                           computeRestarts <- base::computeRestarts
[17:40:07.951]                           grepl <- base::grepl
[17:40:07.951]                           restarts <- computeRestarts(cond)
[17:40:07.951]                           for (restart in restarts) {
[17:40:07.951]                             name <- restart$name
[17:40:07.951]                             if (is.null(name)) 
[17:40:07.951]                               next
[17:40:07.951]                             if (!grepl(pattern, name)) 
[17:40:07.951]                               next
[17:40:07.951]                             invokeRestart(restart)
[17:40:07.951]                             muffled <- TRUE
[17:40:07.951]                             break
[17:40:07.951]                           }
[17:40:07.951]                         }
[17:40:07.951]                       }
[17:40:07.951]                       invisible(muffled)
[17:40:07.951]                     }
[17:40:07.951]                     muffleCondition(cond, pattern = "^muffle")
[17:40:07.951]                   }
[17:40:07.951]                 }
[17:40:07.951]                 else {
[17:40:07.951]                   if (TRUE) {
[17:40:07.951]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:07.951]                     {
[17:40:07.951]                       inherits <- base::inherits
[17:40:07.951]                       invokeRestart <- base::invokeRestart
[17:40:07.951]                       is.null <- base::is.null
[17:40:07.951]                       muffled <- FALSE
[17:40:07.951]                       if (inherits(cond, "message")) {
[17:40:07.951]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:07.951]                         if (muffled) 
[17:40:07.951]                           invokeRestart("muffleMessage")
[17:40:07.951]                       }
[17:40:07.951]                       else if (inherits(cond, "warning")) {
[17:40:07.951]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:07.951]                         if (muffled) 
[17:40:07.951]                           invokeRestart("muffleWarning")
[17:40:07.951]                       }
[17:40:07.951]                       else if (inherits(cond, "condition")) {
[17:40:07.951]                         if (!is.null(pattern)) {
[17:40:07.951]                           computeRestarts <- base::computeRestarts
[17:40:07.951]                           grepl <- base::grepl
[17:40:07.951]                           restarts <- computeRestarts(cond)
[17:40:07.951]                           for (restart in restarts) {
[17:40:07.951]                             name <- restart$name
[17:40:07.951]                             if (is.null(name)) 
[17:40:07.951]                               next
[17:40:07.951]                             if (!grepl(pattern, name)) 
[17:40:07.951]                               next
[17:40:07.951]                             invokeRestart(restart)
[17:40:07.951]                             muffled <- TRUE
[17:40:07.951]                             break
[17:40:07.951]                           }
[17:40:07.951]                         }
[17:40:07.951]                       }
[17:40:07.951]                       invisible(muffled)
[17:40:07.951]                     }
[17:40:07.951]                     muffleCondition(cond, pattern = "^muffle")
[17:40:07.951]                   }
[17:40:07.951]                 }
[17:40:07.951]             }
[17:40:07.951]         }))
[17:40:07.951]     }, error = function(ex) {
[17:40:07.951]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:07.951]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:07.951]                 ...future.rng), started = ...future.startTime, 
[17:40:07.951]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:07.951]             version = "1.8"), class = "FutureResult")
[17:40:07.951]     }, finally = {
[17:40:07.951]         if (!identical(...future.workdir, getwd())) 
[17:40:07.951]             setwd(...future.workdir)
[17:40:07.951]         {
[17:40:07.951]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:07.951]                 ...future.oldOptions$nwarnings <- NULL
[17:40:07.951]             }
[17:40:07.951]             base::options(...future.oldOptions)
[17:40:07.951]             if (.Platform$OS.type == "windows") {
[17:40:07.951]                 old_names <- names(...future.oldEnvVars)
[17:40:07.951]                 envs <- base::Sys.getenv()
[17:40:07.951]                 names <- names(envs)
[17:40:07.951]                 common <- intersect(names, old_names)
[17:40:07.951]                 added <- setdiff(names, old_names)
[17:40:07.951]                 removed <- setdiff(old_names, names)
[17:40:07.951]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:07.951]                   envs[common]]
[17:40:07.951]                 NAMES <- toupper(changed)
[17:40:07.951]                 args <- list()
[17:40:07.951]                 for (kk in seq_along(NAMES)) {
[17:40:07.951]                   name <- changed[[kk]]
[17:40:07.951]                   NAME <- NAMES[[kk]]
[17:40:07.951]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:07.951]                     next
[17:40:07.951]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:07.951]                 }
[17:40:07.951]                 NAMES <- toupper(added)
[17:40:07.951]                 for (kk in seq_along(NAMES)) {
[17:40:07.951]                   name <- added[[kk]]
[17:40:07.951]                   NAME <- NAMES[[kk]]
[17:40:07.951]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:07.951]                     next
[17:40:07.951]                   args[[name]] <- ""
[17:40:07.951]                 }
[17:40:07.951]                 NAMES <- toupper(removed)
[17:40:07.951]                 for (kk in seq_along(NAMES)) {
[17:40:07.951]                   name <- removed[[kk]]
[17:40:07.951]                   NAME <- NAMES[[kk]]
[17:40:07.951]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:07.951]                     next
[17:40:07.951]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:07.951]                 }
[17:40:07.951]                 if (length(args) > 0) 
[17:40:07.951]                   base::do.call(base::Sys.setenv, args = args)
[17:40:07.951]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:07.951]             }
[17:40:07.951]             else {
[17:40:07.951]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:07.951]             }
[17:40:07.951]             {
[17:40:07.951]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:07.951]                   0L) {
[17:40:07.951]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:07.951]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:07.951]                   base::options(opts)
[17:40:07.951]                 }
[17:40:07.951]                 {
[17:40:07.951]                   {
[17:40:07.951]                     NULL
[17:40:07.951]                     RNGkind("Mersenne-Twister")
[17:40:07.951]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:40:07.951]                       inherits = FALSE)
[17:40:07.951]                   }
[17:40:07.951]                   options(future.plan = NULL)
[17:40:07.951]                   if (is.na(NA_character_)) 
[17:40:07.951]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:07.951]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:07.951]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:40:07.951]                     .init = FALSE)
[17:40:07.951]                 }
[17:40:07.951]             }
[17:40:07.951]         }
[17:40:07.951]     })
[17:40:07.951]     if (TRUE) {
[17:40:07.951]         base::sink(type = "output", split = FALSE)
[17:40:07.951]         if (TRUE) {
[17:40:07.951]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:07.951]         }
[17:40:07.951]         else {
[17:40:07.951]             ...future.result["stdout"] <- base::list(NULL)
[17:40:07.951]         }
[17:40:07.951]         base::close(...future.stdout)
[17:40:07.951]         ...future.stdout <- NULL
[17:40:07.951]     }
[17:40:07.951]     ...future.result$conditions <- ...future.conditions
[17:40:07.951]     ...future.result$finished <- base::Sys.time()
[17:40:07.951]     ...future.result
[17:40:07.951] }
[17:40:07.952] assign_globals() ...
[17:40:07.952] List of 2
[17:40:07.952]  $ a: num 2
[17:40:07.952]  $ b: num 3
[17:40:07.952]  - attr(*, "where")=List of 2
[17:40:07.952]   ..$ a:<environment: R_EmptyEnv> 
[17:40:07.952]   ..$ b:<environment: R_EmptyEnv> 
[17:40:07.952]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:07.952]  - attr(*, "resolved")= logi FALSE
[17:40:07.952]  - attr(*, "total_size")= num 112
[17:40:07.955] - copied ‘a’ to environment
[17:40:07.955] - copied ‘b’ to environment
[17:40:07.955] assign_globals() ... done
[17:40:07.955] plan(): Setting new future strategy stack:
[17:40:07.956] List of future strategies:
[17:40:07.956] 1. sequential:
[17:40:07.956]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:40:07.956]    - tweaked: FALSE
[17:40:07.956]    - call: NULL
[17:40:07.956] plan(): nbrOfWorkers() = 1
[17:40:07.957] plan(): Setting new future strategy stack:
[17:40:07.957] List of future strategies:
[17:40:07.957] 1. multicore:
[17:40:07.957]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:40:07.957]    - tweaked: FALSE
[17:40:07.957]    - call: plan(multicore)
[17:40:07.960] plan(): nbrOfWorkers() = 1
[17:40:07.960] SequentialFuture started (and completed)
[1] 6
*** multicore(..., workers = 1L) ... DONE
Testing with 1 cores ... DONE
Testing with 2 cores ...
Number of workers: 2
*** multicore(..., globals = FALSE) without globals
[17:40:07.967] getGlobalsAndPackages() ...
[17:40:07.967] Not searching for globals
[17:40:07.967] - globals: [0] <none>
[17:40:07.967] getGlobalsAndPackages() ... DONE
[17:40:07.968] Packages needed by the future expression (n = 0): <none>
[17:40:07.968] Packages needed by future strategies (n = 0): <none>
[17:40:07.968] {
[17:40:07.968]     {
[17:40:07.968]         {
[17:40:07.968]             ...future.startTime <- base::Sys.time()
[17:40:07.968]             {
[17:40:07.968]                 {
[17:40:07.968]                   {
[17:40:07.968]                     {
[17:40:07.968]                       base::local({
[17:40:07.968]                         has_future <- base::requireNamespace("future", 
[17:40:07.968]                           quietly = TRUE)
[17:40:07.968]                         if (has_future) {
[17:40:07.968]                           ns <- base::getNamespace("future")
[17:40:07.968]                           version <- ns[[".package"]][["version"]]
[17:40:07.968]                           if (is.null(version)) 
[17:40:07.968]                             version <- utils::packageVersion("future")
[17:40:07.968]                         }
[17:40:07.968]                         else {
[17:40:07.968]                           version <- NULL
[17:40:07.968]                         }
[17:40:07.968]                         if (!has_future || version < "1.8.0") {
[17:40:07.968]                           info <- base::c(r_version = base::gsub("R version ", 
[17:40:07.968]                             "", base::R.version$version.string), 
[17:40:07.968]                             platform = base::sprintf("%s (%s-bit)", 
[17:40:07.968]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:07.968]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:07.968]                               "release", "version")], collapse = " "), 
[17:40:07.968]                             hostname = base::Sys.info()[["nodename"]])
[17:40:07.968]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:40:07.968]                             info)
[17:40:07.968]                           info <- base::paste(info, collapse = "; ")
[17:40:07.968]                           if (!has_future) {
[17:40:07.968]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:07.968]                               info)
[17:40:07.968]                           }
[17:40:07.968]                           else {
[17:40:07.968]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:07.968]                               info, version)
[17:40:07.968]                           }
[17:40:07.968]                           base::stop(msg)
[17:40:07.968]                         }
[17:40:07.968]                       })
[17:40:07.968]                     }
[17:40:07.968]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:40:07.968]                     base::options(mc.cores = 1L)
[17:40:07.968]                   }
[17:40:07.968]                   ...future.strategy.old <- future::plan("list")
[17:40:07.968]                   options(future.plan = NULL)
[17:40:07.968]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:07.968]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:07.968]                 }
[17:40:07.968]                 ...future.workdir <- getwd()
[17:40:07.968]             }
[17:40:07.968]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:07.968]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:07.968]         }
[17:40:07.968]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:07.968]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:40:07.968]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:07.968]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:07.968]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:07.968]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:07.968]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:07.968]             base::names(...future.oldOptions))
[17:40:07.968]     }
[17:40:07.968]     if (FALSE) {
[17:40:07.968]     }
[17:40:07.968]     else {
[17:40:07.968]         if (TRUE) {
[17:40:07.968]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:07.968]                 open = "w")
[17:40:07.968]         }
[17:40:07.968]         else {
[17:40:07.968]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:07.968]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:07.968]         }
[17:40:07.968]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:07.968]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:07.968]             base::sink(type = "output", split = FALSE)
[17:40:07.968]             base::close(...future.stdout)
[17:40:07.968]         }, add = TRUE)
[17:40:07.968]     }
[17:40:07.968]     ...future.frame <- base::sys.nframe()
[17:40:07.968]     ...future.conditions <- base::list()
[17:40:07.968]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:07.968]     if (FALSE) {
[17:40:07.968]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:07.968]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:07.968]     }
[17:40:07.968]     ...future.result <- base::tryCatch({
[17:40:07.968]         base::withCallingHandlers({
[17:40:07.968]             ...future.value <- base::withVisible(base::local({
[17:40:07.968]                 withCallingHandlers({
[17:40:07.968]                   {
[17:40:07.968]                     42L
[17:40:07.968]                   }
[17:40:07.968]                 }, immediateCondition = function(cond) {
[17:40:07.968]                   save_rds <- function (object, pathname, ...) 
[17:40:07.968]                   {
[17:40:07.968]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:40:07.968]                     if (file_test("-f", pathname_tmp)) {
[17:40:07.968]                       fi_tmp <- file.info(pathname_tmp)
[17:40:07.968]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:40:07.968]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:07.968]                         fi_tmp[["mtime"]])
[17:40:07.968]                     }
[17:40:07.968]                     tryCatch({
[17:40:07.968]                       saveRDS(object, file = pathname_tmp, ...)
[17:40:07.968]                     }, error = function(ex) {
[17:40:07.968]                       msg <- conditionMessage(ex)
[17:40:07.968]                       fi_tmp <- file.info(pathname_tmp)
[17:40:07.968]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:40:07.968]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:07.968]                         fi_tmp[["mtime"]], msg)
[17:40:07.968]                       ex$message <- msg
[17:40:07.968]                       stop(ex)
[17:40:07.968]                     })
[17:40:07.968]                     stopifnot(file_test("-f", pathname_tmp))
[17:40:07.968]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:40:07.968]                     if (!res || file_test("-f", pathname_tmp)) {
[17:40:07.968]                       fi_tmp <- file.info(pathname_tmp)
[17:40:07.968]                       fi <- file.info(pathname)
[17:40:07.968]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:40:07.968]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:07.968]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:40:07.968]                         fi[["size"]], fi[["mtime"]])
[17:40:07.968]                       stop(msg)
[17:40:07.968]                     }
[17:40:07.968]                     invisible(pathname)
[17:40:07.968]                   }
[17:40:07.968]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:40:07.968]                     rootPath = tempdir()) 
[17:40:07.968]                   {
[17:40:07.968]                     obj <- list(time = Sys.time(), condition = cond)
[17:40:07.968]                     file <- tempfile(pattern = class(cond)[1], 
[17:40:07.968]                       tmpdir = path, fileext = ".rds")
[17:40:07.968]                     save_rds(obj, file)
[17:40:07.968]                   }
[17:40:07.968]                   saveImmediateCondition(cond, path = "/tmp/RtmpKWJjLX/.future/immediateConditions")
[17:40:07.968]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:07.968]                   {
[17:40:07.968]                     inherits <- base::inherits
[17:40:07.968]                     invokeRestart <- base::invokeRestart
[17:40:07.968]                     is.null <- base::is.null
[17:40:07.968]                     muffled <- FALSE
[17:40:07.968]                     if (inherits(cond, "message")) {
[17:40:07.968]                       muffled <- grepl(pattern, "muffleMessage")
[17:40:07.968]                       if (muffled) 
[17:40:07.968]                         invokeRestart("muffleMessage")
[17:40:07.968]                     }
[17:40:07.968]                     else if (inherits(cond, "warning")) {
[17:40:07.968]                       muffled <- grepl(pattern, "muffleWarning")
[17:40:07.968]                       if (muffled) 
[17:40:07.968]                         invokeRestart("muffleWarning")
[17:40:07.968]                     }
[17:40:07.968]                     else if (inherits(cond, "condition")) {
[17:40:07.968]                       if (!is.null(pattern)) {
[17:40:07.968]                         computeRestarts <- base::computeRestarts
[17:40:07.968]                         grepl <- base::grepl
[17:40:07.968]                         restarts <- computeRestarts(cond)
[17:40:07.968]                         for (restart in restarts) {
[17:40:07.968]                           name <- restart$name
[17:40:07.968]                           if (is.null(name)) 
[17:40:07.968]                             next
[17:40:07.968]                           if (!grepl(pattern, name)) 
[17:40:07.968]                             next
[17:40:07.968]                           invokeRestart(restart)
[17:40:07.968]                           muffled <- TRUE
[17:40:07.968]                           break
[17:40:07.968]                         }
[17:40:07.968]                       }
[17:40:07.968]                     }
[17:40:07.968]                     invisible(muffled)
[17:40:07.968]                   }
[17:40:07.968]                   muffleCondition(cond)
[17:40:07.968]                 })
[17:40:07.968]             }))
[17:40:07.968]             future::FutureResult(value = ...future.value$value, 
[17:40:07.968]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:07.968]                   ...future.rng), globalenv = if (FALSE) 
[17:40:07.968]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:07.968]                     ...future.globalenv.names))
[17:40:07.968]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:07.968]         }, condition = base::local({
[17:40:07.968]             c <- base::c
[17:40:07.968]             inherits <- base::inherits
[17:40:07.968]             invokeRestart <- base::invokeRestart
[17:40:07.968]             length <- base::length
[17:40:07.968]             list <- base::list
[17:40:07.968]             seq.int <- base::seq.int
[17:40:07.968]             signalCondition <- base::signalCondition
[17:40:07.968]             sys.calls <- base::sys.calls
[17:40:07.968]             `[[` <- base::`[[`
[17:40:07.968]             `+` <- base::`+`
[17:40:07.968]             `<<-` <- base::`<<-`
[17:40:07.968]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:07.968]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:07.968]                   3L)]
[17:40:07.968]             }
[17:40:07.968]             function(cond) {
[17:40:07.968]                 is_error <- inherits(cond, "error")
[17:40:07.968]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:07.968]                   NULL)
[17:40:07.968]                 if (is_error) {
[17:40:07.968]                   sessionInformation <- function() {
[17:40:07.968]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:07.968]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:07.968]                       search = base::search(), system = base::Sys.info())
[17:40:07.968]                   }
[17:40:07.968]                   ...future.conditions[[length(...future.conditions) + 
[17:40:07.968]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:07.968]                     cond$call), session = sessionInformation(), 
[17:40:07.968]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:07.968]                   signalCondition(cond)
[17:40:07.968]                 }
[17:40:07.968]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:07.968]                 "immediateCondition"))) {
[17:40:07.968]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:07.968]                   ...future.conditions[[length(...future.conditions) + 
[17:40:07.968]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:07.968]                   if (TRUE && !signal) {
[17:40:07.968]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:07.968]                     {
[17:40:07.968]                       inherits <- base::inherits
[17:40:07.968]                       invokeRestart <- base::invokeRestart
[17:40:07.968]                       is.null <- base::is.null
[17:40:07.968]                       muffled <- FALSE
[17:40:07.968]                       if (inherits(cond, "message")) {
[17:40:07.968]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:07.968]                         if (muffled) 
[17:40:07.968]                           invokeRestart("muffleMessage")
[17:40:07.968]                       }
[17:40:07.968]                       else if (inherits(cond, "warning")) {
[17:40:07.968]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:07.968]                         if (muffled) 
[17:40:07.968]                           invokeRestart("muffleWarning")
[17:40:07.968]                       }
[17:40:07.968]                       else if (inherits(cond, "condition")) {
[17:40:07.968]                         if (!is.null(pattern)) {
[17:40:07.968]                           computeRestarts <- base::computeRestarts
[17:40:07.968]                           grepl <- base::grepl
[17:40:07.968]                           restarts <- computeRestarts(cond)
[17:40:07.968]                           for (restart in restarts) {
[17:40:07.968]                             name <- restart$name
[17:40:07.968]                             if (is.null(name)) 
[17:40:07.968]                               next
[17:40:07.968]                             if (!grepl(pattern, name)) 
[17:40:07.968]                               next
[17:40:07.968]                             invokeRestart(restart)
[17:40:07.968]                             muffled <- TRUE
[17:40:07.968]                             break
[17:40:07.968]                           }
[17:40:07.968]                         }
[17:40:07.968]                       }
[17:40:07.968]                       invisible(muffled)
[17:40:07.968]                     }
[17:40:07.968]                     muffleCondition(cond, pattern = "^muffle")
[17:40:07.968]                   }
[17:40:07.968]                 }
[17:40:07.968]                 else {
[17:40:07.968]                   if (TRUE) {
[17:40:07.968]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:07.968]                     {
[17:40:07.968]                       inherits <- base::inherits
[17:40:07.968]                       invokeRestart <- base::invokeRestart
[17:40:07.968]                       is.null <- base::is.null
[17:40:07.968]                       muffled <- FALSE
[17:40:07.968]                       if (inherits(cond, "message")) {
[17:40:07.968]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:07.968]                         if (muffled) 
[17:40:07.968]                           invokeRestart("muffleMessage")
[17:40:07.968]                       }
[17:40:07.968]                       else if (inherits(cond, "warning")) {
[17:40:07.968]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:07.968]                         if (muffled) 
[17:40:07.968]                           invokeRestart("muffleWarning")
[17:40:07.968]                       }
[17:40:07.968]                       else if (inherits(cond, "condition")) {
[17:40:07.968]                         if (!is.null(pattern)) {
[17:40:07.968]                           computeRestarts <- base::computeRestarts
[17:40:07.968]                           grepl <- base::grepl
[17:40:07.968]                           restarts <- computeRestarts(cond)
[17:40:07.968]                           for (restart in restarts) {
[17:40:07.968]                             name <- restart$name
[17:40:07.968]                             if (is.null(name)) 
[17:40:07.968]                               next
[17:40:07.968]                             if (!grepl(pattern, name)) 
[17:40:07.968]                               next
[17:40:07.968]                             invokeRestart(restart)
[17:40:07.968]                             muffled <- TRUE
[17:40:07.968]                             break
[17:40:07.968]                           }
[17:40:07.968]                         }
[17:40:07.968]                       }
[17:40:07.968]                       invisible(muffled)
[17:40:07.968]                     }
[17:40:07.968]                     muffleCondition(cond, pattern = "^muffle")
[17:40:07.968]                   }
[17:40:07.968]                 }
[17:40:07.968]             }
[17:40:07.968]         }))
[17:40:07.968]     }, error = function(ex) {
[17:40:07.968]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:07.968]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:07.968]                 ...future.rng), started = ...future.startTime, 
[17:40:07.968]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:07.968]             version = "1.8"), class = "FutureResult")
[17:40:07.968]     }, finally = {
[17:40:07.968]         if (!identical(...future.workdir, getwd())) 
[17:40:07.968]             setwd(...future.workdir)
[17:40:07.968]         {
[17:40:07.968]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:07.968]                 ...future.oldOptions$nwarnings <- NULL
[17:40:07.968]             }
[17:40:07.968]             base::options(...future.oldOptions)
[17:40:07.968]             if (.Platform$OS.type == "windows") {
[17:40:07.968]                 old_names <- names(...future.oldEnvVars)
[17:40:07.968]                 envs <- base::Sys.getenv()
[17:40:07.968]                 names <- names(envs)
[17:40:07.968]                 common <- intersect(names, old_names)
[17:40:07.968]                 added <- setdiff(names, old_names)
[17:40:07.968]                 removed <- setdiff(old_names, names)
[17:40:07.968]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:07.968]                   envs[common]]
[17:40:07.968]                 NAMES <- toupper(changed)
[17:40:07.968]                 args <- list()
[17:40:07.968]                 for (kk in seq_along(NAMES)) {
[17:40:07.968]                   name <- changed[[kk]]
[17:40:07.968]                   NAME <- NAMES[[kk]]
[17:40:07.968]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:07.968]                     next
[17:40:07.968]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:07.968]                 }
[17:40:07.968]                 NAMES <- toupper(added)
[17:40:07.968]                 for (kk in seq_along(NAMES)) {
[17:40:07.968]                   name <- added[[kk]]
[17:40:07.968]                   NAME <- NAMES[[kk]]
[17:40:07.968]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:07.968]                     next
[17:40:07.968]                   args[[name]] <- ""
[17:40:07.968]                 }
[17:40:07.968]                 NAMES <- toupper(removed)
[17:40:07.968]                 for (kk in seq_along(NAMES)) {
[17:40:07.968]                   name <- removed[[kk]]
[17:40:07.968]                   NAME <- NAMES[[kk]]
[17:40:07.968]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:07.968]                     next
[17:40:07.968]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:07.968]                 }
[17:40:07.968]                 if (length(args) > 0) 
[17:40:07.968]                   base::do.call(base::Sys.setenv, args = args)
[17:40:07.968]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:07.968]             }
[17:40:07.968]             else {
[17:40:07.968]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:07.968]             }
[17:40:07.968]             {
[17:40:07.968]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:07.968]                   0L) {
[17:40:07.968]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:07.968]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:07.968]                   base::options(opts)
[17:40:07.968]                 }
[17:40:07.968]                 {
[17:40:07.968]                   {
[17:40:07.968]                     base::options(mc.cores = ...future.mc.cores.old)
[17:40:07.968]                     NULL
[17:40:07.968]                   }
[17:40:07.968]                   options(future.plan = NULL)
[17:40:07.968]                   if (is.na(NA_character_)) 
[17:40:07.968]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:07.968]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:07.968]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:40:07.968]                     .init = FALSE)
[17:40:07.968]                 }
[17:40:07.968]             }
[17:40:07.968]         }
[17:40:07.968]     })
[17:40:07.968]     if (TRUE) {
[17:40:07.968]         base::sink(type = "output", split = FALSE)
[17:40:07.968]         if (TRUE) {
[17:40:07.968]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:07.968]         }
[17:40:07.968]         else {
[17:40:07.968]             ...future.result["stdout"] <- base::list(NULL)
[17:40:07.968]         }
[17:40:07.968]         base::close(...future.stdout)
[17:40:07.968]         ...future.stdout <- NULL
[17:40:07.968]     }
[17:40:07.968]     ...future.result$conditions <- ...future.conditions
[17:40:07.968]     ...future.result$finished <- base::Sys.time()
[17:40:07.968]     ...future.result
[17:40:07.968] }
[17:40:07.971] requestCore(): workers = 2
[17:40:07.973] MulticoreFuture started
[17:40:07.974] plan(): Setting new future strategy stack:
[17:40:07.974] List of future strategies:
[17:40:07.974] 1. sequential:
[17:40:07.974]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:40:07.974]    - tweaked: FALSE
[17:40:07.974]    - call: NULL
[17:40:07.975] plan(): nbrOfWorkers() = 1
[17:40:07.977] plan(): Setting new future strategy stack:
[17:40:07.977] List of future strategies:
[17:40:07.977] 1. multicore:
[17:40:07.977]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:40:07.977]    - tweaked: FALSE
[17:40:07.977]    - call: plan(multicore)
[17:40:07.982] plan(): nbrOfWorkers() = 2
[1] TRUE
[17:40:07.984] result() for MulticoreFuture ...
[17:40:07.989] result() for MulticoreFuture ...
[17:40:07.989] result() for MulticoreFuture ... done
[17:40:07.989] result() for MulticoreFuture ... done
[17:40:07.989] result() for MulticoreFuture ...
[17:40:07.989] result() for MulticoreFuture ... done
[1] 42
*** multicore(..., globals = FALSE) with globals
[17:40:07.993] getGlobalsAndPackages() ...
[17:40:07.993] Not searching for globals
[17:40:07.994] - globals: [0] <none>
[17:40:07.994] getGlobalsAndPackages() ... DONE
[17:40:07.994] Packages needed by the future expression (n = 0): <none>
[17:40:07.994] Packages needed by future strategies (n = 0): <none>
[17:40:07.995] {
[17:40:07.995]     {
[17:40:07.995]         {
[17:40:07.995]             ...future.startTime <- base::Sys.time()
[17:40:07.995]             {
[17:40:07.995]                 {
[17:40:07.995]                   {
[17:40:07.995]                     {
[17:40:07.995]                       base::local({
[17:40:07.995]                         has_future <- base::requireNamespace("future", 
[17:40:07.995]                           quietly = TRUE)
[17:40:07.995]                         if (has_future) {
[17:40:07.995]                           ns <- base::getNamespace("future")
[17:40:07.995]                           version <- ns[[".package"]][["version"]]
[17:40:07.995]                           if (is.null(version)) 
[17:40:07.995]                             version <- utils::packageVersion("future")
[17:40:07.995]                         }
[17:40:07.995]                         else {
[17:40:07.995]                           version <- NULL
[17:40:07.995]                         }
[17:40:07.995]                         if (!has_future || version < "1.8.0") {
[17:40:07.995]                           info <- base::c(r_version = base::gsub("R version ", 
[17:40:07.995]                             "", base::R.version$version.string), 
[17:40:07.995]                             platform = base::sprintf("%s (%s-bit)", 
[17:40:07.995]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:07.995]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:07.995]                               "release", "version")], collapse = " "), 
[17:40:07.995]                             hostname = base::Sys.info()[["nodename"]])
[17:40:07.995]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:40:07.995]                             info)
[17:40:07.995]                           info <- base::paste(info, collapse = "; ")
[17:40:07.995]                           if (!has_future) {
[17:40:07.995]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:07.995]                               info)
[17:40:07.995]                           }
[17:40:07.995]                           else {
[17:40:07.995]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:07.995]                               info, version)
[17:40:07.995]                           }
[17:40:07.995]                           base::stop(msg)
[17:40:07.995]                         }
[17:40:07.995]                       })
[17:40:07.995]                     }
[17:40:07.995]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:40:07.995]                     base::options(mc.cores = 1L)
[17:40:07.995]                   }
[17:40:07.995]                   ...future.strategy.old <- future::plan("list")
[17:40:07.995]                   options(future.plan = NULL)
[17:40:07.995]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:07.995]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:07.995]                 }
[17:40:07.995]                 ...future.workdir <- getwd()
[17:40:07.995]             }
[17:40:07.995]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:07.995]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:07.995]         }
[17:40:07.995]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:07.995]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:40:07.995]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:07.995]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:07.995]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:07.995]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:07.995]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:07.995]             base::names(...future.oldOptions))
[17:40:07.995]     }
[17:40:07.995]     if (FALSE) {
[17:40:07.995]     }
[17:40:07.995]     else {
[17:40:07.995]         if (TRUE) {
[17:40:07.995]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:07.995]                 open = "w")
[17:40:07.995]         }
[17:40:07.995]         else {
[17:40:07.995]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:07.995]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:07.995]         }
[17:40:07.995]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:07.995]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:07.995]             base::sink(type = "output", split = FALSE)
[17:40:07.995]             base::close(...future.stdout)
[17:40:07.995]         }, add = TRUE)
[17:40:07.995]     }
[17:40:07.995]     ...future.frame <- base::sys.nframe()
[17:40:07.995]     ...future.conditions <- base::list()
[17:40:07.995]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:07.995]     if (FALSE) {
[17:40:07.995]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:07.995]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:07.995]     }
[17:40:07.995]     ...future.result <- base::tryCatch({
[17:40:07.995]         base::withCallingHandlers({
[17:40:07.995]             ...future.value <- base::withVisible(base::local({
[17:40:07.995]                 withCallingHandlers({
[17:40:07.995]                   {
[17:40:07.995]                     b <- 3
[17:40:07.995]                     c <- 2
[17:40:07.995]                     a * b * c
[17:40:07.995]                   }
[17:40:07.995]                 }, immediateCondition = function(cond) {
[17:40:07.995]                   save_rds <- function (object, pathname, ...) 
[17:40:07.995]                   {
[17:40:07.995]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:40:07.995]                     if (file_test("-f", pathname_tmp)) {
[17:40:07.995]                       fi_tmp <- file.info(pathname_tmp)
[17:40:07.995]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:40:07.995]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:07.995]                         fi_tmp[["mtime"]])
[17:40:07.995]                     }
[17:40:07.995]                     tryCatch({
[17:40:07.995]                       saveRDS(object, file = pathname_tmp, ...)
[17:40:07.995]                     }, error = function(ex) {
[17:40:07.995]                       msg <- conditionMessage(ex)
[17:40:07.995]                       fi_tmp <- file.info(pathname_tmp)
[17:40:07.995]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:40:07.995]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:07.995]                         fi_tmp[["mtime"]], msg)
[17:40:07.995]                       ex$message <- msg
[17:40:07.995]                       stop(ex)
[17:40:07.995]                     })
[17:40:07.995]                     stopifnot(file_test("-f", pathname_tmp))
[17:40:07.995]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:40:07.995]                     if (!res || file_test("-f", pathname_tmp)) {
[17:40:07.995]                       fi_tmp <- file.info(pathname_tmp)
[17:40:07.995]                       fi <- file.info(pathname)
[17:40:07.995]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:40:07.995]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:07.995]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:40:07.995]                         fi[["size"]], fi[["mtime"]])
[17:40:07.995]                       stop(msg)
[17:40:07.995]                     }
[17:40:07.995]                     invisible(pathname)
[17:40:07.995]                   }
[17:40:07.995]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:40:07.995]                     rootPath = tempdir()) 
[17:40:07.995]                   {
[17:40:07.995]                     obj <- list(time = Sys.time(), condition = cond)
[17:40:07.995]                     file <- tempfile(pattern = class(cond)[1], 
[17:40:07.995]                       tmpdir = path, fileext = ".rds")
[17:40:07.995]                     save_rds(obj, file)
[17:40:07.995]                   }
[17:40:07.995]                   saveImmediateCondition(cond, path = "/tmp/RtmpKWJjLX/.future/immediateConditions")
[17:40:07.995]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:07.995]                   {
[17:40:07.995]                     inherits <- base::inherits
[17:40:07.995]                     invokeRestart <- base::invokeRestart
[17:40:07.995]                     is.null <- base::is.null
[17:40:07.995]                     muffled <- FALSE
[17:40:07.995]                     if (inherits(cond, "message")) {
[17:40:07.995]                       muffled <- grepl(pattern, "muffleMessage")
[17:40:07.995]                       if (muffled) 
[17:40:07.995]                         invokeRestart("muffleMessage")
[17:40:07.995]                     }
[17:40:07.995]                     else if (inherits(cond, "warning")) {
[17:40:07.995]                       muffled <- grepl(pattern, "muffleWarning")
[17:40:07.995]                       if (muffled) 
[17:40:07.995]                         invokeRestart("muffleWarning")
[17:40:07.995]                     }
[17:40:07.995]                     else if (inherits(cond, "condition")) {
[17:40:07.995]                       if (!is.null(pattern)) {
[17:40:07.995]                         computeRestarts <- base::computeRestarts
[17:40:07.995]                         grepl <- base::grepl
[17:40:07.995]                         restarts <- computeRestarts(cond)
[17:40:07.995]                         for (restart in restarts) {
[17:40:07.995]                           name <- restart$name
[17:40:07.995]                           if (is.null(name)) 
[17:40:07.995]                             next
[17:40:07.995]                           if (!grepl(pattern, name)) 
[17:40:07.995]                             next
[17:40:07.995]                           invokeRestart(restart)
[17:40:07.995]                           muffled <- TRUE
[17:40:07.995]                           break
[17:40:07.995]                         }
[17:40:07.995]                       }
[17:40:07.995]                     }
[17:40:07.995]                     invisible(muffled)
[17:40:07.995]                   }
[17:40:07.995]                   muffleCondition(cond)
[17:40:07.995]                 })
[17:40:07.995]             }))
[17:40:07.995]             future::FutureResult(value = ...future.value$value, 
[17:40:07.995]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:07.995]                   ...future.rng), globalenv = if (FALSE) 
[17:40:07.995]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:07.995]                     ...future.globalenv.names))
[17:40:07.995]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:07.995]         }, condition = base::local({
[17:40:07.995]             c <- base::c
[17:40:07.995]             inherits <- base::inherits
[17:40:07.995]             invokeRestart <- base::invokeRestart
[17:40:07.995]             length <- base::length
[17:40:07.995]             list <- base::list
[17:40:07.995]             seq.int <- base::seq.int
[17:40:07.995]             signalCondition <- base::signalCondition
[17:40:07.995]             sys.calls <- base::sys.calls
[17:40:07.995]             `[[` <- base::`[[`
[17:40:07.995]             `+` <- base::`+`
[17:40:07.995]             `<<-` <- base::`<<-`
[17:40:07.995]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:07.995]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:07.995]                   3L)]
[17:40:07.995]             }
[17:40:07.995]             function(cond) {
[17:40:07.995]                 is_error <- inherits(cond, "error")
[17:40:07.995]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:07.995]                   NULL)
[17:40:07.995]                 if (is_error) {
[17:40:07.995]                   sessionInformation <- function() {
[17:40:07.995]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:07.995]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:07.995]                       search = base::search(), system = base::Sys.info())
[17:40:07.995]                   }
[17:40:07.995]                   ...future.conditions[[length(...future.conditions) + 
[17:40:07.995]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:07.995]                     cond$call), session = sessionInformation(), 
[17:40:07.995]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:07.995]                   signalCondition(cond)
[17:40:07.995]                 }
[17:40:07.995]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:07.995]                 "immediateCondition"))) {
[17:40:07.995]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:07.995]                   ...future.conditions[[length(...future.conditions) + 
[17:40:07.995]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:07.995]                   if (TRUE && !signal) {
[17:40:07.995]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:07.995]                     {
[17:40:07.995]                       inherits <- base::inherits
[17:40:07.995]                       invokeRestart <- base::invokeRestart
[17:40:07.995]                       is.null <- base::is.null
[17:40:07.995]                       muffled <- FALSE
[17:40:07.995]                       if (inherits(cond, "message")) {
[17:40:07.995]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:07.995]                         if (muffled) 
[17:40:07.995]                           invokeRestart("muffleMessage")
[17:40:07.995]                       }
[17:40:07.995]                       else if (inherits(cond, "warning")) {
[17:40:07.995]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:07.995]                         if (muffled) 
[17:40:07.995]                           invokeRestart("muffleWarning")
[17:40:07.995]                       }
[17:40:07.995]                       else if (inherits(cond, "condition")) {
[17:40:07.995]                         if (!is.null(pattern)) {
[17:40:07.995]                           computeRestarts <- base::computeRestarts
[17:40:07.995]                           grepl <- base::grepl
[17:40:07.995]                           restarts <- computeRestarts(cond)
[17:40:07.995]                           for (restart in restarts) {
[17:40:07.995]                             name <- restart$name
[17:40:07.995]                             if (is.null(name)) 
[17:40:07.995]                               next
[17:40:07.995]                             if (!grepl(pattern, name)) 
[17:40:07.995]                               next
[17:40:07.995]                             invokeRestart(restart)
[17:40:07.995]                             muffled <- TRUE
[17:40:07.995]                             break
[17:40:07.995]                           }
[17:40:07.995]                         }
[17:40:07.995]                       }
[17:40:07.995]                       invisible(muffled)
[17:40:07.995]                     }
[17:40:07.995]                     muffleCondition(cond, pattern = "^muffle")
[17:40:07.995]                   }
[17:40:07.995]                 }
[17:40:07.995]                 else {
[17:40:07.995]                   if (TRUE) {
[17:40:07.995]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:07.995]                     {
[17:40:07.995]                       inherits <- base::inherits
[17:40:07.995]                       invokeRestart <- base::invokeRestart
[17:40:07.995]                       is.null <- base::is.null
[17:40:07.995]                       muffled <- FALSE
[17:40:07.995]                       if (inherits(cond, "message")) {
[17:40:07.995]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:07.995]                         if (muffled) 
[17:40:07.995]                           invokeRestart("muffleMessage")
[17:40:07.995]                       }
[17:40:07.995]                       else if (inherits(cond, "warning")) {
[17:40:07.995]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:07.995]                         if (muffled) 
[17:40:07.995]                           invokeRestart("muffleWarning")
[17:40:07.995]                       }
[17:40:07.995]                       else if (inherits(cond, "condition")) {
[17:40:07.995]                         if (!is.null(pattern)) {
[17:40:07.995]                           computeRestarts <- base::computeRestarts
[17:40:07.995]                           grepl <- base::grepl
[17:40:07.995]                           restarts <- computeRestarts(cond)
[17:40:07.995]                           for (restart in restarts) {
[17:40:07.995]                             name <- restart$name
[17:40:07.995]                             if (is.null(name)) 
[17:40:07.995]                               next
[17:40:07.995]                             if (!grepl(pattern, name)) 
[17:40:07.995]                               next
[17:40:07.995]                             invokeRestart(restart)
[17:40:07.995]                             muffled <- TRUE
[17:40:07.995]                             break
[17:40:07.995]                           }
[17:40:07.995]                         }
[17:40:07.995]                       }
[17:40:07.995]                       invisible(muffled)
[17:40:07.995]                     }
[17:40:07.995]                     muffleCondition(cond, pattern = "^muffle")
[17:40:07.995]                   }
[17:40:07.995]                 }
[17:40:07.995]             }
[17:40:07.995]         }))
[17:40:07.995]     }, error = function(ex) {
[17:40:07.995]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:07.995]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:07.995]                 ...future.rng), started = ...future.startTime, 
[17:40:07.995]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:07.995]             version = "1.8"), class = "FutureResult")
[17:40:07.995]     }, finally = {
[17:40:07.995]         if (!identical(...future.workdir, getwd())) 
[17:40:07.995]             setwd(...future.workdir)
[17:40:07.995]         {
[17:40:07.995]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:07.995]                 ...future.oldOptions$nwarnings <- NULL
[17:40:07.995]             }
[17:40:07.995]             base::options(...future.oldOptions)
[17:40:07.995]             if (.Platform$OS.type == "windows") {
[17:40:07.995]                 old_names <- names(...future.oldEnvVars)
[17:40:07.995]                 envs <- base::Sys.getenv()
[17:40:07.995]                 names <- names(envs)
[17:40:07.995]                 common <- intersect(names, old_names)
[17:40:07.995]                 added <- setdiff(names, old_names)
[17:40:07.995]                 removed <- setdiff(old_names, names)
[17:40:07.995]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:07.995]                   envs[common]]
[17:40:07.995]                 NAMES <- toupper(changed)
[17:40:07.995]                 args <- list()
[17:40:07.995]                 for (kk in seq_along(NAMES)) {
[17:40:07.995]                   name <- changed[[kk]]
[17:40:07.995]                   NAME <- NAMES[[kk]]
[17:40:07.995]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:07.995]                     next
[17:40:07.995]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:07.995]                 }
[17:40:07.995]                 NAMES <- toupper(added)
[17:40:07.995]                 for (kk in seq_along(NAMES)) {
[17:40:07.995]                   name <- added[[kk]]
[17:40:07.995]                   NAME <- NAMES[[kk]]
[17:40:07.995]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:07.995]                     next
[17:40:07.995]                   args[[name]] <- ""
[17:40:07.995]                 }
[17:40:07.995]                 NAMES <- toupper(removed)
[17:40:07.995]                 for (kk in seq_along(NAMES)) {
[17:40:07.995]                   name <- removed[[kk]]
[17:40:07.995]                   NAME <- NAMES[[kk]]
[17:40:07.995]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:07.995]                     next
[17:40:07.995]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:07.995]                 }
[17:40:07.995]                 if (length(args) > 0) 
[17:40:07.995]                   base::do.call(base::Sys.setenv, args = args)
[17:40:07.995]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:07.995]             }
[17:40:07.995]             else {
[17:40:07.995]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:07.995]             }
[17:40:07.995]             {
[17:40:07.995]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:07.995]                   0L) {
[17:40:07.995]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:07.995]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:07.995]                   base::options(opts)
[17:40:07.995]                 }
[17:40:07.995]                 {
[17:40:07.995]                   {
[17:40:07.995]                     base::options(mc.cores = ...future.mc.cores.old)
[17:40:07.995]                     NULL
[17:40:07.995]                   }
[17:40:07.995]                   options(future.plan = NULL)
[17:40:07.995]                   if (is.na(NA_character_)) 
[17:40:07.995]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:07.995]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:07.995]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:40:07.995]                     .init = FALSE)
[17:40:07.995]                 }
[17:40:07.995]             }
[17:40:07.995]         }
[17:40:07.995]     })
[17:40:07.995]     if (TRUE) {
[17:40:07.995]         base::sink(type = "output", split = FALSE)
[17:40:07.995]         if (TRUE) {
[17:40:07.995]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:07.995]         }
[17:40:07.995]         else {
[17:40:07.995]             ...future.result["stdout"] <- base::list(NULL)
[17:40:07.995]         }
[17:40:07.995]         base::close(...future.stdout)
[17:40:07.995]         ...future.stdout <- NULL
[17:40:07.995]     }
[17:40:07.995]     ...future.result$conditions <- ...future.conditions
[17:40:07.995]     ...future.result$finished <- base::Sys.time()
[17:40:07.995]     ...future.result
[17:40:07.995] }
[17:40:07.997] requestCore(): workers = 2
[17:40:07.999] MulticoreFuture started
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    b <- 3
    c <- 2
    a * b * c
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:40:08.000] plan(): Setting new future strategy stack:
[17:40:08.000] List of future strategies:
[17:40:08.000] 1. sequential:
[17:40:08.000]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:40:08.000]    - tweaked: FALSE
[17:40:08.000]    - call: NULL
[17:40:08.007] plan(): nbrOfWorkers() = 1
[17:40:08.009] plan(): Setting new future strategy stack:
[17:40:08.010] List of future strategies:
[17:40:08.010] 1. multicore:
[17:40:08.010]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:40:08.010]    - tweaked: FALSE
[17:40:08.010]    - call: plan(multicore)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 33d8ef81-66c6-1c88-ad16-a15781be79ec
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:40:08.011] result() for MulticoreFuture ...
[17:40:08.014] plan(): nbrOfWorkers() = 2
[17:40:08.015] result() for MulticoreFuture ...
[17:40:08.015] result() for MulticoreFuture ... done
[17:40:08.015] result() for MulticoreFuture ... done
[17:40:08.015] result() for MulticoreFuture ...
[17:40:08.016] result() for MulticoreFuture ... done
[1] 0
*** multicore(..., globals = FALSE) with globals and blocking
 - Creating multicore future #1 ...
[17:40:08.020] getGlobalsAndPackages() ...
[17:40:08.020] Not searching for globals
[17:40:08.020] - globals: [0] <none>
[17:40:08.020] getGlobalsAndPackages() ... DONE
[17:40:08.021] Packages needed by the future expression (n = 0): <none>
[17:40:08.021] Packages needed by future strategies (n = 0): <none>
[17:40:08.021] {
[17:40:08.021]     {
[17:40:08.021]         {
[17:40:08.021]             ...future.startTime <- base::Sys.time()
[17:40:08.021]             {
[17:40:08.021]                 {
[17:40:08.021]                   {
[17:40:08.021]                     {
[17:40:08.021]                       base::local({
[17:40:08.021]                         has_future <- base::requireNamespace("future", 
[17:40:08.021]                           quietly = TRUE)
[17:40:08.021]                         if (has_future) {
[17:40:08.021]                           ns <- base::getNamespace("future")
[17:40:08.021]                           version <- ns[[".package"]][["version"]]
[17:40:08.021]                           if (is.null(version)) 
[17:40:08.021]                             version <- utils::packageVersion("future")
[17:40:08.021]                         }
[17:40:08.021]                         else {
[17:40:08.021]                           version <- NULL
[17:40:08.021]                         }
[17:40:08.021]                         if (!has_future || version < "1.8.0") {
[17:40:08.021]                           info <- base::c(r_version = base::gsub("R version ", 
[17:40:08.021]                             "", base::R.version$version.string), 
[17:40:08.021]                             platform = base::sprintf("%s (%s-bit)", 
[17:40:08.021]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:08.021]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:08.021]                               "release", "version")], collapse = " "), 
[17:40:08.021]                             hostname = base::Sys.info()[["nodename"]])
[17:40:08.021]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:40:08.021]                             info)
[17:40:08.021]                           info <- base::paste(info, collapse = "; ")
[17:40:08.021]                           if (!has_future) {
[17:40:08.021]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:08.021]                               info)
[17:40:08.021]                           }
[17:40:08.021]                           else {
[17:40:08.021]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:08.021]                               info, version)
[17:40:08.021]                           }
[17:40:08.021]                           base::stop(msg)
[17:40:08.021]                         }
[17:40:08.021]                       })
[17:40:08.021]                     }
[17:40:08.021]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:40:08.021]                     base::options(mc.cores = 1L)
[17:40:08.021]                   }
[17:40:08.021]                   ...future.strategy.old <- future::plan("list")
[17:40:08.021]                   options(future.plan = NULL)
[17:40:08.021]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:08.021]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:08.021]                 }
[17:40:08.021]                 ...future.workdir <- getwd()
[17:40:08.021]             }
[17:40:08.021]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:08.021]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:08.021]         }
[17:40:08.021]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:08.021]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:40:08.021]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:08.021]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:08.021]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:08.021]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:08.021]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:08.021]             base::names(...future.oldOptions))
[17:40:08.021]     }
[17:40:08.021]     if (FALSE) {
[17:40:08.021]     }
[17:40:08.021]     else {
[17:40:08.021]         if (TRUE) {
[17:40:08.021]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:08.021]                 open = "w")
[17:40:08.021]         }
[17:40:08.021]         else {
[17:40:08.021]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:08.021]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:08.021]         }
[17:40:08.021]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:08.021]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:08.021]             base::sink(type = "output", split = FALSE)
[17:40:08.021]             base::close(...future.stdout)
[17:40:08.021]         }, add = TRUE)
[17:40:08.021]     }
[17:40:08.021]     ...future.frame <- base::sys.nframe()
[17:40:08.021]     ...future.conditions <- base::list()
[17:40:08.021]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:08.021]     if (FALSE) {
[17:40:08.021]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:08.021]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:08.021]     }
[17:40:08.021]     ...future.result <- base::tryCatch({
[17:40:08.021]         base::withCallingHandlers({
[17:40:08.021]             ...future.value <- base::withVisible(base::local({
[17:40:08.021]                 withCallingHandlers({
[17:40:08.021]                   {
[17:40:08.021]                     ii
[17:40:08.021]                   }
[17:40:08.021]                 }, immediateCondition = function(cond) {
[17:40:08.021]                   save_rds <- function (object, pathname, ...) 
[17:40:08.021]                   {
[17:40:08.021]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:40:08.021]                     if (file_test("-f", pathname_tmp)) {
[17:40:08.021]                       fi_tmp <- file.info(pathname_tmp)
[17:40:08.021]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:40:08.021]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:08.021]                         fi_tmp[["mtime"]])
[17:40:08.021]                     }
[17:40:08.021]                     tryCatch({
[17:40:08.021]                       saveRDS(object, file = pathname_tmp, ...)
[17:40:08.021]                     }, error = function(ex) {
[17:40:08.021]                       msg <- conditionMessage(ex)
[17:40:08.021]                       fi_tmp <- file.info(pathname_tmp)
[17:40:08.021]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:40:08.021]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:08.021]                         fi_tmp[["mtime"]], msg)
[17:40:08.021]                       ex$message <- msg
[17:40:08.021]                       stop(ex)
[17:40:08.021]                     })
[17:40:08.021]                     stopifnot(file_test("-f", pathname_tmp))
[17:40:08.021]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:40:08.021]                     if (!res || file_test("-f", pathname_tmp)) {
[17:40:08.021]                       fi_tmp <- file.info(pathname_tmp)
[17:40:08.021]                       fi <- file.info(pathname)
[17:40:08.021]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:40:08.021]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:08.021]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:40:08.021]                         fi[["size"]], fi[["mtime"]])
[17:40:08.021]                       stop(msg)
[17:40:08.021]                     }
[17:40:08.021]                     invisible(pathname)
[17:40:08.021]                   }
[17:40:08.021]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:40:08.021]                     rootPath = tempdir()) 
[17:40:08.021]                   {
[17:40:08.021]                     obj <- list(time = Sys.time(), condition = cond)
[17:40:08.021]                     file <- tempfile(pattern = class(cond)[1], 
[17:40:08.021]                       tmpdir = path, fileext = ".rds")
[17:40:08.021]                     save_rds(obj, file)
[17:40:08.021]                   }
[17:40:08.021]                   saveImmediateCondition(cond, path = "/tmp/RtmpKWJjLX/.future/immediateConditions")
[17:40:08.021]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:08.021]                   {
[17:40:08.021]                     inherits <- base::inherits
[17:40:08.021]                     invokeRestart <- base::invokeRestart
[17:40:08.021]                     is.null <- base::is.null
[17:40:08.021]                     muffled <- FALSE
[17:40:08.021]                     if (inherits(cond, "message")) {
[17:40:08.021]                       muffled <- grepl(pattern, "muffleMessage")
[17:40:08.021]                       if (muffled) 
[17:40:08.021]                         invokeRestart("muffleMessage")
[17:40:08.021]                     }
[17:40:08.021]                     else if (inherits(cond, "warning")) {
[17:40:08.021]                       muffled <- grepl(pattern, "muffleWarning")
[17:40:08.021]                       if (muffled) 
[17:40:08.021]                         invokeRestart("muffleWarning")
[17:40:08.021]                     }
[17:40:08.021]                     else if (inherits(cond, "condition")) {
[17:40:08.021]                       if (!is.null(pattern)) {
[17:40:08.021]                         computeRestarts <- base::computeRestarts
[17:40:08.021]                         grepl <- base::grepl
[17:40:08.021]                         restarts <- computeRestarts(cond)
[17:40:08.021]                         for (restart in restarts) {
[17:40:08.021]                           name <- restart$name
[17:40:08.021]                           if (is.null(name)) 
[17:40:08.021]                             next
[17:40:08.021]                           if (!grepl(pattern, name)) 
[17:40:08.021]                             next
[17:40:08.021]                           invokeRestart(restart)
[17:40:08.021]                           muffled <- TRUE
[17:40:08.021]                           break
[17:40:08.021]                         }
[17:40:08.021]                       }
[17:40:08.021]                     }
[17:40:08.021]                     invisible(muffled)
[17:40:08.021]                   }
[17:40:08.021]                   muffleCondition(cond)
[17:40:08.021]                 })
[17:40:08.021]             }))
[17:40:08.021]             future::FutureResult(value = ...future.value$value, 
[17:40:08.021]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:08.021]                   ...future.rng), globalenv = if (FALSE) 
[17:40:08.021]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:08.021]                     ...future.globalenv.names))
[17:40:08.021]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:08.021]         }, condition = base::local({
[17:40:08.021]             c <- base::c
[17:40:08.021]             inherits <- base::inherits
[17:40:08.021]             invokeRestart <- base::invokeRestart
[17:40:08.021]             length <- base::length
[17:40:08.021]             list <- base::list
[17:40:08.021]             seq.int <- base::seq.int
[17:40:08.021]             signalCondition <- base::signalCondition
[17:40:08.021]             sys.calls <- base::sys.calls
[17:40:08.021]             `[[` <- base::`[[`
[17:40:08.021]             `+` <- base::`+`
[17:40:08.021]             `<<-` <- base::`<<-`
[17:40:08.021]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:08.021]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:08.021]                   3L)]
[17:40:08.021]             }
[17:40:08.021]             function(cond) {
[17:40:08.021]                 is_error <- inherits(cond, "error")
[17:40:08.021]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:08.021]                   NULL)
[17:40:08.021]                 if (is_error) {
[17:40:08.021]                   sessionInformation <- function() {
[17:40:08.021]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:08.021]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:08.021]                       search = base::search(), system = base::Sys.info())
[17:40:08.021]                   }
[17:40:08.021]                   ...future.conditions[[length(...future.conditions) + 
[17:40:08.021]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:08.021]                     cond$call), session = sessionInformation(), 
[17:40:08.021]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:08.021]                   signalCondition(cond)
[17:40:08.021]                 }
[17:40:08.021]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:08.021]                 "immediateCondition"))) {
[17:40:08.021]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:08.021]                   ...future.conditions[[length(...future.conditions) + 
[17:40:08.021]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:08.021]                   if (TRUE && !signal) {
[17:40:08.021]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:08.021]                     {
[17:40:08.021]                       inherits <- base::inherits
[17:40:08.021]                       invokeRestart <- base::invokeRestart
[17:40:08.021]                       is.null <- base::is.null
[17:40:08.021]                       muffled <- FALSE
[17:40:08.021]                       if (inherits(cond, "message")) {
[17:40:08.021]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:08.021]                         if (muffled) 
[17:40:08.021]                           invokeRestart("muffleMessage")
[17:40:08.021]                       }
[17:40:08.021]                       else if (inherits(cond, "warning")) {
[17:40:08.021]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:08.021]                         if (muffled) 
[17:40:08.021]                           invokeRestart("muffleWarning")
[17:40:08.021]                       }
[17:40:08.021]                       else if (inherits(cond, "condition")) {
[17:40:08.021]                         if (!is.null(pattern)) {
[17:40:08.021]                           computeRestarts <- base::computeRestarts
[17:40:08.021]                           grepl <- base::grepl
[17:40:08.021]                           restarts <- computeRestarts(cond)
[17:40:08.021]                           for (restart in restarts) {
[17:40:08.021]                             name <- restart$name
[17:40:08.021]                             if (is.null(name)) 
[17:40:08.021]                               next
[17:40:08.021]                             if (!grepl(pattern, name)) 
[17:40:08.021]                               next
[17:40:08.021]                             invokeRestart(restart)
[17:40:08.021]                             muffled <- TRUE
[17:40:08.021]                             break
[17:40:08.021]                           }
[17:40:08.021]                         }
[17:40:08.021]                       }
[17:40:08.021]                       invisible(muffled)
[17:40:08.021]                     }
[17:40:08.021]                     muffleCondition(cond, pattern = "^muffle")
[17:40:08.021]                   }
[17:40:08.021]                 }
[17:40:08.021]                 else {
[17:40:08.021]                   if (TRUE) {
[17:40:08.021]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:08.021]                     {
[17:40:08.021]                       inherits <- base::inherits
[17:40:08.021]                       invokeRestart <- base::invokeRestart
[17:40:08.021]                       is.null <- base::is.null
[17:40:08.021]                       muffled <- FALSE
[17:40:08.021]                       if (inherits(cond, "message")) {
[17:40:08.021]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:08.021]                         if (muffled) 
[17:40:08.021]                           invokeRestart("muffleMessage")
[17:40:08.021]                       }
[17:40:08.021]                       else if (inherits(cond, "warning")) {
[17:40:08.021]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:08.021]                         if (muffled) 
[17:40:08.021]                           invokeRestart("muffleWarning")
[17:40:08.021]                       }
[17:40:08.021]                       else if (inherits(cond, "condition")) {
[17:40:08.021]                         if (!is.null(pattern)) {
[17:40:08.021]                           computeRestarts <- base::computeRestarts
[17:40:08.021]                           grepl <- base::grepl
[17:40:08.021]                           restarts <- computeRestarts(cond)
[17:40:08.021]                           for (restart in restarts) {
[17:40:08.021]                             name <- restart$name
[17:40:08.021]                             if (is.null(name)) 
[17:40:08.021]                               next
[17:40:08.021]                             if (!grepl(pattern, name)) 
[17:40:08.021]                               next
[17:40:08.021]                             invokeRestart(restart)
[17:40:08.021]                             muffled <- TRUE
[17:40:08.021]                             break
[17:40:08.021]                           }
[17:40:08.021]                         }
[17:40:08.021]                       }
[17:40:08.021]                       invisible(muffled)
[17:40:08.021]                     }
[17:40:08.021]                     muffleCondition(cond, pattern = "^muffle")
[17:40:08.021]                   }
[17:40:08.021]                 }
[17:40:08.021]             }
[17:40:08.021]         }))
[17:40:08.021]     }, error = function(ex) {
[17:40:08.021]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:08.021]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:08.021]                 ...future.rng), started = ...future.startTime, 
[17:40:08.021]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:08.021]             version = "1.8"), class = "FutureResult")
[17:40:08.021]     }, finally = {
[17:40:08.021]         if (!identical(...future.workdir, getwd())) 
[17:40:08.021]             setwd(...future.workdir)
[17:40:08.021]         {
[17:40:08.021]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:08.021]                 ...future.oldOptions$nwarnings <- NULL
[17:40:08.021]             }
[17:40:08.021]             base::options(...future.oldOptions)
[17:40:08.021]             if (.Platform$OS.type == "windows") {
[17:40:08.021]                 old_names <- names(...future.oldEnvVars)
[17:40:08.021]                 envs <- base::Sys.getenv()
[17:40:08.021]                 names <- names(envs)
[17:40:08.021]                 common <- intersect(names, old_names)
[17:40:08.021]                 added <- setdiff(names, old_names)
[17:40:08.021]                 removed <- setdiff(old_names, names)
[17:40:08.021]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:08.021]                   envs[common]]
[17:40:08.021]                 NAMES <- toupper(changed)
[17:40:08.021]                 args <- list()
[17:40:08.021]                 for (kk in seq_along(NAMES)) {
[17:40:08.021]                   name <- changed[[kk]]
[17:40:08.021]                   NAME <- NAMES[[kk]]
[17:40:08.021]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:08.021]                     next
[17:40:08.021]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:08.021]                 }
[17:40:08.021]                 NAMES <- toupper(added)
[17:40:08.021]                 for (kk in seq_along(NAMES)) {
[17:40:08.021]                   name <- added[[kk]]
[17:40:08.021]                   NAME <- NAMES[[kk]]
[17:40:08.021]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:08.021]                     next
[17:40:08.021]                   args[[name]] <- ""
[17:40:08.021]                 }
[17:40:08.021]                 NAMES <- toupper(removed)
[17:40:08.021]                 for (kk in seq_along(NAMES)) {
[17:40:08.021]                   name <- removed[[kk]]
[17:40:08.021]                   NAME <- NAMES[[kk]]
[17:40:08.021]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:08.021]                     next
[17:40:08.021]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:08.021]                 }
[17:40:08.021]                 if (length(args) > 0) 
[17:40:08.021]                   base::do.call(base::Sys.setenv, args = args)
[17:40:08.021]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:08.021]             }
[17:40:08.021]             else {
[17:40:08.021]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:08.021]             }
[17:40:08.021]             {
[17:40:08.021]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:08.021]                   0L) {
[17:40:08.021]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:08.021]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:08.021]                   base::options(opts)
[17:40:08.021]                 }
[17:40:08.021]                 {
[17:40:08.021]                   {
[17:40:08.021]                     base::options(mc.cores = ...future.mc.cores.old)
[17:40:08.021]                     NULL
[17:40:08.021]                   }
[17:40:08.021]                   options(future.plan = NULL)
[17:40:08.021]                   if (is.na(NA_character_)) 
[17:40:08.021]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:08.021]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:08.021]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:40:08.021]                     .init = FALSE)
[17:40:08.021]                 }
[17:40:08.021]             }
[17:40:08.021]         }
[17:40:08.021]     })
[17:40:08.021]     if (TRUE) {
[17:40:08.021]         base::sink(type = "output", split = FALSE)
[17:40:08.021]         if (TRUE) {
[17:40:08.021]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:08.021]         }
[17:40:08.021]         else {
[17:40:08.021]             ...future.result["stdout"] <- base::list(NULL)
[17:40:08.021]         }
[17:40:08.021]         base::close(...future.stdout)
[17:40:08.021]         ...future.stdout <- NULL
[17:40:08.021]     }
[17:40:08.021]     ...future.result$conditions <- ...future.conditions
[17:40:08.021]     ...future.result$finished <- base::Sys.time()
[17:40:08.021]     ...future.result
[17:40:08.021] }
[17:40:08.024] requestCore(): workers = 2
[17:40:08.025] MulticoreFuture started
 - Creating multicore future #2 ...
[17:40:08.026] plan(): Setting new future strategy stack:
[17:40:08.027] List of future strategies:
[17:40:08.027] 1. sequential:
[17:40:08.027]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:40:08.027]    - tweaked: FALSE
[17:40:08.027]    - call: NULL
[17:40:08.028] plan(): nbrOfWorkers() = 1
[17:40:08.030] plan(): Setting new future strategy stack:
[17:40:08.030] List of future strategies:
[17:40:08.030] 1. multicore:
[17:40:08.030]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:40:08.030]    - tweaked: FALSE
[17:40:08.030]    - call: plan(multicore)
[17:40:08.030] getGlobalsAndPackages() ...
[17:40:08.031] Not searching for globals
[17:40:08.031] - globals: [0] <none>
[17:40:08.031] getGlobalsAndPackages() ... DONE
[17:40:08.032] Packages needed by the future expression (n = 0): <none>
[17:40:08.032] Packages needed by future strategies (n = 0): <none>
[17:40:08.034] plan(): nbrOfWorkers() = 2
[17:40:08.033] {
[17:40:08.033]     {
[17:40:08.033]         {
[17:40:08.033]             ...future.startTime <- base::Sys.time()
[17:40:08.033]             {
[17:40:08.033]                 {
[17:40:08.033]                   {
[17:40:08.033]                     {
[17:40:08.033]                       base::local({
[17:40:08.033]                         has_future <- base::requireNamespace("future", 
[17:40:08.033]                           quietly = TRUE)
[17:40:08.033]                         if (has_future) {
[17:40:08.033]                           ns <- base::getNamespace("future")
[17:40:08.033]                           version <- ns[[".package"]][["version"]]
[17:40:08.033]                           if (is.null(version)) 
[17:40:08.033]                             version <- utils::packageVersion("future")
[17:40:08.033]                         }
[17:40:08.033]                         else {
[17:40:08.033]                           version <- NULL
[17:40:08.033]                         }
[17:40:08.033]                         if (!has_future || version < "1.8.0") {
[17:40:08.033]                           info <- base::c(r_version = base::gsub("R version ", 
[17:40:08.033]                             "", base::R.version$version.string), 
[17:40:08.033]                             platform = base::sprintf("%s (%s-bit)", 
[17:40:08.033]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:08.033]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:08.033]                               "release", "version")], collapse = " "), 
[17:40:08.033]                             hostname = base::Sys.info()[["nodename"]])
[17:40:08.033]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:40:08.033]                             info)
[17:40:08.033]                           info <- base::paste(info, collapse = "; ")
[17:40:08.033]                           if (!has_future) {
[17:40:08.033]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:08.033]                               info)
[17:40:08.033]                           }
[17:40:08.033]                           else {
[17:40:08.033]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:08.033]                               info, version)
[17:40:08.033]                           }
[17:40:08.033]                           base::stop(msg)
[17:40:08.033]                         }
[17:40:08.033]                       })
[17:40:08.033]                     }
[17:40:08.033]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:40:08.033]                     base::options(mc.cores = 1L)
[17:40:08.033]                   }
[17:40:08.033]                   ...future.strategy.old <- future::plan("list")
[17:40:08.033]                   options(future.plan = NULL)
[17:40:08.033]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:08.033]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:08.033]                 }
[17:40:08.033]                 ...future.workdir <- getwd()
[17:40:08.033]             }
[17:40:08.033]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:08.033]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:08.033]         }
[17:40:08.033]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:08.033]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:40:08.033]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:08.033]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:08.033]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:08.033]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:08.033]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:08.033]             base::names(...future.oldOptions))
[17:40:08.033]     }
[17:40:08.033]     if (FALSE) {
[17:40:08.033]     }
[17:40:08.033]     else {
[17:40:08.033]         if (TRUE) {
[17:40:08.033]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:08.033]                 open = "w")
[17:40:08.033]         }
[17:40:08.033]         else {
[17:40:08.033]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:08.033]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:08.033]         }
[17:40:08.033]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:08.033]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:08.033]             base::sink(type = "output", split = FALSE)
[17:40:08.033]             base::close(...future.stdout)
[17:40:08.033]         }, add = TRUE)
[17:40:08.033]     }
[17:40:08.033]     ...future.frame <- base::sys.nframe()
[17:40:08.033]     ...future.conditions <- base::list()
[17:40:08.033]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:08.033]     if (FALSE) {
[17:40:08.033]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:08.033]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:08.033]     }
[17:40:08.033]     ...future.result <- base::tryCatch({
[17:40:08.033]         base::withCallingHandlers({
[17:40:08.033]             ...future.value <- base::withVisible(base::local({
[17:40:08.033]                 withCallingHandlers({
[17:40:08.033]                   {
[17:40:08.033]                     ii
[17:40:08.033]                   }
[17:40:08.033]                 }, immediateCondition = function(cond) {
[17:40:08.033]                   save_rds <- function (object, pathname, ...) 
[17:40:08.033]                   {
[17:40:08.033]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:40:08.033]                     if (file_test("-f", pathname_tmp)) {
[17:40:08.033]                       fi_tmp <- file.info(pathname_tmp)
[17:40:08.033]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:40:08.033]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:08.033]                         fi_tmp[["mtime"]])
[17:40:08.033]                     }
[17:40:08.033]                     tryCatch({
[17:40:08.033]                       saveRDS(object, file = pathname_tmp, ...)
[17:40:08.033]                     }, error = function(ex) {
[17:40:08.033]                       msg <- conditionMessage(ex)
[17:40:08.033]                       fi_tmp <- file.info(pathname_tmp)
[17:40:08.033]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:40:08.033]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:08.033]                         fi_tmp[["mtime"]], msg)
[17:40:08.033]                       ex$message <- msg
[17:40:08.033]                       stop(ex)
[17:40:08.033]                     })
[17:40:08.033]                     stopifnot(file_test("-f", pathname_tmp))
[17:40:08.033]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:40:08.033]                     if (!res || file_test("-f", pathname_tmp)) {
[17:40:08.033]                       fi_tmp <- file.info(pathname_tmp)
[17:40:08.033]                       fi <- file.info(pathname)
[17:40:08.033]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:40:08.033]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:08.033]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:40:08.033]                         fi[["size"]], fi[["mtime"]])
[17:40:08.033]                       stop(msg)
[17:40:08.033]                     }
[17:40:08.033]                     invisible(pathname)
[17:40:08.033]                   }
[17:40:08.033]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:40:08.033]                     rootPath = tempdir()) 
[17:40:08.033]                   {
[17:40:08.033]                     obj <- list(time = Sys.time(), condition = cond)
[17:40:08.033]                     file <- tempfile(pattern = class(cond)[1], 
[17:40:08.033]                       tmpdir = path, fileext = ".rds")
[17:40:08.033]                     save_rds(obj, file)
[17:40:08.033]                   }
[17:40:08.033]                   saveImmediateCondition(cond, path = "/tmp/RtmpKWJjLX/.future/immediateConditions")
[17:40:08.033]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:08.033]                   {
[17:40:08.033]                     inherits <- base::inherits
[17:40:08.033]                     invokeRestart <- base::invokeRestart
[17:40:08.033]                     is.null <- base::is.null
[17:40:08.033]                     muffled <- FALSE
[17:40:08.033]                     if (inherits(cond, "message")) {
[17:40:08.033]                       muffled <- grepl(pattern, "muffleMessage")
[17:40:08.033]                       if (muffled) 
[17:40:08.033]                         invokeRestart("muffleMessage")
[17:40:08.033]                     }
[17:40:08.033]                     else if (inherits(cond, "warning")) {
[17:40:08.033]                       muffled <- grepl(pattern, "muffleWarning")
[17:40:08.033]                       if (muffled) 
[17:40:08.033]                         invokeRestart("muffleWarning")
[17:40:08.033]                     }
[17:40:08.033]                     else if (inherits(cond, "condition")) {
[17:40:08.033]                       if (!is.null(pattern)) {
[17:40:08.033]                         computeRestarts <- base::computeRestarts
[17:40:08.033]                         grepl <- base::grepl
[17:40:08.033]                         restarts <- computeRestarts(cond)
[17:40:08.033]                         for (restart in restarts) {
[17:40:08.033]                           name <- restart$name
[17:40:08.033]                           if (is.null(name)) 
[17:40:08.033]                             next
[17:40:08.033]                           if (!grepl(pattern, name)) 
[17:40:08.033]                             next
[17:40:08.033]                           invokeRestart(restart)
[17:40:08.033]                           muffled <- TRUE
[17:40:08.033]                           break
[17:40:08.033]                         }
[17:40:08.033]                       }
[17:40:08.033]                     }
[17:40:08.033]                     invisible(muffled)
[17:40:08.033]                   }
[17:40:08.033]                   muffleCondition(cond)
[17:40:08.033]                 })
[17:40:08.033]             }))
[17:40:08.033]             future::FutureResult(value = ...future.value$value, 
[17:40:08.033]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:08.033]                   ...future.rng), globalenv = if (FALSE) 
[17:40:08.033]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:08.033]                     ...future.globalenv.names))
[17:40:08.033]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:08.033]         }, condition = base::local({
[17:40:08.033]             c <- base::c
[17:40:08.033]             inherits <- base::inherits
[17:40:08.033]             invokeRestart <- base::invokeRestart
[17:40:08.033]             length <- base::length
[17:40:08.033]             list <- base::list
[17:40:08.033]             seq.int <- base::seq.int
[17:40:08.033]             signalCondition <- base::signalCondition
[17:40:08.033]             sys.calls <- base::sys.calls
[17:40:08.033]             `[[` <- base::`[[`
[17:40:08.033]             `+` <- base::`+`
[17:40:08.033]             `<<-` <- base::`<<-`
[17:40:08.033]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:08.033]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:08.033]                   3L)]
[17:40:08.033]             }
[17:40:08.033]             function(cond) {
[17:40:08.033]                 is_error <- inherits(cond, "error")
[17:40:08.033]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:08.033]                   NULL)
[17:40:08.033]                 if (is_error) {
[17:40:08.033]                   sessionInformation <- function() {
[17:40:08.033]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:08.033]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:08.033]                       search = base::search(), system = base::Sys.info())
[17:40:08.033]                   }
[17:40:08.033]                   ...future.conditions[[length(...future.conditions) + 
[17:40:08.033]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:08.033]                     cond$call), session = sessionInformation(), 
[17:40:08.033]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:08.033]                   signalCondition(cond)
[17:40:08.033]                 }
[17:40:08.033]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:08.033]                 "immediateCondition"))) {
[17:40:08.033]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:08.033]                   ...future.conditions[[length(...future.conditions) + 
[17:40:08.033]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:08.033]                   if (TRUE && !signal) {
[17:40:08.033]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:08.033]                     {
[17:40:08.033]                       inherits <- base::inherits
[17:40:08.033]                       invokeRestart <- base::invokeRestart
[17:40:08.033]                       is.null <- base::is.null
[17:40:08.033]                       muffled <- FALSE
[17:40:08.033]                       if (inherits(cond, "message")) {
[17:40:08.033]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:08.033]                         if (muffled) 
[17:40:08.033]                           invokeRestart("muffleMessage")
[17:40:08.033]                       }
[17:40:08.033]                       else if (inherits(cond, "warning")) {
[17:40:08.033]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:08.033]                         if (muffled) 
[17:40:08.033]                           invokeRestart("muffleWarning")
[17:40:08.033]                       }
[17:40:08.033]                       else if (inherits(cond, "condition")) {
[17:40:08.033]                         if (!is.null(pattern)) {
[17:40:08.033]                           computeRestarts <- base::computeRestarts
[17:40:08.033]                           grepl <- base::grepl
[17:40:08.033]                           restarts <- computeRestarts(cond)
[17:40:08.033]                           for (restart in restarts) {
[17:40:08.033]                             name <- restart$name
[17:40:08.033]                             if (is.null(name)) 
[17:40:08.033]                               next
[17:40:08.033]                             if (!grepl(pattern, name)) 
[17:40:08.033]                               next
[17:40:08.033]                             invokeRestart(restart)
[17:40:08.033]                             muffled <- TRUE
[17:40:08.033]                             break
[17:40:08.033]                           }
[17:40:08.033]                         }
[17:40:08.033]                       }
[17:40:08.033]                       invisible(muffled)
[17:40:08.033]                     }
[17:40:08.033]                     muffleCondition(cond, pattern = "^muffle")
[17:40:08.033]                   }
[17:40:08.033]                 }
[17:40:08.033]                 else {
[17:40:08.033]                   if (TRUE) {
[17:40:08.033]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:08.033]                     {
[17:40:08.033]                       inherits <- base::inherits
[17:40:08.033]                       invokeRestart <- base::invokeRestart
[17:40:08.033]                       is.null <- base::is.null
[17:40:08.033]                       muffled <- FALSE
[17:40:08.033]                       if (inherits(cond, "message")) {
[17:40:08.033]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:08.033]                         if (muffled) 
[17:40:08.033]                           invokeRestart("muffleMessage")
[17:40:08.033]                       }
[17:40:08.033]                       else if (inherits(cond, "warning")) {
[17:40:08.033]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:08.033]                         if (muffled) 
[17:40:08.033]                           invokeRestart("muffleWarning")
[17:40:08.033]                       }
[17:40:08.033]                       else if (inherits(cond, "condition")) {
[17:40:08.033]                         if (!is.null(pattern)) {
[17:40:08.033]                           computeRestarts <- base::computeRestarts
[17:40:08.033]                           grepl <- base::grepl
[17:40:08.033]                           restarts <- computeRestarts(cond)
[17:40:08.033]                           for (restart in restarts) {
[17:40:08.033]                             name <- restart$name
[17:40:08.033]                             if (is.null(name)) 
[17:40:08.033]                               next
[17:40:08.033]                             if (!grepl(pattern, name)) 
[17:40:08.033]                               next
[17:40:08.033]                             invokeRestart(restart)
[17:40:08.033]                             muffled <- TRUE
[17:40:08.033]                             break
[17:40:08.033]                           }
[17:40:08.033]                         }
[17:40:08.033]                       }
[17:40:08.033]                       invisible(muffled)
[17:40:08.033]                     }
[17:40:08.033]                     muffleCondition(cond, pattern = "^muffle")
[17:40:08.033]                   }
[17:40:08.033]                 }
[17:40:08.033]             }
[17:40:08.033]         }))
[17:40:08.033]     }, error = function(ex) {
[17:40:08.033]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:08.033]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:08.033]                 ...future.rng), started = ...future.startTime, 
[17:40:08.033]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:08.033]             version = "1.8"), class = "FutureResult")
[17:40:08.033]     }, finally = {
[17:40:08.033]         if (!identical(...future.workdir, getwd())) 
[17:40:08.033]             setwd(...future.workdir)
[17:40:08.033]         {
[17:40:08.033]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:08.033]                 ...future.oldOptions$nwarnings <- NULL
[17:40:08.033]             }
[17:40:08.033]             base::options(...future.oldOptions)
[17:40:08.033]             if (.Platform$OS.type == "windows") {
[17:40:08.033]                 old_names <- names(...future.oldEnvVars)
[17:40:08.033]                 envs <- base::Sys.getenv()
[17:40:08.033]                 names <- names(envs)
[17:40:08.033]                 common <- intersect(names, old_names)
[17:40:08.033]                 added <- setdiff(names, old_names)
[17:40:08.033]                 removed <- setdiff(old_names, names)
[17:40:08.033]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:08.033]                   envs[common]]
[17:40:08.033]                 NAMES <- toupper(changed)
[17:40:08.033]                 args <- list()
[17:40:08.033]                 for (kk in seq_along(NAMES)) {
[17:40:08.033]                   name <- changed[[kk]]
[17:40:08.033]                   NAME <- NAMES[[kk]]
[17:40:08.033]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:08.033]                     next
[17:40:08.033]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:08.033]                 }
[17:40:08.033]                 NAMES <- toupper(added)
[17:40:08.033]                 for (kk in seq_along(NAMES)) {
[17:40:08.033]                   name <- added[[kk]]
[17:40:08.033]                   NAME <- NAMES[[kk]]
[17:40:08.033]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:08.033]                     next
[17:40:08.033]                   args[[name]] <- ""
[17:40:08.033]                 }
[17:40:08.033]                 NAMES <- toupper(removed)
[17:40:08.033]                 for (kk in seq_along(NAMES)) {
[17:40:08.033]                   name <- removed[[kk]]
[17:40:08.033]                   NAME <- NAMES[[kk]]
[17:40:08.033]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:08.033]                     next
[17:40:08.033]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:08.033]                 }
[17:40:08.033]                 if (length(args) > 0) 
[17:40:08.033]                   base::do.call(base::Sys.setenv, args = args)
[17:40:08.033]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:08.033]             }
[17:40:08.033]             else {
[17:40:08.033]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:08.033]             }
[17:40:08.033]             {
[17:40:08.033]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:08.033]                   0L) {
[17:40:08.033]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:08.033]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:08.033]                   base::options(opts)
[17:40:08.033]                 }
[17:40:08.033]                 {
[17:40:08.033]                   {
[17:40:08.033]                     base::options(mc.cores = ...future.mc.cores.old)
[17:40:08.033]                     NULL
[17:40:08.033]                   }
[17:40:08.033]                   options(future.plan = NULL)
[17:40:08.033]                   if (is.na(NA_character_)) 
[17:40:08.033]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:08.033]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:08.033]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:40:08.033]                     .init = FALSE)
[17:40:08.033]                 }
[17:40:08.033]             }
[17:40:08.033]         }
[17:40:08.033]     })
[17:40:08.033]     if (TRUE) {
[17:40:08.033]         base::sink(type = "output", split = FALSE)
[17:40:08.033]         if (TRUE) {
[17:40:08.033]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:08.033]         }
[17:40:08.033]         else {
[17:40:08.033]             ...future.result["stdout"] <- base::list(NULL)
[17:40:08.033]         }
[17:40:08.033]         base::close(...future.stdout)
[17:40:08.033]         ...future.stdout <- NULL
[17:40:08.033]     }
[17:40:08.033]     ...future.result$conditions <- ...future.conditions
[17:40:08.033]     ...future.result$finished <- base::Sys.time()
[17:40:08.033]     ...future.result
[17:40:08.033] }
[17:40:08.036] requestCore(): workers = 2
[17:40:08.038] MulticoreFuture started
 - Creating multicore future #3 ...
[17:40:08.039] plan(): Setting new future strategy stack:
[17:40:08.039] List of future strategies:
[17:40:08.039] 1. sequential:
[17:40:08.039]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:40:08.039]    - tweaked: FALSE
[17:40:08.039]    - call: NULL
[17:40:08.040] plan(): nbrOfWorkers() = 1
[17:40:08.042] plan(): Setting new future strategy stack:
[17:40:08.042] List of future strategies:
[17:40:08.042] 1. multicore:
[17:40:08.042]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:40:08.042]    - tweaked: FALSE
[17:40:08.042]    - call: plan(multicore)
[17:40:08.043] getGlobalsAndPackages() ...
[17:40:08.043] Not searching for globals
[17:40:08.044] - globals: [0] <none>
[17:40:08.044] getGlobalsAndPackages() ... DONE
[17:40:08.045] Packages needed by the future expression (n = 0): <none>
[17:40:08.045] Packages needed by future strategies (n = 0): <none>
[17:40:08.046] plan(): nbrOfWorkers() = 2
[17:40:08.046] {
[17:40:08.046]     {
[17:40:08.046]         {
[17:40:08.046]             ...future.startTime <- base::Sys.time()
[17:40:08.046]             {
[17:40:08.046]                 {
[17:40:08.046]                   {
[17:40:08.046]                     {
[17:40:08.046]                       base::local({
[17:40:08.046]                         has_future <- base::requireNamespace("future", 
[17:40:08.046]                           quietly = TRUE)
[17:40:08.046]                         if (has_future) {
[17:40:08.046]                           ns <- base::getNamespace("future")
[17:40:08.046]                           version <- ns[[".package"]][["version"]]
[17:40:08.046]                           if (is.null(version)) 
[17:40:08.046]                             version <- utils::packageVersion("future")
[17:40:08.046]                         }
[17:40:08.046]                         else {
[17:40:08.046]                           version <- NULL
[17:40:08.046]                         }
[17:40:08.046]                         if (!has_future || version < "1.8.0") {
[17:40:08.046]                           info <- base::c(r_version = base::gsub("R version ", 
[17:40:08.046]                             "", base::R.version$version.string), 
[17:40:08.046]                             platform = base::sprintf("%s (%s-bit)", 
[17:40:08.046]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:08.046]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:08.046]                               "release", "version")], collapse = " "), 
[17:40:08.046]                             hostname = base::Sys.info()[["nodename"]])
[17:40:08.046]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:40:08.046]                             info)
[17:40:08.046]                           info <- base::paste(info, collapse = "; ")
[17:40:08.046]                           if (!has_future) {
[17:40:08.046]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:08.046]                               info)
[17:40:08.046]                           }
[17:40:08.046]                           else {
[17:40:08.046]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:08.046]                               info, version)
[17:40:08.046]                           }
[17:40:08.046]                           base::stop(msg)
[17:40:08.046]                         }
[17:40:08.046]                       })
[17:40:08.046]                     }
[17:40:08.046]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:40:08.046]                     base::options(mc.cores = 1L)
[17:40:08.046]                   }
[17:40:08.046]                   ...future.strategy.old <- future::plan("list")
[17:40:08.046]                   options(future.plan = NULL)
[17:40:08.046]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:08.046]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:08.046]                 }
[17:40:08.046]                 ...future.workdir <- getwd()
[17:40:08.046]             }
[17:40:08.046]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:08.046]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:08.046]         }
[17:40:08.046]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:08.046]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:40:08.046]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:08.046]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:08.046]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:08.046]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:08.046]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:08.046]             base::names(...future.oldOptions))
[17:40:08.046]     }
[17:40:08.046]     if (FALSE) {
[17:40:08.046]     }
[17:40:08.046]     else {
[17:40:08.046]         if (TRUE) {
[17:40:08.046]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:08.046]                 open = "w")
[17:40:08.046]         }
[17:40:08.046]         else {
[17:40:08.046]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:08.046]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:08.046]         }
[17:40:08.046]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:08.046]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:08.046]             base::sink(type = "output", split = FALSE)
[17:40:08.046]             base::close(...future.stdout)
[17:40:08.046]         }, add = TRUE)
[17:40:08.046]     }
[17:40:08.046]     ...future.frame <- base::sys.nframe()
[17:40:08.046]     ...future.conditions <- base::list()
[17:40:08.046]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:08.046]     if (FALSE) {
[17:40:08.046]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:08.046]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:08.046]     }
[17:40:08.046]     ...future.result <- base::tryCatch({
[17:40:08.046]         base::withCallingHandlers({
[17:40:08.046]             ...future.value <- base::withVisible(base::local({
[17:40:08.046]                 withCallingHandlers({
[17:40:08.046]                   {
[17:40:08.046]                     ii
[17:40:08.046]                   }
[17:40:08.046]                 }, immediateCondition = function(cond) {
[17:40:08.046]                   save_rds <- function (object, pathname, ...) 
[17:40:08.046]                   {
[17:40:08.046]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:40:08.046]                     if (file_test("-f", pathname_tmp)) {
[17:40:08.046]                       fi_tmp <- file.info(pathname_tmp)
[17:40:08.046]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:40:08.046]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:08.046]                         fi_tmp[["mtime"]])
[17:40:08.046]                     }
[17:40:08.046]                     tryCatch({
[17:40:08.046]                       saveRDS(object, file = pathname_tmp, ...)
[17:40:08.046]                     }, error = function(ex) {
[17:40:08.046]                       msg <- conditionMessage(ex)
[17:40:08.046]                       fi_tmp <- file.info(pathname_tmp)
[17:40:08.046]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:40:08.046]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:08.046]                         fi_tmp[["mtime"]], msg)
[17:40:08.046]                       ex$message <- msg
[17:40:08.046]                       stop(ex)
[17:40:08.046]                     })
[17:40:08.046]                     stopifnot(file_test("-f", pathname_tmp))
[17:40:08.046]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:40:08.046]                     if (!res || file_test("-f", pathname_tmp)) {
[17:40:08.046]                       fi_tmp <- file.info(pathname_tmp)
[17:40:08.046]                       fi <- file.info(pathname)
[17:40:08.046]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:40:08.046]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:08.046]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:40:08.046]                         fi[["size"]], fi[["mtime"]])
[17:40:08.046]                       stop(msg)
[17:40:08.046]                     }
[17:40:08.046]                     invisible(pathname)
[17:40:08.046]                   }
[17:40:08.046]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:40:08.046]                     rootPath = tempdir()) 
[17:40:08.046]                   {
[17:40:08.046]                     obj <- list(time = Sys.time(), condition = cond)
[17:40:08.046]                     file <- tempfile(pattern = class(cond)[1], 
[17:40:08.046]                       tmpdir = path, fileext = ".rds")
[17:40:08.046]                     save_rds(obj, file)
[17:40:08.046]                   }
[17:40:08.046]                   saveImmediateCondition(cond, path = "/tmp/RtmpKWJjLX/.future/immediateConditions")
[17:40:08.046]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:08.046]                   {
[17:40:08.046]                     inherits <- base::inherits
[17:40:08.046]                     invokeRestart <- base::invokeRestart
[17:40:08.046]                     is.null <- base::is.null
[17:40:08.046]                     muffled <- FALSE
[17:40:08.046]                     if (inherits(cond, "message")) {
[17:40:08.046]                       muffled <- grepl(pattern, "muffleMessage")
[17:40:08.046]                       if (muffled) 
[17:40:08.046]                         invokeRestart("muffleMessage")
[17:40:08.046]                     }
[17:40:08.046]                     else if (inherits(cond, "warning")) {
[17:40:08.046]                       muffled <- grepl(pattern, "muffleWarning")
[17:40:08.046]                       if (muffled) 
[17:40:08.046]                         invokeRestart("muffleWarning")
[17:40:08.046]                     }
[17:40:08.046]                     else if (inherits(cond, "condition")) {
[17:40:08.046]                       if (!is.null(pattern)) {
[17:40:08.046]                         computeRestarts <- base::computeRestarts
[17:40:08.046]                         grepl <- base::grepl
[17:40:08.046]                         restarts <- computeRestarts(cond)
[17:40:08.046]                         for (restart in restarts) {
[17:40:08.046]                           name <- restart$name
[17:40:08.046]                           if (is.null(name)) 
[17:40:08.046]                             next
[17:40:08.046]                           if (!grepl(pattern, name)) 
[17:40:08.046]                             next
[17:40:08.046]                           invokeRestart(restart)
[17:40:08.046]                           muffled <- TRUE
[17:40:08.046]                           break
[17:40:08.046]                         }
[17:40:08.046]                       }
[17:40:08.046]                     }
[17:40:08.046]                     invisible(muffled)
[17:40:08.046]                   }
[17:40:08.046]                   muffleCondition(cond)
[17:40:08.046]                 })
[17:40:08.046]             }))
[17:40:08.046]             future::FutureResult(value = ...future.value$value, 
[17:40:08.046]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:08.046]                   ...future.rng), globalenv = if (FALSE) 
[17:40:08.046]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:08.046]                     ...future.globalenv.names))
[17:40:08.046]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:08.046]         }, condition = base::local({
[17:40:08.046]             c <- base::c
[17:40:08.046]             inherits <- base::inherits
[17:40:08.046]             invokeRestart <- base::invokeRestart
[17:40:08.046]             length <- base::length
[17:40:08.046]             list <- base::list
[17:40:08.046]             seq.int <- base::seq.int
[17:40:08.046]             signalCondition <- base::signalCondition
[17:40:08.046]             sys.calls <- base::sys.calls
[17:40:08.046]             `[[` <- base::`[[`
[17:40:08.046]             `+` <- base::`+`
[17:40:08.046]             `<<-` <- base::`<<-`
[17:40:08.046]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:08.046]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:08.046]                   3L)]
[17:40:08.046]             }
[17:40:08.046]             function(cond) {
[17:40:08.046]                 is_error <- inherits(cond, "error")
[17:40:08.046]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:08.046]                   NULL)
[17:40:08.046]                 if (is_error) {
[17:40:08.046]                   sessionInformation <- function() {
[17:40:08.046]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:08.046]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:08.046]                       search = base::search(), system = base::Sys.info())
[17:40:08.046]                   }
[17:40:08.046]                   ...future.conditions[[length(...future.conditions) + 
[17:40:08.046]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:08.046]                     cond$call), session = sessionInformation(), 
[17:40:08.046]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:08.046]                   signalCondition(cond)
[17:40:08.046]                 }
[17:40:08.046]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:08.046]                 "immediateCondition"))) {
[17:40:08.046]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:08.046]                   ...future.conditions[[length(...future.conditions) + 
[17:40:08.046]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:08.046]                   if (TRUE && !signal) {
[17:40:08.046]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:08.046]                     {
[17:40:08.046]                       inherits <- base::inherits
[17:40:08.046]                       invokeRestart <- base::invokeRestart
[17:40:08.046]                       is.null <- base::is.null
[17:40:08.046]                       muffled <- FALSE
[17:40:08.046]                       if (inherits(cond, "message")) {
[17:40:08.046]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:08.046]                         if (muffled) 
[17:40:08.046]                           invokeRestart("muffleMessage")
[17:40:08.046]                       }
[17:40:08.046]                       else if (inherits(cond, "warning")) {
[17:40:08.046]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:08.046]                         if (muffled) 
[17:40:08.046]                           invokeRestart("muffleWarning")
[17:40:08.046]                       }
[17:40:08.046]                       else if (inherits(cond, "condition")) {
[17:40:08.046]                         if (!is.null(pattern)) {
[17:40:08.046]                           computeRestarts <- base::computeRestarts
[17:40:08.046]                           grepl <- base::grepl
[17:40:08.046]                           restarts <- computeRestarts(cond)
[17:40:08.046]                           for (restart in restarts) {
[17:40:08.046]                             name <- restart$name
[17:40:08.046]                             if (is.null(name)) 
[17:40:08.046]                               next
[17:40:08.046]                             if (!grepl(pattern, name)) 
[17:40:08.046]                               next
[17:40:08.046]                             invokeRestart(restart)
[17:40:08.046]                             muffled <- TRUE
[17:40:08.046]                             break
[17:40:08.046]                           }
[17:40:08.046]                         }
[17:40:08.046]                       }
[17:40:08.046]                       invisible(muffled)
[17:40:08.046]                     }
[17:40:08.046]                     muffleCondition(cond, pattern = "^muffle")
[17:40:08.046]                   }
[17:40:08.046]                 }
[17:40:08.046]                 else {
[17:40:08.046]                   if (TRUE) {
[17:40:08.046]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:08.046]                     {
[17:40:08.046]                       inherits <- base::inherits
[17:40:08.046]                       invokeRestart <- base::invokeRestart
[17:40:08.046]                       is.null <- base::is.null
[17:40:08.046]                       muffled <- FALSE
[17:40:08.046]                       if (inherits(cond, "message")) {
[17:40:08.046]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:08.046]                         if (muffled) 
[17:40:08.046]                           invokeRestart("muffleMessage")
[17:40:08.046]                       }
[17:40:08.046]                       else if (inherits(cond, "warning")) {
[17:40:08.046]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:08.046]                         if (muffled) 
[17:40:08.046]                           invokeRestart("muffleWarning")
[17:40:08.046]                       }
[17:40:08.046]                       else if (inherits(cond, "condition")) {
[17:40:08.046]                         if (!is.null(pattern)) {
[17:40:08.046]                           computeRestarts <- base::computeRestarts
[17:40:08.046]                           grepl <- base::grepl
[17:40:08.046]                           restarts <- computeRestarts(cond)
[17:40:08.046]                           for (restart in restarts) {
[17:40:08.046]                             name <- restart$name
[17:40:08.046]                             if (is.null(name)) 
[17:40:08.046]                               next
[17:40:08.046]                             if (!grepl(pattern, name)) 
[17:40:08.046]                               next
[17:40:08.046]                             invokeRestart(restart)
[17:40:08.046]                             muffled <- TRUE
[17:40:08.046]                             break
[17:40:08.046]                           }
[17:40:08.046]                         }
[17:40:08.046]                       }
[17:40:08.046]                       invisible(muffled)
[17:40:08.046]                     }
[17:40:08.046]                     muffleCondition(cond, pattern = "^muffle")
[17:40:08.046]                   }
[17:40:08.046]                 }
[17:40:08.046]             }
[17:40:08.046]         }))
[17:40:08.046]     }, error = function(ex) {
[17:40:08.046]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:08.046]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:08.046]                 ...future.rng), started = ...future.startTime, 
[17:40:08.046]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:08.046]             version = "1.8"), class = "FutureResult")
[17:40:08.046]     }, finally = {
[17:40:08.046]         if (!identical(...future.workdir, getwd())) 
[17:40:08.046]             setwd(...future.workdir)
[17:40:08.046]         {
[17:40:08.046]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:08.046]                 ...future.oldOptions$nwarnings <- NULL
[17:40:08.046]             }
[17:40:08.046]             base::options(...future.oldOptions)
[17:40:08.046]             if (.Platform$OS.type == "windows") {
[17:40:08.046]                 old_names <- names(...future.oldEnvVars)
[17:40:08.046]                 envs <- base::Sys.getenv()
[17:40:08.046]                 names <- names(envs)
[17:40:08.046]                 common <- intersect(names, old_names)
[17:40:08.046]                 added <- setdiff(names, old_names)
[17:40:08.046]                 removed <- setdiff(old_names, names)
[17:40:08.046]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:08.046]                   envs[common]]
[17:40:08.046]                 NAMES <- toupper(changed)
[17:40:08.046]                 args <- list()
[17:40:08.046]                 for (kk in seq_along(NAMES)) {
[17:40:08.046]                   name <- changed[[kk]]
[17:40:08.046]                   NAME <- NAMES[[kk]]
[17:40:08.046]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:08.046]                     next
[17:40:08.046]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:08.046]                 }
[17:40:08.046]                 NAMES <- toupper(added)
[17:40:08.046]                 for (kk in seq_along(NAMES)) {
[17:40:08.046]                   name <- added[[kk]]
[17:40:08.046]                   NAME <- NAMES[[kk]]
[17:40:08.046]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:08.046]                     next
[17:40:08.046]                   args[[name]] <- ""
[17:40:08.046]                 }
[17:40:08.046]                 NAMES <- toupper(removed)
[17:40:08.046]                 for (kk in seq_along(NAMES)) {
[17:40:08.046]                   name <- removed[[kk]]
[17:40:08.046]                   NAME <- NAMES[[kk]]
[17:40:08.046]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:08.046]                     next
[17:40:08.046]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:08.046]                 }
[17:40:08.046]                 if (length(args) > 0) 
[17:40:08.046]                   base::do.call(base::Sys.setenv, args = args)
[17:40:08.046]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:08.046]             }
[17:40:08.046]             else {
[17:40:08.046]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:08.046]             }
[17:40:08.046]             {
[17:40:08.046]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:08.046]                   0L) {
[17:40:08.046]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:08.046]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:08.046]                   base::options(opts)
[17:40:08.046]                 }
[17:40:08.046]                 {
[17:40:08.046]                   {
[17:40:08.046]                     base::options(mc.cores = ...future.mc.cores.old)
[17:40:08.046]                     NULL
[17:40:08.046]                   }
[17:40:08.046]                   options(future.plan = NULL)
[17:40:08.046]                   if (is.na(NA_character_)) 
[17:40:08.046]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:08.046]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:08.046]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:40:08.046]                     .init = FALSE)
[17:40:08.046]                 }
[17:40:08.046]             }
[17:40:08.046]         }
[17:40:08.046]     })
[17:40:08.046]     if (TRUE) {
[17:40:08.046]         base::sink(type = "output", split = FALSE)
[17:40:08.046]         if (TRUE) {
[17:40:08.046]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:08.046]         }
[17:40:08.046]         else {
[17:40:08.046]             ...future.result["stdout"] <- base::list(NULL)
[17:40:08.046]         }
[17:40:08.046]         base::close(...future.stdout)
[17:40:08.046]         ...future.stdout <- NULL
[17:40:08.046]     }
[17:40:08.046]     ...future.result$conditions <- ...future.conditions
[17:40:08.046]     ...future.result$finished <- base::Sys.time()
[17:40:08.046]     ...future.result
[17:40:08.046] }
[17:40:08.049] requestCore(): workers = 2
[17:40:08.049] Poll #1 (0): usedCores() = 2, workers = 2
[17:40:08.060] result() for MulticoreFuture ...
[17:40:08.061] result() for MulticoreFuture ...
[17:40:08.061] result() for MulticoreFuture ... done
[17:40:08.061] result() for MulticoreFuture ... done
[17:40:08.061] result() for MulticoreFuture ...
[17:40:08.061] result() for MulticoreFuture ... done
[17:40:08.064] MulticoreFuture started
 - Creating multicore future #4 ...
[17:40:08.065] plan(): Setting new future strategy stack:
[17:40:08.065] List of future strategies:
[17:40:08.065] 1. sequential:
[17:40:08.065]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:40:08.065]    - tweaked: FALSE
[17:40:08.065]    - call: NULL
[17:40:08.066] plan(): nbrOfWorkers() = 1
[17:40:08.068] plan(): Setting new future strategy stack:
[17:40:08.068] List of future strategies:
[17:40:08.068] 1. multicore:
[17:40:08.068]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:40:08.068]    - tweaked: FALSE
[17:40:08.068]    - call: plan(multicore)
[17:40:08.069] getGlobalsAndPackages() ...
[17:40:08.070] Not searching for globals
[17:40:08.070] - globals: [0] <none>
[17:40:08.070] getGlobalsAndPackages() ... DONE
[17:40:08.071] Packages needed by the future expression (n = 0): <none>
[17:40:08.071] Packages needed by future strategies (n = 0): <none>
[17:40:08.073] plan(): nbrOfWorkers() = 2
[17:40:08.072] {
[17:40:08.072]     {
[17:40:08.072]         {
[17:40:08.072]             ...future.startTime <- base::Sys.time()
[17:40:08.072]             {
[17:40:08.072]                 {
[17:40:08.072]                   {
[17:40:08.072]                     {
[17:40:08.072]                       base::local({
[17:40:08.072]                         has_future <- base::requireNamespace("future", 
[17:40:08.072]                           quietly = TRUE)
[17:40:08.072]                         if (has_future) {
[17:40:08.072]                           ns <- base::getNamespace("future")
[17:40:08.072]                           version <- ns[[".package"]][["version"]]
[17:40:08.072]                           if (is.null(version)) 
[17:40:08.072]                             version <- utils::packageVersion("future")
[17:40:08.072]                         }
[17:40:08.072]                         else {
[17:40:08.072]                           version <- NULL
[17:40:08.072]                         }
[17:40:08.072]                         if (!has_future || version < "1.8.0") {
[17:40:08.072]                           info <- base::c(r_version = base::gsub("R version ", 
[17:40:08.072]                             "", base::R.version$version.string), 
[17:40:08.072]                             platform = base::sprintf("%s (%s-bit)", 
[17:40:08.072]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:08.072]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:08.072]                               "release", "version")], collapse = " "), 
[17:40:08.072]                             hostname = base::Sys.info()[["nodename"]])
[17:40:08.072]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:40:08.072]                             info)
[17:40:08.072]                           info <- base::paste(info, collapse = "; ")
[17:40:08.072]                           if (!has_future) {
[17:40:08.072]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:08.072]                               info)
[17:40:08.072]                           }
[17:40:08.072]                           else {
[17:40:08.072]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:08.072]                               info, version)
[17:40:08.072]                           }
[17:40:08.072]                           base::stop(msg)
[17:40:08.072]                         }
[17:40:08.072]                       })
[17:40:08.072]                     }
[17:40:08.072]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:40:08.072]                     base::options(mc.cores = 1L)
[17:40:08.072]                   }
[17:40:08.072]                   ...future.strategy.old <- future::plan("list")
[17:40:08.072]                   options(future.plan = NULL)
[17:40:08.072]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:08.072]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:08.072]                 }
[17:40:08.072]                 ...future.workdir <- getwd()
[17:40:08.072]             }
[17:40:08.072]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:08.072]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:08.072]         }
[17:40:08.072]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:08.072]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:40:08.072]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:08.072]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:08.072]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:08.072]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:08.072]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:08.072]             base::names(...future.oldOptions))
[17:40:08.072]     }
[17:40:08.072]     if (FALSE) {
[17:40:08.072]     }
[17:40:08.072]     else {
[17:40:08.072]         if (TRUE) {
[17:40:08.072]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:08.072]                 open = "w")
[17:40:08.072]         }
[17:40:08.072]         else {
[17:40:08.072]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:08.072]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:08.072]         }
[17:40:08.072]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:08.072]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:08.072]             base::sink(type = "output", split = FALSE)
[17:40:08.072]             base::close(...future.stdout)
[17:40:08.072]         }, add = TRUE)
[17:40:08.072]     }
[17:40:08.072]     ...future.frame <- base::sys.nframe()
[17:40:08.072]     ...future.conditions <- base::list()
[17:40:08.072]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:08.072]     if (FALSE) {
[17:40:08.072]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:08.072]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:08.072]     }
[17:40:08.072]     ...future.result <- base::tryCatch({
[17:40:08.072]         base::withCallingHandlers({
[17:40:08.072]             ...future.value <- base::withVisible(base::local({
[17:40:08.072]                 withCallingHandlers({
[17:40:08.072]                   {
[17:40:08.072]                     ii
[17:40:08.072]                   }
[17:40:08.072]                 }, immediateCondition = function(cond) {
[17:40:08.072]                   save_rds <- function (object, pathname, ...) 
[17:40:08.072]                   {
[17:40:08.072]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:40:08.072]                     if (file_test("-f", pathname_tmp)) {
[17:40:08.072]                       fi_tmp <- file.info(pathname_tmp)
[17:40:08.072]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:40:08.072]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:08.072]                         fi_tmp[["mtime"]])
[17:40:08.072]                     }
[17:40:08.072]                     tryCatch({
[17:40:08.072]                       saveRDS(object, file = pathname_tmp, ...)
[17:40:08.072]                     }, error = function(ex) {
[17:40:08.072]                       msg <- conditionMessage(ex)
[17:40:08.072]                       fi_tmp <- file.info(pathname_tmp)
[17:40:08.072]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:40:08.072]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:08.072]                         fi_tmp[["mtime"]], msg)
[17:40:08.072]                       ex$message <- msg
[17:40:08.072]                       stop(ex)
[17:40:08.072]                     })
[17:40:08.072]                     stopifnot(file_test("-f", pathname_tmp))
[17:40:08.072]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:40:08.072]                     if (!res || file_test("-f", pathname_tmp)) {
[17:40:08.072]                       fi_tmp <- file.info(pathname_tmp)
[17:40:08.072]                       fi <- file.info(pathname)
[17:40:08.072]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:40:08.072]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:08.072]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:40:08.072]                         fi[["size"]], fi[["mtime"]])
[17:40:08.072]                       stop(msg)
[17:40:08.072]                     }
[17:40:08.072]                     invisible(pathname)
[17:40:08.072]                   }
[17:40:08.072]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:40:08.072]                     rootPath = tempdir()) 
[17:40:08.072]                   {
[17:40:08.072]                     obj <- list(time = Sys.time(), condition = cond)
[17:40:08.072]                     file <- tempfile(pattern = class(cond)[1], 
[17:40:08.072]                       tmpdir = path, fileext = ".rds")
[17:40:08.072]                     save_rds(obj, file)
[17:40:08.072]                   }
[17:40:08.072]                   saveImmediateCondition(cond, path = "/tmp/RtmpKWJjLX/.future/immediateConditions")
[17:40:08.072]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:08.072]                   {
[17:40:08.072]                     inherits <- base::inherits
[17:40:08.072]                     invokeRestart <- base::invokeRestart
[17:40:08.072]                     is.null <- base::is.null
[17:40:08.072]                     muffled <- FALSE
[17:40:08.072]                     if (inherits(cond, "message")) {
[17:40:08.072]                       muffled <- grepl(pattern, "muffleMessage")
[17:40:08.072]                       if (muffled) 
[17:40:08.072]                         invokeRestart("muffleMessage")
[17:40:08.072]                     }
[17:40:08.072]                     else if (inherits(cond, "warning")) {
[17:40:08.072]                       muffled <- grepl(pattern, "muffleWarning")
[17:40:08.072]                       if (muffled) 
[17:40:08.072]                         invokeRestart("muffleWarning")
[17:40:08.072]                     }
[17:40:08.072]                     else if (inherits(cond, "condition")) {
[17:40:08.072]                       if (!is.null(pattern)) {
[17:40:08.072]                         computeRestarts <- base::computeRestarts
[17:40:08.072]                         grepl <- base::grepl
[17:40:08.072]                         restarts <- computeRestarts(cond)
[17:40:08.072]                         for (restart in restarts) {
[17:40:08.072]                           name <- restart$name
[17:40:08.072]                           if (is.null(name)) 
[17:40:08.072]                             next
[17:40:08.072]                           if (!grepl(pattern, name)) 
[17:40:08.072]                             next
[17:40:08.072]                           invokeRestart(restart)
[17:40:08.072]                           muffled <- TRUE
[17:40:08.072]                           break
[17:40:08.072]                         }
[17:40:08.072]                       }
[17:40:08.072]                     }
[17:40:08.072]                     invisible(muffled)
[17:40:08.072]                   }
[17:40:08.072]                   muffleCondition(cond)
[17:40:08.072]                 })
[17:40:08.072]             }))
[17:40:08.072]             future::FutureResult(value = ...future.value$value, 
[17:40:08.072]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:08.072]                   ...future.rng), globalenv = if (FALSE) 
[17:40:08.072]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:08.072]                     ...future.globalenv.names))
[17:40:08.072]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:08.072]         }, condition = base::local({
[17:40:08.072]             c <- base::c
[17:40:08.072]             inherits <- base::inherits
[17:40:08.072]             invokeRestart <- base::invokeRestart
[17:40:08.072]             length <- base::length
[17:40:08.072]             list <- base::list
[17:40:08.072]             seq.int <- base::seq.int
[17:40:08.072]             signalCondition <- base::signalCondition
[17:40:08.072]             sys.calls <- base::sys.calls
[17:40:08.072]             `[[` <- base::`[[`
[17:40:08.072]             `+` <- base::`+`
[17:40:08.072]             `<<-` <- base::`<<-`
[17:40:08.072]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:08.072]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:08.072]                   3L)]
[17:40:08.072]             }
[17:40:08.072]             function(cond) {
[17:40:08.072]                 is_error <- inherits(cond, "error")
[17:40:08.072]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:08.072]                   NULL)
[17:40:08.072]                 if (is_error) {
[17:40:08.072]                   sessionInformation <- function() {
[17:40:08.072]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:08.072]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:08.072]                       search = base::search(), system = base::Sys.info())
[17:40:08.072]                   }
[17:40:08.072]                   ...future.conditions[[length(...future.conditions) + 
[17:40:08.072]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:08.072]                     cond$call), session = sessionInformation(), 
[17:40:08.072]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:08.072]                   signalCondition(cond)
[17:40:08.072]                 }
[17:40:08.072]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:08.072]                 "immediateCondition"))) {
[17:40:08.072]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:08.072]                   ...future.conditions[[length(...future.conditions) + 
[17:40:08.072]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:08.072]                   if (TRUE && !signal) {
[17:40:08.072]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:08.072]                     {
[17:40:08.072]                       inherits <- base::inherits
[17:40:08.072]                       invokeRestart <- base::invokeRestart
[17:40:08.072]                       is.null <- base::is.null
[17:40:08.072]                       muffled <- FALSE
[17:40:08.072]                       if (inherits(cond, "message")) {
[17:40:08.072]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:08.072]                         if (muffled) 
[17:40:08.072]                           invokeRestart("muffleMessage")
[17:40:08.072]                       }
[17:40:08.072]                       else if (inherits(cond, "warning")) {
[17:40:08.072]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:08.072]                         if (muffled) 
[17:40:08.072]                           invokeRestart("muffleWarning")
[17:40:08.072]                       }
[17:40:08.072]                       else if (inherits(cond, "condition")) {
[17:40:08.072]                         if (!is.null(pattern)) {
[17:40:08.072]                           computeRestarts <- base::computeRestarts
[17:40:08.072]                           grepl <- base::grepl
[17:40:08.072]                           restarts <- computeRestarts(cond)
[17:40:08.072]                           for (restart in restarts) {
[17:40:08.072]                             name <- restart$name
[17:40:08.072]                             if (is.null(name)) 
[17:40:08.072]                               next
[17:40:08.072]                             if (!grepl(pattern, name)) 
[17:40:08.072]                               next
[17:40:08.072]                             invokeRestart(restart)
[17:40:08.072]                             muffled <- TRUE
[17:40:08.072]                             break
[17:40:08.072]                           }
[17:40:08.072]                         }
[17:40:08.072]                       }
[17:40:08.072]                       invisible(muffled)
[17:40:08.072]                     }
[17:40:08.072]                     muffleCondition(cond, pattern = "^muffle")
[17:40:08.072]                   }
[17:40:08.072]                 }
[17:40:08.072]                 else {
[17:40:08.072]                   if (TRUE) {
[17:40:08.072]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:08.072]                     {
[17:40:08.072]                       inherits <- base::inherits
[17:40:08.072]                       invokeRestart <- base::invokeRestart
[17:40:08.072]                       is.null <- base::is.null
[17:40:08.072]                       muffled <- FALSE
[17:40:08.072]                       if (inherits(cond, "message")) {
[17:40:08.072]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:08.072]                         if (muffled) 
[17:40:08.072]                           invokeRestart("muffleMessage")
[17:40:08.072]                       }
[17:40:08.072]                       else if (inherits(cond, "warning")) {
[17:40:08.072]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:08.072]                         if (muffled) 
[17:40:08.072]                           invokeRestart("muffleWarning")
[17:40:08.072]                       }
[17:40:08.072]                       else if (inherits(cond, "condition")) {
[17:40:08.072]                         if (!is.null(pattern)) {
[17:40:08.072]                           computeRestarts <- base::computeRestarts
[17:40:08.072]                           grepl <- base::grepl
[17:40:08.072]                           restarts <- computeRestarts(cond)
[17:40:08.072]                           for (restart in restarts) {
[17:40:08.072]                             name <- restart$name
[17:40:08.072]                             if (is.null(name)) 
[17:40:08.072]                               next
[17:40:08.072]                             if (!grepl(pattern, name)) 
[17:40:08.072]                               next
[17:40:08.072]                             invokeRestart(restart)
[17:40:08.072]                             muffled <- TRUE
[17:40:08.072]                             break
[17:40:08.072]                           }
[17:40:08.072]                         }
[17:40:08.072]                       }
[17:40:08.072]                       invisible(muffled)
[17:40:08.072]                     }
[17:40:08.072]                     muffleCondition(cond, pattern = "^muffle")
[17:40:08.072]                   }
[17:40:08.072]                 }
[17:40:08.072]             }
[17:40:08.072]         }))
[17:40:08.072]     }, error = function(ex) {
[17:40:08.072]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:08.072]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:08.072]                 ...future.rng), started = ...future.startTime, 
[17:40:08.072]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:08.072]             version = "1.8"), class = "FutureResult")
[17:40:08.072]     }, finally = {
[17:40:08.072]         if (!identical(...future.workdir, getwd())) 
[17:40:08.072]             setwd(...future.workdir)
[17:40:08.072]         {
[17:40:08.072]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:08.072]                 ...future.oldOptions$nwarnings <- NULL
[17:40:08.072]             }
[17:40:08.072]             base::options(...future.oldOptions)
[17:40:08.072]             if (.Platform$OS.type == "windows") {
[17:40:08.072]                 old_names <- names(...future.oldEnvVars)
[17:40:08.072]                 envs <- base::Sys.getenv()
[17:40:08.072]                 names <- names(envs)
[17:40:08.072]                 common <- intersect(names, old_names)
[17:40:08.072]                 added <- setdiff(names, old_names)
[17:40:08.072]                 removed <- setdiff(old_names, names)
[17:40:08.072]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:08.072]                   envs[common]]
[17:40:08.072]                 NAMES <- toupper(changed)
[17:40:08.072]                 args <- list()
[17:40:08.072]                 for (kk in seq_along(NAMES)) {
[17:40:08.072]                   name <- changed[[kk]]
[17:40:08.072]                   NAME <- NAMES[[kk]]
[17:40:08.072]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:08.072]                     next
[17:40:08.072]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:08.072]                 }
[17:40:08.072]                 NAMES <- toupper(added)
[17:40:08.072]                 for (kk in seq_along(NAMES)) {
[17:40:08.072]                   name <- added[[kk]]
[17:40:08.072]                   NAME <- NAMES[[kk]]
[17:40:08.072]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:08.072]                     next
[17:40:08.072]                   args[[name]] <- ""
[17:40:08.072]                 }
[17:40:08.072]                 NAMES <- toupper(removed)
[17:40:08.072]                 for (kk in seq_along(NAMES)) {
[17:40:08.072]                   name <- removed[[kk]]
[17:40:08.072]                   NAME <- NAMES[[kk]]
[17:40:08.072]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:08.072]                     next
[17:40:08.072]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:08.072]                 }
[17:40:08.072]                 if (length(args) > 0) 
[17:40:08.072]                   base::do.call(base::Sys.setenv, args = args)
[17:40:08.072]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:08.072]             }
[17:40:08.072]             else {
[17:40:08.072]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:08.072]             }
[17:40:08.072]             {
[17:40:08.072]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:08.072]                   0L) {
[17:40:08.072]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:08.072]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:08.072]                   base::options(opts)
[17:40:08.072]                 }
[17:40:08.072]                 {
[17:40:08.072]                   {
[17:40:08.072]                     base::options(mc.cores = ...future.mc.cores.old)
[17:40:08.072]                     NULL
[17:40:08.072]                   }
[17:40:08.072]                   options(future.plan = NULL)
[17:40:08.072]                   if (is.na(NA_character_)) 
[17:40:08.072]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:08.072]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:08.072]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:40:08.072]                     .init = FALSE)
[17:40:08.072]                 }
[17:40:08.072]             }
[17:40:08.072]         }
[17:40:08.072]     })
[17:40:08.072]     if (TRUE) {
[17:40:08.072]         base::sink(type = "output", split = FALSE)
[17:40:08.072]         if (TRUE) {
[17:40:08.072]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:08.072]         }
[17:40:08.072]         else {
[17:40:08.072]             ...future.result["stdout"] <- base::list(NULL)
[17:40:08.072]         }
[17:40:08.072]         base::close(...future.stdout)
[17:40:08.072]         ...future.stdout <- NULL
[17:40:08.072]     }
[17:40:08.072]     ...future.result$conditions <- ...future.conditions
[17:40:08.072]     ...future.result$finished <- base::Sys.time()
[17:40:08.072]     ...future.result
[17:40:08.072] }
[17:40:08.076] requestCore(): workers = 2
[17:40:08.076] Poll #1 (0): usedCores() = 2, workers = 2
[17:40:08.099] result() for MulticoreFuture ...
[17:40:08.100] result() for MulticoreFuture ...
[17:40:08.100] result() for MulticoreFuture ... done
[17:40:08.100] result() for MulticoreFuture ... done
[17:40:08.101] result() for MulticoreFuture ...
[17:40:08.105] result() for MulticoreFuture ... done
[17:40:08.107] MulticoreFuture started
 - Resolving 4 multicore futures
[17:40:08.108] result() for MulticoreFuture ...
[17:40:08.108] result() for MulticoreFuture ... done
[17:40:08.108] plan(): Setting new future strategy stack:
[17:40:08.108] result() for MulticoreFuture ...
[17:40:08.109] result() for MulticoreFuture ... done
[17:40:08.109] result() for MulticoreFuture ...
[17:40:08.109] result() for MulticoreFuture ... done
[17:40:08.109] result() for MulticoreFuture ...
[17:40:08.108] List of future strategies:
[17:40:08.108] 1. sequential:
[17:40:08.108]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:40:08.108]    - tweaked: FALSE
[17:40:08.108]    - call: NULL
[17:40:08.110] result() for MulticoreFuture ... done
[17:40:08.110] result() for MulticoreFuture ...
[17:40:08.110] plan(): nbrOfWorkers() = 1
[17:40:08.111] result() for MulticoreFuture ...
[17:40:08.111] result() for MulticoreFuture ... done
[17:40:08.112] result() for MulticoreFuture ... done
[17:40:08.112] plan(): Setting new future strategy stack:
[17:40:08.112] result() for MulticoreFuture ...
[17:40:08.112] result() for MulticoreFuture ... done
[17:40:08.112] List of future strategies:
[17:40:08.112] 1. multicore:
[17:40:08.112]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:40:08.112]    - tweaked: FALSE
[17:40:08.112]    - call: plan(multicore)
[17:40:08.112] result() for MulticoreFuture ...
[17:40:08.117] plan(): nbrOfWorkers() = 2
[17:40:08.117] result() for MulticoreFuture ...
[17:40:08.118] result() for MulticoreFuture ... done
[17:40:08.118] result() for MulticoreFuture ... done
[17:40:08.118] result() for MulticoreFuture ...
[17:40:08.118] result() for MulticoreFuture ... done
*** multicore(..., globals = FALSE) and errors
[17:40:08.122] getGlobalsAndPackages() ...
[17:40:08.123] Not searching for globals
[17:40:08.123] - globals: [0] <none>
[17:40:08.123] getGlobalsAndPackages() ... DONE
[17:40:08.123] Packages needed by the future expression (n = 0): <none>
[17:40:08.124] Packages needed by future strategies (n = 0): <none>
[17:40:08.124] {
[17:40:08.124]     {
[17:40:08.124]         {
[17:40:08.124]             ...future.startTime <- base::Sys.time()
[17:40:08.124]             {
[17:40:08.124]                 {
[17:40:08.124]                   {
[17:40:08.124]                     {
[17:40:08.124]                       base::local({
[17:40:08.124]                         has_future <- base::requireNamespace("future", 
[17:40:08.124]                           quietly = TRUE)
[17:40:08.124]                         if (has_future) {
[17:40:08.124]                           ns <- base::getNamespace("future")
[17:40:08.124]                           version <- ns[[".package"]][["version"]]
[17:40:08.124]                           if (is.null(version)) 
[17:40:08.124]                             version <- utils::packageVersion("future")
[17:40:08.124]                         }
[17:40:08.124]                         else {
[17:40:08.124]                           version <- NULL
[17:40:08.124]                         }
[17:40:08.124]                         if (!has_future || version < "1.8.0") {
[17:40:08.124]                           info <- base::c(r_version = base::gsub("R version ", 
[17:40:08.124]                             "", base::R.version$version.string), 
[17:40:08.124]                             platform = base::sprintf("%s (%s-bit)", 
[17:40:08.124]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:08.124]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:08.124]                               "release", "version")], collapse = " "), 
[17:40:08.124]                             hostname = base::Sys.info()[["nodename"]])
[17:40:08.124]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:40:08.124]                             info)
[17:40:08.124]                           info <- base::paste(info, collapse = "; ")
[17:40:08.124]                           if (!has_future) {
[17:40:08.124]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:08.124]                               info)
[17:40:08.124]                           }
[17:40:08.124]                           else {
[17:40:08.124]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:08.124]                               info, version)
[17:40:08.124]                           }
[17:40:08.124]                           base::stop(msg)
[17:40:08.124]                         }
[17:40:08.124]                       })
[17:40:08.124]                     }
[17:40:08.124]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:40:08.124]                     base::options(mc.cores = 1L)
[17:40:08.124]                   }
[17:40:08.124]                   ...future.strategy.old <- future::plan("list")
[17:40:08.124]                   options(future.plan = NULL)
[17:40:08.124]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:08.124]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:08.124]                 }
[17:40:08.124]                 ...future.workdir <- getwd()
[17:40:08.124]             }
[17:40:08.124]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:08.124]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:08.124]         }
[17:40:08.124]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:08.124]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:40:08.124]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:08.124]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:08.124]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:08.124]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:08.124]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:08.124]             base::names(...future.oldOptions))
[17:40:08.124]     }
[17:40:08.124]     if (FALSE) {
[17:40:08.124]     }
[17:40:08.124]     else {
[17:40:08.124]         if (TRUE) {
[17:40:08.124]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:08.124]                 open = "w")
[17:40:08.124]         }
[17:40:08.124]         else {
[17:40:08.124]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:08.124]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:08.124]         }
[17:40:08.124]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:08.124]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:08.124]             base::sink(type = "output", split = FALSE)
[17:40:08.124]             base::close(...future.stdout)
[17:40:08.124]         }, add = TRUE)
[17:40:08.124]     }
[17:40:08.124]     ...future.frame <- base::sys.nframe()
[17:40:08.124]     ...future.conditions <- base::list()
[17:40:08.124]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:08.124]     if (FALSE) {
[17:40:08.124]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:08.124]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:08.124]     }
[17:40:08.124]     ...future.result <- base::tryCatch({
[17:40:08.124]         base::withCallingHandlers({
[17:40:08.124]             ...future.value <- base::withVisible(base::local({
[17:40:08.124]                 withCallingHandlers({
[17:40:08.124]                   {
[17:40:08.124]                     stop("Whoops!")
[17:40:08.124]                     1
[17:40:08.124]                   }
[17:40:08.124]                 }, immediateCondition = function(cond) {
[17:40:08.124]                   save_rds <- function (object, pathname, ...) 
[17:40:08.124]                   {
[17:40:08.124]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:40:08.124]                     if (file_test("-f", pathname_tmp)) {
[17:40:08.124]                       fi_tmp <- file.info(pathname_tmp)
[17:40:08.124]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:40:08.124]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:08.124]                         fi_tmp[["mtime"]])
[17:40:08.124]                     }
[17:40:08.124]                     tryCatch({
[17:40:08.124]                       saveRDS(object, file = pathname_tmp, ...)
[17:40:08.124]                     }, error = function(ex) {
[17:40:08.124]                       msg <- conditionMessage(ex)
[17:40:08.124]                       fi_tmp <- file.info(pathname_tmp)
[17:40:08.124]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:40:08.124]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:08.124]                         fi_tmp[["mtime"]], msg)
[17:40:08.124]                       ex$message <- msg
[17:40:08.124]                       stop(ex)
[17:40:08.124]                     })
[17:40:08.124]                     stopifnot(file_test("-f", pathname_tmp))
[17:40:08.124]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:40:08.124]                     if (!res || file_test("-f", pathname_tmp)) {
[17:40:08.124]                       fi_tmp <- file.info(pathname_tmp)
[17:40:08.124]                       fi <- file.info(pathname)
[17:40:08.124]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:40:08.124]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:08.124]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:40:08.124]                         fi[["size"]], fi[["mtime"]])
[17:40:08.124]                       stop(msg)
[17:40:08.124]                     }
[17:40:08.124]                     invisible(pathname)
[17:40:08.124]                   }
[17:40:08.124]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:40:08.124]                     rootPath = tempdir()) 
[17:40:08.124]                   {
[17:40:08.124]                     obj <- list(time = Sys.time(), condition = cond)
[17:40:08.124]                     file <- tempfile(pattern = class(cond)[1], 
[17:40:08.124]                       tmpdir = path, fileext = ".rds")
[17:40:08.124]                     save_rds(obj, file)
[17:40:08.124]                   }
[17:40:08.124]                   saveImmediateCondition(cond, path = "/tmp/RtmpKWJjLX/.future/immediateConditions")
[17:40:08.124]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:08.124]                   {
[17:40:08.124]                     inherits <- base::inherits
[17:40:08.124]                     invokeRestart <- base::invokeRestart
[17:40:08.124]                     is.null <- base::is.null
[17:40:08.124]                     muffled <- FALSE
[17:40:08.124]                     if (inherits(cond, "message")) {
[17:40:08.124]                       muffled <- grepl(pattern, "muffleMessage")
[17:40:08.124]                       if (muffled) 
[17:40:08.124]                         invokeRestart("muffleMessage")
[17:40:08.124]                     }
[17:40:08.124]                     else if (inherits(cond, "warning")) {
[17:40:08.124]                       muffled <- grepl(pattern, "muffleWarning")
[17:40:08.124]                       if (muffled) 
[17:40:08.124]                         invokeRestart("muffleWarning")
[17:40:08.124]                     }
[17:40:08.124]                     else if (inherits(cond, "condition")) {
[17:40:08.124]                       if (!is.null(pattern)) {
[17:40:08.124]                         computeRestarts <- base::computeRestarts
[17:40:08.124]                         grepl <- base::grepl
[17:40:08.124]                         restarts <- computeRestarts(cond)
[17:40:08.124]                         for (restart in restarts) {
[17:40:08.124]                           name <- restart$name
[17:40:08.124]                           if (is.null(name)) 
[17:40:08.124]                             next
[17:40:08.124]                           if (!grepl(pattern, name)) 
[17:40:08.124]                             next
[17:40:08.124]                           invokeRestart(restart)
[17:40:08.124]                           muffled <- TRUE
[17:40:08.124]                           break
[17:40:08.124]                         }
[17:40:08.124]                       }
[17:40:08.124]                     }
[17:40:08.124]                     invisible(muffled)
[17:40:08.124]                   }
[17:40:08.124]                   muffleCondition(cond)
[17:40:08.124]                 })
[17:40:08.124]             }))
[17:40:08.124]             future::FutureResult(value = ...future.value$value, 
[17:40:08.124]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:08.124]                   ...future.rng), globalenv = if (FALSE) 
[17:40:08.124]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:08.124]                     ...future.globalenv.names))
[17:40:08.124]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:08.124]         }, condition = base::local({
[17:40:08.124]             c <- base::c
[17:40:08.124]             inherits <- base::inherits
[17:40:08.124]             invokeRestart <- base::invokeRestart
[17:40:08.124]             length <- base::length
[17:40:08.124]             list <- base::list
[17:40:08.124]             seq.int <- base::seq.int
[17:40:08.124]             signalCondition <- base::signalCondition
[17:40:08.124]             sys.calls <- base::sys.calls
[17:40:08.124]             `[[` <- base::`[[`
[17:40:08.124]             `+` <- base::`+`
[17:40:08.124]             `<<-` <- base::`<<-`
[17:40:08.124]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:08.124]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:08.124]                   3L)]
[17:40:08.124]             }
[17:40:08.124]             function(cond) {
[17:40:08.124]                 is_error <- inherits(cond, "error")
[17:40:08.124]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:08.124]                   NULL)
[17:40:08.124]                 if (is_error) {
[17:40:08.124]                   sessionInformation <- function() {
[17:40:08.124]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:08.124]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:08.124]                       search = base::search(), system = base::Sys.info())
[17:40:08.124]                   }
[17:40:08.124]                   ...future.conditions[[length(...future.conditions) + 
[17:40:08.124]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:08.124]                     cond$call), session = sessionInformation(), 
[17:40:08.124]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:08.124]                   signalCondition(cond)
[17:40:08.124]                 }
[17:40:08.124]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:08.124]                 "immediateCondition"))) {
[17:40:08.124]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:08.124]                   ...future.conditions[[length(...future.conditions) + 
[17:40:08.124]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:08.124]                   if (TRUE && !signal) {
[17:40:08.124]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:08.124]                     {
[17:40:08.124]                       inherits <- base::inherits
[17:40:08.124]                       invokeRestart <- base::invokeRestart
[17:40:08.124]                       is.null <- base::is.null
[17:40:08.124]                       muffled <- FALSE
[17:40:08.124]                       if (inherits(cond, "message")) {
[17:40:08.124]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:08.124]                         if (muffled) 
[17:40:08.124]                           invokeRestart("muffleMessage")
[17:40:08.124]                       }
[17:40:08.124]                       else if (inherits(cond, "warning")) {
[17:40:08.124]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:08.124]                         if (muffled) 
[17:40:08.124]                           invokeRestart("muffleWarning")
[17:40:08.124]                       }
[17:40:08.124]                       else if (inherits(cond, "condition")) {
[17:40:08.124]                         if (!is.null(pattern)) {
[17:40:08.124]                           computeRestarts <- base::computeRestarts
[17:40:08.124]                           grepl <- base::grepl
[17:40:08.124]                           restarts <- computeRestarts(cond)
[17:40:08.124]                           for (restart in restarts) {
[17:40:08.124]                             name <- restart$name
[17:40:08.124]                             if (is.null(name)) 
[17:40:08.124]                               next
[17:40:08.124]                             if (!grepl(pattern, name)) 
[17:40:08.124]                               next
[17:40:08.124]                             invokeRestart(restart)
[17:40:08.124]                             muffled <- TRUE
[17:40:08.124]                             break
[17:40:08.124]                           }
[17:40:08.124]                         }
[17:40:08.124]                       }
[17:40:08.124]                       invisible(muffled)
[17:40:08.124]                     }
[17:40:08.124]                     muffleCondition(cond, pattern = "^muffle")
[17:40:08.124]                   }
[17:40:08.124]                 }
[17:40:08.124]                 else {
[17:40:08.124]                   if (TRUE) {
[17:40:08.124]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:08.124]                     {
[17:40:08.124]                       inherits <- base::inherits
[17:40:08.124]                       invokeRestart <- base::invokeRestart
[17:40:08.124]                       is.null <- base::is.null
[17:40:08.124]                       muffled <- FALSE
[17:40:08.124]                       if (inherits(cond, "message")) {
[17:40:08.124]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:08.124]                         if (muffled) 
[17:40:08.124]                           invokeRestart("muffleMessage")
[17:40:08.124]                       }
[17:40:08.124]                       else if (inherits(cond, "warning")) {
[17:40:08.124]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:08.124]                         if (muffled) 
[17:40:08.124]                           invokeRestart("muffleWarning")
[17:40:08.124]                       }
[17:40:08.124]                       else if (inherits(cond, "condition")) {
[17:40:08.124]                         if (!is.null(pattern)) {
[17:40:08.124]                           computeRestarts <- base::computeRestarts
[17:40:08.124]                           grepl <- base::grepl
[17:40:08.124]                           restarts <- computeRestarts(cond)
[17:40:08.124]                           for (restart in restarts) {
[17:40:08.124]                             name <- restart$name
[17:40:08.124]                             if (is.null(name)) 
[17:40:08.124]                               next
[17:40:08.124]                             if (!grepl(pattern, name)) 
[17:40:08.124]                               next
[17:40:08.124]                             invokeRestart(restart)
[17:40:08.124]                             muffled <- TRUE
[17:40:08.124]                             break
[17:40:08.124]                           }
[17:40:08.124]                         }
[17:40:08.124]                       }
[17:40:08.124]                       invisible(muffled)
[17:40:08.124]                     }
[17:40:08.124]                     muffleCondition(cond, pattern = "^muffle")
[17:40:08.124]                   }
[17:40:08.124]                 }
[17:40:08.124]             }
[17:40:08.124]         }))
[17:40:08.124]     }, error = function(ex) {
[17:40:08.124]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:08.124]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:08.124]                 ...future.rng), started = ...future.startTime, 
[17:40:08.124]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:08.124]             version = "1.8"), class = "FutureResult")
[17:40:08.124]     }, finally = {
[17:40:08.124]         if (!identical(...future.workdir, getwd())) 
[17:40:08.124]             setwd(...future.workdir)
[17:40:08.124]         {
[17:40:08.124]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:08.124]                 ...future.oldOptions$nwarnings <- NULL
[17:40:08.124]             }
[17:40:08.124]             base::options(...future.oldOptions)
[17:40:08.124]             if (.Platform$OS.type == "windows") {
[17:40:08.124]                 old_names <- names(...future.oldEnvVars)
[17:40:08.124]                 envs <- base::Sys.getenv()
[17:40:08.124]                 names <- names(envs)
[17:40:08.124]                 common <- intersect(names, old_names)
[17:40:08.124]                 added <- setdiff(names, old_names)
[17:40:08.124]                 removed <- setdiff(old_names, names)
[17:40:08.124]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:08.124]                   envs[common]]
[17:40:08.124]                 NAMES <- toupper(changed)
[17:40:08.124]                 args <- list()
[17:40:08.124]                 for (kk in seq_along(NAMES)) {
[17:40:08.124]                   name <- changed[[kk]]
[17:40:08.124]                   NAME <- NAMES[[kk]]
[17:40:08.124]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:08.124]                     next
[17:40:08.124]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:08.124]                 }
[17:40:08.124]                 NAMES <- toupper(added)
[17:40:08.124]                 for (kk in seq_along(NAMES)) {
[17:40:08.124]                   name <- added[[kk]]
[17:40:08.124]                   NAME <- NAMES[[kk]]
[17:40:08.124]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:08.124]                     next
[17:40:08.124]                   args[[name]] <- ""
[17:40:08.124]                 }
[17:40:08.124]                 NAMES <- toupper(removed)
[17:40:08.124]                 for (kk in seq_along(NAMES)) {
[17:40:08.124]                   name <- removed[[kk]]
[17:40:08.124]                   NAME <- NAMES[[kk]]
[17:40:08.124]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:08.124]                     next
[17:40:08.124]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:08.124]                 }
[17:40:08.124]                 if (length(args) > 0) 
[17:40:08.124]                   base::do.call(base::Sys.setenv, args = args)
[17:40:08.124]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:08.124]             }
[17:40:08.124]             else {
[17:40:08.124]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:08.124]             }
[17:40:08.124]             {
[17:40:08.124]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:08.124]                   0L) {
[17:40:08.124]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:08.124]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:08.124]                   base::options(opts)
[17:40:08.124]                 }
[17:40:08.124]                 {
[17:40:08.124]                   {
[17:40:08.124]                     base::options(mc.cores = ...future.mc.cores.old)
[17:40:08.124]                     NULL
[17:40:08.124]                   }
[17:40:08.124]                   options(future.plan = NULL)
[17:40:08.124]                   if (is.na(NA_character_)) 
[17:40:08.124]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:08.124]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:08.124]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:40:08.124]                     .init = FALSE)
[17:40:08.124]                 }
[17:40:08.124]             }
[17:40:08.124]         }
[17:40:08.124]     })
[17:40:08.124]     if (TRUE) {
[17:40:08.124]         base::sink(type = "output", split = FALSE)
[17:40:08.124]         if (TRUE) {
[17:40:08.124]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:08.124]         }
[17:40:08.124]         else {
[17:40:08.124]             ...future.result["stdout"] <- base::list(NULL)
[17:40:08.124]         }
[17:40:08.124]         base::close(...future.stdout)
[17:40:08.124]         ...future.stdout <- NULL
[17:40:08.124]     }
[17:40:08.124]     ...future.result$conditions <- ...future.conditions
[17:40:08.124]     ...future.result$finished <- base::Sys.time()
[17:40:08.124]     ...future.result
[17:40:08.124] }
[17:40:08.127] requestCore(): workers = 2
[17:40:08.129] MulticoreFuture started
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    stop("Whoops!")
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:40:08.130] plan(): Setting new future strategy stack:
[17:40:08.130] List of future strategies:
[17:40:08.130] 1. sequential:
[17:40:08.130]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:40:08.130]    - tweaked: FALSE
[17:40:08.130]    - call: NULL
[17:40:08.131] plan(): nbrOfWorkers() = 1
[17:40:08.133] plan(): Setting new future strategy stack:
[17:40:08.133] List of future strategies:
[17:40:08.133] 1. multicore:
[17:40:08.133]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:40:08.133]    - tweaked: FALSE
[17:40:08.133]    - call: plan(multicore)
[17:40:08.138] plan(): nbrOfWorkers() = 2
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 33d8ef81-66c6-1c88-ad16-a15781be79ec
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:40:08.140] result() for MulticoreFuture ...
[17:40:08.143] result() for MulticoreFuture ...
[17:40:08.143] result() for MulticoreFuture ... done
[17:40:08.144] signalConditions() ...
[17:40:08.144]  - include = ‘immediateCondition’
[17:40:08.144]  - exclude = 
[17:40:08.144]  - resignal = FALSE
[17:40:08.144]  - Number of conditions: 1
[17:40:08.145] signalConditions() ... done
[17:40:08.145] result() for MulticoreFuture ... done
[17:40:08.145] result() for MulticoreFuture ...
[17:40:08.145] result() for MulticoreFuture ... done
[17:40:08.145] signalConditions() ...
[17:40:08.145]  - include = ‘immediateCondition’
[17:40:08.145]  - exclude = 
[17:40:08.146]  - resignal = FALSE
[17:40:08.146]  - Number of conditions: 1
[17:40:08.146] signalConditions() ... done
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    save_rds <- function (object, pathname, ...)     {        pathname_tmp <- sprintf("%s.tmp", pathname)        if (file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]])        }        tryCatch({            saveRDS(object, file = pathname_tmp, ...)        }, error = function(ex) {            msg <- conditionMessage(ex)            fi_tmp <- file.info(pathname_tmp)            msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 msg)            ex$message <- msg            stop(ex)        })        stopifnot(file_test("-f", pathname_tmp))        res <- file.rename(from = pathname_tmp, to = pathname)        if (!res || file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            fi <- file.info(pathname)            msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 sQuote(pathname), fi[["size"]], fi[["mtime"]])            stop(msg)        }        invisible(pathname)    }    saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath),         rootPath = tempdir())     {        obj <- list(time = Sys.time(), condition = cond)        file <- tempfile(pattern = class(cond)[1], tmpdir = path,             fileext = ".rds")        save_rds(obj, file)    }    saveImmediateCondition(cond, path = "/tmp/RtmpKWJjLX/.future/immediateConditions")    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[17:40:08.147] result() for MulticoreFuture ...
[17:40:08.147] result() for MulticoreFuture ... done
[17:40:08.147] result() for MulticoreFuture ...
[17:40:08.147] result() for MulticoreFuture ... done
[17:40:08.147] signalConditions() ...
[17:40:08.147]  - include = ‘immediateCondition’
[17:40:08.147]  - exclude = 
[17:40:08.148]  - resignal = FALSE
[17:40:08.148]  - Number of conditions: 1
[17:40:08.148] signalConditions() ... done
[17:40:08.148] Future state: ‘finished’
[17:40:08.148] result() for MulticoreFuture ...
[17:40:08.148] result() for MulticoreFuture ... done
[17:40:08.148] signalConditions() ...
[17:40:08.148]  - include = ‘condition’
[17:40:08.148]  - exclude = ‘immediateCondition’
[17:40:08.149]  - resignal = TRUE
[17:40:08.149]  - Number of conditions: 1
[17:40:08.149]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:40:08.149] signalConditions() ... done
[1] "Error in withCallingHandlers({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    save_rds <- function (object, pathname, ...)     {        pathname_tmp <- sprintf("%s.tmp", pathname)        if (file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]])        }        tryCatch({            saveRDS(object, file = pathname_tmp, ...)        }, error = function(ex) {            msg <- conditionMessage(ex)            fi_tmp <- file.info(pathname_tmp)            msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 msg)            ex$message <- msg            stop(ex)        })        stopifnot(file_test("-f", pathname_tmp))        res <- file.rename(from = pathname_tmp, to = pathname)        if (!res || file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            fi <- file.info(pathname)            msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 sQuote(pathname), fi[["size"]], fi[["mtime"]])            stop(msg)        }        invisible(pathname)    }    saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath),         rootPath = tempdir())     {        obj <- list(time = Sys.time(), condition = cond)        file <- tempfile(pattern = class(cond)[1], tmpdir = path,             fileext = ".rds")        save_rds(obj, file)    }    saveImmediateCondition(cond, path = "/tmp/RtmpKWJjLX/.future/immediateConditions")    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[17:40:08.150] result() for MulticoreFuture ...
[17:40:08.150] result() for MulticoreFuture ... done
[17:40:08.150] result() for MulticoreFuture ...
[17:40:08.150] result() for MulticoreFuture ... done
[17:40:08.150] signalConditions() ...
[17:40:08.150]  - include = ‘immediateCondition’
[17:40:08.150]  - exclude = 
[17:40:08.151]  - resignal = FALSE
[17:40:08.151]  - Number of conditions: 1
[17:40:08.151] signalConditions() ... done
[17:40:08.151] Future state: ‘finished’
[17:40:08.151] result() for MulticoreFuture ...
[17:40:08.151] result() for MulticoreFuture ... done
[17:40:08.151] signalConditions() ...
[17:40:08.151]  - include = ‘condition’
[17:40:08.151]  - exclude = ‘immediateCondition’
[17:40:08.152]  - resignal = TRUE
[17:40:08.152]  - Number of conditions: 1
[17:40:08.152]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:40:08.152] signalConditions() ... done
[1] "Error in withCallingHandlers({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    save_rds <- function (object, pathname, ...)     {        pathname_tmp <- sprintf("%s.tmp", pathname)        if (file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]])        }        tryCatch({            saveRDS(object, file = pathname_tmp, ...)        }, error = function(ex) {            msg <- conditionMessage(ex)            fi_tmp <- file.info(pathname_tmp)            msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 msg)            ex$message <- msg            stop(ex)        })        stopifnot(file_test("-f", pathname_tmp))        res <- file.rename(from = pathname_tmp, to = pathname)        if (!res || file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            fi <- file.info(pathname)            msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 sQuote(pathname), fi[["size"]], fi[["mtime"]])            stop(msg)        }        invisible(pathname)    }    saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath),         rootPath = tempdir())     {        obj <- list(time = Sys.time(), condition = cond)        file <- tempfile(pattern = class(cond)[1], tmpdir = path,             fileext = ".rds")        save_rds(obj, file)    }    saveImmediateCondition(cond, path = "/tmp/RtmpKWJjLX/.future/immediateConditions")    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[17:40:08.156] getGlobalsAndPackages() ...
[17:40:08.156] 
[17:40:08.157] - globals: [0] <none>
[17:40:08.157] getGlobalsAndPackages() ... DONE
[17:40:08.157] Packages needed by the future expression (n = 0): <none>
[17:40:08.158] Packages needed by future strategies (n = 0): <none>
[17:40:08.158] {
[17:40:08.158]     {
[17:40:08.158]         {
[17:40:08.158]             ...future.startTime <- base::Sys.time()
[17:40:08.158]             {
[17:40:08.158]                 {
[17:40:08.158]                   {
[17:40:08.158]                     {
[17:40:08.158]                       base::local({
[17:40:08.158]                         has_future <- base::requireNamespace("future", 
[17:40:08.158]                           quietly = TRUE)
[17:40:08.158]                         if (has_future) {
[17:40:08.158]                           ns <- base::getNamespace("future")
[17:40:08.158]                           version <- ns[[".package"]][["version"]]
[17:40:08.158]                           if (is.null(version)) 
[17:40:08.158]                             version <- utils::packageVersion("future")
[17:40:08.158]                         }
[17:40:08.158]                         else {
[17:40:08.158]                           version <- NULL
[17:40:08.158]                         }
[17:40:08.158]                         if (!has_future || version < "1.8.0") {
[17:40:08.158]                           info <- base::c(r_version = base::gsub("R version ", 
[17:40:08.158]                             "", base::R.version$version.string), 
[17:40:08.158]                             platform = base::sprintf("%s (%s-bit)", 
[17:40:08.158]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:08.158]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:08.158]                               "release", "version")], collapse = " "), 
[17:40:08.158]                             hostname = base::Sys.info()[["nodename"]])
[17:40:08.158]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:40:08.158]                             info)
[17:40:08.158]                           info <- base::paste(info, collapse = "; ")
[17:40:08.158]                           if (!has_future) {
[17:40:08.158]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:08.158]                               info)
[17:40:08.158]                           }
[17:40:08.158]                           else {
[17:40:08.158]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:08.158]                               info, version)
[17:40:08.158]                           }
[17:40:08.158]                           base::stop(msg)
[17:40:08.158]                         }
[17:40:08.158]                       })
[17:40:08.158]                     }
[17:40:08.158]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:40:08.158]                     base::options(mc.cores = 1L)
[17:40:08.158]                   }
[17:40:08.158]                   ...future.strategy.old <- future::plan("list")
[17:40:08.158]                   options(future.plan = NULL)
[17:40:08.158]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:08.158]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:08.158]                 }
[17:40:08.158]                 ...future.workdir <- getwd()
[17:40:08.158]             }
[17:40:08.158]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:08.158]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:08.158]         }
[17:40:08.158]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:08.158]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:40:08.158]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:08.158]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:08.158]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:08.158]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:08.158]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:08.158]             base::names(...future.oldOptions))
[17:40:08.158]     }
[17:40:08.158]     if (FALSE) {
[17:40:08.158]     }
[17:40:08.158]     else {
[17:40:08.158]         if (TRUE) {
[17:40:08.158]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:08.158]                 open = "w")
[17:40:08.158]         }
[17:40:08.158]         else {
[17:40:08.158]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:08.158]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:08.158]         }
[17:40:08.158]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:08.158]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:08.158]             base::sink(type = "output", split = FALSE)
[17:40:08.158]             base::close(...future.stdout)
[17:40:08.158]         }, add = TRUE)
[17:40:08.158]     }
[17:40:08.158]     ...future.frame <- base::sys.nframe()
[17:40:08.158]     ...future.conditions <- base::list()
[17:40:08.158]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:08.158]     if (FALSE) {
[17:40:08.158]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:08.158]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:08.158]     }
[17:40:08.158]     ...future.result <- base::tryCatch({
[17:40:08.158]         base::withCallingHandlers({
[17:40:08.158]             ...future.value <- base::withVisible(base::local({
[17:40:08.158]                 withCallingHandlers({
[17:40:08.158]                   {
[17:40:08.158]                     stop(structure(list(message = "boom"), class = c("MyError", 
[17:40:08.158]                       "error", "condition")))
[17:40:08.158]                   }
[17:40:08.158]                 }, immediateCondition = function(cond) {
[17:40:08.158]                   save_rds <- function (object, pathname, ...) 
[17:40:08.158]                   {
[17:40:08.158]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:40:08.158]                     if (file_test("-f", pathname_tmp)) {
[17:40:08.158]                       fi_tmp <- file.info(pathname_tmp)
[17:40:08.158]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:40:08.158]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:08.158]                         fi_tmp[["mtime"]])
[17:40:08.158]                     }
[17:40:08.158]                     tryCatch({
[17:40:08.158]                       saveRDS(object, file = pathname_tmp, ...)
[17:40:08.158]                     }, error = function(ex) {
[17:40:08.158]                       msg <- conditionMessage(ex)
[17:40:08.158]                       fi_tmp <- file.info(pathname_tmp)
[17:40:08.158]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:40:08.158]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:08.158]                         fi_tmp[["mtime"]], msg)
[17:40:08.158]                       ex$message <- msg
[17:40:08.158]                       stop(ex)
[17:40:08.158]                     })
[17:40:08.158]                     stopifnot(file_test("-f", pathname_tmp))
[17:40:08.158]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:40:08.158]                     if (!res || file_test("-f", pathname_tmp)) {
[17:40:08.158]                       fi_tmp <- file.info(pathname_tmp)
[17:40:08.158]                       fi <- file.info(pathname)
[17:40:08.158]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:40:08.158]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:08.158]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:40:08.158]                         fi[["size"]], fi[["mtime"]])
[17:40:08.158]                       stop(msg)
[17:40:08.158]                     }
[17:40:08.158]                     invisible(pathname)
[17:40:08.158]                   }
[17:40:08.158]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:40:08.158]                     rootPath = tempdir()) 
[17:40:08.158]                   {
[17:40:08.158]                     obj <- list(time = Sys.time(), condition = cond)
[17:40:08.158]                     file <- tempfile(pattern = class(cond)[1], 
[17:40:08.158]                       tmpdir = path, fileext = ".rds")
[17:40:08.158]                     save_rds(obj, file)
[17:40:08.158]                   }
[17:40:08.158]                   saveImmediateCondition(cond, path = "/tmp/RtmpKWJjLX/.future/immediateConditions")
[17:40:08.158]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:08.158]                   {
[17:40:08.158]                     inherits <- base::inherits
[17:40:08.158]                     invokeRestart <- base::invokeRestart
[17:40:08.158]                     is.null <- base::is.null
[17:40:08.158]                     muffled <- FALSE
[17:40:08.158]                     if (inherits(cond, "message")) {
[17:40:08.158]                       muffled <- grepl(pattern, "muffleMessage")
[17:40:08.158]                       if (muffled) 
[17:40:08.158]                         invokeRestart("muffleMessage")
[17:40:08.158]                     }
[17:40:08.158]                     else if (inherits(cond, "warning")) {
[17:40:08.158]                       muffled <- grepl(pattern, "muffleWarning")
[17:40:08.158]                       if (muffled) 
[17:40:08.158]                         invokeRestart("muffleWarning")
[17:40:08.158]                     }
[17:40:08.158]                     else if (inherits(cond, "condition")) {
[17:40:08.158]                       if (!is.null(pattern)) {
[17:40:08.158]                         computeRestarts <- base::computeRestarts
[17:40:08.158]                         grepl <- base::grepl
[17:40:08.158]                         restarts <- computeRestarts(cond)
[17:40:08.158]                         for (restart in restarts) {
[17:40:08.158]                           name <- restart$name
[17:40:08.158]                           if (is.null(name)) 
[17:40:08.158]                             next
[17:40:08.158]                           if (!grepl(pattern, name)) 
[17:40:08.158]                             next
[17:40:08.158]                           invokeRestart(restart)
[17:40:08.158]                           muffled <- TRUE
[17:40:08.158]                           break
[17:40:08.158]                         }
[17:40:08.158]                       }
[17:40:08.158]                     }
[17:40:08.158]                     invisible(muffled)
[17:40:08.158]                   }
[17:40:08.158]                   muffleCondition(cond)
[17:40:08.158]                 })
[17:40:08.158]             }))
[17:40:08.158]             future::FutureResult(value = ...future.value$value, 
[17:40:08.158]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:08.158]                   ...future.rng), globalenv = if (FALSE) 
[17:40:08.158]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:08.158]                     ...future.globalenv.names))
[17:40:08.158]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:08.158]         }, condition = base::local({
[17:40:08.158]             c <- base::c
[17:40:08.158]             inherits <- base::inherits
[17:40:08.158]             invokeRestart <- base::invokeRestart
[17:40:08.158]             length <- base::length
[17:40:08.158]             list <- base::list
[17:40:08.158]             seq.int <- base::seq.int
[17:40:08.158]             signalCondition <- base::signalCondition
[17:40:08.158]             sys.calls <- base::sys.calls
[17:40:08.158]             `[[` <- base::`[[`
[17:40:08.158]             `+` <- base::`+`
[17:40:08.158]             `<<-` <- base::`<<-`
[17:40:08.158]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:08.158]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:08.158]                   3L)]
[17:40:08.158]             }
[17:40:08.158]             function(cond) {
[17:40:08.158]                 is_error <- inherits(cond, "error")
[17:40:08.158]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:08.158]                   NULL)
[17:40:08.158]                 if (is_error) {
[17:40:08.158]                   sessionInformation <- function() {
[17:40:08.158]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:08.158]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:08.158]                       search = base::search(), system = base::Sys.info())
[17:40:08.158]                   }
[17:40:08.158]                   ...future.conditions[[length(...future.conditions) + 
[17:40:08.158]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:08.158]                     cond$call), session = sessionInformation(), 
[17:40:08.158]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:08.158]                   signalCondition(cond)
[17:40:08.158]                 }
[17:40:08.158]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:08.158]                 "immediateCondition"))) {
[17:40:08.158]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:08.158]                   ...future.conditions[[length(...future.conditions) + 
[17:40:08.158]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:08.158]                   if (TRUE && !signal) {
[17:40:08.158]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:08.158]                     {
[17:40:08.158]                       inherits <- base::inherits
[17:40:08.158]                       invokeRestart <- base::invokeRestart
[17:40:08.158]                       is.null <- base::is.null
[17:40:08.158]                       muffled <- FALSE
[17:40:08.158]                       if (inherits(cond, "message")) {
[17:40:08.158]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:08.158]                         if (muffled) 
[17:40:08.158]                           invokeRestart("muffleMessage")
[17:40:08.158]                       }
[17:40:08.158]                       else if (inherits(cond, "warning")) {
[17:40:08.158]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:08.158]                         if (muffled) 
[17:40:08.158]                           invokeRestart("muffleWarning")
[17:40:08.158]                       }
[17:40:08.158]                       else if (inherits(cond, "condition")) {
[17:40:08.158]                         if (!is.null(pattern)) {
[17:40:08.158]                           computeRestarts <- base::computeRestarts
[17:40:08.158]                           grepl <- base::grepl
[17:40:08.158]                           restarts <- computeRestarts(cond)
[17:40:08.158]                           for (restart in restarts) {
[17:40:08.158]                             name <- restart$name
[17:40:08.158]                             if (is.null(name)) 
[17:40:08.158]                               next
[17:40:08.158]                             if (!grepl(pattern, name)) 
[17:40:08.158]                               next
[17:40:08.158]                             invokeRestart(restart)
[17:40:08.158]                             muffled <- TRUE
[17:40:08.158]                             break
[17:40:08.158]                           }
[17:40:08.158]                         }
[17:40:08.158]                       }
[17:40:08.158]                       invisible(muffled)
[17:40:08.158]                     }
[17:40:08.158]                     muffleCondition(cond, pattern = "^muffle")
[17:40:08.158]                   }
[17:40:08.158]                 }
[17:40:08.158]                 else {
[17:40:08.158]                   if (TRUE) {
[17:40:08.158]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:08.158]                     {
[17:40:08.158]                       inherits <- base::inherits
[17:40:08.158]                       invokeRestart <- base::invokeRestart
[17:40:08.158]                       is.null <- base::is.null
[17:40:08.158]                       muffled <- FALSE
[17:40:08.158]                       if (inherits(cond, "message")) {
[17:40:08.158]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:08.158]                         if (muffled) 
[17:40:08.158]                           invokeRestart("muffleMessage")
[17:40:08.158]                       }
[17:40:08.158]                       else if (inherits(cond, "warning")) {
[17:40:08.158]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:08.158]                         if (muffled) 
[17:40:08.158]                           invokeRestart("muffleWarning")
[17:40:08.158]                       }
[17:40:08.158]                       else if (inherits(cond, "condition")) {
[17:40:08.158]                         if (!is.null(pattern)) {
[17:40:08.158]                           computeRestarts <- base::computeRestarts
[17:40:08.158]                           grepl <- base::grepl
[17:40:08.158]                           restarts <- computeRestarts(cond)
[17:40:08.158]                           for (restart in restarts) {
[17:40:08.158]                             name <- restart$name
[17:40:08.158]                             if (is.null(name)) 
[17:40:08.158]                               next
[17:40:08.158]                             if (!grepl(pattern, name)) 
[17:40:08.158]                               next
[17:40:08.158]                             invokeRestart(restart)
[17:40:08.158]                             muffled <- TRUE
[17:40:08.158]                             break
[17:40:08.158]                           }
[17:40:08.158]                         }
[17:40:08.158]                       }
[17:40:08.158]                       invisible(muffled)
[17:40:08.158]                     }
[17:40:08.158]                     muffleCondition(cond, pattern = "^muffle")
[17:40:08.158]                   }
[17:40:08.158]                 }
[17:40:08.158]             }
[17:40:08.158]         }))
[17:40:08.158]     }, error = function(ex) {
[17:40:08.158]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:08.158]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:08.158]                 ...future.rng), started = ...future.startTime, 
[17:40:08.158]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:08.158]             version = "1.8"), class = "FutureResult")
[17:40:08.158]     }, finally = {
[17:40:08.158]         if (!identical(...future.workdir, getwd())) 
[17:40:08.158]             setwd(...future.workdir)
[17:40:08.158]         {
[17:40:08.158]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:08.158]                 ...future.oldOptions$nwarnings <- NULL
[17:40:08.158]             }
[17:40:08.158]             base::options(...future.oldOptions)
[17:40:08.158]             if (.Platform$OS.type == "windows") {
[17:40:08.158]                 old_names <- names(...future.oldEnvVars)
[17:40:08.158]                 envs <- base::Sys.getenv()
[17:40:08.158]                 names <- names(envs)
[17:40:08.158]                 common <- intersect(names, old_names)
[17:40:08.158]                 added <- setdiff(names, old_names)
[17:40:08.158]                 removed <- setdiff(old_names, names)
[17:40:08.158]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:08.158]                   envs[common]]
[17:40:08.158]                 NAMES <- toupper(changed)
[17:40:08.158]                 args <- list()
[17:40:08.158]                 for (kk in seq_along(NAMES)) {
[17:40:08.158]                   name <- changed[[kk]]
[17:40:08.158]                   NAME <- NAMES[[kk]]
[17:40:08.158]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:08.158]                     next
[17:40:08.158]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:08.158]                 }
[17:40:08.158]                 NAMES <- toupper(added)
[17:40:08.158]                 for (kk in seq_along(NAMES)) {
[17:40:08.158]                   name <- added[[kk]]
[17:40:08.158]                   NAME <- NAMES[[kk]]
[17:40:08.158]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:08.158]                     next
[17:40:08.158]                   args[[name]] <- ""
[17:40:08.158]                 }
[17:40:08.158]                 NAMES <- toupper(removed)
[17:40:08.158]                 for (kk in seq_along(NAMES)) {
[17:40:08.158]                   name <- removed[[kk]]
[17:40:08.158]                   NAME <- NAMES[[kk]]
[17:40:08.158]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:08.158]                     next
[17:40:08.158]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:08.158]                 }
[17:40:08.158]                 if (length(args) > 0) 
[17:40:08.158]                   base::do.call(base::Sys.setenv, args = args)
[17:40:08.158]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:08.158]             }
[17:40:08.158]             else {
[17:40:08.158]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:08.158]             }
[17:40:08.158]             {
[17:40:08.158]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:08.158]                   0L) {
[17:40:08.158]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:08.158]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:08.158]                   base::options(opts)
[17:40:08.158]                 }
[17:40:08.158]                 {
[17:40:08.158]                   {
[17:40:08.158]                     base::options(mc.cores = ...future.mc.cores.old)
[17:40:08.158]                     NULL
[17:40:08.158]                   }
[17:40:08.158]                   options(future.plan = NULL)
[17:40:08.158]                   if (is.na(NA_character_)) 
[17:40:08.158]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:08.158]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:08.158]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:40:08.158]                     .init = FALSE)
[17:40:08.158]                 }
[17:40:08.158]             }
[17:40:08.158]         }
[17:40:08.158]     })
[17:40:08.158]     if (TRUE) {
[17:40:08.158]         base::sink(type = "output", split = FALSE)
[17:40:08.158]         if (TRUE) {
[17:40:08.158]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:08.158]         }
[17:40:08.158]         else {
[17:40:08.158]             ...future.result["stdout"] <- base::list(NULL)
[17:40:08.158]         }
[17:40:08.158]         base::close(...future.stdout)
[17:40:08.158]         ...future.stdout <- NULL
[17:40:08.158]     }
[17:40:08.158]     ...future.result$conditions <- ...future.conditions
[17:40:08.158]     ...future.result$finished <- base::Sys.time()
[17:40:08.158]     ...future.result
[17:40:08.158] }
[17:40:08.161] requestCore(): workers = 2
[17:40:08.162] MulticoreFuture started
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    stop(structure(list(message = "boom"), class = c("MyError", 
        "error", "condition")))
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:40:08.163] plan(): Setting new future strategy stack:
[17:40:08.164] List of future strategies:
[17:40:08.164] 1. sequential:
[17:40:08.164]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:40:08.164]    - tweaked: FALSE
[17:40:08.164]    - call: NULL
[17:40:08.165] plan(): nbrOfWorkers() = 1
[17:40:08.166] plan(): Setting new future strategy stack:
[17:40:08.167] List of future strategies:
[17:40:08.167] 1. multicore:
[17:40:08.167]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:40:08.167]    - tweaked: FALSE
[17:40:08.167]    - call: plan(multicore)
[17:40:08.171] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 33d8ef81-66c6-1c88-ad16-a15781be79ec
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:40:08.174] result() for MulticoreFuture ...
[17:40:08.176] result() for MulticoreFuture ...
[17:40:08.176] result() for MulticoreFuture ... done
[17:40:08.176] signalConditions() ...
[17:40:08.177]  - include = ‘immediateCondition’
[17:40:08.177]  - exclude = 
[17:40:08.177]  - resignal = FALSE
[17:40:08.177]  - Number of conditions: 1
[17:40:08.177] signalConditions() ... done
[17:40:08.177] result() for MulticoreFuture ... done
[17:40:08.178] result() for MulticoreFuture ...
[17:40:08.178] result() for MulticoreFuture ... done
[17:40:08.178] signalConditions() ...
[17:40:08.178]  - include = ‘immediateCondition’
[17:40:08.178]  - exclude = 
[17:40:08.178]  - resignal = FALSE
[17:40:08.178]  - Number of conditions: 1
[17:40:08.179] signalConditions() ... done
<MyError: boom>
[17:40:08.179] result() for MulticoreFuture ...
[17:40:08.179] result() for MulticoreFuture ... done
[17:40:08.179] result() for MulticoreFuture ...
[17:40:08.179] result() for MulticoreFuture ... done
[17:40:08.179] signalConditions() ...
[17:40:08.179]  - include = ‘immediateCondition’
[17:40:08.179]  - exclude = 
[17:40:08.180]  - resignal = FALSE
[17:40:08.180]  - Number of conditions: 1
[17:40:08.180] signalConditions() ... done
[17:40:08.180] Future state: ‘finished’
[17:40:08.180] result() for MulticoreFuture ...
[17:40:08.180] result() for MulticoreFuture ... done
[17:40:08.180] signalConditions() ...
[17:40:08.180]  - include = ‘condition’
[17:40:08.181]  - exclude = ‘immediateCondition’
[17:40:08.181]  - resignal = TRUE
[17:40:08.181]  - Number of conditions: 1
[17:40:08.181]  - Condition #1: ‘MyError’, ‘error’, ‘condition’
[17:40:08.181] signalConditions() ... done
*** multicore(..., globals = TRUE) without globals
[17:40:08.185] getGlobalsAndPackages() ...
[17:40:08.185] Searching for globals...
[17:40:08.186] - globals found: [1] ‘{’
[17:40:08.186] Searching for globals ... DONE
[17:40:08.186] Resolving globals: FALSE
[17:40:08.186] 
[17:40:08.189] 
[17:40:08.189] getGlobalsAndPackages() ... DONE
[17:40:08.190] Packages needed by the future expression (n = 0): <none>
[17:40:08.190] Packages needed by future strategies (n = 0): <none>
[17:40:08.191] {
[17:40:08.191]     {
[17:40:08.191]         {
[17:40:08.191]             ...future.startTime <- base::Sys.time()
[17:40:08.191]             {
[17:40:08.191]                 {
[17:40:08.191]                   {
[17:40:08.191]                     {
[17:40:08.191]                       base::local({
[17:40:08.191]                         has_future <- base::requireNamespace("future", 
[17:40:08.191]                           quietly = TRUE)
[17:40:08.191]                         if (has_future) {
[17:40:08.191]                           ns <- base::getNamespace("future")
[17:40:08.191]                           version <- ns[[".package"]][["version"]]
[17:40:08.191]                           if (is.null(version)) 
[17:40:08.191]                             version <- utils::packageVersion("future")
[17:40:08.191]                         }
[17:40:08.191]                         else {
[17:40:08.191]                           version <- NULL
[17:40:08.191]                         }
[17:40:08.191]                         if (!has_future || version < "1.8.0") {
[17:40:08.191]                           info <- base::c(r_version = base::gsub("R version ", 
[17:40:08.191]                             "", base::R.version$version.string), 
[17:40:08.191]                             platform = base::sprintf("%s (%s-bit)", 
[17:40:08.191]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:08.191]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:08.191]                               "release", "version")], collapse = " "), 
[17:40:08.191]                             hostname = base::Sys.info()[["nodename"]])
[17:40:08.191]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:40:08.191]                             info)
[17:40:08.191]                           info <- base::paste(info, collapse = "; ")
[17:40:08.191]                           if (!has_future) {
[17:40:08.191]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:08.191]                               info)
[17:40:08.191]                           }
[17:40:08.191]                           else {
[17:40:08.191]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:08.191]                               info, version)
[17:40:08.191]                           }
[17:40:08.191]                           base::stop(msg)
[17:40:08.191]                         }
[17:40:08.191]                       })
[17:40:08.191]                     }
[17:40:08.191]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:40:08.191]                     base::options(mc.cores = 1L)
[17:40:08.191]                   }
[17:40:08.191]                   ...future.strategy.old <- future::plan("list")
[17:40:08.191]                   options(future.plan = NULL)
[17:40:08.191]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:08.191]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:08.191]                 }
[17:40:08.191]                 ...future.workdir <- getwd()
[17:40:08.191]             }
[17:40:08.191]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:08.191]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:08.191]         }
[17:40:08.191]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:08.191]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:40:08.191]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:08.191]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:08.191]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:08.191]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:08.191]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:08.191]             base::names(...future.oldOptions))
[17:40:08.191]     }
[17:40:08.191]     if (FALSE) {
[17:40:08.191]     }
[17:40:08.191]     else {
[17:40:08.191]         if (TRUE) {
[17:40:08.191]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:08.191]                 open = "w")
[17:40:08.191]         }
[17:40:08.191]         else {
[17:40:08.191]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:08.191]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:08.191]         }
[17:40:08.191]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:08.191]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:08.191]             base::sink(type = "output", split = FALSE)
[17:40:08.191]             base::close(...future.stdout)
[17:40:08.191]         }, add = TRUE)
[17:40:08.191]     }
[17:40:08.191]     ...future.frame <- base::sys.nframe()
[17:40:08.191]     ...future.conditions <- base::list()
[17:40:08.191]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:08.191]     if (FALSE) {
[17:40:08.191]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:08.191]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:08.191]     }
[17:40:08.191]     ...future.result <- base::tryCatch({
[17:40:08.191]         base::withCallingHandlers({
[17:40:08.191]             ...future.value <- base::withVisible(base::local({
[17:40:08.191]                 withCallingHandlers({
[17:40:08.191]                   {
[17:40:08.191]                     42L
[17:40:08.191]                   }
[17:40:08.191]                 }, immediateCondition = function(cond) {
[17:40:08.191]                   save_rds <- function (object, pathname, ...) 
[17:40:08.191]                   {
[17:40:08.191]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:40:08.191]                     if (file_test("-f", pathname_tmp)) {
[17:40:08.191]                       fi_tmp <- file.info(pathname_tmp)
[17:40:08.191]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:40:08.191]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:08.191]                         fi_tmp[["mtime"]])
[17:40:08.191]                     }
[17:40:08.191]                     tryCatch({
[17:40:08.191]                       saveRDS(object, file = pathname_tmp, ...)
[17:40:08.191]                     }, error = function(ex) {
[17:40:08.191]                       msg <- conditionMessage(ex)
[17:40:08.191]                       fi_tmp <- file.info(pathname_tmp)
[17:40:08.191]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:40:08.191]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:08.191]                         fi_tmp[["mtime"]], msg)
[17:40:08.191]                       ex$message <- msg
[17:40:08.191]                       stop(ex)
[17:40:08.191]                     })
[17:40:08.191]                     stopifnot(file_test("-f", pathname_tmp))
[17:40:08.191]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:40:08.191]                     if (!res || file_test("-f", pathname_tmp)) {
[17:40:08.191]                       fi_tmp <- file.info(pathname_tmp)
[17:40:08.191]                       fi <- file.info(pathname)
[17:40:08.191]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:40:08.191]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:08.191]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:40:08.191]                         fi[["size"]], fi[["mtime"]])
[17:40:08.191]                       stop(msg)
[17:40:08.191]                     }
[17:40:08.191]                     invisible(pathname)
[17:40:08.191]                   }
[17:40:08.191]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:40:08.191]                     rootPath = tempdir()) 
[17:40:08.191]                   {
[17:40:08.191]                     obj <- list(time = Sys.time(), condition = cond)
[17:40:08.191]                     file <- tempfile(pattern = class(cond)[1], 
[17:40:08.191]                       tmpdir = path, fileext = ".rds")
[17:40:08.191]                     save_rds(obj, file)
[17:40:08.191]                   }
[17:40:08.191]                   saveImmediateCondition(cond, path = "/tmp/RtmpKWJjLX/.future/immediateConditions")
[17:40:08.191]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:08.191]                   {
[17:40:08.191]                     inherits <- base::inherits
[17:40:08.191]                     invokeRestart <- base::invokeRestart
[17:40:08.191]                     is.null <- base::is.null
[17:40:08.191]                     muffled <- FALSE
[17:40:08.191]                     if (inherits(cond, "message")) {
[17:40:08.191]                       muffled <- grepl(pattern, "muffleMessage")
[17:40:08.191]                       if (muffled) 
[17:40:08.191]                         invokeRestart("muffleMessage")
[17:40:08.191]                     }
[17:40:08.191]                     else if (inherits(cond, "warning")) {
[17:40:08.191]                       muffled <- grepl(pattern, "muffleWarning")
[17:40:08.191]                       if (muffled) 
[17:40:08.191]                         invokeRestart("muffleWarning")
[17:40:08.191]                     }
[17:40:08.191]                     else if (inherits(cond, "condition")) {
[17:40:08.191]                       if (!is.null(pattern)) {
[17:40:08.191]                         computeRestarts <- base::computeRestarts
[17:40:08.191]                         grepl <- base::grepl
[17:40:08.191]                         restarts <- computeRestarts(cond)
[17:40:08.191]                         for (restart in restarts) {
[17:40:08.191]                           name <- restart$name
[17:40:08.191]                           if (is.null(name)) 
[17:40:08.191]                             next
[17:40:08.191]                           if (!grepl(pattern, name)) 
[17:40:08.191]                             next
[17:40:08.191]                           invokeRestart(restart)
[17:40:08.191]                           muffled <- TRUE
[17:40:08.191]                           break
[17:40:08.191]                         }
[17:40:08.191]                       }
[17:40:08.191]                     }
[17:40:08.191]                     invisible(muffled)
[17:40:08.191]                   }
[17:40:08.191]                   muffleCondition(cond)
[17:40:08.191]                 })
[17:40:08.191]             }))
[17:40:08.191]             future::FutureResult(value = ...future.value$value, 
[17:40:08.191]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:08.191]                   ...future.rng), globalenv = if (FALSE) 
[17:40:08.191]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:08.191]                     ...future.globalenv.names))
[17:40:08.191]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:08.191]         }, condition = base::local({
[17:40:08.191]             c <- base::c
[17:40:08.191]             inherits <- base::inherits
[17:40:08.191]             invokeRestart <- base::invokeRestart
[17:40:08.191]             length <- base::length
[17:40:08.191]             list <- base::list
[17:40:08.191]             seq.int <- base::seq.int
[17:40:08.191]             signalCondition <- base::signalCondition
[17:40:08.191]             sys.calls <- base::sys.calls
[17:40:08.191]             `[[` <- base::`[[`
[17:40:08.191]             `+` <- base::`+`
[17:40:08.191]             `<<-` <- base::`<<-`
[17:40:08.191]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:08.191]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:08.191]                   3L)]
[17:40:08.191]             }
[17:40:08.191]             function(cond) {
[17:40:08.191]                 is_error <- inherits(cond, "error")
[17:40:08.191]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:08.191]                   NULL)
[17:40:08.191]                 if (is_error) {
[17:40:08.191]                   sessionInformation <- function() {
[17:40:08.191]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:08.191]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:08.191]                       search = base::search(), system = base::Sys.info())
[17:40:08.191]                   }
[17:40:08.191]                   ...future.conditions[[length(...future.conditions) + 
[17:40:08.191]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:08.191]                     cond$call), session = sessionInformation(), 
[17:40:08.191]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:08.191]                   signalCondition(cond)
[17:40:08.191]                 }
[17:40:08.191]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:08.191]                 "immediateCondition"))) {
[17:40:08.191]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:08.191]                   ...future.conditions[[length(...future.conditions) + 
[17:40:08.191]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:08.191]                   if (TRUE && !signal) {
[17:40:08.191]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:08.191]                     {
[17:40:08.191]                       inherits <- base::inherits
[17:40:08.191]                       invokeRestart <- base::invokeRestart
[17:40:08.191]                       is.null <- base::is.null
[17:40:08.191]                       muffled <- FALSE
[17:40:08.191]                       if (inherits(cond, "message")) {
[17:40:08.191]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:08.191]                         if (muffled) 
[17:40:08.191]                           invokeRestart("muffleMessage")
[17:40:08.191]                       }
[17:40:08.191]                       else if (inherits(cond, "warning")) {
[17:40:08.191]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:08.191]                         if (muffled) 
[17:40:08.191]                           invokeRestart("muffleWarning")
[17:40:08.191]                       }
[17:40:08.191]                       else if (inherits(cond, "condition")) {
[17:40:08.191]                         if (!is.null(pattern)) {
[17:40:08.191]                           computeRestarts <- base::computeRestarts
[17:40:08.191]                           grepl <- base::grepl
[17:40:08.191]                           restarts <- computeRestarts(cond)
[17:40:08.191]                           for (restart in restarts) {
[17:40:08.191]                             name <- restart$name
[17:40:08.191]                             if (is.null(name)) 
[17:40:08.191]                               next
[17:40:08.191]                             if (!grepl(pattern, name)) 
[17:40:08.191]                               next
[17:40:08.191]                             invokeRestart(restart)
[17:40:08.191]                             muffled <- TRUE
[17:40:08.191]                             break
[17:40:08.191]                           }
[17:40:08.191]                         }
[17:40:08.191]                       }
[17:40:08.191]                       invisible(muffled)
[17:40:08.191]                     }
[17:40:08.191]                     muffleCondition(cond, pattern = "^muffle")
[17:40:08.191]                   }
[17:40:08.191]                 }
[17:40:08.191]                 else {
[17:40:08.191]                   if (TRUE) {
[17:40:08.191]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:08.191]                     {
[17:40:08.191]                       inherits <- base::inherits
[17:40:08.191]                       invokeRestart <- base::invokeRestart
[17:40:08.191]                       is.null <- base::is.null
[17:40:08.191]                       muffled <- FALSE
[17:40:08.191]                       if (inherits(cond, "message")) {
[17:40:08.191]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:08.191]                         if (muffled) 
[17:40:08.191]                           invokeRestart("muffleMessage")
[17:40:08.191]                       }
[17:40:08.191]                       else if (inherits(cond, "warning")) {
[17:40:08.191]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:08.191]                         if (muffled) 
[17:40:08.191]                           invokeRestart("muffleWarning")
[17:40:08.191]                       }
[17:40:08.191]                       else if (inherits(cond, "condition")) {
[17:40:08.191]                         if (!is.null(pattern)) {
[17:40:08.191]                           computeRestarts <- base::computeRestarts
[17:40:08.191]                           grepl <- base::grepl
[17:40:08.191]                           restarts <- computeRestarts(cond)
[17:40:08.191]                           for (restart in restarts) {
[17:40:08.191]                             name <- restart$name
[17:40:08.191]                             if (is.null(name)) 
[17:40:08.191]                               next
[17:40:08.191]                             if (!grepl(pattern, name)) 
[17:40:08.191]                               next
[17:40:08.191]                             invokeRestart(restart)
[17:40:08.191]                             muffled <- TRUE
[17:40:08.191]                             break
[17:40:08.191]                           }
[17:40:08.191]                         }
[17:40:08.191]                       }
[17:40:08.191]                       invisible(muffled)
[17:40:08.191]                     }
[17:40:08.191]                     muffleCondition(cond, pattern = "^muffle")
[17:40:08.191]                   }
[17:40:08.191]                 }
[17:40:08.191]             }
[17:40:08.191]         }))
[17:40:08.191]     }, error = function(ex) {
[17:40:08.191]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:08.191]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:08.191]                 ...future.rng), started = ...future.startTime, 
[17:40:08.191]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:08.191]             version = "1.8"), class = "FutureResult")
[17:40:08.191]     }, finally = {
[17:40:08.191]         if (!identical(...future.workdir, getwd())) 
[17:40:08.191]             setwd(...future.workdir)
[17:40:08.191]         {
[17:40:08.191]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:08.191]                 ...future.oldOptions$nwarnings <- NULL
[17:40:08.191]             }
[17:40:08.191]             base::options(...future.oldOptions)
[17:40:08.191]             if (.Platform$OS.type == "windows") {
[17:40:08.191]                 old_names <- names(...future.oldEnvVars)
[17:40:08.191]                 envs <- base::Sys.getenv()
[17:40:08.191]                 names <- names(envs)
[17:40:08.191]                 common <- intersect(names, old_names)
[17:40:08.191]                 added <- setdiff(names, old_names)
[17:40:08.191]                 removed <- setdiff(old_names, names)
[17:40:08.191]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:08.191]                   envs[common]]
[17:40:08.191]                 NAMES <- toupper(changed)
[17:40:08.191]                 args <- list()
[17:40:08.191]                 for (kk in seq_along(NAMES)) {
[17:40:08.191]                   name <- changed[[kk]]
[17:40:08.191]                   NAME <- NAMES[[kk]]
[17:40:08.191]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:08.191]                     next
[17:40:08.191]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:08.191]                 }
[17:40:08.191]                 NAMES <- toupper(added)
[17:40:08.191]                 for (kk in seq_along(NAMES)) {
[17:40:08.191]                   name <- added[[kk]]
[17:40:08.191]                   NAME <- NAMES[[kk]]
[17:40:08.191]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:08.191]                     next
[17:40:08.191]                   args[[name]] <- ""
[17:40:08.191]                 }
[17:40:08.191]                 NAMES <- toupper(removed)
[17:40:08.191]                 for (kk in seq_along(NAMES)) {
[17:40:08.191]                   name <- removed[[kk]]
[17:40:08.191]                   NAME <- NAMES[[kk]]
[17:40:08.191]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:08.191]                     next
[17:40:08.191]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:08.191]                 }
[17:40:08.191]                 if (length(args) > 0) 
[17:40:08.191]                   base::do.call(base::Sys.setenv, args = args)
[17:40:08.191]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:08.191]             }
[17:40:08.191]             else {
[17:40:08.191]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:08.191]             }
[17:40:08.191]             {
[17:40:08.191]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:08.191]                   0L) {
[17:40:08.191]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:08.191]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:08.191]                   base::options(opts)
[17:40:08.191]                 }
[17:40:08.191]                 {
[17:40:08.191]                   {
[17:40:08.191]                     base::options(mc.cores = ...future.mc.cores.old)
[17:40:08.191]                     NULL
[17:40:08.191]                   }
[17:40:08.191]                   options(future.plan = NULL)
[17:40:08.191]                   if (is.na(NA_character_)) 
[17:40:08.191]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:08.191]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:08.191]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:40:08.191]                     .init = FALSE)
[17:40:08.191]                 }
[17:40:08.191]             }
[17:40:08.191]         }
[17:40:08.191]     })
[17:40:08.191]     if (TRUE) {
[17:40:08.191]         base::sink(type = "output", split = FALSE)
[17:40:08.191]         if (TRUE) {
[17:40:08.191]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:08.191]         }
[17:40:08.191]         else {
[17:40:08.191]             ...future.result["stdout"] <- base::list(NULL)
[17:40:08.191]         }
[17:40:08.191]         base::close(...future.stdout)
[17:40:08.191]         ...future.stdout <- NULL
[17:40:08.191]     }
[17:40:08.191]     ...future.result$conditions <- ...future.conditions
[17:40:08.191]     ...future.result$finished <- base::Sys.time()
[17:40:08.191]     ...future.result
[17:40:08.191] }
[17:40:08.193] requestCore(): workers = 2
[17:40:08.195] MulticoreFuture started
[17:40:08.196] plan(): Setting new future strategy stack:
[17:40:08.196] List of future strategies:
[17:40:08.196] 1. sequential:
[17:40:08.196]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:40:08.196]    - tweaked: FALSE
[17:40:08.196]    - call: NULL
[17:40:08.197] plan(): nbrOfWorkers() = 1
[17:40:08.199] plan(): Setting new future strategy stack:
[17:40:08.200] List of future strategies:
[17:40:08.200] 1. multicore:
[17:40:08.200]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:40:08.200]    - tweaked: FALSE
[17:40:08.200]    - call: plan(multicore)
[17:40:08.205] plan(): nbrOfWorkers() = 2
[1] TRUE
[17:40:08.206] result() for MulticoreFuture ...
[17:40:08.207] result() for MulticoreFuture ...
[17:40:08.207] result() for MulticoreFuture ... done
[17:40:08.207] result() for MulticoreFuture ... done
[17:40:08.207] result() for MulticoreFuture ...
[17:40:08.207] result() for MulticoreFuture ... done
[1] 42
*** multicore(..., globals = TRUE) with globals
[17:40:08.212] getGlobalsAndPackages() ...
[17:40:08.212] Searching for globals...
[17:40:08.214] - globals found: [4] ‘{’, ‘<-’, ‘*’, ‘a’
[17:40:08.215] Searching for globals ... DONE
[17:40:08.215] Resolving globals: FALSE
[17:40:08.215] The total size of the 1 globals is 56 bytes (56 bytes)
[17:40:08.216] The total size of the 1 globals exported for future expression (‘{; b <- 3; c <- 2; a * b * c; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:40:08.216] - globals: [1] ‘a’
[17:40:08.216] 
[17:40:08.216] getGlobalsAndPackages() ... DONE
[17:40:08.217] Packages needed by the future expression (n = 0): <none>
[17:40:08.217] Packages needed by future strategies (n = 0): <none>
[17:40:08.217] {
[17:40:08.217]     {
[17:40:08.217]         {
[17:40:08.217]             ...future.startTime <- base::Sys.time()
[17:40:08.217]             {
[17:40:08.217]                 {
[17:40:08.217]                   {
[17:40:08.217]                     {
[17:40:08.217]                       base::local({
[17:40:08.217]                         has_future <- base::requireNamespace("future", 
[17:40:08.217]                           quietly = TRUE)
[17:40:08.217]                         if (has_future) {
[17:40:08.217]                           ns <- base::getNamespace("future")
[17:40:08.217]                           version <- ns[[".package"]][["version"]]
[17:40:08.217]                           if (is.null(version)) 
[17:40:08.217]                             version <- utils::packageVersion("future")
[17:40:08.217]                         }
[17:40:08.217]                         else {
[17:40:08.217]                           version <- NULL
[17:40:08.217]                         }
[17:40:08.217]                         if (!has_future || version < "1.8.0") {
[17:40:08.217]                           info <- base::c(r_version = base::gsub("R version ", 
[17:40:08.217]                             "", base::R.version$version.string), 
[17:40:08.217]                             platform = base::sprintf("%s (%s-bit)", 
[17:40:08.217]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:08.217]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:08.217]                               "release", "version")], collapse = " "), 
[17:40:08.217]                             hostname = base::Sys.info()[["nodename"]])
[17:40:08.217]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:40:08.217]                             info)
[17:40:08.217]                           info <- base::paste(info, collapse = "; ")
[17:40:08.217]                           if (!has_future) {
[17:40:08.217]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:08.217]                               info)
[17:40:08.217]                           }
[17:40:08.217]                           else {
[17:40:08.217]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:08.217]                               info, version)
[17:40:08.217]                           }
[17:40:08.217]                           base::stop(msg)
[17:40:08.217]                         }
[17:40:08.217]                       })
[17:40:08.217]                     }
[17:40:08.217]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:40:08.217]                     base::options(mc.cores = 1L)
[17:40:08.217]                   }
[17:40:08.217]                   ...future.strategy.old <- future::plan("list")
[17:40:08.217]                   options(future.plan = NULL)
[17:40:08.217]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:08.217]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:08.217]                 }
[17:40:08.217]                 ...future.workdir <- getwd()
[17:40:08.217]             }
[17:40:08.217]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:08.217]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:08.217]         }
[17:40:08.217]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:08.217]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:40:08.217]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:08.217]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:08.217]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:08.217]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:08.217]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:08.217]             base::names(...future.oldOptions))
[17:40:08.217]     }
[17:40:08.217]     if (FALSE) {
[17:40:08.217]     }
[17:40:08.217]     else {
[17:40:08.217]         if (TRUE) {
[17:40:08.217]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:08.217]                 open = "w")
[17:40:08.217]         }
[17:40:08.217]         else {
[17:40:08.217]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:08.217]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:08.217]         }
[17:40:08.217]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:08.217]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:08.217]             base::sink(type = "output", split = FALSE)
[17:40:08.217]             base::close(...future.stdout)
[17:40:08.217]         }, add = TRUE)
[17:40:08.217]     }
[17:40:08.217]     ...future.frame <- base::sys.nframe()
[17:40:08.217]     ...future.conditions <- base::list()
[17:40:08.217]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:08.217]     if (FALSE) {
[17:40:08.217]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:08.217]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:08.217]     }
[17:40:08.217]     ...future.result <- base::tryCatch({
[17:40:08.217]         base::withCallingHandlers({
[17:40:08.217]             ...future.value <- base::withVisible(base::local({
[17:40:08.217]                 withCallingHandlers({
[17:40:08.217]                   {
[17:40:08.217]                     b <- 3
[17:40:08.217]                     c <- 2
[17:40:08.217]                     a * b * c
[17:40:08.217]                   }
[17:40:08.217]                 }, immediateCondition = function(cond) {
[17:40:08.217]                   save_rds <- function (object, pathname, ...) 
[17:40:08.217]                   {
[17:40:08.217]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:40:08.217]                     if (file_test("-f", pathname_tmp)) {
[17:40:08.217]                       fi_tmp <- file.info(pathname_tmp)
[17:40:08.217]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:40:08.217]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:08.217]                         fi_tmp[["mtime"]])
[17:40:08.217]                     }
[17:40:08.217]                     tryCatch({
[17:40:08.217]                       saveRDS(object, file = pathname_tmp, ...)
[17:40:08.217]                     }, error = function(ex) {
[17:40:08.217]                       msg <- conditionMessage(ex)
[17:40:08.217]                       fi_tmp <- file.info(pathname_tmp)
[17:40:08.217]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:40:08.217]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:08.217]                         fi_tmp[["mtime"]], msg)
[17:40:08.217]                       ex$message <- msg
[17:40:08.217]                       stop(ex)
[17:40:08.217]                     })
[17:40:08.217]                     stopifnot(file_test("-f", pathname_tmp))
[17:40:08.217]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:40:08.217]                     if (!res || file_test("-f", pathname_tmp)) {
[17:40:08.217]                       fi_tmp <- file.info(pathname_tmp)
[17:40:08.217]                       fi <- file.info(pathname)
[17:40:08.217]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:40:08.217]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:08.217]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:40:08.217]                         fi[["size"]], fi[["mtime"]])
[17:40:08.217]                       stop(msg)
[17:40:08.217]                     }
[17:40:08.217]                     invisible(pathname)
[17:40:08.217]                   }
[17:40:08.217]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:40:08.217]                     rootPath = tempdir()) 
[17:40:08.217]                   {
[17:40:08.217]                     obj <- list(time = Sys.time(), condition = cond)
[17:40:08.217]                     file <- tempfile(pattern = class(cond)[1], 
[17:40:08.217]                       tmpdir = path, fileext = ".rds")
[17:40:08.217]                     save_rds(obj, file)
[17:40:08.217]                   }
[17:40:08.217]                   saveImmediateCondition(cond, path = "/tmp/RtmpKWJjLX/.future/immediateConditions")
[17:40:08.217]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:08.217]                   {
[17:40:08.217]                     inherits <- base::inherits
[17:40:08.217]                     invokeRestart <- base::invokeRestart
[17:40:08.217]                     is.null <- base::is.null
[17:40:08.217]                     muffled <- FALSE
[17:40:08.217]                     if (inherits(cond, "message")) {
[17:40:08.217]                       muffled <- grepl(pattern, "muffleMessage")
[17:40:08.217]                       if (muffled) 
[17:40:08.217]                         invokeRestart("muffleMessage")
[17:40:08.217]                     }
[17:40:08.217]                     else if (inherits(cond, "warning")) {
[17:40:08.217]                       muffled <- grepl(pattern, "muffleWarning")
[17:40:08.217]                       if (muffled) 
[17:40:08.217]                         invokeRestart("muffleWarning")
[17:40:08.217]                     }
[17:40:08.217]                     else if (inherits(cond, "condition")) {
[17:40:08.217]                       if (!is.null(pattern)) {
[17:40:08.217]                         computeRestarts <- base::computeRestarts
[17:40:08.217]                         grepl <- base::grepl
[17:40:08.217]                         restarts <- computeRestarts(cond)
[17:40:08.217]                         for (restart in restarts) {
[17:40:08.217]                           name <- restart$name
[17:40:08.217]                           if (is.null(name)) 
[17:40:08.217]                             next
[17:40:08.217]                           if (!grepl(pattern, name)) 
[17:40:08.217]                             next
[17:40:08.217]                           invokeRestart(restart)
[17:40:08.217]                           muffled <- TRUE
[17:40:08.217]                           break
[17:40:08.217]                         }
[17:40:08.217]                       }
[17:40:08.217]                     }
[17:40:08.217]                     invisible(muffled)
[17:40:08.217]                   }
[17:40:08.217]                   muffleCondition(cond)
[17:40:08.217]                 })
[17:40:08.217]             }))
[17:40:08.217]             future::FutureResult(value = ...future.value$value, 
[17:40:08.217]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:08.217]                   ...future.rng), globalenv = if (FALSE) 
[17:40:08.217]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:08.217]                     ...future.globalenv.names))
[17:40:08.217]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:08.217]         }, condition = base::local({
[17:40:08.217]             c <- base::c
[17:40:08.217]             inherits <- base::inherits
[17:40:08.217]             invokeRestart <- base::invokeRestart
[17:40:08.217]             length <- base::length
[17:40:08.217]             list <- base::list
[17:40:08.217]             seq.int <- base::seq.int
[17:40:08.217]             signalCondition <- base::signalCondition
[17:40:08.217]             sys.calls <- base::sys.calls
[17:40:08.217]             `[[` <- base::`[[`
[17:40:08.217]             `+` <- base::`+`
[17:40:08.217]             `<<-` <- base::`<<-`
[17:40:08.217]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:08.217]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:08.217]                   3L)]
[17:40:08.217]             }
[17:40:08.217]             function(cond) {
[17:40:08.217]                 is_error <- inherits(cond, "error")
[17:40:08.217]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:08.217]                   NULL)
[17:40:08.217]                 if (is_error) {
[17:40:08.217]                   sessionInformation <- function() {
[17:40:08.217]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:08.217]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:08.217]                       search = base::search(), system = base::Sys.info())
[17:40:08.217]                   }
[17:40:08.217]                   ...future.conditions[[length(...future.conditions) + 
[17:40:08.217]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:08.217]                     cond$call), session = sessionInformation(), 
[17:40:08.217]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:08.217]                   signalCondition(cond)
[17:40:08.217]                 }
[17:40:08.217]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:08.217]                 "immediateCondition"))) {
[17:40:08.217]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:08.217]                   ...future.conditions[[length(...future.conditions) + 
[17:40:08.217]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:08.217]                   if (TRUE && !signal) {
[17:40:08.217]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:08.217]                     {
[17:40:08.217]                       inherits <- base::inherits
[17:40:08.217]                       invokeRestart <- base::invokeRestart
[17:40:08.217]                       is.null <- base::is.null
[17:40:08.217]                       muffled <- FALSE
[17:40:08.217]                       if (inherits(cond, "message")) {
[17:40:08.217]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:08.217]                         if (muffled) 
[17:40:08.217]                           invokeRestart("muffleMessage")
[17:40:08.217]                       }
[17:40:08.217]                       else if (inherits(cond, "warning")) {
[17:40:08.217]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:08.217]                         if (muffled) 
[17:40:08.217]                           invokeRestart("muffleWarning")
[17:40:08.217]                       }
[17:40:08.217]                       else if (inherits(cond, "condition")) {
[17:40:08.217]                         if (!is.null(pattern)) {
[17:40:08.217]                           computeRestarts <- base::computeRestarts
[17:40:08.217]                           grepl <- base::grepl
[17:40:08.217]                           restarts <- computeRestarts(cond)
[17:40:08.217]                           for (restart in restarts) {
[17:40:08.217]                             name <- restart$name
[17:40:08.217]                             if (is.null(name)) 
[17:40:08.217]                               next
[17:40:08.217]                             if (!grepl(pattern, name)) 
[17:40:08.217]                               next
[17:40:08.217]                             invokeRestart(restart)
[17:40:08.217]                             muffled <- TRUE
[17:40:08.217]                             break
[17:40:08.217]                           }
[17:40:08.217]                         }
[17:40:08.217]                       }
[17:40:08.217]                       invisible(muffled)
[17:40:08.217]                     }
[17:40:08.217]                     muffleCondition(cond, pattern = "^muffle")
[17:40:08.217]                   }
[17:40:08.217]                 }
[17:40:08.217]                 else {
[17:40:08.217]                   if (TRUE) {
[17:40:08.217]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:08.217]                     {
[17:40:08.217]                       inherits <- base::inherits
[17:40:08.217]                       invokeRestart <- base::invokeRestart
[17:40:08.217]                       is.null <- base::is.null
[17:40:08.217]                       muffled <- FALSE
[17:40:08.217]                       if (inherits(cond, "message")) {
[17:40:08.217]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:08.217]                         if (muffled) 
[17:40:08.217]                           invokeRestart("muffleMessage")
[17:40:08.217]                       }
[17:40:08.217]                       else if (inherits(cond, "warning")) {
[17:40:08.217]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:08.217]                         if (muffled) 
[17:40:08.217]                           invokeRestart("muffleWarning")
[17:40:08.217]                       }
[17:40:08.217]                       else if (inherits(cond, "condition")) {
[17:40:08.217]                         if (!is.null(pattern)) {
[17:40:08.217]                           computeRestarts <- base::computeRestarts
[17:40:08.217]                           grepl <- base::grepl
[17:40:08.217]                           restarts <- computeRestarts(cond)
[17:40:08.217]                           for (restart in restarts) {
[17:40:08.217]                             name <- restart$name
[17:40:08.217]                             if (is.null(name)) 
[17:40:08.217]                               next
[17:40:08.217]                             if (!grepl(pattern, name)) 
[17:40:08.217]                               next
[17:40:08.217]                             invokeRestart(restart)
[17:40:08.217]                             muffled <- TRUE
[17:40:08.217]                             break
[17:40:08.217]                           }
[17:40:08.217]                         }
[17:40:08.217]                       }
[17:40:08.217]                       invisible(muffled)
[17:40:08.217]                     }
[17:40:08.217]                     muffleCondition(cond, pattern = "^muffle")
[17:40:08.217]                   }
[17:40:08.217]                 }
[17:40:08.217]             }
[17:40:08.217]         }))
[17:40:08.217]     }, error = function(ex) {
[17:40:08.217]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:08.217]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:08.217]                 ...future.rng), started = ...future.startTime, 
[17:40:08.217]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:08.217]             version = "1.8"), class = "FutureResult")
[17:40:08.217]     }, finally = {
[17:40:08.217]         if (!identical(...future.workdir, getwd())) 
[17:40:08.217]             setwd(...future.workdir)
[17:40:08.217]         {
[17:40:08.217]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:08.217]                 ...future.oldOptions$nwarnings <- NULL
[17:40:08.217]             }
[17:40:08.217]             base::options(...future.oldOptions)
[17:40:08.217]             if (.Platform$OS.type == "windows") {
[17:40:08.217]                 old_names <- names(...future.oldEnvVars)
[17:40:08.217]                 envs <- base::Sys.getenv()
[17:40:08.217]                 names <- names(envs)
[17:40:08.217]                 common <- intersect(names, old_names)
[17:40:08.217]                 added <- setdiff(names, old_names)
[17:40:08.217]                 removed <- setdiff(old_names, names)
[17:40:08.217]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:08.217]                   envs[common]]
[17:40:08.217]                 NAMES <- toupper(changed)
[17:40:08.217]                 args <- list()
[17:40:08.217]                 for (kk in seq_along(NAMES)) {
[17:40:08.217]                   name <- changed[[kk]]
[17:40:08.217]                   NAME <- NAMES[[kk]]
[17:40:08.217]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:08.217]                     next
[17:40:08.217]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:08.217]                 }
[17:40:08.217]                 NAMES <- toupper(added)
[17:40:08.217]                 for (kk in seq_along(NAMES)) {
[17:40:08.217]                   name <- added[[kk]]
[17:40:08.217]                   NAME <- NAMES[[kk]]
[17:40:08.217]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:08.217]                     next
[17:40:08.217]                   args[[name]] <- ""
[17:40:08.217]                 }
[17:40:08.217]                 NAMES <- toupper(removed)
[17:40:08.217]                 for (kk in seq_along(NAMES)) {
[17:40:08.217]                   name <- removed[[kk]]
[17:40:08.217]                   NAME <- NAMES[[kk]]
[17:40:08.217]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:08.217]                     next
[17:40:08.217]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:08.217]                 }
[17:40:08.217]                 if (length(args) > 0) 
[17:40:08.217]                   base::do.call(base::Sys.setenv, args = args)
[17:40:08.217]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:08.217]             }
[17:40:08.217]             else {
[17:40:08.217]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:08.217]             }
[17:40:08.217]             {
[17:40:08.217]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:08.217]                   0L) {
[17:40:08.217]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:08.217]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:08.217]                   base::options(opts)
[17:40:08.217]                 }
[17:40:08.217]                 {
[17:40:08.217]                   {
[17:40:08.217]                     base::options(mc.cores = ...future.mc.cores.old)
[17:40:08.217]                     NULL
[17:40:08.217]                   }
[17:40:08.217]                   options(future.plan = NULL)
[17:40:08.217]                   if (is.na(NA_character_)) 
[17:40:08.217]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:08.217]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:08.217]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:40:08.217]                     .init = FALSE)
[17:40:08.217]                 }
[17:40:08.217]             }
[17:40:08.217]         }
[17:40:08.217]     })
[17:40:08.217]     if (TRUE) {
[17:40:08.217]         base::sink(type = "output", split = FALSE)
[17:40:08.217]         if (TRUE) {
[17:40:08.217]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:08.217]         }
[17:40:08.217]         else {
[17:40:08.217]             ...future.result["stdout"] <- base::list(NULL)
[17:40:08.217]         }
[17:40:08.217]         base::close(...future.stdout)
[17:40:08.217]         ...future.stdout <- NULL
[17:40:08.217]     }
[17:40:08.217]     ...future.result$conditions <- ...future.conditions
[17:40:08.217]     ...future.result$finished <- base::Sys.time()
[17:40:08.217]     ...future.result
[17:40:08.217] }
[17:40:08.220] assign_globals() ...
[17:40:08.220] List of 1
[17:40:08.220]  $ a: num 0
[17:40:08.220]  - attr(*, "where")=List of 1
[17:40:08.220]   ..$ a:<environment: R_EmptyEnv> 
[17:40:08.220]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:08.220]  - attr(*, "resolved")= logi FALSE
[17:40:08.220]  - attr(*, "total_size")= num 56
[17:40:08.223] - copied ‘a’ to environment
[17:40:08.223] assign_globals() ... done
[17:40:08.223] requestCore(): workers = 2
[17:40:08.225] MulticoreFuture started
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    b <- 3
    c <- 2
    a * b * c
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:40:08.226] plan(): Setting new future strategy stack:
Globals: 1 objects totaling 56 bytes (numeric ‘a’ of 56 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:40:08.226] List of future strategies:
[17:40:08.226] 1. sequential:
[17:40:08.226]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:40:08.226]    - tweaked: FALSE
[17:40:08.226]    - call: NULL
[17:40:08.227] plan(): nbrOfWorkers() = 1
[17:40:08.229] plan(): Setting new future strategy stack:
[17:40:08.229] List of future strategies:
[17:40:08.229] 1. multicore:
[17:40:08.229]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:40:08.229]    - tweaked: FALSE
[17:40:08.229]    - call: plan(multicore)
[17:40:08.234] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 33d8ef81-66c6-1c88-ad16-a15781be79ec
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:40:08.235] result() for MulticoreFuture ...
[17:40:08.235] result() for MulticoreFuture ...
[17:40:08.236] result() for MulticoreFuture ... done
[17:40:08.236] result() for MulticoreFuture ... done
[17:40:08.236] result() for MulticoreFuture ...
[17:40:08.236] result() for MulticoreFuture ... done
[1] 0
*** multicore(..., globals = TRUE) with globals and blocking
 - Creating multicore future #1 ...
[17:40:08.241] getGlobalsAndPackages() ...
[17:40:08.241] Searching for globals...
[17:40:08.242] - globals found: [2] ‘{’, ‘ii’
[17:40:08.242] Searching for globals ... DONE
[17:40:08.242] Resolving globals: FALSE
[17:40:08.242] The total size of the 1 globals is 56 bytes (56 bytes)
[17:40:08.243] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[17:40:08.243] - globals: [1] ‘ii’
[17:40:08.243] 
[17:40:08.243] getGlobalsAndPackages() ... DONE
[17:40:08.244] Packages needed by the future expression (n = 0): <none>
[17:40:08.244] Packages needed by future strategies (n = 0): <none>
[17:40:08.244] {
[17:40:08.244]     {
[17:40:08.244]         {
[17:40:08.244]             ...future.startTime <- base::Sys.time()
[17:40:08.244]             {
[17:40:08.244]                 {
[17:40:08.244]                   {
[17:40:08.244]                     {
[17:40:08.244]                       base::local({
[17:40:08.244]                         has_future <- base::requireNamespace("future", 
[17:40:08.244]                           quietly = TRUE)
[17:40:08.244]                         if (has_future) {
[17:40:08.244]                           ns <- base::getNamespace("future")
[17:40:08.244]                           version <- ns[[".package"]][["version"]]
[17:40:08.244]                           if (is.null(version)) 
[17:40:08.244]                             version <- utils::packageVersion("future")
[17:40:08.244]                         }
[17:40:08.244]                         else {
[17:40:08.244]                           version <- NULL
[17:40:08.244]                         }
[17:40:08.244]                         if (!has_future || version < "1.8.0") {
[17:40:08.244]                           info <- base::c(r_version = base::gsub("R version ", 
[17:40:08.244]                             "", base::R.version$version.string), 
[17:40:08.244]                             platform = base::sprintf("%s (%s-bit)", 
[17:40:08.244]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:08.244]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:08.244]                               "release", "version")], collapse = " "), 
[17:40:08.244]                             hostname = base::Sys.info()[["nodename"]])
[17:40:08.244]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:40:08.244]                             info)
[17:40:08.244]                           info <- base::paste(info, collapse = "; ")
[17:40:08.244]                           if (!has_future) {
[17:40:08.244]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:08.244]                               info)
[17:40:08.244]                           }
[17:40:08.244]                           else {
[17:40:08.244]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:08.244]                               info, version)
[17:40:08.244]                           }
[17:40:08.244]                           base::stop(msg)
[17:40:08.244]                         }
[17:40:08.244]                       })
[17:40:08.244]                     }
[17:40:08.244]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:40:08.244]                     base::options(mc.cores = 1L)
[17:40:08.244]                   }
[17:40:08.244]                   ...future.strategy.old <- future::plan("list")
[17:40:08.244]                   options(future.plan = NULL)
[17:40:08.244]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:08.244]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:08.244]                 }
[17:40:08.244]                 ...future.workdir <- getwd()
[17:40:08.244]             }
[17:40:08.244]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:08.244]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:08.244]         }
[17:40:08.244]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:08.244]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:40:08.244]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:08.244]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:08.244]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:08.244]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:08.244]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:08.244]             base::names(...future.oldOptions))
[17:40:08.244]     }
[17:40:08.244]     if (FALSE) {
[17:40:08.244]     }
[17:40:08.244]     else {
[17:40:08.244]         if (TRUE) {
[17:40:08.244]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:08.244]                 open = "w")
[17:40:08.244]         }
[17:40:08.244]         else {
[17:40:08.244]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:08.244]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:08.244]         }
[17:40:08.244]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:08.244]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:08.244]             base::sink(type = "output", split = FALSE)
[17:40:08.244]             base::close(...future.stdout)
[17:40:08.244]         }, add = TRUE)
[17:40:08.244]     }
[17:40:08.244]     ...future.frame <- base::sys.nframe()
[17:40:08.244]     ...future.conditions <- base::list()
[17:40:08.244]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:08.244]     if (FALSE) {
[17:40:08.244]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:08.244]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:08.244]     }
[17:40:08.244]     ...future.result <- base::tryCatch({
[17:40:08.244]         base::withCallingHandlers({
[17:40:08.244]             ...future.value <- base::withVisible(base::local({
[17:40:08.244]                 withCallingHandlers({
[17:40:08.244]                   {
[17:40:08.244]                     ii
[17:40:08.244]                   }
[17:40:08.244]                 }, immediateCondition = function(cond) {
[17:40:08.244]                   save_rds <- function (object, pathname, ...) 
[17:40:08.244]                   {
[17:40:08.244]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:40:08.244]                     if (file_test("-f", pathname_tmp)) {
[17:40:08.244]                       fi_tmp <- file.info(pathname_tmp)
[17:40:08.244]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:40:08.244]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:08.244]                         fi_tmp[["mtime"]])
[17:40:08.244]                     }
[17:40:08.244]                     tryCatch({
[17:40:08.244]                       saveRDS(object, file = pathname_tmp, ...)
[17:40:08.244]                     }, error = function(ex) {
[17:40:08.244]                       msg <- conditionMessage(ex)
[17:40:08.244]                       fi_tmp <- file.info(pathname_tmp)
[17:40:08.244]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:40:08.244]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:08.244]                         fi_tmp[["mtime"]], msg)
[17:40:08.244]                       ex$message <- msg
[17:40:08.244]                       stop(ex)
[17:40:08.244]                     })
[17:40:08.244]                     stopifnot(file_test("-f", pathname_tmp))
[17:40:08.244]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:40:08.244]                     if (!res || file_test("-f", pathname_tmp)) {
[17:40:08.244]                       fi_tmp <- file.info(pathname_tmp)
[17:40:08.244]                       fi <- file.info(pathname)
[17:40:08.244]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:40:08.244]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:08.244]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:40:08.244]                         fi[["size"]], fi[["mtime"]])
[17:40:08.244]                       stop(msg)
[17:40:08.244]                     }
[17:40:08.244]                     invisible(pathname)
[17:40:08.244]                   }
[17:40:08.244]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:40:08.244]                     rootPath = tempdir()) 
[17:40:08.244]                   {
[17:40:08.244]                     obj <- list(time = Sys.time(), condition = cond)
[17:40:08.244]                     file <- tempfile(pattern = class(cond)[1], 
[17:40:08.244]                       tmpdir = path, fileext = ".rds")
[17:40:08.244]                     save_rds(obj, file)
[17:40:08.244]                   }
[17:40:08.244]                   saveImmediateCondition(cond, path = "/tmp/RtmpKWJjLX/.future/immediateConditions")
[17:40:08.244]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:08.244]                   {
[17:40:08.244]                     inherits <- base::inherits
[17:40:08.244]                     invokeRestart <- base::invokeRestart
[17:40:08.244]                     is.null <- base::is.null
[17:40:08.244]                     muffled <- FALSE
[17:40:08.244]                     if (inherits(cond, "message")) {
[17:40:08.244]                       muffled <- grepl(pattern, "muffleMessage")
[17:40:08.244]                       if (muffled) 
[17:40:08.244]                         invokeRestart("muffleMessage")
[17:40:08.244]                     }
[17:40:08.244]                     else if (inherits(cond, "warning")) {
[17:40:08.244]                       muffled <- grepl(pattern, "muffleWarning")
[17:40:08.244]                       if (muffled) 
[17:40:08.244]                         invokeRestart("muffleWarning")
[17:40:08.244]                     }
[17:40:08.244]                     else if (inherits(cond, "condition")) {
[17:40:08.244]                       if (!is.null(pattern)) {
[17:40:08.244]                         computeRestarts <- base::computeRestarts
[17:40:08.244]                         grepl <- base::grepl
[17:40:08.244]                         restarts <- computeRestarts(cond)
[17:40:08.244]                         for (restart in restarts) {
[17:40:08.244]                           name <- restart$name
[17:40:08.244]                           if (is.null(name)) 
[17:40:08.244]                             next
[17:40:08.244]                           if (!grepl(pattern, name)) 
[17:40:08.244]                             next
[17:40:08.244]                           invokeRestart(restart)
[17:40:08.244]                           muffled <- TRUE
[17:40:08.244]                           break
[17:40:08.244]                         }
[17:40:08.244]                       }
[17:40:08.244]                     }
[17:40:08.244]                     invisible(muffled)
[17:40:08.244]                   }
[17:40:08.244]                   muffleCondition(cond)
[17:40:08.244]                 })
[17:40:08.244]             }))
[17:40:08.244]             future::FutureResult(value = ...future.value$value, 
[17:40:08.244]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:08.244]                   ...future.rng), globalenv = if (FALSE) 
[17:40:08.244]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:08.244]                     ...future.globalenv.names))
[17:40:08.244]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:08.244]         }, condition = base::local({
[17:40:08.244]             c <- base::c
[17:40:08.244]             inherits <- base::inherits
[17:40:08.244]             invokeRestart <- base::invokeRestart
[17:40:08.244]             length <- base::length
[17:40:08.244]             list <- base::list
[17:40:08.244]             seq.int <- base::seq.int
[17:40:08.244]             signalCondition <- base::signalCondition
[17:40:08.244]             sys.calls <- base::sys.calls
[17:40:08.244]             `[[` <- base::`[[`
[17:40:08.244]             `+` <- base::`+`
[17:40:08.244]             `<<-` <- base::`<<-`
[17:40:08.244]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:08.244]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:08.244]                   3L)]
[17:40:08.244]             }
[17:40:08.244]             function(cond) {
[17:40:08.244]                 is_error <- inherits(cond, "error")
[17:40:08.244]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:08.244]                   NULL)
[17:40:08.244]                 if (is_error) {
[17:40:08.244]                   sessionInformation <- function() {
[17:40:08.244]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:08.244]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:08.244]                       search = base::search(), system = base::Sys.info())
[17:40:08.244]                   }
[17:40:08.244]                   ...future.conditions[[length(...future.conditions) + 
[17:40:08.244]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:08.244]                     cond$call), session = sessionInformation(), 
[17:40:08.244]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:08.244]                   signalCondition(cond)
[17:40:08.244]                 }
[17:40:08.244]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:08.244]                 "immediateCondition"))) {
[17:40:08.244]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:08.244]                   ...future.conditions[[length(...future.conditions) + 
[17:40:08.244]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:08.244]                   if (TRUE && !signal) {
[17:40:08.244]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:08.244]                     {
[17:40:08.244]                       inherits <- base::inherits
[17:40:08.244]                       invokeRestart <- base::invokeRestart
[17:40:08.244]                       is.null <- base::is.null
[17:40:08.244]                       muffled <- FALSE
[17:40:08.244]                       if (inherits(cond, "message")) {
[17:40:08.244]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:08.244]                         if (muffled) 
[17:40:08.244]                           invokeRestart("muffleMessage")
[17:40:08.244]                       }
[17:40:08.244]                       else if (inherits(cond, "warning")) {
[17:40:08.244]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:08.244]                         if (muffled) 
[17:40:08.244]                           invokeRestart("muffleWarning")
[17:40:08.244]                       }
[17:40:08.244]                       else if (inherits(cond, "condition")) {
[17:40:08.244]                         if (!is.null(pattern)) {
[17:40:08.244]                           computeRestarts <- base::computeRestarts
[17:40:08.244]                           grepl <- base::grepl
[17:40:08.244]                           restarts <- computeRestarts(cond)
[17:40:08.244]                           for (restart in restarts) {
[17:40:08.244]                             name <- restart$name
[17:40:08.244]                             if (is.null(name)) 
[17:40:08.244]                               next
[17:40:08.244]                             if (!grepl(pattern, name)) 
[17:40:08.244]                               next
[17:40:08.244]                             invokeRestart(restart)
[17:40:08.244]                             muffled <- TRUE
[17:40:08.244]                             break
[17:40:08.244]                           }
[17:40:08.244]                         }
[17:40:08.244]                       }
[17:40:08.244]                       invisible(muffled)
[17:40:08.244]                     }
[17:40:08.244]                     muffleCondition(cond, pattern = "^muffle")
[17:40:08.244]                   }
[17:40:08.244]                 }
[17:40:08.244]                 else {
[17:40:08.244]                   if (TRUE) {
[17:40:08.244]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:08.244]                     {
[17:40:08.244]                       inherits <- base::inherits
[17:40:08.244]                       invokeRestart <- base::invokeRestart
[17:40:08.244]                       is.null <- base::is.null
[17:40:08.244]                       muffled <- FALSE
[17:40:08.244]                       if (inherits(cond, "message")) {
[17:40:08.244]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:08.244]                         if (muffled) 
[17:40:08.244]                           invokeRestart("muffleMessage")
[17:40:08.244]                       }
[17:40:08.244]                       else if (inherits(cond, "warning")) {
[17:40:08.244]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:08.244]                         if (muffled) 
[17:40:08.244]                           invokeRestart("muffleWarning")
[17:40:08.244]                       }
[17:40:08.244]                       else if (inherits(cond, "condition")) {
[17:40:08.244]                         if (!is.null(pattern)) {
[17:40:08.244]                           computeRestarts <- base::computeRestarts
[17:40:08.244]                           grepl <- base::grepl
[17:40:08.244]                           restarts <- computeRestarts(cond)
[17:40:08.244]                           for (restart in restarts) {
[17:40:08.244]                             name <- restart$name
[17:40:08.244]                             if (is.null(name)) 
[17:40:08.244]                               next
[17:40:08.244]                             if (!grepl(pattern, name)) 
[17:40:08.244]                               next
[17:40:08.244]                             invokeRestart(restart)
[17:40:08.244]                             muffled <- TRUE
[17:40:08.244]                             break
[17:40:08.244]                           }
[17:40:08.244]                         }
[17:40:08.244]                       }
[17:40:08.244]                       invisible(muffled)
[17:40:08.244]                     }
[17:40:08.244]                     muffleCondition(cond, pattern = "^muffle")
[17:40:08.244]                   }
[17:40:08.244]                 }
[17:40:08.244]             }
[17:40:08.244]         }))
[17:40:08.244]     }, error = function(ex) {
[17:40:08.244]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:08.244]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:08.244]                 ...future.rng), started = ...future.startTime, 
[17:40:08.244]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:08.244]             version = "1.8"), class = "FutureResult")
[17:40:08.244]     }, finally = {
[17:40:08.244]         if (!identical(...future.workdir, getwd())) 
[17:40:08.244]             setwd(...future.workdir)
[17:40:08.244]         {
[17:40:08.244]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:08.244]                 ...future.oldOptions$nwarnings <- NULL
[17:40:08.244]             }
[17:40:08.244]             base::options(...future.oldOptions)
[17:40:08.244]             if (.Platform$OS.type == "windows") {
[17:40:08.244]                 old_names <- names(...future.oldEnvVars)
[17:40:08.244]                 envs <- base::Sys.getenv()
[17:40:08.244]                 names <- names(envs)
[17:40:08.244]                 common <- intersect(names, old_names)
[17:40:08.244]                 added <- setdiff(names, old_names)
[17:40:08.244]                 removed <- setdiff(old_names, names)
[17:40:08.244]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:08.244]                   envs[common]]
[17:40:08.244]                 NAMES <- toupper(changed)
[17:40:08.244]                 args <- list()
[17:40:08.244]                 for (kk in seq_along(NAMES)) {
[17:40:08.244]                   name <- changed[[kk]]
[17:40:08.244]                   NAME <- NAMES[[kk]]
[17:40:08.244]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:08.244]                     next
[17:40:08.244]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:08.244]                 }
[17:40:08.244]                 NAMES <- toupper(added)
[17:40:08.244]                 for (kk in seq_along(NAMES)) {
[17:40:08.244]                   name <- added[[kk]]
[17:40:08.244]                   NAME <- NAMES[[kk]]
[17:40:08.244]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:08.244]                     next
[17:40:08.244]                   args[[name]] <- ""
[17:40:08.244]                 }
[17:40:08.244]                 NAMES <- toupper(removed)
[17:40:08.244]                 for (kk in seq_along(NAMES)) {
[17:40:08.244]                   name <- removed[[kk]]
[17:40:08.244]                   NAME <- NAMES[[kk]]
[17:40:08.244]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:08.244]                     next
[17:40:08.244]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:08.244]                 }
[17:40:08.244]                 if (length(args) > 0) 
[17:40:08.244]                   base::do.call(base::Sys.setenv, args = args)
[17:40:08.244]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:08.244]             }
[17:40:08.244]             else {
[17:40:08.244]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:08.244]             }
[17:40:08.244]             {
[17:40:08.244]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:08.244]                   0L) {
[17:40:08.244]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:08.244]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:08.244]                   base::options(opts)
[17:40:08.244]                 }
[17:40:08.244]                 {
[17:40:08.244]                   {
[17:40:08.244]                     base::options(mc.cores = ...future.mc.cores.old)
[17:40:08.244]                     NULL
[17:40:08.244]                   }
[17:40:08.244]                   options(future.plan = NULL)
[17:40:08.244]                   if (is.na(NA_character_)) 
[17:40:08.244]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:08.244]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:08.244]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:40:08.244]                     .init = FALSE)
[17:40:08.244]                 }
[17:40:08.244]             }
[17:40:08.244]         }
[17:40:08.244]     })
[17:40:08.244]     if (TRUE) {
[17:40:08.244]         base::sink(type = "output", split = FALSE)
[17:40:08.244]         if (TRUE) {
[17:40:08.244]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:08.244]         }
[17:40:08.244]         else {
[17:40:08.244]             ...future.result["stdout"] <- base::list(NULL)
[17:40:08.244]         }
[17:40:08.244]         base::close(...future.stdout)
[17:40:08.244]         ...future.stdout <- NULL
[17:40:08.244]     }
[17:40:08.244]     ...future.result$conditions <- ...future.conditions
[17:40:08.244]     ...future.result$finished <- base::Sys.time()
[17:40:08.244]     ...future.result
[17:40:08.244] }
[17:40:08.247] assign_globals() ...
[17:40:08.247] List of 1
[17:40:08.247]  $ ii: int 1
[17:40:08.247]  - attr(*, "where")=List of 1
[17:40:08.247]   ..$ ii:<environment: R_EmptyEnv> 
[17:40:08.247]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:08.247]  - attr(*, "resolved")= logi FALSE
[17:40:08.247]  - attr(*, "total_size")= num 56
[17:40:08.250] - copied ‘ii’ to environment
[17:40:08.250] assign_globals() ... done
[17:40:08.250] requestCore(): workers = 2
[17:40:08.251] MulticoreFuture started
 - Creating multicore future #2 ...
[17:40:08.252] plan(): Setting new future strategy stack:
[17:40:08.253] List of future strategies:
[17:40:08.253] 1. sequential:
[17:40:08.253]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:40:08.253]    - tweaked: FALSE
[17:40:08.253]    - call: NULL
[17:40:08.254] plan(): nbrOfWorkers() = 1
[17:40:08.255] plan(): Setting new future strategy stack:
[17:40:08.256] List of future strategies:
[17:40:08.256] 1. multicore:
[17:40:08.256]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:40:08.256]    - tweaked: FALSE
[17:40:08.256]    - call: plan(multicore)
[17:40:08.257] getGlobalsAndPackages() ...
[17:40:08.257] Searching for globals...
[17:40:08.258] - globals found: [2] ‘{’, ‘ii’
[17:40:08.258] Searching for globals ... DONE
[17:40:08.258] Resolving globals: FALSE
[17:40:08.259] The total size of the 1 globals is 56 bytes (56 bytes)
[17:40:08.260] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[17:40:08.260] plan(): nbrOfWorkers() = 2
[17:40:08.260] - globals: [1] ‘ii’
[17:40:08.260] 
[17:40:08.260] getGlobalsAndPackages() ... DONE
[17:40:08.261] Packages needed by the future expression (n = 0): <none>
[17:40:08.261] Packages needed by future strategies (n = 0): <none>
[17:40:08.266] {
[17:40:08.266]     {
[17:40:08.266]         {
[17:40:08.266]             ...future.startTime <- base::Sys.time()
[17:40:08.266]             {
[17:40:08.266]                 {
[17:40:08.266]                   {
[17:40:08.266]                     {
[17:40:08.266]                       base::local({
[17:40:08.266]                         has_future <- base::requireNamespace("future", 
[17:40:08.266]                           quietly = TRUE)
[17:40:08.266]                         if (has_future) {
[17:40:08.266]                           ns <- base::getNamespace("future")
[17:40:08.266]                           version <- ns[[".package"]][["version"]]
[17:40:08.266]                           if (is.null(version)) 
[17:40:08.266]                             version <- utils::packageVersion("future")
[17:40:08.266]                         }
[17:40:08.266]                         else {
[17:40:08.266]                           version <- NULL
[17:40:08.266]                         }
[17:40:08.266]                         if (!has_future || version < "1.8.0") {
[17:40:08.266]                           info <- base::c(r_version = base::gsub("R version ", 
[17:40:08.266]                             "", base::R.version$version.string), 
[17:40:08.266]                             platform = base::sprintf("%s (%s-bit)", 
[17:40:08.266]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:08.266]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:08.266]                               "release", "version")], collapse = " "), 
[17:40:08.266]                             hostname = base::Sys.info()[["nodename"]])
[17:40:08.266]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:40:08.266]                             info)
[17:40:08.266]                           info <- base::paste(info, collapse = "; ")
[17:40:08.266]                           if (!has_future) {
[17:40:08.266]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:08.266]                               info)
[17:40:08.266]                           }
[17:40:08.266]                           else {
[17:40:08.266]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:08.266]                               info, version)
[17:40:08.266]                           }
[17:40:08.266]                           base::stop(msg)
[17:40:08.266]                         }
[17:40:08.266]                       })
[17:40:08.266]                     }
[17:40:08.266]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:40:08.266]                     base::options(mc.cores = 1L)
[17:40:08.266]                   }
[17:40:08.266]                   ...future.strategy.old <- future::plan("list")
[17:40:08.266]                   options(future.plan = NULL)
[17:40:08.266]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:08.266]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:08.266]                 }
[17:40:08.266]                 ...future.workdir <- getwd()
[17:40:08.266]             }
[17:40:08.266]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:08.266]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:08.266]         }
[17:40:08.266]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:08.266]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:40:08.266]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:08.266]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:08.266]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:08.266]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:08.266]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:08.266]             base::names(...future.oldOptions))
[17:40:08.266]     }
[17:40:08.266]     if (FALSE) {
[17:40:08.266]     }
[17:40:08.266]     else {
[17:40:08.266]         if (TRUE) {
[17:40:08.266]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:08.266]                 open = "w")
[17:40:08.266]         }
[17:40:08.266]         else {
[17:40:08.266]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:08.266]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:08.266]         }
[17:40:08.266]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:08.266]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:08.266]             base::sink(type = "output", split = FALSE)
[17:40:08.266]             base::close(...future.stdout)
[17:40:08.266]         }, add = TRUE)
[17:40:08.266]     }
[17:40:08.266]     ...future.frame <- base::sys.nframe()
[17:40:08.266]     ...future.conditions <- base::list()
[17:40:08.266]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:08.266]     if (FALSE) {
[17:40:08.266]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:08.266]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:08.266]     }
[17:40:08.266]     ...future.result <- base::tryCatch({
[17:40:08.266]         base::withCallingHandlers({
[17:40:08.266]             ...future.value <- base::withVisible(base::local({
[17:40:08.266]                 withCallingHandlers({
[17:40:08.266]                   {
[17:40:08.266]                     ii
[17:40:08.266]                   }
[17:40:08.266]                 }, immediateCondition = function(cond) {
[17:40:08.266]                   save_rds <- function (object, pathname, ...) 
[17:40:08.266]                   {
[17:40:08.266]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:40:08.266]                     if (file_test("-f", pathname_tmp)) {
[17:40:08.266]                       fi_tmp <- file.info(pathname_tmp)
[17:40:08.266]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:40:08.266]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:08.266]                         fi_tmp[["mtime"]])
[17:40:08.266]                     }
[17:40:08.266]                     tryCatch({
[17:40:08.266]                       saveRDS(object, file = pathname_tmp, ...)
[17:40:08.266]                     }, error = function(ex) {
[17:40:08.266]                       msg <- conditionMessage(ex)
[17:40:08.266]                       fi_tmp <- file.info(pathname_tmp)
[17:40:08.266]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:40:08.266]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:08.266]                         fi_tmp[["mtime"]], msg)
[17:40:08.266]                       ex$message <- msg
[17:40:08.266]                       stop(ex)
[17:40:08.266]                     })
[17:40:08.266]                     stopifnot(file_test("-f", pathname_tmp))
[17:40:08.266]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:40:08.266]                     if (!res || file_test("-f", pathname_tmp)) {
[17:40:08.266]                       fi_tmp <- file.info(pathname_tmp)
[17:40:08.266]                       fi <- file.info(pathname)
[17:40:08.266]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:40:08.266]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:08.266]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:40:08.266]                         fi[["size"]], fi[["mtime"]])
[17:40:08.266]                       stop(msg)
[17:40:08.266]                     }
[17:40:08.266]                     invisible(pathname)
[17:40:08.266]                   }
[17:40:08.266]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:40:08.266]                     rootPath = tempdir()) 
[17:40:08.266]                   {
[17:40:08.266]                     obj <- list(time = Sys.time(), condition = cond)
[17:40:08.266]                     file <- tempfile(pattern = class(cond)[1], 
[17:40:08.266]                       tmpdir = path, fileext = ".rds")
[17:40:08.266]                     save_rds(obj, file)
[17:40:08.266]                   }
[17:40:08.266]                   saveImmediateCondition(cond, path = "/tmp/RtmpKWJjLX/.future/immediateConditions")
[17:40:08.266]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:08.266]                   {
[17:40:08.266]                     inherits <- base::inherits
[17:40:08.266]                     invokeRestart <- base::invokeRestart
[17:40:08.266]                     is.null <- base::is.null
[17:40:08.266]                     muffled <- FALSE
[17:40:08.266]                     if (inherits(cond, "message")) {
[17:40:08.266]                       muffled <- grepl(pattern, "muffleMessage")
[17:40:08.266]                       if (muffled) 
[17:40:08.266]                         invokeRestart("muffleMessage")
[17:40:08.266]                     }
[17:40:08.266]                     else if (inherits(cond, "warning")) {
[17:40:08.266]                       muffled <- grepl(pattern, "muffleWarning")
[17:40:08.266]                       if (muffled) 
[17:40:08.266]                         invokeRestart("muffleWarning")
[17:40:08.266]                     }
[17:40:08.266]                     else if (inherits(cond, "condition")) {
[17:40:08.266]                       if (!is.null(pattern)) {
[17:40:08.266]                         computeRestarts <- base::computeRestarts
[17:40:08.266]                         grepl <- base::grepl
[17:40:08.266]                         restarts <- computeRestarts(cond)
[17:40:08.266]                         for (restart in restarts) {
[17:40:08.266]                           name <- restart$name
[17:40:08.266]                           if (is.null(name)) 
[17:40:08.266]                             next
[17:40:08.266]                           if (!grepl(pattern, name)) 
[17:40:08.266]                             next
[17:40:08.266]                           invokeRestart(restart)
[17:40:08.266]                           muffled <- TRUE
[17:40:08.266]                           break
[17:40:08.266]                         }
[17:40:08.266]                       }
[17:40:08.266]                     }
[17:40:08.266]                     invisible(muffled)
[17:40:08.266]                   }
[17:40:08.266]                   muffleCondition(cond)
[17:40:08.266]                 })
[17:40:08.266]             }))
[17:40:08.266]             future::FutureResult(value = ...future.value$value, 
[17:40:08.266]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:08.266]                   ...future.rng), globalenv = if (FALSE) 
[17:40:08.266]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:08.266]                     ...future.globalenv.names))
[17:40:08.266]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:08.266]         }, condition = base::local({
[17:40:08.266]             c <- base::c
[17:40:08.266]             inherits <- base::inherits
[17:40:08.266]             invokeRestart <- base::invokeRestart
[17:40:08.266]             length <- base::length
[17:40:08.266]             list <- base::list
[17:40:08.266]             seq.int <- base::seq.int
[17:40:08.266]             signalCondition <- base::signalCondition
[17:40:08.266]             sys.calls <- base::sys.calls
[17:40:08.266]             `[[` <- base::`[[`
[17:40:08.266]             `+` <- base::`+`
[17:40:08.266]             `<<-` <- base::`<<-`
[17:40:08.266]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:08.266]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:08.266]                   3L)]
[17:40:08.266]             }
[17:40:08.266]             function(cond) {
[17:40:08.266]                 is_error <- inherits(cond, "error")
[17:40:08.266]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:08.266]                   NULL)
[17:40:08.266]                 if (is_error) {
[17:40:08.266]                   sessionInformation <- function() {
[17:40:08.266]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:08.266]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:08.266]                       search = base::search(), system = base::Sys.info())
[17:40:08.266]                   }
[17:40:08.266]                   ...future.conditions[[length(...future.conditions) + 
[17:40:08.266]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:08.266]                     cond$call), session = sessionInformation(), 
[17:40:08.266]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:08.266]                   signalCondition(cond)
[17:40:08.266]                 }
[17:40:08.266]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:08.266]                 "immediateCondition"))) {
[17:40:08.266]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:08.266]                   ...future.conditions[[length(...future.conditions) + 
[17:40:08.266]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:08.266]                   if (TRUE && !signal) {
[17:40:08.266]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:08.266]                     {
[17:40:08.266]                       inherits <- base::inherits
[17:40:08.266]                       invokeRestart <- base::invokeRestart
[17:40:08.266]                       is.null <- base::is.null
[17:40:08.266]                       muffled <- FALSE
[17:40:08.266]                       if (inherits(cond, "message")) {
[17:40:08.266]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:08.266]                         if (muffled) 
[17:40:08.266]                           invokeRestart("muffleMessage")
[17:40:08.266]                       }
[17:40:08.266]                       else if (inherits(cond, "warning")) {
[17:40:08.266]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:08.266]                         if (muffled) 
[17:40:08.266]                           invokeRestart("muffleWarning")
[17:40:08.266]                       }
[17:40:08.266]                       else if (inherits(cond, "condition")) {
[17:40:08.266]                         if (!is.null(pattern)) {
[17:40:08.266]                           computeRestarts <- base::computeRestarts
[17:40:08.266]                           grepl <- base::grepl
[17:40:08.266]                           restarts <- computeRestarts(cond)
[17:40:08.266]                           for (restart in restarts) {
[17:40:08.266]                             name <- restart$name
[17:40:08.266]                             if (is.null(name)) 
[17:40:08.266]                               next
[17:40:08.266]                             if (!grepl(pattern, name)) 
[17:40:08.266]                               next
[17:40:08.266]                             invokeRestart(restart)
[17:40:08.266]                             muffled <- TRUE
[17:40:08.266]                             break
[17:40:08.266]                           }
[17:40:08.266]                         }
[17:40:08.266]                       }
[17:40:08.266]                       invisible(muffled)
[17:40:08.266]                     }
[17:40:08.266]                     muffleCondition(cond, pattern = "^muffle")
[17:40:08.266]                   }
[17:40:08.266]                 }
[17:40:08.266]                 else {
[17:40:08.266]                   if (TRUE) {
[17:40:08.266]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:08.266]                     {
[17:40:08.266]                       inherits <- base::inherits
[17:40:08.266]                       invokeRestart <- base::invokeRestart
[17:40:08.266]                       is.null <- base::is.null
[17:40:08.266]                       muffled <- FALSE
[17:40:08.266]                       if (inherits(cond, "message")) {
[17:40:08.266]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:08.266]                         if (muffled) 
[17:40:08.266]                           invokeRestart("muffleMessage")
[17:40:08.266]                       }
[17:40:08.266]                       else if (inherits(cond, "warning")) {
[17:40:08.266]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:08.266]                         if (muffled) 
[17:40:08.266]                           invokeRestart("muffleWarning")
[17:40:08.266]                       }
[17:40:08.266]                       else if (inherits(cond, "condition")) {
[17:40:08.266]                         if (!is.null(pattern)) {
[17:40:08.266]                           computeRestarts <- base::computeRestarts
[17:40:08.266]                           grepl <- base::grepl
[17:40:08.266]                           restarts <- computeRestarts(cond)
[17:40:08.266]                           for (restart in restarts) {
[17:40:08.266]                             name <- restart$name
[17:40:08.266]                             if (is.null(name)) 
[17:40:08.266]                               next
[17:40:08.266]                             if (!grepl(pattern, name)) 
[17:40:08.266]                               next
[17:40:08.266]                             invokeRestart(restart)
[17:40:08.266]                             muffled <- TRUE
[17:40:08.266]                             break
[17:40:08.266]                           }
[17:40:08.266]                         }
[17:40:08.266]                       }
[17:40:08.266]                       invisible(muffled)
[17:40:08.266]                     }
[17:40:08.266]                     muffleCondition(cond, pattern = "^muffle")
[17:40:08.266]                   }
[17:40:08.266]                 }
[17:40:08.266]             }
[17:40:08.266]         }))
[17:40:08.266]     }, error = function(ex) {
[17:40:08.266]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:08.266]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:08.266]                 ...future.rng), started = ...future.startTime, 
[17:40:08.266]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:08.266]             version = "1.8"), class = "FutureResult")
[17:40:08.266]     }, finally = {
[17:40:08.266]         if (!identical(...future.workdir, getwd())) 
[17:40:08.266]             setwd(...future.workdir)
[17:40:08.266]         {
[17:40:08.266]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:08.266]                 ...future.oldOptions$nwarnings <- NULL
[17:40:08.266]             }
[17:40:08.266]             base::options(...future.oldOptions)
[17:40:08.266]             if (.Platform$OS.type == "windows") {
[17:40:08.266]                 old_names <- names(...future.oldEnvVars)
[17:40:08.266]                 envs <- base::Sys.getenv()
[17:40:08.266]                 names <- names(envs)
[17:40:08.266]                 common <- intersect(names, old_names)
[17:40:08.266]                 added <- setdiff(names, old_names)
[17:40:08.266]                 removed <- setdiff(old_names, names)
[17:40:08.266]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:08.266]                   envs[common]]
[17:40:08.266]                 NAMES <- toupper(changed)
[17:40:08.266]                 args <- list()
[17:40:08.266]                 for (kk in seq_along(NAMES)) {
[17:40:08.266]                   name <- changed[[kk]]
[17:40:08.266]                   NAME <- NAMES[[kk]]
[17:40:08.266]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:08.266]                     next
[17:40:08.266]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:08.266]                 }
[17:40:08.266]                 NAMES <- toupper(added)
[17:40:08.266]                 for (kk in seq_along(NAMES)) {
[17:40:08.266]                   name <- added[[kk]]
[17:40:08.266]                   NAME <- NAMES[[kk]]
[17:40:08.266]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:08.266]                     next
[17:40:08.266]                   args[[name]] <- ""
[17:40:08.266]                 }
[17:40:08.266]                 NAMES <- toupper(removed)
[17:40:08.266]                 for (kk in seq_along(NAMES)) {
[17:40:08.266]                   name <- removed[[kk]]
[17:40:08.266]                   NAME <- NAMES[[kk]]
[17:40:08.266]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:08.266]                     next
[17:40:08.266]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:08.266]                 }
[17:40:08.266]                 if (length(args) > 0) 
[17:40:08.266]                   base::do.call(base::Sys.setenv, args = args)
[17:40:08.266]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:08.266]             }
[17:40:08.266]             else {
[17:40:08.266]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:08.266]             }
[17:40:08.266]             {
[17:40:08.266]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:08.266]                   0L) {
[17:40:08.266]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:08.266]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:08.266]                   base::options(opts)
[17:40:08.266]                 }
[17:40:08.266]                 {
[17:40:08.266]                   {
[17:40:08.266]                     base::options(mc.cores = ...future.mc.cores.old)
[17:40:08.266]                     NULL
[17:40:08.266]                   }
[17:40:08.266]                   options(future.plan = NULL)
[17:40:08.266]                   if (is.na(NA_character_)) 
[17:40:08.266]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:08.266]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:08.266]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:40:08.266]                     .init = FALSE)
[17:40:08.266]                 }
[17:40:08.266]             }
[17:40:08.266]         }
[17:40:08.266]     })
[17:40:08.266]     if (TRUE) {
[17:40:08.266]         base::sink(type = "output", split = FALSE)
[17:40:08.266]         if (TRUE) {
[17:40:08.266]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:08.266]         }
[17:40:08.266]         else {
[17:40:08.266]             ...future.result["stdout"] <- base::list(NULL)
[17:40:08.266]         }
[17:40:08.266]         base::close(...future.stdout)
[17:40:08.266]         ...future.stdout <- NULL
[17:40:08.266]     }
[17:40:08.266]     ...future.result$conditions <- ...future.conditions
[17:40:08.266]     ...future.result$finished <- base::Sys.time()
[17:40:08.266]     ...future.result
[17:40:08.266] }
[17:40:08.269] assign_globals() ...
[17:40:08.269] List of 1
[17:40:08.269]  $ ii: int 2
[17:40:08.269]  - attr(*, "where")=List of 1
[17:40:08.269]   ..$ ii:<environment: R_EmptyEnv> 
[17:40:08.269]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:08.269]  - attr(*, "resolved")= logi FALSE
[17:40:08.269]  - attr(*, "total_size")= num 56
[17:40:08.273] - copied ‘ii’ to environment
[17:40:08.273] assign_globals() ... done
[17:40:08.273] requestCore(): workers = 2
[17:40:08.275] MulticoreFuture started
 - Creating multicore future #3 ...
[17:40:08.276] plan(): Setting new future strategy stack:
[17:40:08.277] List of future strategies:
[17:40:08.277] 1. sequential:
[17:40:08.277]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:40:08.277]    - tweaked: FALSE
[17:40:08.277]    - call: NULL
[17:40:08.278] plan(): nbrOfWorkers() = 1
[17:40:08.280] plan(): Setting new future strategy stack:
[17:40:08.280] List of future strategies:
[17:40:08.280] 1. multicore:
[17:40:08.280]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:40:08.280]    - tweaked: FALSE
[17:40:08.280]    - call: plan(multicore)
[17:40:08.281] getGlobalsAndPackages() ...
[17:40:08.281] Searching for globals...
[17:40:08.283] - globals found: [2] ‘{’, ‘ii’
[17:40:08.283] Searching for globals ... DONE
[17:40:08.283] Resolving globals: FALSE
[17:40:08.284] The total size of the 1 globals is 56 bytes (56 bytes)
[17:40:08.284] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[17:40:08.284] plan(): nbrOfWorkers() = 2
[17:40:08.284] - globals: [1] ‘ii’
[17:40:08.285] 
[17:40:08.285] getGlobalsAndPackages() ... DONE
[17:40:08.285] Packages needed by the future expression (n = 0): <none>
[17:40:08.286] Packages needed by future strategies (n = 0): <none>
[17:40:08.286] {
[17:40:08.286]     {
[17:40:08.286]         {
[17:40:08.286]             ...future.startTime <- base::Sys.time()
[17:40:08.286]             {
[17:40:08.286]                 {
[17:40:08.286]                   {
[17:40:08.286]                     {
[17:40:08.286]                       base::local({
[17:40:08.286]                         has_future <- base::requireNamespace("future", 
[17:40:08.286]                           quietly = TRUE)
[17:40:08.286]                         if (has_future) {
[17:40:08.286]                           ns <- base::getNamespace("future")
[17:40:08.286]                           version <- ns[[".package"]][["version"]]
[17:40:08.286]                           if (is.null(version)) 
[17:40:08.286]                             version <- utils::packageVersion("future")
[17:40:08.286]                         }
[17:40:08.286]                         else {
[17:40:08.286]                           version <- NULL
[17:40:08.286]                         }
[17:40:08.286]                         if (!has_future || version < "1.8.0") {
[17:40:08.286]                           info <- base::c(r_version = base::gsub("R version ", 
[17:40:08.286]                             "", base::R.version$version.string), 
[17:40:08.286]                             platform = base::sprintf("%s (%s-bit)", 
[17:40:08.286]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:08.286]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:08.286]                               "release", "version")], collapse = " "), 
[17:40:08.286]                             hostname = base::Sys.info()[["nodename"]])
[17:40:08.286]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:40:08.286]                             info)
[17:40:08.286]                           info <- base::paste(info, collapse = "; ")
[17:40:08.286]                           if (!has_future) {
[17:40:08.286]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:08.286]                               info)
[17:40:08.286]                           }
[17:40:08.286]                           else {
[17:40:08.286]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:08.286]                               info, version)
[17:40:08.286]                           }
[17:40:08.286]                           base::stop(msg)
[17:40:08.286]                         }
[17:40:08.286]                       })
[17:40:08.286]                     }
[17:40:08.286]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:40:08.286]                     base::options(mc.cores = 1L)
[17:40:08.286]                   }
[17:40:08.286]                   ...future.strategy.old <- future::plan("list")
[17:40:08.286]                   options(future.plan = NULL)
[17:40:08.286]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:08.286]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:08.286]                 }
[17:40:08.286]                 ...future.workdir <- getwd()
[17:40:08.286]             }
[17:40:08.286]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:08.286]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:08.286]         }
[17:40:08.286]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:08.286]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:40:08.286]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:08.286]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:08.286]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:08.286]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:08.286]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:08.286]             base::names(...future.oldOptions))
[17:40:08.286]     }
[17:40:08.286]     if (FALSE) {
[17:40:08.286]     }
[17:40:08.286]     else {
[17:40:08.286]         if (TRUE) {
[17:40:08.286]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:08.286]                 open = "w")
[17:40:08.286]         }
[17:40:08.286]         else {
[17:40:08.286]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:08.286]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:08.286]         }
[17:40:08.286]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:08.286]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:08.286]             base::sink(type = "output", split = FALSE)
[17:40:08.286]             base::close(...future.stdout)
[17:40:08.286]         }, add = TRUE)
[17:40:08.286]     }
[17:40:08.286]     ...future.frame <- base::sys.nframe()
[17:40:08.286]     ...future.conditions <- base::list()
[17:40:08.286]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:08.286]     if (FALSE) {
[17:40:08.286]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:08.286]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:08.286]     }
[17:40:08.286]     ...future.result <- base::tryCatch({
[17:40:08.286]         base::withCallingHandlers({
[17:40:08.286]             ...future.value <- base::withVisible(base::local({
[17:40:08.286]                 withCallingHandlers({
[17:40:08.286]                   {
[17:40:08.286]                     ii
[17:40:08.286]                   }
[17:40:08.286]                 }, immediateCondition = function(cond) {
[17:40:08.286]                   save_rds <- function (object, pathname, ...) 
[17:40:08.286]                   {
[17:40:08.286]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:40:08.286]                     if (file_test("-f", pathname_tmp)) {
[17:40:08.286]                       fi_tmp <- file.info(pathname_tmp)
[17:40:08.286]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:40:08.286]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:08.286]                         fi_tmp[["mtime"]])
[17:40:08.286]                     }
[17:40:08.286]                     tryCatch({
[17:40:08.286]                       saveRDS(object, file = pathname_tmp, ...)
[17:40:08.286]                     }, error = function(ex) {
[17:40:08.286]                       msg <- conditionMessage(ex)
[17:40:08.286]                       fi_tmp <- file.info(pathname_tmp)
[17:40:08.286]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:40:08.286]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:08.286]                         fi_tmp[["mtime"]], msg)
[17:40:08.286]                       ex$message <- msg
[17:40:08.286]                       stop(ex)
[17:40:08.286]                     })
[17:40:08.286]                     stopifnot(file_test("-f", pathname_tmp))
[17:40:08.286]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:40:08.286]                     if (!res || file_test("-f", pathname_tmp)) {
[17:40:08.286]                       fi_tmp <- file.info(pathname_tmp)
[17:40:08.286]                       fi <- file.info(pathname)
[17:40:08.286]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:40:08.286]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:08.286]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:40:08.286]                         fi[["size"]], fi[["mtime"]])
[17:40:08.286]                       stop(msg)
[17:40:08.286]                     }
[17:40:08.286]                     invisible(pathname)
[17:40:08.286]                   }
[17:40:08.286]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:40:08.286]                     rootPath = tempdir()) 
[17:40:08.286]                   {
[17:40:08.286]                     obj <- list(time = Sys.time(), condition = cond)
[17:40:08.286]                     file <- tempfile(pattern = class(cond)[1], 
[17:40:08.286]                       tmpdir = path, fileext = ".rds")
[17:40:08.286]                     save_rds(obj, file)
[17:40:08.286]                   }
[17:40:08.286]                   saveImmediateCondition(cond, path = "/tmp/RtmpKWJjLX/.future/immediateConditions")
[17:40:08.286]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:08.286]                   {
[17:40:08.286]                     inherits <- base::inherits
[17:40:08.286]                     invokeRestart <- base::invokeRestart
[17:40:08.286]                     is.null <- base::is.null
[17:40:08.286]                     muffled <- FALSE
[17:40:08.286]                     if (inherits(cond, "message")) {
[17:40:08.286]                       muffled <- grepl(pattern, "muffleMessage")
[17:40:08.286]                       if (muffled) 
[17:40:08.286]                         invokeRestart("muffleMessage")
[17:40:08.286]                     }
[17:40:08.286]                     else if (inherits(cond, "warning")) {
[17:40:08.286]                       muffled <- grepl(pattern, "muffleWarning")
[17:40:08.286]                       if (muffled) 
[17:40:08.286]                         invokeRestart("muffleWarning")
[17:40:08.286]                     }
[17:40:08.286]                     else if (inherits(cond, "condition")) {
[17:40:08.286]                       if (!is.null(pattern)) {
[17:40:08.286]                         computeRestarts <- base::computeRestarts
[17:40:08.286]                         grepl <- base::grepl
[17:40:08.286]                         restarts <- computeRestarts(cond)
[17:40:08.286]                         for (restart in restarts) {
[17:40:08.286]                           name <- restart$name
[17:40:08.286]                           if (is.null(name)) 
[17:40:08.286]                             next
[17:40:08.286]                           if (!grepl(pattern, name)) 
[17:40:08.286]                             next
[17:40:08.286]                           invokeRestart(restart)
[17:40:08.286]                           muffled <- TRUE
[17:40:08.286]                           break
[17:40:08.286]                         }
[17:40:08.286]                       }
[17:40:08.286]                     }
[17:40:08.286]                     invisible(muffled)
[17:40:08.286]                   }
[17:40:08.286]                   muffleCondition(cond)
[17:40:08.286]                 })
[17:40:08.286]             }))
[17:40:08.286]             future::FutureResult(value = ...future.value$value, 
[17:40:08.286]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:08.286]                   ...future.rng), globalenv = if (FALSE) 
[17:40:08.286]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:08.286]                     ...future.globalenv.names))
[17:40:08.286]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:08.286]         }, condition = base::local({
[17:40:08.286]             c <- base::c
[17:40:08.286]             inherits <- base::inherits
[17:40:08.286]             invokeRestart <- base::invokeRestart
[17:40:08.286]             length <- base::length
[17:40:08.286]             list <- base::list
[17:40:08.286]             seq.int <- base::seq.int
[17:40:08.286]             signalCondition <- base::signalCondition
[17:40:08.286]             sys.calls <- base::sys.calls
[17:40:08.286]             `[[` <- base::`[[`
[17:40:08.286]             `+` <- base::`+`
[17:40:08.286]             `<<-` <- base::`<<-`
[17:40:08.286]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:08.286]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:08.286]                   3L)]
[17:40:08.286]             }
[17:40:08.286]             function(cond) {
[17:40:08.286]                 is_error <- inherits(cond, "error")
[17:40:08.286]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:08.286]                   NULL)
[17:40:08.286]                 if (is_error) {
[17:40:08.286]                   sessionInformation <- function() {
[17:40:08.286]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:08.286]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:08.286]                       search = base::search(), system = base::Sys.info())
[17:40:08.286]                   }
[17:40:08.286]                   ...future.conditions[[length(...future.conditions) + 
[17:40:08.286]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:08.286]                     cond$call), session = sessionInformation(), 
[17:40:08.286]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:08.286]                   signalCondition(cond)
[17:40:08.286]                 }
[17:40:08.286]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:08.286]                 "immediateCondition"))) {
[17:40:08.286]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:08.286]                   ...future.conditions[[length(...future.conditions) + 
[17:40:08.286]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:08.286]                   if (TRUE && !signal) {
[17:40:08.286]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:08.286]                     {
[17:40:08.286]                       inherits <- base::inherits
[17:40:08.286]                       invokeRestart <- base::invokeRestart
[17:40:08.286]                       is.null <- base::is.null
[17:40:08.286]                       muffled <- FALSE
[17:40:08.286]                       if (inherits(cond, "message")) {
[17:40:08.286]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:08.286]                         if (muffled) 
[17:40:08.286]                           invokeRestart("muffleMessage")
[17:40:08.286]                       }
[17:40:08.286]                       else if (inherits(cond, "warning")) {
[17:40:08.286]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:08.286]                         if (muffled) 
[17:40:08.286]                           invokeRestart("muffleWarning")
[17:40:08.286]                       }
[17:40:08.286]                       else if (inherits(cond, "condition")) {
[17:40:08.286]                         if (!is.null(pattern)) {
[17:40:08.286]                           computeRestarts <- base::computeRestarts
[17:40:08.286]                           grepl <- base::grepl
[17:40:08.286]                           restarts <- computeRestarts(cond)
[17:40:08.286]                           for (restart in restarts) {
[17:40:08.286]                             name <- restart$name
[17:40:08.286]                             if (is.null(name)) 
[17:40:08.286]                               next
[17:40:08.286]                             if (!grepl(pattern, name)) 
[17:40:08.286]                               next
[17:40:08.286]                             invokeRestart(restart)
[17:40:08.286]                             muffled <- TRUE
[17:40:08.286]                             break
[17:40:08.286]                           }
[17:40:08.286]                         }
[17:40:08.286]                       }
[17:40:08.286]                       invisible(muffled)
[17:40:08.286]                     }
[17:40:08.286]                     muffleCondition(cond, pattern = "^muffle")
[17:40:08.286]                   }
[17:40:08.286]                 }
[17:40:08.286]                 else {
[17:40:08.286]                   if (TRUE) {
[17:40:08.286]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:08.286]                     {
[17:40:08.286]                       inherits <- base::inherits
[17:40:08.286]                       invokeRestart <- base::invokeRestart
[17:40:08.286]                       is.null <- base::is.null
[17:40:08.286]                       muffled <- FALSE
[17:40:08.286]                       if (inherits(cond, "message")) {
[17:40:08.286]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:08.286]                         if (muffled) 
[17:40:08.286]                           invokeRestart("muffleMessage")
[17:40:08.286]                       }
[17:40:08.286]                       else if (inherits(cond, "warning")) {
[17:40:08.286]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:08.286]                         if (muffled) 
[17:40:08.286]                           invokeRestart("muffleWarning")
[17:40:08.286]                       }
[17:40:08.286]                       else if (inherits(cond, "condition")) {
[17:40:08.286]                         if (!is.null(pattern)) {
[17:40:08.286]                           computeRestarts <- base::computeRestarts
[17:40:08.286]                           grepl <- base::grepl
[17:40:08.286]                           restarts <- computeRestarts(cond)
[17:40:08.286]                           for (restart in restarts) {
[17:40:08.286]                             name <- restart$name
[17:40:08.286]                             if (is.null(name)) 
[17:40:08.286]                               next
[17:40:08.286]                             if (!grepl(pattern, name)) 
[17:40:08.286]                               next
[17:40:08.286]                             invokeRestart(restart)
[17:40:08.286]                             muffled <- TRUE
[17:40:08.286]                             break
[17:40:08.286]                           }
[17:40:08.286]                         }
[17:40:08.286]                       }
[17:40:08.286]                       invisible(muffled)
[17:40:08.286]                     }
[17:40:08.286]                     muffleCondition(cond, pattern = "^muffle")
[17:40:08.286]                   }
[17:40:08.286]                 }
[17:40:08.286]             }
[17:40:08.286]         }))
[17:40:08.286]     }, error = function(ex) {
[17:40:08.286]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:08.286]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:08.286]                 ...future.rng), started = ...future.startTime, 
[17:40:08.286]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:08.286]             version = "1.8"), class = "FutureResult")
[17:40:08.286]     }, finally = {
[17:40:08.286]         if (!identical(...future.workdir, getwd())) 
[17:40:08.286]             setwd(...future.workdir)
[17:40:08.286]         {
[17:40:08.286]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:08.286]                 ...future.oldOptions$nwarnings <- NULL
[17:40:08.286]             }
[17:40:08.286]             base::options(...future.oldOptions)
[17:40:08.286]             if (.Platform$OS.type == "windows") {
[17:40:08.286]                 old_names <- names(...future.oldEnvVars)
[17:40:08.286]                 envs <- base::Sys.getenv()
[17:40:08.286]                 names <- names(envs)
[17:40:08.286]                 common <- intersect(names, old_names)
[17:40:08.286]                 added <- setdiff(names, old_names)
[17:40:08.286]                 removed <- setdiff(old_names, names)
[17:40:08.286]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:08.286]                   envs[common]]
[17:40:08.286]                 NAMES <- toupper(changed)
[17:40:08.286]                 args <- list()
[17:40:08.286]                 for (kk in seq_along(NAMES)) {
[17:40:08.286]                   name <- changed[[kk]]
[17:40:08.286]                   NAME <- NAMES[[kk]]
[17:40:08.286]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:08.286]                     next
[17:40:08.286]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:08.286]                 }
[17:40:08.286]                 NAMES <- toupper(added)
[17:40:08.286]                 for (kk in seq_along(NAMES)) {
[17:40:08.286]                   name <- added[[kk]]
[17:40:08.286]                   NAME <- NAMES[[kk]]
[17:40:08.286]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:08.286]                     next
[17:40:08.286]                   args[[name]] <- ""
[17:40:08.286]                 }
[17:40:08.286]                 NAMES <- toupper(removed)
[17:40:08.286]                 for (kk in seq_along(NAMES)) {
[17:40:08.286]                   name <- removed[[kk]]
[17:40:08.286]                   NAME <- NAMES[[kk]]
[17:40:08.286]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:08.286]                     next
[17:40:08.286]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:08.286]                 }
[17:40:08.286]                 if (length(args) > 0) 
[17:40:08.286]                   base::do.call(base::Sys.setenv, args = args)
[17:40:08.286]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:08.286]             }
[17:40:08.286]             else {
[17:40:08.286]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:08.286]             }
[17:40:08.286]             {
[17:40:08.286]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:08.286]                   0L) {
[17:40:08.286]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:08.286]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:08.286]                   base::options(opts)
[17:40:08.286]                 }
[17:40:08.286]                 {
[17:40:08.286]                   {
[17:40:08.286]                     base::options(mc.cores = ...future.mc.cores.old)
[17:40:08.286]                     NULL
[17:40:08.286]                   }
[17:40:08.286]                   options(future.plan = NULL)
[17:40:08.286]                   if (is.na(NA_character_)) 
[17:40:08.286]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:08.286]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:08.286]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:40:08.286]                     .init = FALSE)
[17:40:08.286]                 }
[17:40:08.286]             }
[17:40:08.286]         }
[17:40:08.286]     })
[17:40:08.286]     if (TRUE) {
[17:40:08.286]         base::sink(type = "output", split = FALSE)
[17:40:08.286]         if (TRUE) {
[17:40:08.286]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:08.286]         }
[17:40:08.286]         else {
[17:40:08.286]             ...future.result["stdout"] <- base::list(NULL)
[17:40:08.286]         }
[17:40:08.286]         base::close(...future.stdout)
[17:40:08.286]         ...future.stdout <- NULL
[17:40:08.286]     }
[17:40:08.286]     ...future.result$conditions <- ...future.conditions
[17:40:08.286]     ...future.result$finished <- base::Sys.time()
[17:40:08.286]     ...future.result
[17:40:08.286] }
[17:40:08.290] assign_globals() ...
[17:40:08.290] List of 1
[17:40:08.290]  $ ii: int 3
[17:40:08.290]  - attr(*, "where")=List of 1
[17:40:08.290]   ..$ ii:<environment: R_EmptyEnv> 
[17:40:08.290]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:08.290]  - attr(*, "resolved")= logi FALSE
[17:40:08.290]  - attr(*, "total_size")= num 56
[17:40:08.293] - copied ‘ii’ to environment
[17:40:08.293] assign_globals() ... done
[17:40:08.294] requestCore(): workers = 2
[17:40:08.294] Poll #1 (0): usedCores() = 2, workers = 2
[17:40:08.305] result() for MulticoreFuture ...
[17:40:08.306] result() for MulticoreFuture ...
[17:40:08.306] result() for MulticoreFuture ... done
[17:40:08.306] result() for MulticoreFuture ... done
[17:40:08.306] result() for MulticoreFuture ...
[17:40:08.306] result() for MulticoreFuture ... done
[17:40:08.308] MulticoreFuture started
 - Creating multicore future #4 ...
[17:40:08.310] plan(): Setting new future strategy stack:
[17:40:08.310] List of future strategies:
[17:40:08.310] 1. sequential:
[17:40:08.310]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:40:08.310]    - tweaked: FALSE
[17:40:08.310]    - call: NULL
[17:40:08.311] plan(): nbrOfWorkers() = 1
[17:40:08.313] plan(): Setting new future strategy stack:
[17:40:08.313] List of future strategies:
[17:40:08.313] 1. multicore:
[17:40:08.313]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:40:08.313]    - tweaked: FALSE
[17:40:08.313]    - call: plan(multicore)
[17:40:08.316] getGlobalsAndPackages() ...
[17:40:08.316] Searching for globals...
[17:40:08.317] - globals found: [2] ‘{’, ‘ii’
[17:40:08.318] Searching for globals ... DONE
[17:40:08.318] Resolving globals: FALSE
[17:40:08.319] The total size of the 1 globals is 56 bytes (56 bytes)
[17:40:08.319] plan(): nbrOfWorkers() = 2
[17:40:08.320] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[17:40:08.320] - globals: [1] ‘ii’
[17:40:08.320] 
[17:40:08.320] getGlobalsAndPackages() ... DONE
[17:40:08.321] Packages needed by the future expression (n = 0): <none>
[17:40:08.321] Packages needed by future strategies (n = 0): <none>
[17:40:08.322] {
[17:40:08.322]     {
[17:40:08.322]         {
[17:40:08.322]             ...future.startTime <- base::Sys.time()
[17:40:08.322]             {
[17:40:08.322]                 {
[17:40:08.322]                   {
[17:40:08.322]                     {
[17:40:08.322]                       base::local({
[17:40:08.322]                         has_future <- base::requireNamespace("future", 
[17:40:08.322]                           quietly = TRUE)
[17:40:08.322]                         if (has_future) {
[17:40:08.322]                           ns <- base::getNamespace("future")
[17:40:08.322]                           version <- ns[[".package"]][["version"]]
[17:40:08.322]                           if (is.null(version)) 
[17:40:08.322]                             version <- utils::packageVersion("future")
[17:40:08.322]                         }
[17:40:08.322]                         else {
[17:40:08.322]                           version <- NULL
[17:40:08.322]                         }
[17:40:08.322]                         if (!has_future || version < "1.8.0") {
[17:40:08.322]                           info <- base::c(r_version = base::gsub("R version ", 
[17:40:08.322]                             "", base::R.version$version.string), 
[17:40:08.322]                             platform = base::sprintf("%s (%s-bit)", 
[17:40:08.322]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:08.322]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:08.322]                               "release", "version")], collapse = " "), 
[17:40:08.322]                             hostname = base::Sys.info()[["nodename"]])
[17:40:08.322]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:40:08.322]                             info)
[17:40:08.322]                           info <- base::paste(info, collapse = "; ")
[17:40:08.322]                           if (!has_future) {
[17:40:08.322]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:08.322]                               info)
[17:40:08.322]                           }
[17:40:08.322]                           else {
[17:40:08.322]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:08.322]                               info, version)
[17:40:08.322]                           }
[17:40:08.322]                           base::stop(msg)
[17:40:08.322]                         }
[17:40:08.322]                       })
[17:40:08.322]                     }
[17:40:08.322]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:40:08.322]                     base::options(mc.cores = 1L)
[17:40:08.322]                   }
[17:40:08.322]                   ...future.strategy.old <- future::plan("list")
[17:40:08.322]                   options(future.plan = NULL)
[17:40:08.322]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:08.322]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:08.322]                 }
[17:40:08.322]                 ...future.workdir <- getwd()
[17:40:08.322]             }
[17:40:08.322]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:08.322]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:08.322]         }
[17:40:08.322]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:08.322]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:40:08.322]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:08.322]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:08.322]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:08.322]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:08.322]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:08.322]             base::names(...future.oldOptions))
[17:40:08.322]     }
[17:40:08.322]     if (FALSE) {
[17:40:08.322]     }
[17:40:08.322]     else {
[17:40:08.322]         if (TRUE) {
[17:40:08.322]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:08.322]                 open = "w")
[17:40:08.322]         }
[17:40:08.322]         else {
[17:40:08.322]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:08.322]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:08.322]         }
[17:40:08.322]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:08.322]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:08.322]             base::sink(type = "output", split = FALSE)
[17:40:08.322]             base::close(...future.stdout)
[17:40:08.322]         }, add = TRUE)
[17:40:08.322]     }
[17:40:08.322]     ...future.frame <- base::sys.nframe()
[17:40:08.322]     ...future.conditions <- base::list()
[17:40:08.322]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:08.322]     if (FALSE) {
[17:40:08.322]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:08.322]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:08.322]     }
[17:40:08.322]     ...future.result <- base::tryCatch({
[17:40:08.322]         base::withCallingHandlers({
[17:40:08.322]             ...future.value <- base::withVisible(base::local({
[17:40:08.322]                 withCallingHandlers({
[17:40:08.322]                   {
[17:40:08.322]                     ii
[17:40:08.322]                   }
[17:40:08.322]                 }, immediateCondition = function(cond) {
[17:40:08.322]                   save_rds <- function (object, pathname, ...) 
[17:40:08.322]                   {
[17:40:08.322]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:40:08.322]                     if (file_test("-f", pathname_tmp)) {
[17:40:08.322]                       fi_tmp <- file.info(pathname_tmp)
[17:40:08.322]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:40:08.322]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:08.322]                         fi_tmp[["mtime"]])
[17:40:08.322]                     }
[17:40:08.322]                     tryCatch({
[17:40:08.322]                       saveRDS(object, file = pathname_tmp, ...)
[17:40:08.322]                     }, error = function(ex) {
[17:40:08.322]                       msg <- conditionMessage(ex)
[17:40:08.322]                       fi_tmp <- file.info(pathname_tmp)
[17:40:08.322]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:40:08.322]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:08.322]                         fi_tmp[["mtime"]], msg)
[17:40:08.322]                       ex$message <- msg
[17:40:08.322]                       stop(ex)
[17:40:08.322]                     })
[17:40:08.322]                     stopifnot(file_test("-f", pathname_tmp))
[17:40:08.322]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:40:08.322]                     if (!res || file_test("-f", pathname_tmp)) {
[17:40:08.322]                       fi_tmp <- file.info(pathname_tmp)
[17:40:08.322]                       fi <- file.info(pathname)
[17:40:08.322]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:40:08.322]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:08.322]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:40:08.322]                         fi[["size"]], fi[["mtime"]])
[17:40:08.322]                       stop(msg)
[17:40:08.322]                     }
[17:40:08.322]                     invisible(pathname)
[17:40:08.322]                   }
[17:40:08.322]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:40:08.322]                     rootPath = tempdir()) 
[17:40:08.322]                   {
[17:40:08.322]                     obj <- list(time = Sys.time(), condition = cond)
[17:40:08.322]                     file <- tempfile(pattern = class(cond)[1], 
[17:40:08.322]                       tmpdir = path, fileext = ".rds")
[17:40:08.322]                     save_rds(obj, file)
[17:40:08.322]                   }
[17:40:08.322]                   saveImmediateCondition(cond, path = "/tmp/RtmpKWJjLX/.future/immediateConditions")
[17:40:08.322]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:08.322]                   {
[17:40:08.322]                     inherits <- base::inherits
[17:40:08.322]                     invokeRestart <- base::invokeRestart
[17:40:08.322]                     is.null <- base::is.null
[17:40:08.322]                     muffled <- FALSE
[17:40:08.322]                     if (inherits(cond, "message")) {
[17:40:08.322]                       muffled <- grepl(pattern, "muffleMessage")
[17:40:08.322]                       if (muffled) 
[17:40:08.322]                         invokeRestart("muffleMessage")
[17:40:08.322]                     }
[17:40:08.322]                     else if (inherits(cond, "warning")) {
[17:40:08.322]                       muffled <- grepl(pattern, "muffleWarning")
[17:40:08.322]                       if (muffled) 
[17:40:08.322]                         invokeRestart("muffleWarning")
[17:40:08.322]                     }
[17:40:08.322]                     else if (inherits(cond, "condition")) {
[17:40:08.322]                       if (!is.null(pattern)) {
[17:40:08.322]                         computeRestarts <- base::computeRestarts
[17:40:08.322]                         grepl <- base::grepl
[17:40:08.322]                         restarts <- computeRestarts(cond)
[17:40:08.322]                         for (restart in restarts) {
[17:40:08.322]                           name <- restart$name
[17:40:08.322]                           if (is.null(name)) 
[17:40:08.322]                             next
[17:40:08.322]                           if (!grepl(pattern, name)) 
[17:40:08.322]                             next
[17:40:08.322]                           invokeRestart(restart)
[17:40:08.322]                           muffled <- TRUE
[17:40:08.322]                           break
[17:40:08.322]                         }
[17:40:08.322]                       }
[17:40:08.322]                     }
[17:40:08.322]                     invisible(muffled)
[17:40:08.322]                   }
[17:40:08.322]                   muffleCondition(cond)
[17:40:08.322]                 })
[17:40:08.322]             }))
[17:40:08.322]             future::FutureResult(value = ...future.value$value, 
[17:40:08.322]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:08.322]                   ...future.rng), globalenv = if (FALSE) 
[17:40:08.322]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:08.322]                     ...future.globalenv.names))
[17:40:08.322]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:08.322]         }, condition = base::local({
[17:40:08.322]             c <- base::c
[17:40:08.322]             inherits <- base::inherits
[17:40:08.322]             invokeRestart <- base::invokeRestart
[17:40:08.322]             length <- base::length
[17:40:08.322]             list <- base::list
[17:40:08.322]             seq.int <- base::seq.int
[17:40:08.322]             signalCondition <- base::signalCondition
[17:40:08.322]             sys.calls <- base::sys.calls
[17:40:08.322]             `[[` <- base::`[[`
[17:40:08.322]             `+` <- base::`+`
[17:40:08.322]             `<<-` <- base::`<<-`
[17:40:08.322]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:08.322]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:08.322]                   3L)]
[17:40:08.322]             }
[17:40:08.322]             function(cond) {
[17:40:08.322]                 is_error <- inherits(cond, "error")
[17:40:08.322]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:08.322]                   NULL)
[17:40:08.322]                 if (is_error) {
[17:40:08.322]                   sessionInformation <- function() {
[17:40:08.322]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:08.322]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:08.322]                       search = base::search(), system = base::Sys.info())
[17:40:08.322]                   }
[17:40:08.322]                   ...future.conditions[[length(...future.conditions) + 
[17:40:08.322]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:08.322]                     cond$call), session = sessionInformation(), 
[17:40:08.322]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:08.322]                   signalCondition(cond)
[17:40:08.322]                 }
[17:40:08.322]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:08.322]                 "immediateCondition"))) {
[17:40:08.322]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:08.322]                   ...future.conditions[[length(...future.conditions) + 
[17:40:08.322]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:08.322]                   if (TRUE && !signal) {
[17:40:08.322]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:08.322]                     {
[17:40:08.322]                       inherits <- base::inherits
[17:40:08.322]                       invokeRestart <- base::invokeRestart
[17:40:08.322]                       is.null <- base::is.null
[17:40:08.322]                       muffled <- FALSE
[17:40:08.322]                       if (inherits(cond, "message")) {
[17:40:08.322]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:08.322]                         if (muffled) 
[17:40:08.322]                           invokeRestart("muffleMessage")
[17:40:08.322]                       }
[17:40:08.322]                       else if (inherits(cond, "warning")) {
[17:40:08.322]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:08.322]                         if (muffled) 
[17:40:08.322]                           invokeRestart("muffleWarning")
[17:40:08.322]                       }
[17:40:08.322]                       else if (inherits(cond, "condition")) {
[17:40:08.322]                         if (!is.null(pattern)) {
[17:40:08.322]                           computeRestarts <- base::computeRestarts
[17:40:08.322]                           grepl <- base::grepl
[17:40:08.322]                           restarts <- computeRestarts(cond)
[17:40:08.322]                           for (restart in restarts) {
[17:40:08.322]                             name <- restart$name
[17:40:08.322]                             if (is.null(name)) 
[17:40:08.322]                               next
[17:40:08.322]                             if (!grepl(pattern, name)) 
[17:40:08.322]                               next
[17:40:08.322]                             invokeRestart(restart)
[17:40:08.322]                             muffled <- TRUE
[17:40:08.322]                             break
[17:40:08.322]                           }
[17:40:08.322]                         }
[17:40:08.322]                       }
[17:40:08.322]                       invisible(muffled)
[17:40:08.322]                     }
[17:40:08.322]                     muffleCondition(cond, pattern = "^muffle")
[17:40:08.322]                   }
[17:40:08.322]                 }
[17:40:08.322]                 else {
[17:40:08.322]                   if (TRUE) {
[17:40:08.322]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:08.322]                     {
[17:40:08.322]                       inherits <- base::inherits
[17:40:08.322]                       invokeRestart <- base::invokeRestart
[17:40:08.322]                       is.null <- base::is.null
[17:40:08.322]                       muffled <- FALSE
[17:40:08.322]                       if (inherits(cond, "message")) {
[17:40:08.322]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:08.322]                         if (muffled) 
[17:40:08.322]                           invokeRestart("muffleMessage")
[17:40:08.322]                       }
[17:40:08.322]                       else if (inherits(cond, "warning")) {
[17:40:08.322]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:08.322]                         if (muffled) 
[17:40:08.322]                           invokeRestart("muffleWarning")
[17:40:08.322]                       }
[17:40:08.322]                       else if (inherits(cond, "condition")) {
[17:40:08.322]                         if (!is.null(pattern)) {
[17:40:08.322]                           computeRestarts <- base::computeRestarts
[17:40:08.322]                           grepl <- base::grepl
[17:40:08.322]                           restarts <- computeRestarts(cond)
[17:40:08.322]                           for (restart in restarts) {
[17:40:08.322]                             name <- restart$name
[17:40:08.322]                             if (is.null(name)) 
[17:40:08.322]                               next
[17:40:08.322]                             if (!grepl(pattern, name)) 
[17:40:08.322]                               next
[17:40:08.322]                             invokeRestart(restart)
[17:40:08.322]                             muffled <- TRUE
[17:40:08.322]                             break
[17:40:08.322]                           }
[17:40:08.322]                         }
[17:40:08.322]                       }
[17:40:08.322]                       invisible(muffled)
[17:40:08.322]                     }
[17:40:08.322]                     muffleCondition(cond, pattern = "^muffle")
[17:40:08.322]                   }
[17:40:08.322]                 }
[17:40:08.322]             }
[17:40:08.322]         }))
[17:40:08.322]     }, error = function(ex) {
[17:40:08.322]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:08.322]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:08.322]                 ...future.rng), started = ...future.startTime, 
[17:40:08.322]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:08.322]             version = "1.8"), class = "FutureResult")
[17:40:08.322]     }, finally = {
[17:40:08.322]         if (!identical(...future.workdir, getwd())) 
[17:40:08.322]             setwd(...future.workdir)
[17:40:08.322]         {
[17:40:08.322]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:08.322]                 ...future.oldOptions$nwarnings <- NULL
[17:40:08.322]             }
[17:40:08.322]             base::options(...future.oldOptions)
[17:40:08.322]             if (.Platform$OS.type == "windows") {
[17:40:08.322]                 old_names <- names(...future.oldEnvVars)
[17:40:08.322]                 envs <- base::Sys.getenv()
[17:40:08.322]                 names <- names(envs)
[17:40:08.322]                 common <- intersect(names, old_names)
[17:40:08.322]                 added <- setdiff(names, old_names)
[17:40:08.322]                 removed <- setdiff(old_names, names)
[17:40:08.322]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:08.322]                   envs[common]]
[17:40:08.322]                 NAMES <- toupper(changed)
[17:40:08.322]                 args <- list()
[17:40:08.322]                 for (kk in seq_along(NAMES)) {
[17:40:08.322]                   name <- changed[[kk]]
[17:40:08.322]                   NAME <- NAMES[[kk]]
[17:40:08.322]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:08.322]                     next
[17:40:08.322]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:08.322]                 }
[17:40:08.322]                 NAMES <- toupper(added)
[17:40:08.322]                 for (kk in seq_along(NAMES)) {
[17:40:08.322]                   name <- added[[kk]]
[17:40:08.322]                   NAME <- NAMES[[kk]]
[17:40:08.322]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:08.322]                     next
[17:40:08.322]                   args[[name]] <- ""
[17:40:08.322]                 }
[17:40:08.322]                 NAMES <- toupper(removed)
[17:40:08.322]                 for (kk in seq_along(NAMES)) {
[17:40:08.322]                   name <- removed[[kk]]
[17:40:08.322]                   NAME <- NAMES[[kk]]
[17:40:08.322]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:08.322]                     next
[17:40:08.322]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:08.322]                 }
[17:40:08.322]                 if (length(args) > 0) 
[17:40:08.322]                   base::do.call(base::Sys.setenv, args = args)
[17:40:08.322]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:08.322]             }
[17:40:08.322]             else {
[17:40:08.322]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:08.322]             }
[17:40:08.322]             {
[17:40:08.322]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:08.322]                   0L) {
[17:40:08.322]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:08.322]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:08.322]                   base::options(opts)
[17:40:08.322]                 }
[17:40:08.322]                 {
[17:40:08.322]                   {
[17:40:08.322]                     base::options(mc.cores = ...future.mc.cores.old)
[17:40:08.322]                     NULL
[17:40:08.322]                   }
[17:40:08.322]                   options(future.plan = NULL)
[17:40:08.322]                   if (is.na(NA_character_)) 
[17:40:08.322]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:08.322]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:08.322]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:40:08.322]                     .init = FALSE)
[17:40:08.322]                 }
[17:40:08.322]             }
[17:40:08.322]         }
[17:40:08.322]     })
[17:40:08.322]     if (TRUE) {
[17:40:08.322]         base::sink(type = "output", split = FALSE)
[17:40:08.322]         if (TRUE) {
[17:40:08.322]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:08.322]         }
[17:40:08.322]         else {
[17:40:08.322]             ...future.result["stdout"] <- base::list(NULL)
[17:40:08.322]         }
[17:40:08.322]         base::close(...future.stdout)
[17:40:08.322]         ...future.stdout <- NULL
[17:40:08.322]     }
[17:40:08.322]     ...future.result$conditions <- ...future.conditions
[17:40:08.322]     ...future.result$finished <- base::Sys.time()
[17:40:08.322]     ...future.result
[17:40:08.322] }
[17:40:08.325] assign_globals() ...
[17:40:08.325] List of 1
[17:40:08.325]  $ ii: int 4
[17:40:08.325]  - attr(*, "where")=List of 1
[17:40:08.325]   ..$ ii:<environment: R_EmptyEnv> 
[17:40:08.325]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:08.325]  - attr(*, "resolved")= logi FALSE
[17:40:08.325]  - attr(*, "total_size")= num 56
[17:40:08.328] - copied ‘ii’ to environment
[17:40:08.329] assign_globals() ... done
[17:40:08.329] requestCore(): workers = 2
[17:40:08.329] Poll #1 (0): usedCores() = 2, workers = 2
[17:40:08.340] result() for MulticoreFuture ...
[17:40:08.341] result() for MulticoreFuture ...
[17:40:08.341] result() for MulticoreFuture ... done
[17:40:08.341] result() for MulticoreFuture ... done
[17:40:08.341] result() for MulticoreFuture ...
[17:40:08.341] result() for MulticoreFuture ... done
[17:40:08.343] MulticoreFuture started
 - Resolving 4 multicore futures
[17:40:08.344] result() for MulticoreFuture ...
[17:40:08.344] plan(): Setting new future strategy stack:
[17:40:08.345] result() for MulticoreFuture ... done
[17:40:08.345] result() for MulticoreFuture ...
[17:40:08.345] result() for MulticoreFuture ... done
[17:40:08.346] result() for MulticoreFuture ...
[17:40:08.346] result() for MulticoreFuture ... done
[17:40:08.345] List of future strategies:
[17:40:08.345] 1. sequential:
[17:40:08.345]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:40:08.345]    - tweaked: FALSE
[17:40:08.345]    - call: NULL
[17:40:08.346] result() for MulticoreFuture ...
[17:40:08.346] result() for MulticoreFuture ... done
[17:40:08.346] plan(): nbrOfWorkers() = 1
[17:40:08.346] result() for MulticoreFuture ...
[17:40:08.348] result() for MulticoreFuture ...
[17:40:08.348] result() for MulticoreFuture ... done
[17:40:08.348] result() for MulticoreFuture ... done
[17:40:08.349] result() for MulticoreFuture ...
[17:40:08.349] result() for MulticoreFuture ... done
[17:40:08.349] plan(): Setting new future strategy stack:
[17:40:08.349] result() for MulticoreFuture ...
[17:40:08.349] List of future strategies:
[17:40:08.349] 1. multicore:
[17:40:08.349]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:40:08.349]    - tweaked: FALSE
[17:40:08.349]    - call: plan(multicore)
[17:40:08.354] plan(): nbrOfWorkers() = 2
[17:40:08.355] result() for MulticoreFuture ...
[17:40:08.355] result() for MulticoreFuture ... done
[17:40:08.355] result() for MulticoreFuture ... done
[17:40:08.355] result() for MulticoreFuture ...
[17:40:08.355] result() for MulticoreFuture ... done
*** multicore(..., globals = TRUE) and errors
[17:40:08.363] getGlobalsAndPackages() ...
[17:40:08.363] Searching for globals...
[17:40:08.364] - globals found: [2] ‘{’, ‘stop’
[17:40:08.365] Searching for globals ... DONE
[17:40:08.365] Resolving globals: FALSE
[17:40:08.365] 
[17:40:08.365] 
[17:40:08.365] getGlobalsAndPackages() ... DONE
[17:40:08.366] Packages needed by the future expression (n = 0): <none>
[17:40:08.366] Packages needed by future strategies (n = 0): <none>
[17:40:08.367] {
[17:40:08.367]     {
[17:40:08.367]         {
[17:40:08.367]             ...future.startTime <- base::Sys.time()
[17:40:08.367]             {
[17:40:08.367]                 {
[17:40:08.367]                   {
[17:40:08.367]                     {
[17:40:08.367]                       base::local({
[17:40:08.367]                         has_future <- base::requireNamespace("future", 
[17:40:08.367]                           quietly = TRUE)
[17:40:08.367]                         if (has_future) {
[17:40:08.367]                           ns <- base::getNamespace("future")
[17:40:08.367]                           version <- ns[[".package"]][["version"]]
[17:40:08.367]                           if (is.null(version)) 
[17:40:08.367]                             version <- utils::packageVersion("future")
[17:40:08.367]                         }
[17:40:08.367]                         else {
[17:40:08.367]                           version <- NULL
[17:40:08.367]                         }
[17:40:08.367]                         if (!has_future || version < "1.8.0") {
[17:40:08.367]                           info <- base::c(r_version = base::gsub("R version ", 
[17:40:08.367]                             "", base::R.version$version.string), 
[17:40:08.367]                             platform = base::sprintf("%s (%s-bit)", 
[17:40:08.367]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:08.367]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:08.367]                               "release", "version")], collapse = " "), 
[17:40:08.367]                             hostname = base::Sys.info()[["nodename"]])
[17:40:08.367]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:40:08.367]                             info)
[17:40:08.367]                           info <- base::paste(info, collapse = "; ")
[17:40:08.367]                           if (!has_future) {
[17:40:08.367]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:08.367]                               info)
[17:40:08.367]                           }
[17:40:08.367]                           else {
[17:40:08.367]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:08.367]                               info, version)
[17:40:08.367]                           }
[17:40:08.367]                           base::stop(msg)
[17:40:08.367]                         }
[17:40:08.367]                       })
[17:40:08.367]                     }
[17:40:08.367]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:40:08.367]                     base::options(mc.cores = 1L)
[17:40:08.367]                   }
[17:40:08.367]                   ...future.strategy.old <- future::plan("list")
[17:40:08.367]                   options(future.plan = NULL)
[17:40:08.367]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:08.367]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:08.367]                 }
[17:40:08.367]                 ...future.workdir <- getwd()
[17:40:08.367]             }
[17:40:08.367]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:08.367]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:08.367]         }
[17:40:08.367]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:08.367]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:40:08.367]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:08.367]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:08.367]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:08.367]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:08.367]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:08.367]             base::names(...future.oldOptions))
[17:40:08.367]     }
[17:40:08.367]     if (FALSE) {
[17:40:08.367]     }
[17:40:08.367]     else {
[17:40:08.367]         if (TRUE) {
[17:40:08.367]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:08.367]                 open = "w")
[17:40:08.367]         }
[17:40:08.367]         else {
[17:40:08.367]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:08.367]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:08.367]         }
[17:40:08.367]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:08.367]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:08.367]             base::sink(type = "output", split = FALSE)
[17:40:08.367]             base::close(...future.stdout)
[17:40:08.367]         }, add = TRUE)
[17:40:08.367]     }
[17:40:08.367]     ...future.frame <- base::sys.nframe()
[17:40:08.367]     ...future.conditions <- base::list()
[17:40:08.367]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:08.367]     if (FALSE) {
[17:40:08.367]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:08.367]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:08.367]     }
[17:40:08.367]     ...future.result <- base::tryCatch({
[17:40:08.367]         base::withCallingHandlers({
[17:40:08.367]             ...future.value <- base::withVisible(base::local({
[17:40:08.367]                 withCallingHandlers({
[17:40:08.367]                   {
[17:40:08.367]                     stop("Whoops!")
[17:40:08.367]                     1
[17:40:08.367]                   }
[17:40:08.367]                 }, immediateCondition = function(cond) {
[17:40:08.367]                   save_rds <- function (object, pathname, ...) 
[17:40:08.367]                   {
[17:40:08.367]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:40:08.367]                     if (file_test("-f", pathname_tmp)) {
[17:40:08.367]                       fi_tmp <- file.info(pathname_tmp)
[17:40:08.367]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:40:08.367]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:08.367]                         fi_tmp[["mtime"]])
[17:40:08.367]                     }
[17:40:08.367]                     tryCatch({
[17:40:08.367]                       saveRDS(object, file = pathname_tmp, ...)
[17:40:08.367]                     }, error = function(ex) {
[17:40:08.367]                       msg <- conditionMessage(ex)
[17:40:08.367]                       fi_tmp <- file.info(pathname_tmp)
[17:40:08.367]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:40:08.367]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:08.367]                         fi_tmp[["mtime"]], msg)
[17:40:08.367]                       ex$message <- msg
[17:40:08.367]                       stop(ex)
[17:40:08.367]                     })
[17:40:08.367]                     stopifnot(file_test("-f", pathname_tmp))
[17:40:08.367]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:40:08.367]                     if (!res || file_test("-f", pathname_tmp)) {
[17:40:08.367]                       fi_tmp <- file.info(pathname_tmp)
[17:40:08.367]                       fi <- file.info(pathname)
[17:40:08.367]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:40:08.367]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:08.367]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:40:08.367]                         fi[["size"]], fi[["mtime"]])
[17:40:08.367]                       stop(msg)
[17:40:08.367]                     }
[17:40:08.367]                     invisible(pathname)
[17:40:08.367]                   }
[17:40:08.367]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:40:08.367]                     rootPath = tempdir()) 
[17:40:08.367]                   {
[17:40:08.367]                     obj <- list(time = Sys.time(), condition = cond)
[17:40:08.367]                     file <- tempfile(pattern = class(cond)[1], 
[17:40:08.367]                       tmpdir = path, fileext = ".rds")
[17:40:08.367]                     save_rds(obj, file)
[17:40:08.367]                   }
[17:40:08.367]                   saveImmediateCondition(cond, path = "/tmp/RtmpKWJjLX/.future/immediateConditions")
[17:40:08.367]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:08.367]                   {
[17:40:08.367]                     inherits <- base::inherits
[17:40:08.367]                     invokeRestart <- base::invokeRestart
[17:40:08.367]                     is.null <- base::is.null
[17:40:08.367]                     muffled <- FALSE
[17:40:08.367]                     if (inherits(cond, "message")) {
[17:40:08.367]                       muffled <- grepl(pattern, "muffleMessage")
[17:40:08.367]                       if (muffled) 
[17:40:08.367]                         invokeRestart("muffleMessage")
[17:40:08.367]                     }
[17:40:08.367]                     else if (inherits(cond, "warning")) {
[17:40:08.367]                       muffled <- grepl(pattern, "muffleWarning")
[17:40:08.367]                       if (muffled) 
[17:40:08.367]                         invokeRestart("muffleWarning")
[17:40:08.367]                     }
[17:40:08.367]                     else if (inherits(cond, "condition")) {
[17:40:08.367]                       if (!is.null(pattern)) {
[17:40:08.367]                         computeRestarts <- base::computeRestarts
[17:40:08.367]                         grepl <- base::grepl
[17:40:08.367]                         restarts <- computeRestarts(cond)
[17:40:08.367]                         for (restart in restarts) {
[17:40:08.367]                           name <- restart$name
[17:40:08.367]                           if (is.null(name)) 
[17:40:08.367]                             next
[17:40:08.367]                           if (!grepl(pattern, name)) 
[17:40:08.367]                             next
[17:40:08.367]                           invokeRestart(restart)
[17:40:08.367]                           muffled <- TRUE
[17:40:08.367]                           break
[17:40:08.367]                         }
[17:40:08.367]                       }
[17:40:08.367]                     }
[17:40:08.367]                     invisible(muffled)
[17:40:08.367]                   }
[17:40:08.367]                   muffleCondition(cond)
[17:40:08.367]                 })
[17:40:08.367]             }))
[17:40:08.367]             future::FutureResult(value = ...future.value$value, 
[17:40:08.367]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:08.367]                   ...future.rng), globalenv = if (FALSE) 
[17:40:08.367]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:08.367]                     ...future.globalenv.names))
[17:40:08.367]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:08.367]         }, condition = base::local({
[17:40:08.367]             c <- base::c
[17:40:08.367]             inherits <- base::inherits
[17:40:08.367]             invokeRestart <- base::invokeRestart
[17:40:08.367]             length <- base::length
[17:40:08.367]             list <- base::list
[17:40:08.367]             seq.int <- base::seq.int
[17:40:08.367]             signalCondition <- base::signalCondition
[17:40:08.367]             sys.calls <- base::sys.calls
[17:40:08.367]             `[[` <- base::`[[`
[17:40:08.367]             `+` <- base::`+`
[17:40:08.367]             `<<-` <- base::`<<-`
[17:40:08.367]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:08.367]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:08.367]                   3L)]
[17:40:08.367]             }
[17:40:08.367]             function(cond) {
[17:40:08.367]                 is_error <- inherits(cond, "error")
[17:40:08.367]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:08.367]                   NULL)
[17:40:08.367]                 if (is_error) {
[17:40:08.367]                   sessionInformation <- function() {
[17:40:08.367]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:08.367]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:08.367]                       search = base::search(), system = base::Sys.info())
[17:40:08.367]                   }
[17:40:08.367]                   ...future.conditions[[length(...future.conditions) + 
[17:40:08.367]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:08.367]                     cond$call), session = sessionInformation(), 
[17:40:08.367]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:08.367]                   signalCondition(cond)
[17:40:08.367]                 }
[17:40:08.367]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:08.367]                 "immediateCondition"))) {
[17:40:08.367]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:08.367]                   ...future.conditions[[length(...future.conditions) + 
[17:40:08.367]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:08.367]                   if (TRUE && !signal) {
[17:40:08.367]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:08.367]                     {
[17:40:08.367]                       inherits <- base::inherits
[17:40:08.367]                       invokeRestart <- base::invokeRestart
[17:40:08.367]                       is.null <- base::is.null
[17:40:08.367]                       muffled <- FALSE
[17:40:08.367]                       if (inherits(cond, "message")) {
[17:40:08.367]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:08.367]                         if (muffled) 
[17:40:08.367]                           invokeRestart("muffleMessage")
[17:40:08.367]                       }
[17:40:08.367]                       else if (inherits(cond, "warning")) {
[17:40:08.367]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:08.367]                         if (muffled) 
[17:40:08.367]                           invokeRestart("muffleWarning")
[17:40:08.367]                       }
[17:40:08.367]                       else if (inherits(cond, "condition")) {
[17:40:08.367]                         if (!is.null(pattern)) {
[17:40:08.367]                           computeRestarts <- base::computeRestarts
[17:40:08.367]                           grepl <- base::grepl
[17:40:08.367]                           restarts <- computeRestarts(cond)
[17:40:08.367]                           for (restart in restarts) {
[17:40:08.367]                             name <- restart$name
[17:40:08.367]                             if (is.null(name)) 
[17:40:08.367]                               next
[17:40:08.367]                             if (!grepl(pattern, name)) 
[17:40:08.367]                               next
[17:40:08.367]                             invokeRestart(restart)
[17:40:08.367]                             muffled <- TRUE
[17:40:08.367]                             break
[17:40:08.367]                           }
[17:40:08.367]                         }
[17:40:08.367]                       }
[17:40:08.367]                       invisible(muffled)
[17:40:08.367]                     }
[17:40:08.367]                     muffleCondition(cond, pattern = "^muffle")
[17:40:08.367]                   }
[17:40:08.367]                 }
[17:40:08.367]                 else {
[17:40:08.367]                   if (TRUE) {
[17:40:08.367]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:08.367]                     {
[17:40:08.367]                       inherits <- base::inherits
[17:40:08.367]                       invokeRestart <- base::invokeRestart
[17:40:08.367]                       is.null <- base::is.null
[17:40:08.367]                       muffled <- FALSE
[17:40:08.367]                       if (inherits(cond, "message")) {
[17:40:08.367]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:08.367]                         if (muffled) 
[17:40:08.367]                           invokeRestart("muffleMessage")
[17:40:08.367]                       }
[17:40:08.367]                       else if (inherits(cond, "warning")) {
[17:40:08.367]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:08.367]                         if (muffled) 
[17:40:08.367]                           invokeRestart("muffleWarning")
[17:40:08.367]                       }
[17:40:08.367]                       else if (inherits(cond, "condition")) {
[17:40:08.367]                         if (!is.null(pattern)) {
[17:40:08.367]                           computeRestarts <- base::computeRestarts
[17:40:08.367]                           grepl <- base::grepl
[17:40:08.367]                           restarts <- computeRestarts(cond)
[17:40:08.367]                           for (restart in restarts) {
[17:40:08.367]                             name <- restart$name
[17:40:08.367]                             if (is.null(name)) 
[17:40:08.367]                               next
[17:40:08.367]                             if (!grepl(pattern, name)) 
[17:40:08.367]                               next
[17:40:08.367]                             invokeRestart(restart)
[17:40:08.367]                             muffled <- TRUE
[17:40:08.367]                             break
[17:40:08.367]                           }
[17:40:08.367]                         }
[17:40:08.367]                       }
[17:40:08.367]                       invisible(muffled)
[17:40:08.367]                     }
[17:40:08.367]                     muffleCondition(cond, pattern = "^muffle")
[17:40:08.367]                   }
[17:40:08.367]                 }
[17:40:08.367]             }
[17:40:08.367]         }))
[17:40:08.367]     }, error = function(ex) {
[17:40:08.367]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:08.367]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:08.367]                 ...future.rng), started = ...future.startTime, 
[17:40:08.367]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:08.367]             version = "1.8"), class = "FutureResult")
[17:40:08.367]     }, finally = {
[17:40:08.367]         if (!identical(...future.workdir, getwd())) 
[17:40:08.367]             setwd(...future.workdir)
[17:40:08.367]         {
[17:40:08.367]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:08.367]                 ...future.oldOptions$nwarnings <- NULL
[17:40:08.367]             }
[17:40:08.367]             base::options(...future.oldOptions)
[17:40:08.367]             if (.Platform$OS.type == "windows") {
[17:40:08.367]                 old_names <- names(...future.oldEnvVars)
[17:40:08.367]                 envs <- base::Sys.getenv()
[17:40:08.367]                 names <- names(envs)
[17:40:08.367]                 common <- intersect(names, old_names)
[17:40:08.367]                 added <- setdiff(names, old_names)
[17:40:08.367]                 removed <- setdiff(old_names, names)
[17:40:08.367]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:08.367]                   envs[common]]
[17:40:08.367]                 NAMES <- toupper(changed)
[17:40:08.367]                 args <- list()
[17:40:08.367]                 for (kk in seq_along(NAMES)) {
[17:40:08.367]                   name <- changed[[kk]]
[17:40:08.367]                   NAME <- NAMES[[kk]]
[17:40:08.367]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:08.367]                     next
[17:40:08.367]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:08.367]                 }
[17:40:08.367]                 NAMES <- toupper(added)
[17:40:08.367]                 for (kk in seq_along(NAMES)) {
[17:40:08.367]                   name <- added[[kk]]
[17:40:08.367]                   NAME <- NAMES[[kk]]
[17:40:08.367]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:08.367]                     next
[17:40:08.367]                   args[[name]] <- ""
[17:40:08.367]                 }
[17:40:08.367]                 NAMES <- toupper(removed)
[17:40:08.367]                 for (kk in seq_along(NAMES)) {
[17:40:08.367]                   name <- removed[[kk]]
[17:40:08.367]                   NAME <- NAMES[[kk]]
[17:40:08.367]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:08.367]                     next
[17:40:08.367]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:08.367]                 }
[17:40:08.367]                 if (length(args) > 0) 
[17:40:08.367]                   base::do.call(base::Sys.setenv, args = args)
[17:40:08.367]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:08.367]             }
[17:40:08.367]             else {
[17:40:08.367]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:08.367]             }
[17:40:08.367]             {
[17:40:08.367]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:08.367]                   0L) {
[17:40:08.367]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:08.367]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:08.367]                   base::options(opts)
[17:40:08.367]                 }
[17:40:08.367]                 {
[17:40:08.367]                   {
[17:40:08.367]                     base::options(mc.cores = ...future.mc.cores.old)
[17:40:08.367]                     NULL
[17:40:08.367]                   }
[17:40:08.367]                   options(future.plan = NULL)
[17:40:08.367]                   if (is.na(NA_character_)) 
[17:40:08.367]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:08.367]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:08.367]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:40:08.367]                     .init = FALSE)
[17:40:08.367]                 }
[17:40:08.367]             }
[17:40:08.367]         }
[17:40:08.367]     })
[17:40:08.367]     if (TRUE) {
[17:40:08.367]         base::sink(type = "output", split = FALSE)
[17:40:08.367]         if (TRUE) {
[17:40:08.367]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:08.367]         }
[17:40:08.367]         else {
[17:40:08.367]             ...future.result["stdout"] <- base::list(NULL)
[17:40:08.367]         }
[17:40:08.367]         base::close(...future.stdout)
[17:40:08.367]         ...future.stdout <- NULL
[17:40:08.367]     }
[17:40:08.367]     ...future.result$conditions <- ...future.conditions
[17:40:08.367]     ...future.result$finished <- base::Sys.time()
[17:40:08.367]     ...future.result
[17:40:08.367] }
[17:40:08.369] requestCore(): workers = 2
[17:40:08.371] MulticoreFuture started
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    stop("Whoops!")
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:40:08.372] plan(): Setting new future strategy stack:
[17:40:08.372] List of future strategies:
[17:40:08.372] 1. sequential:
[17:40:08.372]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:40:08.372]    - tweaked: FALSE
[17:40:08.372]    - call: NULL
[17:40:08.373] plan(): nbrOfWorkers() = 1
[17:40:08.375] plan(): Setting new future strategy stack:
[17:40:08.376] List of future strategies:
[17:40:08.376] 1. multicore:
[17:40:08.376]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:40:08.376]    - tweaked: FALSE
[17:40:08.376]    - call: plan(multicore)
[17:40:08.381] plan(): nbrOfWorkers() = 2
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 33d8ef81-66c6-1c88-ad16-a15781be79ec
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:40:08.383] result() for MulticoreFuture ...
[17:40:08.386] result() for MulticoreFuture ...
[17:40:08.386] result() for MulticoreFuture ... done
[17:40:08.386] signalConditions() ...
[17:40:08.386]  - include = ‘immediateCondition’
[17:40:08.386]  - exclude = 
[17:40:08.386]  - resignal = FALSE
[17:40:08.386]  - Number of conditions: 1
[17:40:08.387] signalConditions() ... done
[17:40:08.387] result() for MulticoreFuture ... done
[17:40:08.387] result() for MulticoreFuture ...
[17:40:08.387] result() for MulticoreFuture ... done
[17:40:08.387] signalConditions() ...
[17:40:08.387]  - include = ‘immediateCondition’
[17:40:08.387]  - exclude = 
[17:40:08.387]  - resignal = FALSE
[17:40:08.387]  - Number of conditions: 1
[17:40:08.388] signalConditions() ... done
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    save_rds <- function (object, pathname, ...)     {        pathname_tmp <- sprintf("%s.tmp", pathname)        if (file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]])        }        tryCatch({            saveRDS(object, file = pathname_tmp, ...)        }, error = function(ex) {            msg <- conditionMessage(ex)            fi_tmp <- file.info(pathname_tmp)            msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 msg)            ex$message <- msg            stop(ex)        })        stopifnot(file_test("-f", pathname_tmp))        res <- file.rename(from = pathname_tmp, to = pathname)        if (!res || file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            fi <- file.info(pathname)            msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 sQuote(pathname), fi[["size"]], fi[["mtime"]])            stop(msg)        }        invisible(pathname)    }    saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath),         rootPath = tempdir())     {        obj <- list(time = Sys.time(), condition = cond)        file <- tempfile(pattern = class(cond)[1], tmpdir = path,             fileext = ".rds")        save_rds(obj, file)    }    saveImmediateCondition(cond, path = "/tmp/RtmpKWJjLX/.future/immediateConditions")    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[17:40:08.388] result() for MulticoreFuture ...
[17:40:08.388] result() for MulticoreFuture ... done
[17:40:08.389] result() for MulticoreFuture ...
[17:40:08.389] result() for MulticoreFuture ... done
[17:40:08.389] signalConditions() ...
[17:40:08.389]  - include = ‘immediateCondition’
[17:40:08.389]  - exclude = 
[17:40:08.389]  - resignal = FALSE
[17:40:08.389]  - Number of conditions: 1
[17:40:08.389] signalConditions() ... done
[17:40:08.390] Future state: ‘finished’
[17:40:08.390] result() for MulticoreFuture ...
[17:40:08.390] result() for MulticoreFuture ... done
[17:40:08.390] signalConditions() ...
[17:40:08.390]  - include = ‘condition’
[17:40:08.390]  - exclude = ‘immediateCondition’
[17:40:08.390]  - resignal = TRUE
[17:40:08.390]  - Number of conditions: 1
[17:40:08.390]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:40:08.391] signalConditions() ... done
[1] "Error in withCallingHandlers({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    save_rds <- function (object, pathname, ...)     {        pathname_tmp <- sprintf("%s.tmp", pathname)        if (file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]])        }        tryCatch({            saveRDS(object, file = pathname_tmp, ...)        }, error = function(ex) {            msg <- conditionMessage(ex)            fi_tmp <- file.info(pathname_tmp)            msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 msg)            ex$message <- msg            stop(ex)        })        stopifnot(file_test("-f", pathname_tmp))        res <- file.rename(from = pathname_tmp, to = pathname)        if (!res || file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            fi <- file.info(pathname)            msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 sQuote(pathname), fi[["size"]], fi[["mtime"]])            stop(msg)        }        invisible(pathname)    }    saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath),         rootPath = tempdir())     {        obj <- list(time = Sys.time(), condition = cond)        file <- tempfile(pattern = class(cond)[1], tmpdir = path,             fileext = ".rds")        save_rds(obj, file)    }    saveImmediateCondition(cond, path = "/tmp/RtmpKWJjLX/.future/immediateConditions")    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[17:40:08.391] result() for MulticoreFuture ...
[17:40:08.391] result() for MulticoreFuture ... done
[17:40:08.392] result() for MulticoreFuture ...
[17:40:08.392] result() for MulticoreFuture ... done
[17:40:08.392] signalConditions() ...
[17:40:08.392]  - include = ‘immediateCondition’
[17:40:08.392]  - exclude = 
[17:40:08.392]  - resignal = FALSE
[17:40:08.392]  - Number of conditions: 1
[17:40:08.392] signalConditions() ... done
[17:40:08.393] Future state: ‘finished’
[17:40:08.393] result() for MulticoreFuture ...
[17:40:08.393] result() for MulticoreFuture ... done
[17:40:08.393] signalConditions() ...
[17:40:08.393]  - include = ‘condition’
[17:40:08.393]  - exclude = ‘immediateCondition’
[17:40:08.393]  - resignal = TRUE
[17:40:08.393]  - Number of conditions: 1
[17:40:08.393]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:40:08.394] signalConditions() ... done
[1] "Error in withCallingHandlers({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    save_rds <- function (object, pathname, ...)     {        pathname_tmp <- sprintf("%s.tmp", pathname)        if (file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]])        }        tryCatch({            saveRDS(object, file = pathname_tmp, ...)        }, error = function(ex) {            msg <- conditionMessage(ex)            fi_tmp <- file.info(pathname_tmp)            msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 msg)            ex$message <- msg            stop(ex)        })        stopifnot(file_test("-f", pathname_tmp))        res <- file.rename(from = pathname_tmp, to = pathname)        if (!res || file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            fi <- file.info(pathname)            msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 sQuote(pathname), fi[["size"]], fi[["mtime"]])            stop(msg)        }        invisible(pathname)    }    saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath),         rootPath = tempdir())     {        obj <- list(time = Sys.time(), condition = cond)        file <- tempfile(pattern = class(cond)[1], tmpdir = path,             fileext = ".rds")        save_rds(obj, file)    }    saveImmediateCondition(cond, path = "/tmp/RtmpKWJjLX/.future/immediateConditions")    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[17:40:08.398] getGlobalsAndPackages() ...
[17:40:08.398] 
[17:40:08.398] - globals: [0] <none>
[17:40:08.398] getGlobalsAndPackages() ... DONE
[17:40:08.399] Packages needed by the future expression (n = 0): <none>
[17:40:08.399] Packages needed by future strategies (n = 0): <none>
[17:40:08.400] {
[17:40:08.400]     {
[17:40:08.400]         {
[17:40:08.400]             ...future.startTime <- base::Sys.time()
[17:40:08.400]             {
[17:40:08.400]                 {
[17:40:08.400]                   {
[17:40:08.400]                     {
[17:40:08.400]                       base::local({
[17:40:08.400]                         has_future <- base::requireNamespace("future", 
[17:40:08.400]                           quietly = TRUE)
[17:40:08.400]                         if (has_future) {
[17:40:08.400]                           ns <- base::getNamespace("future")
[17:40:08.400]                           version <- ns[[".package"]][["version"]]
[17:40:08.400]                           if (is.null(version)) 
[17:40:08.400]                             version <- utils::packageVersion("future")
[17:40:08.400]                         }
[17:40:08.400]                         else {
[17:40:08.400]                           version <- NULL
[17:40:08.400]                         }
[17:40:08.400]                         if (!has_future || version < "1.8.0") {
[17:40:08.400]                           info <- base::c(r_version = base::gsub("R version ", 
[17:40:08.400]                             "", base::R.version$version.string), 
[17:40:08.400]                             platform = base::sprintf("%s (%s-bit)", 
[17:40:08.400]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:08.400]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:08.400]                               "release", "version")], collapse = " "), 
[17:40:08.400]                             hostname = base::Sys.info()[["nodename"]])
[17:40:08.400]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:40:08.400]                             info)
[17:40:08.400]                           info <- base::paste(info, collapse = "; ")
[17:40:08.400]                           if (!has_future) {
[17:40:08.400]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:08.400]                               info)
[17:40:08.400]                           }
[17:40:08.400]                           else {
[17:40:08.400]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:08.400]                               info, version)
[17:40:08.400]                           }
[17:40:08.400]                           base::stop(msg)
[17:40:08.400]                         }
[17:40:08.400]                       })
[17:40:08.400]                     }
[17:40:08.400]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:40:08.400]                     base::options(mc.cores = 1L)
[17:40:08.400]                   }
[17:40:08.400]                   ...future.strategy.old <- future::plan("list")
[17:40:08.400]                   options(future.plan = NULL)
[17:40:08.400]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:08.400]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:08.400]                 }
[17:40:08.400]                 ...future.workdir <- getwd()
[17:40:08.400]             }
[17:40:08.400]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:08.400]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:08.400]         }
[17:40:08.400]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:08.400]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:40:08.400]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:08.400]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:08.400]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:08.400]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:08.400]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:08.400]             base::names(...future.oldOptions))
[17:40:08.400]     }
[17:40:08.400]     if (FALSE) {
[17:40:08.400]     }
[17:40:08.400]     else {
[17:40:08.400]         if (TRUE) {
[17:40:08.400]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:08.400]                 open = "w")
[17:40:08.400]         }
[17:40:08.400]         else {
[17:40:08.400]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:08.400]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:08.400]         }
[17:40:08.400]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:08.400]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:08.400]             base::sink(type = "output", split = FALSE)
[17:40:08.400]             base::close(...future.stdout)
[17:40:08.400]         }, add = TRUE)
[17:40:08.400]     }
[17:40:08.400]     ...future.frame <- base::sys.nframe()
[17:40:08.400]     ...future.conditions <- base::list()
[17:40:08.400]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:08.400]     if (FALSE) {
[17:40:08.400]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:08.400]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:08.400]     }
[17:40:08.400]     ...future.result <- base::tryCatch({
[17:40:08.400]         base::withCallingHandlers({
[17:40:08.400]             ...future.value <- base::withVisible(base::local({
[17:40:08.400]                 withCallingHandlers({
[17:40:08.400]                   {
[17:40:08.400]                     stop(structure(list(message = "boom"), class = c("MyError", 
[17:40:08.400]                       "error", "condition")))
[17:40:08.400]                   }
[17:40:08.400]                 }, immediateCondition = function(cond) {
[17:40:08.400]                   save_rds <- function (object, pathname, ...) 
[17:40:08.400]                   {
[17:40:08.400]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:40:08.400]                     if (file_test("-f", pathname_tmp)) {
[17:40:08.400]                       fi_tmp <- file.info(pathname_tmp)
[17:40:08.400]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:40:08.400]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:08.400]                         fi_tmp[["mtime"]])
[17:40:08.400]                     }
[17:40:08.400]                     tryCatch({
[17:40:08.400]                       saveRDS(object, file = pathname_tmp, ...)
[17:40:08.400]                     }, error = function(ex) {
[17:40:08.400]                       msg <- conditionMessage(ex)
[17:40:08.400]                       fi_tmp <- file.info(pathname_tmp)
[17:40:08.400]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:40:08.400]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:08.400]                         fi_tmp[["mtime"]], msg)
[17:40:08.400]                       ex$message <- msg
[17:40:08.400]                       stop(ex)
[17:40:08.400]                     })
[17:40:08.400]                     stopifnot(file_test("-f", pathname_tmp))
[17:40:08.400]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:40:08.400]                     if (!res || file_test("-f", pathname_tmp)) {
[17:40:08.400]                       fi_tmp <- file.info(pathname_tmp)
[17:40:08.400]                       fi <- file.info(pathname)
[17:40:08.400]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:40:08.400]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:40:08.400]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:40:08.400]                         fi[["size"]], fi[["mtime"]])
[17:40:08.400]                       stop(msg)
[17:40:08.400]                     }
[17:40:08.400]                     invisible(pathname)
[17:40:08.400]                   }
[17:40:08.400]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:40:08.400]                     rootPath = tempdir()) 
[17:40:08.400]                   {
[17:40:08.400]                     obj <- list(time = Sys.time(), condition = cond)
[17:40:08.400]                     file <- tempfile(pattern = class(cond)[1], 
[17:40:08.400]                       tmpdir = path, fileext = ".rds")
[17:40:08.400]                     save_rds(obj, file)
[17:40:08.400]                   }
[17:40:08.400]                   saveImmediateCondition(cond, path = "/tmp/RtmpKWJjLX/.future/immediateConditions")
[17:40:08.400]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:08.400]                   {
[17:40:08.400]                     inherits <- base::inherits
[17:40:08.400]                     invokeRestart <- base::invokeRestart
[17:40:08.400]                     is.null <- base::is.null
[17:40:08.400]                     muffled <- FALSE
[17:40:08.400]                     if (inherits(cond, "message")) {
[17:40:08.400]                       muffled <- grepl(pattern, "muffleMessage")
[17:40:08.400]                       if (muffled) 
[17:40:08.400]                         invokeRestart("muffleMessage")
[17:40:08.400]                     }
[17:40:08.400]                     else if (inherits(cond, "warning")) {
[17:40:08.400]                       muffled <- grepl(pattern, "muffleWarning")
[17:40:08.400]                       if (muffled) 
[17:40:08.400]                         invokeRestart("muffleWarning")
[17:40:08.400]                     }
[17:40:08.400]                     else if (inherits(cond, "condition")) {
[17:40:08.400]                       if (!is.null(pattern)) {
[17:40:08.400]                         computeRestarts <- base::computeRestarts
[17:40:08.400]                         grepl <- base::grepl
[17:40:08.400]                         restarts <- computeRestarts(cond)
[17:40:08.400]                         for (restart in restarts) {
[17:40:08.400]                           name <- restart$name
[17:40:08.400]                           if (is.null(name)) 
[17:40:08.400]                             next
[17:40:08.400]                           if (!grepl(pattern, name)) 
[17:40:08.400]                             next
[17:40:08.400]                           invokeRestart(restart)
[17:40:08.400]                           muffled <- TRUE
[17:40:08.400]                           break
[17:40:08.400]                         }
[17:40:08.400]                       }
[17:40:08.400]                     }
[17:40:08.400]                     invisible(muffled)
[17:40:08.400]                   }
[17:40:08.400]                   muffleCondition(cond)
[17:40:08.400]                 })
[17:40:08.400]             }))
[17:40:08.400]             future::FutureResult(value = ...future.value$value, 
[17:40:08.400]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:08.400]                   ...future.rng), globalenv = if (FALSE) 
[17:40:08.400]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:08.400]                     ...future.globalenv.names))
[17:40:08.400]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:08.400]         }, condition = base::local({
[17:40:08.400]             c <- base::c
[17:40:08.400]             inherits <- base::inherits
[17:40:08.400]             invokeRestart <- base::invokeRestart
[17:40:08.400]             length <- base::length
[17:40:08.400]             list <- base::list
[17:40:08.400]             seq.int <- base::seq.int
[17:40:08.400]             signalCondition <- base::signalCondition
[17:40:08.400]             sys.calls <- base::sys.calls
[17:40:08.400]             `[[` <- base::`[[`
[17:40:08.400]             `+` <- base::`+`
[17:40:08.400]             `<<-` <- base::`<<-`
[17:40:08.400]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:08.400]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:08.400]                   3L)]
[17:40:08.400]             }
[17:40:08.400]             function(cond) {
[17:40:08.400]                 is_error <- inherits(cond, "error")
[17:40:08.400]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:08.400]                   NULL)
[17:40:08.400]                 if (is_error) {
[17:40:08.400]                   sessionInformation <- function() {
[17:40:08.400]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:08.400]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:08.400]                       search = base::search(), system = base::Sys.info())
[17:40:08.400]                   }
[17:40:08.400]                   ...future.conditions[[length(...future.conditions) + 
[17:40:08.400]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:08.400]                     cond$call), session = sessionInformation(), 
[17:40:08.400]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:08.400]                   signalCondition(cond)
[17:40:08.400]                 }
[17:40:08.400]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:08.400]                 "immediateCondition"))) {
[17:40:08.400]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:08.400]                   ...future.conditions[[length(...future.conditions) + 
[17:40:08.400]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:08.400]                   if (TRUE && !signal) {
[17:40:08.400]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:08.400]                     {
[17:40:08.400]                       inherits <- base::inherits
[17:40:08.400]                       invokeRestart <- base::invokeRestart
[17:40:08.400]                       is.null <- base::is.null
[17:40:08.400]                       muffled <- FALSE
[17:40:08.400]                       if (inherits(cond, "message")) {
[17:40:08.400]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:08.400]                         if (muffled) 
[17:40:08.400]                           invokeRestart("muffleMessage")
[17:40:08.400]                       }
[17:40:08.400]                       else if (inherits(cond, "warning")) {
[17:40:08.400]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:08.400]                         if (muffled) 
[17:40:08.400]                           invokeRestart("muffleWarning")
[17:40:08.400]                       }
[17:40:08.400]                       else if (inherits(cond, "condition")) {
[17:40:08.400]                         if (!is.null(pattern)) {
[17:40:08.400]                           computeRestarts <- base::computeRestarts
[17:40:08.400]                           grepl <- base::grepl
[17:40:08.400]                           restarts <- computeRestarts(cond)
[17:40:08.400]                           for (restart in restarts) {
[17:40:08.400]                             name <- restart$name
[17:40:08.400]                             if (is.null(name)) 
[17:40:08.400]                               next
[17:40:08.400]                             if (!grepl(pattern, name)) 
[17:40:08.400]                               next
[17:40:08.400]                             invokeRestart(restart)
[17:40:08.400]                             muffled <- TRUE
[17:40:08.400]                             break
[17:40:08.400]                           }
[17:40:08.400]                         }
[17:40:08.400]                       }
[17:40:08.400]                       invisible(muffled)
[17:40:08.400]                     }
[17:40:08.400]                     muffleCondition(cond, pattern = "^muffle")
[17:40:08.400]                   }
[17:40:08.400]                 }
[17:40:08.400]                 else {
[17:40:08.400]                   if (TRUE) {
[17:40:08.400]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:08.400]                     {
[17:40:08.400]                       inherits <- base::inherits
[17:40:08.400]                       invokeRestart <- base::invokeRestart
[17:40:08.400]                       is.null <- base::is.null
[17:40:08.400]                       muffled <- FALSE
[17:40:08.400]                       if (inherits(cond, "message")) {
[17:40:08.400]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:08.400]                         if (muffled) 
[17:40:08.400]                           invokeRestart("muffleMessage")
[17:40:08.400]                       }
[17:40:08.400]                       else if (inherits(cond, "warning")) {
[17:40:08.400]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:08.400]                         if (muffled) 
[17:40:08.400]                           invokeRestart("muffleWarning")
[17:40:08.400]                       }
[17:40:08.400]                       else if (inherits(cond, "condition")) {
[17:40:08.400]                         if (!is.null(pattern)) {
[17:40:08.400]                           computeRestarts <- base::computeRestarts
[17:40:08.400]                           grepl <- base::grepl
[17:40:08.400]                           restarts <- computeRestarts(cond)
[17:40:08.400]                           for (restart in restarts) {
[17:40:08.400]                             name <- restart$name
[17:40:08.400]                             if (is.null(name)) 
[17:40:08.400]                               next
[17:40:08.400]                             if (!grepl(pattern, name)) 
[17:40:08.400]                               next
[17:40:08.400]                             invokeRestart(restart)
[17:40:08.400]                             muffled <- TRUE
[17:40:08.400]                             break
[17:40:08.400]                           }
[17:40:08.400]                         }
[17:40:08.400]                       }
[17:40:08.400]                       invisible(muffled)
[17:40:08.400]                     }
[17:40:08.400]                     muffleCondition(cond, pattern = "^muffle")
[17:40:08.400]                   }
[17:40:08.400]                 }
[17:40:08.400]             }
[17:40:08.400]         }))
[17:40:08.400]     }, error = function(ex) {
[17:40:08.400]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:08.400]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:08.400]                 ...future.rng), started = ...future.startTime, 
[17:40:08.400]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:08.400]             version = "1.8"), class = "FutureResult")
[17:40:08.400]     }, finally = {
[17:40:08.400]         if (!identical(...future.workdir, getwd())) 
[17:40:08.400]             setwd(...future.workdir)
[17:40:08.400]         {
[17:40:08.400]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:08.400]                 ...future.oldOptions$nwarnings <- NULL
[17:40:08.400]             }
[17:40:08.400]             base::options(...future.oldOptions)
[17:40:08.400]             if (.Platform$OS.type == "windows") {
[17:40:08.400]                 old_names <- names(...future.oldEnvVars)
[17:40:08.400]                 envs <- base::Sys.getenv()
[17:40:08.400]                 names <- names(envs)
[17:40:08.400]                 common <- intersect(names, old_names)
[17:40:08.400]                 added <- setdiff(names, old_names)
[17:40:08.400]                 removed <- setdiff(old_names, names)
[17:40:08.400]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:08.400]                   envs[common]]
[17:40:08.400]                 NAMES <- toupper(changed)
[17:40:08.400]                 args <- list()
[17:40:08.400]                 for (kk in seq_along(NAMES)) {
[17:40:08.400]                   name <- changed[[kk]]
[17:40:08.400]                   NAME <- NAMES[[kk]]
[17:40:08.400]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:08.400]                     next
[17:40:08.400]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:08.400]                 }
[17:40:08.400]                 NAMES <- toupper(added)
[17:40:08.400]                 for (kk in seq_along(NAMES)) {
[17:40:08.400]                   name <- added[[kk]]
[17:40:08.400]                   NAME <- NAMES[[kk]]
[17:40:08.400]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:08.400]                     next
[17:40:08.400]                   args[[name]] <- ""
[17:40:08.400]                 }
[17:40:08.400]                 NAMES <- toupper(removed)
[17:40:08.400]                 for (kk in seq_along(NAMES)) {
[17:40:08.400]                   name <- removed[[kk]]
[17:40:08.400]                   NAME <- NAMES[[kk]]
[17:40:08.400]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:08.400]                     next
[17:40:08.400]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:08.400]                 }
[17:40:08.400]                 if (length(args) > 0) 
[17:40:08.400]                   base::do.call(base::Sys.setenv, args = args)
[17:40:08.400]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:08.400]             }
[17:40:08.400]             else {
[17:40:08.400]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:08.400]             }
[17:40:08.400]             {
[17:40:08.400]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:08.400]                   0L) {
[17:40:08.400]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:08.400]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:08.400]                   base::options(opts)
[17:40:08.400]                 }
[17:40:08.400]                 {
[17:40:08.400]                   {
[17:40:08.400]                     base::options(mc.cores = ...future.mc.cores.old)
[17:40:08.400]                     NULL
[17:40:08.400]                   }
[17:40:08.400]                   options(future.plan = NULL)
[17:40:08.400]                   if (is.na(NA_character_)) 
[17:40:08.400]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:08.400]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:08.400]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:40:08.400]                     .init = FALSE)
[17:40:08.400]                 }
[17:40:08.400]             }
[17:40:08.400]         }
[17:40:08.400]     })
[17:40:08.400]     if (TRUE) {
[17:40:08.400]         base::sink(type = "output", split = FALSE)
[17:40:08.400]         if (TRUE) {
[17:40:08.400]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:08.400]         }
[17:40:08.400]         else {
[17:40:08.400]             ...future.result["stdout"] <- base::list(NULL)
[17:40:08.400]         }
[17:40:08.400]         base::close(...future.stdout)
[17:40:08.400]         ...future.stdout <- NULL
[17:40:08.400]     }
[17:40:08.400]     ...future.result$conditions <- ...future.conditions
[17:40:08.400]     ...future.result$finished <- base::Sys.time()
[17:40:08.400]     ...future.result
[17:40:08.400] }
[17:40:08.402] requestCore(): workers = 2
[17:40:08.404] MulticoreFuture started
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    stop(structure(list(message = "boom"), class = c("MyError", 
        "error", "condition")))
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:40:08.405] plan(): Setting new future strategy stack:
[17:40:08.405] List of future strategies:
[17:40:08.405] 1. sequential:
[17:40:08.405]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:40:08.405]    - tweaked: FALSE
[17:40:08.405]    - call: NULL
[17:40:08.406] plan(): nbrOfWorkers() = 1
[17:40:08.408] plan(): Setting new future strategy stack:
[17:40:08.408] List of future strategies:
[17:40:08.408] 1. multicore:
[17:40:08.408]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:40:08.408]    - tweaked: FALSE
[17:40:08.408]    - call: plan(multicore)
[17:40:08.413] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 33d8ef81-66c6-1c88-ad16-a15781be79ec
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:40:08.415] result() for MulticoreFuture ...
[17:40:08.418] result() for MulticoreFuture ...
[17:40:08.418] result() for MulticoreFuture ... done
[17:40:08.418] signalConditions() ...
[17:40:08.418]  - include = ‘immediateCondition’
[17:40:08.418]  - exclude = 
[17:40:08.418]  - resignal = FALSE
[17:40:08.418]  - Number of conditions: 1
[17:40:08.419] signalConditions() ... done
[17:40:08.419] result() for MulticoreFuture ... done
[17:40:08.419] result() for MulticoreFuture ...
[17:40:08.419] result() for MulticoreFuture ... done
[17:40:08.419] signalConditions() ...
[17:40:08.419]  - include = ‘immediateCondition’
[17:40:08.419]  - exclude = 
[17:40:08.419]  - resignal = FALSE
[17:40:08.419]  - Number of conditions: 1
[17:40:08.420] signalConditions() ... done
<MyError: boom>
[17:40:08.420] result() for MulticoreFuture ...
[17:40:08.420] result() for MulticoreFuture ... done
[17:40:08.420] result() for MulticoreFuture ...
[17:40:08.420] result() for MulticoreFuture ... done
[17:40:08.420] signalConditions() ...
[17:40:08.420]  - include = ‘immediateCondition’
[17:40:08.421]  - exclude = 
[17:40:08.421]  - resignal = FALSE
[17:40:08.421]  - Number of conditions: 1
[17:40:08.421] signalConditions() ... done
[17:40:08.421] Future state: ‘finished’
[17:40:08.421] result() for MulticoreFuture ...
[17:40:08.421] result() for MulticoreFuture ... done
[17:40:08.421] signalConditions() ...
[17:40:08.421]  - include = ‘condition’
[17:40:08.422]  - exclude = ‘immediateCondition’
[17:40:08.422]  - resignal = TRUE
[17:40:08.422]  - Number of conditions: 1
[17:40:08.422]  - Condition #1: ‘MyError’, ‘error’, ‘condition’
[17:40:08.422] signalConditions() ... done
*** multicore(..., workers = 1L) ...
[17:40:08.422] getGlobalsAndPackages() ...
[17:40:08.422] Searching for globals...
[17:40:08.424] - globals found: [4] ‘{’, ‘*’, ‘a’, ‘b’
[17:40:08.424] Searching for globals ... DONE
[17:40:08.424] Resolving globals: FALSE
[17:40:08.424] The total size of the 2 globals is 112 bytes (112 bytes)
[17:40:08.425] The total size of the 2 globals exported for future expression (‘{; a * b; }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘a’ (56 bytes of class ‘numeric’) and ‘b’ (56 bytes of class ‘numeric’)
[17:40:08.425] - globals: [2] ‘a’, ‘b’
[17:40:08.425] 
[17:40:08.425] getGlobalsAndPackages() ... DONE
[17:40:08.429] Packages needed by the future expression (n = 0): <none>
[17:40:08.429] Packages needed by future strategies (n = 0): <none>
[17:40:08.430] {
[17:40:08.430]     {
[17:40:08.430]         {
[17:40:08.430]             ...future.startTime <- base::Sys.time()
[17:40:08.430]             {
[17:40:08.430]                 {
[17:40:08.430]                   {
[17:40:08.430]                     base::local({
[17:40:08.430]                       has_future <- base::requireNamespace("future", 
[17:40:08.430]                         quietly = TRUE)
[17:40:08.430]                       if (has_future) {
[17:40:08.430]                         ns <- base::getNamespace("future")
[17:40:08.430]                         version <- ns[[".package"]][["version"]]
[17:40:08.430]                         if (is.null(version)) 
[17:40:08.430]                           version <- utils::packageVersion("future")
[17:40:08.430]                       }
[17:40:08.430]                       else {
[17:40:08.430]                         version <- NULL
[17:40:08.430]                       }
[17:40:08.430]                       if (!has_future || version < "1.8.0") {
[17:40:08.430]                         info <- base::c(r_version = base::gsub("R version ", 
[17:40:08.430]                           "", base::R.version$version.string), 
[17:40:08.430]                           platform = base::sprintf("%s (%s-bit)", 
[17:40:08.430]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:08.430]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:08.430]                             "release", "version")], collapse = " "), 
[17:40:08.430]                           hostname = base::Sys.info()[["nodename"]])
[17:40:08.430]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:40:08.430]                           info)
[17:40:08.430]                         info <- base::paste(info, collapse = "; ")
[17:40:08.430]                         if (!has_future) {
[17:40:08.430]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:08.430]                             info)
[17:40:08.430]                         }
[17:40:08.430]                         else {
[17:40:08.430]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:08.430]                             info, version)
[17:40:08.430]                         }
[17:40:08.430]                         base::stop(msg)
[17:40:08.430]                       }
[17:40:08.430]                     })
[17:40:08.430]                   }
[17:40:08.430]                   ...future.strategy.old <- future::plan("list")
[17:40:08.430]                   options(future.plan = NULL)
[17:40:08.430]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:08.430]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:08.430]                 }
[17:40:08.430]                 ...future.workdir <- getwd()
[17:40:08.430]             }
[17:40:08.430]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:08.430]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:08.430]         }
[17:40:08.430]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:08.430]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:40:08.430]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:08.430]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:08.430]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:08.430]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:08.430]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:08.430]             base::names(...future.oldOptions))
[17:40:08.430]     }
[17:40:08.430]     if (FALSE) {
[17:40:08.430]     }
[17:40:08.430]     else {
[17:40:08.430]         if (TRUE) {
[17:40:08.430]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:08.430]                 open = "w")
[17:40:08.430]         }
[17:40:08.430]         else {
[17:40:08.430]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:08.430]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:08.430]         }
[17:40:08.430]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:08.430]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:08.430]             base::sink(type = "output", split = FALSE)
[17:40:08.430]             base::close(...future.stdout)
[17:40:08.430]         }, add = TRUE)
[17:40:08.430]     }
[17:40:08.430]     ...future.frame <- base::sys.nframe()
[17:40:08.430]     ...future.conditions <- base::list()
[17:40:08.430]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:08.430]     if (FALSE) {
[17:40:08.430]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:08.430]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:08.430]     }
[17:40:08.430]     ...future.result <- base::tryCatch({
[17:40:08.430]         base::withCallingHandlers({
[17:40:08.430]             ...future.value <- base::withVisible(base::local({
[17:40:08.430]                 a * b
[17:40:08.430]             }))
[17:40:08.430]             future::FutureResult(value = ...future.value$value, 
[17:40:08.430]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:08.430]                   ...future.rng), globalenv = if (FALSE) 
[17:40:08.430]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:08.430]                     ...future.globalenv.names))
[17:40:08.430]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:08.430]         }, condition = base::local({
[17:40:08.430]             c <- base::c
[17:40:08.430]             inherits <- base::inherits
[17:40:08.430]             invokeRestart <- base::invokeRestart
[17:40:08.430]             length <- base::length
[17:40:08.430]             list <- base::list
[17:40:08.430]             seq.int <- base::seq.int
[17:40:08.430]             signalCondition <- base::signalCondition
[17:40:08.430]             sys.calls <- base::sys.calls
[17:40:08.430]             `[[` <- base::`[[`
[17:40:08.430]             `+` <- base::`+`
[17:40:08.430]             `<<-` <- base::`<<-`
[17:40:08.430]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:08.430]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:08.430]                   3L)]
[17:40:08.430]             }
[17:40:08.430]             function(cond) {
[17:40:08.430]                 is_error <- inherits(cond, "error")
[17:40:08.430]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:08.430]                   NULL)
[17:40:08.430]                 if (is_error) {
[17:40:08.430]                   sessionInformation <- function() {
[17:40:08.430]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:08.430]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:08.430]                       search = base::search(), system = base::Sys.info())
[17:40:08.430]                   }
[17:40:08.430]                   ...future.conditions[[length(...future.conditions) + 
[17:40:08.430]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:08.430]                     cond$call), session = sessionInformation(), 
[17:40:08.430]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:08.430]                   signalCondition(cond)
[17:40:08.430]                 }
[17:40:08.430]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:08.430]                 "immediateCondition"))) {
[17:40:08.430]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:08.430]                   ...future.conditions[[length(...future.conditions) + 
[17:40:08.430]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:08.430]                   if (TRUE && !signal) {
[17:40:08.430]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:08.430]                     {
[17:40:08.430]                       inherits <- base::inherits
[17:40:08.430]                       invokeRestart <- base::invokeRestart
[17:40:08.430]                       is.null <- base::is.null
[17:40:08.430]                       muffled <- FALSE
[17:40:08.430]                       if (inherits(cond, "message")) {
[17:40:08.430]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:08.430]                         if (muffled) 
[17:40:08.430]                           invokeRestart("muffleMessage")
[17:40:08.430]                       }
[17:40:08.430]                       else if (inherits(cond, "warning")) {
[17:40:08.430]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:08.430]                         if (muffled) 
[17:40:08.430]                           invokeRestart("muffleWarning")
[17:40:08.430]                       }
[17:40:08.430]                       else if (inherits(cond, "condition")) {
[17:40:08.430]                         if (!is.null(pattern)) {
[17:40:08.430]                           computeRestarts <- base::computeRestarts
[17:40:08.430]                           grepl <- base::grepl
[17:40:08.430]                           restarts <- computeRestarts(cond)
[17:40:08.430]                           for (restart in restarts) {
[17:40:08.430]                             name <- restart$name
[17:40:08.430]                             if (is.null(name)) 
[17:40:08.430]                               next
[17:40:08.430]                             if (!grepl(pattern, name)) 
[17:40:08.430]                               next
[17:40:08.430]                             invokeRestart(restart)
[17:40:08.430]                             muffled <- TRUE
[17:40:08.430]                             break
[17:40:08.430]                           }
[17:40:08.430]                         }
[17:40:08.430]                       }
[17:40:08.430]                       invisible(muffled)
[17:40:08.430]                     }
[17:40:08.430]                     muffleCondition(cond, pattern = "^muffle")
[17:40:08.430]                   }
[17:40:08.430]                 }
[17:40:08.430]                 else {
[17:40:08.430]                   if (TRUE) {
[17:40:08.430]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:08.430]                     {
[17:40:08.430]                       inherits <- base::inherits
[17:40:08.430]                       invokeRestart <- base::invokeRestart
[17:40:08.430]                       is.null <- base::is.null
[17:40:08.430]                       muffled <- FALSE
[17:40:08.430]                       if (inherits(cond, "message")) {
[17:40:08.430]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:08.430]                         if (muffled) 
[17:40:08.430]                           invokeRestart("muffleMessage")
[17:40:08.430]                       }
[17:40:08.430]                       else if (inherits(cond, "warning")) {
[17:40:08.430]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:08.430]                         if (muffled) 
[17:40:08.430]                           invokeRestart("muffleWarning")
[17:40:08.430]                       }
[17:40:08.430]                       else if (inherits(cond, "condition")) {
[17:40:08.430]                         if (!is.null(pattern)) {
[17:40:08.430]                           computeRestarts <- base::computeRestarts
[17:40:08.430]                           grepl <- base::grepl
[17:40:08.430]                           restarts <- computeRestarts(cond)
[17:40:08.430]                           for (restart in restarts) {
[17:40:08.430]                             name <- restart$name
[17:40:08.430]                             if (is.null(name)) 
[17:40:08.430]                               next
[17:40:08.430]                             if (!grepl(pattern, name)) 
[17:40:08.430]                               next
[17:40:08.430]                             invokeRestart(restart)
[17:40:08.430]                             muffled <- TRUE
[17:40:08.430]                             break
[17:40:08.430]                           }
[17:40:08.430]                         }
[17:40:08.430]                       }
[17:40:08.430]                       invisible(muffled)
[17:40:08.430]                     }
[17:40:08.430]                     muffleCondition(cond, pattern = "^muffle")
[17:40:08.430]                   }
[17:40:08.430]                 }
[17:40:08.430]             }
[17:40:08.430]         }))
[17:40:08.430]     }, error = function(ex) {
[17:40:08.430]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:08.430]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:08.430]                 ...future.rng), started = ...future.startTime, 
[17:40:08.430]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:08.430]             version = "1.8"), class = "FutureResult")
[17:40:08.430]     }, finally = {
[17:40:08.430]         if (!identical(...future.workdir, getwd())) 
[17:40:08.430]             setwd(...future.workdir)
[17:40:08.430]         {
[17:40:08.430]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:08.430]                 ...future.oldOptions$nwarnings <- NULL
[17:40:08.430]             }
[17:40:08.430]             base::options(...future.oldOptions)
[17:40:08.430]             if (.Platform$OS.type == "windows") {
[17:40:08.430]                 old_names <- names(...future.oldEnvVars)
[17:40:08.430]                 envs <- base::Sys.getenv()
[17:40:08.430]                 names <- names(envs)
[17:40:08.430]                 common <- intersect(names, old_names)
[17:40:08.430]                 added <- setdiff(names, old_names)
[17:40:08.430]                 removed <- setdiff(old_names, names)
[17:40:08.430]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:08.430]                   envs[common]]
[17:40:08.430]                 NAMES <- toupper(changed)
[17:40:08.430]                 args <- list()
[17:40:08.430]                 for (kk in seq_along(NAMES)) {
[17:40:08.430]                   name <- changed[[kk]]
[17:40:08.430]                   NAME <- NAMES[[kk]]
[17:40:08.430]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:08.430]                     next
[17:40:08.430]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:08.430]                 }
[17:40:08.430]                 NAMES <- toupper(added)
[17:40:08.430]                 for (kk in seq_along(NAMES)) {
[17:40:08.430]                   name <- added[[kk]]
[17:40:08.430]                   NAME <- NAMES[[kk]]
[17:40:08.430]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:08.430]                     next
[17:40:08.430]                   args[[name]] <- ""
[17:40:08.430]                 }
[17:40:08.430]                 NAMES <- toupper(removed)
[17:40:08.430]                 for (kk in seq_along(NAMES)) {
[17:40:08.430]                   name <- removed[[kk]]
[17:40:08.430]                   NAME <- NAMES[[kk]]
[17:40:08.430]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:08.430]                     next
[17:40:08.430]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:08.430]                 }
[17:40:08.430]                 if (length(args) > 0) 
[17:40:08.430]                   base::do.call(base::Sys.setenv, args = args)
[17:40:08.430]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:08.430]             }
[17:40:08.430]             else {
[17:40:08.430]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:08.430]             }
[17:40:08.430]             {
[17:40:08.430]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:08.430]                   0L) {
[17:40:08.430]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:08.430]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:08.430]                   base::options(opts)
[17:40:08.430]                 }
[17:40:08.430]                 {
[17:40:08.430]                   {
[17:40:08.430]                     NULL
[17:40:08.430]                     RNGkind("Mersenne-Twister")
[17:40:08.430]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:40:08.430]                       inherits = FALSE)
[17:40:08.430]                   }
[17:40:08.430]                   options(future.plan = NULL)
[17:40:08.430]                   if (is.na(NA_character_)) 
[17:40:08.430]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:08.430]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:08.430]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:40:08.430]                     .init = FALSE)
[17:40:08.430]                 }
[17:40:08.430]             }
[17:40:08.430]         }
[17:40:08.430]     })
[17:40:08.430]     if (TRUE) {
[17:40:08.430]         base::sink(type = "output", split = FALSE)
[17:40:08.430]         if (TRUE) {
[17:40:08.430]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:08.430]         }
[17:40:08.430]         else {
[17:40:08.430]             ...future.result["stdout"] <- base::list(NULL)
[17:40:08.430]         }
[17:40:08.430]         base::close(...future.stdout)
[17:40:08.430]         ...future.stdout <- NULL
[17:40:08.430]     }
[17:40:08.430]     ...future.result$conditions <- ...future.conditions
[17:40:08.430]     ...future.result$finished <- base::Sys.time()
[17:40:08.430]     ...future.result
[17:40:08.430] }
[17:40:08.431] assign_globals() ...
[17:40:08.432] List of 2
[17:40:08.432]  $ a: num 2
[17:40:08.432]  $ b: num 3
[17:40:08.432]  - attr(*, "where")=List of 2
[17:40:08.432]   ..$ a:<environment: R_EmptyEnv> 
[17:40:08.432]   ..$ b:<environment: R_EmptyEnv> 
[17:40:08.432]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:40:08.432]  - attr(*, "resolved")= logi FALSE
[17:40:08.432]  - attr(*, "total_size")= num 112
[17:40:08.435] - copied ‘a’ to environment
[17:40:08.435] - copied ‘b’ to environment
[17:40:08.435] assign_globals() ... done
[17:40:08.436] plan(): Setting new future strategy stack:
[17:40:08.436] List of future strategies:
[17:40:08.436] 1. sequential:
[17:40:08.436]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:40:08.436]    - tweaked: FALSE
[17:40:08.436]    - call: NULL
[17:40:08.436] plan(): nbrOfWorkers() = 1
[17:40:08.437] plan(): Setting new future strategy stack:
[17:40:08.437] List of future strategies:
[17:40:08.437] 1. multicore:
[17:40:08.437]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:40:08.437]    - tweaked: FALSE
[17:40:08.437]    - call: plan(multicore)
[17:40:08.441] plan(): nbrOfWorkers() = 2
[17:40:08.441] SequentialFuture started (and completed)
[1] 6
*** multicore(..., workers = 1L) ... DONE
Testing with 2 cores ... DONE
> 
> message("*** multicore() ... DONE")
*** multicore() ... DONE
> 
> source("incl/end.R")
[17:40:08.442] plan(): Setting new future strategy stack:
[17:40:08.442] List of future strategies:
[17:40:08.442] 1. FutureStrategy:
[17:40:08.442]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:40:08.442]    - tweaked: FALSE
[17:40:08.442]    - call: future::plan(oplan)
[17:40:08.443] plan(): nbrOfWorkers() = 1
> 
