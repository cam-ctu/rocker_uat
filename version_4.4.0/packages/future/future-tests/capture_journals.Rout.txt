
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[09:30:31.563] plan(): Setting new future strategy stack:
[09:30:31.563] List of future strategies:
[09:30:31.563] 1. sequential:
[09:30:31.563]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:31.563]    - tweaked: FALSE
[09:30:31.563]    - call: future::plan("sequential")
[09:30:31.574] plan(): nbrOfWorkers() = 1
> 
> capture_journals <- future:::capture_journals
> 
> message("*** capture_journals() ...")
*** capture_journals() ...
> 
> slow_fcn <- function(x) {
+   Sys.sleep(0.5 + 1/x)
+ }
> 
> plan(multisession, workers = 2)
[09:30:31.588] plan(): Setting new future strategy stack:
[09:30:31.588] List of future strategies:
[09:30:31.588] 1. multisession:
[09:30:31.588]    - args: function (..., workers = 2, envir = parent.frame())
[09:30:31.588]    - tweaked: TRUE
[09:30:31.588]    - call: plan(multisession, workers = 2)
[09:30:31.599] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[09:30:31.599] multisession:
[09:30:31.599] - args: function (..., workers = 2, envir = parent.frame())
[09:30:31.599] - tweaked: TRUE
[09:30:31.599] - call: plan(multisession, workers = 2)
[09:30:31.600] getGlobalsAndPackages() ...
[09:30:31.600] Not searching for globals
[09:30:31.601] - globals: [0] <none>
[09:30:31.601] getGlobalsAndPackages() ... DONE
[09:30:31.601] [local output] makeClusterPSOCK() ...
[09:30:31.631] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[09:30:31.632] [local output] Base port: 11702
[09:30:31.632] [local output] Getting setup options for 2 cluster nodes ...
[09:30:31.633] [local output]  - Node 1 of 2 ...
[09:30:31.633] [local output] localMachine=TRUE => revtunnel=FALSE

[09:30:31.634] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpJe7Bma/worker.rank=1.parallelly.parent=38978.98427dd7843f.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpJe7Bma/worker.rank=1.parallelly.parent=38978.98427dd7843f.pid")'’
[09:30:31.818] - Possible to infer worker's PID: TRUE
[09:30:31.819] [local output] Rscript port: 11702

[09:30:31.819] [local output]  - Node 2 of 2 ...
[09:30:31.820] [local output] localMachine=TRUE => revtunnel=FALSE

[09:30:31.820] [local output] Rscript port: 11702

[09:30:31.821] [local output] Getting setup options for 2 cluster nodes ... done
[09:30:31.821] [local output]  - Parallel setup requested for some PSOCK nodes
[09:30:31.821] [local output] Setting up PSOCK nodes in parallel
[09:30:31.821] List of 36
[09:30:31.821]  $ worker          : chr "localhost"
[09:30:31.821]   ..- attr(*, "localhost")= logi TRUE
[09:30:31.821]  $ master          : chr "localhost"
[09:30:31.821]  $ port            : int 11702
[09:30:31.821]  $ connectTimeout  : num 120
[09:30:31.821]  $ timeout         : num 2592000
[09:30:31.821]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[09:30:31.821]  $ homogeneous     : logi TRUE
[09:30:31.821]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[09:30:31.821]  $ rscript_envs    : NULL
[09:30:31.821]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[09:30:31.821]  $ rscript_startup : NULL
[09:30:31.821]  $ rscript_sh      : chr "sh"
[09:30:31.821]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[09:30:31.821]  $ methods         : logi TRUE
[09:30:31.821]  $ socketOptions   : chr "no-delay"
[09:30:31.821]  $ useXDR          : logi FALSE
[09:30:31.821]  $ outfile         : chr "/dev/null"
[09:30:31.821]  $ renice          : int NA
[09:30:31.821]  $ rshcmd          : NULL
[09:30:31.821]  $ user            : chr(0) 
[09:30:31.821]  $ revtunnel       : logi FALSE
[09:30:31.821]  $ rshlogfile      : NULL
[09:30:31.821]  $ rshopts         : chr(0) 
[09:30:31.821]  $ rank            : int 1
[09:30:31.821]  $ manual          : logi FALSE
[09:30:31.821]  $ dryrun          : logi FALSE
[09:30:31.821]  $ quiet           : logi FALSE
[09:30:31.821]  $ setup_strategy  : chr "parallel"
[09:30:31.821]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[09:30:31.821]  $ pidfile         : chr "/tmp/RtmpJe7Bma/worker.rank=1.parallelly.parent=38978.98427dd7843f.pid"
[09:30:31.821]  $ rshcmd_label    : NULL
[09:30:31.821]  $ rsh_call        : NULL
[09:30:31.821]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[09:30:31.821]  $ localMachine    : logi TRUE
[09:30:31.821]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[09:30:31.821]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[09:30:31.821]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[09:30:31.821]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[09:30:31.821]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[09:30:31.821]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[09:30:31.821]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[09:30:31.821]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[09:30:31.821]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[09:30:31.821]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[09:30:31.821]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[09:30:31.821]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[09:30:31.821]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[09:30:31.821]  $ arguments       :List of 28
[09:30:31.821]   ..$ worker          : chr "localhost"
[09:30:31.821]   ..$ master          : NULL
[09:30:31.821]   ..$ port            : int 11702
[09:30:31.821]   ..$ connectTimeout  : num 120
[09:30:31.821]   ..$ timeout         : num 2592000
[09:30:31.821]   ..$ rscript         : NULL
[09:30:31.821]   ..$ homogeneous     : NULL
[09:30:31.821]   ..$ rscript_args    : NULL
[09:30:31.821]   ..$ rscript_envs    : NULL
[09:30:31.821]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[09:30:31.821]   ..$ rscript_startup : NULL
[09:30:31.821]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[09:30:31.821]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[09:30:31.821]   ..$ methods         : logi TRUE
[09:30:31.821]   ..$ socketOptions   : chr "no-delay"
[09:30:31.821]   ..$ useXDR          : logi FALSE
[09:30:31.821]   ..$ outfile         : chr "/dev/null"
[09:30:31.821]   ..$ renice          : int NA
[09:30:31.821]   ..$ rshcmd          : NULL
[09:30:31.821]   ..$ user            : NULL
[09:30:31.821]   ..$ revtunnel       : logi NA
[09:30:31.821]   ..$ rshlogfile      : NULL
[09:30:31.821]   ..$ rshopts         : NULL
[09:30:31.821]   ..$ rank            : int 1
[09:30:31.821]   ..$ manual          : logi FALSE
[09:30:31.821]   ..$ dryrun          : logi FALSE
[09:30:31.821]   ..$ quiet           : logi FALSE
[09:30:31.821]   ..$ setup_strategy  : chr "parallel"
[09:30:31.821]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[09:30:31.839] [local output] System call to launch all workers:
[09:30:31.839] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpJe7Bma/worker.rank=1.parallelly.parent=38978.98427dd7843f.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11702 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[09:30:31.839] [local output] Starting PSOCK main server
[09:30:31.845] [local output] Workers launched
[09:30:31.845] [local output] Waiting for workers to connect back
[09:30:31.845]  - [local output] 0 workers out of 2 ready
[09:30:32.107]  - [local output] 0 workers out of 2 ready
[09:30:32.108]  - [local output] 1 workers out of 2 ready
[09:30:32.111]  - [local output] 1 workers out of 2 ready
[09:30:32.111]  - [local output] 2 workers out of 2 ready
[09:30:32.111] [local output] Launching of workers completed
[09:30:32.112] [local output] Collecting session information from workers
[09:30:32.112] [local output]  - Worker #1 of 2
[09:30:32.113] [local output]  - Worker #2 of 2
[09:30:32.113] [local output] makeClusterPSOCK() ... done
[09:30:32.126] Packages needed by the future expression (n = 0): <none>
[09:30:32.126] Packages needed by future strategies (n = 0): <none>
[09:30:32.127] {
[09:30:32.127]     {
[09:30:32.127]         {
[09:30:32.127]             ...future.startTime <- base::Sys.time()
[09:30:32.127]             {
[09:30:32.127]                 {
[09:30:32.127]                   {
[09:30:32.127]                     {
[09:30:32.127]                       base::local({
[09:30:32.127]                         has_future <- base::requireNamespace("future", 
[09:30:32.127]                           quietly = TRUE)
[09:30:32.127]                         if (has_future) {
[09:30:32.127]                           ns <- base::getNamespace("future")
[09:30:32.127]                           version <- ns[[".package"]][["version"]]
[09:30:32.127]                           if (is.null(version)) 
[09:30:32.127]                             version <- utils::packageVersion("future")
[09:30:32.127]                         }
[09:30:32.127]                         else {
[09:30:32.127]                           version <- NULL
[09:30:32.127]                         }
[09:30:32.127]                         if (!has_future || version < "1.8.0") {
[09:30:32.127]                           info <- base::c(r_version = base::gsub("R version ", 
[09:30:32.127]                             "", base::R.version$version.string), 
[09:30:32.127]                             platform = base::sprintf("%s (%s-bit)", 
[09:30:32.127]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:30:32.127]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:30:32.127]                               "release", "version")], collapse = " "), 
[09:30:32.127]                             hostname = base::Sys.info()[["nodename"]])
[09:30:32.127]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:30:32.127]                             info)
[09:30:32.127]                           info <- base::paste(info, collapse = "; ")
[09:30:32.127]                           if (!has_future) {
[09:30:32.127]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:30:32.127]                               info)
[09:30:32.127]                           }
[09:30:32.127]                           else {
[09:30:32.127]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:30:32.127]                               info, version)
[09:30:32.127]                           }
[09:30:32.127]                           base::stop(msg)
[09:30:32.127]                         }
[09:30:32.127]                       })
[09:30:32.127]                     }
[09:30:32.127]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:30:32.127]                     base::options(mc.cores = 1L)
[09:30:32.127]                   }
[09:30:32.127]                   ...future.strategy.old <- future::plan("list")
[09:30:32.127]                   options(future.plan = NULL)
[09:30:32.127]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:30:32.127]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:30:32.127]                 }
[09:30:32.127]                 ...future.workdir <- getwd()
[09:30:32.127]             }
[09:30:32.127]             ...future.oldOptions <- base::as.list(base::.Options)
[09:30:32.127]             ...future.oldEnvVars <- base::Sys.getenv()
[09:30:32.127]         }
[09:30:32.127]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:30:32.127]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:30:32.127]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:30:32.127]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:30:32.127]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:30:32.127]             future.stdout.windows.reencode = NULL, width = 80L)
[09:30:32.127]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:30:32.127]             base::names(...future.oldOptions))
[09:30:32.127]     }
[09:30:32.127]     if (FALSE) {
[09:30:32.127]     }
[09:30:32.127]     else {
[09:30:32.127]         if (TRUE) {
[09:30:32.127]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:30:32.127]                 open = "w")
[09:30:32.127]         }
[09:30:32.127]         else {
[09:30:32.127]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:30:32.127]                 windows = "NUL", "/dev/null"), open = "w")
[09:30:32.127]         }
[09:30:32.127]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:30:32.127]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:30:32.127]             base::sink(type = "output", split = FALSE)
[09:30:32.127]             base::close(...future.stdout)
[09:30:32.127]         }, add = TRUE)
[09:30:32.127]     }
[09:30:32.127]     ...future.frame <- base::sys.nframe()
[09:30:32.127]     ...future.conditions <- base::list()
[09:30:32.127]     ...future.rng <- base::globalenv()$.Random.seed
[09:30:32.127]     if (FALSE) {
[09:30:32.127]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:30:32.127]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:30:32.127]     }
[09:30:32.127]     ...future.result <- base::tryCatch({
[09:30:32.127]         base::withCallingHandlers({
[09:30:32.127]             ...future.value <- base::withVisible(base::local({
[09:30:32.127]                 ...future.makeSendCondition <- base::local({
[09:30:32.127]                   sendCondition <- NULL
[09:30:32.127]                   function(frame = 1L) {
[09:30:32.127]                     if (is.function(sendCondition)) 
[09:30:32.127]                       return(sendCondition)
[09:30:32.127]                     ns <- getNamespace("parallel")
[09:30:32.127]                     if (exists("sendData", mode = "function", 
[09:30:32.127]                       envir = ns)) {
[09:30:32.127]                       parallel_sendData <- get("sendData", mode = "function", 
[09:30:32.127]                         envir = ns)
[09:30:32.127]                       envir <- sys.frame(frame)
[09:30:32.127]                       master <- NULL
[09:30:32.127]                       while (!identical(envir, .GlobalEnv) && 
[09:30:32.127]                         !identical(envir, emptyenv())) {
[09:30:32.127]                         if (exists("master", mode = "list", envir = envir, 
[09:30:32.127]                           inherits = FALSE)) {
[09:30:32.127]                           master <- get("master", mode = "list", 
[09:30:32.127]                             envir = envir, inherits = FALSE)
[09:30:32.127]                           if (inherits(master, c("SOCKnode", 
[09:30:32.127]                             "SOCK0node"))) {
[09:30:32.127]                             sendCondition <<- function(cond) {
[09:30:32.127]                               data <- list(type = "VALUE", value = cond, 
[09:30:32.127]                                 success = TRUE)
[09:30:32.127]                               parallel_sendData(master, data)
[09:30:32.127]                             }
[09:30:32.127]                             return(sendCondition)
[09:30:32.127]                           }
[09:30:32.127]                         }
[09:30:32.127]                         frame <- frame + 1L
[09:30:32.127]                         envir <- sys.frame(frame)
[09:30:32.127]                       }
[09:30:32.127]                     }
[09:30:32.127]                     sendCondition <<- function(cond) NULL
[09:30:32.127]                   }
[09:30:32.127]                 })
[09:30:32.127]                 withCallingHandlers({
[09:30:32.127]                   NA
[09:30:32.127]                 }, immediateCondition = function(cond) {
[09:30:32.127]                   sendCondition <- ...future.makeSendCondition()
[09:30:32.127]                   sendCondition(cond)
[09:30:32.127]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:32.127]                   {
[09:30:32.127]                     inherits <- base::inherits
[09:30:32.127]                     invokeRestart <- base::invokeRestart
[09:30:32.127]                     is.null <- base::is.null
[09:30:32.127]                     muffled <- FALSE
[09:30:32.127]                     if (inherits(cond, "message")) {
[09:30:32.127]                       muffled <- grepl(pattern, "muffleMessage")
[09:30:32.127]                       if (muffled) 
[09:30:32.127]                         invokeRestart("muffleMessage")
[09:30:32.127]                     }
[09:30:32.127]                     else if (inherits(cond, "warning")) {
[09:30:32.127]                       muffled <- grepl(pattern, "muffleWarning")
[09:30:32.127]                       if (muffled) 
[09:30:32.127]                         invokeRestart("muffleWarning")
[09:30:32.127]                     }
[09:30:32.127]                     else if (inherits(cond, "condition")) {
[09:30:32.127]                       if (!is.null(pattern)) {
[09:30:32.127]                         computeRestarts <- base::computeRestarts
[09:30:32.127]                         grepl <- base::grepl
[09:30:32.127]                         restarts <- computeRestarts(cond)
[09:30:32.127]                         for (restart in restarts) {
[09:30:32.127]                           name <- restart$name
[09:30:32.127]                           if (is.null(name)) 
[09:30:32.127]                             next
[09:30:32.127]                           if (!grepl(pattern, name)) 
[09:30:32.127]                             next
[09:30:32.127]                           invokeRestart(restart)
[09:30:32.127]                           muffled <- TRUE
[09:30:32.127]                           break
[09:30:32.127]                         }
[09:30:32.127]                       }
[09:30:32.127]                     }
[09:30:32.127]                     invisible(muffled)
[09:30:32.127]                   }
[09:30:32.127]                   muffleCondition(cond)
[09:30:32.127]                 })
[09:30:32.127]             }))
[09:30:32.127]             future::FutureResult(value = ...future.value$value, 
[09:30:32.127]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:32.127]                   ...future.rng), globalenv = if (FALSE) 
[09:30:32.127]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:30:32.127]                     ...future.globalenv.names))
[09:30:32.127]                 else NULL, started = ...future.startTime, version = "1.8")
[09:30:32.127]         }, condition = base::local({
[09:30:32.127]             c <- base::c
[09:30:32.127]             inherits <- base::inherits
[09:30:32.127]             invokeRestart <- base::invokeRestart
[09:30:32.127]             length <- base::length
[09:30:32.127]             list <- base::list
[09:30:32.127]             seq.int <- base::seq.int
[09:30:32.127]             signalCondition <- base::signalCondition
[09:30:32.127]             sys.calls <- base::sys.calls
[09:30:32.127]             `[[` <- base::`[[`
[09:30:32.127]             `+` <- base::`+`
[09:30:32.127]             `<<-` <- base::`<<-`
[09:30:32.127]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:30:32.127]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:30:32.127]                   3L)]
[09:30:32.127]             }
[09:30:32.127]             function(cond) {
[09:30:32.127]                 is_error <- inherits(cond, "error")
[09:30:32.127]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:30:32.127]                   NULL)
[09:30:32.127]                 if (is_error) {
[09:30:32.127]                   sessionInformation <- function() {
[09:30:32.127]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:30:32.127]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:30:32.127]                       search = base::search(), system = base::Sys.info())
[09:30:32.127]                   }
[09:30:32.127]                   ...future.conditions[[length(...future.conditions) + 
[09:30:32.127]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:30:32.127]                     cond$call), session = sessionInformation(), 
[09:30:32.127]                     timestamp = base::Sys.time(), signaled = 0L)
[09:30:32.127]                   signalCondition(cond)
[09:30:32.127]                 }
[09:30:32.127]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:30:32.127]                 "immediateCondition"))) {
[09:30:32.127]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:30:32.127]                   ...future.conditions[[length(...future.conditions) + 
[09:30:32.127]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:30:32.127]                   if (TRUE && !signal) {
[09:30:32.127]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:32.127]                     {
[09:30:32.127]                       inherits <- base::inherits
[09:30:32.127]                       invokeRestart <- base::invokeRestart
[09:30:32.127]                       is.null <- base::is.null
[09:30:32.127]                       muffled <- FALSE
[09:30:32.127]                       if (inherits(cond, "message")) {
[09:30:32.127]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:32.127]                         if (muffled) 
[09:30:32.127]                           invokeRestart("muffleMessage")
[09:30:32.127]                       }
[09:30:32.127]                       else if (inherits(cond, "warning")) {
[09:30:32.127]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:32.127]                         if (muffled) 
[09:30:32.127]                           invokeRestart("muffleWarning")
[09:30:32.127]                       }
[09:30:32.127]                       else if (inherits(cond, "condition")) {
[09:30:32.127]                         if (!is.null(pattern)) {
[09:30:32.127]                           computeRestarts <- base::computeRestarts
[09:30:32.127]                           grepl <- base::grepl
[09:30:32.127]                           restarts <- computeRestarts(cond)
[09:30:32.127]                           for (restart in restarts) {
[09:30:32.127]                             name <- restart$name
[09:30:32.127]                             if (is.null(name)) 
[09:30:32.127]                               next
[09:30:32.127]                             if (!grepl(pattern, name)) 
[09:30:32.127]                               next
[09:30:32.127]                             invokeRestart(restart)
[09:30:32.127]                             muffled <- TRUE
[09:30:32.127]                             break
[09:30:32.127]                           }
[09:30:32.127]                         }
[09:30:32.127]                       }
[09:30:32.127]                       invisible(muffled)
[09:30:32.127]                     }
[09:30:32.127]                     muffleCondition(cond, pattern = "^muffle")
[09:30:32.127]                   }
[09:30:32.127]                 }
[09:30:32.127]                 else {
[09:30:32.127]                   if (TRUE) {
[09:30:32.127]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:32.127]                     {
[09:30:32.127]                       inherits <- base::inherits
[09:30:32.127]                       invokeRestart <- base::invokeRestart
[09:30:32.127]                       is.null <- base::is.null
[09:30:32.127]                       muffled <- FALSE
[09:30:32.127]                       if (inherits(cond, "message")) {
[09:30:32.127]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:32.127]                         if (muffled) 
[09:30:32.127]                           invokeRestart("muffleMessage")
[09:30:32.127]                       }
[09:30:32.127]                       else if (inherits(cond, "warning")) {
[09:30:32.127]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:32.127]                         if (muffled) 
[09:30:32.127]                           invokeRestart("muffleWarning")
[09:30:32.127]                       }
[09:30:32.127]                       else if (inherits(cond, "condition")) {
[09:30:32.127]                         if (!is.null(pattern)) {
[09:30:32.127]                           computeRestarts <- base::computeRestarts
[09:30:32.127]                           grepl <- base::grepl
[09:30:32.127]                           restarts <- computeRestarts(cond)
[09:30:32.127]                           for (restart in restarts) {
[09:30:32.127]                             name <- restart$name
[09:30:32.127]                             if (is.null(name)) 
[09:30:32.127]                               next
[09:30:32.127]                             if (!grepl(pattern, name)) 
[09:30:32.127]                               next
[09:30:32.127]                             invokeRestart(restart)
[09:30:32.127]                             muffled <- TRUE
[09:30:32.127]                             break
[09:30:32.127]                           }
[09:30:32.127]                         }
[09:30:32.127]                       }
[09:30:32.127]                       invisible(muffled)
[09:30:32.127]                     }
[09:30:32.127]                     muffleCondition(cond, pattern = "^muffle")
[09:30:32.127]                   }
[09:30:32.127]                 }
[09:30:32.127]             }
[09:30:32.127]         }))
[09:30:32.127]     }, error = function(ex) {
[09:30:32.127]         base::structure(base::list(value = NULL, visible = NULL, 
[09:30:32.127]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:32.127]                 ...future.rng), started = ...future.startTime, 
[09:30:32.127]             finished = Sys.time(), session_uuid = NA_character_, 
[09:30:32.127]             version = "1.8"), class = "FutureResult")
[09:30:32.127]     }, finally = {
[09:30:32.127]         if (!identical(...future.workdir, getwd())) 
[09:30:32.127]             setwd(...future.workdir)
[09:30:32.127]         {
[09:30:32.127]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:30:32.127]                 ...future.oldOptions$nwarnings <- NULL
[09:30:32.127]             }
[09:30:32.127]             base::options(...future.oldOptions)
[09:30:32.127]             if (.Platform$OS.type == "windows") {
[09:30:32.127]                 old_names <- names(...future.oldEnvVars)
[09:30:32.127]                 envs <- base::Sys.getenv()
[09:30:32.127]                 names <- names(envs)
[09:30:32.127]                 common <- intersect(names, old_names)
[09:30:32.127]                 added <- setdiff(names, old_names)
[09:30:32.127]                 removed <- setdiff(old_names, names)
[09:30:32.127]                 changed <- common[...future.oldEnvVars[common] != 
[09:30:32.127]                   envs[common]]
[09:30:32.127]                 NAMES <- toupper(changed)
[09:30:32.127]                 args <- list()
[09:30:32.127]                 for (kk in seq_along(NAMES)) {
[09:30:32.127]                   name <- changed[[kk]]
[09:30:32.127]                   NAME <- NAMES[[kk]]
[09:30:32.127]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:32.127]                     next
[09:30:32.127]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:32.127]                 }
[09:30:32.127]                 NAMES <- toupper(added)
[09:30:32.127]                 for (kk in seq_along(NAMES)) {
[09:30:32.127]                   name <- added[[kk]]
[09:30:32.127]                   NAME <- NAMES[[kk]]
[09:30:32.127]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:32.127]                     next
[09:30:32.127]                   args[[name]] <- ""
[09:30:32.127]                 }
[09:30:32.127]                 NAMES <- toupper(removed)
[09:30:32.127]                 for (kk in seq_along(NAMES)) {
[09:30:32.127]                   name <- removed[[kk]]
[09:30:32.127]                   NAME <- NAMES[[kk]]
[09:30:32.127]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:32.127]                     next
[09:30:32.127]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:32.127]                 }
[09:30:32.127]                 if (length(args) > 0) 
[09:30:32.127]                   base::do.call(base::Sys.setenv, args = args)
[09:30:32.127]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:30:32.127]             }
[09:30:32.127]             else {
[09:30:32.127]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:30:32.127]             }
[09:30:32.127]             {
[09:30:32.127]                 if (base::length(...future.futureOptionsAdded) > 
[09:30:32.127]                   0L) {
[09:30:32.127]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:30:32.127]                   base::names(opts) <- ...future.futureOptionsAdded
[09:30:32.127]                   base::options(opts)
[09:30:32.127]                 }
[09:30:32.127]                 {
[09:30:32.127]                   {
[09:30:32.127]                     base::options(mc.cores = ...future.mc.cores.old)
[09:30:32.127]                     NULL
[09:30:32.127]                   }
[09:30:32.127]                   options(future.plan = NULL)
[09:30:32.127]                   if (is.na(NA_character_)) 
[09:30:32.127]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:30:32.127]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:30:32.127]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:30:32.127]                     .init = FALSE)
[09:30:32.127]                 }
[09:30:32.127]             }
[09:30:32.127]         }
[09:30:32.127]     })
[09:30:32.127]     if (TRUE) {
[09:30:32.127]         base::sink(type = "output", split = FALSE)
[09:30:32.127]         if (TRUE) {
[09:30:32.127]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:30:32.127]         }
[09:30:32.127]         else {
[09:30:32.127]             ...future.result["stdout"] <- base::list(NULL)
[09:30:32.127]         }
[09:30:32.127]         base::close(...future.stdout)
[09:30:32.127]         ...future.stdout <- NULL
[09:30:32.127]     }
[09:30:32.127]     ...future.result$conditions <- ...future.conditions
[09:30:32.127]     ...future.result$finished <- base::Sys.time()
[09:30:32.127]     ...future.result
[09:30:32.127] }
[09:30:32.178] MultisessionFuture started
[09:30:32.179] result() for ClusterFuture ...
[09:30:32.180] receiveMessageFromWorker() for ClusterFuture ...
[09:30:32.180] - Validating connection of MultisessionFuture
[09:30:32.210] - received message: FutureResult
[09:30:32.210] - Received FutureResult
[09:30:32.213] - Erased future from FutureRegistry
[09:30:32.213] result() for ClusterFuture ...
[09:30:32.213] - result already collected: FutureResult
[09:30:32.213] result() for ClusterFuture ... done
[09:30:32.214] receiveMessageFromWorker() for ClusterFuture ... done
[09:30:32.214] result() for ClusterFuture ... done
[09:30:32.214] result() for ClusterFuture ...
[09:30:32.214] - result already collected: FutureResult
[09:30:32.214] result() for ClusterFuture ... done
[09:30:32.214] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[09:30:32.214] plan(): nbrOfWorkers() = 2
> js <- capture_journals({
+   fs <- lapply(3:1, FUN = function(x) future(slow_fcn(x)))
+   vs <- value(fs)
+ })
[09:30:32.215] getGlobalsAndPackages() ...
[09:30:32.215] Searching for globals...
[09:30:32.221] - globals found: [6] ‘slow_fcn’, ‘x’, ‘{’, ‘Sys.sleep’, ‘+’, ‘/’
[09:30:32.221] Searching for globals ... DONE
[09:30:32.222] Resolving globals: FALSE
[09:30:32.223] The total size of the 2 globals is 1.20 KiB (1232 bytes)
[09:30:32.223] The total size of the 2 globals exported for future expression (‘slow_fcn(x)’) is 1.20 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘slow_fcn’ (1.15 KiB of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[09:30:32.224] - globals: [2] ‘slow_fcn’, ‘x’
[09:30:32.224] 
[09:30:32.224] getGlobalsAndPackages() ... DONE
[09:30:32.226] run() for ‘Future’ ...
[09:30:32.226] - state: ‘created’
[09:30:32.226] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:30:32.237] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:30:32.237] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:30:32.237]   - Field: ‘node’
[09:30:32.237]   - Field: ‘label’
[09:30:32.237]   - Field: ‘local’
[09:30:32.237]   - Field: ‘owner’
[09:30:32.238]   - Field: ‘envir’
[09:30:32.238]   - Field: ‘workers’
[09:30:32.238]   - Field: ‘packages’
[09:30:32.238]   - Field: ‘gc’
[09:30:32.238]   - Field: ‘conditions’
[09:30:32.238]   - Field: ‘persistent’
[09:30:32.238]   - Field: ‘expr’
[09:30:32.238]   - Field: ‘uuid’
[09:30:32.238]   - Field: ‘seed’
[09:30:32.239]   - Field: ‘version’
[09:30:32.239]   - Field: ‘result’
[09:30:32.239]   - Field: ‘asynchronous’
[09:30:32.239]   - Field: ‘calls’
[09:30:32.239]   - Field: ‘globals’
[09:30:32.239]   - Field: ‘stdout’
[09:30:32.239]   - Field: ‘earlySignal’
[09:30:32.239]   - Field: ‘lazy’
[09:30:32.239]   - Field: ‘state’
[09:30:32.240] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:30:32.240] - Launch lazy future ...
[09:30:32.240] Packages needed by the future expression (n = 0): <none>
[09:30:32.240] Packages needed by future strategies (n = 0): <none>
[09:30:32.241] {
[09:30:32.241]     {
[09:30:32.241]         {
[09:30:32.241]             ...future.startTime <- base::Sys.time()
[09:30:32.241]             {
[09:30:32.241]                 {
[09:30:32.241]                   {
[09:30:32.241]                     {
[09:30:32.241]                       base::local({
[09:30:32.241]                         has_future <- base::requireNamespace("future", 
[09:30:32.241]                           quietly = TRUE)
[09:30:32.241]                         if (has_future) {
[09:30:32.241]                           ns <- base::getNamespace("future")
[09:30:32.241]                           version <- ns[[".package"]][["version"]]
[09:30:32.241]                           if (is.null(version)) 
[09:30:32.241]                             version <- utils::packageVersion("future")
[09:30:32.241]                         }
[09:30:32.241]                         else {
[09:30:32.241]                           version <- NULL
[09:30:32.241]                         }
[09:30:32.241]                         if (!has_future || version < "1.8.0") {
[09:30:32.241]                           info <- base::c(r_version = base::gsub("R version ", 
[09:30:32.241]                             "", base::R.version$version.string), 
[09:30:32.241]                             platform = base::sprintf("%s (%s-bit)", 
[09:30:32.241]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:30:32.241]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:30:32.241]                               "release", "version")], collapse = " "), 
[09:30:32.241]                             hostname = base::Sys.info()[["nodename"]])
[09:30:32.241]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:30:32.241]                             info)
[09:30:32.241]                           info <- base::paste(info, collapse = "; ")
[09:30:32.241]                           if (!has_future) {
[09:30:32.241]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:30:32.241]                               info)
[09:30:32.241]                           }
[09:30:32.241]                           else {
[09:30:32.241]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:30:32.241]                               info, version)
[09:30:32.241]                           }
[09:30:32.241]                           base::stop(msg)
[09:30:32.241]                         }
[09:30:32.241]                       })
[09:30:32.241]                     }
[09:30:32.241]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:30:32.241]                     base::options(mc.cores = 1L)
[09:30:32.241]                   }
[09:30:32.241]                   ...future.strategy.old <- future::plan("list")
[09:30:32.241]                   options(future.plan = NULL)
[09:30:32.241]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:30:32.241]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:30:32.241]                 }
[09:30:32.241]                 ...future.workdir <- getwd()
[09:30:32.241]             }
[09:30:32.241]             ...future.oldOptions <- base::as.list(base::.Options)
[09:30:32.241]             ...future.oldEnvVars <- base::Sys.getenv()
[09:30:32.241]         }
[09:30:32.241]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:30:32.241]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:30:32.241]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:30:32.241]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:30:32.241]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:30:32.241]             future.stdout.windows.reencode = NULL, width = 80L)
[09:30:32.241]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:30:32.241]             base::names(...future.oldOptions))
[09:30:32.241]     }
[09:30:32.241]     if (FALSE) {
[09:30:32.241]     }
[09:30:32.241]     else {
[09:30:32.241]         if (TRUE) {
[09:30:32.241]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:30:32.241]                 open = "w")
[09:30:32.241]         }
[09:30:32.241]         else {
[09:30:32.241]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:30:32.241]                 windows = "NUL", "/dev/null"), open = "w")
[09:30:32.241]         }
[09:30:32.241]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:30:32.241]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:30:32.241]             base::sink(type = "output", split = FALSE)
[09:30:32.241]             base::close(...future.stdout)
[09:30:32.241]         }, add = TRUE)
[09:30:32.241]     }
[09:30:32.241]     ...future.frame <- base::sys.nframe()
[09:30:32.241]     ...future.conditions <- base::list()
[09:30:32.241]     ...future.rng <- base::globalenv()$.Random.seed
[09:30:32.241]     if (FALSE) {
[09:30:32.241]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:30:32.241]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:30:32.241]     }
[09:30:32.241]     ...future.result <- base::tryCatch({
[09:30:32.241]         base::withCallingHandlers({
[09:30:32.241]             ...future.value <- base::withVisible(base::local({
[09:30:32.241]                 ...future.makeSendCondition <- base::local({
[09:30:32.241]                   sendCondition <- NULL
[09:30:32.241]                   function(frame = 1L) {
[09:30:32.241]                     if (is.function(sendCondition)) 
[09:30:32.241]                       return(sendCondition)
[09:30:32.241]                     ns <- getNamespace("parallel")
[09:30:32.241]                     if (exists("sendData", mode = "function", 
[09:30:32.241]                       envir = ns)) {
[09:30:32.241]                       parallel_sendData <- get("sendData", mode = "function", 
[09:30:32.241]                         envir = ns)
[09:30:32.241]                       envir <- sys.frame(frame)
[09:30:32.241]                       master <- NULL
[09:30:32.241]                       while (!identical(envir, .GlobalEnv) && 
[09:30:32.241]                         !identical(envir, emptyenv())) {
[09:30:32.241]                         if (exists("master", mode = "list", envir = envir, 
[09:30:32.241]                           inherits = FALSE)) {
[09:30:32.241]                           master <- get("master", mode = "list", 
[09:30:32.241]                             envir = envir, inherits = FALSE)
[09:30:32.241]                           if (inherits(master, c("SOCKnode", 
[09:30:32.241]                             "SOCK0node"))) {
[09:30:32.241]                             sendCondition <<- function(cond) {
[09:30:32.241]                               data <- list(type = "VALUE", value = cond, 
[09:30:32.241]                                 success = TRUE)
[09:30:32.241]                               parallel_sendData(master, data)
[09:30:32.241]                             }
[09:30:32.241]                             return(sendCondition)
[09:30:32.241]                           }
[09:30:32.241]                         }
[09:30:32.241]                         frame <- frame + 1L
[09:30:32.241]                         envir <- sys.frame(frame)
[09:30:32.241]                       }
[09:30:32.241]                     }
[09:30:32.241]                     sendCondition <<- function(cond) NULL
[09:30:32.241]                   }
[09:30:32.241]                 })
[09:30:32.241]                 withCallingHandlers({
[09:30:32.241]                   slow_fcn(x)
[09:30:32.241]                 }, immediateCondition = function(cond) {
[09:30:32.241]                   sendCondition <- ...future.makeSendCondition()
[09:30:32.241]                   sendCondition(cond)
[09:30:32.241]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:32.241]                   {
[09:30:32.241]                     inherits <- base::inherits
[09:30:32.241]                     invokeRestart <- base::invokeRestart
[09:30:32.241]                     is.null <- base::is.null
[09:30:32.241]                     muffled <- FALSE
[09:30:32.241]                     if (inherits(cond, "message")) {
[09:30:32.241]                       muffled <- grepl(pattern, "muffleMessage")
[09:30:32.241]                       if (muffled) 
[09:30:32.241]                         invokeRestart("muffleMessage")
[09:30:32.241]                     }
[09:30:32.241]                     else if (inherits(cond, "warning")) {
[09:30:32.241]                       muffled <- grepl(pattern, "muffleWarning")
[09:30:32.241]                       if (muffled) 
[09:30:32.241]                         invokeRestart("muffleWarning")
[09:30:32.241]                     }
[09:30:32.241]                     else if (inherits(cond, "condition")) {
[09:30:32.241]                       if (!is.null(pattern)) {
[09:30:32.241]                         computeRestarts <- base::computeRestarts
[09:30:32.241]                         grepl <- base::grepl
[09:30:32.241]                         restarts <- computeRestarts(cond)
[09:30:32.241]                         for (restart in restarts) {
[09:30:32.241]                           name <- restart$name
[09:30:32.241]                           if (is.null(name)) 
[09:30:32.241]                             next
[09:30:32.241]                           if (!grepl(pattern, name)) 
[09:30:32.241]                             next
[09:30:32.241]                           invokeRestart(restart)
[09:30:32.241]                           muffled <- TRUE
[09:30:32.241]                           break
[09:30:32.241]                         }
[09:30:32.241]                       }
[09:30:32.241]                     }
[09:30:32.241]                     invisible(muffled)
[09:30:32.241]                   }
[09:30:32.241]                   muffleCondition(cond)
[09:30:32.241]                 })
[09:30:32.241]             }))
[09:30:32.241]             future::FutureResult(value = ...future.value$value, 
[09:30:32.241]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:32.241]                   ...future.rng), globalenv = if (FALSE) 
[09:30:32.241]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:30:32.241]                     ...future.globalenv.names))
[09:30:32.241]                 else NULL, started = ...future.startTime, version = "1.8")
[09:30:32.241]         }, condition = base::local({
[09:30:32.241]             c <- base::c
[09:30:32.241]             inherits <- base::inherits
[09:30:32.241]             invokeRestart <- base::invokeRestart
[09:30:32.241]             length <- base::length
[09:30:32.241]             list <- base::list
[09:30:32.241]             seq.int <- base::seq.int
[09:30:32.241]             signalCondition <- base::signalCondition
[09:30:32.241]             sys.calls <- base::sys.calls
[09:30:32.241]             `[[` <- base::`[[`
[09:30:32.241]             `+` <- base::`+`
[09:30:32.241]             `<<-` <- base::`<<-`
[09:30:32.241]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:30:32.241]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:30:32.241]                   3L)]
[09:30:32.241]             }
[09:30:32.241]             function(cond) {
[09:30:32.241]                 is_error <- inherits(cond, "error")
[09:30:32.241]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:30:32.241]                   NULL)
[09:30:32.241]                 if (is_error) {
[09:30:32.241]                   sessionInformation <- function() {
[09:30:32.241]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:30:32.241]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:30:32.241]                       search = base::search(), system = base::Sys.info())
[09:30:32.241]                   }
[09:30:32.241]                   ...future.conditions[[length(...future.conditions) + 
[09:30:32.241]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:30:32.241]                     cond$call), session = sessionInformation(), 
[09:30:32.241]                     timestamp = base::Sys.time(), signaled = 0L)
[09:30:32.241]                   signalCondition(cond)
[09:30:32.241]                 }
[09:30:32.241]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:30:32.241]                 "immediateCondition"))) {
[09:30:32.241]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:30:32.241]                   ...future.conditions[[length(...future.conditions) + 
[09:30:32.241]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:30:32.241]                   if (TRUE && !signal) {
[09:30:32.241]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:32.241]                     {
[09:30:32.241]                       inherits <- base::inherits
[09:30:32.241]                       invokeRestart <- base::invokeRestart
[09:30:32.241]                       is.null <- base::is.null
[09:30:32.241]                       muffled <- FALSE
[09:30:32.241]                       if (inherits(cond, "message")) {
[09:30:32.241]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:32.241]                         if (muffled) 
[09:30:32.241]                           invokeRestart("muffleMessage")
[09:30:32.241]                       }
[09:30:32.241]                       else if (inherits(cond, "warning")) {
[09:30:32.241]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:32.241]                         if (muffled) 
[09:30:32.241]                           invokeRestart("muffleWarning")
[09:30:32.241]                       }
[09:30:32.241]                       else if (inherits(cond, "condition")) {
[09:30:32.241]                         if (!is.null(pattern)) {
[09:30:32.241]                           computeRestarts <- base::computeRestarts
[09:30:32.241]                           grepl <- base::grepl
[09:30:32.241]                           restarts <- computeRestarts(cond)
[09:30:32.241]                           for (restart in restarts) {
[09:30:32.241]                             name <- restart$name
[09:30:32.241]                             if (is.null(name)) 
[09:30:32.241]                               next
[09:30:32.241]                             if (!grepl(pattern, name)) 
[09:30:32.241]                               next
[09:30:32.241]                             invokeRestart(restart)
[09:30:32.241]                             muffled <- TRUE
[09:30:32.241]                             break
[09:30:32.241]                           }
[09:30:32.241]                         }
[09:30:32.241]                       }
[09:30:32.241]                       invisible(muffled)
[09:30:32.241]                     }
[09:30:32.241]                     muffleCondition(cond, pattern = "^muffle")
[09:30:32.241]                   }
[09:30:32.241]                 }
[09:30:32.241]                 else {
[09:30:32.241]                   if (TRUE) {
[09:30:32.241]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:32.241]                     {
[09:30:32.241]                       inherits <- base::inherits
[09:30:32.241]                       invokeRestart <- base::invokeRestart
[09:30:32.241]                       is.null <- base::is.null
[09:30:32.241]                       muffled <- FALSE
[09:30:32.241]                       if (inherits(cond, "message")) {
[09:30:32.241]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:32.241]                         if (muffled) 
[09:30:32.241]                           invokeRestart("muffleMessage")
[09:30:32.241]                       }
[09:30:32.241]                       else if (inherits(cond, "warning")) {
[09:30:32.241]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:32.241]                         if (muffled) 
[09:30:32.241]                           invokeRestart("muffleWarning")
[09:30:32.241]                       }
[09:30:32.241]                       else if (inherits(cond, "condition")) {
[09:30:32.241]                         if (!is.null(pattern)) {
[09:30:32.241]                           computeRestarts <- base::computeRestarts
[09:30:32.241]                           grepl <- base::grepl
[09:30:32.241]                           restarts <- computeRestarts(cond)
[09:30:32.241]                           for (restart in restarts) {
[09:30:32.241]                             name <- restart$name
[09:30:32.241]                             if (is.null(name)) 
[09:30:32.241]                               next
[09:30:32.241]                             if (!grepl(pattern, name)) 
[09:30:32.241]                               next
[09:30:32.241]                             invokeRestart(restart)
[09:30:32.241]                             muffled <- TRUE
[09:30:32.241]                             break
[09:30:32.241]                           }
[09:30:32.241]                         }
[09:30:32.241]                       }
[09:30:32.241]                       invisible(muffled)
[09:30:32.241]                     }
[09:30:32.241]                     muffleCondition(cond, pattern = "^muffle")
[09:30:32.241]                   }
[09:30:32.241]                 }
[09:30:32.241]             }
[09:30:32.241]         }))
[09:30:32.241]     }, error = function(ex) {
[09:30:32.241]         base::structure(base::list(value = NULL, visible = NULL, 
[09:30:32.241]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:32.241]                 ...future.rng), started = ...future.startTime, 
[09:30:32.241]             finished = Sys.time(), session_uuid = NA_character_, 
[09:30:32.241]             version = "1.8"), class = "FutureResult")
[09:30:32.241]     }, finally = {
[09:30:32.241]         if (!identical(...future.workdir, getwd())) 
[09:30:32.241]             setwd(...future.workdir)
[09:30:32.241]         {
[09:30:32.241]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:30:32.241]                 ...future.oldOptions$nwarnings <- NULL
[09:30:32.241]             }
[09:30:32.241]             base::options(...future.oldOptions)
[09:30:32.241]             if (.Platform$OS.type == "windows") {
[09:30:32.241]                 old_names <- names(...future.oldEnvVars)
[09:30:32.241]                 envs <- base::Sys.getenv()
[09:30:32.241]                 names <- names(envs)
[09:30:32.241]                 common <- intersect(names, old_names)
[09:30:32.241]                 added <- setdiff(names, old_names)
[09:30:32.241]                 removed <- setdiff(old_names, names)
[09:30:32.241]                 changed <- common[...future.oldEnvVars[common] != 
[09:30:32.241]                   envs[common]]
[09:30:32.241]                 NAMES <- toupper(changed)
[09:30:32.241]                 args <- list()
[09:30:32.241]                 for (kk in seq_along(NAMES)) {
[09:30:32.241]                   name <- changed[[kk]]
[09:30:32.241]                   NAME <- NAMES[[kk]]
[09:30:32.241]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:32.241]                     next
[09:30:32.241]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:32.241]                 }
[09:30:32.241]                 NAMES <- toupper(added)
[09:30:32.241]                 for (kk in seq_along(NAMES)) {
[09:30:32.241]                   name <- added[[kk]]
[09:30:32.241]                   NAME <- NAMES[[kk]]
[09:30:32.241]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:32.241]                     next
[09:30:32.241]                   args[[name]] <- ""
[09:30:32.241]                 }
[09:30:32.241]                 NAMES <- toupper(removed)
[09:30:32.241]                 for (kk in seq_along(NAMES)) {
[09:30:32.241]                   name <- removed[[kk]]
[09:30:32.241]                   NAME <- NAMES[[kk]]
[09:30:32.241]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:32.241]                     next
[09:30:32.241]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:32.241]                 }
[09:30:32.241]                 if (length(args) > 0) 
[09:30:32.241]                   base::do.call(base::Sys.setenv, args = args)
[09:30:32.241]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:30:32.241]             }
[09:30:32.241]             else {
[09:30:32.241]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:30:32.241]             }
[09:30:32.241]             {
[09:30:32.241]                 if (base::length(...future.futureOptionsAdded) > 
[09:30:32.241]                   0L) {
[09:30:32.241]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:30:32.241]                   base::names(opts) <- ...future.futureOptionsAdded
[09:30:32.241]                   base::options(opts)
[09:30:32.241]                 }
[09:30:32.241]                 {
[09:30:32.241]                   {
[09:30:32.241]                     base::options(mc.cores = ...future.mc.cores.old)
[09:30:32.241]                     NULL
[09:30:32.241]                   }
[09:30:32.241]                   options(future.plan = NULL)
[09:30:32.241]                   if (is.na(NA_character_)) 
[09:30:32.241]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:30:32.241]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:30:32.241]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:30:32.241]                     .init = FALSE)
[09:30:32.241]                 }
[09:30:32.241]             }
[09:30:32.241]         }
[09:30:32.241]     })
[09:30:32.241]     if (TRUE) {
[09:30:32.241]         base::sink(type = "output", split = FALSE)
[09:30:32.241]         if (TRUE) {
[09:30:32.241]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:30:32.241]         }
[09:30:32.241]         else {
[09:30:32.241]             ...future.result["stdout"] <- base::list(NULL)
[09:30:32.241]         }
[09:30:32.241]         base::close(...future.stdout)
[09:30:32.241]         ...future.stdout <- NULL
[09:30:32.241]     }
[09:30:32.241]     ...future.result$conditions <- ...future.conditions
[09:30:32.241]     ...future.result$finished <- base::Sys.time()
[09:30:32.241]     ...future.result
[09:30:32.241] }
[09:30:32.246] Exporting 2 global objects (1.20 KiB) to cluster node #1 ...
[09:30:32.247] Exporting ‘slow_fcn’ (1.15 KiB) to cluster node #1 ...
[09:30:32.247] Exporting ‘slow_fcn’ (1.15 KiB) to cluster node #1 ... DONE
[09:30:32.247] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[09:30:32.248] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[09:30:32.248] Exporting 2 global objects (1.20 KiB) to cluster node #1 ... DONE
[09:30:32.249] MultisessionFuture started
[09:30:32.250] - Launch lazy future ... done
[09:30:32.250] run() for ‘MultisessionFuture’ ... done
[09:30:32.251] getGlobalsAndPackages() ...
[09:30:32.252] Searching for globals...
[09:30:32.256] - globals found: [6] ‘slow_fcn’, ‘x’, ‘{’, ‘Sys.sleep’, ‘+’, ‘/’
[09:30:32.256] Searching for globals ... DONE
[09:30:32.256] Resolving globals: FALSE
[09:30:32.257] The total size of the 2 globals is 1.20 KiB (1232 bytes)
[09:30:32.257] The total size of the 2 globals exported for future expression (‘slow_fcn(x)’) is 1.20 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘slow_fcn’ (1.15 KiB of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[09:30:32.257] - globals: [2] ‘slow_fcn’, ‘x’
[09:30:32.257] 
[09:30:32.257] getGlobalsAndPackages() ... DONE
[09:30:32.258] run() for ‘Future’ ...
[09:30:32.258] - state: ‘created’
[09:30:32.258] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:30:32.268] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:30:32.269] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:30:32.269]   - Field: ‘node’
[09:30:32.269]   - Field: ‘label’
[09:30:32.269]   - Field: ‘local’
[09:30:32.269]   - Field: ‘owner’
[09:30:32.269]   - Field: ‘envir’
[09:30:32.269]   - Field: ‘workers’
[09:30:32.269]   - Field: ‘packages’
[09:30:32.269]   - Field: ‘gc’
[09:30:32.269]   - Field: ‘conditions’
[09:30:32.269]   - Field: ‘persistent’
[09:30:32.270]   - Field: ‘expr’
[09:30:32.270]   - Field: ‘uuid’
[09:30:32.270]   - Field: ‘seed’
[09:30:32.270]   - Field: ‘version’
[09:30:32.270]   - Field: ‘result’
[09:30:32.270]   - Field: ‘asynchronous’
[09:30:32.270]   - Field: ‘calls’
[09:30:32.270]   - Field: ‘globals’
[09:30:32.270]   - Field: ‘stdout’
[09:30:32.270]   - Field: ‘earlySignal’
[09:30:32.270]   - Field: ‘lazy’
[09:30:32.271]   - Field: ‘state’
[09:30:32.271] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:30:32.271] - Launch lazy future ...
[09:30:32.271] Packages needed by the future expression (n = 0): <none>
[09:30:32.271] Packages needed by future strategies (n = 0): <none>
[09:30:32.271] {
[09:30:32.271]     {
[09:30:32.271]         {
[09:30:32.271]             ...future.startTime <- base::Sys.time()
[09:30:32.271]             {
[09:30:32.271]                 {
[09:30:32.271]                   {
[09:30:32.271]                     {
[09:30:32.271]                       base::local({
[09:30:32.271]                         has_future <- base::requireNamespace("future", 
[09:30:32.271]                           quietly = TRUE)
[09:30:32.271]                         if (has_future) {
[09:30:32.271]                           ns <- base::getNamespace("future")
[09:30:32.271]                           version <- ns[[".package"]][["version"]]
[09:30:32.271]                           if (is.null(version)) 
[09:30:32.271]                             version <- utils::packageVersion("future")
[09:30:32.271]                         }
[09:30:32.271]                         else {
[09:30:32.271]                           version <- NULL
[09:30:32.271]                         }
[09:30:32.271]                         if (!has_future || version < "1.8.0") {
[09:30:32.271]                           info <- base::c(r_version = base::gsub("R version ", 
[09:30:32.271]                             "", base::R.version$version.string), 
[09:30:32.271]                             platform = base::sprintf("%s (%s-bit)", 
[09:30:32.271]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:30:32.271]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:30:32.271]                               "release", "version")], collapse = " "), 
[09:30:32.271]                             hostname = base::Sys.info()[["nodename"]])
[09:30:32.271]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:30:32.271]                             info)
[09:30:32.271]                           info <- base::paste(info, collapse = "; ")
[09:30:32.271]                           if (!has_future) {
[09:30:32.271]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:30:32.271]                               info)
[09:30:32.271]                           }
[09:30:32.271]                           else {
[09:30:32.271]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:30:32.271]                               info, version)
[09:30:32.271]                           }
[09:30:32.271]                           base::stop(msg)
[09:30:32.271]                         }
[09:30:32.271]                       })
[09:30:32.271]                     }
[09:30:32.271]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:30:32.271]                     base::options(mc.cores = 1L)
[09:30:32.271]                   }
[09:30:32.271]                   ...future.strategy.old <- future::plan("list")
[09:30:32.271]                   options(future.plan = NULL)
[09:30:32.271]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:30:32.271]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:30:32.271]                 }
[09:30:32.271]                 ...future.workdir <- getwd()
[09:30:32.271]             }
[09:30:32.271]             ...future.oldOptions <- base::as.list(base::.Options)
[09:30:32.271]             ...future.oldEnvVars <- base::Sys.getenv()
[09:30:32.271]         }
[09:30:32.271]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:30:32.271]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:30:32.271]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:30:32.271]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:30:32.271]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:30:32.271]             future.stdout.windows.reencode = NULL, width = 80L)
[09:30:32.271]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:30:32.271]             base::names(...future.oldOptions))
[09:30:32.271]     }
[09:30:32.271]     if (FALSE) {
[09:30:32.271]     }
[09:30:32.271]     else {
[09:30:32.271]         if (TRUE) {
[09:30:32.271]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:30:32.271]                 open = "w")
[09:30:32.271]         }
[09:30:32.271]         else {
[09:30:32.271]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:30:32.271]                 windows = "NUL", "/dev/null"), open = "w")
[09:30:32.271]         }
[09:30:32.271]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:30:32.271]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:30:32.271]             base::sink(type = "output", split = FALSE)
[09:30:32.271]             base::close(...future.stdout)
[09:30:32.271]         }, add = TRUE)
[09:30:32.271]     }
[09:30:32.271]     ...future.frame <- base::sys.nframe()
[09:30:32.271]     ...future.conditions <- base::list()
[09:30:32.271]     ...future.rng <- base::globalenv()$.Random.seed
[09:30:32.271]     if (FALSE) {
[09:30:32.271]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:30:32.271]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:30:32.271]     }
[09:30:32.271]     ...future.result <- base::tryCatch({
[09:30:32.271]         base::withCallingHandlers({
[09:30:32.271]             ...future.value <- base::withVisible(base::local({
[09:30:32.271]                 ...future.makeSendCondition <- base::local({
[09:30:32.271]                   sendCondition <- NULL
[09:30:32.271]                   function(frame = 1L) {
[09:30:32.271]                     if (is.function(sendCondition)) 
[09:30:32.271]                       return(sendCondition)
[09:30:32.271]                     ns <- getNamespace("parallel")
[09:30:32.271]                     if (exists("sendData", mode = "function", 
[09:30:32.271]                       envir = ns)) {
[09:30:32.271]                       parallel_sendData <- get("sendData", mode = "function", 
[09:30:32.271]                         envir = ns)
[09:30:32.271]                       envir <- sys.frame(frame)
[09:30:32.271]                       master <- NULL
[09:30:32.271]                       while (!identical(envir, .GlobalEnv) && 
[09:30:32.271]                         !identical(envir, emptyenv())) {
[09:30:32.271]                         if (exists("master", mode = "list", envir = envir, 
[09:30:32.271]                           inherits = FALSE)) {
[09:30:32.271]                           master <- get("master", mode = "list", 
[09:30:32.271]                             envir = envir, inherits = FALSE)
[09:30:32.271]                           if (inherits(master, c("SOCKnode", 
[09:30:32.271]                             "SOCK0node"))) {
[09:30:32.271]                             sendCondition <<- function(cond) {
[09:30:32.271]                               data <- list(type = "VALUE", value = cond, 
[09:30:32.271]                                 success = TRUE)
[09:30:32.271]                               parallel_sendData(master, data)
[09:30:32.271]                             }
[09:30:32.271]                             return(sendCondition)
[09:30:32.271]                           }
[09:30:32.271]                         }
[09:30:32.271]                         frame <- frame + 1L
[09:30:32.271]                         envir <- sys.frame(frame)
[09:30:32.271]                       }
[09:30:32.271]                     }
[09:30:32.271]                     sendCondition <<- function(cond) NULL
[09:30:32.271]                   }
[09:30:32.271]                 })
[09:30:32.271]                 withCallingHandlers({
[09:30:32.271]                   slow_fcn(x)
[09:30:32.271]                 }, immediateCondition = function(cond) {
[09:30:32.271]                   sendCondition <- ...future.makeSendCondition()
[09:30:32.271]                   sendCondition(cond)
[09:30:32.271]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:32.271]                   {
[09:30:32.271]                     inherits <- base::inherits
[09:30:32.271]                     invokeRestart <- base::invokeRestart
[09:30:32.271]                     is.null <- base::is.null
[09:30:32.271]                     muffled <- FALSE
[09:30:32.271]                     if (inherits(cond, "message")) {
[09:30:32.271]                       muffled <- grepl(pattern, "muffleMessage")
[09:30:32.271]                       if (muffled) 
[09:30:32.271]                         invokeRestart("muffleMessage")
[09:30:32.271]                     }
[09:30:32.271]                     else if (inherits(cond, "warning")) {
[09:30:32.271]                       muffled <- grepl(pattern, "muffleWarning")
[09:30:32.271]                       if (muffled) 
[09:30:32.271]                         invokeRestart("muffleWarning")
[09:30:32.271]                     }
[09:30:32.271]                     else if (inherits(cond, "condition")) {
[09:30:32.271]                       if (!is.null(pattern)) {
[09:30:32.271]                         computeRestarts <- base::computeRestarts
[09:30:32.271]                         grepl <- base::grepl
[09:30:32.271]                         restarts <- computeRestarts(cond)
[09:30:32.271]                         for (restart in restarts) {
[09:30:32.271]                           name <- restart$name
[09:30:32.271]                           if (is.null(name)) 
[09:30:32.271]                             next
[09:30:32.271]                           if (!grepl(pattern, name)) 
[09:30:32.271]                             next
[09:30:32.271]                           invokeRestart(restart)
[09:30:32.271]                           muffled <- TRUE
[09:30:32.271]                           break
[09:30:32.271]                         }
[09:30:32.271]                       }
[09:30:32.271]                     }
[09:30:32.271]                     invisible(muffled)
[09:30:32.271]                   }
[09:30:32.271]                   muffleCondition(cond)
[09:30:32.271]                 })
[09:30:32.271]             }))
[09:30:32.271]             future::FutureResult(value = ...future.value$value, 
[09:30:32.271]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:32.271]                   ...future.rng), globalenv = if (FALSE) 
[09:30:32.271]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:30:32.271]                     ...future.globalenv.names))
[09:30:32.271]                 else NULL, started = ...future.startTime, version = "1.8")
[09:30:32.271]         }, condition = base::local({
[09:30:32.271]             c <- base::c
[09:30:32.271]             inherits <- base::inherits
[09:30:32.271]             invokeRestart <- base::invokeRestart
[09:30:32.271]             length <- base::length
[09:30:32.271]             list <- base::list
[09:30:32.271]             seq.int <- base::seq.int
[09:30:32.271]             signalCondition <- base::signalCondition
[09:30:32.271]             sys.calls <- base::sys.calls
[09:30:32.271]             `[[` <- base::`[[`
[09:30:32.271]             `+` <- base::`+`
[09:30:32.271]             `<<-` <- base::`<<-`
[09:30:32.271]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:30:32.271]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:30:32.271]                   3L)]
[09:30:32.271]             }
[09:30:32.271]             function(cond) {
[09:30:32.271]                 is_error <- inherits(cond, "error")
[09:30:32.271]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:30:32.271]                   NULL)
[09:30:32.271]                 if (is_error) {
[09:30:32.271]                   sessionInformation <- function() {
[09:30:32.271]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:30:32.271]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:30:32.271]                       search = base::search(), system = base::Sys.info())
[09:30:32.271]                   }
[09:30:32.271]                   ...future.conditions[[length(...future.conditions) + 
[09:30:32.271]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:30:32.271]                     cond$call), session = sessionInformation(), 
[09:30:32.271]                     timestamp = base::Sys.time(), signaled = 0L)
[09:30:32.271]                   signalCondition(cond)
[09:30:32.271]                 }
[09:30:32.271]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:30:32.271]                 "immediateCondition"))) {
[09:30:32.271]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:30:32.271]                   ...future.conditions[[length(...future.conditions) + 
[09:30:32.271]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:30:32.271]                   if (TRUE && !signal) {
[09:30:32.271]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:32.271]                     {
[09:30:32.271]                       inherits <- base::inherits
[09:30:32.271]                       invokeRestart <- base::invokeRestart
[09:30:32.271]                       is.null <- base::is.null
[09:30:32.271]                       muffled <- FALSE
[09:30:32.271]                       if (inherits(cond, "message")) {
[09:30:32.271]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:32.271]                         if (muffled) 
[09:30:32.271]                           invokeRestart("muffleMessage")
[09:30:32.271]                       }
[09:30:32.271]                       else if (inherits(cond, "warning")) {
[09:30:32.271]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:32.271]                         if (muffled) 
[09:30:32.271]                           invokeRestart("muffleWarning")
[09:30:32.271]                       }
[09:30:32.271]                       else if (inherits(cond, "condition")) {
[09:30:32.271]                         if (!is.null(pattern)) {
[09:30:32.271]                           computeRestarts <- base::computeRestarts
[09:30:32.271]                           grepl <- base::grepl
[09:30:32.271]                           restarts <- computeRestarts(cond)
[09:30:32.271]                           for (restart in restarts) {
[09:30:32.271]                             name <- restart$name
[09:30:32.271]                             if (is.null(name)) 
[09:30:32.271]                               next
[09:30:32.271]                             if (!grepl(pattern, name)) 
[09:30:32.271]                               next
[09:30:32.271]                             invokeRestart(restart)
[09:30:32.271]                             muffled <- TRUE
[09:30:32.271]                             break
[09:30:32.271]                           }
[09:30:32.271]                         }
[09:30:32.271]                       }
[09:30:32.271]                       invisible(muffled)
[09:30:32.271]                     }
[09:30:32.271]                     muffleCondition(cond, pattern = "^muffle")
[09:30:32.271]                   }
[09:30:32.271]                 }
[09:30:32.271]                 else {
[09:30:32.271]                   if (TRUE) {
[09:30:32.271]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:32.271]                     {
[09:30:32.271]                       inherits <- base::inherits
[09:30:32.271]                       invokeRestart <- base::invokeRestart
[09:30:32.271]                       is.null <- base::is.null
[09:30:32.271]                       muffled <- FALSE
[09:30:32.271]                       if (inherits(cond, "message")) {
[09:30:32.271]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:32.271]                         if (muffled) 
[09:30:32.271]                           invokeRestart("muffleMessage")
[09:30:32.271]                       }
[09:30:32.271]                       else if (inherits(cond, "warning")) {
[09:30:32.271]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:32.271]                         if (muffled) 
[09:30:32.271]                           invokeRestart("muffleWarning")
[09:30:32.271]                       }
[09:30:32.271]                       else if (inherits(cond, "condition")) {
[09:30:32.271]                         if (!is.null(pattern)) {
[09:30:32.271]                           computeRestarts <- base::computeRestarts
[09:30:32.271]                           grepl <- base::grepl
[09:30:32.271]                           restarts <- computeRestarts(cond)
[09:30:32.271]                           for (restart in restarts) {
[09:30:32.271]                             name <- restart$name
[09:30:32.271]                             if (is.null(name)) 
[09:30:32.271]                               next
[09:30:32.271]                             if (!grepl(pattern, name)) 
[09:30:32.271]                               next
[09:30:32.271]                             invokeRestart(restart)
[09:30:32.271]                             muffled <- TRUE
[09:30:32.271]                             break
[09:30:32.271]                           }
[09:30:32.271]                         }
[09:30:32.271]                       }
[09:30:32.271]                       invisible(muffled)
[09:30:32.271]                     }
[09:30:32.271]                     muffleCondition(cond, pattern = "^muffle")
[09:30:32.271]                   }
[09:30:32.271]                 }
[09:30:32.271]             }
[09:30:32.271]         }))
[09:30:32.271]     }, error = function(ex) {
[09:30:32.271]         base::structure(base::list(value = NULL, visible = NULL, 
[09:30:32.271]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:32.271]                 ...future.rng), started = ...future.startTime, 
[09:30:32.271]             finished = Sys.time(), session_uuid = NA_character_, 
[09:30:32.271]             version = "1.8"), class = "FutureResult")
[09:30:32.271]     }, finally = {
[09:30:32.271]         if (!identical(...future.workdir, getwd())) 
[09:30:32.271]             setwd(...future.workdir)
[09:30:32.271]         {
[09:30:32.271]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:30:32.271]                 ...future.oldOptions$nwarnings <- NULL
[09:30:32.271]             }
[09:30:32.271]             base::options(...future.oldOptions)
[09:30:32.271]             if (.Platform$OS.type == "windows") {
[09:30:32.271]                 old_names <- names(...future.oldEnvVars)
[09:30:32.271]                 envs <- base::Sys.getenv()
[09:30:32.271]                 names <- names(envs)
[09:30:32.271]                 common <- intersect(names, old_names)
[09:30:32.271]                 added <- setdiff(names, old_names)
[09:30:32.271]                 removed <- setdiff(old_names, names)
[09:30:32.271]                 changed <- common[...future.oldEnvVars[common] != 
[09:30:32.271]                   envs[common]]
[09:30:32.271]                 NAMES <- toupper(changed)
[09:30:32.271]                 args <- list()
[09:30:32.271]                 for (kk in seq_along(NAMES)) {
[09:30:32.271]                   name <- changed[[kk]]
[09:30:32.271]                   NAME <- NAMES[[kk]]
[09:30:32.271]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:32.271]                     next
[09:30:32.271]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:32.271]                 }
[09:30:32.271]                 NAMES <- toupper(added)
[09:30:32.271]                 for (kk in seq_along(NAMES)) {
[09:30:32.271]                   name <- added[[kk]]
[09:30:32.271]                   NAME <- NAMES[[kk]]
[09:30:32.271]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:32.271]                     next
[09:30:32.271]                   args[[name]] <- ""
[09:30:32.271]                 }
[09:30:32.271]                 NAMES <- toupper(removed)
[09:30:32.271]                 for (kk in seq_along(NAMES)) {
[09:30:32.271]                   name <- removed[[kk]]
[09:30:32.271]                   NAME <- NAMES[[kk]]
[09:30:32.271]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:32.271]                     next
[09:30:32.271]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:32.271]                 }
[09:30:32.271]                 if (length(args) > 0) 
[09:30:32.271]                   base::do.call(base::Sys.setenv, args = args)
[09:30:32.271]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:30:32.271]             }
[09:30:32.271]             else {
[09:30:32.271]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:30:32.271]             }
[09:30:32.271]             {
[09:30:32.271]                 if (base::length(...future.futureOptionsAdded) > 
[09:30:32.271]                   0L) {
[09:30:32.271]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:30:32.271]                   base::names(opts) <- ...future.futureOptionsAdded
[09:30:32.271]                   base::options(opts)
[09:30:32.271]                 }
[09:30:32.271]                 {
[09:30:32.271]                   {
[09:30:32.271]                     base::options(mc.cores = ...future.mc.cores.old)
[09:30:32.271]                     NULL
[09:30:32.271]                   }
[09:30:32.271]                   options(future.plan = NULL)
[09:30:32.271]                   if (is.na(NA_character_)) 
[09:30:32.271]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:30:32.271]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:30:32.271]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:30:32.271]                     .init = FALSE)
[09:30:32.271]                 }
[09:30:32.271]             }
[09:30:32.271]         }
[09:30:32.271]     })
[09:30:32.271]     if (TRUE) {
[09:30:32.271]         base::sink(type = "output", split = FALSE)
[09:30:32.271]         if (TRUE) {
[09:30:32.271]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:30:32.271]         }
[09:30:32.271]         else {
[09:30:32.271]             ...future.result["stdout"] <- base::list(NULL)
[09:30:32.271]         }
[09:30:32.271]         base::close(...future.stdout)
[09:30:32.271]         ...future.stdout <- NULL
[09:30:32.271]     }
[09:30:32.271]     ...future.result$conditions <- ...future.conditions
[09:30:32.271]     ...future.result$finished <- base::Sys.time()
[09:30:32.271]     ...future.result
[09:30:32.271] }
[09:30:32.326] Exporting 2 global objects (1.20 KiB) to cluster node #2 ...
[09:30:32.326] Exporting ‘slow_fcn’ (1.15 KiB) to cluster node #2 ...
[09:30:32.326] Exporting ‘slow_fcn’ (1.15 KiB) to cluster node #2 ... DONE
[09:30:32.326] Exporting ‘x’ (56 bytes) to cluster node #2 ...
[09:30:32.327] Exporting ‘x’ (56 bytes) to cluster node #2 ... DONE
[09:30:32.327] Exporting 2 global objects (1.20 KiB) to cluster node #2 ... DONE
[09:30:32.328] MultisessionFuture started
[09:30:32.328] - Launch lazy future ... done
[09:30:32.329] run() for ‘MultisessionFuture’ ... done
[09:30:32.329] getGlobalsAndPackages() ...
[09:30:32.329] Searching for globals...
[09:30:32.330] - globals found: [6] ‘slow_fcn’, ‘x’, ‘{’, ‘Sys.sleep’, ‘+’, ‘/’
[09:30:32.330] Searching for globals ... DONE
[09:30:32.330] Resolving globals: FALSE
[09:30:32.331] The total size of the 2 globals is 1.20 KiB (1232 bytes)
[09:30:32.331] The total size of the 2 globals exported for future expression (‘slow_fcn(x)’) is 1.20 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘slow_fcn’ (1.15 KiB of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[09:30:32.331] - globals: [2] ‘slow_fcn’, ‘x’
[09:30:32.331] 
[09:30:32.332] getGlobalsAndPackages() ... DONE
[09:30:32.332] run() for ‘Future’ ...
[09:30:32.332] - state: ‘created’
[09:30:32.332] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:30:32.343] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:30:32.343] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:30:32.343]   - Field: ‘node’
[09:30:32.343]   - Field: ‘label’
[09:30:32.343]   - Field: ‘local’
[09:30:32.343]   - Field: ‘owner’
[09:30:32.343]   - Field: ‘envir’
[09:30:32.344]   - Field: ‘workers’
[09:30:32.344]   - Field: ‘packages’
[09:30:32.344]   - Field: ‘gc’
[09:30:32.344]   - Field: ‘conditions’
[09:30:32.344]   - Field: ‘persistent’
[09:30:32.344]   - Field: ‘expr’
[09:30:32.344]   - Field: ‘uuid’
[09:30:32.344]   - Field: ‘seed’
[09:30:32.344]   - Field: ‘version’
[09:30:32.344]   - Field: ‘result’
[09:30:32.344]   - Field: ‘asynchronous’
[09:30:32.345]   - Field: ‘calls’
[09:30:32.345]   - Field: ‘globals’
[09:30:32.345]   - Field: ‘stdout’
[09:30:32.345]   - Field: ‘earlySignal’
[09:30:32.345]   - Field: ‘lazy’
[09:30:32.345]   - Field: ‘state’
[09:30:32.345] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:30:32.345] - Launch lazy future ...
[09:30:32.345] Packages needed by the future expression (n = 0): <none>
[09:30:32.346] Packages needed by future strategies (n = 0): <none>
[09:30:32.346] {
[09:30:32.346]     {
[09:30:32.346]         {
[09:30:32.346]             ...future.startTime <- base::Sys.time()
[09:30:32.346]             {
[09:30:32.346]                 {
[09:30:32.346]                   {
[09:30:32.346]                     {
[09:30:32.346]                       base::local({
[09:30:32.346]                         has_future <- base::requireNamespace("future", 
[09:30:32.346]                           quietly = TRUE)
[09:30:32.346]                         if (has_future) {
[09:30:32.346]                           ns <- base::getNamespace("future")
[09:30:32.346]                           version <- ns[[".package"]][["version"]]
[09:30:32.346]                           if (is.null(version)) 
[09:30:32.346]                             version <- utils::packageVersion("future")
[09:30:32.346]                         }
[09:30:32.346]                         else {
[09:30:32.346]                           version <- NULL
[09:30:32.346]                         }
[09:30:32.346]                         if (!has_future || version < "1.8.0") {
[09:30:32.346]                           info <- base::c(r_version = base::gsub("R version ", 
[09:30:32.346]                             "", base::R.version$version.string), 
[09:30:32.346]                             platform = base::sprintf("%s (%s-bit)", 
[09:30:32.346]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:30:32.346]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:30:32.346]                               "release", "version")], collapse = " "), 
[09:30:32.346]                             hostname = base::Sys.info()[["nodename"]])
[09:30:32.346]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:30:32.346]                             info)
[09:30:32.346]                           info <- base::paste(info, collapse = "; ")
[09:30:32.346]                           if (!has_future) {
[09:30:32.346]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:30:32.346]                               info)
[09:30:32.346]                           }
[09:30:32.346]                           else {
[09:30:32.346]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:30:32.346]                               info, version)
[09:30:32.346]                           }
[09:30:32.346]                           base::stop(msg)
[09:30:32.346]                         }
[09:30:32.346]                       })
[09:30:32.346]                     }
[09:30:32.346]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:30:32.346]                     base::options(mc.cores = 1L)
[09:30:32.346]                   }
[09:30:32.346]                   ...future.strategy.old <- future::plan("list")
[09:30:32.346]                   options(future.plan = NULL)
[09:30:32.346]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:30:32.346]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:30:32.346]                 }
[09:30:32.346]                 ...future.workdir <- getwd()
[09:30:32.346]             }
[09:30:32.346]             ...future.oldOptions <- base::as.list(base::.Options)
[09:30:32.346]             ...future.oldEnvVars <- base::Sys.getenv()
[09:30:32.346]         }
[09:30:32.346]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:30:32.346]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:30:32.346]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:30:32.346]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:30:32.346]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:30:32.346]             future.stdout.windows.reencode = NULL, width = 80L)
[09:30:32.346]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:30:32.346]             base::names(...future.oldOptions))
[09:30:32.346]     }
[09:30:32.346]     if (FALSE) {
[09:30:32.346]     }
[09:30:32.346]     else {
[09:30:32.346]         if (TRUE) {
[09:30:32.346]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:30:32.346]                 open = "w")
[09:30:32.346]         }
[09:30:32.346]         else {
[09:30:32.346]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:30:32.346]                 windows = "NUL", "/dev/null"), open = "w")
[09:30:32.346]         }
[09:30:32.346]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:30:32.346]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:30:32.346]             base::sink(type = "output", split = FALSE)
[09:30:32.346]             base::close(...future.stdout)
[09:30:32.346]         }, add = TRUE)
[09:30:32.346]     }
[09:30:32.346]     ...future.frame <- base::sys.nframe()
[09:30:32.346]     ...future.conditions <- base::list()
[09:30:32.346]     ...future.rng <- base::globalenv()$.Random.seed
[09:30:32.346]     if (FALSE) {
[09:30:32.346]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:30:32.346]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:30:32.346]     }
[09:30:32.346]     ...future.result <- base::tryCatch({
[09:30:32.346]         base::withCallingHandlers({
[09:30:32.346]             ...future.value <- base::withVisible(base::local({
[09:30:32.346]                 ...future.makeSendCondition <- base::local({
[09:30:32.346]                   sendCondition <- NULL
[09:30:32.346]                   function(frame = 1L) {
[09:30:32.346]                     if (is.function(sendCondition)) 
[09:30:32.346]                       return(sendCondition)
[09:30:32.346]                     ns <- getNamespace("parallel")
[09:30:32.346]                     if (exists("sendData", mode = "function", 
[09:30:32.346]                       envir = ns)) {
[09:30:32.346]                       parallel_sendData <- get("sendData", mode = "function", 
[09:30:32.346]                         envir = ns)
[09:30:32.346]                       envir <- sys.frame(frame)
[09:30:32.346]                       master <- NULL
[09:30:32.346]                       while (!identical(envir, .GlobalEnv) && 
[09:30:32.346]                         !identical(envir, emptyenv())) {
[09:30:32.346]                         if (exists("master", mode = "list", envir = envir, 
[09:30:32.346]                           inherits = FALSE)) {
[09:30:32.346]                           master <- get("master", mode = "list", 
[09:30:32.346]                             envir = envir, inherits = FALSE)
[09:30:32.346]                           if (inherits(master, c("SOCKnode", 
[09:30:32.346]                             "SOCK0node"))) {
[09:30:32.346]                             sendCondition <<- function(cond) {
[09:30:32.346]                               data <- list(type = "VALUE", value = cond, 
[09:30:32.346]                                 success = TRUE)
[09:30:32.346]                               parallel_sendData(master, data)
[09:30:32.346]                             }
[09:30:32.346]                             return(sendCondition)
[09:30:32.346]                           }
[09:30:32.346]                         }
[09:30:32.346]                         frame <- frame + 1L
[09:30:32.346]                         envir <- sys.frame(frame)
[09:30:32.346]                       }
[09:30:32.346]                     }
[09:30:32.346]                     sendCondition <<- function(cond) NULL
[09:30:32.346]                   }
[09:30:32.346]                 })
[09:30:32.346]                 withCallingHandlers({
[09:30:32.346]                   slow_fcn(x)
[09:30:32.346]                 }, immediateCondition = function(cond) {
[09:30:32.346]                   sendCondition <- ...future.makeSendCondition()
[09:30:32.346]                   sendCondition(cond)
[09:30:32.346]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:32.346]                   {
[09:30:32.346]                     inherits <- base::inherits
[09:30:32.346]                     invokeRestart <- base::invokeRestart
[09:30:32.346]                     is.null <- base::is.null
[09:30:32.346]                     muffled <- FALSE
[09:30:32.346]                     if (inherits(cond, "message")) {
[09:30:32.346]                       muffled <- grepl(pattern, "muffleMessage")
[09:30:32.346]                       if (muffled) 
[09:30:32.346]                         invokeRestart("muffleMessage")
[09:30:32.346]                     }
[09:30:32.346]                     else if (inherits(cond, "warning")) {
[09:30:32.346]                       muffled <- grepl(pattern, "muffleWarning")
[09:30:32.346]                       if (muffled) 
[09:30:32.346]                         invokeRestart("muffleWarning")
[09:30:32.346]                     }
[09:30:32.346]                     else if (inherits(cond, "condition")) {
[09:30:32.346]                       if (!is.null(pattern)) {
[09:30:32.346]                         computeRestarts <- base::computeRestarts
[09:30:32.346]                         grepl <- base::grepl
[09:30:32.346]                         restarts <- computeRestarts(cond)
[09:30:32.346]                         for (restart in restarts) {
[09:30:32.346]                           name <- restart$name
[09:30:32.346]                           if (is.null(name)) 
[09:30:32.346]                             next
[09:30:32.346]                           if (!grepl(pattern, name)) 
[09:30:32.346]                             next
[09:30:32.346]                           invokeRestart(restart)
[09:30:32.346]                           muffled <- TRUE
[09:30:32.346]                           break
[09:30:32.346]                         }
[09:30:32.346]                       }
[09:30:32.346]                     }
[09:30:32.346]                     invisible(muffled)
[09:30:32.346]                   }
[09:30:32.346]                   muffleCondition(cond)
[09:30:32.346]                 })
[09:30:32.346]             }))
[09:30:32.346]             future::FutureResult(value = ...future.value$value, 
[09:30:32.346]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:32.346]                   ...future.rng), globalenv = if (FALSE) 
[09:30:32.346]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:30:32.346]                     ...future.globalenv.names))
[09:30:32.346]                 else NULL, started = ...future.startTime, version = "1.8")
[09:30:32.346]         }, condition = base::local({
[09:30:32.346]             c <- base::c
[09:30:32.346]             inherits <- base::inherits
[09:30:32.346]             invokeRestart <- base::invokeRestart
[09:30:32.346]             length <- base::length
[09:30:32.346]             list <- base::list
[09:30:32.346]             seq.int <- base::seq.int
[09:30:32.346]             signalCondition <- base::signalCondition
[09:30:32.346]             sys.calls <- base::sys.calls
[09:30:32.346]             `[[` <- base::`[[`
[09:30:32.346]             `+` <- base::`+`
[09:30:32.346]             `<<-` <- base::`<<-`
[09:30:32.346]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:30:32.346]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:30:32.346]                   3L)]
[09:30:32.346]             }
[09:30:32.346]             function(cond) {
[09:30:32.346]                 is_error <- inherits(cond, "error")
[09:30:32.346]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:30:32.346]                   NULL)
[09:30:32.346]                 if (is_error) {
[09:30:32.346]                   sessionInformation <- function() {
[09:30:32.346]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:30:32.346]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:30:32.346]                       search = base::search(), system = base::Sys.info())
[09:30:32.346]                   }
[09:30:32.346]                   ...future.conditions[[length(...future.conditions) + 
[09:30:32.346]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:30:32.346]                     cond$call), session = sessionInformation(), 
[09:30:32.346]                     timestamp = base::Sys.time(), signaled = 0L)
[09:30:32.346]                   signalCondition(cond)
[09:30:32.346]                 }
[09:30:32.346]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:30:32.346]                 "immediateCondition"))) {
[09:30:32.346]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:30:32.346]                   ...future.conditions[[length(...future.conditions) + 
[09:30:32.346]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:30:32.346]                   if (TRUE && !signal) {
[09:30:32.346]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:32.346]                     {
[09:30:32.346]                       inherits <- base::inherits
[09:30:32.346]                       invokeRestart <- base::invokeRestart
[09:30:32.346]                       is.null <- base::is.null
[09:30:32.346]                       muffled <- FALSE
[09:30:32.346]                       if (inherits(cond, "message")) {
[09:30:32.346]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:32.346]                         if (muffled) 
[09:30:32.346]                           invokeRestart("muffleMessage")
[09:30:32.346]                       }
[09:30:32.346]                       else if (inherits(cond, "warning")) {
[09:30:32.346]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:32.346]                         if (muffled) 
[09:30:32.346]                           invokeRestart("muffleWarning")
[09:30:32.346]                       }
[09:30:32.346]                       else if (inherits(cond, "condition")) {
[09:30:32.346]                         if (!is.null(pattern)) {
[09:30:32.346]                           computeRestarts <- base::computeRestarts
[09:30:32.346]                           grepl <- base::grepl
[09:30:32.346]                           restarts <- computeRestarts(cond)
[09:30:32.346]                           for (restart in restarts) {
[09:30:32.346]                             name <- restart$name
[09:30:32.346]                             if (is.null(name)) 
[09:30:32.346]                               next
[09:30:32.346]                             if (!grepl(pattern, name)) 
[09:30:32.346]                               next
[09:30:32.346]                             invokeRestart(restart)
[09:30:32.346]                             muffled <- TRUE
[09:30:32.346]                             break
[09:30:32.346]                           }
[09:30:32.346]                         }
[09:30:32.346]                       }
[09:30:32.346]                       invisible(muffled)
[09:30:32.346]                     }
[09:30:32.346]                     muffleCondition(cond, pattern = "^muffle")
[09:30:32.346]                   }
[09:30:32.346]                 }
[09:30:32.346]                 else {
[09:30:32.346]                   if (TRUE) {
[09:30:32.346]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:32.346]                     {
[09:30:32.346]                       inherits <- base::inherits
[09:30:32.346]                       invokeRestart <- base::invokeRestart
[09:30:32.346]                       is.null <- base::is.null
[09:30:32.346]                       muffled <- FALSE
[09:30:32.346]                       if (inherits(cond, "message")) {
[09:30:32.346]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:32.346]                         if (muffled) 
[09:30:32.346]                           invokeRestart("muffleMessage")
[09:30:32.346]                       }
[09:30:32.346]                       else if (inherits(cond, "warning")) {
[09:30:32.346]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:32.346]                         if (muffled) 
[09:30:32.346]                           invokeRestart("muffleWarning")
[09:30:32.346]                       }
[09:30:32.346]                       else if (inherits(cond, "condition")) {
[09:30:32.346]                         if (!is.null(pattern)) {
[09:30:32.346]                           computeRestarts <- base::computeRestarts
[09:30:32.346]                           grepl <- base::grepl
[09:30:32.346]                           restarts <- computeRestarts(cond)
[09:30:32.346]                           for (restart in restarts) {
[09:30:32.346]                             name <- restart$name
[09:30:32.346]                             if (is.null(name)) 
[09:30:32.346]                               next
[09:30:32.346]                             if (!grepl(pattern, name)) 
[09:30:32.346]                               next
[09:30:32.346]                             invokeRestart(restart)
[09:30:32.346]                             muffled <- TRUE
[09:30:32.346]                             break
[09:30:32.346]                           }
[09:30:32.346]                         }
[09:30:32.346]                       }
[09:30:32.346]                       invisible(muffled)
[09:30:32.346]                     }
[09:30:32.346]                     muffleCondition(cond, pattern = "^muffle")
[09:30:32.346]                   }
[09:30:32.346]                 }
[09:30:32.346]             }
[09:30:32.346]         }))
[09:30:32.346]     }, error = function(ex) {
[09:30:32.346]         base::structure(base::list(value = NULL, visible = NULL, 
[09:30:32.346]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:32.346]                 ...future.rng), started = ...future.startTime, 
[09:30:32.346]             finished = Sys.time(), session_uuid = NA_character_, 
[09:30:32.346]             version = "1.8"), class = "FutureResult")
[09:30:32.346]     }, finally = {
[09:30:32.346]         if (!identical(...future.workdir, getwd())) 
[09:30:32.346]             setwd(...future.workdir)
[09:30:32.346]         {
[09:30:32.346]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:30:32.346]                 ...future.oldOptions$nwarnings <- NULL
[09:30:32.346]             }
[09:30:32.346]             base::options(...future.oldOptions)
[09:30:32.346]             if (.Platform$OS.type == "windows") {
[09:30:32.346]                 old_names <- names(...future.oldEnvVars)
[09:30:32.346]                 envs <- base::Sys.getenv()
[09:30:32.346]                 names <- names(envs)
[09:30:32.346]                 common <- intersect(names, old_names)
[09:30:32.346]                 added <- setdiff(names, old_names)
[09:30:32.346]                 removed <- setdiff(old_names, names)
[09:30:32.346]                 changed <- common[...future.oldEnvVars[common] != 
[09:30:32.346]                   envs[common]]
[09:30:32.346]                 NAMES <- toupper(changed)
[09:30:32.346]                 args <- list()
[09:30:32.346]                 for (kk in seq_along(NAMES)) {
[09:30:32.346]                   name <- changed[[kk]]
[09:30:32.346]                   NAME <- NAMES[[kk]]
[09:30:32.346]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:32.346]                     next
[09:30:32.346]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:32.346]                 }
[09:30:32.346]                 NAMES <- toupper(added)
[09:30:32.346]                 for (kk in seq_along(NAMES)) {
[09:30:32.346]                   name <- added[[kk]]
[09:30:32.346]                   NAME <- NAMES[[kk]]
[09:30:32.346]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:32.346]                     next
[09:30:32.346]                   args[[name]] <- ""
[09:30:32.346]                 }
[09:30:32.346]                 NAMES <- toupper(removed)
[09:30:32.346]                 for (kk in seq_along(NAMES)) {
[09:30:32.346]                   name <- removed[[kk]]
[09:30:32.346]                   NAME <- NAMES[[kk]]
[09:30:32.346]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:32.346]                     next
[09:30:32.346]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:32.346]                 }
[09:30:32.346]                 if (length(args) > 0) 
[09:30:32.346]                   base::do.call(base::Sys.setenv, args = args)
[09:30:32.346]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:30:32.346]             }
[09:30:32.346]             else {
[09:30:32.346]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:30:32.346]             }
[09:30:32.346]             {
[09:30:32.346]                 if (base::length(...future.futureOptionsAdded) > 
[09:30:32.346]                   0L) {
[09:30:32.346]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:30:32.346]                   base::names(opts) <- ...future.futureOptionsAdded
[09:30:32.346]                   base::options(opts)
[09:30:32.346]                 }
[09:30:32.346]                 {
[09:30:32.346]                   {
[09:30:32.346]                     base::options(mc.cores = ...future.mc.cores.old)
[09:30:32.346]                     NULL
[09:30:32.346]                   }
[09:30:32.346]                   options(future.plan = NULL)
[09:30:32.346]                   if (is.na(NA_character_)) 
[09:30:32.346]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:30:32.346]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:30:32.346]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:30:32.346]                     .init = FALSE)
[09:30:32.346]                 }
[09:30:32.346]             }
[09:30:32.346]         }
[09:30:32.346]     })
[09:30:32.346]     if (TRUE) {
[09:30:32.346]         base::sink(type = "output", split = FALSE)
[09:30:32.346]         if (TRUE) {
[09:30:32.346]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:30:32.346]         }
[09:30:32.346]         else {
[09:30:32.346]             ...future.result["stdout"] <- base::list(NULL)
[09:30:32.346]         }
[09:30:32.346]         base::close(...future.stdout)
[09:30:32.346]         ...future.stdout <- NULL
[09:30:32.346]     }
[09:30:32.346]     ...future.result$conditions <- ...future.conditions
[09:30:32.346]     ...future.result$finished <- base::Sys.time()
[09:30:32.346]     ...future.result
[09:30:32.346] }
[09:30:32.348] Poll #1 (0): usedNodes() = 2, workers = 2
[09:30:32.380] Poll #2 (0.03 secs): usedNodes() = 2, workers = 2
[09:30:32.419] Poll #3 (0.07 secs): usedNodes() = 2, workers = 2
[09:30:32.451] Poll #4 (0.1 secs): usedNodes() = 2, workers = 2
[09:30:32.483] Poll #5 (0.13 secs): usedNodes() = 2, workers = 2
[09:30:32.514] Poll #6 (0.17 secs): usedNodes() = 2, workers = 2
[09:30:32.546] Poll #7 (0.2 secs): usedNodes() = 2, workers = 2
[09:30:32.578] Poll #8 (0.23 secs): usedNodes() = 2, workers = 2
[09:30:32.610] Poll #9 (0.26 secs): usedNodes() = 2, workers = 2
[09:30:32.642] Poll #10 (0.29 secs): usedNodes() = 2, workers = 2
[09:30:32.675] Poll #11 (0.33 secs): usedNodes() = 2, workers = 2
[09:30:32.707] Poll #12 (0.36 secs): usedNodes() = 2, workers = 2
[09:30:32.740] Poll #13 (0.39 secs): usedNodes() = 2, workers = 2
[09:30:32.773] Poll #14 (0.42 secs): usedNodes() = 2, workers = 2
[09:30:32.806] Poll #15 (0.46 secs): usedNodes() = 2, workers = 2
[09:30:32.839] Poll #16 (0.49 secs): usedNodes() = 2, workers = 2
[09:30:32.872] Poll #17 (0.52 secs): usedNodes() = 2, workers = 2
[09:30:32.905] Poll #18 (0.56 secs): usedNodes() = 2, workers = 2
[09:30:32.939] Poll #19 (0.59 secs): usedNodes() = 2, workers = 2
[09:30:32.972] Poll #20 (0.62 secs): usedNodes() = 2, workers = 2
[09:30:33.006] Poll #21 (0.66 secs): usedNodes() = 2, workers = 2
[09:30:33.040] Poll #22 (0.69 secs): usedNodes() = 2, workers = 2
[09:30:33.074] Poll #23 (0.73 secs): usedNodes() = 2, workers = 2
[09:30:33.087] receiveMessageFromWorker() for ClusterFuture ...
[09:30:33.087] - Validating connection of MultisessionFuture
[09:30:33.087] - received message: FutureResult
[09:30:33.088] - Received FutureResult
[09:30:33.088] - Erased future from FutureRegistry
[09:30:33.088] result() for ClusterFuture ...
[09:30:33.088] - result already collected: FutureResult
[09:30:33.088] result() for ClusterFuture ... done
[09:30:33.093] receiveMessageFromWorker() for ClusterFuture ... done
[09:30:33.093] result() for ClusterFuture ...
[09:30:33.093] - result already collected: FutureResult
[09:30:33.093] result() for ClusterFuture ... done
[09:30:33.093] result() for ClusterFuture ...
[09:30:33.094] - result already collected: FutureResult
[09:30:33.094] result() for ClusterFuture ... done
[09:30:33.096] Exporting 2 global objects (1.20 KiB) to cluster node #1 ...
[09:30:33.096] Exporting ‘slow_fcn’ (1.15 KiB) to cluster node #1 ...
[09:30:33.096] Exporting ‘slow_fcn’ (1.15 KiB) to cluster node #1 ... DONE
[09:30:33.096] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[09:30:33.097] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[09:30:33.097] Exporting 2 global objects (1.20 KiB) to cluster node #1 ... DONE
[09:30:33.098] MultisessionFuture started
[09:30:33.099] - Launch lazy future ... done
[09:30:33.099] run() for ‘MultisessionFuture’ ... done
[09:30:33.100] resolve() on list ...
[09:30:33.100]  recursive: 0
[09:30:33.100]  length: 3
[09:30:33.100] 
[09:30:33.101] Future #1
[09:30:33.101] result() for ClusterFuture ...
[09:30:33.101] - result already collected: FutureResult
[09:30:33.101] result() for ClusterFuture ... done
[09:30:33.101] result() for ClusterFuture ...
[09:30:33.101] - result already collected: FutureResult
[09:30:33.101] result() for ClusterFuture ... done
[09:30:33.102] signalConditionsASAP(MultisessionFuture, pos=1) ...
[09:30:33.102] - nx: 3
[09:30:33.102] - relay: TRUE
[09:30:33.102] - stdout: TRUE
[09:30:33.102] - signal: TRUE
[09:30:33.102] - resignal: FALSE
[09:30:33.102] - force: TRUE
[09:30:33.102] - relayed: [n=3] FALSE, FALSE, FALSE
[09:30:33.103] - queued futures: [n=3] FALSE, FALSE, FALSE
[09:30:33.103]  - until=1
[09:30:33.103]  - relaying element #1
[09:30:33.103] result() for ClusterFuture ...
[09:30:33.103] - result already collected: FutureResult
[09:30:33.103] result() for ClusterFuture ... done
[09:30:33.103] result() for ClusterFuture ...
[09:30:33.103] - result already collected: FutureResult
[09:30:33.104] result() for ClusterFuture ... done
[09:30:33.104] result() for ClusterFuture ...
[09:30:33.104] - result already collected: FutureResult
[09:30:33.104] result() for ClusterFuture ... done
[09:30:33.104] result() for ClusterFuture ...
[09:30:33.104] - result already collected: FutureResult
[09:30:33.104] result() for ClusterFuture ... done
[09:30:33.104] - relayed: [n=3] TRUE, FALSE, FALSE
[09:30:33.104] - queued futures: [n=3] TRUE, FALSE, FALSE
[09:30:33.105] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[09:30:33.105]  length: 2 (resolved future 1)
[09:30:33.362] receiveMessageFromWorker() for ClusterFuture ...
[09:30:33.362] - Validating connection of MultisessionFuture
[09:30:33.362] - received message: FutureResult
[09:30:33.363] - Received FutureResult
[09:30:33.363] - Erased future from FutureRegistry
[09:30:33.363] result() for ClusterFuture ...
[09:30:33.363] - result already collected: FutureResult
[09:30:33.363] result() for ClusterFuture ... done
[09:30:33.365] receiveMessageFromWorker() for ClusterFuture ... done
[09:30:33.365] Future #2
[09:30:33.365] result() for ClusterFuture ...
[09:30:33.365] - result already collected: FutureResult
[09:30:33.365] result() for ClusterFuture ... done
[09:30:33.365] result() for ClusterFuture ...
[09:30:33.366] - result already collected: FutureResult
[09:30:33.366] result() for ClusterFuture ... done
[09:30:33.366] signalConditionsASAP(MultisessionFuture, pos=2) ...
[09:30:33.366] - nx: 3
[09:30:33.366] - relay: TRUE
[09:30:33.366] - stdout: TRUE
[09:30:33.366] - signal: TRUE
[09:30:33.366] - resignal: FALSE
[09:30:33.366] - force: TRUE
[09:30:33.366] - relayed: [n=3] TRUE, FALSE, FALSE
[09:30:33.366] - queued futures: [n=3] TRUE, FALSE, FALSE
[09:30:33.366]  - until=2
[09:30:33.367]  - relaying element #2
[09:30:33.367] result() for ClusterFuture ...
[09:30:33.367] - result already collected: FutureResult
[09:30:33.367] result() for ClusterFuture ... done
[09:30:33.367] result() for ClusterFuture ...
[09:30:33.367] - result already collected: FutureResult
[09:30:33.367] result() for ClusterFuture ... done
[09:30:33.367] result() for ClusterFuture ...
[09:30:33.367] - result already collected: FutureResult
[09:30:33.367] result() for ClusterFuture ... done
[09:30:33.367] result() for ClusterFuture ...
[09:30:33.368] - result already collected: FutureResult
[09:30:33.368] result() for ClusterFuture ... done
[09:30:33.368] - relayed: [n=3] TRUE, TRUE, FALSE
[09:30:33.368] - queued futures: [n=3] TRUE, TRUE, FALSE
[09:30:33.368] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[09:30:33.368]  length: 1 (resolved future 2)
[09:30:34.608] receiveMessageFromWorker() for ClusterFuture ...
[09:30:34.608] - Validating connection of MultisessionFuture
[09:30:34.608] - received message: FutureResult
[09:30:34.609] - Received FutureResult
[09:30:34.609] - Erased future from FutureRegistry
[09:30:34.609] result() for ClusterFuture ...
[09:30:34.609] - result already collected: FutureResult
[09:30:34.609] result() for ClusterFuture ... done
[09:30:34.611] receiveMessageFromWorker() for ClusterFuture ... done
[09:30:34.611] Future #3
[09:30:34.611] result() for ClusterFuture ...
[09:30:34.611] - result already collected: FutureResult
[09:30:34.611] result() for ClusterFuture ... done
[09:30:34.612] result() for ClusterFuture ...
[09:30:34.612] - result already collected: FutureResult
[09:30:34.612] result() for ClusterFuture ... done
[09:30:34.612] signalConditionsASAP(MultisessionFuture, pos=3) ...
[09:30:34.612] - nx: 3
[09:30:34.612] - relay: TRUE
[09:30:34.612] - stdout: TRUE
[09:30:34.612] - signal: TRUE
[09:30:34.612] - resignal: FALSE
[09:30:34.612] - force: TRUE
[09:30:34.612] - relayed: [n=3] TRUE, TRUE, FALSE
[09:30:34.613] - queued futures: [n=3] TRUE, TRUE, FALSE
[09:30:34.613]  - until=3
[09:30:34.613]  - relaying element #3
[09:30:34.613] result() for ClusterFuture ...
[09:30:34.613] - result already collected: FutureResult
[09:30:34.613] result() for ClusterFuture ... done
[09:30:34.613] result() for ClusterFuture ...
[09:30:34.613] - result already collected: FutureResult
[09:30:34.613] result() for ClusterFuture ... done
[09:30:34.613] result() for ClusterFuture ...
[09:30:34.613] - result already collected: FutureResult
[09:30:34.614] result() for ClusterFuture ... done
[09:30:34.614] result() for ClusterFuture ...
[09:30:34.614] - result already collected: FutureResult
[09:30:34.614] result() for ClusterFuture ... done
[09:30:34.614] - relayed: [n=3] TRUE, TRUE, TRUE
[09:30:34.614] - queued futures: [n=3] TRUE, TRUE, TRUE
[09:30:34.614] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[09:30:34.614]  length: 0 (resolved future 3)
[09:30:34.614] Relaying remaining futures
[09:30:34.614] signalConditionsASAP(NULL, pos=0) ...
[09:30:34.614] - nx: 3
[09:30:34.615] - relay: TRUE
[09:30:34.615] - stdout: TRUE
[09:30:34.615] - signal: TRUE
[09:30:34.615] - resignal: FALSE
[09:30:34.615] - force: TRUE
[09:30:34.615] - relayed: [n=3] TRUE, TRUE, TRUE
[09:30:34.615] - queued futures: [n=3] TRUE, TRUE, TRUE
 - flush all
[09:30:34.615] - relayed: [n=3] TRUE, TRUE, TRUE
[09:30:34.615] - queued futures: [n=3] TRUE, TRUE, TRUE
[09:30:34.615] signalConditionsASAP(NULL, pos=0) ... done
[09:30:34.615] resolve() on list ... DONE
[09:30:34.615] result() for ClusterFuture ...
[09:30:34.616] - result already collected: FutureResult
[09:30:34.616] result() for ClusterFuture ... done
[09:30:34.616] result() for ClusterFuture ...
[09:30:34.616] - result already collected: FutureResult
[09:30:34.616] result() for ClusterFuture ... done
[09:30:34.616] result() for ClusterFuture ...
[09:30:34.616] - result already collected: FutureResult
[09:30:34.616] result() for ClusterFuture ... done
[09:30:34.616] result() for ClusterFuture ...
[09:30:34.616] - result already collected: FutureResult
[09:30:34.617] result() for ClusterFuture ... done
[09:30:34.617] result() for ClusterFuture ...
[09:30:34.617] - result already collected: FutureResult
[09:30:34.617] result() for ClusterFuture ... done
[09:30:34.617] result() for ClusterFuture ...
[09:30:34.617] - result already collected: FutureResult
[09:30:34.617] result() for ClusterFuture ... done
> print(js)
[[1]]
           event   category parent               start              at
1         create   overhead   <NA> 2024-12-19 09:30:32 0.00000000 secs
6         launch   overhead   <NA> 2024-12-19 09:30:32 0.02513218 secs
2      getWorker   overhead launch 2024-12-19 09:30:32 0.02833080 secs
3    eraseWorker   overhead launch 2024-12-19 09:30:32 0.02996039 secs
4 attachPackages   overhead launch 2024-12-19 09:30:32 0.03105450 secs
5  exportGlobals   overhead launch 2024-12-19 09:30:32 0.03173542 secs
9       evaluate evaluation   <NA> 2024-12-19 09:30:32 0.03497148 secs
7  receiveResult   overhead gather 2024-12-19 09:30:33 0.87252712 secs
8         gather   overhead   <NA> 2024-12-19 09:30:33 0.87358022 secs
           duration future_label                          future_uuid
1 9.605408e-03 secs         <NA> 6c4a9a9a-6fd0-a995-5432-b8e623dc27cf
6 9.420872e-03 secs         <NA> 6c4a9a9a-6fd0-a995-5432-b8e623dc27cf
2 2.336502e-04 secs         <NA> 6c4a9a9a-6fd0-a995-5432-b8e623dc27cf
3 4.501343e-04 secs         <NA> 6c4a9a9a-6fd0-a995-5432-b8e623dc27cf
4 4.220009e-05 secs         <NA> 6c4a9a9a-6fd0-a995-5432-b8e623dc27cf
5 1.596451e-03 secs         <NA> 6c4a9a9a-6fd0-a995-5432-b8e623dc27cf
9 8.360422e-01 secs         <NA> 6c4a9a9a-6fd0-a995-5432-b8e623dc27cf
7 1.983643e-04 secs         <NA> 6c4a9a9a-6fd0-a995-5432-b8e623dc27cf
8 2.734661e-04 secs         <NA> 6c4a9a9a-6fd0-a995-5432-b8e623dc27cf
                          session_uuid
1 3f42c7c0-8778-7c11-64a1-2e43e7da7845
6 3f42c7c0-8778-7c11-64a1-2e43e7da7845
2 3f42c7c0-8778-7c11-64a1-2e43e7da7845
3 3f42c7c0-8778-7c11-64a1-2e43e7da7845
4 3f42c7c0-8778-7c11-64a1-2e43e7da7845
5 3f42c7c0-8778-7c11-64a1-2e43e7da7845
9 d5404d0f-38d3-60c2-c064-1c699ef26518
7 3f42c7c0-8778-7c11-64a1-2e43e7da7845
8 3f42c7c0-8778-7c11-64a1-2e43e7da7845

[[2]]
           event   category parent               start              at
1         create   overhead   <NA> 2024-12-19 09:30:32 0.00000000 secs
6         launch   overhead   <NA> 2024-12-19 09:30:32 0.01944137 secs
2      getWorker   overhead launch 2024-12-19 09:30:32 0.02205563 secs
3    eraseWorker   overhead launch 2024-12-19 09:30:32 0.02266717 secs
4 attachPackages   overhead launch 2024-12-19 09:30:32 0.07360816 secs
5  exportGlobals   overhead launch 2024-12-19 09:30:32 0.07419419 secs
9       evaluate evaluation   <NA> 2024-12-19 09:30:32 0.07669997 secs
7  receiveResult   overhead gather 2024-12-19 09:30:33 1.11051059 secs
8         gather   overhead   <NA> 2024-12-19 09:30:33 1.11152959 secs
           duration future_label                          future_uuid
1 0.0063037872 secs         <NA> fa01d6f9-d8f6-ff46-ed28-803ab845a5a9
6 0.0571143627 secs         <NA> fa01d6f9-d8f6-ff46-ed28-803ab845a5a9
2 0.0001149178 secs         <NA> fa01d6f9-d8f6-ff46-ed28-803ab845a5a9
3 0.0502343178 secs         <NA> fa01d6f9-d8f6-ff46-ed28-803ab845a5a9
4 0.0000462532 secs         <NA> fa01d6f9-d8f6-ff46-ed28-803ab845a5a9
5 0.0012702942 secs         <NA> fa01d6f9-d8f6-ff46-ed28-803ab845a5a9
9 1.0333080292 secs         <NA> fa01d6f9-d8f6-ff46-ed28-803ab845a5a9
7 0.0002198219 secs         <NA> fa01d6f9-d8f6-ff46-ed28-803ab845a5a9
8 0.0002782345 secs         <NA> fa01d6f9-d8f6-ff46-ed28-803ab845a5a9
                          session_uuid
1 3f42c7c0-8778-7c11-64a1-2e43e7da7845
6 3f42c7c0-8778-7c11-64a1-2e43e7da7845
2 3f42c7c0-8778-7c11-64a1-2e43e7da7845
3 3f42c7c0-8778-7c11-64a1-2e43e7da7845
4 3f42c7c0-8778-7c11-64a1-2e43e7da7845
5 3f42c7c0-8778-7c11-64a1-2e43e7da7845
9 ca4a3d1c-5d0f-15ba-e763-7333f606a87d
7 3f42c7c0-8778-7c11-64a1-2e43e7da7845
8 3f42c7c0-8778-7c11-64a1-2e43e7da7845

[[3]]
           event   category parent               start              at
1         create   overhead   <NA> 2024-12-19 09:30:32 0.00000000 secs
6         launch   overhead   <NA> 2024-12-19 09:30:32 0.01660490 secs
2      getWorker   overhead launch 2024-12-19 09:30:32 0.01936817 secs
3    eraseWorker   overhead launch 2024-12-19 09:30:33 0.76564312 secs
4 attachPackages   overhead launch 2024-12-19 09:30:33 0.76650953 secs
5  exportGlobals   overhead launch 2024-12-19 09:30:33 0.76702189 secs
9       evaluate evaluation   <NA> 2024-12-19 09:30:33 0.76988173 secs
7  receiveResult   overhead gather 2024-12-19 09:30:34 2.27929902 secs
8         gather   overhead   <NA> 2024-12-19 09:30:34 2.28036904 secs
           duration future_label                          future_uuid
1 3.166676e-03 secs         <NA> 7ab90b0d-5896-1763-e98e-ab88e7b71ba7
6 7.529078e-01 secs         <NA> 7ab90b0d-5896-1763-e98e-ab88e7b71ba7
2 7.457948e-01 secs         <NA> 7ab90b0d-5896-1763-e98e-ab88e7b71ba7
3 3.664494e-04 secs         <NA> 7ab90b0d-5896-1763-e98e-ab88e7b71ba7
4 3.552437e-05 secs         <NA> 7ab90b0d-5896-1763-e98e-ab88e7b71ba7
5 1.393557e-03 secs         <NA> 7ab90b0d-5896-1763-e98e-ab88e7b71ba7
9 1.507468e+00 secs         <NA> 7ab90b0d-5896-1763-e98e-ab88e7b71ba7
7 2.076626e-04 secs         <NA> 7ab90b0d-5896-1763-e98e-ab88e7b71ba7
8 2.882481e-04 secs         <NA> 7ab90b0d-5896-1763-e98e-ab88e7b71ba7
                          session_uuid
1 3f42c7c0-8778-7c11-64a1-2e43e7da7845
6 3f42c7c0-8778-7c11-64a1-2e43e7da7845
2 3f42c7c0-8778-7c11-64a1-2e43e7da7845
3 3f42c7c0-8778-7c11-64a1-2e43e7da7845
4 3f42c7c0-8778-7c11-64a1-2e43e7da7845
5 3f42c7c0-8778-7c11-64a1-2e43e7da7845
9 d5404d0f-38d3-60c2-c064-1c699ef26518
7 3f42c7c0-8778-7c11-64a1-2e43e7da7845
8 3f42c7c0-8778-7c11-64a1-2e43e7da7845

> stopifnot(
+   is.list(js),
+   all(vapply(js, FUN = is.data.frame, FUN.VALUE = NA))
+ )
>   
> ## Shut down parallel workers
> plan(sequential)
[09:30:34.624] plan(): Setting new future strategy stack:
[09:30:34.624] List of future strategies:
[09:30:34.624] 1. sequential:
[09:30:34.624]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:34.624]    - tweaked: FALSE
[09:30:34.624]    - call: plan(sequential)
[09:30:34.625] plan(): nbrOfWorkers() = 1
> 
> message("*** capture_journals() ... done")
*** capture_journals() ... done
> 
> 
> message("*** summary() of FutureJournal ...")
*** summary() of FutureJournal ...
> 
> js <- do.call(rbind, js)
> print(js)
            event   category parent               start              at
1          create   overhead   <NA> 2024-12-19 09:30:32 0.00000000 secs
6          launch   overhead   <NA> 2024-12-19 09:30:32 0.02513218 secs
2       getWorker   overhead launch 2024-12-19 09:30:32 0.02833080 secs
3     eraseWorker   overhead launch 2024-12-19 09:30:32 0.02996039 secs
4  attachPackages   overhead launch 2024-12-19 09:30:32 0.03105450 secs
5   exportGlobals   overhead launch 2024-12-19 09:30:32 0.03173542 secs
9        evaluate evaluation   <NA> 2024-12-19 09:30:32 0.03497148 secs
7   receiveResult   overhead gather 2024-12-19 09:30:33 0.87252712 secs
8          gather   overhead   <NA> 2024-12-19 09:30:33 0.87358022 secs
11         create   overhead   <NA> 2024-12-19 09:30:32 0.00000000 secs
61         launch   overhead   <NA> 2024-12-19 09:30:32 0.01944137 secs
21      getWorker   overhead launch 2024-12-19 09:30:32 0.02205563 secs
31    eraseWorker   overhead launch 2024-12-19 09:30:32 0.02266717 secs
41 attachPackages   overhead launch 2024-12-19 09:30:32 0.07360816 secs
51  exportGlobals   overhead launch 2024-12-19 09:30:32 0.07419419 secs
91       evaluate evaluation   <NA> 2024-12-19 09:30:32 0.07669997 secs
71  receiveResult   overhead gather 2024-12-19 09:30:33 1.11051059 secs
81         gather   overhead   <NA> 2024-12-19 09:30:33 1.11152959 secs
12         create   overhead   <NA> 2024-12-19 09:30:32 0.00000000 secs
62         launch   overhead   <NA> 2024-12-19 09:30:32 0.01660490 secs
22      getWorker   overhead launch 2024-12-19 09:30:32 0.01936817 secs
32    eraseWorker   overhead launch 2024-12-19 09:30:33 0.76564312 secs
42 attachPackages   overhead launch 2024-12-19 09:30:33 0.76650953 secs
52  exportGlobals   overhead launch 2024-12-19 09:30:33 0.76702189 secs
92       evaluate evaluation   <NA> 2024-12-19 09:30:33 0.76988173 secs
72  receiveResult   overhead gather 2024-12-19 09:30:34 2.27929902 secs
82         gather   overhead   <NA> 2024-12-19 09:30:34 2.28036904 secs
            duration future_label                          future_uuid
1  9.605408e-03 secs         <NA> 6c4a9a9a-6fd0-a995-5432-b8e623dc27cf
6  9.420872e-03 secs         <NA> 6c4a9a9a-6fd0-a995-5432-b8e623dc27cf
2  2.336502e-04 secs         <NA> 6c4a9a9a-6fd0-a995-5432-b8e623dc27cf
3  4.501343e-04 secs         <NA> 6c4a9a9a-6fd0-a995-5432-b8e623dc27cf
4  4.220009e-05 secs         <NA> 6c4a9a9a-6fd0-a995-5432-b8e623dc27cf
5  1.596451e-03 secs         <NA> 6c4a9a9a-6fd0-a995-5432-b8e623dc27cf
9  8.360422e-01 secs         <NA> 6c4a9a9a-6fd0-a995-5432-b8e623dc27cf
7  1.983643e-04 secs         <NA> 6c4a9a9a-6fd0-a995-5432-b8e623dc27cf
8  2.734661e-04 secs         <NA> 6c4a9a9a-6fd0-a995-5432-b8e623dc27cf
11 6.303787e-03 secs         <NA> fa01d6f9-d8f6-ff46-ed28-803ab845a5a9
61 5.711436e-02 secs         <NA> fa01d6f9-d8f6-ff46-ed28-803ab845a5a9
21 1.149178e-04 secs         <NA> fa01d6f9-d8f6-ff46-ed28-803ab845a5a9
31 5.023432e-02 secs         <NA> fa01d6f9-d8f6-ff46-ed28-803ab845a5a9
41 4.625320e-05 secs         <NA> fa01d6f9-d8f6-ff46-ed28-803ab845a5a9
51 1.270294e-03 secs         <NA> fa01d6f9-d8f6-ff46-ed28-803ab845a5a9
91 1.033308e+00 secs         <NA> fa01d6f9-d8f6-ff46-ed28-803ab845a5a9
71 2.198219e-04 secs         <NA> fa01d6f9-d8f6-ff46-ed28-803ab845a5a9
81 2.782345e-04 secs         <NA> fa01d6f9-d8f6-ff46-ed28-803ab845a5a9
12 3.166676e-03 secs         <NA> 7ab90b0d-5896-1763-e98e-ab88e7b71ba7
62 7.529078e-01 secs         <NA> 7ab90b0d-5896-1763-e98e-ab88e7b71ba7
22 7.457948e-01 secs         <NA> 7ab90b0d-5896-1763-e98e-ab88e7b71ba7
32 3.664494e-04 secs         <NA> 7ab90b0d-5896-1763-e98e-ab88e7b71ba7
42 3.552437e-05 secs         <NA> 7ab90b0d-5896-1763-e98e-ab88e7b71ba7
52 1.393557e-03 secs         <NA> 7ab90b0d-5896-1763-e98e-ab88e7b71ba7
92 1.507468e+00 secs         <NA> 7ab90b0d-5896-1763-e98e-ab88e7b71ba7
72 2.076626e-04 secs         <NA> 7ab90b0d-5896-1763-e98e-ab88e7b71ba7
82 2.882481e-04 secs         <NA> 7ab90b0d-5896-1763-e98e-ab88e7b71ba7
                           session_uuid
1  3f42c7c0-8778-7c11-64a1-2e43e7da7845
6  3f42c7c0-8778-7c11-64a1-2e43e7da7845
2  3f42c7c0-8778-7c11-64a1-2e43e7da7845
3  3f42c7c0-8778-7c11-64a1-2e43e7da7845
4  3f42c7c0-8778-7c11-64a1-2e43e7da7845
5  3f42c7c0-8778-7c11-64a1-2e43e7da7845
9  d5404d0f-38d3-60c2-c064-1c699ef26518
7  3f42c7c0-8778-7c11-64a1-2e43e7da7845
8  3f42c7c0-8778-7c11-64a1-2e43e7da7845
11 3f42c7c0-8778-7c11-64a1-2e43e7da7845
61 3f42c7c0-8778-7c11-64a1-2e43e7da7845
21 3f42c7c0-8778-7c11-64a1-2e43e7da7845
31 3f42c7c0-8778-7c11-64a1-2e43e7da7845
41 3f42c7c0-8778-7c11-64a1-2e43e7da7845
51 3f42c7c0-8778-7c11-64a1-2e43e7da7845
91 ca4a3d1c-5d0f-15ba-e763-7333f606a87d
71 3f42c7c0-8778-7c11-64a1-2e43e7da7845
81 3f42c7c0-8778-7c11-64a1-2e43e7da7845
12 3f42c7c0-8778-7c11-64a1-2e43e7da7845
62 3f42c7c0-8778-7c11-64a1-2e43e7da7845
22 3f42c7c0-8778-7c11-64a1-2e43e7da7845
32 3f42c7c0-8778-7c11-64a1-2e43e7da7845
42 3f42c7c0-8778-7c11-64a1-2e43e7da7845
52 3f42c7c0-8778-7c11-64a1-2e43e7da7845
92 d5404d0f-38d3-60c2-c064-1c699ef26518
72 3f42c7c0-8778-7c11-64a1-2e43e7da7845
82 3f42c7c0-8778-7c11-64a1-2e43e7da7845
> 
> stats <- summary(js)
> print(stats)
Number of futures: 3
  summary       evaluate evaluate_ratio        overhead overhead_ratio
1     min 0.8360422 secs      0.9567302 0.01929975 secs     0.02208579
2    mean 1.1256061 secs      0.7915063 0.27978627 secs     0.19674076
3  median 1.0333080 secs      0.9293945 0.06369638 secs     0.05729082
4     max 1.5074680 secs      0.6609796 0.75636268 secs     0.33164241
5   total 3.3768182 secs      0.7915063 0.83935881 secs     0.19674076
        duration       walltime
1 0.8738537 secs 0.8738537 secs
2 1.4221063 secs 1.4221063 secs
3 1.1118078 secs 1.1118078 secs
4 2.2806573 secs 2.2806573 secs
5 4.2663188 secs 4.2663188 secs
> 
> message("*** summary() of FutureJournal ... done")
*** summary() of FutureJournal ... done
> 
> #source("incl/end.R")
> 
