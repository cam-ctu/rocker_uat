
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:38:52.535] plan(): Setting new future strategy stack:
[17:38:52.536] List of future strategies:
[17:38:52.536] 1. sequential:
[17:38:52.536]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:38:52.536]    - tweaked: FALSE
[17:38:52.536]    - call: future::plan("sequential")
[17:38:52.547] plan(): nbrOfWorkers() = 1
> 
> capture_journals <- future:::capture_journals
> 
> message("*** capture_journals() ...")
*** capture_journals() ...
> 
> slow_fcn <- function(x) {
+   Sys.sleep(0.5 + 1/x)
+ }
> 
> plan(multisession, workers = 2)
[17:38:52.563] plan(): Setting new future strategy stack:
[17:38:52.563] List of future strategies:
[17:38:52.563] 1. multisession:
[17:38:52.563]    - args: function (..., workers = 2, envir = parent.frame())
[17:38:52.563]    - tweaked: TRUE
[17:38:52.563]    - call: plan(multisession, workers = 2)
[17:38:52.574] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:38:52.574] multisession:
[17:38:52.574] - args: function (..., workers = 2, envir = parent.frame())
[17:38:52.574] - tweaked: TRUE
[17:38:52.574] - call: plan(multisession, workers = 2)
[17:38:52.575] getGlobalsAndPackages() ...
[17:38:52.575] Not searching for globals
[17:38:52.576] - globals: [0] <none>
[17:38:52.576] getGlobalsAndPackages() ... DONE
[17:38:52.576] [local output] makeClusterPSOCK() ...
[17:38:52.613] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:38:52.614] [local output] Base port: 11385
[17:38:52.614] [local output] Getting setup options for 2 cluster nodes ...
[17:38:52.614] [local output]  - Node 1 of 2 ...
[17:38:52.615] [local output] localMachine=TRUE => revtunnel=FALSE

[17:38:52.615] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpwN3N5f/worker.rank=1.parallelly.parent=38981.98457999d494.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpwN3N5f/worker.rank=1.parallelly.parent=38981.98457999d494.pid")'’
[17:38:52.805] - Possible to infer worker's PID: TRUE
[17:38:52.805] [local output] Rscript port: 11385

[17:38:52.806] [local output]  - Node 2 of 2 ...
[17:38:52.806] [local output] localMachine=TRUE => revtunnel=FALSE

[17:38:52.807] [local output] Rscript port: 11385

[17:38:52.807] [local output] Getting setup options for 2 cluster nodes ... done
[17:38:52.807] [local output]  - Parallel setup requested for some PSOCK nodes
[17:38:52.808] [local output] Setting up PSOCK nodes in parallel
[17:38:52.808] List of 36
[17:38:52.808]  $ worker          : chr "localhost"
[17:38:52.808]   ..- attr(*, "localhost")= logi TRUE
[17:38:52.808]  $ master          : chr "localhost"
[17:38:52.808]  $ port            : int 11385
[17:38:52.808]  $ connectTimeout  : num 120
[17:38:52.808]  $ timeout         : num 2592000
[17:38:52.808]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:38:52.808]  $ homogeneous     : logi TRUE
[17:38:52.808]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:38:52.808]  $ rscript_envs    : NULL
[17:38:52.808]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:38:52.808]  $ rscript_startup : NULL
[17:38:52.808]  $ rscript_sh      : chr "sh"
[17:38:52.808]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:38:52.808]  $ methods         : logi TRUE
[17:38:52.808]  $ socketOptions   : chr "no-delay"
[17:38:52.808]  $ useXDR          : logi FALSE
[17:38:52.808]  $ outfile         : chr "/dev/null"
[17:38:52.808]  $ renice          : int NA
[17:38:52.808]  $ rshcmd          : NULL
[17:38:52.808]  $ user            : chr(0) 
[17:38:52.808]  $ revtunnel       : logi FALSE
[17:38:52.808]  $ rshlogfile      : NULL
[17:38:52.808]  $ rshopts         : chr(0) 
[17:38:52.808]  $ rank            : int 1
[17:38:52.808]  $ manual          : logi FALSE
[17:38:52.808]  $ dryrun          : logi FALSE
[17:38:52.808]  $ quiet           : logi FALSE
[17:38:52.808]  $ setup_strategy  : chr "parallel"
[17:38:52.808]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:38:52.808]  $ pidfile         : chr "/tmp/RtmpwN3N5f/worker.rank=1.parallelly.parent=38981.98457999d494.pid"
[17:38:52.808]  $ rshcmd_label    : NULL
[17:38:52.808]  $ rsh_call        : NULL
[17:38:52.808]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:38:52.808]  $ localMachine    : logi TRUE
[17:38:52.808]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:38:52.808]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:38:52.808]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:38:52.808]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:38:52.808]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:38:52.808]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:38:52.808]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:38:52.808]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:38:52.808]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:38:52.808]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:38:52.808]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:38:52.808]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:38:52.808]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:38:52.808]  $ arguments       :List of 28
[17:38:52.808]   ..$ worker          : chr "localhost"
[17:38:52.808]   ..$ master          : NULL
[17:38:52.808]   ..$ port            : int 11385
[17:38:52.808]   ..$ connectTimeout  : num 120
[17:38:52.808]   ..$ timeout         : num 2592000
[17:38:52.808]   ..$ rscript         : NULL
[17:38:52.808]   ..$ homogeneous     : NULL
[17:38:52.808]   ..$ rscript_args    : NULL
[17:38:52.808]   ..$ rscript_envs    : NULL
[17:38:52.808]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:38:52.808]   ..$ rscript_startup : NULL
[17:38:52.808]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:38:52.808]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:38:52.808]   ..$ methods         : logi TRUE
[17:38:52.808]   ..$ socketOptions   : chr "no-delay"
[17:38:52.808]   ..$ useXDR          : logi FALSE
[17:38:52.808]   ..$ outfile         : chr "/dev/null"
[17:38:52.808]   ..$ renice          : int NA
[17:38:52.808]   ..$ rshcmd          : NULL
[17:38:52.808]   ..$ user            : NULL
[17:38:52.808]   ..$ revtunnel       : logi NA
[17:38:52.808]   ..$ rshlogfile      : NULL
[17:38:52.808]   ..$ rshopts         : NULL
[17:38:52.808]   ..$ rank            : int 1
[17:38:52.808]   ..$ manual          : logi FALSE
[17:38:52.808]   ..$ dryrun          : logi FALSE
[17:38:52.808]   ..$ quiet           : logi FALSE
[17:38:52.808]   ..$ setup_strategy  : chr "parallel"
[17:38:52.808]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:38:52.826] [local output] System call to launch all workers:
[17:38:52.826] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpwN3N5f/worker.rank=1.parallelly.parent=38981.98457999d494.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11385 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:38:52.826] [local output] Starting PSOCK main server
[17:38:52.832] [local output] Workers launched
[17:38:52.832] [local output] Waiting for workers to connect back
[17:38:52.832]  - [local output] 0 workers out of 2 ready
[17:38:53.079]  - [local output] 0 workers out of 2 ready
[17:38:53.079]  - [local output] 1 workers out of 2 ready
[17:38:53.111]  - [local output] 1 workers out of 2 ready
[17:38:53.111]  - [local output] 2 workers out of 2 ready
[17:38:53.111] [local output] Launching of workers completed
[17:38:53.111] [local output] Collecting session information from workers
[17:38:53.112] [local output]  - Worker #1 of 2
[17:38:53.113] [local output]  - Worker #2 of 2
[17:38:53.113] [local output] makeClusterPSOCK() ... done
[17:38:53.126] Packages needed by the future expression (n = 0): <none>
[17:38:53.126] Packages needed by future strategies (n = 0): <none>
[17:38:53.126] {
[17:38:53.126]     {
[17:38:53.126]         {
[17:38:53.126]             ...future.startTime <- base::Sys.time()
[17:38:53.126]             {
[17:38:53.126]                 {
[17:38:53.126]                   {
[17:38:53.126]                     {
[17:38:53.126]                       base::local({
[17:38:53.126]                         has_future <- base::requireNamespace("future", 
[17:38:53.126]                           quietly = TRUE)
[17:38:53.126]                         if (has_future) {
[17:38:53.126]                           ns <- base::getNamespace("future")
[17:38:53.126]                           version <- ns[[".package"]][["version"]]
[17:38:53.126]                           if (is.null(version)) 
[17:38:53.126]                             version <- utils::packageVersion("future")
[17:38:53.126]                         }
[17:38:53.126]                         else {
[17:38:53.126]                           version <- NULL
[17:38:53.126]                         }
[17:38:53.126]                         if (!has_future || version < "1.8.0") {
[17:38:53.126]                           info <- base::c(r_version = base::gsub("R version ", 
[17:38:53.126]                             "", base::R.version$version.string), 
[17:38:53.126]                             platform = base::sprintf("%s (%s-bit)", 
[17:38:53.126]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:38:53.126]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:38:53.126]                               "release", "version")], collapse = " "), 
[17:38:53.126]                             hostname = base::Sys.info()[["nodename"]])
[17:38:53.126]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:38:53.126]                             info)
[17:38:53.126]                           info <- base::paste(info, collapse = "; ")
[17:38:53.126]                           if (!has_future) {
[17:38:53.126]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:38:53.126]                               info)
[17:38:53.126]                           }
[17:38:53.126]                           else {
[17:38:53.126]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:38:53.126]                               info, version)
[17:38:53.126]                           }
[17:38:53.126]                           base::stop(msg)
[17:38:53.126]                         }
[17:38:53.126]                       })
[17:38:53.126]                     }
[17:38:53.126]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:38:53.126]                     base::options(mc.cores = 1L)
[17:38:53.126]                   }
[17:38:53.126]                   ...future.strategy.old <- future::plan("list")
[17:38:53.126]                   options(future.plan = NULL)
[17:38:53.126]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:38:53.126]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:38:53.126]                 }
[17:38:53.126]                 ...future.workdir <- getwd()
[17:38:53.126]             }
[17:38:53.126]             ...future.oldOptions <- base::as.list(base::.Options)
[17:38:53.126]             ...future.oldEnvVars <- base::Sys.getenv()
[17:38:53.126]         }
[17:38:53.126]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:38:53.126]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:38:53.126]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:38:53.126]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:38:53.126]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:38:53.126]             future.stdout.windows.reencode = NULL, width = 80L)
[17:38:53.126]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:38:53.126]             base::names(...future.oldOptions))
[17:38:53.126]     }
[17:38:53.126]     if (FALSE) {
[17:38:53.126]     }
[17:38:53.126]     else {
[17:38:53.126]         if (TRUE) {
[17:38:53.126]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:38:53.126]                 open = "w")
[17:38:53.126]         }
[17:38:53.126]         else {
[17:38:53.126]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:38:53.126]                 windows = "NUL", "/dev/null"), open = "w")
[17:38:53.126]         }
[17:38:53.126]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:38:53.126]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:38:53.126]             base::sink(type = "output", split = FALSE)
[17:38:53.126]             base::close(...future.stdout)
[17:38:53.126]         }, add = TRUE)
[17:38:53.126]     }
[17:38:53.126]     ...future.frame <- base::sys.nframe()
[17:38:53.126]     ...future.conditions <- base::list()
[17:38:53.126]     ...future.rng <- base::globalenv()$.Random.seed
[17:38:53.126]     if (FALSE) {
[17:38:53.126]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:38:53.126]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:38:53.126]     }
[17:38:53.126]     ...future.result <- base::tryCatch({
[17:38:53.126]         base::withCallingHandlers({
[17:38:53.126]             ...future.value <- base::withVisible(base::local({
[17:38:53.126]                 ...future.makeSendCondition <- base::local({
[17:38:53.126]                   sendCondition <- NULL
[17:38:53.126]                   function(frame = 1L) {
[17:38:53.126]                     if (is.function(sendCondition)) 
[17:38:53.126]                       return(sendCondition)
[17:38:53.126]                     ns <- getNamespace("parallel")
[17:38:53.126]                     if (exists("sendData", mode = "function", 
[17:38:53.126]                       envir = ns)) {
[17:38:53.126]                       parallel_sendData <- get("sendData", mode = "function", 
[17:38:53.126]                         envir = ns)
[17:38:53.126]                       envir <- sys.frame(frame)
[17:38:53.126]                       master <- NULL
[17:38:53.126]                       while (!identical(envir, .GlobalEnv) && 
[17:38:53.126]                         !identical(envir, emptyenv())) {
[17:38:53.126]                         if (exists("master", mode = "list", envir = envir, 
[17:38:53.126]                           inherits = FALSE)) {
[17:38:53.126]                           master <- get("master", mode = "list", 
[17:38:53.126]                             envir = envir, inherits = FALSE)
[17:38:53.126]                           if (inherits(master, c("SOCKnode", 
[17:38:53.126]                             "SOCK0node"))) {
[17:38:53.126]                             sendCondition <<- function(cond) {
[17:38:53.126]                               data <- list(type = "VALUE", value = cond, 
[17:38:53.126]                                 success = TRUE)
[17:38:53.126]                               parallel_sendData(master, data)
[17:38:53.126]                             }
[17:38:53.126]                             return(sendCondition)
[17:38:53.126]                           }
[17:38:53.126]                         }
[17:38:53.126]                         frame <- frame + 1L
[17:38:53.126]                         envir <- sys.frame(frame)
[17:38:53.126]                       }
[17:38:53.126]                     }
[17:38:53.126]                     sendCondition <<- function(cond) NULL
[17:38:53.126]                   }
[17:38:53.126]                 })
[17:38:53.126]                 withCallingHandlers({
[17:38:53.126]                   NA
[17:38:53.126]                 }, immediateCondition = function(cond) {
[17:38:53.126]                   sendCondition <- ...future.makeSendCondition()
[17:38:53.126]                   sendCondition(cond)
[17:38:53.126]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:38:53.126]                   {
[17:38:53.126]                     inherits <- base::inherits
[17:38:53.126]                     invokeRestart <- base::invokeRestart
[17:38:53.126]                     is.null <- base::is.null
[17:38:53.126]                     muffled <- FALSE
[17:38:53.126]                     if (inherits(cond, "message")) {
[17:38:53.126]                       muffled <- grepl(pattern, "muffleMessage")
[17:38:53.126]                       if (muffled) 
[17:38:53.126]                         invokeRestart("muffleMessage")
[17:38:53.126]                     }
[17:38:53.126]                     else if (inherits(cond, "warning")) {
[17:38:53.126]                       muffled <- grepl(pattern, "muffleWarning")
[17:38:53.126]                       if (muffled) 
[17:38:53.126]                         invokeRestart("muffleWarning")
[17:38:53.126]                     }
[17:38:53.126]                     else if (inherits(cond, "condition")) {
[17:38:53.126]                       if (!is.null(pattern)) {
[17:38:53.126]                         computeRestarts <- base::computeRestarts
[17:38:53.126]                         grepl <- base::grepl
[17:38:53.126]                         restarts <- computeRestarts(cond)
[17:38:53.126]                         for (restart in restarts) {
[17:38:53.126]                           name <- restart$name
[17:38:53.126]                           if (is.null(name)) 
[17:38:53.126]                             next
[17:38:53.126]                           if (!grepl(pattern, name)) 
[17:38:53.126]                             next
[17:38:53.126]                           invokeRestart(restart)
[17:38:53.126]                           muffled <- TRUE
[17:38:53.126]                           break
[17:38:53.126]                         }
[17:38:53.126]                       }
[17:38:53.126]                     }
[17:38:53.126]                     invisible(muffled)
[17:38:53.126]                   }
[17:38:53.126]                   muffleCondition(cond)
[17:38:53.126]                 })
[17:38:53.126]             }))
[17:38:53.126]             future::FutureResult(value = ...future.value$value, 
[17:38:53.126]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:38:53.126]                   ...future.rng), globalenv = if (FALSE) 
[17:38:53.126]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:38:53.126]                     ...future.globalenv.names))
[17:38:53.126]                 else NULL, started = ...future.startTime, version = "1.8")
[17:38:53.126]         }, condition = base::local({
[17:38:53.126]             c <- base::c
[17:38:53.126]             inherits <- base::inherits
[17:38:53.126]             invokeRestart <- base::invokeRestart
[17:38:53.126]             length <- base::length
[17:38:53.126]             list <- base::list
[17:38:53.126]             seq.int <- base::seq.int
[17:38:53.126]             signalCondition <- base::signalCondition
[17:38:53.126]             sys.calls <- base::sys.calls
[17:38:53.126]             `[[` <- base::`[[`
[17:38:53.126]             `+` <- base::`+`
[17:38:53.126]             `<<-` <- base::`<<-`
[17:38:53.126]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:38:53.126]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:38:53.126]                   3L)]
[17:38:53.126]             }
[17:38:53.126]             function(cond) {
[17:38:53.126]                 is_error <- inherits(cond, "error")
[17:38:53.126]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:38:53.126]                   NULL)
[17:38:53.126]                 if (is_error) {
[17:38:53.126]                   sessionInformation <- function() {
[17:38:53.126]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:38:53.126]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:38:53.126]                       search = base::search(), system = base::Sys.info())
[17:38:53.126]                   }
[17:38:53.126]                   ...future.conditions[[length(...future.conditions) + 
[17:38:53.126]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:38:53.126]                     cond$call), session = sessionInformation(), 
[17:38:53.126]                     timestamp = base::Sys.time(), signaled = 0L)
[17:38:53.126]                   signalCondition(cond)
[17:38:53.126]                 }
[17:38:53.126]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:38:53.126]                 "immediateCondition"))) {
[17:38:53.126]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:38:53.126]                   ...future.conditions[[length(...future.conditions) + 
[17:38:53.126]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:38:53.126]                   if (TRUE && !signal) {
[17:38:53.126]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:38:53.126]                     {
[17:38:53.126]                       inherits <- base::inherits
[17:38:53.126]                       invokeRestart <- base::invokeRestart
[17:38:53.126]                       is.null <- base::is.null
[17:38:53.126]                       muffled <- FALSE
[17:38:53.126]                       if (inherits(cond, "message")) {
[17:38:53.126]                         muffled <- grepl(pattern, "muffleMessage")
[17:38:53.126]                         if (muffled) 
[17:38:53.126]                           invokeRestart("muffleMessage")
[17:38:53.126]                       }
[17:38:53.126]                       else if (inherits(cond, "warning")) {
[17:38:53.126]                         muffled <- grepl(pattern, "muffleWarning")
[17:38:53.126]                         if (muffled) 
[17:38:53.126]                           invokeRestart("muffleWarning")
[17:38:53.126]                       }
[17:38:53.126]                       else if (inherits(cond, "condition")) {
[17:38:53.126]                         if (!is.null(pattern)) {
[17:38:53.126]                           computeRestarts <- base::computeRestarts
[17:38:53.126]                           grepl <- base::grepl
[17:38:53.126]                           restarts <- computeRestarts(cond)
[17:38:53.126]                           for (restart in restarts) {
[17:38:53.126]                             name <- restart$name
[17:38:53.126]                             if (is.null(name)) 
[17:38:53.126]                               next
[17:38:53.126]                             if (!grepl(pattern, name)) 
[17:38:53.126]                               next
[17:38:53.126]                             invokeRestart(restart)
[17:38:53.126]                             muffled <- TRUE
[17:38:53.126]                             break
[17:38:53.126]                           }
[17:38:53.126]                         }
[17:38:53.126]                       }
[17:38:53.126]                       invisible(muffled)
[17:38:53.126]                     }
[17:38:53.126]                     muffleCondition(cond, pattern = "^muffle")
[17:38:53.126]                   }
[17:38:53.126]                 }
[17:38:53.126]                 else {
[17:38:53.126]                   if (TRUE) {
[17:38:53.126]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:38:53.126]                     {
[17:38:53.126]                       inherits <- base::inherits
[17:38:53.126]                       invokeRestart <- base::invokeRestart
[17:38:53.126]                       is.null <- base::is.null
[17:38:53.126]                       muffled <- FALSE
[17:38:53.126]                       if (inherits(cond, "message")) {
[17:38:53.126]                         muffled <- grepl(pattern, "muffleMessage")
[17:38:53.126]                         if (muffled) 
[17:38:53.126]                           invokeRestart("muffleMessage")
[17:38:53.126]                       }
[17:38:53.126]                       else if (inherits(cond, "warning")) {
[17:38:53.126]                         muffled <- grepl(pattern, "muffleWarning")
[17:38:53.126]                         if (muffled) 
[17:38:53.126]                           invokeRestart("muffleWarning")
[17:38:53.126]                       }
[17:38:53.126]                       else if (inherits(cond, "condition")) {
[17:38:53.126]                         if (!is.null(pattern)) {
[17:38:53.126]                           computeRestarts <- base::computeRestarts
[17:38:53.126]                           grepl <- base::grepl
[17:38:53.126]                           restarts <- computeRestarts(cond)
[17:38:53.126]                           for (restart in restarts) {
[17:38:53.126]                             name <- restart$name
[17:38:53.126]                             if (is.null(name)) 
[17:38:53.126]                               next
[17:38:53.126]                             if (!grepl(pattern, name)) 
[17:38:53.126]                               next
[17:38:53.126]                             invokeRestart(restart)
[17:38:53.126]                             muffled <- TRUE
[17:38:53.126]                             break
[17:38:53.126]                           }
[17:38:53.126]                         }
[17:38:53.126]                       }
[17:38:53.126]                       invisible(muffled)
[17:38:53.126]                     }
[17:38:53.126]                     muffleCondition(cond, pattern = "^muffle")
[17:38:53.126]                   }
[17:38:53.126]                 }
[17:38:53.126]             }
[17:38:53.126]         }))
[17:38:53.126]     }, error = function(ex) {
[17:38:53.126]         base::structure(base::list(value = NULL, visible = NULL, 
[17:38:53.126]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:38:53.126]                 ...future.rng), started = ...future.startTime, 
[17:38:53.126]             finished = Sys.time(), session_uuid = NA_character_, 
[17:38:53.126]             version = "1.8"), class = "FutureResult")
[17:38:53.126]     }, finally = {
[17:38:53.126]         if (!identical(...future.workdir, getwd())) 
[17:38:53.126]             setwd(...future.workdir)
[17:38:53.126]         {
[17:38:53.126]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:38:53.126]                 ...future.oldOptions$nwarnings <- NULL
[17:38:53.126]             }
[17:38:53.126]             base::options(...future.oldOptions)
[17:38:53.126]             if (.Platform$OS.type == "windows") {
[17:38:53.126]                 old_names <- names(...future.oldEnvVars)
[17:38:53.126]                 envs <- base::Sys.getenv()
[17:38:53.126]                 names <- names(envs)
[17:38:53.126]                 common <- intersect(names, old_names)
[17:38:53.126]                 added <- setdiff(names, old_names)
[17:38:53.126]                 removed <- setdiff(old_names, names)
[17:38:53.126]                 changed <- common[...future.oldEnvVars[common] != 
[17:38:53.126]                   envs[common]]
[17:38:53.126]                 NAMES <- toupper(changed)
[17:38:53.126]                 args <- list()
[17:38:53.126]                 for (kk in seq_along(NAMES)) {
[17:38:53.126]                   name <- changed[[kk]]
[17:38:53.126]                   NAME <- NAMES[[kk]]
[17:38:53.126]                   if (name != NAME && is.element(NAME, old_names)) 
[17:38:53.126]                     next
[17:38:53.126]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:38:53.126]                 }
[17:38:53.126]                 NAMES <- toupper(added)
[17:38:53.126]                 for (kk in seq_along(NAMES)) {
[17:38:53.126]                   name <- added[[kk]]
[17:38:53.126]                   NAME <- NAMES[[kk]]
[17:38:53.126]                   if (name != NAME && is.element(NAME, old_names)) 
[17:38:53.126]                     next
[17:38:53.126]                   args[[name]] <- ""
[17:38:53.126]                 }
[17:38:53.126]                 NAMES <- toupper(removed)
[17:38:53.126]                 for (kk in seq_along(NAMES)) {
[17:38:53.126]                   name <- removed[[kk]]
[17:38:53.126]                   NAME <- NAMES[[kk]]
[17:38:53.126]                   if (name != NAME && is.element(NAME, old_names)) 
[17:38:53.126]                     next
[17:38:53.126]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:38:53.126]                 }
[17:38:53.126]                 if (length(args) > 0) 
[17:38:53.126]                   base::do.call(base::Sys.setenv, args = args)
[17:38:53.126]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:38:53.126]             }
[17:38:53.126]             else {
[17:38:53.126]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:38:53.126]             }
[17:38:53.126]             {
[17:38:53.126]                 if (base::length(...future.futureOptionsAdded) > 
[17:38:53.126]                   0L) {
[17:38:53.126]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:38:53.126]                   base::names(opts) <- ...future.futureOptionsAdded
[17:38:53.126]                   base::options(opts)
[17:38:53.126]                 }
[17:38:53.126]                 {
[17:38:53.126]                   {
[17:38:53.126]                     base::options(mc.cores = ...future.mc.cores.old)
[17:38:53.126]                     NULL
[17:38:53.126]                   }
[17:38:53.126]                   options(future.plan = NULL)
[17:38:53.126]                   if (is.na(NA_character_)) 
[17:38:53.126]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:38:53.126]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:38:53.126]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:38:53.126]                     .init = FALSE)
[17:38:53.126]                 }
[17:38:53.126]             }
[17:38:53.126]         }
[17:38:53.126]     })
[17:38:53.126]     if (TRUE) {
[17:38:53.126]         base::sink(type = "output", split = FALSE)
[17:38:53.126]         if (TRUE) {
[17:38:53.126]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:38:53.126]         }
[17:38:53.126]         else {
[17:38:53.126]             ...future.result["stdout"] <- base::list(NULL)
[17:38:53.126]         }
[17:38:53.126]         base::close(...future.stdout)
[17:38:53.126]         ...future.stdout <- NULL
[17:38:53.126]     }
[17:38:53.126]     ...future.result$conditions <- ...future.conditions
[17:38:53.126]     ...future.result$finished <- base::Sys.time()
[17:38:53.126]     ...future.result
[17:38:53.126] }
[17:38:53.179] MultisessionFuture started
[17:38:53.180] result() for ClusterFuture ...
[17:38:53.180] receiveMessageFromWorker() for ClusterFuture ...
[17:38:53.180] - Validating connection of MultisessionFuture
[17:38:53.212] - received message: FutureResult
[17:38:53.212] - Received FutureResult
[17:38:53.215] - Erased future from FutureRegistry
[17:38:53.215] result() for ClusterFuture ...
[17:38:53.215] - result already collected: FutureResult
[17:38:53.215] result() for ClusterFuture ... done
[17:38:53.215] receiveMessageFromWorker() for ClusterFuture ... done
[17:38:53.216] result() for ClusterFuture ... done
[17:38:53.216] result() for ClusterFuture ...
[17:38:53.216] - result already collected: FutureResult
[17:38:53.216] result() for ClusterFuture ... done
[17:38:53.216] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:38:53.216] plan(): nbrOfWorkers() = 2
> js <- capture_journals({
+   fs <- lapply(3:1, FUN = function(x) future(slow_fcn(x)))
+   vs <- value(fs)
+ })
[17:38:53.217] getGlobalsAndPackages() ...
[17:38:53.217] Searching for globals...
[17:38:53.223] - globals found: [6] ‘slow_fcn’, ‘x’, ‘{’, ‘Sys.sleep’, ‘+’, ‘/’
[17:38:53.223] Searching for globals ... DONE
[17:38:53.223] Resolving globals: FALSE
[17:38:53.225] The total size of the 2 globals is 1.20 KiB (1232 bytes)
[17:38:53.225] The total size of the 2 globals exported for future expression (‘slow_fcn(x)’) is 1.20 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘slow_fcn’ (1.15 KiB of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[17:38:53.225] - globals: [2] ‘slow_fcn’, ‘x’
[17:38:53.226] 
[17:38:53.226] getGlobalsAndPackages() ... DONE
[17:38:53.227] run() for ‘Future’ ...
[17:38:53.228] - state: ‘created’
[17:38:53.228] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:38:53.239] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:38:53.239] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:38:53.239]   - Field: ‘node’
[17:38:53.239]   - Field: ‘label’
[17:38:53.239]   - Field: ‘local’
[17:38:53.239]   - Field: ‘owner’
[17:38:53.239]   - Field: ‘envir’
[17:38:53.239]   - Field: ‘workers’
[17:38:53.240]   - Field: ‘packages’
[17:38:53.240]   - Field: ‘gc’
[17:38:53.240]   - Field: ‘conditions’
[17:38:53.240]   - Field: ‘persistent’
[17:38:53.240]   - Field: ‘expr’
[17:38:53.240]   - Field: ‘uuid’
[17:38:53.240]   - Field: ‘seed’
[17:38:53.240]   - Field: ‘version’
[17:38:53.240]   - Field: ‘result’
[17:38:53.241]   - Field: ‘asynchronous’
[17:38:53.241]   - Field: ‘calls’
[17:38:53.241]   - Field: ‘globals’
[17:38:53.241]   - Field: ‘stdout’
[17:38:53.241]   - Field: ‘earlySignal’
[17:38:53.241]   - Field: ‘lazy’
[17:38:53.241]   - Field: ‘state’
[17:38:53.241] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:38:53.241] - Launch lazy future ...
[17:38:53.242] Packages needed by the future expression (n = 0): <none>
[17:38:53.242] Packages needed by future strategies (n = 0): <none>
[17:38:53.243] {
[17:38:53.243]     {
[17:38:53.243]         {
[17:38:53.243]             ...future.startTime <- base::Sys.time()
[17:38:53.243]             {
[17:38:53.243]                 {
[17:38:53.243]                   {
[17:38:53.243]                     {
[17:38:53.243]                       base::local({
[17:38:53.243]                         has_future <- base::requireNamespace("future", 
[17:38:53.243]                           quietly = TRUE)
[17:38:53.243]                         if (has_future) {
[17:38:53.243]                           ns <- base::getNamespace("future")
[17:38:53.243]                           version <- ns[[".package"]][["version"]]
[17:38:53.243]                           if (is.null(version)) 
[17:38:53.243]                             version <- utils::packageVersion("future")
[17:38:53.243]                         }
[17:38:53.243]                         else {
[17:38:53.243]                           version <- NULL
[17:38:53.243]                         }
[17:38:53.243]                         if (!has_future || version < "1.8.0") {
[17:38:53.243]                           info <- base::c(r_version = base::gsub("R version ", 
[17:38:53.243]                             "", base::R.version$version.string), 
[17:38:53.243]                             platform = base::sprintf("%s (%s-bit)", 
[17:38:53.243]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:38:53.243]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:38:53.243]                               "release", "version")], collapse = " "), 
[17:38:53.243]                             hostname = base::Sys.info()[["nodename"]])
[17:38:53.243]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:38:53.243]                             info)
[17:38:53.243]                           info <- base::paste(info, collapse = "; ")
[17:38:53.243]                           if (!has_future) {
[17:38:53.243]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:38:53.243]                               info)
[17:38:53.243]                           }
[17:38:53.243]                           else {
[17:38:53.243]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:38:53.243]                               info, version)
[17:38:53.243]                           }
[17:38:53.243]                           base::stop(msg)
[17:38:53.243]                         }
[17:38:53.243]                       })
[17:38:53.243]                     }
[17:38:53.243]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:38:53.243]                     base::options(mc.cores = 1L)
[17:38:53.243]                   }
[17:38:53.243]                   ...future.strategy.old <- future::plan("list")
[17:38:53.243]                   options(future.plan = NULL)
[17:38:53.243]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:38:53.243]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:38:53.243]                 }
[17:38:53.243]                 ...future.workdir <- getwd()
[17:38:53.243]             }
[17:38:53.243]             ...future.oldOptions <- base::as.list(base::.Options)
[17:38:53.243]             ...future.oldEnvVars <- base::Sys.getenv()
[17:38:53.243]         }
[17:38:53.243]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:38:53.243]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:38:53.243]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:38:53.243]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:38:53.243]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:38:53.243]             future.stdout.windows.reencode = NULL, width = 80L)
[17:38:53.243]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:38:53.243]             base::names(...future.oldOptions))
[17:38:53.243]     }
[17:38:53.243]     if (FALSE) {
[17:38:53.243]     }
[17:38:53.243]     else {
[17:38:53.243]         if (TRUE) {
[17:38:53.243]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:38:53.243]                 open = "w")
[17:38:53.243]         }
[17:38:53.243]         else {
[17:38:53.243]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:38:53.243]                 windows = "NUL", "/dev/null"), open = "w")
[17:38:53.243]         }
[17:38:53.243]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:38:53.243]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:38:53.243]             base::sink(type = "output", split = FALSE)
[17:38:53.243]             base::close(...future.stdout)
[17:38:53.243]         }, add = TRUE)
[17:38:53.243]     }
[17:38:53.243]     ...future.frame <- base::sys.nframe()
[17:38:53.243]     ...future.conditions <- base::list()
[17:38:53.243]     ...future.rng <- base::globalenv()$.Random.seed
[17:38:53.243]     if (FALSE) {
[17:38:53.243]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:38:53.243]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:38:53.243]     }
[17:38:53.243]     ...future.result <- base::tryCatch({
[17:38:53.243]         base::withCallingHandlers({
[17:38:53.243]             ...future.value <- base::withVisible(base::local({
[17:38:53.243]                 ...future.makeSendCondition <- base::local({
[17:38:53.243]                   sendCondition <- NULL
[17:38:53.243]                   function(frame = 1L) {
[17:38:53.243]                     if (is.function(sendCondition)) 
[17:38:53.243]                       return(sendCondition)
[17:38:53.243]                     ns <- getNamespace("parallel")
[17:38:53.243]                     if (exists("sendData", mode = "function", 
[17:38:53.243]                       envir = ns)) {
[17:38:53.243]                       parallel_sendData <- get("sendData", mode = "function", 
[17:38:53.243]                         envir = ns)
[17:38:53.243]                       envir <- sys.frame(frame)
[17:38:53.243]                       master <- NULL
[17:38:53.243]                       while (!identical(envir, .GlobalEnv) && 
[17:38:53.243]                         !identical(envir, emptyenv())) {
[17:38:53.243]                         if (exists("master", mode = "list", envir = envir, 
[17:38:53.243]                           inherits = FALSE)) {
[17:38:53.243]                           master <- get("master", mode = "list", 
[17:38:53.243]                             envir = envir, inherits = FALSE)
[17:38:53.243]                           if (inherits(master, c("SOCKnode", 
[17:38:53.243]                             "SOCK0node"))) {
[17:38:53.243]                             sendCondition <<- function(cond) {
[17:38:53.243]                               data <- list(type = "VALUE", value = cond, 
[17:38:53.243]                                 success = TRUE)
[17:38:53.243]                               parallel_sendData(master, data)
[17:38:53.243]                             }
[17:38:53.243]                             return(sendCondition)
[17:38:53.243]                           }
[17:38:53.243]                         }
[17:38:53.243]                         frame <- frame + 1L
[17:38:53.243]                         envir <- sys.frame(frame)
[17:38:53.243]                       }
[17:38:53.243]                     }
[17:38:53.243]                     sendCondition <<- function(cond) NULL
[17:38:53.243]                   }
[17:38:53.243]                 })
[17:38:53.243]                 withCallingHandlers({
[17:38:53.243]                   slow_fcn(x)
[17:38:53.243]                 }, immediateCondition = function(cond) {
[17:38:53.243]                   sendCondition <- ...future.makeSendCondition()
[17:38:53.243]                   sendCondition(cond)
[17:38:53.243]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:38:53.243]                   {
[17:38:53.243]                     inherits <- base::inherits
[17:38:53.243]                     invokeRestart <- base::invokeRestart
[17:38:53.243]                     is.null <- base::is.null
[17:38:53.243]                     muffled <- FALSE
[17:38:53.243]                     if (inherits(cond, "message")) {
[17:38:53.243]                       muffled <- grepl(pattern, "muffleMessage")
[17:38:53.243]                       if (muffled) 
[17:38:53.243]                         invokeRestart("muffleMessage")
[17:38:53.243]                     }
[17:38:53.243]                     else if (inherits(cond, "warning")) {
[17:38:53.243]                       muffled <- grepl(pattern, "muffleWarning")
[17:38:53.243]                       if (muffled) 
[17:38:53.243]                         invokeRestart("muffleWarning")
[17:38:53.243]                     }
[17:38:53.243]                     else if (inherits(cond, "condition")) {
[17:38:53.243]                       if (!is.null(pattern)) {
[17:38:53.243]                         computeRestarts <- base::computeRestarts
[17:38:53.243]                         grepl <- base::grepl
[17:38:53.243]                         restarts <- computeRestarts(cond)
[17:38:53.243]                         for (restart in restarts) {
[17:38:53.243]                           name <- restart$name
[17:38:53.243]                           if (is.null(name)) 
[17:38:53.243]                             next
[17:38:53.243]                           if (!grepl(pattern, name)) 
[17:38:53.243]                             next
[17:38:53.243]                           invokeRestart(restart)
[17:38:53.243]                           muffled <- TRUE
[17:38:53.243]                           break
[17:38:53.243]                         }
[17:38:53.243]                       }
[17:38:53.243]                     }
[17:38:53.243]                     invisible(muffled)
[17:38:53.243]                   }
[17:38:53.243]                   muffleCondition(cond)
[17:38:53.243]                 })
[17:38:53.243]             }))
[17:38:53.243]             future::FutureResult(value = ...future.value$value, 
[17:38:53.243]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:38:53.243]                   ...future.rng), globalenv = if (FALSE) 
[17:38:53.243]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:38:53.243]                     ...future.globalenv.names))
[17:38:53.243]                 else NULL, started = ...future.startTime, version = "1.8")
[17:38:53.243]         }, condition = base::local({
[17:38:53.243]             c <- base::c
[17:38:53.243]             inherits <- base::inherits
[17:38:53.243]             invokeRestart <- base::invokeRestart
[17:38:53.243]             length <- base::length
[17:38:53.243]             list <- base::list
[17:38:53.243]             seq.int <- base::seq.int
[17:38:53.243]             signalCondition <- base::signalCondition
[17:38:53.243]             sys.calls <- base::sys.calls
[17:38:53.243]             `[[` <- base::`[[`
[17:38:53.243]             `+` <- base::`+`
[17:38:53.243]             `<<-` <- base::`<<-`
[17:38:53.243]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:38:53.243]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:38:53.243]                   3L)]
[17:38:53.243]             }
[17:38:53.243]             function(cond) {
[17:38:53.243]                 is_error <- inherits(cond, "error")
[17:38:53.243]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:38:53.243]                   NULL)
[17:38:53.243]                 if (is_error) {
[17:38:53.243]                   sessionInformation <- function() {
[17:38:53.243]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:38:53.243]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:38:53.243]                       search = base::search(), system = base::Sys.info())
[17:38:53.243]                   }
[17:38:53.243]                   ...future.conditions[[length(...future.conditions) + 
[17:38:53.243]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:38:53.243]                     cond$call), session = sessionInformation(), 
[17:38:53.243]                     timestamp = base::Sys.time(), signaled = 0L)
[17:38:53.243]                   signalCondition(cond)
[17:38:53.243]                 }
[17:38:53.243]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:38:53.243]                 "immediateCondition"))) {
[17:38:53.243]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:38:53.243]                   ...future.conditions[[length(...future.conditions) + 
[17:38:53.243]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:38:53.243]                   if (TRUE && !signal) {
[17:38:53.243]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:38:53.243]                     {
[17:38:53.243]                       inherits <- base::inherits
[17:38:53.243]                       invokeRestart <- base::invokeRestart
[17:38:53.243]                       is.null <- base::is.null
[17:38:53.243]                       muffled <- FALSE
[17:38:53.243]                       if (inherits(cond, "message")) {
[17:38:53.243]                         muffled <- grepl(pattern, "muffleMessage")
[17:38:53.243]                         if (muffled) 
[17:38:53.243]                           invokeRestart("muffleMessage")
[17:38:53.243]                       }
[17:38:53.243]                       else if (inherits(cond, "warning")) {
[17:38:53.243]                         muffled <- grepl(pattern, "muffleWarning")
[17:38:53.243]                         if (muffled) 
[17:38:53.243]                           invokeRestart("muffleWarning")
[17:38:53.243]                       }
[17:38:53.243]                       else if (inherits(cond, "condition")) {
[17:38:53.243]                         if (!is.null(pattern)) {
[17:38:53.243]                           computeRestarts <- base::computeRestarts
[17:38:53.243]                           grepl <- base::grepl
[17:38:53.243]                           restarts <- computeRestarts(cond)
[17:38:53.243]                           for (restart in restarts) {
[17:38:53.243]                             name <- restart$name
[17:38:53.243]                             if (is.null(name)) 
[17:38:53.243]                               next
[17:38:53.243]                             if (!grepl(pattern, name)) 
[17:38:53.243]                               next
[17:38:53.243]                             invokeRestart(restart)
[17:38:53.243]                             muffled <- TRUE
[17:38:53.243]                             break
[17:38:53.243]                           }
[17:38:53.243]                         }
[17:38:53.243]                       }
[17:38:53.243]                       invisible(muffled)
[17:38:53.243]                     }
[17:38:53.243]                     muffleCondition(cond, pattern = "^muffle")
[17:38:53.243]                   }
[17:38:53.243]                 }
[17:38:53.243]                 else {
[17:38:53.243]                   if (TRUE) {
[17:38:53.243]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:38:53.243]                     {
[17:38:53.243]                       inherits <- base::inherits
[17:38:53.243]                       invokeRestart <- base::invokeRestart
[17:38:53.243]                       is.null <- base::is.null
[17:38:53.243]                       muffled <- FALSE
[17:38:53.243]                       if (inherits(cond, "message")) {
[17:38:53.243]                         muffled <- grepl(pattern, "muffleMessage")
[17:38:53.243]                         if (muffled) 
[17:38:53.243]                           invokeRestart("muffleMessage")
[17:38:53.243]                       }
[17:38:53.243]                       else if (inherits(cond, "warning")) {
[17:38:53.243]                         muffled <- grepl(pattern, "muffleWarning")
[17:38:53.243]                         if (muffled) 
[17:38:53.243]                           invokeRestart("muffleWarning")
[17:38:53.243]                       }
[17:38:53.243]                       else if (inherits(cond, "condition")) {
[17:38:53.243]                         if (!is.null(pattern)) {
[17:38:53.243]                           computeRestarts <- base::computeRestarts
[17:38:53.243]                           grepl <- base::grepl
[17:38:53.243]                           restarts <- computeRestarts(cond)
[17:38:53.243]                           for (restart in restarts) {
[17:38:53.243]                             name <- restart$name
[17:38:53.243]                             if (is.null(name)) 
[17:38:53.243]                               next
[17:38:53.243]                             if (!grepl(pattern, name)) 
[17:38:53.243]                               next
[17:38:53.243]                             invokeRestart(restart)
[17:38:53.243]                             muffled <- TRUE
[17:38:53.243]                             break
[17:38:53.243]                           }
[17:38:53.243]                         }
[17:38:53.243]                       }
[17:38:53.243]                       invisible(muffled)
[17:38:53.243]                     }
[17:38:53.243]                     muffleCondition(cond, pattern = "^muffle")
[17:38:53.243]                   }
[17:38:53.243]                 }
[17:38:53.243]             }
[17:38:53.243]         }))
[17:38:53.243]     }, error = function(ex) {
[17:38:53.243]         base::structure(base::list(value = NULL, visible = NULL, 
[17:38:53.243]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:38:53.243]                 ...future.rng), started = ...future.startTime, 
[17:38:53.243]             finished = Sys.time(), session_uuid = NA_character_, 
[17:38:53.243]             version = "1.8"), class = "FutureResult")
[17:38:53.243]     }, finally = {
[17:38:53.243]         if (!identical(...future.workdir, getwd())) 
[17:38:53.243]             setwd(...future.workdir)
[17:38:53.243]         {
[17:38:53.243]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:38:53.243]                 ...future.oldOptions$nwarnings <- NULL
[17:38:53.243]             }
[17:38:53.243]             base::options(...future.oldOptions)
[17:38:53.243]             if (.Platform$OS.type == "windows") {
[17:38:53.243]                 old_names <- names(...future.oldEnvVars)
[17:38:53.243]                 envs <- base::Sys.getenv()
[17:38:53.243]                 names <- names(envs)
[17:38:53.243]                 common <- intersect(names, old_names)
[17:38:53.243]                 added <- setdiff(names, old_names)
[17:38:53.243]                 removed <- setdiff(old_names, names)
[17:38:53.243]                 changed <- common[...future.oldEnvVars[common] != 
[17:38:53.243]                   envs[common]]
[17:38:53.243]                 NAMES <- toupper(changed)
[17:38:53.243]                 args <- list()
[17:38:53.243]                 for (kk in seq_along(NAMES)) {
[17:38:53.243]                   name <- changed[[kk]]
[17:38:53.243]                   NAME <- NAMES[[kk]]
[17:38:53.243]                   if (name != NAME && is.element(NAME, old_names)) 
[17:38:53.243]                     next
[17:38:53.243]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:38:53.243]                 }
[17:38:53.243]                 NAMES <- toupper(added)
[17:38:53.243]                 for (kk in seq_along(NAMES)) {
[17:38:53.243]                   name <- added[[kk]]
[17:38:53.243]                   NAME <- NAMES[[kk]]
[17:38:53.243]                   if (name != NAME && is.element(NAME, old_names)) 
[17:38:53.243]                     next
[17:38:53.243]                   args[[name]] <- ""
[17:38:53.243]                 }
[17:38:53.243]                 NAMES <- toupper(removed)
[17:38:53.243]                 for (kk in seq_along(NAMES)) {
[17:38:53.243]                   name <- removed[[kk]]
[17:38:53.243]                   NAME <- NAMES[[kk]]
[17:38:53.243]                   if (name != NAME && is.element(NAME, old_names)) 
[17:38:53.243]                     next
[17:38:53.243]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:38:53.243]                 }
[17:38:53.243]                 if (length(args) > 0) 
[17:38:53.243]                   base::do.call(base::Sys.setenv, args = args)
[17:38:53.243]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:38:53.243]             }
[17:38:53.243]             else {
[17:38:53.243]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:38:53.243]             }
[17:38:53.243]             {
[17:38:53.243]                 if (base::length(...future.futureOptionsAdded) > 
[17:38:53.243]                   0L) {
[17:38:53.243]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:38:53.243]                   base::names(opts) <- ...future.futureOptionsAdded
[17:38:53.243]                   base::options(opts)
[17:38:53.243]                 }
[17:38:53.243]                 {
[17:38:53.243]                   {
[17:38:53.243]                     base::options(mc.cores = ...future.mc.cores.old)
[17:38:53.243]                     NULL
[17:38:53.243]                   }
[17:38:53.243]                   options(future.plan = NULL)
[17:38:53.243]                   if (is.na(NA_character_)) 
[17:38:53.243]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:38:53.243]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:38:53.243]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:38:53.243]                     .init = FALSE)
[17:38:53.243]                 }
[17:38:53.243]             }
[17:38:53.243]         }
[17:38:53.243]     })
[17:38:53.243]     if (TRUE) {
[17:38:53.243]         base::sink(type = "output", split = FALSE)
[17:38:53.243]         if (TRUE) {
[17:38:53.243]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:38:53.243]         }
[17:38:53.243]         else {
[17:38:53.243]             ...future.result["stdout"] <- base::list(NULL)
[17:38:53.243]         }
[17:38:53.243]         base::close(...future.stdout)
[17:38:53.243]         ...future.stdout <- NULL
[17:38:53.243]     }
[17:38:53.243]     ...future.result$conditions <- ...future.conditions
[17:38:53.243]     ...future.result$finished <- base::Sys.time()
[17:38:53.243]     ...future.result
[17:38:53.243] }
[17:38:53.248] Exporting 2 global objects (1.20 KiB) to cluster node #1 ...
[17:38:53.248] Exporting ‘slow_fcn’ (1.15 KiB) to cluster node #1 ...
[17:38:53.249] Exporting ‘slow_fcn’ (1.15 KiB) to cluster node #1 ... DONE
[17:38:53.249] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[17:38:53.249] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[17:38:53.250] Exporting 2 global objects (1.20 KiB) to cluster node #1 ... DONE
[17:38:53.251] MultisessionFuture started
[17:38:53.252] - Launch lazy future ... done
[17:38:53.252] run() for ‘MultisessionFuture’ ... done
[17:38:53.253] getGlobalsAndPackages() ...
[17:38:53.253] Searching for globals...
[17:38:53.258] - globals found: [6] ‘slow_fcn’, ‘x’, ‘{’, ‘Sys.sleep’, ‘+’, ‘/’
[17:38:53.258] Searching for globals ... DONE
[17:38:53.258] Resolving globals: FALSE
[17:38:53.259] The total size of the 2 globals is 1.20 KiB (1232 bytes)
[17:38:53.259] The total size of the 2 globals exported for future expression (‘slow_fcn(x)’) is 1.20 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘slow_fcn’ (1.15 KiB of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[17:38:53.259] - globals: [2] ‘slow_fcn’, ‘x’
[17:38:53.259] 
[17:38:53.259] getGlobalsAndPackages() ... DONE
[17:38:53.260] run() for ‘Future’ ...
[17:38:53.260] - state: ‘created’
[17:38:53.260] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:38:53.270] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:38:53.270] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:38:53.271]   - Field: ‘node’
[17:38:53.271]   - Field: ‘label’
[17:38:53.271]   - Field: ‘local’
[17:38:53.271]   - Field: ‘owner’
[17:38:53.271]   - Field: ‘envir’
[17:38:53.271]   - Field: ‘workers’
[17:38:53.271]   - Field: ‘packages’
[17:38:53.271]   - Field: ‘gc’
[17:38:53.271]   - Field: ‘conditions’
[17:38:53.271]   - Field: ‘persistent’
[17:38:53.271]   - Field: ‘expr’
[17:38:53.272]   - Field: ‘uuid’
[17:38:53.272]   - Field: ‘seed’
[17:38:53.272]   - Field: ‘version’
[17:38:53.272]   - Field: ‘result’
[17:38:53.272]   - Field: ‘asynchronous’
[17:38:53.272]   - Field: ‘calls’
[17:38:53.272]   - Field: ‘globals’
[17:38:53.272]   - Field: ‘stdout’
[17:38:53.272]   - Field: ‘earlySignal’
[17:38:53.272]   - Field: ‘lazy’
[17:38:53.272]   - Field: ‘state’
[17:38:53.273] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:38:53.273] - Launch lazy future ...
[17:38:53.273] Packages needed by the future expression (n = 0): <none>
[17:38:53.273] Packages needed by future strategies (n = 0): <none>
[17:38:53.273] {
[17:38:53.273]     {
[17:38:53.273]         {
[17:38:53.273]             ...future.startTime <- base::Sys.time()
[17:38:53.273]             {
[17:38:53.273]                 {
[17:38:53.273]                   {
[17:38:53.273]                     {
[17:38:53.273]                       base::local({
[17:38:53.273]                         has_future <- base::requireNamespace("future", 
[17:38:53.273]                           quietly = TRUE)
[17:38:53.273]                         if (has_future) {
[17:38:53.273]                           ns <- base::getNamespace("future")
[17:38:53.273]                           version <- ns[[".package"]][["version"]]
[17:38:53.273]                           if (is.null(version)) 
[17:38:53.273]                             version <- utils::packageVersion("future")
[17:38:53.273]                         }
[17:38:53.273]                         else {
[17:38:53.273]                           version <- NULL
[17:38:53.273]                         }
[17:38:53.273]                         if (!has_future || version < "1.8.0") {
[17:38:53.273]                           info <- base::c(r_version = base::gsub("R version ", 
[17:38:53.273]                             "", base::R.version$version.string), 
[17:38:53.273]                             platform = base::sprintf("%s (%s-bit)", 
[17:38:53.273]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:38:53.273]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:38:53.273]                               "release", "version")], collapse = " "), 
[17:38:53.273]                             hostname = base::Sys.info()[["nodename"]])
[17:38:53.273]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:38:53.273]                             info)
[17:38:53.273]                           info <- base::paste(info, collapse = "; ")
[17:38:53.273]                           if (!has_future) {
[17:38:53.273]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:38:53.273]                               info)
[17:38:53.273]                           }
[17:38:53.273]                           else {
[17:38:53.273]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:38:53.273]                               info, version)
[17:38:53.273]                           }
[17:38:53.273]                           base::stop(msg)
[17:38:53.273]                         }
[17:38:53.273]                       })
[17:38:53.273]                     }
[17:38:53.273]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:38:53.273]                     base::options(mc.cores = 1L)
[17:38:53.273]                   }
[17:38:53.273]                   ...future.strategy.old <- future::plan("list")
[17:38:53.273]                   options(future.plan = NULL)
[17:38:53.273]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:38:53.273]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:38:53.273]                 }
[17:38:53.273]                 ...future.workdir <- getwd()
[17:38:53.273]             }
[17:38:53.273]             ...future.oldOptions <- base::as.list(base::.Options)
[17:38:53.273]             ...future.oldEnvVars <- base::Sys.getenv()
[17:38:53.273]         }
[17:38:53.273]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:38:53.273]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:38:53.273]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:38:53.273]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:38:53.273]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:38:53.273]             future.stdout.windows.reencode = NULL, width = 80L)
[17:38:53.273]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:38:53.273]             base::names(...future.oldOptions))
[17:38:53.273]     }
[17:38:53.273]     if (FALSE) {
[17:38:53.273]     }
[17:38:53.273]     else {
[17:38:53.273]         if (TRUE) {
[17:38:53.273]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:38:53.273]                 open = "w")
[17:38:53.273]         }
[17:38:53.273]         else {
[17:38:53.273]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:38:53.273]                 windows = "NUL", "/dev/null"), open = "w")
[17:38:53.273]         }
[17:38:53.273]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:38:53.273]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:38:53.273]             base::sink(type = "output", split = FALSE)
[17:38:53.273]             base::close(...future.stdout)
[17:38:53.273]         }, add = TRUE)
[17:38:53.273]     }
[17:38:53.273]     ...future.frame <- base::sys.nframe()
[17:38:53.273]     ...future.conditions <- base::list()
[17:38:53.273]     ...future.rng <- base::globalenv()$.Random.seed
[17:38:53.273]     if (FALSE) {
[17:38:53.273]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:38:53.273]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:38:53.273]     }
[17:38:53.273]     ...future.result <- base::tryCatch({
[17:38:53.273]         base::withCallingHandlers({
[17:38:53.273]             ...future.value <- base::withVisible(base::local({
[17:38:53.273]                 ...future.makeSendCondition <- base::local({
[17:38:53.273]                   sendCondition <- NULL
[17:38:53.273]                   function(frame = 1L) {
[17:38:53.273]                     if (is.function(sendCondition)) 
[17:38:53.273]                       return(sendCondition)
[17:38:53.273]                     ns <- getNamespace("parallel")
[17:38:53.273]                     if (exists("sendData", mode = "function", 
[17:38:53.273]                       envir = ns)) {
[17:38:53.273]                       parallel_sendData <- get("sendData", mode = "function", 
[17:38:53.273]                         envir = ns)
[17:38:53.273]                       envir <- sys.frame(frame)
[17:38:53.273]                       master <- NULL
[17:38:53.273]                       while (!identical(envir, .GlobalEnv) && 
[17:38:53.273]                         !identical(envir, emptyenv())) {
[17:38:53.273]                         if (exists("master", mode = "list", envir = envir, 
[17:38:53.273]                           inherits = FALSE)) {
[17:38:53.273]                           master <- get("master", mode = "list", 
[17:38:53.273]                             envir = envir, inherits = FALSE)
[17:38:53.273]                           if (inherits(master, c("SOCKnode", 
[17:38:53.273]                             "SOCK0node"))) {
[17:38:53.273]                             sendCondition <<- function(cond) {
[17:38:53.273]                               data <- list(type = "VALUE", value = cond, 
[17:38:53.273]                                 success = TRUE)
[17:38:53.273]                               parallel_sendData(master, data)
[17:38:53.273]                             }
[17:38:53.273]                             return(sendCondition)
[17:38:53.273]                           }
[17:38:53.273]                         }
[17:38:53.273]                         frame <- frame + 1L
[17:38:53.273]                         envir <- sys.frame(frame)
[17:38:53.273]                       }
[17:38:53.273]                     }
[17:38:53.273]                     sendCondition <<- function(cond) NULL
[17:38:53.273]                   }
[17:38:53.273]                 })
[17:38:53.273]                 withCallingHandlers({
[17:38:53.273]                   slow_fcn(x)
[17:38:53.273]                 }, immediateCondition = function(cond) {
[17:38:53.273]                   sendCondition <- ...future.makeSendCondition()
[17:38:53.273]                   sendCondition(cond)
[17:38:53.273]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:38:53.273]                   {
[17:38:53.273]                     inherits <- base::inherits
[17:38:53.273]                     invokeRestart <- base::invokeRestart
[17:38:53.273]                     is.null <- base::is.null
[17:38:53.273]                     muffled <- FALSE
[17:38:53.273]                     if (inherits(cond, "message")) {
[17:38:53.273]                       muffled <- grepl(pattern, "muffleMessage")
[17:38:53.273]                       if (muffled) 
[17:38:53.273]                         invokeRestart("muffleMessage")
[17:38:53.273]                     }
[17:38:53.273]                     else if (inherits(cond, "warning")) {
[17:38:53.273]                       muffled <- grepl(pattern, "muffleWarning")
[17:38:53.273]                       if (muffled) 
[17:38:53.273]                         invokeRestart("muffleWarning")
[17:38:53.273]                     }
[17:38:53.273]                     else if (inherits(cond, "condition")) {
[17:38:53.273]                       if (!is.null(pattern)) {
[17:38:53.273]                         computeRestarts <- base::computeRestarts
[17:38:53.273]                         grepl <- base::grepl
[17:38:53.273]                         restarts <- computeRestarts(cond)
[17:38:53.273]                         for (restart in restarts) {
[17:38:53.273]                           name <- restart$name
[17:38:53.273]                           if (is.null(name)) 
[17:38:53.273]                             next
[17:38:53.273]                           if (!grepl(pattern, name)) 
[17:38:53.273]                             next
[17:38:53.273]                           invokeRestart(restart)
[17:38:53.273]                           muffled <- TRUE
[17:38:53.273]                           break
[17:38:53.273]                         }
[17:38:53.273]                       }
[17:38:53.273]                     }
[17:38:53.273]                     invisible(muffled)
[17:38:53.273]                   }
[17:38:53.273]                   muffleCondition(cond)
[17:38:53.273]                 })
[17:38:53.273]             }))
[17:38:53.273]             future::FutureResult(value = ...future.value$value, 
[17:38:53.273]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:38:53.273]                   ...future.rng), globalenv = if (FALSE) 
[17:38:53.273]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:38:53.273]                     ...future.globalenv.names))
[17:38:53.273]                 else NULL, started = ...future.startTime, version = "1.8")
[17:38:53.273]         }, condition = base::local({
[17:38:53.273]             c <- base::c
[17:38:53.273]             inherits <- base::inherits
[17:38:53.273]             invokeRestart <- base::invokeRestart
[17:38:53.273]             length <- base::length
[17:38:53.273]             list <- base::list
[17:38:53.273]             seq.int <- base::seq.int
[17:38:53.273]             signalCondition <- base::signalCondition
[17:38:53.273]             sys.calls <- base::sys.calls
[17:38:53.273]             `[[` <- base::`[[`
[17:38:53.273]             `+` <- base::`+`
[17:38:53.273]             `<<-` <- base::`<<-`
[17:38:53.273]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:38:53.273]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:38:53.273]                   3L)]
[17:38:53.273]             }
[17:38:53.273]             function(cond) {
[17:38:53.273]                 is_error <- inherits(cond, "error")
[17:38:53.273]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:38:53.273]                   NULL)
[17:38:53.273]                 if (is_error) {
[17:38:53.273]                   sessionInformation <- function() {
[17:38:53.273]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:38:53.273]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:38:53.273]                       search = base::search(), system = base::Sys.info())
[17:38:53.273]                   }
[17:38:53.273]                   ...future.conditions[[length(...future.conditions) + 
[17:38:53.273]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:38:53.273]                     cond$call), session = sessionInformation(), 
[17:38:53.273]                     timestamp = base::Sys.time(), signaled = 0L)
[17:38:53.273]                   signalCondition(cond)
[17:38:53.273]                 }
[17:38:53.273]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:38:53.273]                 "immediateCondition"))) {
[17:38:53.273]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:38:53.273]                   ...future.conditions[[length(...future.conditions) + 
[17:38:53.273]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:38:53.273]                   if (TRUE && !signal) {
[17:38:53.273]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:38:53.273]                     {
[17:38:53.273]                       inherits <- base::inherits
[17:38:53.273]                       invokeRestart <- base::invokeRestart
[17:38:53.273]                       is.null <- base::is.null
[17:38:53.273]                       muffled <- FALSE
[17:38:53.273]                       if (inherits(cond, "message")) {
[17:38:53.273]                         muffled <- grepl(pattern, "muffleMessage")
[17:38:53.273]                         if (muffled) 
[17:38:53.273]                           invokeRestart("muffleMessage")
[17:38:53.273]                       }
[17:38:53.273]                       else if (inherits(cond, "warning")) {
[17:38:53.273]                         muffled <- grepl(pattern, "muffleWarning")
[17:38:53.273]                         if (muffled) 
[17:38:53.273]                           invokeRestart("muffleWarning")
[17:38:53.273]                       }
[17:38:53.273]                       else if (inherits(cond, "condition")) {
[17:38:53.273]                         if (!is.null(pattern)) {
[17:38:53.273]                           computeRestarts <- base::computeRestarts
[17:38:53.273]                           grepl <- base::grepl
[17:38:53.273]                           restarts <- computeRestarts(cond)
[17:38:53.273]                           for (restart in restarts) {
[17:38:53.273]                             name <- restart$name
[17:38:53.273]                             if (is.null(name)) 
[17:38:53.273]                               next
[17:38:53.273]                             if (!grepl(pattern, name)) 
[17:38:53.273]                               next
[17:38:53.273]                             invokeRestart(restart)
[17:38:53.273]                             muffled <- TRUE
[17:38:53.273]                             break
[17:38:53.273]                           }
[17:38:53.273]                         }
[17:38:53.273]                       }
[17:38:53.273]                       invisible(muffled)
[17:38:53.273]                     }
[17:38:53.273]                     muffleCondition(cond, pattern = "^muffle")
[17:38:53.273]                   }
[17:38:53.273]                 }
[17:38:53.273]                 else {
[17:38:53.273]                   if (TRUE) {
[17:38:53.273]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:38:53.273]                     {
[17:38:53.273]                       inherits <- base::inherits
[17:38:53.273]                       invokeRestart <- base::invokeRestart
[17:38:53.273]                       is.null <- base::is.null
[17:38:53.273]                       muffled <- FALSE
[17:38:53.273]                       if (inherits(cond, "message")) {
[17:38:53.273]                         muffled <- grepl(pattern, "muffleMessage")
[17:38:53.273]                         if (muffled) 
[17:38:53.273]                           invokeRestart("muffleMessage")
[17:38:53.273]                       }
[17:38:53.273]                       else if (inherits(cond, "warning")) {
[17:38:53.273]                         muffled <- grepl(pattern, "muffleWarning")
[17:38:53.273]                         if (muffled) 
[17:38:53.273]                           invokeRestart("muffleWarning")
[17:38:53.273]                       }
[17:38:53.273]                       else if (inherits(cond, "condition")) {
[17:38:53.273]                         if (!is.null(pattern)) {
[17:38:53.273]                           computeRestarts <- base::computeRestarts
[17:38:53.273]                           grepl <- base::grepl
[17:38:53.273]                           restarts <- computeRestarts(cond)
[17:38:53.273]                           for (restart in restarts) {
[17:38:53.273]                             name <- restart$name
[17:38:53.273]                             if (is.null(name)) 
[17:38:53.273]                               next
[17:38:53.273]                             if (!grepl(pattern, name)) 
[17:38:53.273]                               next
[17:38:53.273]                             invokeRestart(restart)
[17:38:53.273]                             muffled <- TRUE
[17:38:53.273]                             break
[17:38:53.273]                           }
[17:38:53.273]                         }
[17:38:53.273]                       }
[17:38:53.273]                       invisible(muffled)
[17:38:53.273]                     }
[17:38:53.273]                     muffleCondition(cond, pattern = "^muffle")
[17:38:53.273]                   }
[17:38:53.273]                 }
[17:38:53.273]             }
[17:38:53.273]         }))
[17:38:53.273]     }, error = function(ex) {
[17:38:53.273]         base::structure(base::list(value = NULL, visible = NULL, 
[17:38:53.273]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:38:53.273]                 ...future.rng), started = ...future.startTime, 
[17:38:53.273]             finished = Sys.time(), session_uuid = NA_character_, 
[17:38:53.273]             version = "1.8"), class = "FutureResult")
[17:38:53.273]     }, finally = {
[17:38:53.273]         if (!identical(...future.workdir, getwd())) 
[17:38:53.273]             setwd(...future.workdir)
[17:38:53.273]         {
[17:38:53.273]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:38:53.273]                 ...future.oldOptions$nwarnings <- NULL
[17:38:53.273]             }
[17:38:53.273]             base::options(...future.oldOptions)
[17:38:53.273]             if (.Platform$OS.type == "windows") {
[17:38:53.273]                 old_names <- names(...future.oldEnvVars)
[17:38:53.273]                 envs <- base::Sys.getenv()
[17:38:53.273]                 names <- names(envs)
[17:38:53.273]                 common <- intersect(names, old_names)
[17:38:53.273]                 added <- setdiff(names, old_names)
[17:38:53.273]                 removed <- setdiff(old_names, names)
[17:38:53.273]                 changed <- common[...future.oldEnvVars[common] != 
[17:38:53.273]                   envs[common]]
[17:38:53.273]                 NAMES <- toupper(changed)
[17:38:53.273]                 args <- list()
[17:38:53.273]                 for (kk in seq_along(NAMES)) {
[17:38:53.273]                   name <- changed[[kk]]
[17:38:53.273]                   NAME <- NAMES[[kk]]
[17:38:53.273]                   if (name != NAME && is.element(NAME, old_names)) 
[17:38:53.273]                     next
[17:38:53.273]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:38:53.273]                 }
[17:38:53.273]                 NAMES <- toupper(added)
[17:38:53.273]                 for (kk in seq_along(NAMES)) {
[17:38:53.273]                   name <- added[[kk]]
[17:38:53.273]                   NAME <- NAMES[[kk]]
[17:38:53.273]                   if (name != NAME && is.element(NAME, old_names)) 
[17:38:53.273]                     next
[17:38:53.273]                   args[[name]] <- ""
[17:38:53.273]                 }
[17:38:53.273]                 NAMES <- toupper(removed)
[17:38:53.273]                 for (kk in seq_along(NAMES)) {
[17:38:53.273]                   name <- removed[[kk]]
[17:38:53.273]                   NAME <- NAMES[[kk]]
[17:38:53.273]                   if (name != NAME && is.element(NAME, old_names)) 
[17:38:53.273]                     next
[17:38:53.273]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:38:53.273]                 }
[17:38:53.273]                 if (length(args) > 0) 
[17:38:53.273]                   base::do.call(base::Sys.setenv, args = args)
[17:38:53.273]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:38:53.273]             }
[17:38:53.273]             else {
[17:38:53.273]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:38:53.273]             }
[17:38:53.273]             {
[17:38:53.273]                 if (base::length(...future.futureOptionsAdded) > 
[17:38:53.273]                   0L) {
[17:38:53.273]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:38:53.273]                   base::names(opts) <- ...future.futureOptionsAdded
[17:38:53.273]                   base::options(opts)
[17:38:53.273]                 }
[17:38:53.273]                 {
[17:38:53.273]                   {
[17:38:53.273]                     base::options(mc.cores = ...future.mc.cores.old)
[17:38:53.273]                     NULL
[17:38:53.273]                   }
[17:38:53.273]                   options(future.plan = NULL)
[17:38:53.273]                   if (is.na(NA_character_)) 
[17:38:53.273]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:38:53.273]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:38:53.273]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:38:53.273]                     .init = FALSE)
[17:38:53.273]                 }
[17:38:53.273]             }
[17:38:53.273]         }
[17:38:53.273]     })
[17:38:53.273]     if (TRUE) {
[17:38:53.273]         base::sink(type = "output", split = FALSE)
[17:38:53.273]         if (TRUE) {
[17:38:53.273]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:38:53.273]         }
[17:38:53.273]         else {
[17:38:53.273]             ...future.result["stdout"] <- base::list(NULL)
[17:38:53.273]         }
[17:38:53.273]         base::close(...future.stdout)
[17:38:53.273]         ...future.stdout <- NULL
[17:38:53.273]     }
[17:38:53.273]     ...future.result$conditions <- ...future.conditions
[17:38:53.273]     ...future.result$finished <- base::Sys.time()
[17:38:53.273]     ...future.result
[17:38:53.273] }
[17:38:53.327] Exporting 2 global objects (1.20 KiB) to cluster node #2 ...
[17:38:53.327] Exporting ‘slow_fcn’ (1.15 KiB) to cluster node #2 ...
[17:38:53.328] Exporting ‘slow_fcn’ (1.15 KiB) to cluster node #2 ... DONE
[17:38:53.328] Exporting ‘x’ (56 bytes) to cluster node #2 ...
[17:38:53.328] Exporting ‘x’ (56 bytes) to cluster node #2 ... DONE
[17:38:53.328] Exporting 2 global objects (1.20 KiB) to cluster node #2 ... DONE
[17:38:53.329] MultisessionFuture started
[17:38:53.330] - Launch lazy future ... done
[17:38:53.330] run() for ‘MultisessionFuture’ ... done
[17:38:53.330] getGlobalsAndPackages() ...
[17:38:53.331] Searching for globals...
[17:38:53.332] - globals found: [6] ‘slow_fcn’, ‘x’, ‘{’, ‘Sys.sleep’, ‘+’, ‘/’
[17:38:53.332] Searching for globals ... DONE
[17:38:53.332] Resolving globals: FALSE
[17:38:53.333] The total size of the 2 globals is 1.20 KiB (1232 bytes)
[17:38:53.333] The total size of the 2 globals exported for future expression (‘slow_fcn(x)’) is 1.20 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘slow_fcn’ (1.15 KiB of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[17:38:53.333] - globals: [2] ‘slow_fcn’, ‘x’
[17:38:53.333] 
[17:38:53.333] getGlobalsAndPackages() ... DONE
[17:38:53.334] run() for ‘Future’ ...
[17:38:53.334] - state: ‘created’
[17:38:53.334] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:38:53.345] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:38:53.345] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:38:53.345]   - Field: ‘node’
[17:38:53.345]   - Field: ‘label’
[17:38:53.345]   - Field: ‘local’
[17:38:53.345]   - Field: ‘owner’
[17:38:53.345]   - Field: ‘envir’
[17:38:53.345]   - Field: ‘workers’
[17:38:53.345]   - Field: ‘packages’
[17:38:53.345]   - Field: ‘gc’
[17:38:53.346]   - Field: ‘conditions’
[17:38:53.346]   - Field: ‘persistent’
[17:38:53.346]   - Field: ‘expr’
[17:38:53.346]   - Field: ‘uuid’
[17:38:53.346]   - Field: ‘seed’
[17:38:53.346]   - Field: ‘version’
[17:38:53.346]   - Field: ‘result’
[17:38:53.346]   - Field: ‘asynchronous’
[17:38:53.346]   - Field: ‘calls’
[17:38:53.346]   - Field: ‘globals’
[17:38:53.346]   - Field: ‘stdout’
[17:38:53.347]   - Field: ‘earlySignal’
[17:38:53.347]   - Field: ‘lazy’
[17:38:53.347]   - Field: ‘state’
[17:38:53.347] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:38:53.347] - Launch lazy future ...
[17:38:53.347] Packages needed by the future expression (n = 0): <none>
[17:38:53.347] Packages needed by future strategies (n = 0): <none>
[17:38:53.348] {
[17:38:53.348]     {
[17:38:53.348]         {
[17:38:53.348]             ...future.startTime <- base::Sys.time()
[17:38:53.348]             {
[17:38:53.348]                 {
[17:38:53.348]                   {
[17:38:53.348]                     {
[17:38:53.348]                       base::local({
[17:38:53.348]                         has_future <- base::requireNamespace("future", 
[17:38:53.348]                           quietly = TRUE)
[17:38:53.348]                         if (has_future) {
[17:38:53.348]                           ns <- base::getNamespace("future")
[17:38:53.348]                           version <- ns[[".package"]][["version"]]
[17:38:53.348]                           if (is.null(version)) 
[17:38:53.348]                             version <- utils::packageVersion("future")
[17:38:53.348]                         }
[17:38:53.348]                         else {
[17:38:53.348]                           version <- NULL
[17:38:53.348]                         }
[17:38:53.348]                         if (!has_future || version < "1.8.0") {
[17:38:53.348]                           info <- base::c(r_version = base::gsub("R version ", 
[17:38:53.348]                             "", base::R.version$version.string), 
[17:38:53.348]                             platform = base::sprintf("%s (%s-bit)", 
[17:38:53.348]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:38:53.348]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:38:53.348]                               "release", "version")], collapse = " "), 
[17:38:53.348]                             hostname = base::Sys.info()[["nodename"]])
[17:38:53.348]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:38:53.348]                             info)
[17:38:53.348]                           info <- base::paste(info, collapse = "; ")
[17:38:53.348]                           if (!has_future) {
[17:38:53.348]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:38:53.348]                               info)
[17:38:53.348]                           }
[17:38:53.348]                           else {
[17:38:53.348]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:38:53.348]                               info, version)
[17:38:53.348]                           }
[17:38:53.348]                           base::stop(msg)
[17:38:53.348]                         }
[17:38:53.348]                       })
[17:38:53.348]                     }
[17:38:53.348]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:38:53.348]                     base::options(mc.cores = 1L)
[17:38:53.348]                   }
[17:38:53.348]                   ...future.strategy.old <- future::plan("list")
[17:38:53.348]                   options(future.plan = NULL)
[17:38:53.348]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:38:53.348]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:38:53.348]                 }
[17:38:53.348]                 ...future.workdir <- getwd()
[17:38:53.348]             }
[17:38:53.348]             ...future.oldOptions <- base::as.list(base::.Options)
[17:38:53.348]             ...future.oldEnvVars <- base::Sys.getenv()
[17:38:53.348]         }
[17:38:53.348]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:38:53.348]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:38:53.348]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:38:53.348]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:38:53.348]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:38:53.348]             future.stdout.windows.reencode = NULL, width = 80L)
[17:38:53.348]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:38:53.348]             base::names(...future.oldOptions))
[17:38:53.348]     }
[17:38:53.348]     if (FALSE) {
[17:38:53.348]     }
[17:38:53.348]     else {
[17:38:53.348]         if (TRUE) {
[17:38:53.348]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:38:53.348]                 open = "w")
[17:38:53.348]         }
[17:38:53.348]         else {
[17:38:53.348]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:38:53.348]                 windows = "NUL", "/dev/null"), open = "w")
[17:38:53.348]         }
[17:38:53.348]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:38:53.348]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:38:53.348]             base::sink(type = "output", split = FALSE)
[17:38:53.348]             base::close(...future.stdout)
[17:38:53.348]         }, add = TRUE)
[17:38:53.348]     }
[17:38:53.348]     ...future.frame <- base::sys.nframe()
[17:38:53.348]     ...future.conditions <- base::list()
[17:38:53.348]     ...future.rng <- base::globalenv()$.Random.seed
[17:38:53.348]     if (FALSE) {
[17:38:53.348]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:38:53.348]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:38:53.348]     }
[17:38:53.348]     ...future.result <- base::tryCatch({
[17:38:53.348]         base::withCallingHandlers({
[17:38:53.348]             ...future.value <- base::withVisible(base::local({
[17:38:53.348]                 ...future.makeSendCondition <- base::local({
[17:38:53.348]                   sendCondition <- NULL
[17:38:53.348]                   function(frame = 1L) {
[17:38:53.348]                     if (is.function(sendCondition)) 
[17:38:53.348]                       return(sendCondition)
[17:38:53.348]                     ns <- getNamespace("parallel")
[17:38:53.348]                     if (exists("sendData", mode = "function", 
[17:38:53.348]                       envir = ns)) {
[17:38:53.348]                       parallel_sendData <- get("sendData", mode = "function", 
[17:38:53.348]                         envir = ns)
[17:38:53.348]                       envir <- sys.frame(frame)
[17:38:53.348]                       master <- NULL
[17:38:53.348]                       while (!identical(envir, .GlobalEnv) && 
[17:38:53.348]                         !identical(envir, emptyenv())) {
[17:38:53.348]                         if (exists("master", mode = "list", envir = envir, 
[17:38:53.348]                           inherits = FALSE)) {
[17:38:53.348]                           master <- get("master", mode = "list", 
[17:38:53.348]                             envir = envir, inherits = FALSE)
[17:38:53.348]                           if (inherits(master, c("SOCKnode", 
[17:38:53.348]                             "SOCK0node"))) {
[17:38:53.348]                             sendCondition <<- function(cond) {
[17:38:53.348]                               data <- list(type = "VALUE", value = cond, 
[17:38:53.348]                                 success = TRUE)
[17:38:53.348]                               parallel_sendData(master, data)
[17:38:53.348]                             }
[17:38:53.348]                             return(sendCondition)
[17:38:53.348]                           }
[17:38:53.348]                         }
[17:38:53.348]                         frame <- frame + 1L
[17:38:53.348]                         envir <- sys.frame(frame)
[17:38:53.348]                       }
[17:38:53.348]                     }
[17:38:53.348]                     sendCondition <<- function(cond) NULL
[17:38:53.348]                   }
[17:38:53.348]                 })
[17:38:53.348]                 withCallingHandlers({
[17:38:53.348]                   slow_fcn(x)
[17:38:53.348]                 }, immediateCondition = function(cond) {
[17:38:53.348]                   sendCondition <- ...future.makeSendCondition()
[17:38:53.348]                   sendCondition(cond)
[17:38:53.348]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:38:53.348]                   {
[17:38:53.348]                     inherits <- base::inherits
[17:38:53.348]                     invokeRestart <- base::invokeRestart
[17:38:53.348]                     is.null <- base::is.null
[17:38:53.348]                     muffled <- FALSE
[17:38:53.348]                     if (inherits(cond, "message")) {
[17:38:53.348]                       muffled <- grepl(pattern, "muffleMessage")
[17:38:53.348]                       if (muffled) 
[17:38:53.348]                         invokeRestart("muffleMessage")
[17:38:53.348]                     }
[17:38:53.348]                     else if (inherits(cond, "warning")) {
[17:38:53.348]                       muffled <- grepl(pattern, "muffleWarning")
[17:38:53.348]                       if (muffled) 
[17:38:53.348]                         invokeRestart("muffleWarning")
[17:38:53.348]                     }
[17:38:53.348]                     else if (inherits(cond, "condition")) {
[17:38:53.348]                       if (!is.null(pattern)) {
[17:38:53.348]                         computeRestarts <- base::computeRestarts
[17:38:53.348]                         grepl <- base::grepl
[17:38:53.348]                         restarts <- computeRestarts(cond)
[17:38:53.348]                         for (restart in restarts) {
[17:38:53.348]                           name <- restart$name
[17:38:53.348]                           if (is.null(name)) 
[17:38:53.348]                             next
[17:38:53.348]                           if (!grepl(pattern, name)) 
[17:38:53.348]                             next
[17:38:53.348]                           invokeRestart(restart)
[17:38:53.348]                           muffled <- TRUE
[17:38:53.348]                           break
[17:38:53.348]                         }
[17:38:53.348]                       }
[17:38:53.348]                     }
[17:38:53.348]                     invisible(muffled)
[17:38:53.348]                   }
[17:38:53.348]                   muffleCondition(cond)
[17:38:53.348]                 })
[17:38:53.348]             }))
[17:38:53.348]             future::FutureResult(value = ...future.value$value, 
[17:38:53.348]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:38:53.348]                   ...future.rng), globalenv = if (FALSE) 
[17:38:53.348]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:38:53.348]                     ...future.globalenv.names))
[17:38:53.348]                 else NULL, started = ...future.startTime, version = "1.8")
[17:38:53.348]         }, condition = base::local({
[17:38:53.348]             c <- base::c
[17:38:53.348]             inherits <- base::inherits
[17:38:53.348]             invokeRestart <- base::invokeRestart
[17:38:53.348]             length <- base::length
[17:38:53.348]             list <- base::list
[17:38:53.348]             seq.int <- base::seq.int
[17:38:53.348]             signalCondition <- base::signalCondition
[17:38:53.348]             sys.calls <- base::sys.calls
[17:38:53.348]             `[[` <- base::`[[`
[17:38:53.348]             `+` <- base::`+`
[17:38:53.348]             `<<-` <- base::`<<-`
[17:38:53.348]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:38:53.348]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:38:53.348]                   3L)]
[17:38:53.348]             }
[17:38:53.348]             function(cond) {
[17:38:53.348]                 is_error <- inherits(cond, "error")
[17:38:53.348]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:38:53.348]                   NULL)
[17:38:53.348]                 if (is_error) {
[17:38:53.348]                   sessionInformation <- function() {
[17:38:53.348]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:38:53.348]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:38:53.348]                       search = base::search(), system = base::Sys.info())
[17:38:53.348]                   }
[17:38:53.348]                   ...future.conditions[[length(...future.conditions) + 
[17:38:53.348]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:38:53.348]                     cond$call), session = sessionInformation(), 
[17:38:53.348]                     timestamp = base::Sys.time(), signaled = 0L)
[17:38:53.348]                   signalCondition(cond)
[17:38:53.348]                 }
[17:38:53.348]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:38:53.348]                 "immediateCondition"))) {
[17:38:53.348]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:38:53.348]                   ...future.conditions[[length(...future.conditions) + 
[17:38:53.348]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:38:53.348]                   if (TRUE && !signal) {
[17:38:53.348]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:38:53.348]                     {
[17:38:53.348]                       inherits <- base::inherits
[17:38:53.348]                       invokeRestart <- base::invokeRestart
[17:38:53.348]                       is.null <- base::is.null
[17:38:53.348]                       muffled <- FALSE
[17:38:53.348]                       if (inherits(cond, "message")) {
[17:38:53.348]                         muffled <- grepl(pattern, "muffleMessage")
[17:38:53.348]                         if (muffled) 
[17:38:53.348]                           invokeRestart("muffleMessage")
[17:38:53.348]                       }
[17:38:53.348]                       else if (inherits(cond, "warning")) {
[17:38:53.348]                         muffled <- grepl(pattern, "muffleWarning")
[17:38:53.348]                         if (muffled) 
[17:38:53.348]                           invokeRestart("muffleWarning")
[17:38:53.348]                       }
[17:38:53.348]                       else if (inherits(cond, "condition")) {
[17:38:53.348]                         if (!is.null(pattern)) {
[17:38:53.348]                           computeRestarts <- base::computeRestarts
[17:38:53.348]                           grepl <- base::grepl
[17:38:53.348]                           restarts <- computeRestarts(cond)
[17:38:53.348]                           for (restart in restarts) {
[17:38:53.348]                             name <- restart$name
[17:38:53.348]                             if (is.null(name)) 
[17:38:53.348]                               next
[17:38:53.348]                             if (!grepl(pattern, name)) 
[17:38:53.348]                               next
[17:38:53.348]                             invokeRestart(restart)
[17:38:53.348]                             muffled <- TRUE
[17:38:53.348]                             break
[17:38:53.348]                           }
[17:38:53.348]                         }
[17:38:53.348]                       }
[17:38:53.348]                       invisible(muffled)
[17:38:53.348]                     }
[17:38:53.348]                     muffleCondition(cond, pattern = "^muffle")
[17:38:53.348]                   }
[17:38:53.348]                 }
[17:38:53.348]                 else {
[17:38:53.348]                   if (TRUE) {
[17:38:53.348]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:38:53.348]                     {
[17:38:53.348]                       inherits <- base::inherits
[17:38:53.348]                       invokeRestart <- base::invokeRestart
[17:38:53.348]                       is.null <- base::is.null
[17:38:53.348]                       muffled <- FALSE
[17:38:53.348]                       if (inherits(cond, "message")) {
[17:38:53.348]                         muffled <- grepl(pattern, "muffleMessage")
[17:38:53.348]                         if (muffled) 
[17:38:53.348]                           invokeRestart("muffleMessage")
[17:38:53.348]                       }
[17:38:53.348]                       else if (inherits(cond, "warning")) {
[17:38:53.348]                         muffled <- grepl(pattern, "muffleWarning")
[17:38:53.348]                         if (muffled) 
[17:38:53.348]                           invokeRestart("muffleWarning")
[17:38:53.348]                       }
[17:38:53.348]                       else if (inherits(cond, "condition")) {
[17:38:53.348]                         if (!is.null(pattern)) {
[17:38:53.348]                           computeRestarts <- base::computeRestarts
[17:38:53.348]                           grepl <- base::grepl
[17:38:53.348]                           restarts <- computeRestarts(cond)
[17:38:53.348]                           for (restart in restarts) {
[17:38:53.348]                             name <- restart$name
[17:38:53.348]                             if (is.null(name)) 
[17:38:53.348]                               next
[17:38:53.348]                             if (!grepl(pattern, name)) 
[17:38:53.348]                               next
[17:38:53.348]                             invokeRestart(restart)
[17:38:53.348]                             muffled <- TRUE
[17:38:53.348]                             break
[17:38:53.348]                           }
[17:38:53.348]                         }
[17:38:53.348]                       }
[17:38:53.348]                       invisible(muffled)
[17:38:53.348]                     }
[17:38:53.348]                     muffleCondition(cond, pattern = "^muffle")
[17:38:53.348]                   }
[17:38:53.348]                 }
[17:38:53.348]             }
[17:38:53.348]         }))
[17:38:53.348]     }, error = function(ex) {
[17:38:53.348]         base::structure(base::list(value = NULL, visible = NULL, 
[17:38:53.348]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:38:53.348]                 ...future.rng), started = ...future.startTime, 
[17:38:53.348]             finished = Sys.time(), session_uuid = NA_character_, 
[17:38:53.348]             version = "1.8"), class = "FutureResult")
[17:38:53.348]     }, finally = {
[17:38:53.348]         if (!identical(...future.workdir, getwd())) 
[17:38:53.348]             setwd(...future.workdir)
[17:38:53.348]         {
[17:38:53.348]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:38:53.348]                 ...future.oldOptions$nwarnings <- NULL
[17:38:53.348]             }
[17:38:53.348]             base::options(...future.oldOptions)
[17:38:53.348]             if (.Platform$OS.type == "windows") {
[17:38:53.348]                 old_names <- names(...future.oldEnvVars)
[17:38:53.348]                 envs <- base::Sys.getenv()
[17:38:53.348]                 names <- names(envs)
[17:38:53.348]                 common <- intersect(names, old_names)
[17:38:53.348]                 added <- setdiff(names, old_names)
[17:38:53.348]                 removed <- setdiff(old_names, names)
[17:38:53.348]                 changed <- common[...future.oldEnvVars[common] != 
[17:38:53.348]                   envs[common]]
[17:38:53.348]                 NAMES <- toupper(changed)
[17:38:53.348]                 args <- list()
[17:38:53.348]                 for (kk in seq_along(NAMES)) {
[17:38:53.348]                   name <- changed[[kk]]
[17:38:53.348]                   NAME <- NAMES[[kk]]
[17:38:53.348]                   if (name != NAME && is.element(NAME, old_names)) 
[17:38:53.348]                     next
[17:38:53.348]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:38:53.348]                 }
[17:38:53.348]                 NAMES <- toupper(added)
[17:38:53.348]                 for (kk in seq_along(NAMES)) {
[17:38:53.348]                   name <- added[[kk]]
[17:38:53.348]                   NAME <- NAMES[[kk]]
[17:38:53.348]                   if (name != NAME && is.element(NAME, old_names)) 
[17:38:53.348]                     next
[17:38:53.348]                   args[[name]] <- ""
[17:38:53.348]                 }
[17:38:53.348]                 NAMES <- toupper(removed)
[17:38:53.348]                 for (kk in seq_along(NAMES)) {
[17:38:53.348]                   name <- removed[[kk]]
[17:38:53.348]                   NAME <- NAMES[[kk]]
[17:38:53.348]                   if (name != NAME && is.element(NAME, old_names)) 
[17:38:53.348]                     next
[17:38:53.348]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:38:53.348]                 }
[17:38:53.348]                 if (length(args) > 0) 
[17:38:53.348]                   base::do.call(base::Sys.setenv, args = args)
[17:38:53.348]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:38:53.348]             }
[17:38:53.348]             else {
[17:38:53.348]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:38:53.348]             }
[17:38:53.348]             {
[17:38:53.348]                 if (base::length(...future.futureOptionsAdded) > 
[17:38:53.348]                   0L) {
[17:38:53.348]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:38:53.348]                   base::names(opts) <- ...future.futureOptionsAdded
[17:38:53.348]                   base::options(opts)
[17:38:53.348]                 }
[17:38:53.348]                 {
[17:38:53.348]                   {
[17:38:53.348]                     base::options(mc.cores = ...future.mc.cores.old)
[17:38:53.348]                     NULL
[17:38:53.348]                   }
[17:38:53.348]                   options(future.plan = NULL)
[17:38:53.348]                   if (is.na(NA_character_)) 
[17:38:53.348]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:38:53.348]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:38:53.348]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:38:53.348]                     .init = FALSE)
[17:38:53.348]                 }
[17:38:53.348]             }
[17:38:53.348]         }
[17:38:53.348]     })
[17:38:53.348]     if (TRUE) {
[17:38:53.348]         base::sink(type = "output", split = FALSE)
[17:38:53.348]         if (TRUE) {
[17:38:53.348]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:38:53.348]         }
[17:38:53.348]         else {
[17:38:53.348]             ...future.result["stdout"] <- base::list(NULL)
[17:38:53.348]         }
[17:38:53.348]         base::close(...future.stdout)
[17:38:53.348]         ...future.stdout <- NULL
[17:38:53.348]     }
[17:38:53.348]     ...future.result$conditions <- ...future.conditions
[17:38:53.348]     ...future.result$finished <- base::Sys.time()
[17:38:53.348]     ...future.result
[17:38:53.348] }
[17:38:53.350] Poll #1 (0): usedNodes() = 2, workers = 2
[17:38:53.382] Poll #2 (0.03 secs): usedNodes() = 2, workers = 2
[17:38:53.422] Poll #3 (0.07 secs): usedNodes() = 2, workers = 2
[17:38:53.453] Poll #4 (0.1 secs): usedNodes() = 2, workers = 2
[17:38:53.485] Poll #5 (0.13 secs): usedNodes() = 2, workers = 2
[17:38:53.517] Poll #6 (0.17 secs): usedNodes() = 2, workers = 2
[17:38:53.549] Poll #7 (0.2 secs): usedNodes() = 2, workers = 2
[17:38:53.581] Poll #8 (0.23 secs): usedNodes() = 2, workers = 2
[17:38:53.613] Poll #9 (0.26 secs): usedNodes() = 2, workers = 2
[17:38:53.646] Poll #10 (0.3 secs): usedNodes() = 2, workers = 2
[17:38:53.678] Poll #11 (0.33 secs): usedNodes() = 2, workers = 2
[17:38:53.711] Poll #12 (0.36 secs): usedNodes() = 2, workers = 2
[17:38:53.744] Poll #13 (0.39 secs): usedNodes() = 2, workers = 2
[17:38:53.777] Poll #14 (0.43 secs): usedNodes() = 2, workers = 2
[17:38:53.810] Poll #15 (0.46 secs): usedNodes() = 2, workers = 2
[17:38:53.843] Poll #16 (0.49 secs): usedNodes() = 2, workers = 2
[17:38:53.876] Poll #17 (0.53 secs): usedNodes() = 2, workers = 2
[17:38:53.910] Poll #18 (0.56 secs): usedNodes() = 2, workers = 2
[17:38:53.943] Poll #19 (0.59 secs): usedNodes() = 2, workers = 2
[17:38:53.977] Poll #20 (0.63 secs): usedNodes() = 2, workers = 2
[17:38:54.010] Poll #21 (0.66 secs): usedNodes() = 2, workers = 2
[17:38:54.044] Poll #22 (0.69 secs): usedNodes() = 2, workers = 2
[17:38:54.078] Poll #23 (0.73 secs): usedNodes() = 2, workers = 2
[17:38:54.091] receiveMessageFromWorker() for ClusterFuture ...
[17:38:54.092] - Validating connection of MultisessionFuture
[17:38:54.092] - received message: FutureResult
[17:38:54.093] - Received FutureResult
[17:38:54.093] - Erased future from FutureRegistry
[17:38:54.093] result() for ClusterFuture ...
[17:38:54.093] - result already collected: FutureResult
[17:38:54.093] result() for ClusterFuture ... done
[17:38:54.098] receiveMessageFromWorker() for ClusterFuture ... done
[17:38:54.098] result() for ClusterFuture ...
[17:38:54.098] - result already collected: FutureResult
[17:38:54.098] result() for ClusterFuture ... done
[17:38:54.098] result() for ClusterFuture ...
[17:38:54.098] - result already collected: FutureResult
[17:38:54.098] result() for ClusterFuture ... done
[17:38:54.101] Exporting 2 global objects (1.20 KiB) to cluster node #1 ...
[17:38:54.101] Exporting ‘slow_fcn’ (1.15 KiB) to cluster node #1 ...
[17:38:54.101] Exporting ‘slow_fcn’ (1.15 KiB) to cluster node #1 ... DONE
[17:38:54.101] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[17:38:54.102] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[17:38:54.102] Exporting 2 global objects (1.20 KiB) to cluster node #1 ... DONE
[17:38:54.103] MultisessionFuture started
[17:38:54.103] - Launch lazy future ... done
[17:38:54.103] run() for ‘MultisessionFuture’ ... done
[17:38:54.104] resolve() on list ...
[17:38:54.104]  recursive: 0
[17:38:54.104]  length: 3
[17:38:54.104] 
[17:38:54.104] Future #1
[17:38:54.105] result() for ClusterFuture ...
[17:38:54.105] - result already collected: FutureResult
[17:38:54.105] result() for ClusterFuture ... done
[17:38:54.105] result() for ClusterFuture ...
[17:38:54.105] - result already collected: FutureResult
[17:38:54.105] result() for ClusterFuture ... done
[17:38:54.105] signalConditionsASAP(MultisessionFuture, pos=1) ...
[17:38:54.105] - nx: 3
[17:38:54.105] - relay: TRUE
[17:38:54.105] - stdout: TRUE
[17:38:54.105] - signal: TRUE
[17:38:54.106] - resignal: FALSE
[17:38:54.106] - force: TRUE
[17:38:54.106] - relayed: [n=3] FALSE, FALSE, FALSE
[17:38:54.106] - queued futures: [n=3] FALSE, FALSE, FALSE
[17:38:54.106]  - until=1
[17:38:54.106]  - relaying element #1
[17:38:54.106] result() for ClusterFuture ...
[17:38:54.106] - result already collected: FutureResult
[17:38:54.106] result() for ClusterFuture ... done
[17:38:54.106] result() for ClusterFuture ...
[17:38:54.106] - result already collected: FutureResult
[17:38:54.107] result() for ClusterFuture ... done
[17:38:54.107] result() for ClusterFuture ...
[17:38:54.107] - result already collected: FutureResult
[17:38:54.107] result() for ClusterFuture ... done
[17:38:54.107] result() for ClusterFuture ...
[17:38:54.107] - result already collected: FutureResult
[17:38:54.107] result() for ClusterFuture ... done
[17:38:54.107] - relayed: [n=3] TRUE, FALSE, FALSE
[17:38:54.107] - queued futures: [n=3] TRUE, FALSE, FALSE
[17:38:54.107] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[17:38:54.108]  length: 2 (resolved future 1)
[17:38:54.364] receiveMessageFromWorker() for ClusterFuture ...
[17:38:54.364] - Validating connection of MultisessionFuture
[17:38:54.364] - received message: FutureResult
[17:38:54.365] - Received FutureResult
[17:38:54.365] - Erased future from FutureRegistry
[17:38:54.365] result() for ClusterFuture ...
[17:38:54.366] - result already collected: FutureResult
[17:38:54.366] result() for ClusterFuture ... done
[17:38:54.367] receiveMessageFromWorker() for ClusterFuture ... done
[17:38:54.368] Future #2
[17:38:54.368] result() for ClusterFuture ...
[17:38:54.368] - result already collected: FutureResult
[17:38:54.368] result() for ClusterFuture ... done
[17:38:54.368] result() for ClusterFuture ...
[17:38:54.368] - result already collected: FutureResult
[17:38:54.368] result() for ClusterFuture ... done
[17:38:54.368] signalConditionsASAP(MultisessionFuture, pos=2) ...
[17:38:54.368] - nx: 3
[17:38:54.368] - relay: TRUE
[17:38:54.368] - stdout: TRUE
[17:38:54.369] - signal: TRUE
[17:38:54.369] - resignal: FALSE
[17:38:54.369] - force: TRUE
[17:38:54.369] - relayed: [n=3] TRUE, FALSE, FALSE
[17:38:54.369] - queued futures: [n=3] TRUE, FALSE, FALSE
[17:38:54.369]  - until=2
[17:38:54.369]  - relaying element #2
[17:38:54.369] result() for ClusterFuture ...
[17:38:54.369] - result already collected: FutureResult
[17:38:54.369] result() for ClusterFuture ... done
[17:38:54.369] result() for ClusterFuture ...
[17:38:54.370] - result already collected: FutureResult
[17:38:54.370] result() for ClusterFuture ... done
[17:38:54.370] result() for ClusterFuture ...
[17:38:54.370] - result already collected: FutureResult
[17:38:54.370] result() for ClusterFuture ... done
[17:38:54.370] result() for ClusterFuture ...
[17:38:54.370] - result already collected: FutureResult
[17:38:54.370] result() for ClusterFuture ... done
[17:38:54.370] - relayed: [n=3] TRUE, TRUE, FALSE
[17:38:54.370] - queued futures: [n=3] TRUE, TRUE, FALSE
[17:38:54.370] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[17:38:54.371]  length: 1 (resolved future 2)
[17:38:55.613] receiveMessageFromWorker() for ClusterFuture ...
[17:38:55.614] - Validating connection of MultisessionFuture
[17:38:55.614] - received message: FutureResult
[17:38:55.615] - Received FutureResult
[17:38:55.615] - Erased future from FutureRegistry
[17:38:55.615] result() for ClusterFuture ...
[17:38:55.615] - result already collected: FutureResult
[17:38:55.615] result() for ClusterFuture ... done
[17:38:55.617] receiveMessageFromWorker() for ClusterFuture ... done
[17:38:55.617] Future #3
[17:38:55.617] result() for ClusterFuture ...
[17:38:55.617] - result already collected: FutureResult
[17:38:55.617] result() for ClusterFuture ... done
[17:38:55.617] result() for ClusterFuture ...
[17:38:55.617] - result already collected: FutureResult
[17:38:55.618] result() for ClusterFuture ... done
[17:38:55.618] signalConditionsASAP(MultisessionFuture, pos=3) ...
[17:38:55.618] - nx: 3
[17:38:55.618] - relay: TRUE
[17:38:55.618] - stdout: TRUE
[17:38:55.618] - signal: TRUE
[17:38:55.618] - resignal: FALSE
[17:38:55.618] - force: TRUE
[17:38:55.618] - relayed: [n=3] TRUE, TRUE, FALSE
[17:38:55.618] - queued futures: [n=3] TRUE, TRUE, FALSE
[17:38:55.618]  - until=3
[17:38:55.619]  - relaying element #3
[17:38:55.619] result() for ClusterFuture ...
[17:38:55.619] - result already collected: FutureResult
[17:38:55.619] result() for ClusterFuture ... done
[17:38:55.619] result() for ClusterFuture ...
[17:38:55.619] - result already collected: FutureResult
[17:38:55.619] result() for ClusterFuture ... done
[17:38:55.619] result() for ClusterFuture ...
[17:38:55.619] - result already collected: FutureResult
[17:38:55.619] result() for ClusterFuture ... done
[17:38:55.620] result() for ClusterFuture ...
[17:38:55.620] - result already collected: FutureResult
[17:38:55.620] result() for ClusterFuture ... done
[17:38:55.620] - relayed: [n=3] TRUE, TRUE, TRUE
[17:38:55.620] - queued futures: [n=3] TRUE, TRUE, TRUE
[17:38:55.620] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[17:38:55.620]  length: 0 (resolved future 3)
[17:38:55.620] Relaying remaining futures
[17:38:55.620] signalConditionsASAP(NULL, pos=0) ...
[17:38:55.620] - nx: 3
[17:38:55.620] - relay: TRUE
[17:38:55.621] - stdout: TRUE
[17:38:55.621] - signal: TRUE
[17:38:55.621] - resignal: FALSE
[17:38:55.621] - force: TRUE
[17:38:55.621] - relayed: [n=3] TRUE, TRUE, TRUE
[17:38:55.621] - queued futures: [n=3] TRUE, TRUE, TRUE
 - flush all
[17:38:55.621] - relayed: [n=3] TRUE, TRUE, TRUE
[17:38:55.621] - queued futures: [n=3] TRUE, TRUE, TRUE
[17:38:55.621] signalConditionsASAP(NULL, pos=0) ... done
[17:38:55.621] resolve() on list ... DONE
[17:38:55.621] result() for ClusterFuture ...
[17:38:55.622] - result already collected: FutureResult
[17:38:55.622] result() for ClusterFuture ... done
[17:38:55.622] result() for ClusterFuture ...
[17:38:55.622] - result already collected: FutureResult
[17:38:55.622] result() for ClusterFuture ... done
[17:38:55.622] result() for ClusterFuture ...
[17:38:55.622] - result already collected: FutureResult
[17:38:55.622] result() for ClusterFuture ... done
[17:38:55.622] result() for ClusterFuture ...
[17:38:55.622] - result already collected: FutureResult
[17:38:55.623] result() for ClusterFuture ... done
[17:38:55.623] result() for ClusterFuture ...
[17:38:55.623] - result already collected: FutureResult
[17:38:55.623] result() for ClusterFuture ... done
[17:38:55.623] result() for ClusterFuture ...
[17:38:55.623] - result already collected: FutureResult
[17:38:55.623] result() for ClusterFuture ... done
> print(js)
[[1]]
           event   category parent               start              at
1         create   overhead   <NA> 2024-12-19 17:38:53 0.00000000 secs
6         launch   overhead   <NA> 2024-12-19 17:38:53 0.02501202 secs
2      getWorker   overhead launch 2024-12-19 17:38:53 0.02824855 secs
3    eraseWorker   overhead launch 2024-12-19 17:38:53 0.02987003 secs
4 attachPackages   overhead launch 2024-12-19 17:38:53 0.03095961 secs
5  exportGlobals   overhead launch 2024-12-19 17:38:53 0.03162956 secs
9       evaluate evaluation   <NA> 2024-12-19 17:38:53 0.03457832 secs
7  receiveResult   overhead gather 2024-12-19 17:38:54 0.87513328 secs
8         gather   overhead   <NA> 2024-12-19 17:38:54 0.87625742 secs
           duration future_label                          future_uuid
1 9.509802e-03 secs         <NA> 0740f0fe-d7ed-4da1-022f-b1b4162670c6
6 9.321213e-03 secs         <NA> 0740f0fe-d7ed-4da1-022f-b1b4162670c6
2 2.417564e-04 secs         <NA> 0740f0fe-d7ed-4da1-022f-b1b4162670c6
3 4.367828e-04 secs         <NA> 0740f0fe-d7ed-4da1-022f-b1b4162670c6
4 3.623962e-05 secs         <NA> 0740f0fe-d7ed-4da1-022f-b1b4162670c6
5 1.468420e-03 secs         <NA> 0740f0fe-d7ed-4da1-022f-b1b4162670c6
9 8.356893e-01 secs         <NA> 0740f0fe-d7ed-4da1-022f-b1b4162670c6
7 2.079010e-04 secs         <NA> 0740f0fe-d7ed-4da1-022f-b1b4162670c6
8 2.748966e-04 secs         <NA> 0740f0fe-d7ed-4da1-022f-b1b4162670c6
                          session_uuid
1 5099548b-61e1-a6eb-4162-eda969859357
6 5099548b-61e1-a6eb-4162-eda969859357
2 5099548b-61e1-a6eb-4162-eda969859357
3 5099548b-61e1-a6eb-4162-eda969859357
4 5099548b-61e1-a6eb-4162-eda969859357
5 5099548b-61e1-a6eb-4162-eda969859357
9 ecbb5a95-c80e-7d7a-ef02-d296e010444d
7 5099548b-61e1-a6eb-4162-eda969859357
8 5099548b-61e1-a6eb-4162-eda969859357

[[2]]
           event   category parent               start              at
1         create   overhead   <NA> 2024-12-19 17:38:53 0.00000000 secs
6         launch   overhead   <NA> 2024-12-19 17:38:53 0.01955104 secs
2      getWorker   overhead launch 2024-12-19 17:38:53 0.02218747 secs
3    eraseWorker   overhead launch 2024-12-19 17:38:53 0.02282286 secs
4 attachPackages   overhead launch 2024-12-19 17:38:53 0.07344174 secs
5  exportGlobals   overhead launch 2024-12-19 17:38:53 0.07406044 secs
9       evaluate evaluation   <NA> 2024-12-19 17:38:53 0.07666469 secs
7  receiveResult   overhead gather 2024-12-19 17:38:54 1.11102939 secs
8         gather   overhead   <NA> 2024-12-19 17:38:54 1.11227846 secs
           duration future_label                          future_uuid
1 6.452322e-03 secs         <NA> 1718b536-782d-dc47-5a3c-b0aaab8ef865
6 5.688167e-02 secs         <NA> 1718b536-782d-dc47-5a3c-b0aaab8ef865
2 1.184940e-04 secs         <NA> 1718b536-782d-dc47-5a3c-b0aaab8ef865
3 4.987311e-02 secs         <NA> 1718b536-782d-dc47-5a3c-b0aaab8ef865
4 5.221367e-05 secs         <NA> 1718b536-782d-dc47-5a3c-b0aaab8ef865
5 1.331091e-03 secs         <NA> 1718b536-782d-dc47-5a3c-b0aaab8ef865
9 1.033790e+00 secs         <NA> 1718b536-782d-dc47-5a3c-b0aaab8ef865
7 3.077984e-04 secs         <NA> 1718b536-782d-dc47-5a3c-b0aaab8ef865
8 2.715588e-04 secs         <NA> 1718b536-782d-dc47-5a3c-b0aaab8ef865
                          session_uuid
1 5099548b-61e1-a6eb-4162-eda969859357
6 5099548b-61e1-a6eb-4162-eda969859357
2 5099548b-61e1-a6eb-4162-eda969859357
3 5099548b-61e1-a6eb-4162-eda969859357
4 5099548b-61e1-a6eb-4162-eda969859357
5 5099548b-61e1-a6eb-4162-eda969859357
9 fe514af5-7022-3af1-c058-123324ffaef8
7 5099548b-61e1-a6eb-4162-eda969859357
8 5099548b-61e1-a6eb-4162-eda969859357

[[3]]
           event   category parent               start              at
1         create   overhead   <NA> 2024-12-19 17:38:53 0.00000000 secs
6         launch   overhead   <NA> 2024-12-19 17:38:53 0.01660562 secs
2      getWorker   overhead launch 2024-12-19 17:38:53 0.01948261 secs
3    eraseWorker   overhead launch 2024-12-19 17:38:54 0.76865506 secs
4 attachPackages   overhead launch 2024-12-19 17:38:54 0.76956701 secs
5  exportGlobals   overhead launch 2024-12-19 17:38:54 0.77011323 secs
9       evaluate evaluation   <NA> 2024-12-19 17:38:54 0.77267766 secs
7  receiveResult   overhead gather 2024-12-19 17:38:55 2.28327250 secs
8         gather   overhead   <NA> 2024-12-19 17:38:55 2.28433824 secs
           duration future_label                          future_uuid
1 3.255606e-03 secs         <NA> 518582db-a9fa-766f-7ef1-b4c7d2e97bcb
6 7.558134e-01 secs         <NA> 518582db-a9fa-766f-7ef1-b4c7d2e97bcb
2 7.486906e-01 secs         <NA> 518582db-a9fa-766f-7ef1-b4c7d2e97bcb
3 4.138947e-04 secs         <NA> 518582db-a9fa-766f-7ef1-b4c7d2e97bcb
4 3.576279e-05 secs         <NA> 518582db-a9fa-766f-7ef1-b4c7d2e97bcb
5 1.323223e-03 secs         <NA> 518582db-a9fa-766f-7ef1-b4c7d2e97bcb
9 1.506413e+00 secs         <NA> 518582db-a9fa-766f-7ef1-b4c7d2e97bcb
7 2.117157e-04 secs         <NA> 518582db-a9fa-766f-7ef1-b4c7d2e97bcb
8 2.899170e-04 secs         <NA> 518582db-a9fa-766f-7ef1-b4c7d2e97bcb
                          session_uuid
1 5099548b-61e1-a6eb-4162-eda969859357
6 5099548b-61e1-a6eb-4162-eda969859357
2 5099548b-61e1-a6eb-4162-eda969859357
3 5099548b-61e1-a6eb-4162-eda969859357
4 5099548b-61e1-a6eb-4162-eda969859357
5 5099548b-61e1-a6eb-4162-eda969859357
9 ecbb5a95-c80e-7d7a-ef02-d296e010444d
7 5099548b-61e1-a6eb-4162-eda969859357
8 5099548b-61e1-a6eb-4162-eda969859357

> stopifnot(
+   is.list(js),
+   all(vapply(js, FUN = is.data.frame, FUN.VALUE = NA))
+ )
>   
> ## Shut down parallel workers
> plan(sequential)
[17:38:55.630] plan(): Setting new future strategy stack:
[17:38:55.630] List of future strategies:
[17:38:55.630] 1. sequential:
[17:38:55.630]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:38:55.630]    - tweaked: FALSE
[17:38:55.630]    - call: plan(sequential)
[17:38:55.631] plan(): nbrOfWorkers() = 1
> 
> message("*** capture_journals() ... done")
*** capture_journals() ... done
> 
> 
> message("*** summary() of FutureJournal ...")
*** summary() of FutureJournal ...
> 
> js <- do.call(rbind, js)
> print(js)
            event   category parent               start              at
1          create   overhead   <NA> 2024-12-19 17:38:53 0.00000000 secs
6          launch   overhead   <NA> 2024-12-19 17:38:53 0.02501202 secs
2       getWorker   overhead launch 2024-12-19 17:38:53 0.02824855 secs
3     eraseWorker   overhead launch 2024-12-19 17:38:53 0.02987003 secs
4  attachPackages   overhead launch 2024-12-19 17:38:53 0.03095961 secs
5   exportGlobals   overhead launch 2024-12-19 17:38:53 0.03162956 secs
9        evaluate evaluation   <NA> 2024-12-19 17:38:53 0.03457832 secs
7   receiveResult   overhead gather 2024-12-19 17:38:54 0.87513328 secs
8          gather   overhead   <NA> 2024-12-19 17:38:54 0.87625742 secs
11         create   overhead   <NA> 2024-12-19 17:38:53 0.00000000 secs
61         launch   overhead   <NA> 2024-12-19 17:38:53 0.01955104 secs
21      getWorker   overhead launch 2024-12-19 17:38:53 0.02218747 secs
31    eraseWorker   overhead launch 2024-12-19 17:38:53 0.02282286 secs
41 attachPackages   overhead launch 2024-12-19 17:38:53 0.07344174 secs
51  exportGlobals   overhead launch 2024-12-19 17:38:53 0.07406044 secs
91       evaluate evaluation   <NA> 2024-12-19 17:38:53 0.07666469 secs
71  receiveResult   overhead gather 2024-12-19 17:38:54 1.11102939 secs
81         gather   overhead   <NA> 2024-12-19 17:38:54 1.11227846 secs
12         create   overhead   <NA> 2024-12-19 17:38:53 0.00000000 secs
62         launch   overhead   <NA> 2024-12-19 17:38:53 0.01660562 secs
22      getWorker   overhead launch 2024-12-19 17:38:53 0.01948261 secs
32    eraseWorker   overhead launch 2024-12-19 17:38:54 0.76865506 secs
42 attachPackages   overhead launch 2024-12-19 17:38:54 0.76956701 secs
52  exportGlobals   overhead launch 2024-12-19 17:38:54 0.77011323 secs
92       evaluate evaluation   <NA> 2024-12-19 17:38:54 0.77267766 secs
72  receiveResult   overhead gather 2024-12-19 17:38:55 2.28327250 secs
82         gather   overhead   <NA> 2024-12-19 17:38:55 2.28433824 secs
            duration future_label                          future_uuid
1  9.509802e-03 secs         <NA> 0740f0fe-d7ed-4da1-022f-b1b4162670c6
6  9.321213e-03 secs         <NA> 0740f0fe-d7ed-4da1-022f-b1b4162670c6
2  2.417564e-04 secs         <NA> 0740f0fe-d7ed-4da1-022f-b1b4162670c6
3  4.367828e-04 secs         <NA> 0740f0fe-d7ed-4da1-022f-b1b4162670c6
4  3.623962e-05 secs         <NA> 0740f0fe-d7ed-4da1-022f-b1b4162670c6
5  1.468420e-03 secs         <NA> 0740f0fe-d7ed-4da1-022f-b1b4162670c6
9  8.356893e-01 secs         <NA> 0740f0fe-d7ed-4da1-022f-b1b4162670c6
7  2.079010e-04 secs         <NA> 0740f0fe-d7ed-4da1-022f-b1b4162670c6
8  2.748966e-04 secs         <NA> 0740f0fe-d7ed-4da1-022f-b1b4162670c6
11 6.452322e-03 secs         <NA> 1718b536-782d-dc47-5a3c-b0aaab8ef865
61 5.688167e-02 secs         <NA> 1718b536-782d-dc47-5a3c-b0aaab8ef865
21 1.184940e-04 secs         <NA> 1718b536-782d-dc47-5a3c-b0aaab8ef865
31 4.987311e-02 secs         <NA> 1718b536-782d-dc47-5a3c-b0aaab8ef865
41 5.221367e-05 secs         <NA> 1718b536-782d-dc47-5a3c-b0aaab8ef865
51 1.331091e-03 secs         <NA> 1718b536-782d-dc47-5a3c-b0aaab8ef865
91 1.033790e+00 secs         <NA> 1718b536-782d-dc47-5a3c-b0aaab8ef865
71 3.077984e-04 secs         <NA> 1718b536-782d-dc47-5a3c-b0aaab8ef865
81 2.715588e-04 secs         <NA> 1718b536-782d-dc47-5a3c-b0aaab8ef865
12 3.255606e-03 secs         <NA> 518582db-a9fa-766f-7ef1-b4c7d2e97bcb
62 7.558134e-01 secs         <NA> 518582db-a9fa-766f-7ef1-b4c7d2e97bcb
22 7.486906e-01 secs         <NA> 518582db-a9fa-766f-7ef1-b4c7d2e97bcb
32 4.138947e-04 secs         <NA> 518582db-a9fa-766f-7ef1-b4c7d2e97bcb
42 3.576279e-05 secs         <NA> 518582db-a9fa-766f-7ef1-b4c7d2e97bcb
52 1.323223e-03 secs         <NA> 518582db-a9fa-766f-7ef1-b4c7d2e97bcb
92 1.506413e+00 secs         <NA> 518582db-a9fa-766f-7ef1-b4c7d2e97bcb
72 2.117157e-04 secs         <NA> 518582db-a9fa-766f-7ef1-b4c7d2e97bcb
82 2.899170e-04 secs         <NA> 518582db-a9fa-766f-7ef1-b4c7d2e97bcb
                           session_uuid
1  5099548b-61e1-a6eb-4162-eda969859357
6  5099548b-61e1-a6eb-4162-eda969859357
2  5099548b-61e1-a6eb-4162-eda969859357
3  5099548b-61e1-a6eb-4162-eda969859357
4  5099548b-61e1-a6eb-4162-eda969859357
5  5099548b-61e1-a6eb-4162-eda969859357
9  ecbb5a95-c80e-7d7a-ef02-d296e010444d
7  5099548b-61e1-a6eb-4162-eda969859357
8  5099548b-61e1-a6eb-4162-eda969859357
11 5099548b-61e1-a6eb-4162-eda969859357
61 5099548b-61e1-a6eb-4162-eda969859357
21 5099548b-61e1-a6eb-4162-eda969859357
31 5099548b-61e1-a6eb-4162-eda969859357
41 5099548b-61e1-a6eb-4162-eda969859357
51 5099548b-61e1-a6eb-4162-eda969859357
91 fe514af5-7022-3af1-c058-123324ffaef8
71 5099548b-61e1-a6eb-4162-eda969859357
81 5099548b-61e1-a6eb-4162-eda969859357
12 5099548b-61e1-a6eb-4162-eda969859357
62 5099548b-61e1-a6eb-4162-eda969859357
22 5099548b-61e1-a6eb-4162-eda969859357
32 5099548b-61e1-a6eb-4162-eda969859357
42 5099548b-61e1-a6eb-4162-eda969859357
52 5099548b-61e1-a6eb-4162-eda969859357
92 ecbb5a95-c80e-7d7a-ef02-d296e010444d
72 5099548b-61e1-a6eb-4162-eda969859357
82 5099548b-61e1-a6eb-4162-eda969859357
> 
> stats <- summary(js)
> print(stats)
Number of futures: 3
  summary       evaluate evaluate_ratio        overhead overhead_ratio
1     min 0.8356893 secs      0.9534039 0.01910591 secs     0.02179716
2    mean 1.1252972 secs      0.7899205 0.28069011 secs     0.19703495
3  median 1.0337899 secs      0.9292075 0.06360555 secs     0.05717095
4     max 1.5064125 secs      0.6593688 0.75935888 secs     0.33237745
5   total 3.3758917 secs      0.7899205 0.84207034 secs     0.19703495
        duration       walltime
1 0.8765323 secs 0.8765323 secs
2 1.4245702 secs 1.4245702 secs
3 1.1125500 secs 1.1125500 secs
4 2.2846282 secs 2.2846282 secs
5 4.2737105 secs 4.2737105 secs
> 
> message("*** summary() of FutureJournal ... done")
*** summary() of FutureJournal ... done
> 
> #source("incl/end.R")
> 
