
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:39:04.545] plan(): Setting new future strategy stack:
[17:39:04.546] List of future strategies:
[17:39:04.546] 1. sequential:
[17:39:04.546]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:04.546]    - tweaked: FALSE
[17:39:04.546]    - call: future::plan("sequential")
[17:39:04.557] plan(): nbrOfWorkers() = 1
> 
> message("*** Demos ...")
*** Demos ...
> 
> message("*** Fibonacci demo of the 'future' package ...")
*** Fibonacci demo of the 'future' package ...
> demo("fibonacci", package = "future", ask = FALSE)


	demo(fibonacci)
	---- ~~~~~~~~~

> library("future")

> library("listenv")

> ## IMPORTANT:
> ## 1. The below usage of lazy futures will only work when they are
> ##    all evaluated in the same process.
> ## 2. We disable the capturing of standard output (stdout=NA) to avoid
> ##    'sink stack is full' errors
> ## 3. We disable the capturing of most conditions (condition="error") to
> ##    avoid stacking up too many conditions
> oplan <- plan(sequential)
[17:39:04.575] plan(): Setting new future strategy stack:
[17:39:04.575] List of future strategies:
[17:39:04.575] 1. sequential:
[17:39:04.575]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:04.575]    - tweaked: FALSE
[17:39:04.575]    - call: plan(sequential)
[17:39:04.586] plan(): nbrOfWorkers() = 1

> ## Defines the first 100 Fibonacci numbers
> ## (0, 1, 1, 2, 3, 5, 8, ...)
> ## but calculate only the ones need when
> ## a number is actually requested.
> 
> x <- listenv()

> x[[1]] <- 0

> x[[2]] <- 1

> for (i in 3:100) {
+   x[[i]] %<-% { x[[i - 2]] + x[[i - 1]] } %lazy% TRUE %stdout% NA %conditions% "error"
+ }
[17:39:04.593] getGlobalsAndPackages() ...
[17:39:04.593] Searching for globals...
[17:39:04.600] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:04.600] Searching for globals ... DONE
[17:39:04.600] Resolving globals: FALSE
[17:39:04.603] The total size of the 2 globals is 224 bytes (224 bytes)
[17:39:04.603] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 224 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (168 bytes of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:04.604] - globals: [2] ‘x’, ‘i’
[17:39:04.604] 
[17:39:04.604] getGlobalsAndPackages() ... DONE
[17:39:04.605] getGlobalsAndPackages() ...
[17:39:04.605] Searching for globals...
[17:39:04.606] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:04.606] Searching for globals ... DONE
[17:39:04.606] Resolving globals: FALSE
[17:39:04.607] The total size of the 2 globals is 8.41 KiB (8608 bytes)
[17:39:04.608] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 8.41 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (8.35 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:04.608] - globals: [2] ‘x’, ‘i’
[17:39:04.608] 
[17:39:04.608] getGlobalsAndPackages() ... DONE
[17:39:04.608] getGlobalsAndPackages() ...
[17:39:04.608] Searching for globals...
[17:39:04.610] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:04.610] Searching for globals ... DONE
[17:39:04.610] Resolving globals: FALSE
[17:39:04.611] The total size of the 2 globals is 16.76 KiB (17160 bytes)
[17:39:04.611] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 16.76 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (16.70 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:04.612] - globals: [2] ‘x’, ‘i’
[17:39:04.612] 
[17:39:04.612] getGlobalsAndPackages() ... DONE
[17:39:04.612] getGlobalsAndPackages() ...
[17:39:04.612] Searching for globals...
[17:39:04.614] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:04.614] Searching for globals ... DONE
[17:39:04.614] Resolving globals: FALSE
[17:39:04.615] The total size of the 2 globals is 25.11 KiB (25712 bytes)
[17:39:04.616] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 25.11 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (25.05 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:04.616] - globals: [2] ‘x’, ‘i’
[17:39:04.616] 
[17:39:04.616] getGlobalsAndPackages() ... DONE
[17:39:04.616] getGlobalsAndPackages() ...
[17:39:04.616] Searching for globals...
[17:39:04.618] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:04.618] Searching for globals ... DONE
[17:39:04.618] Resolving globals: FALSE
[17:39:04.620] The total size of the 2 globals is 33.46 KiB (34264 bytes)
[17:39:04.620] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 33.46 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (33.41 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:04.620] - globals: [2] ‘x’, ‘i’
[17:39:04.620] 
[17:39:04.620] getGlobalsAndPackages() ... DONE
[17:39:04.621] getGlobalsAndPackages() ...
[17:39:04.621] Searching for globals...
[17:39:04.622] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:04.622] Searching for globals ... DONE
[17:39:04.623] Resolving globals: FALSE
[17:39:04.624] The total size of the 2 globals is 41.81 KiB (42816 bytes)
[17:39:04.625] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 41.81 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (41.76 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:04.625] - globals: [2] ‘x’, ‘i’
[17:39:04.625] 
[17:39:04.625] getGlobalsAndPackages() ... DONE
[17:39:04.625] getGlobalsAndPackages() ...
[17:39:04.625] Searching for globals...
[17:39:04.628] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:04.628] Searching for globals ... DONE
[17:39:04.629] Resolving globals: FALSE
[17:39:04.630] The total size of the 2 globals is 50.16 KiB (51368 bytes)
[17:39:04.631] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 50.16 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (50.11 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:04.631] - globals: [2] ‘x’, ‘i’
[17:39:04.631] 
[17:39:04.631] getGlobalsAndPackages() ... DONE
[17:39:04.632] getGlobalsAndPackages() ...
[17:39:04.632] Searching for globals...
[17:39:04.633] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:04.633] Searching for globals ... DONE
[17:39:04.633] Resolving globals: FALSE
[17:39:04.636] The total size of the 2 globals is 58.52 KiB (59920 bytes)
[17:39:04.636] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 58.52 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (58.46 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:04.636] - globals: [2] ‘x’, ‘i’
[17:39:04.636] 
[17:39:04.636] getGlobalsAndPackages() ... DONE
[17:39:04.637] getGlobalsAndPackages() ...
[17:39:04.637] Searching for globals...
[17:39:04.638] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:04.638] Searching for globals ... DONE
[17:39:04.639] Resolving globals: FALSE
[17:39:04.641] The total size of the 2 globals is 66.87 KiB (68472 bytes)
[17:39:04.641] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 66.87 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (66.81 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:04.641] - globals: [2] ‘x’, ‘i’
[17:39:04.642] 
[17:39:04.642] getGlobalsAndPackages() ... DONE
[17:39:04.642] getGlobalsAndPackages() ...
[17:39:04.642] Searching for globals...
[17:39:04.644] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:04.644] Searching for globals ... DONE
[17:39:04.644] Resolving globals: FALSE
[17:39:04.646] The total size of the 2 globals is 75.22 KiB (77024 bytes)
[17:39:04.647] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 75.22 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (75.16 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:04.647] - globals: [2] ‘x’, ‘i’
[17:39:04.647] 
[17:39:04.647] getGlobalsAndPackages() ... DONE
[17:39:04.648] getGlobalsAndPackages() ...
[17:39:04.648] Searching for globals...
[17:39:04.650] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:04.651] Searching for globals ... DONE
[17:39:04.651] Resolving globals: FALSE
[17:39:04.654] The total size of the 2 globals is 83.57 KiB (85576 bytes)
[17:39:04.654] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 83.57 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (83.52 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:04.654] - globals: [2] ‘x’, ‘i’
[17:39:04.654] 
[17:39:04.654] getGlobalsAndPackages() ... DONE
[17:39:04.655] getGlobalsAndPackages() ...
[17:39:04.655] Searching for globals...
[17:39:04.656] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:04.656] Searching for globals ... DONE
[17:39:04.657] Resolving globals: FALSE
[17:39:04.660] The total size of the 2 globals is 91.92 KiB (94128 bytes)
[17:39:04.660] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 91.92 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (91.87 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:04.660] - globals: [2] ‘x’, ‘i’
[17:39:04.660] 
[17:39:04.660] getGlobalsAndPackages() ... DONE
[17:39:04.661] getGlobalsAndPackages() ...
[17:39:04.661] Searching for globals...
[17:39:04.662] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:04.662] Searching for globals ... DONE
[17:39:04.663] Resolving globals: FALSE
[17:39:04.666] The total size of the 2 globals is 100.27 KiB (102680 bytes)
[17:39:04.666] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 100.27 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (100.22 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:04.666] - globals: [2] ‘x’, ‘i’
[17:39:04.667] 
[17:39:04.667] getGlobalsAndPackages() ... DONE
[17:39:04.667] getGlobalsAndPackages() ...
[17:39:04.667] Searching for globals...
[17:39:04.669] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:04.669] Searching for globals ... DONE
[17:39:04.669] Resolving globals: FALSE
[17:39:04.674] The total size of the 2 globals is 108.62 KiB (111232 bytes)
[17:39:04.674] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 108.62 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (108.57 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:04.674] - globals: [2] ‘x’, ‘i’
[17:39:04.675] 
[17:39:04.675] getGlobalsAndPackages() ... DONE
[17:39:04.675] getGlobalsAndPackages() ...
[17:39:04.675] Searching for globals...
[17:39:04.677] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:04.677] Searching for globals ... DONE
[17:39:04.677] Resolving globals: FALSE
[17:39:04.681] The total size of the 2 globals is 116.98 KiB (119784 bytes)
[17:39:04.681] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 116.98 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (116.92 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:04.681] - globals: [2] ‘x’, ‘i’
[17:39:04.681] 
[17:39:04.682] getGlobalsAndPackages() ... DONE
[17:39:04.682] getGlobalsAndPackages() ...
[17:39:04.682] Searching for globals...
[17:39:04.684] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:04.684] Searching for globals ... DONE
[17:39:04.684] Resolving globals: FALSE
[17:39:04.688] The total size of the 2 globals is 125.33 KiB (128336 bytes)
[17:39:04.688] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 125.33 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (125.27 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:04.688] - globals: [2] ‘x’, ‘i’
[17:39:04.689] 
[17:39:04.689] getGlobalsAndPackages() ... DONE
[17:39:04.689] getGlobalsAndPackages() ...
[17:39:04.689] Searching for globals...
[17:39:04.692] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:04.692] Searching for globals ... DONE
[17:39:04.692] Resolving globals: FALSE
[17:39:04.697] The total size of the 2 globals is 133.68 KiB (136888 bytes)
[17:39:04.697] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 133.68 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (133.62 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:04.697] - globals: [2] ‘x’, ‘i’
[17:39:04.698] 
[17:39:04.698] getGlobalsAndPackages() ... DONE
[17:39:04.698] getGlobalsAndPackages() ...
[17:39:04.698] Searching for globals...
[17:39:04.700] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:04.700] Searching for globals ... DONE
[17:39:04.700] Resolving globals: FALSE
[17:39:04.705] The total size of the 2 globals is 142.03 KiB (145440 bytes)
[17:39:04.705] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 142.03 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (141.98 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:04.705] - globals: [2] ‘x’, ‘i’
[17:39:04.705] 
[17:39:04.705] getGlobalsAndPackages() ... DONE
[17:39:04.706] getGlobalsAndPackages() ...
[17:39:04.706] Searching for globals...
[17:39:04.707] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:04.708] Searching for globals ... DONE
[17:39:04.708] Resolving globals: FALSE
[17:39:04.714] The total size of the 2 globals is 150.38 KiB (153992 bytes)
[17:39:04.714] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 150.38 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (150.33 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:04.715] - globals: [2] ‘x’, ‘i’
[17:39:04.715] 
[17:39:04.715] getGlobalsAndPackages() ... DONE
[17:39:04.715] getGlobalsAndPackages() ...
[17:39:04.715] Searching for globals...
[17:39:04.717] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:04.717] Searching for globals ... DONE
[17:39:04.717] Resolving globals: FALSE
[17:39:04.722] The total size of the 2 globals is 158.73 KiB (162544 bytes)
[17:39:04.723] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 158.73 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (158.68 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:04.723] - globals: [2] ‘x’, ‘i’
[17:39:04.723] 
[17:39:04.723] getGlobalsAndPackages() ... DONE
[17:39:04.723] getGlobalsAndPackages() ...
[17:39:04.723] Searching for globals...
[17:39:04.725] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:04.725] Searching for globals ... DONE
[17:39:04.725] Resolving globals: FALSE
[17:39:04.732] The total size of the 2 globals is 167.09 KiB (171096 bytes)
[17:39:04.732] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 167.09 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (167.03 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:04.732] - globals: [2] ‘x’, ‘i’
[17:39:04.732] 
[17:39:04.732] getGlobalsAndPackages() ... DONE
[17:39:04.733] getGlobalsAndPackages() ...
[17:39:04.733] Searching for globals...
[17:39:04.734] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:04.734] Searching for globals ... DONE
[17:39:04.735] Resolving globals: FALSE
[17:39:04.740] The total size of the 2 globals is 175.44 KiB (179648 bytes)
[17:39:04.740] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 175.44 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (175.38 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:04.741] - globals: [2] ‘x’, ‘i’
[17:39:04.741] 
[17:39:04.741] getGlobalsAndPackages() ... DONE
[17:39:04.741] getGlobalsAndPackages() ...
[17:39:04.741] Searching for globals...
[17:39:04.743] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:04.743] Searching for globals ... DONE
[17:39:04.743] Resolving globals: FALSE
[17:39:04.750] The total size of the 2 globals is 183.79 KiB (188200 bytes)
[17:39:04.751] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 183.79 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (183.73 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:04.751] - globals: [2] ‘x’, ‘i’
[17:39:04.751] 
[17:39:04.751] getGlobalsAndPackages() ... DONE
[17:39:04.752] getGlobalsAndPackages() ...
[17:39:04.752] Searching for globals...
[17:39:04.753] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:04.753] Searching for globals ... DONE
[17:39:04.754] Resolving globals: FALSE
[17:39:04.760] The total size of the 2 globals is 192.14 KiB (196752 bytes)
[17:39:04.760] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 192.14 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (192.09 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:04.760] - globals: [2] ‘x’, ‘i’
[17:39:04.761] 
[17:39:04.761] getGlobalsAndPackages() ... DONE
[17:39:04.761] getGlobalsAndPackages() ...
[17:39:04.761] Searching for globals...
[17:39:04.763] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:04.763] Searching for globals ... DONE
[17:39:04.763] Resolving globals: FALSE
[17:39:04.771] The total size of the 2 globals is 200.49 KiB (205304 bytes)
[17:39:04.772] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 200.49 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (200.44 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:04.772] - globals: [2] ‘x’, ‘i’
[17:39:04.772] 
[17:39:04.772] getGlobalsAndPackages() ... DONE
[17:39:04.772] getGlobalsAndPackages() ...
[17:39:04.773] Searching for globals...
[17:39:04.774] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:04.774] Searching for globals ... DONE
[17:39:04.774] Resolving globals: FALSE
[17:39:04.781] The total size of the 2 globals is 208.84 KiB (213856 bytes)
[17:39:04.781] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 208.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (208.79 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:04.782] - globals: [2] ‘x’, ‘i’
[17:39:04.782] 
[17:39:04.782] getGlobalsAndPackages() ... DONE
[17:39:04.782] getGlobalsAndPackages() ...
[17:39:04.782] Searching for globals...
[17:39:04.784] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:04.784] Searching for globals ... DONE
[17:39:04.784] Resolving globals: FALSE
[17:39:04.793] The total size of the 2 globals is 217.20 KiB (222408 bytes)
[17:39:04.793] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 217.20 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (217.14 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:04.793] - globals: [2] ‘x’, ‘i’
[17:39:04.793] 
[17:39:04.793] getGlobalsAndPackages() ... DONE
[17:39:04.794] getGlobalsAndPackages() ...
[17:39:04.794] Searching for globals...
[17:39:04.795] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:04.795] Searching for globals ... DONE
[17:39:04.796] Resolving globals: FALSE
[17:39:04.803] The total size of the 2 globals is 225.55 KiB (230960 bytes)
[17:39:04.803] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 225.55 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (225.49 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:04.803] - globals: [2] ‘x’, ‘i’
[17:39:04.803] 
[17:39:04.803] getGlobalsAndPackages() ... DONE
[17:39:04.804] getGlobalsAndPackages() ...
[17:39:04.804] Searching for globals...
[17:39:04.805] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:04.805] Searching for globals ... DONE
[17:39:04.805] Resolving globals: FALSE
[17:39:04.814] The total size of the 2 globals is 233.90 KiB (239512 bytes)
[17:39:04.814] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 233.90 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (233.84 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:04.815] - globals: [2] ‘x’, ‘i’
[17:39:04.815] 
[17:39:04.815] getGlobalsAndPackages() ... DONE
[17:39:04.815] getGlobalsAndPackages() ...
[17:39:04.815] Searching for globals...
[17:39:04.817] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:04.817] Searching for globals ... DONE
[17:39:04.817] Resolving globals: FALSE
[17:39:04.826] The total size of the 2 globals is 242.25 KiB (248064 bytes)
[17:39:04.826] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 242.25 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (242.20 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:04.826] - globals: [2] ‘x’, ‘i’
[17:39:04.826] 
[17:39:04.826] getGlobalsAndPackages() ... DONE
[17:39:04.827] getGlobalsAndPackages() ...
[17:39:04.827] Searching for globals...
[17:39:04.829] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:04.829] Searching for globals ... DONE
[17:39:04.829] Resolving globals: FALSE
[17:39:04.837] The total size of the 2 globals is 250.60 KiB (256616 bytes)
[17:39:04.837] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 250.60 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (250.55 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:04.837] - globals: [2] ‘x’, ‘i’
[17:39:04.837] 
[17:39:04.838] getGlobalsAndPackages() ... DONE
[17:39:04.838] getGlobalsAndPackages() ...
[17:39:04.838] Searching for globals...
[17:39:04.840] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:04.840] Searching for globals ... DONE
[17:39:04.840] Resolving globals: FALSE
[17:39:04.850] The total size of the 2 globals is 258.95 KiB (265168 bytes)
[17:39:04.850] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 258.95 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (258.90 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:04.850] - globals: [2] ‘x’, ‘i’
[17:39:04.850] 
[17:39:04.850] getGlobalsAndPackages() ... DONE
[17:39:04.851] getGlobalsAndPackages() ...
[17:39:04.851] Searching for globals...
[17:39:04.853] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:04.853] Searching for globals ... DONE
[17:39:04.853] Resolving globals: FALSE
[17:39:04.863] The total size of the 2 globals is 267.30 KiB (273720 bytes)
[17:39:04.863] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 267.30 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (267.25 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:04.863] - globals: [2] ‘x’, ‘i’
[17:39:04.863] 
[17:39:04.863] getGlobalsAndPackages() ... DONE
[17:39:04.864] getGlobalsAndPackages() ...
[17:39:04.864] Searching for globals...
[17:39:04.865] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:04.865] Searching for globals ... DONE
[17:39:04.866] Resolving globals: FALSE
[17:39:04.874] The total size of the 2 globals is 275.66 KiB (282272 bytes)
[17:39:04.875] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 275.66 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (275.60 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:04.875] - globals: [2] ‘x’, ‘i’
[17:39:04.875] 
[17:39:04.875] getGlobalsAndPackages() ... DONE
[17:39:04.875] getGlobalsAndPackages() ...
[17:39:04.876] Searching for globals...
[17:39:04.877] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:04.877] Searching for globals ... DONE
[17:39:04.877] Resolving globals: FALSE
[17:39:04.887] The total size of the 2 globals is 284.01 KiB (290824 bytes)
[17:39:04.887] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 284.01 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (283.95 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:04.887] - globals: [2] ‘x’, ‘i’
[17:39:04.888] 
[17:39:04.888] getGlobalsAndPackages() ... DONE
[17:39:04.888] getGlobalsAndPackages() ...
[17:39:04.888] Searching for globals...
[17:39:04.890] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:04.890] Searching for globals ... DONE
[17:39:04.890] Resolving globals: FALSE
[17:39:04.900] The total size of the 2 globals is 292.36 KiB (299376 bytes)
[17:39:04.900] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 292.36 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (292.30 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:04.901] - globals: [2] ‘x’, ‘i’
[17:39:04.901] 
[17:39:04.901] getGlobalsAndPackages() ... DONE
[17:39:04.901] getGlobalsAndPackages() ...
[17:39:04.901] Searching for globals...
[17:39:04.903] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:04.903] Searching for globals ... DONE
[17:39:04.903] Resolving globals: FALSE
[17:39:04.914] The total size of the 2 globals is 300.71 KiB (307928 bytes)
[17:39:04.914] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 300.71 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (300.66 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:04.914] - globals: [2] ‘x’, ‘i’
[17:39:04.915] 
[17:39:04.915] getGlobalsAndPackages() ... DONE
[17:39:04.915] getGlobalsAndPackages() ...
[17:39:04.915] Searching for globals...
[17:39:04.917] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:04.917] Searching for globals ... DONE
[17:39:04.917] Resolving globals: FALSE
[17:39:04.927] The total size of the 2 globals is 309.06 KiB (316480 bytes)
[17:39:04.927] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 309.06 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (309.01 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:04.927] - globals: [2] ‘x’, ‘i’
[17:39:04.927] 
[17:39:04.927] getGlobalsAndPackages() ... DONE
[17:39:04.928] getGlobalsAndPackages() ...
[17:39:04.928] Searching for globals...
[17:39:04.931] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:04.931] Searching for globals ... DONE
[17:39:04.931] Resolving globals: FALSE
[17:39:04.941] The total size of the 2 globals is 317.41 KiB (325032 bytes)
[17:39:04.941] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 317.41 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (317.36 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:04.941] - globals: [2] ‘x’, ‘i’
[17:39:04.942] 
[17:39:04.942] getGlobalsAndPackages() ... DONE
[17:39:04.942] getGlobalsAndPackages() ...
[17:39:04.942] Searching for globals...
[17:39:04.944] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:04.944] Searching for globals ... DONE
[17:39:04.944] Resolving globals: FALSE
[17:39:04.979] The total size of the 2 globals is 325.77 KiB (333584 bytes)
[17:39:04.980] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 325.77 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (325.71 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:04.980] - globals: [2] ‘x’, ‘i’
[17:39:04.980] 
[17:39:04.980] getGlobalsAndPackages() ... DONE
[17:39:04.981] getGlobalsAndPackages() ...
[17:39:04.981] Searching for globals...
[17:39:04.982] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:04.983] Searching for globals ... DONE
[17:39:04.983] Resolving globals: FALSE
[17:39:04.995] The total size of the 2 globals is 334.12 KiB (342136 bytes)
[17:39:04.995] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 334.12 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (334.06 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:04.995] - globals: [2] ‘x’, ‘i’
[17:39:04.996] 
[17:39:04.996] getGlobalsAndPackages() ... DONE
[17:39:04.996] getGlobalsAndPackages() ...
[17:39:04.996] Searching for globals...
[17:39:04.998] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:04.998] Searching for globals ... DONE
[17:39:04.998] Resolving globals: FALSE
[17:39:05.013] The total size of the 2 globals is 342.47 KiB (350688 bytes)
[17:39:05.014] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 342.47 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (342.41 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:05.014] - globals: [2] ‘x’, ‘i’
[17:39:05.014] 
[17:39:05.014] getGlobalsAndPackages() ... DONE
[17:39:05.015] getGlobalsAndPackages() ...
[17:39:05.015] Searching for globals...
[17:39:05.017] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:05.017] Searching for globals ... DONE
[17:39:05.017] Resolving globals: FALSE
[17:39:05.030] The total size of the 2 globals is 350.82 KiB (359240 bytes)
[17:39:05.031] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 350.82 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (350.77 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:05.031] - globals: [2] ‘x’, ‘i’
[17:39:05.031] 
[17:39:05.031] getGlobalsAndPackages() ... DONE
[17:39:05.031] getGlobalsAndPackages() ...
[17:39:05.032] Searching for globals...
[17:39:05.033] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:05.033] Searching for globals ... DONE
[17:39:05.033] Resolving globals: FALSE
[17:39:05.045] The total size of the 2 globals is 359.17 KiB (367792 bytes)
[17:39:05.046] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 359.17 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (359.12 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:05.046] - globals: [2] ‘x’, ‘i’
[17:39:05.046] 
[17:39:05.046] getGlobalsAndPackages() ... DONE
[17:39:05.047] getGlobalsAndPackages() ...
[17:39:05.047] Searching for globals...
[17:39:05.050] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:05.050] Searching for globals ... DONE
[17:39:05.050] Resolving globals: FALSE
[17:39:05.062] The total size of the 2 globals is 367.52 KiB (376344 bytes)
[17:39:05.063] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 367.52 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (367.47 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:05.063] - globals: [2] ‘x’, ‘i’
[17:39:05.063] 
[17:39:05.063] getGlobalsAndPackages() ... DONE
[17:39:05.064] getGlobalsAndPackages() ...
[17:39:05.064] Searching for globals...
[17:39:05.065] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:05.065] Searching for globals ... DONE
[17:39:05.065] Resolving globals: FALSE
[17:39:05.079] The total size of the 2 globals is 375.88 KiB (384896 bytes)
[17:39:05.080] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 375.88 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (375.82 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:05.080] - globals: [2] ‘x’, ‘i’
[17:39:05.080] 
[17:39:05.080] getGlobalsAndPackages() ... DONE
[17:39:05.081] getGlobalsAndPackages() ...
[17:39:05.081] Searching for globals...
[17:39:05.082] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:05.082] Searching for globals ... DONE
[17:39:05.082] Resolving globals: FALSE
[17:39:05.096] The total size of the 2 globals is 384.23 KiB (393448 bytes)
[17:39:05.097] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 384.23 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (384.17 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:05.097] - globals: [2] ‘x’, ‘i’
[17:39:05.097] 
[17:39:05.097] getGlobalsAndPackages() ... DONE
[17:39:05.098] getGlobalsAndPackages() ...
[17:39:05.098] Searching for globals...
[17:39:05.099] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:05.099] Searching for globals ... DONE
[17:39:05.099] Resolving globals: FALSE
[17:39:05.114] The total size of the 2 globals is 392.58 KiB (402000 bytes)
[17:39:05.114] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 392.58 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (392.52 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:05.114] - globals: [2] ‘x’, ‘i’
[17:39:05.114] 
[17:39:05.114] getGlobalsAndPackages() ... DONE
[17:39:05.115] getGlobalsAndPackages() ...
[17:39:05.115] Searching for globals...
[17:39:05.117] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:05.117] Searching for globals ... DONE
[17:39:05.117] Resolving globals: FALSE
[17:39:05.131] The total size of the 2 globals is 400.93 KiB (410552 bytes)
[17:39:05.132] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 400.93 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (400.88 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:05.132] - globals: [2] ‘x’, ‘i’
[17:39:05.132] 
[17:39:05.132] getGlobalsAndPackages() ... DONE
[17:39:05.133] getGlobalsAndPackages() ...
[17:39:05.133] Searching for globals...
[17:39:05.134] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:05.134] Searching for globals ... DONE
[17:39:05.134] Resolving globals: FALSE
[17:39:05.149] The total size of the 2 globals is 409.28 KiB (419104 bytes)
[17:39:05.150] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 409.28 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (409.23 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:05.150] - globals: [2] ‘x’, ‘i’
[17:39:05.150] 
[17:39:05.150] getGlobalsAndPackages() ... DONE
[17:39:05.150] getGlobalsAndPackages() ...
[17:39:05.151] Searching for globals...
[17:39:05.152] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:05.152] Searching for globals ... DONE
[17:39:05.152] Resolving globals: FALSE
[17:39:05.168] The total size of the 2 globals is 417.63 KiB (427656 bytes)
[17:39:05.168] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 417.63 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (417.58 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:05.169] - globals: [2] ‘x’, ‘i’
[17:39:05.169] 
[17:39:05.169] getGlobalsAndPackages() ... DONE
[17:39:05.169] getGlobalsAndPackages() ...
[17:39:05.170] Searching for globals...
[17:39:05.171] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:05.171] Searching for globals ... DONE
[17:39:05.172] Resolving globals: FALSE
[17:39:05.188] The total size of the 2 globals is 425.98 KiB (436208 bytes)
[17:39:05.189] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 425.98 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (425.93 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:05.189] - globals: [2] ‘x’, ‘i’
[17:39:05.189] 
[17:39:05.189] getGlobalsAndPackages() ... DONE
[17:39:05.190] getGlobalsAndPackages() ...
[17:39:05.190] Searching for globals...
[17:39:05.191] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:05.191] Searching for globals ... DONE
[17:39:05.192] Resolving globals: FALSE
[17:39:05.208] The total size of the 2 globals is 434.34 KiB (444760 bytes)
[17:39:05.208] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 434.34 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (434.28 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:05.209] - globals: [2] ‘x’, ‘i’
[17:39:05.209] 
[17:39:05.209] getGlobalsAndPackages() ... DONE
[17:39:05.209] getGlobalsAndPackages() ...
[17:39:05.209] Searching for globals...
[17:39:05.212] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:05.212] Searching for globals ... DONE
[17:39:05.212] Resolving globals: FALSE
[17:39:05.228] The total size of the 2 globals is 442.69 KiB (453312 bytes)
[17:39:05.229] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 442.69 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (442.63 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:05.229] - globals: [2] ‘x’, ‘i’
[17:39:05.229] 
[17:39:05.229] getGlobalsAndPackages() ... DONE
[17:39:05.229] getGlobalsAndPackages() ...
[17:39:05.230] Searching for globals...
[17:39:05.231] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:05.231] Searching for globals ... DONE
[17:39:05.231] Resolving globals: FALSE
[17:39:05.247] The total size of the 2 globals is 451.04 KiB (461864 bytes)
[17:39:05.247] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 451.04 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (450.98 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:05.248] - globals: [2] ‘x’, ‘i’
[17:39:05.248] 
[17:39:05.248] getGlobalsAndPackages() ... DONE
[17:39:05.248] getGlobalsAndPackages() ...
[17:39:05.249] Searching for globals...
[17:39:05.250] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:05.250] Searching for globals ... DONE
[17:39:05.250] Resolving globals: FALSE
[17:39:05.267] The total size of the 2 globals is 459.39 KiB (470416 bytes)
[17:39:05.267] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 459.39 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (459.34 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:05.267] - globals: [2] ‘x’, ‘i’
[17:39:05.268] 
[17:39:05.268] getGlobalsAndPackages() ... DONE
[17:39:05.268] getGlobalsAndPackages() ...
[17:39:05.268] Searching for globals...
[17:39:05.270] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:05.270] Searching for globals ... DONE
[17:39:05.270] Resolving globals: FALSE
[17:39:05.286] The total size of the 2 globals is 467.74 KiB (478968 bytes)
[17:39:05.287] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 467.74 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (467.69 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:05.287] - globals: [2] ‘x’, ‘i’
[17:39:05.287] 
[17:39:05.287] getGlobalsAndPackages() ... DONE
[17:39:05.288] getGlobalsAndPackages() ...
[17:39:05.288] Searching for globals...
[17:39:05.289] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:05.289] Searching for globals ... DONE
[17:39:05.289] Resolving globals: FALSE
[17:39:05.306] The total size of the 2 globals is 476.09 KiB (487520 bytes)
[17:39:05.306] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 476.09 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (476.04 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:05.306] - globals: [2] ‘x’, ‘i’
[17:39:05.306] 
[17:39:05.306] getGlobalsAndPackages() ... DONE
[17:39:05.307] getGlobalsAndPackages() ...
[17:39:05.307] Searching for globals...
[17:39:05.309] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:05.309] Searching for globals ... DONE
[17:39:05.309] Resolving globals: FALSE
[17:39:05.327] The total size of the 2 globals is 484.45 KiB (496072 bytes)
[17:39:05.328] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 484.45 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (484.39 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:05.328] - globals: [2] ‘x’, ‘i’
[17:39:05.328] 
[17:39:05.328] getGlobalsAndPackages() ... DONE
[17:39:05.329] getGlobalsAndPackages() ...
[17:39:05.329] Searching for globals...
[17:39:05.330] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:05.330] Searching for globals ... DONE
[17:39:05.331] Resolving globals: FALSE
[17:39:05.348] The total size of the 2 globals is 492.80 KiB (504624 bytes)
[17:39:05.349] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 492.80 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (492.74 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:05.349] - globals: [2] ‘x’, ‘i’
[17:39:05.349] 
[17:39:05.349] getGlobalsAndPackages() ... DONE
[17:39:05.350] getGlobalsAndPackages() ...
[17:39:05.350] Searching for globals...
[17:39:05.351] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:05.351] Searching for globals ... DONE
[17:39:05.352] Resolving globals: FALSE
[17:39:05.369] The total size of the 2 globals is 501.15 KiB (513176 bytes)
[17:39:05.369] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 501.15 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (501.09 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:05.370] - globals: [2] ‘x’, ‘i’
[17:39:05.370] 
[17:39:05.370] getGlobalsAndPackages() ... DONE
[17:39:05.370] getGlobalsAndPackages() ...
[17:39:05.370] Searching for globals...
[17:39:05.372] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:05.372] Searching for globals ... DONE
[17:39:05.372] Resolving globals: FALSE
[17:39:05.390] The total size of the 2 globals is 509.50 KiB (521728 bytes)
[17:39:05.391] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 509.50 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (509.45 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:05.391] - globals: [2] ‘x’, ‘i’
[17:39:05.391] 
[17:39:05.391] getGlobalsAndPackages() ... DONE
[17:39:05.392] getGlobalsAndPackages() ...
[17:39:05.392] Searching for globals...
[17:39:05.393] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:05.393] Searching for globals ... DONE
[17:39:05.393] Resolving globals: FALSE
[17:39:05.413] The total size of the 2 globals is 517.85 KiB (530280 bytes)
[17:39:05.413] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 517.85 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (517.80 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:05.413] - globals: [2] ‘x’, ‘i’
[17:39:05.413] 
[17:39:05.413] getGlobalsAndPackages() ... DONE
[17:39:05.414] getGlobalsAndPackages() ...
[17:39:05.414] Searching for globals...
[17:39:05.415] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:05.416] Searching for globals ... DONE
[17:39:05.416] Resolving globals: FALSE
[17:39:05.434] The total size of the 2 globals is 526.20 KiB (538832 bytes)
[17:39:05.434] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 526.20 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (526.15 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:05.434] - globals: [2] ‘x’, ‘i’
[17:39:05.434] 
[17:39:05.434] getGlobalsAndPackages() ... DONE
[17:39:05.435] getGlobalsAndPackages() ...
[17:39:05.435] Searching for globals...
[17:39:05.437] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:05.437] Searching for globals ... DONE
[17:39:05.437] Resolving globals: FALSE
[17:39:05.457] The total size of the 2 globals is 534.55 KiB (547384 bytes)
[17:39:05.457] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 534.55 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (534.50 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:05.457] - globals: [2] ‘x’, ‘i’
[17:39:05.457] 
[17:39:05.457] getGlobalsAndPackages() ... DONE
[17:39:05.458] getGlobalsAndPackages() ...
[17:39:05.458] Searching for globals...
[17:39:05.460] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:05.460] Searching for globals ... DONE
[17:39:05.460] Resolving globals: FALSE
[17:39:05.481] The total size of the 2 globals is 542.91 KiB (555936 bytes)
[17:39:05.481] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 542.91 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (542.85 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:05.482] - globals: [2] ‘x’, ‘i’
[17:39:05.482] 
[17:39:05.482] getGlobalsAndPackages() ... DONE
[17:39:05.482] getGlobalsAndPackages() ...
[17:39:05.482] Searching for globals...
[17:39:05.484] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:05.484] Searching for globals ... DONE
[17:39:05.484] Resolving globals: FALSE
[17:39:05.503] The total size of the 2 globals is 551.26 KiB (564488 bytes)
[17:39:05.504] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 551.26 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (551.20 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:05.504] - globals: [2] ‘x’, ‘i’
[17:39:05.504] 
[17:39:05.504] getGlobalsAndPackages() ... DONE
[17:39:05.505] getGlobalsAndPackages() ...
[17:39:05.505] Searching for globals...
[17:39:05.506] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:05.506] Searching for globals ... DONE
[17:39:05.506] Resolving globals: FALSE
[17:39:05.525] The total size of the 2 globals is 559.61 KiB (573040 bytes)
[17:39:05.526] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 559.61 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (559.55 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:05.526] - globals: [2] ‘x’, ‘i’
[17:39:05.526] 
[17:39:05.526] getGlobalsAndPackages() ... DONE
[17:39:05.527] getGlobalsAndPackages() ...
[17:39:05.527] Searching for globals...
[17:39:05.530] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:05.530] Searching for globals ... DONE
[17:39:05.530] Resolving globals: FALSE
[17:39:05.550] The total size of the 2 globals is 567.96 KiB (581592 bytes)
[17:39:05.550] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 567.96 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (567.91 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:05.551] - globals: [2] ‘x’, ‘i’
[17:39:05.551] 
[17:39:05.551] getGlobalsAndPackages() ... DONE
[17:39:05.551] getGlobalsAndPackages() ...
[17:39:05.551] Searching for globals...
[17:39:05.553] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:05.553] Searching for globals ... DONE
[17:39:05.553] Resolving globals: FALSE
[17:39:05.573] The total size of the 2 globals is 576.31 KiB (590144 bytes)
[17:39:05.573] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 576.31 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (576.26 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:05.573] - globals: [2] ‘x’, ‘i’
[17:39:05.573] 
[17:39:05.574] getGlobalsAndPackages() ... DONE
[17:39:05.574] getGlobalsAndPackages() ...
[17:39:05.574] Searching for globals...
[17:39:05.577] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:05.577] Searching for globals ... DONE
[17:39:05.577] Resolving globals: FALSE
[17:39:05.598] The total size of the 2 globals is 584.66 KiB (598696 bytes)
[17:39:05.598] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 584.66 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (584.61 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:05.599] - globals: [2] ‘x’, ‘i’
[17:39:05.599] 
[17:39:05.599] getGlobalsAndPackages() ... DONE
[17:39:05.599] getGlobalsAndPackages() ...
[17:39:05.599] Searching for globals...
[17:39:05.601] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:05.601] Searching for globals ... DONE
[17:39:05.601] Resolving globals: FALSE
[17:39:05.622] The total size of the 2 globals is 593.02 KiB (607248 bytes)
[17:39:05.622] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 593.02 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (592.96 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:05.623] - globals: [2] ‘x’, ‘i’
[17:39:05.623] 
[17:39:05.623] getGlobalsAndPackages() ... DONE
[17:39:05.623] getGlobalsAndPackages() ...
[17:39:05.623] Searching for globals...
[17:39:05.626] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:05.626] Searching for globals ... DONE
[17:39:05.626] Resolving globals: FALSE
[17:39:05.648] The total size of the 2 globals is 601.37 KiB (615800 bytes)
[17:39:05.648] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 601.37 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (601.31 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:05.648] - globals: [2] ‘x’, ‘i’
[17:39:05.649] 
[17:39:05.649] getGlobalsAndPackages() ... DONE
[17:39:05.649] getGlobalsAndPackages() ...
[17:39:05.649] Searching for globals...
[17:39:05.651] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:05.651] Searching for globals ... DONE
[17:39:05.651] Resolving globals: FALSE
[17:39:05.674] The total size of the 2 globals is 609.72 KiB (624352 bytes)
[17:39:05.675] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 609.72 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (609.66 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:05.675] - globals: [2] ‘x’, ‘i’
[17:39:05.675] 
[17:39:05.675] getGlobalsAndPackages() ... DONE
[17:39:05.676] getGlobalsAndPackages() ...
[17:39:05.676] Searching for globals...
[17:39:05.677] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:05.677] Searching for globals ... DONE
[17:39:05.677] Resolving globals: FALSE
[17:39:05.701] The total size of the 2 globals is 618.07 KiB (632904 bytes)
[17:39:05.701] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 618.07 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (618.02 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:05.702] - globals: [2] ‘x’, ‘i’
[17:39:05.702] 
[17:39:05.702] getGlobalsAndPackages() ... DONE
[17:39:05.702] getGlobalsAndPackages() ...
[17:39:05.702] Searching for globals...
[17:39:05.704] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:05.704] Searching for globals ... DONE
[17:39:05.704] Resolving globals: FALSE
[17:39:05.731] The total size of the 2 globals is 626.42 KiB (641456 bytes)
[17:39:05.731] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 626.42 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (626.37 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:05.731] - globals: [2] ‘x’, ‘i’
[17:39:05.732] 
[17:39:05.732] getGlobalsAndPackages() ... DONE
[17:39:05.732] getGlobalsAndPackages() ...
[17:39:05.732] Searching for globals...
[17:39:05.734] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:05.734] Searching for globals ... DONE
[17:39:05.734] Resolving globals: FALSE
[17:39:05.759] The total size of the 2 globals is 634.77 KiB (650008 bytes)
[17:39:05.759] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 634.77 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (634.72 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:05.760] - globals: [2] ‘x’, ‘i’
[17:39:05.760] 
[17:39:05.760] getGlobalsAndPackages() ... DONE
[17:39:05.760] getGlobalsAndPackages() ...
[17:39:05.762] Searching for globals...
[17:39:05.764] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:05.764] Searching for globals ... DONE
[17:39:05.765] Resolving globals: FALSE
[17:39:05.789] The total size of the 2 globals is 643.12 KiB (658560 bytes)
[17:39:05.790] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 643.12 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (643.07 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:05.790] - globals: [2] ‘x’, ‘i’
[17:39:05.790] 
[17:39:05.790] getGlobalsAndPackages() ... DONE
[17:39:05.791] getGlobalsAndPackages() ...
[17:39:05.791] Searching for globals...
[17:39:05.792] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:05.792] Searching for globals ... DONE
[17:39:05.793] Resolving globals: FALSE
[17:39:05.818] The total size of the 2 globals is 651.48 KiB (667112 bytes)
[17:39:05.819] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 651.48 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (651.42 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:05.819] - globals: [2] ‘x’, ‘i’
[17:39:05.819] 
[17:39:05.819] getGlobalsAndPackages() ... DONE
[17:39:05.820] getGlobalsAndPackages() ...
[17:39:05.820] Searching for globals...
[17:39:05.821] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:05.821] Searching for globals ... DONE
[17:39:05.822] Resolving globals: FALSE
[17:39:05.847] The total size of the 2 globals is 659.83 KiB (675664 bytes)
[17:39:05.848] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 659.83 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (659.77 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:05.848] - globals: [2] ‘x’, ‘i’
[17:39:05.848] 
[17:39:05.848] getGlobalsAndPackages() ... DONE
[17:39:05.849] getGlobalsAndPackages() ...
[17:39:05.849] Searching for globals...
[17:39:05.850] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:05.850] Searching for globals ... DONE
[17:39:05.851] Resolving globals: FALSE
[17:39:05.874] The total size of the 2 globals is 668.18 KiB (684216 bytes)
[17:39:05.875] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 668.18 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (668.12 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:05.875] - globals: [2] ‘x’, ‘i’
[17:39:05.875] 
[17:39:05.875] getGlobalsAndPackages() ... DONE
[17:39:05.876] getGlobalsAndPackages() ...
[17:39:05.876] Searching for globals...
[17:39:05.877] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:05.877] Searching for globals ... DONE
[17:39:05.877] Resolving globals: FALSE
[17:39:05.903] The total size of the 2 globals is 676.53 KiB (692768 bytes)
[17:39:05.904] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 676.53 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (676.48 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:05.904] - globals: [2] ‘x’, ‘i’
[17:39:05.904] 
[17:39:05.904] getGlobalsAndPackages() ... DONE
[17:39:05.905] getGlobalsAndPackages() ...
[17:39:05.905] Searching for globals...
[17:39:05.906] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:05.906] Searching for globals ... DONE
[17:39:05.906] Resolving globals: FALSE
[17:39:05.932] The total size of the 2 globals is 684.88 KiB (701320 bytes)
[17:39:05.933] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 684.88 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (684.83 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:05.933] - globals: [2] ‘x’, ‘i’
[17:39:05.933] 
[17:39:05.933] getGlobalsAndPackages() ... DONE
[17:39:05.933] getGlobalsAndPackages() ...
[17:39:05.933] Searching for globals...
[17:39:05.935] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:05.935] Searching for globals ... DONE
[17:39:05.935] Resolving globals: FALSE
[17:39:05.961] The total size of the 2 globals is 693.23 KiB (709872 bytes)
[17:39:05.962] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 693.23 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (693.18 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:05.962] - globals: [2] ‘x’, ‘i’
[17:39:05.962] 
[17:39:05.962] getGlobalsAndPackages() ... DONE
[17:39:05.963] getGlobalsAndPackages() ...
[17:39:05.963] Searching for globals...
[17:39:05.964] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:05.964] Searching for globals ... DONE
[17:39:05.964] Resolving globals: FALSE
[17:39:05.992] The total size of the 2 globals is 701.59 KiB (718424 bytes)
[17:39:05.992] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 701.59 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (701.53 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:05.992] - globals: [2] ‘x’, ‘i’
[17:39:05.992] 
[17:39:05.992] getGlobalsAndPackages() ... DONE
[17:39:05.993] getGlobalsAndPackages() ...
[17:39:05.993] Searching for globals...
[17:39:05.995] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:05.995] Searching for globals ... DONE
[17:39:05.995] Resolving globals: FALSE
[17:39:06.023] The total size of the 2 globals is 709.94 KiB (726976 bytes)
[17:39:06.024] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 709.94 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (709.88 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:06.024] - globals: [2] ‘x’, ‘i’
[17:39:06.024] 
[17:39:06.024] getGlobalsAndPackages() ... DONE
[17:39:06.025] getGlobalsAndPackages() ...
[17:39:06.025] Searching for globals...
[17:39:06.026] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:06.027] Searching for globals ... DONE
[17:39:06.027] Resolving globals: FALSE
[17:39:06.054] The total size of the 2 globals is 718.29 KiB (735528 bytes)
[17:39:06.054] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 718.29 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (718.23 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:06.055] - globals: [2] ‘x’, ‘i’
[17:39:06.055] 
[17:39:06.055] getGlobalsAndPackages() ... DONE
[17:39:06.055] getGlobalsAndPackages() ...
[17:39:06.055] Searching for globals...
[17:39:06.059] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:06.059] Searching for globals ... DONE
[17:39:06.059] Resolving globals: FALSE
[17:39:06.085] The total size of the 2 globals is 726.64 KiB (744080 bytes)
[17:39:06.086] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 726.64 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (726.59 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:06.086] - globals: [2] ‘x’, ‘i’
[17:39:06.086] 
[17:39:06.086] getGlobalsAndPackages() ... DONE
[17:39:06.087] getGlobalsAndPackages() ...
[17:39:06.087] Searching for globals...
[17:39:06.088] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:06.089] Searching for globals ... DONE
[17:39:06.089] Resolving globals: FALSE
[17:39:06.117] The total size of the 2 globals is 734.99 KiB (752632 bytes)
[17:39:06.117] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 734.99 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (734.94 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:06.117] - globals: [2] ‘x’, ‘i’
[17:39:06.117] 
[17:39:06.117] getGlobalsAndPackages() ... DONE
[17:39:06.118] getGlobalsAndPackages() ...
[17:39:06.118] Searching for globals...
[17:39:06.120] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:06.120] Searching for globals ... DONE
[17:39:06.120] Resolving globals: FALSE
[17:39:06.149] The total size of the 2 globals is 743.34 KiB (761184 bytes)
[17:39:06.150] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 743.34 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (743.29 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:06.150] - globals: [2] ‘x’, ‘i’
[17:39:06.150] 
[17:39:06.150] getGlobalsAndPackages() ... DONE
[17:39:06.150] getGlobalsAndPackages() ...
[17:39:06.151] Searching for globals...
[17:39:06.152] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:06.152] Searching for globals ... DONE
[17:39:06.152] Resolving globals: FALSE
[17:39:06.181] The total size of the 2 globals is 751.70 KiB (769736 bytes)
[17:39:06.182] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 751.70 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (751.64 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:06.182] - globals: [2] ‘x’, ‘i’
[17:39:06.182] 
[17:39:06.182] getGlobalsAndPackages() ... DONE
[17:39:06.183] getGlobalsAndPackages() ...
[17:39:06.183] Searching for globals...
[17:39:06.184] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:06.184] Searching for globals ... DONE
[17:39:06.184] Resolving globals: FALSE
[17:39:06.214] The total size of the 2 globals is 760.05 KiB (778288 bytes)
[17:39:06.214] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 760.05 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (759.99 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:06.214] - globals: [2] ‘x’, ‘i’
[17:39:06.215] 
[17:39:06.215] getGlobalsAndPackages() ... DONE
[17:39:06.215] getGlobalsAndPackages() ...
[17:39:06.215] Searching for globals...
[17:39:06.217] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:06.217] Searching for globals ... DONE
[17:39:06.217] Resolving globals: FALSE
[17:39:06.247] The total size of the 2 globals is 768.40 KiB (786840 bytes)
[17:39:06.247] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 768.40 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (768.34 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:06.247] - globals: [2] ‘x’, ‘i’
[17:39:06.247] 
[17:39:06.247] getGlobalsAndPackages() ... DONE
[17:39:06.248] getGlobalsAndPackages() ...
[17:39:06.248] Searching for globals...
[17:39:06.251] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:06.251] Searching for globals ... DONE
[17:39:06.251] Resolving globals: FALSE
[17:39:06.282] The total size of the 2 globals is 776.75 KiB (795392 bytes)
[17:39:06.283] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 776.75 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (776.70 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:06.283] - globals: [2] ‘x’, ‘i’
[17:39:06.283] 
[17:39:06.283] getGlobalsAndPackages() ... DONE
[17:39:06.284] getGlobalsAndPackages() ...
[17:39:06.284] Searching for globals...
[17:39:06.285] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:06.286] Searching for globals ... DONE
[17:39:06.286] Resolving globals: FALSE
[17:39:06.316] The total size of the 2 globals is 785.10 KiB (803944 bytes)
[17:39:06.316] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 785.10 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (785.05 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:06.317] - globals: [2] ‘x’, ‘i’
[17:39:06.317] 
[17:39:06.317] getGlobalsAndPackages() ... DONE
[17:39:06.317] getGlobalsAndPackages() ...
[17:39:06.318] Searching for globals...
[17:39:06.319] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:06.319] Searching for globals ... DONE
[17:39:06.319] Resolving globals: FALSE
[17:39:06.349] The total size of the 2 globals is 793.45 KiB (812496 bytes)
[17:39:06.350] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 793.45 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (793.40 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:06.350] - globals: [2] ‘x’, ‘i’
[17:39:06.350] 
[17:39:06.350] getGlobalsAndPackages() ... DONE
[17:39:06.351] getGlobalsAndPackages() ...
[17:39:06.351] Searching for globals...
[17:39:06.353] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:06.353] Searching for globals ... DONE
[17:39:06.353] Resolving globals: FALSE
[17:39:06.386] The total size of the 2 globals is 801.80 KiB (821048 bytes)
[17:39:06.386] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 801.80 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (801.75 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:06.386] - globals: [2] ‘x’, ‘i’
[17:39:06.387] 
[17:39:06.387] getGlobalsAndPackages() ... DONE
[17:39:06.387] getGlobalsAndPackages() ...
[17:39:06.387] Searching for globals...
[17:39:06.389] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:39:06.389] Searching for globals ... DONE
[17:39:06.389] Resolving globals: FALSE
[17:39:06.421] The total size of the 2 globals is 810.16 KiB (829600 bytes)
[17:39:06.421] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 810.16 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (810.10 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:39:06.421] - globals: [2] ‘x’, ‘i’
[17:39:06.422] 
[17:39:06.422] getGlobalsAndPackages() ... DONE

> ## At this point nothing has been calculated,
> ## because lazy evaluation is in place.
> 
> ## Get the 7:th Fibonnaci numbers (should be 8)
> print(x[[7]])
[17:39:06.423] run() for ‘Future’ ...
[17:39:06.423] - state: ‘created’
[17:39:06.423] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:06.423] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:06.424] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:06.424]   - Field: ‘label’
[17:39:06.424]   - Field: ‘local’
[17:39:06.424]   - Field: ‘owner’
[17:39:06.424]   - Field: ‘envir’
[17:39:06.424]   - Field: ‘packages’
[17:39:06.424]   - Field: ‘gc’
[17:39:06.424]   - Field: ‘conditions’
[17:39:06.424]   - Field: ‘expr’
[17:39:06.424]   - Field: ‘uuid’
[17:39:06.425]   - Field: ‘seed’
[17:39:06.425]   - Field: ‘version’
[17:39:06.425]   - Field: ‘result’
[17:39:06.425]   - Field: ‘asynchronous’
[17:39:06.425]   - Field: ‘calls’
[17:39:06.425]   - Field: ‘globals’
[17:39:06.425]   - Field: ‘stdout’
[17:39:06.425]   - Field: ‘earlySignal’
[17:39:06.425]   - Field: ‘lazy’
[17:39:06.425]   - Field: ‘state’
[17:39:06.425] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:06.425] - Launch lazy future ...
[17:39:06.426] Packages needed by the future expression (n = 0): <none>
[17:39:06.426] Packages needed by future strategies (n = 0): <none>
[17:39:06.427] {
[17:39:06.427]     {
[17:39:06.427]         {
[17:39:06.427]             ...future.startTime <- base::Sys.time()
[17:39:06.427]             {
[17:39:06.427]                 {
[17:39:06.427]                   {
[17:39:06.427]                     base::local({
[17:39:06.427]                       has_future <- base::requireNamespace("future", 
[17:39:06.427]                         quietly = TRUE)
[17:39:06.427]                       if (has_future) {
[17:39:06.427]                         ns <- base::getNamespace("future")
[17:39:06.427]                         version <- ns[[".package"]][["version"]]
[17:39:06.427]                         if (is.null(version)) 
[17:39:06.427]                           version <- utils::packageVersion("future")
[17:39:06.427]                       }
[17:39:06.427]                       else {
[17:39:06.427]                         version <- NULL
[17:39:06.427]                       }
[17:39:06.427]                       if (!has_future || version < "1.8.0") {
[17:39:06.427]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:06.427]                           "", base::R.version$version.string), 
[17:39:06.427]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:06.427]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:06.427]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:06.427]                             "release", "version")], collapse = " "), 
[17:39:06.427]                           hostname = base::Sys.info()[["nodename"]])
[17:39:06.427]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:06.427]                           info)
[17:39:06.427]                         info <- base::paste(info, collapse = "; ")
[17:39:06.427]                         if (!has_future) {
[17:39:06.427]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:06.427]                             info)
[17:39:06.427]                         }
[17:39:06.427]                         else {
[17:39:06.427]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:06.427]                             info, version)
[17:39:06.427]                         }
[17:39:06.427]                         base::stop(msg)
[17:39:06.427]                       }
[17:39:06.427]                     })
[17:39:06.427]                   }
[17:39:06.427]                   ...future.strategy.old <- future::plan("list")
[17:39:06.427]                   options(future.plan = NULL)
[17:39:06.427]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:06.427]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:06.427]                 }
[17:39:06.427]                 ...future.workdir <- getwd()
[17:39:06.427]             }
[17:39:06.427]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:06.427]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:06.427]         }
[17:39:06.427]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:06.427]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:06.427]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:06.427]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:06.427]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:06.427]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:06.427]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:06.427]             base::names(...future.oldOptions))
[17:39:06.427]     }
[17:39:06.427]     if (TRUE) {
[17:39:06.427]     }
[17:39:06.427]     else {
[17:39:06.427]         if (NA) {
[17:39:06.427]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:06.427]                 open = "w")
[17:39:06.427]         }
[17:39:06.427]         else {
[17:39:06.427]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:06.427]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:06.427]         }
[17:39:06.427]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:06.427]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:06.427]             base::sink(type = "output", split = FALSE)
[17:39:06.427]             base::close(...future.stdout)
[17:39:06.427]         }, add = TRUE)
[17:39:06.427]     }
[17:39:06.427]     ...future.frame <- base::sys.nframe()
[17:39:06.427]     ...future.conditions <- base::list()
[17:39:06.427]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:06.427]     if (FALSE) {
[17:39:06.427]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:06.427]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:06.427]     }
[17:39:06.427]     ...future.result <- base::tryCatch({
[17:39:06.427]         base::withCallingHandlers({
[17:39:06.427]             ...future.value <- base::withVisible(base::local({
[17:39:06.427]                 x[[i - 2]] + x[[i - 1]]
[17:39:06.427]             }))
[17:39:06.427]             future::FutureResult(value = ...future.value$value, 
[17:39:06.427]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:06.427]                   ...future.rng), globalenv = if (FALSE) 
[17:39:06.427]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:06.427]                     ...future.globalenv.names))
[17:39:06.427]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:06.427]         }, condition = base::local({
[17:39:06.427]             c <- base::c
[17:39:06.427]             inherits <- base::inherits
[17:39:06.427]             invokeRestart <- base::invokeRestart
[17:39:06.427]             length <- base::length
[17:39:06.427]             list <- base::list
[17:39:06.427]             seq.int <- base::seq.int
[17:39:06.427]             signalCondition <- base::signalCondition
[17:39:06.427]             sys.calls <- base::sys.calls
[17:39:06.427]             `[[` <- base::`[[`
[17:39:06.427]             `+` <- base::`+`
[17:39:06.427]             `<<-` <- base::`<<-`
[17:39:06.427]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:06.427]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:06.427]                   3L)]
[17:39:06.427]             }
[17:39:06.427]             function(cond) {
[17:39:06.427]                 is_error <- inherits(cond, "error")
[17:39:06.427]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:06.427]                   NULL)
[17:39:06.427]                 if (is_error) {
[17:39:06.427]                   sessionInformation <- function() {
[17:39:06.427]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:06.427]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:06.427]                       search = base::search(), system = base::Sys.info())
[17:39:06.427]                   }
[17:39:06.427]                   ...future.conditions[[length(...future.conditions) + 
[17:39:06.427]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:06.427]                     cond$call), session = sessionInformation(), 
[17:39:06.427]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:06.427]                   signalCondition(cond)
[17:39:06.427]                 }
[17:39:06.427]                 else if (!ignore && TRUE && inherits(cond, c("error", 
[17:39:06.427]                 "immediateCondition"))) {
[17:39:06.427]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:06.427]                   ...future.conditions[[length(...future.conditions) + 
[17:39:06.427]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:06.427]                   if (TRUE && !signal) {
[17:39:06.427]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:06.427]                     {
[17:39:06.427]                       inherits <- base::inherits
[17:39:06.427]                       invokeRestart <- base::invokeRestart
[17:39:06.427]                       is.null <- base::is.null
[17:39:06.427]                       muffled <- FALSE
[17:39:06.427]                       if (inherits(cond, "message")) {
[17:39:06.427]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:06.427]                         if (muffled) 
[17:39:06.427]                           invokeRestart("muffleMessage")
[17:39:06.427]                       }
[17:39:06.427]                       else if (inherits(cond, "warning")) {
[17:39:06.427]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:06.427]                         if (muffled) 
[17:39:06.427]                           invokeRestart("muffleWarning")
[17:39:06.427]                       }
[17:39:06.427]                       else if (inherits(cond, "condition")) {
[17:39:06.427]                         if (!is.null(pattern)) {
[17:39:06.427]                           computeRestarts <- base::computeRestarts
[17:39:06.427]                           grepl <- base::grepl
[17:39:06.427]                           restarts <- computeRestarts(cond)
[17:39:06.427]                           for (restart in restarts) {
[17:39:06.427]                             name <- restart$name
[17:39:06.427]                             if (is.null(name)) 
[17:39:06.427]                               next
[17:39:06.427]                             if (!grepl(pattern, name)) 
[17:39:06.427]                               next
[17:39:06.427]                             invokeRestart(restart)
[17:39:06.427]                             muffled <- TRUE
[17:39:06.427]                             break
[17:39:06.427]                           }
[17:39:06.427]                         }
[17:39:06.427]                       }
[17:39:06.427]                       invisible(muffled)
[17:39:06.427]                     }
[17:39:06.427]                     muffleCondition(cond, pattern = "^muffle")
[17:39:06.427]                   }
[17:39:06.427]                 }
[17:39:06.427]                 else {
[17:39:06.427]                   if (TRUE) {
[17:39:06.427]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:06.427]                     {
[17:39:06.427]                       inherits <- base::inherits
[17:39:06.427]                       invokeRestart <- base::invokeRestart
[17:39:06.427]                       is.null <- base::is.null
[17:39:06.427]                       muffled <- FALSE
[17:39:06.427]                       if (inherits(cond, "message")) {
[17:39:06.427]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:06.427]                         if (muffled) 
[17:39:06.427]                           invokeRestart("muffleMessage")
[17:39:06.427]                       }
[17:39:06.427]                       else if (inherits(cond, "warning")) {
[17:39:06.427]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:06.427]                         if (muffled) 
[17:39:06.427]                           invokeRestart("muffleWarning")
[17:39:06.427]                       }
[17:39:06.427]                       else if (inherits(cond, "condition")) {
[17:39:06.427]                         if (!is.null(pattern)) {
[17:39:06.427]                           computeRestarts <- base::computeRestarts
[17:39:06.427]                           grepl <- base::grepl
[17:39:06.427]                           restarts <- computeRestarts(cond)
[17:39:06.427]                           for (restart in restarts) {
[17:39:06.427]                             name <- restart$name
[17:39:06.427]                             if (is.null(name)) 
[17:39:06.427]                               next
[17:39:06.427]                             if (!grepl(pattern, name)) 
[17:39:06.427]                               next
[17:39:06.427]                             invokeRestart(restart)
[17:39:06.427]                             muffled <- TRUE
[17:39:06.427]                             break
[17:39:06.427]                           }
[17:39:06.427]                         }
[17:39:06.427]                       }
[17:39:06.427]                       invisible(muffled)
[17:39:06.427]                     }
[17:39:06.427]                     muffleCondition(cond, pattern = "^muffle")
[17:39:06.427]                   }
[17:39:06.427]                 }
[17:39:06.427]             }
[17:39:06.427]         }))
[17:39:06.427]     }, error = function(ex) {
[17:39:06.427]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:06.427]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:06.427]                 ...future.rng), started = ...future.startTime, 
[17:39:06.427]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:06.427]             version = "1.8"), class = "FutureResult")
[17:39:06.427]     }, finally = {
[17:39:06.427]         if (!identical(...future.workdir, getwd())) 
[17:39:06.427]             setwd(...future.workdir)
[17:39:06.427]         {
[17:39:06.427]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:06.427]                 ...future.oldOptions$nwarnings <- NULL
[17:39:06.427]             }
[17:39:06.427]             base::options(...future.oldOptions)
[17:39:06.427]             if (.Platform$OS.type == "windows") {
[17:39:06.427]                 old_names <- names(...future.oldEnvVars)
[17:39:06.427]                 envs <- base::Sys.getenv()
[17:39:06.427]                 names <- names(envs)
[17:39:06.427]                 common <- intersect(names, old_names)
[17:39:06.427]                 added <- setdiff(names, old_names)
[17:39:06.427]                 removed <- setdiff(old_names, names)
[17:39:06.427]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:06.427]                   envs[common]]
[17:39:06.427]                 NAMES <- toupper(changed)
[17:39:06.427]                 args <- list()
[17:39:06.427]                 for (kk in seq_along(NAMES)) {
[17:39:06.427]                   name <- changed[[kk]]
[17:39:06.427]                   NAME <- NAMES[[kk]]
[17:39:06.427]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:06.427]                     next
[17:39:06.427]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:06.427]                 }
[17:39:06.427]                 NAMES <- toupper(added)
[17:39:06.427]                 for (kk in seq_along(NAMES)) {
[17:39:06.427]                   name <- added[[kk]]
[17:39:06.427]                   NAME <- NAMES[[kk]]
[17:39:06.427]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:06.427]                     next
[17:39:06.427]                   args[[name]] <- ""
[17:39:06.427]                 }
[17:39:06.427]                 NAMES <- toupper(removed)
[17:39:06.427]                 for (kk in seq_along(NAMES)) {
[17:39:06.427]                   name <- removed[[kk]]
[17:39:06.427]                   NAME <- NAMES[[kk]]
[17:39:06.427]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:06.427]                     next
[17:39:06.427]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:06.427]                 }
[17:39:06.427]                 if (length(args) > 0) 
[17:39:06.427]                   base::do.call(base::Sys.setenv, args = args)
[17:39:06.427]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:06.427]             }
[17:39:06.427]             else {
[17:39:06.427]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:06.427]             }
[17:39:06.427]             {
[17:39:06.427]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:06.427]                   0L) {
[17:39:06.427]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:06.427]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:06.427]                   base::options(opts)
[17:39:06.427]                 }
[17:39:06.427]                 {
[17:39:06.427]                   {
[17:39:06.427]                     NULL
[17:39:06.427]                     RNGkind("Mersenne-Twister")
[17:39:06.427]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:06.427]                       inherits = FALSE)
[17:39:06.427]                   }
[17:39:06.427]                   options(future.plan = NULL)
[17:39:06.427]                   if (is.na(NA_character_)) 
[17:39:06.427]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:06.427]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:06.427]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:06.427]                     .init = FALSE)
[17:39:06.427]                 }
[17:39:06.427]             }
[17:39:06.427]         }
[17:39:06.427]     })
[17:39:06.427]     if (FALSE) {
[17:39:06.427]         base::sink(type = "output", split = FALSE)
[17:39:06.427]         if (NA) {
[17:39:06.427]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:06.427]         }
[17:39:06.427]         else {
[17:39:06.427]             ...future.result["stdout"] <- base::list(NULL)
[17:39:06.427]         }
[17:39:06.427]         base::close(...future.stdout)
[17:39:06.427]         ...future.stdout <- NULL
[17:39:06.427]     }
[17:39:06.427]     ...future.result$conditions <- ...future.conditions
[17:39:06.427]     ...future.result$finished <- base::Sys.time()
[17:39:06.427]     ...future.result
[17:39:06.427] }
[17:39:06.430] assign_globals() ...
[17:39:06.430] List of 2
[17:39:06.430]  $ x:Classes 'listenv', 'environment' <environment: 0x556ca9a64238> 
[17:39:06.430]  $ i: int 7
[17:39:06.430]  - attr(*, "where")=List of 2
[17:39:06.430]   ..$ x:<environment: R_EmptyEnv> 
[17:39:06.430]   ..$ i:<environment: R_EmptyEnv> 
[17:39:06.430]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:39:06.430]  - attr(*, "resolved")= logi FALSE
[17:39:06.430]  - attr(*, "total_size")= num 34264
[17:39:06.430]  - attr(*, "already-done")= logi TRUE
[17:39:06.436] - copied ‘x’ to environment
[17:39:06.436] - copied ‘i’ to environment
[17:39:06.436] assign_globals() ... done
[17:39:06.437] plan(): Setting new future strategy stack:
[17:39:06.437] List of future strategies:
[17:39:06.437] 1. sequential:
[17:39:06.437]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:06.437]    - tweaked: FALSE
[17:39:06.437]    - call: NULL
[17:39:06.437] plan(): nbrOfWorkers() = 1
[17:39:06.520] plan(): Setting new future strategy stack:
[17:39:06.520] List of future strategies:
[17:39:06.520] 1. sequential:
[17:39:06.520]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:06.520]    - tweaked: FALSE
[17:39:06.520]    - call: plan(sequential)
[17:39:06.521] plan(): nbrOfWorkers() = 1
[17:39:06.521] SequentialFuture started (and completed)
[17:39:06.521] - Launch lazy future ... done
[17:39:06.521] run() for ‘SequentialFuture’ ... done
[1] 8

> ## At this point x[1:7] have been calculated,
> ## but nothing beyond.
> 
> ## Let's get the 50:th number.
> print(x[[50]])
[17:39:06.522] run() for ‘Future’ ...
[17:39:06.522] - state: ‘created’
[17:39:06.522] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:06.522] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:06.522] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:06.522]   - Field: ‘label’
[17:39:06.522]   - Field: ‘local’
[17:39:06.523]   - Field: ‘owner’
[17:39:06.523]   - Field: ‘envir’
[17:39:06.523]   - Field: ‘packages’
[17:39:06.523]   - Field: ‘gc’
[17:39:06.523]   - Field: ‘conditions’
[17:39:06.523]   - Field: ‘expr’
[17:39:06.523]   - Field: ‘uuid’
[17:39:06.523]   - Field: ‘seed’
[17:39:06.523]   - Field: ‘version’
[17:39:06.523]   - Field: ‘result’
[17:39:06.524]   - Field: ‘asynchronous’
[17:39:06.524]   - Field: ‘calls’
[17:39:06.524]   - Field: ‘globals’
[17:39:06.524]   - Field: ‘stdout’
[17:39:06.524]   - Field: ‘earlySignal’
[17:39:06.524]   - Field: ‘lazy’
[17:39:06.524]   - Field: ‘state’
[17:39:06.524] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:06.524] - Launch lazy future ...
[17:39:06.524] Packages needed by the future expression (n = 0): <none>
[17:39:06.525] Packages needed by future strategies (n = 0): <none>
[17:39:06.525] {
[17:39:06.525]     {
[17:39:06.525]         {
[17:39:06.525]             ...future.startTime <- base::Sys.time()
[17:39:06.525]             {
[17:39:06.525]                 {
[17:39:06.525]                   {
[17:39:06.525]                     base::local({
[17:39:06.525]                       has_future <- base::requireNamespace("future", 
[17:39:06.525]                         quietly = TRUE)
[17:39:06.525]                       if (has_future) {
[17:39:06.525]                         ns <- base::getNamespace("future")
[17:39:06.525]                         version <- ns[[".package"]][["version"]]
[17:39:06.525]                         if (is.null(version)) 
[17:39:06.525]                           version <- utils::packageVersion("future")
[17:39:06.525]                       }
[17:39:06.525]                       else {
[17:39:06.525]                         version <- NULL
[17:39:06.525]                       }
[17:39:06.525]                       if (!has_future || version < "1.8.0") {
[17:39:06.525]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:06.525]                           "", base::R.version$version.string), 
[17:39:06.525]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:06.525]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:06.525]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:06.525]                             "release", "version")], collapse = " "), 
[17:39:06.525]                           hostname = base::Sys.info()[["nodename"]])
[17:39:06.525]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:06.525]                           info)
[17:39:06.525]                         info <- base::paste(info, collapse = "; ")
[17:39:06.525]                         if (!has_future) {
[17:39:06.525]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:06.525]                             info)
[17:39:06.525]                         }
[17:39:06.525]                         else {
[17:39:06.525]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:06.525]                             info, version)
[17:39:06.525]                         }
[17:39:06.525]                         base::stop(msg)
[17:39:06.525]                       }
[17:39:06.525]                     })
[17:39:06.525]                   }
[17:39:06.525]                   ...future.strategy.old <- future::plan("list")
[17:39:06.525]                   options(future.plan = NULL)
[17:39:06.525]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:06.525]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:06.525]                 }
[17:39:06.525]                 ...future.workdir <- getwd()
[17:39:06.525]             }
[17:39:06.525]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:06.525]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:06.525]         }
[17:39:06.525]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:06.525]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:06.525]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:06.525]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:06.525]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:06.525]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:06.525]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:06.525]             base::names(...future.oldOptions))
[17:39:06.525]     }
[17:39:06.525]     if (TRUE) {
[17:39:06.525]     }
[17:39:06.525]     else {
[17:39:06.525]         if (NA) {
[17:39:06.525]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:06.525]                 open = "w")
[17:39:06.525]         }
[17:39:06.525]         else {
[17:39:06.525]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:06.525]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:06.525]         }
[17:39:06.525]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:06.525]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:06.525]             base::sink(type = "output", split = FALSE)
[17:39:06.525]             base::close(...future.stdout)
[17:39:06.525]         }, add = TRUE)
[17:39:06.525]     }
[17:39:06.525]     ...future.frame <- base::sys.nframe()
[17:39:06.525]     ...future.conditions <- base::list()
[17:39:06.525]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:06.525]     if (FALSE) {
[17:39:06.525]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:06.525]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:06.525]     }
[17:39:06.525]     ...future.result <- base::tryCatch({
[17:39:06.525]         base::withCallingHandlers({
[17:39:06.525]             ...future.value <- base::withVisible(base::local({
[17:39:06.525]                 x[[i - 2]] + x[[i - 1]]
[17:39:06.525]             }))
[17:39:06.525]             future::FutureResult(value = ...future.value$value, 
[17:39:06.525]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:06.525]                   ...future.rng), globalenv = if (FALSE) 
[17:39:06.525]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:06.525]                     ...future.globalenv.names))
[17:39:06.525]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:06.525]         }, condition = base::local({
[17:39:06.525]             c <- base::c
[17:39:06.525]             inherits <- base::inherits
[17:39:06.525]             invokeRestart <- base::invokeRestart
[17:39:06.525]             length <- base::length
[17:39:06.525]             list <- base::list
[17:39:06.525]             seq.int <- base::seq.int
[17:39:06.525]             signalCondition <- base::signalCondition
[17:39:06.525]             sys.calls <- base::sys.calls
[17:39:06.525]             `[[` <- base::`[[`
[17:39:06.525]             `+` <- base::`+`
[17:39:06.525]             `<<-` <- base::`<<-`
[17:39:06.525]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:06.525]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:06.525]                   3L)]
[17:39:06.525]             }
[17:39:06.525]             function(cond) {
[17:39:06.525]                 is_error <- inherits(cond, "error")
[17:39:06.525]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:06.525]                   NULL)
[17:39:06.525]                 if (is_error) {
[17:39:06.525]                   sessionInformation <- function() {
[17:39:06.525]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:06.525]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:06.525]                       search = base::search(), system = base::Sys.info())
[17:39:06.525]                   }
[17:39:06.525]                   ...future.conditions[[length(...future.conditions) + 
[17:39:06.525]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:06.525]                     cond$call), session = sessionInformation(), 
[17:39:06.525]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:06.525]                   signalCondition(cond)
[17:39:06.525]                 }
[17:39:06.525]                 else if (!ignore && TRUE && inherits(cond, c("error", 
[17:39:06.525]                 "immediateCondition"))) {
[17:39:06.525]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:06.525]                   ...future.conditions[[length(...future.conditions) + 
[17:39:06.525]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:06.525]                   if (TRUE && !signal) {
[17:39:06.525]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:06.525]                     {
[17:39:06.525]                       inherits <- base::inherits
[17:39:06.525]                       invokeRestart <- base::invokeRestart
[17:39:06.525]                       is.null <- base::is.null
[17:39:06.525]                       muffled <- FALSE
[17:39:06.525]                       if (inherits(cond, "message")) {
[17:39:06.525]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:06.525]                         if (muffled) 
[17:39:06.525]                           invokeRestart("muffleMessage")
[17:39:06.525]                       }
[17:39:06.525]                       else if (inherits(cond, "warning")) {
[17:39:06.525]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:06.525]                         if (muffled) 
[17:39:06.525]                           invokeRestart("muffleWarning")
[17:39:06.525]                       }
[17:39:06.525]                       else if (inherits(cond, "condition")) {
[17:39:06.525]                         if (!is.null(pattern)) {
[17:39:06.525]                           computeRestarts <- base::computeRestarts
[17:39:06.525]                           grepl <- base::grepl
[17:39:06.525]                           restarts <- computeRestarts(cond)
[17:39:06.525]                           for (restart in restarts) {
[17:39:06.525]                             name <- restart$name
[17:39:06.525]                             if (is.null(name)) 
[17:39:06.525]                               next
[17:39:06.525]                             if (!grepl(pattern, name)) 
[17:39:06.525]                               next
[17:39:06.525]                             invokeRestart(restart)
[17:39:06.525]                             muffled <- TRUE
[17:39:06.525]                             break
[17:39:06.525]                           }
[17:39:06.525]                         }
[17:39:06.525]                       }
[17:39:06.525]                       invisible(muffled)
[17:39:06.525]                     }
[17:39:06.525]                     muffleCondition(cond, pattern = "^muffle")
[17:39:06.525]                   }
[17:39:06.525]                 }
[17:39:06.525]                 else {
[17:39:06.525]                   if (TRUE) {
[17:39:06.525]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:06.525]                     {
[17:39:06.525]                       inherits <- base::inherits
[17:39:06.525]                       invokeRestart <- base::invokeRestart
[17:39:06.525]                       is.null <- base::is.null
[17:39:06.525]                       muffled <- FALSE
[17:39:06.525]                       if (inherits(cond, "message")) {
[17:39:06.525]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:06.525]                         if (muffled) 
[17:39:06.525]                           invokeRestart("muffleMessage")
[17:39:06.525]                       }
[17:39:06.525]                       else if (inherits(cond, "warning")) {
[17:39:06.525]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:06.525]                         if (muffled) 
[17:39:06.525]                           invokeRestart("muffleWarning")
[17:39:06.525]                       }
[17:39:06.525]                       else if (inherits(cond, "condition")) {
[17:39:06.525]                         if (!is.null(pattern)) {
[17:39:06.525]                           computeRestarts <- base::computeRestarts
[17:39:06.525]                           grepl <- base::grepl
[17:39:06.525]                           restarts <- computeRestarts(cond)
[17:39:06.525]                           for (restart in restarts) {
[17:39:06.525]                             name <- restart$name
[17:39:06.525]                             if (is.null(name)) 
[17:39:06.525]                               next
[17:39:06.525]                             if (!grepl(pattern, name)) 
[17:39:06.525]                               next
[17:39:06.525]                             invokeRestart(restart)
[17:39:06.525]                             muffled <- TRUE
[17:39:06.525]                             break
[17:39:06.525]                           }
[17:39:06.525]                         }
[17:39:06.525]                       }
[17:39:06.525]                       invisible(muffled)
[17:39:06.525]                     }
[17:39:06.525]                     muffleCondition(cond, pattern = "^muffle")
[17:39:06.525]                   }
[17:39:06.525]                 }
[17:39:06.525]             }
[17:39:06.525]         }))
[17:39:06.525]     }, error = function(ex) {
[17:39:06.525]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:06.525]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:06.525]                 ...future.rng), started = ...future.startTime, 
[17:39:06.525]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:06.525]             version = "1.8"), class = "FutureResult")
[17:39:06.525]     }, finally = {
[17:39:06.525]         if (!identical(...future.workdir, getwd())) 
[17:39:06.525]             setwd(...future.workdir)
[17:39:06.525]         {
[17:39:06.525]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:06.525]                 ...future.oldOptions$nwarnings <- NULL
[17:39:06.525]             }
[17:39:06.525]             base::options(...future.oldOptions)
[17:39:06.525]             if (.Platform$OS.type == "windows") {
[17:39:06.525]                 old_names <- names(...future.oldEnvVars)
[17:39:06.525]                 envs <- base::Sys.getenv()
[17:39:06.525]                 names <- names(envs)
[17:39:06.525]                 common <- intersect(names, old_names)
[17:39:06.525]                 added <- setdiff(names, old_names)
[17:39:06.525]                 removed <- setdiff(old_names, names)
[17:39:06.525]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:06.525]                   envs[common]]
[17:39:06.525]                 NAMES <- toupper(changed)
[17:39:06.525]                 args <- list()
[17:39:06.525]                 for (kk in seq_along(NAMES)) {
[17:39:06.525]                   name <- changed[[kk]]
[17:39:06.525]                   NAME <- NAMES[[kk]]
[17:39:06.525]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:06.525]                     next
[17:39:06.525]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:06.525]                 }
[17:39:06.525]                 NAMES <- toupper(added)
[17:39:06.525]                 for (kk in seq_along(NAMES)) {
[17:39:06.525]                   name <- added[[kk]]
[17:39:06.525]                   NAME <- NAMES[[kk]]
[17:39:06.525]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:06.525]                     next
[17:39:06.525]                   args[[name]] <- ""
[17:39:06.525]                 }
[17:39:06.525]                 NAMES <- toupper(removed)
[17:39:06.525]                 for (kk in seq_along(NAMES)) {
[17:39:06.525]                   name <- removed[[kk]]
[17:39:06.525]                   NAME <- NAMES[[kk]]
[17:39:06.525]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:06.525]                     next
[17:39:06.525]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:06.525]                 }
[17:39:06.525]                 if (length(args) > 0) 
[17:39:06.525]                   base::do.call(base::Sys.setenv, args = args)
[17:39:06.525]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:06.525]             }
[17:39:06.525]             else {
[17:39:06.525]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:06.525]             }
[17:39:06.525]             {
[17:39:06.525]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:06.525]                   0L) {
[17:39:06.525]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:06.525]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:06.525]                   base::options(opts)
[17:39:06.525]                 }
[17:39:06.525]                 {
[17:39:06.525]                   {
[17:39:06.525]                     NULL
[17:39:06.525]                     RNGkind("Mersenne-Twister")
[17:39:06.525]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:06.525]                       inherits = FALSE)
[17:39:06.525]                   }
[17:39:06.525]                   options(future.plan = NULL)
[17:39:06.525]                   if (is.na(NA_character_)) 
[17:39:06.525]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:06.525]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:06.525]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:06.525]                     .init = FALSE)
[17:39:06.525]                 }
[17:39:06.525]             }
[17:39:06.525]         }
[17:39:06.525]     })
[17:39:06.525]     if (FALSE) {
[17:39:06.525]         base::sink(type = "output", split = FALSE)
[17:39:06.525]         if (NA) {
[17:39:06.525]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:06.525]         }
[17:39:06.525]         else {
[17:39:06.525]             ...future.result["stdout"] <- base::list(NULL)
[17:39:06.525]         }
[17:39:06.525]         base::close(...future.stdout)
[17:39:06.525]         ...future.stdout <- NULL
[17:39:06.525]     }
[17:39:06.525]     ...future.result$conditions <- ...future.conditions
[17:39:06.525]     ...future.result$finished <- base::Sys.time()
[17:39:06.525]     ...future.result
[17:39:06.525] }
[17:39:06.527] assign_globals() ...
[17:39:06.527] List of 2
[17:39:06.527]  $ x:Classes 'listenv', 'environment' <environment: 0x556ca9a64238> 
[17:39:06.527]  $ i: int 50
[17:39:06.527]  - attr(*, "where")=List of 2
[17:39:06.527]   ..$ x:<environment: R_EmptyEnv> 
[17:39:06.527]   ..$ i:<environment: R_EmptyEnv> 
[17:39:06.527]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:39:06.527]  - attr(*, "resolved")= logi FALSE
[17:39:06.527]  - attr(*, "total_size")= num 402000
[17:39:06.527]  - attr(*, "already-done")= logi TRUE
[17:39:06.530] - copied ‘x’ to environment
[17:39:06.530] - copied ‘i’ to environment
[17:39:06.530] assign_globals() ... done
[17:39:06.530] plan(): Setting new future strategy stack:
[17:39:06.530] List of future strategies:
[17:39:06.530] 1. sequential:
[17:39:06.530]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:06.530]    - tweaked: FALSE
[17:39:06.530]    - call: NULL
[17:39:06.531] plan(): nbrOfWorkers() = 1
[17:39:07.431] plan(): Setting new future strategy stack:
[17:39:07.432] List of future strategies:
[17:39:07.432] 1. sequential:
[17:39:07.432]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:07.432]    - tweaked: FALSE
[17:39:07.432]    - call: plan(sequential)
[17:39:07.432] plan(): nbrOfWorkers() = 1
[17:39:07.432] SequentialFuture started (and completed)
[17:39:07.432] - Launch lazy future ... done
[17:39:07.432] run() for ‘SequentialFuture’ ... done
[1] 7778742049

> ## Reset plan
> plan(oplan)
[17:39:07.433] plan(): Setting new future strategy stack:
[17:39:07.433] List of future strategies:
[17:39:07.433] 1. sequential:
[17:39:07.433]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:07.433]    - tweaked: FALSE
[17:39:07.433]    - call: future::plan("sequential")
[17:39:07.433] plan(): nbrOfWorkers() = 1
> message("*** Fibonacci demo of the 'future' package ... DONE")
*** Fibonacci demo of the 'future' package ... DONE
> 
> 
> message("*** Mandelbrot demo of the 'future' package ...")
*** Mandelbrot demo of the 'future' package ...
> if (getRversion() >= "3.2.0" && !isWin32) {
+   options(future.demo.mandelbrot.nrow = 2L)
+   options(future.demo.mandelbrot.resolution = 50L)
+   options(future.demo.mandelbrot.delay = FALSE)
+   
+   for (cores in 1:availCores) {
+     message(sprintf("Testing with %d cores ...", cores))
+     options(mc.cores = cores)
+   
+     for (strategy in supportedStrategies(cores)) {
+       message(sprintf("- plan('%s') ...", strategy))
+       plan(strategy)
+       demo("mandelbrot", package = "future", ask = FALSE)
+       message(sprintf("- plan('%s') ... DONE", strategy))
+     }
+   
+     message(sprintf("Testing with %d cores ... DONE", cores))
+   } ## for (cores ...)
+ } else {
+   message(" - This demo requires R (>= 3.2.0). Skipping test. (Skipping also on Win32 i386 for speed)")
+ }
Testing with 1 cores ...
- plan('sequential') ...
[17:39:07.442] plan(): Setting new future strategy stack:
[17:39:07.442] List of future strategies:
[17:39:07.442] 1. sequential:
[17:39:07.442]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:07.442]    - tweaked: FALSE
[17:39:07.442]    - call: plan(strategy)
[17:39:07.443] plan(): nbrOfWorkers() = 1


	demo(mandelbrot)
	---- ~~~~~~~~~~

> library("future")

> library("graphics")

> plot_what_is_done <- function(counts) {
+   for (kk in seq_along(counts)) {
+     f <- counts[[kk]]
+ 
+     ## Already plotted?
+     if (!inherits(f, "Future")) next
+ 
+     ## Not resolved?
+     if (!resolved(f)) next
+ 
+     message(sprintf("Plotting tile #%d of %d ...", kk, n))
+     counts[[kk]] <- value(f)
+     screen(kk)
+     plot(counts[[kk]])
+   }
+ 
+   counts
+ }

> ## Options
> region <- getOption("future.demo.mandelbrot.region", 1L)

> if (!is.list(region)) {
+   if (region == 1L) {
+     region <- list(xmid = -0.75, ymid = 0.0, side = 3.0)
+   } else if (region == 2L) {
+     region <- list(xmid = 0.283, ymid = -0.0095, side = 0.00026)
+   } else if (region == 3L) {
+     region <- list(xmid = 0.282989, ymid = -0.01, side = 3e-8)
+   }
+ }

> nrow <- getOption("future.demo.mandelbrot.nrow", 3L)

> resolution <- getOption("future.demo.mandelbrot.resolution", 400L)

> delay <- getOption("future.demo.mandelbrot.delay", interactive())

> if (isTRUE(delay)) {
+   delay <- function(counts) Sys.sleep(1.0)
+ } else if (!is.function(delay)) {
+   delay <- function(counts) {}
+ }

> ## Generate Mandelbrot tiles to be computed
> Cs <- mandelbrot_tiles(xmid = region$xmid, ymid = region$ymid,
+                        side = region$side, nrow = nrow,
+                        resolution = resolution)

> if (interactive()) {
+   dev.new()
+   plot.new()
+   split.screen(dim(Cs))
+   for (ii in seq_along(Cs)) {
+     screen(ii)
+     par(mar = c(0, 0, 0, 0))
+     text(x = 1 / 2, y = 1 / 2, sprintf("Future #%d\nunresolved", ii), cex = 2)
+   }
+ } else {
+   split.screen(dim(Cs))
+ }
[1] 1 2 3 4

> ## Create all Mandelbrot tiles via lazy futures
> n <- length(Cs)

> message(sprintf("Creating %d Mandelbrot tiles:", n), appendLF = FALSE)
Creating 4 Mandelbrot tiles:
> counts <- lapply(seq_along(Cs), FUN=function(ii) {
+   message(" ", ii, appendLF = FALSE)
+   C <- Cs[[ii]]
+   future({
+     message(sprintf("Calculating tile #%d of %d ...", ii, n), appendLF = FALSE)
+     fit <- mandelbrot(C)
+ 
+     ## Emulate slowness
+     delay(fit)
+ 
+     message(" done")
+     fit
+   }, lazy = TRUE)
+ })
 1[17:39:07.472] getGlobalsAndPackages() ...
[17:39:07.472] Searching for globals...
[17:39:07.476] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[17:39:07.476] Searching for globals ... DONE
[17:39:07.477] Resolving globals: FALSE
[17:39:07.477] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[17:39:07.478] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[17:39:07.478] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[17:39:07.478] - packages: [1] ‘future’
[17:39:07.478] getGlobalsAndPackages() ... DONE
 2[17:39:07.482] getGlobalsAndPackages() ...
[17:39:07.482] Searching for globals...
[17:39:07.485] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[17:39:07.485] Searching for globals ... DONE
[17:39:07.486] Resolving globals: FALSE
[17:39:07.486] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[17:39:07.486] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[17:39:07.487] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[17:39:07.487] - packages: [1] ‘future’
[17:39:07.487] getGlobalsAndPackages() ... DONE
 3[17:39:07.487] getGlobalsAndPackages() ...
[17:39:07.487] Searching for globals...
[17:39:07.491] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[17:39:07.491] Searching for globals ... DONE
[17:39:07.491] Resolving globals: FALSE
[17:39:07.491] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[17:39:07.492] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[17:39:07.492] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[17:39:07.492] - packages: [1] ‘future’
[17:39:07.492] getGlobalsAndPackages() ... DONE
 4[17:39:07.493] getGlobalsAndPackages() ...
[17:39:07.493] Searching for globals...
[17:39:07.496] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[17:39:07.496] Searching for globals ... DONE
[17:39:07.496] Resolving globals: FALSE
[17:39:07.497] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[17:39:07.497] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[17:39:07.497] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[17:39:07.497] - packages: [1] ‘future’
[17:39:07.497] getGlobalsAndPackages() ... DONE

> message(".")
.

> ## Calculate and plot tiles
> repeat {
+   counts <- plot_what_is_done(counts)
+   if (!any(sapply(counts, FUN = inherits, "Future"))) break
+ }
[17:39:07.506] resolved() for ‘Future’ ...
[17:39:07.507] - state: ‘created’
[17:39:07.507] - run: TRUE
[17:39:07.507] - run() ...
[17:39:07.507] run() for ‘Future’ ...
[17:39:07.507] - state: ‘created’
[17:39:07.507] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:07.507] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:07.507] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:07.508]   - Field: ‘label’
[17:39:07.508]   - Field: ‘local’
[17:39:07.508]   - Field: ‘owner’
[17:39:07.508]   - Field: ‘envir’
[17:39:07.508]   - Field: ‘packages’
[17:39:07.508]   - Field: ‘gc’
[17:39:07.508]   - Field: ‘conditions’
[17:39:07.508]   - Field: ‘expr’
[17:39:07.508]   - Field: ‘uuid’
[17:39:07.508]   - Field: ‘seed’
[17:39:07.509]   - Field: ‘version’
[17:39:07.509]   - Field: ‘result’
[17:39:07.509]   - Field: ‘asynchronous’
[17:39:07.509]   - Field: ‘calls’
[17:39:07.509]   - Field: ‘globals’
[17:39:07.509]   - Field: ‘stdout’
[17:39:07.509]   - Field: ‘earlySignal’
[17:39:07.509]   - Field: ‘lazy’
[17:39:07.509]   - Field: ‘state’
[17:39:07.509] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:07.509] - Launch lazy future ...
[17:39:07.510] Packages needed by the future expression (n = 1): ‘future’
[17:39:07.510] Packages needed by future strategies (n = 0): <none>
[17:39:07.510] {
[17:39:07.510]     {
[17:39:07.510]         {
[17:39:07.510]             ...future.startTime <- base::Sys.time()
[17:39:07.510]             {
[17:39:07.510]                 {
[17:39:07.510]                   {
[17:39:07.510]                     {
[17:39:07.510]                       base::local({
[17:39:07.510]                         has_future <- base::requireNamespace("future", 
[17:39:07.510]                           quietly = TRUE)
[17:39:07.510]                         if (has_future) {
[17:39:07.510]                           ns <- base::getNamespace("future")
[17:39:07.510]                           version <- ns[[".package"]][["version"]]
[17:39:07.510]                           if (is.null(version)) 
[17:39:07.510]                             version <- utils::packageVersion("future")
[17:39:07.510]                         }
[17:39:07.510]                         else {
[17:39:07.510]                           version <- NULL
[17:39:07.510]                         }
[17:39:07.510]                         if (!has_future || version < "1.8.0") {
[17:39:07.510]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:07.510]                             "", base::R.version$version.string), 
[17:39:07.510]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:07.510]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:07.510]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:07.510]                               "release", "version")], collapse = " "), 
[17:39:07.510]                             hostname = base::Sys.info()[["nodename"]])
[17:39:07.510]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:07.510]                             info)
[17:39:07.510]                           info <- base::paste(info, collapse = "; ")
[17:39:07.510]                           if (!has_future) {
[17:39:07.510]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:07.510]                               info)
[17:39:07.510]                           }
[17:39:07.510]                           else {
[17:39:07.510]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:07.510]                               info, version)
[17:39:07.510]                           }
[17:39:07.510]                           base::stop(msg)
[17:39:07.510]                         }
[17:39:07.510]                       })
[17:39:07.510]                     }
[17:39:07.510]                     base::local({
[17:39:07.510]                       for (pkg in "future") {
[17:39:07.510]                         base::loadNamespace(pkg)
[17:39:07.510]                         base::library(pkg, character.only = TRUE)
[17:39:07.510]                       }
[17:39:07.510]                     })
[17:39:07.510]                   }
[17:39:07.510]                   ...future.strategy.old <- future::plan("list")
[17:39:07.510]                   options(future.plan = NULL)
[17:39:07.510]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:07.510]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:07.510]                 }
[17:39:07.510]                 ...future.workdir <- getwd()
[17:39:07.510]             }
[17:39:07.510]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:07.510]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:07.510]         }
[17:39:07.510]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:07.510]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:07.510]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:07.510]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:07.510]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:07.510]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:07.510]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:07.510]             base::names(...future.oldOptions))
[17:39:07.510]     }
[17:39:07.510]     if (FALSE) {
[17:39:07.510]     }
[17:39:07.510]     else {
[17:39:07.510]         if (TRUE) {
[17:39:07.510]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:07.510]                 open = "w")
[17:39:07.510]         }
[17:39:07.510]         else {
[17:39:07.510]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:07.510]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:07.510]         }
[17:39:07.510]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:07.510]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:07.510]             base::sink(type = "output", split = FALSE)
[17:39:07.510]             base::close(...future.stdout)
[17:39:07.510]         }, add = TRUE)
[17:39:07.510]     }
[17:39:07.510]     ...future.frame <- base::sys.nframe()
[17:39:07.510]     ...future.conditions <- base::list()
[17:39:07.510]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:07.510]     if (FALSE) {
[17:39:07.510]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:07.510]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:07.510]     }
[17:39:07.510]     ...future.result <- base::tryCatch({
[17:39:07.510]         base::withCallingHandlers({
[17:39:07.510]             ...future.value <- base::withVisible(base::local({
[17:39:07.510]                 message(sprintf("Calculating tile #%d of %d ...", 
[17:39:07.510]                   ii, n), appendLF = FALSE)
[17:39:07.510]                 fit <- mandelbrot(C)
[17:39:07.510]                 delay(fit)
[17:39:07.510]                 message(" done")
[17:39:07.510]                 fit
[17:39:07.510]             }))
[17:39:07.510]             future::FutureResult(value = ...future.value$value, 
[17:39:07.510]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:07.510]                   ...future.rng), globalenv = if (FALSE) 
[17:39:07.510]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:07.510]                     ...future.globalenv.names))
[17:39:07.510]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:07.510]         }, condition = base::local({
[17:39:07.510]             c <- base::c
[17:39:07.510]             inherits <- base::inherits
[17:39:07.510]             invokeRestart <- base::invokeRestart
[17:39:07.510]             length <- base::length
[17:39:07.510]             list <- base::list
[17:39:07.510]             seq.int <- base::seq.int
[17:39:07.510]             signalCondition <- base::signalCondition
[17:39:07.510]             sys.calls <- base::sys.calls
[17:39:07.510]             `[[` <- base::`[[`
[17:39:07.510]             `+` <- base::`+`
[17:39:07.510]             `<<-` <- base::`<<-`
[17:39:07.510]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:07.510]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:07.510]                   3L)]
[17:39:07.510]             }
[17:39:07.510]             function(cond) {
[17:39:07.510]                 is_error <- inherits(cond, "error")
[17:39:07.510]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:07.510]                   NULL)
[17:39:07.510]                 if (is_error) {
[17:39:07.510]                   sessionInformation <- function() {
[17:39:07.510]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:07.510]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:07.510]                       search = base::search(), system = base::Sys.info())
[17:39:07.510]                   }
[17:39:07.510]                   ...future.conditions[[length(...future.conditions) + 
[17:39:07.510]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:07.510]                     cond$call), session = sessionInformation(), 
[17:39:07.510]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:07.510]                   signalCondition(cond)
[17:39:07.510]                 }
[17:39:07.510]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:07.510]                 "immediateCondition"))) {
[17:39:07.510]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:07.510]                   ...future.conditions[[length(...future.conditions) + 
[17:39:07.510]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:07.510]                   if (TRUE && !signal) {
[17:39:07.510]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:07.510]                     {
[17:39:07.510]                       inherits <- base::inherits
[17:39:07.510]                       invokeRestart <- base::invokeRestart
[17:39:07.510]                       is.null <- base::is.null
[17:39:07.510]                       muffled <- FALSE
[17:39:07.510]                       if (inherits(cond, "message")) {
[17:39:07.510]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:07.510]                         if (muffled) 
[17:39:07.510]                           invokeRestart("muffleMessage")
[17:39:07.510]                       }
[17:39:07.510]                       else if (inherits(cond, "warning")) {
[17:39:07.510]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:07.510]                         if (muffled) 
[17:39:07.510]                           invokeRestart("muffleWarning")
[17:39:07.510]                       }
[17:39:07.510]                       else if (inherits(cond, "condition")) {
[17:39:07.510]                         if (!is.null(pattern)) {
[17:39:07.510]                           computeRestarts <- base::computeRestarts
[17:39:07.510]                           grepl <- base::grepl
[17:39:07.510]                           restarts <- computeRestarts(cond)
[17:39:07.510]                           for (restart in restarts) {
[17:39:07.510]                             name <- restart$name
[17:39:07.510]                             if (is.null(name)) 
[17:39:07.510]                               next
[17:39:07.510]                             if (!grepl(pattern, name)) 
[17:39:07.510]                               next
[17:39:07.510]                             invokeRestart(restart)
[17:39:07.510]                             muffled <- TRUE
[17:39:07.510]                             break
[17:39:07.510]                           }
[17:39:07.510]                         }
[17:39:07.510]                       }
[17:39:07.510]                       invisible(muffled)
[17:39:07.510]                     }
[17:39:07.510]                     muffleCondition(cond, pattern = "^muffle")
[17:39:07.510]                   }
[17:39:07.510]                 }
[17:39:07.510]                 else {
[17:39:07.510]                   if (TRUE) {
[17:39:07.510]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:07.510]                     {
[17:39:07.510]                       inherits <- base::inherits
[17:39:07.510]                       invokeRestart <- base::invokeRestart
[17:39:07.510]                       is.null <- base::is.null
[17:39:07.510]                       muffled <- FALSE
[17:39:07.510]                       if (inherits(cond, "message")) {
[17:39:07.510]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:07.510]                         if (muffled) 
[17:39:07.510]                           invokeRestart("muffleMessage")
[17:39:07.510]                       }
[17:39:07.510]                       else if (inherits(cond, "warning")) {
[17:39:07.510]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:07.510]                         if (muffled) 
[17:39:07.510]                           invokeRestart("muffleWarning")
[17:39:07.510]                       }
[17:39:07.510]                       else if (inherits(cond, "condition")) {
[17:39:07.510]                         if (!is.null(pattern)) {
[17:39:07.510]                           computeRestarts <- base::computeRestarts
[17:39:07.510]                           grepl <- base::grepl
[17:39:07.510]                           restarts <- computeRestarts(cond)
[17:39:07.510]                           for (restart in restarts) {
[17:39:07.510]                             name <- restart$name
[17:39:07.510]                             if (is.null(name)) 
[17:39:07.510]                               next
[17:39:07.510]                             if (!grepl(pattern, name)) 
[17:39:07.510]                               next
[17:39:07.510]                             invokeRestart(restart)
[17:39:07.510]                             muffled <- TRUE
[17:39:07.510]                             break
[17:39:07.510]                           }
[17:39:07.510]                         }
[17:39:07.510]                       }
[17:39:07.510]                       invisible(muffled)
[17:39:07.510]                     }
[17:39:07.510]                     muffleCondition(cond, pattern = "^muffle")
[17:39:07.510]                   }
[17:39:07.510]                 }
[17:39:07.510]             }
[17:39:07.510]         }))
[17:39:07.510]     }, error = function(ex) {
[17:39:07.510]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:07.510]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:07.510]                 ...future.rng), started = ...future.startTime, 
[17:39:07.510]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:07.510]             version = "1.8"), class = "FutureResult")
[17:39:07.510]     }, finally = {
[17:39:07.510]         if (!identical(...future.workdir, getwd())) 
[17:39:07.510]             setwd(...future.workdir)
[17:39:07.510]         {
[17:39:07.510]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:07.510]                 ...future.oldOptions$nwarnings <- NULL
[17:39:07.510]             }
[17:39:07.510]             base::options(...future.oldOptions)
[17:39:07.510]             if (.Platform$OS.type == "windows") {
[17:39:07.510]                 old_names <- names(...future.oldEnvVars)
[17:39:07.510]                 envs <- base::Sys.getenv()
[17:39:07.510]                 names <- names(envs)
[17:39:07.510]                 common <- intersect(names, old_names)
[17:39:07.510]                 added <- setdiff(names, old_names)
[17:39:07.510]                 removed <- setdiff(old_names, names)
[17:39:07.510]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:07.510]                   envs[common]]
[17:39:07.510]                 NAMES <- toupper(changed)
[17:39:07.510]                 args <- list()
[17:39:07.510]                 for (kk in seq_along(NAMES)) {
[17:39:07.510]                   name <- changed[[kk]]
[17:39:07.510]                   NAME <- NAMES[[kk]]
[17:39:07.510]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:07.510]                     next
[17:39:07.510]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:07.510]                 }
[17:39:07.510]                 NAMES <- toupper(added)
[17:39:07.510]                 for (kk in seq_along(NAMES)) {
[17:39:07.510]                   name <- added[[kk]]
[17:39:07.510]                   NAME <- NAMES[[kk]]
[17:39:07.510]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:07.510]                     next
[17:39:07.510]                   args[[name]] <- ""
[17:39:07.510]                 }
[17:39:07.510]                 NAMES <- toupper(removed)
[17:39:07.510]                 for (kk in seq_along(NAMES)) {
[17:39:07.510]                   name <- removed[[kk]]
[17:39:07.510]                   NAME <- NAMES[[kk]]
[17:39:07.510]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:07.510]                     next
[17:39:07.510]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:07.510]                 }
[17:39:07.510]                 if (length(args) > 0) 
[17:39:07.510]                   base::do.call(base::Sys.setenv, args = args)
[17:39:07.510]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:07.510]             }
[17:39:07.510]             else {
[17:39:07.510]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:07.510]             }
[17:39:07.510]             {
[17:39:07.510]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:07.510]                   0L) {
[17:39:07.510]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:07.510]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:07.510]                   base::options(opts)
[17:39:07.510]                 }
[17:39:07.510]                 {
[17:39:07.510]                   {
[17:39:07.510]                     NULL
[17:39:07.510]                     RNGkind("Mersenne-Twister")
[17:39:07.510]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:07.510]                       inherits = FALSE)
[17:39:07.510]                   }
[17:39:07.510]                   options(future.plan = NULL)
[17:39:07.510]                   if (is.na(NA_character_)) 
[17:39:07.510]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:07.510]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:07.510]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:07.510]                     .init = FALSE)
[17:39:07.510]                 }
[17:39:07.510]             }
[17:39:07.510]         }
[17:39:07.510]     })
[17:39:07.510]     if (TRUE) {
[17:39:07.510]         base::sink(type = "output", split = FALSE)
[17:39:07.510]         if (TRUE) {
[17:39:07.510]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:07.510]         }
[17:39:07.510]         else {
[17:39:07.510]             ...future.result["stdout"] <- base::list(NULL)
[17:39:07.510]         }
[17:39:07.510]         base::close(...future.stdout)
[17:39:07.510]         ...future.stdout <- NULL
[17:39:07.510]     }
[17:39:07.510]     ...future.result$conditions <- ...future.conditions
[17:39:07.510]     ...future.result$finished <- base::Sys.time()
[17:39:07.510]     ...future.result
[17:39:07.510] }
[17:39:07.512] assign_globals() ...
[17:39:07.512] List of 4
[17:39:07.512]  $ ii   : int 1
[17:39:07.512]  $ n    : int 4
[17:39:07.512]  $ C    : cplx [1:25, 1:25] -2.25-1.5i -2.25-1.44i -2.25-1.38i ...
[17:39:07.512]   ..- attr(*, "region")=List of 2
[17:39:07.512]   .. ..$ xrange: num [1:2] -2.25 -0.781
[17:39:07.512]   .. ..$ yrange: num [1:2] -1.5 -0.0306
[17:39:07.512]   ..- attr(*, "tile")= int [1:2] 1 1
[17:39:07.512]  $ delay:function (counts)  
[17:39:07.512]   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[17:39:07.512]   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x556caa4a9200> 
[17:39:07.512]  - attr(*, "where")=List of 4
[17:39:07.512]   ..$ ii   :<environment: R_EmptyEnv> 
[17:39:07.512]   ..$ n    :<environment: R_EmptyEnv> 
[17:39:07.512]   ..$ C    :<environment: R_EmptyEnv> 
[17:39:07.512]   ..$ delay:<environment: R_EmptyEnv> 
[17:39:07.512]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:39:07.512]  - attr(*, "resolved")= logi FALSE
[17:39:07.512]  - attr(*, "total_size")= num 14584
[17:39:07.512]  - attr(*, "already-done")= logi TRUE
[17:39:07.518] - copied ‘ii’ to environment
[17:39:07.518] - copied ‘n’ to environment
[17:39:07.519] - copied ‘C’ to environment
[17:39:07.519] - reassign environment for ‘delay’
[17:39:07.519] - copied ‘delay’ to environment
[17:39:07.519] assign_globals() ... done
[17:39:07.519] plan(): Setting new future strategy stack:
[17:39:07.519] List of future strategies:
[17:39:07.519] 1. sequential:
[17:39:07.519]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:07.519]    - tweaked: FALSE
[17:39:07.519]    - call: NULL
[17:39:07.520] plan(): nbrOfWorkers() = 1
[17:39:07.537] plan(): Setting new future strategy stack:
[17:39:07.538] List of future strategies:
[17:39:07.538] 1. sequential:
[17:39:07.538]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:07.538]    - tweaked: FALSE
[17:39:07.538]    - call: plan(strategy)
[17:39:07.538] plan(): nbrOfWorkers() = 1
[17:39:07.538] SequentialFuture started (and completed)
[17:39:07.538] signalConditions() ...
[17:39:07.538]  - include = ‘immediateCondition’
[17:39:07.539]  - exclude = 
[17:39:07.539]  - resignal = FALSE
[17:39:07.539]  - Number of conditions: 2
[17:39:07.539] signalConditions() ... done
[17:39:07.539] - Launch lazy future ... done
[17:39:07.539] run() for ‘SequentialFuture’ ... done
[17:39:07.539] - run() ... done
[17:39:07.539] - resolved() ...
[17:39:07.539] resolved() for ‘SequentialFuture’ ...
[17:39:07.539] - state: ‘finished’
[17:39:07.539] - run: TRUE
[17:39:07.540] - result: ‘FutureResult’
[17:39:07.540] resolved() for ‘SequentialFuture’ ... done
[17:39:07.540] - resolved: TRUE
[17:39:07.540] - resolved() ... done
[17:39:07.540] resolved() for ‘SequentialFuture’ ... done
Plotting tile #1 of 4 ...
[17:39:07.540] signalConditions() ...
[17:39:07.540]  - include = ‘immediateCondition’
[17:39:07.540]  - exclude = 
[17:39:07.540]  - resignal = FALSE
[17:39:07.540]  - Number of conditions: 2
[17:39:07.541] signalConditions() ... done
[17:39:07.541] Future state: ‘finished’
[17:39:07.541] signalConditions() ...
[17:39:07.541]  - include = ‘condition’
[17:39:07.541]  - exclude = ‘immediateCondition’
[17:39:07.541]  - resignal = TRUE
[17:39:07.541]  - Number of conditions: 2
[17:39:07.541]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #1 of 4 ...[17:39:07.541]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[17:39:07.541] signalConditions() ... done
[17:39:07.543] resolved() for ‘Future’ ...
[17:39:07.543] - state: ‘created’
[17:39:07.543] - run: TRUE
[17:39:07.543] - run() ...
[17:39:07.543] run() for ‘Future’ ...
[17:39:07.543] - state: ‘created’
[17:39:07.544] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:07.544] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:07.544] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:07.544]   - Field: ‘label’
[17:39:07.544]   - Field: ‘local’
[17:39:07.544]   - Field: ‘owner’
[17:39:07.544]   - Field: ‘envir’
[17:39:07.545]   - Field: ‘packages’
[17:39:07.545]   - Field: ‘gc’
[17:39:07.545]   - Field: ‘conditions’
[17:39:07.545]   - Field: ‘expr’
[17:39:07.545]   - Field: ‘uuid’
[17:39:07.545]   - Field: ‘seed’
[17:39:07.545]   - Field: ‘version’
[17:39:07.545]   - Field: ‘result’
[17:39:07.545]   - Field: ‘asynchronous’
[17:39:07.545]   - Field: ‘calls’
[17:39:07.546]   - Field: ‘globals’
[17:39:07.546]   - Field: ‘stdout’
[17:39:07.546]   - Field: ‘earlySignal’
[17:39:07.546]   - Field: ‘lazy’
[17:39:07.546]   - Field: ‘state’
[17:39:07.546] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:07.546] - Launch lazy future ...
[17:39:07.546] Packages needed by the future expression (n = 1): ‘future’
[17:39:07.546] Packages needed by future strategies (n = 0): <none>
[17:39:07.547] {
[17:39:07.547]     {
[17:39:07.547]         {
[17:39:07.547]             ...future.startTime <- base::Sys.time()
[17:39:07.547]             {
[17:39:07.547]                 {
[17:39:07.547]                   {
[17:39:07.547]                     {
[17:39:07.547]                       base::local({
[17:39:07.547]                         has_future <- base::requireNamespace("future", 
[17:39:07.547]                           quietly = TRUE)
[17:39:07.547]                         if (has_future) {
[17:39:07.547]                           ns <- base::getNamespace("future")
[17:39:07.547]                           version <- ns[[".package"]][["version"]]
[17:39:07.547]                           if (is.null(version)) 
[17:39:07.547]                             version <- utils::packageVersion("future")
[17:39:07.547]                         }
[17:39:07.547]                         else {
[17:39:07.547]                           version <- NULL
[17:39:07.547]                         }
[17:39:07.547]                         if (!has_future || version < "1.8.0") {
[17:39:07.547]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:07.547]                             "", base::R.version$version.string), 
[17:39:07.547]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:07.547]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:07.547]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:07.547]                               "release", "version")], collapse = " "), 
[17:39:07.547]                             hostname = base::Sys.info()[["nodename"]])
[17:39:07.547]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:07.547]                             info)
[17:39:07.547]                           info <- base::paste(info, collapse = "; ")
[17:39:07.547]                           if (!has_future) {
[17:39:07.547]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:07.547]                               info)
[17:39:07.547]                           }
[17:39:07.547]                           else {
[17:39:07.547]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:07.547]                               info, version)
[17:39:07.547]                           }
[17:39:07.547]                           base::stop(msg)
[17:39:07.547]                         }
[17:39:07.547]                       })
[17:39:07.547]                     }
[17:39:07.547]                     base::local({
[17:39:07.547]                       for (pkg in "future") {
[17:39:07.547]                         base::loadNamespace(pkg)
[17:39:07.547]                         base::library(pkg, character.only = TRUE)
[17:39:07.547]                       }
[17:39:07.547]                     })
[17:39:07.547]                   }
[17:39:07.547]                   ...future.strategy.old <- future::plan("list")
[17:39:07.547]                   options(future.plan = NULL)
[17:39:07.547]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:07.547]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:07.547]                 }
[17:39:07.547]                 ...future.workdir <- getwd()
[17:39:07.547]             }
[17:39:07.547]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:07.547]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:07.547]         }
[17:39:07.547]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:07.547]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:07.547]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:07.547]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:07.547]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:07.547]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:07.547]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:07.547]             base::names(...future.oldOptions))
[17:39:07.547]     }
[17:39:07.547]     if (FALSE) {
[17:39:07.547]     }
[17:39:07.547]     else {
[17:39:07.547]         if (TRUE) {
[17:39:07.547]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:07.547]                 open = "w")
[17:39:07.547]         }
[17:39:07.547]         else {
[17:39:07.547]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:07.547]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:07.547]         }
[17:39:07.547]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:07.547]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:07.547]             base::sink(type = "output", split = FALSE)
[17:39:07.547]             base::close(...future.stdout)
[17:39:07.547]         }, add = TRUE)
[17:39:07.547]     }
[17:39:07.547]     ...future.frame <- base::sys.nframe()
[17:39:07.547]     ...future.conditions <- base::list()
[17:39:07.547]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:07.547]     if (FALSE) {
[17:39:07.547]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:07.547]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:07.547]     }
[17:39:07.547]     ...future.result <- base::tryCatch({
[17:39:07.547]         base::withCallingHandlers({
[17:39:07.547]             ...future.value <- base::withVisible(base::local({
[17:39:07.547]                 message(sprintf("Calculating tile #%d of %d ...", 
[17:39:07.547]                   ii, n), appendLF = FALSE)
[17:39:07.547]                 fit <- mandelbrot(C)
[17:39:07.547]                 delay(fit)
[17:39:07.547]                 message(" done")
[17:39:07.547]                 fit
[17:39:07.547]             }))
[17:39:07.547]             future::FutureResult(value = ...future.value$value, 
[17:39:07.547]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:07.547]                   ...future.rng), globalenv = if (FALSE) 
[17:39:07.547]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:07.547]                     ...future.globalenv.names))
[17:39:07.547]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:07.547]         }, condition = base::local({
[17:39:07.547]             c <- base::c
[17:39:07.547]             inherits <- base::inherits
[17:39:07.547]             invokeRestart <- base::invokeRestart
[17:39:07.547]             length <- base::length
[17:39:07.547]             list <- base::list
[17:39:07.547]             seq.int <- base::seq.int
[17:39:07.547]             signalCondition <- base::signalCondition
[17:39:07.547]             sys.calls <- base::sys.calls
[17:39:07.547]             `[[` <- base::`[[`
[17:39:07.547]             `+` <- base::`+`
[17:39:07.547]             `<<-` <- base::`<<-`
[17:39:07.547]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:07.547]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:07.547]                   3L)]
[17:39:07.547]             }
[17:39:07.547]             function(cond) {
[17:39:07.547]                 is_error <- inherits(cond, "error")
[17:39:07.547]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:07.547]                   NULL)
[17:39:07.547]                 if (is_error) {
[17:39:07.547]                   sessionInformation <- function() {
[17:39:07.547]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:07.547]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:07.547]                       search = base::search(), system = base::Sys.info())
[17:39:07.547]                   }
[17:39:07.547]                   ...future.conditions[[length(...future.conditions) + 
[17:39:07.547]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:07.547]                     cond$call), session = sessionInformation(), 
[17:39:07.547]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:07.547]                   signalCondition(cond)
[17:39:07.547]                 }
[17:39:07.547]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:07.547]                 "immediateCondition"))) {
[17:39:07.547]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:07.547]                   ...future.conditions[[length(...future.conditions) + 
[17:39:07.547]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:07.547]                   if (TRUE && !signal) {
[17:39:07.547]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:07.547]                     {
[17:39:07.547]                       inherits <- base::inherits
[17:39:07.547]                       invokeRestart <- base::invokeRestart
[17:39:07.547]                       is.null <- base::is.null
[17:39:07.547]                       muffled <- FALSE
[17:39:07.547]                       if (inherits(cond, "message")) {
[17:39:07.547]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:07.547]                         if (muffled) 
[17:39:07.547]                           invokeRestart("muffleMessage")
[17:39:07.547]                       }
[17:39:07.547]                       else if (inherits(cond, "warning")) {
[17:39:07.547]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:07.547]                         if (muffled) 
[17:39:07.547]                           invokeRestart("muffleWarning")
[17:39:07.547]                       }
[17:39:07.547]                       else if (inherits(cond, "condition")) {
[17:39:07.547]                         if (!is.null(pattern)) {
[17:39:07.547]                           computeRestarts <- base::computeRestarts
[17:39:07.547]                           grepl <- base::grepl
[17:39:07.547]                           restarts <- computeRestarts(cond)
[17:39:07.547]                           for (restart in restarts) {
[17:39:07.547]                             name <- restart$name
[17:39:07.547]                             if (is.null(name)) 
[17:39:07.547]                               next
[17:39:07.547]                             if (!grepl(pattern, name)) 
[17:39:07.547]                               next
[17:39:07.547]                             invokeRestart(restart)
[17:39:07.547]                             muffled <- TRUE
[17:39:07.547]                             break
[17:39:07.547]                           }
[17:39:07.547]                         }
[17:39:07.547]                       }
[17:39:07.547]                       invisible(muffled)
[17:39:07.547]                     }
[17:39:07.547]                     muffleCondition(cond, pattern = "^muffle")
[17:39:07.547]                   }
[17:39:07.547]                 }
[17:39:07.547]                 else {
[17:39:07.547]                   if (TRUE) {
[17:39:07.547]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:07.547]                     {
[17:39:07.547]                       inherits <- base::inherits
[17:39:07.547]                       invokeRestart <- base::invokeRestart
[17:39:07.547]                       is.null <- base::is.null
[17:39:07.547]                       muffled <- FALSE
[17:39:07.547]                       if (inherits(cond, "message")) {
[17:39:07.547]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:07.547]                         if (muffled) 
[17:39:07.547]                           invokeRestart("muffleMessage")
[17:39:07.547]                       }
[17:39:07.547]                       else if (inherits(cond, "warning")) {
[17:39:07.547]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:07.547]                         if (muffled) 
[17:39:07.547]                           invokeRestart("muffleWarning")
[17:39:07.547]                       }
[17:39:07.547]                       else if (inherits(cond, "condition")) {
[17:39:07.547]                         if (!is.null(pattern)) {
[17:39:07.547]                           computeRestarts <- base::computeRestarts
[17:39:07.547]                           grepl <- base::grepl
[17:39:07.547]                           restarts <- computeRestarts(cond)
[17:39:07.547]                           for (restart in restarts) {
[17:39:07.547]                             name <- restart$name
[17:39:07.547]                             if (is.null(name)) 
[17:39:07.547]                               next
[17:39:07.547]                             if (!grepl(pattern, name)) 
[17:39:07.547]                               next
[17:39:07.547]                             invokeRestart(restart)
[17:39:07.547]                             muffled <- TRUE
[17:39:07.547]                             break
[17:39:07.547]                           }
[17:39:07.547]                         }
[17:39:07.547]                       }
[17:39:07.547]                       invisible(muffled)
[17:39:07.547]                     }
[17:39:07.547]                     muffleCondition(cond, pattern = "^muffle")
[17:39:07.547]                   }
[17:39:07.547]                 }
[17:39:07.547]             }
[17:39:07.547]         }))
[17:39:07.547]     }, error = function(ex) {
[17:39:07.547]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:07.547]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:07.547]                 ...future.rng), started = ...future.startTime, 
[17:39:07.547]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:07.547]             version = "1.8"), class = "FutureResult")
[17:39:07.547]     }, finally = {
[17:39:07.547]         if (!identical(...future.workdir, getwd())) 
[17:39:07.547]             setwd(...future.workdir)
[17:39:07.547]         {
[17:39:07.547]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:07.547]                 ...future.oldOptions$nwarnings <- NULL
[17:39:07.547]             }
[17:39:07.547]             base::options(...future.oldOptions)
[17:39:07.547]             if (.Platform$OS.type == "windows") {
[17:39:07.547]                 old_names <- names(...future.oldEnvVars)
[17:39:07.547]                 envs <- base::Sys.getenv()
[17:39:07.547]                 names <- names(envs)
[17:39:07.547]                 common <- intersect(names, old_names)
[17:39:07.547]                 added <- setdiff(names, old_names)
[17:39:07.547]                 removed <- setdiff(old_names, names)
[17:39:07.547]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:07.547]                   envs[common]]
[17:39:07.547]                 NAMES <- toupper(changed)
[17:39:07.547]                 args <- list()
[17:39:07.547]                 for (kk in seq_along(NAMES)) {
[17:39:07.547]                   name <- changed[[kk]]
[17:39:07.547]                   NAME <- NAMES[[kk]]
[17:39:07.547]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:07.547]                     next
[17:39:07.547]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:07.547]                 }
[17:39:07.547]                 NAMES <- toupper(added)
[17:39:07.547]                 for (kk in seq_along(NAMES)) {
[17:39:07.547]                   name <- added[[kk]]
[17:39:07.547]                   NAME <- NAMES[[kk]]
[17:39:07.547]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:07.547]                     next
[17:39:07.547]                   args[[name]] <- ""
[17:39:07.547]                 }
[17:39:07.547]                 NAMES <- toupper(removed)
[17:39:07.547]                 for (kk in seq_along(NAMES)) {
[17:39:07.547]                   name <- removed[[kk]]
[17:39:07.547]                   NAME <- NAMES[[kk]]
[17:39:07.547]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:07.547]                     next
[17:39:07.547]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:07.547]                 }
[17:39:07.547]                 if (length(args) > 0) 
[17:39:07.547]                   base::do.call(base::Sys.setenv, args = args)
[17:39:07.547]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:07.547]             }
[17:39:07.547]             else {
[17:39:07.547]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:07.547]             }
[17:39:07.547]             {
[17:39:07.547]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:07.547]                   0L) {
[17:39:07.547]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:07.547]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:07.547]                   base::options(opts)
[17:39:07.547]                 }
[17:39:07.547]                 {
[17:39:07.547]                   {
[17:39:07.547]                     NULL
[17:39:07.547]                     RNGkind("Mersenne-Twister")
[17:39:07.547]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:07.547]                       inherits = FALSE)
[17:39:07.547]                   }
[17:39:07.547]                   options(future.plan = NULL)
[17:39:07.547]                   if (is.na(NA_character_)) 
[17:39:07.547]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:07.547]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:07.547]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:07.547]                     .init = FALSE)
[17:39:07.547]                 }
[17:39:07.547]             }
[17:39:07.547]         }
[17:39:07.547]     })
[17:39:07.547]     if (TRUE) {
[17:39:07.547]         base::sink(type = "output", split = FALSE)
[17:39:07.547]         if (TRUE) {
[17:39:07.547]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:07.547]         }
[17:39:07.547]         else {
[17:39:07.547]             ...future.result["stdout"] <- base::list(NULL)
[17:39:07.547]         }
[17:39:07.547]         base::close(...future.stdout)
[17:39:07.547]         ...future.stdout <- NULL
[17:39:07.547]     }
[17:39:07.547]     ...future.result$conditions <- ...future.conditions
[17:39:07.547]     ...future.result$finished <- base::Sys.time()
[17:39:07.547]     ...future.result
[17:39:07.547] }
[17:39:07.549] assign_globals() ...
[17:39:07.549] List of 4
[17:39:07.549]  $ ii   : int 2
[17:39:07.549]  $ n    : int 4
[17:39:07.549]  $ C    : cplx [1:25, 1:25] -0.719-1.5i -0.719-1.44i -0.719-1.38i ...
[17:39:07.549]   ..- attr(*, "region")=List of 2
[17:39:07.549]   .. ..$ xrange: num [1:2] -0.719 0.75
[17:39:07.549]   .. ..$ yrange: num [1:2] -1.5 -0.0306
[17:39:07.549]   ..- attr(*, "tile")= int [1:2] 1 2
[17:39:07.549]  $ delay:function (counts)  
[17:39:07.549]   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[17:39:07.549]   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x556caa4a9200> 
[17:39:07.549]  - attr(*, "where")=List of 4
[17:39:07.549]   ..$ ii   :<environment: R_EmptyEnv> 
[17:39:07.549]   ..$ n    :<environment: R_EmptyEnv> 
[17:39:07.549]   ..$ C    :<environment: R_EmptyEnv> 
[17:39:07.549]   ..$ delay:<environment: R_EmptyEnv> 
[17:39:07.549]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:39:07.549]  - attr(*, "resolved")= logi FALSE
[17:39:07.549]  - attr(*, "total_size")= num 14584
[17:39:07.549]  - attr(*, "already-done")= logi TRUE
[17:39:07.555] - copied ‘ii’ to environment
[17:39:07.555] - copied ‘n’ to environment
[17:39:07.555] - copied ‘C’ to environment
[17:39:07.555] - reassign environment for ‘delay’
[17:39:07.555] - copied ‘delay’ to environment
[17:39:07.555] assign_globals() ... done
[17:39:07.556] plan(): Setting new future strategy stack:
[17:39:07.556] List of future strategies:
[17:39:07.556] 1. sequential:
[17:39:07.556]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:07.556]    - tweaked: FALSE
[17:39:07.556]    - call: NULL
[17:39:07.556] plan(): nbrOfWorkers() = 1
[17:39:07.572] plan(): Setting new future strategy stack:
[17:39:07.572] List of future strategies:
[17:39:07.572] 1. sequential:
[17:39:07.572]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:07.572]    - tweaked: FALSE
[17:39:07.572]    - call: plan(strategy)
[17:39:07.572] plan(): nbrOfWorkers() = 1
[17:39:07.572] SequentialFuture started (and completed)
[17:39:07.573] signalConditions() ...
[17:39:07.573]  - include = ‘immediateCondition’
[17:39:07.573]  - exclude = 
[17:39:07.573]  - resignal = FALSE
[17:39:07.573]  - Number of conditions: 2
[17:39:07.573] signalConditions() ... done
[17:39:07.573] - Launch lazy future ... done
[17:39:07.573] run() for ‘SequentialFuture’ ... done
[17:39:07.573] - run() ... done
[17:39:07.573] - resolved() ...
[17:39:07.573] resolved() for ‘SequentialFuture’ ...
[17:39:07.574] - state: ‘finished’
[17:39:07.574] - run: TRUE
[17:39:07.574] - result: ‘FutureResult’
[17:39:07.574] resolved() for ‘SequentialFuture’ ... done
[17:39:07.574] - resolved: TRUE
[17:39:07.574] - resolved() ... done
[17:39:07.574] resolved() for ‘SequentialFuture’ ... done
Plotting tile #2 of 4 ...
[17:39:07.574] signalConditions() ...
[17:39:07.574]  - include = ‘immediateCondition’
[17:39:07.574]  - exclude = 
[17:39:07.575]  - resignal = FALSE
[17:39:07.575]  - Number of conditions: 2
[17:39:07.575] signalConditions() ... done
[17:39:07.575] Future state: ‘finished’
[17:39:07.575] signalConditions() ...
[17:39:07.575]  - include = ‘condition’
[17:39:07.575]  - exclude = ‘immediateCondition’
[17:39:07.575]  - resignal = TRUE
[17:39:07.575]  - Number of conditions: 2
[17:39:07.575]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #2 of 4 ...[17:39:07.576]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[17:39:07.576] signalConditions() ... done
[17:39:07.576] resolved() for ‘Future’ ...
[17:39:07.576] - state: ‘created’
[17:39:07.577] - run: TRUE
[17:39:07.577] - run() ...
[17:39:07.577] run() for ‘Future’ ...
[17:39:07.577] - state: ‘created’
[17:39:07.577] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:07.577] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:07.577] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:07.577]   - Field: ‘label’
[17:39:07.578]   - Field: ‘local’
[17:39:07.578]   - Field: ‘owner’
[17:39:07.578]   - Field: ‘envir’
[17:39:07.578]   - Field: ‘packages’
[17:39:07.578]   - Field: ‘gc’
[17:39:07.578]   - Field: ‘conditions’
[17:39:07.578]   - Field: ‘expr’
[17:39:07.578]   - Field: ‘uuid’
[17:39:07.578]   - Field: ‘seed’
[17:39:07.578]   - Field: ‘version’
[17:39:07.578]   - Field: ‘result’
[17:39:07.579]   - Field: ‘asynchronous’
[17:39:07.579]   - Field: ‘calls’
[17:39:07.579]   - Field: ‘globals’
[17:39:07.579]   - Field: ‘stdout’
[17:39:07.579]   - Field: ‘earlySignal’
[17:39:07.579]   - Field: ‘lazy’
[17:39:07.579]   - Field: ‘state’
[17:39:07.579] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:07.579] - Launch lazy future ...
[17:39:07.580] Packages needed by the future expression (n = 1): ‘future’
[17:39:07.580] Packages needed by future strategies (n = 0): <none>
[17:39:07.580] {
[17:39:07.580]     {
[17:39:07.580]         {
[17:39:07.580]             ...future.startTime <- base::Sys.time()
[17:39:07.580]             {
[17:39:07.580]                 {
[17:39:07.580]                   {
[17:39:07.580]                     {
[17:39:07.580]                       base::local({
[17:39:07.580]                         has_future <- base::requireNamespace("future", 
[17:39:07.580]                           quietly = TRUE)
[17:39:07.580]                         if (has_future) {
[17:39:07.580]                           ns <- base::getNamespace("future")
[17:39:07.580]                           version <- ns[[".package"]][["version"]]
[17:39:07.580]                           if (is.null(version)) 
[17:39:07.580]                             version <- utils::packageVersion("future")
[17:39:07.580]                         }
[17:39:07.580]                         else {
[17:39:07.580]                           version <- NULL
[17:39:07.580]                         }
[17:39:07.580]                         if (!has_future || version < "1.8.0") {
[17:39:07.580]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:07.580]                             "", base::R.version$version.string), 
[17:39:07.580]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:07.580]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:07.580]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:07.580]                               "release", "version")], collapse = " "), 
[17:39:07.580]                             hostname = base::Sys.info()[["nodename"]])
[17:39:07.580]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:07.580]                             info)
[17:39:07.580]                           info <- base::paste(info, collapse = "; ")
[17:39:07.580]                           if (!has_future) {
[17:39:07.580]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:07.580]                               info)
[17:39:07.580]                           }
[17:39:07.580]                           else {
[17:39:07.580]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:07.580]                               info, version)
[17:39:07.580]                           }
[17:39:07.580]                           base::stop(msg)
[17:39:07.580]                         }
[17:39:07.580]                       })
[17:39:07.580]                     }
[17:39:07.580]                     base::local({
[17:39:07.580]                       for (pkg in "future") {
[17:39:07.580]                         base::loadNamespace(pkg)
[17:39:07.580]                         base::library(pkg, character.only = TRUE)
[17:39:07.580]                       }
[17:39:07.580]                     })
[17:39:07.580]                   }
[17:39:07.580]                   ...future.strategy.old <- future::plan("list")
[17:39:07.580]                   options(future.plan = NULL)
[17:39:07.580]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:07.580]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:07.580]                 }
[17:39:07.580]                 ...future.workdir <- getwd()
[17:39:07.580]             }
[17:39:07.580]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:07.580]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:07.580]         }
[17:39:07.580]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:07.580]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:07.580]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:07.580]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:07.580]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:07.580]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:07.580]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:07.580]             base::names(...future.oldOptions))
[17:39:07.580]     }
[17:39:07.580]     if (FALSE) {
[17:39:07.580]     }
[17:39:07.580]     else {
[17:39:07.580]         if (TRUE) {
[17:39:07.580]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:07.580]                 open = "w")
[17:39:07.580]         }
[17:39:07.580]         else {
[17:39:07.580]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:07.580]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:07.580]         }
[17:39:07.580]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:07.580]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:07.580]             base::sink(type = "output", split = FALSE)
[17:39:07.580]             base::close(...future.stdout)
[17:39:07.580]         }, add = TRUE)
[17:39:07.580]     }
[17:39:07.580]     ...future.frame <- base::sys.nframe()
[17:39:07.580]     ...future.conditions <- base::list()
[17:39:07.580]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:07.580]     if (FALSE) {
[17:39:07.580]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:07.580]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:07.580]     }
[17:39:07.580]     ...future.result <- base::tryCatch({
[17:39:07.580]         base::withCallingHandlers({
[17:39:07.580]             ...future.value <- base::withVisible(base::local({
[17:39:07.580]                 message(sprintf("Calculating tile #%d of %d ...", 
[17:39:07.580]                   ii, n), appendLF = FALSE)
[17:39:07.580]                 fit <- mandelbrot(C)
[17:39:07.580]                 delay(fit)
[17:39:07.580]                 message(" done")
[17:39:07.580]                 fit
[17:39:07.580]             }))
[17:39:07.580]             future::FutureResult(value = ...future.value$value, 
[17:39:07.580]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:07.580]                   ...future.rng), globalenv = if (FALSE) 
[17:39:07.580]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:07.580]                     ...future.globalenv.names))
[17:39:07.580]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:07.580]         }, condition = base::local({
[17:39:07.580]             c <- base::c
[17:39:07.580]             inherits <- base::inherits
[17:39:07.580]             invokeRestart <- base::invokeRestart
[17:39:07.580]             length <- base::length
[17:39:07.580]             list <- base::list
[17:39:07.580]             seq.int <- base::seq.int
[17:39:07.580]             signalCondition <- base::signalCondition
[17:39:07.580]             sys.calls <- base::sys.calls
[17:39:07.580]             `[[` <- base::`[[`
[17:39:07.580]             `+` <- base::`+`
[17:39:07.580]             `<<-` <- base::`<<-`
[17:39:07.580]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:07.580]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:07.580]                   3L)]
[17:39:07.580]             }
[17:39:07.580]             function(cond) {
[17:39:07.580]                 is_error <- inherits(cond, "error")
[17:39:07.580]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:07.580]                   NULL)
[17:39:07.580]                 if (is_error) {
[17:39:07.580]                   sessionInformation <- function() {
[17:39:07.580]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:07.580]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:07.580]                       search = base::search(), system = base::Sys.info())
[17:39:07.580]                   }
[17:39:07.580]                   ...future.conditions[[length(...future.conditions) + 
[17:39:07.580]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:07.580]                     cond$call), session = sessionInformation(), 
[17:39:07.580]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:07.580]                   signalCondition(cond)
[17:39:07.580]                 }
[17:39:07.580]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:07.580]                 "immediateCondition"))) {
[17:39:07.580]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:07.580]                   ...future.conditions[[length(...future.conditions) + 
[17:39:07.580]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:07.580]                   if (TRUE && !signal) {
[17:39:07.580]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:07.580]                     {
[17:39:07.580]                       inherits <- base::inherits
[17:39:07.580]                       invokeRestart <- base::invokeRestart
[17:39:07.580]                       is.null <- base::is.null
[17:39:07.580]                       muffled <- FALSE
[17:39:07.580]                       if (inherits(cond, "message")) {
[17:39:07.580]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:07.580]                         if (muffled) 
[17:39:07.580]                           invokeRestart("muffleMessage")
[17:39:07.580]                       }
[17:39:07.580]                       else if (inherits(cond, "warning")) {
[17:39:07.580]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:07.580]                         if (muffled) 
[17:39:07.580]                           invokeRestart("muffleWarning")
[17:39:07.580]                       }
[17:39:07.580]                       else if (inherits(cond, "condition")) {
[17:39:07.580]                         if (!is.null(pattern)) {
[17:39:07.580]                           computeRestarts <- base::computeRestarts
[17:39:07.580]                           grepl <- base::grepl
[17:39:07.580]                           restarts <- computeRestarts(cond)
[17:39:07.580]                           for (restart in restarts) {
[17:39:07.580]                             name <- restart$name
[17:39:07.580]                             if (is.null(name)) 
[17:39:07.580]                               next
[17:39:07.580]                             if (!grepl(pattern, name)) 
[17:39:07.580]                               next
[17:39:07.580]                             invokeRestart(restart)
[17:39:07.580]                             muffled <- TRUE
[17:39:07.580]                             break
[17:39:07.580]                           }
[17:39:07.580]                         }
[17:39:07.580]                       }
[17:39:07.580]                       invisible(muffled)
[17:39:07.580]                     }
[17:39:07.580]                     muffleCondition(cond, pattern = "^muffle")
[17:39:07.580]                   }
[17:39:07.580]                 }
[17:39:07.580]                 else {
[17:39:07.580]                   if (TRUE) {
[17:39:07.580]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:07.580]                     {
[17:39:07.580]                       inherits <- base::inherits
[17:39:07.580]                       invokeRestart <- base::invokeRestart
[17:39:07.580]                       is.null <- base::is.null
[17:39:07.580]                       muffled <- FALSE
[17:39:07.580]                       if (inherits(cond, "message")) {
[17:39:07.580]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:07.580]                         if (muffled) 
[17:39:07.580]                           invokeRestart("muffleMessage")
[17:39:07.580]                       }
[17:39:07.580]                       else if (inherits(cond, "warning")) {
[17:39:07.580]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:07.580]                         if (muffled) 
[17:39:07.580]                           invokeRestart("muffleWarning")
[17:39:07.580]                       }
[17:39:07.580]                       else if (inherits(cond, "condition")) {
[17:39:07.580]                         if (!is.null(pattern)) {
[17:39:07.580]                           computeRestarts <- base::computeRestarts
[17:39:07.580]                           grepl <- base::grepl
[17:39:07.580]                           restarts <- computeRestarts(cond)
[17:39:07.580]                           for (restart in restarts) {
[17:39:07.580]                             name <- restart$name
[17:39:07.580]                             if (is.null(name)) 
[17:39:07.580]                               next
[17:39:07.580]                             if (!grepl(pattern, name)) 
[17:39:07.580]                               next
[17:39:07.580]                             invokeRestart(restart)
[17:39:07.580]                             muffled <- TRUE
[17:39:07.580]                             break
[17:39:07.580]                           }
[17:39:07.580]                         }
[17:39:07.580]                       }
[17:39:07.580]                       invisible(muffled)
[17:39:07.580]                     }
[17:39:07.580]                     muffleCondition(cond, pattern = "^muffle")
[17:39:07.580]                   }
[17:39:07.580]                 }
[17:39:07.580]             }
[17:39:07.580]         }))
[17:39:07.580]     }, error = function(ex) {
[17:39:07.580]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:07.580]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:07.580]                 ...future.rng), started = ...future.startTime, 
[17:39:07.580]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:07.580]             version = "1.8"), class = "FutureResult")
[17:39:07.580]     }, finally = {
[17:39:07.580]         if (!identical(...future.workdir, getwd())) 
[17:39:07.580]             setwd(...future.workdir)
[17:39:07.580]         {
[17:39:07.580]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:07.580]                 ...future.oldOptions$nwarnings <- NULL
[17:39:07.580]             }
[17:39:07.580]             base::options(...future.oldOptions)
[17:39:07.580]             if (.Platform$OS.type == "windows") {
[17:39:07.580]                 old_names <- names(...future.oldEnvVars)
[17:39:07.580]                 envs <- base::Sys.getenv()
[17:39:07.580]                 names <- names(envs)
[17:39:07.580]                 common <- intersect(names, old_names)
[17:39:07.580]                 added <- setdiff(names, old_names)
[17:39:07.580]                 removed <- setdiff(old_names, names)
[17:39:07.580]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:07.580]                   envs[common]]
[17:39:07.580]                 NAMES <- toupper(changed)
[17:39:07.580]                 args <- list()
[17:39:07.580]                 for (kk in seq_along(NAMES)) {
[17:39:07.580]                   name <- changed[[kk]]
[17:39:07.580]                   NAME <- NAMES[[kk]]
[17:39:07.580]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:07.580]                     next
[17:39:07.580]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:07.580]                 }
[17:39:07.580]                 NAMES <- toupper(added)
[17:39:07.580]                 for (kk in seq_along(NAMES)) {
[17:39:07.580]                   name <- added[[kk]]
[17:39:07.580]                   NAME <- NAMES[[kk]]
[17:39:07.580]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:07.580]                     next
[17:39:07.580]                   args[[name]] <- ""
[17:39:07.580]                 }
[17:39:07.580]                 NAMES <- toupper(removed)
[17:39:07.580]                 for (kk in seq_along(NAMES)) {
[17:39:07.580]                   name <- removed[[kk]]
[17:39:07.580]                   NAME <- NAMES[[kk]]
[17:39:07.580]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:07.580]                     next
[17:39:07.580]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:07.580]                 }
[17:39:07.580]                 if (length(args) > 0) 
[17:39:07.580]                   base::do.call(base::Sys.setenv, args = args)
[17:39:07.580]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:07.580]             }
[17:39:07.580]             else {
[17:39:07.580]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:07.580]             }
[17:39:07.580]             {
[17:39:07.580]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:07.580]                   0L) {
[17:39:07.580]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:07.580]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:07.580]                   base::options(opts)
[17:39:07.580]                 }
[17:39:07.580]                 {
[17:39:07.580]                   {
[17:39:07.580]                     NULL
[17:39:07.580]                     RNGkind("Mersenne-Twister")
[17:39:07.580]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:07.580]                       inherits = FALSE)
[17:39:07.580]                   }
[17:39:07.580]                   options(future.plan = NULL)
[17:39:07.580]                   if (is.na(NA_character_)) 
[17:39:07.580]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:07.580]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:07.580]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:07.580]                     .init = FALSE)
[17:39:07.580]                 }
[17:39:07.580]             }
[17:39:07.580]         }
[17:39:07.580]     })
[17:39:07.580]     if (TRUE) {
[17:39:07.580]         base::sink(type = "output", split = FALSE)
[17:39:07.580]         if (TRUE) {
[17:39:07.580]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:07.580]         }
[17:39:07.580]         else {
[17:39:07.580]             ...future.result["stdout"] <- base::list(NULL)
[17:39:07.580]         }
[17:39:07.580]         base::close(...future.stdout)
[17:39:07.580]         ...future.stdout <- NULL
[17:39:07.580]     }
[17:39:07.580]     ...future.result$conditions <- ...future.conditions
[17:39:07.580]     ...future.result$finished <- base::Sys.time()
[17:39:07.580]     ...future.result
[17:39:07.580] }
[17:39:07.582] assign_globals() ...
[17:39:07.582] List of 4
[17:39:07.582]  $ ii   : int 3
[17:39:07.582]  $ n    : int 4
[17:39:07.582]  $ C    : cplx [1:25, 1:25] -2.25+0.0306i -2.25+0.0918i -2.25+0.1531i ...
[17:39:07.582]   ..- attr(*, "region")=List of 2
[17:39:07.582]   .. ..$ xrange: num [1:2] -2.25 -0.781
[17:39:07.582]   .. ..$ yrange: num [1:2] 0.0306 1.5
[17:39:07.582]   ..- attr(*, "tile")= int [1:2] 2 1
[17:39:07.582]  $ delay:function (counts)  
[17:39:07.582]   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[17:39:07.582]   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x556caa4a9200> 
[17:39:07.582]  - attr(*, "where")=List of 4
[17:39:07.582]   ..$ ii   :<environment: R_EmptyEnv> 
[17:39:07.582]   ..$ n    :<environment: R_EmptyEnv> 
[17:39:07.582]   ..$ C    :<environment: R_EmptyEnv> 
[17:39:07.582]   ..$ delay:<environment: R_EmptyEnv> 
[17:39:07.582]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:39:07.582]  - attr(*, "resolved")= logi FALSE
[17:39:07.582]  - attr(*, "total_size")= num 14584
[17:39:07.582]  - attr(*, "already-done")= logi TRUE
[17:39:07.588] - copied ‘ii’ to environment
[17:39:07.588] - copied ‘n’ to environment
[17:39:07.588] - copied ‘C’ to environment
[17:39:07.589] - reassign environment for ‘delay’
[17:39:07.589] - copied ‘delay’ to environment
[17:39:07.589] assign_globals() ... done
[17:39:07.589] plan(): Setting new future strategy stack:
[17:39:07.589] List of future strategies:
[17:39:07.589] 1. sequential:
[17:39:07.589]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:07.589]    - tweaked: FALSE
[17:39:07.589]    - call: NULL
[17:39:07.590] plan(): nbrOfWorkers() = 1
[17:39:07.607] plan(): Setting new future strategy stack:
[17:39:07.607] List of future strategies:
[17:39:07.607] 1. sequential:
[17:39:07.607]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:07.607]    - tweaked: FALSE
[17:39:07.607]    - call: plan(strategy)
[17:39:07.608] plan(): nbrOfWorkers() = 1
[17:39:07.608] SequentialFuture started (and completed)
[17:39:07.608] signalConditions() ...
[17:39:07.608]  - include = ‘immediateCondition’
[17:39:07.608]  - exclude = 
[17:39:07.608]  - resignal = FALSE
[17:39:07.608]  - Number of conditions: 2
[17:39:07.609] signalConditions() ... done
[17:39:07.609] - Launch lazy future ... done
[17:39:07.609] run() for ‘SequentialFuture’ ... done
[17:39:07.609] - run() ... done
[17:39:07.609] - resolved() ...
[17:39:07.609] resolved() for ‘SequentialFuture’ ...
[17:39:07.609] - state: ‘finished’
[17:39:07.609] - run: TRUE
[17:39:07.609] - result: ‘FutureResult’
[17:39:07.609] resolved() for ‘SequentialFuture’ ... done
[17:39:07.609] - resolved: TRUE
[17:39:07.610] - resolved() ... done
[17:39:07.610] resolved() for ‘SequentialFuture’ ... done
Plotting tile #3 of 4 ...
[17:39:07.610] signalConditions() ...
[17:39:07.610]  - include = ‘immediateCondition’
[17:39:07.610]  - exclude = 
[17:39:07.610]  - resignal = FALSE
[17:39:07.610]  - Number of conditions: 2
[17:39:07.610] signalConditions() ... done
[17:39:07.610] Future state: ‘finished’
[17:39:07.610] signalConditions() ...
[17:39:07.611]  - include = ‘condition’
[17:39:07.611]  - exclude = ‘immediateCondition’
[17:39:07.611]  - resignal = TRUE
[17:39:07.611]  - Number of conditions: 2
[17:39:07.611]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #3 of 4 ...[17:39:07.611]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[17:39:07.611] signalConditions() ... done
[17:39:07.612] resolved() for ‘Future’ ...
[17:39:07.612] - state: ‘created’
[17:39:07.612] - run: TRUE
[17:39:07.612] - run() ...
[17:39:07.612] run() for ‘Future’ ...
[17:39:07.612] - state: ‘created’
[17:39:07.612] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:07.613] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:07.613] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:07.613]   - Field: ‘label’
[17:39:07.613]   - Field: ‘local’
[17:39:07.613]   - Field: ‘owner’
[17:39:07.613]   - Field: ‘envir’
[17:39:07.613]   - Field: ‘packages’
[17:39:07.613]   - Field: ‘gc’
[17:39:07.614]   - Field: ‘conditions’
[17:39:07.614]   - Field: ‘expr’
[17:39:07.614]   - Field: ‘uuid’
[17:39:07.614]   - Field: ‘seed’
[17:39:07.614]   - Field: ‘version’
[17:39:07.614]   - Field: ‘result’
[17:39:07.614]   - Field: ‘asynchronous’
[17:39:07.614]   - Field: ‘calls’
[17:39:07.614]   - Field: ‘globals’
[17:39:07.614]   - Field: ‘stdout’
[17:39:07.614]   - Field: ‘earlySignal’
[17:39:07.615]   - Field: ‘lazy’
[17:39:07.615]   - Field: ‘state’
[17:39:07.615] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:07.615] - Launch lazy future ...
[17:39:07.615] Packages needed by the future expression (n = 1): ‘future’
[17:39:07.615] Packages needed by future strategies (n = 0): <none>
[17:39:07.616] {
[17:39:07.616]     {
[17:39:07.616]         {
[17:39:07.616]             ...future.startTime <- base::Sys.time()
[17:39:07.616]             {
[17:39:07.616]                 {
[17:39:07.616]                   {
[17:39:07.616]                     {
[17:39:07.616]                       base::local({
[17:39:07.616]                         has_future <- base::requireNamespace("future", 
[17:39:07.616]                           quietly = TRUE)
[17:39:07.616]                         if (has_future) {
[17:39:07.616]                           ns <- base::getNamespace("future")
[17:39:07.616]                           version <- ns[[".package"]][["version"]]
[17:39:07.616]                           if (is.null(version)) 
[17:39:07.616]                             version <- utils::packageVersion("future")
[17:39:07.616]                         }
[17:39:07.616]                         else {
[17:39:07.616]                           version <- NULL
[17:39:07.616]                         }
[17:39:07.616]                         if (!has_future || version < "1.8.0") {
[17:39:07.616]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:07.616]                             "", base::R.version$version.string), 
[17:39:07.616]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:07.616]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:07.616]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:07.616]                               "release", "version")], collapse = " "), 
[17:39:07.616]                             hostname = base::Sys.info()[["nodename"]])
[17:39:07.616]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:07.616]                             info)
[17:39:07.616]                           info <- base::paste(info, collapse = "; ")
[17:39:07.616]                           if (!has_future) {
[17:39:07.616]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:07.616]                               info)
[17:39:07.616]                           }
[17:39:07.616]                           else {
[17:39:07.616]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:07.616]                               info, version)
[17:39:07.616]                           }
[17:39:07.616]                           base::stop(msg)
[17:39:07.616]                         }
[17:39:07.616]                       })
[17:39:07.616]                     }
[17:39:07.616]                     base::local({
[17:39:07.616]                       for (pkg in "future") {
[17:39:07.616]                         base::loadNamespace(pkg)
[17:39:07.616]                         base::library(pkg, character.only = TRUE)
[17:39:07.616]                       }
[17:39:07.616]                     })
[17:39:07.616]                   }
[17:39:07.616]                   ...future.strategy.old <- future::plan("list")
[17:39:07.616]                   options(future.plan = NULL)
[17:39:07.616]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:07.616]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:07.616]                 }
[17:39:07.616]                 ...future.workdir <- getwd()
[17:39:07.616]             }
[17:39:07.616]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:07.616]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:07.616]         }
[17:39:07.616]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:07.616]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:07.616]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:07.616]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:07.616]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:07.616]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:07.616]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:07.616]             base::names(...future.oldOptions))
[17:39:07.616]     }
[17:39:07.616]     if (FALSE) {
[17:39:07.616]     }
[17:39:07.616]     else {
[17:39:07.616]         if (TRUE) {
[17:39:07.616]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:07.616]                 open = "w")
[17:39:07.616]         }
[17:39:07.616]         else {
[17:39:07.616]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:07.616]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:07.616]         }
[17:39:07.616]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:07.616]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:07.616]             base::sink(type = "output", split = FALSE)
[17:39:07.616]             base::close(...future.stdout)
[17:39:07.616]         }, add = TRUE)
[17:39:07.616]     }
[17:39:07.616]     ...future.frame <- base::sys.nframe()
[17:39:07.616]     ...future.conditions <- base::list()
[17:39:07.616]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:07.616]     if (FALSE) {
[17:39:07.616]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:07.616]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:07.616]     }
[17:39:07.616]     ...future.result <- base::tryCatch({
[17:39:07.616]         base::withCallingHandlers({
[17:39:07.616]             ...future.value <- base::withVisible(base::local({
[17:39:07.616]                 message(sprintf("Calculating tile #%d of %d ...", 
[17:39:07.616]                   ii, n), appendLF = FALSE)
[17:39:07.616]                 fit <- mandelbrot(C)
[17:39:07.616]                 delay(fit)
[17:39:07.616]                 message(" done")
[17:39:07.616]                 fit
[17:39:07.616]             }))
[17:39:07.616]             future::FutureResult(value = ...future.value$value, 
[17:39:07.616]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:07.616]                   ...future.rng), globalenv = if (FALSE) 
[17:39:07.616]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:07.616]                     ...future.globalenv.names))
[17:39:07.616]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:07.616]         }, condition = base::local({
[17:39:07.616]             c <- base::c
[17:39:07.616]             inherits <- base::inherits
[17:39:07.616]             invokeRestart <- base::invokeRestart
[17:39:07.616]             length <- base::length
[17:39:07.616]             list <- base::list
[17:39:07.616]             seq.int <- base::seq.int
[17:39:07.616]             signalCondition <- base::signalCondition
[17:39:07.616]             sys.calls <- base::sys.calls
[17:39:07.616]             `[[` <- base::`[[`
[17:39:07.616]             `+` <- base::`+`
[17:39:07.616]             `<<-` <- base::`<<-`
[17:39:07.616]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:07.616]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:07.616]                   3L)]
[17:39:07.616]             }
[17:39:07.616]             function(cond) {
[17:39:07.616]                 is_error <- inherits(cond, "error")
[17:39:07.616]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:07.616]                   NULL)
[17:39:07.616]                 if (is_error) {
[17:39:07.616]                   sessionInformation <- function() {
[17:39:07.616]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:07.616]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:07.616]                       search = base::search(), system = base::Sys.info())
[17:39:07.616]                   }
[17:39:07.616]                   ...future.conditions[[length(...future.conditions) + 
[17:39:07.616]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:07.616]                     cond$call), session = sessionInformation(), 
[17:39:07.616]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:07.616]                   signalCondition(cond)
[17:39:07.616]                 }
[17:39:07.616]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:07.616]                 "immediateCondition"))) {
[17:39:07.616]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:07.616]                   ...future.conditions[[length(...future.conditions) + 
[17:39:07.616]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:07.616]                   if (TRUE && !signal) {
[17:39:07.616]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:07.616]                     {
[17:39:07.616]                       inherits <- base::inherits
[17:39:07.616]                       invokeRestart <- base::invokeRestart
[17:39:07.616]                       is.null <- base::is.null
[17:39:07.616]                       muffled <- FALSE
[17:39:07.616]                       if (inherits(cond, "message")) {
[17:39:07.616]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:07.616]                         if (muffled) 
[17:39:07.616]                           invokeRestart("muffleMessage")
[17:39:07.616]                       }
[17:39:07.616]                       else if (inherits(cond, "warning")) {
[17:39:07.616]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:07.616]                         if (muffled) 
[17:39:07.616]                           invokeRestart("muffleWarning")
[17:39:07.616]                       }
[17:39:07.616]                       else if (inherits(cond, "condition")) {
[17:39:07.616]                         if (!is.null(pattern)) {
[17:39:07.616]                           computeRestarts <- base::computeRestarts
[17:39:07.616]                           grepl <- base::grepl
[17:39:07.616]                           restarts <- computeRestarts(cond)
[17:39:07.616]                           for (restart in restarts) {
[17:39:07.616]                             name <- restart$name
[17:39:07.616]                             if (is.null(name)) 
[17:39:07.616]                               next
[17:39:07.616]                             if (!grepl(pattern, name)) 
[17:39:07.616]                               next
[17:39:07.616]                             invokeRestart(restart)
[17:39:07.616]                             muffled <- TRUE
[17:39:07.616]                             break
[17:39:07.616]                           }
[17:39:07.616]                         }
[17:39:07.616]                       }
[17:39:07.616]                       invisible(muffled)
[17:39:07.616]                     }
[17:39:07.616]                     muffleCondition(cond, pattern = "^muffle")
[17:39:07.616]                   }
[17:39:07.616]                 }
[17:39:07.616]                 else {
[17:39:07.616]                   if (TRUE) {
[17:39:07.616]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:07.616]                     {
[17:39:07.616]                       inherits <- base::inherits
[17:39:07.616]                       invokeRestart <- base::invokeRestart
[17:39:07.616]                       is.null <- base::is.null
[17:39:07.616]                       muffled <- FALSE
[17:39:07.616]                       if (inherits(cond, "message")) {
[17:39:07.616]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:07.616]                         if (muffled) 
[17:39:07.616]                           invokeRestart("muffleMessage")
[17:39:07.616]                       }
[17:39:07.616]                       else if (inherits(cond, "warning")) {
[17:39:07.616]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:07.616]                         if (muffled) 
[17:39:07.616]                           invokeRestart("muffleWarning")
[17:39:07.616]                       }
[17:39:07.616]                       else if (inherits(cond, "condition")) {
[17:39:07.616]                         if (!is.null(pattern)) {
[17:39:07.616]                           computeRestarts <- base::computeRestarts
[17:39:07.616]                           grepl <- base::grepl
[17:39:07.616]                           restarts <- computeRestarts(cond)
[17:39:07.616]                           for (restart in restarts) {
[17:39:07.616]                             name <- restart$name
[17:39:07.616]                             if (is.null(name)) 
[17:39:07.616]                               next
[17:39:07.616]                             if (!grepl(pattern, name)) 
[17:39:07.616]                               next
[17:39:07.616]                             invokeRestart(restart)
[17:39:07.616]                             muffled <- TRUE
[17:39:07.616]                             break
[17:39:07.616]                           }
[17:39:07.616]                         }
[17:39:07.616]                       }
[17:39:07.616]                       invisible(muffled)
[17:39:07.616]                     }
[17:39:07.616]                     muffleCondition(cond, pattern = "^muffle")
[17:39:07.616]                   }
[17:39:07.616]                 }
[17:39:07.616]             }
[17:39:07.616]         }))
[17:39:07.616]     }, error = function(ex) {
[17:39:07.616]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:07.616]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:07.616]                 ...future.rng), started = ...future.startTime, 
[17:39:07.616]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:07.616]             version = "1.8"), class = "FutureResult")
[17:39:07.616]     }, finally = {
[17:39:07.616]         if (!identical(...future.workdir, getwd())) 
[17:39:07.616]             setwd(...future.workdir)
[17:39:07.616]         {
[17:39:07.616]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:07.616]                 ...future.oldOptions$nwarnings <- NULL
[17:39:07.616]             }
[17:39:07.616]             base::options(...future.oldOptions)
[17:39:07.616]             if (.Platform$OS.type == "windows") {
[17:39:07.616]                 old_names <- names(...future.oldEnvVars)
[17:39:07.616]                 envs <- base::Sys.getenv()
[17:39:07.616]                 names <- names(envs)
[17:39:07.616]                 common <- intersect(names, old_names)
[17:39:07.616]                 added <- setdiff(names, old_names)
[17:39:07.616]                 removed <- setdiff(old_names, names)
[17:39:07.616]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:07.616]                   envs[common]]
[17:39:07.616]                 NAMES <- toupper(changed)
[17:39:07.616]                 args <- list()
[17:39:07.616]                 for (kk in seq_along(NAMES)) {
[17:39:07.616]                   name <- changed[[kk]]
[17:39:07.616]                   NAME <- NAMES[[kk]]
[17:39:07.616]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:07.616]                     next
[17:39:07.616]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:07.616]                 }
[17:39:07.616]                 NAMES <- toupper(added)
[17:39:07.616]                 for (kk in seq_along(NAMES)) {
[17:39:07.616]                   name <- added[[kk]]
[17:39:07.616]                   NAME <- NAMES[[kk]]
[17:39:07.616]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:07.616]                     next
[17:39:07.616]                   args[[name]] <- ""
[17:39:07.616]                 }
[17:39:07.616]                 NAMES <- toupper(removed)
[17:39:07.616]                 for (kk in seq_along(NAMES)) {
[17:39:07.616]                   name <- removed[[kk]]
[17:39:07.616]                   NAME <- NAMES[[kk]]
[17:39:07.616]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:07.616]                     next
[17:39:07.616]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:07.616]                 }
[17:39:07.616]                 if (length(args) > 0) 
[17:39:07.616]                   base::do.call(base::Sys.setenv, args = args)
[17:39:07.616]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:07.616]             }
[17:39:07.616]             else {
[17:39:07.616]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:07.616]             }
[17:39:07.616]             {
[17:39:07.616]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:07.616]                   0L) {
[17:39:07.616]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:07.616]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:07.616]                   base::options(opts)
[17:39:07.616]                 }
[17:39:07.616]                 {
[17:39:07.616]                   {
[17:39:07.616]                     NULL
[17:39:07.616]                     RNGkind("Mersenne-Twister")
[17:39:07.616]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:07.616]                       inherits = FALSE)
[17:39:07.616]                   }
[17:39:07.616]                   options(future.plan = NULL)
[17:39:07.616]                   if (is.na(NA_character_)) 
[17:39:07.616]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:07.616]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:07.616]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:07.616]                     .init = FALSE)
[17:39:07.616]                 }
[17:39:07.616]             }
[17:39:07.616]         }
[17:39:07.616]     })
[17:39:07.616]     if (TRUE) {
[17:39:07.616]         base::sink(type = "output", split = FALSE)
[17:39:07.616]         if (TRUE) {
[17:39:07.616]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:07.616]         }
[17:39:07.616]         else {
[17:39:07.616]             ...future.result["stdout"] <- base::list(NULL)
[17:39:07.616]         }
[17:39:07.616]         base::close(...future.stdout)
[17:39:07.616]         ...future.stdout <- NULL
[17:39:07.616]     }
[17:39:07.616]     ...future.result$conditions <- ...future.conditions
[17:39:07.616]     ...future.result$finished <- base::Sys.time()
[17:39:07.616]     ...future.result
[17:39:07.616] }
[17:39:07.617] assign_globals() ...
[17:39:07.617] List of 4
[17:39:07.617]  $ ii   : int 4
[17:39:07.617]  $ n    : int 4
[17:39:07.617]  $ C    : cplx [1:25, 1:25] -0.719+0.0306i -0.719+0.0918i -0.719+0.1531i ...
[17:39:07.617]   ..- attr(*, "region")=List of 2
[17:39:07.617]   .. ..$ xrange: num [1:2] -0.719 0.75
[17:39:07.617]   .. ..$ yrange: num [1:2] 0.0306 1.5
[17:39:07.617]   ..- attr(*, "tile")= int [1:2] 2 2
[17:39:07.617]  $ delay:function (counts)  
[17:39:07.617]   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[17:39:07.617]   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x556caa4a9200> 
[17:39:07.617]  - attr(*, "where")=List of 4
[17:39:07.617]   ..$ ii   :<environment: R_EmptyEnv> 
[17:39:07.617]   ..$ n    :<environment: R_EmptyEnv> 
[17:39:07.617]   ..$ C    :<environment: R_EmptyEnv> 
[17:39:07.617]   ..$ delay:<environment: R_EmptyEnv> 
[17:39:07.617]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:39:07.617]  - attr(*, "resolved")= logi FALSE
[17:39:07.617]  - attr(*, "total_size")= num 14584
[17:39:07.617]  - attr(*, "already-done")= logi TRUE
[17:39:07.623] - copied ‘ii’ to environment
[17:39:07.623] - copied ‘n’ to environment
[17:39:07.624] - copied ‘C’ to environment
[17:39:07.624] - reassign environment for ‘delay’
[17:39:07.624] - copied ‘delay’ to environment
[17:39:07.624] assign_globals() ... done
[17:39:07.624] plan(): Setting new future strategy stack:
[17:39:07.624] List of future strategies:
[17:39:07.624] 1. sequential:
[17:39:07.624]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:07.624]    - tweaked: FALSE
[17:39:07.624]    - call: NULL
[17:39:07.625] plan(): nbrOfWorkers() = 1
[17:39:07.640] plan(): Setting new future strategy stack:
[17:39:07.640] List of future strategies:
[17:39:07.640] 1. sequential:
[17:39:07.640]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:07.640]    - tweaked: FALSE
[17:39:07.640]    - call: plan(strategy)
[17:39:07.640] plan(): nbrOfWorkers() = 1
[17:39:07.641] SequentialFuture started (and completed)
[17:39:07.641] signalConditions() ...
[17:39:07.641]  - include = ‘immediateCondition’
[17:39:07.641]  - exclude = 
[17:39:07.641]  - resignal = FALSE
[17:39:07.641]  - Number of conditions: 2
[17:39:07.641] signalConditions() ... done
[17:39:07.641] - Launch lazy future ... done
[17:39:07.641] run() for ‘SequentialFuture’ ... done
[17:39:07.641] - run() ... done
[17:39:07.642] - resolved() ...
[17:39:07.642] resolved() for ‘SequentialFuture’ ...
[17:39:07.642] - state: ‘finished’
[17:39:07.642] - run: TRUE
[17:39:07.642] - result: ‘FutureResult’
[17:39:07.642] resolved() for ‘SequentialFuture’ ... done
[17:39:07.642] - resolved: TRUE
[17:39:07.642] - resolved() ... done
[17:39:07.642] resolved() for ‘SequentialFuture’ ... done
Plotting tile #4 of 4 ...
[17:39:07.643] signalConditions() ...
[17:39:07.643]  - include = ‘immediateCondition’
[17:39:07.643]  - exclude = 
[17:39:07.643]  - resignal = FALSE
[17:39:07.643]  - Number of conditions: 2
[17:39:07.643] signalConditions() ... done
[17:39:07.643] Future state: ‘finished’
[17:39:07.643] signalConditions() ...
[17:39:07.643]  - include = ‘condition’
[17:39:07.643]  - exclude = ‘immediateCondition’
[17:39:07.643]  - resignal = TRUE
[17:39:07.644]  - Number of conditions: 2
[17:39:07.644]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #4 of 4 ...[17:39:07.644]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[17:39:07.644] signalConditions() ... done

> close.screen()
[1] 1 2 3 4

> message("SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).\n")
SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).

- plan('sequential') ... DONE
Testing with 1 cores ... DONE
Testing with 2 cores ...
- plan('multicore') ...
[17:39:07.650] plan(): Setting new future strategy stack:
[17:39:07.650] List of future strategies:
[17:39:07.650] 1. multicore:
[17:39:07.650]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:39:07.650]    - tweaked: FALSE
[17:39:07.650]    - call: plan(strategy)
[17:39:07.654] plan(): nbrOfWorkers() = 2


	demo(mandelbrot)
	---- ~~~~~~~~~~

> library("future")

> library("graphics")

> plot_what_is_done <- function(counts) {
+   for (kk in seq_along(counts)) {
+     f <- counts[[kk]]
+ 
+     ## Already plotted?
+     if (!inherits(f, "Future")) next
+ 
+     ## Not resolved?
+     if (!resolved(f)) next
+ 
+     message(sprintf("Plotting tile #%d of %d ...", kk, n))
+     counts[[kk]] <- value(f)
+     screen(kk)
+     plot(counts[[kk]])
+   }
+ 
+   counts
+ }

> ## Options
> region <- getOption("future.demo.mandelbrot.region", 1L)

> if (!is.list(region)) {
+   if (region == 1L) {
+     region <- list(xmid = -0.75, ymid = 0.0, side = 3.0)
+   } else if (region == 2L) {
+     region <- list(xmid = 0.283, ymid = -0.0095, side = 0.00026)
+   } else if (region == 3L) {
+     region <- list(xmid = 0.282989, ymid = -0.01, side = 3e-8)
+   }
+ }

> nrow <- getOption("future.demo.mandelbrot.nrow", 3L)

> resolution <- getOption("future.demo.mandelbrot.resolution", 400L)

> delay <- getOption("future.demo.mandelbrot.delay", interactive())

> if (isTRUE(delay)) {
+   delay <- function(counts) Sys.sleep(1.0)
+ } else if (!is.function(delay)) {
+   delay <- function(counts) {}
+ }

> ## Generate Mandelbrot tiles to be computed
> Cs <- mandelbrot_tiles(xmid = region$xmid, ymid = region$ymid,
+                        side = region$side, nrow = nrow,
+                        resolution = resolution)

> if (interactive()) {
+   dev.new()
+   plot.new()
+   split.screen(dim(Cs))
+   for (ii in seq_along(Cs)) {
+     screen(ii)
+     par(mar = c(0, 0, 0, 0))
+     text(x = 1 / 2, y = 1 / 2, sprintf("Future #%d\nunresolved", ii), cex = 2)
+   }
+ } else {
+   split.screen(dim(Cs))
+ }
[1] 5 6 7 8

> ## Create all Mandelbrot tiles via lazy futures
> n <- length(Cs)

> message(sprintf("Creating %d Mandelbrot tiles:", n), appendLF = FALSE)
Creating 4 Mandelbrot tiles:
> counts <- lapply(seq_along(Cs), FUN=function(ii) {
+   message(" ", ii, appendLF = FALSE)
+   C <- Cs[[ii]]
+   future({
+     message(sprintf("Calculating tile #%d of %d ...", ii, n), appendLF = FALSE)
+     fit <- mandelbrot(C)
+ 
+     ## Emulate slowness
+     delay(fit)
+ 
+     message(" done")
+     fit
+   }, lazy = TRUE)
+ })
 1[17:39:07.658] getGlobalsAndPackages() ...
[17:39:07.658] Searching for globals...
[17:39:07.664] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[17:39:07.664] Searching for globals ... DONE
[17:39:07.664] Resolving globals: FALSE
[17:39:07.665] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[17:39:07.665] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[17:39:07.666] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[17:39:07.666] - packages: [1] ‘future’
[17:39:07.666] getGlobalsAndPackages() ... DONE
 2[17:39:07.670] getGlobalsAndPackages() ...
[17:39:07.670] Searching for globals...
[17:39:07.673] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[17:39:07.673] Searching for globals ... DONE
[17:39:07.673] Resolving globals: FALSE
[17:39:07.674] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[17:39:07.674] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[17:39:07.674] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[17:39:07.674] - packages: [1] ‘future’
[17:39:07.675] getGlobalsAndPackages() ... DONE
 3[17:39:07.675] getGlobalsAndPackages() ...
[17:39:07.675] Searching for globals...
[17:39:07.678] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[17:39:07.678] Searching for globals ... DONE
[17:39:07.679] Resolving globals: FALSE
[17:39:07.679] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[17:39:07.679] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[17:39:07.680] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[17:39:07.680] - packages: [1] ‘future’
[17:39:07.680] getGlobalsAndPackages() ... DONE
 4[17:39:07.680] getGlobalsAndPackages() ...
[17:39:07.680] Searching for globals...
[17:39:07.684] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[17:39:07.684] Searching for globals ... DONE
[17:39:07.684] Resolving globals: FALSE
[17:39:07.684] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[17:39:07.685] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[17:39:07.685] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[17:39:07.685] - packages: [1] ‘future’
[17:39:07.685] getGlobalsAndPackages() ... DONE

> message(".")
.

> ## Calculate and plot tiles
> repeat {
+   counts <- plot_what_is_done(counts)
+   if (!any(sapply(counts, FUN = inherits, "Future"))) break
+ }
[17:39:07.694] resolved() for ‘Future’ ...
[17:39:07.694] - state: ‘created’
[17:39:07.694] - run: TRUE
[17:39:07.694] - run() ...
[17:39:07.695] run() for ‘Future’ ...
[17:39:07.695] - state: ‘created’
[17:39:07.695] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:39:07.699] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:07.699] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:39:07.699]   - Field: ‘label’
[17:39:07.699]   - Field: ‘local’
[17:39:07.699]   - Field: ‘owner’
[17:39:07.699]   - Field: ‘envir’
[17:39:07.699]   - Field: ‘workers’
[17:39:07.699]   - Field: ‘packages’
[17:39:07.700]   - Field: ‘gc’
[17:39:07.700]   - Field: ‘job’
[17:39:07.700]   - Field: ‘conditions’
[17:39:07.700]   - Field: ‘expr’
[17:39:07.700]   - Field: ‘uuid’
[17:39:07.700]   - Field: ‘seed’
[17:39:07.700]   - Field: ‘version’
[17:39:07.700]   - Field: ‘result’
[17:39:07.700]   - Field: ‘asynchronous’
[17:39:07.700]   - Field: ‘calls’
[17:39:07.701]   - Field: ‘globals’
[17:39:07.701]   - Field: ‘stdout’
[17:39:07.701]   - Field: ‘earlySignal’
[17:39:07.701]   - Field: ‘lazy’
[17:39:07.701]   - Field: ‘state’
[17:39:07.701] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:39:07.701] - Launch lazy future ...
[17:39:07.702] Packages needed by the future expression (n = 1): ‘future’
[17:39:07.702] Packages needed by future strategies (n = 0): <none>
[17:39:07.703] {
[17:39:07.703]     {
[17:39:07.703]         {
[17:39:07.703]             ...future.startTime <- base::Sys.time()
[17:39:07.703]             {
[17:39:07.703]                 {
[17:39:07.703]                   {
[17:39:07.703]                     {
[17:39:07.703]                       {
[17:39:07.703]                         base::local({
[17:39:07.703]                           has_future <- base::requireNamespace("future", 
[17:39:07.703]                             quietly = TRUE)
[17:39:07.703]                           if (has_future) {
[17:39:07.703]                             ns <- base::getNamespace("future")
[17:39:07.703]                             version <- ns[[".package"]][["version"]]
[17:39:07.703]                             if (is.null(version)) 
[17:39:07.703]                               version <- utils::packageVersion("future")
[17:39:07.703]                           }
[17:39:07.703]                           else {
[17:39:07.703]                             version <- NULL
[17:39:07.703]                           }
[17:39:07.703]                           if (!has_future || version < "1.8.0") {
[17:39:07.703]                             info <- base::c(r_version = base::gsub("R version ", 
[17:39:07.703]                               "", base::R.version$version.string), 
[17:39:07.703]                               platform = base::sprintf("%s (%s-bit)", 
[17:39:07.703]                                 base::R.version$platform, 8 * 
[17:39:07.703]                                   base::.Machine$sizeof.pointer), 
[17:39:07.703]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:07.703]                                 "release", "version")], collapse = " "), 
[17:39:07.703]                               hostname = base::Sys.info()[["nodename"]])
[17:39:07.703]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:39:07.703]                               info)
[17:39:07.703]                             info <- base::paste(info, collapse = "; ")
[17:39:07.703]                             if (!has_future) {
[17:39:07.703]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:07.703]                                 info)
[17:39:07.703]                             }
[17:39:07.703]                             else {
[17:39:07.703]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:07.703]                                 info, version)
[17:39:07.703]                             }
[17:39:07.703]                             base::stop(msg)
[17:39:07.703]                           }
[17:39:07.703]                         })
[17:39:07.703]                       }
[17:39:07.703]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:07.703]                       base::options(mc.cores = 1L)
[17:39:07.703]                     }
[17:39:07.703]                     base::local({
[17:39:07.703]                       for (pkg in "future") {
[17:39:07.703]                         base::loadNamespace(pkg)
[17:39:07.703]                         base::library(pkg, character.only = TRUE)
[17:39:07.703]                       }
[17:39:07.703]                     })
[17:39:07.703]                   }
[17:39:07.703]                   ...future.strategy.old <- future::plan("list")
[17:39:07.703]                   options(future.plan = NULL)
[17:39:07.703]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:07.703]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:07.703]                 }
[17:39:07.703]                 ...future.workdir <- getwd()
[17:39:07.703]             }
[17:39:07.703]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:07.703]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:07.703]         }
[17:39:07.703]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:07.703]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:07.703]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:07.703]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:07.703]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:07.703]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:07.703]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:07.703]             base::names(...future.oldOptions))
[17:39:07.703]     }
[17:39:07.703]     if (FALSE) {
[17:39:07.703]     }
[17:39:07.703]     else {
[17:39:07.703]         if (TRUE) {
[17:39:07.703]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:07.703]                 open = "w")
[17:39:07.703]         }
[17:39:07.703]         else {
[17:39:07.703]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:07.703]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:07.703]         }
[17:39:07.703]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:07.703]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:07.703]             base::sink(type = "output", split = FALSE)
[17:39:07.703]             base::close(...future.stdout)
[17:39:07.703]         }, add = TRUE)
[17:39:07.703]     }
[17:39:07.703]     ...future.frame <- base::sys.nframe()
[17:39:07.703]     ...future.conditions <- base::list()
[17:39:07.703]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:07.703]     if (FALSE) {
[17:39:07.703]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:07.703]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:07.703]     }
[17:39:07.703]     ...future.result <- base::tryCatch({
[17:39:07.703]         base::withCallingHandlers({
[17:39:07.703]             ...future.value <- base::withVisible(base::local({
[17:39:07.703]                 withCallingHandlers({
[17:39:07.703]                   {
[17:39:07.703]                     message(sprintf("Calculating tile #%d of %d ...", 
[17:39:07.703]                       ii, n), appendLF = FALSE)
[17:39:07.703]                     fit <- mandelbrot(C)
[17:39:07.703]                     delay(fit)
[17:39:07.703]                     message(" done")
[17:39:07.703]                     fit
[17:39:07.703]                   }
[17:39:07.703]                 }, immediateCondition = function(cond) {
[17:39:07.703]                   save_rds <- function (object, pathname, ...) 
[17:39:07.703]                   {
[17:39:07.703]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:39:07.703]                     if (file_test("-f", pathname_tmp)) {
[17:39:07.703]                       fi_tmp <- file.info(pathname_tmp)
[17:39:07.703]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:39:07.703]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:07.703]                         fi_tmp[["mtime"]])
[17:39:07.703]                     }
[17:39:07.703]                     tryCatch({
[17:39:07.703]                       saveRDS(object, file = pathname_tmp, ...)
[17:39:07.703]                     }, error = function(ex) {
[17:39:07.703]                       msg <- conditionMessage(ex)
[17:39:07.703]                       fi_tmp <- file.info(pathname_tmp)
[17:39:07.703]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:39:07.703]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:07.703]                         fi_tmp[["mtime"]], msg)
[17:39:07.703]                       ex$message <- msg
[17:39:07.703]                       stop(ex)
[17:39:07.703]                     })
[17:39:07.703]                     stopifnot(file_test("-f", pathname_tmp))
[17:39:07.703]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:39:07.703]                     if (!res || file_test("-f", pathname_tmp)) {
[17:39:07.703]                       fi_tmp <- file.info(pathname_tmp)
[17:39:07.703]                       fi <- file.info(pathname)
[17:39:07.703]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:39:07.703]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:07.703]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:39:07.703]                         fi[["size"]], fi[["mtime"]])
[17:39:07.703]                       stop(msg)
[17:39:07.703]                     }
[17:39:07.703]                     invisible(pathname)
[17:39:07.703]                   }
[17:39:07.703]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:39:07.703]                     rootPath = tempdir()) 
[17:39:07.703]                   {
[17:39:07.703]                     obj <- list(time = Sys.time(), condition = cond)
[17:39:07.703]                     file <- tempfile(pattern = class(cond)[1], 
[17:39:07.703]                       tmpdir = path, fileext = ".rds")
[17:39:07.703]                     save_rds(obj, file)
[17:39:07.703]                   }
[17:39:07.703]                   saveImmediateCondition(cond, path = "/tmp/Rtmp6QNjz1/.future/immediateConditions")
[17:39:07.703]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:07.703]                   {
[17:39:07.703]                     inherits <- base::inherits
[17:39:07.703]                     invokeRestart <- base::invokeRestart
[17:39:07.703]                     is.null <- base::is.null
[17:39:07.703]                     muffled <- FALSE
[17:39:07.703]                     if (inherits(cond, "message")) {
[17:39:07.703]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:07.703]                       if (muffled) 
[17:39:07.703]                         invokeRestart("muffleMessage")
[17:39:07.703]                     }
[17:39:07.703]                     else if (inherits(cond, "warning")) {
[17:39:07.703]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:07.703]                       if (muffled) 
[17:39:07.703]                         invokeRestart("muffleWarning")
[17:39:07.703]                     }
[17:39:07.703]                     else if (inherits(cond, "condition")) {
[17:39:07.703]                       if (!is.null(pattern)) {
[17:39:07.703]                         computeRestarts <- base::computeRestarts
[17:39:07.703]                         grepl <- base::grepl
[17:39:07.703]                         restarts <- computeRestarts(cond)
[17:39:07.703]                         for (restart in restarts) {
[17:39:07.703]                           name <- restart$name
[17:39:07.703]                           if (is.null(name)) 
[17:39:07.703]                             next
[17:39:07.703]                           if (!grepl(pattern, name)) 
[17:39:07.703]                             next
[17:39:07.703]                           invokeRestart(restart)
[17:39:07.703]                           muffled <- TRUE
[17:39:07.703]                           break
[17:39:07.703]                         }
[17:39:07.703]                       }
[17:39:07.703]                     }
[17:39:07.703]                     invisible(muffled)
[17:39:07.703]                   }
[17:39:07.703]                   muffleCondition(cond)
[17:39:07.703]                 })
[17:39:07.703]             }))
[17:39:07.703]             future::FutureResult(value = ...future.value$value, 
[17:39:07.703]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:07.703]                   ...future.rng), globalenv = if (FALSE) 
[17:39:07.703]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:07.703]                     ...future.globalenv.names))
[17:39:07.703]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:07.703]         }, condition = base::local({
[17:39:07.703]             c <- base::c
[17:39:07.703]             inherits <- base::inherits
[17:39:07.703]             invokeRestart <- base::invokeRestart
[17:39:07.703]             length <- base::length
[17:39:07.703]             list <- base::list
[17:39:07.703]             seq.int <- base::seq.int
[17:39:07.703]             signalCondition <- base::signalCondition
[17:39:07.703]             sys.calls <- base::sys.calls
[17:39:07.703]             `[[` <- base::`[[`
[17:39:07.703]             `+` <- base::`+`
[17:39:07.703]             `<<-` <- base::`<<-`
[17:39:07.703]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:07.703]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:07.703]                   3L)]
[17:39:07.703]             }
[17:39:07.703]             function(cond) {
[17:39:07.703]                 is_error <- inherits(cond, "error")
[17:39:07.703]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:07.703]                   NULL)
[17:39:07.703]                 if (is_error) {
[17:39:07.703]                   sessionInformation <- function() {
[17:39:07.703]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:07.703]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:07.703]                       search = base::search(), system = base::Sys.info())
[17:39:07.703]                   }
[17:39:07.703]                   ...future.conditions[[length(...future.conditions) + 
[17:39:07.703]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:07.703]                     cond$call), session = sessionInformation(), 
[17:39:07.703]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:07.703]                   signalCondition(cond)
[17:39:07.703]                 }
[17:39:07.703]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:07.703]                 "immediateCondition"))) {
[17:39:07.703]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:07.703]                   ...future.conditions[[length(...future.conditions) + 
[17:39:07.703]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:07.703]                   if (TRUE && !signal) {
[17:39:07.703]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:07.703]                     {
[17:39:07.703]                       inherits <- base::inherits
[17:39:07.703]                       invokeRestart <- base::invokeRestart
[17:39:07.703]                       is.null <- base::is.null
[17:39:07.703]                       muffled <- FALSE
[17:39:07.703]                       if (inherits(cond, "message")) {
[17:39:07.703]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:07.703]                         if (muffled) 
[17:39:07.703]                           invokeRestart("muffleMessage")
[17:39:07.703]                       }
[17:39:07.703]                       else if (inherits(cond, "warning")) {
[17:39:07.703]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:07.703]                         if (muffled) 
[17:39:07.703]                           invokeRestart("muffleWarning")
[17:39:07.703]                       }
[17:39:07.703]                       else if (inherits(cond, "condition")) {
[17:39:07.703]                         if (!is.null(pattern)) {
[17:39:07.703]                           computeRestarts <- base::computeRestarts
[17:39:07.703]                           grepl <- base::grepl
[17:39:07.703]                           restarts <- computeRestarts(cond)
[17:39:07.703]                           for (restart in restarts) {
[17:39:07.703]                             name <- restart$name
[17:39:07.703]                             if (is.null(name)) 
[17:39:07.703]                               next
[17:39:07.703]                             if (!grepl(pattern, name)) 
[17:39:07.703]                               next
[17:39:07.703]                             invokeRestart(restart)
[17:39:07.703]                             muffled <- TRUE
[17:39:07.703]                             break
[17:39:07.703]                           }
[17:39:07.703]                         }
[17:39:07.703]                       }
[17:39:07.703]                       invisible(muffled)
[17:39:07.703]                     }
[17:39:07.703]                     muffleCondition(cond, pattern = "^muffle")
[17:39:07.703]                   }
[17:39:07.703]                 }
[17:39:07.703]                 else {
[17:39:07.703]                   if (TRUE) {
[17:39:07.703]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:07.703]                     {
[17:39:07.703]                       inherits <- base::inherits
[17:39:07.703]                       invokeRestart <- base::invokeRestart
[17:39:07.703]                       is.null <- base::is.null
[17:39:07.703]                       muffled <- FALSE
[17:39:07.703]                       if (inherits(cond, "message")) {
[17:39:07.703]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:07.703]                         if (muffled) 
[17:39:07.703]                           invokeRestart("muffleMessage")
[17:39:07.703]                       }
[17:39:07.703]                       else if (inherits(cond, "warning")) {
[17:39:07.703]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:07.703]                         if (muffled) 
[17:39:07.703]                           invokeRestart("muffleWarning")
[17:39:07.703]                       }
[17:39:07.703]                       else if (inherits(cond, "condition")) {
[17:39:07.703]                         if (!is.null(pattern)) {
[17:39:07.703]                           computeRestarts <- base::computeRestarts
[17:39:07.703]                           grepl <- base::grepl
[17:39:07.703]                           restarts <- computeRestarts(cond)
[17:39:07.703]                           for (restart in restarts) {
[17:39:07.703]                             name <- restart$name
[17:39:07.703]                             if (is.null(name)) 
[17:39:07.703]                               next
[17:39:07.703]                             if (!grepl(pattern, name)) 
[17:39:07.703]                               next
[17:39:07.703]                             invokeRestart(restart)
[17:39:07.703]                             muffled <- TRUE
[17:39:07.703]                             break
[17:39:07.703]                           }
[17:39:07.703]                         }
[17:39:07.703]                       }
[17:39:07.703]                       invisible(muffled)
[17:39:07.703]                     }
[17:39:07.703]                     muffleCondition(cond, pattern = "^muffle")
[17:39:07.703]                   }
[17:39:07.703]                 }
[17:39:07.703]             }
[17:39:07.703]         }))
[17:39:07.703]     }, error = function(ex) {
[17:39:07.703]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:07.703]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:07.703]                 ...future.rng), started = ...future.startTime, 
[17:39:07.703]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:07.703]             version = "1.8"), class = "FutureResult")
[17:39:07.703]     }, finally = {
[17:39:07.703]         if (!identical(...future.workdir, getwd())) 
[17:39:07.703]             setwd(...future.workdir)
[17:39:07.703]         {
[17:39:07.703]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:07.703]                 ...future.oldOptions$nwarnings <- NULL
[17:39:07.703]             }
[17:39:07.703]             base::options(...future.oldOptions)
[17:39:07.703]             if (.Platform$OS.type == "windows") {
[17:39:07.703]                 old_names <- names(...future.oldEnvVars)
[17:39:07.703]                 envs <- base::Sys.getenv()
[17:39:07.703]                 names <- names(envs)
[17:39:07.703]                 common <- intersect(names, old_names)
[17:39:07.703]                 added <- setdiff(names, old_names)
[17:39:07.703]                 removed <- setdiff(old_names, names)
[17:39:07.703]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:07.703]                   envs[common]]
[17:39:07.703]                 NAMES <- toupper(changed)
[17:39:07.703]                 args <- list()
[17:39:07.703]                 for (kk in seq_along(NAMES)) {
[17:39:07.703]                   name <- changed[[kk]]
[17:39:07.703]                   NAME <- NAMES[[kk]]
[17:39:07.703]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:07.703]                     next
[17:39:07.703]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:07.703]                 }
[17:39:07.703]                 NAMES <- toupper(added)
[17:39:07.703]                 for (kk in seq_along(NAMES)) {
[17:39:07.703]                   name <- added[[kk]]
[17:39:07.703]                   NAME <- NAMES[[kk]]
[17:39:07.703]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:07.703]                     next
[17:39:07.703]                   args[[name]] <- ""
[17:39:07.703]                 }
[17:39:07.703]                 NAMES <- toupper(removed)
[17:39:07.703]                 for (kk in seq_along(NAMES)) {
[17:39:07.703]                   name <- removed[[kk]]
[17:39:07.703]                   NAME <- NAMES[[kk]]
[17:39:07.703]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:07.703]                     next
[17:39:07.703]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:07.703]                 }
[17:39:07.703]                 if (length(args) > 0) 
[17:39:07.703]                   base::do.call(base::Sys.setenv, args = args)
[17:39:07.703]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:07.703]             }
[17:39:07.703]             else {
[17:39:07.703]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:07.703]             }
[17:39:07.703]             {
[17:39:07.703]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:07.703]                   0L) {
[17:39:07.703]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:07.703]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:07.703]                   base::options(opts)
[17:39:07.703]                 }
[17:39:07.703]                 {
[17:39:07.703]                   {
[17:39:07.703]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:07.703]                     NULL
[17:39:07.703]                   }
[17:39:07.703]                   options(future.plan = NULL)
[17:39:07.703]                   if (is.na(NA_character_)) 
[17:39:07.703]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:07.703]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:07.703]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:07.703]                     .init = FALSE)
[17:39:07.703]                 }
[17:39:07.703]             }
[17:39:07.703]         }
[17:39:07.703]     })
[17:39:07.703]     if (TRUE) {
[17:39:07.703]         base::sink(type = "output", split = FALSE)
[17:39:07.703]         if (TRUE) {
[17:39:07.703]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:07.703]         }
[17:39:07.703]         else {
[17:39:07.703]             ...future.result["stdout"] <- base::list(NULL)
[17:39:07.703]         }
[17:39:07.703]         base::close(...future.stdout)
[17:39:07.703]         ...future.stdout <- NULL
[17:39:07.703]     }
[17:39:07.703]     ...future.result$conditions <- ...future.conditions
[17:39:07.703]     ...future.result$finished <- base::Sys.time()
[17:39:07.703]     ...future.result
[17:39:07.703] }
[17:39:07.705] assign_globals() ...
[17:39:07.705] List of 4
[17:39:07.705]  $ ii   : int 1
[17:39:07.705]  $ n    : int 4
[17:39:07.705]  $ C    : cplx [1:25, 1:25] -2.25-1.5i -2.25-1.44i -2.25-1.38i ...
[17:39:07.705]   ..- attr(*, "region")=List of 2
[17:39:07.705]   .. ..$ xrange: num [1:2] -2.25 -0.781
[17:39:07.705]   .. ..$ yrange: num [1:2] -1.5 -0.0306
[17:39:07.705]   ..- attr(*, "tile")= int [1:2] 1 1
[17:39:07.705]  $ delay:function (counts)  
[17:39:07.705]   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[17:39:07.705]   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x556cabc61798> 
[17:39:07.705]  - attr(*, "where")=List of 4
[17:39:07.705]   ..$ ii   :<environment: R_EmptyEnv> 
[17:39:07.705]   ..$ n    :<environment: R_EmptyEnv> 
[17:39:07.705]   ..$ C    :<environment: R_EmptyEnv> 
[17:39:07.705]   ..$ delay:<environment: R_EmptyEnv> 
[17:39:07.705]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:39:07.705]  - attr(*, "resolved")= logi FALSE
[17:39:07.705]  - attr(*, "total_size")= num 14584
[17:39:07.705]  - attr(*, "already-done")= logi TRUE
[17:39:07.712] - copied ‘ii’ to environment
[17:39:07.712] - copied ‘n’ to environment
[17:39:07.712] - copied ‘C’ to environment
[17:39:07.712] - reassign environment for ‘delay’
[17:39:07.712] - copied ‘delay’ to environment
[17:39:07.712] assign_globals() ... done
[17:39:07.712] requestCore(): workers = 2
[17:39:07.716] MulticoreFuture started
[17:39:07.716] - Launch lazy future ... done
[17:39:07.716] run() for ‘MulticoreFuture’ ... done
[17:39:07.717] - run() ... done
[17:39:07.717] - resolved() ...
[17:39:07.717] plan(): Setting new future strategy stack:
[17:39:07.717] List of future strategies:
[17:39:07.717] 1. sequential:
[17:39:07.717]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:07.717]    - tweaked: FALSE
[17:39:07.717]    - call: NULL
[17:39:07.718] plan(): nbrOfWorkers() = 1
[17:39:07.721] plan(): Setting new future strategy stack:
[17:39:07.721] List of future strategies:
[17:39:07.721] 1. multicore:
[17:39:07.721]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:39:07.721]    - tweaked: FALSE
[17:39:07.721]    - call: plan(strategy)
[17:39:07.727] plan(): nbrOfWorkers() = 2
[17:39:07.728] - resolved: TRUE
[17:39:07.728] - resolved() ... done
[17:39:07.728] resolved() for ‘MulticoreFuture’ ... done
Plotting tile #1 of 4 ...
[17:39:07.729] result() for MulticoreFuture ...
[17:39:07.734] result() for MulticoreFuture ...
[17:39:07.735] result() for MulticoreFuture ... done
[17:39:07.735] signalConditions() ...
[17:39:07.735]  - include = ‘immediateCondition’
[17:39:07.735]  - exclude = 
[17:39:07.735]  - resignal = FALSE
[17:39:07.735]  - Number of conditions: 2
[17:39:07.735] signalConditions() ... done
[17:39:07.735] result() for MulticoreFuture ... done
[17:39:07.736] result() for MulticoreFuture ...
[17:39:07.736] result() for MulticoreFuture ... done
[17:39:07.736] signalConditions() ...
[17:39:07.736]  - include = ‘immediateCondition’
[17:39:07.736]  - exclude = 
[17:39:07.736]  - resignal = FALSE
[17:39:07.736]  - Number of conditions: 2
[17:39:07.736] signalConditions() ... done
[17:39:07.736] Future state: ‘finished’
[17:39:07.737] result() for MulticoreFuture ...
[17:39:07.737] result() for MulticoreFuture ... done
[17:39:07.737] signalConditions() ...
[17:39:07.737]  - include = ‘condition’
[17:39:07.737]  - exclude = ‘immediateCondition’
[17:39:07.737]  - resignal = TRUE
[17:39:07.737]  - Number of conditions: 2
[17:39:07.737]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #1 of 4 ...[17:39:07.738]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[17:39:07.738] signalConditions() ... done
[17:39:07.739] resolved() for ‘Future’ ...
[17:39:07.739] - state: ‘created’
[17:39:07.739] - run: TRUE
[17:39:07.739] - run() ...
[17:39:07.739] run() for ‘Future’ ...
[17:39:07.739] - state: ‘created’
[17:39:07.739] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:39:07.744] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:07.744] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:39:07.744]   - Field: ‘label’
[17:39:07.744]   - Field: ‘local’
[17:39:07.744]   - Field: ‘owner’
[17:39:07.745]   - Field: ‘envir’
[17:39:07.745]   - Field: ‘workers’
[17:39:07.745]   - Field: ‘packages’
[17:39:07.745]   - Field: ‘gc’
[17:39:07.745]   - Field: ‘job’
[17:39:07.745]   - Field: ‘conditions’
[17:39:07.745]   - Field: ‘expr’
[17:39:07.745]   - Field: ‘uuid’
[17:39:07.746]   - Field: ‘seed’
[17:39:07.746]   - Field: ‘version’
[17:39:07.746]   - Field: ‘result’
[17:39:07.746]   - Field: ‘asynchronous’
[17:39:07.746]   - Field: ‘calls’
[17:39:07.746]   - Field: ‘globals’
[17:39:07.746]   - Field: ‘stdout’
[17:39:07.746]   - Field: ‘earlySignal’
[17:39:07.746]   - Field: ‘lazy’
[17:39:07.747]   - Field: ‘state’
[17:39:07.747] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:39:07.747] - Launch lazy future ...
[17:39:07.747] Packages needed by the future expression (n = 1): ‘future’
[17:39:07.747] Packages needed by future strategies (n = 0): <none>
[17:39:07.748] {
[17:39:07.748]     {
[17:39:07.748]         {
[17:39:07.748]             ...future.startTime <- base::Sys.time()
[17:39:07.748]             {
[17:39:07.748]                 {
[17:39:07.748]                   {
[17:39:07.748]                     {
[17:39:07.748]                       {
[17:39:07.748]                         base::local({
[17:39:07.748]                           has_future <- base::requireNamespace("future", 
[17:39:07.748]                             quietly = TRUE)
[17:39:07.748]                           if (has_future) {
[17:39:07.748]                             ns <- base::getNamespace("future")
[17:39:07.748]                             version <- ns[[".package"]][["version"]]
[17:39:07.748]                             if (is.null(version)) 
[17:39:07.748]                               version <- utils::packageVersion("future")
[17:39:07.748]                           }
[17:39:07.748]                           else {
[17:39:07.748]                             version <- NULL
[17:39:07.748]                           }
[17:39:07.748]                           if (!has_future || version < "1.8.0") {
[17:39:07.748]                             info <- base::c(r_version = base::gsub("R version ", 
[17:39:07.748]                               "", base::R.version$version.string), 
[17:39:07.748]                               platform = base::sprintf("%s (%s-bit)", 
[17:39:07.748]                                 base::R.version$platform, 8 * 
[17:39:07.748]                                   base::.Machine$sizeof.pointer), 
[17:39:07.748]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:07.748]                                 "release", "version")], collapse = " "), 
[17:39:07.748]                               hostname = base::Sys.info()[["nodename"]])
[17:39:07.748]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:39:07.748]                               info)
[17:39:07.748]                             info <- base::paste(info, collapse = "; ")
[17:39:07.748]                             if (!has_future) {
[17:39:07.748]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:07.748]                                 info)
[17:39:07.748]                             }
[17:39:07.748]                             else {
[17:39:07.748]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:07.748]                                 info, version)
[17:39:07.748]                             }
[17:39:07.748]                             base::stop(msg)
[17:39:07.748]                           }
[17:39:07.748]                         })
[17:39:07.748]                       }
[17:39:07.748]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:07.748]                       base::options(mc.cores = 1L)
[17:39:07.748]                     }
[17:39:07.748]                     base::local({
[17:39:07.748]                       for (pkg in "future") {
[17:39:07.748]                         base::loadNamespace(pkg)
[17:39:07.748]                         base::library(pkg, character.only = TRUE)
[17:39:07.748]                       }
[17:39:07.748]                     })
[17:39:07.748]                   }
[17:39:07.748]                   ...future.strategy.old <- future::plan("list")
[17:39:07.748]                   options(future.plan = NULL)
[17:39:07.748]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:07.748]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:07.748]                 }
[17:39:07.748]                 ...future.workdir <- getwd()
[17:39:07.748]             }
[17:39:07.748]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:07.748]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:07.748]         }
[17:39:07.748]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:07.748]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:07.748]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:07.748]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:07.748]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:07.748]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:07.748]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:07.748]             base::names(...future.oldOptions))
[17:39:07.748]     }
[17:39:07.748]     if (FALSE) {
[17:39:07.748]     }
[17:39:07.748]     else {
[17:39:07.748]         if (TRUE) {
[17:39:07.748]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:07.748]                 open = "w")
[17:39:07.748]         }
[17:39:07.748]         else {
[17:39:07.748]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:07.748]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:07.748]         }
[17:39:07.748]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:07.748]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:07.748]             base::sink(type = "output", split = FALSE)
[17:39:07.748]             base::close(...future.stdout)
[17:39:07.748]         }, add = TRUE)
[17:39:07.748]     }
[17:39:07.748]     ...future.frame <- base::sys.nframe()
[17:39:07.748]     ...future.conditions <- base::list()
[17:39:07.748]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:07.748]     if (FALSE) {
[17:39:07.748]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:07.748]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:07.748]     }
[17:39:07.748]     ...future.result <- base::tryCatch({
[17:39:07.748]         base::withCallingHandlers({
[17:39:07.748]             ...future.value <- base::withVisible(base::local({
[17:39:07.748]                 withCallingHandlers({
[17:39:07.748]                   {
[17:39:07.748]                     message(sprintf("Calculating tile #%d of %d ...", 
[17:39:07.748]                       ii, n), appendLF = FALSE)
[17:39:07.748]                     fit <- mandelbrot(C)
[17:39:07.748]                     delay(fit)
[17:39:07.748]                     message(" done")
[17:39:07.748]                     fit
[17:39:07.748]                   }
[17:39:07.748]                 }, immediateCondition = function(cond) {
[17:39:07.748]                   save_rds <- function (object, pathname, ...) 
[17:39:07.748]                   {
[17:39:07.748]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:39:07.748]                     if (file_test("-f", pathname_tmp)) {
[17:39:07.748]                       fi_tmp <- file.info(pathname_tmp)
[17:39:07.748]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:39:07.748]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:07.748]                         fi_tmp[["mtime"]])
[17:39:07.748]                     }
[17:39:07.748]                     tryCatch({
[17:39:07.748]                       saveRDS(object, file = pathname_tmp, ...)
[17:39:07.748]                     }, error = function(ex) {
[17:39:07.748]                       msg <- conditionMessage(ex)
[17:39:07.748]                       fi_tmp <- file.info(pathname_tmp)
[17:39:07.748]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:39:07.748]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:07.748]                         fi_tmp[["mtime"]], msg)
[17:39:07.748]                       ex$message <- msg
[17:39:07.748]                       stop(ex)
[17:39:07.748]                     })
[17:39:07.748]                     stopifnot(file_test("-f", pathname_tmp))
[17:39:07.748]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:39:07.748]                     if (!res || file_test("-f", pathname_tmp)) {
[17:39:07.748]                       fi_tmp <- file.info(pathname_tmp)
[17:39:07.748]                       fi <- file.info(pathname)
[17:39:07.748]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:39:07.748]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:07.748]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:39:07.748]                         fi[["size"]], fi[["mtime"]])
[17:39:07.748]                       stop(msg)
[17:39:07.748]                     }
[17:39:07.748]                     invisible(pathname)
[17:39:07.748]                   }
[17:39:07.748]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:39:07.748]                     rootPath = tempdir()) 
[17:39:07.748]                   {
[17:39:07.748]                     obj <- list(time = Sys.time(), condition = cond)
[17:39:07.748]                     file <- tempfile(pattern = class(cond)[1], 
[17:39:07.748]                       tmpdir = path, fileext = ".rds")
[17:39:07.748]                     save_rds(obj, file)
[17:39:07.748]                   }
[17:39:07.748]                   saveImmediateCondition(cond, path = "/tmp/Rtmp6QNjz1/.future/immediateConditions")
[17:39:07.748]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:07.748]                   {
[17:39:07.748]                     inherits <- base::inherits
[17:39:07.748]                     invokeRestart <- base::invokeRestart
[17:39:07.748]                     is.null <- base::is.null
[17:39:07.748]                     muffled <- FALSE
[17:39:07.748]                     if (inherits(cond, "message")) {
[17:39:07.748]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:07.748]                       if (muffled) 
[17:39:07.748]                         invokeRestart("muffleMessage")
[17:39:07.748]                     }
[17:39:07.748]                     else if (inherits(cond, "warning")) {
[17:39:07.748]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:07.748]                       if (muffled) 
[17:39:07.748]                         invokeRestart("muffleWarning")
[17:39:07.748]                     }
[17:39:07.748]                     else if (inherits(cond, "condition")) {
[17:39:07.748]                       if (!is.null(pattern)) {
[17:39:07.748]                         computeRestarts <- base::computeRestarts
[17:39:07.748]                         grepl <- base::grepl
[17:39:07.748]                         restarts <- computeRestarts(cond)
[17:39:07.748]                         for (restart in restarts) {
[17:39:07.748]                           name <- restart$name
[17:39:07.748]                           if (is.null(name)) 
[17:39:07.748]                             next
[17:39:07.748]                           if (!grepl(pattern, name)) 
[17:39:07.748]                             next
[17:39:07.748]                           invokeRestart(restart)
[17:39:07.748]                           muffled <- TRUE
[17:39:07.748]                           break
[17:39:07.748]                         }
[17:39:07.748]                       }
[17:39:07.748]                     }
[17:39:07.748]                     invisible(muffled)
[17:39:07.748]                   }
[17:39:07.748]                   muffleCondition(cond)
[17:39:07.748]                 })
[17:39:07.748]             }))
[17:39:07.748]             future::FutureResult(value = ...future.value$value, 
[17:39:07.748]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:07.748]                   ...future.rng), globalenv = if (FALSE) 
[17:39:07.748]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:07.748]                     ...future.globalenv.names))
[17:39:07.748]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:07.748]         }, condition = base::local({
[17:39:07.748]             c <- base::c
[17:39:07.748]             inherits <- base::inherits
[17:39:07.748]             invokeRestart <- base::invokeRestart
[17:39:07.748]             length <- base::length
[17:39:07.748]             list <- base::list
[17:39:07.748]             seq.int <- base::seq.int
[17:39:07.748]             signalCondition <- base::signalCondition
[17:39:07.748]             sys.calls <- base::sys.calls
[17:39:07.748]             `[[` <- base::`[[`
[17:39:07.748]             `+` <- base::`+`
[17:39:07.748]             `<<-` <- base::`<<-`
[17:39:07.748]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:07.748]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:07.748]                   3L)]
[17:39:07.748]             }
[17:39:07.748]             function(cond) {
[17:39:07.748]                 is_error <- inherits(cond, "error")
[17:39:07.748]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:07.748]                   NULL)
[17:39:07.748]                 if (is_error) {
[17:39:07.748]                   sessionInformation <- function() {
[17:39:07.748]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:07.748]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:07.748]                       search = base::search(), system = base::Sys.info())
[17:39:07.748]                   }
[17:39:07.748]                   ...future.conditions[[length(...future.conditions) + 
[17:39:07.748]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:07.748]                     cond$call), session = sessionInformation(), 
[17:39:07.748]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:07.748]                   signalCondition(cond)
[17:39:07.748]                 }
[17:39:07.748]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:07.748]                 "immediateCondition"))) {
[17:39:07.748]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:07.748]                   ...future.conditions[[length(...future.conditions) + 
[17:39:07.748]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:07.748]                   if (TRUE && !signal) {
[17:39:07.748]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:07.748]                     {
[17:39:07.748]                       inherits <- base::inherits
[17:39:07.748]                       invokeRestart <- base::invokeRestart
[17:39:07.748]                       is.null <- base::is.null
[17:39:07.748]                       muffled <- FALSE
[17:39:07.748]                       if (inherits(cond, "message")) {
[17:39:07.748]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:07.748]                         if (muffled) 
[17:39:07.748]                           invokeRestart("muffleMessage")
[17:39:07.748]                       }
[17:39:07.748]                       else if (inherits(cond, "warning")) {
[17:39:07.748]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:07.748]                         if (muffled) 
[17:39:07.748]                           invokeRestart("muffleWarning")
[17:39:07.748]                       }
[17:39:07.748]                       else if (inherits(cond, "condition")) {
[17:39:07.748]                         if (!is.null(pattern)) {
[17:39:07.748]                           computeRestarts <- base::computeRestarts
[17:39:07.748]                           grepl <- base::grepl
[17:39:07.748]                           restarts <- computeRestarts(cond)
[17:39:07.748]                           for (restart in restarts) {
[17:39:07.748]                             name <- restart$name
[17:39:07.748]                             if (is.null(name)) 
[17:39:07.748]                               next
[17:39:07.748]                             if (!grepl(pattern, name)) 
[17:39:07.748]                               next
[17:39:07.748]                             invokeRestart(restart)
[17:39:07.748]                             muffled <- TRUE
[17:39:07.748]                             break
[17:39:07.748]                           }
[17:39:07.748]                         }
[17:39:07.748]                       }
[17:39:07.748]                       invisible(muffled)
[17:39:07.748]                     }
[17:39:07.748]                     muffleCondition(cond, pattern = "^muffle")
[17:39:07.748]                   }
[17:39:07.748]                 }
[17:39:07.748]                 else {
[17:39:07.748]                   if (TRUE) {
[17:39:07.748]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:07.748]                     {
[17:39:07.748]                       inherits <- base::inherits
[17:39:07.748]                       invokeRestart <- base::invokeRestart
[17:39:07.748]                       is.null <- base::is.null
[17:39:07.748]                       muffled <- FALSE
[17:39:07.748]                       if (inherits(cond, "message")) {
[17:39:07.748]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:07.748]                         if (muffled) 
[17:39:07.748]                           invokeRestart("muffleMessage")
[17:39:07.748]                       }
[17:39:07.748]                       else if (inherits(cond, "warning")) {
[17:39:07.748]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:07.748]                         if (muffled) 
[17:39:07.748]                           invokeRestart("muffleWarning")
[17:39:07.748]                       }
[17:39:07.748]                       else if (inherits(cond, "condition")) {
[17:39:07.748]                         if (!is.null(pattern)) {
[17:39:07.748]                           computeRestarts <- base::computeRestarts
[17:39:07.748]                           grepl <- base::grepl
[17:39:07.748]                           restarts <- computeRestarts(cond)
[17:39:07.748]                           for (restart in restarts) {
[17:39:07.748]                             name <- restart$name
[17:39:07.748]                             if (is.null(name)) 
[17:39:07.748]                               next
[17:39:07.748]                             if (!grepl(pattern, name)) 
[17:39:07.748]                               next
[17:39:07.748]                             invokeRestart(restart)
[17:39:07.748]                             muffled <- TRUE
[17:39:07.748]                             break
[17:39:07.748]                           }
[17:39:07.748]                         }
[17:39:07.748]                       }
[17:39:07.748]                       invisible(muffled)
[17:39:07.748]                     }
[17:39:07.748]                     muffleCondition(cond, pattern = "^muffle")
[17:39:07.748]                   }
[17:39:07.748]                 }
[17:39:07.748]             }
[17:39:07.748]         }))
[17:39:07.748]     }, error = function(ex) {
[17:39:07.748]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:07.748]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:07.748]                 ...future.rng), started = ...future.startTime, 
[17:39:07.748]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:07.748]             version = "1.8"), class = "FutureResult")
[17:39:07.748]     }, finally = {
[17:39:07.748]         if (!identical(...future.workdir, getwd())) 
[17:39:07.748]             setwd(...future.workdir)
[17:39:07.748]         {
[17:39:07.748]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:07.748]                 ...future.oldOptions$nwarnings <- NULL
[17:39:07.748]             }
[17:39:07.748]             base::options(...future.oldOptions)
[17:39:07.748]             if (.Platform$OS.type == "windows") {
[17:39:07.748]                 old_names <- names(...future.oldEnvVars)
[17:39:07.748]                 envs <- base::Sys.getenv()
[17:39:07.748]                 names <- names(envs)
[17:39:07.748]                 common <- intersect(names, old_names)
[17:39:07.748]                 added <- setdiff(names, old_names)
[17:39:07.748]                 removed <- setdiff(old_names, names)
[17:39:07.748]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:07.748]                   envs[common]]
[17:39:07.748]                 NAMES <- toupper(changed)
[17:39:07.748]                 args <- list()
[17:39:07.748]                 for (kk in seq_along(NAMES)) {
[17:39:07.748]                   name <- changed[[kk]]
[17:39:07.748]                   NAME <- NAMES[[kk]]
[17:39:07.748]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:07.748]                     next
[17:39:07.748]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:07.748]                 }
[17:39:07.748]                 NAMES <- toupper(added)
[17:39:07.748]                 for (kk in seq_along(NAMES)) {
[17:39:07.748]                   name <- added[[kk]]
[17:39:07.748]                   NAME <- NAMES[[kk]]
[17:39:07.748]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:07.748]                     next
[17:39:07.748]                   args[[name]] <- ""
[17:39:07.748]                 }
[17:39:07.748]                 NAMES <- toupper(removed)
[17:39:07.748]                 for (kk in seq_along(NAMES)) {
[17:39:07.748]                   name <- removed[[kk]]
[17:39:07.748]                   NAME <- NAMES[[kk]]
[17:39:07.748]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:07.748]                     next
[17:39:07.748]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:07.748]                 }
[17:39:07.748]                 if (length(args) > 0) 
[17:39:07.748]                   base::do.call(base::Sys.setenv, args = args)
[17:39:07.748]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:07.748]             }
[17:39:07.748]             else {
[17:39:07.748]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:07.748]             }
[17:39:07.748]             {
[17:39:07.748]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:07.748]                   0L) {
[17:39:07.748]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:07.748]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:07.748]                   base::options(opts)
[17:39:07.748]                 }
[17:39:07.748]                 {
[17:39:07.748]                   {
[17:39:07.748]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:07.748]                     NULL
[17:39:07.748]                   }
[17:39:07.748]                   options(future.plan = NULL)
[17:39:07.748]                   if (is.na(NA_character_)) 
[17:39:07.748]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:07.748]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:07.748]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:07.748]                     .init = FALSE)
[17:39:07.748]                 }
[17:39:07.748]             }
[17:39:07.748]         }
[17:39:07.748]     })
[17:39:07.748]     if (TRUE) {
[17:39:07.748]         base::sink(type = "output", split = FALSE)
[17:39:07.748]         if (TRUE) {
[17:39:07.748]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:07.748]         }
[17:39:07.748]         else {
[17:39:07.748]             ...future.result["stdout"] <- base::list(NULL)
[17:39:07.748]         }
[17:39:07.748]         base::close(...future.stdout)
[17:39:07.748]         ...future.stdout <- NULL
[17:39:07.748]     }
[17:39:07.748]     ...future.result$conditions <- ...future.conditions
[17:39:07.748]     ...future.result$finished <- base::Sys.time()
[17:39:07.748]     ...future.result
[17:39:07.748] }
[17:39:07.751] assign_globals() ...
[17:39:07.751] List of 4
[17:39:07.751]  $ ii   : int 2
[17:39:07.751]  $ n    : int 4
[17:39:07.751]  $ C    : cplx [1:25, 1:25] -0.719-1.5i -0.719-1.44i -0.719-1.38i ...
[17:39:07.751]   ..- attr(*, "region")=List of 2
[17:39:07.751]   .. ..$ xrange: num [1:2] -0.719 0.75
[17:39:07.751]   .. ..$ yrange: num [1:2] -1.5 -0.0306
[17:39:07.751]   ..- attr(*, "tile")= int [1:2] 1 2
[17:39:07.751]  $ delay:function (counts)  
[17:39:07.751]   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[17:39:07.751]   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x556cabc61798> 
[17:39:07.751]  - attr(*, "where")=List of 4
[17:39:07.751]   ..$ ii   :<environment: R_EmptyEnv> 
[17:39:07.751]   ..$ n    :<environment: R_EmptyEnv> 
[17:39:07.751]   ..$ C    :<environment: R_EmptyEnv> 
[17:39:07.751]   ..$ delay:<environment: R_EmptyEnv> 
[17:39:07.751]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:39:07.751]  - attr(*, "resolved")= logi FALSE
[17:39:07.751]  - attr(*, "total_size")= num 14584
[17:39:07.751]  - attr(*, "already-done")= logi TRUE
[17:39:07.763] - copied ‘ii’ to environment
[17:39:07.763] - copied ‘n’ to environment
[17:39:07.763] - copied ‘C’ to environment
[17:39:07.763] - reassign environment for ‘delay’
[17:39:07.763] - copied ‘delay’ to environment
[17:39:07.763] assign_globals() ... done
[17:39:07.764] requestCore(): workers = 2
[17:39:07.766] MulticoreFuture started
[17:39:07.766] - Launch lazy future ... done
[17:39:07.767] run() for ‘MulticoreFuture’ ... done
[17:39:07.767] - run() ... done
[17:39:07.767] - resolved() ...
[17:39:07.768] plan(): Setting new future strategy stack:
[17:39:07.768] List of future strategies:
[17:39:07.768] 1. sequential:
[17:39:07.768]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:07.768]    - tweaked: FALSE
[17:39:07.768]    - call: NULL
[17:39:07.769] plan(): nbrOfWorkers() = 1
[17:39:07.775] plan(): Setting new future strategy stack:
[17:39:07.775] List of future strategies:
[17:39:07.775] 1. multicore:
[17:39:07.775]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:39:07.775]    - tweaked: FALSE
[17:39:07.775]    - call: plan(strategy)
[17:39:07.778] - resolved: FALSE
[17:39:07.778] - resolved() ... done
[17:39:07.778] resolved() for ‘MulticoreFuture’ ... done
[17:39:07.778] resolved() for ‘Future’ ...
[17:39:07.778] - state: ‘created’
[17:39:07.779] - run: TRUE
[17:39:07.779] - run() ...
[17:39:07.779] run() for ‘Future’ ...
[17:39:07.779] - state: ‘created’
[17:39:07.780] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:39:07.781] plan(): nbrOfWorkers() = 2
[17:39:07.785] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:07.785] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:39:07.785]   - Field: ‘label’
[17:39:07.785]   - Field: ‘local’
[17:39:07.785]   - Field: ‘owner’
[17:39:07.785]   - Field: ‘envir’
[17:39:07.786]   - Field: ‘workers’
[17:39:07.786]   - Field: ‘packages’
[17:39:07.786]   - Field: ‘gc’
[17:39:07.786]   - Field: ‘job’
[17:39:07.786]   - Field: ‘conditions’
[17:39:07.786]   - Field: ‘expr’
[17:39:07.786]   - Field: ‘uuid’
[17:39:07.787]   - Field: ‘seed’
[17:39:07.787]   - Field: ‘version’
[17:39:07.787]   - Field: ‘result’
[17:39:07.787]   - Field: ‘asynchronous’
[17:39:07.787]   - Field: ‘calls’
[17:39:07.787]   - Field: ‘globals’
[17:39:07.787]   - Field: ‘stdout’
[17:39:07.788]   - Field: ‘earlySignal’
[17:39:07.788]   - Field: ‘lazy’
[17:39:07.788]   - Field: ‘state’
[17:39:07.788] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:39:07.788] - Launch lazy future ...
[17:39:07.789] Packages needed by the future expression (n = 1): ‘future’
[17:39:07.789] Packages needed by future strategies (n = 0): <none>
[17:39:07.790] {
[17:39:07.790]     {
[17:39:07.790]         {
[17:39:07.790]             ...future.startTime <- base::Sys.time()
[17:39:07.790]             {
[17:39:07.790]                 {
[17:39:07.790]                   {
[17:39:07.790]                     {
[17:39:07.790]                       {
[17:39:07.790]                         base::local({
[17:39:07.790]                           has_future <- base::requireNamespace("future", 
[17:39:07.790]                             quietly = TRUE)
[17:39:07.790]                           if (has_future) {
[17:39:07.790]                             ns <- base::getNamespace("future")
[17:39:07.790]                             version <- ns[[".package"]][["version"]]
[17:39:07.790]                             if (is.null(version)) 
[17:39:07.790]                               version <- utils::packageVersion("future")
[17:39:07.790]                           }
[17:39:07.790]                           else {
[17:39:07.790]                             version <- NULL
[17:39:07.790]                           }
[17:39:07.790]                           if (!has_future || version < "1.8.0") {
[17:39:07.790]                             info <- base::c(r_version = base::gsub("R version ", 
[17:39:07.790]                               "", base::R.version$version.string), 
[17:39:07.790]                               platform = base::sprintf("%s (%s-bit)", 
[17:39:07.790]                                 base::R.version$platform, 8 * 
[17:39:07.790]                                   base::.Machine$sizeof.pointer), 
[17:39:07.790]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:07.790]                                 "release", "version")], collapse = " "), 
[17:39:07.790]                               hostname = base::Sys.info()[["nodename"]])
[17:39:07.790]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:39:07.790]                               info)
[17:39:07.790]                             info <- base::paste(info, collapse = "; ")
[17:39:07.790]                             if (!has_future) {
[17:39:07.790]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:07.790]                                 info)
[17:39:07.790]                             }
[17:39:07.790]                             else {
[17:39:07.790]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:07.790]                                 info, version)
[17:39:07.790]                             }
[17:39:07.790]                             base::stop(msg)
[17:39:07.790]                           }
[17:39:07.790]                         })
[17:39:07.790]                       }
[17:39:07.790]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:07.790]                       base::options(mc.cores = 1L)
[17:39:07.790]                     }
[17:39:07.790]                     base::local({
[17:39:07.790]                       for (pkg in "future") {
[17:39:07.790]                         base::loadNamespace(pkg)
[17:39:07.790]                         base::library(pkg, character.only = TRUE)
[17:39:07.790]                       }
[17:39:07.790]                     })
[17:39:07.790]                   }
[17:39:07.790]                   ...future.strategy.old <- future::plan("list")
[17:39:07.790]                   options(future.plan = NULL)
[17:39:07.790]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:07.790]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:07.790]                 }
[17:39:07.790]                 ...future.workdir <- getwd()
[17:39:07.790]             }
[17:39:07.790]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:07.790]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:07.790]         }
[17:39:07.790]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:07.790]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:07.790]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:07.790]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:07.790]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:07.790]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:07.790]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:07.790]             base::names(...future.oldOptions))
[17:39:07.790]     }
[17:39:07.790]     if (FALSE) {
[17:39:07.790]     }
[17:39:07.790]     else {
[17:39:07.790]         if (TRUE) {
[17:39:07.790]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:07.790]                 open = "w")
[17:39:07.790]         }
[17:39:07.790]         else {
[17:39:07.790]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:07.790]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:07.790]         }
[17:39:07.790]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:07.790]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:07.790]             base::sink(type = "output", split = FALSE)
[17:39:07.790]             base::close(...future.stdout)
[17:39:07.790]         }, add = TRUE)
[17:39:07.790]     }
[17:39:07.790]     ...future.frame <- base::sys.nframe()
[17:39:07.790]     ...future.conditions <- base::list()
[17:39:07.790]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:07.790]     if (FALSE) {
[17:39:07.790]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:07.790]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:07.790]     }
[17:39:07.790]     ...future.result <- base::tryCatch({
[17:39:07.790]         base::withCallingHandlers({
[17:39:07.790]             ...future.value <- base::withVisible(base::local({
[17:39:07.790]                 withCallingHandlers({
[17:39:07.790]                   {
[17:39:07.790]                     message(sprintf("Calculating tile #%d of %d ...", 
[17:39:07.790]                       ii, n), appendLF = FALSE)
[17:39:07.790]                     fit <- mandelbrot(C)
[17:39:07.790]                     delay(fit)
[17:39:07.790]                     message(" done")
[17:39:07.790]                     fit
[17:39:07.790]                   }
[17:39:07.790]                 }, immediateCondition = function(cond) {
[17:39:07.790]                   save_rds <- function (object, pathname, ...) 
[17:39:07.790]                   {
[17:39:07.790]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:39:07.790]                     if (file_test("-f", pathname_tmp)) {
[17:39:07.790]                       fi_tmp <- file.info(pathname_tmp)
[17:39:07.790]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:39:07.790]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:07.790]                         fi_tmp[["mtime"]])
[17:39:07.790]                     }
[17:39:07.790]                     tryCatch({
[17:39:07.790]                       saveRDS(object, file = pathname_tmp, ...)
[17:39:07.790]                     }, error = function(ex) {
[17:39:07.790]                       msg <- conditionMessage(ex)
[17:39:07.790]                       fi_tmp <- file.info(pathname_tmp)
[17:39:07.790]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:39:07.790]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:07.790]                         fi_tmp[["mtime"]], msg)
[17:39:07.790]                       ex$message <- msg
[17:39:07.790]                       stop(ex)
[17:39:07.790]                     })
[17:39:07.790]                     stopifnot(file_test("-f", pathname_tmp))
[17:39:07.790]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:39:07.790]                     if (!res || file_test("-f", pathname_tmp)) {
[17:39:07.790]                       fi_tmp <- file.info(pathname_tmp)
[17:39:07.790]                       fi <- file.info(pathname)
[17:39:07.790]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:39:07.790]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:07.790]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:39:07.790]                         fi[["size"]], fi[["mtime"]])
[17:39:07.790]                       stop(msg)
[17:39:07.790]                     }
[17:39:07.790]                     invisible(pathname)
[17:39:07.790]                   }
[17:39:07.790]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:39:07.790]                     rootPath = tempdir()) 
[17:39:07.790]                   {
[17:39:07.790]                     obj <- list(time = Sys.time(), condition = cond)
[17:39:07.790]                     file <- tempfile(pattern = class(cond)[1], 
[17:39:07.790]                       tmpdir = path, fileext = ".rds")
[17:39:07.790]                     save_rds(obj, file)
[17:39:07.790]                   }
[17:39:07.790]                   saveImmediateCondition(cond, path = "/tmp/Rtmp6QNjz1/.future/immediateConditions")
[17:39:07.790]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:07.790]                   {
[17:39:07.790]                     inherits <- base::inherits
[17:39:07.790]                     invokeRestart <- base::invokeRestart
[17:39:07.790]                     is.null <- base::is.null
[17:39:07.790]                     muffled <- FALSE
[17:39:07.790]                     if (inherits(cond, "message")) {
[17:39:07.790]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:07.790]                       if (muffled) 
[17:39:07.790]                         invokeRestart("muffleMessage")
[17:39:07.790]                     }
[17:39:07.790]                     else if (inherits(cond, "warning")) {
[17:39:07.790]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:07.790]                       if (muffled) 
[17:39:07.790]                         invokeRestart("muffleWarning")
[17:39:07.790]                     }
[17:39:07.790]                     else if (inherits(cond, "condition")) {
[17:39:07.790]                       if (!is.null(pattern)) {
[17:39:07.790]                         computeRestarts <- base::computeRestarts
[17:39:07.790]                         grepl <- base::grepl
[17:39:07.790]                         restarts <- computeRestarts(cond)
[17:39:07.790]                         for (restart in restarts) {
[17:39:07.790]                           name <- restart$name
[17:39:07.790]                           if (is.null(name)) 
[17:39:07.790]                             next
[17:39:07.790]                           if (!grepl(pattern, name)) 
[17:39:07.790]                             next
[17:39:07.790]                           invokeRestart(restart)
[17:39:07.790]                           muffled <- TRUE
[17:39:07.790]                           break
[17:39:07.790]                         }
[17:39:07.790]                       }
[17:39:07.790]                     }
[17:39:07.790]                     invisible(muffled)
[17:39:07.790]                   }
[17:39:07.790]                   muffleCondition(cond)
[17:39:07.790]                 })
[17:39:07.790]             }))
[17:39:07.790]             future::FutureResult(value = ...future.value$value, 
[17:39:07.790]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:07.790]                   ...future.rng), globalenv = if (FALSE) 
[17:39:07.790]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:07.790]                     ...future.globalenv.names))
[17:39:07.790]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:07.790]         }, condition = base::local({
[17:39:07.790]             c <- base::c
[17:39:07.790]             inherits <- base::inherits
[17:39:07.790]             invokeRestart <- base::invokeRestart
[17:39:07.790]             length <- base::length
[17:39:07.790]             list <- base::list
[17:39:07.790]             seq.int <- base::seq.int
[17:39:07.790]             signalCondition <- base::signalCondition
[17:39:07.790]             sys.calls <- base::sys.calls
[17:39:07.790]             `[[` <- base::`[[`
[17:39:07.790]             `+` <- base::`+`
[17:39:07.790]             `<<-` <- base::`<<-`
[17:39:07.790]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:07.790]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:07.790]                   3L)]
[17:39:07.790]             }
[17:39:07.790]             function(cond) {
[17:39:07.790]                 is_error <- inherits(cond, "error")
[17:39:07.790]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:07.790]                   NULL)
[17:39:07.790]                 if (is_error) {
[17:39:07.790]                   sessionInformation <- function() {
[17:39:07.790]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:07.790]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:07.790]                       search = base::search(), system = base::Sys.info())
[17:39:07.790]                   }
[17:39:07.790]                   ...future.conditions[[length(...future.conditions) + 
[17:39:07.790]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:07.790]                     cond$call), session = sessionInformation(), 
[17:39:07.790]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:07.790]                   signalCondition(cond)
[17:39:07.790]                 }
[17:39:07.790]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:07.790]                 "immediateCondition"))) {
[17:39:07.790]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:07.790]                   ...future.conditions[[length(...future.conditions) + 
[17:39:07.790]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:07.790]                   if (TRUE && !signal) {
[17:39:07.790]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:07.790]                     {
[17:39:07.790]                       inherits <- base::inherits
[17:39:07.790]                       invokeRestart <- base::invokeRestart
[17:39:07.790]                       is.null <- base::is.null
[17:39:07.790]                       muffled <- FALSE
[17:39:07.790]                       if (inherits(cond, "message")) {
[17:39:07.790]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:07.790]                         if (muffled) 
[17:39:07.790]                           invokeRestart("muffleMessage")
[17:39:07.790]                       }
[17:39:07.790]                       else if (inherits(cond, "warning")) {
[17:39:07.790]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:07.790]                         if (muffled) 
[17:39:07.790]                           invokeRestart("muffleWarning")
[17:39:07.790]                       }
[17:39:07.790]                       else if (inherits(cond, "condition")) {
[17:39:07.790]                         if (!is.null(pattern)) {
[17:39:07.790]                           computeRestarts <- base::computeRestarts
[17:39:07.790]                           grepl <- base::grepl
[17:39:07.790]                           restarts <- computeRestarts(cond)
[17:39:07.790]                           for (restart in restarts) {
[17:39:07.790]                             name <- restart$name
[17:39:07.790]                             if (is.null(name)) 
[17:39:07.790]                               next
[17:39:07.790]                             if (!grepl(pattern, name)) 
[17:39:07.790]                               next
[17:39:07.790]                             invokeRestart(restart)
[17:39:07.790]                             muffled <- TRUE
[17:39:07.790]                             break
[17:39:07.790]                           }
[17:39:07.790]                         }
[17:39:07.790]                       }
[17:39:07.790]                       invisible(muffled)
[17:39:07.790]                     }
[17:39:07.790]                     muffleCondition(cond, pattern = "^muffle")
[17:39:07.790]                   }
[17:39:07.790]                 }
[17:39:07.790]                 else {
[17:39:07.790]                   if (TRUE) {
[17:39:07.790]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:07.790]                     {
[17:39:07.790]                       inherits <- base::inherits
[17:39:07.790]                       invokeRestart <- base::invokeRestart
[17:39:07.790]                       is.null <- base::is.null
[17:39:07.790]                       muffled <- FALSE
[17:39:07.790]                       if (inherits(cond, "message")) {
[17:39:07.790]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:07.790]                         if (muffled) 
[17:39:07.790]                           invokeRestart("muffleMessage")
[17:39:07.790]                       }
[17:39:07.790]                       else if (inherits(cond, "warning")) {
[17:39:07.790]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:07.790]                         if (muffled) 
[17:39:07.790]                           invokeRestart("muffleWarning")
[17:39:07.790]                       }
[17:39:07.790]                       else if (inherits(cond, "condition")) {
[17:39:07.790]                         if (!is.null(pattern)) {
[17:39:07.790]                           computeRestarts <- base::computeRestarts
[17:39:07.790]                           grepl <- base::grepl
[17:39:07.790]                           restarts <- computeRestarts(cond)
[17:39:07.790]                           for (restart in restarts) {
[17:39:07.790]                             name <- restart$name
[17:39:07.790]                             if (is.null(name)) 
[17:39:07.790]                               next
[17:39:07.790]                             if (!grepl(pattern, name)) 
[17:39:07.790]                               next
[17:39:07.790]                             invokeRestart(restart)
[17:39:07.790]                             muffled <- TRUE
[17:39:07.790]                             break
[17:39:07.790]                           }
[17:39:07.790]                         }
[17:39:07.790]                       }
[17:39:07.790]                       invisible(muffled)
[17:39:07.790]                     }
[17:39:07.790]                     muffleCondition(cond, pattern = "^muffle")
[17:39:07.790]                   }
[17:39:07.790]                 }
[17:39:07.790]             }
[17:39:07.790]         }))
[17:39:07.790]     }, error = function(ex) {
[17:39:07.790]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:07.790]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:07.790]                 ...future.rng), started = ...future.startTime, 
[17:39:07.790]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:07.790]             version = "1.8"), class = "FutureResult")
[17:39:07.790]     }, finally = {
[17:39:07.790]         if (!identical(...future.workdir, getwd())) 
[17:39:07.790]             setwd(...future.workdir)
[17:39:07.790]         {
[17:39:07.790]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:07.790]                 ...future.oldOptions$nwarnings <- NULL
[17:39:07.790]             }
[17:39:07.790]             base::options(...future.oldOptions)
[17:39:07.790]             if (.Platform$OS.type == "windows") {
[17:39:07.790]                 old_names <- names(...future.oldEnvVars)
[17:39:07.790]                 envs <- base::Sys.getenv()
[17:39:07.790]                 names <- names(envs)
[17:39:07.790]                 common <- intersect(names, old_names)
[17:39:07.790]                 added <- setdiff(names, old_names)
[17:39:07.790]                 removed <- setdiff(old_names, names)
[17:39:07.790]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:07.790]                   envs[common]]
[17:39:07.790]                 NAMES <- toupper(changed)
[17:39:07.790]                 args <- list()
[17:39:07.790]                 for (kk in seq_along(NAMES)) {
[17:39:07.790]                   name <- changed[[kk]]
[17:39:07.790]                   NAME <- NAMES[[kk]]
[17:39:07.790]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:07.790]                     next
[17:39:07.790]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:07.790]                 }
[17:39:07.790]                 NAMES <- toupper(added)
[17:39:07.790]                 for (kk in seq_along(NAMES)) {
[17:39:07.790]                   name <- added[[kk]]
[17:39:07.790]                   NAME <- NAMES[[kk]]
[17:39:07.790]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:07.790]                     next
[17:39:07.790]                   args[[name]] <- ""
[17:39:07.790]                 }
[17:39:07.790]                 NAMES <- toupper(removed)
[17:39:07.790]                 for (kk in seq_along(NAMES)) {
[17:39:07.790]                   name <- removed[[kk]]
[17:39:07.790]                   NAME <- NAMES[[kk]]
[17:39:07.790]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:07.790]                     next
[17:39:07.790]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:07.790]                 }
[17:39:07.790]                 if (length(args) > 0) 
[17:39:07.790]                   base::do.call(base::Sys.setenv, args = args)
[17:39:07.790]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:07.790]             }
[17:39:07.790]             else {
[17:39:07.790]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:07.790]             }
[17:39:07.790]             {
[17:39:07.790]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:07.790]                   0L) {
[17:39:07.790]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:07.790]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:07.790]                   base::options(opts)
[17:39:07.790]                 }
[17:39:07.790]                 {
[17:39:07.790]                   {
[17:39:07.790]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:07.790]                     NULL
[17:39:07.790]                   }
[17:39:07.790]                   options(future.plan = NULL)
[17:39:07.790]                   if (is.na(NA_character_)) 
[17:39:07.790]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:07.790]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:07.790]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:07.790]                     .init = FALSE)
[17:39:07.790]                 }
[17:39:07.790]             }
[17:39:07.790]         }
[17:39:07.790]     })
[17:39:07.790]     if (TRUE) {
[17:39:07.790]         base::sink(type = "output", split = FALSE)
[17:39:07.790]         if (TRUE) {
[17:39:07.790]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:07.790]         }
[17:39:07.790]         else {
[17:39:07.790]             ...future.result["stdout"] <- base::list(NULL)
[17:39:07.790]         }
[17:39:07.790]         base::close(...future.stdout)
[17:39:07.790]         ...future.stdout <- NULL
[17:39:07.790]     }
[17:39:07.790]     ...future.result$conditions <- ...future.conditions
[17:39:07.790]     ...future.result$finished <- base::Sys.time()
[17:39:07.790]     ...future.result
[17:39:07.790] }
[17:39:07.793] assign_globals() ...
[17:39:07.793] List of 4
[17:39:07.793]  $ ii   : int 3
[17:39:07.793]  $ n    : int 4
[17:39:07.793]  $ C    : cplx [1:25, 1:25] -2.25+0.0306i -2.25+0.0918i -2.25+0.1531i ...
[17:39:07.793]   ..- attr(*, "region")=List of 2
[17:39:07.793]   .. ..$ xrange: num [1:2] -2.25 -0.781
[17:39:07.793]   .. ..$ yrange: num [1:2] 0.0306 1.5
[17:39:07.793]   ..- attr(*, "tile")= int [1:2] 2 1
[17:39:07.793]  $ delay:function (counts)  
[17:39:07.793]   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[17:39:07.793]   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x556cabc61798> 
[17:39:07.793]  - attr(*, "where")=List of 4
[17:39:07.793]   ..$ ii   :<environment: R_EmptyEnv> 
[17:39:07.793]   ..$ n    :<environment: R_EmptyEnv> 
[17:39:07.793]   ..$ C    :<environment: R_EmptyEnv> 
[17:39:07.793]   ..$ delay:<environment: R_EmptyEnv> 
[17:39:07.793]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:39:07.793]  - attr(*, "resolved")= logi FALSE
[17:39:07.793]  - attr(*, "total_size")= num 14584
[17:39:07.793]  - attr(*, "already-done")= logi TRUE
[17:39:07.804] - copied ‘ii’ to environment
[17:39:07.804] - copied ‘n’ to environment
[17:39:07.804] - copied ‘C’ to environment
[17:39:07.805] - reassign environment for ‘delay’
[17:39:07.805] - copied ‘delay’ to environment
[17:39:07.805] assign_globals() ... done
[17:39:07.805] requestCore(): workers = 2
[17:39:07.808] MulticoreFuture started
[17:39:07.808] - Launch lazy future ... done
[17:39:07.808] run() for ‘MulticoreFuture’ ... done
[17:39:07.808] - run() ... done
[17:39:07.809] - resolved() ...
[17:39:07.809] plan(): Setting new future strategy stack:
[17:39:07.809] List of future strategies:
[17:39:07.809] 1. sequential:
[17:39:07.809]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:07.809]    - tweaked: FALSE
[17:39:07.809]    - call: NULL
[17:39:07.811] plan(): nbrOfWorkers() = 1
[17:39:07.814] plan(): Setting new future strategy stack:
[17:39:07.815] List of future strategies:
[17:39:07.815] 1. multicore:
[17:39:07.815]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:39:07.815]    - tweaked: FALSE
[17:39:07.815]    - call: plan(strategy)
[17:39:07.819] - resolved: FALSE
[17:39:07.819] - resolved() ... done
[17:39:07.819] plan(): nbrOfWorkers() = 2
[17:39:07.820] resolved() for ‘MulticoreFuture’ ... done
[17:39:07.820] resolved() for ‘Future’ ...
[17:39:07.820] - state: ‘created’
[17:39:07.820] - run: TRUE
[17:39:07.821] - run() ...
[17:39:07.821] run() for ‘Future’ ...
[17:39:07.821] - state: ‘created’
[17:39:07.821] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:39:07.826] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:07.826] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:39:07.826]   - Field: ‘label’
[17:39:07.827]   - Field: ‘local’
[17:39:07.827]   - Field: ‘owner’
[17:39:07.827]   - Field: ‘envir’
[17:39:07.827]   - Field: ‘workers’
[17:39:07.827]   - Field: ‘packages’
[17:39:07.827]   - Field: ‘gc’
[17:39:07.827]   - Field: ‘job’
[17:39:07.828]   - Field: ‘conditions’
[17:39:07.828]   - Field: ‘expr’
[17:39:07.828]   - Field: ‘uuid’
[17:39:07.828]   - Field: ‘seed’
[17:39:07.828]   - Field: ‘version’
[17:39:07.828]   - Field: ‘result’
[17:39:07.828]   - Field: ‘asynchronous’
[17:39:07.829]   - Field: ‘calls’
[17:39:07.829]   - Field: ‘globals’
[17:39:07.829]   - Field: ‘stdout’
[17:39:07.829]   - Field: ‘earlySignal’
[17:39:07.829]   - Field: ‘lazy’
[17:39:07.829]   - Field: ‘state’
[17:39:07.829] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:39:07.830] - Launch lazy future ...
[17:39:07.830] Packages needed by the future expression (n = 1): ‘future’
[17:39:07.830] Packages needed by future strategies (n = 0): <none>
[17:39:07.831] {
[17:39:07.831]     {
[17:39:07.831]         {
[17:39:07.831]             ...future.startTime <- base::Sys.time()
[17:39:07.831]             {
[17:39:07.831]                 {
[17:39:07.831]                   {
[17:39:07.831]                     {
[17:39:07.831]                       {
[17:39:07.831]                         base::local({
[17:39:07.831]                           has_future <- base::requireNamespace("future", 
[17:39:07.831]                             quietly = TRUE)
[17:39:07.831]                           if (has_future) {
[17:39:07.831]                             ns <- base::getNamespace("future")
[17:39:07.831]                             version <- ns[[".package"]][["version"]]
[17:39:07.831]                             if (is.null(version)) 
[17:39:07.831]                               version <- utils::packageVersion("future")
[17:39:07.831]                           }
[17:39:07.831]                           else {
[17:39:07.831]                             version <- NULL
[17:39:07.831]                           }
[17:39:07.831]                           if (!has_future || version < "1.8.0") {
[17:39:07.831]                             info <- base::c(r_version = base::gsub("R version ", 
[17:39:07.831]                               "", base::R.version$version.string), 
[17:39:07.831]                               platform = base::sprintf("%s (%s-bit)", 
[17:39:07.831]                                 base::R.version$platform, 8 * 
[17:39:07.831]                                   base::.Machine$sizeof.pointer), 
[17:39:07.831]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:07.831]                                 "release", "version")], collapse = " "), 
[17:39:07.831]                               hostname = base::Sys.info()[["nodename"]])
[17:39:07.831]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:39:07.831]                               info)
[17:39:07.831]                             info <- base::paste(info, collapse = "; ")
[17:39:07.831]                             if (!has_future) {
[17:39:07.831]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:07.831]                                 info)
[17:39:07.831]                             }
[17:39:07.831]                             else {
[17:39:07.831]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:07.831]                                 info, version)
[17:39:07.831]                             }
[17:39:07.831]                             base::stop(msg)
[17:39:07.831]                           }
[17:39:07.831]                         })
[17:39:07.831]                       }
[17:39:07.831]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:07.831]                       base::options(mc.cores = 1L)
[17:39:07.831]                     }
[17:39:07.831]                     base::local({
[17:39:07.831]                       for (pkg in "future") {
[17:39:07.831]                         base::loadNamespace(pkg)
[17:39:07.831]                         base::library(pkg, character.only = TRUE)
[17:39:07.831]                       }
[17:39:07.831]                     })
[17:39:07.831]                   }
[17:39:07.831]                   ...future.strategy.old <- future::plan("list")
[17:39:07.831]                   options(future.plan = NULL)
[17:39:07.831]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:07.831]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:07.831]                 }
[17:39:07.831]                 ...future.workdir <- getwd()
[17:39:07.831]             }
[17:39:07.831]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:07.831]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:07.831]         }
[17:39:07.831]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:07.831]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:07.831]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:07.831]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:07.831]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:07.831]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:07.831]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:07.831]             base::names(...future.oldOptions))
[17:39:07.831]     }
[17:39:07.831]     if (FALSE) {
[17:39:07.831]     }
[17:39:07.831]     else {
[17:39:07.831]         if (TRUE) {
[17:39:07.831]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:07.831]                 open = "w")
[17:39:07.831]         }
[17:39:07.831]         else {
[17:39:07.831]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:07.831]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:07.831]         }
[17:39:07.831]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:07.831]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:07.831]             base::sink(type = "output", split = FALSE)
[17:39:07.831]             base::close(...future.stdout)
[17:39:07.831]         }, add = TRUE)
[17:39:07.831]     }
[17:39:07.831]     ...future.frame <- base::sys.nframe()
[17:39:07.831]     ...future.conditions <- base::list()
[17:39:07.831]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:07.831]     if (FALSE) {
[17:39:07.831]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:07.831]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:07.831]     }
[17:39:07.831]     ...future.result <- base::tryCatch({
[17:39:07.831]         base::withCallingHandlers({
[17:39:07.831]             ...future.value <- base::withVisible(base::local({
[17:39:07.831]                 withCallingHandlers({
[17:39:07.831]                   {
[17:39:07.831]                     message(sprintf("Calculating tile #%d of %d ...", 
[17:39:07.831]                       ii, n), appendLF = FALSE)
[17:39:07.831]                     fit <- mandelbrot(C)
[17:39:07.831]                     delay(fit)
[17:39:07.831]                     message(" done")
[17:39:07.831]                     fit
[17:39:07.831]                   }
[17:39:07.831]                 }, immediateCondition = function(cond) {
[17:39:07.831]                   save_rds <- function (object, pathname, ...) 
[17:39:07.831]                   {
[17:39:07.831]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:39:07.831]                     if (file_test("-f", pathname_tmp)) {
[17:39:07.831]                       fi_tmp <- file.info(pathname_tmp)
[17:39:07.831]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:39:07.831]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:07.831]                         fi_tmp[["mtime"]])
[17:39:07.831]                     }
[17:39:07.831]                     tryCatch({
[17:39:07.831]                       saveRDS(object, file = pathname_tmp, ...)
[17:39:07.831]                     }, error = function(ex) {
[17:39:07.831]                       msg <- conditionMessage(ex)
[17:39:07.831]                       fi_tmp <- file.info(pathname_tmp)
[17:39:07.831]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:39:07.831]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:07.831]                         fi_tmp[["mtime"]], msg)
[17:39:07.831]                       ex$message <- msg
[17:39:07.831]                       stop(ex)
[17:39:07.831]                     })
[17:39:07.831]                     stopifnot(file_test("-f", pathname_tmp))
[17:39:07.831]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:39:07.831]                     if (!res || file_test("-f", pathname_tmp)) {
[17:39:07.831]                       fi_tmp <- file.info(pathname_tmp)
[17:39:07.831]                       fi <- file.info(pathname)
[17:39:07.831]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:39:07.831]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:07.831]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:39:07.831]                         fi[["size"]], fi[["mtime"]])
[17:39:07.831]                       stop(msg)
[17:39:07.831]                     }
[17:39:07.831]                     invisible(pathname)
[17:39:07.831]                   }
[17:39:07.831]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:39:07.831]                     rootPath = tempdir()) 
[17:39:07.831]                   {
[17:39:07.831]                     obj <- list(time = Sys.time(), condition = cond)
[17:39:07.831]                     file <- tempfile(pattern = class(cond)[1], 
[17:39:07.831]                       tmpdir = path, fileext = ".rds")
[17:39:07.831]                     save_rds(obj, file)
[17:39:07.831]                   }
[17:39:07.831]                   saveImmediateCondition(cond, path = "/tmp/Rtmp6QNjz1/.future/immediateConditions")
[17:39:07.831]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:07.831]                   {
[17:39:07.831]                     inherits <- base::inherits
[17:39:07.831]                     invokeRestart <- base::invokeRestart
[17:39:07.831]                     is.null <- base::is.null
[17:39:07.831]                     muffled <- FALSE
[17:39:07.831]                     if (inherits(cond, "message")) {
[17:39:07.831]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:07.831]                       if (muffled) 
[17:39:07.831]                         invokeRestart("muffleMessage")
[17:39:07.831]                     }
[17:39:07.831]                     else if (inherits(cond, "warning")) {
[17:39:07.831]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:07.831]                       if (muffled) 
[17:39:07.831]                         invokeRestart("muffleWarning")
[17:39:07.831]                     }
[17:39:07.831]                     else if (inherits(cond, "condition")) {
[17:39:07.831]                       if (!is.null(pattern)) {
[17:39:07.831]                         computeRestarts <- base::computeRestarts
[17:39:07.831]                         grepl <- base::grepl
[17:39:07.831]                         restarts <- computeRestarts(cond)
[17:39:07.831]                         for (restart in restarts) {
[17:39:07.831]                           name <- restart$name
[17:39:07.831]                           if (is.null(name)) 
[17:39:07.831]                             next
[17:39:07.831]                           if (!grepl(pattern, name)) 
[17:39:07.831]                             next
[17:39:07.831]                           invokeRestart(restart)
[17:39:07.831]                           muffled <- TRUE
[17:39:07.831]                           break
[17:39:07.831]                         }
[17:39:07.831]                       }
[17:39:07.831]                     }
[17:39:07.831]                     invisible(muffled)
[17:39:07.831]                   }
[17:39:07.831]                   muffleCondition(cond)
[17:39:07.831]                 })
[17:39:07.831]             }))
[17:39:07.831]             future::FutureResult(value = ...future.value$value, 
[17:39:07.831]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:07.831]                   ...future.rng), globalenv = if (FALSE) 
[17:39:07.831]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:07.831]                     ...future.globalenv.names))
[17:39:07.831]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:07.831]         }, condition = base::local({
[17:39:07.831]             c <- base::c
[17:39:07.831]             inherits <- base::inherits
[17:39:07.831]             invokeRestart <- base::invokeRestart
[17:39:07.831]             length <- base::length
[17:39:07.831]             list <- base::list
[17:39:07.831]             seq.int <- base::seq.int
[17:39:07.831]             signalCondition <- base::signalCondition
[17:39:07.831]             sys.calls <- base::sys.calls
[17:39:07.831]             `[[` <- base::`[[`
[17:39:07.831]             `+` <- base::`+`
[17:39:07.831]             `<<-` <- base::`<<-`
[17:39:07.831]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:07.831]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:07.831]                   3L)]
[17:39:07.831]             }
[17:39:07.831]             function(cond) {
[17:39:07.831]                 is_error <- inherits(cond, "error")
[17:39:07.831]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:07.831]                   NULL)
[17:39:07.831]                 if (is_error) {
[17:39:07.831]                   sessionInformation <- function() {
[17:39:07.831]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:07.831]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:07.831]                       search = base::search(), system = base::Sys.info())
[17:39:07.831]                   }
[17:39:07.831]                   ...future.conditions[[length(...future.conditions) + 
[17:39:07.831]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:07.831]                     cond$call), session = sessionInformation(), 
[17:39:07.831]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:07.831]                   signalCondition(cond)
[17:39:07.831]                 }
[17:39:07.831]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:07.831]                 "immediateCondition"))) {
[17:39:07.831]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:07.831]                   ...future.conditions[[length(...future.conditions) + 
[17:39:07.831]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:07.831]                   if (TRUE && !signal) {
[17:39:07.831]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:07.831]                     {
[17:39:07.831]                       inherits <- base::inherits
[17:39:07.831]                       invokeRestart <- base::invokeRestart
[17:39:07.831]                       is.null <- base::is.null
[17:39:07.831]                       muffled <- FALSE
[17:39:07.831]                       if (inherits(cond, "message")) {
[17:39:07.831]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:07.831]                         if (muffled) 
[17:39:07.831]                           invokeRestart("muffleMessage")
[17:39:07.831]                       }
[17:39:07.831]                       else if (inherits(cond, "warning")) {
[17:39:07.831]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:07.831]                         if (muffled) 
[17:39:07.831]                           invokeRestart("muffleWarning")
[17:39:07.831]                       }
[17:39:07.831]                       else if (inherits(cond, "condition")) {
[17:39:07.831]                         if (!is.null(pattern)) {
[17:39:07.831]                           computeRestarts <- base::computeRestarts
[17:39:07.831]                           grepl <- base::grepl
[17:39:07.831]                           restarts <- computeRestarts(cond)
[17:39:07.831]                           for (restart in restarts) {
[17:39:07.831]                             name <- restart$name
[17:39:07.831]                             if (is.null(name)) 
[17:39:07.831]                               next
[17:39:07.831]                             if (!grepl(pattern, name)) 
[17:39:07.831]                               next
[17:39:07.831]                             invokeRestart(restart)
[17:39:07.831]                             muffled <- TRUE
[17:39:07.831]                             break
[17:39:07.831]                           }
[17:39:07.831]                         }
[17:39:07.831]                       }
[17:39:07.831]                       invisible(muffled)
[17:39:07.831]                     }
[17:39:07.831]                     muffleCondition(cond, pattern = "^muffle")
[17:39:07.831]                   }
[17:39:07.831]                 }
[17:39:07.831]                 else {
[17:39:07.831]                   if (TRUE) {
[17:39:07.831]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:07.831]                     {
[17:39:07.831]                       inherits <- base::inherits
[17:39:07.831]                       invokeRestart <- base::invokeRestart
[17:39:07.831]                       is.null <- base::is.null
[17:39:07.831]                       muffled <- FALSE
[17:39:07.831]                       if (inherits(cond, "message")) {
[17:39:07.831]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:07.831]                         if (muffled) 
[17:39:07.831]                           invokeRestart("muffleMessage")
[17:39:07.831]                       }
[17:39:07.831]                       else if (inherits(cond, "warning")) {
[17:39:07.831]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:07.831]                         if (muffled) 
[17:39:07.831]                           invokeRestart("muffleWarning")
[17:39:07.831]                       }
[17:39:07.831]                       else if (inherits(cond, "condition")) {
[17:39:07.831]                         if (!is.null(pattern)) {
[17:39:07.831]                           computeRestarts <- base::computeRestarts
[17:39:07.831]                           grepl <- base::grepl
[17:39:07.831]                           restarts <- computeRestarts(cond)
[17:39:07.831]                           for (restart in restarts) {
[17:39:07.831]                             name <- restart$name
[17:39:07.831]                             if (is.null(name)) 
[17:39:07.831]                               next
[17:39:07.831]                             if (!grepl(pattern, name)) 
[17:39:07.831]                               next
[17:39:07.831]                             invokeRestart(restart)
[17:39:07.831]                             muffled <- TRUE
[17:39:07.831]                             break
[17:39:07.831]                           }
[17:39:07.831]                         }
[17:39:07.831]                       }
[17:39:07.831]                       invisible(muffled)
[17:39:07.831]                     }
[17:39:07.831]                     muffleCondition(cond, pattern = "^muffle")
[17:39:07.831]                   }
[17:39:07.831]                 }
[17:39:07.831]             }
[17:39:07.831]         }))
[17:39:07.831]     }, error = function(ex) {
[17:39:07.831]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:07.831]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:07.831]                 ...future.rng), started = ...future.startTime, 
[17:39:07.831]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:07.831]             version = "1.8"), class = "FutureResult")
[17:39:07.831]     }, finally = {
[17:39:07.831]         if (!identical(...future.workdir, getwd())) 
[17:39:07.831]             setwd(...future.workdir)
[17:39:07.831]         {
[17:39:07.831]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:07.831]                 ...future.oldOptions$nwarnings <- NULL
[17:39:07.831]             }
[17:39:07.831]             base::options(...future.oldOptions)
[17:39:07.831]             if (.Platform$OS.type == "windows") {
[17:39:07.831]                 old_names <- names(...future.oldEnvVars)
[17:39:07.831]                 envs <- base::Sys.getenv()
[17:39:07.831]                 names <- names(envs)
[17:39:07.831]                 common <- intersect(names, old_names)
[17:39:07.831]                 added <- setdiff(names, old_names)
[17:39:07.831]                 removed <- setdiff(old_names, names)
[17:39:07.831]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:07.831]                   envs[common]]
[17:39:07.831]                 NAMES <- toupper(changed)
[17:39:07.831]                 args <- list()
[17:39:07.831]                 for (kk in seq_along(NAMES)) {
[17:39:07.831]                   name <- changed[[kk]]
[17:39:07.831]                   NAME <- NAMES[[kk]]
[17:39:07.831]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:07.831]                     next
[17:39:07.831]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:07.831]                 }
[17:39:07.831]                 NAMES <- toupper(added)
[17:39:07.831]                 for (kk in seq_along(NAMES)) {
[17:39:07.831]                   name <- added[[kk]]
[17:39:07.831]                   NAME <- NAMES[[kk]]
[17:39:07.831]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:07.831]                     next
[17:39:07.831]                   args[[name]] <- ""
[17:39:07.831]                 }
[17:39:07.831]                 NAMES <- toupper(removed)
[17:39:07.831]                 for (kk in seq_along(NAMES)) {
[17:39:07.831]                   name <- removed[[kk]]
[17:39:07.831]                   NAME <- NAMES[[kk]]
[17:39:07.831]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:07.831]                     next
[17:39:07.831]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:07.831]                 }
[17:39:07.831]                 if (length(args) > 0) 
[17:39:07.831]                   base::do.call(base::Sys.setenv, args = args)
[17:39:07.831]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:07.831]             }
[17:39:07.831]             else {
[17:39:07.831]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:07.831]             }
[17:39:07.831]             {
[17:39:07.831]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:07.831]                   0L) {
[17:39:07.831]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:07.831]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:07.831]                   base::options(opts)
[17:39:07.831]                 }
[17:39:07.831]                 {
[17:39:07.831]                   {
[17:39:07.831]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:07.831]                     NULL
[17:39:07.831]                   }
[17:39:07.831]                   options(future.plan = NULL)
[17:39:07.831]                   if (is.na(NA_character_)) 
[17:39:07.831]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:07.831]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:07.831]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:07.831]                     .init = FALSE)
[17:39:07.831]                 }
[17:39:07.831]             }
[17:39:07.831]         }
[17:39:07.831]     })
[17:39:07.831]     if (TRUE) {
[17:39:07.831]         base::sink(type = "output", split = FALSE)
[17:39:07.831]         if (TRUE) {
[17:39:07.831]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:07.831]         }
[17:39:07.831]         else {
[17:39:07.831]             ...future.result["stdout"] <- base::list(NULL)
[17:39:07.831]         }
[17:39:07.831]         base::close(...future.stdout)
[17:39:07.831]         ...future.stdout <- NULL
[17:39:07.831]     }
[17:39:07.831]     ...future.result$conditions <- ...future.conditions
[17:39:07.831]     ...future.result$finished <- base::Sys.time()
[17:39:07.831]     ...future.result
[17:39:07.831] }
[17:39:07.835] assign_globals() ...
[17:39:07.835] List of 4
[17:39:07.835]  $ ii   : int 4
[17:39:07.835]  $ n    : int 4
[17:39:07.835]  $ C    : cplx [1:25, 1:25] -0.719+0.0306i -0.719+0.0918i -0.719+0.1531i ...
[17:39:07.835]   ..- attr(*, "region")=List of 2
[17:39:07.835]   .. ..$ xrange: num [1:2] -0.719 0.75
[17:39:07.835]   .. ..$ yrange: num [1:2] 0.0306 1.5
[17:39:07.835]   ..- attr(*, "tile")= int [1:2] 2 2
[17:39:07.835]  $ delay:function (counts)  
[17:39:07.835]   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[17:39:07.835]   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x556cabc61798> 
[17:39:07.835]  - attr(*, "where")=List of 4
[17:39:07.835]   ..$ ii   :<environment: R_EmptyEnv> 
[17:39:07.835]   ..$ n    :<environment: R_EmptyEnv> 
[17:39:07.835]   ..$ C    :<environment: R_EmptyEnv> 
[17:39:07.835]   ..$ delay:<environment: R_EmptyEnv> 
[17:39:07.835]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:39:07.835]  - attr(*, "resolved")= logi FALSE
[17:39:07.835]  - attr(*, "total_size")= num 14584
[17:39:07.835]  - attr(*, "already-done")= logi TRUE
[17:39:07.844] - copied ‘ii’ to environment
[17:39:07.845] - copied ‘n’ to environment
[17:39:07.845] - copied ‘C’ to environment
[17:39:07.845] - reassign environment for ‘delay’
[17:39:07.845] - copied ‘delay’ to environment
[17:39:07.845] assign_globals() ... done
[17:39:07.845] requestCore(): workers = 2
[17:39:07.846] Poll #1 (0): usedCores() = 2, workers = 2
[17:39:07.856] result() for MulticoreFuture ...
[17:39:07.858] result() for MulticoreFuture ...
[17:39:07.858] result() for MulticoreFuture ... done
[17:39:07.858] signalConditions() ...
[17:39:07.858]  - include = ‘immediateCondition’
[17:39:07.858]  - exclude = 
[17:39:07.858]  - resignal = FALSE
[17:39:07.859]  - Number of conditions: 2
[17:39:07.859] signalConditions() ... done
[17:39:07.859] result() for MulticoreFuture ... done
[17:39:07.859] result() for MulticoreFuture ...
[17:39:07.859] result() for MulticoreFuture ... done
[17:39:07.860] signalConditions() ...
[17:39:07.860]  - include = ‘immediateCondition’
[17:39:07.860]  - exclude = 
[17:39:07.860]  - resignal = FALSE
[17:39:07.860]  - Number of conditions: 2
[17:39:07.860] signalConditions() ... done
[17:39:07.864] MulticoreFuture started
[17:39:07.864] - Launch lazy future ... done
[17:39:07.864] run() for ‘MulticoreFuture’ ... done
[17:39:07.864] - run() ... done
[17:39:07.865] - resolved() ...
[17:39:07.865] plan(): Setting new future strategy stack:
[17:39:07.865] List of future strategies:
[17:39:07.865] 1. sequential:
[17:39:07.865]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:07.865]    - tweaked: FALSE
[17:39:07.865]    - call: NULL
[17:39:07.866] plan(): nbrOfWorkers() = 1
[17:39:07.871] plan(): Setting new future strategy stack:
[17:39:07.871] List of future strategies:
[17:39:07.871] 1. multicore:
[17:39:07.871]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:39:07.871]    - tweaked: FALSE
[17:39:07.871]    - call: plan(strategy)
[17:39:07.875] - resolved: FALSE
[17:39:07.875] - resolved() ... done
[17:39:07.876] resolved() for ‘MulticoreFuture’ ... done
Plotting tile #2 of 4 ...
[17:39:07.876] result() for MulticoreFuture ...
[17:39:07.877] result() for MulticoreFuture ... done
[17:39:07.877] plan(): nbrOfWorkers() = 2
[17:39:07.877] result() for MulticoreFuture ...
[17:39:07.877] result() for MulticoreFuture ... done
[17:39:07.877] signalConditions() ...
[17:39:07.877]  - include = ‘immediateCondition’
[17:39:07.878]  - exclude = 
[17:39:07.878]  - resignal = FALSE
[17:39:07.878]  - Number of conditions: 2
[17:39:07.878] signalConditions() ... done
[17:39:07.878] Future state: ‘finished’
[17:39:07.878] result() for MulticoreFuture ...
[17:39:07.878] result() for MulticoreFuture ... done
[17:39:07.878] signalConditions() ...
[17:39:07.879]  - include = ‘condition’
[17:39:07.879]  - exclude = ‘immediateCondition’
[17:39:07.879]  - resignal = TRUE
[17:39:07.879]  - Number of conditions: 2
[17:39:07.879]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #2 of 4 ...[17:39:07.879]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[17:39:07.880] signalConditions() ... done
Plotting tile #3 of 4 ...
[17:39:07.881] result() for MulticoreFuture ...
[17:39:07.882] result() for MulticoreFuture ...
[17:39:07.882] result() for MulticoreFuture ... done
[17:39:07.882] signalConditions() ...
[17:39:07.883]  - include = ‘immediateCondition’
[17:39:07.883]  - exclude = 
[17:39:07.883]  - resignal = FALSE
[17:39:07.883]  - Number of conditions: 2
[17:39:07.883] signalConditions() ... done
[17:39:07.883] result() for MulticoreFuture ... done
[17:39:07.883] result() for MulticoreFuture ...
[17:39:07.883] result() for MulticoreFuture ... done
[17:39:07.884] signalConditions() ...
[17:39:07.884]  - include = ‘immediateCondition’
[17:39:07.884]  - exclude = 
[17:39:07.884]  - resignal = FALSE
[17:39:07.884]  - Number of conditions: 2
[17:39:07.884] signalConditions() ... done
[17:39:07.884] Future state: ‘finished’
[17:39:07.884] result() for MulticoreFuture ...
[17:39:07.885] result() for MulticoreFuture ... done
[17:39:07.885] signalConditions() ...
[17:39:07.885]  - include = ‘condition’
[17:39:07.885]  - exclude = ‘immediateCondition’
[17:39:07.885]  - resignal = TRUE
[17:39:07.885]  - Number of conditions: 2
[17:39:07.885]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #3 of 4 ...[17:39:07.886]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[17:39:07.886] signalConditions() ... done
Plotting tile #4 of 4 ...
[17:39:07.887] result() for MulticoreFuture ...
[17:39:07.888] result() for MulticoreFuture ...
[17:39:07.888] result() for MulticoreFuture ... done
[17:39:07.888] signalConditions() ...
[17:39:07.888]  - include = ‘immediateCondition’
[17:39:07.888]  - exclude = 
[17:39:07.888]  - resignal = FALSE
[17:39:07.889]  - Number of conditions: 2
[17:39:07.889] signalConditions() ... done
[17:39:07.889] result() for MulticoreFuture ... done
[17:39:07.889] result() for MulticoreFuture ...
[17:39:07.889] result() for MulticoreFuture ... done
[17:39:07.890] signalConditions() ...
[17:39:07.890]  - include = ‘immediateCondition’
[17:39:07.890]  - exclude = 
[17:39:07.890]  - resignal = FALSE
[17:39:07.890]  - Number of conditions: 2
[17:39:07.890] signalConditions() ... done
[17:39:07.890] Future state: ‘finished’
[17:39:07.891] result() for MulticoreFuture ...
[17:39:07.891] result() for MulticoreFuture ... done
[17:39:07.891] signalConditions() ...
[17:39:07.891]  - include = ‘condition’
[17:39:07.891]  - exclude = ‘immediateCondition’
[17:39:07.891]  - resignal = TRUE
[17:39:07.891]  - Number of conditions: 2
[17:39:07.892]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #4 of 4 ...[17:39:07.892]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[17:39:07.892] signalConditions() ... done

> close.screen()
[1] 1 2 3 4 5 6 7 8

> message("SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).\n")
SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).

- plan('multicore') ... DONE
- plan('multisession') ...
[17:39:07.894] plan(): Setting new future strategy stack:
[17:39:07.894] List of future strategies:
[17:39:07.894] 1. multisession:
[17:39:07.894]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:39:07.894]    - tweaked: FALSE
[17:39:07.894]    - call: plan(strategy)
[17:39:07.894] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:39:07.894] multisession:
[17:39:07.894] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:39:07.894] - tweaked: FALSE
[17:39:07.894] - call: plan(strategy)
[17:39:07.901] getGlobalsAndPackages() ...
[17:39:07.901] Not searching for globals
[17:39:07.901] - globals: [0] <none>
[17:39:07.901] getGlobalsAndPackages() ... DONE
[17:39:07.902] [local output] makeClusterPSOCK() ...
[17:39:07.962] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:39:07.964] [local output] Base port: 11747
[17:39:07.964] [local output] Getting setup options for 2 cluster nodes ...
[17:39:07.964] [local output]  - Node 1 of 2 ...
[17:39:07.964] [local output] localMachine=TRUE => revtunnel=FALSE

[17:39:07.965] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp6QNjz1/worker.rank=1.parallelly.parent=39981.9c2d1b023c28.pid")), silent = TRUE)' -e 'file.exists("/tmp/Rtmp6QNjz1/worker.rank=1.parallelly.parent=39981.9c2d1b023c28.pid")'’
[17:39:08.159] - Possible to infer worker's PID: TRUE
[17:39:08.159] [local output] Rscript port: 11747

[17:39:08.160] [local output]  - Node 2 of 2 ...
[17:39:08.160] [local output] localMachine=TRUE => revtunnel=FALSE

[17:39:08.161] [local output] Rscript port: 11747

[17:39:08.161] [local output] Getting setup options for 2 cluster nodes ... done
[17:39:08.161] [local output]  - Parallel setup requested for some PSOCK nodes
[17:39:08.162] [local output] Setting up PSOCK nodes in parallel
[17:39:08.162] List of 36
[17:39:08.162]  $ worker          : chr "localhost"
[17:39:08.162]   ..- attr(*, "localhost")= logi TRUE
[17:39:08.162]  $ master          : chr "localhost"
[17:39:08.162]  $ port            : int 11747
[17:39:08.162]  $ connectTimeout  : num 120
[17:39:08.162]  $ timeout         : num 2592000
[17:39:08.162]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:39:08.162]  $ homogeneous     : logi TRUE
[17:39:08.162]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:39:08.162]  $ rscript_envs    : NULL
[17:39:08.162]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:39:08.162]  $ rscript_startup : NULL
[17:39:08.162]  $ rscript_sh      : chr "sh"
[17:39:08.162]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:39:08.162]  $ methods         : logi TRUE
[17:39:08.162]  $ socketOptions   : chr "no-delay"
[17:39:08.162]  $ useXDR          : logi FALSE
[17:39:08.162]  $ outfile         : chr "/dev/null"
[17:39:08.162]  $ renice          : int NA
[17:39:08.162]  $ rshcmd          : NULL
[17:39:08.162]  $ user            : chr(0) 
[17:39:08.162]  $ revtunnel       : logi FALSE
[17:39:08.162]  $ rshlogfile      : NULL
[17:39:08.162]  $ rshopts         : chr(0) 
[17:39:08.162]  $ rank            : int 1
[17:39:08.162]  $ manual          : logi FALSE
[17:39:08.162]  $ dryrun          : logi FALSE
[17:39:08.162]  $ quiet           : logi FALSE
[17:39:08.162]  $ setup_strategy  : chr "parallel"
[17:39:08.162]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:39:08.162]  $ pidfile         : chr "/tmp/Rtmp6QNjz1/worker.rank=1.parallelly.parent=39981.9c2d1b023c28.pid"
[17:39:08.162]  $ rshcmd_label    : NULL
[17:39:08.162]  $ rsh_call        : NULL
[17:39:08.162]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:39:08.162]  $ localMachine    : logi TRUE
[17:39:08.162]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:39:08.162]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:39:08.162]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:39:08.162]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:39:08.162]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:39:08.162]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:39:08.162]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:39:08.162]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:39:08.162]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:39:08.162]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:39:08.162]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:39:08.162]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:39:08.162]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:39:08.162]  $ arguments       :List of 28
[17:39:08.162]   ..$ worker          : chr "localhost"
[17:39:08.162]   ..$ master          : NULL
[17:39:08.162]   ..$ port            : int 11747
[17:39:08.162]   ..$ connectTimeout  : num 120
[17:39:08.162]   ..$ timeout         : num 2592000
[17:39:08.162]   ..$ rscript         : NULL
[17:39:08.162]   ..$ homogeneous     : NULL
[17:39:08.162]   ..$ rscript_args    : NULL
[17:39:08.162]   ..$ rscript_envs    : NULL
[17:39:08.162]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:39:08.162]   ..$ rscript_startup : NULL
[17:39:08.162]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:39:08.162]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:39:08.162]   ..$ methods         : logi TRUE
[17:39:08.162]   ..$ socketOptions   : chr "no-delay"
[17:39:08.162]   ..$ useXDR          : logi FALSE
[17:39:08.162]   ..$ outfile         : chr "/dev/null"
[17:39:08.162]   ..$ renice          : int NA
[17:39:08.162]   ..$ rshcmd          : NULL
[17:39:08.162]   ..$ user            : NULL
[17:39:08.162]   ..$ revtunnel       : logi NA
[17:39:08.162]   ..$ rshlogfile      : NULL
[17:39:08.162]   ..$ rshopts         : NULL
[17:39:08.162]   ..$ rank            : int 1
[17:39:08.162]   ..$ manual          : logi FALSE
[17:39:08.162]   ..$ dryrun          : logi FALSE
[17:39:08.162]   ..$ quiet           : logi FALSE
[17:39:08.162]   ..$ setup_strategy  : chr "parallel"
[17:39:08.162]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:39:08.178] [local output] System call to launch all workers:
[17:39:08.178] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp6QNjz1/worker.rank=1.parallelly.parent=39981.9c2d1b023c28.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11747 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:39:08.178] [local output] Starting PSOCK main server
[17:39:08.184] [local output] Workers launched
[17:39:08.184] [local output] Waiting for workers to connect back
[17:39:08.185]  - [local output] 0 workers out of 2 ready
[17:39:08.426]  - [local output] 0 workers out of 2 ready
[17:39:08.426]  - [local output] 1 workers out of 2 ready
[17:39:08.429]  - [local output] 1 workers out of 2 ready
[17:39:08.429]  - [local output] 2 workers out of 2 ready
[17:39:08.429] [local output] Launching of workers completed
[17:39:08.429] [local output] Collecting session information from workers
[17:39:08.430] [local output]  - Worker #1 of 2
[17:39:08.431] [local output]  - Worker #2 of 2
[17:39:08.431] [local output] makeClusterPSOCK() ... done
[17:39:08.441] Packages needed by the future expression (n = 0): <none>
[17:39:08.441] Packages needed by future strategies (n = 0): <none>
[17:39:08.442] {
[17:39:08.442]     {
[17:39:08.442]         {
[17:39:08.442]             ...future.startTime <- base::Sys.time()
[17:39:08.442]             {
[17:39:08.442]                 {
[17:39:08.442]                   {
[17:39:08.442]                     {
[17:39:08.442]                       base::local({
[17:39:08.442]                         has_future <- base::requireNamespace("future", 
[17:39:08.442]                           quietly = TRUE)
[17:39:08.442]                         if (has_future) {
[17:39:08.442]                           ns <- base::getNamespace("future")
[17:39:08.442]                           version <- ns[[".package"]][["version"]]
[17:39:08.442]                           if (is.null(version)) 
[17:39:08.442]                             version <- utils::packageVersion("future")
[17:39:08.442]                         }
[17:39:08.442]                         else {
[17:39:08.442]                           version <- NULL
[17:39:08.442]                         }
[17:39:08.442]                         if (!has_future || version < "1.8.0") {
[17:39:08.442]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:08.442]                             "", base::R.version$version.string), 
[17:39:08.442]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:08.442]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:08.442]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:08.442]                               "release", "version")], collapse = " "), 
[17:39:08.442]                             hostname = base::Sys.info()[["nodename"]])
[17:39:08.442]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:08.442]                             info)
[17:39:08.442]                           info <- base::paste(info, collapse = "; ")
[17:39:08.442]                           if (!has_future) {
[17:39:08.442]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:08.442]                               info)
[17:39:08.442]                           }
[17:39:08.442]                           else {
[17:39:08.442]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:08.442]                               info, version)
[17:39:08.442]                           }
[17:39:08.442]                           base::stop(msg)
[17:39:08.442]                         }
[17:39:08.442]                       })
[17:39:08.442]                     }
[17:39:08.442]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:08.442]                     base::options(mc.cores = 1L)
[17:39:08.442]                   }
[17:39:08.442]                   ...future.strategy.old <- future::plan("list")
[17:39:08.442]                   options(future.plan = NULL)
[17:39:08.442]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:08.442]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:08.442]                 }
[17:39:08.442]                 ...future.workdir <- getwd()
[17:39:08.442]             }
[17:39:08.442]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:08.442]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:08.442]         }
[17:39:08.442]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:08.442]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:08.442]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:08.442]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:08.442]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:08.442]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:08.442]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:08.442]             base::names(...future.oldOptions))
[17:39:08.442]     }
[17:39:08.442]     if (FALSE) {
[17:39:08.442]     }
[17:39:08.442]     else {
[17:39:08.442]         if (TRUE) {
[17:39:08.442]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:08.442]                 open = "w")
[17:39:08.442]         }
[17:39:08.442]         else {
[17:39:08.442]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:08.442]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:08.442]         }
[17:39:08.442]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:08.442]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:08.442]             base::sink(type = "output", split = FALSE)
[17:39:08.442]             base::close(...future.stdout)
[17:39:08.442]         }, add = TRUE)
[17:39:08.442]     }
[17:39:08.442]     ...future.frame <- base::sys.nframe()
[17:39:08.442]     ...future.conditions <- base::list()
[17:39:08.442]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:08.442]     if (FALSE) {
[17:39:08.442]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:08.442]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:08.442]     }
[17:39:08.442]     ...future.result <- base::tryCatch({
[17:39:08.442]         base::withCallingHandlers({
[17:39:08.442]             ...future.value <- base::withVisible(base::local({
[17:39:08.442]                 ...future.makeSendCondition <- base::local({
[17:39:08.442]                   sendCondition <- NULL
[17:39:08.442]                   function(frame = 1L) {
[17:39:08.442]                     if (is.function(sendCondition)) 
[17:39:08.442]                       return(sendCondition)
[17:39:08.442]                     ns <- getNamespace("parallel")
[17:39:08.442]                     if (exists("sendData", mode = "function", 
[17:39:08.442]                       envir = ns)) {
[17:39:08.442]                       parallel_sendData <- get("sendData", mode = "function", 
[17:39:08.442]                         envir = ns)
[17:39:08.442]                       envir <- sys.frame(frame)
[17:39:08.442]                       master <- NULL
[17:39:08.442]                       while (!identical(envir, .GlobalEnv) && 
[17:39:08.442]                         !identical(envir, emptyenv())) {
[17:39:08.442]                         if (exists("master", mode = "list", envir = envir, 
[17:39:08.442]                           inherits = FALSE)) {
[17:39:08.442]                           master <- get("master", mode = "list", 
[17:39:08.442]                             envir = envir, inherits = FALSE)
[17:39:08.442]                           if (inherits(master, c("SOCKnode", 
[17:39:08.442]                             "SOCK0node"))) {
[17:39:08.442]                             sendCondition <<- function(cond) {
[17:39:08.442]                               data <- list(type = "VALUE", value = cond, 
[17:39:08.442]                                 success = TRUE)
[17:39:08.442]                               parallel_sendData(master, data)
[17:39:08.442]                             }
[17:39:08.442]                             return(sendCondition)
[17:39:08.442]                           }
[17:39:08.442]                         }
[17:39:08.442]                         frame <- frame + 1L
[17:39:08.442]                         envir <- sys.frame(frame)
[17:39:08.442]                       }
[17:39:08.442]                     }
[17:39:08.442]                     sendCondition <<- function(cond) NULL
[17:39:08.442]                   }
[17:39:08.442]                 })
[17:39:08.442]                 withCallingHandlers({
[17:39:08.442]                   NA
[17:39:08.442]                 }, immediateCondition = function(cond) {
[17:39:08.442]                   sendCondition <- ...future.makeSendCondition()
[17:39:08.442]                   sendCondition(cond)
[17:39:08.442]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:08.442]                   {
[17:39:08.442]                     inherits <- base::inherits
[17:39:08.442]                     invokeRestart <- base::invokeRestart
[17:39:08.442]                     is.null <- base::is.null
[17:39:08.442]                     muffled <- FALSE
[17:39:08.442]                     if (inherits(cond, "message")) {
[17:39:08.442]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:08.442]                       if (muffled) 
[17:39:08.442]                         invokeRestart("muffleMessage")
[17:39:08.442]                     }
[17:39:08.442]                     else if (inherits(cond, "warning")) {
[17:39:08.442]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:08.442]                       if (muffled) 
[17:39:08.442]                         invokeRestart("muffleWarning")
[17:39:08.442]                     }
[17:39:08.442]                     else if (inherits(cond, "condition")) {
[17:39:08.442]                       if (!is.null(pattern)) {
[17:39:08.442]                         computeRestarts <- base::computeRestarts
[17:39:08.442]                         grepl <- base::grepl
[17:39:08.442]                         restarts <- computeRestarts(cond)
[17:39:08.442]                         for (restart in restarts) {
[17:39:08.442]                           name <- restart$name
[17:39:08.442]                           if (is.null(name)) 
[17:39:08.442]                             next
[17:39:08.442]                           if (!grepl(pattern, name)) 
[17:39:08.442]                             next
[17:39:08.442]                           invokeRestart(restart)
[17:39:08.442]                           muffled <- TRUE
[17:39:08.442]                           break
[17:39:08.442]                         }
[17:39:08.442]                       }
[17:39:08.442]                     }
[17:39:08.442]                     invisible(muffled)
[17:39:08.442]                   }
[17:39:08.442]                   muffleCondition(cond)
[17:39:08.442]                 })
[17:39:08.442]             }))
[17:39:08.442]             future::FutureResult(value = ...future.value$value, 
[17:39:08.442]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:08.442]                   ...future.rng), globalenv = if (FALSE) 
[17:39:08.442]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:08.442]                     ...future.globalenv.names))
[17:39:08.442]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:08.442]         }, condition = base::local({
[17:39:08.442]             c <- base::c
[17:39:08.442]             inherits <- base::inherits
[17:39:08.442]             invokeRestart <- base::invokeRestart
[17:39:08.442]             length <- base::length
[17:39:08.442]             list <- base::list
[17:39:08.442]             seq.int <- base::seq.int
[17:39:08.442]             signalCondition <- base::signalCondition
[17:39:08.442]             sys.calls <- base::sys.calls
[17:39:08.442]             `[[` <- base::`[[`
[17:39:08.442]             `+` <- base::`+`
[17:39:08.442]             `<<-` <- base::`<<-`
[17:39:08.442]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:08.442]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:08.442]                   3L)]
[17:39:08.442]             }
[17:39:08.442]             function(cond) {
[17:39:08.442]                 is_error <- inherits(cond, "error")
[17:39:08.442]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:08.442]                   NULL)
[17:39:08.442]                 if (is_error) {
[17:39:08.442]                   sessionInformation <- function() {
[17:39:08.442]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:08.442]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:08.442]                       search = base::search(), system = base::Sys.info())
[17:39:08.442]                   }
[17:39:08.442]                   ...future.conditions[[length(...future.conditions) + 
[17:39:08.442]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:08.442]                     cond$call), session = sessionInformation(), 
[17:39:08.442]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:08.442]                   signalCondition(cond)
[17:39:08.442]                 }
[17:39:08.442]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:08.442]                 "immediateCondition"))) {
[17:39:08.442]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:08.442]                   ...future.conditions[[length(...future.conditions) + 
[17:39:08.442]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:08.442]                   if (TRUE && !signal) {
[17:39:08.442]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:08.442]                     {
[17:39:08.442]                       inherits <- base::inherits
[17:39:08.442]                       invokeRestart <- base::invokeRestart
[17:39:08.442]                       is.null <- base::is.null
[17:39:08.442]                       muffled <- FALSE
[17:39:08.442]                       if (inherits(cond, "message")) {
[17:39:08.442]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:08.442]                         if (muffled) 
[17:39:08.442]                           invokeRestart("muffleMessage")
[17:39:08.442]                       }
[17:39:08.442]                       else if (inherits(cond, "warning")) {
[17:39:08.442]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:08.442]                         if (muffled) 
[17:39:08.442]                           invokeRestart("muffleWarning")
[17:39:08.442]                       }
[17:39:08.442]                       else if (inherits(cond, "condition")) {
[17:39:08.442]                         if (!is.null(pattern)) {
[17:39:08.442]                           computeRestarts <- base::computeRestarts
[17:39:08.442]                           grepl <- base::grepl
[17:39:08.442]                           restarts <- computeRestarts(cond)
[17:39:08.442]                           for (restart in restarts) {
[17:39:08.442]                             name <- restart$name
[17:39:08.442]                             if (is.null(name)) 
[17:39:08.442]                               next
[17:39:08.442]                             if (!grepl(pattern, name)) 
[17:39:08.442]                               next
[17:39:08.442]                             invokeRestart(restart)
[17:39:08.442]                             muffled <- TRUE
[17:39:08.442]                             break
[17:39:08.442]                           }
[17:39:08.442]                         }
[17:39:08.442]                       }
[17:39:08.442]                       invisible(muffled)
[17:39:08.442]                     }
[17:39:08.442]                     muffleCondition(cond, pattern = "^muffle")
[17:39:08.442]                   }
[17:39:08.442]                 }
[17:39:08.442]                 else {
[17:39:08.442]                   if (TRUE) {
[17:39:08.442]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:08.442]                     {
[17:39:08.442]                       inherits <- base::inherits
[17:39:08.442]                       invokeRestart <- base::invokeRestart
[17:39:08.442]                       is.null <- base::is.null
[17:39:08.442]                       muffled <- FALSE
[17:39:08.442]                       if (inherits(cond, "message")) {
[17:39:08.442]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:08.442]                         if (muffled) 
[17:39:08.442]                           invokeRestart("muffleMessage")
[17:39:08.442]                       }
[17:39:08.442]                       else if (inherits(cond, "warning")) {
[17:39:08.442]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:08.442]                         if (muffled) 
[17:39:08.442]                           invokeRestart("muffleWarning")
[17:39:08.442]                       }
[17:39:08.442]                       else if (inherits(cond, "condition")) {
[17:39:08.442]                         if (!is.null(pattern)) {
[17:39:08.442]                           computeRestarts <- base::computeRestarts
[17:39:08.442]                           grepl <- base::grepl
[17:39:08.442]                           restarts <- computeRestarts(cond)
[17:39:08.442]                           for (restart in restarts) {
[17:39:08.442]                             name <- restart$name
[17:39:08.442]                             if (is.null(name)) 
[17:39:08.442]                               next
[17:39:08.442]                             if (!grepl(pattern, name)) 
[17:39:08.442]                               next
[17:39:08.442]                             invokeRestart(restart)
[17:39:08.442]                             muffled <- TRUE
[17:39:08.442]                             break
[17:39:08.442]                           }
[17:39:08.442]                         }
[17:39:08.442]                       }
[17:39:08.442]                       invisible(muffled)
[17:39:08.442]                     }
[17:39:08.442]                     muffleCondition(cond, pattern = "^muffle")
[17:39:08.442]                   }
[17:39:08.442]                 }
[17:39:08.442]             }
[17:39:08.442]         }))
[17:39:08.442]     }, error = function(ex) {
[17:39:08.442]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:08.442]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:08.442]                 ...future.rng), started = ...future.startTime, 
[17:39:08.442]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:08.442]             version = "1.8"), class = "FutureResult")
[17:39:08.442]     }, finally = {
[17:39:08.442]         if (!identical(...future.workdir, getwd())) 
[17:39:08.442]             setwd(...future.workdir)
[17:39:08.442]         {
[17:39:08.442]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:08.442]                 ...future.oldOptions$nwarnings <- NULL
[17:39:08.442]             }
[17:39:08.442]             base::options(...future.oldOptions)
[17:39:08.442]             if (.Platform$OS.type == "windows") {
[17:39:08.442]                 old_names <- names(...future.oldEnvVars)
[17:39:08.442]                 envs <- base::Sys.getenv()
[17:39:08.442]                 names <- names(envs)
[17:39:08.442]                 common <- intersect(names, old_names)
[17:39:08.442]                 added <- setdiff(names, old_names)
[17:39:08.442]                 removed <- setdiff(old_names, names)
[17:39:08.442]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:08.442]                   envs[common]]
[17:39:08.442]                 NAMES <- toupper(changed)
[17:39:08.442]                 args <- list()
[17:39:08.442]                 for (kk in seq_along(NAMES)) {
[17:39:08.442]                   name <- changed[[kk]]
[17:39:08.442]                   NAME <- NAMES[[kk]]
[17:39:08.442]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:08.442]                     next
[17:39:08.442]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:08.442]                 }
[17:39:08.442]                 NAMES <- toupper(added)
[17:39:08.442]                 for (kk in seq_along(NAMES)) {
[17:39:08.442]                   name <- added[[kk]]
[17:39:08.442]                   NAME <- NAMES[[kk]]
[17:39:08.442]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:08.442]                     next
[17:39:08.442]                   args[[name]] <- ""
[17:39:08.442]                 }
[17:39:08.442]                 NAMES <- toupper(removed)
[17:39:08.442]                 for (kk in seq_along(NAMES)) {
[17:39:08.442]                   name <- removed[[kk]]
[17:39:08.442]                   NAME <- NAMES[[kk]]
[17:39:08.442]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:08.442]                     next
[17:39:08.442]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:08.442]                 }
[17:39:08.442]                 if (length(args) > 0) 
[17:39:08.442]                   base::do.call(base::Sys.setenv, args = args)
[17:39:08.442]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:08.442]             }
[17:39:08.442]             else {
[17:39:08.442]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:08.442]             }
[17:39:08.442]             {
[17:39:08.442]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:08.442]                   0L) {
[17:39:08.442]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:08.442]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:08.442]                   base::options(opts)
[17:39:08.442]                 }
[17:39:08.442]                 {
[17:39:08.442]                   {
[17:39:08.442]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:08.442]                     NULL
[17:39:08.442]                   }
[17:39:08.442]                   options(future.plan = NULL)
[17:39:08.442]                   if (is.na(NA_character_)) 
[17:39:08.442]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:08.442]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:08.442]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:08.442]                     .init = FALSE)
[17:39:08.442]                 }
[17:39:08.442]             }
[17:39:08.442]         }
[17:39:08.442]     })
[17:39:08.442]     if (TRUE) {
[17:39:08.442]         base::sink(type = "output", split = FALSE)
[17:39:08.442]         if (TRUE) {
[17:39:08.442]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:08.442]         }
[17:39:08.442]         else {
[17:39:08.442]             ...future.result["stdout"] <- base::list(NULL)
[17:39:08.442]         }
[17:39:08.442]         base::close(...future.stdout)
[17:39:08.442]         ...future.stdout <- NULL
[17:39:08.442]     }
[17:39:08.442]     ...future.result$conditions <- ...future.conditions
[17:39:08.442]     ...future.result$finished <- base::Sys.time()
[17:39:08.442]     ...future.result
[17:39:08.442] }
[17:39:08.494] MultisessionFuture started
[17:39:08.494] result() for ClusterFuture ...
[17:39:08.495] receiveMessageFromWorker() for ClusterFuture ...
[17:39:08.495] - Validating connection of MultisessionFuture
[17:39:08.526] - received message: FutureResult
[17:39:08.527] - Received FutureResult
[17:39:08.527] - Erased future from FutureRegistry
[17:39:08.527] result() for ClusterFuture ...
[17:39:08.527] - result already collected: FutureResult
[17:39:08.527] result() for ClusterFuture ... done
[17:39:08.527] receiveMessageFromWorker() for ClusterFuture ... done
[17:39:08.527] result() for ClusterFuture ... done
[17:39:08.527] result() for ClusterFuture ...
[17:39:08.527] - result already collected: FutureResult
[17:39:08.528] result() for ClusterFuture ... done
[17:39:08.528] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:39:08.531] plan(): nbrOfWorkers() = 2


	demo(mandelbrot)
	---- ~~~~~~~~~~

> library("future")

> library("graphics")

> plot_what_is_done <- function(counts) {
+   for (kk in seq_along(counts)) {
+     f <- counts[[kk]]
+ 
+     ## Already plotted?
+     if (!inherits(f, "Future")) next
+ 
+     ## Not resolved?
+     if (!resolved(f)) next
+ 
+     message(sprintf("Plotting tile #%d of %d ...", kk, n))
+     counts[[kk]] <- value(f)
+     screen(kk)
+     plot(counts[[kk]])
+   }
+ 
+   counts
+ }

> ## Options
> region <- getOption("future.demo.mandelbrot.region", 1L)

> if (!is.list(region)) {
+   if (region == 1L) {
+     region <- list(xmid = -0.75, ymid = 0.0, side = 3.0)
+   } else if (region == 2L) {
+     region <- list(xmid = 0.283, ymid = -0.0095, side = 0.00026)
+   } else if (region == 3L) {
+     region <- list(xmid = 0.282989, ymid = -0.01, side = 3e-8)
+   }
+ }

> nrow <- getOption("future.demo.mandelbrot.nrow", 3L)

> resolution <- getOption("future.demo.mandelbrot.resolution", 400L)

> delay <- getOption("future.demo.mandelbrot.delay", interactive())

> if (isTRUE(delay)) {
+   delay <- function(counts) Sys.sleep(1.0)
+ } else if (!is.function(delay)) {
+   delay <- function(counts) {}
+ }

> ## Generate Mandelbrot tiles to be computed
> Cs <- mandelbrot_tiles(xmid = region$xmid, ymid = region$ymid,
+                        side = region$side, nrow = nrow,
+                        resolution = resolution)

> if (interactive()) {
+   dev.new()
+   plot.new()
+   split.screen(dim(Cs))
+   for (ii in seq_along(Cs)) {
+     screen(ii)
+     par(mar = c(0, 0, 0, 0))
+     text(x = 1 / 2, y = 1 / 2, sprintf("Future #%d\nunresolved", ii), cex = 2)
+   }
+ } else {
+   split.screen(dim(Cs))
+ }
[1]  9 10 11 12

> ## Create all Mandelbrot tiles via lazy futures
> n <- length(Cs)

> message(sprintf("Creating %d Mandelbrot tiles:", n), appendLF = FALSE)
Creating 4 Mandelbrot tiles:
> counts <- lapply(seq_along(Cs), FUN=function(ii) {
+   message(" ", ii, appendLF = FALSE)
+   C <- Cs[[ii]]
+   future({
+     message(sprintf("Calculating tile #%d of %d ...", ii, n), appendLF = FALSE)
+     fit <- mandelbrot(C)
+ 
+     ## Emulate slowness
+     delay(fit)
+ 
+     message(" done")
+     fit
+   }, lazy = TRUE)
+ })
 1[17:39:08.535] getGlobalsAndPackages() ...
[17:39:08.535] Searching for globals...
[17:39:08.539] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[17:39:08.539] Searching for globals ... DONE
[17:39:08.539] Resolving globals: FALSE
[17:39:08.539] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[17:39:08.540] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[17:39:08.540] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[17:39:08.540] - packages: [1] ‘future’
[17:39:08.540] getGlobalsAndPackages() ... DONE
 2[17:39:08.544] getGlobalsAndPackages() ...
[17:39:08.544] Searching for globals...
[17:39:08.547] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[17:39:08.547] Searching for globals ... DONE
[17:39:08.547] Resolving globals: FALSE
[17:39:08.548] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[17:39:08.548] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[17:39:08.549] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[17:39:08.549] - packages: [1] ‘future’
[17:39:08.549] getGlobalsAndPackages() ... DONE
 3[17:39:08.549] getGlobalsAndPackages() ...
[17:39:08.549] Searching for globals...
[17:39:08.552] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[17:39:08.552] Searching for globals ... DONE
[17:39:08.553] Resolving globals: FALSE
[17:39:08.553] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[17:39:08.553] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[17:39:08.554] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[17:39:08.554] - packages: [1] ‘future’
[17:39:08.554] getGlobalsAndPackages() ... DONE
 4[17:39:08.554] getGlobalsAndPackages() ...
[17:39:08.554] Searching for globals...
[17:39:08.557] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[17:39:08.558] Searching for globals ... DONE
[17:39:08.558] Resolving globals: FALSE
[17:39:08.558] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[17:39:08.559] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[17:39:08.559] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[17:39:08.559] - packages: [1] ‘future’
[17:39:08.559] getGlobalsAndPackages() ... DONE

> message(".")
.

> ## Calculate and plot tiles
> repeat {
+   counts <- plot_what_is_done(counts)
+   if (!any(sapply(counts, FUN = inherits, "Future"))) break
+ }
[17:39:08.570] resolved() for ‘Future’ ...
[17:39:08.570] - state: ‘created’
[17:39:08.570] - run: TRUE
[17:39:08.571] - run() ...
[17:39:08.571] run() for ‘Future’ ...
[17:39:08.571] - state: ‘created’
[17:39:08.571] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:39:08.584] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:08.584] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:39:08.585]   - Field: ‘node’
[17:39:08.585]   - Field: ‘label’
[17:39:08.585]   - Field: ‘local’
[17:39:08.585]   - Field: ‘owner’
[17:39:08.585]   - Field: ‘envir’
[17:39:08.585]   - Field: ‘workers’
[17:39:08.585]   - Field: ‘packages’
[17:39:08.585]   - Field: ‘gc’
[17:39:08.585]   - Field: ‘conditions’
[17:39:08.585]   - Field: ‘persistent’
[17:39:08.585]   - Field: ‘expr’
[17:39:08.586]   - Field: ‘uuid’
[17:39:08.586]   - Field: ‘seed’
[17:39:08.586]   - Field: ‘version’
[17:39:08.586]   - Field: ‘result’
[17:39:08.586]   - Field: ‘asynchronous’
[17:39:08.586]   - Field: ‘calls’
[17:39:08.586]   - Field: ‘globals’
[17:39:08.586]   - Field: ‘stdout’
[17:39:08.586]   - Field: ‘earlySignal’
[17:39:08.586]   - Field: ‘lazy’
[17:39:08.586]   - Field: ‘state’
[17:39:08.586] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:39:08.587] - Launch lazy future ...
[17:39:08.587] Packages needed by the future expression (n = 1): ‘future’
[17:39:08.587] Packages needed by future strategies (n = 0): <none>
[17:39:08.587] {
[17:39:08.587]     {
[17:39:08.587]         {
[17:39:08.587]             ...future.startTime <- base::Sys.time()
[17:39:08.587]             {
[17:39:08.587]                 {
[17:39:08.587]                   {
[17:39:08.587]                     {
[17:39:08.587]                       {
[17:39:08.587]                         base::local({
[17:39:08.587]                           has_future <- base::requireNamespace("future", 
[17:39:08.587]                             quietly = TRUE)
[17:39:08.587]                           if (has_future) {
[17:39:08.587]                             ns <- base::getNamespace("future")
[17:39:08.587]                             version <- ns[[".package"]][["version"]]
[17:39:08.587]                             if (is.null(version)) 
[17:39:08.587]                               version <- utils::packageVersion("future")
[17:39:08.587]                           }
[17:39:08.587]                           else {
[17:39:08.587]                             version <- NULL
[17:39:08.587]                           }
[17:39:08.587]                           if (!has_future || version < "1.8.0") {
[17:39:08.587]                             info <- base::c(r_version = base::gsub("R version ", 
[17:39:08.587]                               "", base::R.version$version.string), 
[17:39:08.587]                               platform = base::sprintf("%s (%s-bit)", 
[17:39:08.587]                                 base::R.version$platform, 8 * 
[17:39:08.587]                                   base::.Machine$sizeof.pointer), 
[17:39:08.587]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:08.587]                                 "release", "version")], collapse = " "), 
[17:39:08.587]                               hostname = base::Sys.info()[["nodename"]])
[17:39:08.587]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:39:08.587]                               info)
[17:39:08.587]                             info <- base::paste(info, collapse = "; ")
[17:39:08.587]                             if (!has_future) {
[17:39:08.587]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:08.587]                                 info)
[17:39:08.587]                             }
[17:39:08.587]                             else {
[17:39:08.587]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:08.587]                                 info, version)
[17:39:08.587]                             }
[17:39:08.587]                             base::stop(msg)
[17:39:08.587]                           }
[17:39:08.587]                         })
[17:39:08.587]                       }
[17:39:08.587]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:08.587]                       base::options(mc.cores = 1L)
[17:39:08.587]                     }
[17:39:08.587]                     base::local({
[17:39:08.587]                       for (pkg in "future") {
[17:39:08.587]                         base::loadNamespace(pkg)
[17:39:08.587]                         base::library(pkg, character.only = TRUE)
[17:39:08.587]                       }
[17:39:08.587]                     })
[17:39:08.587]                   }
[17:39:08.587]                   ...future.strategy.old <- future::plan("list")
[17:39:08.587]                   options(future.plan = NULL)
[17:39:08.587]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:08.587]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:08.587]                 }
[17:39:08.587]                 ...future.workdir <- getwd()
[17:39:08.587]             }
[17:39:08.587]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:08.587]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:08.587]         }
[17:39:08.587]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:08.587]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:08.587]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:08.587]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:08.587]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:08.587]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:08.587]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:08.587]             base::names(...future.oldOptions))
[17:39:08.587]     }
[17:39:08.587]     if (FALSE) {
[17:39:08.587]     }
[17:39:08.587]     else {
[17:39:08.587]         if (TRUE) {
[17:39:08.587]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:08.587]                 open = "w")
[17:39:08.587]         }
[17:39:08.587]         else {
[17:39:08.587]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:08.587]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:08.587]         }
[17:39:08.587]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:08.587]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:08.587]             base::sink(type = "output", split = FALSE)
[17:39:08.587]             base::close(...future.stdout)
[17:39:08.587]         }, add = TRUE)
[17:39:08.587]     }
[17:39:08.587]     ...future.frame <- base::sys.nframe()
[17:39:08.587]     ...future.conditions <- base::list()
[17:39:08.587]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:08.587]     if (FALSE) {
[17:39:08.587]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:08.587]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:08.587]     }
[17:39:08.587]     ...future.result <- base::tryCatch({
[17:39:08.587]         base::withCallingHandlers({
[17:39:08.587]             ...future.value <- base::withVisible(base::local({
[17:39:08.587]                 ...future.makeSendCondition <- base::local({
[17:39:08.587]                   sendCondition <- NULL
[17:39:08.587]                   function(frame = 1L) {
[17:39:08.587]                     if (is.function(sendCondition)) 
[17:39:08.587]                       return(sendCondition)
[17:39:08.587]                     ns <- getNamespace("parallel")
[17:39:08.587]                     if (exists("sendData", mode = "function", 
[17:39:08.587]                       envir = ns)) {
[17:39:08.587]                       parallel_sendData <- get("sendData", mode = "function", 
[17:39:08.587]                         envir = ns)
[17:39:08.587]                       envir <- sys.frame(frame)
[17:39:08.587]                       master <- NULL
[17:39:08.587]                       while (!identical(envir, .GlobalEnv) && 
[17:39:08.587]                         !identical(envir, emptyenv())) {
[17:39:08.587]                         if (exists("master", mode = "list", envir = envir, 
[17:39:08.587]                           inherits = FALSE)) {
[17:39:08.587]                           master <- get("master", mode = "list", 
[17:39:08.587]                             envir = envir, inherits = FALSE)
[17:39:08.587]                           if (inherits(master, c("SOCKnode", 
[17:39:08.587]                             "SOCK0node"))) {
[17:39:08.587]                             sendCondition <<- function(cond) {
[17:39:08.587]                               data <- list(type = "VALUE", value = cond, 
[17:39:08.587]                                 success = TRUE)
[17:39:08.587]                               parallel_sendData(master, data)
[17:39:08.587]                             }
[17:39:08.587]                             return(sendCondition)
[17:39:08.587]                           }
[17:39:08.587]                         }
[17:39:08.587]                         frame <- frame + 1L
[17:39:08.587]                         envir <- sys.frame(frame)
[17:39:08.587]                       }
[17:39:08.587]                     }
[17:39:08.587]                     sendCondition <<- function(cond) NULL
[17:39:08.587]                   }
[17:39:08.587]                 })
[17:39:08.587]                 withCallingHandlers({
[17:39:08.587]                   {
[17:39:08.587]                     message(sprintf("Calculating tile #%d of %d ...", 
[17:39:08.587]                       ii, n), appendLF = FALSE)
[17:39:08.587]                     fit <- mandelbrot(C)
[17:39:08.587]                     delay(fit)
[17:39:08.587]                     message(" done")
[17:39:08.587]                     fit
[17:39:08.587]                   }
[17:39:08.587]                 }, immediateCondition = function(cond) {
[17:39:08.587]                   sendCondition <- ...future.makeSendCondition()
[17:39:08.587]                   sendCondition(cond)
[17:39:08.587]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:08.587]                   {
[17:39:08.587]                     inherits <- base::inherits
[17:39:08.587]                     invokeRestart <- base::invokeRestart
[17:39:08.587]                     is.null <- base::is.null
[17:39:08.587]                     muffled <- FALSE
[17:39:08.587]                     if (inherits(cond, "message")) {
[17:39:08.587]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:08.587]                       if (muffled) 
[17:39:08.587]                         invokeRestart("muffleMessage")
[17:39:08.587]                     }
[17:39:08.587]                     else if (inherits(cond, "warning")) {
[17:39:08.587]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:08.587]                       if (muffled) 
[17:39:08.587]                         invokeRestart("muffleWarning")
[17:39:08.587]                     }
[17:39:08.587]                     else if (inherits(cond, "condition")) {
[17:39:08.587]                       if (!is.null(pattern)) {
[17:39:08.587]                         computeRestarts <- base::computeRestarts
[17:39:08.587]                         grepl <- base::grepl
[17:39:08.587]                         restarts <- computeRestarts(cond)
[17:39:08.587]                         for (restart in restarts) {
[17:39:08.587]                           name <- restart$name
[17:39:08.587]                           if (is.null(name)) 
[17:39:08.587]                             next
[17:39:08.587]                           if (!grepl(pattern, name)) 
[17:39:08.587]                             next
[17:39:08.587]                           invokeRestart(restart)
[17:39:08.587]                           muffled <- TRUE
[17:39:08.587]                           break
[17:39:08.587]                         }
[17:39:08.587]                       }
[17:39:08.587]                     }
[17:39:08.587]                     invisible(muffled)
[17:39:08.587]                   }
[17:39:08.587]                   muffleCondition(cond)
[17:39:08.587]                 })
[17:39:08.587]             }))
[17:39:08.587]             future::FutureResult(value = ...future.value$value, 
[17:39:08.587]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:08.587]                   ...future.rng), globalenv = if (FALSE) 
[17:39:08.587]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:08.587]                     ...future.globalenv.names))
[17:39:08.587]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:08.587]         }, condition = base::local({
[17:39:08.587]             c <- base::c
[17:39:08.587]             inherits <- base::inherits
[17:39:08.587]             invokeRestart <- base::invokeRestart
[17:39:08.587]             length <- base::length
[17:39:08.587]             list <- base::list
[17:39:08.587]             seq.int <- base::seq.int
[17:39:08.587]             signalCondition <- base::signalCondition
[17:39:08.587]             sys.calls <- base::sys.calls
[17:39:08.587]             `[[` <- base::`[[`
[17:39:08.587]             `+` <- base::`+`
[17:39:08.587]             `<<-` <- base::`<<-`
[17:39:08.587]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:08.587]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:08.587]                   3L)]
[17:39:08.587]             }
[17:39:08.587]             function(cond) {
[17:39:08.587]                 is_error <- inherits(cond, "error")
[17:39:08.587]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:08.587]                   NULL)
[17:39:08.587]                 if (is_error) {
[17:39:08.587]                   sessionInformation <- function() {
[17:39:08.587]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:08.587]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:08.587]                       search = base::search(), system = base::Sys.info())
[17:39:08.587]                   }
[17:39:08.587]                   ...future.conditions[[length(...future.conditions) + 
[17:39:08.587]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:08.587]                     cond$call), session = sessionInformation(), 
[17:39:08.587]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:08.587]                   signalCondition(cond)
[17:39:08.587]                 }
[17:39:08.587]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:08.587]                 "immediateCondition"))) {
[17:39:08.587]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:08.587]                   ...future.conditions[[length(...future.conditions) + 
[17:39:08.587]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:08.587]                   if (TRUE && !signal) {
[17:39:08.587]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:08.587]                     {
[17:39:08.587]                       inherits <- base::inherits
[17:39:08.587]                       invokeRestart <- base::invokeRestart
[17:39:08.587]                       is.null <- base::is.null
[17:39:08.587]                       muffled <- FALSE
[17:39:08.587]                       if (inherits(cond, "message")) {
[17:39:08.587]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:08.587]                         if (muffled) 
[17:39:08.587]                           invokeRestart("muffleMessage")
[17:39:08.587]                       }
[17:39:08.587]                       else if (inherits(cond, "warning")) {
[17:39:08.587]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:08.587]                         if (muffled) 
[17:39:08.587]                           invokeRestart("muffleWarning")
[17:39:08.587]                       }
[17:39:08.587]                       else if (inherits(cond, "condition")) {
[17:39:08.587]                         if (!is.null(pattern)) {
[17:39:08.587]                           computeRestarts <- base::computeRestarts
[17:39:08.587]                           grepl <- base::grepl
[17:39:08.587]                           restarts <- computeRestarts(cond)
[17:39:08.587]                           for (restart in restarts) {
[17:39:08.587]                             name <- restart$name
[17:39:08.587]                             if (is.null(name)) 
[17:39:08.587]                               next
[17:39:08.587]                             if (!grepl(pattern, name)) 
[17:39:08.587]                               next
[17:39:08.587]                             invokeRestart(restart)
[17:39:08.587]                             muffled <- TRUE
[17:39:08.587]                             break
[17:39:08.587]                           }
[17:39:08.587]                         }
[17:39:08.587]                       }
[17:39:08.587]                       invisible(muffled)
[17:39:08.587]                     }
[17:39:08.587]                     muffleCondition(cond, pattern = "^muffle")
[17:39:08.587]                   }
[17:39:08.587]                 }
[17:39:08.587]                 else {
[17:39:08.587]                   if (TRUE) {
[17:39:08.587]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:08.587]                     {
[17:39:08.587]                       inherits <- base::inherits
[17:39:08.587]                       invokeRestart <- base::invokeRestart
[17:39:08.587]                       is.null <- base::is.null
[17:39:08.587]                       muffled <- FALSE
[17:39:08.587]                       if (inherits(cond, "message")) {
[17:39:08.587]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:08.587]                         if (muffled) 
[17:39:08.587]                           invokeRestart("muffleMessage")
[17:39:08.587]                       }
[17:39:08.587]                       else if (inherits(cond, "warning")) {
[17:39:08.587]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:08.587]                         if (muffled) 
[17:39:08.587]                           invokeRestart("muffleWarning")
[17:39:08.587]                       }
[17:39:08.587]                       else if (inherits(cond, "condition")) {
[17:39:08.587]                         if (!is.null(pattern)) {
[17:39:08.587]                           computeRestarts <- base::computeRestarts
[17:39:08.587]                           grepl <- base::grepl
[17:39:08.587]                           restarts <- computeRestarts(cond)
[17:39:08.587]                           for (restart in restarts) {
[17:39:08.587]                             name <- restart$name
[17:39:08.587]                             if (is.null(name)) 
[17:39:08.587]                               next
[17:39:08.587]                             if (!grepl(pattern, name)) 
[17:39:08.587]                               next
[17:39:08.587]                             invokeRestart(restart)
[17:39:08.587]                             muffled <- TRUE
[17:39:08.587]                             break
[17:39:08.587]                           }
[17:39:08.587]                         }
[17:39:08.587]                       }
[17:39:08.587]                       invisible(muffled)
[17:39:08.587]                     }
[17:39:08.587]                     muffleCondition(cond, pattern = "^muffle")
[17:39:08.587]                   }
[17:39:08.587]                 }
[17:39:08.587]             }
[17:39:08.587]         }))
[17:39:08.587]     }, error = function(ex) {
[17:39:08.587]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:08.587]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:08.587]                 ...future.rng), started = ...future.startTime, 
[17:39:08.587]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:08.587]             version = "1.8"), class = "FutureResult")
[17:39:08.587]     }, finally = {
[17:39:08.587]         if (!identical(...future.workdir, getwd())) 
[17:39:08.587]             setwd(...future.workdir)
[17:39:08.587]         {
[17:39:08.587]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:08.587]                 ...future.oldOptions$nwarnings <- NULL
[17:39:08.587]             }
[17:39:08.587]             base::options(...future.oldOptions)
[17:39:08.587]             if (.Platform$OS.type == "windows") {
[17:39:08.587]                 old_names <- names(...future.oldEnvVars)
[17:39:08.587]                 envs <- base::Sys.getenv()
[17:39:08.587]                 names <- names(envs)
[17:39:08.587]                 common <- intersect(names, old_names)
[17:39:08.587]                 added <- setdiff(names, old_names)
[17:39:08.587]                 removed <- setdiff(old_names, names)
[17:39:08.587]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:08.587]                   envs[common]]
[17:39:08.587]                 NAMES <- toupper(changed)
[17:39:08.587]                 args <- list()
[17:39:08.587]                 for (kk in seq_along(NAMES)) {
[17:39:08.587]                   name <- changed[[kk]]
[17:39:08.587]                   NAME <- NAMES[[kk]]
[17:39:08.587]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:08.587]                     next
[17:39:08.587]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:08.587]                 }
[17:39:08.587]                 NAMES <- toupper(added)
[17:39:08.587]                 for (kk in seq_along(NAMES)) {
[17:39:08.587]                   name <- added[[kk]]
[17:39:08.587]                   NAME <- NAMES[[kk]]
[17:39:08.587]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:08.587]                     next
[17:39:08.587]                   args[[name]] <- ""
[17:39:08.587]                 }
[17:39:08.587]                 NAMES <- toupper(removed)
[17:39:08.587]                 for (kk in seq_along(NAMES)) {
[17:39:08.587]                   name <- removed[[kk]]
[17:39:08.587]                   NAME <- NAMES[[kk]]
[17:39:08.587]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:08.587]                     next
[17:39:08.587]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:08.587]                 }
[17:39:08.587]                 if (length(args) > 0) 
[17:39:08.587]                   base::do.call(base::Sys.setenv, args = args)
[17:39:08.587]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:08.587]             }
[17:39:08.587]             else {
[17:39:08.587]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:08.587]             }
[17:39:08.587]             {
[17:39:08.587]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:08.587]                   0L) {
[17:39:08.587]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:08.587]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:08.587]                   base::options(opts)
[17:39:08.587]                 }
[17:39:08.587]                 {
[17:39:08.587]                   {
[17:39:08.587]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:08.587]                     NULL
[17:39:08.587]                   }
[17:39:08.587]                   options(future.plan = NULL)
[17:39:08.587]                   if (is.na(NA_character_)) 
[17:39:08.587]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:08.587]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:08.587]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:08.587]                     .init = FALSE)
[17:39:08.587]                 }
[17:39:08.587]             }
[17:39:08.587]         }
[17:39:08.587]     })
[17:39:08.587]     if (TRUE) {
[17:39:08.587]         base::sink(type = "output", split = FALSE)
[17:39:08.587]         if (TRUE) {
[17:39:08.587]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:08.587]         }
[17:39:08.587]         else {
[17:39:08.587]             ...future.result["stdout"] <- base::list(NULL)
[17:39:08.587]         }
[17:39:08.587]         base::close(...future.stdout)
[17:39:08.587]         ...future.stdout <- NULL
[17:39:08.587]     }
[17:39:08.587]     ...future.result$conditions <- ...future.conditions
[17:39:08.587]     ...future.result$finished <- base::Sys.time()
[17:39:08.587]     ...future.result
[17:39:08.587] }
[17:39:08.590] Exporting 4 global objects (14.24 KiB) to cluster node #1 ...
[17:39:08.590] Exporting ‘ii’ (56 bytes) to cluster node #1 ...
[17:39:08.591] Exporting ‘ii’ (56 bytes) to cluster node #1 ... DONE
[17:39:08.591] Exporting ‘n’ (56 bytes) to cluster node #1 ...
[17:39:08.591] Exporting ‘n’ (56 bytes) to cluster node #1 ... DONE
[17:39:08.591] Exporting ‘C’ (10.72 KiB) to cluster node #1 ...
[17:39:08.633] Exporting ‘C’ (10.72 KiB) to cluster node #1 ... DONE
[17:39:08.633] Exporting ‘delay’ (3.41 KiB) to cluster node #1 ...
[17:39:08.677] Exporting ‘delay’ (3.41 KiB) to cluster node #1 ... DONE
[17:39:08.677] Exporting 4 global objects (14.24 KiB) to cluster node #1 ... DONE
[17:39:08.678] MultisessionFuture started
[17:39:08.678] - Launch lazy future ... done
[17:39:08.678] run() for ‘MultisessionFuture’ ... done
[17:39:08.678] - run() ... done
[17:39:08.678] - resolved() ...
[17:39:08.689] - resolved: FALSE
[17:39:08.689] - resolved() ... done
[17:39:08.689] resolved() for ‘MultisessionFuture’ ... done
[17:39:08.689] resolved() for ‘Future’ ...
[17:39:08.690] - state: ‘created’
[17:39:08.690] - run: TRUE
[17:39:08.690] - run() ...
[17:39:08.690] run() for ‘Future’ ...
[17:39:08.690] - state: ‘created’
[17:39:08.690] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:39:08.704] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:08.704] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:39:08.704]   - Field: ‘node’
[17:39:08.704]   - Field: ‘label’
[17:39:08.704]   - Field: ‘local’
[17:39:08.705]   - Field: ‘owner’
[17:39:08.705]   - Field: ‘envir’
[17:39:08.705]   - Field: ‘workers’
[17:39:08.705]   - Field: ‘packages’
[17:39:08.705]   - Field: ‘gc’
[17:39:08.705]   - Field: ‘conditions’
[17:39:08.705]   - Field: ‘persistent’
[17:39:08.705]   - Field: ‘expr’
[17:39:08.705]   - Field: ‘uuid’
[17:39:08.705]   - Field: ‘seed’
[17:39:08.705]   - Field: ‘version’
[17:39:08.706]   - Field: ‘result’
[17:39:08.706]   - Field: ‘asynchronous’
[17:39:08.706]   - Field: ‘calls’
[17:39:08.706]   - Field: ‘globals’
[17:39:08.706]   - Field: ‘stdout’
[17:39:08.706]   - Field: ‘earlySignal’
[17:39:08.706]   - Field: ‘lazy’
[17:39:08.706]   - Field: ‘state’
[17:39:08.706] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:39:08.706] - Launch lazy future ...
[17:39:08.707] Packages needed by the future expression (n = 1): ‘future’
[17:39:08.707] Packages needed by future strategies (n = 0): <none>
[17:39:08.707] {
[17:39:08.707]     {
[17:39:08.707]         {
[17:39:08.707]             ...future.startTime <- base::Sys.time()
[17:39:08.707]             {
[17:39:08.707]                 {
[17:39:08.707]                   {
[17:39:08.707]                     {
[17:39:08.707]                       {
[17:39:08.707]                         base::local({
[17:39:08.707]                           has_future <- base::requireNamespace("future", 
[17:39:08.707]                             quietly = TRUE)
[17:39:08.707]                           if (has_future) {
[17:39:08.707]                             ns <- base::getNamespace("future")
[17:39:08.707]                             version <- ns[[".package"]][["version"]]
[17:39:08.707]                             if (is.null(version)) 
[17:39:08.707]                               version <- utils::packageVersion("future")
[17:39:08.707]                           }
[17:39:08.707]                           else {
[17:39:08.707]                             version <- NULL
[17:39:08.707]                           }
[17:39:08.707]                           if (!has_future || version < "1.8.0") {
[17:39:08.707]                             info <- base::c(r_version = base::gsub("R version ", 
[17:39:08.707]                               "", base::R.version$version.string), 
[17:39:08.707]                               platform = base::sprintf("%s (%s-bit)", 
[17:39:08.707]                                 base::R.version$platform, 8 * 
[17:39:08.707]                                   base::.Machine$sizeof.pointer), 
[17:39:08.707]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:08.707]                                 "release", "version")], collapse = " "), 
[17:39:08.707]                               hostname = base::Sys.info()[["nodename"]])
[17:39:08.707]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:39:08.707]                               info)
[17:39:08.707]                             info <- base::paste(info, collapse = "; ")
[17:39:08.707]                             if (!has_future) {
[17:39:08.707]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:08.707]                                 info)
[17:39:08.707]                             }
[17:39:08.707]                             else {
[17:39:08.707]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:08.707]                                 info, version)
[17:39:08.707]                             }
[17:39:08.707]                             base::stop(msg)
[17:39:08.707]                           }
[17:39:08.707]                         })
[17:39:08.707]                       }
[17:39:08.707]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:08.707]                       base::options(mc.cores = 1L)
[17:39:08.707]                     }
[17:39:08.707]                     base::local({
[17:39:08.707]                       for (pkg in "future") {
[17:39:08.707]                         base::loadNamespace(pkg)
[17:39:08.707]                         base::library(pkg, character.only = TRUE)
[17:39:08.707]                       }
[17:39:08.707]                     })
[17:39:08.707]                   }
[17:39:08.707]                   ...future.strategy.old <- future::plan("list")
[17:39:08.707]                   options(future.plan = NULL)
[17:39:08.707]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:08.707]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:08.707]                 }
[17:39:08.707]                 ...future.workdir <- getwd()
[17:39:08.707]             }
[17:39:08.707]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:08.707]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:08.707]         }
[17:39:08.707]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:08.707]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:08.707]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:08.707]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:08.707]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:08.707]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:08.707]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:08.707]             base::names(...future.oldOptions))
[17:39:08.707]     }
[17:39:08.707]     if (FALSE) {
[17:39:08.707]     }
[17:39:08.707]     else {
[17:39:08.707]         if (TRUE) {
[17:39:08.707]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:08.707]                 open = "w")
[17:39:08.707]         }
[17:39:08.707]         else {
[17:39:08.707]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:08.707]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:08.707]         }
[17:39:08.707]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:08.707]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:08.707]             base::sink(type = "output", split = FALSE)
[17:39:08.707]             base::close(...future.stdout)
[17:39:08.707]         }, add = TRUE)
[17:39:08.707]     }
[17:39:08.707]     ...future.frame <- base::sys.nframe()
[17:39:08.707]     ...future.conditions <- base::list()
[17:39:08.707]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:08.707]     if (FALSE) {
[17:39:08.707]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:08.707]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:08.707]     }
[17:39:08.707]     ...future.result <- base::tryCatch({
[17:39:08.707]         base::withCallingHandlers({
[17:39:08.707]             ...future.value <- base::withVisible(base::local({
[17:39:08.707]                 ...future.makeSendCondition <- base::local({
[17:39:08.707]                   sendCondition <- NULL
[17:39:08.707]                   function(frame = 1L) {
[17:39:08.707]                     if (is.function(sendCondition)) 
[17:39:08.707]                       return(sendCondition)
[17:39:08.707]                     ns <- getNamespace("parallel")
[17:39:08.707]                     if (exists("sendData", mode = "function", 
[17:39:08.707]                       envir = ns)) {
[17:39:08.707]                       parallel_sendData <- get("sendData", mode = "function", 
[17:39:08.707]                         envir = ns)
[17:39:08.707]                       envir <- sys.frame(frame)
[17:39:08.707]                       master <- NULL
[17:39:08.707]                       while (!identical(envir, .GlobalEnv) && 
[17:39:08.707]                         !identical(envir, emptyenv())) {
[17:39:08.707]                         if (exists("master", mode = "list", envir = envir, 
[17:39:08.707]                           inherits = FALSE)) {
[17:39:08.707]                           master <- get("master", mode = "list", 
[17:39:08.707]                             envir = envir, inherits = FALSE)
[17:39:08.707]                           if (inherits(master, c("SOCKnode", 
[17:39:08.707]                             "SOCK0node"))) {
[17:39:08.707]                             sendCondition <<- function(cond) {
[17:39:08.707]                               data <- list(type = "VALUE", value = cond, 
[17:39:08.707]                                 success = TRUE)
[17:39:08.707]                               parallel_sendData(master, data)
[17:39:08.707]                             }
[17:39:08.707]                             return(sendCondition)
[17:39:08.707]                           }
[17:39:08.707]                         }
[17:39:08.707]                         frame <- frame + 1L
[17:39:08.707]                         envir <- sys.frame(frame)
[17:39:08.707]                       }
[17:39:08.707]                     }
[17:39:08.707]                     sendCondition <<- function(cond) NULL
[17:39:08.707]                   }
[17:39:08.707]                 })
[17:39:08.707]                 withCallingHandlers({
[17:39:08.707]                   {
[17:39:08.707]                     message(sprintf("Calculating tile #%d of %d ...", 
[17:39:08.707]                       ii, n), appendLF = FALSE)
[17:39:08.707]                     fit <- mandelbrot(C)
[17:39:08.707]                     delay(fit)
[17:39:08.707]                     message(" done")
[17:39:08.707]                     fit
[17:39:08.707]                   }
[17:39:08.707]                 }, immediateCondition = function(cond) {
[17:39:08.707]                   sendCondition <- ...future.makeSendCondition()
[17:39:08.707]                   sendCondition(cond)
[17:39:08.707]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:08.707]                   {
[17:39:08.707]                     inherits <- base::inherits
[17:39:08.707]                     invokeRestart <- base::invokeRestart
[17:39:08.707]                     is.null <- base::is.null
[17:39:08.707]                     muffled <- FALSE
[17:39:08.707]                     if (inherits(cond, "message")) {
[17:39:08.707]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:08.707]                       if (muffled) 
[17:39:08.707]                         invokeRestart("muffleMessage")
[17:39:08.707]                     }
[17:39:08.707]                     else if (inherits(cond, "warning")) {
[17:39:08.707]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:08.707]                       if (muffled) 
[17:39:08.707]                         invokeRestart("muffleWarning")
[17:39:08.707]                     }
[17:39:08.707]                     else if (inherits(cond, "condition")) {
[17:39:08.707]                       if (!is.null(pattern)) {
[17:39:08.707]                         computeRestarts <- base::computeRestarts
[17:39:08.707]                         grepl <- base::grepl
[17:39:08.707]                         restarts <- computeRestarts(cond)
[17:39:08.707]                         for (restart in restarts) {
[17:39:08.707]                           name <- restart$name
[17:39:08.707]                           if (is.null(name)) 
[17:39:08.707]                             next
[17:39:08.707]                           if (!grepl(pattern, name)) 
[17:39:08.707]                             next
[17:39:08.707]                           invokeRestart(restart)
[17:39:08.707]                           muffled <- TRUE
[17:39:08.707]                           break
[17:39:08.707]                         }
[17:39:08.707]                       }
[17:39:08.707]                     }
[17:39:08.707]                     invisible(muffled)
[17:39:08.707]                   }
[17:39:08.707]                   muffleCondition(cond)
[17:39:08.707]                 })
[17:39:08.707]             }))
[17:39:08.707]             future::FutureResult(value = ...future.value$value, 
[17:39:08.707]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:08.707]                   ...future.rng), globalenv = if (FALSE) 
[17:39:08.707]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:08.707]                     ...future.globalenv.names))
[17:39:08.707]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:08.707]         }, condition = base::local({
[17:39:08.707]             c <- base::c
[17:39:08.707]             inherits <- base::inherits
[17:39:08.707]             invokeRestart <- base::invokeRestart
[17:39:08.707]             length <- base::length
[17:39:08.707]             list <- base::list
[17:39:08.707]             seq.int <- base::seq.int
[17:39:08.707]             signalCondition <- base::signalCondition
[17:39:08.707]             sys.calls <- base::sys.calls
[17:39:08.707]             `[[` <- base::`[[`
[17:39:08.707]             `+` <- base::`+`
[17:39:08.707]             `<<-` <- base::`<<-`
[17:39:08.707]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:08.707]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:08.707]                   3L)]
[17:39:08.707]             }
[17:39:08.707]             function(cond) {
[17:39:08.707]                 is_error <- inherits(cond, "error")
[17:39:08.707]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:08.707]                   NULL)
[17:39:08.707]                 if (is_error) {
[17:39:08.707]                   sessionInformation <- function() {
[17:39:08.707]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:08.707]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:08.707]                       search = base::search(), system = base::Sys.info())
[17:39:08.707]                   }
[17:39:08.707]                   ...future.conditions[[length(...future.conditions) + 
[17:39:08.707]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:08.707]                     cond$call), session = sessionInformation(), 
[17:39:08.707]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:08.707]                   signalCondition(cond)
[17:39:08.707]                 }
[17:39:08.707]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:08.707]                 "immediateCondition"))) {
[17:39:08.707]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:08.707]                   ...future.conditions[[length(...future.conditions) + 
[17:39:08.707]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:08.707]                   if (TRUE && !signal) {
[17:39:08.707]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:08.707]                     {
[17:39:08.707]                       inherits <- base::inherits
[17:39:08.707]                       invokeRestart <- base::invokeRestart
[17:39:08.707]                       is.null <- base::is.null
[17:39:08.707]                       muffled <- FALSE
[17:39:08.707]                       if (inherits(cond, "message")) {
[17:39:08.707]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:08.707]                         if (muffled) 
[17:39:08.707]                           invokeRestart("muffleMessage")
[17:39:08.707]                       }
[17:39:08.707]                       else if (inherits(cond, "warning")) {
[17:39:08.707]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:08.707]                         if (muffled) 
[17:39:08.707]                           invokeRestart("muffleWarning")
[17:39:08.707]                       }
[17:39:08.707]                       else if (inherits(cond, "condition")) {
[17:39:08.707]                         if (!is.null(pattern)) {
[17:39:08.707]                           computeRestarts <- base::computeRestarts
[17:39:08.707]                           grepl <- base::grepl
[17:39:08.707]                           restarts <- computeRestarts(cond)
[17:39:08.707]                           for (restart in restarts) {
[17:39:08.707]                             name <- restart$name
[17:39:08.707]                             if (is.null(name)) 
[17:39:08.707]                               next
[17:39:08.707]                             if (!grepl(pattern, name)) 
[17:39:08.707]                               next
[17:39:08.707]                             invokeRestart(restart)
[17:39:08.707]                             muffled <- TRUE
[17:39:08.707]                             break
[17:39:08.707]                           }
[17:39:08.707]                         }
[17:39:08.707]                       }
[17:39:08.707]                       invisible(muffled)
[17:39:08.707]                     }
[17:39:08.707]                     muffleCondition(cond, pattern = "^muffle")
[17:39:08.707]                   }
[17:39:08.707]                 }
[17:39:08.707]                 else {
[17:39:08.707]                   if (TRUE) {
[17:39:08.707]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:08.707]                     {
[17:39:08.707]                       inherits <- base::inherits
[17:39:08.707]                       invokeRestart <- base::invokeRestart
[17:39:08.707]                       is.null <- base::is.null
[17:39:08.707]                       muffled <- FALSE
[17:39:08.707]                       if (inherits(cond, "message")) {
[17:39:08.707]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:08.707]                         if (muffled) 
[17:39:08.707]                           invokeRestart("muffleMessage")
[17:39:08.707]                       }
[17:39:08.707]                       else if (inherits(cond, "warning")) {
[17:39:08.707]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:08.707]                         if (muffled) 
[17:39:08.707]                           invokeRestart("muffleWarning")
[17:39:08.707]                       }
[17:39:08.707]                       else if (inherits(cond, "condition")) {
[17:39:08.707]                         if (!is.null(pattern)) {
[17:39:08.707]                           computeRestarts <- base::computeRestarts
[17:39:08.707]                           grepl <- base::grepl
[17:39:08.707]                           restarts <- computeRestarts(cond)
[17:39:08.707]                           for (restart in restarts) {
[17:39:08.707]                             name <- restart$name
[17:39:08.707]                             if (is.null(name)) 
[17:39:08.707]                               next
[17:39:08.707]                             if (!grepl(pattern, name)) 
[17:39:08.707]                               next
[17:39:08.707]                             invokeRestart(restart)
[17:39:08.707]                             muffled <- TRUE
[17:39:08.707]                             break
[17:39:08.707]                           }
[17:39:08.707]                         }
[17:39:08.707]                       }
[17:39:08.707]                       invisible(muffled)
[17:39:08.707]                     }
[17:39:08.707]                     muffleCondition(cond, pattern = "^muffle")
[17:39:08.707]                   }
[17:39:08.707]                 }
[17:39:08.707]             }
[17:39:08.707]         }))
[17:39:08.707]     }, error = function(ex) {
[17:39:08.707]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:08.707]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:08.707]                 ...future.rng), started = ...future.startTime, 
[17:39:08.707]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:08.707]             version = "1.8"), class = "FutureResult")
[17:39:08.707]     }, finally = {
[17:39:08.707]         if (!identical(...future.workdir, getwd())) 
[17:39:08.707]             setwd(...future.workdir)
[17:39:08.707]         {
[17:39:08.707]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:08.707]                 ...future.oldOptions$nwarnings <- NULL
[17:39:08.707]             }
[17:39:08.707]             base::options(...future.oldOptions)
[17:39:08.707]             if (.Platform$OS.type == "windows") {
[17:39:08.707]                 old_names <- names(...future.oldEnvVars)
[17:39:08.707]                 envs <- base::Sys.getenv()
[17:39:08.707]                 names <- names(envs)
[17:39:08.707]                 common <- intersect(names, old_names)
[17:39:08.707]                 added <- setdiff(names, old_names)
[17:39:08.707]                 removed <- setdiff(old_names, names)
[17:39:08.707]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:08.707]                   envs[common]]
[17:39:08.707]                 NAMES <- toupper(changed)
[17:39:08.707]                 args <- list()
[17:39:08.707]                 for (kk in seq_along(NAMES)) {
[17:39:08.707]                   name <- changed[[kk]]
[17:39:08.707]                   NAME <- NAMES[[kk]]
[17:39:08.707]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:08.707]                     next
[17:39:08.707]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:08.707]                 }
[17:39:08.707]                 NAMES <- toupper(added)
[17:39:08.707]                 for (kk in seq_along(NAMES)) {
[17:39:08.707]                   name <- added[[kk]]
[17:39:08.707]                   NAME <- NAMES[[kk]]
[17:39:08.707]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:08.707]                     next
[17:39:08.707]                   args[[name]] <- ""
[17:39:08.707]                 }
[17:39:08.707]                 NAMES <- toupper(removed)
[17:39:08.707]                 for (kk in seq_along(NAMES)) {
[17:39:08.707]                   name <- removed[[kk]]
[17:39:08.707]                   NAME <- NAMES[[kk]]
[17:39:08.707]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:08.707]                     next
[17:39:08.707]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:08.707]                 }
[17:39:08.707]                 if (length(args) > 0) 
[17:39:08.707]                   base::do.call(base::Sys.setenv, args = args)
[17:39:08.707]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:08.707]             }
[17:39:08.707]             else {
[17:39:08.707]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:08.707]             }
[17:39:08.707]             {
[17:39:08.707]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:08.707]                   0L) {
[17:39:08.707]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:08.707]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:08.707]                   base::options(opts)
[17:39:08.707]                 }
[17:39:08.707]                 {
[17:39:08.707]                   {
[17:39:08.707]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:08.707]                     NULL
[17:39:08.707]                   }
[17:39:08.707]                   options(future.plan = NULL)
[17:39:08.707]                   if (is.na(NA_character_)) 
[17:39:08.707]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:08.707]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:08.707]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:08.707]                     .init = FALSE)
[17:39:08.707]                 }
[17:39:08.707]             }
[17:39:08.707]         }
[17:39:08.707]     })
[17:39:08.707]     if (TRUE) {
[17:39:08.707]         base::sink(type = "output", split = FALSE)
[17:39:08.707]         if (TRUE) {
[17:39:08.707]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:08.707]         }
[17:39:08.707]         else {
[17:39:08.707]             ...future.result["stdout"] <- base::list(NULL)
[17:39:08.707]         }
[17:39:08.707]         base::close(...future.stdout)
[17:39:08.707]         ...future.stdout <- NULL
[17:39:08.707]     }
[17:39:08.707]     ...future.result$conditions <- ...future.conditions
[17:39:08.707]     ...future.result$finished <- base::Sys.time()
[17:39:08.707]     ...future.result
[17:39:08.707] }
[17:39:08.760] Exporting 4 global objects (14.24 KiB) to cluster node #2 ...
[17:39:08.760] Exporting ‘ii’ (56 bytes) to cluster node #2 ...
[17:39:08.761] Exporting ‘ii’ (56 bytes) to cluster node #2 ... DONE
[17:39:08.761] Exporting ‘n’ (56 bytes) to cluster node #2 ...
[17:39:08.761] Exporting ‘n’ (56 bytes) to cluster node #2 ... DONE
[17:39:08.761] Exporting ‘C’ (10.72 KiB) to cluster node #2 ...
[17:39:08.805] Exporting ‘C’ (10.72 KiB) to cluster node #2 ... DONE
[17:39:08.805] Exporting ‘delay’ (3.41 KiB) to cluster node #2 ...
[17:39:08.849] Exporting ‘delay’ (3.41 KiB) to cluster node #2 ... DONE
[17:39:08.849] Exporting 4 global objects (14.24 KiB) to cluster node #2 ... DONE
[17:39:08.850] MultisessionFuture started
[17:39:08.850] - Launch lazy future ... done
[17:39:08.850] run() for ‘MultisessionFuture’ ... done
[17:39:08.850] - run() ... done
[17:39:08.850] - resolved() ...
[17:39:08.861] - resolved: FALSE
[17:39:08.861] - resolved() ... done
[17:39:08.861] resolved() for ‘MultisessionFuture’ ... done
[17:39:08.861] resolved() for ‘Future’ ...
[17:39:08.861] - state: ‘created’
[17:39:08.861] - run: TRUE
[17:39:08.861] - run() ...
[17:39:08.862] run() for ‘Future’ ...
[17:39:08.862] - state: ‘created’
[17:39:08.862] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:39:08.876] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:08.876] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:39:08.876]   - Field: ‘node’
[17:39:08.876]   - Field: ‘label’
[17:39:08.877]   - Field: ‘local’
[17:39:08.877]   - Field: ‘owner’
[17:39:08.877]   - Field: ‘envir’
[17:39:08.877]   - Field: ‘workers’
[17:39:08.877]   - Field: ‘packages’
[17:39:08.877]   - Field: ‘gc’
[17:39:08.877]   - Field: ‘conditions’
[17:39:08.877]   - Field: ‘persistent’
[17:39:08.877]   - Field: ‘expr’
[17:39:08.877]   - Field: ‘uuid’
[17:39:08.877]   - Field: ‘seed’
[17:39:08.878]   - Field: ‘version’
[17:39:08.878]   - Field: ‘result’
[17:39:08.878]   - Field: ‘asynchronous’
[17:39:08.878]   - Field: ‘calls’
[17:39:08.878]   - Field: ‘globals’
[17:39:08.878]   - Field: ‘stdout’
[17:39:08.878]   - Field: ‘earlySignal’
[17:39:08.878]   - Field: ‘lazy’
[17:39:08.878]   - Field: ‘state’
[17:39:08.878] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:39:08.878] - Launch lazy future ...
[17:39:08.879] Packages needed by the future expression (n = 1): ‘future’
[17:39:08.879] Packages needed by future strategies (n = 0): <none>
[17:39:08.879] {
[17:39:08.879]     {
[17:39:08.879]         {
[17:39:08.879]             ...future.startTime <- base::Sys.time()
[17:39:08.879]             {
[17:39:08.879]                 {
[17:39:08.879]                   {
[17:39:08.879]                     {
[17:39:08.879]                       {
[17:39:08.879]                         base::local({
[17:39:08.879]                           has_future <- base::requireNamespace("future", 
[17:39:08.879]                             quietly = TRUE)
[17:39:08.879]                           if (has_future) {
[17:39:08.879]                             ns <- base::getNamespace("future")
[17:39:08.879]                             version <- ns[[".package"]][["version"]]
[17:39:08.879]                             if (is.null(version)) 
[17:39:08.879]                               version <- utils::packageVersion("future")
[17:39:08.879]                           }
[17:39:08.879]                           else {
[17:39:08.879]                             version <- NULL
[17:39:08.879]                           }
[17:39:08.879]                           if (!has_future || version < "1.8.0") {
[17:39:08.879]                             info <- base::c(r_version = base::gsub("R version ", 
[17:39:08.879]                               "", base::R.version$version.string), 
[17:39:08.879]                               platform = base::sprintf("%s (%s-bit)", 
[17:39:08.879]                                 base::R.version$platform, 8 * 
[17:39:08.879]                                   base::.Machine$sizeof.pointer), 
[17:39:08.879]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:08.879]                                 "release", "version")], collapse = " "), 
[17:39:08.879]                               hostname = base::Sys.info()[["nodename"]])
[17:39:08.879]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:39:08.879]                               info)
[17:39:08.879]                             info <- base::paste(info, collapse = "; ")
[17:39:08.879]                             if (!has_future) {
[17:39:08.879]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:08.879]                                 info)
[17:39:08.879]                             }
[17:39:08.879]                             else {
[17:39:08.879]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:08.879]                                 info, version)
[17:39:08.879]                             }
[17:39:08.879]                             base::stop(msg)
[17:39:08.879]                           }
[17:39:08.879]                         })
[17:39:08.879]                       }
[17:39:08.879]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:08.879]                       base::options(mc.cores = 1L)
[17:39:08.879]                     }
[17:39:08.879]                     base::local({
[17:39:08.879]                       for (pkg in "future") {
[17:39:08.879]                         base::loadNamespace(pkg)
[17:39:08.879]                         base::library(pkg, character.only = TRUE)
[17:39:08.879]                       }
[17:39:08.879]                     })
[17:39:08.879]                   }
[17:39:08.879]                   ...future.strategy.old <- future::plan("list")
[17:39:08.879]                   options(future.plan = NULL)
[17:39:08.879]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:08.879]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:08.879]                 }
[17:39:08.879]                 ...future.workdir <- getwd()
[17:39:08.879]             }
[17:39:08.879]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:08.879]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:08.879]         }
[17:39:08.879]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:08.879]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:08.879]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:08.879]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:08.879]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:08.879]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:08.879]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:08.879]             base::names(...future.oldOptions))
[17:39:08.879]     }
[17:39:08.879]     if (FALSE) {
[17:39:08.879]     }
[17:39:08.879]     else {
[17:39:08.879]         if (TRUE) {
[17:39:08.879]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:08.879]                 open = "w")
[17:39:08.879]         }
[17:39:08.879]         else {
[17:39:08.879]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:08.879]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:08.879]         }
[17:39:08.879]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:08.879]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:08.879]             base::sink(type = "output", split = FALSE)
[17:39:08.879]             base::close(...future.stdout)
[17:39:08.879]         }, add = TRUE)
[17:39:08.879]     }
[17:39:08.879]     ...future.frame <- base::sys.nframe()
[17:39:08.879]     ...future.conditions <- base::list()
[17:39:08.879]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:08.879]     if (FALSE) {
[17:39:08.879]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:08.879]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:08.879]     }
[17:39:08.879]     ...future.result <- base::tryCatch({
[17:39:08.879]         base::withCallingHandlers({
[17:39:08.879]             ...future.value <- base::withVisible(base::local({
[17:39:08.879]                 ...future.makeSendCondition <- base::local({
[17:39:08.879]                   sendCondition <- NULL
[17:39:08.879]                   function(frame = 1L) {
[17:39:08.879]                     if (is.function(sendCondition)) 
[17:39:08.879]                       return(sendCondition)
[17:39:08.879]                     ns <- getNamespace("parallel")
[17:39:08.879]                     if (exists("sendData", mode = "function", 
[17:39:08.879]                       envir = ns)) {
[17:39:08.879]                       parallel_sendData <- get("sendData", mode = "function", 
[17:39:08.879]                         envir = ns)
[17:39:08.879]                       envir <- sys.frame(frame)
[17:39:08.879]                       master <- NULL
[17:39:08.879]                       while (!identical(envir, .GlobalEnv) && 
[17:39:08.879]                         !identical(envir, emptyenv())) {
[17:39:08.879]                         if (exists("master", mode = "list", envir = envir, 
[17:39:08.879]                           inherits = FALSE)) {
[17:39:08.879]                           master <- get("master", mode = "list", 
[17:39:08.879]                             envir = envir, inherits = FALSE)
[17:39:08.879]                           if (inherits(master, c("SOCKnode", 
[17:39:08.879]                             "SOCK0node"))) {
[17:39:08.879]                             sendCondition <<- function(cond) {
[17:39:08.879]                               data <- list(type = "VALUE", value = cond, 
[17:39:08.879]                                 success = TRUE)
[17:39:08.879]                               parallel_sendData(master, data)
[17:39:08.879]                             }
[17:39:08.879]                             return(sendCondition)
[17:39:08.879]                           }
[17:39:08.879]                         }
[17:39:08.879]                         frame <- frame + 1L
[17:39:08.879]                         envir <- sys.frame(frame)
[17:39:08.879]                       }
[17:39:08.879]                     }
[17:39:08.879]                     sendCondition <<- function(cond) NULL
[17:39:08.879]                   }
[17:39:08.879]                 })
[17:39:08.879]                 withCallingHandlers({
[17:39:08.879]                   {
[17:39:08.879]                     message(sprintf("Calculating tile #%d of %d ...", 
[17:39:08.879]                       ii, n), appendLF = FALSE)
[17:39:08.879]                     fit <- mandelbrot(C)
[17:39:08.879]                     delay(fit)
[17:39:08.879]                     message(" done")
[17:39:08.879]                     fit
[17:39:08.879]                   }
[17:39:08.879]                 }, immediateCondition = function(cond) {
[17:39:08.879]                   sendCondition <- ...future.makeSendCondition()
[17:39:08.879]                   sendCondition(cond)
[17:39:08.879]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:08.879]                   {
[17:39:08.879]                     inherits <- base::inherits
[17:39:08.879]                     invokeRestart <- base::invokeRestart
[17:39:08.879]                     is.null <- base::is.null
[17:39:08.879]                     muffled <- FALSE
[17:39:08.879]                     if (inherits(cond, "message")) {
[17:39:08.879]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:08.879]                       if (muffled) 
[17:39:08.879]                         invokeRestart("muffleMessage")
[17:39:08.879]                     }
[17:39:08.879]                     else if (inherits(cond, "warning")) {
[17:39:08.879]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:08.879]                       if (muffled) 
[17:39:08.879]                         invokeRestart("muffleWarning")
[17:39:08.879]                     }
[17:39:08.879]                     else if (inherits(cond, "condition")) {
[17:39:08.879]                       if (!is.null(pattern)) {
[17:39:08.879]                         computeRestarts <- base::computeRestarts
[17:39:08.879]                         grepl <- base::grepl
[17:39:08.879]                         restarts <- computeRestarts(cond)
[17:39:08.879]                         for (restart in restarts) {
[17:39:08.879]                           name <- restart$name
[17:39:08.879]                           if (is.null(name)) 
[17:39:08.879]                             next
[17:39:08.879]                           if (!grepl(pattern, name)) 
[17:39:08.879]                             next
[17:39:08.879]                           invokeRestart(restart)
[17:39:08.879]                           muffled <- TRUE
[17:39:08.879]                           break
[17:39:08.879]                         }
[17:39:08.879]                       }
[17:39:08.879]                     }
[17:39:08.879]                     invisible(muffled)
[17:39:08.879]                   }
[17:39:08.879]                   muffleCondition(cond)
[17:39:08.879]                 })
[17:39:08.879]             }))
[17:39:08.879]             future::FutureResult(value = ...future.value$value, 
[17:39:08.879]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:08.879]                   ...future.rng), globalenv = if (FALSE) 
[17:39:08.879]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:08.879]                     ...future.globalenv.names))
[17:39:08.879]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:08.879]         }, condition = base::local({
[17:39:08.879]             c <- base::c
[17:39:08.879]             inherits <- base::inherits
[17:39:08.879]             invokeRestart <- base::invokeRestart
[17:39:08.879]             length <- base::length
[17:39:08.879]             list <- base::list
[17:39:08.879]             seq.int <- base::seq.int
[17:39:08.879]             signalCondition <- base::signalCondition
[17:39:08.879]             sys.calls <- base::sys.calls
[17:39:08.879]             `[[` <- base::`[[`
[17:39:08.879]             `+` <- base::`+`
[17:39:08.879]             `<<-` <- base::`<<-`
[17:39:08.879]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:08.879]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:08.879]                   3L)]
[17:39:08.879]             }
[17:39:08.879]             function(cond) {
[17:39:08.879]                 is_error <- inherits(cond, "error")
[17:39:08.879]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:08.879]                   NULL)
[17:39:08.879]                 if (is_error) {
[17:39:08.879]                   sessionInformation <- function() {
[17:39:08.879]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:08.879]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:08.879]                       search = base::search(), system = base::Sys.info())
[17:39:08.879]                   }
[17:39:08.879]                   ...future.conditions[[length(...future.conditions) + 
[17:39:08.879]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:08.879]                     cond$call), session = sessionInformation(), 
[17:39:08.879]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:08.879]                   signalCondition(cond)
[17:39:08.879]                 }
[17:39:08.879]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:08.879]                 "immediateCondition"))) {
[17:39:08.879]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:08.879]                   ...future.conditions[[length(...future.conditions) + 
[17:39:08.879]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:08.879]                   if (TRUE && !signal) {
[17:39:08.879]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:08.879]                     {
[17:39:08.879]                       inherits <- base::inherits
[17:39:08.879]                       invokeRestart <- base::invokeRestart
[17:39:08.879]                       is.null <- base::is.null
[17:39:08.879]                       muffled <- FALSE
[17:39:08.879]                       if (inherits(cond, "message")) {
[17:39:08.879]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:08.879]                         if (muffled) 
[17:39:08.879]                           invokeRestart("muffleMessage")
[17:39:08.879]                       }
[17:39:08.879]                       else if (inherits(cond, "warning")) {
[17:39:08.879]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:08.879]                         if (muffled) 
[17:39:08.879]                           invokeRestart("muffleWarning")
[17:39:08.879]                       }
[17:39:08.879]                       else if (inherits(cond, "condition")) {
[17:39:08.879]                         if (!is.null(pattern)) {
[17:39:08.879]                           computeRestarts <- base::computeRestarts
[17:39:08.879]                           grepl <- base::grepl
[17:39:08.879]                           restarts <- computeRestarts(cond)
[17:39:08.879]                           for (restart in restarts) {
[17:39:08.879]                             name <- restart$name
[17:39:08.879]                             if (is.null(name)) 
[17:39:08.879]                               next
[17:39:08.879]                             if (!grepl(pattern, name)) 
[17:39:08.879]                               next
[17:39:08.879]                             invokeRestart(restart)
[17:39:08.879]                             muffled <- TRUE
[17:39:08.879]                             break
[17:39:08.879]                           }
[17:39:08.879]                         }
[17:39:08.879]                       }
[17:39:08.879]                       invisible(muffled)
[17:39:08.879]                     }
[17:39:08.879]                     muffleCondition(cond, pattern = "^muffle")
[17:39:08.879]                   }
[17:39:08.879]                 }
[17:39:08.879]                 else {
[17:39:08.879]                   if (TRUE) {
[17:39:08.879]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:08.879]                     {
[17:39:08.879]                       inherits <- base::inherits
[17:39:08.879]                       invokeRestart <- base::invokeRestart
[17:39:08.879]                       is.null <- base::is.null
[17:39:08.879]                       muffled <- FALSE
[17:39:08.879]                       if (inherits(cond, "message")) {
[17:39:08.879]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:08.879]                         if (muffled) 
[17:39:08.879]                           invokeRestart("muffleMessage")
[17:39:08.879]                       }
[17:39:08.879]                       else if (inherits(cond, "warning")) {
[17:39:08.879]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:08.879]                         if (muffled) 
[17:39:08.879]                           invokeRestart("muffleWarning")
[17:39:08.879]                       }
[17:39:08.879]                       else if (inherits(cond, "condition")) {
[17:39:08.879]                         if (!is.null(pattern)) {
[17:39:08.879]                           computeRestarts <- base::computeRestarts
[17:39:08.879]                           grepl <- base::grepl
[17:39:08.879]                           restarts <- computeRestarts(cond)
[17:39:08.879]                           for (restart in restarts) {
[17:39:08.879]                             name <- restart$name
[17:39:08.879]                             if (is.null(name)) 
[17:39:08.879]                               next
[17:39:08.879]                             if (!grepl(pattern, name)) 
[17:39:08.879]                               next
[17:39:08.879]                             invokeRestart(restart)
[17:39:08.879]                             muffled <- TRUE
[17:39:08.879]                             break
[17:39:08.879]                           }
[17:39:08.879]                         }
[17:39:08.879]                       }
[17:39:08.879]                       invisible(muffled)
[17:39:08.879]                     }
[17:39:08.879]                     muffleCondition(cond, pattern = "^muffle")
[17:39:08.879]                   }
[17:39:08.879]                 }
[17:39:08.879]             }
[17:39:08.879]         }))
[17:39:08.879]     }, error = function(ex) {
[17:39:08.879]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:08.879]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:08.879]                 ...future.rng), started = ...future.startTime, 
[17:39:08.879]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:08.879]             version = "1.8"), class = "FutureResult")
[17:39:08.879]     }, finally = {
[17:39:08.879]         if (!identical(...future.workdir, getwd())) 
[17:39:08.879]             setwd(...future.workdir)
[17:39:08.879]         {
[17:39:08.879]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:08.879]                 ...future.oldOptions$nwarnings <- NULL
[17:39:08.879]             }
[17:39:08.879]             base::options(...future.oldOptions)
[17:39:08.879]             if (.Platform$OS.type == "windows") {
[17:39:08.879]                 old_names <- names(...future.oldEnvVars)
[17:39:08.879]                 envs <- base::Sys.getenv()
[17:39:08.879]                 names <- names(envs)
[17:39:08.879]                 common <- intersect(names, old_names)
[17:39:08.879]                 added <- setdiff(names, old_names)
[17:39:08.879]                 removed <- setdiff(old_names, names)
[17:39:08.879]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:08.879]                   envs[common]]
[17:39:08.879]                 NAMES <- toupper(changed)
[17:39:08.879]                 args <- list()
[17:39:08.879]                 for (kk in seq_along(NAMES)) {
[17:39:08.879]                   name <- changed[[kk]]
[17:39:08.879]                   NAME <- NAMES[[kk]]
[17:39:08.879]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:08.879]                     next
[17:39:08.879]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:08.879]                 }
[17:39:08.879]                 NAMES <- toupper(added)
[17:39:08.879]                 for (kk in seq_along(NAMES)) {
[17:39:08.879]                   name <- added[[kk]]
[17:39:08.879]                   NAME <- NAMES[[kk]]
[17:39:08.879]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:08.879]                     next
[17:39:08.879]                   args[[name]] <- ""
[17:39:08.879]                 }
[17:39:08.879]                 NAMES <- toupper(removed)
[17:39:08.879]                 for (kk in seq_along(NAMES)) {
[17:39:08.879]                   name <- removed[[kk]]
[17:39:08.879]                   NAME <- NAMES[[kk]]
[17:39:08.879]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:08.879]                     next
[17:39:08.879]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:08.879]                 }
[17:39:08.879]                 if (length(args) > 0) 
[17:39:08.879]                   base::do.call(base::Sys.setenv, args = args)
[17:39:08.879]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:08.879]             }
[17:39:08.879]             else {
[17:39:08.879]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:08.879]             }
[17:39:08.879]             {
[17:39:08.879]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:08.879]                   0L) {
[17:39:08.879]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:08.879]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:08.879]                   base::options(opts)
[17:39:08.879]                 }
[17:39:08.879]                 {
[17:39:08.879]                   {
[17:39:08.879]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:08.879]                     NULL
[17:39:08.879]                   }
[17:39:08.879]                   options(future.plan = NULL)
[17:39:08.879]                   if (is.na(NA_character_)) 
[17:39:08.879]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:08.879]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:08.879]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:08.879]                     .init = FALSE)
[17:39:08.879]                 }
[17:39:08.879]             }
[17:39:08.879]         }
[17:39:08.879]     })
[17:39:08.879]     if (TRUE) {
[17:39:08.879]         base::sink(type = "output", split = FALSE)
[17:39:08.879]         if (TRUE) {
[17:39:08.879]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:08.879]         }
[17:39:08.879]         else {
[17:39:08.879]             ...future.result["stdout"] <- base::list(NULL)
[17:39:08.879]         }
[17:39:08.879]         base::close(...future.stdout)
[17:39:08.879]         ...future.stdout <- NULL
[17:39:08.879]     }
[17:39:08.879]     ...future.result$conditions <- ...future.conditions
[17:39:08.879]     ...future.result$finished <- base::Sys.time()
[17:39:08.879]     ...future.result
[17:39:08.879] }
[17:39:08.882] Poll #1 (0): usedNodes() = 2, workers = 2
[17:39:08.901] receiveMessageFromWorker() for ClusterFuture ...
[17:39:08.901] - Validating connection of MultisessionFuture
[17:39:08.901] - received message: FutureResult
[17:39:08.901] - Received FutureResult
[17:39:08.901] - Erased future from FutureRegistry
[17:39:08.902] result() for ClusterFuture ...
[17:39:08.902] - result already collected: FutureResult
[17:39:08.902] result() for ClusterFuture ... done
[17:39:08.902] signalConditions() ...
[17:39:08.902]  - include = ‘immediateCondition’
[17:39:08.902]  - exclude = 
[17:39:08.902]  - resignal = FALSE
[17:39:08.902]  - Number of conditions: 2
[17:39:08.902] signalConditions() ... done
[17:39:08.902] receiveMessageFromWorker() for ClusterFuture ... done
[17:39:08.902] result() for ClusterFuture ...
[17:39:08.902] - result already collected: FutureResult
[17:39:08.903] result() for ClusterFuture ... done
[17:39:08.903] result() for ClusterFuture ...
[17:39:08.903] - result already collected: FutureResult
[17:39:08.903] result() for ClusterFuture ... done
[17:39:08.903] signalConditions() ...
[17:39:08.903]  - include = ‘immediateCondition’
[17:39:08.903]  - exclude = 
[17:39:08.903]  - resignal = FALSE
[17:39:08.903]  - Number of conditions: 2
[17:39:08.903] signalConditions() ... done
[17:39:08.904] Exporting 4 global objects (14.24 KiB) to cluster node #1 ...
[17:39:08.904] Exporting ‘ii’ (56 bytes) to cluster node #1 ...
[17:39:08.905] Exporting ‘ii’ (56 bytes) to cluster node #1 ... DONE
[17:39:08.905] Exporting ‘n’ (56 bytes) to cluster node #1 ...
[17:39:08.905] Exporting ‘n’ (56 bytes) to cluster node #1 ... DONE
[17:39:08.905] Exporting ‘C’ (10.72 KiB) to cluster node #1 ...
[17:39:08.949] Exporting ‘C’ (10.72 KiB) to cluster node #1 ... DONE
[17:39:08.949] Exporting ‘delay’ (3.41 KiB) to cluster node #1 ...
[17:39:08.993] Exporting ‘delay’ (3.41 KiB) to cluster node #1 ... DONE
[17:39:08.993] Exporting 4 global objects (14.24 KiB) to cluster node #1 ... DONE
[17:39:08.994] MultisessionFuture started
[17:39:08.994] - Launch lazy future ... done
[17:39:08.994] run() for ‘MultisessionFuture’ ... done
[17:39:08.995] - run() ... done
[17:39:08.995] - resolved() ...
[17:39:09.005] - resolved: FALSE
[17:39:09.005] - resolved() ... done
[17:39:09.006] resolved() for ‘MultisessionFuture’ ... done
[17:39:09.006] resolved() for ‘Future’ ...
[17:39:09.006] - state: ‘created’
[17:39:09.006] - run: TRUE
[17:39:09.006] - run() ...
[17:39:09.006] run() for ‘Future’ ...
[17:39:09.006] - state: ‘created’
[17:39:09.006] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:39:09.021] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:09.022] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:39:09.022]   - Field: ‘node’
[17:39:09.022]   - Field: ‘label’
[17:39:09.022]   - Field: ‘local’
[17:39:09.022]   - Field: ‘owner’
[17:39:09.022]   - Field: ‘envir’
[17:39:09.022]   - Field: ‘workers’
[17:39:09.022]   - Field: ‘packages’
[17:39:09.022]   - Field: ‘gc’
[17:39:09.022]   - Field: ‘conditions’
[17:39:09.023]   - Field: ‘persistent’
[17:39:09.023]   - Field: ‘expr’
[17:39:09.023]   - Field: ‘uuid’
[17:39:09.023]   - Field: ‘seed’
[17:39:09.023]   - Field: ‘version’
[17:39:09.023]   - Field: ‘result’
[17:39:09.023]   - Field: ‘asynchronous’
[17:39:09.023]   - Field: ‘calls’
[17:39:09.023]   - Field: ‘globals’
[17:39:09.023]   - Field: ‘stdout’
[17:39:09.023]   - Field: ‘earlySignal’
[17:39:09.024]   - Field: ‘lazy’
[17:39:09.024]   - Field: ‘state’
[17:39:09.024] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:39:09.024] - Launch lazy future ...
[17:39:09.024] Packages needed by the future expression (n = 1): ‘future’
[17:39:09.024] Packages needed by future strategies (n = 0): <none>
[17:39:09.025] {
[17:39:09.025]     {
[17:39:09.025]         {
[17:39:09.025]             ...future.startTime <- base::Sys.time()
[17:39:09.025]             {
[17:39:09.025]                 {
[17:39:09.025]                   {
[17:39:09.025]                     {
[17:39:09.025]                       {
[17:39:09.025]                         base::local({
[17:39:09.025]                           has_future <- base::requireNamespace("future", 
[17:39:09.025]                             quietly = TRUE)
[17:39:09.025]                           if (has_future) {
[17:39:09.025]                             ns <- base::getNamespace("future")
[17:39:09.025]                             version <- ns[[".package"]][["version"]]
[17:39:09.025]                             if (is.null(version)) 
[17:39:09.025]                               version <- utils::packageVersion("future")
[17:39:09.025]                           }
[17:39:09.025]                           else {
[17:39:09.025]                             version <- NULL
[17:39:09.025]                           }
[17:39:09.025]                           if (!has_future || version < "1.8.0") {
[17:39:09.025]                             info <- base::c(r_version = base::gsub("R version ", 
[17:39:09.025]                               "", base::R.version$version.string), 
[17:39:09.025]                               platform = base::sprintf("%s (%s-bit)", 
[17:39:09.025]                                 base::R.version$platform, 8 * 
[17:39:09.025]                                   base::.Machine$sizeof.pointer), 
[17:39:09.025]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:09.025]                                 "release", "version")], collapse = " "), 
[17:39:09.025]                               hostname = base::Sys.info()[["nodename"]])
[17:39:09.025]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:39:09.025]                               info)
[17:39:09.025]                             info <- base::paste(info, collapse = "; ")
[17:39:09.025]                             if (!has_future) {
[17:39:09.025]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:09.025]                                 info)
[17:39:09.025]                             }
[17:39:09.025]                             else {
[17:39:09.025]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:09.025]                                 info, version)
[17:39:09.025]                             }
[17:39:09.025]                             base::stop(msg)
[17:39:09.025]                           }
[17:39:09.025]                         })
[17:39:09.025]                       }
[17:39:09.025]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:09.025]                       base::options(mc.cores = 1L)
[17:39:09.025]                     }
[17:39:09.025]                     base::local({
[17:39:09.025]                       for (pkg in "future") {
[17:39:09.025]                         base::loadNamespace(pkg)
[17:39:09.025]                         base::library(pkg, character.only = TRUE)
[17:39:09.025]                       }
[17:39:09.025]                     })
[17:39:09.025]                   }
[17:39:09.025]                   ...future.strategy.old <- future::plan("list")
[17:39:09.025]                   options(future.plan = NULL)
[17:39:09.025]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:09.025]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:09.025]                 }
[17:39:09.025]                 ...future.workdir <- getwd()
[17:39:09.025]             }
[17:39:09.025]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:09.025]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:09.025]         }
[17:39:09.025]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:09.025]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:09.025]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:09.025]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:09.025]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:09.025]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:09.025]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:09.025]             base::names(...future.oldOptions))
[17:39:09.025]     }
[17:39:09.025]     if (FALSE) {
[17:39:09.025]     }
[17:39:09.025]     else {
[17:39:09.025]         if (TRUE) {
[17:39:09.025]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:09.025]                 open = "w")
[17:39:09.025]         }
[17:39:09.025]         else {
[17:39:09.025]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:09.025]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:09.025]         }
[17:39:09.025]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:09.025]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:09.025]             base::sink(type = "output", split = FALSE)
[17:39:09.025]             base::close(...future.stdout)
[17:39:09.025]         }, add = TRUE)
[17:39:09.025]     }
[17:39:09.025]     ...future.frame <- base::sys.nframe()
[17:39:09.025]     ...future.conditions <- base::list()
[17:39:09.025]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:09.025]     if (FALSE) {
[17:39:09.025]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:09.025]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:09.025]     }
[17:39:09.025]     ...future.result <- base::tryCatch({
[17:39:09.025]         base::withCallingHandlers({
[17:39:09.025]             ...future.value <- base::withVisible(base::local({
[17:39:09.025]                 ...future.makeSendCondition <- base::local({
[17:39:09.025]                   sendCondition <- NULL
[17:39:09.025]                   function(frame = 1L) {
[17:39:09.025]                     if (is.function(sendCondition)) 
[17:39:09.025]                       return(sendCondition)
[17:39:09.025]                     ns <- getNamespace("parallel")
[17:39:09.025]                     if (exists("sendData", mode = "function", 
[17:39:09.025]                       envir = ns)) {
[17:39:09.025]                       parallel_sendData <- get("sendData", mode = "function", 
[17:39:09.025]                         envir = ns)
[17:39:09.025]                       envir <- sys.frame(frame)
[17:39:09.025]                       master <- NULL
[17:39:09.025]                       while (!identical(envir, .GlobalEnv) && 
[17:39:09.025]                         !identical(envir, emptyenv())) {
[17:39:09.025]                         if (exists("master", mode = "list", envir = envir, 
[17:39:09.025]                           inherits = FALSE)) {
[17:39:09.025]                           master <- get("master", mode = "list", 
[17:39:09.025]                             envir = envir, inherits = FALSE)
[17:39:09.025]                           if (inherits(master, c("SOCKnode", 
[17:39:09.025]                             "SOCK0node"))) {
[17:39:09.025]                             sendCondition <<- function(cond) {
[17:39:09.025]                               data <- list(type = "VALUE", value = cond, 
[17:39:09.025]                                 success = TRUE)
[17:39:09.025]                               parallel_sendData(master, data)
[17:39:09.025]                             }
[17:39:09.025]                             return(sendCondition)
[17:39:09.025]                           }
[17:39:09.025]                         }
[17:39:09.025]                         frame <- frame + 1L
[17:39:09.025]                         envir <- sys.frame(frame)
[17:39:09.025]                       }
[17:39:09.025]                     }
[17:39:09.025]                     sendCondition <<- function(cond) NULL
[17:39:09.025]                   }
[17:39:09.025]                 })
[17:39:09.025]                 withCallingHandlers({
[17:39:09.025]                   {
[17:39:09.025]                     message(sprintf("Calculating tile #%d of %d ...", 
[17:39:09.025]                       ii, n), appendLF = FALSE)
[17:39:09.025]                     fit <- mandelbrot(C)
[17:39:09.025]                     delay(fit)
[17:39:09.025]                     message(" done")
[17:39:09.025]                     fit
[17:39:09.025]                   }
[17:39:09.025]                 }, immediateCondition = function(cond) {
[17:39:09.025]                   sendCondition <- ...future.makeSendCondition()
[17:39:09.025]                   sendCondition(cond)
[17:39:09.025]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:09.025]                   {
[17:39:09.025]                     inherits <- base::inherits
[17:39:09.025]                     invokeRestart <- base::invokeRestart
[17:39:09.025]                     is.null <- base::is.null
[17:39:09.025]                     muffled <- FALSE
[17:39:09.025]                     if (inherits(cond, "message")) {
[17:39:09.025]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:09.025]                       if (muffled) 
[17:39:09.025]                         invokeRestart("muffleMessage")
[17:39:09.025]                     }
[17:39:09.025]                     else if (inherits(cond, "warning")) {
[17:39:09.025]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:09.025]                       if (muffled) 
[17:39:09.025]                         invokeRestart("muffleWarning")
[17:39:09.025]                     }
[17:39:09.025]                     else if (inherits(cond, "condition")) {
[17:39:09.025]                       if (!is.null(pattern)) {
[17:39:09.025]                         computeRestarts <- base::computeRestarts
[17:39:09.025]                         grepl <- base::grepl
[17:39:09.025]                         restarts <- computeRestarts(cond)
[17:39:09.025]                         for (restart in restarts) {
[17:39:09.025]                           name <- restart$name
[17:39:09.025]                           if (is.null(name)) 
[17:39:09.025]                             next
[17:39:09.025]                           if (!grepl(pattern, name)) 
[17:39:09.025]                             next
[17:39:09.025]                           invokeRestart(restart)
[17:39:09.025]                           muffled <- TRUE
[17:39:09.025]                           break
[17:39:09.025]                         }
[17:39:09.025]                       }
[17:39:09.025]                     }
[17:39:09.025]                     invisible(muffled)
[17:39:09.025]                   }
[17:39:09.025]                   muffleCondition(cond)
[17:39:09.025]                 })
[17:39:09.025]             }))
[17:39:09.025]             future::FutureResult(value = ...future.value$value, 
[17:39:09.025]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:09.025]                   ...future.rng), globalenv = if (FALSE) 
[17:39:09.025]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:09.025]                     ...future.globalenv.names))
[17:39:09.025]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:09.025]         }, condition = base::local({
[17:39:09.025]             c <- base::c
[17:39:09.025]             inherits <- base::inherits
[17:39:09.025]             invokeRestart <- base::invokeRestart
[17:39:09.025]             length <- base::length
[17:39:09.025]             list <- base::list
[17:39:09.025]             seq.int <- base::seq.int
[17:39:09.025]             signalCondition <- base::signalCondition
[17:39:09.025]             sys.calls <- base::sys.calls
[17:39:09.025]             `[[` <- base::`[[`
[17:39:09.025]             `+` <- base::`+`
[17:39:09.025]             `<<-` <- base::`<<-`
[17:39:09.025]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:09.025]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:09.025]                   3L)]
[17:39:09.025]             }
[17:39:09.025]             function(cond) {
[17:39:09.025]                 is_error <- inherits(cond, "error")
[17:39:09.025]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:09.025]                   NULL)
[17:39:09.025]                 if (is_error) {
[17:39:09.025]                   sessionInformation <- function() {
[17:39:09.025]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:09.025]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:09.025]                       search = base::search(), system = base::Sys.info())
[17:39:09.025]                   }
[17:39:09.025]                   ...future.conditions[[length(...future.conditions) + 
[17:39:09.025]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:09.025]                     cond$call), session = sessionInformation(), 
[17:39:09.025]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:09.025]                   signalCondition(cond)
[17:39:09.025]                 }
[17:39:09.025]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:09.025]                 "immediateCondition"))) {
[17:39:09.025]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:09.025]                   ...future.conditions[[length(...future.conditions) + 
[17:39:09.025]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:09.025]                   if (TRUE && !signal) {
[17:39:09.025]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:09.025]                     {
[17:39:09.025]                       inherits <- base::inherits
[17:39:09.025]                       invokeRestart <- base::invokeRestart
[17:39:09.025]                       is.null <- base::is.null
[17:39:09.025]                       muffled <- FALSE
[17:39:09.025]                       if (inherits(cond, "message")) {
[17:39:09.025]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:09.025]                         if (muffled) 
[17:39:09.025]                           invokeRestart("muffleMessage")
[17:39:09.025]                       }
[17:39:09.025]                       else if (inherits(cond, "warning")) {
[17:39:09.025]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:09.025]                         if (muffled) 
[17:39:09.025]                           invokeRestart("muffleWarning")
[17:39:09.025]                       }
[17:39:09.025]                       else if (inherits(cond, "condition")) {
[17:39:09.025]                         if (!is.null(pattern)) {
[17:39:09.025]                           computeRestarts <- base::computeRestarts
[17:39:09.025]                           grepl <- base::grepl
[17:39:09.025]                           restarts <- computeRestarts(cond)
[17:39:09.025]                           for (restart in restarts) {
[17:39:09.025]                             name <- restart$name
[17:39:09.025]                             if (is.null(name)) 
[17:39:09.025]                               next
[17:39:09.025]                             if (!grepl(pattern, name)) 
[17:39:09.025]                               next
[17:39:09.025]                             invokeRestart(restart)
[17:39:09.025]                             muffled <- TRUE
[17:39:09.025]                             break
[17:39:09.025]                           }
[17:39:09.025]                         }
[17:39:09.025]                       }
[17:39:09.025]                       invisible(muffled)
[17:39:09.025]                     }
[17:39:09.025]                     muffleCondition(cond, pattern = "^muffle")
[17:39:09.025]                   }
[17:39:09.025]                 }
[17:39:09.025]                 else {
[17:39:09.025]                   if (TRUE) {
[17:39:09.025]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:09.025]                     {
[17:39:09.025]                       inherits <- base::inherits
[17:39:09.025]                       invokeRestart <- base::invokeRestart
[17:39:09.025]                       is.null <- base::is.null
[17:39:09.025]                       muffled <- FALSE
[17:39:09.025]                       if (inherits(cond, "message")) {
[17:39:09.025]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:09.025]                         if (muffled) 
[17:39:09.025]                           invokeRestart("muffleMessage")
[17:39:09.025]                       }
[17:39:09.025]                       else if (inherits(cond, "warning")) {
[17:39:09.025]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:09.025]                         if (muffled) 
[17:39:09.025]                           invokeRestart("muffleWarning")
[17:39:09.025]                       }
[17:39:09.025]                       else if (inherits(cond, "condition")) {
[17:39:09.025]                         if (!is.null(pattern)) {
[17:39:09.025]                           computeRestarts <- base::computeRestarts
[17:39:09.025]                           grepl <- base::grepl
[17:39:09.025]                           restarts <- computeRestarts(cond)
[17:39:09.025]                           for (restart in restarts) {
[17:39:09.025]                             name <- restart$name
[17:39:09.025]                             if (is.null(name)) 
[17:39:09.025]                               next
[17:39:09.025]                             if (!grepl(pattern, name)) 
[17:39:09.025]                               next
[17:39:09.025]                             invokeRestart(restart)
[17:39:09.025]                             muffled <- TRUE
[17:39:09.025]                             break
[17:39:09.025]                           }
[17:39:09.025]                         }
[17:39:09.025]                       }
[17:39:09.025]                       invisible(muffled)
[17:39:09.025]                     }
[17:39:09.025]                     muffleCondition(cond, pattern = "^muffle")
[17:39:09.025]                   }
[17:39:09.025]                 }
[17:39:09.025]             }
[17:39:09.025]         }))
[17:39:09.025]     }, error = function(ex) {
[17:39:09.025]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:09.025]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:09.025]                 ...future.rng), started = ...future.startTime, 
[17:39:09.025]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:09.025]             version = "1.8"), class = "FutureResult")
[17:39:09.025]     }, finally = {
[17:39:09.025]         if (!identical(...future.workdir, getwd())) 
[17:39:09.025]             setwd(...future.workdir)
[17:39:09.025]         {
[17:39:09.025]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:09.025]                 ...future.oldOptions$nwarnings <- NULL
[17:39:09.025]             }
[17:39:09.025]             base::options(...future.oldOptions)
[17:39:09.025]             if (.Platform$OS.type == "windows") {
[17:39:09.025]                 old_names <- names(...future.oldEnvVars)
[17:39:09.025]                 envs <- base::Sys.getenv()
[17:39:09.025]                 names <- names(envs)
[17:39:09.025]                 common <- intersect(names, old_names)
[17:39:09.025]                 added <- setdiff(names, old_names)
[17:39:09.025]                 removed <- setdiff(old_names, names)
[17:39:09.025]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:09.025]                   envs[common]]
[17:39:09.025]                 NAMES <- toupper(changed)
[17:39:09.025]                 args <- list()
[17:39:09.025]                 for (kk in seq_along(NAMES)) {
[17:39:09.025]                   name <- changed[[kk]]
[17:39:09.025]                   NAME <- NAMES[[kk]]
[17:39:09.025]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:09.025]                     next
[17:39:09.025]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:09.025]                 }
[17:39:09.025]                 NAMES <- toupper(added)
[17:39:09.025]                 for (kk in seq_along(NAMES)) {
[17:39:09.025]                   name <- added[[kk]]
[17:39:09.025]                   NAME <- NAMES[[kk]]
[17:39:09.025]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:09.025]                     next
[17:39:09.025]                   args[[name]] <- ""
[17:39:09.025]                 }
[17:39:09.025]                 NAMES <- toupper(removed)
[17:39:09.025]                 for (kk in seq_along(NAMES)) {
[17:39:09.025]                   name <- removed[[kk]]
[17:39:09.025]                   NAME <- NAMES[[kk]]
[17:39:09.025]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:09.025]                     next
[17:39:09.025]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:09.025]                 }
[17:39:09.025]                 if (length(args) > 0) 
[17:39:09.025]                   base::do.call(base::Sys.setenv, args = args)
[17:39:09.025]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:09.025]             }
[17:39:09.025]             else {
[17:39:09.025]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:09.025]             }
[17:39:09.025]             {
[17:39:09.025]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:09.025]                   0L) {
[17:39:09.025]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:09.025]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:09.025]                   base::options(opts)
[17:39:09.025]                 }
[17:39:09.025]                 {
[17:39:09.025]                   {
[17:39:09.025]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:09.025]                     NULL
[17:39:09.025]                   }
[17:39:09.025]                   options(future.plan = NULL)
[17:39:09.025]                   if (is.na(NA_character_)) 
[17:39:09.025]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:09.025]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:09.025]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:09.025]                     .init = FALSE)
[17:39:09.025]                 }
[17:39:09.025]             }
[17:39:09.025]         }
[17:39:09.025]     })
[17:39:09.025]     if (TRUE) {
[17:39:09.025]         base::sink(type = "output", split = FALSE)
[17:39:09.025]         if (TRUE) {
[17:39:09.025]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:09.025]         }
[17:39:09.025]         else {
[17:39:09.025]             ...future.result["stdout"] <- base::list(NULL)
[17:39:09.025]         }
[17:39:09.025]         base::close(...future.stdout)
[17:39:09.025]         ...future.stdout <- NULL
[17:39:09.025]     }
[17:39:09.025]     ...future.result$conditions <- ...future.conditions
[17:39:09.025]     ...future.result$finished <- base::Sys.time()
[17:39:09.025]     ...future.result
[17:39:09.025] }
[17:39:09.027] Poll #1 (0): usedNodes() = 2, workers = 2
[17:39:09.038] receiveMessageFromWorker() for ClusterFuture ...
[17:39:09.038] - Validating connection of MultisessionFuture
[17:39:09.038] - received message: FutureResult
[17:39:09.039] - Received FutureResult
[17:39:09.039] - Erased future from FutureRegistry
[17:39:09.039] result() for ClusterFuture ...
[17:39:09.039] - result already collected: FutureResult
[17:39:09.039] result() for ClusterFuture ... done
[17:39:09.039] signalConditions() ...
[17:39:09.039]  - include = ‘immediateCondition’
[17:39:09.039]  - exclude = 
[17:39:09.039]  - resignal = FALSE
[17:39:09.039]  - Number of conditions: 2
[17:39:09.039] signalConditions() ... done
[17:39:09.040] receiveMessageFromWorker() for ClusterFuture ... done
[17:39:09.040] result() for ClusterFuture ...
[17:39:09.040] - result already collected: FutureResult
[17:39:09.040] result() for ClusterFuture ... done
[17:39:09.040] result() for ClusterFuture ...
[17:39:09.040] - result already collected: FutureResult
[17:39:09.040] result() for ClusterFuture ... done
[17:39:09.040] signalConditions() ...
[17:39:09.040]  - include = ‘immediateCondition’
[17:39:09.040]  - exclude = 
[17:39:09.041]  - resignal = FALSE
[17:39:09.041]  - Number of conditions: 2
[17:39:09.041] signalConditions() ... done
[17:39:09.042] Exporting 4 global objects (14.24 KiB) to cluster node #2 ...
[17:39:09.042] Exporting ‘ii’ (56 bytes) to cluster node #2 ...
[17:39:09.043] Exporting ‘ii’ (56 bytes) to cluster node #2 ... DONE
[17:39:09.043] Exporting ‘n’ (56 bytes) to cluster node #2 ...
[17:39:09.043] Exporting ‘n’ (56 bytes) to cluster node #2 ... DONE
[17:39:09.043] Exporting ‘C’ (10.72 KiB) to cluster node #2 ...
[17:39:09.085] Exporting ‘C’ (10.72 KiB) to cluster node #2 ... DONE
[17:39:09.085] Exporting ‘delay’ (3.41 KiB) to cluster node #2 ...
[17:39:09.129] Exporting ‘delay’ (3.41 KiB) to cluster node #2 ... DONE
[17:39:09.129] Exporting 4 global objects (14.24 KiB) to cluster node #2 ... DONE
[17:39:09.130] MultisessionFuture started
[17:39:09.130] - Launch lazy future ... done
[17:39:09.130] run() for ‘MultisessionFuture’ ... done
[17:39:09.130] - run() ... done
[17:39:09.130] - resolved() ...
[17:39:09.141] - resolved: FALSE
[17:39:09.141] - resolved() ... done
[17:39:09.141] resolved() for ‘MultisessionFuture’ ... done
Plotting tile #1 of 4 ...
[17:39:09.142] result() for ClusterFuture ...
[17:39:09.142] - result already collected: FutureResult
[17:39:09.142] result() for ClusterFuture ... done
[17:39:09.142] result() for ClusterFuture ...
[17:39:09.142] - result already collected: FutureResult
[17:39:09.142] result() for ClusterFuture ... done
[17:39:09.142] signalConditions() ...
[17:39:09.142]  - include = ‘immediateCondition’
[17:39:09.142]  - exclude = 
[17:39:09.142]  - resignal = FALSE
[17:39:09.142]  - Number of conditions: 2
[17:39:09.143] signalConditions() ... done
[17:39:09.143] Future state: ‘finished’
[17:39:09.143] result() for ClusterFuture ...
[17:39:09.143] - result already collected: FutureResult
[17:39:09.143] result() for ClusterFuture ... done
[17:39:09.143] signalConditions() ...
[17:39:09.143]  - include = ‘condition’
[17:39:09.143]  - exclude = ‘immediateCondition’
[17:39:09.143]  - resignal = TRUE
[17:39:09.143]  - Number of conditions: 2
[17:39:09.143]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #1 of 4 ...[17:39:09.144]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[17:39:09.144] signalConditions() ... done
Plotting tile #2 of 4 ...
[17:39:09.145] result() for ClusterFuture ...
[17:39:09.145] - result already collected: FutureResult
[17:39:09.145] result() for ClusterFuture ... done
[17:39:09.145] result() for ClusterFuture ...
[17:39:09.145] - result already collected: FutureResult
[17:39:09.145] result() for ClusterFuture ... done
[17:39:09.145] signalConditions() ...
[17:39:09.145]  - include = ‘immediateCondition’
[17:39:09.145]  - exclude = 
[17:39:09.145]  - resignal = FALSE
[17:39:09.146]  - Number of conditions: 2
[17:39:09.146] signalConditions() ... done
[17:39:09.146] Future state: ‘finished’
[17:39:09.146] result() for ClusterFuture ...
[17:39:09.146] - result already collected: FutureResult
[17:39:09.146] result() for ClusterFuture ... done
[17:39:09.146] signalConditions() ...
[17:39:09.146]  - include = ‘condition’
[17:39:09.146]  - exclude = ‘immediateCondition’
[17:39:09.146]  - resignal = TRUE
[17:39:09.147]  - Number of conditions: 2
[17:39:09.147]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #2 of 4 ...[17:39:09.147]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[17:39:09.147] signalConditions() ... done
[17:39:09.148] receiveMessageFromWorker() for ClusterFuture ...
[17:39:09.148] - Validating connection of MultisessionFuture
[17:39:09.149] - received message: FutureResult
[17:39:09.149] - Received FutureResult
[17:39:09.149] - Erased future from FutureRegistry
[17:39:09.149] result() for ClusterFuture ...
[17:39:09.149] - result already collected: FutureResult
[17:39:09.149] result() for ClusterFuture ... done
[17:39:09.149] signalConditions() ...
[17:39:09.149]  - include = ‘immediateCondition’
[17:39:09.149]  - exclude = 
[17:39:09.149]  - resignal = FALSE
[17:39:09.150]  - Number of conditions: 2
[17:39:09.150] signalConditions() ... done
[17:39:09.150] receiveMessageFromWorker() for ClusterFuture ... done
Plotting tile #3 of 4 ...
[17:39:09.150] result() for ClusterFuture ...
[17:39:09.150] - result already collected: FutureResult
[17:39:09.150] result() for ClusterFuture ... done
[17:39:09.150] result() for ClusterFuture ...
[17:39:09.150] - result already collected: FutureResult
[17:39:09.150] result() for ClusterFuture ... done
[17:39:09.150] signalConditions() ...
[17:39:09.151]  - include = ‘immediateCondition’
[17:39:09.153]  - exclude = 
[17:39:09.153]  - resignal = FALSE
[17:39:09.153]  - Number of conditions: 2
[17:39:09.153] signalConditions() ... done
[17:39:09.153] Future state: ‘finished’
[17:39:09.154] result() for ClusterFuture ...
[17:39:09.154] - result already collected: FutureResult
[17:39:09.154] result() for ClusterFuture ... done
[17:39:09.154] signalConditions() ...
[17:39:09.154]  - include = ‘condition’
[17:39:09.154]  - exclude = ‘immediateCondition’
[17:39:09.154]  - resignal = TRUE
[17:39:09.154]  - Number of conditions: 2
[17:39:09.154]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #3 of 4 ...[17:39:09.154]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[17:39:09.154] signalConditions() ... done
[17:39:09.206] receiveMessageFromWorker() for ClusterFuture ...
[17:39:09.206] - Validating connection of MultisessionFuture
[17:39:09.207] - received message: FutureResult
[17:39:09.207] - Received FutureResult
[17:39:09.207] - Erased future from FutureRegistry
[17:39:09.207] result() for ClusterFuture ...
[17:39:09.207] - result already collected: FutureResult
[17:39:09.207] result() for ClusterFuture ... done
[17:39:09.208] signalConditions() ...
[17:39:09.208]  - include = ‘immediateCondition’
[17:39:09.208]  - exclude = 
[17:39:09.208]  - resignal = FALSE
[17:39:09.208]  - Number of conditions: 2
[17:39:09.208] signalConditions() ... done
[17:39:09.208] receiveMessageFromWorker() for ClusterFuture ... done
Plotting tile #4 of 4 ...
[17:39:09.208] result() for ClusterFuture ...
[17:39:09.208] - result already collected: FutureResult
[17:39:09.208] result() for ClusterFuture ... done
[17:39:09.209] result() for ClusterFuture ...
[17:39:09.209] - result already collected: FutureResult
[17:39:09.209] result() for ClusterFuture ... done
[17:39:09.209] signalConditions() ...
[17:39:09.209]  - include = ‘immediateCondition’
[17:39:09.209]  - exclude = 
[17:39:09.209]  - resignal = FALSE
[17:39:09.209]  - Number of conditions: 2
[17:39:09.209] signalConditions() ... done
[17:39:09.209] Future state: ‘finished’
[17:39:09.209] result() for ClusterFuture ...
[17:39:09.210] - result already collected: FutureResult
[17:39:09.210] result() for ClusterFuture ... done
[17:39:09.210] signalConditions() ...
[17:39:09.210]  - include = ‘condition’
[17:39:09.210]  - exclude = ‘immediateCondition’
[17:39:09.210]  - resignal = TRUE
[17:39:09.210]  - Number of conditions: 2
[17:39:09.210]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #4 of 4 ...[17:39:09.210]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[17:39:09.210] signalConditions() ... done

> close.screen()
 [1]  1  2  3  4  5  6  7  8  9 10 11 12

> message("SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).\n")
SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).

- plan('multisession') ... DONE
Testing with 2 cores ... DONE
> message("*** Mandelbrot demo of the 'future' package ... DONE")
*** Mandelbrot demo of the 'future' package ... DONE
> 
> message("*** Demos ... DONE")
*** Demos ... DONE
> 
> source("incl/end.R")
[17:39:09.212] plan(): Setting new future strategy stack:
[17:39:09.212] List of future strategies:
[17:39:09.212] 1. sequential:
[17:39:09.212]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:09.212]    - tweaked: FALSE
[17:39:09.212]    - call: future::plan("sequential")
[17:39:09.213] plan(): nbrOfWorkers() = 1
> 
