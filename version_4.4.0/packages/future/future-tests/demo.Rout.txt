
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[09:30:43.398] plan(): Setting new future strategy stack:
[09:30:43.399] List of future strategies:
[09:30:43.399] 1. sequential:
[09:30:43.399]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:43.399]    - tweaked: FALSE
[09:30:43.399]    - call: future::plan("sequential")
[09:30:43.410] plan(): nbrOfWorkers() = 1
> 
> message("*** Demos ...")
*** Demos ...
> 
> message("*** Fibonacci demo of the 'future' package ...")
*** Fibonacci demo of the 'future' package ...
> demo("fibonacci", package = "future", ask = FALSE)


	demo(fibonacci)
	---- ~~~~~~~~~

> library("future")

> library("listenv")

> ## IMPORTANT:
> ## 1. The below usage of lazy futures will only work when they are
> ##    all evaluated in the same process.
> ## 2. We disable the capturing of standard output (stdout=NA) to avoid
> ##    'sink stack is full' errors
> ## 3. We disable the capturing of most conditions (condition="error") to
> ##    avoid stacking up too many conditions
> oplan <- plan(sequential)
[09:30:43.426] plan(): Setting new future strategy stack:
[09:30:43.426] List of future strategies:
[09:30:43.426] 1. sequential:
[09:30:43.426]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:43.426]    - tweaked: FALSE
[09:30:43.426]    - call: plan(sequential)
[09:30:43.437] plan(): nbrOfWorkers() = 1

> ## Defines the first 100 Fibonacci numbers
> ## (0, 1, 1, 2, 3, 5, 8, ...)
> ## but calculate only the ones need when
> ## a number is actually requested.
> 
> x <- listenv()

> x[[1]] <- 0

> x[[2]] <- 1

> for (i in 3:100) {
+   x[[i]] %<-% { x[[i - 2]] + x[[i - 1]] } %lazy% TRUE %stdout% NA %conditions% "error"
+ }
[09:30:43.443] getGlobalsAndPackages() ...
[09:30:43.443] Searching for globals...
[09:30:43.451] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:43.451] Searching for globals ... DONE
[09:30:43.451] Resolving globals: FALSE
[09:30:43.454] The total size of the 2 globals is 224 bytes (224 bytes)
[09:30:43.455] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 224 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (168 bytes of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:43.455] - globals: [2] ‘x’, ‘i’
[09:30:43.455] 
[09:30:43.455] getGlobalsAndPackages() ... DONE
[09:30:43.456] getGlobalsAndPackages() ...
[09:30:43.456] Searching for globals...
[09:30:43.457] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:43.457] Searching for globals ... DONE
[09:30:43.458] Resolving globals: FALSE
[09:30:43.458] The total size of the 2 globals is 8.41 KiB (8608 bytes)
[09:30:43.459] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 8.41 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (8.35 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:43.459] - globals: [2] ‘x’, ‘i’
[09:30:43.459] 
[09:30:43.459] getGlobalsAndPackages() ... DONE
[09:30:43.459] getGlobalsAndPackages() ...
[09:30:43.459] Searching for globals...
[09:30:43.461] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:43.461] Searching for globals ... DONE
[09:30:43.461] Resolving globals: FALSE
[09:30:43.462] The total size of the 2 globals is 16.76 KiB (17160 bytes)
[09:30:43.462] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 16.76 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (16.70 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:43.463] - globals: [2] ‘x’, ‘i’
[09:30:43.463] 
[09:30:43.463] getGlobalsAndPackages() ... DONE
[09:30:43.463] getGlobalsAndPackages() ...
[09:30:43.463] Searching for globals...
[09:30:43.465] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:43.465] Searching for globals ... DONE
[09:30:43.465] Resolving globals: FALSE
[09:30:43.466] The total size of the 2 globals is 25.11 KiB (25712 bytes)
[09:30:43.466] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 25.11 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (25.05 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:43.467] - globals: [2] ‘x’, ‘i’
[09:30:43.467] 
[09:30:43.467] getGlobalsAndPackages() ... DONE
[09:30:43.467] getGlobalsAndPackages() ...
[09:30:43.467] Searching for globals...
[09:30:43.469] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:43.469] Searching for globals ... DONE
[09:30:43.469] Resolving globals: FALSE
[09:30:43.470] The total size of the 2 globals is 33.46 KiB (34264 bytes)
[09:30:43.471] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 33.46 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (33.41 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:43.471] - globals: [2] ‘x’, ‘i’
[09:30:43.471] 
[09:30:43.471] getGlobalsAndPackages() ... DONE
[09:30:43.471] getGlobalsAndPackages() ...
[09:30:43.471] Searching for globals...
[09:30:43.473] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:43.473] Searching for globals ... DONE
[09:30:43.473] Resolving globals: FALSE
[09:30:43.475] The total size of the 2 globals is 41.81 KiB (42816 bytes)
[09:30:43.475] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 41.81 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (41.76 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:43.475] - globals: [2] ‘x’, ‘i’
[09:30:43.475] 
[09:30:43.475] getGlobalsAndPackages() ... DONE
[09:30:43.476] getGlobalsAndPackages() ...
[09:30:43.476] Searching for globals...
[09:30:43.478] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:43.478] Searching for globals ... DONE
[09:30:43.478] Resolving globals: FALSE
[09:30:43.480] The total size of the 2 globals is 50.16 KiB (51368 bytes)
[09:30:43.481] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 50.16 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (50.11 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:43.481] - globals: [2] ‘x’, ‘i’
[09:30:43.481] 
[09:30:43.481] getGlobalsAndPackages() ... DONE
[09:30:43.481] getGlobalsAndPackages() ...
[09:30:43.481] Searching for globals...
[09:30:43.483] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:43.483] Searching for globals ... DONE
[09:30:43.483] Resolving globals: FALSE
[09:30:43.485] The total size of the 2 globals is 58.52 KiB (59920 bytes)
[09:30:43.485] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 58.52 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (58.46 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:43.486] - globals: [2] ‘x’, ‘i’
[09:30:43.486] 
[09:30:43.486] getGlobalsAndPackages() ... DONE
[09:30:43.486] getGlobalsAndPackages() ...
[09:30:43.486] Searching for globals...
[09:30:43.488] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:43.488] Searching for globals ... DONE
[09:30:43.488] Resolving globals: FALSE
[09:30:43.490] The total size of the 2 globals is 66.87 KiB (68472 bytes)
[09:30:43.491] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 66.87 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (66.81 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:43.491] - globals: [2] ‘x’, ‘i’
[09:30:43.491] 
[09:30:43.491] getGlobalsAndPackages() ... DONE
[09:30:43.491] getGlobalsAndPackages() ...
[09:30:43.492] Searching for globals...
[09:30:43.493] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:43.493] Searching for globals ... DONE
[09:30:43.493] Resolving globals: FALSE
[09:30:43.496] The total size of the 2 globals is 75.22 KiB (77024 bytes)
[09:30:43.496] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 75.22 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (75.16 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:43.496] - globals: [2] ‘x’, ‘i’
[09:30:43.496] 
[09:30:43.496] getGlobalsAndPackages() ... DONE
[09:30:43.497] getGlobalsAndPackages() ...
[09:30:43.497] Searching for globals...
[09:30:43.499] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:43.499] Searching for globals ... DONE
[09:30:43.499] Resolving globals: FALSE
[09:30:43.502] The total size of the 2 globals is 83.57 KiB (85576 bytes)
[09:30:43.502] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 83.57 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (83.52 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:43.502] - globals: [2] ‘x’, ‘i’
[09:30:43.503] 
[09:30:43.503] getGlobalsAndPackages() ... DONE
[09:30:43.503] getGlobalsAndPackages() ...
[09:30:43.503] Searching for globals...
[09:30:43.505] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:43.505] Searching for globals ... DONE
[09:30:43.505] Resolving globals: FALSE
[09:30:43.508] The total size of the 2 globals is 91.92 KiB (94128 bytes)
[09:30:43.508] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 91.92 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (91.87 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:43.508] - globals: [2] ‘x’, ‘i’
[09:30:43.508] 
[09:30:43.508] getGlobalsAndPackages() ... DONE
[09:30:43.509] getGlobalsAndPackages() ...
[09:30:43.509] Searching for globals...
[09:30:43.510] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:43.510] Searching for globals ... DONE
[09:30:43.511] Resolving globals: FALSE
[09:30:43.514] The total size of the 2 globals is 100.27 KiB (102680 bytes)
[09:30:43.514] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 100.27 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (100.22 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:43.514] - globals: [2] ‘x’, ‘i’
[09:30:43.514] 
[09:30:43.514] getGlobalsAndPackages() ... DONE
[09:30:43.515] getGlobalsAndPackages() ...
[09:30:43.515] Searching for globals...
[09:30:43.516] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:43.517] Searching for globals ... DONE
[09:30:43.517] Resolving globals: FALSE
[09:30:43.521] The total size of the 2 globals is 108.62 KiB (111232 bytes)
[09:30:43.521] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 108.62 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (108.57 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:43.521] - globals: [2] ‘x’, ‘i’
[09:30:43.521] 
[09:30:43.521] getGlobalsAndPackages() ... DONE
[09:30:43.522] getGlobalsAndPackages() ...
[09:30:43.522] Searching for globals...
[09:30:43.523] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:43.524] Searching for globals ... DONE
[09:30:43.524] Resolving globals: FALSE
[09:30:43.527] The total size of the 2 globals is 116.98 KiB (119784 bytes)
[09:30:43.528] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 116.98 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (116.92 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:43.528] - globals: [2] ‘x’, ‘i’
[09:30:43.528] 
[09:30:43.528] getGlobalsAndPackages() ... DONE
[09:30:43.528] getGlobalsAndPackages() ...
[09:30:43.528] Searching for globals...
[09:30:43.530] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:43.530] Searching for globals ... DONE
[09:30:43.530] Resolving globals: FALSE
[09:30:43.534] The total size of the 2 globals is 125.33 KiB (128336 bytes)
[09:30:43.534] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 125.33 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (125.27 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:43.535] - globals: [2] ‘x’, ‘i’
[09:30:43.535] 
[09:30:43.535] getGlobalsAndPackages() ... DONE
[09:30:43.535] getGlobalsAndPackages() ...
[09:30:43.535] Searching for globals...
[09:30:43.537] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:43.537] Searching for globals ... DONE
[09:30:43.538] Resolving globals: FALSE
[09:30:43.542] The total size of the 2 globals is 133.68 KiB (136888 bytes)
[09:30:43.542] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 133.68 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (133.62 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:43.542] - globals: [2] ‘x’, ‘i’
[09:30:43.542] 
[09:30:43.542] getGlobalsAndPackages() ... DONE
[09:30:43.543] getGlobalsAndPackages() ...
[09:30:43.543] Searching for globals...
[09:30:43.544] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:43.544] Searching for globals ... DONE
[09:30:43.545] Resolving globals: FALSE
[09:30:43.549] The total size of the 2 globals is 142.03 KiB (145440 bytes)
[09:30:43.549] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 142.03 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (141.98 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:43.549] - globals: [2] ‘x’, ‘i’
[09:30:43.550] 
[09:30:43.550] getGlobalsAndPackages() ... DONE
[09:30:43.550] getGlobalsAndPackages() ...
[09:30:43.550] Searching for globals...
[09:30:43.552] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:43.552] Searching for globals ... DONE
[09:30:43.552] Resolving globals: FALSE
[09:30:43.557] The total size of the 2 globals is 150.38 KiB (153992 bytes)
[09:30:43.557] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 150.38 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (150.33 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:43.558] - globals: [2] ‘x’, ‘i’
[09:30:43.558] 
[09:30:43.558] getGlobalsAndPackages() ... DONE
[09:30:43.558] getGlobalsAndPackages() ...
[09:30:43.558] Searching for globals...
[09:30:43.560] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:43.560] Searching for globals ... DONE
[09:30:43.560] Resolving globals: FALSE
[09:30:43.565] The total size of the 2 globals is 158.73 KiB (162544 bytes)
[09:30:43.565] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 158.73 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (158.68 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:43.565] - globals: [2] ‘x’, ‘i’
[09:30:43.565] 
[09:30:43.565] getGlobalsAndPackages() ... DONE
[09:30:43.566] getGlobalsAndPackages() ...
[09:30:43.566] Searching for globals...
[09:30:43.567] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:43.567] Searching for globals ... DONE
[09:30:43.568] Resolving globals: FALSE
[09:30:43.573] The total size of the 2 globals is 167.09 KiB (171096 bytes)
[09:30:43.574] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 167.09 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (167.03 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:43.574] - globals: [2] ‘x’, ‘i’
[09:30:43.574] 
[09:30:43.574] getGlobalsAndPackages() ... DONE
[09:30:43.574] getGlobalsAndPackages() ...
[09:30:43.574] Searching for globals...
[09:30:43.576] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:43.576] Searching for globals ... DONE
[09:30:43.576] Resolving globals: FALSE
[09:30:43.581] The total size of the 2 globals is 175.44 KiB (179648 bytes)
[09:30:43.582] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 175.44 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (175.38 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:43.582] - globals: [2] ‘x’, ‘i’
[09:30:43.582] 
[09:30:43.582] getGlobalsAndPackages() ... DONE
[09:30:43.583] getGlobalsAndPackages() ...
[09:30:43.583] Searching for globals...
[09:30:43.584] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:43.584] Searching for globals ... DONE
[09:30:43.584] Resolving globals: FALSE
[09:30:43.590] The total size of the 2 globals is 183.79 KiB (188200 bytes)
[09:30:43.591] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 183.79 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (183.73 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:43.591] - globals: [2] ‘x’, ‘i’
[09:30:43.591] 
[09:30:43.591] getGlobalsAndPackages() ... DONE
[09:30:43.592] getGlobalsAndPackages() ...
[09:30:43.592] Searching for globals...
[09:30:43.593] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:43.593] Searching for globals ... DONE
[09:30:43.593] Resolving globals: FALSE
[09:30:43.599] The total size of the 2 globals is 192.14 KiB (196752 bytes)
[09:30:43.599] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 192.14 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (192.09 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:43.600] - globals: [2] ‘x’, ‘i’
[09:30:43.600] 
[09:30:43.600] getGlobalsAndPackages() ... DONE
[09:30:43.600] getGlobalsAndPackages() ...
[09:30:43.600] Searching for globals...
[09:30:43.602] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:43.602] Searching for globals ... DONE
[09:30:43.602] Resolving globals: FALSE
[09:30:43.609] The total size of the 2 globals is 200.49 KiB (205304 bytes)
[09:30:43.609] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 200.49 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (200.44 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:43.609] - globals: [2] ‘x’, ‘i’
[09:30:43.609] 
[09:30:43.609] getGlobalsAndPackages() ... DONE
[09:30:43.610] getGlobalsAndPackages() ...
[09:30:43.610] Searching for globals...
[09:30:43.611] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:43.611] Searching for globals ... DONE
[09:30:43.611] Resolving globals: FALSE
[09:30:43.618] The total size of the 2 globals is 208.84 KiB (213856 bytes)
[09:30:43.618] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 208.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (208.79 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:43.618] - globals: [2] ‘x’, ‘i’
[09:30:43.618] 
[09:30:43.618] getGlobalsAndPackages() ... DONE
[09:30:43.619] getGlobalsAndPackages() ...
[09:30:43.619] Searching for globals...
[09:30:43.620] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:43.620] Searching for globals ... DONE
[09:30:43.621] Resolving globals: FALSE
[09:30:43.628] The total size of the 2 globals is 217.20 KiB (222408 bytes)
[09:30:43.628] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 217.20 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (217.14 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:43.628] - globals: [2] ‘x’, ‘i’
[09:30:43.628] 
[09:30:43.629] getGlobalsAndPackages() ... DONE
[09:30:43.629] getGlobalsAndPackages() ...
[09:30:43.629] Searching for globals...
[09:30:43.630] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:43.631] Searching for globals ... DONE
[09:30:43.631] Resolving globals: FALSE
[09:30:43.637] The total size of the 2 globals is 225.55 KiB (230960 bytes)
[09:30:43.638] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 225.55 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (225.49 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:43.638] - globals: [2] ‘x’, ‘i’
[09:30:43.638] 
[09:30:43.638] getGlobalsAndPackages() ... DONE
[09:30:43.638] getGlobalsAndPackages() ...
[09:30:43.639] Searching for globals...
[09:30:43.640] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:43.640] Searching for globals ... DONE
[09:30:43.640] Resolving globals: FALSE
[09:30:43.648] The total size of the 2 globals is 233.90 KiB (239512 bytes)
[09:30:43.648] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 233.90 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (233.84 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:43.648] - globals: [2] ‘x’, ‘i’
[09:30:43.649] 
[09:30:43.649] getGlobalsAndPackages() ... DONE
[09:30:43.649] getGlobalsAndPackages() ...
[09:30:43.649] Searching for globals...
[09:30:43.650] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:43.651] Searching for globals ... DONE
[09:30:43.651] Resolving globals: FALSE
[09:30:43.659] The total size of the 2 globals is 242.25 KiB (248064 bytes)
[09:30:43.659] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 242.25 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (242.20 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:43.659] - globals: [2] ‘x’, ‘i’
[09:30:43.659] 
[09:30:43.659] getGlobalsAndPackages() ... DONE
[09:30:43.660] getGlobalsAndPackages() ...
[09:30:43.660] Searching for globals...
[09:30:43.661] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:43.661] Searching for globals ... DONE
[09:30:43.661] Resolving globals: FALSE
[09:30:43.669] The total size of the 2 globals is 250.60 KiB (256616 bytes)
[09:30:43.669] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 250.60 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (250.55 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:43.669] - globals: [2] ‘x’, ‘i’
[09:30:43.669] 
[09:30:43.670] getGlobalsAndPackages() ... DONE
[09:30:43.670] getGlobalsAndPackages() ...
[09:30:43.670] Searching for globals...
[09:30:43.671] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:43.672] Searching for globals ... DONE
[09:30:43.672] Resolving globals: FALSE
[09:30:43.680] The total size of the 2 globals is 258.95 KiB (265168 bytes)
[09:30:43.680] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 258.95 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (258.90 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:43.681] - globals: [2] ‘x’, ‘i’
[09:30:43.681] 
[09:30:43.681] getGlobalsAndPackages() ... DONE
[09:30:43.681] getGlobalsAndPackages() ...
[09:30:43.681] Searching for globals...
[09:30:43.683] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:43.683] Searching for globals ... DONE
[09:30:43.683] Resolving globals: FALSE
[09:30:43.691] The total size of the 2 globals is 267.30 KiB (273720 bytes)
[09:30:43.692] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 267.30 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (267.25 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:43.692] - globals: [2] ‘x’, ‘i’
[09:30:43.692] 
[09:30:43.692] getGlobalsAndPackages() ... DONE
[09:30:43.693] getGlobalsAndPackages() ...
[09:30:43.693] Searching for globals...
[09:30:43.694] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:43.694] Searching for globals ... DONE
[09:30:43.694] Resolving globals: FALSE
[09:30:43.702] The total size of the 2 globals is 275.66 KiB (282272 bytes)
[09:30:43.703] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 275.66 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (275.60 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:43.703] - globals: [2] ‘x’, ‘i’
[09:30:43.703] 
[09:30:43.703] getGlobalsAndPackages() ... DONE
[09:30:43.704] getGlobalsAndPackages() ...
[09:30:43.704] Searching for globals...
[09:30:43.705] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:43.705] Searching for globals ... DONE
[09:30:43.705] Resolving globals: FALSE
[09:30:43.714] The total size of the 2 globals is 284.01 KiB (290824 bytes)
[09:30:43.715] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 284.01 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (283.95 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:43.715] - globals: [2] ‘x’, ‘i’
[09:30:43.715] 
[09:30:43.715] getGlobalsAndPackages() ... DONE
[09:30:43.715] getGlobalsAndPackages() ...
[09:30:43.716] Searching for globals...
[09:30:43.717] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:43.717] Searching for globals ... DONE
[09:30:43.717] Resolving globals: FALSE
[09:30:43.727] The total size of the 2 globals is 292.36 KiB (299376 bytes)
[09:30:43.727] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 292.36 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (292.30 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:43.727] - globals: [2] ‘x’, ‘i’
[09:30:43.727] 
[09:30:43.727] getGlobalsAndPackages() ... DONE
[09:30:43.728] getGlobalsAndPackages() ...
[09:30:43.728] Searching for globals...
[09:30:43.729] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:43.729] Searching for globals ... DONE
[09:30:43.729] Resolving globals: FALSE
[09:30:43.739] The total size of the 2 globals is 300.71 KiB (307928 bytes)
[09:30:43.739] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 300.71 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (300.66 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:43.739] - globals: [2] ‘x’, ‘i’
[09:30:43.740] 
[09:30:43.740] getGlobalsAndPackages() ... DONE
[09:30:43.740] getGlobalsAndPackages() ...
[09:30:43.740] Searching for globals...
[09:30:43.742] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:43.742] Searching for globals ... DONE
[09:30:43.742] Resolving globals: FALSE
[09:30:43.751] The total size of the 2 globals is 309.06 KiB (316480 bytes)
[09:30:43.751] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 309.06 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (309.01 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:43.752] - globals: [2] ‘x’, ‘i’
[09:30:43.752] 
[09:30:43.752] getGlobalsAndPackages() ... DONE
[09:30:43.752] getGlobalsAndPackages() ...
[09:30:43.752] Searching for globals...
[09:30:43.755] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:43.755] Searching for globals ... DONE
[09:30:43.755] Resolving globals: FALSE
[09:30:43.764] The total size of the 2 globals is 317.41 KiB (325032 bytes)
[09:30:43.765] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 317.41 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (317.36 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:43.765] - globals: [2] ‘x’, ‘i’
[09:30:43.765] 
[09:30:43.765] getGlobalsAndPackages() ... DONE
[09:30:43.765] getGlobalsAndPackages() ...
[09:30:43.766] Searching for globals...
[09:30:43.767] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:43.767] Searching for globals ... DONE
[09:30:43.767] Resolving globals: FALSE
[09:30:43.799] The total size of the 2 globals is 325.77 KiB (333584 bytes)
[09:30:43.800] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 325.77 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (325.71 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:43.800] - globals: [2] ‘x’, ‘i’
[09:30:43.800] 
[09:30:43.800] getGlobalsAndPackages() ... DONE
[09:30:43.800] getGlobalsAndPackages() ...
[09:30:43.801] Searching for globals...
[09:30:43.802] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:43.802] Searching for globals ... DONE
[09:30:43.802] Resolving globals: FALSE
[09:30:43.813] The total size of the 2 globals is 334.12 KiB (342136 bytes)
[09:30:43.814] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 334.12 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (334.06 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:43.814] - globals: [2] ‘x’, ‘i’
[09:30:43.814] 
[09:30:43.814] getGlobalsAndPackages() ... DONE
[09:30:43.814] getGlobalsAndPackages() ...
[09:30:43.815] Searching for globals...
[09:30:43.816] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:43.816] Searching for globals ... DONE
[09:30:43.816] Resolving globals: FALSE
[09:30:43.827] The total size of the 2 globals is 342.47 KiB (350688 bytes)
[09:30:43.828] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 342.47 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (342.41 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:43.828] - globals: [2] ‘x’, ‘i’
[09:30:43.828] 
[09:30:43.828] getGlobalsAndPackages() ... DONE
[09:30:43.828] getGlobalsAndPackages() ...
[09:30:43.828] Searching for globals...
[09:30:43.830] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:43.830] Searching for globals ... DONE
[09:30:43.830] Resolving globals: FALSE
[09:30:43.841] The total size of the 2 globals is 350.82 KiB (359240 bytes)
[09:30:43.842] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 350.82 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (350.77 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:43.842] - globals: [2] ‘x’, ‘i’
[09:30:43.842] 
[09:30:43.842] getGlobalsAndPackages() ... DONE
[09:30:43.842] getGlobalsAndPackages() ...
[09:30:43.842] Searching for globals...
[09:30:43.844] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:43.844] Searching for globals ... DONE
[09:30:43.844] Resolving globals: FALSE
[09:30:43.855] The total size of the 2 globals is 359.17 KiB (367792 bytes)
[09:30:43.855] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 359.17 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (359.12 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:43.855] - globals: [2] ‘x’, ‘i’
[09:30:43.855] 
[09:30:43.856] getGlobalsAndPackages() ... DONE
[09:30:43.856] getGlobalsAndPackages() ...
[09:30:43.856] Searching for globals...
[09:30:43.858] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:43.858] Searching for globals ... DONE
[09:30:43.858] Resolving globals: FALSE
[09:30:43.869] The total size of the 2 globals is 367.52 KiB (376344 bytes)
[09:30:43.870] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 367.52 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (367.47 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:43.870] - globals: [2] ‘x’, ‘i’
[09:30:43.870] 
[09:30:43.870] getGlobalsAndPackages() ... DONE
[09:30:43.871] getGlobalsAndPackages() ...
[09:30:43.871] Searching for globals...
[09:30:43.872] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:43.872] Searching for globals ... DONE
[09:30:43.872] Resolving globals: FALSE
[09:30:43.884] The total size of the 2 globals is 375.88 KiB (384896 bytes)
[09:30:43.885] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 375.88 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (375.82 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:43.885] - globals: [2] ‘x’, ‘i’
[09:30:43.885] 
[09:30:43.885] getGlobalsAndPackages() ... DONE
[09:30:43.885] getGlobalsAndPackages() ...
[09:30:43.885] Searching for globals...
[09:30:43.887] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:43.887] Searching for globals ... DONE
[09:30:43.887] Resolving globals: FALSE
[09:30:43.899] The total size of the 2 globals is 384.23 KiB (393448 bytes)
[09:30:43.900] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 384.23 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (384.17 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:43.900] - globals: [2] ‘x’, ‘i’
[09:30:43.900] 
[09:30:43.900] getGlobalsAndPackages() ... DONE
[09:30:43.900] getGlobalsAndPackages() ...
[09:30:43.901] Searching for globals...
[09:30:43.902] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:43.902] Searching for globals ... DONE
[09:30:43.902] Resolving globals: FALSE
[09:30:43.915] The total size of the 2 globals is 392.58 KiB (402000 bytes)
[09:30:43.915] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 392.58 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (392.52 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:43.915] - globals: [2] ‘x’, ‘i’
[09:30:43.915] 
[09:30:43.915] getGlobalsAndPackages() ... DONE
[09:30:43.916] getGlobalsAndPackages() ...
[09:30:43.916] Searching for globals...
[09:30:43.917] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:43.918] Searching for globals ... DONE
[09:30:43.918] Resolving globals: FALSE
[09:30:43.931] The total size of the 2 globals is 400.93 KiB (410552 bytes)
[09:30:43.931] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 400.93 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (400.88 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:43.931] - globals: [2] ‘x’, ‘i’
[09:30:43.931] 
[09:30:43.932] getGlobalsAndPackages() ... DONE
[09:30:43.932] getGlobalsAndPackages() ...
[09:30:43.932] Searching for globals...
[09:30:43.933] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:43.934] Searching for globals ... DONE
[09:30:43.934] Resolving globals: FALSE
[09:30:43.947] The total size of the 2 globals is 409.28 KiB (419104 bytes)
[09:30:43.947] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 409.28 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (409.23 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:43.947] - globals: [2] ‘x’, ‘i’
[09:30:43.947] 
[09:30:43.948] getGlobalsAndPackages() ... DONE
[09:30:43.948] getGlobalsAndPackages() ...
[09:30:43.948] Searching for globals...
[09:30:43.950] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:43.950] Searching for globals ... DONE
[09:30:43.950] Resolving globals: FALSE
[09:30:43.963] The total size of the 2 globals is 417.63 KiB (427656 bytes)
[09:30:43.963] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 417.63 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (417.58 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:43.964] - globals: [2] ‘x’, ‘i’
[09:30:43.964] 
[09:30:43.964] getGlobalsAndPackages() ... DONE
[09:30:43.964] getGlobalsAndPackages() ...
[09:30:43.964] Searching for globals...
[09:30:43.966] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:43.966] Searching for globals ... DONE
[09:30:43.966] Resolving globals: FALSE
[09:30:43.980] The total size of the 2 globals is 425.98 KiB (436208 bytes)
[09:30:43.980] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 425.98 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (425.93 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:43.980] - globals: [2] ‘x’, ‘i’
[09:30:43.980] 
[09:30:43.980] getGlobalsAndPackages() ... DONE
[09:30:43.981] getGlobalsAndPackages() ...
[09:30:43.981] Searching for globals...
[09:30:43.982] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:43.982] Searching for globals ... DONE
[09:30:43.982] Resolving globals: FALSE
[09:30:43.996] The total size of the 2 globals is 434.34 KiB (444760 bytes)
[09:30:43.997] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 434.34 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (434.28 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:43.997] - globals: [2] ‘x’, ‘i’
[09:30:43.997] 
[09:30:43.997] getGlobalsAndPackages() ... DONE
[09:30:43.998] getGlobalsAndPackages() ...
[09:30:43.998] Searching for globals...
[09:30:44.000] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:44.000] Searching for globals ... DONE
[09:30:44.000] Resolving globals: FALSE
[09:30:44.014] The total size of the 2 globals is 442.69 KiB (453312 bytes)
[09:30:44.015] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 442.69 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (442.63 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:44.015] - globals: [2] ‘x’, ‘i’
[09:30:44.015] 
[09:30:44.015] getGlobalsAndPackages() ... DONE
[09:30:44.015] getGlobalsAndPackages() ...
[09:30:44.016] Searching for globals...
[09:30:44.017] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:44.017] Searching for globals ... DONE
[09:30:44.017] Resolving globals: FALSE
[09:30:44.032] The total size of the 2 globals is 451.04 KiB (461864 bytes)
[09:30:44.032] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 451.04 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (450.98 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:44.032] - globals: [2] ‘x’, ‘i’
[09:30:44.032] 
[09:30:44.032] getGlobalsAndPackages() ... DONE
[09:30:44.033] getGlobalsAndPackages() ...
[09:30:44.033] Searching for globals...
[09:30:44.034] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:44.034] Searching for globals ... DONE
[09:30:44.035] Resolving globals: FALSE
[09:30:44.049] The total size of the 2 globals is 459.39 KiB (470416 bytes)
[09:30:44.050] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 459.39 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (459.34 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:44.050] - globals: [2] ‘x’, ‘i’
[09:30:44.050] 
[09:30:44.050] getGlobalsAndPackages() ... DONE
[09:30:44.050] getGlobalsAndPackages() ...
[09:30:44.050] Searching for globals...
[09:30:44.052] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:44.052] Searching for globals ... DONE
[09:30:44.052] Resolving globals: FALSE
[09:30:44.067] The total size of the 2 globals is 467.74 KiB (478968 bytes)
[09:30:44.067] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 467.74 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (467.69 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:44.068] - globals: [2] ‘x’, ‘i’
[09:30:44.068] 
[09:30:44.068] getGlobalsAndPackages() ... DONE
[09:30:44.068] getGlobalsAndPackages() ...
[09:30:44.068] Searching for globals...
[09:30:44.070] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:44.070] Searching for globals ... DONE
[09:30:44.070] Resolving globals: FALSE
[09:30:44.092] The total size of the 2 globals is 476.09 KiB (487520 bytes)
[09:30:44.092] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 476.09 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (476.04 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:44.093] - globals: [2] ‘x’, ‘i’
[09:30:44.093] 
[09:30:44.093] getGlobalsAndPackages() ... DONE
[09:30:44.094] getGlobalsAndPackages() ...
[09:30:44.094] Searching for globals...
[09:30:44.096] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:44.096] Searching for globals ... DONE
[09:30:44.096] Resolving globals: FALSE
[09:30:44.114] The total size of the 2 globals is 484.45 KiB (496072 bytes)
[09:30:44.114] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 484.45 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (484.39 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:44.114] - globals: [2] ‘x’, ‘i’
[09:30:44.114] 
[09:30:44.114] getGlobalsAndPackages() ... DONE
[09:30:44.115] getGlobalsAndPackages() ...
[09:30:44.115] Searching for globals...
[09:30:44.117] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:44.117] Searching for globals ... DONE
[09:30:44.117] Resolving globals: FALSE
[09:30:44.135] The total size of the 2 globals is 492.80 KiB (504624 bytes)
[09:30:44.135] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 492.80 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (492.74 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:44.135] - globals: [2] ‘x’, ‘i’
[09:30:44.135] 
[09:30:44.135] getGlobalsAndPackages() ... DONE
[09:30:44.136] getGlobalsAndPackages() ...
[09:30:44.136] Searching for globals...
[09:30:44.137] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:44.138] Searching for globals ... DONE
[09:30:44.138] Resolving globals: FALSE
[09:30:44.161] The total size of the 2 globals is 501.15 KiB (513176 bytes)
[09:30:44.162] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 501.15 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (501.09 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:44.162] - globals: [2] ‘x’, ‘i’
[09:30:44.162] 
[09:30:44.162] getGlobalsAndPackages() ... DONE
[09:30:44.163] getGlobalsAndPackages() ...
[09:30:44.163] Searching for globals...
[09:30:44.165] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:44.165] Searching for globals ... DONE
[09:30:44.165] Resolving globals: FALSE
[09:30:44.184] The total size of the 2 globals is 509.50 KiB (521728 bytes)
[09:30:44.184] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 509.50 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (509.45 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:44.185] - globals: [2] ‘x’, ‘i’
[09:30:44.185] 
[09:30:44.185] getGlobalsAndPackages() ... DONE
[09:30:44.185] getGlobalsAndPackages() ...
[09:30:44.185] Searching for globals...
[09:30:44.187] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:44.187] Searching for globals ... DONE
[09:30:44.187] Resolving globals: FALSE
[09:30:44.207] The total size of the 2 globals is 517.85 KiB (530280 bytes)
[09:30:44.207] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 517.85 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (517.80 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:44.207] - globals: [2] ‘x’, ‘i’
[09:30:44.207] 
[09:30:44.207] getGlobalsAndPackages() ... DONE
[09:30:44.208] getGlobalsAndPackages() ...
[09:30:44.208] Searching for globals...
[09:30:44.209] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:44.210] Searching for globals ... DONE
[09:30:44.210] Resolving globals: FALSE
[09:30:44.228] The total size of the 2 globals is 526.20 KiB (538832 bytes)
[09:30:44.228] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 526.20 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (526.15 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:44.228] - globals: [2] ‘x’, ‘i’
[09:30:44.228] 
[09:30:44.228] getGlobalsAndPackages() ... DONE
[09:30:44.229] getGlobalsAndPackages() ...
[09:30:44.229] Searching for globals...
[09:30:44.230] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:44.231] Searching for globals ... DONE
[09:30:44.231] Resolving globals: FALSE
[09:30:44.248] The total size of the 2 globals is 534.55 KiB (547384 bytes)
[09:30:44.248] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 534.55 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (534.50 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:44.249] - globals: [2] ‘x’, ‘i’
[09:30:44.249] 
[09:30:44.249] getGlobalsAndPackages() ... DONE
[09:30:44.249] getGlobalsAndPackages() ...
[09:30:44.249] Searching for globals...
[09:30:44.251] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:44.251] Searching for globals ... DONE
[09:30:44.251] Resolving globals: FALSE
[09:30:44.269] The total size of the 2 globals is 542.91 KiB (555936 bytes)
[09:30:44.270] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 542.91 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (542.85 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:44.270] - globals: [2] ‘x’, ‘i’
[09:30:44.270] 
[09:30:44.270] getGlobalsAndPackages() ... DONE
[09:30:44.270] getGlobalsAndPackages() ...
[09:30:44.270] Searching for globals...
[09:30:44.272] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:44.272] Searching for globals ... DONE
[09:30:44.272] Resolving globals: FALSE
[09:30:44.290] The total size of the 2 globals is 551.26 KiB (564488 bytes)
[09:30:44.290] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 551.26 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (551.20 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:44.290] - globals: [2] ‘x’, ‘i’
[09:30:44.290] 
[09:30:44.290] getGlobalsAndPackages() ... DONE
[09:30:44.291] getGlobalsAndPackages() ...
[09:30:44.291] Searching for globals...
[09:30:44.292] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:44.292] Searching for globals ... DONE
[09:30:44.292] Resolving globals: FALSE
[09:30:44.310] The total size of the 2 globals is 559.61 KiB (573040 bytes)
[09:30:44.311] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 559.61 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (559.55 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:44.311] - globals: [2] ‘x’, ‘i’
[09:30:44.311] 
[09:30:44.311] getGlobalsAndPackages() ... DONE
[09:30:44.311] getGlobalsAndPackages() ...
[09:30:44.312] Searching for globals...
[09:30:44.314] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:44.314] Searching for globals ... DONE
[09:30:44.314] Resolving globals: FALSE
[09:30:44.332] The total size of the 2 globals is 567.96 KiB (581592 bytes)
[09:30:44.333] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 567.96 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (567.91 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:44.333] - globals: [2] ‘x’, ‘i’
[09:30:44.333] 
[09:30:44.333] getGlobalsAndPackages() ... DONE
[09:30:44.334] getGlobalsAndPackages() ...
[09:30:44.334] Searching for globals...
[09:30:44.335] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:44.335] Searching for globals ... DONE
[09:30:44.335] Resolving globals: FALSE
[09:30:44.354] The total size of the 2 globals is 576.31 KiB (590144 bytes)
[09:30:44.354] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 576.31 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (576.26 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:44.354] - globals: [2] ‘x’, ‘i’
[09:30:44.355] 
[09:30:44.355] getGlobalsAndPackages() ... DONE
[09:30:44.355] getGlobalsAndPackages() ...
[09:30:44.355] Searching for globals...
[09:30:44.357] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:44.357] Searching for globals ... DONE
[09:30:44.358] Resolving globals: FALSE
[09:30:44.377] The total size of the 2 globals is 584.66 KiB (598696 bytes)
[09:30:44.377] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 584.66 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (584.61 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:44.377] - globals: [2] ‘x’, ‘i’
[09:30:44.377] 
[09:30:44.377] getGlobalsAndPackages() ... DONE
[09:30:44.378] getGlobalsAndPackages() ...
[09:30:44.378] Searching for globals...
[09:30:44.379] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:44.379] Searching for globals ... DONE
[09:30:44.379] Resolving globals: FALSE
[09:30:44.399] The total size of the 2 globals is 593.02 KiB (607248 bytes)
[09:30:44.399] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 593.02 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (592.96 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:44.399] - globals: [2] ‘x’, ‘i’
[09:30:44.399] 
[09:30:44.399] getGlobalsAndPackages() ... DONE
[09:30:44.400] getGlobalsAndPackages() ...
[09:30:44.400] Searching for globals...
[09:30:44.402] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:44.402] Searching for globals ... DONE
[09:30:44.402] Resolving globals: FALSE
[09:30:44.422] The total size of the 2 globals is 601.37 KiB (615800 bytes)
[09:30:44.422] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 601.37 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (601.31 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:44.422] - globals: [2] ‘x’, ‘i’
[09:30:44.422] 
[09:30:44.422] getGlobalsAndPackages() ... DONE
[09:30:44.423] getGlobalsAndPackages() ...
[09:30:44.423] Searching for globals...
[09:30:44.424] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:44.424] Searching for globals ... DONE
[09:30:44.424] Resolving globals: FALSE
[09:30:44.445] The total size of the 2 globals is 609.72 KiB (624352 bytes)
[09:30:44.445] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 609.72 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (609.66 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:44.445] - globals: [2] ‘x’, ‘i’
[09:30:44.445] 
[09:30:44.446] getGlobalsAndPackages() ... DONE
[09:30:44.446] getGlobalsAndPackages() ...
[09:30:44.446] Searching for globals...
[09:30:44.447] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:44.448] Searching for globals ... DONE
[09:30:44.448] Resolving globals: FALSE
[09:30:44.469] The total size of the 2 globals is 618.07 KiB (632904 bytes)
[09:30:44.469] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 618.07 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (618.02 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:44.469] - globals: [2] ‘x’, ‘i’
[09:30:44.470] 
[09:30:44.470] getGlobalsAndPackages() ... DONE
[09:30:44.470] getGlobalsAndPackages() ...
[09:30:44.470] Searching for globals...
[09:30:44.472] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:44.472] Searching for globals ... DONE
[09:30:44.472] Resolving globals: FALSE
[09:30:44.493] The total size of the 2 globals is 626.42 KiB (641456 bytes)
[09:30:44.494] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 626.42 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (626.37 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:44.494] - globals: [2] ‘x’, ‘i’
[09:30:44.494] 
[09:30:44.494] getGlobalsAndPackages() ... DONE
[09:30:44.495] getGlobalsAndPackages() ...
[09:30:44.495] Searching for globals...
[09:30:44.496] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:44.496] Searching for globals ... DONE
[09:30:44.496] Resolving globals: FALSE
[09:30:44.517] The total size of the 2 globals is 634.77 KiB (650008 bytes)
[09:30:44.517] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 634.77 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (634.72 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:44.517] - globals: [2] ‘x’, ‘i’
[09:30:44.518] 
[09:30:44.518] getGlobalsAndPackages() ... DONE
[09:30:44.518] getGlobalsAndPackages() ...
[09:30:44.518] Searching for globals...
[09:30:44.520] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:44.520] Searching for globals ... DONE
[09:30:44.521] Resolving globals: FALSE
[09:30:44.542] The total size of the 2 globals is 643.12 KiB (658560 bytes)
[09:30:44.542] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 643.12 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (643.07 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:44.542] - globals: [2] ‘x’, ‘i’
[09:30:44.542] 
[09:30:44.542] getGlobalsAndPackages() ... DONE
[09:30:44.543] getGlobalsAndPackages() ...
[09:30:44.543] Searching for globals...
[09:30:44.544] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:44.544] Searching for globals ... DONE
[09:30:44.545] Resolving globals: FALSE
[09:30:44.567] The total size of the 2 globals is 651.48 KiB (667112 bytes)
[09:30:44.567] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 651.48 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (651.42 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:44.567] - globals: [2] ‘x’, ‘i’
[09:30:44.567] 
[09:30:44.567] getGlobalsAndPackages() ... DONE
[09:30:44.568] getGlobalsAndPackages() ...
[09:30:44.568] Searching for globals...
[09:30:44.569] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:44.569] Searching for globals ... DONE
[09:30:44.569] Resolving globals: FALSE
[09:30:44.592] The total size of the 2 globals is 659.83 KiB (675664 bytes)
[09:30:44.592] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 659.83 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (659.77 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:44.592] - globals: [2] ‘x’, ‘i’
[09:30:44.592] 
[09:30:44.592] getGlobalsAndPackages() ... DONE
[09:30:44.593] getGlobalsAndPackages() ...
[09:30:44.593] Searching for globals...
[09:30:44.594] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:44.594] Searching for globals ... DONE
[09:30:44.595] Resolving globals: FALSE
[09:30:44.616] The total size of the 2 globals is 668.18 KiB (684216 bytes)
[09:30:44.617] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 668.18 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (668.12 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:44.617] - globals: [2] ‘x’, ‘i’
[09:30:44.617] 
[09:30:44.617] getGlobalsAndPackages() ... DONE
[09:30:44.617] getGlobalsAndPackages() ...
[09:30:44.618] Searching for globals...
[09:30:44.619] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:44.619] Searching for globals ... DONE
[09:30:44.619] Resolving globals: FALSE
[09:30:44.642] The total size of the 2 globals is 676.53 KiB (692768 bytes)
[09:30:44.642] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 676.53 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (676.48 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:44.643] - globals: [2] ‘x’, ‘i’
[09:30:44.643] 
[09:30:44.643] getGlobalsAndPackages() ... DONE
[09:30:44.643] getGlobalsAndPackages() ...
[09:30:44.643] Searching for globals...
[09:30:44.645] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:44.645] Searching for globals ... DONE
[09:30:44.645] Resolving globals: FALSE
[09:30:44.668] The total size of the 2 globals is 684.88 KiB (701320 bytes)
[09:30:44.669] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 684.88 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (684.83 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:44.669] - globals: [2] ‘x’, ‘i’
[09:30:44.669] 
[09:30:44.669] getGlobalsAndPackages() ... DONE
[09:30:44.669] getGlobalsAndPackages() ...
[09:30:44.669] Searching for globals...
[09:30:44.671] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:44.671] Searching for globals ... DONE
[09:30:44.671] Resolving globals: FALSE
[09:30:44.694] The total size of the 2 globals is 693.23 KiB (709872 bytes)
[09:30:44.695] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 693.23 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (693.18 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:44.695] - globals: [2] ‘x’, ‘i’
[09:30:44.695] 
[09:30:44.695] getGlobalsAndPackages() ... DONE
[09:30:44.696] getGlobalsAndPackages() ...
[09:30:44.696] Searching for globals...
[09:30:44.697] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:44.697] Searching for globals ... DONE
[09:30:44.697] Resolving globals: FALSE
[09:30:44.721] The total size of the 2 globals is 701.59 KiB (718424 bytes)
[09:30:44.721] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 701.59 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (701.53 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:44.721] - globals: [2] ‘x’, ‘i’
[09:30:44.722] 
[09:30:44.722] getGlobalsAndPackages() ... DONE
[09:30:44.722] getGlobalsAndPackages() ...
[09:30:44.722] Searching for globals...
[09:30:44.724] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:44.724] Searching for globals ... DONE
[09:30:44.724] Resolving globals: FALSE
[09:30:44.747] The total size of the 2 globals is 709.94 KiB (726976 bytes)
[09:30:44.748] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 709.94 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (709.88 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:44.748] - globals: [2] ‘x’, ‘i’
[09:30:44.748] 
[09:30:44.749] getGlobalsAndPackages() ... DONE
[09:30:44.749] getGlobalsAndPackages() ...
[09:30:44.749] Searching for globals...
[09:30:44.751] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:44.751] Searching for globals ... DONE
[09:30:44.751] Resolving globals: FALSE
[09:30:44.775] The total size of the 2 globals is 718.29 KiB (735528 bytes)
[09:30:44.776] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 718.29 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (718.23 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:44.776] - globals: [2] ‘x’, ‘i’
[09:30:44.776] 
[09:30:44.776] getGlobalsAndPackages() ... DONE
[09:30:44.776] getGlobalsAndPackages() ...
[09:30:44.777] Searching for globals...
[09:30:44.779] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:44.779] Searching for globals ... DONE
[09:30:44.779] Resolving globals: FALSE
[09:30:44.803] The total size of the 2 globals is 726.64 KiB (744080 bytes)
[09:30:44.803] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 726.64 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (726.59 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:44.804] - globals: [2] ‘x’, ‘i’
[09:30:44.804] 
[09:30:44.804] getGlobalsAndPackages() ... DONE
[09:30:44.804] getGlobalsAndPackages() ...
[09:30:44.804] Searching for globals...
[09:30:44.806] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:44.806] Searching for globals ... DONE
[09:30:44.806] Resolving globals: FALSE
[09:30:44.831] The total size of the 2 globals is 734.99 KiB (752632 bytes)
[09:30:44.831] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 734.99 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (734.94 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:44.832] - globals: [2] ‘x’, ‘i’
[09:30:44.832] 
[09:30:44.832] getGlobalsAndPackages() ... DONE
[09:30:44.832] getGlobalsAndPackages() ...
[09:30:44.832] Searching for globals...
[09:30:44.834] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:44.834] Searching for globals ... DONE
[09:30:44.834] Resolving globals: FALSE
[09:30:44.860] The total size of the 2 globals is 743.34 KiB (761184 bytes)
[09:30:44.860] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 743.34 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (743.29 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:44.861] - globals: [2] ‘x’, ‘i’
[09:30:44.861] 
[09:30:44.861] getGlobalsAndPackages() ... DONE
[09:30:44.861] getGlobalsAndPackages() ...
[09:30:44.861] Searching for globals...
[09:30:44.863] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:44.863] Searching for globals ... DONE
[09:30:44.863] Resolving globals: FALSE
[09:30:44.889] The total size of the 2 globals is 751.70 KiB (769736 bytes)
[09:30:44.889] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 751.70 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (751.64 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:44.889] - globals: [2] ‘x’, ‘i’
[09:30:44.890] 
[09:30:44.890] getGlobalsAndPackages() ... DONE
[09:30:44.890] getGlobalsAndPackages() ...
[09:30:44.890] Searching for globals...
[09:30:44.892] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:44.892] Searching for globals ... DONE
[09:30:44.892] Resolving globals: FALSE
[09:30:44.918] The total size of the 2 globals is 760.05 KiB (778288 bytes)
[09:30:44.919] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 760.05 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (759.99 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:44.919] - globals: [2] ‘x’, ‘i’
[09:30:44.919] 
[09:30:44.919] getGlobalsAndPackages() ... DONE
[09:30:44.919] getGlobalsAndPackages() ...
[09:30:44.919] Searching for globals...
[09:30:44.921] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:44.921] Searching for globals ... DONE
[09:30:44.921] Resolving globals: FALSE
[09:30:44.947] The total size of the 2 globals is 768.40 KiB (786840 bytes)
[09:30:44.948] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 768.40 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (768.34 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:44.948] - globals: [2] ‘x’, ‘i’
[09:30:44.948] 
[09:30:44.948] getGlobalsAndPackages() ... DONE
[09:30:44.948] getGlobalsAndPackages() ...
[09:30:44.949] Searching for globals...
[09:30:44.951] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:44.951] Searching for globals ... DONE
[09:30:44.951] Resolving globals: FALSE
[09:30:44.977] The total size of the 2 globals is 776.75 KiB (795392 bytes)
[09:30:44.978] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 776.75 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (776.70 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:44.978] - globals: [2] ‘x’, ‘i’
[09:30:44.978] 
[09:30:44.978] getGlobalsAndPackages() ... DONE
[09:30:44.979] getGlobalsAndPackages() ...
[09:30:44.979] Searching for globals...
[09:30:44.980] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:44.980] Searching for globals ... DONE
[09:30:44.980] Resolving globals: FALSE
[09:30:45.009] The total size of the 2 globals is 785.10 KiB (803944 bytes)
[09:30:45.010] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 785.10 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (785.05 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:45.010] - globals: [2] ‘x’, ‘i’
[09:30:45.010] 
[09:30:45.010] getGlobalsAndPackages() ... DONE
[09:30:45.011] getGlobalsAndPackages() ...
[09:30:45.011] Searching for globals...
[09:30:45.012] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:45.013] Searching for globals ... DONE
[09:30:45.013] Resolving globals: FALSE
[09:30:45.041] The total size of the 2 globals is 793.45 KiB (812496 bytes)
[09:30:45.042] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 793.45 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (793.40 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:45.042] - globals: [2] ‘x’, ‘i’
[09:30:45.042] 
[09:30:45.042] getGlobalsAndPackages() ... DONE
[09:30:45.042] getGlobalsAndPackages() ...
[09:30:45.042] Searching for globals...
[09:30:45.044] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:45.044] Searching for globals ... DONE
[09:30:45.044] Resolving globals: FALSE
[09:30:45.073] The total size of the 2 globals is 801.80 KiB (821048 bytes)
[09:30:45.073] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 801.80 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (801.75 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:45.073] - globals: [2] ‘x’, ‘i’
[09:30:45.073] 
[09:30:45.073] getGlobalsAndPackages() ... DONE
[09:30:45.074] getGlobalsAndPackages() ...
[09:30:45.074] Searching for globals...
[09:30:45.075] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[09:30:45.076] Searching for globals ... DONE
[09:30:45.076] Resolving globals: FALSE
[09:30:45.104] The total size of the 2 globals is 810.16 KiB (829600 bytes)
[09:30:45.104] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 810.16 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (810.10 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[09:30:45.104] - globals: [2] ‘x’, ‘i’
[09:30:45.104] 
[09:30:45.105] getGlobalsAndPackages() ... DONE

> ## At this point nothing has been calculated,
> ## because lazy evaluation is in place.
> 
> ## Get the 7:th Fibonnaci numbers (should be 8)
> print(x[[7]])
[09:30:45.105] run() for ‘Future’ ...
[09:30:45.106] - state: ‘created’
[09:30:45.106] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:30:45.106] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:30:45.106] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:30:45.106]   - Field: ‘label’
[09:30:45.106]   - Field: ‘local’
[09:30:45.107]   - Field: ‘owner’
[09:30:45.107]   - Field: ‘envir’
[09:30:45.107]   - Field: ‘packages’
[09:30:45.107]   - Field: ‘gc’
[09:30:45.107]   - Field: ‘conditions’
[09:30:45.107]   - Field: ‘expr’
[09:30:45.107]   - Field: ‘uuid’
[09:30:45.107]   - Field: ‘seed’
[09:30:45.107]   - Field: ‘version’
[09:30:45.107]   - Field: ‘result’
[09:30:45.107]   - Field: ‘asynchronous’
[09:30:45.107]   - Field: ‘calls’
[09:30:45.108]   - Field: ‘globals’
[09:30:45.108]   - Field: ‘stdout’
[09:30:45.108]   - Field: ‘earlySignal’
[09:30:45.108]   - Field: ‘lazy’
[09:30:45.108]   - Field: ‘state’
[09:30:45.108] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:30:45.108] - Launch lazy future ...
[09:30:45.109] Packages needed by the future expression (n = 0): <none>
[09:30:45.109] Packages needed by future strategies (n = 0): <none>
[09:30:45.110] {
[09:30:45.110]     {
[09:30:45.110]         {
[09:30:45.110]             ...future.startTime <- base::Sys.time()
[09:30:45.110]             {
[09:30:45.110]                 {
[09:30:45.110]                   {
[09:30:45.110]                     base::local({
[09:30:45.110]                       has_future <- base::requireNamespace("future", 
[09:30:45.110]                         quietly = TRUE)
[09:30:45.110]                       if (has_future) {
[09:30:45.110]                         ns <- base::getNamespace("future")
[09:30:45.110]                         version <- ns[[".package"]][["version"]]
[09:30:45.110]                         if (is.null(version)) 
[09:30:45.110]                           version <- utils::packageVersion("future")
[09:30:45.110]                       }
[09:30:45.110]                       else {
[09:30:45.110]                         version <- NULL
[09:30:45.110]                       }
[09:30:45.110]                       if (!has_future || version < "1.8.0") {
[09:30:45.110]                         info <- base::c(r_version = base::gsub("R version ", 
[09:30:45.110]                           "", base::R.version$version.string), 
[09:30:45.110]                           platform = base::sprintf("%s (%s-bit)", 
[09:30:45.110]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:30:45.110]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:30:45.110]                             "release", "version")], collapse = " "), 
[09:30:45.110]                           hostname = base::Sys.info()[["nodename"]])
[09:30:45.110]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:30:45.110]                           info)
[09:30:45.110]                         info <- base::paste(info, collapse = "; ")
[09:30:45.110]                         if (!has_future) {
[09:30:45.110]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:30:45.110]                             info)
[09:30:45.110]                         }
[09:30:45.110]                         else {
[09:30:45.110]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:30:45.110]                             info, version)
[09:30:45.110]                         }
[09:30:45.110]                         base::stop(msg)
[09:30:45.110]                       }
[09:30:45.110]                     })
[09:30:45.110]                   }
[09:30:45.110]                   ...future.strategy.old <- future::plan("list")
[09:30:45.110]                   options(future.plan = NULL)
[09:30:45.110]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:30:45.110]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:30:45.110]                 }
[09:30:45.110]                 ...future.workdir <- getwd()
[09:30:45.110]             }
[09:30:45.110]             ...future.oldOptions <- base::as.list(base::.Options)
[09:30:45.110]             ...future.oldEnvVars <- base::Sys.getenv()
[09:30:45.110]         }
[09:30:45.110]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:30:45.110]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:30:45.110]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:30:45.110]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:30:45.110]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:30:45.110]             future.stdout.windows.reencode = NULL, width = 80L)
[09:30:45.110]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:30:45.110]             base::names(...future.oldOptions))
[09:30:45.110]     }
[09:30:45.110]     if (TRUE) {
[09:30:45.110]     }
[09:30:45.110]     else {
[09:30:45.110]         if (NA) {
[09:30:45.110]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:30:45.110]                 open = "w")
[09:30:45.110]         }
[09:30:45.110]         else {
[09:30:45.110]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:30:45.110]                 windows = "NUL", "/dev/null"), open = "w")
[09:30:45.110]         }
[09:30:45.110]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:30:45.110]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:30:45.110]             base::sink(type = "output", split = FALSE)
[09:30:45.110]             base::close(...future.stdout)
[09:30:45.110]         }, add = TRUE)
[09:30:45.110]     }
[09:30:45.110]     ...future.frame <- base::sys.nframe()
[09:30:45.110]     ...future.conditions <- base::list()
[09:30:45.110]     ...future.rng <- base::globalenv()$.Random.seed
[09:30:45.110]     if (FALSE) {
[09:30:45.110]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:30:45.110]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:30:45.110]     }
[09:30:45.110]     ...future.result <- base::tryCatch({
[09:30:45.110]         base::withCallingHandlers({
[09:30:45.110]             ...future.value <- base::withVisible(base::local({
[09:30:45.110]                 x[[i - 2]] + x[[i - 1]]
[09:30:45.110]             }))
[09:30:45.110]             future::FutureResult(value = ...future.value$value, 
[09:30:45.110]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:45.110]                   ...future.rng), globalenv = if (FALSE) 
[09:30:45.110]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:30:45.110]                     ...future.globalenv.names))
[09:30:45.110]                 else NULL, started = ...future.startTime, version = "1.8")
[09:30:45.110]         }, condition = base::local({
[09:30:45.110]             c <- base::c
[09:30:45.110]             inherits <- base::inherits
[09:30:45.110]             invokeRestart <- base::invokeRestart
[09:30:45.110]             length <- base::length
[09:30:45.110]             list <- base::list
[09:30:45.110]             seq.int <- base::seq.int
[09:30:45.110]             signalCondition <- base::signalCondition
[09:30:45.110]             sys.calls <- base::sys.calls
[09:30:45.110]             `[[` <- base::`[[`
[09:30:45.110]             `+` <- base::`+`
[09:30:45.110]             `<<-` <- base::`<<-`
[09:30:45.110]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:30:45.110]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:30:45.110]                   3L)]
[09:30:45.110]             }
[09:30:45.110]             function(cond) {
[09:30:45.110]                 is_error <- inherits(cond, "error")
[09:30:45.110]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:30:45.110]                   NULL)
[09:30:45.110]                 if (is_error) {
[09:30:45.110]                   sessionInformation <- function() {
[09:30:45.110]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:30:45.110]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:30:45.110]                       search = base::search(), system = base::Sys.info())
[09:30:45.110]                   }
[09:30:45.110]                   ...future.conditions[[length(...future.conditions) + 
[09:30:45.110]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:30:45.110]                     cond$call), session = sessionInformation(), 
[09:30:45.110]                     timestamp = base::Sys.time(), signaled = 0L)
[09:30:45.110]                   signalCondition(cond)
[09:30:45.110]                 }
[09:30:45.110]                 else if (!ignore && TRUE && inherits(cond, c("error", 
[09:30:45.110]                 "immediateCondition"))) {
[09:30:45.110]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:30:45.110]                   ...future.conditions[[length(...future.conditions) + 
[09:30:45.110]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:30:45.110]                   if (TRUE && !signal) {
[09:30:45.110]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:45.110]                     {
[09:30:45.110]                       inherits <- base::inherits
[09:30:45.110]                       invokeRestart <- base::invokeRestart
[09:30:45.110]                       is.null <- base::is.null
[09:30:45.110]                       muffled <- FALSE
[09:30:45.110]                       if (inherits(cond, "message")) {
[09:30:45.110]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:45.110]                         if (muffled) 
[09:30:45.110]                           invokeRestart("muffleMessage")
[09:30:45.110]                       }
[09:30:45.110]                       else if (inherits(cond, "warning")) {
[09:30:45.110]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:45.110]                         if (muffled) 
[09:30:45.110]                           invokeRestart("muffleWarning")
[09:30:45.110]                       }
[09:30:45.110]                       else if (inherits(cond, "condition")) {
[09:30:45.110]                         if (!is.null(pattern)) {
[09:30:45.110]                           computeRestarts <- base::computeRestarts
[09:30:45.110]                           grepl <- base::grepl
[09:30:45.110]                           restarts <- computeRestarts(cond)
[09:30:45.110]                           for (restart in restarts) {
[09:30:45.110]                             name <- restart$name
[09:30:45.110]                             if (is.null(name)) 
[09:30:45.110]                               next
[09:30:45.110]                             if (!grepl(pattern, name)) 
[09:30:45.110]                               next
[09:30:45.110]                             invokeRestart(restart)
[09:30:45.110]                             muffled <- TRUE
[09:30:45.110]                             break
[09:30:45.110]                           }
[09:30:45.110]                         }
[09:30:45.110]                       }
[09:30:45.110]                       invisible(muffled)
[09:30:45.110]                     }
[09:30:45.110]                     muffleCondition(cond, pattern = "^muffle")
[09:30:45.110]                   }
[09:30:45.110]                 }
[09:30:45.110]                 else {
[09:30:45.110]                   if (TRUE) {
[09:30:45.110]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:45.110]                     {
[09:30:45.110]                       inherits <- base::inherits
[09:30:45.110]                       invokeRestart <- base::invokeRestart
[09:30:45.110]                       is.null <- base::is.null
[09:30:45.110]                       muffled <- FALSE
[09:30:45.110]                       if (inherits(cond, "message")) {
[09:30:45.110]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:45.110]                         if (muffled) 
[09:30:45.110]                           invokeRestart("muffleMessage")
[09:30:45.110]                       }
[09:30:45.110]                       else if (inherits(cond, "warning")) {
[09:30:45.110]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:45.110]                         if (muffled) 
[09:30:45.110]                           invokeRestart("muffleWarning")
[09:30:45.110]                       }
[09:30:45.110]                       else if (inherits(cond, "condition")) {
[09:30:45.110]                         if (!is.null(pattern)) {
[09:30:45.110]                           computeRestarts <- base::computeRestarts
[09:30:45.110]                           grepl <- base::grepl
[09:30:45.110]                           restarts <- computeRestarts(cond)
[09:30:45.110]                           for (restart in restarts) {
[09:30:45.110]                             name <- restart$name
[09:30:45.110]                             if (is.null(name)) 
[09:30:45.110]                               next
[09:30:45.110]                             if (!grepl(pattern, name)) 
[09:30:45.110]                               next
[09:30:45.110]                             invokeRestart(restart)
[09:30:45.110]                             muffled <- TRUE
[09:30:45.110]                             break
[09:30:45.110]                           }
[09:30:45.110]                         }
[09:30:45.110]                       }
[09:30:45.110]                       invisible(muffled)
[09:30:45.110]                     }
[09:30:45.110]                     muffleCondition(cond, pattern = "^muffle")
[09:30:45.110]                   }
[09:30:45.110]                 }
[09:30:45.110]             }
[09:30:45.110]         }))
[09:30:45.110]     }, error = function(ex) {
[09:30:45.110]         base::structure(base::list(value = NULL, visible = NULL, 
[09:30:45.110]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:45.110]                 ...future.rng), started = ...future.startTime, 
[09:30:45.110]             finished = Sys.time(), session_uuid = NA_character_, 
[09:30:45.110]             version = "1.8"), class = "FutureResult")
[09:30:45.110]     }, finally = {
[09:30:45.110]         if (!identical(...future.workdir, getwd())) 
[09:30:45.110]             setwd(...future.workdir)
[09:30:45.110]         {
[09:30:45.110]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:30:45.110]                 ...future.oldOptions$nwarnings <- NULL
[09:30:45.110]             }
[09:30:45.110]             base::options(...future.oldOptions)
[09:30:45.110]             if (.Platform$OS.type == "windows") {
[09:30:45.110]                 old_names <- names(...future.oldEnvVars)
[09:30:45.110]                 envs <- base::Sys.getenv()
[09:30:45.110]                 names <- names(envs)
[09:30:45.110]                 common <- intersect(names, old_names)
[09:30:45.110]                 added <- setdiff(names, old_names)
[09:30:45.110]                 removed <- setdiff(old_names, names)
[09:30:45.110]                 changed <- common[...future.oldEnvVars[common] != 
[09:30:45.110]                   envs[common]]
[09:30:45.110]                 NAMES <- toupper(changed)
[09:30:45.110]                 args <- list()
[09:30:45.110]                 for (kk in seq_along(NAMES)) {
[09:30:45.110]                   name <- changed[[kk]]
[09:30:45.110]                   NAME <- NAMES[[kk]]
[09:30:45.110]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:45.110]                     next
[09:30:45.110]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:45.110]                 }
[09:30:45.110]                 NAMES <- toupper(added)
[09:30:45.110]                 for (kk in seq_along(NAMES)) {
[09:30:45.110]                   name <- added[[kk]]
[09:30:45.110]                   NAME <- NAMES[[kk]]
[09:30:45.110]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:45.110]                     next
[09:30:45.110]                   args[[name]] <- ""
[09:30:45.110]                 }
[09:30:45.110]                 NAMES <- toupper(removed)
[09:30:45.110]                 for (kk in seq_along(NAMES)) {
[09:30:45.110]                   name <- removed[[kk]]
[09:30:45.110]                   NAME <- NAMES[[kk]]
[09:30:45.110]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:45.110]                     next
[09:30:45.110]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:45.110]                 }
[09:30:45.110]                 if (length(args) > 0) 
[09:30:45.110]                   base::do.call(base::Sys.setenv, args = args)
[09:30:45.110]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:30:45.110]             }
[09:30:45.110]             else {
[09:30:45.110]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:30:45.110]             }
[09:30:45.110]             {
[09:30:45.110]                 if (base::length(...future.futureOptionsAdded) > 
[09:30:45.110]                   0L) {
[09:30:45.110]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:30:45.110]                   base::names(opts) <- ...future.futureOptionsAdded
[09:30:45.110]                   base::options(opts)
[09:30:45.110]                 }
[09:30:45.110]                 {
[09:30:45.110]                   {
[09:30:45.110]                     NULL
[09:30:45.110]                     RNGkind("Mersenne-Twister")
[09:30:45.110]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:30:45.110]                       inherits = FALSE)
[09:30:45.110]                   }
[09:30:45.110]                   options(future.plan = NULL)
[09:30:45.110]                   if (is.na(NA_character_)) 
[09:30:45.110]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:30:45.110]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:30:45.110]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:30:45.110]                     .init = FALSE)
[09:30:45.110]                 }
[09:30:45.110]             }
[09:30:45.110]         }
[09:30:45.110]     })
[09:30:45.110]     if (FALSE) {
[09:30:45.110]         base::sink(type = "output", split = FALSE)
[09:30:45.110]         if (NA) {
[09:30:45.110]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:30:45.110]         }
[09:30:45.110]         else {
[09:30:45.110]             ...future.result["stdout"] <- base::list(NULL)
[09:30:45.110]         }
[09:30:45.110]         base::close(...future.stdout)
[09:30:45.110]         ...future.stdout <- NULL
[09:30:45.110]     }
[09:30:45.110]     ...future.result$conditions <- ...future.conditions
[09:30:45.110]     ...future.result$finished <- base::Sys.time()
[09:30:45.110]     ...future.result
[09:30:45.110] }
[09:30:45.111] assign_globals() ...
[09:30:45.111] List of 2
[09:30:45.111]  $ x:Classes 'listenv', 'environment' <environment: 0x561d6314f238> 
[09:30:45.111]  $ i: int 7
[09:30:45.111]  - attr(*, "where")=List of 2
[09:30:45.111]   ..$ x:<environment: R_EmptyEnv> 
[09:30:45.111]   ..$ i:<environment: R_EmptyEnv> 
[09:30:45.111]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:30:45.111]  - attr(*, "resolved")= logi FALSE
[09:30:45.111]  - attr(*, "total_size")= num 34264
[09:30:45.111]  - attr(*, "already-done")= logi TRUE
[09:30:45.118] - copied ‘x’ to environment
[09:30:45.118] - copied ‘i’ to environment
[09:30:45.118] assign_globals() ... done
[09:30:45.118] plan(): Setting new future strategy stack:
[09:30:45.118] List of future strategies:
[09:30:45.118] 1. sequential:
[09:30:45.118]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:45.118]    - tweaked: FALSE
[09:30:45.118]    - call: NULL
[09:30:45.119] plan(): nbrOfWorkers() = 1
[09:30:45.193] plan(): Setting new future strategy stack:
[09:30:45.193] List of future strategies:
[09:30:45.193] 1. sequential:
[09:30:45.193]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:45.193]    - tweaked: FALSE
[09:30:45.193]    - call: plan(sequential)
[09:30:45.194] plan(): nbrOfWorkers() = 1
[09:30:45.194] SequentialFuture started (and completed)
[09:30:45.194] - Launch lazy future ... done
[09:30:45.194] run() for ‘SequentialFuture’ ... done
[1] 8

> ## At this point x[1:7] have been calculated,
> ## but nothing beyond.
> 
> ## Let's get the 50:th number.
> print(x[[50]])
[09:30:45.195] run() for ‘Future’ ...
[09:30:45.195] - state: ‘created’
[09:30:45.195] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:30:45.195] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:30:45.195] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:30:45.195]   - Field: ‘label’
[09:30:45.195]   - Field: ‘local’
[09:30:45.195]   - Field: ‘owner’
[09:30:45.196]   - Field: ‘envir’
[09:30:45.196]   - Field: ‘packages’
[09:30:45.196]   - Field: ‘gc’
[09:30:45.196]   - Field: ‘conditions’
[09:30:45.196]   - Field: ‘expr’
[09:30:45.196]   - Field: ‘uuid’
[09:30:45.196]   - Field: ‘seed’
[09:30:45.196]   - Field: ‘version’
[09:30:45.196]   - Field: ‘result’
[09:30:45.196]   - Field: ‘asynchronous’
[09:30:45.196]   - Field: ‘calls’
[09:30:45.197]   - Field: ‘globals’
[09:30:45.197]   - Field: ‘stdout’
[09:30:45.197]   - Field: ‘earlySignal’
[09:30:45.197]   - Field: ‘lazy’
[09:30:45.197]   - Field: ‘state’
[09:30:45.197] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:30:45.197] - Launch lazy future ...
[09:30:45.197] Packages needed by the future expression (n = 0): <none>
[09:30:45.197] Packages needed by future strategies (n = 0): <none>
[09:30:45.198] {
[09:30:45.198]     {
[09:30:45.198]         {
[09:30:45.198]             ...future.startTime <- base::Sys.time()
[09:30:45.198]             {
[09:30:45.198]                 {
[09:30:45.198]                   {
[09:30:45.198]                     base::local({
[09:30:45.198]                       has_future <- base::requireNamespace("future", 
[09:30:45.198]                         quietly = TRUE)
[09:30:45.198]                       if (has_future) {
[09:30:45.198]                         ns <- base::getNamespace("future")
[09:30:45.198]                         version <- ns[[".package"]][["version"]]
[09:30:45.198]                         if (is.null(version)) 
[09:30:45.198]                           version <- utils::packageVersion("future")
[09:30:45.198]                       }
[09:30:45.198]                       else {
[09:30:45.198]                         version <- NULL
[09:30:45.198]                       }
[09:30:45.198]                       if (!has_future || version < "1.8.0") {
[09:30:45.198]                         info <- base::c(r_version = base::gsub("R version ", 
[09:30:45.198]                           "", base::R.version$version.string), 
[09:30:45.198]                           platform = base::sprintf("%s (%s-bit)", 
[09:30:45.198]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:30:45.198]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:30:45.198]                             "release", "version")], collapse = " "), 
[09:30:45.198]                           hostname = base::Sys.info()[["nodename"]])
[09:30:45.198]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:30:45.198]                           info)
[09:30:45.198]                         info <- base::paste(info, collapse = "; ")
[09:30:45.198]                         if (!has_future) {
[09:30:45.198]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:30:45.198]                             info)
[09:30:45.198]                         }
[09:30:45.198]                         else {
[09:30:45.198]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:30:45.198]                             info, version)
[09:30:45.198]                         }
[09:30:45.198]                         base::stop(msg)
[09:30:45.198]                       }
[09:30:45.198]                     })
[09:30:45.198]                   }
[09:30:45.198]                   ...future.strategy.old <- future::plan("list")
[09:30:45.198]                   options(future.plan = NULL)
[09:30:45.198]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:30:45.198]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:30:45.198]                 }
[09:30:45.198]                 ...future.workdir <- getwd()
[09:30:45.198]             }
[09:30:45.198]             ...future.oldOptions <- base::as.list(base::.Options)
[09:30:45.198]             ...future.oldEnvVars <- base::Sys.getenv()
[09:30:45.198]         }
[09:30:45.198]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:30:45.198]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:30:45.198]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:30:45.198]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:30:45.198]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:30:45.198]             future.stdout.windows.reencode = NULL, width = 80L)
[09:30:45.198]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:30:45.198]             base::names(...future.oldOptions))
[09:30:45.198]     }
[09:30:45.198]     if (TRUE) {
[09:30:45.198]     }
[09:30:45.198]     else {
[09:30:45.198]         if (NA) {
[09:30:45.198]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:30:45.198]                 open = "w")
[09:30:45.198]         }
[09:30:45.198]         else {
[09:30:45.198]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:30:45.198]                 windows = "NUL", "/dev/null"), open = "w")
[09:30:45.198]         }
[09:30:45.198]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:30:45.198]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:30:45.198]             base::sink(type = "output", split = FALSE)
[09:30:45.198]             base::close(...future.stdout)
[09:30:45.198]         }, add = TRUE)
[09:30:45.198]     }
[09:30:45.198]     ...future.frame <- base::sys.nframe()
[09:30:45.198]     ...future.conditions <- base::list()
[09:30:45.198]     ...future.rng <- base::globalenv()$.Random.seed
[09:30:45.198]     if (FALSE) {
[09:30:45.198]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:30:45.198]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:30:45.198]     }
[09:30:45.198]     ...future.result <- base::tryCatch({
[09:30:45.198]         base::withCallingHandlers({
[09:30:45.198]             ...future.value <- base::withVisible(base::local({
[09:30:45.198]                 x[[i - 2]] + x[[i - 1]]
[09:30:45.198]             }))
[09:30:45.198]             future::FutureResult(value = ...future.value$value, 
[09:30:45.198]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:45.198]                   ...future.rng), globalenv = if (FALSE) 
[09:30:45.198]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:30:45.198]                     ...future.globalenv.names))
[09:30:45.198]                 else NULL, started = ...future.startTime, version = "1.8")
[09:30:45.198]         }, condition = base::local({
[09:30:45.198]             c <- base::c
[09:30:45.198]             inherits <- base::inherits
[09:30:45.198]             invokeRestart <- base::invokeRestart
[09:30:45.198]             length <- base::length
[09:30:45.198]             list <- base::list
[09:30:45.198]             seq.int <- base::seq.int
[09:30:45.198]             signalCondition <- base::signalCondition
[09:30:45.198]             sys.calls <- base::sys.calls
[09:30:45.198]             `[[` <- base::`[[`
[09:30:45.198]             `+` <- base::`+`
[09:30:45.198]             `<<-` <- base::`<<-`
[09:30:45.198]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:30:45.198]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:30:45.198]                   3L)]
[09:30:45.198]             }
[09:30:45.198]             function(cond) {
[09:30:45.198]                 is_error <- inherits(cond, "error")
[09:30:45.198]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:30:45.198]                   NULL)
[09:30:45.198]                 if (is_error) {
[09:30:45.198]                   sessionInformation <- function() {
[09:30:45.198]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:30:45.198]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:30:45.198]                       search = base::search(), system = base::Sys.info())
[09:30:45.198]                   }
[09:30:45.198]                   ...future.conditions[[length(...future.conditions) + 
[09:30:45.198]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:30:45.198]                     cond$call), session = sessionInformation(), 
[09:30:45.198]                     timestamp = base::Sys.time(), signaled = 0L)
[09:30:45.198]                   signalCondition(cond)
[09:30:45.198]                 }
[09:30:45.198]                 else if (!ignore && TRUE && inherits(cond, c("error", 
[09:30:45.198]                 "immediateCondition"))) {
[09:30:45.198]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:30:45.198]                   ...future.conditions[[length(...future.conditions) + 
[09:30:45.198]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:30:45.198]                   if (TRUE && !signal) {
[09:30:45.198]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:45.198]                     {
[09:30:45.198]                       inherits <- base::inherits
[09:30:45.198]                       invokeRestart <- base::invokeRestart
[09:30:45.198]                       is.null <- base::is.null
[09:30:45.198]                       muffled <- FALSE
[09:30:45.198]                       if (inherits(cond, "message")) {
[09:30:45.198]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:45.198]                         if (muffled) 
[09:30:45.198]                           invokeRestart("muffleMessage")
[09:30:45.198]                       }
[09:30:45.198]                       else if (inherits(cond, "warning")) {
[09:30:45.198]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:45.198]                         if (muffled) 
[09:30:45.198]                           invokeRestart("muffleWarning")
[09:30:45.198]                       }
[09:30:45.198]                       else if (inherits(cond, "condition")) {
[09:30:45.198]                         if (!is.null(pattern)) {
[09:30:45.198]                           computeRestarts <- base::computeRestarts
[09:30:45.198]                           grepl <- base::grepl
[09:30:45.198]                           restarts <- computeRestarts(cond)
[09:30:45.198]                           for (restart in restarts) {
[09:30:45.198]                             name <- restart$name
[09:30:45.198]                             if (is.null(name)) 
[09:30:45.198]                               next
[09:30:45.198]                             if (!grepl(pattern, name)) 
[09:30:45.198]                               next
[09:30:45.198]                             invokeRestart(restart)
[09:30:45.198]                             muffled <- TRUE
[09:30:45.198]                             break
[09:30:45.198]                           }
[09:30:45.198]                         }
[09:30:45.198]                       }
[09:30:45.198]                       invisible(muffled)
[09:30:45.198]                     }
[09:30:45.198]                     muffleCondition(cond, pattern = "^muffle")
[09:30:45.198]                   }
[09:30:45.198]                 }
[09:30:45.198]                 else {
[09:30:45.198]                   if (TRUE) {
[09:30:45.198]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:45.198]                     {
[09:30:45.198]                       inherits <- base::inherits
[09:30:45.198]                       invokeRestart <- base::invokeRestart
[09:30:45.198]                       is.null <- base::is.null
[09:30:45.198]                       muffled <- FALSE
[09:30:45.198]                       if (inherits(cond, "message")) {
[09:30:45.198]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:45.198]                         if (muffled) 
[09:30:45.198]                           invokeRestart("muffleMessage")
[09:30:45.198]                       }
[09:30:45.198]                       else if (inherits(cond, "warning")) {
[09:30:45.198]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:45.198]                         if (muffled) 
[09:30:45.198]                           invokeRestart("muffleWarning")
[09:30:45.198]                       }
[09:30:45.198]                       else if (inherits(cond, "condition")) {
[09:30:45.198]                         if (!is.null(pattern)) {
[09:30:45.198]                           computeRestarts <- base::computeRestarts
[09:30:45.198]                           grepl <- base::grepl
[09:30:45.198]                           restarts <- computeRestarts(cond)
[09:30:45.198]                           for (restart in restarts) {
[09:30:45.198]                             name <- restart$name
[09:30:45.198]                             if (is.null(name)) 
[09:30:45.198]                               next
[09:30:45.198]                             if (!grepl(pattern, name)) 
[09:30:45.198]                               next
[09:30:45.198]                             invokeRestart(restart)
[09:30:45.198]                             muffled <- TRUE
[09:30:45.198]                             break
[09:30:45.198]                           }
[09:30:45.198]                         }
[09:30:45.198]                       }
[09:30:45.198]                       invisible(muffled)
[09:30:45.198]                     }
[09:30:45.198]                     muffleCondition(cond, pattern = "^muffle")
[09:30:45.198]                   }
[09:30:45.198]                 }
[09:30:45.198]             }
[09:30:45.198]         }))
[09:30:45.198]     }, error = function(ex) {
[09:30:45.198]         base::structure(base::list(value = NULL, visible = NULL, 
[09:30:45.198]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:45.198]                 ...future.rng), started = ...future.startTime, 
[09:30:45.198]             finished = Sys.time(), session_uuid = NA_character_, 
[09:30:45.198]             version = "1.8"), class = "FutureResult")
[09:30:45.198]     }, finally = {
[09:30:45.198]         if (!identical(...future.workdir, getwd())) 
[09:30:45.198]             setwd(...future.workdir)
[09:30:45.198]         {
[09:30:45.198]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:30:45.198]                 ...future.oldOptions$nwarnings <- NULL
[09:30:45.198]             }
[09:30:45.198]             base::options(...future.oldOptions)
[09:30:45.198]             if (.Platform$OS.type == "windows") {
[09:30:45.198]                 old_names <- names(...future.oldEnvVars)
[09:30:45.198]                 envs <- base::Sys.getenv()
[09:30:45.198]                 names <- names(envs)
[09:30:45.198]                 common <- intersect(names, old_names)
[09:30:45.198]                 added <- setdiff(names, old_names)
[09:30:45.198]                 removed <- setdiff(old_names, names)
[09:30:45.198]                 changed <- common[...future.oldEnvVars[common] != 
[09:30:45.198]                   envs[common]]
[09:30:45.198]                 NAMES <- toupper(changed)
[09:30:45.198]                 args <- list()
[09:30:45.198]                 for (kk in seq_along(NAMES)) {
[09:30:45.198]                   name <- changed[[kk]]
[09:30:45.198]                   NAME <- NAMES[[kk]]
[09:30:45.198]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:45.198]                     next
[09:30:45.198]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:45.198]                 }
[09:30:45.198]                 NAMES <- toupper(added)
[09:30:45.198]                 for (kk in seq_along(NAMES)) {
[09:30:45.198]                   name <- added[[kk]]
[09:30:45.198]                   NAME <- NAMES[[kk]]
[09:30:45.198]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:45.198]                     next
[09:30:45.198]                   args[[name]] <- ""
[09:30:45.198]                 }
[09:30:45.198]                 NAMES <- toupper(removed)
[09:30:45.198]                 for (kk in seq_along(NAMES)) {
[09:30:45.198]                   name <- removed[[kk]]
[09:30:45.198]                   NAME <- NAMES[[kk]]
[09:30:45.198]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:45.198]                     next
[09:30:45.198]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:45.198]                 }
[09:30:45.198]                 if (length(args) > 0) 
[09:30:45.198]                   base::do.call(base::Sys.setenv, args = args)
[09:30:45.198]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:30:45.198]             }
[09:30:45.198]             else {
[09:30:45.198]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:30:45.198]             }
[09:30:45.198]             {
[09:30:45.198]                 if (base::length(...future.futureOptionsAdded) > 
[09:30:45.198]                   0L) {
[09:30:45.198]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:30:45.198]                   base::names(opts) <- ...future.futureOptionsAdded
[09:30:45.198]                   base::options(opts)
[09:30:45.198]                 }
[09:30:45.198]                 {
[09:30:45.198]                   {
[09:30:45.198]                     NULL
[09:30:45.198]                     RNGkind("Mersenne-Twister")
[09:30:45.198]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:30:45.198]                       inherits = FALSE)
[09:30:45.198]                   }
[09:30:45.198]                   options(future.plan = NULL)
[09:30:45.198]                   if (is.na(NA_character_)) 
[09:30:45.198]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:30:45.198]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:30:45.198]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:30:45.198]                     .init = FALSE)
[09:30:45.198]                 }
[09:30:45.198]             }
[09:30:45.198]         }
[09:30:45.198]     })
[09:30:45.198]     if (FALSE) {
[09:30:45.198]         base::sink(type = "output", split = FALSE)
[09:30:45.198]         if (NA) {
[09:30:45.198]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:30:45.198]         }
[09:30:45.198]         else {
[09:30:45.198]             ...future.result["stdout"] <- base::list(NULL)
[09:30:45.198]         }
[09:30:45.198]         base::close(...future.stdout)
[09:30:45.198]         ...future.stdout <- NULL
[09:30:45.198]     }
[09:30:45.198]     ...future.result$conditions <- ...future.conditions
[09:30:45.198]     ...future.result$finished <- base::Sys.time()
[09:30:45.198]     ...future.result
[09:30:45.198] }
[09:30:45.199] assign_globals() ...
[09:30:45.199] List of 2
[09:30:45.199]  $ x:Classes 'listenv', 'environment' <environment: 0x561d6314f238> 
[09:30:45.199]  $ i: int 50
[09:30:45.199]  - attr(*, "where")=List of 2
[09:30:45.199]   ..$ x:<environment: R_EmptyEnv> 
[09:30:45.199]   ..$ i:<environment: R_EmptyEnv> 
[09:30:45.199]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:30:45.199]  - attr(*, "resolved")= logi FALSE
[09:30:45.199]  - attr(*, "total_size")= num 402000
[09:30:45.199]  - attr(*, "already-done")= logi TRUE
[09:30:45.202] - copied ‘x’ to environment
[09:30:45.202] - copied ‘i’ to environment
[09:30:45.202] assign_globals() ... done
[09:30:45.203] plan(): Setting new future strategy stack:
[09:30:45.203] List of future strategies:
[09:30:45.203] 1. sequential:
[09:30:45.203]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:45.203]    - tweaked: FALSE
[09:30:45.203]    - call: NULL
[09:30:45.203] plan(): nbrOfWorkers() = 1
[09:30:46.061] plan(): Setting new future strategy stack:
[09:30:46.061] List of future strategies:
[09:30:46.061] 1. sequential:
[09:30:46.061]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:46.061]    - tweaked: FALSE
[09:30:46.061]    - call: plan(sequential)
[09:30:46.062] plan(): nbrOfWorkers() = 1
[09:30:46.062] SequentialFuture started (and completed)
[09:30:46.062] - Launch lazy future ... done
[09:30:46.062] run() for ‘SequentialFuture’ ... done
[1] 7778742049

> ## Reset plan
> plan(oplan)
[09:30:46.062] plan(): Setting new future strategy stack:
[09:30:46.062] List of future strategies:
[09:30:46.062] 1. sequential:
[09:30:46.062]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:46.062]    - tweaked: FALSE
[09:30:46.062]    - call: future::plan("sequential")
[09:30:46.063] plan(): nbrOfWorkers() = 1
> message("*** Fibonacci demo of the 'future' package ... DONE")
*** Fibonacci demo of the 'future' package ... DONE
> 
> 
> message("*** Mandelbrot demo of the 'future' package ...")
*** Mandelbrot demo of the 'future' package ...
> if (getRversion() >= "3.2.0" && !isWin32) {
+   options(future.demo.mandelbrot.nrow = 2L)
+   options(future.demo.mandelbrot.resolution = 50L)
+   options(future.demo.mandelbrot.delay = FALSE)
+   
+   for (cores in 1:availCores) {
+     message(sprintf("Testing with %d cores ...", cores))
+     options(mc.cores = cores)
+   
+     for (strategy in supportedStrategies(cores)) {
+       message(sprintf("- plan('%s') ...", strategy))
+       plan(strategy)
+       demo("mandelbrot", package = "future", ask = FALSE)
+       message(sprintf("- plan('%s') ... DONE", strategy))
+     }
+   
+     message(sprintf("Testing with %d cores ... DONE", cores))
+   } ## for (cores ...)
+ } else {
+   message(" - This demo requires R (>= 3.2.0). Skipping test. (Skipping also on Win32 i386 for speed)")
+ }
Testing with 1 cores ...
- plan('sequential') ...
[09:30:46.071] plan(): Setting new future strategy stack:
[09:30:46.071] List of future strategies:
[09:30:46.071] 1. sequential:
[09:30:46.071]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:46.071]    - tweaked: FALSE
[09:30:46.071]    - call: plan(strategy)
[09:30:46.072] plan(): nbrOfWorkers() = 1


	demo(mandelbrot)
	---- ~~~~~~~~~~

> library("future")

> library("graphics")

> plot_what_is_done <- function(counts) {
+   for (kk in seq_along(counts)) {
+     f <- counts[[kk]]
+ 
+     ## Already plotted?
+     if (!inherits(f, "Future")) next
+ 
+     ## Not resolved?
+     if (!resolved(f)) next
+ 
+     message(sprintf("Plotting tile #%d of %d ...", kk, n))
+     counts[[kk]] <- value(f)
+     screen(kk)
+     plot(counts[[kk]])
+   }
+ 
+   counts
+ }

> ## Options
> region <- getOption("future.demo.mandelbrot.region", 1L)

> if (!is.list(region)) {
+   if (region == 1L) {
+     region <- list(xmid = -0.75, ymid = 0.0, side = 3.0)
+   } else if (region == 2L) {
+     region <- list(xmid = 0.283, ymid = -0.0095, side = 0.00026)
+   } else if (region == 3L) {
+     region <- list(xmid = 0.282989, ymid = -0.01, side = 3e-8)
+   }
+ }

> nrow <- getOption("future.demo.mandelbrot.nrow", 3L)

> resolution <- getOption("future.demo.mandelbrot.resolution", 400L)

> delay <- getOption("future.demo.mandelbrot.delay", interactive())

> if (isTRUE(delay)) {
+   delay <- function(counts) Sys.sleep(1.0)
+ } else if (!is.function(delay)) {
+   delay <- function(counts) {}
+ }

> ## Generate Mandelbrot tiles to be computed
> Cs <- mandelbrot_tiles(xmid = region$xmid, ymid = region$ymid,
+                        side = region$side, nrow = nrow,
+                        resolution = resolution)

> if (interactive()) {
+   dev.new()
+   plot.new()
+   split.screen(dim(Cs))
+   for (ii in seq_along(Cs)) {
+     screen(ii)
+     par(mar = c(0, 0, 0, 0))
+     text(x = 1 / 2, y = 1 / 2, sprintf("Future #%d\nunresolved", ii), cex = 2)
+   }
+ } else {
+   split.screen(dim(Cs))
+ }
[1] 1 2 3 4

> ## Create all Mandelbrot tiles via lazy futures
> n <- length(Cs)

> message(sprintf("Creating %d Mandelbrot tiles:", n), appendLF = FALSE)
Creating 4 Mandelbrot tiles:
> counts <- lapply(seq_along(Cs), FUN=function(ii) {
+   message(" ", ii, appendLF = FALSE)
+   C <- Cs[[ii]]
+   future({
+     message(sprintf("Calculating tile #%d of %d ...", ii, n), appendLF = FALSE)
+     fit <- mandelbrot(C)
+ 
+     ## Emulate slowness
+     delay(fit)
+ 
+     message(" done")
+     fit
+   }, lazy = TRUE)
+ })
 1[09:30:46.102] getGlobalsAndPackages() ...
[09:30:46.103] Searching for globals...
[09:30:46.106] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[09:30:46.106] Searching for globals ... DONE
[09:30:46.107] Resolving globals: FALSE
[09:30:46.107] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[09:30:46.107] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[09:30:46.108] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[09:30:46.108] - packages: [1] ‘future’
[09:30:46.108] getGlobalsAndPackages() ... DONE
 2[09:30:46.112] getGlobalsAndPackages() ...
[09:30:46.112] Searching for globals...
[09:30:46.115] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[09:30:46.115] Searching for globals ... DONE
[09:30:46.115] Resolving globals: FALSE
[09:30:46.116] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[09:30:46.116] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[09:30:46.116] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[09:30:46.116] - packages: [1] ‘future’
[09:30:46.116] getGlobalsAndPackages() ... DONE
 3[09:30:46.117] getGlobalsAndPackages() ...
[09:30:46.117] Searching for globals...
[09:30:46.120] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[09:30:46.120] Searching for globals ... DONE
[09:30:46.120] Resolving globals: FALSE
[09:30:46.121] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[09:30:46.121] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[09:30:46.121] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[09:30:46.121] - packages: [1] ‘future’
[09:30:46.121] getGlobalsAndPackages() ... DONE
 4[09:30:46.122] getGlobalsAndPackages() ...
[09:30:46.122] Searching for globals...
[09:30:46.125] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[09:30:46.125] Searching for globals ... DONE
[09:30:46.125] Resolving globals: FALSE
[09:30:46.126] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[09:30:46.126] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[09:30:46.126] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[09:30:46.126] - packages: [1] ‘future’
[09:30:46.127] getGlobalsAndPackages() ... DONE

> message(".")
.

> ## Calculate and plot tiles
> repeat {
+   counts <- plot_what_is_done(counts)
+   if (!any(sapply(counts, FUN = inherits, "Future"))) break
+ }
[09:30:46.135] resolved() for ‘Future’ ...
[09:30:46.135] - state: ‘created’
[09:30:46.135] - run: TRUE
[09:30:46.136] - run() ...
[09:30:46.136] run() for ‘Future’ ...
[09:30:46.136] - state: ‘created’
[09:30:46.136] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:30:46.136] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:30:46.136] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:30:46.136]   - Field: ‘label’
[09:30:46.136]   - Field: ‘local’
[09:30:46.137]   - Field: ‘owner’
[09:30:46.137]   - Field: ‘envir’
[09:30:46.137]   - Field: ‘packages’
[09:30:46.137]   - Field: ‘gc’
[09:30:46.137]   - Field: ‘conditions’
[09:30:46.137]   - Field: ‘expr’
[09:30:46.137]   - Field: ‘uuid’
[09:30:46.137]   - Field: ‘seed’
[09:30:46.137]   - Field: ‘version’
[09:30:46.137]   - Field: ‘result’
[09:30:46.137]   - Field: ‘asynchronous’
[09:30:46.138]   - Field: ‘calls’
[09:30:46.138]   - Field: ‘globals’
[09:30:46.138]   - Field: ‘stdout’
[09:30:46.138]   - Field: ‘earlySignal’
[09:30:46.138]   - Field: ‘lazy’
[09:30:46.138]   - Field: ‘state’
[09:30:46.138] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:30:46.138] - Launch lazy future ...
[09:30:46.138] Packages needed by the future expression (n = 1): ‘future’
[09:30:46.138] Packages needed by future strategies (n = 0): <none>
[09:30:46.139] {
[09:30:46.139]     {
[09:30:46.139]         {
[09:30:46.139]             ...future.startTime <- base::Sys.time()
[09:30:46.139]             {
[09:30:46.139]                 {
[09:30:46.139]                   {
[09:30:46.139]                     {
[09:30:46.139]                       base::local({
[09:30:46.139]                         has_future <- base::requireNamespace("future", 
[09:30:46.139]                           quietly = TRUE)
[09:30:46.139]                         if (has_future) {
[09:30:46.139]                           ns <- base::getNamespace("future")
[09:30:46.139]                           version <- ns[[".package"]][["version"]]
[09:30:46.139]                           if (is.null(version)) 
[09:30:46.139]                             version <- utils::packageVersion("future")
[09:30:46.139]                         }
[09:30:46.139]                         else {
[09:30:46.139]                           version <- NULL
[09:30:46.139]                         }
[09:30:46.139]                         if (!has_future || version < "1.8.0") {
[09:30:46.139]                           info <- base::c(r_version = base::gsub("R version ", 
[09:30:46.139]                             "", base::R.version$version.string), 
[09:30:46.139]                             platform = base::sprintf("%s (%s-bit)", 
[09:30:46.139]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:30:46.139]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:30:46.139]                               "release", "version")], collapse = " "), 
[09:30:46.139]                             hostname = base::Sys.info()[["nodename"]])
[09:30:46.139]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:30:46.139]                             info)
[09:30:46.139]                           info <- base::paste(info, collapse = "; ")
[09:30:46.139]                           if (!has_future) {
[09:30:46.139]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:30:46.139]                               info)
[09:30:46.139]                           }
[09:30:46.139]                           else {
[09:30:46.139]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:30:46.139]                               info, version)
[09:30:46.139]                           }
[09:30:46.139]                           base::stop(msg)
[09:30:46.139]                         }
[09:30:46.139]                       })
[09:30:46.139]                     }
[09:30:46.139]                     base::local({
[09:30:46.139]                       for (pkg in "future") {
[09:30:46.139]                         base::loadNamespace(pkg)
[09:30:46.139]                         base::library(pkg, character.only = TRUE)
[09:30:46.139]                       }
[09:30:46.139]                     })
[09:30:46.139]                   }
[09:30:46.139]                   ...future.strategy.old <- future::plan("list")
[09:30:46.139]                   options(future.plan = NULL)
[09:30:46.139]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:30:46.139]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:30:46.139]                 }
[09:30:46.139]                 ...future.workdir <- getwd()
[09:30:46.139]             }
[09:30:46.139]             ...future.oldOptions <- base::as.list(base::.Options)
[09:30:46.139]             ...future.oldEnvVars <- base::Sys.getenv()
[09:30:46.139]         }
[09:30:46.139]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:30:46.139]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:30:46.139]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:30:46.139]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:30:46.139]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:30:46.139]             future.stdout.windows.reencode = NULL, width = 80L)
[09:30:46.139]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:30:46.139]             base::names(...future.oldOptions))
[09:30:46.139]     }
[09:30:46.139]     if (FALSE) {
[09:30:46.139]     }
[09:30:46.139]     else {
[09:30:46.139]         if (TRUE) {
[09:30:46.139]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:30:46.139]                 open = "w")
[09:30:46.139]         }
[09:30:46.139]         else {
[09:30:46.139]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:30:46.139]                 windows = "NUL", "/dev/null"), open = "w")
[09:30:46.139]         }
[09:30:46.139]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:30:46.139]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:30:46.139]             base::sink(type = "output", split = FALSE)
[09:30:46.139]             base::close(...future.stdout)
[09:30:46.139]         }, add = TRUE)
[09:30:46.139]     }
[09:30:46.139]     ...future.frame <- base::sys.nframe()
[09:30:46.139]     ...future.conditions <- base::list()
[09:30:46.139]     ...future.rng <- base::globalenv()$.Random.seed
[09:30:46.139]     if (FALSE) {
[09:30:46.139]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:30:46.139]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:30:46.139]     }
[09:30:46.139]     ...future.result <- base::tryCatch({
[09:30:46.139]         base::withCallingHandlers({
[09:30:46.139]             ...future.value <- base::withVisible(base::local({
[09:30:46.139]                 message(sprintf("Calculating tile #%d of %d ...", 
[09:30:46.139]                   ii, n), appendLF = FALSE)
[09:30:46.139]                 fit <- mandelbrot(C)
[09:30:46.139]                 delay(fit)
[09:30:46.139]                 message(" done")
[09:30:46.139]                 fit
[09:30:46.139]             }))
[09:30:46.139]             future::FutureResult(value = ...future.value$value, 
[09:30:46.139]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:46.139]                   ...future.rng), globalenv = if (FALSE) 
[09:30:46.139]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:30:46.139]                     ...future.globalenv.names))
[09:30:46.139]                 else NULL, started = ...future.startTime, version = "1.8")
[09:30:46.139]         }, condition = base::local({
[09:30:46.139]             c <- base::c
[09:30:46.139]             inherits <- base::inherits
[09:30:46.139]             invokeRestart <- base::invokeRestart
[09:30:46.139]             length <- base::length
[09:30:46.139]             list <- base::list
[09:30:46.139]             seq.int <- base::seq.int
[09:30:46.139]             signalCondition <- base::signalCondition
[09:30:46.139]             sys.calls <- base::sys.calls
[09:30:46.139]             `[[` <- base::`[[`
[09:30:46.139]             `+` <- base::`+`
[09:30:46.139]             `<<-` <- base::`<<-`
[09:30:46.139]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:30:46.139]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:30:46.139]                   3L)]
[09:30:46.139]             }
[09:30:46.139]             function(cond) {
[09:30:46.139]                 is_error <- inherits(cond, "error")
[09:30:46.139]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:30:46.139]                   NULL)
[09:30:46.139]                 if (is_error) {
[09:30:46.139]                   sessionInformation <- function() {
[09:30:46.139]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:30:46.139]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:30:46.139]                       search = base::search(), system = base::Sys.info())
[09:30:46.139]                   }
[09:30:46.139]                   ...future.conditions[[length(...future.conditions) + 
[09:30:46.139]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:30:46.139]                     cond$call), session = sessionInformation(), 
[09:30:46.139]                     timestamp = base::Sys.time(), signaled = 0L)
[09:30:46.139]                   signalCondition(cond)
[09:30:46.139]                 }
[09:30:46.139]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:30:46.139]                 "immediateCondition"))) {
[09:30:46.139]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:30:46.139]                   ...future.conditions[[length(...future.conditions) + 
[09:30:46.139]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:30:46.139]                   if (TRUE && !signal) {
[09:30:46.139]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:46.139]                     {
[09:30:46.139]                       inherits <- base::inherits
[09:30:46.139]                       invokeRestart <- base::invokeRestart
[09:30:46.139]                       is.null <- base::is.null
[09:30:46.139]                       muffled <- FALSE
[09:30:46.139]                       if (inherits(cond, "message")) {
[09:30:46.139]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:46.139]                         if (muffled) 
[09:30:46.139]                           invokeRestart("muffleMessage")
[09:30:46.139]                       }
[09:30:46.139]                       else if (inherits(cond, "warning")) {
[09:30:46.139]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:46.139]                         if (muffled) 
[09:30:46.139]                           invokeRestart("muffleWarning")
[09:30:46.139]                       }
[09:30:46.139]                       else if (inherits(cond, "condition")) {
[09:30:46.139]                         if (!is.null(pattern)) {
[09:30:46.139]                           computeRestarts <- base::computeRestarts
[09:30:46.139]                           grepl <- base::grepl
[09:30:46.139]                           restarts <- computeRestarts(cond)
[09:30:46.139]                           for (restart in restarts) {
[09:30:46.139]                             name <- restart$name
[09:30:46.139]                             if (is.null(name)) 
[09:30:46.139]                               next
[09:30:46.139]                             if (!grepl(pattern, name)) 
[09:30:46.139]                               next
[09:30:46.139]                             invokeRestart(restart)
[09:30:46.139]                             muffled <- TRUE
[09:30:46.139]                             break
[09:30:46.139]                           }
[09:30:46.139]                         }
[09:30:46.139]                       }
[09:30:46.139]                       invisible(muffled)
[09:30:46.139]                     }
[09:30:46.139]                     muffleCondition(cond, pattern = "^muffle")
[09:30:46.139]                   }
[09:30:46.139]                 }
[09:30:46.139]                 else {
[09:30:46.139]                   if (TRUE) {
[09:30:46.139]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:46.139]                     {
[09:30:46.139]                       inherits <- base::inherits
[09:30:46.139]                       invokeRestart <- base::invokeRestart
[09:30:46.139]                       is.null <- base::is.null
[09:30:46.139]                       muffled <- FALSE
[09:30:46.139]                       if (inherits(cond, "message")) {
[09:30:46.139]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:46.139]                         if (muffled) 
[09:30:46.139]                           invokeRestart("muffleMessage")
[09:30:46.139]                       }
[09:30:46.139]                       else if (inherits(cond, "warning")) {
[09:30:46.139]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:46.139]                         if (muffled) 
[09:30:46.139]                           invokeRestart("muffleWarning")
[09:30:46.139]                       }
[09:30:46.139]                       else if (inherits(cond, "condition")) {
[09:30:46.139]                         if (!is.null(pattern)) {
[09:30:46.139]                           computeRestarts <- base::computeRestarts
[09:30:46.139]                           grepl <- base::grepl
[09:30:46.139]                           restarts <- computeRestarts(cond)
[09:30:46.139]                           for (restart in restarts) {
[09:30:46.139]                             name <- restart$name
[09:30:46.139]                             if (is.null(name)) 
[09:30:46.139]                               next
[09:30:46.139]                             if (!grepl(pattern, name)) 
[09:30:46.139]                               next
[09:30:46.139]                             invokeRestart(restart)
[09:30:46.139]                             muffled <- TRUE
[09:30:46.139]                             break
[09:30:46.139]                           }
[09:30:46.139]                         }
[09:30:46.139]                       }
[09:30:46.139]                       invisible(muffled)
[09:30:46.139]                     }
[09:30:46.139]                     muffleCondition(cond, pattern = "^muffle")
[09:30:46.139]                   }
[09:30:46.139]                 }
[09:30:46.139]             }
[09:30:46.139]         }))
[09:30:46.139]     }, error = function(ex) {
[09:30:46.139]         base::structure(base::list(value = NULL, visible = NULL, 
[09:30:46.139]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:46.139]                 ...future.rng), started = ...future.startTime, 
[09:30:46.139]             finished = Sys.time(), session_uuid = NA_character_, 
[09:30:46.139]             version = "1.8"), class = "FutureResult")
[09:30:46.139]     }, finally = {
[09:30:46.139]         if (!identical(...future.workdir, getwd())) 
[09:30:46.139]             setwd(...future.workdir)
[09:30:46.139]         {
[09:30:46.139]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:30:46.139]                 ...future.oldOptions$nwarnings <- NULL
[09:30:46.139]             }
[09:30:46.139]             base::options(...future.oldOptions)
[09:30:46.139]             if (.Platform$OS.type == "windows") {
[09:30:46.139]                 old_names <- names(...future.oldEnvVars)
[09:30:46.139]                 envs <- base::Sys.getenv()
[09:30:46.139]                 names <- names(envs)
[09:30:46.139]                 common <- intersect(names, old_names)
[09:30:46.139]                 added <- setdiff(names, old_names)
[09:30:46.139]                 removed <- setdiff(old_names, names)
[09:30:46.139]                 changed <- common[...future.oldEnvVars[common] != 
[09:30:46.139]                   envs[common]]
[09:30:46.139]                 NAMES <- toupper(changed)
[09:30:46.139]                 args <- list()
[09:30:46.139]                 for (kk in seq_along(NAMES)) {
[09:30:46.139]                   name <- changed[[kk]]
[09:30:46.139]                   NAME <- NAMES[[kk]]
[09:30:46.139]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:46.139]                     next
[09:30:46.139]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:46.139]                 }
[09:30:46.139]                 NAMES <- toupper(added)
[09:30:46.139]                 for (kk in seq_along(NAMES)) {
[09:30:46.139]                   name <- added[[kk]]
[09:30:46.139]                   NAME <- NAMES[[kk]]
[09:30:46.139]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:46.139]                     next
[09:30:46.139]                   args[[name]] <- ""
[09:30:46.139]                 }
[09:30:46.139]                 NAMES <- toupper(removed)
[09:30:46.139]                 for (kk in seq_along(NAMES)) {
[09:30:46.139]                   name <- removed[[kk]]
[09:30:46.139]                   NAME <- NAMES[[kk]]
[09:30:46.139]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:46.139]                     next
[09:30:46.139]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:46.139]                 }
[09:30:46.139]                 if (length(args) > 0) 
[09:30:46.139]                   base::do.call(base::Sys.setenv, args = args)
[09:30:46.139]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:30:46.139]             }
[09:30:46.139]             else {
[09:30:46.139]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:30:46.139]             }
[09:30:46.139]             {
[09:30:46.139]                 if (base::length(...future.futureOptionsAdded) > 
[09:30:46.139]                   0L) {
[09:30:46.139]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:30:46.139]                   base::names(opts) <- ...future.futureOptionsAdded
[09:30:46.139]                   base::options(opts)
[09:30:46.139]                 }
[09:30:46.139]                 {
[09:30:46.139]                   {
[09:30:46.139]                     NULL
[09:30:46.139]                     RNGkind("Mersenne-Twister")
[09:30:46.139]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:30:46.139]                       inherits = FALSE)
[09:30:46.139]                   }
[09:30:46.139]                   options(future.plan = NULL)
[09:30:46.139]                   if (is.na(NA_character_)) 
[09:30:46.139]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:30:46.139]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:30:46.139]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:30:46.139]                     .init = FALSE)
[09:30:46.139]                 }
[09:30:46.139]             }
[09:30:46.139]         }
[09:30:46.139]     })
[09:30:46.139]     if (TRUE) {
[09:30:46.139]         base::sink(type = "output", split = FALSE)
[09:30:46.139]         if (TRUE) {
[09:30:46.139]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:30:46.139]         }
[09:30:46.139]         else {
[09:30:46.139]             ...future.result["stdout"] <- base::list(NULL)
[09:30:46.139]         }
[09:30:46.139]         base::close(...future.stdout)
[09:30:46.139]         ...future.stdout <- NULL
[09:30:46.139]     }
[09:30:46.139]     ...future.result$conditions <- ...future.conditions
[09:30:46.139]     ...future.result$finished <- base::Sys.time()
[09:30:46.139]     ...future.result
[09:30:46.139] }
[09:30:46.141] assign_globals() ...
[09:30:46.141] List of 4
[09:30:46.141]  $ ii   : int 1
[09:30:46.141]  $ n    : int 4
[09:30:46.141]  $ C    : cplx [1:25, 1:25] -2.25-1.5i -2.25-1.44i -2.25-1.38i ...
[09:30:46.141]   ..- attr(*, "region")=List of 2
[09:30:46.141]   .. ..$ xrange: num [1:2] -2.25 -0.781
[09:30:46.141]   .. ..$ yrange: num [1:2] -1.5 -0.0306
[09:30:46.141]   ..- attr(*, "tile")= int [1:2] 1 1
[09:30:46.141]  $ delay:function (counts)  
[09:30:46.141]   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[09:30:46.141]   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561d63b8e820> 
[09:30:46.141]  - attr(*, "where")=List of 4
[09:30:46.141]   ..$ ii   :<environment: R_EmptyEnv> 
[09:30:46.141]   ..$ n    :<environment: R_EmptyEnv> 
[09:30:46.141]   ..$ C    :<environment: R_EmptyEnv> 
[09:30:46.141]   ..$ delay:<environment: R_EmptyEnv> 
[09:30:46.141]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:30:46.141]  - attr(*, "resolved")= logi FALSE
[09:30:46.141]  - attr(*, "total_size")= num 14584
[09:30:46.141]  - attr(*, "already-done")= logi TRUE
[09:30:46.147] - copied ‘ii’ to environment
[09:30:46.147] - copied ‘n’ to environment
[09:30:46.147] - copied ‘C’ to environment
[09:30:46.147] - reassign environment for ‘delay’
[09:30:46.147] - copied ‘delay’ to environment
[09:30:46.147] assign_globals() ... done
[09:30:46.147] plan(): Setting new future strategy stack:
[09:30:46.148] List of future strategies:
[09:30:46.148] 1. sequential:
[09:30:46.148]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:46.148]    - tweaked: FALSE
[09:30:46.148]    - call: NULL
[09:30:46.148] plan(): nbrOfWorkers() = 1
[09:30:46.165] plan(): Setting new future strategy stack:
[09:30:46.165] List of future strategies:
[09:30:46.165] 1. sequential:
[09:30:46.165]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:46.165]    - tweaked: FALSE
[09:30:46.165]    - call: plan(strategy)
[09:30:46.165] plan(): nbrOfWorkers() = 1
[09:30:46.165] SequentialFuture started (and completed)
[09:30:46.165] signalConditions() ...
[09:30:46.166]  - include = ‘immediateCondition’
[09:30:46.166]  - exclude = 
[09:30:46.166]  - resignal = FALSE
[09:30:46.166]  - Number of conditions: 2
[09:30:46.166] signalConditions() ... done
[09:30:46.166] - Launch lazy future ... done
[09:30:46.166] run() for ‘SequentialFuture’ ... done
[09:30:46.166] - run() ... done
[09:30:46.166] - resolved() ...
[09:30:46.166] resolved() for ‘SequentialFuture’ ...
[09:30:46.166] - state: ‘finished’
[09:30:46.167] - run: TRUE
[09:30:46.167] - result: ‘FutureResult’
[09:30:46.167] resolved() for ‘SequentialFuture’ ... done
[09:30:46.167] - resolved: TRUE
[09:30:46.167] - resolved() ... done
[09:30:46.167] resolved() for ‘SequentialFuture’ ... done
Plotting tile #1 of 4 ...
[09:30:46.167] signalConditions() ...
[09:30:46.167]  - include = ‘immediateCondition’
[09:30:46.167]  - exclude = 
[09:30:46.167]  - resignal = FALSE
[09:30:46.167]  - Number of conditions: 2
[09:30:46.168] signalConditions() ... done
[09:30:46.168] Future state: ‘finished’
[09:30:46.168] signalConditions() ...
[09:30:46.168]  - include = ‘condition’
[09:30:46.168]  - exclude = ‘immediateCondition’
[09:30:46.168]  - resignal = TRUE
[09:30:46.168]  - Number of conditions: 2
[09:30:46.168]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #1 of 4 ...[09:30:46.168]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[09:30:46.168] signalConditions() ... done
[09:30:46.170] resolved() for ‘Future’ ...
[09:30:46.170] - state: ‘created’
[09:30:46.170] - run: TRUE
[09:30:46.170] - run() ...
[09:30:46.170] run() for ‘Future’ ...
[09:30:46.170] - state: ‘created’
[09:30:46.170] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:30:46.171] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:30:46.171] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:30:46.171]   - Field: ‘label’
[09:30:46.171]   - Field: ‘local’
[09:30:46.171]   - Field: ‘owner’
[09:30:46.171]   - Field: ‘envir’
[09:30:46.171]   - Field: ‘packages’
[09:30:46.171]   - Field: ‘gc’
[09:30:46.171]   - Field: ‘conditions’
[09:30:46.172]   - Field: ‘expr’
[09:30:46.172]   - Field: ‘uuid’
[09:30:46.172]   - Field: ‘seed’
[09:30:46.172]   - Field: ‘version’
[09:30:46.172]   - Field: ‘result’
[09:30:46.172]   - Field: ‘asynchronous’
[09:30:46.172]   - Field: ‘calls’
[09:30:46.172]   - Field: ‘globals’
[09:30:46.172]   - Field: ‘stdout’
[09:30:46.172]   - Field: ‘earlySignal’
[09:30:46.173]   - Field: ‘lazy’
[09:30:46.173]   - Field: ‘state’
[09:30:46.173] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:30:46.173] - Launch lazy future ...
[09:30:46.173] Packages needed by the future expression (n = 1): ‘future’
[09:30:46.173] Packages needed by future strategies (n = 0): <none>
[09:30:46.174] {
[09:30:46.174]     {
[09:30:46.174]         {
[09:30:46.174]             ...future.startTime <- base::Sys.time()
[09:30:46.174]             {
[09:30:46.174]                 {
[09:30:46.174]                   {
[09:30:46.174]                     {
[09:30:46.174]                       base::local({
[09:30:46.174]                         has_future <- base::requireNamespace("future", 
[09:30:46.174]                           quietly = TRUE)
[09:30:46.174]                         if (has_future) {
[09:30:46.174]                           ns <- base::getNamespace("future")
[09:30:46.174]                           version <- ns[[".package"]][["version"]]
[09:30:46.174]                           if (is.null(version)) 
[09:30:46.174]                             version <- utils::packageVersion("future")
[09:30:46.174]                         }
[09:30:46.174]                         else {
[09:30:46.174]                           version <- NULL
[09:30:46.174]                         }
[09:30:46.174]                         if (!has_future || version < "1.8.0") {
[09:30:46.174]                           info <- base::c(r_version = base::gsub("R version ", 
[09:30:46.174]                             "", base::R.version$version.string), 
[09:30:46.174]                             platform = base::sprintf("%s (%s-bit)", 
[09:30:46.174]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:30:46.174]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:30:46.174]                               "release", "version")], collapse = " "), 
[09:30:46.174]                             hostname = base::Sys.info()[["nodename"]])
[09:30:46.174]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:30:46.174]                             info)
[09:30:46.174]                           info <- base::paste(info, collapse = "; ")
[09:30:46.174]                           if (!has_future) {
[09:30:46.174]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:30:46.174]                               info)
[09:30:46.174]                           }
[09:30:46.174]                           else {
[09:30:46.174]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:30:46.174]                               info, version)
[09:30:46.174]                           }
[09:30:46.174]                           base::stop(msg)
[09:30:46.174]                         }
[09:30:46.174]                       })
[09:30:46.174]                     }
[09:30:46.174]                     base::local({
[09:30:46.174]                       for (pkg in "future") {
[09:30:46.174]                         base::loadNamespace(pkg)
[09:30:46.174]                         base::library(pkg, character.only = TRUE)
[09:30:46.174]                       }
[09:30:46.174]                     })
[09:30:46.174]                   }
[09:30:46.174]                   ...future.strategy.old <- future::plan("list")
[09:30:46.174]                   options(future.plan = NULL)
[09:30:46.174]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:30:46.174]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:30:46.174]                 }
[09:30:46.174]                 ...future.workdir <- getwd()
[09:30:46.174]             }
[09:30:46.174]             ...future.oldOptions <- base::as.list(base::.Options)
[09:30:46.174]             ...future.oldEnvVars <- base::Sys.getenv()
[09:30:46.174]         }
[09:30:46.174]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:30:46.174]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:30:46.174]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:30:46.174]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:30:46.174]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:30:46.174]             future.stdout.windows.reencode = NULL, width = 80L)
[09:30:46.174]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:30:46.174]             base::names(...future.oldOptions))
[09:30:46.174]     }
[09:30:46.174]     if (FALSE) {
[09:30:46.174]     }
[09:30:46.174]     else {
[09:30:46.174]         if (TRUE) {
[09:30:46.174]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:30:46.174]                 open = "w")
[09:30:46.174]         }
[09:30:46.174]         else {
[09:30:46.174]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:30:46.174]                 windows = "NUL", "/dev/null"), open = "w")
[09:30:46.174]         }
[09:30:46.174]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:30:46.174]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:30:46.174]             base::sink(type = "output", split = FALSE)
[09:30:46.174]             base::close(...future.stdout)
[09:30:46.174]         }, add = TRUE)
[09:30:46.174]     }
[09:30:46.174]     ...future.frame <- base::sys.nframe()
[09:30:46.174]     ...future.conditions <- base::list()
[09:30:46.174]     ...future.rng <- base::globalenv()$.Random.seed
[09:30:46.174]     if (FALSE) {
[09:30:46.174]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:30:46.174]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:30:46.174]     }
[09:30:46.174]     ...future.result <- base::tryCatch({
[09:30:46.174]         base::withCallingHandlers({
[09:30:46.174]             ...future.value <- base::withVisible(base::local({
[09:30:46.174]                 message(sprintf("Calculating tile #%d of %d ...", 
[09:30:46.174]                   ii, n), appendLF = FALSE)
[09:30:46.174]                 fit <- mandelbrot(C)
[09:30:46.174]                 delay(fit)
[09:30:46.174]                 message(" done")
[09:30:46.174]                 fit
[09:30:46.174]             }))
[09:30:46.174]             future::FutureResult(value = ...future.value$value, 
[09:30:46.174]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:46.174]                   ...future.rng), globalenv = if (FALSE) 
[09:30:46.174]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:30:46.174]                     ...future.globalenv.names))
[09:30:46.174]                 else NULL, started = ...future.startTime, version = "1.8")
[09:30:46.174]         }, condition = base::local({
[09:30:46.174]             c <- base::c
[09:30:46.174]             inherits <- base::inherits
[09:30:46.174]             invokeRestart <- base::invokeRestart
[09:30:46.174]             length <- base::length
[09:30:46.174]             list <- base::list
[09:30:46.174]             seq.int <- base::seq.int
[09:30:46.174]             signalCondition <- base::signalCondition
[09:30:46.174]             sys.calls <- base::sys.calls
[09:30:46.174]             `[[` <- base::`[[`
[09:30:46.174]             `+` <- base::`+`
[09:30:46.174]             `<<-` <- base::`<<-`
[09:30:46.174]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:30:46.174]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:30:46.174]                   3L)]
[09:30:46.174]             }
[09:30:46.174]             function(cond) {
[09:30:46.174]                 is_error <- inherits(cond, "error")
[09:30:46.174]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:30:46.174]                   NULL)
[09:30:46.174]                 if (is_error) {
[09:30:46.174]                   sessionInformation <- function() {
[09:30:46.174]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:30:46.174]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:30:46.174]                       search = base::search(), system = base::Sys.info())
[09:30:46.174]                   }
[09:30:46.174]                   ...future.conditions[[length(...future.conditions) + 
[09:30:46.174]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:30:46.174]                     cond$call), session = sessionInformation(), 
[09:30:46.174]                     timestamp = base::Sys.time(), signaled = 0L)
[09:30:46.174]                   signalCondition(cond)
[09:30:46.174]                 }
[09:30:46.174]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:30:46.174]                 "immediateCondition"))) {
[09:30:46.174]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:30:46.174]                   ...future.conditions[[length(...future.conditions) + 
[09:30:46.174]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:30:46.174]                   if (TRUE && !signal) {
[09:30:46.174]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:46.174]                     {
[09:30:46.174]                       inherits <- base::inherits
[09:30:46.174]                       invokeRestart <- base::invokeRestart
[09:30:46.174]                       is.null <- base::is.null
[09:30:46.174]                       muffled <- FALSE
[09:30:46.174]                       if (inherits(cond, "message")) {
[09:30:46.174]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:46.174]                         if (muffled) 
[09:30:46.174]                           invokeRestart("muffleMessage")
[09:30:46.174]                       }
[09:30:46.174]                       else if (inherits(cond, "warning")) {
[09:30:46.174]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:46.174]                         if (muffled) 
[09:30:46.174]                           invokeRestart("muffleWarning")
[09:30:46.174]                       }
[09:30:46.174]                       else if (inherits(cond, "condition")) {
[09:30:46.174]                         if (!is.null(pattern)) {
[09:30:46.174]                           computeRestarts <- base::computeRestarts
[09:30:46.174]                           grepl <- base::grepl
[09:30:46.174]                           restarts <- computeRestarts(cond)
[09:30:46.174]                           for (restart in restarts) {
[09:30:46.174]                             name <- restart$name
[09:30:46.174]                             if (is.null(name)) 
[09:30:46.174]                               next
[09:30:46.174]                             if (!grepl(pattern, name)) 
[09:30:46.174]                               next
[09:30:46.174]                             invokeRestart(restart)
[09:30:46.174]                             muffled <- TRUE
[09:30:46.174]                             break
[09:30:46.174]                           }
[09:30:46.174]                         }
[09:30:46.174]                       }
[09:30:46.174]                       invisible(muffled)
[09:30:46.174]                     }
[09:30:46.174]                     muffleCondition(cond, pattern = "^muffle")
[09:30:46.174]                   }
[09:30:46.174]                 }
[09:30:46.174]                 else {
[09:30:46.174]                   if (TRUE) {
[09:30:46.174]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:46.174]                     {
[09:30:46.174]                       inherits <- base::inherits
[09:30:46.174]                       invokeRestart <- base::invokeRestart
[09:30:46.174]                       is.null <- base::is.null
[09:30:46.174]                       muffled <- FALSE
[09:30:46.174]                       if (inherits(cond, "message")) {
[09:30:46.174]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:46.174]                         if (muffled) 
[09:30:46.174]                           invokeRestart("muffleMessage")
[09:30:46.174]                       }
[09:30:46.174]                       else if (inherits(cond, "warning")) {
[09:30:46.174]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:46.174]                         if (muffled) 
[09:30:46.174]                           invokeRestart("muffleWarning")
[09:30:46.174]                       }
[09:30:46.174]                       else if (inherits(cond, "condition")) {
[09:30:46.174]                         if (!is.null(pattern)) {
[09:30:46.174]                           computeRestarts <- base::computeRestarts
[09:30:46.174]                           grepl <- base::grepl
[09:30:46.174]                           restarts <- computeRestarts(cond)
[09:30:46.174]                           for (restart in restarts) {
[09:30:46.174]                             name <- restart$name
[09:30:46.174]                             if (is.null(name)) 
[09:30:46.174]                               next
[09:30:46.174]                             if (!grepl(pattern, name)) 
[09:30:46.174]                               next
[09:30:46.174]                             invokeRestart(restart)
[09:30:46.174]                             muffled <- TRUE
[09:30:46.174]                             break
[09:30:46.174]                           }
[09:30:46.174]                         }
[09:30:46.174]                       }
[09:30:46.174]                       invisible(muffled)
[09:30:46.174]                     }
[09:30:46.174]                     muffleCondition(cond, pattern = "^muffle")
[09:30:46.174]                   }
[09:30:46.174]                 }
[09:30:46.174]             }
[09:30:46.174]         }))
[09:30:46.174]     }, error = function(ex) {
[09:30:46.174]         base::structure(base::list(value = NULL, visible = NULL, 
[09:30:46.174]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:46.174]                 ...future.rng), started = ...future.startTime, 
[09:30:46.174]             finished = Sys.time(), session_uuid = NA_character_, 
[09:30:46.174]             version = "1.8"), class = "FutureResult")
[09:30:46.174]     }, finally = {
[09:30:46.174]         if (!identical(...future.workdir, getwd())) 
[09:30:46.174]             setwd(...future.workdir)
[09:30:46.174]         {
[09:30:46.174]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:30:46.174]                 ...future.oldOptions$nwarnings <- NULL
[09:30:46.174]             }
[09:30:46.174]             base::options(...future.oldOptions)
[09:30:46.174]             if (.Platform$OS.type == "windows") {
[09:30:46.174]                 old_names <- names(...future.oldEnvVars)
[09:30:46.174]                 envs <- base::Sys.getenv()
[09:30:46.174]                 names <- names(envs)
[09:30:46.174]                 common <- intersect(names, old_names)
[09:30:46.174]                 added <- setdiff(names, old_names)
[09:30:46.174]                 removed <- setdiff(old_names, names)
[09:30:46.174]                 changed <- common[...future.oldEnvVars[common] != 
[09:30:46.174]                   envs[common]]
[09:30:46.174]                 NAMES <- toupper(changed)
[09:30:46.174]                 args <- list()
[09:30:46.174]                 for (kk in seq_along(NAMES)) {
[09:30:46.174]                   name <- changed[[kk]]
[09:30:46.174]                   NAME <- NAMES[[kk]]
[09:30:46.174]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:46.174]                     next
[09:30:46.174]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:46.174]                 }
[09:30:46.174]                 NAMES <- toupper(added)
[09:30:46.174]                 for (kk in seq_along(NAMES)) {
[09:30:46.174]                   name <- added[[kk]]
[09:30:46.174]                   NAME <- NAMES[[kk]]
[09:30:46.174]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:46.174]                     next
[09:30:46.174]                   args[[name]] <- ""
[09:30:46.174]                 }
[09:30:46.174]                 NAMES <- toupper(removed)
[09:30:46.174]                 for (kk in seq_along(NAMES)) {
[09:30:46.174]                   name <- removed[[kk]]
[09:30:46.174]                   NAME <- NAMES[[kk]]
[09:30:46.174]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:46.174]                     next
[09:30:46.174]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:46.174]                 }
[09:30:46.174]                 if (length(args) > 0) 
[09:30:46.174]                   base::do.call(base::Sys.setenv, args = args)
[09:30:46.174]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:30:46.174]             }
[09:30:46.174]             else {
[09:30:46.174]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:30:46.174]             }
[09:30:46.174]             {
[09:30:46.174]                 if (base::length(...future.futureOptionsAdded) > 
[09:30:46.174]                   0L) {
[09:30:46.174]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:30:46.174]                   base::names(opts) <- ...future.futureOptionsAdded
[09:30:46.174]                   base::options(opts)
[09:30:46.174]                 }
[09:30:46.174]                 {
[09:30:46.174]                   {
[09:30:46.174]                     NULL
[09:30:46.174]                     RNGkind("Mersenne-Twister")
[09:30:46.174]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:30:46.174]                       inherits = FALSE)
[09:30:46.174]                   }
[09:30:46.174]                   options(future.plan = NULL)
[09:30:46.174]                   if (is.na(NA_character_)) 
[09:30:46.174]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:30:46.174]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:30:46.174]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:30:46.174]                     .init = FALSE)
[09:30:46.174]                 }
[09:30:46.174]             }
[09:30:46.174]         }
[09:30:46.174]     })
[09:30:46.174]     if (TRUE) {
[09:30:46.174]         base::sink(type = "output", split = FALSE)
[09:30:46.174]         if (TRUE) {
[09:30:46.174]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:30:46.174]         }
[09:30:46.174]         else {
[09:30:46.174]             ...future.result["stdout"] <- base::list(NULL)
[09:30:46.174]         }
[09:30:46.174]         base::close(...future.stdout)
[09:30:46.174]         ...future.stdout <- NULL
[09:30:46.174]     }
[09:30:46.174]     ...future.result$conditions <- ...future.conditions
[09:30:46.174]     ...future.result$finished <- base::Sys.time()
[09:30:46.174]     ...future.result
[09:30:46.174] }
[09:30:46.175] assign_globals() ...
[09:30:46.175] List of 4
[09:30:46.175]  $ ii   : int 2
[09:30:46.175]  $ n    : int 4
[09:30:46.175]  $ C    : cplx [1:25, 1:25] -0.719-1.5i -0.719-1.44i -0.719-1.38i ...
[09:30:46.175]   ..- attr(*, "region")=List of 2
[09:30:46.175]   .. ..$ xrange: num [1:2] -0.719 0.75
[09:30:46.175]   .. ..$ yrange: num [1:2] -1.5 -0.0306
[09:30:46.175]   ..- attr(*, "tile")= int [1:2] 1 2
[09:30:46.175]  $ delay:function (counts)  
[09:30:46.175]   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[09:30:46.175]   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561d63b8e820> 
[09:30:46.175]  - attr(*, "where")=List of 4
[09:30:46.175]   ..$ ii   :<environment: R_EmptyEnv> 
[09:30:46.175]   ..$ n    :<environment: R_EmptyEnv> 
[09:30:46.175]   ..$ C    :<environment: R_EmptyEnv> 
[09:30:46.175]   ..$ delay:<environment: R_EmptyEnv> 
[09:30:46.175]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:30:46.175]  - attr(*, "resolved")= logi FALSE
[09:30:46.175]  - attr(*, "total_size")= num 14584
[09:30:46.175]  - attr(*, "already-done")= logi TRUE
[09:30:46.181] - copied ‘ii’ to environment
[09:30:46.181] - copied ‘n’ to environment
[09:30:46.181] - copied ‘C’ to environment
[09:30:46.181] - reassign environment for ‘delay’
[09:30:46.181] - copied ‘delay’ to environment
[09:30:46.182] assign_globals() ... done
[09:30:46.182] plan(): Setting new future strategy stack:
[09:30:46.182] List of future strategies:
[09:30:46.182] 1. sequential:
[09:30:46.182]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:46.182]    - tweaked: FALSE
[09:30:46.182]    - call: NULL
[09:30:46.182] plan(): nbrOfWorkers() = 1
[09:30:46.197] plan(): Setting new future strategy stack:
[09:30:46.197] List of future strategies:
[09:30:46.197] 1. sequential:
[09:30:46.197]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:46.197]    - tweaked: FALSE
[09:30:46.197]    - call: plan(strategy)
[09:30:46.198] plan(): nbrOfWorkers() = 1
[09:30:46.198] SequentialFuture started (and completed)
[09:30:46.198] signalConditions() ...
[09:30:46.198]  - include = ‘immediateCondition’
[09:30:46.198]  - exclude = 
[09:30:46.198]  - resignal = FALSE
[09:30:46.198]  - Number of conditions: 2
[09:30:46.198] signalConditions() ... done
[09:30:46.198] - Launch lazy future ... done
[09:30:46.199] run() for ‘SequentialFuture’ ... done
[09:30:46.199] - run() ... done
[09:30:46.199] - resolved() ...
[09:30:46.199] resolved() for ‘SequentialFuture’ ...
[09:30:46.199] - state: ‘finished’
[09:30:46.199] - run: TRUE
[09:30:46.199] - result: ‘FutureResult’
[09:30:46.199] resolved() for ‘SequentialFuture’ ... done
[09:30:46.199] - resolved: TRUE
[09:30:46.199] - resolved() ... done
[09:30:46.199] resolved() for ‘SequentialFuture’ ... done
Plotting tile #2 of 4 ...
[09:30:46.200] signalConditions() ...
[09:30:46.200]  - include = ‘immediateCondition’
[09:30:46.200]  - exclude = 
[09:30:46.200]  - resignal = FALSE
[09:30:46.200]  - Number of conditions: 2
[09:30:46.200] signalConditions() ... done
[09:30:46.200] Future state: ‘finished’
[09:30:46.200] signalConditions() ...
[09:30:46.200]  - include = ‘condition’
[09:30:46.200]  - exclude = ‘immediateCondition’
[09:30:46.201]  - resignal = TRUE
[09:30:46.201]  - Number of conditions: 2
[09:30:46.201]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #2 of 4 ...[09:30:46.201]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[09:30:46.201] signalConditions() ... done
[09:30:46.202] resolved() for ‘Future’ ...
[09:30:46.202] - state: ‘created’
[09:30:46.202] - run: TRUE
[09:30:46.202] - run() ...
[09:30:46.202] run() for ‘Future’ ...
[09:30:46.202] - state: ‘created’
[09:30:46.202] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:30:46.202] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:30:46.203] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:30:46.203]   - Field: ‘label’
[09:30:46.203]   - Field: ‘local’
[09:30:46.203]   - Field: ‘owner’
[09:30:46.203]   - Field: ‘envir’
[09:30:46.203]   - Field: ‘packages’
[09:30:46.203]   - Field: ‘gc’
[09:30:46.203]   - Field: ‘conditions’
[09:30:46.203]   - Field: ‘expr’
[09:30:46.203]   - Field: ‘uuid’
[09:30:46.203]   - Field: ‘seed’
[09:30:46.204]   - Field: ‘version’
[09:30:46.204]   - Field: ‘result’
[09:30:46.204]   - Field: ‘asynchronous’
[09:30:46.204]   - Field: ‘calls’
[09:30:46.204]   - Field: ‘globals’
[09:30:46.204]   - Field: ‘stdout’
[09:30:46.204]   - Field: ‘earlySignal’
[09:30:46.204]   - Field: ‘lazy’
[09:30:46.204]   - Field: ‘state’
[09:30:46.204] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:30:46.204] - Launch lazy future ...
[09:30:46.205] Packages needed by the future expression (n = 1): ‘future’
[09:30:46.205] Packages needed by future strategies (n = 0): <none>
[09:30:46.205] {
[09:30:46.205]     {
[09:30:46.205]         {
[09:30:46.205]             ...future.startTime <- base::Sys.time()
[09:30:46.205]             {
[09:30:46.205]                 {
[09:30:46.205]                   {
[09:30:46.205]                     {
[09:30:46.205]                       base::local({
[09:30:46.205]                         has_future <- base::requireNamespace("future", 
[09:30:46.205]                           quietly = TRUE)
[09:30:46.205]                         if (has_future) {
[09:30:46.205]                           ns <- base::getNamespace("future")
[09:30:46.205]                           version <- ns[[".package"]][["version"]]
[09:30:46.205]                           if (is.null(version)) 
[09:30:46.205]                             version <- utils::packageVersion("future")
[09:30:46.205]                         }
[09:30:46.205]                         else {
[09:30:46.205]                           version <- NULL
[09:30:46.205]                         }
[09:30:46.205]                         if (!has_future || version < "1.8.0") {
[09:30:46.205]                           info <- base::c(r_version = base::gsub("R version ", 
[09:30:46.205]                             "", base::R.version$version.string), 
[09:30:46.205]                             platform = base::sprintf("%s (%s-bit)", 
[09:30:46.205]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:30:46.205]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:30:46.205]                               "release", "version")], collapse = " "), 
[09:30:46.205]                             hostname = base::Sys.info()[["nodename"]])
[09:30:46.205]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:30:46.205]                             info)
[09:30:46.205]                           info <- base::paste(info, collapse = "; ")
[09:30:46.205]                           if (!has_future) {
[09:30:46.205]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:30:46.205]                               info)
[09:30:46.205]                           }
[09:30:46.205]                           else {
[09:30:46.205]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:30:46.205]                               info, version)
[09:30:46.205]                           }
[09:30:46.205]                           base::stop(msg)
[09:30:46.205]                         }
[09:30:46.205]                       })
[09:30:46.205]                     }
[09:30:46.205]                     base::local({
[09:30:46.205]                       for (pkg in "future") {
[09:30:46.205]                         base::loadNamespace(pkg)
[09:30:46.205]                         base::library(pkg, character.only = TRUE)
[09:30:46.205]                       }
[09:30:46.205]                     })
[09:30:46.205]                   }
[09:30:46.205]                   ...future.strategy.old <- future::plan("list")
[09:30:46.205]                   options(future.plan = NULL)
[09:30:46.205]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:30:46.205]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:30:46.205]                 }
[09:30:46.205]                 ...future.workdir <- getwd()
[09:30:46.205]             }
[09:30:46.205]             ...future.oldOptions <- base::as.list(base::.Options)
[09:30:46.205]             ...future.oldEnvVars <- base::Sys.getenv()
[09:30:46.205]         }
[09:30:46.205]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:30:46.205]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:30:46.205]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:30:46.205]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:30:46.205]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:30:46.205]             future.stdout.windows.reencode = NULL, width = 80L)
[09:30:46.205]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:30:46.205]             base::names(...future.oldOptions))
[09:30:46.205]     }
[09:30:46.205]     if (FALSE) {
[09:30:46.205]     }
[09:30:46.205]     else {
[09:30:46.205]         if (TRUE) {
[09:30:46.205]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:30:46.205]                 open = "w")
[09:30:46.205]         }
[09:30:46.205]         else {
[09:30:46.205]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:30:46.205]                 windows = "NUL", "/dev/null"), open = "w")
[09:30:46.205]         }
[09:30:46.205]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:30:46.205]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:30:46.205]             base::sink(type = "output", split = FALSE)
[09:30:46.205]             base::close(...future.stdout)
[09:30:46.205]         }, add = TRUE)
[09:30:46.205]     }
[09:30:46.205]     ...future.frame <- base::sys.nframe()
[09:30:46.205]     ...future.conditions <- base::list()
[09:30:46.205]     ...future.rng <- base::globalenv()$.Random.seed
[09:30:46.205]     if (FALSE) {
[09:30:46.205]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:30:46.205]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:30:46.205]     }
[09:30:46.205]     ...future.result <- base::tryCatch({
[09:30:46.205]         base::withCallingHandlers({
[09:30:46.205]             ...future.value <- base::withVisible(base::local({
[09:30:46.205]                 message(sprintf("Calculating tile #%d of %d ...", 
[09:30:46.205]                   ii, n), appendLF = FALSE)
[09:30:46.205]                 fit <- mandelbrot(C)
[09:30:46.205]                 delay(fit)
[09:30:46.205]                 message(" done")
[09:30:46.205]                 fit
[09:30:46.205]             }))
[09:30:46.205]             future::FutureResult(value = ...future.value$value, 
[09:30:46.205]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:46.205]                   ...future.rng), globalenv = if (FALSE) 
[09:30:46.205]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:30:46.205]                     ...future.globalenv.names))
[09:30:46.205]                 else NULL, started = ...future.startTime, version = "1.8")
[09:30:46.205]         }, condition = base::local({
[09:30:46.205]             c <- base::c
[09:30:46.205]             inherits <- base::inherits
[09:30:46.205]             invokeRestart <- base::invokeRestart
[09:30:46.205]             length <- base::length
[09:30:46.205]             list <- base::list
[09:30:46.205]             seq.int <- base::seq.int
[09:30:46.205]             signalCondition <- base::signalCondition
[09:30:46.205]             sys.calls <- base::sys.calls
[09:30:46.205]             `[[` <- base::`[[`
[09:30:46.205]             `+` <- base::`+`
[09:30:46.205]             `<<-` <- base::`<<-`
[09:30:46.205]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:30:46.205]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:30:46.205]                   3L)]
[09:30:46.205]             }
[09:30:46.205]             function(cond) {
[09:30:46.205]                 is_error <- inherits(cond, "error")
[09:30:46.205]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:30:46.205]                   NULL)
[09:30:46.205]                 if (is_error) {
[09:30:46.205]                   sessionInformation <- function() {
[09:30:46.205]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:30:46.205]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:30:46.205]                       search = base::search(), system = base::Sys.info())
[09:30:46.205]                   }
[09:30:46.205]                   ...future.conditions[[length(...future.conditions) + 
[09:30:46.205]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:30:46.205]                     cond$call), session = sessionInformation(), 
[09:30:46.205]                     timestamp = base::Sys.time(), signaled = 0L)
[09:30:46.205]                   signalCondition(cond)
[09:30:46.205]                 }
[09:30:46.205]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:30:46.205]                 "immediateCondition"))) {
[09:30:46.205]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:30:46.205]                   ...future.conditions[[length(...future.conditions) + 
[09:30:46.205]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:30:46.205]                   if (TRUE && !signal) {
[09:30:46.205]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:46.205]                     {
[09:30:46.205]                       inherits <- base::inherits
[09:30:46.205]                       invokeRestart <- base::invokeRestart
[09:30:46.205]                       is.null <- base::is.null
[09:30:46.205]                       muffled <- FALSE
[09:30:46.205]                       if (inherits(cond, "message")) {
[09:30:46.205]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:46.205]                         if (muffled) 
[09:30:46.205]                           invokeRestart("muffleMessage")
[09:30:46.205]                       }
[09:30:46.205]                       else if (inherits(cond, "warning")) {
[09:30:46.205]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:46.205]                         if (muffled) 
[09:30:46.205]                           invokeRestart("muffleWarning")
[09:30:46.205]                       }
[09:30:46.205]                       else if (inherits(cond, "condition")) {
[09:30:46.205]                         if (!is.null(pattern)) {
[09:30:46.205]                           computeRestarts <- base::computeRestarts
[09:30:46.205]                           grepl <- base::grepl
[09:30:46.205]                           restarts <- computeRestarts(cond)
[09:30:46.205]                           for (restart in restarts) {
[09:30:46.205]                             name <- restart$name
[09:30:46.205]                             if (is.null(name)) 
[09:30:46.205]                               next
[09:30:46.205]                             if (!grepl(pattern, name)) 
[09:30:46.205]                               next
[09:30:46.205]                             invokeRestart(restart)
[09:30:46.205]                             muffled <- TRUE
[09:30:46.205]                             break
[09:30:46.205]                           }
[09:30:46.205]                         }
[09:30:46.205]                       }
[09:30:46.205]                       invisible(muffled)
[09:30:46.205]                     }
[09:30:46.205]                     muffleCondition(cond, pattern = "^muffle")
[09:30:46.205]                   }
[09:30:46.205]                 }
[09:30:46.205]                 else {
[09:30:46.205]                   if (TRUE) {
[09:30:46.205]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:46.205]                     {
[09:30:46.205]                       inherits <- base::inherits
[09:30:46.205]                       invokeRestart <- base::invokeRestart
[09:30:46.205]                       is.null <- base::is.null
[09:30:46.205]                       muffled <- FALSE
[09:30:46.205]                       if (inherits(cond, "message")) {
[09:30:46.205]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:46.205]                         if (muffled) 
[09:30:46.205]                           invokeRestart("muffleMessage")
[09:30:46.205]                       }
[09:30:46.205]                       else if (inherits(cond, "warning")) {
[09:30:46.205]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:46.205]                         if (muffled) 
[09:30:46.205]                           invokeRestart("muffleWarning")
[09:30:46.205]                       }
[09:30:46.205]                       else if (inherits(cond, "condition")) {
[09:30:46.205]                         if (!is.null(pattern)) {
[09:30:46.205]                           computeRestarts <- base::computeRestarts
[09:30:46.205]                           grepl <- base::grepl
[09:30:46.205]                           restarts <- computeRestarts(cond)
[09:30:46.205]                           for (restart in restarts) {
[09:30:46.205]                             name <- restart$name
[09:30:46.205]                             if (is.null(name)) 
[09:30:46.205]                               next
[09:30:46.205]                             if (!grepl(pattern, name)) 
[09:30:46.205]                               next
[09:30:46.205]                             invokeRestart(restart)
[09:30:46.205]                             muffled <- TRUE
[09:30:46.205]                             break
[09:30:46.205]                           }
[09:30:46.205]                         }
[09:30:46.205]                       }
[09:30:46.205]                       invisible(muffled)
[09:30:46.205]                     }
[09:30:46.205]                     muffleCondition(cond, pattern = "^muffle")
[09:30:46.205]                   }
[09:30:46.205]                 }
[09:30:46.205]             }
[09:30:46.205]         }))
[09:30:46.205]     }, error = function(ex) {
[09:30:46.205]         base::structure(base::list(value = NULL, visible = NULL, 
[09:30:46.205]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:46.205]                 ...future.rng), started = ...future.startTime, 
[09:30:46.205]             finished = Sys.time(), session_uuid = NA_character_, 
[09:30:46.205]             version = "1.8"), class = "FutureResult")
[09:30:46.205]     }, finally = {
[09:30:46.205]         if (!identical(...future.workdir, getwd())) 
[09:30:46.205]             setwd(...future.workdir)
[09:30:46.205]         {
[09:30:46.205]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:30:46.205]                 ...future.oldOptions$nwarnings <- NULL
[09:30:46.205]             }
[09:30:46.205]             base::options(...future.oldOptions)
[09:30:46.205]             if (.Platform$OS.type == "windows") {
[09:30:46.205]                 old_names <- names(...future.oldEnvVars)
[09:30:46.205]                 envs <- base::Sys.getenv()
[09:30:46.205]                 names <- names(envs)
[09:30:46.205]                 common <- intersect(names, old_names)
[09:30:46.205]                 added <- setdiff(names, old_names)
[09:30:46.205]                 removed <- setdiff(old_names, names)
[09:30:46.205]                 changed <- common[...future.oldEnvVars[common] != 
[09:30:46.205]                   envs[common]]
[09:30:46.205]                 NAMES <- toupper(changed)
[09:30:46.205]                 args <- list()
[09:30:46.205]                 for (kk in seq_along(NAMES)) {
[09:30:46.205]                   name <- changed[[kk]]
[09:30:46.205]                   NAME <- NAMES[[kk]]
[09:30:46.205]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:46.205]                     next
[09:30:46.205]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:46.205]                 }
[09:30:46.205]                 NAMES <- toupper(added)
[09:30:46.205]                 for (kk in seq_along(NAMES)) {
[09:30:46.205]                   name <- added[[kk]]
[09:30:46.205]                   NAME <- NAMES[[kk]]
[09:30:46.205]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:46.205]                     next
[09:30:46.205]                   args[[name]] <- ""
[09:30:46.205]                 }
[09:30:46.205]                 NAMES <- toupper(removed)
[09:30:46.205]                 for (kk in seq_along(NAMES)) {
[09:30:46.205]                   name <- removed[[kk]]
[09:30:46.205]                   NAME <- NAMES[[kk]]
[09:30:46.205]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:46.205]                     next
[09:30:46.205]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:46.205]                 }
[09:30:46.205]                 if (length(args) > 0) 
[09:30:46.205]                   base::do.call(base::Sys.setenv, args = args)
[09:30:46.205]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:30:46.205]             }
[09:30:46.205]             else {
[09:30:46.205]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:30:46.205]             }
[09:30:46.205]             {
[09:30:46.205]                 if (base::length(...future.futureOptionsAdded) > 
[09:30:46.205]                   0L) {
[09:30:46.205]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:30:46.205]                   base::names(opts) <- ...future.futureOptionsAdded
[09:30:46.205]                   base::options(opts)
[09:30:46.205]                 }
[09:30:46.205]                 {
[09:30:46.205]                   {
[09:30:46.205]                     NULL
[09:30:46.205]                     RNGkind("Mersenne-Twister")
[09:30:46.205]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:30:46.205]                       inherits = FALSE)
[09:30:46.205]                   }
[09:30:46.205]                   options(future.plan = NULL)
[09:30:46.205]                   if (is.na(NA_character_)) 
[09:30:46.205]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:30:46.205]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:30:46.205]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:30:46.205]                     .init = FALSE)
[09:30:46.205]                 }
[09:30:46.205]             }
[09:30:46.205]         }
[09:30:46.205]     })
[09:30:46.205]     if (TRUE) {
[09:30:46.205]         base::sink(type = "output", split = FALSE)
[09:30:46.205]         if (TRUE) {
[09:30:46.205]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:30:46.205]         }
[09:30:46.205]         else {
[09:30:46.205]             ...future.result["stdout"] <- base::list(NULL)
[09:30:46.205]         }
[09:30:46.205]         base::close(...future.stdout)
[09:30:46.205]         ...future.stdout <- NULL
[09:30:46.205]     }
[09:30:46.205]     ...future.result$conditions <- ...future.conditions
[09:30:46.205]     ...future.result$finished <- base::Sys.time()
[09:30:46.205]     ...future.result
[09:30:46.205] }
[09:30:46.207] assign_globals() ...
[09:30:46.207] List of 4
[09:30:46.207]  $ ii   : int 3
[09:30:46.207]  $ n    : int 4
[09:30:46.207]  $ C    : cplx [1:25, 1:25] -2.25+0.0306i -2.25+0.0918i -2.25+0.1531i ...
[09:30:46.207]   ..- attr(*, "region")=List of 2
[09:30:46.207]   .. ..$ xrange: num [1:2] -2.25 -0.781
[09:30:46.207]   .. ..$ yrange: num [1:2] 0.0306 1.5
[09:30:46.207]   ..- attr(*, "tile")= int [1:2] 2 1
[09:30:46.207]  $ delay:function (counts)  
[09:30:46.207]   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[09:30:46.207]   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561d63b8e820> 
[09:30:46.207]  - attr(*, "where")=List of 4
[09:30:46.207]   ..$ ii   :<environment: R_EmptyEnv> 
[09:30:46.207]   ..$ n    :<environment: R_EmptyEnv> 
[09:30:46.207]   ..$ C    :<environment: R_EmptyEnv> 
[09:30:46.207]   ..$ delay:<environment: R_EmptyEnv> 
[09:30:46.207]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:30:46.207]  - attr(*, "resolved")= logi FALSE
[09:30:46.207]  - attr(*, "total_size")= num 14584
[09:30:46.207]  - attr(*, "already-done")= logi TRUE
[09:30:46.213] - copied ‘ii’ to environment
[09:30:46.213] - copied ‘n’ to environment
[09:30:46.213] - copied ‘C’ to environment
[09:30:46.213] - reassign environment for ‘delay’
[09:30:46.213] - copied ‘delay’ to environment
[09:30:46.213] assign_globals() ... done
[09:30:46.214] plan(): Setting new future strategy stack:
[09:30:46.214] List of future strategies:
[09:30:46.214] 1. sequential:
[09:30:46.214]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:46.214]    - tweaked: FALSE
[09:30:46.214]    - call: NULL
[09:30:46.214] plan(): nbrOfWorkers() = 1
[09:30:46.231] plan(): Setting new future strategy stack:
[09:30:46.231] List of future strategies:
[09:30:46.231] 1. sequential:
[09:30:46.231]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:46.231]    - tweaked: FALSE
[09:30:46.231]    - call: plan(strategy)
[09:30:46.231] plan(): nbrOfWorkers() = 1
[09:30:46.232] SequentialFuture started (and completed)
[09:30:46.232] signalConditions() ...
[09:30:46.232]  - include = ‘immediateCondition’
[09:30:46.232]  - exclude = 
[09:30:46.232]  - resignal = FALSE
[09:30:46.232]  - Number of conditions: 2
[09:30:46.232] signalConditions() ... done
[09:30:46.232] - Launch lazy future ... done
[09:30:46.232] run() for ‘SequentialFuture’ ... done
[09:30:46.232] - run() ... done
[09:30:46.232] - resolved() ...
[09:30:46.233] resolved() for ‘SequentialFuture’ ...
[09:30:46.233] - state: ‘finished’
[09:30:46.233] - run: TRUE
[09:30:46.233] - result: ‘FutureResult’
[09:30:46.233] resolved() for ‘SequentialFuture’ ... done
[09:30:46.233] - resolved: TRUE
[09:30:46.233] - resolved() ... done
[09:30:46.233] resolved() for ‘SequentialFuture’ ... done
Plotting tile #3 of 4 ...
[09:30:46.233] signalConditions() ...
[09:30:46.233]  - include = ‘immediateCondition’
[09:30:46.233]  - exclude = 
[09:30:46.234]  - resignal = FALSE
[09:30:46.234]  - Number of conditions: 2
[09:30:46.234] signalConditions() ... done
[09:30:46.234] Future state: ‘finished’
[09:30:46.234] signalConditions() ...
[09:30:46.234]  - include = ‘condition’
[09:30:46.234]  - exclude = ‘immediateCondition’
[09:30:46.234]  - resignal = TRUE
[09:30:46.234]  - Number of conditions: 2
[09:30:46.234]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #3 of 4 ...[09:30:46.235]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[09:30:46.235] signalConditions() ... done
[09:30:46.235] resolved() for ‘Future’ ...
[09:30:46.235] - state: ‘created’
[09:30:46.235] - run: TRUE
[09:30:46.236] - run() ...
[09:30:46.236] run() for ‘Future’ ...
[09:30:46.236] - state: ‘created’
[09:30:46.236] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:30:46.236] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:30:46.236] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:30:46.236]   - Field: ‘label’
[09:30:46.236]   - Field: ‘local’
[09:30:46.237]   - Field: ‘owner’
[09:30:46.237]   - Field: ‘envir’
[09:30:46.237]   - Field: ‘packages’
[09:30:46.237]   - Field: ‘gc’
[09:30:46.237]   - Field: ‘conditions’
[09:30:46.237]   - Field: ‘expr’
[09:30:46.237]   - Field: ‘uuid’
[09:30:46.237]   - Field: ‘seed’
[09:30:46.237]   - Field: ‘version’
[09:30:46.237]   - Field: ‘result’
[09:30:46.237]   - Field: ‘asynchronous’
[09:30:46.238]   - Field: ‘calls’
[09:30:46.238]   - Field: ‘globals’
[09:30:46.238]   - Field: ‘stdout’
[09:30:46.238]   - Field: ‘earlySignal’
[09:30:46.238]   - Field: ‘lazy’
[09:30:46.238]   - Field: ‘state’
[09:30:46.238] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:30:46.238] - Launch lazy future ...
[09:30:46.238] Packages needed by the future expression (n = 1): ‘future’
[09:30:46.238] Packages needed by future strategies (n = 0): <none>
[09:30:46.239] {
[09:30:46.239]     {
[09:30:46.239]         {
[09:30:46.239]             ...future.startTime <- base::Sys.time()
[09:30:46.239]             {
[09:30:46.239]                 {
[09:30:46.239]                   {
[09:30:46.239]                     {
[09:30:46.239]                       base::local({
[09:30:46.239]                         has_future <- base::requireNamespace("future", 
[09:30:46.239]                           quietly = TRUE)
[09:30:46.239]                         if (has_future) {
[09:30:46.239]                           ns <- base::getNamespace("future")
[09:30:46.239]                           version <- ns[[".package"]][["version"]]
[09:30:46.239]                           if (is.null(version)) 
[09:30:46.239]                             version <- utils::packageVersion("future")
[09:30:46.239]                         }
[09:30:46.239]                         else {
[09:30:46.239]                           version <- NULL
[09:30:46.239]                         }
[09:30:46.239]                         if (!has_future || version < "1.8.0") {
[09:30:46.239]                           info <- base::c(r_version = base::gsub("R version ", 
[09:30:46.239]                             "", base::R.version$version.string), 
[09:30:46.239]                             platform = base::sprintf("%s (%s-bit)", 
[09:30:46.239]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:30:46.239]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:30:46.239]                               "release", "version")], collapse = " "), 
[09:30:46.239]                             hostname = base::Sys.info()[["nodename"]])
[09:30:46.239]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:30:46.239]                             info)
[09:30:46.239]                           info <- base::paste(info, collapse = "; ")
[09:30:46.239]                           if (!has_future) {
[09:30:46.239]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:30:46.239]                               info)
[09:30:46.239]                           }
[09:30:46.239]                           else {
[09:30:46.239]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:30:46.239]                               info, version)
[09:30:46.239]                           }
[09:30:46.239]                           base::stop(msg)
[09:30:46.239]                         }
[09:30:46.239]                       })
[09:30:46.239]                     }
[09:30:46.239]                     base::local({
[09:30:46.239]                       for (pkg in "future") {
[09:30:46.239]                         base::loadNamespace(pkg)
[09:30:46.239]                         base::library(pkg, character.only = TRUE)
[09:30:46.239]                       }
[09:30:46.239]                     })
[09:30:46.239]                   }
[09:30:46.239]                   ...future.strategy.old <- future::plan("list")
[09:30:46.239]                   options(future.plan = NULL)
[09:30:46.239]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:30:46.239]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:30:46.239]                 }
[09:30:46.239]                 ...future.workdir <- getwd()
[09:30:46.239]             }
[09:30:46.239]             ...future.oldOptions <- base::as.list(base::.Options)
[09:30:46.239]             ...future.oldEnvVars <- base::Sys.getenv()
[09:30:46.239]         }
[09:30:46.239]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:30:46.239]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:30:46.239]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:30:46.239]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:30:46.239]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:30:46.239]             future.stdout.windows.reencode = NULL, width = 80L)
[09:30:46.239]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:30:46.239]             base::names(...future.oldOptions))
[09:30:46.239]     }
[09:30:46.239]     if (FALSE) {
[09:30:46.239]     }
[09:30:46.239]     else {
[09:30:46.239]         if (TRUE) {
[09:30:46.239]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:30:46.239]                 open = "w")
[09:30:46.239]         }
[09:30:46.239]         else {
[09:30:46.239]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:30:46.239]                 windows = "NUL", "/dev/null"), open = "w")
[09:30:46.239]         }
[09:30:46.239]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:30:46.239]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:30:46.239]             base::sink(type = "output", split = FALSE)
[09:30:46.239]             base::close(...future.stdout)
[09:30:46.239]         }, add = TRUE)
[09:30:46.239]     }
[09:30:46.239]     ...future.frame <- base::sys.nframe()
[09:30:46.239]     ...future.conditions <- base::list()
[09:30:46.239]     ...future.rng <- base::globalenv()$.Random.seed
[09:30:46.239]     if (FALSE) {
[09:30:46.239]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:30:46.239]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:30:46.239]     }
[09:30:46.239]     ...future.result <- base::tryCatch({
[09:30:46.239]         base::withCallingHandlers({
[09:30:46.239]             ...future.value <- base::withVisible(base::local({
[09:30:46.239]                 message(sprintf("Calculating tile #%d of %d ...", 
[09:30:46.239]                   ii, n), appendLF = FALSE)
[09:30:46.239]                 fit <- mandelbrot(C)
[09:30:46.239]                 delay(fit)
[09:30:46.239]                 message(" done")
[09:30:46.239]                 fit
[09:30:46.239]             }))
[09:30:46.239]             future::FutureResult(value = ...future.value$value, 
[09:30:46.239]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:46.239]                   ...future.rng), globalenv = if (FALSE) 
[09:30:46.239]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:30:46.239]                     ...future.globalenv.names))
[09:30:46.239]                 else NULL, started = ...future.startTime, version = "1.8")
[09:30:46.239]         }, condition = base::local({
[09:30:46.239]             c <- base::c
[09:30:46.239]             inherits <- base::inherits
[09:30:46.239]             invokeRestart <- base::invokeRestart
[09:30:46.239]             length <- base::length
[09:30:46.239]             list <- base::list
[09:30:46.239]             seq.int <- base::seq.int
[09:30:46.239]             signalCondition <- base::signalCondition
[09:30:46.239]             sys.calls <- base::sys.calls
[09:30:46.239]             `[[` <- base::`[[`
[09:30:46.239]             `+` <- base::`+`
[09:30:46.239]             `<<-` <- base::`<<-`
[09:30:46.239]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:30:46.239]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:30:46.239]                   3L)]
[09:30:46.239]             }
[09:30:46.239]             function(cond) {
[09:30:46.239]                 is_error <- inherits(cond, "error")
[09:30:46.239]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:30:46.239]                   NULL)
[09:30:46.239]                 if (is_error) {
[09:30:46.239]                   sessionInformation <- function() {
[09:30:46.239]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:30:46.239]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:30:46.239]                       search = base::search(), system = base::Sys.info())
[09:30:46.239]                   }
[09:30:46.239]                   ...future.conditions[[length(...future.conditions) + 
[09:30:46.239]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:30:46.239]                     cond$call), session = sessionInformation(), 
[09:30:46.239]                     timestamp = base::Sys.time(), signaled = 0L)
[09:30:46.239]                   signalCondition(cond)
[09:30:46.239]                 }
[09:30:46.239]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:30:46.239]                 "immediateCondition"))) {
[09:30:46.239]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:30:46.239]                   ...future.conditions[[length(...future.conditions) + 
[09:30:46.239]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:30:46.239]                   if (TRUE && !signal) {
[09:30:46.239]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:46.239]                     {
[09:30:46.239]                       inherits <- base::inherits
[09:30:46.239]                       invokeRestart <- base::invokeRestart
[09:30:46.239]                       is.null <- base::is.null
[09:30:46.239]                       muffled <- FALSE
[09:30:46.239]                       if (inherits(cond, "message")) {
[09:30:46.239]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:46.239]                         if (muffled) 
[09:30:46.239]                           invokeRestart("muffleMessage")
[09:30:46.239]                       }
[09:30:46.239]                       else if (inherits(cond, "warning")) {
[09:30:46.239]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:46.239]                         if (muffled) 
[09:30:46.239]                           invokeRestart("muffleWarning")
[09:30:46.239]                       }
[09:30:46.239]                       else if (inherits(cond, "condition")) {
[09:30:46.239]                         if (!is.null(pattern)) {
[09:30:46.239]                           computeRestarts <- base::computeRestarts
[09:30:46.239]                           grepl <- base::grepl
[09:30:46.239]                           restarts <- computeRestarts(cond)
[09:30:46.239]                           for (restart in restarts) {
[09:30:46.239]                             name <- restart$name
[09:30:46.239]                             if (is.null(name)) 
[09:30:46.239]                               next
[09:30:46.239]                             if (!grepl(pattern, name)) 
[09:30:46.239]                               next
[09:30:46.239]                             invokeRestart(restart)
[09:30:46.239]                             muffled <- TRUE
[09:30:46.239]                             break
[09:30:46.239]                           }
[09:30:46.239]                         }
[09:30:46.239]                       }
[09:30:46.239]                       invisible(muffled)
[09:30:46.239]                     }
[09:30:46.239]                     muffleCondition(cond, pattern = "^muffle")
[09:30:46.239]                   }
[09:30:46.239]                 }
[09:30:46.239]                 else {
[09:30:46.239]                   if (TRUE) {
[09:30:46.239]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:46.239]                     {
[09:30:46.239]                       inherits <- base::inherits
[09:30:46.239]                       invokeRestart <- base::invokeRestart
[09:30:46.239]                       is.null <- base::is.null
[09:30:46.239]                       muffled <- FALSE
[09:30:46.239]                       if (inherits(cond, "message")) {
[09:30:46.239]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:46.239]                         if (muffled) 
[09:30:46.239]                           invokeRestart("muffleMessage")
[09:30:46.239]                       }
[09:30:46.239]                       else if (inherits(cond, "warning")) {
[09:30:46.239]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:46.239]                         if (muffled) 
[09:30:46.239]                           invokeRestart("muffleWarning")
[09:30:46.239]                       }
[09:30:46.239]                       else if (inherits(cond, "condition")) {
[09:30:46.239]                         if (!is.null(pattern)) {
[09:30:46.239]                           computeRestarts <- base::computeRestarts
[09:30:46.239]                           grepl <- base::grepl
[09:30:46.239]                           restarts <- computeRestarts(cond)
[09:30:46.239]                           for (restart in restarts) {
[09:30:46.239]                             name <- restart$name
[09:30:46.239]                             if (is.null(name)) 
[09:30:46.239]                               next
[09:30:46.239]                             if (!grepl(pattern, name)) 
[09:30:46.239]                               next
[09:30:46.239]                             invokeRestart(restart)
[09:30:46.239]                             muffled <- TRUE
[09:30:46.239]                             break
[09:30:46.239]                           }
[09:30:46.239]                         }
[09:30:46.239]                       }
[09:30:46.239]                       invisible(muffled)
[09:30:46.239]                     }
[09:30:46.239]                     muffleCondition(cond, pattern = "^muffle")
[09:30:46.239]                   }
[09:30:46.239]                 }
[09:30:46.239]             }
[09:30:46.239]         }))
[09:30:46.239]     }, error = function(ex) {
[09:30:46.239]         base::structure(base::list(value = NULL, visible = NULL, 
[09:30:46.239]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:46.239]                 ...future.rng), started = ...future.startTime, 
[09:30:46.239]             finished = Sys.time(), session_uuid = NA_character_, 
[09:30:46.239]             version = "1.8"), class = "FutureResult")
[09:30:46.239]     }, finally = {
[09:30:46.239]         if (!identical(...future.workdir, getwd())) 
[09:30:46.239]             setwd(...future.workdir)
[09:30:46.239]         {
[09:30:46.239]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:30:46.239]                 ...future.oldOptions$nwarnings <- NULL
[09:30:46.239]             }
[09:30:46.239]             base::options(...future.oldOptions)
[09:30:46.239]             if (.Platform$OS.type == "windows") {
[09:30:46.239]                 old_names <- names(...future.oldEnvVars)
[09:30:46.239]                 envs <- base::Sys.getenv()
[09:30:46.239]                 names <- names(envs)
[09:30:46.239]                 common <- intersect(names, old_names)
[09:30:46.239]                 added <- setdiff(names, old_names)
[09:30:46.239]                 removed <- setdiff(old_names, names)
[09:30:46.239]                 changed <- common[...future.oldEnvVars[common] != 
[09:30:46.239]                   envs[common]]
[09:30:46.239]                 NAMES <- toupper(changed)
[09:30:46.239]                 args <- list()
[09:30:46.239]                 for (kk in seq_along(NAMES)) {
[09:30:46.239]                   name <- changed[[kk]]
[09:30:46.239]                   NAME <- NAMES[[kk]]
[09:30:46.239]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:46.239]                     next
[09:30:46.239]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:46.239]                 }
[09:30:46.239]                 NAMES <- toupper(added)
[09:30:46.239]                 for (kk in seq_along(NAMES)) {
[09:30:46.239]                   name <- added[[kk]]
[09:30:46.239]                   NAME <- NAMES[[kk]]
[09:30:46.239]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:46.239]                     next
[09:30:46.239]                   args[[name]] <- ""
[09:30:46.239]                 }
[09:30:46.239]                 NAMES <- toupper(removed)
[09:30:46.239]                 for (kk in seq_along(NAMES)) {
[09:30:46.239]                   name <- removed[[kk]]
[09:30:46.239]                   NAME <- NAMES[[kk]]
[09:30:46.239]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:46.239]                     next
[09:30:46.239]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:46.239]                 }
[09:30:46.239]                 if (length(args) > 0) 
[09:30:46.239]                   base::do.call(base::Sys.setenv, args = args)
[09:30:46.239]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:30:46.239]             }
[09:30:46.239]             else {
[09:30:46.239]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:30:46.239]             }
[09:30:46.239]             {
[09:30:46.239]                 if (base::length(...future.futureOptionsAdded) > 
[09:30:46.239]                   0L) {
[09:30:46.239]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:30:46.239]                   base::names(opts) <- ...future.futureOptionsAdded
[09:30:46.239]                   base::options(opts)
[09:30:46.239]                 }
[09:30:46.239]                 {
[09:30:46.239]                   {
[09:30:46.239]                     NULL
[09:30:46.239]                     RNGkind("Mersenne-Twister")
[09:30:46.239]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:30:46.239]                       inherits = FALSE)
[09:30:46.239]                   }
[09:30:46.239]                   options(future.plan = NULL)
[09:30:46.239]                   if (is.na(NA_character_)) 
[09:30:46.239]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:30:46.239]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:30:46.239]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:30:46.239]                     .init = FALSE)
[09:30:46.239]                 }
[09:30:46.239]             }
[09:30:46.239]         }
[09:30:46.239]     })
[09:30:46.239]     if (TRUE) {
[09:30:46.239]         base::sink(type = "output", split = FALSE)
[09:30:46.239]         if (TRUE) {
[09:30:46.239]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:30:46.239]         }
[09:30:46.239]         else {
[09:30:46.239]             ...future.result["stdout"] <- base::list(NULL)
[09:30:46.239]         }
[09:30:46.239]         base::close(...future.stdout)
[09:30:46.239]         ...future.stdout <- NULL
[09:30:46.239]     }
[09:30:46.239]     ...future.result$conditions <- ...future.conditions
[09:30:46.239]     ...future.result$finished <- base::Sys.time()
[09:30:46.239]     ...future.result
[09:30:46.239] }
[09:30:46.241] assign_globals() ...
[09:30:46.241] List of 4
[09:30:46.241]  $ ii   : int 4
[09:30:46.241]  $ n    : int 4
[09:30:46.241]  $ C    : cplx [1:25, 1:25] -0.719+0.0306i -0.719+0.0918i -0.719+0.1531i ...
[09:30:46.241]   ..- attr(*, "region")=List of 2
[09:30:46.241]   .. ..$ xrange: num [1:2] -0.719 0.75
[09:30:46.241]   .. ..$ yrange: num [1:2] 0.0306 1.5
[09:30:46.241]   ..- attr(*, "tile")= int [1:2] 2 2
[09:30:46.241]  $ delay:function (counts)  
[09:30:46.241]   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[09:30:46.241]   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561d63b8e820> 
[09:30:46.241]  - attr(*, "where")=List of 4
[09:30:46.241]   ..$ ii   :<environment: R_EmptyEnv> 
[09:30:46.241]   ..$ n    :<environment: R_EmptyEnv> 
[09:30:46.241]   ..$ C    :<environment: R_EmptyEnv> 
[09:30:46.241]   ..$ delay:<environment: R_EmptyEnv> 
[09:30:46.241]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:30:46.241]  - attr(*, "resolved")= logi FALSE
[09:30:46.241]  - attr(*, "total_size")= num 14584
[09:30:46.241]  - attr(*, "already-done")= logi TRUE
[09:30:46.247] - copied ‘ii’ to environment
[09:30:46.247] - copied ‘n’ to environment
[09:30:46.247] - copied ‘C’ to environment
[09:30:46.247] - reassign environment for ‘delay’
[09:30:46.247] - copied ‘delay’ to environment
[09:30:46.247] assign_globals() ... done
[09:30:46.247] plan(): Setting new future strategy stack:
[09:30:46.248] List of future strategies:
[09:30:46.248] 1. sequential:
[09:30:46.248]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:46.248]    - tweaked: FALSE
[09:30:46.248]    - call: NULL
[09:30:46.248] plan(): nbrOfWorkers() = 1
[09:30:46.263] plan(): Setting new future strategy stack:
[09:30:46.263] List of future strategies:
[09:30:46.263] 1. sequential:
[09:30:46.263]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:46.263]    - tweaked: FALSE
[09:30:46.263]    - call: plan(strategy)
[09:30:46.263] plan(): nbrOfWorkers() = 1
[09:30:46.263] SequentialFuture started (and completed)
[09:30:46.264] signalConditions() ...
[09:30:46.264]  - include = ‘immediateCondition’
[09:30:46.264]  - exclude = 
[09:30:46.264]  - resignal = FALSE
[09:30:46.264]  - Number of conditions: 2
[09:30:46.264] signalConditions() ... done
[09:30:46.264] - Launch lazy future ... done
[09:30:46.264] run() for ‘SequentialFuture’ ... done
[09:30:46.264] - run() ... done
[09:30:46.264] - resolved() ...
[09:30:46.264] resolved() for ‘SequentialFuture’ ...
[09:30:46.265] - state: ‘finished’
[09:30:46.265] - run: TRUE
[09:30:46.265] - result: ‘FutureResult’
[09:30:46.265] resolved() for ‘SequentialFuture’ ... done
[09:30:46.265] - resolved: TRUE
[09:30:46.265] - resolved() ... done
[09:30:46.265] resolved() for ‘SequentialFuture’ ... done
Plotting tile #4 of 4 ...
[09:30:46.265] signalConditions() ...
[09:30:46.265]  - include = ‘immediateCondition’
[09:30:46.265]  - exclude = 
[09:30:46.265]  - resignal = FALSE
[09:30:46.266]  - Number of conditions: 2
[09:30:46.266] signalConditions() ... done
[09:30:46.266] Future state: ‘finished’
[09:30:46.266] signalConditions() ...
[09:30:46.266]  - include = ‘condition’
[09:30:46.266]  - exclude = ‘immediateCondition’
[09:30:46.266]  - resignal = TRUE
[09:30:46.266]  - Number of conditions: 2
[09:30:46.266]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #4 of 4 ...[09:30:46.266]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[09:30:46.267] signalConditions() ... done

> close.screen()
[1] 1 2 3 4

> message("SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).\n")
SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).

- plan('sequential') ... DONE
Testing with 1 cores ... DONE
Testing with 2 cores ...
- plan('multicore') ...
[09:30:46.273] plan(): Setting new future strategy stack:
[09:30:46.273] List of future strategies:
[09:30:46.273] 1. multicore:
[09:30:46.273]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:30:46.273]    - tweaked: FALSE
[09:30:46.273]    - call: plan(strategy)
[09:30:46.277] plan(): nbrOfWorkers() = 2


	demo(mandelbrot)
	---- ~~~~~~~~~~

> library("future")

> library("graphics")

> plot_what_is_done <- function(counts) {
+   for (kk in seq_along(counts)) {
+     f <- counts[[kk]]
+ 
+     ## Already plotted?
+     if (!inherits(f, "Future")) next
+ 
+     ## Not resolved?
+     if (!resolved(f)) next
+ 
+     message(sprintf("Plotting tile #%d of %d ...", kk, n))
+     counts[[kk]] <- value(f)
+     screen(kk)
+     plot(counts[[kk]])
+   }
+ 
+   counts
+ }

> ## Options
> region <- getOption("future.demo.mandelbrot.region", 1L)

> if (!is.list(region)) {
+   if (region == 1L) {
+     region <- list(xmid = -0.75, ymid = 0.0, side = 3.0)
+   } else if (region == 2L) {
+     region <- list(xmid = 0.283, ymid = -0.0095, side = 0.00026)
+   } else if (region == 3L) {
+     region <- list(xmid = 0.282989, ymid = -0.01, side = 3e-8)
+   }
+ }

> nrow <- getOption("future.demo.mandelbrot.nrow", 3L)

> resolution <- getOption("future.demo.mandelbrot.resolution", 400L)

> delay <- getOption("future.demo.mandelbrot.delay", interactive())

> if (isTRUE(delay)) {
+   delay <- function(counts) Sys.sleep(1.0)
+ } else if (!is.function(delay)) {
+   delay <- function(counts) {}
+ }

> ## Generate Mandelbrot tiles to be computed
> Cs <- mandelbrot_tiles(xmid = region$xmid, ymid = region$ymid,
+                        side = region$side, nrow = nrow,
+                        resolution = resolution)

> if (interactive()) {
+   dev.new()
+   plot.new()
+   split.screen(dim(Cs))
+   for (ii in seq_along(Cs)) {
+     screen(ii)
+     par(mar = c(0, 0, 0, 0))
+     text(x = 1 / 2, y = 1 / 2, sprintf("Future #%d\nunresolved", ii), cex = 2)
+   }
+ } else {
+   split.screen(dim(Cs))
+ }
[1] 5 6 7 8

> ## Create all Mandelbrot tiles via lazy futures
> n <- length(Cs)

> message(sprintf("Creating %d Mandelbrot tiles:", n), appendLF = FALSE)
Creating 4 Mandelbrot tiles:
> counts <- lapply(seq_along(Cs), FUN=function(ii) {
+   message(" ", ii, appendLF = FALSE)
+   C <- Cs[[ii]]
+   future({
+     message(sprintf("Calculating tile #%d of %d ...", ii, n), appendLF = FALSE)
+     fit <- mandelbrot(C)
+ 
+     ## Emulate slowness
+     delay(fit)
+ 
+     message(" done")
+     fit
+   }, lazy = TRUE)
+ })
 1[09:30:46.280] getGlobalsAndPackages() ...
[09:30:46.280] Searching for globals...
[09:30:46.286] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[09:30:46.286] Searching for globals ... DONE
[09:30:46.286] Resolving globals: FALSE
[09:30:46.286] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[09:30:46.287] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[09:30:46.287] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[09:30:46.287] - packages: [1] ‘future’
[09:30:46.287] getGlobalsAndPackages() ... DONE
 2[09:30:46.291] getGlobalsAndPackages() ...
[09:30:46.291] Searching for globals...
[09:30:46.294] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[09:30:46.294] Searching for globals ... DONE
[09:30:46.294] Resolving globals: FALSE
[09:30:46.295] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[09:30:46.295] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[09:30:46.295] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[09:30:46.296] - packages: [1] ‘future’
[09:30:46.296] getGlobalsAndPackages() ... DONE
 3[09:30:46.296] getGlobalsAndPackages() ...
[09:30:46.296] Searching for globals...
[09:30:46.299] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[09:30:46.299] Searching for globals ... DONE
[09:30:46.299] Resolving globals: FALSE
[09:30:46.300] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[09:30:46.300] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[09:30:46.301] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[09:30:46.301] - packages: [1] ‘future’
[09:30:46.301] getGlobalsAndPackages() ... DONE
 4[09:30:46.301] getGlobalsAndPackages() ...
[09:30:46.301] Searching for globals...
[09:30:46.304] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[09:30:46.304] Searching for globals ... DONE
[09:30:46.305] Resolving globals: FALSE
[09:30:46.305] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[09:30:46.305] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[09:30:46.306] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[09:30:46.306] - packages: [1] ‘future’
[09:30:46.306] getGlobalsAndPackages() ... DONE

> message(".")
.

> ## Calculate and plot tiles
> repeat {
+   counts <- plot_what_is_done(counts)
+   if (!any(sapply(counts, FUN = inherits, "Future"))) break
+ }
[09:30:46.314] resolved() for ‘Future’ ...
[09:30:46.314] - state: ‘created’
[09:30:46.315] - run: TRUE
[09:30:46.315] - run() ...
[09:30:46.315] run() for ‘Future’ ...
[09:30:46.315] - state: ‘created’
[09:30:46.315] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[09:30:46.319] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:30:46.319] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[09:30:46.319]   - Field: ‘label’
[09:30:46.319]   - Field: ‘local’
[09:30:46.319]   - Field: ‘owner’
[09:30:46.319]   - Field: ‘envir’
[09:30:46.319]   - Field: ‘workers’
[09:30:46.319]   - Field: ‘packages’
[09:30:46.319]   - Field: ‘gc’
[09:30:46.320]   - Field: ‘job’
[09:30:46.320]   - Field: ‘conditions’
[09:30:46.320]   - Field: ‘expr’
[09:30:46.320]   - Field: ‘uuid’
[09:30:46.320]   - Field: ‘seed’
[09:30:46.320]   - Field: ‘version’
[09:30:46.320]   - Field: ‘result’
[09:30:46.320]   - Field: ‘asynchronous’
[09:30:46.320]   - Field: ‘calls’
[09:30:46.320]   - Field: ‘globals’
[09:30:46.320]   - Field: ‘stdout’
[09:30:46.321]   - Field: ‘earlySignal’
[09:30:46.321]   - Field: ‘lazy’
[09:30:46.321]   - Field: ‘state’
[09:30:46.321] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[09:30:46.321] - Launch lazy future ...
[09:30:46.322] Packages needed by the future expression (n = 1): ‘future’
[09:30:46.322] Packages needed by future strategies (n = 0): <none>
[09:30:46.322] {
[09:30:46.322]     {
[09:30:46.322]         {
[09:30:46.322]             ...future.startTime <- base::Sys.time()
[09:30:46.322]             {
[09:30:46.322]                 {
[09:30:46.322]                   {
[09:30:46.322]                     {
[09:30:46.322]                       {
[09:30:46.322]                         base::local({
[09:30:46.322]                           has_future <- base::requireNamespace("future", 
[09:30:46.322]                             quietly = TRUE)
[09:30:46.322]                           if (has_future) {
[09:30:46.322]                             ns <- base::getNamespace("future")
[09:30:46.322]                             version <- ns[[".package"]][["version"]]
[09:30:46.322]                             if (is.null(version)) 
[09:30:46.322]                               version <- utils::packageVersion("future")
[09:30:46.322]                           }
[09:30:46.322]                           else {
[09:30:46.322]                             version <- NULL
[09:30:46.322]                           }
[09:30:46.322]                           if (!has_future || version < "1.8.0") {
[09:30:46.322]                             info <- base::c(r_version = base::gsub("R version ", 
[09:30:46.322]                               "", base::R.version$version.string), 
[09:30:46.322]                               platform = base::sprintf("%s (%s-bit)", 
[09:30:46.322]                                 base::R.version$platform, 8 * 
[09:30:46.322]                                   base::.Machine$sizeof.pointer), 
[09:30:46.322]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[09:30:46.322]                                 "release", "version")], collapse = " "), 
[09:30:46.322]                               hostname = base::Sys.info()[["nodename"]])
[09:30:46.322]                             info <- base::sprintf("%s: %s", base::names(info), 
[09:30:46.322]                               info)
[09:30:46.322]                             info <- base::paste(info, collapse = "; ")
[09:30:46.322]                             if (!has_future) {
[09:30:46.322]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:30:46.322]                                 info)
[09:30:46.322]                             }
[09:30:46.322]                             else {
[09:30:46.322]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:30:46.322]                                 info, version)
[09:30:46.322]                             }
[09:30:46.322]                             base::stop(msg)
[09:30:46.322]                           }
[09:30:46.322]                         })
[09:30:46.322]                       }
[09:30:46.322]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[09:30:46.322]                       base::options(mc.cores = 1L)
[09:30:46.322]                     }
[09:30:46.322]                     base::local({
[09:30:46.322]                       for (pkg in "future") {
[09:30:46.322]                         base::loadNamespace(pkg)
[09:30:46.322]                         base::library(pkg, character.only = TRUE)
[09:30:46.322]                       }
[09:30:46.322]                     })
[09:30:46.322]                   }
[09:30:46.322]                   ...future.strategy.old <- future::plan("list")
[09:30:46.322]                   options(future.plan = NULL)
[09:30:46.322]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:30:46.322]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:30:46.322]                 }
[09:30:46.322]                 ...future.workdir <- getwd()
[09:30:46.322]             }
[09:30:46.322]             ...future.oldOptions <- base::as.list(base::.Options)
[09:30:46.322]             ...future.oldEnvVars <- base::Sys.getenv()
[09:30:46.322]         }
[09:30:46.322]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:30:46.322]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:30:46.322]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:30:46.322]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:30:46.322]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:30:46.322]             future.stdout.windows.reencode = NULL, width = 80L)
[09:30:46.322]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:30:46.322]             base::names(...future.oldOptions))
[09:30:46.322]     }
[09:30:46.322]     if (FALSE) {
[09:30:46.322]     }
[09:30:46.322]     else {
[09:30:46.322]         if (TRUE) {
[09:30:46.322]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:30:46.322]                 open = "w")
[09:30:46.322]         }
[09:30:46.322]         else {
[09:30:46.322]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:30:46.322]                 windows = "NUL", "/dev/null"), open = "w")
[09:30:46.322]         }
[09:30:46.322]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:30:46.322]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:30:46.322]             base::sink(type = "output", split = FALSE)
[09:30:46.322]             base::close(...future.stdout)
[09:30:46.322]         }, add = TRUE)
[09:30:46.322]     }
[09:30:46.322]     ...future.frame <- base::sys.nframe()
[09:30:46.322]     ...future.conditions <- base::list()
[09:30:46.322]     ...future.rng <- base::globalenv()$.Random.seed
[09:30:46.322]     if (FALSE) {
[09:30:46.322]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:30:46.322]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:30:46.322]     }
[09:30:46.322]     ...future.result <- base::tryCatch({
[09:30:46.322]         base::withCallingHandlers({
[09:30:46.322]             ...future.value <- base::withVisible(base::local({
[09:30:46.322]                 withCallingHandlers({
[09:30:46.322]                   {
[09:30:46.322]                     message(sprintf("Calculating tile #%d of %d ...", 
[09:30:46.322]                       ii, n), appendLF = FALSE)
[09:30:46.322]                     fit <- mandelbrot(C)
[09:30:46.322]                     delay(fit)
[09:30:46.322]                     message(" done")
[09:30:46.322]                     fit
[09:30:46.322]                   }
[09:30:46.322]                 }, immediateCondition = function(cond) {
[09:30:46.322]                   save_rds <- function (object, pathname, ...) 
[09:30:46.322]                   {
[09:30:46.322]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:30:46.322]                     if (file_test("-f", pathname_tmp)) {
[09:30:46.322]                       fi_tmp <- file.info(pathname_tmp)
[09:30:46.322]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:30:46.322]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:30:46.322]                         fi_tmp[["mtime"]])
[09:30:46.322]                     }
[09:30:46.322]                     tryCatch({
[09:30:46.322]                       saveRDS(object, file = pathname_tmp, ...)
[09:30:46.322]                     }, error = function(ex) {
[09:30:46.322]                       msg <- conditionMessage(ex)
[09:30:46.322]                       fi_tmp <- file.info(pathname_tmp)
[09:30:46.322]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:30:46.322]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:30:46.322]                         fi_tmp[["mtime"]], msg)
[09:30:46.322]                       ex$message <- msg
[09:30:46.322]                       stop(ex)
[09:30:46.322]                     })
[09:30:46.322]                     stopifnot(file_test("-f", pathname_tmp))
[09:30:46.322]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:30:46.322]                     if (!res || file_test("-f", pathname_tmp)) {
[09:30:46.322]                       fi_tmp <- file.info(pathname_tmp)
[09:30:46.322]                       fi <- file.info(pathname)
[09:30:46.322]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:30:46.322]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:30:46.322]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:30:46.322]                         fi[["size"]], fi[["mtime"]])
[09:30:46.322]                       stop(msg)
[09:30:46.322]                     }
[09:30:46.322]                     invisible(pathname)
[09:30:46.322]                   }
[09:30:46.322]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:30:46.322]                     rootPath = tempdir()) 
[09:30:46.322]                   {
[09:30:46.322]                     obj <- list(time = Sys.time(), condition = cond)
[09:30:46.322]                     file <- tempfile(pattern = class(cond)[1], 
[09:30:46.322]                       tmpdir = path, fileext = ".rds")
[09:30:46.322]                     save_rds(obj, file)
[09:30:46.322]                   }
[09:30:46.322]                   saveImmediateCondition(cond, path = "/tmp/RtmpARnuts/.future/immediateConditions")
[09:30:46.322]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:46.322]                   {
[09:30:46.322]                     inherits <- base::inherits
[09:30:46.322]                     invokeRestart <- base::invokeRestart
[09:30:46.322]                     is.null <- base::is.null
[09:30:46.322]                     muffled <- FALSE
[09:30:46.322]                     if (inherits(cond, "message")) {
[09:30:46.322]                       muffled <- grepl(pattern, "muffleMessage")
[09:30:46.322]                       if (muffled) 
[09:30:46.322]                         invokeRestart("muffleMessage")
[09:30:46.322]                     }
[09:30:46.322]                     else if (inherits(cond, "warning")) {
[09:30:46.322]                       muffled <- grepl(pattern, "muffleWarning")
[09:30:46.322]                       if (muffled) 
[09:30:46.322]                         invokeRestart("muffleWarning")
[09:30:46.322]                     }
[09:30:46.322]                     else if (inherits(cond, "condition")) {
[09:30:46.322]                       if (!is.null(pattern)) {
[09:30:46.322]                         computeRestarts <- base::computeRestarts
[09:30:46.322]                         grepl <- base::grepl
[09:30:46.322]                         restarts <- computeRestarts(cond)
[09:30:46.322]                         for (restart in restarts) {
[09:30:46.322]                           name <- restart$name
[09:30:46.322]                           if (is.null(name)) 
[09:30:46.322]                             next
[09:30:46.322]                           if (!grepl(pattern, name)) 
[09:30:46.322]                             next
[09:30:46.322]                           invokeRestart(restart)
[09:30:46.322]                           muffled <- TRUE
[09:30:46.322]                           break
[09:30:46.322]                         }
[09:30:46.322]                       }
[09:30:46.322]                     }
[09:30:46.322]                     invisible(muffled)
[09:30:46.322]                   }
[09:30:46.322]                   muffleCondition(cond)
[09:30:46.322]                 })
[09:30:46.322]             }))
[09:30:46.322]             future::FutureResult(value = ...future.value$value, 
[09:30:46.322]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:46.322]                   ...future.rng), globalenv = if (FALSE) 
[09:30:46.322]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:30:46.322]                     ...future.globalenv.names))
[09:30:46.322]                 else NULL, started = ...future.startTime, version = "1.8")
[09:30:46.322]         }, condition = base::local({
[09:30:46.322]             c <- base::c
[09:30:46.322]             inherits <- base::inherits
[09:30:46.322]             invokeRestart <- base::invokeRestart
[09:30:46.322]             length <- base::length
[09:30:46.322]             list <- base::list
[09:30:46.322]             seq.int <- base::seq.int
[09:30:46.322]             signalCondition <- base::signalCondition
[09:30:46.322]             sys.calls <- base::sys.calls
[09:30:46.322]             `[[` <- base::`[[`
[09:30:46.322]             `+` <- base::`+`
[09:30:46.322]             `<<-` <- base::`<<-`
[09:30:46.322]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:30:46.322]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:30:46.322]                   3L)]
[09:30:46.322]             }
[09:30:46.322]             function(cond) {
[09:30:46.322]                 is_error <- inherits(cond, "error")
[09:30:46.322]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:30:46.322]                   NULL)
[09:30:46.322]                 if (is_error) {
[09:30:46.322]                   sessionInformation <- function() {
[09:30:46.322]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:30:46.322]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:30:46.322]                       search = base::search(), system = base::Sys.info())
[09:30:46.322]                   }
[09:30:46.322]                   ...future.conditions[[length(...future.conditions) + 
[09:30:46.322]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:30:46.322]                     cond$call), session = sessionInformation(), 
[09:30:46.322]                     timestamp = base::Sys.time(), signaled = 0L)
[09:30:46.322]                   signalCondition(cond)
[09:30:46.322]                 }
[09:30:46.322]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:30:46.322]                 "immediateCondition"))) {
[09:30:46.322]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:30:46.322]                   ...future.conditions[[length(...future.conditions) + 
[09:30:46.322]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:30:46.322]                   if (TRUE && !signal) {
[09:30:46.322]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:46.322]                     {
[09:30:46.322]                       inherits <- base::inherits
[09:30:46.322]                       invokeRestart <- base::invokeRestart
[09:30:46.322]                       is.null <- base::is.null
[09:30:46.322]                       muffled <- FALSE
[09:30:46.322]                       if (inherits(cond, "message")) {
[09:30:46.322]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:46.322]                         if (muffled) 
[09:30:46.322]                           invokeRestart("muffleMessage")
[09:30:46.322]                       }
[09:30:46.322]                       else if (inherits(cond, "warning")) {
[09:30:46.322]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:46.322]                         if (muffled) 
[09:30:46.322]                           invokeRestart("muffleWarning")
[09:30:46.322]                       }
[09:30:46.322]                       else if (inherits(cond, "condition")) {
[09:30:46.322]                         if (!is.null(pattern)) {
[09:30:46.322]                           computeRestarts <- base::computeRestarts
[09:30:46.322]                           grepl <- base::grepl
[09:30:46.322]                           restarts <- computeRestarts(cond)
[09:30:46.322]                           for (restart in restarts) {
[09:30:46.322]                             name <- restart$name
[09:30:46.322]                             if (is.null(name)) 
[09:30:46.322]                               next
[09:30:46.322]                             if (!grepl(pattern, name)) 
[09:30:46.322]                               next
[09:30:46.322]                             invokeRestart(restart)
[09:30:46.322]                             muffled <- TRUE
[09:30:46.322]                             break
[09:30:46.322]                           }
[09:30:46.322]                         }
[09:30:46.322]                       }
[09:30:46.322]                       invisible(muffled)
[09:30:46.322]                     }
[09:30:46.322]                     muffleCondition(cond, pattern = "^muffle")
[09:30:46.322]                   }
[09:30:46.322]                 }
[09:30:46.322]                 else {
[09:30:46.322]                   if (TRUE) {
[09:30:46.322]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:46.322]                     {
[09:30:46.322]                       inherits <- base::inherits
[09:30:46.322]                       invokeRestart <- base::invokeRestart
[09:30:46.322]                       is.null <- base::is.null
[09:30:46.322]                       muffled <- FALSE
[09:30:46.322]                       if (inherits(cond, "message")) {
[09:30:46.322]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:46.322]                         if (muffled) 
[09:30:46.322]                           invokeRestart("muffleMessage")
[09:30:46.322]                       }
[09:30:46.322]                       else if (inherits(cond, "warning")) {
[09:30:46.322]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:46.322]                         if (muffled) 
[09:30:46.322]                           invokeRestart("muffleWarning")
[09:30:46.322]                       }
[09:30:46.322]                       else if (inherits(cond, "condition")) {
[09:30:46.322]                         if (!is.null(pattern)) {
[09:30:46.322]                           computeRestarts <- base::computeRestarts
[09:30:46.322]                           grepl <- base::grepl
[09:30:46.322]                           restarts <- computeRestarts(cond)
[09:30:46.322]                           for (restart in restarts) {
[09:30:46.322]                             name <- restart$name
[09:30:46.322]                             if (is.null(name)) 
[09:30:46.322]                               next
[09:30:46.322]                             if (!grepl(pattern, name)) 
[09:30:46.322]                               next
[09:30:46.322]                             invokeRestart(restart)
[09:30:46.322]                             muffled <- TRUE
[09:30:46.322]                             break
[09:30:46.322]                           }
[09:30:46.322]                         }
[09:30:46.322]                       }
[09:30:46.322]                       invisible(muffled)
[09:30:46.322]                     }
[09:30:46.322]                     muffleCondition(cond, pattern = "^muffle")
[09:30:46.322]                   }
[09:30:46.322]                 }
[09:30:46.322]             }
[09:30:46.322]         }))
[09:30:46.322]     }, error = function(ex) {
[09:30:46.322]         base::structure(base::list(value = NULL, visible = NULL, 
[09:30:46.322]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:46.322]                 ...future.rng), started = ...future.startTime, 
[09:30:46.322]             finished = Sys.time(), session_uuid = NA_character_, 
[09:30:46.322]             version = "1.8"), class = "FutureResult")
[09:30:46.322]     }, finally = {
[09:30:46.322]         if (!identical(...future.workdir, getwd())) 
[09:30:46.322]             setwd(...future.workdir)
[09:30:46.322]         {
[09:30:46.322]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:30:46.322]                 ...future.oldOptions$nwarnings <- NULL
[09:30:46.322]             }
[09:30:46.322]             base::options(...future.oldOptions)
[09:30:46.322]             if (.Platform$OS.type == "windows") {
[09:30:46.322]                 old_names <- names(...future.oldEnvVars)
[09:30:46.322]                 envs <- base::Sys.getenv()
[09:30:46.322]                 names <- names(envs)
[09:30:46.322]                 common <- intersect(names, old_names)
[09:30:46.322]                 added <- setdiff(names, old_names)
[09:30:46.322]                 removed <- setdiff(old_names, names)
[09:30:46.322]                 changed <- common[...future.oldEnvVars[common] != 
[09:30:46.322]                   envs[common]]
[09:30:46.322]                 NAMES <- toupper(changed)
[09:30:46.322]                 args <- list()
[09:30:46.322]                 for (kk in seq_along(NAMES)) {
[09:30:46.322]                   name <- changed[[kk]]
[09:30:46.322]                   NAME <- NAMES[[kk]]
[09:30:46.322]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:46.322]                     next
[09:30:46.322]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:46.322]                 }
[09:30:46.322]                 NAMES <- toupper(added)
[09:30:46.322]                 for (kk in seq_along(NAMES)) {
[09:30:46.322]                   name <- added[[kk]]
[09:30:46.322]                   NAME <- NAMES[[kk]]
[09:30:46.322]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:46.322]                     next
[09:30:46.322]                   args[[name]] <- ""
[09:30:46.322]                 }
[09:30:46.322]                 NAMES <- toupper(removed)
[09:30:46.322]                 for (kk in seq_along(NAMES)) {
[09:30:46.322]                   name <- removed[[kk]]
[09:30:46.322]                   NAME <- NAMES[[kk]]
[09:30:46.322]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:46.322]                     next
[09:30:46.322]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:46.322]                 }
[09:30:46.322]                 if (length(args) > 0) 
[09:30:46.322]                   base::do.call(base::Sys.setenv, args = args)
[09:30:46.322]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:30:46.322]             }
[09:30:46.322]             else {
[09:30:46.322]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:30:46.322]             }
[09:30:46.322]             {
[09:30:46.322]                 if (base::length(...future.futureOptionsAdded) > 
[09:30:46.322]                   0L) {
[09:30:46.322]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:30:46.322]                   base::names(opts) <- ...future.futureOptionsAdded
[09:30:46.322]                   base::options(opts)
[09:30:46.322]                 }
[09:30:46.322]                 {
[09:30:46.322]                   {
[09:30:46.322]                     base::options(mc.cores = ...future.mc.cores.old)
[09:30:46.322]                     NULL
[09:30:46.322]                   }
[09:30:46.322]                   options(future.plan = NULL)
[09:30:46.322]                   if (is.na(NA_character_)) 
[09:30:46.322]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:30:46.322]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:30:46.322]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:30:46.322]                     .init = FALSE)
[09:30:46.322]                 }
[09:30:46.322]             }
[09:30:46.322]         }
[09:30:46.322]     })
[09:30:46.322]     if (TRUE) {
[09:30:46.322]         base::sink(type = "output", split = FALSE)
[09:30:46.322]         if (TRUE) {
[09:30:46.322]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:30:46.322]         }
[09:30:46.322]         else {
[09:30:46.322]             ...future.result["stdout"] <- base::list(NULL)
[09:30:46.322]         }
[09:30:46.322]         base::close(...future.stdout)
[09:30:46.322]         ...future.stdout <- NULL
[09:30:46.322]     }
[09:30:46.322]     ...future.result$conditions <- ...future.conditions
[09:30:46.322]     ...future.result$finished <- base::Sys.time()
[09:30:46.322]     ...future.result
[09:30:46.322] }
[09:30:46.325] assign_globals() ...
[09:30:46.325] List of 4
[09:30:46.325]  $ ii   : int 1
[09:30:46.325]  $ n    : int 4
[09:30:46.325]  $ C    : cplx [1:25, 1:25] -2.25-1.5i -2.25-1.44i -2.25-1.38i ...
[09:30:46.325]   ..- attr(*, "region")=List of 2
[09:30:46.325]   .. ..$ xrange: num [1:2] -2.25 -0.781
[09:30:46.325]   .. ..$ yrange: num [1:2] -1.5 -0.0306
[09:30:46.325]   ..- attr(*, "tile")= int [1:2] 1 1
[09:30:46.325]  $ delay:function (counts)  
[09:30:46.325]   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[09:30:46.325]   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561d65352678> 
[09:30:46.325]  - attr(*, "where")=List of 4
[09:30:46.325]   ..$ ii   :<environment: R_EmptyEnv> 
[09:30:46.325]   ..$ n    :<environment: R_EmptyEnv> 
[09:30:46.325]   ..$ C    :<environment: R_EmptyEnv> 
[09:30:46.325]   ..$ delay:<environment: R_EmptyEnv> 
[09:30:46.325]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:30:46.325]  - attr(*, "resolved")= logi FALSE
[09:30:46.325]  - attr(*, "total_size")= num 14584
[09:30:46.325]  - attr(*, "already-done")= logi TRUE
[09:30:46.331] - copied ‘ii’ to environment
[09:30:46.331] - copied ‘n’ to environment
[09:30:46.331] - copied ‘C’ to environment
[09:30:46.331] - reassign environment for ‘delay’
[09:30:46.331] - copied ‘delay’ to environment
[09:30:46.331] assign_globals() ... done
[09:30:46.331] requestCore(): workers = 2
[09:30:46.335] MulticoreFuture started
[09:30:46.335] - Launch lazy future ... done
[09:30:46.335] run() for ‘MulticoreFuture’ ... done
[09:30:46.336] - run() ... done
[09:30:46.336] - resolved() ...
[09:30:46.336] plan(): Setting new future strategy stack:
[09:30:46.336] List of future strategies:
[09:30:46.336] 1. sequential:
[09:30:46.336]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:46.336]    - tweaked: FALSE
[09:30:46.336]    - call: NULL
[09:30:46.337] plan(): nbrOfWorkers() = 1
[09:30:46.340] plan(): Setting new future strategy stack:
[09:30:46.340] List of future strategies:
[09:30:46.340] 1. multicore:
[09:30:46.340]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:30:46.340]    - tweaked: FALSE
[09:30:46.340]    - call: plan(strategy)
[09:30:46.345] plan(): nbrOfWorkers() = 2
[09:30:46.346] - resolved: TRUE
[09:30:46.346] - resolved() ... done
[09:30:46.346] resolved() for ‘MulticoreFuture’ ... done
Plotting tile #1 of 4 ...
[09:30:46.347] result() for MulticoreFuture ...
[09:30:46.352] result() for MulticoreFuture ...
[09:30:46.352] result() for MulticoreFuture ... done
[09:30:46.352] signalConditions() ...
[09:30:46.352]  - include = ‘immediateCondition’
[09:30:46.352]  - exclude = 
[09:30:46.352]  - resignal = FALSE
[09:30:46.352]  - Number of conditions: 2
[09:30:46.353] signalConditions() ... done
[09:30:46.353] result() for MulticoreFuture ... done
[09:30:46.353] result() for MulticoreFuture ...
[09:30:46.353] result() for MulticoreFuture ... done
[09:30:46.353] signalConditions() ...
[09:30:46.353]  - include = ‘immediateCondition’
[09:30:46.353]  - exclude = 
[09:30:46.353]  - resignal = FALSE
[09:30:46.353]  - Number of conditions: 2
[09:30:46.353] signalConditions() ... done
[09:30:46.354] Future state: ‘finished’
[09:30:46.354] result() for MulticoreFuture ...
[09:30:46.354] result() for MulticoreFuture ... done
[09:30:46.354] signalConditions() ...
[09:30:46.354]  - include = ‘condition’
[09:30:46.354]  - exclude = ‘immediateCondition’
[09:30:46.354]  - resignal = TRUE
[09:30:46.354]  - Number of conditions: 2
[09:30:46.354]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #1 of 4 ...[09:30:46.355]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[09:30:46.355] signalConditions() ... done
[09:30:46.355] resolved() for ‘Future’ ...
[09:30:46.356] - state: ‘created’
[09:30:46.356] - run: TRUE
[09:30:46.356] - run() ...
[09:30:46.356] run() for ‘Future’ ...
[09:30:46.356] - state: ‘created’
[09:30:46.356] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[09:30:46.360] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:30:46.360] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[09:30:46.361]   - Field: ‘label’
[09:30:46.361]   - Field: ‘local’
[09:30:46.361]   - Field: ‘owner’
[09:30:46.361]   - Field: ‘envir’
[09:30:46.361]   - Field: ‘workers’
[09:30:46.361]   - Field: ‘packages’
[09:30:46.361]   - Field: ‘gc’
[09:30:46.361]   - Field: ‘job’
[09:30:46.361]   - Field: ‘conditions’
[09:30:46.362]   - Field: ‘expr’
[09:30:46.362]   - Field: ‘uuid’
[09:30:46.362]   - Field: ‘seed’
[09:30:46.362]   - Field: ‘version’
[09:30:46.362]   - Field: ‘result’
[09:30:46.362]   - Field: ‘asynchronous’
[09:30:46.362]   - Field: ‘calls’
[09:30:46.362]   - Field: ‘globals’
[09:30:46.362]   - Field: ‘stdout’
[09:30:46.363]   - Field: ‘earlySignal’
[09:30:46.363]   - Field: ‘lazy’
[09:30:46.363]   - Field: ‘state’
[09:30:46.363] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[09:30:46.363] - Launch lazy future ...
[09:30:46.363] Packages needed by the future expression (n = 1): ‘future’
[09:30:46.363] Packages needed by future strategies (n = 0): <none>
[09:30:46.364] {
[09:30:46.364]     {
[09:30:46.364]         {
[09:30:46.364]             ...future.startTime <- base::Sys.time()
[09:30:46.364]             {
[09:30:46.364]                 {
[09:30:46.364]                   {
[09:30:46.364]                     {
[09:30:46.364]                       {
[09:30:46.364]                         base::local({
[09:30:46.364]                           has_future <- base::requireNamespace("future", 
[09:30:46.364]                             quietly = TRUE)
[09:30:46.364]                           if (has_future) {
[09:30:46.364]                             ns <- base::getNamespace("future")
[09:30:46.364]                             version <- ns[[".package"]][["version"]]
[09:30:46.364]                             if (is.null(version)) 
[09:30:46.364]                               version <- utils::packageVersion("future")
[09:30:46.364]                           }
[09:30:46.364]                           else {
[09:30:46.364]                             version <- NULL
[09:30:46.364]                           }
[09:30:46.364]                           if (!has_future || version < "1.8.0") {
[09:30:46.364]                             info <- base::c(r_version = base::gsub("R version ", 
[09:30:46.364]                               "", base::R.version$version.string), 
[09:30:46.364]                               platform = base::sprintf("%s (%s-bit)", 
[09:30:46.364]                                 base::R.version$platform, 8 * 
[09:30:46.364]                                   base::.Machine$sizeof.pointer), 
[09:30:46.364]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[09:30:46.364]                                 "release", "version")], collapse = " "), 
[09:30:46.364]                               hostname = base::Sys.info()[["nodename"]])
[09:30:46.364]                             info <- base::sprintf("%s: %s", base::names(info), 
[09:30:46.364]                               info)
[09:30:46.364]                             info <- base::paste(info, collapse = "; ")
[09:30:46.364]                             if (!has_future) {
[09:30:46.364]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:30:46.364]                                 info)
[09:30:46.364]                             }
[09:30:46.364]                             else {
[09:30:46.364]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:30:46.364]                                 info, version)
[09:30:46.364]                             }
[09:30:46.364]                             base::stop(msg)
[09:30:46.364]                           }
[09:30:46.364]                         })
[09:30:46.364]                       }
[09:30:46.364]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[09:30:46.364]                       base::options(mc.cores = 1L)
[09:30:46.364]                     }
[09:30:46.364]                     base::local({
[09:30:46.364]                       for (pkg in "future") {
[09:30:46.364]                         base::loadNamespace(pkg)
[09:30:46.364]                         base::library(pkg, character.only = TRUE)
[09:30:46.364]                       }
[09:30:46.364]                     })
[09:30:46.364]                   }
[09:30:46.364]                   ...future.strategy.old <- future::plan("list")
[09:30:46.364]                   options(future.plan = NULL)
[09:30:46.364]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:30:46.364]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:30:46.364]                 }
[09:30:46.364]                 ...future.workdir <- getwd()
[09:30:46.364]             }
[09:30:46.364]             ...future.oldOptions <- base::as.list(base::.Options)
[09:30:46.364]             ...future.oldEnvVars <- base::Sys.getenv()
[09:30:46.364]         }
[09:30:46.364]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:30:46.364]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:30:46.364]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:30:46.364]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:30:46.364]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:30:46.364]             future.stdout.windows.reencode = NULL, width = 80L)
[09:30:46.364]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:30:46.364]             base::names(...future.oldOptions))
[09:30:46.364]     }
[09:30:46.364]     if (FALSE) {
[09:30:46.364]     }
[09:30:46.364]     else {
[09:30:46.364]         if (TRUE) {
[09:30:46.364]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:30:46.364]                 open = "w")
[09:30:46.364]         }
[09:30:46.364]         else {
[09:30:46.364]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:30:46.364]                 windows = "NUL", "/dev/null"), open = "w")
[09:30:46.364]         }
[09:30:46.364]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:30:46.364]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:30:46.364]             base::sink(type = "output", split = FALSE)
[09:30:46.364]             base::close(...future.stdout)
[09:30:46.364]         }, add = TRUE)
[09:30:46.364]     }
[09:30:46.364]     ...future.frame <- base::sys.nframe()
[09:30:46.364]     ...future.conditions <- base::list()
[09:30:46.364]     ...future.rng <- base::globalenv()$.Random.seed
[09:30:46.364]     if (FALSE) {
[09:30:46.364]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:30:46.364]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:30:46.364]     }
[09:30:46.364]     ...future.result <- base::tryCatch({
[09:30:46.364]         base::withCallingHandlers({
[09:30:46.364]             ...future.value <- base::withVisible(base::local({
[09:30:46.364]                 withCallingHandlers({
[09:30:46.364]                   {
[09:30:46.364]                     message(sprintf("Calculating tile #%d of %d ...", 
[09:30:46.364]                       ii, n), appendLF = FALSE)
[09:30:46.364]                     fit <- mandelbrot(C)
[09:30:46.364]                     delay(fit)
[09:30:46.364]                     message(" done")
[09:30:46.364]                     fit
[09:30:46.364]                   }
[09:30:46.364]                 }, immediateCondition = function(cond) {
[09:30:46.364]                   save_rds <- function (object, pathname, ...) 
[09:30:46.364]                   {
[09:30:46.364]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:30:46.364]                     if (file_test("-f", pathname_tmp)) {
[09:30:46.364]                       fi_tmp <- file.info(pathname_tmp)
[09:30:46.364]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:30:46.364]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:30:46.364]                         fi_tmp[["mtime"]])
[09:30:46.364]                     }
[09:30:46.364]                     tryCatch({
[09:30:46.364]                       saveRDS(object, file = pathname_tmp, ...)
[09:30:46.364]                     }, error = function(ex) {
[09:30:46.364]                       msg <- conditionMessage(ex)
[09:30:46.364]                       fi_tmp <- file.info(pathname_tmp)
[09:30:46.364]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:30:46.364]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:30:46.364]                         fi_tmp[["mtime"]], msg)
[09:30:46.364]                       ex$message <- msg
[09:30:46.364]                       stop(ex)
[09:30:46.364]                     })
[09:30:46.364]                     stopifnot(file_test("-f", pathname_tmp))
[09:30:46.364]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:30:46.364]                     if (!res || file_test("-f", pathname_tmp)) {
[09:30:46.364]                       fi_tmp <- file.info(pathname_tmp)
[09:30:46.364]                       fi <- file.info(pathname)
[09:30:46.364]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:30:46.364]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:30:46.364]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:30:46.364]                         fi[["size"]], fi[["mtime"]])
[09:30:46.364]                       stop(msg)
[09:30:46.364]                     }
[09:30:46.364]                     invisible(pathname)
[09:30:46.364]                   }
[09:30:46.364]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:30:46.364]                     rootPath = tempdir()) 
[09:30:46.364]                   {
[09:30:46.364]                     obj <- list(time = Sys.time(), condition = cond)
[09:30:46.364]                     file <- tempfile(pattern = class(cond)[1], 
[09:30:46.364]                       tmpdir = path, fileext = ".rds")
[09:30:46.364]                     save_rds(obj, file)
[09:30:46.364]                   }
[09:30:46.364]                   saveImmediateCondition(cond, path = "/tmp/RtmpARnuts/.future/immediateConditions")
[09:30:46.364]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:46.364]                   {
[09:30:46.364]                     inherits <- base::inherits
[09:30:46.364]                     invokeRestart <- base::invokeRestart
[09:30:46.364]                     is.null <- base::is.null
[09:30:46.364]                     muffled <- FALSE
[09:30:46.364]                     if (inherits(cond, "message")) {
[09:30:46.364]                       muffled <- grepl(pattern, "muffleMessage")
[09:30:46.364]                       if (muffled) 
[09:30:46.364]                         invokeRestart("muffleMessage")
[09:30:46.364]                     }
[09:30:46.364]                     else if (inherits(cond, "warning")) {
[09:30:46.364]                       muffled <- grepl(pattern, "muffleWarning")
[09:30:46.364]                       if (muffled) 
[09:30:46.364]                         invokeRestart("muffleWarning")
[09:30:46.364]                     }
[09:30:46.364]                     else if (inherits(cond, "condition")) {
[09:30:46.364]                       if (!is.null(pattern)) {
[09:30:46.364]                         computeRestarts <- base::computeRestarts
[09:30:46.364]                         grepl <- base::grepl
[09:30:46.364]                         restarts <- computeRestarts(cond)
[09:30:46.364]                         for (restart in restarts) {
[09:30:46.364]                           name <- restart$name
[09:30:46.364]                           if (is.null(name)) 
[09:30:46.364]                             next
[09:30:46.364]                           if (!grepl(pattern, name)) 
[09:30:46.364]                             next
[09:30:46.364]                           invokeRestart(restart)
[09:30:46.364]                           muffled <- TRUE
[09:30:46.364]                           break
[09:30:46.364]                         }
[09:30:46.364]                       }
[09:30:46.364]                     }
[09:30:46.364]                     invisible(muffled)
[09:30:46.364]                   }
[09:30:46.364]                   muffleCondition(cond)
[09:30:46.364]                 })
[09:30:46.364]             }))
[09:30:46.364]             future::FutureResult(value = ...future.value$value, 
[09:30:46.364]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:46.364]                   ...future.rng), globalenv = if (FALSE) 
[09:30:46.364]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:30:46.364]                     ...future.globalenv.names))
[09:30:46.364]                 else NULL, started = ...future.startTime, version = "1.8")
[09:30:46.364]         }, condition = base::local({
[09:30:46.364]             c <- base::c
[09:30:46.364]             inherits <- base::inherits
[09:30:46.364]             invokeRestart <- base::invokeRestart
[09:30:46.364]             length <- base::length
[09:30:46.364]             list <- base::list
[09:30:46.364]             seq.int <- base::seq.int
[09:30:46.364]             signalCondition <- base::signalCondition
[09:30:46.364]             sys.calls <- base::sys.calls
[09:30:46.364]             `[[` <- base::`[[`
[09:30:46.364]             `+` <- base::`+`
[09:30:46.364]             `<<-` <- base::`<<-`
[09:30:46.364]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:30:46.364]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:30:46.364]                   3L)]
[09:30:46.364]             }
[09:30:46.364]             function(cond) {
[09:30:46.364]                 is_error <- inherits(cond, "error")
[09:30:46.364]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:30:46.364]                   NULL)
[09:30:46.364]                 if (is_error) {
[09:30:46.364]                   sessionInformation <- function() {
[09:30:46.364]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:30:46.364]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:30:46.364]                       search = base::search(), system = base::Sys.info())
[09:30:46.364]                   }
[09:30:46.364]                   ...future.conditions[[length(...future.conditions) + 
[09:30:46.364]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:30:46.364]                     cond$call), session = sessionInformation(), 
[09:30:46.364]                     timestamp = base::Sys.time(), signaled = 0L)
[09:30:46.364]                   signalCondition(cond)
[09:30:46.364]                 }
[09:30:46.364]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:30:46.364]                 "immediateCondition"))) {
[09:30:46.364]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:30:46.364]                   ...future.conditions[[length(...future.conditions) + 
[09:30:46.364]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:30:46.364]                   if (TRUE && !signal) {
[09:30:46.364]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:46.364]                     {
[09:30:46.364]                       inherits <- base::inherits
[09:30:46.364]                       invokeRestart <- base::invokeRestart
[09:30:46.364]                       is.null <- base::is.null
[09:30:46.364]                       muffled <- FALSE
[09:30:46.364]                       if (inherits(cond, "message")) {
[09:30:46.364]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:46.364]                         if (muffled) 
[09:30:46.364]                           invokeRestart("muffleMessage")
[09:30:46.364]                       }
[09:30:46.364]                       else if (inherits(cond, "warning")) {
[09:30:46.364]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:46.364]                         if (muffled) 
[09:30:46.364]                           invokeRestart("muffleWarning")
[09:30:46.364]                       }
[09:30:46.364]                       else if (inherits(cond, "condition")) {
[09:30:46.364]                         if (!is.null(pattern)) {
[09:30:46.364]                           computeRestarts <- base::computeRestarts
[09:30:46.364]                           grepl <- base::grepl
[09:30:46.364]                           restarts <- computeRestarts(cond)
[09:30:46.364]                           for (restart in restarts) {
[09:30:46.364]                             name <- restart$name
[09:30:46.364]                             if (is.null(name)) 
[09:30:46.364]                               next
[09:30:46.364]                             if (!grepl(pattern, name)) 
[09:30:46.364]                               next
[09:30:46.364]                             invokeRestart(restart)
[09:30:46.364]                             muffled <- TRUE
[09:30:46.364]                             break
[09:30:46.364]                           }
[09:30:46.364]                         }
[09:30:46.364]                       }
[09:30:46.364]                       invisible(muffled)
[09:30:46.364]                     }
[09:30:46.364]                     muffleCondition(cond, pattern = "^muffle")
[09:30:46.364]                   }
[09:30:46.364]                 }
[09:30:46.364]                 else {
[09:30:46.364]                   if (TRUE) {
[09:30:46.364]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:46.364]                     {
[09:30:46.364]                       inherits <- base::inherits
[09:30:46.364]                       invokeRestart <- base::invokeRestart
[09:30:46.364]                       is.null <- base::is.null
[09:30:46.364]                       muffled <- FALSE
[09:30:46.364]                       if (inherits(cond, "message")) {
[09:30:46.364]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:46.364]                         if (muffled) 
[09:30:46.364]                           invokeRestart("muffleMessage")
[09:30:46.364]                       }
[09:30:46.364]                       else if (inherits(cond, "warning")) {
[09:30:46.364]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:46.364]                         if (muffled) 
[09:30:46.364]                           invokeRestart("muffleWarning")
[09:30:46.364]                       }
[09:30:46.364]                       else if (inherits(cond, "condition")) {
[09:30:46.364]                         if (!is.null(pattern)) {
[09:30:46.364]                           computeRestarts <- base::computeRestarts
[09:30:46.364]                           grepl <- base::grepl
[09:30:46.364]                           restarts <- computeRestarts(cond)
[09:30:46.364]                           for (restart in restarts) {
[09:30:46.364]                             name <- restart$name
[09:30:46.364]                             if (is.null(name)) 
[09:30:46.364]                               next
[09:30:46.364]                             if (!grepl(pattern, name)) 
[09:30:46.364]                               next
[09:30:46.364]                             invokeRestart(restart)
[09:30:46.364]                             muffled <- TRUE
[09:30:46.364]                             break
[09:30:46.364]                           }
[09:30:46.364]                         }
[09:30:46.364]                       }
[09:30:46.364]                       invisible(muffled)
[09:30:46.364]                     }
[09:30:46.364]                     muffleCondition(cond, pattern = "^muffle")
[09:30:46.364]                   }
[09:30:46.364]                 }
[09:30:46.364]             }
[09:30:46.364]         }))
[09:30:46.364]     }, error = function(ex) {
[09:30:46.364]         base::structure(base::list(value = NULL, visible = NULL, 
[09:30:46.364]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:46.364]                 ...future.rng), started = ...future.startTime, 
[09:30:46.364]             finished = Sys.time(), session_uuid = NA_character_, 
[09:30:46.364]             version = "1.8"), class = "FutureResult")
[09:30:46.364]     }, finally = {
[09:30:46.364]         if (!identical(...future.workdir, getwd())) 
[09:30:46.364]             setwd(...future.workdir)
[09:30:46.364]         {
[09:30:46.364]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:30:46.364]                 ...future.oldOptions$nwarnings <- NULL
[09:30:46.364]             }
[09:30:46.364]             base::options(...future.oldOptions)
[09:30:46.364]             if (.Platform$OS.type == "windows") {
[09:30:46.364]                 old_names <- names(...future.oldEnvVars)
[09:30:46.364]                 envs <- base::Sys.getenv()
[09:30:46.364]                 names <- names(envs)
[09:30:46.364]                 common <- intersect(names, old_names)
[09:30:46.364]                 added <- setdiff(names, old_names)
[09:30:46.364]                 removed <- setdiff(old_names, names)
[09:30:46.364]                 changed <- common[...future.oldEnvVars[common] != 
[09:30:46.364]                   envs[common]]
[09:30:46.364]                 NAMES <- toupper(changed)
[09:30:46.364]                 args <- list()
[09:30:46.364]                 for (kk in seq_along(NAMES)) {
[09:30:46.364]                   name <- changed[[kk]]
[09:30:46.364]                   NAME <- NAMES[[kk]]
[09:30:46.364]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:46.364]                     next
[09:30:46.364]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:46.364]                 }
[09:30:46.364]                 NAMES <- toupper(added)
[09:30:46.364]                 for (kk in seq_along(NAMES)) {
[09:30:46.364]                   name <- added[[kk]]
[09:30:46.364]                   NAME <- NAMES[[kk]]
[09:30:46.364]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:46.364]                     next
[09:30:46.364]                   args[[name]] <- ""
[09:30:46.364]                 }
[09:30:46.364]                 NAMES <- toupper(removed)
[09:30:46.364]                 for (kk in seq_along(NAMES)) {
[09:30:46.364]                   name <- removed[[kk]]
[09:30:46.364]                   NAME <- NAMES[[kk]]
[09:30:46.364]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:46.364]                     next
[09:30:46.364]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:46.364]                 }
[09:30:46.364]                 if (length(args) > 0) 
[09:30:46.364]                   base::do.call(base::Sys.setenv, args = args)
[09:30:46.364]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:30:46.364]             }
[09:30:46.364]             else {
[09:30:46.364]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:30:46.364]             }
[09:30:46.364]             {
[09:30:46.364]                 if (base::length(...future.futureOptionsAdded) > 
[09:30:46.364]                   0L) {
[09:30:46.364]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:30:46.364]                   base::names(opts) <- ...future.futureOptionsAdded
[09:30:46.364]                   base::options(opts)
[09:30:46.364]                 }
[09:30:46.364]                 {
[09:30:46.364]                   {
[09:30:46.364]                     base::options(mc.cores = ...future.mc.cores.old)
[09:30:46.364]                     NULL
[09:30:46.364]                   }
[09:30:46.364]                   options(future.plan = NULL)
[09:30:46.364]                   if (is.na(NA_character_)) 
[09:30:46.364]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:30:46.364]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:30:46.364]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:30:46.364]                     .init = FALSE)
[09:30:46.364]                 }
[09:30:46.364]             }
[09:30:46.364]         }
[09:30:46.364]     })
[09:30:46.364]     if (TRUE) {
[09:30:46.364]         base::sink(type = "output", split = FALSE)
[09:30:46.364]         if (TRUE) {
[09:30:46.364]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:30:46.364]         }
[09:30:46.364]         else {
[09:30:46.364]             ...future.result["stdout"] <- base::list(NULL)
[09:30:46.364]         }
[09:30:46.364]         base::close(...future.stdout)
[09:30:46.364]         ...future.stdout <- NULL
[09:30:46.364]     }
[09:30:46.364]     ...future.result$conditions <- ...future.conditions
[09:30:46.364]     ...future.result$finished <- base::Sys.time()
[09:30:46.364]     ...future.result
[09:30:46.364] }
[09:30:46.367] assign_globals() ...
[09:30:46.367] List of 4
[09:30:46.367]  $ ii   : int 2
[09:30:46.367]  $ n    : int 4
[09:30:46.367]  $ C    : cplx [1:25, 1:25] -0.719-1.5i -0.719-1.44i -0.719-1.38i ...
[09:30:46.367]   ..- attr(*, "region")=List of 2
[09:30:46.367]   .. ..$ xrange: num [1:2] -0.719 0.75
[09:30:46.367]   .. ..$ yrange: num [1:2] -1.5 -0.0306
[09:30:46.367]   ..- attr(*, "tile")= int [1:2] 1 2
[09:30:46.367]  $ delay:function (counts)  
[09:30:46.367]   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[09:30:46.367]   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561d65352678> 
[09:30:46.367]  - attr(*, "where")=List of 4
[09:30:46.367]   ..$ ii   :<environment: R_EmptyEnv> 
[09:30:46.367]   ..$ n    :<environment: R_EmptyEnv> 
[09:30:46.367]   ..$ C    :<environment: R_EmptyEnv> 
[09:30:46.367]   ..$ delay:<environment: R_EmptyEnv> 
[09:30:46.367]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:30:46.367]  - attr(*, "resolved")= logi FALSE
[09:30:46.367]  - attr(*, "total_size")= num 14584
[09:30:46.367]  - attr(*, "already-done")= logi TRUE
[09:30:46.377] - copied ‘ii’ to environment
[09:30:46.377] - copied ‘n’ to environment
[09:30:46.377] - copied ‘C’ to environment
[09:30:46.378] - reassign environment for ‘delay’
[09:30:46.378] - copied ‘delay’ to environment
[09:30:46.378] assign_globals() ... done
[09:30:46.378] requestCore(): workers = 2
[09:30:46.380] MulticoreFuture started
[09:30:46.380] - Launch lazy future ... done
[09:30:46.381] run() for ‘MulticoreFuture’ ... done
[09:30:46.381] - run() ... done
[09:30:46.381] - resolved() ...
[09:30:46.381] plan(): Setting new future strategy stack:
[09:30:46.382] List of future strategies:
[09:30:46.382] 1. sequential:
[09:30:46.382]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:46.382]    - tweaked: FALSE
[09:30:46.382]    - call: NULL
[09:30:46.383] plan(): nbrOfWorkers() = 1
[09:30:46.388] plan(): Setting new future strategy stack:
[09:30:46.388] List of future strategies:
[09:30:46.388] 1. multicore:
[09:30:46.388]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:30:46.388]    - tweaked: FALSE
[09:30:46.388]    - call: plan(strategy)
[09:30:46.391] - resolved: FALSE
[09:30:46.392] - resolved() ... done
[09:30:46.392] resolved() for ‘MulticoreFuture’ ... done
[09:30:46.392] resolved() for ‘Future’ ...
[09:30:46.392] - state: ‘created’
[09:30:46.392] - run: TRUE
[09:30:46.392] - run() ...
[09:30:46.392] run() for ‘Future’ ...
[09:30:46.393] - state: ‘created’
[09:30:46.393] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[09:30:46.393] plan(): nbrOfWorkers() = 2
[09:30:46.397] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:30:46.397] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[09:30:46.397]   - Field: ‘label’
[09:30:46.397]   - Field: ‘local’
[09:30:46.398]   - Field: ‘owner’
[09:30:46.398]   - Field: ‘envir’
[09:30:46.398]   - Field: ‘workers’
[09:30:46.398]   - Field: ‘packages’
[09:30:46.398]   - Field: ‘gc’
[09:30:46.398]   - Field: ‘job’
[09:30:46.398]   - Field: ‘conditions’
[09:30:46.399]   - Field: ‘expr’
[09:30:46.399]   - Field: ‘uuid’
[09:30:46.399]   - Field: ‘seed’
[09:30:46.399]   - Field: ‘version’
[09:30:46.399]   - Field: ‘result’
[09:30:46.399]   - Field: ‘asynchronous’
[09:30:46.399]   - Field: ‘calls’
[09:30:46.400]   - Field: ‘globals’
[09:30:46.400]   - Field: ‘stdout’
[09:30:46.400]   - Field: ‘earlySignal’
[09:30:46.400]   - Field: ‘lazy’
[09:30:46.400]   - Field: ‘state’
[09:30:46.400] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[09:30:46.401] - Launch lazy future ...
[09:30:46.401] Packages needed by the future expression (n = 1): ‘future’
[09:30:46.401] Packages needed by future strategies (n = 0): <none>
[09:30:46.402] {
[09:30:46.402]     {
[09:30:46.402]         {
[09:30:46.402]             ...future.startTime <- base::Sys.time()
[09:30:46.402]             {
[09:30:46.402]                 {
[09:30:46.402]                   {
[09:30:46.402]                     {
[09:30:46.402]                       {
[09:30:46.402]                         base::local({
[09:30:46.402]                           has_future <- base::requireNamespace("future", 
[09:30:46.402]                             quietly = TRUE)
[09:30:46.402]                           if (has_future) {
[09:30:46.402]                             ns <- base::getNamespace("future")
[09:30:46.402]                             version <- ns[[".package"]][["version"]]
[09:30:46.402]                             if (is.null(version)) 
[09:30:46.402]                               version <- utils::packageVersion("future")
[09:30:46.402]                           }
[09:30:46.402]                           else {
[09:30:46.402]                             version <- NULL
[09:30:46.402]                           }
[09:30:46.402]                           if (!has_future || version < "1.8.0") {
[09:30:46.402]                             info <- base::c(r_version = base::gsub("R version ", 
[09:30:46.402]                               "", base::R.version$version.string), 
[09:30:46.402]                               platform = base::sprintf("%s (%s-bit)", 
[09:30:46.402]                                 base::R.version$platform, 8 * 
[09:30:46.402]                                   base::.Machine$sizeof.pointer), 
[09:30:46.402]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[09:30:46.402]                                 "release", "version")], collapse = " "), 
[09:30:46.402]                               hostname = base::Sys.info()[["nodename"]])
[09:30:46.402]                             info <- base::sprintf("%s: %s", base::names(info), 
[09:30:46.402]                               info)
[09:30:46.402]                             info <- base::paste(info, collapse = "; ")
[09:30:46.402]                             if (!has_future) {
[09:30:46.402]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:30:46.402]                                 info)
[09:30:46.402]                             }
[09:30:46.402]                             else {
[09:30:46.402]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:30:46.402]                                 info, version)
[09:30:46.402]                             }
[09:30:46.402]                             base::stop(msg)
[09:30:46.402]                           }
[09:30:46.402]                         })
[09:30:46.402]                       }
[09:30:46.402]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[09:30:46.402]                       base::options(mc.cores = 1L)
[09:30:46.402]                     }
[09:30:46.402]                     base::local({
[09:30:46.402]                       for (pkg in "future") {
[09:30:46.402]                         base::loadNamespace(pkg)
[09:30:46.402]                         base::library(pkg, character.only = TRUE)
[09:30:46.402]                       }
[09:30:46.402]                     })
[09:30:46.402]                   }
[09:30:46.402]                   ...future.strategy.old <- future::plan("list")
[09:30:46.402]                   options(future.plan = NULL)
[09:30:46.402]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:30:46.402]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:30:46.402]                 }
[09:30:46.402]                 ...future.workdir <- getwd()
[09:30:46.402]             }
[09:30:46.402]             ...future.oldOptions <- base::as.list(base::.Options)
[09:30:46.402]             ...future.oldEnvVars <- base::Sys.getenv()
[09:30:46.402]         }
[09:30:46.402]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:30:46.402]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:30:46.402]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:30:46.402]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:30:46.402]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:30:46.402]             future.stdout.windows.reencode = NULL, width = 80L)
[09:30:46.402]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:30:46.402]             base::names(...future.oldOptions))
[09:30:46.402]     }
[09:30:46.402]     if (FALSE) {
[09:30:46.402]     }
[09:30:46.402]     else {
[09:30:46.402]         if (TRUE) {
[09:30:46.402]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:30:46.402]                 open = "w")
[09:30:46.402]         }
[09:30:46.402]         else {
[09:30:46.402]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:30:46.402]                 windows = "NUL", "/dev/null"), open = "w")
[09:30:46.402]         }
[09:30:46.402]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:30:46.402]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:30:46.402]             base::sink(type = "output", split = FALSE)
[09:30:46.402]             base::close(...future.stdout)
[09:30:46.402]         }, add = TRUE)
[09:30:46.402]     }
[09:30:46.402]     ...future.frame <- base::sys.nframe()
[09:30:46.402]     ...future.conditions <- base::list()
[09:30:46.402]     ...future.rng <- base::globalenv()$.Random.seed
[09:30:46.402]     if (FALSE) {
[09:30:46.402]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:30:46.402]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:30:46.402]     }
[09:30:46.402]     ...future.result <- base::tryCatch({
[09:30:46.402]         base::withCallingHandlers({
[09:30:46.402]             ...future.value <- base::withVisible(base::local({
[09:30:46.402]                 withCallingHandlers({
[09:30:46.402]                   {
[09:30:46.402]                     message(sprintf("Calculating tile #%d of %d ...", 
[09:30:46.402]                       ii, n), appendLF = FALSE)
[09:30:46.402]                     fit <- mandelbrot(C)
[09:30:46.402]                     delay(fit)
[09:30:46.402]                     message(" done")
[09:30:46.402]                     fit
[09:30:46.402]                   }
[09:30:46.402]                 }, immediateCondition = function(cond) {
[09:30:46.402]                   save_rds <- function (object, pathname, ...) 
[09:30:46.402]                   {
[09:30:46.402]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:30:46.402]                     if (file_test("-f", pathname_tmp)) {
[09:30:46.402]                       fi_tmp <- file.info(pathname_tmp)
[09:30:46.402]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:30:46.402]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:30:46.402]                         fi_tmp[["mtime"]])
[09:30:46.402]                     }
[09:30:46.402]                     tryCatch({
[09:30:46.402]                       saveRDS(object, file = pathname_tmp, ...)
[09:30:46.402]                     }, error = function(ex) {
[09:30:46.402]                       msg <- conditionMessage(ex)
[09:30:46.402]                       fi_tmp <- file.info(pathname_tmp)
[09:30:46.402]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:30:46.402]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:30:46.402]                         fi_tmp[["mtime"]], msg)
[09:30:46.402]                       ex$message <- msg
[09:30:46.402]                       stop(ex)
[09:30:46.402]                     })
[09:30:46.402]                     stopifnot(file_test("-f", pathname_tmp))
[09:30:46.402]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:30:46.402]                     if (!res || file_test("-f", pathname_tmp)) {
[09:30:46.402]                       fi_tmp <- file.info(pathname_tmp)
[09:30:46.402]                       fi <- file.info(pathname)
[09:30:46.402]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:30:46.402]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:30:46.402]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:30:46.402]                         fi[["size"]], fi[["mtime"]])
[09:30:46.402]                       stop(msg)
[09:30:46.402]                     }
[09:30:46.402]                     invisible(pathname)
[09:30:46.402]                   }
[09:30:46.402]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:30:46.402]                     rootPath = tempdir()) 
[09:30:46.402]                   {
[09:30:46.402]                     obj <- list(time = Sys.time(), condition = cond)
[09:30:46.402]                     file <- tempfile(pattern = class(cond)[1], 
[09:30:46.402]                       tmpdir = path, fileext = ".rds")
[09:30:46.402]                     save_rds(obj, file)
[09:30:46.402]                   }
[09:30:46.402]                   saveImmediateCondition(cond, path = "/tmp/RtmpARnuts/.future/immediateConditions")
[09:30:46.402]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:46.402]                   {
[09:30:46.402]                     inherits <- base::inherits
[09:30:46.402]                     invokeRestart <- base::invokeRestart
[09:30:46.402]                     is.null <- base::is.null
[09:30:46.402]                     muffled <- FALSE
[09:30:46.402]                     if (inherits(cond, "message")) {
[09:30:46.402]                       muffled <- grepl(pattern, "muffleMessage")
[09:30:46.402]                       if (muffled) 
[09:30:46.402]                         invokeRestart("muffleMessage")
[09:30:46.402]                     }
[09:30:46.402]                     else if (inherits(cond, "warning")) {
[09:30:46.402]                       muffled <- grepl(pattern, "muffleWarning")
[09:30:46.402]                       if (muffled) 
[09:30:46.402]                         invokeRestart("muffleWarning")
[09:30:46.402]                     }
[09:30:46.402]                     else if (inherits(cond, "condition")) {
[09:30:46.402]                       if (!is.null(pattern)) {
[09:30:46.402]                         computeRestarts <- base::computeRestarts
[09:30:46.402]                         grepl <- base::grepl
[09:30:46.402]                         restarts <- computeRestarts(cond)
[09:30:46.402]                         for (restart in restarts) {
[09:30:46.402]                           name <- restart$name
[09:30:46.402]                           if (is.null(name)) 
[09:30:46.402]                             next
[09:30:46.402]                           if (!grepl(pattern, name)) 
[09:30:46.402]                             next
[09:30:46.402]                           invokeRestart(restart)
[09:30:46.402]                           muffled <- TRUE
[09:30:46.402]                           break
[09:30:46.402]                         }
[09:30:46.402]                       }
[09:30:46.402]                     }
[09:30:46.402]                     invisible(muffled)
[09:30:46.402]                   }
[09:30:46.402]                   muffleCondition(cond)
[09:30:46.402]                 })
[09:30:46.402]             }))
[09:30:46.402]             future::FutureResult(value = ...future.value$value, 
[09:30:46.402]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:46.402]                   ...future.rng), globalenv = if (FALSE) 
[09:30:46.402]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:30:46.402]                     ...future.globalenv.names))
[09:30:46.402]                 else NULL, started = ...future.startTime, version = "1.8")
[09:30:46.402]         }, condition = base::local({
[09:30:46.402]             c <- base::c
[09:30:46.402]             inherits <- base::inherits
[09:30:46.402]             invokeRestart <- base::invokeRestart
[09:30:46.402]             length <- base::length
[09:30:46.402]             list <- base::list
[09:30:46.402]             seq.int <- base::seq.int
[09:30:46.402]             signalCondition <- base::signalCondition
[09:30:46.402]             sys.calls <- base::sys.calls
[09:30:46.402]             `[[` <- base::`[[`
[09:30:46.402]             `+` <- base::`+`
[09:30:46.402]             `<<-` <- base::`<<-`
[09:30:46.402]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:30:46.402]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:30:46.402]                   3L)]
[09:30:46.402]             }
[09:30:46.402]             function(cond) {
[09:30:46.402]                 is_error <- inherits(cond, "error")
[09:30:46.402]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:30:46.402]                   NULL)
[09:30:46.402]                 if (is_error) {
[09:30:46.402]                   sessionInformation <- function() {
[09:30:46.402]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:30:46.402]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:30:46.402]                       search = base::search(), system = base::Sys.info())
[09:30:46.402]                   }
[09:30:46.402]                   ...future.conditions[[length(...future.conditions) + 
[09:30:46.402]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:30:46.402]                     cond$call), session = sessionInformation(), 
[09:30:46.402]                     timestamp = base::Sys.time(), signaled = 0L)
[09:30:46.402]                   signalCondition(cond)
[09:30:46.402]                 }
[09:30:46.402]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:30:46.402]                 "immediateCondition"))) {
[09:30:46.402]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:30:46.402]                   ...future.conditions[[length(...future.conditions) + 
[09:30:46.402]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:30:46.402]                   if (TRUE && !signal) {
[09:30:46.402]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:46.402]                     {
[09:30:46.402]                       inherits <- base::inherits
[09:30:46.402]                       invokeRestart <- base::invokeRestart
[09:30:46.402]                       is.null <- base::is.null
[09:30:46.402]                       muffled <- FALSE
[09:30:46.402]                       if (inherits(cond, "message")) {
[09:30:46.402]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:46.402]                         if (muffled) 
[09:30:46.402]                           invokeRestart("muffleMessage")
[09:30:46.402]                       }
[09:30:46.402]                       else if (inherits(cond, "warning")) {
[09:30:46.402]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:46.402]                         if (muffled) 
[09:30:46.402]                           invokeRestart("muffleWarning")
[09:30:46.402]                       }
[09:30:46.402]                       else if (inherits(cond, "condition")) {
[09:30:46.402]                         if (!is.null(pattern)) {
[09:30:46.402]                           computeRestarts <- base::computeRestarts
[09:30:46.402]                           grepl <- base::grepl
[09:30:46.402]                           restarts <- computeRestarts(cond)
[09:30:46.402]                           for (restart in restarts) {
[09:30:46.402]                             name <- restart$name
[09:30:46.402]                             if (is.null(name)) 
[09:30:46.402]                               next
[09:30:46.402]                             if (!grepl(pattern, name)) 
[09:30:46.402]                               next
[09:30:46.402]                             invokeRestart(restart)
[09:30:46.402]                             muffled <- TRUE
[09:30:46.402]                             break
[09:30:46.402]                           }
[09:30:46.402]                         }
[09:30:46.402]                       }
[09:30:46.402]                       invisible(muffled)
[09:30:46.402]                     }
[09:30:46.402]                     muffleCondition(cond, pattern = "^muffle")
[09:30:46.402]                   }
[09:30:46.402]                 }
[09:30:46.402]                 else {
[09:30:46.402]                   if (TRUE) {
[09:30:46.402]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:46.402]                     {
[09:30:46.402]                       inherits <- base::inherits
[09:30:46.402]                       invokeRestart <- base::invokeRestart
[09:30:46.402]                       is.null <- base::is.null
[09:30:46.402]                       muffled <- FALSE
[09:30:46.402]                       if (inherits(cond, "message")) {
[09:30:46.402]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:46.402]                         if (muffled) 
[09:30:46.402]                           invokeRestart("muffleMessage")
[09:30:46.402]                       }
[09:30:46.402]                       else if (inherits(cond, "warning")) {
[09:30:46.402]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:46.402]                         if (muffled) 
[09:30:46.402]                           invokeRestart("muffleWarning")
[09:30:46.402]                       }
[09:30:46.402]                       else if (inherits(cond, "condition")) {
[09:30:46.402]                         if (!is.null(pattern)) {
[09:30:46.402]                           computeRestarts <- base::computeRestarts
[09:30:46.402]                           grepl <- base::grepl
[09:30:46.402]                           restarts <- computeRestarts(cond)
[09:30:46.402]                           for (restart in restarts) {
[09:30:46.402]                             name <- restart$name
[09:30:46.402]                             if (is.null(name)) 
[09:30:46.402]                               next
[09:30:46.402]                             if (!grepl(pattern, name)) 
[09:30:46.402]                               next
[09:30:46.402]                             invokeRestart(restart)
[09:30:46.402]                             muffled <- TRUE
[09:30:46.402]                             break
[09:30:46.402]                           }
[09:30:46.402]                         }
[09:30:46.402]                       }
[09:30:46.402]                       invisible(muffled)
[09:30:46.402]                     }
[09:30:46.402]                     muffleCondition(cond, pattern = "^muffle")
[09:30:46.402]                   }
[09:30:46.402]                 }
[09:30:46.402]             }
[09:30:46.402]         }))
[09:30:46.402]     }, error = function(ex) {
[09:30:46.402]         base::structure(base::list(value = NULL, visible = NULL, 
[09:30:46.402]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:46.402]                 ...future.rng), started = ...future.startTime, 
[09:30:46.402]             finished = Sys.time(), session_uuid = NA_character_, 
[09:30:46.402]             version = "1.8"), class = "FutureResult")
[09:30:46.402]     }, finally = {
[09:30:46.402]         if (!identical(...future.workdir, getwd())) 
[09:30:46.402]             setwd(...future.workdir)
[09:30:46.402]         {
[09:30:46.402]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:30:46.402]                 ...future.oldOptions$nwarnings <- NULL
[09:30:46.402]             }
[09:30:46.402]             base::options(...future.oldOptions)
[09:30:46.402]             if (.Platform$OS.type == "windows") {
[09:30:46.402]                 old_names <- names(...future.oldEnvVars)
[09:30:46.402]                 envs <- base::Sys.getenv()
[09:30:46.402]                 names <- names(envs)
[09:30:46.402]                 common <- intersect(names, old_names)
[09:30:46.402]                 added <- setdiff(names, old_names)
[09:30:46.402]                 removed <- setdiff(old_names, names)
[09:30:46.402]                 changed <- common[...future.oldEnvVars[common] != 
[09:30:46.402]                   envs[common]]
[09:30:46.402]                 NAMES <- toupper(changed)
[09:30:46.402]                 args <- list()
[09:30:46.402]                 for (kk in seq_along(NAMES)) {
[09:30:46.402]                   name <- changed[[kk]]
[09:30:46.402]                   NAME <- NAMES[[kk]]
[09:30:46.402]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:46.402]                     next
[09:30:46.402]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:46.402]                 }
[09:30:46.402]                 NAMES <- toupper(added)
[09:30:46.402]                 for (kk in seq_along(NAMES)) {
[09:30:46.402]                   name <- added[[kk]]
[09:30:46.402]                   NAME <- NAMES[[kk]]
[09:30:46.402]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:46.402]                     next
[09:30:46.402]                   args[[name]] <- ""
[09:30:46.402]                 }
[09:30:46.402]                 NAMES <- toupper(removed)
[09:30:46.402]                 for (kk in seq_along(NAMES)) {
[09:30:46.402]                   name <- removed[[kk]]
[09:30:46.402]                   NAME <- NAMES[[kk]]
[09:30:46.402]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:46.402]                     next
[09:30:46.402]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:46.402]                 }
[09:30:46.402]                 if (length(args) > 0) 
[09:30:46.402]                   base::do.call(base::Sys.setenv, args = args)
[09:30:46.402]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:30:46.402]             }
[09:30:46.402]             else {
[09:30:46.402]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:30:46.402]             }
[09:30:46.402]             {
[09:30:46.402]                 if (base::length(...future.futureOptionsAdded) > 
[09:30:46.402]                   0L) {
[09:30:46.402]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:30:46.402]                   base::names(opts) <- ...future.futureOptionsAdded
[09:30:46.402]                   base::options(opts)
[09:30:46.402]                 }
[09:30:46.402]                 {
[09:30:46.402]                   {
[09:30:46.402]                     base::options(mc.cores = ...future.mc.cores.old)
[09:30:46.402]                     NULL
[09:30:46.402]                   }
[09:30:46.402]                   options(future.plan = NULL)
[09:30:46.402]                   if (is.na(NA_character_)) 
[09:30:46.402]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:30:46.402]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:30:46.402]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:30:46.402]                     .init = FALSE)
[09:30:46.402]                 }
[09:30:46.402]             }
[09:30:46.402]         }
[09:30:46.402]     })
[09:30:46.402]     if (TRUE) {
[09:30:46.402]         base::sink(type = "output", split = FALSE)
[09:30:46.402]         if (TRUE) {
[09:30:46.402]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:30:46.402]         }
[09:30:46.402]         else {
[09:30:46.402]             ...future.result["stdout"] <- base::list(NULL)
[09:30:46.402]         }
[09:30:46.402]         base::close(...future.stdout)
[09:30:46.402]         ...future.stdout <- NULL
[09:30:46.402]     }
[09:30:46.402]     ...future.result$conditions <- ...future.conditions
[09:30:46.402]     ...future.result$finished <- base::Sys.time()
[09:30:46.402]     ...future.result
[09:30:46.402] }
[09:30:46.405] assign_globals() ...
[09:30:46.405] List of 4
[09:30:46.405]  $ ii   : int 3
[09:30:46.405]  $ n    : int 4
[09:30:46.405]  $ C    : cplx [1:25, 1:25] -2.25+0.0306i -2.25+0.0918i -2.25+0.1531i ...
[09:30:46.405]   ..- attr(*, "region")=List of 2
[09:30:46.405]   .. ..$ xrange: num [1:2] -2.25 -0.781
[09:30:46.405]   .. ..$ yrange: num [1:2] 0.0306 1.5
[09:30:46.405]   ..- attr(*, "tile")= int [1:2] 2 1
[09:30:46.405]  $ delay:function (counts)  
[09:30:46.405]   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[09:30:46.405]   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561d65352678> 
[09:30:46.405]  - attr(*, "where")=List of 4
[09:30:46.405]   ..$ ii   :<environment: R_EmptyEnv> 
[09:30:46.405]   ..$ n    :<environment: R_EmptyEnv> 
[09:30:46.405]   ..$ C    :<environment: R_EmptyEnv> 
[09:30:46.405]   ..$ delay:<environment: R_EmptyEnv> 
[09:30:46.405]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:30:46.405]  - attr(*, "resolved")= logi FALSE
[09:30:46.405]  - attr(*, "total_size")= num 14584
[09:30:46.405]  - attr(*, "already-done")= logi TRUE
[09:30:46.416] - copied ‘ii’ to environment
[09:30:46.416] - copied ‘n’ to environment
[09:30:46.416] - copied ‘C’ to environment
[09:30:46.416] - reassign environment for ‘delay’
[09:30:46.417] - copied ‘delay’ to environment
[09:30:46.417] assign_globals() ... done
[09:30:46.417] requestCore(): workers = 2
[09:30:46.419] MulticoreFuture started
[09:30:46.420] - Launch lazy future ... done
[09:30:46.420] run() for ‘MulticoreFuture’ ... done
[09:30:46.420] - run() ... done
[09:30:46.420] - resolved() ...
[09:30:46.421] plan(): Setting new future strategy stack:
[09:30:46.421] List of future strategies:
[09:30:46.421] 1. sequential:
[09:30:46.421]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:46.421]    - tweaked: FALSE
[09:30:46.421]    - call: NULL
[09:30:46.422] plan(): nbrOfWorkers() = 1
[09:30:46.426] plan(): Setting new future strategy stack:
[09:30:46.426] List of future strategies:
[09:30:46.426] 1. multicore:
[09:30:46.426]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:30:46.426]    - tweaked: FALSE
[09:30:46.426]    - call: plan(strategy)
[09:30:46.431] plan(): nbrOfWorkers() = 2
[09:30:46.431] - resolved: FALSE
[09:30:46.431] - resolved() ... done
[09:30:46.431] resolved() for ‘MulticoreFuture’ ... done
[09:30:46.431] resolved() for ‘Future’ ...
[09:30:46.431] - state: ‘created’
[09:30:46.432] - run: TRUE
[09:30:46.432] - run() ...
[09:30:46.432] run() for ‘Future’ ...
[09:30:46.432] - state: ‘created’
[09:30:46.432] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[09:30:46.437] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:30:46.437] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[09:30:46.437]   - Field: ‘label’
[09:30:46.437]   - Field: ‘local’
[09:30:46.438]   - Field: ‘owner’
[09:30:46.438]   - Field: ‘envir’
[09:30:46.438]   - Field: ‘workers’
[09:30:46.438]   - Field: ‘packages’
[09:30:46.438]   - Field: ‘gc’
[09:30:46.438]   - Field: ‘job’
[09:30:46.438]   - Field: ‘conditions’
[09:30:46.439]   - Field: ‘expr’
[09:30:46.439]   - Field: ‘uuid’
[09:30:46.439]   - Field: ‘seed’
[09:30:46.439]   - Field: ‘version’
[09:30:46.439]   - Field: ‘result’
[09:30:46.439]   - Field: ‘asynchronous’
[09:30:46.439]   - Field: ‘calls’
[09:30:46.439]   - Field: ‘globals’
[09:30:46.440]   - Field: ‘stdout’
[09:30:46.440]   - Field: ‘earlySignal’
[09:30:46.440]   - Field: ‘lazy’
[09:30:46.440]   - Field: ‘state’
[09:30:46.440] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[09:30:46.440] - Launch lazy future ...
[09:30:46.441] Packages needed by the future expression (n = 1): ‘future’
[09:30:46.441] Packages needed by future strategies (n = 0): <none>
[09:30:46.442] {
[09:30:46.442]     {
[09:30:46.442]         {
[09:30:46.442]             ...future.startTime <- base::Sys.time()
[09:30:46.442]             {
[09:30:46.442]                 {
[09:30:46.442]                   {
[09:30:46.442]                     {
[09:30:46.442]                       {
[09:30:46.442]                         base::local({
[09:30:46.442]                           has_future <- base::requireNamespace("future", 
[09:30:46.442]                             quietly = TRUE)
[09:30:46.442]                           if (has_future) {
[09:30:46.442]                             ns <- base::getNamespace("future")
[09:30:46.442]                             version <- ns[[".package"]][["version"]]
[09:30:46.442]                             if (is.null(version)) 
[09:30:46.442]                               version <- utils::packageVersion("future")
[09:30:46.442]                           }
[09:30:46.442]                           else {
[09:30:46.442]                             version <- NULL
[09:30:46.442]                           }
[09:30:46.442]                           if (!has_future || version < "1.8.0") {
[09:30:46.442]                             info <- base::c(r_version = base::gsub("R version ", 
[09:30:46.442]                               "", base::R.version$version.string), 
[09:30:46.442]                               platform = base::sprintf("%s (%s-bit)", 
[09:30:46.442]                                 base::R.version$platform, 8 * 
[09:30:46.442]                                   base::.Machine$sizeof.pointer), 
[09:30:46.442]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[09:30:46.442]                                 "release", "version")], collapse = " "), 
[09:30:46.442]                               hostname = base::Sys.info()[["nodename"]])
[09:30:46.442]                             info <- base::sprintf("%s: %s", base::names(info), 
[09:30:46.442]                               info)
[09:30:46.442]                             info <- base::paste(info, collapse = "; ")
[09:30:46.442]                             if (!has_future) {
[09:30:46.442]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:30:46.442]                                 info)
[09:30:46.442]                             }
[09:30:46.442]                             else {
[09:30:46.442]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:30:46.442]                                 info, version)
[09:30:46.442]                             }
[09:30:46.442]                             base::stop(msg)
[09:30:46.442]                           }
[09:30:46.442]                         })
[09:30:46.442]                       }
[09:30:46.442]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[09:30:46.442]                       base::options(mc.cores = 1L)
[09:30:46.442]                     }
[09:30:46.442]                     base::local({
[09:30:46.442]                       for (pkg in "future") {
[09:30:46.442]                         base::loadNamespace(pkg)
[09:30:46.442]                         base::library(pkg, character.only = TRUE)
[09:30:46.442]                       }
[09:30:46.442]                     })
[09:30:46.442]                   }
[09:30:46.442]                   ...future.strategy.old <- future::plan("list")
[09:30:46.442]                   options(future.plan = NULL)
[09:30:46.442]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:30:46.442]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:30:46.442]                 }
[09:30:46.442]                 ...future.workdir <- getwd()
[09:30:46.442]             }
[09:30:46.442]             ...future.oldOptions <- base::as.list(base::.Options)
[09:30:46.442]             ...future.oldEnvVars <- base::Sys.getenv()
[09:30:46.442]         }
[09:30:46.442]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:30:46.442]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:30:46.442]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:30:46.442]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:30:46.442]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:30:46.442]             future.stdout.windows.reencode = NULL, width = 80L)
[09:30:46.442]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:30:46.442]             base::names(...future.oldOptions))
[09:30:46.442]     }
[09:30:46.442]     if (FALSE) {
[09:30:46.442]     }
[09:30:46.442]     else {
[09:30:46.442]         if (TRUE) {
[09:30:46.442]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:30:46.442]                 open = "w")
[09:30:46.442]         }
[09:30:46.442]         else {
[09:30:46.442]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:30:46.442]                 windows = "NUL", "/dev/null"), open = "w")
[09:30:46.442]         }
[09:30:46.442]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:30:46.442]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:30:46.442]             base::sink(type = "output", split = FALSE)
[09:30:46.442]             base::close(...future.stdout)
[09:30:46.442]         }, add = TRUE)
[09:30:46.442]     }
[09:30:46.442]     ...future.frame <- base::sys.nframe()
[09:30:46.442]     ...future.conditions <- base::list()
[09:30:46.442]     ...future.rng <- base::globalenv()$.Random.seed
[09:30:46.442]     if (FALSE) {
[09:30:46.442]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:30:46.442]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:30:46.442]     }
[09:30:46.442]     ...future.result <- base::tryCatch({
[09:30:46.442]         base::withCallingHandlers({
[09:30:46.442]             ...future.value <- base::withVisible(base::local({
[09:30:46.442]                 withCallingHandlers({
[09:30:46.442]                   {
[09:30:46.442]                     message(sprintf("Calculating tile #%d of %d ...", 
[09:30:46.442]                       ii, n), appendLF = FALSE)
[09:30:46.442]                     fit <- mandelbrot(C)
[09:30:46.442]                     delay(fit)
[09:30:46.442]                     message(" done")
[09:30:46.442]                     fit
[09:30:46.442]                   }
[09:30:46.442]                 }, immediateCondition = function(cond) {
[09:30:46.442]                   save_rds <- function (object, pathname, ...) 
[09:30:46.442]                   {
[09:30:46.442]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:30:46.442]                     if (file_test("-f", pathname_tmp)) {
[09:30:46.442]                       fi_tmp <- file.info(pathname_tmp)
[09:30:46.442]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:30:46.442]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:30:46.442]                         fi_tmp[["mtime"]])
[09:30:46.442]                     }
[09:30:46.442]                     tryCatch({
[09:30:46.442]                       saveRDS(object, file = pathname_tmp, ...)
[09:30:46.442]                     }, error = function(ex) {
[09:30:46.442]                       msg <- conditionMessage(ex)
[09:30:46.442]                       fi_tmp <- file.info(pathname_tmp)
[09:30:46.442]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:30:46.442]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:30:46.442]                         fi_tmp[["mtime"]], msg)
[09:30:46.442]                       ex$message <- msg
[09:30:46.442]                       stop(ex)
[09:30:46.442]                     })
[09:30:46.442]                     stopifnot(file_test("-f", pathname_tmp))
[09:30:46.442]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:30:46.442]                     if (!res || file_test("-f", pathname_tmp)) {
[09:30:46.442]                       fi_tmp <- file.info(pathname_tmp)
[09:30:46.442]                       fi <- file.info(pathname)
[09:30:46.442]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:30:46.442]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:30:46.442]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:30:46.442]                         fi[["size"]], fi[["mtime"]])
[09:30:46.442]                       stop(msg)
[09:30:46.442]                     }
[09:30:46.442]                     invisible(pathname)
[09:30:46.442]                   }
[09:30:46.442]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:30:46.442]                     rootPath = tempdir()) 
[09:30:46.442]                   {
[09:30:46.442]                     obj <- list(time = Sys.time(), condition = cond)
[09:30:46.442]                     file <- tempfile(pattern = class(cond)[1], 
[09:30:46.442]                       tmpdir = path, fileext = ".rds")
[09:30:46.442]                     save_rds(obj, file)
[09:30:46.442]                   }
[09:30:46.442]                   saveImmediateCondition(cond, path = "/tmp/RtmpARnuts/.future/immediateConditions")
[09:30:46.442]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:46.442]                   {
[09:30:46.442]                     inherits <- base::inherits
[09:30:46.442]                     invokeRestart <- base::invokeRestart
[09:30:46.442]                     is.null <- base::is.null
[09:30:46.442]                     muffled <- FALSE
[09:30:46.442]                     if (inherits(cond, "message")) {
[09:30:46.442]                       muffled <- grepl(pattern, "muffleMessage")
[09:30:46.442]                       if (muffled) 
[09:30:46.442]                         invokeRestart("muffleMessage")
[09:30:46.442]                     }
[09:30:46.442]                     else if (inherits(cond, "warning")) {
[09:30:46.442]                       muffled <- grepl(pattern, "muffleWarning")
[09:30:46.442]                       if (muffled) 
[09:30:46.442]                         invokeRestart("muffleWarning")
[09:30:46.442]                     }
[09:30:46.442]                     else if (inherits(cond, "condition")) {
[09:30:46.442]                       if (!is.null(pattern)) {
[09:30:46.442]                         computeRestarts <- base::computeRestarts
[09:30:46.442]                         grepl <- base::grepl
[09:30:46.442]                         restarts <- computeRestarts(cond)
[09:30:46.442]                         for (restart in restarts) {
[09:30:46.442]                           name <- restart$name
[09:30:46.442]                           if (is.null(name)) 
[09:30:46.442]                             next
[09:30:46.442]                           if (!grepl(pattern, name)) 
[09:30:46.442]                             next
[09:30:46.442]                           invokeRestart(restart)
[09:30:46.442]                           muffled <- TRUE
[09:30:46.442]                           break
[09:30:46.442]                         }
[09:30:46.442]                       }
[09:30:46.442]                     }
[09:30:46.442]                     invisible(muffled)
[09:30:46.442]                   }
[09:30:46.442]                   muffleCondition(cond)
[09:30:46.442]                 })
[09:30:46.442]             }))
[09:30:46.442]             future::FutureResult(value = ...future.value$value, 
[09:30:46.442]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:46.442]                   ...future.rng), globalenv = if (FALSE) 
[09:30:46.442]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:30:46.442]                     ...future.globalenv.names))
[09:30:46.442]                 else NULL, started = ...future.startTime, version = "1.8")
[09:30:46.442]         }, condition = base::local({
[09:30:46.442]             c <- base::c
[09:30:46.442]             inherits <- base::inherits
[09:30:46.442]             invokeRestart <- base::invokeRestart
[09:30:46.442]             length <- base::length
[09:30:46.442]             list <- base::list
[09:30:46.442]             seq.int <- base::seq.int
[09:30:46.442]             signalCondition <- base::signalCondition
[09:30:46.442]             sys.calls <- base::sys.calls
[09:30:46.442]             `[[` <- base::`[[`
[09:30:46.442]             `+` <- base::`+`
[09:30:46.442]             `<<-` <- base::`<<-`
[09:30:46.442]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:30:46.442]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:30:46.442]                   3L)]
[09:30:46.442]             }
[09:30:46.442]             function(cond) {
[09:30:46.442]                 is_error <- inherits(cond, "error")
[09:30:46.442]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:30:46.442]                   NULL)
[09:30:46.442]                 if (is_error) {
[09:30:46.442]                   sessionInformation <- function() {
[09:30:46.442]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:30:46.442]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:30:46.442]                       search = base::search(), system = base::Sys.info())
[09:30:46.442]                   }
[09:30:46.442]                   ...future.conditions[[length(...future.conditions) + 
[09:30:46.442]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:30:46.442]                     cond$call), session = sessionInformation(), 
[09:30:46.442]                     timestamp = base::Sys.time(), signaled = 0L)
[09:30:46.442]                   signalCondition(cond)
[09:30:46.442]                 }
[09:30:46.442]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:30:46.442]                 "immediateCondition"))) {
[09:30:46.442]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:30:46.442]                   ...future.conditions[[length(...future.conditions) + 
[09:30:46.442]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:30:46.442]                   if (TRUE && !signal) {
[09:30:46.442]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:46.442]                     {
[09:30:46.442]                       inherits <- base::inherits
[09:30:46.442]                       invokeRestart <- base::invokeRestart
[09:30:46.442]                       is.null <- base::is.null
[09:30:46.442]                       muffled <- FALSE
[09:30:46.442]                       if (inherits(cond, "message")) {
[09:30:46.442]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:46.442]                         if (muffled) 
[09:30:46.442]                           invokeRestart("muffleMessage")
[09:30:46.442]                       }
[09:30:46.442]                       else if (inherits(cond, "warning")) {
[09:30:46.442]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:46.442]                         if (muffled) 
[09:30:46.442]                           invokeRestart("muffleWarning")
[09:30:46.442]                       }
[09:30:46.442]                       else if (inherits(cond, "condition")) {
[09:30:46.442]                         if (!is.null(pattern)) {
[09:30:46.442]                           computeRestarts <- base::computeRestarts
[09:30:46.442]                           grepl <- base::grepl
[09:30:46.442]                           restarts <- computeRestarts(cond)
[09:30:46.442]                           for (restart in restarts) {
[09:30:46.442]                             name <- restart$name
[09:30:46.442]                             if (is.null(name)) 
[09:30:46.442]                               next
[09:30:46.442]                             if (!grepl(pattern, name)) 
[09:30:46.442]                               next
[09:30:46.442]                             invokeRestart(restart)
[09:30:46.442]                             muffled <- TRUE
[09:30:46.442]                             break
[09:30:46.442]                           }
[09:30:46.442]                         }
[09:30:46.442]                       }
[09:30:46.442]                       invisible(muffled)
[09:30:46.442]                     }
[09:30:46.442]                     muffleCondition(cond, pattern = "^muffle")
[09:30:46.442]                   }
[09:30:46.442]                 }
[09:30:46.442]                 else {
[09:30:46.442]                   if (TRUE) {
[09:30:46.442]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:46.442]                     {
[09:30:46.442]                       inherits <- base::inherits
[09:30:46.442]                       invokeRestart <- base::invokeRestart
[09:30:46.442]                       is.null <- base::is.null
[09:30:46.442]                       muffled <- FALSE
[09:30:46.442]                       if (inherits(cond, "message")) {
[09:30:46.442]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:46.442]                         if (muffled) 
[09:30:46.442]                           invokeRestart("muffleMessage")
[09:30:46.442]                       }
[09:30:46.442]                       else if (inherits(cond, "warning")) {
[09:30:46.442]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:46.442]                         if (muffled) 
[09:30:46.442]                           invokeRestart("muffleWarning")
[09:30:46.442]                       }
[09:30:46.442]                       else if (inherits(cond, "condition")) {
[09:30:46.442]                         if (!is.null(pattern)) {
[09:30:46.442]                           computeRestarts <- base::computeRestarts
[09:30:46.442]                           grepl <- base::grepl
[09:30:46.442]                           restarts <- computeRestarts(cond)
[09:30:46.442]                           for (restart in restarts) {
[09:30:46.442]                             name <- restart$name
[09:30:46.442]                             if (is.null(name)) 
[09:30:46.442]                               next
[09:30:46.442]                             if (!grepl(pattern, name)) 
[09:30:46.442]                               next
[09:30:46.442]                             invokeRestart(restart)
[09:30:46.442]                             muffled <- TRUE
[09:30:46.442]                             break
[09:30:46.442]                           }
[09:30:46.442]                         }
[09:30:46.442]                       }
[09:30:46.442]                       invisible(muffled)
[09:30:46.442]                     }
[09:30:46.442]                     muffleCondition(cond, pattern = "^muffle")
[09:30:46.442]                   }
[09:30:46.442]                 }
[09:30:46.442]             }
[09:30:46.442]         }))
[09:30:46.442]     }, error = function(ex) {
[09:30:46.442]         base::structure(base::list(value = NULL, visible = NULL, 
[09:30:46.442]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:46.442]                 ...future.rng), started = ...future.startTime, 
[09:30:46.442]             finished = Sys.time(), session_uuid = NA_character_, 
[09:30:46.442]             version = "1.8"), class = "FutureResult")
[09:30:46.442]     }, finally = {
[09:30:46.442]         if (!identical(...future.workdir, getwd())) 
[09:30:46.442]             setwd(...future.workdir)
[09:30:46.442]         {
[09:30:46.442]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:30:46.442]                 ...future.oldOptions$nwarnings <- NULL
[09:30:46.442]             }
[09:30:46.442]             base::options(...future.oldOptions)
[09:30:46.442]             if (.Platform$OS.type == "windows") {
[09:30:46.442]                 old_names <- names(...future.oldEnvVars)
[09:30:46.442]                 envs <- base::Sys.getenv()
[09:30:46.442]                 names <- names(envs)
[09:30:46.442]                 common <- intersect(names, old_names)
[09:30:46.442]                 added <- setdiff(names, old_names)
[09:30:46.442]                 removed <- setdiff(old_names, names)
[09:30:46.442]                 changed <- common[...future.oldEnvVars[common] != 
[09:30:46.442]                   envs[common]]
[09:30:46.442]                 NAMES <- toupper(changed)
[09:30:46.442]                 args <- list()
[09:30:46.442]                 for (kk in seq_along(NAMES)) {
[09:30:46.442]                   name <- changed[[kk]]
[09:30:46.442]                   NAME <- NAMES[[kk]]
[09:30:46.442]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:46.442]                     next
[09:30:46.442]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:46.442]                 }
[09:30:46.442]                 NAMES <- toupper(added)
[09:30:46.442]                 for (kk in seq_along(NAMES)) {
[09:30:46.442]                   name <- added[[kk]]
[09:30:46.442]                   NAME <- NAMES[[kk]]
[09:30:46.442]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:46.442]                     next
[09:30:46.442]                   args[[name]] <- ""
[09:30:46.442]                 }
[09:30:46.442]                 NAMES <- toupper(removed)
[09:30:46.442]                 for (kk in seq_along(NAMES)) {
[09:30:46.442]                   name <- removed[[kk]]
[09:30:46.442]                   NAME <- NAMES[[kk]]
[09:30:46.442]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:46.442]                     next
[09:30:46.442]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:46.442]                 }
[09:30:46.442]                 if (length(args) > 0) 
[09:30:46.442]                   base::do.call(base::Sys.setenv, args = args)
[09:30:46.442]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:30:46.442]             }
[09:30:46.442]             else {
[09:30:46.442]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:30:46.442]             }
[09:30:46.442]             {
[09:30:46.442]                 if (base::length(...future.futureOptionsAdded) > 
[09:30:46.442]                   0L) {
[09:30:46.442]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:30:46.442]                   base::names(opts) <- ...future.futureOptionsAdded
[09:30:46.442]                   base::options(opts)
[09:30:46.442]                 }
[09:30:46.442]                 {
[09:30:46.442]                   {
[09:30:46.442]                     base::options(mc.cores = ...future.mc.cores.old)
[09:30:46.442]                     NULL
[09:30:46.442]                   }
[09:30:46.442]                   options(future.plan = NULL)
[09:30:46.442]                   if (is.na(NA_character_)) 
[09:30:46.442]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:30:46.442]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:30:46.442]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:30:46.442]                     .init = FALSE)
[09:30:46.442]                 }
[09:30:46.442]             }
[09:30:46.442]         }
[09:30:46.442]     })
[09:30:46.442]     if (TRUE) {
[09:30:46.442]         base::sink(type = "output", split = FALSE)
[09:30:46.442]         if (TRUE) {
[09:30:46.442]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:30:46.442]         }
[09:30:46.442]         else {
[09:30:46.442]             ...future.result["stdout"] <- base::list(NULL)
[09:30:46.442]         }
[09:30:46.442]         base::close(...future.stdout)
[09:30:46.442]         ...future.stdout <- NULL
[09:30:46.442]     }
[09:30:46.442]     ...future.result$conditions <- ...future.conditions
[09:30:46.442]     ...future.result$finished <- base::Sys.time()
[09:30:46.442]     ...future.result
[09:30:46.442] }
[09:30:46.445] assign_globals() ...
[09:30:46.445] List of 4
[09:30:46.445]  $ ii   : int 4
[09:30:46.445]  $ n    : int 4
[09:30:46.445]  $ C    : cplx [1:25, 1:25] -0.719+0.0306i -0.719+0.0918i -0.719+0.1531i ...
[09:30:46.445]   ..- attr(*, "region")=List of 2
[09:30:46.445]   .. ..$ xrange: num [1:2] -0.719 0.75
[09:30:46.445]   .. ..$ yrange: num [1:2] 0.0306 1.5
[09:30:46.445]   ..- attr(*, "tile")= int [1:2] 2 2
[09:30:46.445]  $ delay:function (counts)  
[09:30:46.445]   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[09:30:46.445]   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561d65352678> 
[09:30:46.445]  - attr(*, "where")=List of 4
[09:30:46.445]   ..$ ii   :<environment: R_EmptyEnv> 
[09:30:46.445]   ..$ n    :<environment: R_EmptyEnv> 
[09:30:46.445]   ..$ C    :<environment: R_EmptyEnv> 
[09:30:46.445]   ..$ delay:<environment: R_EmptyEnv> 
[09:30:46.445]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:30:46.445]  - attr(*, "resolved")= logi FALSE
[09:30:46.445]  - attr(*, "total_size")= num 14584
[09:30:46.445]  - attr(*, "already-done")= logi TRUE
[09:30:46.454] - copied ‘ii’ to environment
[09:30:46.455] - copied ‘n’ to environment
[09:30:46.455] - copied ‘C’ to environment
[09:30:46.455] - reassign environment for ‘delay’
[09:30:46.455] - copied ‘delay’ to environment
[09:30:46.455] assign_globals() ... done
[09:30:46.455] requestCore(): workers = 2
[09:30:46.456] Poll #1 (0): usedCores() = 2, workers = 2
[09:30:46.466] result() for MulticoreFuture ...
[09:30:46.467] result() for MulticoreFuture ...
[09:30:46.468] result() for MulticoreFuture ... done
[09:30:46.468] signalConditions() ...
[09:30:46.468]  - include = ‘immediateCondition’
[09:30:46.468]  - exclude = 
[09:30:46.468]  - resignal = FALSE
[09:30:46.468]  - Number of conditions: 2
[09:30:46.469] signalConditions() ... done
[09:30:46.469] result() for MulticoreFuture ... done
[09:30:46.469] result() for MulticoreFuture ...
[09:30:46.469] result() for MulticoreFuture ... done
[09:30:46.469] signalConditions() ...
[09:30:46.469]  - include = ‘immediateCondition’
[09:30:46.470]  - exclude = 
[09:30:46.470]  - resignal = FALSE
[09:30:46.470]  - Number of conditions: 2
[09:30:46.470] signalConditions() ... done
[09:30:46.473] MulticoreFuture started
[09:30:46.474] - Launch lazy future ... done
[09:30:46.474] run() for ‘MulticoreFuture’ ... done
[09:30:46.474] - run() ... done
[09:30:46.474] - resolved() ...
[09:30:46.475] plan(): Setting new future strategy stack:
[09:30:46.475] List of future strategies:
[09:30:46.475] 1. sequential:
[09:30:46.475]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:46.475]    - tweaked: FALSE
[09:30:46.475]    - call: NULL
[09:30:46.476] plan(): nbrOfWorkers() = 1
[09:30:46.480] plan(): Setting new future strategy stack:
[09:30:46.480] List of future strategies:
[09:30:46.480] 1. multicore:
[09:30:46.480]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:30:46.480]    - tweaked: FALSE
[09:30:46.480]    - call: plan(strategy)
[09:30:46.485] - resolved: FALSE
[09:30:46.485] - resolved() ... done
[09:30:46.485] resolved() for ‘MulticoreFuture’ ... done
Plotting tile #2 of 4 ...
[09:30:46.485] plan(): nbrOfWorkers() = 2
[09:30:46.486] result() for MulticoreFuture ...
[09:30:46.486] result() for MulticoreFuture ... done
[09:30:46.486] result() for MulticoreFuture ...
[09:30:46.486] result() for MulticoreFuture ... done
[09:30:46.486] signalConditions() ...
[09:30:46.486]  - include = ‘immediateCondition’
[09:30:46.486]  - exclude = 
[09:30:46.486]  - resignal = FALSE
[09:30:46.487]  - Number of conditions: 2
[09:30:46.487] signalConditions() ... done
[09:30:46.487] Future state: ‘finished’
[09:30:46.487] result() for MulticoreFuture ...
[09:30:46.487] result() for MulticoreFuture ... done
[09:30:46.487] signalConditions() ...
[09:30:46.487]  - include = ‘condition’
[09:30:46.488]  - exclude = ‘immediateCondition’
[09:30:46.488]  - resignal = TRUE
[09:30:46.488]  - Number of conditions: 2
[09:30:46.488]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #2 of 4 ...[09:30:46.488]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[09:30:46.488] signalConditions() ... done
Plotting tile #3 of 4 ...
[09:30:46.490] result() for MulticoreFuture ...
[09:30:46.491] result() for MulticoreFuture ...
[09:30:46.491] result() for MulticoreFuture ... done
[09:30:46.491] signalConditions() ...
[09:30:46.491]  - include = ‘immediateCondition’
[09:30:46.491]  - exclude = 
[09:30:46.492]  - resignal = FALSE
[09:30:46.492]  - Number of conditions: 2
[09:30:46.492] signalConditions() ... done
[09:30:46.492] result() for MulticoreFuture ... done
[09:30:46.492] result() for MulticoreFuture ...
[09:30:46.492] result() for MulticoreFuture ... done
[09:30:46.492] signalConditions() ...
[09:30:46.492]  - include = ‘immediateCondition’
[09:30:46.493]  - exclude = 
[09:30:46.493]  - resignal = FALSE
[09:30:46.493]  - Number of conditions: 2
[09:30:46.493] signalConditions() ... done
[09:30:46.493] Future state: ‘finished’
[09:30:46.493] result() for MulticoreFuture ...
[09:30:46.493] result() for MulticoreFuture ... done
[09:30:46.493] signalConditions() ...
[09:30:46.494]  - include = ‘condition’
[09:30:46.494]  - exclude = ‘immediateCondition’
[09:30:46.494]  - resignal = TRUE
[09:30:46.494]  - Number of conditions: 2
[09:30:46.494]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #3 of 4 ...[09:30:46.494]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[09:30:46.494] signalConditions() ... done
Plotting tile #4 of 4 ...
[09:30:46.495] result() for MulticoreFuture ...
[09:30:46.496] result() for MulticoreFuture ...
[09:30:46.496] result() for MulticoreFuture ... done
[09:30:46.497] signalConditions() ...
[09:30:46.497]  - include = ‘immediateCondition’
[09:30:46.497]  - exclude = 
[09:30:46.497]  - resignal = FALSE
[09:30:46.497]  - Number of conditions: 2
[09:30:46.497] signalConditions() ... done
[09:30:46.497] result() for MulticoreFuture ... done
[09:30:46.497] result() for MulticoreFuture ...
[09:30:46.498] result() for MulticoreFuture ... done
[09:30:46.498] signalConditions() ...
[09:30:46.498]  - include = ‘immediateCondition’
[09:30:46.498]  - exclude = 
[09:30:46.498]  - resignal = FALSE
[09:30:46.498]  - Number of conditions: 2
[09:30:46.498] signalConditions() ... done
[09:30:46.498] Future state: ‘finished’
[09:30:46.498] result() for MulticoreFuture ...
[09:30:46.499] result() for MulticoreFuture ... done
[09:30:46.499] signalConditions() ...
[09:30:46.499]  - include = ‘condition’
[09:30:46.499]  - exclude = ‘immediateCondition’
[09:30:46.499]  - resignal = TRUE
[09:30:46.499]  - Number of conditions: 2
[09:30:46.499]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #4 of 4 ...[09:30:46.499]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[09:30:46.499] signalConditions() ... done

> close.screen()
[1] 1 2 3 4 5 6 7 8

> message("SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).\n")
SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).

- plan('multicore') ... DONE
- plan('multisession') ...
[09:30:46.501] plan(): Setting new future strategy stack:
[09:30:46.501] List of future strategies:
[09:30:46.501] 1. multisession:
[09:30:46.501]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[09:30:46.501]    - tweaked: FALSE
[09:30:46.501]    - call: plan(strategy)
[09:30:46.502] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[09:30:46.502] multisession:
[09:30:46.502] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[09:30:46.502] - tweaked: FALSE
[09:30:46.502] - call: plan(strategy)
[09:30:46.508] getGlobalsAndPackages() ...
[09:30:46.509] Not searching for globals
[09:30:46.509] - globals: [0] <none>
[09:30:46.509] getGlobalsAndPackages() ... DONE
[09:30:46.510] [local output] makeClusterPSOCK() ...
[09:30:46.568] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[09:30:46.569] [local output] Base port: 11258
[09:30:46.569] [local output] Getting setup options for 2 cluster nodes ...
[09:30:46.569] [local output]  - Node 1 of 2 ...
[09:30:46.569] [local output] localMachine=TRUE => revtunnel=FALSE

[09:30:46.570] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpARnuts/worker.rank=1.parallelly.parent=39978.9c2a218801f3.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpARnuts/worker.rank=1.parallelly.parent=39978.9c2a218801f3.pid")'’
[09:30:46.756] - Possible to infer worker's PID: TRUE
[09:30:46.756] [local output] Rscript port: 11258

[09:30:46.757] [local output]  - Node 2 of 2 ...
[09:30:46.757] [local output] localMachine=TRUE => revtunnel=FALSE

[09:30:46.758] [local output] Rscript port: 11258

[09:30:46.758] [local output] Getting setup options for 2 cluster nodes ... done
[09:30:46.758] [local output]  - Parallel setup requested for some PSOCK nodes
[09:30:46.759] [local output] Setting up PSOCK nodes in parallel
[09:30:46.759] List of 36
[09:30:46.759]  $ worker          : chr "localhost"
[09:30:46.759]   ..- attr(*, "localhost")= logi TRUE
[09:30:46.759]  $ master          : chr "localhost"
[09:30:46.759]  $ port            : int 11258
[09:30:46.759]  $ connectTimeout  : num 120
[09:30:46.759]  $ timeout         : num 2592000
[09:30:46.759]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[09:30:46.759]  $ homogeneous     : logi TRUE
[09:30:46.759]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[09:30:46.759]  $ rscript_envs    : NULL
[09:30:46.759]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[09:30:46.759]  $ rscript_startup : NULL
[09:30:46.759]  $ rscript_sh      : chr "sh"
[09:30:46.759]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[09:30:46.759]  $ methods         : logi TRUE
[09:30:46.759]  $ socketOptions   : chr "no-delay"
[09:30:46.759]  $ useXDR          : logi FALSE
[09:30:46.759]  $ outfile         : chr "/dev/null"
[09:30:46.759]  $ renice          : int NA
[09:30:46.759]  $ rshcmd          : NULL
[09:30:46.759]  $ user            : chr(0) 
[09:30:46.759]  $ revtunnel       : logi FALSE
[09:30:46.759]  $ rshlogfile      : NULL
[09:30:46.759]  $ rshopts         : chr(0) 
[09:30:46.759]  $ rank            : int 1
[09:30:46.759]  $ manual          : logi FALSE
[09:30:46.759]  $ dryrun          : logi FALSE
[09:30:46.759]  $ quiet           : logi FALSE
[09:30:46.759]  $ setup_strategy  : chr "parallel"
[09:30:46.759]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[09:30:46.759]  $ pidfile         : chr "/tmp/RtmpARnuts/worker.rank=1.parallelly.parent=39978.9c2a218801f3.pid"
[09:30:46.759]  $ rshcmd_label    : NULL
[09:30:46.759]  $ rsh_call        : NULL
[09:30:46.759]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[09:30:46.759]  $ localMachine    : logi TRUE
[09:30:46.759]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[09:30:46.759]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[09:30:46.759]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[09:30:46.759]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[09:30:46.759]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[09:30:46.759]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[09:30:46.759]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[09:30:46.759]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[09:30:46.759]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[09:30:46.759]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[09:30:46.759]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[09:30:46.759]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[09:30:46.759]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[09:30:46.759]  $ arguments       :List of 28
[09:30:46.759]   ..$ worker          : chr "localhost"
[09:30:46.759]   ..$ master          : NULL
[09:30:46.759]   ..$ port            : int 11258
[09:30:46.759]   ..$ connectTimeout  : num 120
[09:30:46.759]   ..$ timeout         : num 2592000
[09:30:46.759]   ..$ rscript         : NULL
[09:30:46.759]   ..$ homogeneous     : NULL
[09:30:46.759]   ..$ rscript_args    : NULL
[09:30:46.759]   ..$ rscript_envs    : NULL
[09:30:46.759]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[09:30:46.759]   ..$ rscript_startup : NULL
[09:30:46.759]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[09:30:46.759]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[09:30:46.759]   ..$ methods         : logi TRUE
[09:30:46.759]   ..$ socketOptions   : chr "no-delay"
[09:30:46.759]   ..$ useXDR          : logi FALSE
[09:30:46.759]   ..$ outfile         : chr "/dev/null"
[09:30:46.759]   ..$ renice          : int NA
[09:30:46.759]   ..$ rshcmd          : NULL
[09:30:46.759]   ..$ user            : NULL
[09:30:46.759]   ..$ revtunnel       : logi NA
[09:30:46.759]   ..$ rshlogfile      : NULL
[09:30:46.759]   ..$ rshopts         : NULL
[09:30:46.759]   ..$ rank            : int 1
[09:30:46.759]   ..$ manual          : logi FALSE
[09:30:46.759]   ..$ dryrun          : logi FALSE
[09:30:46.759]   ..$ quiet           : logi FALSE
[09:30:46.759]   ..$ setup_strategy  : chr "parallel"
[09:30:46.759]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[09:30:46.775] [local output] System call to launch all workers:
[09:30:46.775] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpARnuts/worker.rank=1.parallelly.parent=39978.9c2a218801f3.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11258 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[09:30:46.775] [local output] Starting PSOCK main server
[09:30:46.781] [local output] Workers launched
[09:30:46.781] [local output] Waiting for workers to connect back
[09:30:46.781]  - [local output] 0 workers out of 2 ready
[09:30:47.024]  - [local output] 0 workers out of 2 ready
[09:30:47.024]  - [local output] 1 workers out of 2 ready
[09:30:47.025]  - [local output] 2 workers out of 2 ready
[09:30:47.025] [local output] Launching of workers completed
[09:30:47.025] [local output] Collecting session information from workers
[09:30:47.026] [local output]  - Worker #1 of 2
[09:30:47.026] [local output]  - Worker #2 of 2
[09:30:47.026] [local output] makeClusterPSOCK() ... done
[09:30:47.037] Packages needed by the future expression (n = 0): <none>
[09:30:47.037] Packages needed by future strategies (n = 0): <none>
[09:30:47.038] {
[09:30:47.038]     {
[09:30:47.038]         {
[09:30:47.038]             ...future.startTime <- base::Sys.time()
[09:30:47.038]             {
[09:30:47.038]                 {
[09:30:47.038]                   {
[09:30:47.038]                     {
[09:30:47.038]                       base::local({
[09:30:47.038]                         has_future <- base::requireNamespace("future", 
[09:30:47.038]                           quietly = TRUE)
[09:30:47.038]                         if (has_future) {
[09:30:47.038]                           ns <- base::getNamespace("future")
[09:30:47.038]                           version <- ns[[".package"]][["version"]]
[09:30:47.038]                           if (is.null(version)) 
[09:30:47.038]                             version <- utils::packageVersion("future")
[09:30:47.038]                         }
[09:30:47.038]                         else {
[09:30:47.038]                           version <- NULL
[09:30:47.038]                         }
[09:30:47.038]                         if (!has_future || version < "1.8.0") {
[09:30:47.038]                           info <- base::c(r_version = base::gsub("R version ", 
[09:30:47.038]                             "", base::R.version$version.string), 
[09:30:47.038]                             platform = base::sprintf("%s (%s-bit)", 
[09:30:47.038]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:30:47.038]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:30:47.038]                               "release", "version")], collapse = " "), 
[09:30:47.038]                             hostname = base::Sys.info()[["nodename"]])
[09:30:47.038]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:30:47.038]                             info)
[09:30:47.038]                           info <- base::paste(info, collapse = "; ")
[09:30:47.038]                           if (!has_future) {
[09:30:47.038]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:30:47.038]                               info)
[09:30:47.038]                           }
[09:30:47.038]                           else {
[09:30:47.038]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:30:47.038]                               info, version)
[09:30:47.038]                           }
[09:30:47.038]                           base::stop(msg)
[09:30:47.038]                         }
[09:30:47.038]                       })
[09:30:47.038]                     }
[09:30:47.038]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:30:47.038]                     base::options(mc.cores = 1L)
[09:30:47.038]                   }
[09:30:47.038]                   ...future.strategy.old <- future::plan("list")
[09:30:47.038]                   options(future.plan = NULL)
[09:30:47.038]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:30:47.038]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:30:47.038]                 }
[09:30:47.038]                 ...future.workdir <- getwd()
[09:30:47.038]             }
[09:30:47.038]             ...future.oldOptions <- base::as.list(base::.Options)
[09:30:47.038]             ...future.oldEnvVars <- base::Sys.getenv()
[09:30:47.038]         }
[09:30:47.038]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:30:47.038]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:30:47.038]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:30:47.038]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:30:47.038]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:30:47.038]             future.stdout.windows.reencode = NULL, width = 80L)
[09:30:47.038]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:30:47.038]             base::names(...future.oldOptions))
[09:30:47.038]     }
[09:30:47.038]     if (FALSE) {
[09:30:47.038]     }
[09:30:47.038]     else {
[09:30:47.038]         if (TRUE) {
[09:30:47.038]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:30:47.038]                 open = "w")
[09:30:47.038]         }
[09:30:47.038]         else {
[09:30:47.038]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:30:47.038]                 windows = "NUL", "/dev/null"), open = "w")
[09:30:47.038]         }
[09:30:47.038]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:30:47.038]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:30:47.038]             base::sink(type = "output", split = FALSE)
[09:30:47.038]             base::close(...future.stdout)
[09:30:47.038]         }, add = TRUE)
[09:30:47.038]     }
[09:30:47.038]     ...future.frame <- base::sys.nframe()
[09:30:47.038]     ...future.conditions <- base::list()
[09:30:47.038]     ...future.rng <- base::globalenv()$.Random.seed
[09:30:47.038]     if (FALSE) {
[09:30:47.038]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:30:47.038]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:30:47.038]     }
[09:30:47.038]     ...future.result <- base::tryCatch({
[09:30:47.038]         base::withCallingHandlers({
[09:30:47.038]             ...future.value <- base::withVisible(base::local({
[09:30:47.038]                 ...future.makeSendCondition <- base::local({
[09:30:47.038]                   sendCondition <- NULL
[09:30:47.038]                   function(frame = 1L) {
[09:30:47.038]                     if (is.function(sendCondition)) 
[09:30:47.038]                       return(sendCondition)
[09:30:47.038]                     ns <- getNamespace("parallel")
[09:30:47.038]                     if (exists("sendData", mode = "function", 
[09:30:47.038]                       envir = ns)) {
[09:30:47.038]                       parallel_sendData <- get("sendData", mode = "function", 
[09:30:47.038]                         envir = ns)
[09:30:47.038]                       envir <- sys.frame(frame)
[09:30:47.038]                       master <- NULL
[09:30:47.038]                       while (!identical(envir, .GlobalEnv) && 
[09:30:47.038]                         !identical(envir, emptyenv())) {
[09:30:47.038]                         if (exists("master", mode = "list", envir = envir, 
[09:30:47.038]                           inherits = FALSE)) {
[09:30:47.038]                           master <- get("master", mode = "list", 
[09:30:47.038]                             envir = envir, inherits = FALSE)
[09:30:47.038]                           if (inherits(master, c("SOCKnode", 
[09:30:47.038]                             "SOCK0node"))) {
[09:30:47.038]                             sendCondition <<- function(cond) {
[09:30:47.038]                               data <- list(type = "VALUE", value = cond, 
[09:30:47.038]                                 success = TRUE)
[09:30:47.038]                               parallel_sendData(master, data)
[09:30:47.038]                             }
[09:30:47.038]                             return(sendCondition)
[09:30:47.038]                           }
[09:30:47.038]                         }
[09:30:47.038]                         frame <- frame + 1L
[09:30:47.038]                         envir <- sys.frame(frame)
[09:30:47.038]                       }
[09:30:47.038]                     }
[09:30:47.038]                     sendCondition <<- function(cond) NULL
[09:30:47.038]                   }
[09:30:47.038]                 })
[09:30:47.038]                 withCallingHandlers({
[09:30:47.038]                   NA
[09:30:47.038]                 }, immediateCondition = function(cond) {
[09:30:47.038]                   sendCondition <- ...future.makeSendCondition()
[09:30:47.038]                   sendCondition(cond)
[09:30:47.038]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:47.038]                   {
[09:30:47.038]                     inherits <- base::inherits
[09:30:47.038]                     invokeRestart <- base::invokeRestart
[09:30:47.038]                     is.null <- base::is.null
[09:30:47.038]                     muffled <- FALSE
[09:30:47.038]                     if (inherits(cond, "message")) {
[09:30:47.038]                       muffled <- grepl(pattern, "muffleMessage")
[09:30:47.038]                       if (muffled) 
[09:30:47.038]                         invokeRestart("muffleMessage")
[09:30:47.038]                     }
[09:30:47.038]                     else if (inherits(cond, "warning")) {
[09:30:47.038]                       muffled <- grepl(pattern, "muffleWarning")
[09:30:47.038]                       if (muffled) 
[09:30:47.038]                         invokeRestart("muffleWarning")
[09:30:47.038]                     }
[09:30:47.038]                     else if (inherits(cond, "condition")) {
[09:30:47.038]                       if (!is.null(pattern)) {
[09:30:47.038]                         computeRestarts <- base::computeRestarts
[09:30:47.038]                         grepl <- base::grepl
[09:30:47.038]                         restarts <- computeRestarts(cond)
[09:30:47.038]                         for (restart in restarts) {
[09:30:47.038]                           name <- restart$name
[09:30:47.038]                           if (is.null(name)) 
[09:30:47.038]                             next
[09:30:47.038]                           if (!grepl(pattern, name)) 
[09:30:47.038]                             next
[09:30:47.038]                           invokeRestart(restart)
[09:30:47.038]                           muffled <- TRUE
[09:30:47.038]                           break
[09:30:47.038]                         }
[09:30:47.038]                       }
[09:30:47.038]                     }
[09:30:47.038]                     invisible(muffled)
[09:30:47.038]                   }
[09:30:47.038]                   muffleCondition(cond)
[09:30:47.038]                 })
[09:30:47.038]             }))
[09:30:47.038]             future::FutureResult(value = ...future.value$value, 
[09:30:47.038]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:47.038]                   ...future.rng), globalenv = if (FALSE) 
[09:30:47.038]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:30:47.038]                     ...future.globalenv.names))
[09:30:47.038]                 else NULL, started = ...future.startTime, version = "1.8")
[09:30:47.038]         }, condition = base::local({
[09:30:47.038]             c <- base::c
[09:30:47.038]             inherits <- base::inherits
[09:30:47.038]             invokeRestart <- base::invokeRestart
[09:30:47.038]             length <- base::length
[09:30:47.038]             list <- base::list
[09:30:47.038]             seq.int <- base::seq.int
[09:30:47.038]             signalCondition <- base::signalCondition
[09:30:47.038]             sys.calls <- base::sys.calls
[09:30:47.038]             `[[` <- base::`[[`
[09:30:47.038]             `+` <- base::`+`
[09:30:47.038]             `<<-` <- base::`<<-`
[09:30:47.038]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:30:47.038]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:30:47.038]                   3L)]
[09:30:47.038]             }
[09:30:47.038]             function(cond) {
[09:30:47.038]                 is_error <- inherits(cond, "error")
[09:30:47.038]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:30:47.038]                   NULL)
[09:30:47.038]                 if (is_error) {
[09:30:47.038]                   sessionInformation <- function() {
[09:30:47.038]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:30:47.038]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:30:47.038]                       search = base::search(), system = base::Sys.info())
[09:30:47.038]                   }
[09:30:47.038]                   ...future.conditions[[length(...future.conditions) + 
[09:30:47.038]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:30:47.038]                     cond$call), session = sessionInformation(), 
[09:30:47.038]                     timestamp = base::Sys.time(), signaled = 0L)
[09:30:47.038]                   signalCondition(cond)
[09:30:47.038]                 }
[09:30:47.038]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:30:47.038]                 "immediateCondition"))) {
[09:30:47.038]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:30:47.038]                   ...future.conditions[[length(...future.conditions) + 
[09:30:47.038]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:30:47.038]                   if (TRUE && !signal) {
[09:30:47.038]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:47.038]                     {
[09:30:47.038]                       inherits <- base::inherits
[09:30:47.038]                       invokeRestart <- base::invokeRestart
[09:30:47.038]                       is.null <- base::is.null
[09:30:47.038]                       muffled <- FALSE
[09:30:47.038]                       if (inherits(cond, "message")) {
[09:30:47.038]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:47.038]                         if (muffled) 
[09:30:47.038]                           invokeRestart("muffleMessage")
[09:30:47.038]                       }
[09:30:47.038]                       else if (inherits(cond, "warning")) {
[09:30:47.038]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:47.038]                         if (muffled) 
[09:30:47.038]                           invokeRestart("muffleWarning")
[09:30:47.038]                       }
[09:30:47.038]                       else if (inherits(cond, "condition")) {
[09:30:47.038]                         if (!is.null(pattern)) {
[09:30:47.038]                           computeRestarts <- base::computeRestarts
[09:30:47.038]                           grepl <- base::grepl
[09:30:47.038]                           restarts <- computeRestarts(cond)
[09:30:47.038]                           for (restart in restarts) {
[09:30:47.038]                             name <- restart$name
[09:30:47.038]                             if (is.null(name)) 
[09:30:47.038]                               next
[09:30:47.038]                             if (!grepl(pattern, name)) 
[09:30:47.038]                               next
[09:30:47.038]                             invokeRestart(restart)
[09:30:47.038]                             muffled <- TRUE
[09:30:47.038]                             break
[09:30:47.038]                           }
[09:30:47.038]                         }
[09:30:47.038]                       }
[09:30:47.038]                       invisible(muffled)
[09:30:47.038]                     }
[09:30:47.038]                     muffleCondition(cond, pattern = "^muffle")
[09:30:47.038]                   }
[09:30:47.038]                 }
[09:30:47.038]                 else {
[09:30:47.038]                   if (TRUE) {
[09:30:47.038]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:47.038]                     {
[09:30:47.038]                       inherits <- base::inherits
[09:30:47.038]                       invokeRestart <- base::invokeRestart
[09:30:47.038]                       is.null <- base::is.null
[09:30:47.038]                       muffled <- FALSE
[09:30:47.038]                       if (inherits(cond, "message")) {
[09:30:47.038]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:47.038]                         if (muffled) 
[09:30:47.038]                           invokeRestart("muffleMessage")
[09:30:47.038]                       }
[09:30:47.038]                       else if (inherits(cond, "warning")) {
[09:30:47.038]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:47.038]                         if (muffled) 
[09:30:47.038]                           invokeRestart("muffleWarning")
[09:30:47.038]                       }
[09:30:47.038]                       else if (inherits(cond, "condition")) {
[09:30:47.038]                         if (!is.null(pattern)) {
[09:30:47.038]                           computeRestarts <- base::computeRestarts
[09:30:47.038]                           grepl <- base::grepl
[09:30:47.038]                           restarts <- computeRestarts(cond)
[09:30:47.038]                           for (restart in restarts) {
[09:30:47.038]                             name <- restart$name
[09:30:47.038]                             if (is.null(name)) 
[09:30:47.038]                               next
[09:30:47.038]                             if (!grepl(pattern, name)) 
[09:30:47.038]                               next
[09:30:47.038]                             invokeRestart(restart)
[09:30:47.038]                             muffled <- TRUE
[09:30:47.038]                             break
[09:30:47.038]                           }
[09:30:47.038]                         }
[09:30:47.038]                       }
[09:30:47.038]                       invisible(muffled)
[09:30:47.038]                     }
[09:30:47.038]                     muffleCondition(cond, pattern = "^muffle")
[09:30:47.038]                   }
[09:30:47.038]                 }
[09:30:47.038]             }
[09:30:47.038]         }))
[09:30:47.038]     }, error = function(ex) {
[09:30:47.038]         base::structure(base::list(value = NULL, visible = NULL, 
[09:30:47.038]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:47.038]                 ...future.rng), started = ...future.startTime, 
[09:30:47.038]             finished = Sys.time(), session_uuid = NA_character_, 
[09:30:47.038]             version = "1.8"), class = "FutureResult")
[09:30:47.038]     }, finally = {
[09:30:47.038]         if (!identical(...future.workdir, getwd())) 
[09:30:47.038]             setwd(...future.workdir)
[09:30:47.038]         {
[09:30:47.038]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:30:47.038]                 ...future.oldOptions$nwarnings <- NULL
[09:30:47.038]             }
[09:30:47.038]             base::options(...future.oldOptions)
[09:30:47.038]             if (.Platform$OS.type == "windows") {
[09:30:47.038]                 old_names <- names(...future.oldEnvVars)
[09:30:47.038]                 envs <- base::Sys.getenv()
[09:30:47.038]                 names <- names(envs)
[09:30:47.038]                 common <- intersect(names, old_names)
[09:30:47.038]                 added <- setdiff(names, old_names)
[09:30:47.038]                 removed <- setdiff(old_names, names)
[09:30:47.038]                 changed <- common[...future.oldEnvVars[common] != 
[09:30:47.038]                   envs[common]]
[09:30:47.038]                 NAMES <- toupper(changed)
[09:30:47.038]                 args <- list()
[09:30:47.038]                 for (kk in seq_along(NAMES)) {
[09:30:47.038]                   name <- changed[[kk]]
[09:30:47.038]                   NAME <- NAMES[[kk]]
[09:30:47.038]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:47.038]                     next
[09:30:47.038]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:47.038]                 }
[09:30:47.038]                 NAMES <- toupper(added)
[09:30:47.038]                 for (kk in seq_along(NAMES)) {
[09:30:47.038]                   name <- added[[kk]]
[09:30:47.038]                   NAME <- NAMES[[kk]]
[09:30:47.038]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:47.038]                     next
[09:30:47.038]                   args[[name]] <- ""
[09:30:47.038]                 }
[09:30:47.038]                 NAMES <- toupper(removed)
[09:30:47.038]                 for (kk in seq_along(NAMES)) {
[09:30:47.038]                   name <- removed[[kk]]
[09:30:47.038]                   NAME <- NAMES[[kk]]
[09:30:47.038]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:47.038]                     next
[09:30:47.038]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:47.038]                 }
[09:30:47.038]                 if (length(args) > 0) 
[09:30:47.038]                   base::do.call(base::Sys.setenv, args = args)
[09:30:47.038]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:30:47.038]             }
[09:30:47.038]             else {
[09:30:47.038]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:30:47.038]             }
[09:30:47.038]             {
[09:30:47.038]                 if (base::length(...future.futureOptionsAdded) > 
[09:30:47.038]                   0L) {
[09:30:47.038]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:30:47.038]                   base::names(opts) <- ...future.futureOptionsAdded
[09:30:47.038]                   base::options(opts)
[09:30:47.038]                 }
[09:30:47.038]                 {
[09:30:47.038]                   {
[09:30:47.038]                     base::options(mc.cores = ...future.mc.cores.old)
[09:30:47.038]                     NULL
[09:30:47.038]                   }
[09:30:47.038]                   options(future.plan = NULL)
[09:30:47.038]                   if (is.na(NA_character_)) 
[09:30:47.038]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:30:47.038]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:30:47.038]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:30:47.038]                     .init = FALSE)
[09:30:47.038]                 }
[09:30:47.038]             }
[09:30:47.038]         }
[09:30:47.038]     })
[09:30:47.038]     if (TRUE) {
[09:30:47.038]         base::sink(type = "output", split = FALSE)
[09:30:47.038]         if (TRUE) {
[09:30:47.038]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:30:47.038]         }
[09:30:47.038]         else {
[09:30:47.038]             ...future.result["stdout"] <- base::list(NULL)
[09:30:47.038]         }
[09:30:47.038]         base::close(...future.stdout)
[09:30:47.038]         ...future.stdout <- NULL
[09:30:47.038]     }
[09:30:47.038]     ...future.result$conditions <- ...future.conditions
[09:30:47.038]     ...future.result$finished <- base::Sys.time()
[09:30:47.038]     ...future.result
[09:30:47.038] }
[09:30:47.090] MultisessionFuture started
[09:30:47.090] result() for ClusterFuture ...
[09:30:47.091] receiveMessageFromWorker() for ClusterFuture ...
[09:30:47.091] - Validating connection of MultisessionFuture
[09:30:47.122] - received message: FutureResult
[09:30:47.122] - Received FutureResult
[09:30:47.122] - Erased future from FutureRegistry
[09:30:47.122] result() for ClusterFuture ...
[09:30:47.122] - result already collected: FutureResult
[09:30:47.123] result() for ClusterFuture ... done
[09:30:47.123] receiveMessageFromWorker() for ClusterFuture ... done
[09:30:47.123] result() for ClusterFuture ... done
[09:30:47.123] result() for ClusterFuture ...
[09:30:47.123] - result already collected: FutureResult
[09:30:47.123] result() for ClusterFuture ... done
[09:30:47.123] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[09:30:47.127] plan(): nbrOfWorkers() = 2


	demo(mandelbrot)
	---- ~~~~~~~~~~

> library("future")

> library("graphics")

> plot_what_is_done <- function(counts) {
+   for (kk in seq_along(counts)) {
+     f <- counts[[kk]]
+ 
+     ## Already plotted?
+     if (!inherits(f, "Future")) next
+ 
+     ## Not resolved?
+     if (!resolved(f)) next
+ 
+     message(sprintf("Plotting tile #%d of %d ...", kk, n))
+     counts[[kk]] <- value(f)
+     screen(kk)
+     plot(counts[[kk]])
+   }
+ 
+   counts
+ }

> ## Options
> region <- getOption("future.demo.mandelbrot.region", 1L)

> if (!is.list(region)) {
+   if (region == 1L) {
+     region <- list(xmid = -0.75, ymid = 0.0, side = 3.0)
+   } else if (region == 2L) {
+     region <- list(xmid = 0.283, ymid = -0.0095, side = 0.00026)
+   } else if (region == 3L) {
+     region <- list(xmid = 0.282989, ymid = -0.01, side = 3e-8)
+   }
+ }

> nrow <- getOption("future.demo.mandelbrot.nrow", 3L)

> resolution <- getOption("future.demo.mandelbrot.resolution", 400L)

> delay <- getOption("future.demo.mandelbrot.delay", interactive())

> if (isTRUE(delay)) {
+   delay <- function(counts) Sys.sleep(1.0)
+ } else if (!is.function(delay)) {
+   delay <- function(counts) {}
+ }

> ## Generate Mandelbrot tiles to be computed
> Cs <- mandelbrot_tiles(xmid = region$xmid, ymid = region$ymid,
+                        side = region$side, nrow = nrow,
+                        resolution = resolution)

> if (interactive()) {
+   dev.new()
+   plot.new()
+   split.screen(dim(Cs))
+   for (ii in seq_along(Cs)) {
+     screen(ii)
+     par(mar = c(0, 0, 0, 0))
+     text(x = 1 / 2, y = 1 / 2, sprintf("Future #%d\nunresolved", ii), cex = 2)
+   }
+ } else {
+   split.screen(dim(Cs))
+ }
[1]  9 10 11 12

> ## Create all Mandelbrot tiles via lazy futures
> n <- length(Cs)

> message(sprintf("Creating %d Mandelbrot tiles:", n), appendLF = FALSE)
Creating 4 Mandelbrot tiles:
> counts <- lapply(seq_along(Cs), FUN=function(ii) {
+   message(" ", ii, appendLF = FALSE)
+   C <- Cs[[ii]]
+   future({
+     message(sprintf("Calculating tile #%d of %d ...", ii, n), appendLF = FALSE)
+     fit <- mandelbrot(C)
+ 
+     ## Emulate slowness
+     delay(fit)
+ 
+     message(" done")
+     fit
+   }, lazy = TRUE)
+ })
 1[09:30:47.130] getGlobalsAndPackages() ...
[09:30:47.131] Searching for globals...
[09:30:47.134] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[09:30:47.134] Searching for globals ... DONE
[09:30:47.134] Resolving globals: FALSE
[09:30:47.135] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[09:30:47.135] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[09:30:47.135] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[09:30:47.135] - packages: [1] ‘future’
[09:30:47.135] getGlobalsAndPackages() ... DONE
 2[09:30:47.139] getGlobalsAndPackages() ...
[09:30:47.139] Searching for globals...
[09:30:47.143] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[09:30:47.143] Searching for globals ... DONE
[09:30:47.143] Resolving globals: FALSE
[09:30:47.143] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[09:30:47.144] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[09:30:47.144] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[09:30:47.144] - packages: [1] ‘future’
[09:30:47.144] getGlobalsAndPackages() ... DONE
 3[09:30:47.144] getGlobalsAndPackages() ...
[09:30:47.144] Searching for globals...
[09:30:47.148] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[09:30:47.148] Searching for globals ... DONE
[09:30:47.148] Resolving globals: FALSE
[09:30:47.148] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[09:30:47.149] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[09:30:47.149] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[09:30:47.149] - packages: [1] ‘future’
[09:30:47.149] getGlobalsAndPackages() ... DONE
 4[09:30:47.149] getGlobalsAndPackages() ...
[09:30:47.149] Searching for globals...
[09:30:47.153] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[09:30:47.153] Searching for globals ... DONE
[09:30:47.153] Resolving globals: FALSE
[09:30:47.153] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[09:30:47.154] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[09:30:47.154] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[09:30:47.154] - packages: [1] ‘future’
[09:30:47.154] getGlobalsAndPackages() ... DONE

> message(".")
.

> ## Calculate and plot tiles
> repeat {
+   counts <- plot_what_is_done(counts)
+   if (!any(sapply(counts, FUN = inherits, "Future"))) break
+ }
[09:30:47.164] resolved() for ‘Future’ ...
[09:30:47.165] - state: ‘created’
[09:30:47.165] - run: TRUE
[09:30:47.165] - run() ...
[09:30:47.165] run() for ‘Future’ ...
[09:30:47.165] - state: ‘created’
[09:30:47.165] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:30:47.179] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:30:47.179] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:30:47.179]   - Field: ‘node’
[09:30:47.179]   - Field: ‘label’
[09:30:47.179]   - Field: ‘local’
[09:30:47.179]   - Field: ‘owner’
[09:30:47.179]   - Field: ‘envir’
[09:30:47.179]   - Field: ‘workers’
[09:30:47.179]   - Field: ‘packages’
[09:30:47.180]   - Field: ‘gc’
[09:30:47.180]   - Field: ‘conditions’
[09:30:47.180]   - Field: ‘persistent’
[09:30:47.180]   - Field: ‘expr’
[09:30:47.180]   - Field: ‘uuid’
[09:30:47.180]   - Field: ‘seed’
[09:30:47.180]   - Field: ‘version’
[09:30:47.180]   - Field: ‘result’
[09:30:47.180]   - Field: ‘asynchronous’
[09:30:47.180]   - Field: ‘calls’
[09:30:47.180]   - Field: ‘globals’
[09:30:47.181]   - Field: ‘stdout’
[09:30:47.181]   - Field: ‘earlySignal’
[09:30:47.181]   - Field: ‘lazy’
[09:30:47.181]   - Field: ‘state’
[09:30:47.181] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:30:47.181] - Launch lazy future ...
[09:30:47.181] Packages needed by the future expression (n = 1): ‘future’
[09:30:47.181] Packages needed by future strategies (n = 0): <none>
[09:30:47.182] {
[09:30:47.182]     {
[09:30:47.182]         {
[09:30:47.182]             ...future.startTime <- base::Sys.time()
[09:30:47.182]             {
[09:30:47.182]                 {
[09:30:47.182]                   {
[09:30:47.182]                     {
[09:30:47.182]                       {
[09:30:47.182]                         base::local({
[09:30:47.182]                           has_future <- base::requireNamespace("future", 
[09:30:47.182]                             quietly = TRUE)
[09:30:47.182]                           if (has_future) {
[09:30:47.182]                             ns <- base::getNamespace("future")
[09:30:47.182]                             version <- ns[[".package"]][["version"]]
[09:30:47.182]                             if (is.null(version)) 
[09:30:47.182]                               version <- utils::packageVersion("future")
[09:30:47.182]                           }
[09:30:47.182]                           else {
[09:30:47.182]                             version <- NULL
[09:30:47.182]                           }
[09:30:47.182]                           if (!has_future || version < "1.8.0") {
[09:30:47.182]                             info <- base::c(r_version = base::gsub("R version ", 
[09:30:47.182]                               "", base::R.version$version.string), 
[09:30:47.182]                               platform = base::sprintf("%s (%s-bit)", 
[09:30:47.182]                                 base::R.version$platform, 8 * 
[09:30:47.182]                                   base::.Machine$sizeof.pointer), 
[09:30:47.182]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[09:30:47.182]                                 "release", "version")], collapse = " "), 
[09:30:47.182]                               hostname = base::Sys.info()[["nodename"]])
[09:30:47.182]                             info <- base::sprintf("%s: %s", base::names(info), 
[09:30:47.182]                               info)
[09:30:47.182]                             info <- base::paste(info, collapse = "; ")
[09:30:47.182]                             if (!has_future) {
[09:30:47.182]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:30:47.182]                                 info)
[09:30:47.182]                             }
[09:30:47.182]                             else {
[09:30:47.182]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:30:47.182]                                 info, version)
[09:30:47.182]                             }
[09:30:47.182]                             base::stop(msg)
[09:30:47.182]                           }
[09:30:47.182]                         })
[09:30:47.182]                       }
[09:30:47.182]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[09:30:47.182]                       base::options(mc.cores = 1L)
[09:30:47.182]                     }
[09:30:47.182]                     base::local({
[09:30:47.182]                       for (pkg in "future") {
[09:30:47.182]                         base::loadNamespace(pkg)
[09:30:47.182]                         base::library(pkg, character.only = TRUE)
[09:30:47.182]                       }
[09:30:47.182]                     })
[09:30:47.182]                   }
[09:30:47.182]                   ...future.strategy.old <- future::plan("list")
[09:30:47.182]                   options(future.plan = NULL)
[09:30:47.182]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:30:47.182]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:30:47.182]                 }
[09:30:47.182]                 ...future.workdir <- getwd()
[09:30:47.182]             }
[09:30:47.182]             ...future.oldOptions <- base::as.list(base::.Options)
[09:30:47.182]             ...future.oldEnvVars <- base::Sys.getenv()
[09:30:47.182]         }
[09:30:47.182]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:30:47.182]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:30:47.182]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:30:47.182]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:30:47.182]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:30:47.182]             future.stdout.windows.reencode = NULL, width = 80L)
[09:30:47.182]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:30:47.182]             base::names(...future.oldOptions))
[09:30:47.182]     }
[09:30:47.182]     if (FALSE) {
[09:30:47.182]     }
[09:30:47.182]     else {
[09:30:47.182]         if (TRUE) {
[09:30:47.182]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:30:47.182]                 open = "w")
[09:30:47.182]         }
[09:30:47.182]         else {
[09:30:47.182]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:30:47.182]                 windows = "NUL", "/dev/null"), open = "w")
[09:30:47.182]         }
[09:30:47.182]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:30:47.182]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:30:47.182]             base::sink(type = "output", split = FALSE)
[09:30:47.182]             base::close(...future.stdout)
[09:30:47.182]         }, add = TRUE)
[09:30:47.182]     }
[09:30:47.182]     ...future.frame <- base::sys.nframe()
[09:30:47.182]     ...future.conditions <- base::list()
[09:30:47.182]     ...future.rng <- base::globalenv()$.Random.seed
[09:30:47.182]     if (FALSE) {
[09:30:47.182]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:30:47.182]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:30:47.182]     }
[09:30:47.182]     ...future.result <- base::tryCatch({
[09:30:47.182]         base::withCallingHandlers({
[09:30:47.182]             ...future.value <- base::withVisible(base::local({
[09:30:47.182]                 ...future.makeSendCondition <- base::local({
[09:30:47.182]                   sendCondition <- NULL
[09:30:47.182]                   function(frame = 1L) {
[09:30:47.182]                     if (is.function(sendCondition)) 
[09:30:47.182]                       return(sendCondition)
[09:30:47.182]                     ns <- getNamespace("parallel")
[09:30:47.182]                     if (exists("sendData", mode = "function", 
[09:30:47.182]                       envir = ns)) {
[09:30:47.182]                       parallel_sendData <- get("sendData", mode = "function", 
[09:30:47.182]                         envir = ns)
[09:30:47.182]                       envir <- sys.frame(frame)
[09:30:47.182]                       master <- NULL
[09:30:47.182]                       while (!identical(envir, .GlobalEnv) && 
[09:30:47.182]                         !identical(envir, emptyenv())) {
[09:30:47.182]                         if (exists("master", mode = "list", envir = envir, 
[09:30:47.182]                           inherits = FALSE)) {
[09:30:47.182]                           master <- get("master", mode = "list", 
[09:30:47.182]                             envir = envir, inherits = FALSE)
[09:30:47.182]                           if (inherits(master, c("SOCKnode", 
[09:30:47.182]                             "SOCK0node"))) {
[09:30:47.182]                             sendCondition <<- function(cond) {
[09:30:47.182]                               data <- list(type = "VALUE", value = cond, 
[09:30:47.182]                                 success = TRUE)
[09:30:47.182]                               parallel_sendData(master, data)
[09:30:47.182]                             }
[09:30:47.182]                             return(sendCondition)
[09:30:47.182]                           }
[09:30:47.182]                         }
[09:30:47.182]                         frame <- frame + 1L
[09:30:47.182]                         envir <- sys.frame(frame)
[09:30:47.182]                       }
[09:30:47.182]                     }
[09:30:47.182]                     sendCondition <<- function(cond) NULL
[09:30:47.182]                   }
[09:30:47.182]                 })
[09:30:47.182]                 withCallingHandlers({
[09:30:47.182]                   {
[09:30:47.182]                     message(sprintf("Calculating tile #%d of %d ...", 
[09:30:47.182]                       ii, n), appendLF = FALSE)
[09:30:47.182]                     fit <- mandelbrot(C)
[09:30:47.182]                     delay(fit)
[09:30:47.182]                     message(" done")
[09:30:47.182]                     fit
[09:30:47.182]                   }
[09:30:47.182]                 }, immediateCondition = function(cond) {
[09:30:47.182]                   sendCondition <- ...future.makeSendCondition()
[09:30:47.182]                   sendCondition(cond)
[09:30:47.182]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:47.182]                   {
[09:30:47.182]                     inherits <- base::inherits
[09:30:47.182]                     invokeRestart <- base::invokeRestart
[09:30:47.182]                     is.null <- base::is.null
[09:30:47.182]                     muffled <- FALSE
[09:30:47.182]                     if (inherits(cond, "message")) {
[09:30:47.182]                       muffled <- grepl(pattern, "muffleMessage")
[09:30:47.182]                       if (muffled) 
[09:30:47.182]                         invokeRestart("muffleMessage")
[09:30:47.182]                     }
[09:30:47.182]                     else if (inherits(cond, "warning")) {
[09:30:47.182]                       muffled <- grepl(pattern, "muffleWarning")
[09:30:47.182]                       if (muffled) 
[09:30:47.182]                         invokeRestart("muffleWarning")
[09:30:47.182]                     }
[09:30:47.182]                     else if (inherits(cond, "condition")) {
[09:30:47.182]                       if (!is.null(pattern)) {
[09:30:47.182]                         computeRestarts <- base::computeRestarts
[09:30:47.182]                         grepl <- base::grepl
[09:30:47.182]                         restarts <- computeRestarts(cond)
[09:30:47.182]                         for (restart in restarts) {
[09:30:47.182]                           name <- restart$name
[09:30:47.182]                           if (is.null(name)) 
[09:30:47.182]                             next
[09:30:47.182]                           if (!grepl(pattern, name)) 
[09:30:47.182]                             next
[09:30:47.182]                           invokeRestart(restart)
[09:30:47.182]                           muffled <- TRUE
[09:30:47.182]                           break
[09:30:47.182]                         }
[09:30:47.182]                       }
[09:30:47.182]                     }
[09:30:47.182]                     invisible(muffled)
[09:30:47.182]                   }
[09:30:47.182]                   muffleCondition(cond)
[09:30:47.182]                 })
[09:30:47.182]             }))
[09:30:47.182]             future::FutureResult(value = ...future.value$value, 
[09:30:47.182]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:47.182]                   ...future.rng), globalenv = if (FALSE) 
[09:30:47.182]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:30:47.182]                     ...future.globalenv.names))
[09:30:47.182]                 else NULL, started = ...future.startTime, version = "1.8")
[09:30:47.182]         }, condition = base::local({
[09:30:47.182]             c <- base::c
[09:30:47.182]             inherits <- base::inherits
[09:30:47.182]             invokeRestart <- base::invokeRestart
[09:30:47.182]             length <- base::length
[09:30:47.182]             list <- base::list
[09:30:47.182]             seq.int <- base::seq.int
[09:30:47.182]             signalCondition <- base::signalCondition
[09:30:47.182]             sys.calls <- base::sys.calls
[09:30:47.182]             `[[` <- base::`[[`
[09:30:47.182]             `+` <- base::`+`
[09:30:47.182]             `<<-` <- base::`<<-`
[09:30:47.182]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:30:47.182]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:30:47.182]                   3L)]
[09:30:47.182]             }
[09:30:47.182]             function(cond) {
[09:30:47.182]                 is_error <- inherits(cond, "error")
[09:30:47.182]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:30:47.182]                   NULL)
[09:30:47.182]                 if (is_error) {
[09:30:47.182]                   sessionInformation <- function() {
[09:30:47.182]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:30:47.182]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:30:47.182]                       search = base::search(), system = base::Sys.info())
[09:30:47.182]                   }
[09:30:47.182]                   ...future.conditions[[length(...future.conditions) + 
[09:30:47.182]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:30:47.182]                     cond$call), session = sessionInformation(), 
[09:30:47.182]                     timestamp = base::Sys.time(), signaled = 0L)
[09:30:47.182]                   signalCondition(cond)
[09:30:47.182]                 }
[09:30:47.182]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:30:47.182]                 "immediateCondition"))) {
[09:30:47.182]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:30:47.182]                   ...future.conditions[[length(...future.conditions) + 
[09:30:47.182]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:30:47.182]                   if (TRUE && !signal) {
[09:30:47.182]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:47.182]                     {
[09:30:47.182]                       inherits <- base::inherits
[09:30:47.182]                       invokeRestart <- base::invokeRestart
[09:30:47.182]                       is.null <- base::is.null
[09:30:47.182]                       muffled <- FALSE
[09:30:47.182]                       if (inherits(cond, "message")) {
[09:30:47.182]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:47.182]                         if (muffled) 
[09:30:47.182]                           invokeRestart("muffleMessage")
[09:30:47.182]                       }
[09:30:47.182]                       else if (inherits(cond, "warning")) {
[09:30:47.182]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:47.182]                         if (muffled) 
[09:30:47.182]                           invokeRestart("muffleWarning")
[09:30:47.182]                       }
[09:30:47.182]                       else if (inherits(cond, "condition")) {
[09:30:47.182]                         if (!is.null(pattern)) {
[09:30:47.182]                           computeRestarts <- base::computeRestarts
[09:30:47.182]                           grepl <- base::grepl
[09:30:47.182]                           restarts <- computeRestarts(cond)
[09:30:47.182]                           for (restart in restarts) {
[09:30:47.182]                             name <- restart$name
[09:30:47.182]                             if (is.null(name)) 
[09:30:47.182]                               next
[09:30:47.182]                             if (!grepl(pattern, name)) 
[09:30:47.182]                               next
[09:30:47.182]                             invokeRestart(restart)
[09:30:47.182]                             muffled <- TRUE
[09:30:47.182]                             break
[09:30:47.182]                           }
[09:30:47.182]                         }
[09:30:47.182]                       }
[09:30:47.182]                       invisible(muffled)
[09:30:47.182]                     }
[09:30:47.182]                     muffleCondition(cond, pattern = "^muffle")
[09:30:47.182]                   }
[09:30:47.182]                 }
[09:30:47.182]                 else {
[09:30:47.182]                   if (TRUE) {
[09:30:47.182]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:47.182]                     {
[09:30:47.182]                       inherits <- base::inherits
[09:30:47.182]                       invokeRestart <- base::invokeRestart
[09:30:47.182]                       is.null <- base::is.null
[09:30:47.182]                       muffled <- FALSE
[09:30:47.182]                       if (inherits(cond, "message")) {
[09:30:47.182]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:47.182]                         if (muffled) 
[09:30:47.182]                           invokeRestart("muffleMessage")
[09:30:47.182]                       }
[09:30:47.182]                       else if (inherits(cond, "warning")) {
[09:30:47.182]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:47.182]                         if (muffled) 
[09:30:47.182]                           invokeRestart("muffleWarning")
[09:30:47.182]                       }
[09:30:47.182]                       else if (inherits(cond, "condition")) {
[09:30:47.182]                         if (!is.null(pattern)) {
[09:30:47.182]                           computeRestarts <- base::computeRestarts
[09:30:47.182]                           grepl <- base::grepl
[09:30:47.182]                           restarts <- computeRestarts(cond)
[09:30:47.182]                           for (restart in restarts) {
[09:30:47.182]                             name <- restart$name
[09:30:47.182]                             if (is.null(name)) 
[09:30:47.182]                               next
[09:30:47.182]                             if (!grepl(pattern, name)) 
[09:30:47.182]                               next
[09:30:47.182]                             invokeRestart(restart)
[09:30:47.182]                             muffled <- TRUE
[09:30:47.182]                             break
[09:30:47.182]                           }
[09:30:47.182]                         }
[09:30:47.182]                       }
[09:30:47.182]                       invisible(muffled)
[09:30:47.182]                     }
[09:30:47.182]                     muffleCondition(cond, pattern = "^muffle")
[09:30:47.182]                   }
[09:30:47.182]                 }
[09:30:47.182]             }
[09:30:47.182]         }))
[09:30:47.182]     }, error = function(ex) {
[09:30:47.182]         base::structure(base::list(value = NULL, visible = NULL, 
[09:30:47.182]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:47.182]                 ...future.rng), started = ...future.startTime, 
[09:30:47.182]             finished = Sys.time(), session_uuid = NA_character_, 
[09:30:47.182]             version = "1.8"), class = "FutureResult")
[09:30:47.182]     }, finally = {
[09:30:47.182]         if (!identical(...future.workdir, getwd())) 
[09:30:47.182]             setwd(...future.workdir)
[09:30:47.182]         {
[09:30:47.182]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:30:47.182]                 ...future.oldOptions$nwarnings <- NULL
[09:30:47.182]             }
[09:30:47.182]             base::options(...future.oldOptions)
[09:30:47.182]             if (.Platform$OS.type == "windows") {
[09:30:47.182]                 old_names <- names(...future.oldEnvVars)
[09:30:47.182]                 envs <- base::Sys.getenv()
[09:30:47.182]                 names <- names(envs)
[09:30:47.182]                 common <- intersect(names, old_names)
[09:30:47.182]                 added <- setdiff(names, old_names)
[09:30:47.182]                 removed <- setdiff(old_names, names)
[09:30:47.182]                 changed <- common[...future.oldEnvVars[common] != 
[09:30:47.182]                   envs[common]]
[09:30:47.182]                 NAMES <- toupper(changed)
[09:30:47.182]                 args <- list()
[09:30:47.182]                 for (kk in seq_along(NAMES)) {
[09:30:47.182]                   name <- changed[[kk]]
[09:30:47.182]                   NAME <- NAMES[[kk]]
[09:30:47.182]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:47.182]                     next
[09:30:47.182]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:47.182]                 }
[09:30:47.182]                 NAMES <- toupper(added)
[09:30:47.182]                 for (kk in seq_along(NAMES)) {
[09:30:47.182]                   name <- added[[kk]]
[09:30:47.182]                   NAME <- NAMES[[kk]]
[09:30:47.182]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:47.182]                     next
[09:30:47.182]                   args[[name]] <- ""
[09:30:47.182]                 }
[09:30:47.182]                 NAMES <- toupper(removed)
[09:30:47.182]                 for (kk in seq_along(NAMES)) {
[09:30:47.182]                   name <- removed[[kk]]
[09:30:47.182]                   NAME <- NAMES[[kk]]
[09:30:47.182]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:47.182]                     next
[09:30:47.182]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:47.182]                 }
[09:30:47.182]                 if (length(args) > 0) 
[09:30:47.182]                   base::do.call(base::Sys.setenv, args = args)
[09:30:47.182]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:30:47.182]             }
[09:30:47.182]             else {
[09:30:47.182]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:30:47.182]             }
[09:30:47.182]             {
[09:30:47.182]                 if (base::length(...future.futureOptionsAdded) > 
[09:30:47.182]                   0L) {
[09:30:47.182]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:30:47.182]                   base::names(opts) <- ...future.futureOptionsAdded
[09:30:47.182]                   base::options(opts)
[09:30:47.182]                 }
[09:30:47.182]                 {
[09:30:47.182]                   {
[09:30:47.182]                     base::options(mc.cores = ...future.mc.cores.old)
[09:30:47.182]                     NULL
[09:30:47.182]                   }
[09:30:47.182]                   options(future.plan = NULL)
[09:30:47.182]                   if (is.na(NA_character_)) 
[09:30:47.182]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:30:47.182]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:30:47.182]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:30:47.182]                     .init = FALSE)
[09:30:47.182]                 }
[09:30:47.182]             }
[09:30:47.182]         }
[09:30:47.182]     })
[09:30:47.182]     if (TRUE) {
[09:30:47.182]         base::sink(type = "output", split = FALSE)
[09:30:47.182]         if (TRUE) {
[09:30:47.182]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:30:47.182]         }
[09:30:47.182]         else {
[09:30:47.182]             ...future.result["stdout"] <- base::list(NULL)
[09:30:47.182]         }
[09:30:47.182]         base::close(...future.stdout)
[09:30:47.182]         ...future.stdout <- NULL
[09:30:47.182]     }
[09:30:47.182]     ...future.result$conditions <- ...future.conditions
[09:30:47.182]     ...future.result$finished <- base::Sys.time()
[09:30:47.182]     ...future.result
[09:30:47.182] }
[09:30:47.184] Exporting 4 global objects (14.24 KiB) to cluster node #1 ...
[09:30:47.185] Exporting ‘ii’ (56 bytes) to cluster node #1 ...
[09:30:47.185] Exporting ‘ii’ (56 bytes) to cluster node #1 ... DONE
[09:30:47.185] Exporting ‘n’ (56 bytes) to cluster node #1 ...
[09:30:47.185] Exporting ‘n’ (56 bytes) to cluster node #1 ... DONE
[09:30:47.185] Exporting ‘C’ (10.72 KiB) to cluster node #1 ...
[09:30:47.228] Exporting ‘C’ (10.72 KiB) to cluster node #1 ... DONE
[09:30:47.228] Exporting ‘delay’ (3.41 KiB) to cluster node #1 ...
[09:30:47.272] Exporting ‘delay’ (3.41 KiB) to cluster node #1 ... DONE
[09:30:47.272] Exporting 4 global objects (14.24 KiB) to cluster node #1 ... DONE
[09:30:47.273] MultisessionFuture started
[09:30:47.273] - Launch lazy future ... done
[09:30:47.273] run() for ‘MultisessionFuture’ ... done
[09:30:47.273] - run() ... done
[09:30:47.273] - resolved() ...
[09:30:47.284] - resolved: FALSE
[09:30:47.284] - resolved() ... done
[09:30:47.284] resolved() for ‘MultisessionFuture’ ... done
[09:30:47.284] resolved() for ‘Future’ ...
[09:30:47.284] - state: ‘created’
[09:30:47.284] - run: TRUE
[09:30:47.285] - run() ...
[09:30:47.285] run() for ‘Future’ ...
[09:30:47.285] - state: ‘created’
[09:30:47.285] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:30:47.298] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:30:47.298] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:30:47.299]   - Field: ‘node’
[09:30:47.299]   - Field: ‘label’
[09:30:47.299]   - Field: ‘local’
[09:30:47.299]   - Field: ‘owner’
[09:30:47.299]   - Field: ‘envir’
[09:30:47.299]   - Field: ‘workers’
[09:30:47.299]   - Field: ‘packages’
[09:30:47.299]   - Field: ‘gc’
[09:30:47.299]   - Field: ‘conditions’
[09:30:47.299]   - Field: ‘persistent’
[09:30:47.299]   - Field: ‘expr’
[09:30:47.300]   - Field: ‘uuid’
[09:30:47.300]   - Field: ‘seed’
[09:30:47.300]   - Field: ‘version’
[09:30:47.300]   - Field: ‘result’
[09:30:47.300]   - Field: ‘asynchronous’
[09:30:47.300]   - Field: ‘calls’
[09:30:47.300]   - Field: ‘globals’
[09:30:47.300]   - Field: ‘stdout’
[09:30:47.300]   - Field: ‘earlySignal’
[09:30:47.300]   - Field: ‘lazy’
[09:30:47.300]   - Field: ‘state’
[09:30:47.300] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:30:47.301] - Launch lazy future ...
[09:30:47.301] Packages needed by the future expression (n = 1): ‘future’
[09:30:47.301] Packages needed by future strategies (n = 0): <none>
[09:30:47.301] {
[09:30:47.301]     {
[09:30:47.301]         {
[09:30:47.301]             ...future.startTime <- base::Sys.time()
[09:30:47.301]             {
[09:30:47.301]                 {
[09:30:47.301]                   {
[09:30:47.301]                     {
[09:30:47.301]                       {
[09:30:47.301]                         base::local({
[09:30:47.301]                           has_future <- base::requireNamespace("future", 
[09:30:47.301]                             quietly = TRUE)
[09:30:47.301]                           if (has_future) {
[09:30:47.301]                             ns <- base::getNamespace("future")
[09:30:47.301]                             version <- ns[[".package"]][["version"]]
[09:30:47.301]                             if (is.null(version)) 
[09:30:47.301]                               version <- utils::packageVersion("future")
[09:30:47.301]                           }
[09:30:47.301]                           else {
[09:30:47.301]                             version <- NULL
[09:30:47.301]                           }
[09:30:47.301]                           if (!has_future || version < "1.8.0") {
[09:30:47.301]                             info <- base::c(r_version = base::gsub("R version ", 
[09:30:47.301]                               "", base::R.version$version.string), 
[09:30:47.301]                               platform = base::sprintf("%s (%s-bit)", 
[09:30:47.301]                                 base::R.version$platform, 8 * 
[09:30:47.301]                                   base::.Machine$sizeof.pointer), 
[09:30:47.301]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[09:30:47.301]                                 "release", "version")], collapse = " "), 
[09:30:47.301]                               hostname = base::Sys.info()[["nodename"]])
[09:30:47.301]                             info <- base::sprintf("%s: %s", base::names(info), 
[09:30:47.301]                               info)
[09:30:47.301]                             info <- base::paste(info, collapse = "; ")
[09:30:47.301]                             if (!has_future) {
[09:30:47.301]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:30:47.301]                                 info)
[09:30:47.301]                             }
[09:30:47.301]                             else {
[09:30:47.301]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:30:47.301]                                 info, version)
[09:30:47.301]                             }
[09:30:47.301]                             base::stop(msg)
[09:30:47.301]                           }
[09:30:47.301]                         })
[09:30:47.301]                       }
[09:30:47.301]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[09:30:47.301]                       base::options(mc.cores = 1L)
[09:30:47.301]                     }
[09:30:47.301]                     base::local({
[09:30:47.301]                       for (pkg in "future") {
[09:30:47.301]                         base::loadNamespace(pkg)
[09:30:47.301]                         base::library(pkg, character.only = TRUE)
[09:30:47.301]                       }
[09:30:47.301]                     })
[09:30:47.301]                   }
[09:30:47.301]                   ...future.strategy.old <- future::plan("list")
[09:30:47.301]                   options(future.plan = NULL)
[09:30:47.301]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:30:47.301]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:30:47.301]                 }
[09:30:47.301]                 ...future.workdir <- getwd()
[09:30:47.301]             }
[09:30:47.301]             ...future.oldOptions <- base::as.list(base::.Options)
[09:30:47.301]             ...future.oldEnvVars <- base::Sys.getenv()
[09:30:47.301]         }
[09:30:47.301]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:30:47.301]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:30:47.301]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:30:47.301]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:30:47.301]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:30:47.301]             future.stdout.windows.reencode = NULL, width = 80L)
[09:30:47.301]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:30:47.301]             base::names(...future.oldOptions))
[09:30:47.301]     }
[09:30:47.301]     if (FALSE) {
[09:30:47.301]     }
[09:30:47.301]     else {
[09:30:47.301]         if (TRUE) {
[09:30:47.301]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:30:47.301]                 open = "w")
[09:30:47.301]         }
[09:30:47.301]         else {
[09:30:47.301]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:30:47.301]                 windows = "NUL", "/dev/null"), open = "w")
[09:30:47.301]         }
[09:30:47.301]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:30:47.301]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:30:47.301]             base::sink(type = "output", split = FALSE)
[09:30:47.301]             base::close(...future.stdout)
[09:30:47.301]         }, add = TRUE)
[09:30:47.301]     }
[09:30:47.301]     ...future.frame <- base::sys.nframe()
[09:30:47.301]     ...future.conditions <- base::list()
[09:30:47.301]     ...future.rng <- base::globalenv()$.Random.seed
[09:30:47.301]     if (FALSE) {
[09:30:47.301]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:30:47.301]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:30:47.301]     }
[09:30:47.301]     ...future.result <- base::tryCatch({
[09:30:47.301]         base::withCallingHandlers({
[09:30:47.301]             ...future.value <- base::withVisible(base::local({
[09:30:47.301]                 ...future.makeSendCondition <- base::local({
[09:30:47.301]                   sendCondition <- NULL
[09:30:47.301]                   function(frame = 1L) {
[09:30:47.301]                     if (is.function(sendCondition)) 
[09:30:47.301]                       return(sendCondition)
[09:30:47.301]                     ns <- getNamespace("parallel")
[09:30:47.301]                     if (exists("sendData", mode = "function", 
[09:30:47.301]                       envir = ns)) {
[09:30:47.301]                       parallel_sendData <- get("sendData", mode = "function", 
[09:30:47.301]                         envir = ns)
[09:30:47.301]                       envir <- sys.frame(frame)
[09:30:47.301]                       master <- NULL
[09:30:47.301]                       while (!identical(envir, .GlobalEnv) && 
[09:30:47.301]                         !identical(envir, emptyenv())) {
[09:30:47.301]                         if (exists("master", mode = "list", envir = envir, 
[09:30:47.301]                           inherits = FALSE)) {
[09:30:47.301]                           master <- get("master", mode = "list", 
[09:30:47.301]                             envir = envir, inherits = FALSE)
[09:30:47.301]                           if (inherits(master, c("SOCKnode", 
[09:30:47.301]                             "SOCK0node"))) {
[09:30:47.301]                             sendCondition <<- function(cond) {
[09:30:47.301]                               data <- list(type = "VALUE", value = cond, 
[09:30:47.301]                                 success = TRUE)
[09:30:47.301]                               parallel_sendData(master, data)
[09:30:47.301]                             }
[09:30:47.301]                             return(sendCondition)
[09:30:47.301]                           }
[09:30:47.301]                         }
[09:30:47.301]                         frame <- frame + 1L
[09:30:47.301]                         envir <- sys.frame(frame)
[09:30:47.301]                       }
[09:30:47.301]                     }
[09:30:47.301]                     sendCondition <<- function(cond) NULL
[09:30:47.301]                   }
[09:30:47.301]                 })
[09:30:47.301]                 withCallingHandlers({
[09:30:47.301]                   {
[09:30:47.301]                     message(sprintf("Calculating tile #%d of %d ...", 
[09:30:47.301]                       ii, n), appendLF = FALSE)
[09:30:47.301]                     fit <- mandelbrot(C)
[09:30:47.301]                     delay(fit)
[09:30:47.301]                     message(" done")
[09:30:47.301]                     fit
[09:30:47.301]                   }
[09:30:47.301]                 }, immediateCondition = function(cond) {
[09:30:47.301]                   sendCondition <- ...future.makeSendCondition()
[09:30:47.301]                   sendCondition(cond)
[09:30:47.301]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:47.301]                   {
[09:30:47.301]                     inherits <- base::inherits
[09:30:47.301]                     invokeRestart <- base::invokeRestart
[09:30:47.301]                     is.null <- base::is.null
[09:30:47.301]                     muffled <- FALSE
[09:30:47.301]                     if (inherits(cond, "message")) {
[09:30:47.301]                       muffled <- grepl(pattern, "muffleMessage")
[09:30:47.301]                       if (muffled) 
[09:30:47.301]                         invokeRestart("muffleMessage")
[09:30:47.301]                     }
[09:30:47.301]                     else if (inherits(cond, "warning")) {
[09:30:47.301]                       muffled <- grepl(pattern, "muffleWarning")
[09:30:47.301]                       if (muffled) 
[09:30:47.301]                         invokeRestart("muffleWarning")
[09:30:47.301]                     }
[09:30:47.301]                     else if (inherits(cond, "condition")) {
[09:30:47.301]                       if (!is.null(pattern)) {
[09:30:47.301]                         computeRestarts <- base::computeRestarts
[09:30:47.301]                         grepl <- base::grepl
[09:30:47.301]                         restarts <- computeRestarts(cond)
[09:30:47.301]                         for (restart in restarts) {
[09:30:47.301]                           name <- restart$name
[09:30:47.301]                           if (is.null(name)) 
[09:30:47.301]                             next
[09:30:47.301]                           if (!grepl(pattern, name)) 
[09:30:47.301]                             next
[09:30:47.301]                           invokeRestart(restart)
[09:30:47.301]                           muffled <- TRUE
[09:30:47.301]                           break
[09:30:47.301]                         }
[09:30:47.301]                       }
[09:30:47.301]                     }
[09:30:47.301]                     invisible(muffled)
[09:30:47.301]                   }
[09:30:47.301]                   muffleCondition(cond)
[09:30:47.301]                 })
[09:30:47.301]             }))
[09:30:47.301]             future::FutureResult(value = ...future.value$value, 
[09:30:47.301]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:47.301]                   ...future.rng), globalenv = if (FALSE) 
[09:30:47.301]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:30:47.301]                     ...future.globalenv.names))
[09:30:47.301]                 else NULL, started = ...future.startTime, version = "1.8")
[09:30:47.301]         }, condition = base::local({
[09:30:47.301]             c <- base::c
[09:30:47.301]             inherits <- base::inherits
[09:30:47.301]             invokeRestart <- base::invokeRestart
[09:30:47.301]             length <- base::length
[09:30:47.301]             list <- base::list
[09:30:47.301]             seq.int <- base::seq.int
[09:30:47.301]             signalCondition <- base::signalCondition
[09:30:47.301]             sys.calls <- base::sys.calls
[09:30:47.301]             `[[` <- base::`[[`
[09:30:47.301]             `+` <- base::`+`
[09:30:47.301]             `<<-` <- base::`<<-`
[09:30:47.301]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:30:47.301]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:30:47.301]                   3L)]
[09:30:47.301]             }
[09:30:47.301]             function(cond) {
[09:30:47.301]                 is_error <- inherits(cond, "error")
[09:30:47.301]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:30:47.301]                   NULL)
[09:30:47.301]                 if (is_error) {
[09:30:47.301]                   sessionInformation <- function() {
[09:30:47.301]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:30:47.301]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:30:47.301]                       search = base::search(), system = base::Sys.info())
[09:30:47.301]                   }
[09:30:47.301]                   ...future.conditions[[length(...future.conditions) + 
[09:30:47.301]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:30:47.301]                     cond$call), session = sessionInformation(), 
[09:30:47.301]                     timestamp = base::Sys.time(), signaled = 0L)
[09:30:47.301]                   signalCondition(cond)
[09:30:47.301]                 }
[09:30:47.301]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:30:47.301]                 "immediateCondition"))) {
[09:30:47.301]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:30:47.301]                   ...future.conditions[[length(...future.conditions) + 
[09:30:47.301]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:30:47.301]                   if (TRUE && !signal) {
[09:30:47.301]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:47.301]                     {
[09:30:47.301]                       inherits <- base::inherits
[09:30:47.301]                       invokeRestart <- base::invokeRestart
[09:30:47.301]                       is.null <- base::is.null
[09:30:47.301]                       muffled <- FALSE
[09:30:47.301]                       if (inherits(cond, "message")) {
[09:30:47.301]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:47.301]                         if (muffled) 
[09:30:47.301]                           invokeRestart("muffleMessage")
[09:30:47.301]                       }
[09:30:47.301]                       else if (inherits(cond, "warning")) {
[09:30:47.301]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:47.301]                         if (muffled) 
[09:30:47.301]                           invokeRestart("muffleWarning")
[09:30:47.301]                       }
[09:30:47.301]                       else if (inherits(cond, "condition")) {
[09:30:47.301]                         if (!is.null(pattern)) {
[09:30:47.301]                           computeRestarts <- base::computeRestarts
[09:30:47.301]                           grepl <- base::grepl
[09:30:47.301]                           restarts <- computeRestarts(cond)
[09:30:47.301]                           for (restart in restarts) {
[09:30:47.301]                             name <- restart$name
[09:30:47.301]                             if (is.null(name)) 
[09:30:47.301]                               next
[09:30:47.301]                             if (!grepl(pattern, name)) 
[09:30:47.301]                               next
[09:30:47.301]                             invokeRestart(restart)
[09:30:47.301]                             muffled <- TRUE
[09:30:47.301]                             break
[09:30:47.301]                           }
[09:30:47.301]                         }
[09:30:47.301]                       }
[09:30:47.301]                       invisible(muffled)
[09:30:47.301]                     }
[09:30:47.301]                     muffleCondition(cond, pattern = "^muffle")
[09:30:47.301]                   }
[09:30:47.301]                 }
[09:30:47.301]                 else {
[09:30:47.301]                   if (TRUE) {
[09:30:47.301]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:47.301]                     {
[09:30:47.301]                       inherits <- base::inherits
[09:30:47.301]                       invokeRestart <- base::invokeRestart
[09:30:47.301]                       is.null <- base::is.null
[09:30:47.301]                       muffled <- FALSE
[09:30:47.301]                       if (inherits(cond, "message")) {
[09:30:47.301]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:47.301]                         if (muffled) 
[09:30:47.301]                           invokeRestart("muffleMessage")
[09:30:47.301]                       }
[09:30:47.301]                       else if (inherits(cond, "warning")) {
[09:30:47.301]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:47.301]                         if (muffled) 
[09:30:47.301]                           invokeRestart("muffleWarning")
[09:30:47.301]                       }
[09:30:47.301]                       else if (inherits(cond, "condition")) {
[09:30:47.301]                         if (!is.null(pattern)) {
[09:30:47.301]                           computeRestarts <- base::computeRestarts
[09:30:47.301]                           grepl <- base::grepl
[09:30:47.301]                           restarts <- computeRestarts(cond)
[09:30:47.301]                           for (restart in restarts) {
[09:30:47.301]                             name <- restart$name
[09:30:47.301]                             if (is.null(name)) 
[09:30:47.301]                               next
[09:30:47.301]                             if (!grepl(pattern, name)) 
[09:30:47.301]                               next
[09:30:47.301]                             invokeRestart(restart)
[09:30:47.301]                             muffled <- TRUE
[09:30:47.301]                             break
[09:30:47.301]                           }
[09:30:47.301]                         }
[09:30:47.301]                       }
[09:30:47.301]                       invisible(muffled)
[09:30:47.301]                     }
[09:30:47.301]                     muffleCondition(cond, pattern = "^muffle")
[09:30:47.301]                   }
[09:30:47.301]                 }
[09:30:47.301]             }
[09:30:47.301]         }))
[09:30:47.301]     }, error = function(ex) {
[09:30:47.301]         base::structure(base::list(value = NULL, visible = NULL, 
[09:30:47.301]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:47.301]                 ...future.rng), started = ...future.startTime, 
[09:30:47.301]             finished = Sys.time(), session_uuid = NA_character_, 
[09:30:47.301]             version = "1.8"), class = "FutureResult")
[09:30:47.301]     }, finally = {
[09:30:47.301]         if (!identical(...future.workdir, getwd())) 
[09:30:47.301]             setwd(...future.workdir)
[09:30:47.301]         {
[09:30:47.301]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:30:47.301]                 ...future.oldOptions$nwarnings <- NULL
[09:30:47.301]             }
[09:30:47.301]             base::options(...future.oldOptions)
[09:30:47.301]             if (.Platform$OS.type == "windows") {
[09:30:47.301]                 old_names <- names(...future.oldEnvVars)
[09:30:47.301]                 envs <- base::Sys.getenv()
[09:30:47.301]                 names <- names(envs)
[09:30:47.301]                 common <- intersect(names, old_names)
[09:30:47.301]                 added <- setdiff(names, old_names)
[09:30:47.301]                 removed <- setdiff(old_names, names)
[09:30:47.301]                 changed <- common[...future.oldEnvVars[common] != 
[09:30:47.301]                   envs[common]]
[09:30:47.301]                 NAMES <- toupper(changed)
[09:30:47.301]                 args <- list()
[09:30:47.301]                 for (kk in seq_along(NAMES)) {
[09:30:47.301]                   name <- changed[[kk]]
[09:30:47.301]                   NAME <- NAMES[[kk]]
[09:30:47.301]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:47.301]                     next
[09:30:47.301]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:47.301]                 }
[09:30:47.301]                 NAMES <- toupper(added)
[09:30:47.301]                 for (kk in seq_along(NAMES)) {
[09:30:47.301]                   name <- added[[kk]]
[09:30:47.301]                   NAME <- NAMES[[kk]]
[09:30:47.301]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:47.301]                     next
[09:30:47.301]                   args[[name]] <- ""
[09:30:47.301]                 }
[09:30:47.301]                 NAMES <- toupper(removed)
[09:30:47.301]                 for (kk in seq_along(NAMES)) {
[09:30:47.301]                   name <- removed[[kk]]
[09:30:47.301]                   NAME <- NAMES[[kk]]
[09:30:47.301]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:47.301]                     next
[09:30:47.301]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:47.301]                 }
[09:30:47.301]                 if (length(args) > 0) 
[09:30:47.301]                   base::do.call(base::Sys.setenv, args = args)
[09:30:47.301]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:30:47.301]             }
[09:30:47.301]             else {
[09:30:47.301]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:30:47.301]             }
[09:30:47.301]             {
[09:30:47.301]                 if (base::length(...future.futureOptionsAdded) > 
[09:30:47.301]                   0L) {
[09:30:47.301]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:30:47.301]                   base::names(opts) <- ...future.futureOptionsAdded
[09:30:47.301]                   base::options(opts)
[09:30:47.301]                 }
[09:30:47.301]                 {
[09:30:47.301]                   {
[09:30:47.301]                     base::options(mc.cores = ...future.mc.cores.old)
[09:30:47.301]                     NULL
[09:30:47.301]                   }
[09:30:47.301]                   options(future.plan = NULL)
[09:30:47.301]                   if (is.na(NA_character_)) 
[09:30:47.301]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:30:47.301]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:30:47.301]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:30:47.301]                     .init = FALSE)
[09:30:47.301]                 }
[09:30:47.301]             }
[09:30:47.301]         }
[09:30:47.301]     })
[09:30:47.301]     if (TRUE) {
[09:30:47.301]         base::sink(type = "output", split = FALSE)
[09:30:47.301]         if (TRUE) {
[09:30:47.301]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:30:47.301]         }
[09:30:47.301]         else {
[09:30:47.301]             ...future.result["stdout"] <- base::list(NULL)
[09:30:47.301]         }
[09:30:47.301]         base::close(...future.stdout)
[09:30:47.301]         ...future.stdout <- NULL
[09:30:47.301]     }
[09:30:47.301]     ...future.result$conditions <- ...future.conditions
[09:30:47.301]     ...future.result$finished <- base::Sys.time()
[09:30:47.301]     ...future.result
[09:30:47.301] }
[09:30:47.353] Exporting 4 global objects (14.24 KiB) to cluster node #2 ...
[09:30:47.353] Exporting ‘ii’ (56 bytes) to cluster node #2 ...
[09:30:47.353] Exporting ‘ii’ (56 bytes) to cluster node #2 ... DONE
[09:30:47.353] Exporting ‘n’ (56 bytes) to cluster node #2 ...
[09:30:47.354] Exporting ‘n’ (56 bytes) to cluster node #2 ... DONE
[09:30:47.354] Exporting ‘C’ (10.72 KiB) to cluster node #2 ...
[09:30:47.396] Exporting ‘C’ (10.72 KiB) to cluster node #2 ... DONE
[09:30:47.396] Exporting ‘delay’ (3.41 KiB) to cluster node #2 ...
[09:30:47.440] Exporting ‘delay’ (3.41 KiB) to cluster node #2 ... DONE
[09:30:47.440] Exporting 4 global objects (14.24 KiB) to cluster node #2 ... DONE
[09:30:47.441] MultisessionFuture started
[09:30:47.441] - Launch lazy future ... done
[09:30:47.441] run() for ‘MultisessionFuture’ ... done
[09:30:47.441] - run() ... done
[09:30:47.441] - resolved() ...
[09:30:47.452] - resolved: FALSE
[09:30:47.452] - resolved() ... done
[09:30:47.452] resolved() for ‘MultisessionFuture’ ... done
[09:30:47.452] resolved() for ‘Future’ ...
[09:30:47.452] - state: ‘created’
[09:30:47.453] - run: TRUE
[09:30:47.453] - run() ...
[09:30:47.453] run() for ‘Future’ ...
[09:30:47.453] - state: ‘created’
[09:30:47.453] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:30:47.467] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:30:47.467] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:30:47.467]   - Field: ‘node’
[09:30:47.467]   - Field: ‘label’
[09:30:47.468]   - Field: ‘local’
[09:30:47.468]   - Field: ‘owner’
[09:30:47.468]   - Field: ‘envir’
[09:30:47.468]   - Field: ‘workers’
[09:30:47.468]   - Field: ‘packages’
[09:30:47.468]   - Field: ‘gc’
[09:30:47.468]   - Field: ‘conditions’
[09:30:47.468]   - Field: ‘persistent’
[09:30:47.468]   - Field: ‘expr’
[09:30:47.468]   - Field: ‘uuid’
[09:30:47.468]   - Field: ‘seed’
[09:30:47.469]   - Field: ‘version’
[09:30:47.469]   - Field: ‘result’
[09:30:47.469]   - Field: ‘asynchronous’
[09:30:47.469]   - Field: ‘calls’
[09:30:47.469]   - Field: ‘globals’
[09:30:47.469]   - Field: ‘stdout’
[09:30:47.469]   - Field: ‘earlySignal’
[09:30:47.469]   - Field: ‘lazy’
[09:30:47.470]   - Field: ‘state’
[09:30:47.470] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:30:47.470] - Launch lazy future ...
[09:30:47.470] Packages needed by the future expression (n = 1): ‘future’
[09:30:47.470] Packages needed by future strategies (n = 0): <none>
[09:30:47.471] {
[09:30:47.471]     {
[09:30:47.471]         {
[09:30:47.471]             ...future.startTime <- base::Sys.time()
[09:30:47.471]             {
[09:30:47.471]                 {
[09:30:47.471]                   {
[09:30:47.471]                     {
[09:30:47.471]                       {
[09:30:47.471]                         base::local({
[09:30:47.471]                           has_future <- base::requireNamespace("future", 
[09:30:47.471]                             quietly = TRUE)
[09:30:47.471]                           if (has_future) {
[09:30:47.471]                             ns <- base::getNamespace("future")
[09:30:47.471]                             version <- ns[[".package"]][["version"]]
[09:30:47.471]                             if (is.null(version)) 
[09:30:47.471]                               version <- utils::packageVersion("future")
[09:30:47.471]                           }
[09:30:47.471]                           else {
[09:30:47.471]                             version <- NULL
[09:30:47.471]                           }
[09:30:47.471]                           if (!has_future || version < "1.8.0") {
[09:30:47.471]                             info <- base::c(r_version = base::gsub("R version ", 
[09:30:47.471]                               "", base::R.version$version.string), 
[09:30:47.471]                               platform = base::sprintf("%s (%s-bit)", 
[09:30:47.471]                                 base::R.version$platform, 8 * 
[09:30:47.471]                                   base::.Machine$sizeof.pointer), 
[09:30:47.471]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[09:30:47.471]                                 "release", "version")], collapse = " "), 
[09:30:47.471]                               hostname = base::Sys.info()[["nodename"]])
[09:30:47.471]                             info <- base::sprintf("%s: %s", base::names(info), 
[09:30:47.471]                               info)
[09:30:47.471]                             info <- base::paste(info, collapse = "; ")
[09:30:47.471]                             if (!has_future) {
[09:30:47.471]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:30:47.471]                                 info)
[09:30:47.471]                             }
[09:30:47.471]                             else {
[09:30:47.471]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:30:47.471]                                 info, version)
[09:30:47.471]                             }
[09:30:47.471]                             base::stop(msg)
[09:30:47.471]                           }
[09:30:47.471]                         })
[09:30:47.471]                       }
[09:30:47.471]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[09:30:47.471]                       base::options(mc.cores = 1L)
[09:30:47.471]                     }
[09:30:47.471]                     base::local({
[09:30:47.471]                       for (pkg in "future") {
[09:30:47.471]                         base::loadNamespace(pkg)
[09:30:47.471]                         base::library(pkg, character.only = TRUE)
[09:30:47.471]                       }
[09:30:47.471]                     })
[09:30:47.471]                   }
[09:30:47.471]                   ...future.strategy.old <- future::plan("list")
[09:30:47.471]                   options(future.plan = NULL)
[09:30:47.471]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:30:47.471]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:30:47.471]                 }
[09:30:47.471]                 ...future.workdir <- getwd()
[09:30:47.471]             }
[09:30:47.471]             ...future.oldOptions <- base::as.list(base::.Options)
[09:30:47.471]             ...future.oldEnvVars <- base::Sys.getenv()
[09:30:47.471]         }
[09:30:47.471]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:30:47.471]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:30:47.471]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:30:47.471]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:30:47.471]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:30:47.471]             future.stdout.windows.reencode = NULL, width = 80L)
[09:30:47.471]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:30:47.471]             base::names(...future.oldOptions))
[09:30:47.471]     }
[09:30:47.471]     if (FALSE) {
[09:30:47.471]     }
[09:30:47.471]     else {
[09:30:47.471]         if (TRUE) {
[09:30:47.471]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:30:47.471]                 open = "w")
[09:30:47.471]         }
[09:30:47.471]         else {
[09:30:47.471]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:30:47.471]                 windows = "NUL", "/dev/null"), open = "w")
[09:30:47.471]         }
[09:30:47.471]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:30:47.471]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:30:47.471]             base::sink(type = "output", split = FALSE)
[09:30:47.471]             base::close(...future.stdout)
[09:30:47.471]         }, add = TRUE)
[09:30:47.471]     }
[09:30:47.471]     ...future.frame <- base::sys.nframe()
[09:30:47.471]     ...future.conditions <- base::list()
[09:30:47.471]     ...future.rng <- base::globalenv()$.Random.seed
[09:30:47.471]     if (FALSE) {
[09:30:47.471]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:30:47.471]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:30:47.471]     }
[09:30:47.471]     ...future.result <- base::tryCatch({
[09:30:47.471]         base::withCallingHandlers({
[09:30:47.471]             ...future.value <- base::withVisible(base::local({
[09:30:47.471]                 ...future.makeSendCondition <- base::local({
[09:30:47.471]                   sendCondition <- NULL
[09:30:47.471]                   function(frame = 1L) {
[09:30:47.471]                     if (is.function(sendCondition)) 
[09:30:47.471]                       return(sendCondition)
[09:30:47.471]                     ns <- getNamespace("parallel")
[09:30:47.471]                     if (exists("sendData", mode = "function", 
[09:30:47.471]                       envir = ns)) {
[09:30:47.471]                       parallel_sendData <- get("sendData", mode = "function", 
[09:30:47.471]                         envir = ns)
[09:30:47.471]                       envir <- sys.frame(frame)
[09:30:47.471]                       master <- NULL
[09:30:47.471]                       while (!identical(envir, .GlobalEnv) && 
[09:30:47.471]                         !identical(envir, emptyenv())) {
[09:30:47.471]                         if (exists("master", mode = "list", envir = envir, 
[09:30:47.471]                           inherits = FALSE)) {
[09:30:47.471]                           master <- get("master", mode = "list", 
[09:30:47.471]                             envir = envir, inherits = FALSE)
[09:30:47.471]                           if (inherits(master, c("SOCKnode", 
[09:30:47.471]                             "SOCK0node"))) {
[09:30:47.471]                             sendCondition <<- function(cond) {
[09:30:47.471]                               data <- list(type = "VALUE", value = cond, 
[09:30:47.471]                                 success = TRUE)
[09:30:47.471]                               parallel_sendData(master, data)
[09:30:47.471]                             }
[09:30:47.471]                             return(sendCondition)
[09:30:47.471]                           }
[09:30:47.471]                         }
[09:30:47.471]                         frame <- frame + 1L
[09:30:47.471]                         envir <- sys.frame(frame)
[09:30:47.471]                       }
[09:30:47.471]                     }
[09:30:47.471]                     sendCondition <<- function(cond) NULL
[09:30:47.471]                   }
[09:30:47.471]                 })
[09:30:47.471]                 withCallingHandlers({
[09:30:47.471]                   {
[09:30:47.471]                     message(sprintf("Calculating tile #%d of %d ...", 
[09:30:47.471]                       ii, n), appendLF = FALSE)
[09:30:47.471]                     fit <- mandelbrot(C)
[09:30:47.471]                     delay(fit)
[09:30:47.471]                     message(" done")
[09:30:47.471]                     fit
[09:30:47.471]                   }
[09:30:47.471]                 }, immediateCondition = function(cond) {
[09:30:47.471]                   sendCondition <- ...future.makeSendCondition()
[09:30:47.471]                   sendCondition(cond)
[09:30:47.471]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:47.471]                   {
[09:30:47.471]                     inherits <- base::inherits
[09:30:47.471]                     invokeRestart <- base::invokeRestart
[09:30:47.471]                     is.null <- base::is.null
[09:30:47.471]                     muffled <- FALSE
[09:30:47.471]                     if (inherits(cond, "message")) {
[09:30:47.471]                       muffled <- grepl(pattern, "muffleMessage")
[09:30:47.471]                       if (muffled) 
[09:30:47.471]                         invokeRestart("muffleMessage")
[09:30:47.471]                     }
[09:30:47.471]                     else if (inherits(cond, "warning")) {
[09:30:47.471]                       muffled <- grepl(pattern, "muffleWarning")
[09:30:47.471]                       if (muffled) 
[09:30:47.471]                         invokeRestart("muffleWarning")
[09:30:47.471]                     }
[09:30:47.471]                     else if (inherits(cond, "condition")) {
[09:30:47.471]                       if (!is.null(pattern)) {
[09:30:47.471]                         computeRestarts <- base::computeRestarts
[09:30:47.471]                         grepl <- base::grepl
[09:30:47.471]                         restarts <- computeRestarts(cond)
[09:30:47.471]                         for (restart in restarts) {
[09:30:47.471]                           name <- restart$name
[09:30:47.471]                           if (is.null(name)) 
[09:30:47.471]                             next
[09:30:47.471]                           if (!grepl(pattern, name)) 
[09:30:47.471]                             next
[09:30:47.471]                           invokeRestart(restart)
[09:30:47.471]                           muffled <- TRUE
[09:30:47.471]                           break
[09:30:47.471]                         }
[09:30:47.471]                       }
[09:30:47.471]                     }
[09:30:47.471]                     invisible(muffled)
[09:30:47.471]                   }
[09:30:47.471]                   muffleCondition(cond)
[09:30:47.471]                 })
[09:30:47.471]             }))
[09:30:47.471]             future::FutureResult(value = ...future.value$value, 
[09:30:47.471]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:47.471]                   ...future.rng), globalenv = if (FALSE) 
[09:30:47.471]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:30:47.471]                     ...future.globalenv.names))
[09:30:47.471]                 else NULL, started = ...future.startTime, version = "1.8")
[09:30:47.471]         }, condition = base::local({
[09:30:47.471]             c <- base::c
[09:30:47.471]             inherits <- base::inherits
[09:30:47.471]             invokeRestart <- base::invokeRestart
[09:30:47.471]             length <- base::length
[09:30:47.471]             list <- base::list
[09:30:47.471]             seq.int <- base::seq.int
[09:30:47.471]             signalCondition <- base::signalCondition
[09:30:47.471]             sys.calls <- base::sys.calls
[09:30:47.471]             `[[` <- base::`[[`
[09:30:47.471]             `+` <- base::`+`
[09:30:47.471]             `<<-` <- base::`<<-`
[09:30:47.471]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:30:47.471]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:30:47.471]                   3L)]
[09:30:47.471]             }
[09:30:47.471]             function(cond) {
[09:30:47.471]                 is_error <- inherits(cond, "error")
[09:30:47.471]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:30:47.471]                   NULL)
[09:30:47.471]                 if (is_error) {
[09:30:47.471]                   sessionInformation <- function() {
[09:30:47.471]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:30:47.471]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:30:47.471]                       search = base::search(), system = base::Sys.info())
[09:30:47.471]                   }
[09:30:47.471]                   ...future.conditions[[length(...future.conditions) + 
[09:30:47.471]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:30:47.471]                     cond$call), session = sessionInformation(), 
[09:30:47.471]                     timestamp = base::Sys.time(), signaled = 0L)
[09:30:47.471]                   signalCondition(cond)
[09:30:47.471]                 }
[09:30:47.471]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:30:47.471]                 "immediateCondition"))) {
[09:30:47.471]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:30:47.471]                   ...future.conditions[[length(...future.conditions) + 
[09:30:47.471]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:30:47.471]                   if (TRUE && !signal) {
[09:30:47.471]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:47.471]                     {
[09:30:47.471]                       inherits <- base::inherits
[09:30:47.471]                       invokeRestart <- base::invokeRestart
[09:30:47.471]                       is.null <- base::is.null
[09:30:47.471]                       muffled <- FALSE
[09:30:47.471]                       if (inherits(cond, "message")) {
[09:30:47.471]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:47.471]                         if (muffled) 
[09:30:47.471]                           invokeRestart("muffleMessage")
[09:30:47.471]                       }
[09:30:47.471]                       else if (inherits(cond, "warning")) {
[09:30:47.471]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:47.471]                         if (muffled) 
[09:30:47.471]                           invokeRestart("muffleWarning")
[09:30:47.471]                       }
[09:30:47.471]                       else if (inherits(cond, "condition")) {
[09:30:47.471]                         if (!is.null(pattern)) {
[09:30:47.471]                           computeRestarts <- base::computeRestarts
[09:30:47.471]                           grepl <- base::grepl
[09:30:47.471]                           restarts <- computeRestarts(cond)
[09:30:47.471]                           for (restart in restarts) {
[09:30:47.471]                             name <- restart$name
[09:30:47.471]                             if (is.null(name)) 
[09:30:47.471]                               next
[09:30:47.471]                             if (!grepl(pattern, name)) 
[09:30:47.471]                               next
[09:30:47.471]                             invokeRestart(restart)
[09:30:47.471]                             muffled <- TRUE
[09:30:47.471]                             break
[09:30:47.471]                           }
[09:30:47.471]                         }
[09:30:47.471]                       }
[09:30:47.471]                       invisible(muffled)
[09:30:47.471]                     }
[09:30:47.471]                     muffleCondition(cond, pattern = "^muffle")
[09:30:47.471]                   }
[09:30:47.471]                 }
[09:30:47.471]                 else {
[09:30:47.471]                   if (TRUE) {
[09:30:47.471]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:47.471]                     {
[09:30:47.471]                       inherits <- base::inherits
[09:30:47.471]                       invokeRestart <- base::invokeRestart
[09:30:47.471]                       is.null <- base::is.null
[09:30:47.471]                       muffled <- FALSE
[09:30:47.471]                       if (inherits(cond, "message")) {
[09:30:47.471]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:47.471]                         if (muffled) 
[09:30:47.471]                           invokeRestart("muffleMessage")
[09:30:47.471]                       }
[09:30:47.471]                       else if (inherits(cond, "warning")) {
[09:30:47.471]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:47.471]                         if (muffled) 
[09:30:47.471]                           invokeRestart("muffleWarning")
[09:30:47.471]                       }
[09:30:47.471]                       else if (inherits(cond, "condition")) {
[09:30:47.471]                         if (!is.null(pattern)) {
[09:30:47.471]                           computeRestarts <- base::computeRestarts
[09:30:47.471]                           grepl <- base::grepl
[09:30:47.471]                           restarts <- computeRestarts(cond)
[09:30:47.471]                           for (restart in restarts) {
[09:30:47.471]                             name <- restart$name
[09:30:47.471]                             if (is.null(name)) 
[09:30:47.471]                               next
[09:30:47.471]                             if (!grepl(pattern, name)) 
[09:30:47.471]                               next
[09:30:47.471]                             invokeRestart(restart)
[09:30:47.471]                             muffled <- TRUE
[09:30:47.471]                             break
[09:30:47.471]                           }
[09:30:47.471]                         }
[09:30:47.471]                       }
[09:30:47.471]                       invisible(muffled)
[09:30:47.471]                     }
[09:30:47.471]                     muffleCondition(cond, pattern = "^muffle")
[09:30:47.471]                   }
[09:30:47.471]                 }
[09:30:47.471]             }
[09:30:47.471]         }))
[09:30:47.471]     }, error = function(ex) {
[09:30:47.471]         base::structure(base::list(value = NULL, visible = NULL, 
[09:30:47.471]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:47.471]                 ...future.rng), started = ...future.startTime, 
[09:30:47.471]             finished = Sys.time(), session_uuid = NA_character_, 
[09:30:47.471]             version = "1.8"), class = "FutureResult")
[09:30:47.471]     }, finally = {
[09:30:47.471]         if (!identical(...future.workdir, getwd())) 
[09:30:47.471]             setwd(...future.workdir)
[09:30:47.471]         {
[09:30:47.471]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:30:47.471]                 ...future.oldOptions$nwarnings <- NULL
[09:30:47.471]             }
[09:30:47.471]             base::options(...future.oldOptions)
[09:30:47.471]             if (.Platform$OS.type == "windows") {
[09:30:47.471]                 old_names <- names(...future.oldEnvVars)
[09:30:47.471]                 envs <- base::Sys.getenv()
[09:30:47.471]                 names <- names(envs)
[09:30:47.471]                 common <- intersect(names, old_names)
[09:30:47.471]                 added <- setdiff(names, old_names)
[09:30:47.471]                 removed <- setdiff(old_names, names)
[09:30:47.471]                 changed <- common[...future.oldEnvVars[common] != 
[09:30:47.471]                   envs[common]]
[09:30:47.471]                 NAMES <- toupper(changed)
[09:30:47.471]                 args <- list()
[09:30:47.471]                 for (kk in seq_along(NAMES)) {
[09:30:47.471]                   name <- changed[[kk]]
[09:30:47.471]                   NAME <- NAMES[[kk]]
[09:30:47.471]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:47.471]                     next
[09:30:47.471]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:47.471]                 }
[09:30:47.471]                 NAMES <- toupper(added)
[09:30:47.471]                 for (kk in seq_along(NAMES)) {
[09:30:47.471]                   name <- added[[kk]]
[09:30:47.471]                   NAME <- NAMES[[kk]]
[09:30:47.471]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:47.471]                     next
[09:30:47.471]                   args[[name]] <- ""
[09:30:47.471]                 }
[09:30:47.471]                 NAMES <- toupper(removed)
[09:30:47.471]                 for (kk in seq_along(NAMES)) {
[09:30:47.471]                   name <- removed[[kk]]
[09:30:47.471]                   NAME <- NAMES[[kk]]
[09:30:47.471]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:47.471]                     next
[09:30:47.471]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:47.471]                 }
[09:30:47.471]                 if (length(args) > 0) 
[09:30:47.471]                   base::do.call(base::Sys.setenv, args = args)
[09:30:47.471]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:30:47.471]             }
[09:30:47.471]             else {
[09:30:47.471]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:30:47.471]             }
[09:30:47.471]             {
[09:30:47.471]                 if (base::length(...future.futureOptionsAdded) > 
[09:30:47.471]                   0L) {
[09:30:47.471]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:30:47.471]                   base::names(opts) <- ...future.futureOptionsAdded
[09:30:47.471]                   base::options(opts)
[09:30:47.471]                 }
[09:30:47.471]                 {
[09:30:47.471]                   {
[09:30:47.471]                     base::options(mc.cores = ...future.mc.cores.old)
[09:30:47.471]                     NULL
[09:30:47.471]                   }
[09:30:47.471]                   options(future.plan = NULL)
[09:30:47.471]                   if (is.na(NA_character_)) 
[09:30:47.471]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:30:47.471]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:30:47.471]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:30:47.471]                     .init = FALSE)
[09:30:47.471]                 }
[09:30:47.471]             }
[09:30:47.471]         }
[09:30:47.471]     })
[09:30:47.471]     if (TRUE) {
[09:30:47.471]         base::sink(type = "output", split = FALSE)
[09:30:47.471]         if (TRUE) {
[09:30:47.471]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:30:47.471]         }
[09:30:47.471]         else {
[09:30:47.471]             ...future.result["stdout"] <- base::list(NULL)
[09:30:47.471]         }
[09:30:47.471]         base::close(...future.stdout)
[09:30:47.471]         ...future.stdout <- NULL
[09:30:47.471]     }
[09:30:47.471]     ...future.result$conditions <- ...future.conditions
[09:30:47.471]     ...future.result$finished <- base::Sys.time()
[09:30:47.471]     ...future.result
[09:30:47.471] }
[09:30:47.473] Poll #1 (0): usedNodes() = 2, workers = 2
[09:30:47.492] receiveMessageFromWorker() for ClusterFuture ...
[09:30:47.492] - Validating connection of MultisessionFuture
[09:30:47.493] - received message: FutureResult
[09:30:47.493] - Received FutureResult
[09:30:47.493] - Erased future from FutureRegistry
[09:30:47.493] result() for ClusterFuture ...
[09:30:47.493] - result already collected: FutureResult
[09:30:47.493] result() for ClusterFuture ... done
[09:30:47.493] signalConditions() ...
[09:30:47.493]  - include = ‘immediateCondition’
[09:30:47.493]  - exclude = 
[09:30:47.493]  - resignal = FALSE
[09:30:47.493]  - Number of conditions: 2
[09:30:47.494] signalConditions() ... done
[09:30:47.494] receiveMessageFromWorker() for ClusterFuture ... done
[09:30:47.494] result() for ClusterFuture ...
[09:30:47.494] - result already collected: FutureResult
[09:30:47.494] result() for ClusterFuture ... done
[09:30:47.494] result() for ClusterFuture ...
[09:30:47.494] - result already collected: FutureResult
[09:30:47.494] result() for ClusterFuture ... done
[09:30:47.494] signalConditions() ...
[09:30:47.494]  - include = ‘immediateCondition’
[09:30:47.494]  - exclude = 
[09:30:47.494]  - resignal = FALSE
[09:30:47.495]  - Number of conditions: 2
[09:30:47.495] signalConditions() ... done
[09:30:47.495] Exporting 4 global objects (14.24 KiB) to cluster node #1 ...
[09:30:47.495] Exporting ‘ii’ (56 bytes) to cluster node #1 ...
[09:30:47.496] Exporting ‘ii’ (56 bytes) to cluster node #1 ... DONE
[09:30:47.496] Exporting ‘n’ (56 bytes) to cluster node #1 ...
[09:30:47.496] Exporting ‘n’ (56 bytes) to cluster node #1 ... DONE
[09:30:47.497] Exporting ‘C’ (10.72 KiB) to cluster node #1 ...
[09:30:47.540] Exporting ‘C’ (10.72 KiB) to cluster node #1 ... DONE
[09:30:47.540] Exporting ‘delay’ (3.41 KiB) to cluster node #1 ...
[09:30:47.584] Exporting ‘delay’ (3.41 KiB) to cluster node #1 ... DONE
[09:30:47.584] Exporting 4 global objects (14.24 KiB) to cluster node #1 ... DONE
[09:30:47.585] MultisessionFuture started
[09:30:47.586] - Launch lazy future ... done
[09:30:47.586] run() for ‘MultisessionFuture’ ... done
[09:30:47.586] - run() ... done
[09:30:47.586] - resolved() ...
[09:30:47.597] - resolved: FALSE
[09:30:47.597] - resolved() ... done
[09:30:47.597] resolved() for ‘MultisessionFuture’ ... done
[09:30:47.597] resolved() for ‘Future’ ...
[09:30:47.597] - state: ‘created’
[09:30:47.597] - run: TRUE
[09:30:47.597] - run() ...
[09:30:47.597] run() for ‘Future’ ...
[09:30:47.597] - state: ‘created’
[09:30:47.598] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:30:47.613] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:30:47.613] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:30:47.613]   - Field: ‘node’
[09:30:47.613]   - Field: ‘label’
[09:30:47.613]   - Field: ‘local’
[09:30:47.613]   - Field: ‘owner’
[09:30:47.613]   - Field: ‘envir’
[09:30:47.613]   - Field: ‘workers’
[09:30:47.613]   - Field: ‘packages’
[09:30:47.614]   - Field: ‘gc’
[09:30:47.614]   - Field: ‘conditions’
[09:30:47.614]   - Field: ‘persistent’
[09:30:47.614]   - Field: ‘expr’
[09:30:47.614]   - Field: ‘uuid’
[09:30:47.614]   - Field: ‘seed’
[09:30:47.614]   - Field: ‘version’
[09:30:47.614]   - Field: ‘result’
[09:30:47.614]   - Field: ‘asynchronous’
[09:30:47.614]   - Field: ‘calls’
[09:30:47.614]   - Field: ‘globals’
[09:30:47.615]   - Field: ‘stdout’
[09:30:47.615]   - Field: ‘earlySignal’
[09:30:47.615]   - Field: ‘lazy’
[09:30:47.615]   - Field: ‘state’
[09:30:47.615] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:30:47.615] - Launch lazy future ...
[09:30:47.615] Packages needed by the future expression (n = 1): ‘future’
[09:30:47.615] Packages needed by future strategies (n = 0): <none>
[09:30:47.616] {
[09:30:47.616]     {
[09:30:47.616]         {
[09:30:47.616]             ...future.startTime <- base::Sys.time()
[09:30:47.616]             {
[09:30:47.616]                 {
[09:30:47.616]                   {
[09:30:47.616]                     {
[09:30:47.616]                       {
[09:30:47.616]                         base::local({
[09:30:47.616]                           has_future <- base::requireNamespace("future", 
[09:30:47.616]                             quietly = TRUE)
[09:30:47.616]                           if (has_future) {
[09:30:47.616]                             ns <- base::getNamespace("future")
[09:30:47.616]                             version <- ns[[".package"]][["version"]]
[09:30:47.616]                             if (is.null(version)) 
[09:30:47.616]                               version <- utils::packageVersion("future")
[09:30:47.616]                           }
[09:30:47.616]                           else {
[09:30:47.616]                             version <- NULL
[09:30:47.616]                           }
[09:30:47.616]                           if (!has_future || version < "1.8.0") {
[09:30:47.616]                             info <- base::c(r_version = base::gsub("R version ", 
[09:30:47.616]                               "", base::R.version$version.string), 
[09:30:47.616]                               platform = base::sprintf("%s (%s-bit)", 
[09:30:47.616]                                 base::R.version$platform, 8 * 
[09:30:47.616]                                   base::.Machine$sizeof.pointer), 
[09:30:47.616]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[09:30:47.616]                                 "release", "version")], collapse = " "), 
[09:30:47.616]                               hostname = base::Sys.info()[["nodename"]])
[09:30:47.616]                             info <- base::sprintf("%s: %s", base::names(info), 
[09:30:47.616]                               info)
[09:30:47.616]                             info <- base::paste(info, collapse = "; ")
[09:30:47.616]                             if (!has_future) {
[09:30:47.616]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:30:47.616]                                 info)
[09:30:47.616]                             }
[09:30:47.616]                             else {
[09:30:47.616]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:30:47.616]                                 info, version)
[09:30:47.616]                             }
[09:30:47.616]                             base::stop(msg)
[09:30:47.616]                           }
[09:30:47.616]                         })
[09:30:47.616]                       }
[09:30:47.616]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[09:30:47.616]                       base::options(mc.cores = 1L)
[09:30:47.616]                     }
[09:30:47.616]                     base::local({
[09:30:47.616]                       for (pkg in "future") {
[09:30:47.616]                         base::loadNamespace(pkg)
[09:30:47.616]                         base::library(pkg, character.only = TRUE)
[09:30:47.616]                       }
[09:30:47.616]                     })
[09:30:47.616]                   }
[09:30:47.616]                   ...future.strategy.old <- future::plan("list")
[09:30:47.616]                   options(future.plan = NULL)
[09:30:47.616]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:30:47.616]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:30:47.616]                 }
[09:30:47.616]                 ...future.workdir <- getwd()
[09:30:47.616]             }
[09:30:47.616]             ...future.oldOptions <- base::as.list(base::.Options)
[09:30:47.616]             ...future.oldEnvVars <- base::Sys.getenv()
[09:30:47.616]         }
[09:30:47.616]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:30:47.616]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:30:47.616]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:30:47.616]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:30:47.616]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:30:47.616]             future.stdout.windows.reencode = NULL, width = 80L)
[09:30:47.616]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:30:47.616]             base::names(...future.oldOptions))
[09:30:47.616]     }
[09:30:47.616]     if (FALSE) {
[09:30:47.616]     }
[09:30:47.616]     else {
[09:30:47.616]         if (TRUE) {
[09:30:47.616]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:30:47.616]                 open = "w")
[09:30:47.616]         }
[09:30:47.616]         else {
[09:30:47.616]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:30:47.616]                 windows = "NUL", "/dev/null"), open = "w")
[09:30:47.616]         }
[09:30:47.616]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:30:47.616]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:30:47.616]             base::sink(type = "output", split = FALSE)
[09:30:47.616]             base::close(...future.stdout)
[09:30:47.616]         }, add = TRUE)
[09:30:47.616]     }
[09:30:47.616]     ...future.frame <- base::sys.nframe()
[09:30:47.616]     ...future.conditions <- base::list()
[09:30:47.616]     ...future.rng <- base::globalenv()$.Random.seed
[09:30:47.616]     if (FALSE) {
[09:30:47.616]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:30:47.616]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:30:47.616]     }
[09:30:47.616]     ...future.result <- base::tryCatch({
[09:30:47.616]         base::withCallingHandlers({
[09:30:47.616]             ...future.value <- base::withVisible(base::local({
[09:30:47.616]                 ...future.makeSendCondition <- base::local({
[09:30:47.616]                   sendCondition <- NULL
[09:30:47.616]                   function(frame = 1L) {
[09:30:47.616]                     if (is.function(sendCondition)) 
[09:30:47.616]                       return(sendCondition)
[09:30:47.616]                     ns <- getNamespace("parallel")
[09:30:47.616]                     if (exists("sendData", mode = "function", 
[09:30:47.616]                       envir = ns)) {
[09:30:47.616]                       parallel_sendData <- get("sendData", mode = "function", 
[09:30:47.616]                         envir = ns)
[09:30:47.616]                       envir <- sys.frame(frame)
[09:30:47.616]                       master <- NULL
[09:30:47.616]                       while (!identical(envir, .GlobalEnv) && 
[09:30:47.616]                         !identical(envir, emptyenv())) {
[09:30:47.616]                         if (exists("master", mode = "list", envir = envir, 
[09:30:47.616]                           inherits = FALSE)) {
[09:30:47.616]                           master <- get("master", mode = "list", 
[09:30:47.616]                             envir = envir, inherits = FALSE)
[09:30:47.616]                           if (inherits(master, c("SOCKnode", 
[09:30:47.616]                             "SOCK0node"))) {
[09:30:47.616]                             sendCondition <<- function(cond) {
[09:30:47.616]                               data <- list(type = "VALUE", value = cond, 
[09:30:47.616]                                 success = TRUE)
[09:30:47.616]                               parallel_sendData(master, data)
[09:30:47.616]                             }
[09:30:47.616]                             return(sendCondition)
[09:30:47.616]                           }
[09:30:47.616]                         }
[09:30:47.616]                         frame <- frame + 1L
[09:30:47.616]                         envir <- sys.frame(frame)
[09:30:47.616]                       }
[09:30:47.616]                     }
[09:30:47.616]                     sendCondition <<- function(cond) NULL
[09:30:47.616]                   }
[09:30:47.616]                 })
[09:30:47.616]                 withCallingHandlers({
[09:30:47.616]                   {
[09:30:47.616]                     message(sprintf("Calculating tile #%d of %d ...", 
[09:30:47.616]                       ii, n), appendLF = FALSE)
[09:30:47.616]                     fit <- mandelbrot(C)
[09:30:47.616]                     delay(fit)
[09:30:47.616]                     message(" done")
[09:30:47.616]                     fit
[09:30:47.616]                   }
[09:30:47.616]                 }, immediateCondition = function(cond) {
[09:30:47.616]                   sendCondition <- ...future.makeSendCondition()
[09:30:47.616]                   sendCondition(cond)
[09:30:47.616]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:47.616]                   {
[09:30:47.616]                     inherits <- base::inherits
[09:30:47.616]                     invokeRestart <- base::invokeRestart
[09:30:47.616]                     is.null <- base::is.null
[09:30:47.616]                     muffled <- FALSE
[09:30:47.616]                     if (inherits(cond, "message")) {
[09:30:47.616]                       muffled <- grepl(pattern, "muffleMessage")
[09:30:47.616]                       if (muffled) 
[09:30:47.616]                         invokeRestart("muffleMessage")
[09:30:47.616]                     }
[09:30:47.616]                     else if (inherits(cond, "warning")) {
[09:30:47.616]                       muffled <- grepl(pattern, "muffleWarning")
[09:30:47.616]                       if (muffled) 
[09:30:47.616]                         invokeRestart("muffleWarning")
[09:30:47.616]                     }
[09:30:47.616]                     else if (inherits(cond, "condition")) {
[09:30:47.616]                       if (!is.null(pattern)) {
[09:30:47.616]                         computeRestarts <- base::computeRestarts
[09:30:47.616]                         grepl <- base::grepl
[09:30:47.616]                         restarts <- computeRestarts(cond)
[09:30:47.616]                         for (restart in restarts) {
[09:30:47.616]                           name <- restart$name
[09:30:47.616]                           if (is.null(name)) 
[09:30:47.616]                             next
[09:30:47.616]                           if (!grepl(pattern, name)) 
[09:30:47.616]                             next
[09:30:47.616]                           invokeRestart(restart)
[09:30:47.616]                           muffled <- TRUE
[09:30:47.616]                           break
[09:30:47.616]                         }
[09:30:47.616]                       }
[09:30:47.616]                     }
[09:30:47.616]                     invisible(muffled)
[09:30:47.616]                   }
[09:30:47.616]                   muffleCondition(cond)
[09:30:47.616]                 })
[09:30:47.616]             }))
[09:30:47.616]             future::FutureResult(value = ...future.value$value, 
[09:30:47.616]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:47.616]                   ...future.rng), globalenv = if (FALSE) 
[09:30:47.616]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:30:47.616]                     ...future.globalenv.names))
[09:30:47.616]                 else NULL, started = ...future.startTime, version = "1.8")
[09:30:47.616]         }, condition = base::local({
[09:30:47.616]             c <- base::c
[09:30:47.616]             inherits <- base::inherits
[09:30:47.616]             invokeRestart <- base::invokeRestart
[09:30:47.616]             length <- base::length
[09:30:47.616]             list <- base::list
[09:30:47.616]             seq.int <- base::seq.int
[09:30:47.616]             signalCondition <- base::signalCondition
[09:30:47.616]             sys.calls <- base::sys.calls
[09:30:47.616]             `[[` <- base::`[[`
[09:30:47.616]             `+` <- base::`+`
[09:30:47.616]             `<<-` <- base::`<<-`
[09:30:47.616]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:30:47.616]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:30:47.616]                   3L)]
[09:30:47.616]             }
[09:30:47.616]             function(cond) {
[09:30:47.616]                 is_error <- inherits(cond, "error")
[09:30:47.616]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:30:47.616]                   NULL)
[09:30:47.616]                 if (is_error) {
[09:30:47.616]                   sessionInformation <- function() {
[09:30:47.616]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:30:47.616]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:30:47.616]                       search = base::search(), system = base::Sys.info())
[09:30:47.616]                   }
[09:30:47.616]                   ...future.conditions[[length(...future.conditions) + 
[09:30:47.616]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:30:47.616]                     cond$call), session = sessionInformation(), 
[09:30:47.616]                     timestamp = base::Sys.time(), signaled = 0L)
[09:30:47.616]                   signalCondition(cond)
[09:30:47.616]                 }
[09:30:47.616]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:30:47.616]                 "immediateCondition"))) {
[09:30:47.616]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:30:47.616]                   ...future.conditions[[length(...future.conditions) + 
[09:30:47.616]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:30:47.616]                   if (TRUE && !signal) {
[09:30:47.616]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:47.616]                     {
[09:30:47.616]                       inherits <- base::inherits
[09:30:47.616]                       invokeRestart <- base::invokeRestart
[09:30:47.616]                       is.null <- base::is.null
[09:30:47.616]                       muffled <- FALSE
[09:30:47.616]                       if (inherits(cond, "message")) {
[09:30:47.616]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:47.616]                         if (muffled) 
[09:30:47.616]                           invokeRestart("muffleMessage")
[09:30:47.616]                       }
[09:30:47.616]                       else if (inherits(cond, "warning")) {
[09:30:47.616]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:47.616]                         if (muffled) 
[09:30:47.616]                           invokeRestart("muffleWarning")
[09:30:47.616]                       }
[09:30:47.616]                       else if (inherits(cond, "condition")) {
[09:30:47.616]                         if (!is.null(pattern)) {
[09:30:47.616]                           computeRestarts <- base::computeRestarts
[09:30:47.616]                           grepl <- base::grepl
[09:30:47.616]                           restarts <- computeRestarts(cond)
[09:30:47.616]                           for (restart in restarts) {
[09:30:47.616]                             name <- restart$name
[09:30:47.616]                             if (is.null(name)) 
[09:30:47.616]                               next
[09:30:47.616]                             if (!grepl(pattern, name)) 
[09:30:47.616]                               next
[09:30:47.616]                             invokeRestart(restart)
[09:30:47.616]                             muffled <- TRUE
[09:30:47.616]                             break
[09:30:47.616]                           }
[09:30:47.616]                         }
[09:30:47.616]                       }
[09:30:47.616]                       invisible(muffled)
[09:30:47.616]                     }
[09:30:47.616]                     muffleCondition(cond, pattern = "^muffle")
[09:30:47.616]                   }
[09:30:47.616]                 }
[09:30:47.616]                 else {
[09:30:47.616]                   if (TRUE) {
[09:30:47.616]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:47.616]                     {
[09:30:47.616]                       inherits <- base::inherits
[09:30:47.616]                       invokeRestart <- base::invokeRestart
[09:30:47.616]                       is.null <- base::is.null
[09:30:47.616]                       muffled <- FALSE
[09:30:47.616]                       if (inherits(cond, "message")) {
[09:30:47.616]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:47.616]                         if (muffled) 
[09:30:47.616]                           invokeRestart("muffleMessage")
[09:30:47.616]                       }
[09:30:47.616]                       else if (inherits(cond, "warning")) {
[09:30:47.616]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:47.616]                         if (muffled) 
[09:30:47.616]                           invokeRestart("muffleWarning")
[09:30:47.616]                       }
[09:30:47.616]                       else if (inherits(cond, "condition")) {
[09:30:47.616]                         if (!is.null(pattern)) {
[09:30:47.616]                           computeRestarts <- base::computeRestarts
[09:30:47.616]                           grepl <- base::grepl
[09:30:47.616]                           restarts <- computeRestarts(cond)
[09:30:47.616]                           for (restart in restarts) {
[09:30:47.616]                             name <- restart$name
[09:30:47.616]                             if (is.null(name)) 
[09:30:47.616]                               next
[09:30:47.616]                             if (!grepl(pattern, name)) 
[09:30:47.616]                               next
[09:30:47.616]                             invokeRestart(restart)
[09:30:47.616]                             muffled <- TRUE
[09:30:47.616]                             break
[09:30:47.616]                           }
[09:30:47.616]                         }
[09:30:47.616]                       }
[09:30:47.616]                       invisible(muffled)
[09:30:47.616]                     }
[09:30:47.616]                     muffleCondition(cond, pattern = "^muffle")
[09:30:47.616]                   }
[09:30:47.616]                 }
[09:30:47.616]             }
[09:30:47.616]         }))
[09:30:47.616]     }, error = function(ex) {
[09:30:47.616]         base::structure(base::list(value = NULL, visible = NULL, 
[09:30:47.616]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:47.616]                 ...future.rng), started = ...future.startTime, 
[09:30:47.616]             finished = Sys.time(), session_uuid = NA_character_, 
[09:30:47.616]             version = "1.8"), class = "FutureResult")
[09:30:47.616]     }, finally = {
[09:30:47.616]         if (!identical(...future.workdir, getwd())) 
[09:30:47.616]             setwd(...future.workdir)
[09:30:47.616]         {
[09:30:47.616]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:30:47.616]                 ...future.oldOptions$nwarnings <- NULL
[09:30:47.616]             }
[09:30:47.616]             base::options(...future.oldOptions)
[09:30:47.616]             if (.Platform$OS.type == "windows") {
[09:30:47.616]                 old_names <- names(...future.oldEnvVars)
[09:30:47.616]                 envs <- base::Sys.getenv()
[09:30:47.616]                 names <- names(envs)
[09:30:47.616]                 common <- intersect(names, old_names)
[09:30:47.616]                 added <- setdiff(names, old_names)
[09:30:47.616]                 removed <- setdiff(old_names, names)
[09:30:47.616]                 changed <- common[...future.oldEnvVars[common] != 
[09:30:47.616]                   envs[common]]
[09:30:47.616]                 NAMES <- toupper(changed)
[09:30:47.616]                 args <- list()
[09:30:47.616]                 for (kk in seq_along(NAMES)) {
[09:30:47.616]                   name <- changed[[kk]]
[09:30:47.616]                   NAME <- NAMES[[kk]]
[09:30:47.616]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:47.616]                     next
[09:30:47.616]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:47.616]                 }
[09:30:47.616]                 NAMES <- toupper(added)
[09:30:47.616]                 for (kk in seq_along(NAMES)) {
[09:30:47.616]                   name <- added[[kk]]
[09:30:47.616]                   NAME <- NAMES[[kk]]
[09:30:47.616]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:47.616]                     next
[09:30:47.616]                   args[[name]] <- ""
[09:30:47.616]                 }
[09:30:47.616]                 NAMES <- toupper(removed)
[09:30:47.616]                 for (kk in seq_along(NAMES)) {
[09:30:47.616]                   name <- removed[[kk]]
[09:30:47.616]                   NAME <- NAMES[[kk]]
[09:30:47.616]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:47.616]                     next
[09:30:47.616]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:47.616]                 }
[09:30:47.616]                 if (length(args) > 0) 
[09:30:47.616]                   base::do.call(base::Sys.setenv, args = args)
[09:30:47.616]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:30:47.616]             }
[09:30:47.616]             else {
[09:30:47.616]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:30:47.616]             }
[09:30:47.616]             {
[09:30:47.616]                 if (base::length(...future.futureOptionsAdded) > 
[09:30:47.616]                   0L) {
[09:30:47.616]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:30:47.616]                   base::names(opts) <- ...future.futureOptionsAdded
[09:30:47.616]                   base::options(opts)
[09:30:47.616]                 }
[09:30:47.616]                 {
[09:30:47.616]                   {
[09:30:47.616]                     base::options(mc.cores = ...future.mc.cores.old)
[09:30:47.616]                     NULL
[09:30:47.616]                   }
[09:30:47.616]                   options(future.plan = NULL)
[09:30:47.616]                   if (is.na(NA_character_)) 
[09:30:47.616]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:30:47.616]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:30:47.616]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:30:47.616]                     .init = FALSE)
[09:30:47.616]                 }
[09:30:47.616]             }
[09:30:47.616]         }
[09:30:47.616]     })
[09:30:47.616]     if (TRUE) {
[09:30:47.616]         base::sink(type = "output", split = FALSE)
[09:30:47.616]         if (TRUE) {
[09:30:47.616]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:30:47.616]         }
[09:30:47.616]         else {
[09:30:47.616]             ...future.result["stdout"] <- base::list(NULL)
[09:30:47.616]         }
[09:30:47.616]         base::close(...future.stdout)
[09:30:47.616]         ...future.stdout <- NULL
[09:30:47.616]     }
[09:30:47.616]     ...future.result$conditions <- ...future.conditions
[09:30:47.616]     ...future.result$finished <- base::Sys.time()
[09:30:47.616]     ...future.result
[09:30:47.616] }
[09:30:47.618] Poll #1 (0): usedNodes() = 2, workers = 2
[09:30:47.629] receiveMessageFromWorker() for ClusterFuture ...
[09:30:47.629] - Validating connection of MultisessionFuture
[09:30:47.629] - received message: FutureResult
[09:30:47.630] - Received FutureResult
[09:30:47.630] - Erased future from FutureRegistry
[09:30:47.630] result() for ClusterFuture ...
[09:30:47.630] - result already collected: FutureResult
[09:30:47.630] result() for ClusterFuture ... done
[09:30:47.630] signalConditions() ...
[09:30:47.630]  - include = ‘immediateCondition’
[09:30:47.630]  - exclude = 
[09:30:47.630]  - resignal = FALSE
[09:30:47.630]  - Number of conditions: 2
[09:30:47.631] signalConditions() ... done
[09:30:47.631] receiveMessageFromWorker() for ClusterFuture ... done
[09:30:47.631] result() for ClusterFuture ...
[09:30:47.631] - result already collected: FutureResult
[09:30:47.631] result() for ClusterFuture ... done
[09:30:47.631] result() for ClusterFuture ...
[09:30:47.631] - result already collected: FutureResult
[09:30:47.631] result() for ClusterFuture ... done
[09:30:47.631] signalConditions() ...
[09:30:47.631]  - include = ‘immediateCondition’
[09:30:47.631]  - exclude = 
[09:30:47.631]  - resignal = FALSE
[09:30:47.632]  - Number of conditions: 2
[09:30:47.632] signalConditions() ... done
[09:30:47.632] Exporting 4 global objects (14.24 KiB) to cluster node #2 ...
[09:30:47.632] Exporting ‘ii’ (56 bytes) to cluster node #2 ...
[09:30:47.633] Exporting ‘ii’ (56 bytes) to cluster node #2 ... DONE
[09:30:47.633] Exporting ‘n’ (56 bytes) to cluster node #2 ...
[09:30:47.633] Exporting ‘n’ (56 bytes) to cluster node #2 ... DONE
[09:30:47.634] Exporting ‘C’ (10.72 KiB) to cluster node #2 ...
[09:30:47.676] Exporting ‘C’ (10.72 KiB) to cluster node #2 ... DONE
[09:30:47.676] Exporting ‘delay’ (3.41 KiB) to cluster node #2 ...
[09:30:47.720] Exporting ‘delay’ (3.41 KiB) to cluster node #2 ... DONE
[09:30:47.720] Exporting 4 global objects (14.24 KiB) to cluster node #2 ... DONE
[09:30:47.721] MultisessionFuture started
[09:30:47.721] - Launch lazy future ... done
[09:30:47.722] run() for ‘MultisessionFuture’ ... done
[09:30:47.722] - run() ... done
[09:30:47.722] - resolved() ...
[09:30:47.732] - resolved: FALSE
[09:30:47.732] - resolved() ... done
[09:30:47.732] resolved() for ‘MultisessionFuture’ ... done
Plotting tile #1 of 4 ...
[09:30:47.733] result() for ClusterFuture ...
[09:30:47.733] - result already collected: FutureResult
[09:30:47.733] result() for ClusterFuture ... done
[09:30:47.733] result() for ClusterFuture ...
[09:30:47.733] - result already collected: FutureResult
[09:30:47.733] result() for ClusterFuture ... done
[09:30:47.733] signalConditions() ...
[09:30:47.733]  - include = ‘immediateCondition’
[09:30:47.734]  - exclude = 
[09:30:47.734]  - resignal = FALSE
[09:30:47.734]  - Number of conditions: 2
[09:30:47.734] signalConditions() ... done
[09:30:47.734] Future state: ‘finished’
[09:30:47.734] result() for ClusterFuture ...
[09:30:47.734] - result already collected: FutureResult
[09:30:47.734] result() for ClusterFuture ... done
[09:30:47.734] signalConditions() ...
[09:30:47.734]  - include = ‘condition’
[09:30:47.734]  - exclude = ‘immediateCondition’
[09:30:47.735]  - resignal = TRUE
[09:30:47.735]  - Number of conditions: 2
[09:30:47.735]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #1 of 4 ...[09:30:47.735]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[09:30:47.735] signalConditions() ... done
Plotting tile #2 of 4 ...
[09:30:47.736] result() for ClusterFuture ...
[09:30:47.736] - result already collected: FutureResult
[09:30:47.736] result() for ClusterFuture ... done
[09:30:47.736] result() for ClusterFuture ...
[09:30:47.736] - result already collected: FutureResult
[09:30:47.736] result() for ClusterFuture ... done
[09:30:47.736] signalConditions() ...
[09:30:47.736]  - include = ‘immediateCondition’
[09:30:47.736]  - exclude = 
[09:30:47.737]  - resignal = FALSE
[09:30:47.737]  - Number of conditions: 2
[09:30:47.737] signalConditions() ... done
[09:30:47.737] Future state: ‘finished’
[09:30:47.737] result() for ClusterFuture ...
[09:30:47.737] - result already collected: FutureResult
[09:30:47.737] result() for ClusterFuture ... done
[09:30:47.737] signalConditions() ...
[09:30:47.737]  - include = ‘condition’
[09:30:47.737]  - exclude = ‘immediateCondition’
[09:30:47.737]  - resignal = TRUE
[09:30:47.738]  - Number of conditions: 2
[09:30:47.738]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #2 of 4 ...[09:30:47.738]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[09:30:47.738] signalConditions() ... done
[09:30:47.739] receiveMessageFromWorker() for ClusterFuture ...
[09:30:47.739] - Validating connection of MultisessionFuture
[09:30:47.739] - received message: FutureResult
[09:30:47.739] - Received FutureResult
[09:30:47.740] - Erased future from FutureRegistry
[09:30:47.740] result() for ClusterFuture ...
[09:30:47.740] - result already collected: FutureResult
[09:30:47.740] result() for ClusterFuture ... done
[09:30:47.740] signalConditions() ...
[09:30:47.740]  - include = ‘immediateCondition’
[09:30:47.740]  - exclude = 
[09:30:47.740]  - resignal = FALSE
[09:30:47.740]  - Number of conditions: 2
[09:30:47.740] signalConditions() ... done
[09:30:47.740] receiveMessageFromWorker() for ClusterFuture ... done
Plotting tile #3 of 4 ...
[09:30:47.741] result() for ClusterFuture ...
[09:30:47.741] - result already collected: FutureResult
[09:30:47.741] result() for ClusterFuture ... done
[09:30:47.741] result() for ClusterFuture ...
[09:30:47.741] - result already collected: FutureResult
[09:30:47.741] result() for ClusterFuture ... done
[09:30:47.741] signalConditions() ...
[09:30:47.741]  - include = ‘immediateCondition’
[09:30:47.741]  - exclude = 
[09:30:47.743]  - resignal = FALSE
[09:30:47.743]  - Number of conditions: 2
[09:30:47.743] signalConditions() ... done
[09:30:47.744] Future state: ‘finished’
[09:30:47.744] result() for ClusterFuture ...
[09:30:47.744] - result already collected: FutureResult
[09:30:47.744] result() for ClusterFuture ... done
[09:30:47.744] signalConditions() ...
[09:30:47.744]  - include = ‘condition’
[09:30:47.744]  - exclude = ‘immediateCondition’
[09:30:47.744]  - resignal = TRUE
[09:30:47.744]  - Number of conditions: 2
[09:30:47.744]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #3 of 4 ...[09:30:47.744]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[09:30:47.745] signalConditions() ... done
[09:30:47.781] receiveMessageFromWorker() for ClusterFuture ...
[09:30:47.782] - Validating connection of MultisessionFuture
[09:30:47.783] - received message: FutureResult
[09:30:47.783] - Received FutureResult
[09:30:47.783] - Erased future from FutureRegistry
[09:30:47.783] result() for ClusterFuture ...
[09:30:47.783] - result already collected: FutureResult
[09:30:47.783] result() for ClusterFuture ... done
[09:30:47.783] signalConditions() ...
[09:30:47.783]  - include = ‘immediateCondition’
[09:30:47.784]  - exclude = 
[09:30:47.784]  - resignal = FALSE
[09:30:47.784]  - Number of conditions: 2
[09:30:47.784] signalConditions() ... done
[09:30:47.784] receiveMessageFromWorker() for ClusterFuture ... done
Plotting tile #4 of 4 ...
[09:30:47.784] result() for ClusterFuture ...
[09:30:47.784] - result already collected: FutureResult
[09:30:47.784] result() for ClusterFuture ... done
[09:30:47.784] result() for ClusterFuture ...
[09:30:47.785] - result already collected: FutureResult
[09:30:47.785] result() for ClusterFuture ... done
[09:30:47.785] signalConditions() ...
[09:30:47.785]  - include = ‘immediateCondition’
[09:30:47.785]  - exclude = 
[09:30:47.785]  - resignal = FALSE
[09:30:47.785]  - Number of conditions: 2
[09:30:47.785] signalConditions() ... done
[09:30:47.785] Future state: ‘finished’
[09:30:47.785] result() for ClusterFuture ...
[09:30:47.785] - result already collected: FutureResult
[09:30:47.785] result() for ClusterFuture ... done
[09:30:47.786] signalConditions() ...
[09:30:47.786]  - include = ‘condition’
[09:30:47.786]  - exclude = ‘immediateCondition’
[09:30:47.786]  - resignal = TRUE
[09:30:47.786]  - Number of conditions: 2
[09:30:47.786]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #4 of 4 ...[09:30:47.786]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[09:30:47.786] signalConditions() ... done

> close.screen()
 [1]  1  2  3  4  5  6  7  8  9 10 11 12

> message("SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).\n")
SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).

- plan('multisession') ... DONE
Testing with 2 cores ... DONE
> message("*** Mandelbrot demo of the 'future' package ... DONE")
*** Mandelbrot demo of the 'future' package ... DONE
> 
> message("*** Demos ... DONE")
*** Demos ... DONE
> 
> source("incl/end.R")
[09:30:47.788] plan(): Setting new future strategy stack:
[09:30:47.788] List of future strategies:
[09:30:47.788] 1. sequential:
[09:30:47.788]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:47.788]    - tweaked: FALSE
[09:30:47.788]    - call: future::plan("sequential")
[09:30:47.789] plan(): nbrOfWorkers() = 1
> 
