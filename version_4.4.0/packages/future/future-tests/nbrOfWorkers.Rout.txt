
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:40:11.410] plan(): Setting new future strategy stack:
[17:40:11.411] List of future strategies:
[17:40:11.411] 1. sequential:
[17:40:11.411]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:40:11.411]    - tweaked: FALSE
[17:40:11.411]    - call: future::plan("sequential")
[17:40:11.421] plan(): nbrOfWorkers() = 1
> 
> message("*** nbrOfWorkers() ...")
*** nbrOfWorkers() ...
> 
> strategies <- c("sequential")
> for (strategy in strategies) {
+   message("Type of future: ", strategy)
+ 
+   evaluator <- get(strategy, mode = "function")
+   n <- nbrOfWorkers(evaluator)
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == 1L)
+ 
+   plan(strategy)
+   n <- nbrOfWorkers()
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == 1L)
+ 
+   n <- nbrOfFreeWorkers()
+   message(sprintf("nbrOfFreeWorkers: %d", n))
+   stopifnot(n == 1L)
+   
+   n <- nbrOfFreeWorkers(background = TRUE)
+   message(sprintf("nbrOfFreeWorkers(background = TRUE): %d", n))
+   stopifnot(n == 0L)
+ } ## for (strategy ...)
Type of future: sequential
nbrOfWorkers: 1
[17:40:11.442] plan(): Setting new future strategy stack:
[17:40:11.442] List of future strategies:
[17:40:11.442] 1. sequential:
[17:40:11.442]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:40:11.442]    - tweaked: FALSE
[17:40:11.442]    - call: plan(strategy)
[17:40:11.453] plan(): nbrOfWorkers() = 1
nbrOfWorkers: 1
nbrOfFreeWorkers: 1
nbrOfFreeWorkers(background = TRUE): 0
> 
> 
> strategies <- c("cluster", "multisession", "multicore")
> strategies <- intersect(strategies, supportedStrategies())
> cores <- availableCores()
> message("Number of available cores: ", cores)
Number of available cores: 2
> workers <- availableWorkers()
> nworkers <- length(workers)
> message(sprintf("Available workers: [n = %d] %s", nworkers, hpaste(sQuote(workers))))
Available workers: [n = 2] ‘localhost’, ‘localhost’
> 
> allButOneCore <- function() max(1L, future::availableCores() - 1L)
> allButOneWorker <- function() {
+   w <- future::availableWorkers()
+   if (length(w) > 1) w[-1] else w
+ }
> 
> for (strategy in strategies) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+ 
+   message("Type of future: ", strategy)
+ 
+   evaluator <- get(strategy, mode = "function")
+   n <- nbrOfWorkers(evaluator)
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == nworkers)
+ 
+   plan(strategy)
+   n <- nbrOfWorkers()
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == nworkers)
+ 
+   n <- nbrOfFreeWorkers()
+   message(sprintf("nbrOfFreeWorkers: %d", n))
+   stopifnot(n == nworkers)
+   
+   n <- nbrOfFreeWorkers(background = TRUE)
+   message(sprintf("nbrOfFreeWorkers(background = TRUE): %d", n))
+ # FIXME  stopifnot(n == 0L)
+ 
+   plan(strategy, workers = 1L)
+   n <- nbrOfWorkers()
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == max(1L, nworkers - 1L))
+   
+   n <- nbrOfFreeWorkers()
+   message(sprintf("nbrOfFreeWorkers: %d", n))
+   stopifnot(n == max(1L, nworkers - 1L))
+   
+   n <- nbrOfFreeWorkers(background = TRUE)
+   message(sprintf("nbrOfFreeWorkers(background = TRUE): %d", n))
+ # FIXME  stopifnot(n == 0L)
+ 
+   plan(strategy, workers = allButOneCore)
+   n <- nbrOfWorkers()
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == max(1L, nworkers - 1L))
+   
+   n <- nbrOfFreeWorkers()
+   message(sprintf("nbrOfFreeWorkers: %d", n))
+   stopifnot(n == max(1L, nworkers - 1L))
+   
+   n <- nbrOfFreeWorkers(background = TRUE)
+   message(sprintf("nbrOfFreeWorkers(background = TRUE): %d", n))
+ # FIXME  stopifnot(n == 0L)
+ } ## for (strategy ...)
Type of future: multisession
nbrOfWorkers: 2
[17:40:11.486] plan(): Setting new future strategy stack:
[17:40:11.486] List of future strategies:
[17:40:11.486] 1. multisession:
[17:40:11.486]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:40:11.486]    - tweaked: FALSE
[17:40:11.486]    - call: plan(strategy)
[17:40:11.487] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:40:11.487] multisession:
[17:40:11.487] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:40:11.487] - tweaked: FALSE
[17:40:11.487] - call: plan(strategy)
[17:40:11.493] getGlobalsAndPackages() ...
[17:40:11.493] Not searching for globals
[17:40:11.493] - globals: [0] <none>
[17:40:11.493] getGlobalsAndPackages() ... DONE
[17:40:11.494] [local output] makeClusterPSOCK() ...
[17:40:11.526] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:40:11.527] [local output] Base port: 11290
[17:40:11.528] [local output] Getting setup options for 2 cluster nodes ...
[17:40:11.528] [local output]  - Node 1 of 2 ...
[17:40:11.528] [local output] localMachine=TRUE => revtunnel=FALSE

[17:40:11.529] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpF2E44c/worker.rank=1.parallelly.parent=45991.b3a719074660.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpF2E44c/worker.rank=1.parallelly.parent=45991.b3a719074660.pid")'’
[17:40:11.714] - Possible to infer worker's PID: TRUE
[17:40:11.715] [local output] Rscript port: 11290

[17:40:11.715] [local output]  - Node 2 of 2 ...
[17:40:11.715] [local output] localMachine=TRUE => revtunnel=FALSE

[17:40:11.716] [local output] Rscript port: 11290

[17:40:11.716] [local output] Getting setup options for 2 cluster nodes ... done
[17:40:11.716] [local output]  - Parallel setup requested for some PSOCK nodes
[17:40:11.717] [local output] Setting up PSOCK nodes in parallel
[17:40:11.717] List of 36
[17:40:11.717]  $ worker          : chr "localhost"
[17:40:11.717]   ..- attr(*, "localhost")= logi TRUE
[17:40:11.717]  $ master          : chr "localhost"
[17:40:11.717]  $ port            : int 11290
[17:40:11.717]  $ connectTimeout  : num 120
[17:40:11.717]  $ timeout         : num 2592000
[17:40:11.717]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:40:11.717]  $ homogeneous     : logi TRUE
[17:40:11.717]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:40:11.717]  $ rscript_envs    : NULL
[17:40:11.717]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:40:11.717]  $ rscript_startup : NULL
[17:40:11.717]  $ rscript_sh      : chr "sh"
[17:40:11.717]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:40:11.717]  $ methods         : logi TRUE
[17:40:11.717]  $ socketOptions   : chr "no-delay"
[17:40:11.717]  $ useXDR          : logi FALSE
[17:40:11.717]  $ outfile         : chr "/dev/null"
[17:40:11.717]  $ renice          : int NA
[17:40:11.717]  $ rshcmd          : NULL
[17:40:11.717]  $ user            : chr(0) 
[17:40:11.717]  $ revtunnel       : logi FALSE
[17:40:11.717]  $ rshlogfile      : NULL
[17:40:11.717]  $ rshopts         : chr(0) 
[17:40:11.717]  $ rank            : int 1
[17:40:11.717]  $ manual          : logi FALSE
[17:40:11.717]  $ dryrun          : logi FALSE
[17:40:11.717]  $ quiet           : logi FALSE
[17:40:11.717]  $ setup_strategy  : chr "parallel"
[17:40:11.717]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:40:11.717]  $ pidfile         : chr "/tmp/RtmpF2E44c/worker.rank=1.parallelly.parent=45991.b3a719074660.pid"
[17:40:11.717]  $ rshcmd_label    : NULL
[17:40:11.717]  $ rsh_call        : NULL
[17:40:11.717]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:40:11.717]  $ localMachine    : logi TRUE
[17:40:11.717]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:40:11.717]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:40:11.717]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:40:11.717]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:40:11.717]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:40:11.717]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:40:11.717]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:40:11.717]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:40:11.717]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:40:11.717]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:40:11.717]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:40:11.717]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:40:11.717]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:40:11.717]  $ arguments       :List of 28
[17:40:11.717]   ..$ worker          : chr "localhost"
[17:40:11.717]   ..$ master          : NULL
[17:40:11.717]   ..$ port            : int 11290
[17:40:11.717]   ..$ connectTimeout  : num 120
[17:40:11.717]   ..$ timeout         : num 2592000
[17:40:11.717]   ..$ rscript         : NULL
[17:40:11.717]   ..$ homogeneous     : NULL
[17:40:11.717]   ..$ rscript_args    : NULL
[17:40:11.717]   ..$ rscript_envs    : NULL
[17:40:11.717]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:40:11.717]   ..$ rscript_startup : NULL
[17:40:11.717]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:40:11.717]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:40:11.717]   ..$ methods         : logi TRUE
[17:40:11.717]   ..$ socketOptions   : chr "no-delay"
[17:40:11.717]   ..$ useXDR          : logi FALSE
[17:40:11.717]   ..$ outfile         : chr "/dev/null"
[17:40:11.717]   ..$ renice          : int NA
[17:40:11.717]   ..$ rshcmd          : NULL
[17:40:11.717]   ..$ user            : NULL
[17:40:11.717]   ..$ revtunnel       : logi NA
[17:40:11.717]   ..$ rshlogfile      : NULL
[17:40:11.717]   ..$ rshopts         : NULL
[17:40:11.717]   ..$ rank            : int 1
[17:40:11.717]   ..$ manual          : logi FALSE
[17:40:11.717]   ..$ dryrun          : logi FALSE
[17:40:11.717]   ..$ quiet           : logi FALSE
[17:40:11.717]   ..$ setup_strategy  : chr "parallel"
[17:40:11.717]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:40:11.735] [local output] System call to launch all workers:
[17:40:11.735] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpF2E44c/worker.rank=1.parallelly.parent=45991.b3a719074660.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11290 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:40:11.736] [local output] Starting PSOCK main server
[17:40:11.741] [local output] Workers launched
[17:40:11.742] [local output] Waiting for workers to connect back
[17:40:11.742]  - [local output] 0 workers out of 2 ready
[17:40:12.004]  - [local output] 0 workers out of 2 ready
[17:40:12.004]  - [local output] 1 workers out of 2 ready
[17:40:12.011]  - [local output] 1 workers out of 2 ready
[17:40:12.012]  - [local output] 2 workers out of 2 ready
[17:40:12.012] [local output] Launching of workers completed
[17:40:12.012] [local output] Collecting session information from workers
[17:40:12.013] [local output]  - Worker #1 of 2
[17:40:12.013] [local output]  - Worker #2 of 2
[17:40:12.013] [local output] makeClusterPSOCK() ... done
[17:40:12.025] Packages needed by the future expression (n = 0): <none>
[17:40:12.025] Packages needed by future strategies (n = 0): <none>
[17:40:12.026] {
[17:40:12.026]     {
[17:40:12.026]         {
[17:40:12.026]             ...future.startTime <- base::Sys.time()
[17:40:12.026]             {
[17:40:12.026]                 {
[17:40:12.026]                   {
[17:40:12.026]                     {
[17:40:12.026]                       base::local({
[17:40:12.026]                         has_future <- base::requireNamespace("future", 
[17:40:12.026]                           quietly = TRUE)
[17:40:12.026]                         if (has_future) {
[17:40:12.026]                           ns <- base::getNamespace("future")
[17:40:12.026]                           version <- ns[[".package"]][["version"]]
[17:40:12.026]                           if (is.null(version)) 
[17:40:12.026]                             version <- utils::packageVersion("future")
[17:40:12.026]                         }
[17:40:12.026]                         else {
[17:40:12.026]                           version <- NULL
[17:40:12.026]                         }
[17:40:12.026]                         if (!has_future || version < "1.8.0") {
[17:40:12.026]                           info <- base::c(r_version = base::gsub("R version ", 
[17:40:12.026]                             "", base::R.version$version.string), 
[17:40:12.026]                             platform = base::sprintf("%s (%s-bit)", 
[17:40:12.026]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:12.026]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:12.026]                               "release", "version")], collapse = " "), 
[17:40:12.026]                             hostname = base::Sys.info()[["nodename"]])
[17:40:12.026]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:40:12.026]                             info)
[17:40:12.026]                           info <- base::paste(info, collapse = "; ")
[17:40:12.026]                           if (!has_future) {
[17:40:12.026]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:12.026]                               info)
[17:40:12.026]                           }
[17:40:12.026]                           else {
[17:40:12.026]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:12.026]                               info, version)
[17:40:12.026]                           }
[17:40:12.026]                           base::stop(msg)
[17:40:12.026]                         }
[17:40:12.026]                       })
[17:40:12.026]                     }
[17:40:12.026]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:40:12.026]                     base::options(mc.cores = 1L)
[17:40:12.026]                   }
[17:40:12.026]                   ...future.strategy.old <- future::plan("list")
[17:40:12.026]                   options(future.plan = NULL)
[17:40:12.026]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:12.026]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:12.026]                 }
[17:40:12.026]                 ...future.workdir <- getwd()
[17:40:12.026]             }
[17:40:12.026]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:12.026]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:12.026]         }
[17:40:12.026]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:12.026]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:40:12.026]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:12.026]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:12.026]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:12.026]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:12.026]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:12.026]             base::names(...future.oldOptions))
[17:40:12.026]     }
[17:40:12.026]     if (FALSE) {
[17:40:12.026]     }
[17:40:12.026]     else {
[17:40:12.026]         if (TRUE) {
[17:40:12.026]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:12.026]                 open = "w")
[17:40:12.026]         }
[17:40:12.026]         else {
[17:40:12.026]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:12.026]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:12.026]         }
[17:40:12.026]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:12.026]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:12.026]             base::sink(type = "output", split = FALSE)
[17:40:12.026]             base::close(...future.stdout)
[17:40:12.026]         }, add = TRUE)
[17:40:12.026]     }
[17:40:12.026]     ...future.frame <- base::sys.nframe()
[17:40:12.026]     ...future.conditions <- base::list()
[17:40:12.026]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:12.026]     if (FALSE) {
[17:40:12.026]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:12.026]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:12.026]     }
[17:40:12.026]     ...future.result <- base::tryCatch({
[17:40:12.026]         base::withCallingHandlers({
[17:40:12.026]             ...future.value <- base::withVisible(base::local({
[17:40:12.026]                 ...future.makeSendCondition <- base::local({
[17:40:12.026]                   sendCondition <- NULL
[17:40:12.026]                   function(frame = 1L) {
[17:40:12.026]                     if (is.function(sendCondition)) 
[17:40:12.026]                       return(sendCondition)
[17:40:12.026]                     ns <- getNamespace("parallel")
[17:40:12.026]                     if (exists("sendData", mode = "function", 
[17:40:12.026]                       envir = ns)) {
[17:40:12.026]                       parallel_sendData <- get("sendData", mode = "function", 
[17:40:12.026]                         envir = ns)
[17:40:12.026]                       envir <- sys.frame(frame)
[17:40:12.026]                       master <- NULL
[17:40:12.026]                       while (!identical(envir, .GlobalEnv) && 
[17:40:12.026]                         !identical(envir, emptyenv())) {
[17:40:12.026]                         if (exists("master", mode = "list", envir = envir, 
[17:40:12.026]                           inherits = FALSE)) {
[17:40:12.026]                           master <- get("master", mode = "list", 
[17:40:12.026]                             envir = envir, inherits = FALSE)
[17:40:12.026]                           if (inherits(master, c("SOCKnode", 
[17:40:12.026]                             "SOCK0node"))) {
[17:40:12.026]                             sendCondition <<- function(cond) {
[17:40:12.026]                               data <- list(type = "VALUE", value = cond, 
[17:40:12.026]                                 success = TRUE)
[17:40:12.026]                               parallel_sendData(master, data)
[17:40:12.026]                             }
[17:40:12.026]                             return(sendCondition)
[17:40:12.026]                           }
[17:40:12.026]                         }
[17:40:12.026]                         frame <- frame + 1L
[17:40:12.026]                         envir <- sys.frame(frame)
[17:40:12.026]                       }
[17:40:12.026]                     }
[17:40:12.026]                     sendCondition <<- function(cond) NULL
[17:40:12.026]                   }
[17:40:12.026]                 })
[17:40:12.026]                 withCallingHandlers({
[17:40:12.026]                   NA
[17:40:12.026]                 }, immediateCondition = function(cond) {
[17:40:12.026]                   sendCondition <- ...future.makeSendCondition()
[17:40:12.026]                   sendCondition(cond)
[17:40:12.026]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:12.026]                   {
[17:40:12.026]                     inherits <- base::inherits
[17:40:12.026]                     invokeRestart <- base::invokeRestart
[17:40:12.026]                     is.null <- base::is.null
[17:40:12.026]                     muffled <- FALSE
[17:40:12.026]                     if (inherits(cond, "message")) {
[17:40:12.026]                       muffled <- grepl(pattern, "muffleMessage")
[17:40:12.026]                       if (muffled) 
[17:40:12.026]                         invokeRestart("muffleMessage")
[17:40:12.026]                     }
[17:40:12.026]                     else if (inherits(cond, "warning")) {
[17:40:12.026]                       muffled <- grepl(pattern, "muffleWarning")
[17:40:12.026]                       if (muffled) 
[17:40:12.026]                         invokeRestart("muffleWarning")
[17:40:12.026]                     }
[17:40:12.026]                     else if (inherits(cond, "condition")) {
[17:40:12.026]                       if (!is.null(pattern)) {
[17:40:12.026]                         computeRestarts <- base::computeRestarts
[17:40:12.026]                         grepl <- base::grepl
[17:40:12.026]                         restarts <- computeRestarts(cond)
[17:40:12.026]                         for (restart in restarts) {
[17:40:12.026]                           name <- restart$name
[17:40:12.026]                           if (is.null(name)) 
[17:40:12.026]                             next
[17:40:12.026]                           if (!grepl(pattern, name)) 
[17:40:12.026]                             next
[17:40:12.026]                           invokeRestart(restart)
[17:40:12.026]                           muffled <- TRUE
[17:40:12.026]                           break
[17:40:12.026]                         }
[17:40:12.026]                       }
[17:40:12.026]                     }
[17:40:12.026]                     invisible(muffled)
[17:40:12.026]                   }
[17:40:12.026]                   muffleCondition(cond)
[17:40:12.026]                 })
[17:40:12.026]             }))
[17:40:12.026]             future::FutureResult(value = ...future.value$value, 
[17:40:12.026]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:12.026]                   ...future.rng), globalenv = if (FALSE) 
[17:40:12.026]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:12.026]                     ...future.globalenv.names))
[17:40:12.026]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:12.026]         }, condition = base::local({
[17:40:12.026]             c <- base::c
[17:40:12.026]             inherits <- base::inherits
[17:40:12.026]             invokeRestart <- base::invokeRestart
[17:40:12.026]             length <- base::length
[17:40:12.026]             list <- base::list
[17:40:12.026]             seq.int <- base::seq.int
[17:40:12.026]             signalCondition <- base::signalCondition
[17:40:12.026]             sys.calls <- base::sys.calls
[17:40:12.026]             `[[` <- base::`[[`
[17:40:12.026]             `+` <- base::`+`
[17:40:12.026]             `<<-` <- base::`<<-`
[17:40:12.026]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:12.026]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:12.026]                   3L)]
[17:40:12.026]             }
[17:40:12.026]             function(cond) {
[17:40:12.026]                 is_error <- inherits(cond, "error")
[17:40:12.026]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:12.026]                   NULL)
[17:40:12.026]                 if (is_error) {
[17:40:12.026]                   sessionInformation <- function() {
[17:40:12.026]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:12.026]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:12.026]                       search = base::search(), system = base::Sys.info())
[17:40:12.026]                   }
[17:40:12.026]                   ...future.conditions[[length(...future.conditions) + 
[17:40:12.026]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:12.026]                     cond$call), session = sessionInformation(), 
[17:40:12.026]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:12.026]                   signalCondition(cond)
[17:40:12.026]                 }
[17:40:12.026]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:12.026]                 "immediateCondition"))) {
[17:40:12.026]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:12.026]                   ...future.conditions[[length(...future.conditions) + 
[17:40:12.026]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:12.026]                   if (TRUE && !signal) {
[17:40:12.026]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:12.026]                     {
[17:40:12.026]                       inherits <- base::inherits
[17:40:12.026]                       invokeRestart <- base::invokeRestart
[17:40:12.026]                       is.null <- base::is.null
[17:40:12.026]                       muffled <- FALSE
[17:40:12.026]                       if (inherits(cond, "message")) {
[17:40:12.026]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:12.026]                         if (muffled) 
[17:40:12.026]                           invokeRestart("muffleMessage")
[17:40:12.026]                       }
[17:40:12.026]                       else if (inherits(cond, "warning")) {
[17:40:12.026]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:12.026]                         if (muffled) 
[17:40:12.026]                           invokeRestart("muffleWarning")
[17:40:12.026]                       }
[17:40:12.026]                       else if (inherits(cond, "condition")) {
[17:40:12.026]                         if (!is.null(pattern)) {
[17:40:12.026]                           computeRestarts <- base::computeRestarts
[17:40:12.026]                           grepl <- base::grepl
[17:40:12.026]                           restarts <- computeRestarts(cond)
[17:40:12.026]                           for (restart in restarts) {
[17:40:12.026]                             name <- restart$name
[17:40:12.026]                             if (is.null(name)) 
[17:40:12.026]                               next
[17:40:12.026]                             if (!grepl(pattern, name)) 
[17:40:12.026]                               next
[17:40:12.026]                             invokeRestart(restart)
[17:40:12.026]                             muffled <- TRUE
[17:40:12.026]                             break
[17:40:12.026]                           }
[17:40:12.026]                         }
[17:40:12.026]                       }
[17:40:12.026]                       invisible(muffled)
[17:40:12.026]                     }
[17:40:12.026]                     muffleCondition(cond, pattern = "^muffle")
[17:40:12.026]                   }
[17:40:12.026]                 }
[17:40:12.026]                 else {
[17:40:12.026]                   if (TRUE) {
[17:40:12.026]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:12.026]                     {
[17:40:12.026]                       inherits <- base::inherits
[17:40:12.026]                       invokeRestart <- base::invokeRestart
[17:40:12.026]                       is.null <- base::is.null
[17:40:12.026]                       muffled <- FALSE
[17:40:12.026]                       if (inherits(cond, "message")) {
[17:40:12.026]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:12.026]                         if (muffled) 
[17:40:12.026]                           invokeRestart("muffleMessage")
[17:40:12.026]                       }
[17:40:12.026]                       else if (inherits(cond, "warning")) {
[17:40:12.026]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:12.026]                         if (muffled) 
[17:40:12.026]                           invokeRestart("muffleWarning")
[17:40:12.026]                       }
[17:40:12.026]                       else if (inherits(cond, "condition")) {
[17:40:12.026]                         if (!is.null(pattern)) {
[17:40:12.026]                           computeRestarts <- base::computeRestarts
[17:40:12.026]                           grepl <- base::grepl
[17:40:12.026]                           restarts <- computeRestarts(cond)
[17:40:12.026]                           for (restart in restarts) {
[17:40:12.026]                             name <- restart$name
[17:40:12.026]                             if (is.null(name)) 
[17:40:12.026]                               next
[17:40:12.026]                             if (!grepl(pattern, name)) 
[17:40:12.026]                               next
[17:40:12.026]                             invokeRestart(restart)
[17:40:12.026]                             muffled <- TRUE
[17:40:12.026]                             break
[17:40:12.026]                           }
[17:40:12.026]                         }
[17:40:12.026]                       }
[17:40:12.026]                       invisible(muffled)
[17:40:12.026]                     }
[17:40:12.026]                     muffleCondition(cond, pattern = "^muffle")
[17:40:12.026]                   }
[17:40:12.026]                 }
[17:40:12.026]             }
[17:40:12.026]         }))
[17:40:12.026]     }, error = function(ex) {
[17:40:12.026]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:12.026]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:12.026]                 ...future.rng), started = ...future.startTime, 
[17:40:12.026]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:12.026]             version = "1.8"), class = "FutureResult")
[17:40:12.026]     }, finally = {
[17:40:12.026]         if (!identical(...future.workdir, getwd())) 
[17:40:12.026]             setwd(...future.workdir)
[17:40:12.026]         {
[17:40:12.026]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:12.026]                 ...future.oldOptions$nwarnings <- NULL
[17:40:12.026]             }
[17:40:12.026]             base::options(...future.oldOptions)
[17:40:12.026]             if (.Platform$OS.type == "windows") {
[17:40:12.026]                 old_names <- names(...future.oldEnvVars)
[17:40:12.026]                 envs <- base::Sys.getenv()
[17:40:12.026]                 names <- names(envs)
[17:40:12.026]                 common <- intersect(names, old_names)
[17:40:12.026]                 added <- setdiff(names, old_names)
[17:40:12.026]                 removed <- setdiff(old_names, names)
[17:40:12.026]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:12.026]                   envs[common]]
[17:40:12.026]                 NAMES <- toupper(changed)
[17:40:12.026]                 args <- list()
[17:40:12.026]                 for (kk in seq_along(NAMES)) {
[17:40:12.026]                   name <- changed[[kk]]
[17:40:12.026]                   NAME <- NAMES[[kk]]
[17:40:12.026]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:12.026]                     next
[17:40:12.026]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:12.026]                 }
[17:40:12.026]                 NAMES <- toupper(added)
[17:40:12.026]                 for (kk in seq_along(NAMES)) {
[17:40:12.026]                   name <- added[[kk]]
[17:40:12.026]                   NAME <- NAMES[[kk]]
[17:40:12.026]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:12.026]                     next
[17:40:12.026]                   args[[name]] <- ""
[17:40:12.026]                 }
[17:40:12.026]                 NAMES <- toupper(removed)
[17:40:12.026]                 for (kk in seq_along(NAMES)) {
[17:40:12.026]                   name <- removed[[kk]]
[17:40:12.026]                   NAME <- NAMES[[kk]]
[17:40:12.026]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:12.026]                     next
[17:40:12.026]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:12.026]                 }
[17:40:12.026]                 if (length(args) > 0) 
[17:40:12.026]                   base::do.call(base::Sys.setenv, args = args)
[17:40:12.026]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:12.026]             }
[17:40:12.026]             else {
[17:40:12.026]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:12.026]             }
[17:40:12.026]             {
[17:40:12.026]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:12.026]                   0L) {
[17:40:12.026]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:12.026]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:12.026]                   base::options(opts)
[17:40:12.026]                 }
[17:40:12.026]                 {
[17:40:12.026]                   {
[17:40:12.026]                     base::options(mc.cores = ...future.mc.cores.old)
[17:40:12.026]                     NULL
[17:40:12.026]                   }
[17:40:12.026]                   options(future.plan = NULL)
[17:40:12.026]                   if (is.na(NA_character_)) 
[17:40:12.026]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:12.026]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:12.026]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:40:12.026]                     .init = FALSE)
[17:40:12.026]                 }
[17:40:12.026]             }
[17:40:12.026]         }
[17:40:12.026]     })
[17:40:12.026]     if (TRUE) {
[17:40:12.026]         base::sink(type = "output", split = FALSE)
[17:40:12.026]         if (TRUE) {
[17:40:12.026]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:12.026]         }
[17:40:12.026]         else {
[17:40:12.026]             ...future.result["stdout"] <- base::list(NULL)
[17:40:12.026]         }
[17:40:12.026]         base::close(...future.stdout)
[17:40:12.026]         ...future.stdout <- NULL
[17:40:12.026]     }
[17:40:12.026]     ...future.result$conditions <- ...future.conditions
[17:40:12.026]     ...future.result$finished <- base::Sys.time()
[17:40:12.026]     ...future.result
[17:40:12.026] }
[17:40:12.077] MultisessionFuture started
[17:40:12.078] result() for ClusterFuture ...
[17:40:12.078] receiveMessageFromWorker() for ClusterFuture ...
[17:40:12.078] - Validating connection of MultisessionFuture
[17:40:12.109] - received message: FutureResult
[17:40:12.109] - Received FutureResult
[17:40:12.111] - Erased future from FutureRegistry
[17:40:12.112] result() for ClusterFuture ...
[17:40:12.112] - result already collected: FutureResult
[17:40:12.112] result() for ClusterFuture ... done
[17:40:12.112] receiveMessageFromWorker() for ClusterFuture ... done
[17:40:12.112] result() for ClusterFuture ... done
[17:40:12.112] result() for ClusterFuture ...
[17:40:12.112] - result already collected: FutureResult
[17:40:12.113] result() for ClusterFuture ... done
[17:40:12.113] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:40:12.117] plan(): nbrOfWorkers() = 2
nbrOfWorkers: 2
[17:40:12.127] getGlobalsAndPackages() ...
[17:40:12.127] 
[17:40:12.127] - globals: [0] <none>
[17:40:12.127] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers: 2
[17:40:12.145] getGlobalsAndPackages() ...
[17:40:12.145] 
[17:40:12.145] - globals: [0] <none>
[17:40:12.145] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers(background = TRUE): 2
[17:40:12.157] plan(): Setting new future strategy stack:
[17:40:12.157] List of future strategies:
[17:40:12.157] 1. multisession:
[17:40:12.157]    - args: function (..., workers = 1L, envir = parent.frame())
[17:40:12.157]    - tweaked: TRUE
[17:40:12.157]    - call: plan(strategy, workers = 1L)
[17:40:12.158] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:40:12.158] multisession:
[17:40:12.158] - args: function (..., workers = 1L, envir = parent.frame())
[17:40:12.158] - tweaked: TRUE
[17:40:12.158] - call: plan(strategy, workers = 1L)
[17:40:12.158] getGlobalsAndPackages() ...
[17:40:12.159] Not searching for globals
[17:40:12.159] - globals: [0] <none>
[17:40:12.159] getGlobalsAndPackages() ... DONE
[17:40:12.160] Packages needed by the future expression (n = 0): <none>
[17:40:12.160] Packages needed by future strategies (n = 0): <none>
[17:40:12.161] {
[17:40:12.161]     {
[17:40:12.161]         {
[17:40:12.161]             ...future.startTime <- base::Sys.time()
[17:40:12.161]             {
[17:40:12.161]                 {
[17:40:12.161]                   {
[17:40:12.161]                     base::local({
[17:40:12.161]                       has_future <- base::requireNamespace("future", 
[17:40:12.161]                         quietly = TRUE)
[17:40:12.161]                       if (has_future) {
[17:40:12.161]                         ns <- base::getNamespace("future")
[17:40:12.161]                         version <- ns[[".package"]][["version"]]
[17:40:12.161]                         if (is.null(version)) 
[17:40:12.161]                           version <- utils::packageVersion("future")
[17:40:12.161]                       }
[17:40:12.161]                       else {
[17:40:12.161]                         version <- NULL
[17:40:12.161]                       }
[17:40:12.161]                       if (!has_future || version < "1.8.0") {
[17:40:12.161]                         info <- base::c(r_version = base::gsub("R version ", 
[17:40:12.161]                           "", base::R.version$version.string), 
[17:40:12.161]                           platform = base::sprintf("%s (%s-bit)", 
[17:40:12.161]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:12.161]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:12.161]                             "release", "version")], collapse = " "), 
[17:40:12.161]                           hostname = base::Sys.info()[["nodename"]])
[17:40:12.161]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:40:12.161]                           info)
[17:40:12.161]                         info <- base::paste(info, collapse = "; ")
[17:40:12.161]                         if (!has_future) {
[17:40:12.161]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:12.161]                             info)
[17:40:12.161]                         }
[17:40:12.161]                         else {
[17:40:12.161]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:12.161]                             info, version)
[17:40:12.161]                         }
[17:40:12.161]                         base::stop(msg)
[17:40:12.161]                       }
[17:40:12.161]                     })
[17:40:12.161]                   }
[17:40:12.161]                   ...future.strategy.old <- future::plan("list")
[17:40:12.161]                   options(future.plan = NULL)
[17:40:12.161]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:12.161]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:12.161]                 }
[17:40:12.161]                 ...future.workdir <- getwd()
[17:40:12.161]             }
[17:40:12.161]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:12.161]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:12.161]         }
[17:40:12.161]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:12.161]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:40:12.161]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:12.161]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:12.161]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:12.161]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:12.161]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:12.161]             base::names(...future.oldOptions))
[17:40:12.161]     }
[17:40:12.161]     if (FALSE) {
[17:40:12.161]     }
[17:40:12.161]     else {
[17:40:12.161]         if (TRUE) {
[17:40:12.161]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:12.161]                 open = "w")
[17:40:12.161]         }
[17:40:12.161]         else {
[17:40:12.161]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:12.161]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:12.161]         }
[17:40:12.161]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:12.161]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:12.161]             base::sink(type = "output", split = FALSE)
[17:40:12.161]             base::close(...future.stdout)
[17:40:12.161]         }, add = TRUE)
[17:40:12.161]     }
[17:40:12.161]     ...future.frame <- base::sys.nframe()
[17:40:12.161]     ...future.conditions <- base::list()
[17:40:12.161]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:12.161]     if (FALSE) {
[17:40:12.161]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:12.161]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:12.161]     }
[17:40:12.161]     ...future.result <- base::tryCatch({
[17:40:12.161]         base::withCallingHandlers({
[17:40:12.161]             ...future.value <- base::withVisible(base::local(NA))
[17:40:12.161]             future::FutureResult(value = ...future.value$value, 
[17:40:12.161]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:12.161]                   ...future.rng), globalenv = if (FALSE) 
[17:40:12.161]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:12.161]                     ...future.globalenv.names))
[17:40:12.161]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:12.161]         }, condition = base::local({
[17:40:12.161]             c <- base::c
[17:40:12.161]             inherits <- base::inherits
[17:40:12.161]             invokeRestart <- base::invokeRestart
[17:40:12.161]             length <- base::length
[17:40:12.161]             list <- base::list
[17:40:12.161]             seq.int <- base::seq.int
[17:40:12.161]             signalCondition <- base::signalCondition
[17:40:12.161]             sys.calls <- base::sys.calls
[17:40:12.161]             `[[` <- base::`[[`
[17:40:12.161]             `+` <- base::`+`
[17:40:12.161]             `<<-` <- base::`<<-`
[17:40:12.161]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:12.161]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:12.161]                   3L)]
[17:40:12.161]             }
[17:40:12.161]             function(cond) {
[17:40:12.161]                 is_error <- inherits(cond, "error")
[17:40:12.161]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:12.161]                   NULL)
[17:40:12.161]                 if (is_error) {
[17:40:12.161]                   sessionInformation <- function() {
[17:40:12.161]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:12.161]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:12.161]                       search = base::search(), system = base::Sys.info())
[17:40:12.161]                   }
[17:40:12.161]                   ...future.conditions[[length(...future.conditions) + 
[17:40:12.161]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:12.161]                     cond$call), session = sessionInformation(), 
[17:40:12.161]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:12.161]                   signalCondition(cond)
[17:40:12.161]                 }
[17:40:12.161]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:12.161]                 "immediateCondition"))) {
[17:40:12.161]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:12.161]                   ...future.conditions[[length(...future.conditions) + 
[17:40:12.161]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:12.161]                   if (TRUE && !signal) {
[17:40:12.161]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:12.161]                     {
[17:40:12.161]                       inherits <- base::inherits
[17:40:12.161]                       invokeRestart <- base::invokeRestart
[17:40:12.161]                       is.null <- base::is.null
[17:40:12.161]                       muffled <- FALSE
[17:40:12.161]                       if (inherits(cond, "message")) {
[17:40:12.161]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:12.161]                         if (muffled) 
[17:40:12.161]                           invokeRestart("muffleMessage")
[17:40:12.161]                       }
[17:40:12.161]                       else if (inherits(cond, "warning")) {
[17:40:12.161]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:12.161]                         if (muffled) 
[17:40:12.161]                           invokeRestart("muffleWarning")
[17:40:12.161]                       }
[17:40:12.161]                       else if (inherits(cond, "condition")) {
[17:40:12.161]                         if (!is.null(pattern)) {
[17:40:12.161]                           computeRestarts <- base::computeRestarts
[17:40:12.161]                           grepl <- base::grepl
[17:40:12.161]                           restarts <- computeRestarts(cond)
[17:40:12.161]                           for (restart in restarts) {
[17:40:12.161]                             name <- restart$name
[17:40:12.161]                             if (is.null(name)) 
[17:40:12.161]                               next
[17:40:12.161]                             if (!grepl(pattern, name)) 
[17:40:12.161]                               next
[17:40:12.161]                             invokeRestart(restart)
[17:40:12.161]                             muffled <- TRUE
[17:40:12.161]                             break
[17:40:12.161]                           }
[17:40:12.161]                         }
[17:40:12.161]                       }
[17:40:12.161]                       invisible(muffled)
[17:40:12.161]                     }
[17:40:12.161]                     muffleCondition(cond, pattern = "^muffle")
[17:40:12.161]                   }
[17:40:12.161]                 }
[17:40:12.161]                 else {
[17:40:12.161]                   if (TRUE) {
[17:40:12.161]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:12.161]                     {
[17:40:12.161]                       inherits <- base::inherits
[17:40:12.161]                       invokeRestart <- base::invokeRestart
[17:40:12.161]                       is.null <- base::is.null
[17:40:12.161]                       muffled <- FALSE
[17:40:12.161]                       if (inherits(cond, "message")) {
[17:40:12.161]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:12.161]                         if (muffled) 
[17:40:12.161]                           invokeRestart("muffleMessage")
[17:40:12.161]                       }
[17:40:12.161]                       else if (inherits(cond, "warning")) {
[17:40:12.161]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:12.161]                         if (muffled) 
[17:40:12.161]                           invokeRestart("muffleWarning")
[17:40:12.161]                       }
[17:40:12.161]                       else if (inherits(cond, "condition")) {
[17:40:12.161]                         if (!is.null(pattern)) {
[17:40:12.161]                           computeRestarts <- base::computeRestarts
[17:40:12.161]                           grepl <- base::grepl
[17:40:12.161]                           restarts <- computeRestarts(cond)
[17:40:12.161]                           for (restart in restarts) {
[17:40:12.161]                             name <- restart$name
[17:40:12.161]                             if (is.null(name)) 
[17:40:12.161]                               next
[17:40:12.161]                             if (!grepl(pattern, name)) 
[17:40:12.161]                               next
[17:40:12.161]                             invokeRestart(restart)
[17:40:12.161]                             muffled <- TRUE
[17:40:12.161]                             break
[17:40:12.161]                           }
[17:40:12.161]                         }
[17:40:12.161]                       }
[17:40:12.161]                       invisible(muffled)
[17:40:12.161]                     }
[17:40:12.161]                     muffleCondition(cond, pattern = "^muffle")
[17:40:12.161]                   }
[17:40:12.161]                 }
[17:40:12.161]             }
[17:40:12.161]         }))
[17:40:12.161]     }, error = function(ex) {
[17:40:12.161]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:12.161]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:12.161]                 ...future.rng), started = ...future.startTime, 
[17:40:12.161]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:12.161]             version = "1.8"), class = "FutureResult")
[17:40:12.161]     }, finally = {
[17:40:12.161]         if (!identical(...future.workdir, getwd())) 
[17:40:12.161]             setwd(...future.workdir)
[17:40:12.161]         {
[17:40:12.161]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:12.161]                 ...future.oldOptions$nwarnings <- NULL
[17:40:12.161]             }
[17:40:12.161]             base::options(...future.oldOptions)
[17:40:12.161]             if (.Platform$OS.type == "windows") {
[17:40:12.161]                 old_names <- names(...future.oldEnvVars)
[17:40:12.161]                 envs <- base::Sys.getenv()
[17:40:12.161]                 names <- names(envs)
[17:40:12.161]                 common <- intersect(names, old_names)
[17:40:12.161]                 added <- setdiff(names, old_names)
[17:40:12.161]                 removed <- setdiff(old_names, names)
[17:40:12.161]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:12.161]                   envs[common]]
[17:40:12.161]                 NAMES <- toupper(changed)
[17:40:12.161]                 args <- list()
[17:40:12.161]                 for (kk in seq_along(NAMES)) {
[17:40:12.161]                   name <- changed[[kk]]
[17:40:12.161]                   NAME <- NAMES[[kk]]
[17:40:12.161]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:12.161]                     next
[17:40:12.161]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:12.161]                 }
[17:40:12.161]                 NAMES <- toupper(added)
[17:40:12.161]                 for (kk in seq_along(NAMES)) {
[17:40:12.161]                   name <- added[[kk]]
[17:40:12.161]                   NAME <- NAMES[[kk]]
[17:40:12.161]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:12.161]                     next
[17:40:12.161]                   args[[name]] <- ""
[17:40:12.161]                 }
[17:40:12.161]                 NAMES <- toupper(removed)
[17:40:12.161]                 for (kk in seq_along(NAMES)) {
[17:40:12.161]                   name <- removed[[kk]]
[17:40:12.161]                   NAME <- NAMES[[kk]]
[17:40:12.161]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:12.161]                     next
[17:40:12.161]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:12.161]                 }
[17:40:12.161]                 if (length(args) > 0) 
[17:40:12.161]                   base::do.call(base::Sys.setenv, args = args)
[17:40:12.161]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:12.161]             }
[17:40:12.161]             else {
[17:40:12.161]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:12.161]             }
[17:40:12.161]             {
[17:40:12.161]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:12.161]                   0L) {
[17:40:12.161]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:12.161]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:12.161]                   base::options(opts)
[17:40:12.161]                 }
[17:40:12.161]                 {
[17:40:12.161]                   {
[17:40:12.161]                     NULL
[17:40:12.161]                     RNGkind("Mersenne-Twister")
[17:40:12.161]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:40:12.161]                       inherits = FALSE)
[17:40:12.161]                   }
[17:40:12.161]                   options(future.plan = NULL)
[17:40:12.161]                   if (is.na(NA_character_)) 
[17:40:12.161]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:12.161]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:12.161]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:40:12.161]                     .init = FALSE)
[17:40:12.161]                 }
[17:40:12.161]             }
[17:40:12.161]         }
[17:40:12.161]     })
[17:40:12.161]     if (TRUE) {
[17:40:12.161]         base::sink(type = "output", split = FALSE)
[17:40:12.161]         if (TRUE) {
[17:40:12.161]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:12.161]         }
[17:40:12.161]         else {
[17:40:12.161]             ...future.result["stdout"] <- base::list(NULL)
[17:40:12.161]         }
[17:40:12.161]         base::close(...future.stdout)
[17:40:12.161]         ...future.stdout <- NULL
[17:40:12.161]     }
[17:40:12.161]     ...future.result$conditions <- ...future.conditions
[17:40:12.161]     ...future.result$finished <- base::Sys.time()
[17:40:12.161]     ...future.result
[17:40:12.161] }
[17:40:12.164] plan(): Setting new future strategy stack:
[17:40:12.164] List of future strategies:
[17:40:12.164] 1. sequential:
[17:40:12.164]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:40:12.164]    - tweaked: FALSE
[17:40:12.164]    - call: NULL
[17:40:12.165] plan(): nbrOfWorkers() = 1
[17:40:12.167] plan(): Setting new future strategy stack:
[17:40:12.167] List of future strategies:
[17:40:12.167] 1. multisession:
[17:40:12.167]    - args: function (..., workers = 1L, envir = parent.frame())
[17:40:12.167]    - tweaked: TRUE
[17:40:12.167]    - call: plan(strategy, workers = 1L)
[17:40:12.168] plan(): nbrOfWorkers() = 1
[17:40:12.168] SequentialFuture started (and completed)
[17:40:12.168] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:40:12.169] plan(): nbrOfWorkers() = 1
nbrOfWorkers: 1
[17:40:12.169] getGlobalsAndPackages() ...
[17:40:12.169] Searching for globals...
[17:40:12.172] 
[17:40:12.172] Searching for globals ... DONE
[17:40:12.172] - globals: [0] <none>
[17:40:12.172] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers: 1
[17:40:12.173] getGlobalsAndPackages() ...
[17:40:12.173] Searching for globals...
[17:40:12.173] 
[17:40:12.173] Searching for globals ... DONE
[17:40:12.173] - globals: [0] <none>
[17:40:12.174] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers(background = TRUE): 0
[17:40:12.174] plan(): Setting new future strategy stack:
[17:40:12.174] List of future strategies:
[17:40:12.174] 1. multisession:
[17:40:12.174]    - args: function (..., workers = "<function () ; max(1L, future::availableCores() - 1L)>", envir = parent.frame())
[17:40:12.174]    - tweaked: TRUE
[17:40:12.174]    - call: plan(strategy, workers = allButOneCore)
[17:40:12.175] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:40:12.175] multisession:
[17:40:12.175] - args: function (..., workers = "<function () ; max(1L, future::availableCores() - 1L)>", envir = parent.frame())
[17:40:12.175] - tweaked: TRUE
[17:40:12.175] - call: plan(strategy, workers = allButOneCore)
[17:40:12.179] getGlobalsAndPackages() ...
[17:40:12.179] Not searching for globals
[17:40:12.182] - globals: [0] <none>
[17:40:12.182] getGlobalsAndPackages() ... DONE
[17:40:12.182] Packages needed by the future expression (n = 0): <none>
[17:40:12.182] Packages needed by future strategies (n = 0): <none>
[17:40:12.183] {
[17:40:12.183]     {
[17:40:12.183]         {
[17:40:12.183]             ...future.startTime <- base::Sys.time()
[17:40:12.183]             {
[17:40:12.183]                 {
[17:40:12.183]                   {
[17:40:12.183]                     base::local({
[17:40:12.183]                       has_future <- base::requireNamespace("future", 
[17:40:12.183]                         quietly = TRUE)
[17:40:12.183]                       if (has_future) {
[17:40:12.183]                         ns <- base::getNamespace("future")
[17:40:12.183]                         version <- ns[[".package"]][["version"]]
[17:40:12.183]                         if (is.null(version)) 
[17:40:12.183]                           version <- utils::packageVersion("future")
[17:40:12.183]                       }
[17:40:12.183]                       else {
[17:40:12.183]                         version <- NULL
[17:40:12.183]                       }
[17:40:12.183]                       if (!has_future || version < "1.8.0") {
[17:40:12.183]                         info <- base::c(r_version = base::gsub("R version ", 
[17:40:12.183]                           "", base::R.version$version.string), 
[17:40:12.183]                           platform = base::sprintf("%s (%s-bit)", 
[17:40:12.183]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:12.183]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:12.183]                             "release", "version")], collapse = " "), 
[17:40:12.183]                           hostname = base::Sys.info()[["nodename"]])
[17:40:12.183]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:40:12.183]                           info)
[17:40:12.183]                         info <- base::paste(info, collapse = "; ")
[17:40:12.183]                         if (!has_future) {
[17:40:12.183]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:12.183]                             info)
[17:40:12.183]                         }
[17:40:12.183]                         else {
[17:40:12.183]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:12.183]                             info, version)
[17:40:12.183]                         }
[17:40:12.183]                         base::stop(msg)
[17:40:12.183]                       }
[17:40:12.183]                     })
[17:40:12.183]                   }
[17:40:12.183]                   ...future.strategy.old <- future::plan("list")
[17:40:12.183]                   options(future.plan = NULL)
[17:40:12.183]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:12.183]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:12.183]                 }
[17:40:12.183]                 ...future.workdir <- getwd()
[17:40:12.183]             }
[17:40:12.183]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:12.183]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:12.183]         }
[17:40:12.183]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:12.183]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:40:12.183]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:12.183]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:12.183]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:12.183]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:12.183]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:12.183]             base::names(...future.oldOptions))
[17:40:12.183]     }
[17:40:12.183]     if (FALSE) {
[17:40:12.183]     }
[17:40:12.183]     else {
[17:40:12.183]         if (TRUE) {
[17:40:12.183]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:12.183]                 open = "w")
[17:40:12.183]         }
[17:40:12.183]         else {
[17:40:12.183]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:12.183]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:12.183]         }
[17:40:12.183]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:12.183]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:12.183]             base::sink(type = "output", split = FALSE)
[17:40:12.183]             base::close(...future.stdout)
[17:40:12.183]         }, add = TRUE)
[17:40:12.183]     }
[17:40:12.183]     ...future.frame <- base::sys.nframe()
[17:40:12.183]     ...future.conditions <- base::list()
[17:40:12.183]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:12.183]     if (FALSE) {
[17:40:12.183]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:12.183]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:12.183]     }
[17:40:12.183]     ...future.result <- base::tryCatch({
[17:40:12.183]         base::withCallingHandlers({
[17:40:12.183]             ...future.value <- base::withVisible(base::local(NA))
[17:40:12.183]             future::FutureResult(value = ...future.value$value, 
[17:40:12.183]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:12.183]                   ...future.rng), globalenv = if (FALSE) 
[17:40:12.183]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:12.183]                     ...future.globalenv.names))
[17:40:12.183]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:12.183]         }, condition = base::local({
[17:40:12.183]             c <- base::c
[17:40:12.183]             inherits <- base::inherits
[17:40:12.183]             invokeRestart <- base::invokeRestart
[17:40:12.183]             length <- base::length
[17:40:12.183]             list <- base::list
[17:40:12.183]             seq.int <- base::seq.int
[17:40:12.183]             signalCondition <- base::signalCondition
[17:40:12.183]             sys.calls <- base::sys.calls
[17:40:12.183]             `[[` <- base::`[[`
[17:40:12.183]             `+` <- base::`+`
[17:40:12.183]             `<<-` <- base::`<<-`
[17:40:12.183]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:12.183]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:12.183]                   3L)]
[17:40:12.183]             }
[17:40:12.183]             function(cond) {
[17:40:12.183]                 is_error <- inherits(cond, "error")
[17:40:12.183]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:12.183]                   NULL)
[17:40:12.183]                 if (is_error) {
[17:40:12.183]                   sessionInformation <- function() {
[17:40:12.183]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:12.183]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:12.183]                       search = base::search(), system = base::Sys.info())
[17:40:12.183]                   }
[17:40:12.183]                   ...future.conditions[[length(...future.conditions) + 
[17:40:12.183]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:12.183]                     cond$call), session = sessionInformation(), 
[17:40:12.183]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:12.183]                   signalCondition(cond)
[17:40:12.183]                 }
[17:40:12.183]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:12.183]                 "immediateCondition"))) {
[17:40:12.183]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:12.183]                   ...future.conditions[[length(...future.conditions) + 
[17:40:12.183]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:12.183]                   if (TRUE && !signal) {
[17:40:12.183]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:12.183]                     {
[17:40:12.183]                       inherits <- base::inherits
[17:40:12.183]                       invokeRestart <- base::invokeRestart
[17:40:12.183]                       is.null <- base::is.null
[17:40:12.183]                       muffled <- FALSE
[17:40:12.183]                       if (inherits(cond, "message")) {
[17:40:12.183]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:12.183]                         if (muffled) 
[17:40:12.183]                           invokeRestart("muffleMessage")
[17:40:12.183]                       }
[17:40:12.183]                       else if (inherits(cond, "warning")) {
[17:40:12.183]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:12.183]                         if (muffled) 
[17:40:12.183]                           invokeRestart("muffleWarning")
[17:40:12.183]                       }
[17:40:12.183]                       else if (inherits(cond, "condition")) {
[17:40:12.183]                         if (!is.null(pattern)) {
[17:40:12.183]                           computeRestarts <- base::computeRestarts
[17:40:12.183]                           grepl <- base::grepl
[17:40:12.183]                           restarts <- computeRestarts(cond)
[17:40:12.183]                           for (restart in restarts) {
[17:40:12.183]                             name <- restart$name
[17:40:12.183]                             if (is.null(name)) 
[17:40:12.183]                               next
[17:40:12.183]                             if (!grepl(pattern, name)) 
[17:40:12.183]                               next
[17:40:12.183]                             invokeRestart(restart)
[17:40:12.183]                             muffled <- TRUE
[17:40:12.183]                             break
[17:40:12.183]                           }
[17:40:12.183]                         }
[17:40:12.183]                       }
[17:40:12.183]                       invisible(muffled)
[17:40:12.183]                     }
[17:40:12.183]                     muffleCondition(cond, pattern = "^muffle")
[17:40:12.183]                   }
[17:40:12.183]                 }
[17:40:12.183]                 else {
[17:40:12.183]                   if (TRUE) {
[17:40:12.183]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:12.183]                     {
[17:40:12.183]                       inherits <- base::inherits
[17:40:12.183]                       invokeRestart <- base::invokeRestart
[17:40:12.183]                       is.null <- base::is.null
[17:40:12.183]                       muffled <- FALSE
[17:40:12.183]                       if (inherits(cond, "message")) {
[17:40:12.183]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:12.183]                         if (muffled) 
[17:40:12.183]                           invokeRestart("muffleMessage")
[17:40:12.183]                       }
[17:40:12.183]                       else if (inherits(cond, "warning")) {
[17:40:12.183]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:12.183]                         if (muffled) 
[17:40:12.183]                           invokeRestart("muffleWarning")
[17:40:12.183]                       }
[17:40:12.183]                       else if (inherits(cond, "condition")) {
[17:40:12.183]                         if (!is.null(pattern)) {
[17:40:12.183]                           computeRestarts <- base::computeRestarts
[17:40:12.183]                           grepl <- base::grepl
[17:40:12.183]                           restarts <- computeRestarts(cond)
[17:40:12.183]                           for (restart in restarts) {
[17:40:12.183]                             name <- restart$name
[17:40:12.183]                             if (is.null(name)) 
[17:40:12.183]                               next
[17:40:12.183]                             if (!grepl(pattern, name)) 
[17:40:12.183]                               next
[17:40:12.183]                             invokeRestart(restart)
[17:40:12.183]                             muffled <- TRUE
[17:40:12.183]                             break
[17:40:12.183]                           }
[17:40:12.183]                         }
[17:40:12.183]                       }
[17:40:12.183]                       invisible(muffled)
[17:40:12.183]                     }
[17:40:12.183]                     muffleCondition(cond, pattern = "^muffle")
[17:40:12.183]                   }
[17:40:12.183]                 }
[17:40:12.183]             }
[17:40:12.183]         }))
[17:40:12.183]     }, error = function(ex) {
[17:40:12.183]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:12.183]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:12.183]                 ...future.rng), started = ...future.startTime, 
[17:40:12.183]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:12.183]             version = "1.8"), class = "FutureResult")
[17:40:12.183]     }, finally = {
[17:40:12.183]         if (!identical(...future.workdir, getwd())) 
[17:40:12.183]             setwd(...future.workdir)
[17:40:12.183]         {
[17:40:12.183]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:12.183]                 ...future.oldOptions$nwarnings <- NULL
[17:40:12.183]             }
[17:40:12.183]             base::options(...future.oldOptions)
[17:40:12.183]             if (.Platform$OS.type == "windows") {
[17:40:12.183]                 old_names <- names(...future.oldEnvVars)
[17:40:12.183]                 envs <- base::Sys.getenv()
[17:40:12.183]                 names <- names(envs)
[17:40:12.183]                 common <- intersect(names, old_names)
[17:40:12.183]                 added <- setdiff(names, old_names)
[17:40:12.183]                 removed <- setdiff(old_names, names)
[17:40:12.183]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:12.183]                   envs[common]]
[17:40:12.183]                 NAMES <- toupper(changed)
[17:40:12.183]                 args <- list()
[17:40:12.183]                 for (kk in seq_along(NAMES)) {
[17:40:12.183]                   name <- changed[[kk]]
[17:40:12.183]                   NAME <- NAMES[[kk]]
[17:40:12.183]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:12.183]                     next
[17:40:12.183]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:12.183]                 }
[17:40:12.183]                 NAMES <- toupper(added)
[17:40:12.183]                 for (kk in seq_along(NAMES)) {
[17:40:12.183]                   name <- added[[kk]]
[17:40:12.183]                   NAME <- NAMES[[kk]]
[17:40:12.183]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:12.183]                     next
[17:40:12.183]                   args[[name]] <- ""
[17:40:12.183]                 }
[17:40:12.183]                 NAMES <- toupper(removed)
[17:40:12.183]                 for (kk in seq_along(NAMES)) {
[17:40:12.183]                   name <- removed[[kk]]
[17:40:12.183]                   NAME <- NAMES[[kk]]
[17:40:12.183]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:12.183]                     next
[17:40:12.183]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:12.183]                 }
[17:40:12.183]                 if (length(args) > 0) 
[17:40:12.183]                   base::do.call(base::Sys.setenv, args = args)
[17:40:12.183]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:12.183]             }
[17:40:12.183]             else {
[17:40:12.183]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:12.183]             }
[17:40:12.183]             {
[17:40:12.183]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:12.183]                   0L) {
[17:40:12.183]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:12.183]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:12.183]                   base::options(opts)
[17:40:12.183]                 }
[17:40:12.183]                 {
[17:40:12.183]                   {
[17:40:12.183]                     NULL
[17:40:12.183]                     RNGkind("Mersenne-Twister")
[17:40:12.183]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:40:12.183]                       inherits = FALSE)
[17:40:12.183]                   }
[17:40:12.183]                   options(future.plan = NULL)
[17:40:12.183]                   if (is.na(NA_character_)) 
[17:40:12.183]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:12.183]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:12.183]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:40:12.183]                     .init = FALSE)
[17:40:12.183]                 }
[17:40:12.183]             }
[17:40:12.183]         }
[17:40:12.183]     })
[17:40:12.183]     if (TRUE) {
[17:40:12.183]         base::sink(type = "output", split = FALSE)
[17:40:12.183]         if (TRUE) {
[17:40:12.183]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:12.183]         }
[17:40:12.183]         else {
[17:40:12.183]             ...future.result["stdout"] <- base::list(NULL)
[17:40:12.183]         }
[17:40:12.183]         base::close(...future.stdout)
[17:40:12.183]         ...future.stdout <- NULL
[17:40:12.183]     }
[17:40:12.183]     ...future.result$conditions <- ...future.conditions
[17:40:12.183]     ...future.result$finished <- base::Sys.time()
[17:40:12.183]     ...future.result
[17:40:12.183] }
[17:40:12.184] plan(): Setting new future strategy stack:
[17:40:12.184] List of future strategies:
[17:40:12.184] 1. sequential:
[17:40:12.184]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:40:12.184]    - tweaked: FALSE
[17:40:12.184]    - call: NULL
[17:40:12.185] plan(): nbrOfWorkers() = 1
[17:40:12.186] plan(): Setting new future strategy stack:
[17:40:12.186] List of future strategies:
[17:40:12.186] 1. multisession:
[17:40:12.186]    - args: function (..., workers = "<function () ; max(1L, future::availableCores() - 1L)>", envir = parent.frame())
[17:40:12.186]    - tweaked: TRUE
[17:40:12.186]    - call: plan(strategy, workers = allButOneCore)
[17:40:12.190] plan(): nbrOfWorkers() = 1
[17:40:12.191] SequentialFuture started (and completed)
[17:40:12.191] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:40:12.194] plan(): nbrOfWorkers() = 1
nbrOfWorkers: 1
[17:40:12.203] getGlobalsAndPackages() ...
[17:40:12.203] Searching for globals...
[17:40:12.203] 
[17:40:12.203] Searching for globals ... DONE
[17:40:12.203] - globals: [0] <none>
[17:40:12.203] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers: 1
[17:40:12.210] getGlobalsAndPackages() ...
[17:40:12.210] Searching for globals...
[17:40:12.210] 
[17:40:12.210] Searching for globals ... DONE
[17:40:12.210] - globals: [0] <none>
[17:40:12.210] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers(background = TRUE): 0
Type of future: multicore
nbrOfWorkers: 2
[17:40:12.214] plan(): Setting new future strategy stack:
[17:40:12.214] List of future strategies:
[17:40:12.214] 1. multicore:
[17:40:12.214]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:40:12.214]    - tweaked: FALSE
[17:40:12.214]    - call: plan(strategy)
[17:40:12.217] plan(): nbrOfWorkers() = 2
nbrOfWorkers: 2
nbrOfFreeWorkers: 2
nbrOfFreeWorkers(background = TRUE): 2
[17:40:12.227] plan(): Setting new future strategy stack:
[17:40:12.227] List of future strategies:
[17:40:12.227] 1. multicore:
[17:40:12.227]    - args: function (..., workers = 1L, envir = parent.frame())
[17:40:12.227]    - tweaked: TRUE
[17:40:12.227]    - call: plan(strategy, workers = 1L)
[17:40:12.228] plan(): nbrOfWorkers() = 1
nbrOfWorkers: 1
nbrOfFreeWorkers: 1
nbrOfFreeWorkers(background = TRUE): 1
[17:40:12.229] plan(): Setting new future strategy stack:
[17:40:12.229] List of future strategies:
[17:40:12.229] 1. multicore:
[17:40:12.229]    - args: function (..., workers = "<function () ; max(1L, future::availableCores() - 1L); <bytecode: 0x56174ab6fb08>>", envir = parent.frame())
[17:40:12.229]    - tweaked: TRUE
[17:40:12.229]    - call: plan(strategy, workers = allButOneCore)
[17:40:12.232] plan(): nbrOfWorkers() = 1
nbrOfWorkers: 1
nbrOfFreeWorkers: 1
nbrOfFreeWorkers(background = TRUE): 1
> 
> 
> message("Type of future: cluster")
Type of future: cluster
> workers <- rep("localhost", times = 2L)
> plan(cluster, workers = workers)
[17:40:12.241] plan(): Setting new future strategy stack:
[17:40:12.242] List of future strategies:
[17:40:12.242] 1. cluster:
[17:40:12.242]    - args: function (..., workers = c("localhost", "localhost"), envir = parent.frame())
[17:40:12.242]    - tweaked: TRUE
[17:40:12.242]    - call: plan(cluster, workers = workers)
[17:40:12.242] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:40:12.242] cluster:
[17:40:12.242] - args: function (..., workers = c("localhost", "localhost"), envir = parent.frame())
[17:40:12.242] - tweaked: TRUE
[17:40:12.242] - call: plan(cluster, workers = workers)
[17:40:12.242] getGlobalsAndPackages() ...
[17:40:12.242] Not searching for globals
[17:40:12.243] - globals: [0] <none>
[17:40:12.243] getGlobalsAndPackages() ... DONE
[17:40:12.243] [local output] makeClusterPSOCK() ...
[17:40:12.244] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:40:12.244] [local output] Base port: 11659
[17:40:12.244] [local output] Getting setup options for 2 cluster nodes ...
[17:40:12.244] [local output]  - Node 1 of 2 ...
[17:40:12.245] [local output] localMachine=TRUE => revtunnel=FALSE

[17:40:12.245] [local output] Rscript port: 11659

[17:40:12.246] [local output]  - Node 2 of 2 ...
[17:40:12.246] [local output] localMachine=TRUE => revtunnel=FALSE

[17:40:12.246] [local output] Rscript port: 11659

[17:40:12.247] [local output] Getting setup options for 2 cluster nodes ... done
[17:40:12.247] [local output]  - Parallel setup requested for some PSOCK nodes
[17:40:12.247] [local output] Setting up PSOCK nodes in parallel
[17:40:12.247] List of 36
[17:40:12.247]  $ worker          : chr "localhost"
[17:40:12.247]   ..- attr(*, "localhost")= logi TRUE
[17:40:12.247]  $ master          : chr "localhost"
[17:40:12.247]  $ port            : int 11659
[17:40:12.247]  $ connectTimeout  : num 120
[17:40:12.247]  $ timeout         : num 2592000
[17:40:12.247]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:40:12.247]  $ homogeneous     : logi TRUE
[17:40:12.247]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:40:12.247]  $ rscript_envs    : NULL
[17:40:12.247]  $ rscript_libs    : NULL
[17:40:12.247]  $ rscript_startup : NULL
[17:40:12.247]  $ rscript_sh      : chr "sh"
[17:40:12.247]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:40:12.247]  $ methods         : logi TRUE
[17:40:12.247]  $ socketOptions   : chr "no-delay"
[17:40:12.247]  $ useXDR          : logi FALSE
[17:40:12.247]  $ outfile         : chr "/dev/null"
[17:40:12.247]  $ renice          : int NA
[17:40:12.247]  $ rshcmd          : NULL
[17:40:12.247]  $ user            : chr(0) 
[17:40:12.247]  $ revtunnel       : logi FALSE
[17:40:12.247]  $ rshlogfile      : NULL
[17:40:12.247]  $ rshopts         : chr(0) 
[17:40:12.247]  $ rank            : int 1
[17:40:12.247]  $ manual          : logi FALSE
[17:40:12.247]  $ dryrun          : logi FALSE
[17:40:12.247]  $ quiet           : logi FALSE
[17:40:12.247]  $ setup_strategy  : chr "parallel"
[17:40:12.247]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:40:12.247]  $ pidfile         : chr "/tmp/RtmpF2E44c/worker.rank=1.parallelly.parent=45991.b3a7ce6c98e.pid"
[17:40:12.247]  $ rshcmd_label    : NULL
[17:40:12.247]  $ rsh_call        : NULL
[17:40:12.247]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:40:12.247]  $ localMachine    : logi TRUE
[17:40:12.247]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:40:12.247]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:40:12.247]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:40:12.247]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:40:12.247]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:40:12.247]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:40:12.247]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:40:12.247]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:40:12.247]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:40:12.247]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:40:12.247]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:40:12.247]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:40:12.247]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:40:12.247]  $ arguments       :List of 28
[17:40:12.247]   ..$ worker          : chr "localhost"
[17:40:12.247]   ..$ master          : NULL
[17:40:12.247]   ..$ port            : int 11659
[17:40:12.247]   ..$ connectTimeout  : num 120
[17:40:12.247]   ..$ timeout         : num 2592000
[17:40:12.247]   ..$ rscript         : NULL
[17:40:12.247]   ..$ homogeneous     : NULL
[17:40:12.247]   ..$ rscript_args    : NULL
[17:40:12.247]   ..$ rscript_envs    : NULL
[17:40:12.247]   ..$ rscript_libs    : NULL
[17:40:12.247]   ..$ rscript_startup : NULL
[17:40:12.247]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:40:12.247]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:40:12.247]   ..$ methods         : logi TRUE
[17:40:12.247]   ..$ socketOptions   : chr "no-delay"
[17:40:12.247]   ..$ useXDR          : logi FALSE
[17:40:12.247]   ..$ outfile         : chr "/dev/null"
[17:40:12.247]   ..$ renice          : int NA
[17:40:12.247]   ..$ rshcmd          : NULL
[17:40:12.247]   ..$ user            : NULL
[17:40:12.247]   ..$ revtunnel       : logi NA
[17:40:12.247]   ..$ rshlogfile      : NULL
[17:40:12.247]   ..$ rshopts         : NULL
[17:40:12.247]   ..$ rank            : int 1
[17:40:12.247]   ..$ manual          : logi FALSE
[17:40:12.247]   ..$ dryrun          : logi FALSE
[17:40:12.247]   ..$ quiet           : logi FALSE
[17:40:12.247]   ..$ setup_strategy  : chr "parallel"
[17:40:12.247]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:40:12.263] [local output] System call to launch all workers:
[17:40:12.263] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpF2E44c/worker.rank=1.parallelly.parent=45991.b3a7ce6c98e.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11659 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:40:12.264] [local output] Starting PSOCK main server
[17:40:12.265] [local output] Workers launched
[17:40:12.265] [local output] Waiting for workers to connect back
[17:40:12.265]  - [local output] 0 workers out of 2 ready
[17:40:12.504]  - [local output] 0 workers out of 2 ready
[17:40:12.504]  - [local output] 1 workers out of 2 ready
[17:40:12.508]  - [local output] 1 workers out of 2 ready
[17:40:12.508]  - [local output] 2 workers out of 2 ready
[17:40:12.509] [local output] Launching of workers completed
[17:40:12.509] [local output] Collecting session information from workers
[17:40:12.509] [local output]  - Worker #1 of 2
[17:40:12.510] [local output]  - Worker #2 of 2
[17:40:12.510] [local output] makeClusterPSOCK() ... done
[17:40:12.521] Packages needed by the future expression (n = 0): <none>
[17:40:12.523] Packages needed by future strategies (n = 0): <none>
[17:40:12.523] {
[17:40:12.523]     {
[17:40:12.523]         {
[17:40:12.523]             ...future.startTime <- base::Sys.time()
[17:40:12.523]             {
[17:40:12.523]                 {
[17:40:12.523]                   {
[17:40:12.523]                     base::local({
[17:40:12.523]                       has_future <- base::requireNamespace("future", 
[17:40:12.523]                         quietly = TRUE)
[17:40:12.523]                       if (has_future) {
[17:40:12.523]                         ns <- base::getNamespace("future")
[17:40:12.523]                         version <- ns[[".package"]][["version"]]
[17:40:12.523]                         if (is.null(version)) 
[17:40:12.523]                           version <- utils::packageVersion("future")
[17:40:12.523]                       }
[17:40:12.523]                       else {
[17:40:12.523]                         version <- NULL
[17:40:12.523]                       }
[17:40:12.523]                       if (!has_future || version < "1.8.0") {
[17:40:12.523]                         info <- base::c(r_version = base::gsub("R version ", 
[17:40:12.523]                           "", base::R.version$version.string), 
[17:40:12.523]                           platform = base::sprintf("%s (%s-bit)", 
[17:40:12.523]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:12.523]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:12.523]                             "release", "version")], collapse = " "), 
[17:40:12.523]                           hostname = base::Sys.info()[["nodename"]])
[17:40:12.523]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:40:12.523]                           info)
[17:40:12.523]                         info <- base::paste(info, collapse = "; ")
[17:40:12.523]                         if (!has_future) {
[17:40:12.523]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:12.523]                             info)
[17:40:12.523]                         }
[17:40:12.523]                         else {
[17:40:12.523]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:12.523]                             info, version)
[17:40:12.523]                         }
[17:40:12.523]                         base::stop(msg)
[17:40:12.523]                       }
[17:40:12.523]                     })
[17:40:12.523]                   }
[17:40:12.523]                   ...future.strategy.old <- future::plan("list")
[17:40:12.523]                   options(future.plan = NULL)
[17:40:12.523]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:12.523]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:12.523]                 }
[17:40:12.523]                 ...future.workdir <- getwd()
[17:40:12.523]             }
[17:40:12.523]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:12.523]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:12.523]         }
[17:40:12.523]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:12.523]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:40:12.523]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:12.523]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:12.523]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:12.523]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:12.523]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:12.523]             base::names(...future.oldOptions))
[17:40:12.523]     }
[17:40:12.523]     if (FALSE) {
[17:40:12.523]     }
[17:40:12.523]     else {
[17:40:12.523]         if (TRUE) {
[17:40:12.523]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:12.523]                 open = "w")
[17:40:12.523]         }
[17:40:12.523]         else {
[17:40:12.523]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:12.523]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:12.523]         }
[17:40:12.523]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:12.523]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:12.523]             base::sink(type = "output", split = FALSE)
[17:40:12.523]             base::close(...future.stdout)
[17:40:12.523]         }, add = TRUE)
[17:40:12.523]     }
[17:40:12.523]     ...future.frame <- base::sys.nframe()
[17:40:12.523]     ...future.conditions <- base::list()
[17:40:12.523]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:12.523]     if (FALSE) {
[17:40:12.523]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:12.523]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:12.523]     }
[17:40:12.523]     ...future.result <- base::tryCatch({
[17:40:12.523]         base::withCallingHandlers({
[17:40:12.523]             ...future.value <- base::withVisible(base::local({
[17:40:12.523]                 ...future.makeSendCondition <- base::local({
[17:40:12.523]                   sendCondition <- NULL
[17:40:12.523]                   function(frame = 1L) {
[17:40:12.523]                     if (is.function(sendCondition)) 
[17:40:12.523]                       return(sendCondition)
[17:40:12.523]                     ns <- getNamespace("parallel")
[17:40:12.523]                     if (exists("sendData", mode = "function", 
[17:40:12.523]                       envir = ns)) {
[17:40:12.523]                       parallel_sendData <- get("sendData", mode = "function", 
[17:40:12.523]                         envir = ns)
[17:40:12.523]                       envir <- sys.frame(frame)
[17:40:12.523]                       master <- NULL
[17:40:12.523]                       while (!identical(envir, .GlobalEnv) && 
[17:40:12.523]                         !identical(envir, emptyenv())) {
[17:40:12.523]                         if (exists("master", mode = "list", envir = envir, 
[17:40:12.523]                           inherits = FALSE)) {
[17:40:12.523]                           master <- get("master", mode = "list", 
[17:40:12.523]                             envir = envir, inherits = FALSE)
[17:40:12.523]                           if (inherits(master, c("SOCKnode", 
[17:40:12.523]                             "SOCK0node"))) {
[17:40:12.523]                             sendCondition <<- function(cond) {
[17:40:12.523]                               data <- list(type = "VALUE", value = cond, 
[17:40:12.523]                                 success = TRUE)
[17:40:12.523]                               parallel_sendData(master, data)
[17:40:12.523]                             }
[17:40:12.523]                             return(sendCondition)
[17:40:12.523]                           }
[17:40:12.523]                         }
[17:40:12.523]                         frame <- frame + 1L
[17:40:12.523]                         envir <- sys.frame(frame)
[17:40:12.523]                       }
[17:40:12.523]                     }
[17:40:12.523]                     sendCondition <<- function(cond) NULL
[17:40:12.523]                   }
[17:40:12.523]                 })
[17:40:12.523]                 withCallingHandlers({
[17:40:12.523]                   NA
[17:40:12.523]                 }, immediateCondition = function(cond) {
[17:40:12.523]                   sendCondition <- ...future.makeSendCondition()
[17:40:12.523]                   sendCondition(cond)
[17:40:12.523]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:12.523]                   {
[17:40:12.523]                     inherits <- base::inherits
[17:40:12.523]                     invokeRestart <- base::invokeRestart
[17:40:12.523]                     is.null <- base::is.null
[17:40:12.523]                     muffled <- FALSE
[17:40:12.523]                     if (inherits(cond, "message")) {
[17:40:12.523]                       muffled <- grepl(pattern, "muffleMessage")
[17:40:12.523]                       if (muffled) 
[17:40:12.523]                         invokeRestart("muffleMessage")
[17:40:12.523]                     }
[17:40:12.523]                     else if (inherits(cond, "warning")) {
[17:40:12.523]                       muffled <- grepl(pattern, "muffleWarning")
[17:40:12.523]                       if (muffled) 
[17:40:12.523]                         invokeRestart("muffleWarning")
[17:40:12.523]                     }
[17:40:12.523]                     else if (inherits(cond, "condition")) {
[17:40:12.523]                       if (!is.null(pattern)) {
[17:40:12.523]                         computeRestarts <- base::computeRestarts
[17:40:12.523]                         grepl <- base::grepl
[17:40:12.523]                         restarts <- computeRestarts(cond)
[17:40:12.523]                         for (restart in restarts) {
[17:40:12.523]                           name <- restart$name
[17:40:12.523]                           if (is.null(name)) 
[17:40:12.523]                             next
[17:40:12.523]                           if (!grepl(pattern, name)) 
[17:40:12.523]                             next
[17:40:12.523]                           invokeRestart(restart)
[17:40:12.523]                           muffled <- TRUE
[17:40:12.523]                           break
[17:40:12.523]                         }
[17:40:12.523]                       }
[17:40:12.523]                     }
[17:40:12.523]                     invisible(muffled)
[17:40:12.523]                   }
[17:40:12.523]                   muffleCondition(cond)
[17:40:12.523]                 })
[17:40:12.523]             }))
[17:40:12.523]             future::FutureResult(value = ...future.value$value, 
[17:40:12.523]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:12.523]                   ...future.rng), globalenv = if (FALSE) 
[17:40:12.523]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:12.523]                     ...future.globalenv.names))
[17:40:12.523]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:12.523]         }, condition = base::local({
[17:40:12.523]             c <- base::c
[17:40:12.523]             inherits <- base::inherits
[17:40:12.523]             invokeRestart <- base::invokeRestart
[17:40:12.523]             length <- base::length
[17:40:12.523]             list <- base::list
[17:40:12.523]             seq.int <- base::seq.int
[17:40:12.523]             signalCondition <- base::signalCondition
[17:40:12.523]             sys.calls <- base::sys.calls
[17:40:12.523]             `[[` <- base::`[[`
[17:40:12.523]             `+` <- base::`+`
[17:40:12.523]             `<<-` <- base::`<<-`
[17:40:12.523]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:12.523]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:12.523]                   3L)]
[17:40:12.523]             }
[17:40:12.523]             function(cond) {
[17:40:12.523]                 is_error <- inherits(cond, "error")
[17:40:12.523]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:12.523]                   NULL)
[17:40:12.523]                 if (is_error) {
[17:40:12.523]                   sessionInformation <- function() {
[17:40:12.523]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:12.523]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:12.523]                       search = base::search(), system = base::Sys.info())
[17:40:12.523]                   }
[17:40:12.523]                   ...future.conditions[[length(...future.conditions) + 
[17:40:12.523]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:12.523]                     cond$call), session = sessionInformation(), 
[17:40:12.523]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:12.523]                   signalCondition(cond)
[17:40:12.523]                 }
[17:40:12.523]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:12.523]                 "immediateCondition"))) {
[17:40:12.523]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:12.523]                   ...future.conditions[[length(...future.conditions) + 
[17:40:12.523]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:12.523]                   if (TRUE && !signal) {
[17:40:12.523]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:12.523]                     {
[17:40:12.523]                       inherits <- base::inherits
[17:40:12.523]                       invokeRestart <- base::invokeRestart
[17:40:12.523]                       is.null <- base::is.null
[17:40:12.523]                       muffled <- FALSE
[17:40:12.523]                       if (inherits(cond, "message")) {
[17:40:12.523]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:12.523]                         if (muffled) 
[17:40:12.523]                           invokeRestart("muffleMessage")
[17:40:12.523]                       }
[17:40:12.523]                       else if (inherits(cond, "warning")) {
[17:40:12.523]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:12.523]                         if (muffled) 
[17:40:12.523]                           invokeRestart("muffleWarning")
[17:40:12.523]                       }
[17:40:12.523]                       else if (inherits(cond, "condition")) {
[17:40:12.523]                         if (!is.null(pattern)) {
[17:40:12.523]                           computeRestarts <- base::computeRestarts
[17:40:12.523]                           grepl <- base::grepl
[17:40:12.523]                           restarts <- computeRestarts(cond)
[17:40:12.523]                           for (restart in restarts) {
[17:40:12.523]                             name <- restart$name
[17:40:12.523]                             if (is.null(name)) 
[17:40:12.523]                               next
[17:40:12.523]                             if (!grepl(pattern, name)) 
[17:40:12.523]                               next
[17:40:12.523]                             invokeRestart(restart)
[17:40:12.523]                             muffled <- TRUE
[17:40:12.523]                             break
[17:40:12.523]                           }
[17:40:12.523]                         }
[17:40:12.523]                       }
[17:40:12.523]                       invisible(muffled)
[17:40:12.523]                     }
[17:40:12.523]                     muffleCondition(cond, pattern = "^muffle")
[17:40:12.523]                   }
[17:40:12.523]                 }
[17:40:12.523]                 else {
[17:40:12.523]                   if (TRUE) {
[17:40:12.523]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:12.523]                     {
[17:40:12.523]                       inherits <- base::inherits
[17:40:12.523]                       invokeRestart <- base::invokeRestart
[17:40:12.523]                       is.null <- base::is.null
[17:40:12.523]                       muffled <- FALSE
[17:40:12.523]                       if (inherits(cond, "message")) {
[17:40:12.523]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:12.523]                         if (muffled) 
[17:40:12.523]                           invokeRestart("muffleMessage")
[17:40:12.523]                       }
[17:40:12.523]                       else if (inherits(cond, "warning")) {
[17:40:12.523]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:12.523]                         if (muffled) 
[17:40:12.523]                           invokeRestart("muffleWarning")
[17:40:12.523]                       }
[17:40:12.523]                       else if (inherits(cond, "condition")) {
[17:40:12.523]                         if (!is.null(pattern)) {
[17:40:12.523]                           computeRestarts <- base::computeRestarts
[17:40:12.523]                           grepl <- base::grepl
[17:40:12.523]                           restarts <- computeRestarts(cond)
[17:40:12.523]                           for (restart in restarts) {
[17:40:12.523]                             name <- restart$name
[17:40:12.523]                             if (is.null(name)) 
[17:40:12.523]                               next
[17:40:12.523]                             if (!grepl(pattern, name)) 
[17:40:12.523]                               next
[17:40:12.523]                             invokeRestart(restart)
[17:40:12.523]                             muffled <- TRUE
[17:40:12.523]                             break
[17:40:12.523]                           }
[17:40:12.523]                         }
[17:40:12.523]                       }
[17:40:12.523]                       invisible(muffled)
[17:40:12.523]                     }
[17:40:12.523]                     muffleCondition(cond, pattern = "^muffle")
[17:40:12.523]                   }
[17:40:12.523]                 }
[17:40:12.523]             }
[17:40:12.523]         }))
[17:40:12.523]     }, error = function(ex) {
[17:40:12.523]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:12.523]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:12.523]                 ...future.rng), started = ...future.startTime, 
[17:40:12.523]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:12.523]             version = "1.8"), class = "FutureResult")
[17:40:12.523]     }, finally = {
[17:40:12.523]         if (!identical(...future.workdir, getwd())) 
[17:40:12.523]             setwd(...future.workdir)
[17:40:12.523]         {
[17:40:12.523]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:12.523]                 ...future.oldOptions$nwarnings <- NULL
[17:40:12.523]             }
[17:40:12.523]             base::options(...future.oldOptions)
[17:40:12.523]             if (.Platform$OS.type == "windows") {
[17:40:12.523]                 old_names <- names(...future.oldEnvVars)
[17:40:12.523]                 envs <- base::Sys.getenv()
[17:40:12.523]                 names <- names(envs)
[17:40:12.523]                 common <- intersect(names, old_names)
[17:40:12.523]                 added <- setdiff(names, old_names)
[17:40:12.523]                 removed <- setdiff(old_names, names)
[17:40:12.523]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:12.523]                   envs[common]]
[17:40:12.523]                 NAMES <- toupper(changed)
[17:40:12.523]                 args <- list()
[17:40:12.523]                 for (kk in seq_along(NAMES)) {
[17:40:12.523]                   name <- changed[[kk]]
[17:40:12.523]                   NAME <- NAMES[[kk]]
[17:40:12.523]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:12.523]                     next
[17:40:12.523]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:12.523]                 }
[17:40:12.523]                 NAMES <- toupper(added)
[17:40:12.523]                 for (kk in seq_along(NAMES)) {
[17:40:12.523]                   name <- added[[kk]]
[17:40:12.523]                   NAME <- NAMES[[kk]]
[17:40:12.523]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:12.523]                     next
[17:40:12.523]                   args[[name]] <- ""
[17:40:12.523]                 }
[17:40:12.523]                 NAMES <- toupper(removed)
[17:40:12.523]                 for (kk in seq_along(NAMES)) {
[17:40:12.523]                   name <- removed[[kk]]
[17:40:12.523]                   NAME <- NAMES[[kk]]
[17:40:12.523]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:12.523]                     next
[17:40:12.523]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:12.523]                 }
[17:40:12.523]                 if (length(args) > 0) 
[17:40:12.523]                   base::do.call(base::Sys.setenv, args = args)
[17:40:12.523]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:12.523]             }
[17:40:12.523]             else {
[17:40:12.523]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:12.523]             }
[17:40:12.523]             {
[17:40:12.523]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:12.523]                   0L) {
[17:40:12.523]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:12.523]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:12.523]                   base::options(opts)
[17:40:12.523]                 }
[17:40:12.523]                 {
[17:40:12.523]                   NULL
[17:40:12.523]                   options(future.plan = NULL)
[17:40:12.523]                   if (is.na(NA_character_)) 
[17:40:12.523]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:12.523]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:12.523]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:40:12.523]                     .init = FALSE)
[17:40:12.523]                 }
[17:40:12.523]             }
[17:40:12.523]         }
[17:40:12.523]     })
[17:40:12.523]     if (TRUE) {
[17:40:12.523]         base::sink(type = "output", split = FALSE)
[17:40:12.523]         if (TRUE) {
[17:40:12.523]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:12.523]         }
[17:40:12.523]         else {
[17:40:12.523]             ...future.result["stdout"] <- base::list(NULL)
[17:40:12.523]         }
[17:40:12.523]         base::close(...future.stdout)
[17:40:12.523]         ...future.stdout <- NULL
[17:40:12.523]     }
[17:40:12.523]     ...future.result$conditions <- ...future.conditions
[17:40:12.523]     ...future.result$finished <- base::Sys.time()
[17:40:12.523]     ...future.result
[17:40:12.523] }
[17:40:12.576] ClusterFuture started
[17:40:12.576] result() for ClusterFuture ...
[17:40:12.576] receiveMessageFromWorker() for ClusterFuture ...
[17:40:12.576] - Validating connection of ClusterFuture
[17:40:12.608] - received message: FutureResult
[17:40:12.608] - Received FutureResult
[17:40:12.608] - Erased future from FutureRegistry
[17:40:12.608] result() for ClusterFuture ...
[17:40:12.608] - result already collected: FutureResult
[17:40:12.608] result() for ClusterFuture ... done
[17:40:12.608] receiveMessageFromWorker() for ClusterFuture ... done
[17:40:12.609] result() for ClusterFuture ... done
[17:40:12.609] result() for ClusterFuture ...
[17:40:12.609] - result already collected: FutureResult
[17:40:12.609] result() for ClusterFuture ... done
[17:40:12.609] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:40:12.609] plan(): nbrOfWorkers() = 2
> n <- nbrOfWorkers()
> message(sprintf("nbrOfWorkers: %d", n))
nbrOfWorkers: 2
> stopifnot(n == length(workers))
> plan(cluster, workers = allButOneWorker)
[17:40:12.610] plan(): Setting new future strategy stack:
[17:40:12.610] List of future strategies:
[17:40:12.610] 1. cluster:
[17:40:12.610]    - args: function (..., workers = "<function ()  >", envir = parent.frame())
[17:40:12.610]    - tweaked: TRUE
[17:40:12.610]    - call: plan(cluster, workers = allButOneWorker)
[17:40:12.611] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:40:12.611] cluster:
[17:40:12.611] - args: function (..., workers = "<function ()  >", envir = parent.frame())
[17:40:12.611] - tweaked: TRUE
[17:40:12.611] - call: plan(cluster, workers = allButOneWorker)
[17:40:12.612] getGlobalsAndPackages() ...
[17:40:12.612] Not searching for globals
[17:40:12.612] - globals: [0] <none>
[17:40:12.612] getGlobalsAndPackages() ... DONE
[17:40:12.617] [local output] makeClusterPSOCK() ...
[17:40:12.617] [local output] Workers: [n = 1] ‘localhost’
[17:40:12.617] [local output] Base port: 11785
[17:40:12.617] [local output] Getting setup options for 1 cluster nodes ...
[17:40:12.618] [local output]  - Node 1 of 1 ...
[17:40:12.618] [local output] localMachine=TRUE => revtunnel=FALSE

[17:40:12.618] [local output] Rscript port: 11785

[17:40:12.619] [local output] Getting setup options for 1 cluster nodes ... done
[17:40:12.619] [local output]  - Parallel setup requested for some PSOCK nodes
[17:40:12.619] [local output] Setting up PSOCK nodes in parallel
[17:40:12.619] List of 36
[17:40:12.619]  $ worker          : chr "localhost"
[17:40:12.619]   ..- attr(*, "localhost")= logi TRUE
[17:40:12.619]  $ master          : chr "localhost"
[17:40:12.619]  $ port            : int 11785
[17:40:12.619]  $ connectTimeout  : num 120
[17:40:12.619]  $ timeout         : num 2592000
[17:40:12.619]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:40:12.619]  $ homogeneous     : logi TRUE
[17:40:12.619]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:40:12.619]  $ rscript_envs    : NULL
[17:40:12.619]  $ rscript_libs    : NULL
[17:40:12.619]  $ rscript_startup : NULL
[17:40:12.619]  $ rscript_sh      : chr "sh"
[17:40:12.619]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:40:12.619]  $ methods         : logi TRUE
[17:40:12.619]  $ socketOptions   : chr "no-delay"
[17:40:12.619]  $ useXDR          : logi FALSE
[17:40:12.619]  $ outfile         : chr "/dev/null"
[17:40:12.619]  $ renice          : int NA
[17:40:12.619]  $ rshcmd          : NULL
[17:40:12.619]  $ user            : chr(0) 
[17:40:12.619]  $ revtunnel       : logi FALSE
[17:40:12.619]  $ rshlogfile      : NULL
[17:40:12.619]  $ rshopts         : chr(0) 
[17:40:12.619]  $ rank            : int 1
[17:40:12.619]  $ manual          : logi FALSE
[17:40:12.619]  $ dryrun          : logi FALSE
[17:40:12.619]  $ quiet           : logi FALSE
[17:40:12.619]  $ setup_strategy  : chr "parallel"
[17:40:12.619]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:40:12.619]  $ pidfile         : chr "/tmp/RtmpF2E44c/worker.rank=1.parallelly.parent=45991.b3a76a26b4f9.pid"
[17:40:12.619]  $ rshcmd_label    : NULL
[17:40:12.619]  $ rsh_call        : NULL
[17:40:12.619]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:40:12.619]  $ localMachine    : logi TRUE
[17:40:12.619]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:40:12.619]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:40:12.619]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:40:12.619]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:40:12.619]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:40:12.619]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:40:12.619]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:40:12.619]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:40:12.619]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:40:12.619]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:40:12.619]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:40:12.619]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:40:12.619]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:40:12.619]  $ arguments       :List of 28
[17:40:12.619]   ..$ worker          : chr "localhost"
[17:40:12.619]   ..$ master          : NULL
[17:40:12.619]   ..$ port            : int 11785
[17:40:12.619]   ..$ connectTimeout  : num 120
[17:40:12.619]   ..$ timeout         : num 2592000
[17:40:12.619]   ..$ rscript         : NULL
[17:40:12.619]   ..$ homogeneous     : NULL
[17:40:12.619]   ..$ rscript_args    : NULL
[17:40:12.619]   ..$ rscript_envs    : NULL
[17:40:12.619]   ..$ rscript_libs    : NULL
[17:40:12.619]   ..$ rscript_startup : NULL
[17:40:12.619]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:40:12.619]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:40:12.619]   ..$ methods         : logi TRUE
[17:40:12.619]   ..$ socketOptions   : chr "no-delay"
[17:40:12.619]   ..$ useXDR          : logi FALSE
[17:40:12.619]   ..$ outfile         : chr "/dev/null"
[17:40:12.619]   ..$ renice          : int NA
[17:40:12.619]   ..$ rshcmd          : NULL
[17:40:12.619]   ..$ user            : NULL
[17:40:12.619]   ..$ revtunnel       : logi NA
[17:40:12.619]   ..$ rshlogfile      : NULL
[17:40:12.619]   ..$ rshopts         : NULL
[17:40:12.619]   ..$ rank            : int 1
[17:40:12.619]   ..$ manual          : logi FALSE
[17:40:12.619]   ..$ dryrun          : logi FALSE
[17:40:12.619]   ..$ quiet           : logi FALSE
[17:40:12.619]   ..$ setup_strategy  : chr "parallel"
[17:40:12.619]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:40:12.637] [local output] System call to launch all workers:
[17:40:12.638] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpF2E44c/worker.rank=1.parallelly.parent=45991.b3a76a26b4f9.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11785 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:40:12.638] [local output] Starting PSOCK main server
[17:40:12.639] [local output] Workers launched
[17:40:12.639] [local output] Waiting for workers to connect back
[17:40:12.639]  - [local output] 0 workers out of 1 ready
[17:40:12.829]  - [local output] 0 workers out of 1 ready
[17:40:12.829]  - [local output] 1 workers out of 1 ready
[17:40:12.829] [local output] Launching of workers completed
[17:40:12.829] [local output] Collecting session information from workers
[17:40:12.830] [local output]  - Worker #1 of 1
[17:40:12.830] [local output] makeClusterPSOCK() ... done
[17:40:12.836] Packages needed by the future expression (n = 0): <none>
[17:40:12.836] Packages needed by future strategies (n = 0): <none>
[17:40:12.836] {
[17:40:12.836]     {
[17:40:12.836]         {
[17:40:12.836]             ...future.startTime <- base::Sys.time()
[17:40:12.836]             {
[17:40:12.836]                 {
[17:40:12.836]                   {
[17:40:12.836]                     base::local({
[17:40:12.836]                       has_future <- base::requireNamespace("future", 
[17:40:12.836]                         quietly = TRUE)
[17:40:12.836]                       if (has_future) {
[17:40:12.836]                         ns <- base::getNamespace("future")
[17:40:12.836]                         version <- ns[[".package"]][["version"]]
[17:40:12.836]                         if (is.null(version)) 
[17:40:12.836]                           version <- utils::packageVersion("future")
[17:40:12.836]                       }
[17:40:12.836]                       else {
[17:40:12.836]                         version <- NULL
[17:40:12.836]                       }
[17:40:12.836]                       if (!has_future || version < "1.8.0") {
[17:40:12.836]                         info <- base::c(r_version = base::gsub("R version ", 
[17:40:12.836]                           "", base::R.version$version.string), 
[17:40:12.836]                           platform = base::sprintf("%s (%s-bit)", 
[17:40:12.836]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:12.836]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:12.836]                             "release", "version")], collapse = " "), 
[17:40:12.836]                           hostname = base::Sys.info()[["nodename"]])
[17:40:12.836]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:40:12.836]                           info)
[17:40:12.836]                         info <- base::paste(info, collapse = "; ")
[17:40:12.836]                         if (!has_future) {
[17:40:12.836]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:12.836]                             info)
[17:40:12.836]                         }
[17:40:12.836]                         else {
[17:40:12.836]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:12.836]                             info, version)
[17:40:12.836]                         }
[17:40:12.836]                         base::stop(msg)
[17:40:12.836]                       }
[17:40:12.836]                     })
[17:40:12.836]                   }
[17:40:12.836]                   ...future.strategy.old <- future::plan("list")
[17:40:12.836]                   options(future.plan = NULL)
[17:40:12.836]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:12.836]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:12.836]                 }
[17:40:12.836]                 ...future.workdir <- getwd()
[17:40:12.836]             }
[17:40:12.836]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:12.836]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:12.836]         }
[17:40:12.836]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:12.836]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:40:12.836]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:12.836]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:12.836]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:12.836]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:12.836]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:12.836]             base::names(...future.oldOptions))
[17:40:12.836]     }
[17:40:12.836]     if (FALSE) {
[17:40:12.836]     }
[17:40:12.836]     else {
[17:40:12.836]         if (TRUE) {
[17:40:12.836]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:12.836]                 open = "w")
[17:40:12.836]         }
[17:40:12.836]         else {
[17:40:12.836]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:12.836]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:12.836]         }
[17:40:12.836]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:12.836]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:12.836]             base::sink(type = "output", split = FALSE)
[17:40:12.836]             base::close(...future.stdout)
[17:40:12.836]         }, add = TRUE)
[17:40:12.836]     }
[17:40:12.836]     ...future.frame <- base::sys.nframe()
[17:40:12.836]     ...future.conditions <- base::list()
[17:40:12.836]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:12.836]     if (FALSE) {
[17:40:12.836]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:12.836]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:12.836]     }
[17:40:12.836]     ...future.result <- base::tryCatch({
[17:40:12.836]         base::withCallingHandlers({
[17:40:12.836]             ...future.value <- base::withVisible(base::local({
[17:40:12.836]                 ...future.makeSendCondition <- base::local({
[17:40:12.836]                   sendCondition <- NULL
[17:40:12.836]                   function(frame = 1L) {
[17:40:12.836]                     if (is.function(sendCondition)) 
[17:40:12.836]                       return(sendCondition)
[17:40:12.836]                     ns <- getNamespace("parallel")
[17:40:12.836]                     if (exists("sendData", mode = "function", 
[17:40:12.836]                       envir = ns)) {
[17:40:12.836]                       parallel_sendData <- get("sendData", mode = "function", 
[17:40:12.836]                         envir = ns)
[17:40:12.836]                       envir <- sys.frame(frame)
[17:40:12.836]                       master <- NULL
[17:40:12.836]                       while (!identical(envir, .GlobalEnv) && 
[17:40:12.836]                         !identical(envir, emptyenv())) {
[17:40:12.836]                         if (exists("master", mode = "list", envir = envir, 
[17:40:12.836]                           inherits = FALSE)) {
[17:40:12.836]                           master <- get("master", mode = "list", 
[17:40:12.836]                             envir = envir, inherits = FALSE)
[17:40:12.836]                           if (inherits(master, c("SOCKnode", 
[17:40:12.836]                             "SOCK0node"))) {
[17:40:12.836]                             sendCondition <<- function(cond) {
[17:40:12.836]                               data <- list(type = "VALUE", value = cond, 
[17:40:12.836]                                 success = TRUE)
[17:40:12.836]                               parallel_sendData(master, data)
[17:40:12.836]                             }
[17:40:12.836]                             return(sendCondition)
[17:40:12.836]                           }
[17:40:12.836]                         }
[17:40:12.836]                         frame <- frame + 1L
[17:40:12.836]                         envir <- sys.frame(frame)
[17:40:12.836]                       }
[17:40:12.836]                     }
[17:40:12.836]                     sendCondition <<- function(cond) NULL
[17:40:12.836]                   }
[17:40:12.836]                 })
[17:40:12.836]                 withCallingHandlers({
[17:40:12.836]                   NA
[17:40:12.836]                 }, immediateCondition = function(cond) {
[17:40:12.836]                   sendCondition <- ...future.makeSendCondition()
[17:40:12.836]                   sendCondition(cond)
[17:40:12.836]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:12.836]                   {
[17:40:12.836]                     inherits <- base::inherits
[17:40:12.836]                     invokeRestart <- base::invokeRestart
[17:40:12.836]                     is.null <- base::is.null
[17:40:12.836]                     muffled <- FALSE
[17:40:12.836]                     if (inherits(cond, "message")) {
[17:40:12.836]                       muffled <- grepl(pattern, "muffleMessage")
[17:40:12.836]                       if (muffled) 
[17:40:12.836]                         invokeRestart("muffleMessage")
[17:40:12.836]                     }
[17:40:12.836]                     else if (inherits(cond, "warning")) {
[17:40:12.836]                       muffled <- grepl(pattern, "muffleWarning")
[17:40:12.836]                       if (muffled) 
[17:40:12.836]                         invokeRestart("muffleWarning")
[17:40:12.836]                     }
[17:40:12.836]                     else if (inherits(cond, "condition")) {
[17:40:12.836]                       if (!is.null(pattern)) {
[17:40:12.836]                         computeRestarts <- base::computeRestarts
[17:40:12.836]                         grepl <- base::grepl
[17:40:12.836]                         restarts <- computeRestarts(cond)
[17:40:12.836]                         for (restart in restarts) {
[17:40:12.836]                           name <- restart$name
[17:40:12.836]                           if (is.null(name)) 
[17:40:12.836]                             next
[17:40:12.836]                           if (!grepl(pattern, name)) 
[17:40:12.836]                             next
[17:40:12.836]                           invokeRestart(restart)
[17:40:12.836]                           muffled <- TRUE
[17:40:12.836]                           break
[17:40:12.836]                         }
[17:40:12.836]                       }
[17:40:12.836]                     }
[17:40:12.836]                     invisible(muffled)
[17:40:12.836]                   }
[17:40:12.836]                   muffleCondition(cond)
[17:40:12.836]                 })
[17:40:12.836]             }))
[17:40:12.836]             future::FutureResult(value = ...future.value$value, 
[17:40:12.836]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:12.836]                   ...future.rng), globalenv = if (FALSE) 
[17:40:12.836]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:12.836]                     ...future.globalenv.names))
[17:40:12.836]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:12.836]         }, condition = base::local({
[17:40:12.836]             c <- base::c
[17:40:12.836]             inherits <- base::inherits
[17:40:12.836]             invokeRestart <- base::invokeRestart
[17:40:12.836]             length <- base::length
[17:40:12.836]             list <- base::list
[17:40:12.836]             seq.int <- base::seq.int
[17:40:12.836]             signalCondition <- base::signalCondition
[17:40:12.836]             sys.calls <- base::sys.calls
[17:40:12.836]             `[[` <- base::`[[`
[17:40:12.836]             `+` <- base::`+`
[17:40:12.836]             `<<-` <- base::`<<-`
[17:40:12.836]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:12.836]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:12.836]                   3L)]
[17:40:12.836]             }
[17:40:12.836]             function(cond) {
[17:40:12.836]                 is_error <- inherits(cond, "error")
[17:40:12.836]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:12.836]                   NULL)
[17:40:12.836]                 if (is_error) {
[17:40:12.836]                   sessionInformation <- function() {
[17:40:12.836]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:12.836]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:12.836]                       search = base::search(), system = base::Sys.info())
[17:40:12.836]                   }
[17:40:12.836]                   ...future.conditions[[length(...future.conditions) + 
[17:40:12.836]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:12.836]                     cond$call), session = sessionInformation(), 
[17:40:12.836]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:12.836]                   signalCondition(cond)
[17:40:12.836]                 }
[17:40:12.836]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:12.836]                 "immediateCondition"))) {
[17:40:12.836]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:12.836]                   ...future.conditions[[length(...future.conditions) + 
[17:40:12.836]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:12.836]                   if (TRUE && !signal) {
[17:40:12.836]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:12.836]                     {
[17:40:12.836]                       inherits <- base::inherits
[17:40:12.836]                       invokeRestart <- base::invokeRestart
[17:40:12.836]                       is.null <- base::is.null
[17:40:12.836]                       muffled <- FALSE
[17:40:12.836]                       if (inherits(cond, "message")) {
[17:40:12.836]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:12.836]                         if (muffled) 
[17:40:12.836]                           invokeRestart("muffleMessage")
[17:40:12.836]                       }
[17:40:12.836]                       else if (inherits(cond, "warning")) {
[17:40:12.836]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:12.836]                         if (muffled) 
[17:40:12.836]                           invokeRestart("muffleWarning")
[17:40:12.836]                       }
[17:40:12.836]                       else if (inherits(cond, "condition")) {
[17:40:12.836]                         if (!is.null(pattern)) {
[17:40:12.836]                           computeRestarts <- base::computeRestarts
[17:40:12.836]                           grepl <- base::grepl
[17:40:12.836]                           restarts <- computeRestarts(cond)
[17:40:12.836]                           for (restart in restarts) {
[17:40:12.836]                             name <- restart$name
[17:40:12.836]                             if (is.null(name)) 
[17:40:12.836]                               next
[17:40:12.836]                             if (!grepl(pattern, name)) 
[17:40:12.836]                               next
[17:40:12.836]                             invokeRestart(restart)
[17:40:12.836]                             muffled <- TRUE
[17:40:12.836]                             break
[17:40:12.836]                           }
[17:40:12.836]                         }
[17:40:12.836]                       }
[17:40:12.836]                       invisible(muffled)
[17:40:12.836]                     }
[17:40:12.836]                     muffleCondition(cond, pattern = "^muffle")
[17:40:12.836]                   }
[17:40:12.836]                 }
[17:40:12.836]                 else {
[17:40:12.836]                   if (TRUE) {
[17:40:12.836]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:12.836]                     {
[17:40:12.836]                       inherits <- base::inherits
[17:40:12.836]                       invokeRestart <- base::invokeRestart
[17:40:12.836]                       is.null <- base::is.null
[17:40:12.836]                       muffled <- FALSE
[17:40:12.836]                       if (inherits(cond, "message")) {
[17:40:12.836]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:12.836]                         if (muffled) 
[17:40:12.836]                           invokeRestart("muffleMessage")
[17:40:12.836]                       }
[17:40:12.836]                       else if (inherits(cond, "warning")) {
[17:40:12.836]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:12.836]                         if (muffled) 
[17:40:12.836]                           invokeRestart("muffleWarning")
[17:40:12.836]                       }
[17:40:12.836]                       else if (inherits(cond, "condition")) {
[17:40:12.836]                         if (!is.null(pattern)) {
[17:40:12.836]                           computeRestarts <- base::computeRestarts
[17:40:12.836]                           grepl <- base::grepl
[17:40:12.836]                           restarts <- computeRestarts(cond)
[17:40:12.836]                           for (restart in restarts) {
[17:40:12.836]                             name <- restart$name
[17:40:12.836]                             if (is.null(name)) 
[17:40:12.836]                               next
[17:40:12.836]                             if (!grepl(pattern, name)) 
[17:40:12.836]                               next
[17:40:12.836]                             invokeRestart(restart)
[17:40:12.836]                             muffled <- TRUE
[17:40:12.836]                             break
[17:40:12.836]                           }
[17:40:12.836]                         }
[17:40:12.836]                       }
[17:40:12.836]                       invisible(muffled)
[17:40:12.836]                     }
[17:40:12.836]                     muffleCondition(cond, pattern = "^muffle")
[17:40:12.836]                   }
[17:40:12.836]                 }
[17:40:12.836]             }
[17:40:12.836]         }))
[17:40:12.836]     }, error = function(ex) {
[17:40:12.836]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:12.836]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:12.836]                 ...future.rng), started = ...future.startTime, 
[17:40:12.836]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:12.836]             version = "1.8"), class = "FutureResult")
[17:40:12.836]     }, finally = {
[17:40:12.836]         if (!identical(...future.workdir, getwd())) 
[17:40:12.836]             setwd(...future.workdir)
[17:40:12.836]         {
[17:40:12.836]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:12.836]                 ...future.oldOptions$nwarnings <- NULL
[17:40:12.836]             }
[17:40:12.836]             base::options(...future.oldOptions)
[17:40:12.836]             if (.Platform$OS.type == "windows") {
[17:40:12.836]                 old_names <- names(...future.oldEnvVars)
[17:40:12.836]                 envs <- base::Sys.getenv()
[17:40:12.836]                 names <- names(envs)
[17:40:12.836]                 common <- intersect(names, old_names)
[17:40:12.836]                 added <- setdiff(names, old_names)
[17:40:12.836]                 removed <- setdiff(old_names, names)
[17:40:12.836]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:12.836]                   envs[common]]
[17:40:12.836]                 NAMES <- toupper(changed)
[17:40:12.836]                 args <- list()
[17:40:12.836]                 for (kk in seq_along(NAMES)) {
[17:40:12.836]                   name <- changed[[kk]]
[17:40:12.836]                   NAME <- NAMES[[kk]]
[17:40:12.836]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:12.836]                     next
[17:40:12.836]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:12.836]                 }
[17:40:12.836]                 NAMES <- toupper(added)
[17:40:12.836]                 for (kk in seq_along(NAMES)) {
[17:40:12.836]                   name <- added[[kk]]
[17:40:12.836]                   NAME <- NAMES[[kk]]
[17:40:12.836]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:12.836]                     next
[17:40:12.836]                   args[[name]] <- ""
[17:40:12.836]                 }
[17:40:12.836]                 NAMES <- toupper(removed)
[17:40:12.836]                 for (kk in seq_along(NAMES)) {
[17:40:12.836]                   name <- removed[[kk]]
[17:40:12.836]                   NAME <- NAMES[[kk]]
[17:40:12.836]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:12.836]                     next
[17:40:12.836]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:12.836]                 }
[17:40:12.836]                 if (length(args) > 0) 
[17:40:12.836]                   base::do.call(base::Sys.setenv, args = args)
[17:40:12.836]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:12.836]             }
[17:40:12.836]             else {
[17:40:12.836]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:12.836]             }
[17:40:12.836]             {
[17:40:12.836]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:12.836]                   0L) {
[17:40:12.836]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:12.836]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:12.836]                   base::options(opts)
[17:40:12.836]                 }
[17:40:12.836]                 {
[17:40:12.836]                   NULL
[17:40:12.836]                   options(future.plan = NULL)
[17:40:12.836]                   if (is.na(NA_character_)) 
[17:40:12.836]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:12.836]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:12.836]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:40:12.836]                     .init = FALSE)
[17:40:12.836]                 }
[17:40:12.836]             }
[17:40:12.836]         }
[17:40:12.836]     })
[17:40:12.836]     if (TRUE) {
[17:40:12.836]         base::sink(type = "output", split = FALSE)
[17:40:12.836]         if (TRUE) {
[17:40:12.836]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:12.836]         }
[17:40:12.836]         else {
[17:40:12.836]             ...future.result["stdout"] <- base::list(NULL)
[17:40:12.836]         }
[17:40:12.836]         base::close(...future.stdout)
[17:40:12.836]         ...future.stdout <- NULL
[17:40:12.836]     }
[17:40:12.836]     ...future.result$conditions <- ...future.conditions
[17:40:12.836]     ...future.result$finished <- base::Sys.time()
[17:40:12.836]     ...future.result
[17:40:12.836] }
[17:40:12.887] ClusterFuture started
[17:40:12.887] result() for ClusterFuture ...
[17:40:12.887] receiveMessageFromWorker() for ClusterFuture ...
[17:40:12.887] - Validating connection of ClusterFuture
[17:40:12.919] - received message: FutureResult
[17:40:12.919] - Received FutureResult
[17:40:12.919] - Erased future from FutureRegistry
[17:40:12.919] result() for ClusterFuture ...
[17:40:12.919] - result already collected: FutureResult
[17:40:12.919] result() for ClusterFuture ... done
[17:40:12.919] receiveMessageFromWorker() for ClusterFuture ... done
[17:40:12.920] result() for ClusterFuture ... done
[17:40:12.920] result() for ClusterFuture ...
[17:40:12.920] - result already collected: FutureResult
[17:40:12.920] result() for ClusterFuture ... done
[17:40:12.920] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:40:12.926] plan(): nbrOfWorkers() = 1
> n <- nbrOfWorkers()
> message(sprintf("nbrOfWorkers: %d", n))
nbrOfWorkers: 1
> stopifnot(n == max(1L, nworkers - 1L))
> 
> message("Type of future: constant")
Type of future: constant
> n <- nbrOfWorkers(constant)
> message(sprintf("nbrOfWorkers: %d", n))
nbrOfWorkers: 1
> stopifnot(n == 1)
> 
> message("Type of future: <future>")
Type of future: <future>
> foo <- structure(function(...) NULL, class = c("future"))
> n <- nbrOfWorkers(foo)
> message(sprintf("nbrOfWorkers: %g", n))
nbrOfWorkers: Inf
> stopifnot(n >= 0, is.infinite(n))
> 
> 
> message("Type of future: cluster with workers = <cluster object>")
Type of future: cluster with workers = <cluster object>
> 
> workers <- makeClusterPSOCK(2L)
[17:40:12.931] [local output] makeClusterPSOCK() ...
[17:40:12.934] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:40:12.935] [local output] Base port: 11009
[17:40:12.935] [local output] Getting setup options for 2 cluster nodes ...
[17:40:12.935] [local output]  - Node 1 of 2 ...
[17:40:12.935] [local output] localMachine=TRUE => revtunnel=FALSE

[17:40:12.936] [local output] Rscript port: 11009

[17:40:12.936] [local output]  - Node 2 of 2 ...
[17:40:12.937] [local output] localMachine=TRUE => revtunnel=FALSE

[17:40:12.937] [local output] Rscript port: 11009

[17:40:12.937] [local output] Getting setup options for 2 cluster nodes ... done
[17:40:12.937] [local output]  - Parallel setup requested for some PSOCK nodes
[17:40:12.938] [local output] Setting up PSOCK nodes in parallel
[17:40:12.938] List of 36
[17:40:12.938]  $ worker          : chr "localhost"
[17:40:12.938]   ..- attr(*, "localhost")= logi TRUE
[17:40:12.938]  $ master          : chr "localhost"
[17:40:12.938]  $ port            : int 11009
[17:40:12.938]  $ connectTimeout  : num 120
[17:40:12.938]  $ timeout         : num 2592000
[17:40:12.938]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:40:12.938]  $ homogeneous     : logi TRUE
[17:40:12.938]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:40:12.938]  $ rscript_envs    : NULL
[17:40:12.938]  $ rscript_libs    : NULL
[17:40:12.938]  $ rscript_startup : NULL
[17:40:12.938]  $ rscript_sh      : chr "sh"
[17:40:12.938]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:40:12.938]  $ methods         : logi TRUE
[17:40:12.938]  $ socketOptions   : chr "no-delay"
[17:40:12.938]  $ useXDR          : logi FALSE
[17:40:12.938]  $ outfile         : chr "/dev/null"
[17:40:12.938]  $ renice          : int NA
[17:40:12.938]  $ rshcmd          : NULL
[17:40:12.938]  $ user            : chr(0) 
[17:40:12.938]  $ revtunnel       : logi FALSE
[17:40:12.938]  $ rshlogfile      : NULL
[17:40:12.938]  $ rshopts         : chr(0) 
[17:40:12.938]  $ rank            : int 1
[17:40:12.938]  $ manual          : logi FALSE
[17:40:12.938]  $ dryrun          : logi FALSE
[17:40:12.938]  $ quiet           : logi FALSE
[17:40:12.938]  $ setup_strategy  : chr "parallel"
[17:40:12.938]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:40:12.938]  $ pidfile         : chr "/tmp/RtmpF2E44c/worker.rank=1.parallelly.parent=45991.b3a76e6dea05.pid"
[17:40:12.938]  $ rshcmd_label    : NULL
[17:40:12.938]  $ rsh_call        : NULL
[17:40:12.938]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:40:12.938]  $ localMachine    : logi TRUE
[17:40:12.938]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:40:12.938]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:40:12.938]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:40:12.938]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:40:12.938]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:40:12.938]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:40:12.938]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:40:12.938]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:40:12.938]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:40:12.938]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:40:12.938]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:40:12.938]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:40:12.938]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:40:12.938]  $ arguments       :List of 28
[17:40:12.938]   ..$ worker          : chr "localhost"
[17:40:12.938]   ..$ master          : NULL
[17:40:12.938]   ..$ port            : int 11009
[17:40:12.938]   ..$ connectTimeout  : num 120
[17:40:12.938]   ..$ timeout         : num 2592000
[17:40:12.938]   ..$ rscript         : NULL
[17:40:12.938]   ..$ homogeneous     : NULL
[17:40:12.938]   ..$ rscript_args    : NULL
[17:40:12.938]   ..$ rscript_envs    : NULL
[17:40:12.938]   ..$ rscript_libs    : NULL
[17:40:12.938]   ..$ rscript_startup : NULL
[17:40:12.938]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:40:12.938]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:40:12.938]   ..$ methods         : logi TRUE
[17:40:12.938]   ..$ socketOptions   : chr "no-delay"
[17:40:12.938]   ..$ useXDR          : logi FALSE
[17:40:12.938]   ..$ outfile         : chr "/dev/null"
[17:40:12.938]   ..$ renice          : int NA
[17:40:12.938]   ..$ rshcmd          : NULL
[17:40:12.938]   ..$ user            : NULL
[17:40:12.938]   ..$ revtunnel       : logi NA
[17:40:12.938]   ..$ rshlogfile      : NULL
[17:40:12.938]   ..$ rshopts         : NULL
[17:40:12.938]   ..$ rank            : int 1
[17:40:12.938]   ..$ manual          : logi FALSE
[17:40:12.938]   ..$ dryrun          : logi FALSE
[17:40:12.938]   ..$ quiet           : logi FALSE
[17:40:12.938]   ..$ setup_strategy  : chr "parallel"
[17:40:12.938]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:40:12.956] [local output] System call to launch all workers:
[17:40:12.956] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpF2E44c/worker.rank=1.parallelly.parent=45991.b3a76e6dea05.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11009 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:40:12.956] [local output] Starting PSOCK main server
[17:40:12.958] [local output] Workers launched
[17:40:12.958] [local output] Waiting for workers to connect back
[17:40:12.958]  - [local output] 0 workers out of 2 ready
[17:40:13.200]  - [local output] 0 workers out of 2 ready
[17:40:13.201]  - [local output] 1 workers out of 2 ready
[17:40:13.201]  - [local output] 2 workers out of 2 ready
[17:40:13.201] [local output] Launching of workers completed
[17:40:13.201] [local output] Collecting session information from workers
[17:40:13.202] [local output]  - Worker #1 of 2
[17:40:13.202] [local output]  - Worker #2 of 2
[17:40:13.202] [local output] makeClusterPSOCK() ... done
> print(workers)
Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.4.0 (2024-04-24), platform x86_64-pc-linux-gnu)
> plan(cluster, workers = workers)
[17:40:13.206] plan(): Setting new future strategy stack:
[17:40:13.206] List of future strategies:
[17:40:13.206] 1. cluster:
[17:40:13.206]    - args: function (..., workers = "<Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.4.0 (2024-04-24), platform x86_64-pc-linux-gnu)>", envir = parent.frame())
[17:40:13.206]    - tweaked: TRUE
[17:40:13.206]    - call: plan(cluster, workers = workers)
[17:40:13.208] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:40:13.208] cluster:
[17:40:13.208] - args: function (..., workers = "<Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.4.0 (2024-04-24), platform x86_64-pc-linux-gnu)>", envir = parent.frame())
[17:40:13.208] - tweaked: TRUE
[17:40:13.208] - call: plan(cluster, workers = workers)
[17:40:13.210] getGlobalsAndPackages() ...
[17:40:13.210] Not searching for globals
[17:40:13.211] - globals: [0] <none>
[17:40:13.211] getGlobalsAndPackages() ... DONE
[17:40:13.221] Packages needed by the future expression (n = 0): <none>
[17:40:13.221] Packages needed by future strategies (n = 0): <none>
[17:40:13.222] {
[17:40:13.222]     {
[17:40:13.222]         {
[17:40:13.222]             ...future.startTime <- base::Sys.time()
[17:40:13.222]             {
[17:40:13.222]                 {
[17:40:13.222]                   {
[17:40:13.222]                     base::local({
[17:40:13.222]                       has_future <- base::requireNamespace("future", 
[17:40:13.222]                         quietly = TRUE)
[17:40:13.222]                       if (has_future) {
[17:40:13.222]                         ns <- base::getNamespace("future")
[17:40:13.222]                         version <- ns[[".package"]][["version"]]
[17:40:13.222]                         if (is.null(version)) 
[17:40:13.222]                           version <- utils::packageVersion("future")
[17:40:13.222]                       }
[17:40:13.222]                       else {
[17:40:13.222]                         version <- NULL
[17:40:13.222]                       }
[17:40:13.222]                       if (!has_future || version < "1.8.0") {
[17:40:13.222]                         info <- base::c(r_version = base::gsub("R version ", 
[17:40:13.222]                           "", base::R.version$version.string), 
[17:40:13.222]                           platform = base::sprintf("%s (%s-bit)", 
[17:40:13.222]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:13.222]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:13.222]                             "release", "version")], collapse = " "), 
[17:40:13.222]                           hostname = base::Sys.info()[["nodename"]])
[17:40:13.222]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:40:13.222]                           info)
[17:40:13.222]                         info <- base::paste(info, collapse = "; ")
[17:40:13.222]                         if (!has_future) {
[17:40:13.222]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:13.222]                             info)
[17:40:13.222]                         }
[17:40:13.222]                         else {
[17:40:13.222]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:13.222]                             info, version)
[17:40:13.222]                         }
[17:40:13.222]                         base::stop(msg)
[17:40:13.222]                       }
[17:40:13.222]                     })
[17:40:13.222]                   }
[17:40:13.222]                   ...future.strategy.old <- future::plan("list")
[17:40:13.222]                   options(future.plan = NULL)
[17:40:13.222]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:13.222]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:13.222]                 }
[17:40:13.222]                 ...future.workdir <- getwd()
[17:40:13.222]             }
[17:40:13.222]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:13.222]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:13.222]         }
[17:40:13.222]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:13.222]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:40:13.222]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:13.222]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:13.222]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:13.222]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:13.222]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:13.222]             base::names(...future.oldOptions))
[17:40:13.222]     }
[17:40:13.222]     if (FALSE) {
[17:40:13.222]     }
[17:40:13.222]     else {
[17:40:13.222]         if (TRUE) {
[17:40:13.222]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:13.222]                 open = "w")
[17:40:13.222]         }
[17:40:13.222]         else {
[17:40:13.222]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:13.222]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:13.222]         }
[17:40:13.222]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:13.222]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:13.222]             base::sink(type = "output", split = FALSE)
[17:40:13.222]             base::close(...future.stdout)
[17:40:13.222]         }, add = TRUE)
[17:40:13.222]     }
[17:40:13.222]     ...future.frame <- base::sys.nframe()
[17:40:13.222]     ...future.conditions <- base::list()
[17:40:13.222]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:13.222]     if (FALSE) {
[17:40:13.222]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:13.222]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:13.222]     }
[17:40:13.222]     ...future.result <- base::tryCatch({
[17:40:13.222]         base::withCallingHandlers({
[17:40:13.222]             ...future.value <- base::withVisible(base::local({
[17:40:13.222]                 ...future.makeSendCondition <- base::local({
[17:40:13.222]                   sendCondition <- NULL
[17:40:13.222]                   function(frame = 1L) {
[17:40:13.222]                     if (is.function(sendCondition)) 
[17:40:13.222]                       return(sendCondition)
[17:40:13.222]                     ns <- getNamespace("parallel")
[17:40:13.222]                     if (exists("sendData", mode = "function", 
[17:40:13.222]                       envir = ns)) {
[17:40:13.222]                       parallel_sendData <- get("sendData", mode = "function", 
[17:40:13.222]                         envir = ns)
[17:40:13.222]                       envir <- sys.frame(frame)
[17:40:13.222]                       master <- NULL
[17:40:13.222]                       while (!identical(envir, .GlobalEnv) && 
[17:40:13.222]                         !identical(envir, emptyenv())) {
[17:40:13.222]                         if (exists("master", mode = "list", envir = envir, 
[17:40:13.222]                           inherits = FALSE)) {
[17:40:13.222]                           master <- get("master", mode = "list", 
[17:40:13.222]                             envir = envir, inherits = FALSE)
[17:40:13.222]                           if (inherits(master, c("SOCKnode", 
[17:40:13.222]                             "SOCK0node"))) {
[17:40:13.222]                             sendCondition <<- function(cond) {
[17:40:13.222]                               data <- list(type = "VALUE", value = cond, 
[17:40:13.222]                                 success = TRUE)
[17:40:13.222]                               parallel_sendData(master, data)
[17:40:13.222]                             }
[17:40:13.222]                             return(sendCondition)
[17:40:13.222]                           }
[17:40:13.222]                         }
[17:40:13.222]                         frame <- frame + 1L
[17:40:13.222]                         envir <- sys.frame(frame)
[17:40:13.222]                       }
[17:40:13.222]                     }
[17:40:13.222]                     sendCondition <<- function(cond) NULL
[17:40:13.222]                   }
[17:40:13.222]                 })
[17:40:13.222]                 withCallingHandlers({
[17:40:13.222]                   NA
[17:40:13.222]                 }, immediateCondition = function(cond) {
[17:40:13.222]                   sendCondition <- ...future.makeSendCondition()
[17:40:13.222]                   sendCondition(cond)
[17:40:13.222]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:13.222]                   {
[17:40:13.222]                     inherits <- base::inherits
[17:40:13.222]                     invokeRestart <- base::invokeRestart
[17:40:13.222]                     is.null <- base::is.null
[17:40:13.222]                     muffled <- FALSE
[17:40:13.222]                     if (inherits(cond, "message")) {
[17:40:13.222]                       muffled <- grepl(pattern, "muffleMessage")
[17:40:13.222]                       if (muffled) 
[17:40:13.222]                         invokeRestart("muffleMessage")
[17:40:13.222]                     }
[17:40:13.222]                     else if (inherits(cond, "warning")) {
[17:40:13.222]                       muffled <- grepl(pattern, "muffleWarning")
[17:40:13.222]                       if (muffled) 
[17:40:13.222]                         invokeRestart("muffleWarning")
[17:40:13.222]                     }
[17:40:13.222]                     else if (inherits(cond, "condition")) {
[17:40:13.222]                       if (!is.null(pattern)) {
[17:40:13.222]                         computeRestarts <- base::computeRestarts
[17:40:13.222]                         grepl <- base::grepl
[17:40:13.222]                         restarts <- computeRestarts(cond)
[17:40:13.222]                         for (restart in restarts) {
[17:40:13.222]                           name <- restart$name
[17:40:13.222]                           if (is.null(name)) 
[17:40:13.222]                             next
[17:40:13.222]                           if (!grepl(pattern, name)) 
[17:40:13.222]                             next
[17:40:13.222]                           invokeRestart(restart)
[17:40:13.222]                           muffled <- TRUE
[17:40:13.222]                           break
[17:40:13.222]                         }
[17:40:13.222]                       }
[17:40:13.222]                     }
[17:40:13.222]                     invisible(muffled)
[17:40:13.222]                   }
[17:40:13.222]                   muffleCondition(cond)
[17:40:13.222]                 })
[17:40:13.222]             }))
[17:40:13.222]             future::FutureResult(value = ...future.value$value, 
[17:40:13.222]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:13.222]                   ...future.rng), globalenv = if (FALSE) 
[17:40:13.222]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:13.222]                     ...future.globalenv.names))
[17:40:13.222]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:13.222]         }, condition = base::local({
[17:40:13.222]             c <- base::c
[17:40:13.222]             inherits <- base::inherits
[17:40:13.222]             invokeRestart <- base::invokeRestart
[17:40:13.222]             length <- base::length
[17:40:13.222]             list <- base::list
[17:40:13.222]             seq.int <- base::seq.int
[17:40:13.222]             signalCondition <- base::signalCondition
[17:40:13.222]             sys.calls <- base::sys.calls
[17:40:13.222]             `[[` <- base::`[[`
[17:40:13.222]             `+` <- base::`+`
[17:40:13.222]             `<<-` <- base::`<<-`
[17:40:13.222]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:13.222]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:13.222]                   3L)]
[17:40:13.222]             }
[17:40:13.222]             function(cond) {
[17:40:13.222]                 is_error <- inherits(cond, "error")
[17:40:13.222]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:13.222]                   NULL)
[17:40:13.222]                 if (is_error) {
[17:40:13.222]                   sessionInformation <- function() {
[17:40:13.222]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:13.222]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:13.222]                       search = base::search(), system = base::Sys.info())
[17:40:13.222]                   }
[17:40:13.222]                   ...future.conditions[[length(...future.conditions) + 
[17:40:13.222]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:13.222]                     cond$call), session = sessionInformation(), 
[17:40:13.222]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:13.222]                   signalCondition(cond)
[17:40:13.222]                 }
[17:40:13.222]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:13.222]                 "immediateCondition"))) {
[17:40:13.222]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:13.222]                   ...future.conditions[[length(...future.conditions) + 
[17:40:13.222]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:13.222]                   if (TRUE && !signal) {
[17:40:13.222]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:13.222]                     {
[17:40:13.222]                       inherits <- base::inherits
[17:40:13.222]                       invokeRestart <- base::invokeRestart
[17:40:13.222]                       is.null <- base::is.null
[17:40:13.222]                       muffled <- FALSE
[17:40:13.222]                       if (inherits(cond, "message")) {
[17:40:13.222]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:13.222]                         if (muffled) 
[17:40:13.222]                           invokeRestart("muffleMessage")
[17:40:13.222]                       }
[17:40:13.222]                       else if (inherits(cond, "warning")) {
[17:40:13.222]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:13.222]                         if (muffled) 
[17:40:13.222]                           invokeRestart("muffleWarning")
[17:40:13.222]                       }
[17:40:13.222]                       else if (inherits(cond, "condition")) {
[17:40:13.222]                         if (!is.null(pattern)) {
[17:40:13.222]                           computeRestarts <- base::computeRestarts
[17:40:13.222]                           grepl <- base::grepl
[17:40:13.222]                           restarts <- computeRestarts(cond)
[17:40:13.222]                           for (restart in restarts) {
[17:40:13.222]                             name <- restart$name
[17:40:13.222]                             if (is.null(name)) 
[17:40:13.222]                               next
[17:40:13.222]                             if (!grepl(pattern, name)) 
[17:40:13.222]                               next
[17:40:13.222]                             invokeRestart(restart)
[17:40:13.222]                             muffled <- TRUE
[17:40:13.222]                             break
[17:40:13.222]                           }
[17:40:13.222]                         }
[17:40:13.222]                       }
[17:40:13.222]                       invisible(muffled)
[17:40:13.222]                     }
[17:40:13.222]                     muffleCondition(cond, pattern = "^muffle")
[17:40:13.222]                   }
[17:40:13.222]                 }
[17:40:13.222]                 else {
[17:40:13.222]                   if (TRUE) {
[17:40:13.222]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:13.222]                     {
[17:40:13.222]                       inherits <- base::inherits
[17:40:13.222]                       invokeRestart <- base::invokeRestart
[17:40:13.222]                       is.null <- base::is.null
[17:40:13.222]                       muffled <- FALSE
[17:40:13.222]                       if (inherits(cond, "message")) {
[17:40:13.222]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:13.222]                         if (muffled) 
[17:40:13.222]                           invokeRestart("muffleMessage")
[17:40:13.222]                       }
[17:40:13.222]                       else if (inherits(cond, "warning")) {
[17:40:13.222]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:13.222]                         if (muffled) 
[17:40:13.222]                           invokeRestart("muffleWarning")
[17:40:13.222]                       }
[17:40:13.222]                       else if (inherits(cond, "condition")) {
[17:40:13.222]                         if (!is.null(pattern)) {
[17:40:13.222]                           computeRestarts <- base::computeRestarts
[17:40:13.222]                           grepl <- base::grepl
[17:40:13.222]                           restarts <- computeRestarts(cond)
[17:40:13.222]                           for (restart in restarts) {
[17:40:13.222]                             name <- restart$name
[17:40:13.222]                             if (is.null(name)) 
[17:40:13.222]                               next
[17:40:13.222]                             if (!grepl(pattern, name)) 
[17:40:13.222]                               next
[17:40:13.222]                             invokeRestart(restart)
[17:40:13.222]                             muffled <- TRUE
[17:40:13.222]                             break
[17:40:13.222]                           }
[17:40:13.222]                         }
[17:40:13.222]                       }
[17:40:13.222]                       invisible(muffled)
[17:40:13.222]                     }
[17:40:13.222]                     muffleCondition(cond, pattern = "^muffle")
[17:40:13.222]                   }
[17:40:13.222]                 }
[17:40:13.222]             }
[17:40:13.222]         }))
[17:40:13.222]     }, error = function(ex) {
[17:40:13.222]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:13.222]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:13.222]                 ...future.rng), started = ...future.startTime, 
[17:40:13.222]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:13.222]             version = "1.8"), class = "FutureResult")
[17:40:13.222]     }, finally = {
[17:40:13.222]         if (!identical(...future.workdir, getwd())) 
[17:40:13.222]             setwd(...future.workdir)
[17:40:13.222]         {
[17:40:13.222]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:13.222]                 ...future.oldOptions$nwarnings <- NULL
[17:40:13.222]             }
[17:40:13.222]             base::options(...future.oldOptions)
[17:40:13.222]             if (.Platform$OS.type == "windows") {
[17:40:13.222]                 old_names <- names(...future.oldEnvVars)
[17:40:13.222]                 envs <- base::Sys.getenv()
[17:40:13.222]                 names <- names(envs)
[17:40:13.222]                 common <- intersect(names, old_names)
[17:40:13.222]                 added <- setdiff(names, old_names)
[17:40:13.222]                 removed <- setdiff(old_names, names)
[17:40:13.222]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:13.222]                   envs[common]]
[17:40:13.222]                 NAMES <- toupper(changed)
[17:40:13.222]                 args <- list()
[17:40:13.222]                 for (kk in seq_along(NAMES)) {
[17:40:13.222]                   name <- changed[[kk]]
[17:40:13.222]                   NAME <- NAMES[[kk]]
[17:40:13.222]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:13.222]                     next
[17:40:13.222]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:13.222]                 }
[17:40:13.222]                 NAMES <- toupper(added)
[17:40:13.222]                 for (kk in seq_along(NAMES)) {
[17:40:13.222]                   name <- added[[kk]]
[17:40:13.222]                   NAME <- NAMES[[kk]]
[17:40:13.222]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:13.222]                     next
[17:40:13.222]                   args[[name]] <- ""
[17:40:13.222]                 }
[17:40:13.222]                 NAMES <- toupper(removed)
[17:40:13.222]                 for (kk in seq_along(NAMES)) {
[17:40:13.222]                   name <- removed[[kk]]
[17:40:13.222]                   NAME <- NAMES[[kk]]
[17:40:13.222]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:13.222]                     next
[17:40:13.222]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:13.222]                 }
[17:40:13.222]                 if (length(args) > 0) 
[17:40:13.222]                   base::do.call(base::Sys.setenv, args = args)
[17:40:13.222]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:13.222]             }
[17:40:13.222]             else {
[17:40:13.222]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:13.222]             }
[17:40:13.222]             {
[17:40:13.222]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:13.222]                   0L) {
[17:40:13.222]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:13.222]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:13.222]                   base::options(opts)
[17:40:13.222]                 }
[17:40:13.222]                 {
[17:40:13.222]                   NULL
[17:40:13.222]                   options(future.plan = NULL)
[17:40:13.222]                   if (is.na(NA_character_)) 
[17:40:13.222]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:13.222]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:13.222]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:40:13.222]                     .init = FALSE)
[17:40:13.222]                 }
[17:40:13.222]             }
[17:40:13.222]         }
[17:40:13.222]     })
[17:40:13.222]     if (TRUE) {
[17:40:13.222]         base::sink(type = "output", split = FALSE)
[17:40:13.222]         if (TRUE) {
[17:40:13.222]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:13.222]         }
[17:40:13.222]         else {
[17:40:13.222]             ...future.result["stdout"] <- base::list(NULL)
[17:40:13.222]         }
[17:40:13.222]         base::close(...future.stdout)
[17:40:13.222]         ...future.stdout <- NULL
[17:40:13.222]     }
[17:40:13.222]     ...future.result$conditions <- ...future.conditions
[17:40:13.222]     ...future.result$finished <- base::Sys.time()
[17:40:13.222]     ...future.result
[17:40:13.222] }
[17:40:13.273] ClusterFuture started
[17:40:13.273] result() for ClusterFuture ...
[17:40:13.273] receiveMessageFromWorker() for ClusterFuture ...
[17:40:13.273] - Validating connection of ClusterFuture
[17:40:13.305] - received message: FutureResult
[17:40:13.305] - Received FutureResult
[17:40:13.305] - Erased future from FutureRegistry
[17:40:13.305] result() for ClusterFuture ...
[17:40:13.305] - result already collected: FutureResult
[17:40:13.305] result() for ClusterFuture ... done
[17:40:13.306] receiveMessageFromWorker() for ClusterFuture ... done
[17:40:13.306] result() for ClusterFuture ... done
[17:40:13.306] result() for ClusterFuture ...
[17:40:13.306] - result already collected: FutureResult
[17:40:13.306] result() for ClusterFuture ... done
[17:40:13.306] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:40:13.306] plan(): nbrOfWorkers() = 2
> n <- nbrOfWorkers()
> message(sprintf("nbrOfWorkers: %g", n))
nbrOfWorkers: 2
> stopifnot(n == length(workers))
> parallel::stopCluster(workers)
> 
> message("*** nbrOfWorkers() ... DONE")
*** nbrOfWorkers() ... DONE
> 
> source("incl/end.R")
[17:40:13.307] plan(): Setting new future strategy stack:
[17:40:13.307] List of future strategies:
[17:40:13.307] 1. FutureStrategy:
[17:40:13.307]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:40:13.307]    - tweaked: FALSE
[17:40:13.307]    - call: future::plan(oplan)
[17:40:13.308] plan(): nbrOfWorkers() = 1
> 
