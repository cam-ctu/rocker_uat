
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[09:31:26.399] plan(): Setting new future strategy stack:
[09:31:26.400] List of future strategies:
[09:31:26.400] 1. sequential:
[09:31:26.400]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:26.400]    - tweaked: FALSE
[09:31:26.400]    - call: future::plan("sequential")
[09:31:26.410] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> oopts <- c(oopts, options(future.globals.resolve = TRUE))
> setTimeLimit(cpu = 10, elapsed = 10, transient = TRUE)
> 
> message("*** Tricky use cases related to globals (part 2) ...")
*** Tricky use cases related to globals (part 2) ...
> 
> ## Allow for two background processes
> plan(multisession, workers = 2L)
[09:31:26.427] plan(): Setting new future strategy stack:
[09:31:26.427] List of future strategies:
[09:31:26.427] 1. multisession:
[09:31:26.427]    - args: function (..., workers = 2L, envir = parent.frame())
[09:31:26.427]    - tweaked: TRUE
[09:31:26.427]    - call: plan(multisession, workers = 2L)
[09:31:26.437] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[09:31:26.437] multisession:
[09:31:26.437] - args: function (..., workers = 2L, envir = parent.frame())
[09:31:26.437] - tweaked: TRUE
[09:31:26.437] - call: plan(multisession, workers = 2L)
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[09:31:26.439] getGlobalsAndPackages() ...
[09:31:26.439] Not searching for globals
[09:31:26.439] - globals: [0] <none>
[09:31:26.439] getGlobalsAndPackages() ... DONE
[09:31:26.440] [local output] makeClusterPSOCK() ...
[09:31:26.470] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[09:31:26.471] [local output] Base port: 11170
[09:31:26.471] [local output] Getting setup options for 2 cluster nodes ...
[09:31:26.471] [local output]  - Node 1 of 2 ...
[09:31:26.472] [local output] localMachine=TRUE => revtunnel=FALSE

[09:31:26.472] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp4f5g7M/worker.rank=1.parallelly.parent=43861.ab55342cf8e2.pid")), silent = TRUE)' -e 'file.exists("/tmp/Rtmp4f5g7M/worker.rank=1.parallelly.parent=43861.ab55342cf8e2.pid")'’
[09:31:26.658] - Possible to infer worker's PID: TRUE
[09:31:26.659] [local output] Rscript port: 11170

[09:31:26.659] [local output]  - Node 2 of 2 ...
[09:31:26.659] [local output] localMachine=TRUE => revtunnel=FALSE

[09:31:26.660] [local output] Rscript port: 11170

[09:31:26.660] [local output] Getting setup options for 2 cluster nodes ... done
[09:31:26.660] [local output]  - Parallel setup requested for some PSOCK nodes
[09:31:26.661] [local output] Setting up PSOCK nodes in parallel
[09:31:26.661] List of 36
[09:31:26.661]  $ worker          : chr "localhost"
[09:31:26.661]   ..- attr(*, "localhost")= logi TRUE
[09:31:26.661]  $ master          : chr "localhost"
[09:31:26.661]  $ port            : int 11170
[09:31:26.661]  $ connectTimeout  : num 120
[09:31:26.661]  $ timeout         : num 2592000
[09:31:26.661]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[09:31:26.661]  $ homogeneous     : logi TRUE
[09:31:26.661]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[09:31:26.661]  $ rscript_envs    : NULL
[09:31:26.661]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[09:31:26.661]  $ rscript_startup : NULL
[09:31:26.661]  $ rscript_sh      : chr "sh"
[09:31:26.661]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[09:31:26.661]  $ methods         : logi TRUE
[09:31:26.661]  $ socketOptions   : chr "no-delay"
[09:31:26.661]  $ useXDR          : logi FALSE
[09:31:26.661]  $ outfile         : chr "/dev/null"
[09:31:26.661]  $ renice          : int NA
[09:31:26.661]  $ rshcmd          : NULL
[09:31:26.661]  $ user            : chr(0) 
[09:31:26.661]  $ revtunnel       : logi FALSE
[09:31:26.661]  $ rshlogfile      : NULL
[09:31:26.661]  $ rshopts         : chr(0) 
[09:31:26.661]  $ rank            : int 1
[09:31:26.661]  $ manual          : logi FALSE
[09:31:26.661]  $ dryrun          : logi FALSE
[09:31:26.661]  $ quiet           : logi FALSE
[09:31:26.661]  $ setup_strategy  : chr "parallel"
[09:31:26.661]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[09:31:26.661]  $ pidfile         : chr "/tmp/Rtmp4f5g7M/worker.rank=1.parallelly.parent=43861.ab55342cf8e2.pid"
[09:31:26.661]  $ rshcmd_label    : NULL
[09:31:26.661]  $ rsh_call        : NULL
[09:31:26.661]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[09:31:26.661]  $ localMachine    : logi TRUE
[09:31:26.661]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[09:31:26.661]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[09:31:26.661]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[09:31:26.661]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[09:31:26.661]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[09:31:26.661]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[09:31:26.661]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[09:31:26.661]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[09:31:26.661]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[09:31:26.661]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[09:31:26.661]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[09:31:26.661]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[09:31:26.661]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[09:31:26.661]  $ arguments       :List of 28
[09:31:26.661]   ..$ worker          : chr "localhost"
[09:31:26.661]   ..$ master          : NULL
[09:31:26.661]   ..$ port            : int 11170
[09:31:26.661]   ..$ connectTimeout  : num 120
[09:31:26.661]   ..$ timeout         : num 2592000
[09:31:26.661]   ..$ rscript         : NULL
[09:31:26.661]   ..$ homogeneous     : NULL
[09:31:26.661]   ..$ rscript_args    : NULL
[09:31:26.661]   ..$ rscript_envs    : NULL
[09:31:26.661]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[09:31:26.661]   ..$ rscript_startup : NULL
[09:31:26.661]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[09:31:26.661]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[09:31:26.661]   ..$ methods         : logi TRUE
[09:31:26.661]   ..$ socketOptions   : chr "no-delay"
[09:31:26.661]   ..$ useXDR          : logi FALSE
[09:31:26.661]   ..$ outfile         : chr "/dev/null"
[09:31:26.661]   ..$ renice          : int NA
[09:31:26.661]   ..$ rshcmd          : NULL
[09:31:26.661]   ..$ user            : NULL
[09:31:26.661]   ..$ revtunnel       : logi NA
[09:31:26.661]   ..$ rshlogfile      : NULL
[09:31:26.661]   ..$ rshopts         : NULL
[09:31:26.661]   ..$ rank            : int 1
[09:31:26.661]   ..$ manual          : logi FALSE
[09:31:26.661]   ..$ dryrun          : logi FALSE
[09:31:26.661]   ..$ quiet           : logi FALSE
[09:31:26.661]   ..$ setup_strategy  : chr "parallel"
[09:31:26.661]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[09:31:26.679] [local output] System call to launch all workers:
[09:31:26.679] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp4f5g7M/worker.rank=1.parallelly.parent=43861.ab55342cf8e2.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11170 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[09:31:26.679] [local output] Starting PSOCK main server
[09:31:26.685] [local output] Workers launched
[09:31:26.685] [local output] Waiting for workers to connect back
[09:31:26.685]  - [local output] 0 workers out of 2 ready
[09:31:26.926]  - [local output] 0 workers out of 2 ready
[09:31:26.926]  - [local output] 1 workers out of 2 ready
[09:31:26.928]  - [local output] 1 workers out of 2 ready
[09:31:26.928]  - [local output] 2 workers out of 2 ready
[09:31:26.929] [local output] Launching of workers completed
[09:31:26.929] [local output] Collecting session information from workers
[09:31:26.929] [local output]  - Worker #1 of 2
[09:31:26.930] [local output]  - Worker #2 of 2
[09:31:26.930] [local output] makeClusterPSOCK() ... done
[09:31:26.943] Packages needed by the future expression (n = 0): <none>
[09:31:26.943] Packages needed by future strategies (n = 0): <none>
[09:31:26.944] {
[09:31:26.944]     {
[09:31:26.944]         {
[09:31:26.944]             ...future.startTime <- base::Sys.time()
[09:31:26.944]             {
[09:31:26.944]                 {
[09:31:26.944]                   {
[09:31:26.944]                     {
[09:31:26.944]                       base::local({
[09:31:26.944]                         has_future <- base::requireNamespace("future", 
[09:31:26.944]                           quietly = TRUE)
[09:31:26.944]                         if (has_future) {
[09:31:26.944]                           ns <- base::getNamespace("future")
[09:31:26.944]                           version <- ns[[".package"]][["version"]]
[09:31:26.944]                           if (is.null(version)) 
[09:31:26.944]                             version <- utils::packageVersion("future")
[09:31:26.944]                         }
[09:31:26.944]                         else {
[09:31:26.944]                           version <- NULL
[09:31:26.944]                         }
[09:31:26.944]                         if (!has_future || version < "1.8.0") {
[09:31:26.944]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:26.944]                             "", base::R.version$version.string), 
[09:31:26.944]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:26.944]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:26.944]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:26.944]                               "release", "version")], collapse = " "), 
[09:31:26.944]                             hostname = base::Sys.info()[["nodename"]])
[09:31:26.944]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:26.944]                             info)
[09:31:26.944]                           info <- base::paste(info, collapse = "; ")
[09:31:26.944]                           if (!has_future) {
[09:31:26.944]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:26.944]                               info)
[09:31:26.944]                           }
[09:31:26.944]                           else {
[09:31:26.944]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:26.944]                               info, version)
[09:31:26.944]                           }
[09:31:26.944]                           base::stop(msg)
[09:31:26.944]                         }
[09:31:26.944]                       })
[09:31:26.944]                     }
[09:31:26.944]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:26.944]                     base::options(mc.cores = 1L)
[09:31:26.944]                   }
[09:31:26.944]                   ...future.strategy.old <- future::plan("list")
[09:31:26.944]                   options(future.plan = NULL)
[09:31:26.944]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:26.944]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:26.944]                 }
[09:31:26.944]                 ...future.workdir <- getwd()
[09:31:26.944]             }
[09:31:26.944]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:26.944]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:26.944]         }
[09:31:26.944]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:26.944]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:26.944]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:26.944]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[09:31:26.944]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:26.944]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:26.944]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:26.944]             base::names(...future.oldOptions))
[09:31:26.944]     }
[09:31:26.944]     if (FALSE) {
[09:31:26.944]     }
[09:31:26.944]     else {
[09:31:26.944]         if (TRUE) {
[09:31:26.944]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:26.944]                 open = "w")
[09:31:26.944]         }
[09:31:26.944]         else {
[09:31:26.944]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:26.944]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:26.944]         }
[09:31:26.944]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:26.944]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:26.944]             base::sink(type = "output", split = FALSE)
[09:31:26.944]             base::close(...future.stdout)
[09:31:26.944]         }, add = TRUE)
[09:31:26.944]     }
[09:31:26.944]     ...future.frame <- base::sys.nframe()
[09:31:26.944]     ...future.conditions <- base::list()
[09:31:26.944]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:26.944]     if (FALSE) {
[09:31:26.944]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:26.944]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:26.944]     }
[09:31:26.944]     ...future.result <- base::tryCatch({
[09:31:26.944]         base::withCallingHandlers({
[09:31:26.944]             ...future.value <- base::withVisible(base::local({
[09:31:26.944]                 ...future.makeSendCondition <- base::local({
[09:31:26.944]                   sendCondition <- NULL
[09:31:26.944]                   function(frame = 1L) {
[09:31:26.944]                     if (is.function(sendCondition)) 
[09:31:26.944]                       return(sendCondition)
[09:31:26.944]                     ns <- getNamespace("parallel")
[09:31:26.944]                     if (exists("sendData", mode = "function", 
[09:31:26.944]                       envir = ns)) {
[09:31:26.944]                       parallel_sendData <- get("sendData", mode = "function", 
[09:31:26.944]                         envir = ns)
[09:31:26.944]                       envir <- sys.frame(frame)
[09:31:26.944]                       master <- NULL
[09:31:26.944]                       while (!identical(envir, .GlobalEnv) && 
[09:31:26.944]                         !identical(envir, emptyenv())) {
[09:31:26.944]                         if (exists("master", mode = "list", envir = envir, 
[09:31:26.944]                           inherits = FALSE)) {
[09:31:26.944]                           master <- get("master", mode = "list", 
[09:31:26.944]                             envir = envir, inherits = FALSE)
[09:31:26.944]                           if (inherits(master, c("SOCKnode", 
[09:31:26.944]                             "SOCK0node"))) {
[09:31:26.944]                             sendCondition <<- function(cond) {
[09:31:26.944]                               data <- list(type = "VALUE", value = cond, 
[09:31:26.944]                                 success = TRUE)
[09:31:26.944]                               parallel_sendData(master, data)
[09:31:26.944]                             }
[09:31:26.944]                             return(sendCondition)
[09:31:26.944]                           }
[09:31:26.944]                         }
[09:31:26.944]                         frame <- frame + 1L
[09:31:26.944]                         envir <- sys.frame(frame)
[09:31:26.944]                       }
[09:31:26.944]                     }
[09:31:26.944]                     sendCondition <<- function(cond) NULL
[09:31:26.944]                   }
[09:31:26.944]                 })
[09:31:26.944]                 withCallingHandlers({
[09:31:26.944]                   NA
[09:31:26.944]                 }, immediateCondition = function(cond) {
[09:31:26.944]                   sendCondition <- ...future.makeSendCondition()
[09:31:26.944]                   sendCondition(cond)
[09:31:26.944]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:26.944]                   {
[09:31:26.944]                     inherits <- base::inherits
[09:31:26.944]                     invokeRestart <- base::invokeRestart
[09:31:26.944]                     is.null <- base::is.null
[09:31:26.944]                     muffled <- FALSE
[09:31:26.944]                     if (inherits(cond, "message")) {
[09:31:26.944]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:26.944]                       if (muffled) 
[09:31:26.944]                         invokeRestart("muffleMessage")
[09:31:26.944]                     }
[09:31:26.944]                     else if (inherits(cond, "warning")) {
[09:31:26.944]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:26.944]                       if (muffled) 
[09:31:26.944]                         invokeRestart("muffleWarning")
[09:31:26.944]                     }
[09:31:26.944]                     else if (inherits(cond, "condition")) {
[09:31:26.944]                       if (!is.null(pattern)) {
[09:31:26.944]                         computeRestarts <- base::computeRestarts
[09:31:26.944]                         grepl <- base::grepl
[09:31:26.944]                         restarts <- computeRestarts(cond)
[09:31:26.944]                         for (restart in restarts) {
[09:31:26.944]                           name <- restart$name
[09:31:26.944]                           if (is.null(name)) 
[09:31:26.944]                             next
[09:31:26.944]                           if (!grepl(pattern, name)) 
[09:31:26.944]                             next
[09:31:26.944]                           invokeRestart(restart)
[09:31:26.944]                           muffled <- TRUE
[09:31:26.944]                           break
[09:31:26.944]                         }
[09:31:26.944]                       }
[09:31:26.944]                     }
[09:31:26.944]                     invisible(muffled)
[09:31:26.944]                   }
[09:31:26.944]                   muffleCondition(cond)
[09:31:26.944]                 })
[09:31:26.944]             }))
[09:31:26.944]             future::FutureResult(value = ...future.value$value, 
[09:31:26.944]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:26.944]                   ...future.rng), globalenv = if (FALSE) 
[09:31:26.944]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:26.944]                     ...future.globalenv.names))
[09:31:26.944]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:26.944]         }, condition = base::local({
[09:31:26.944]             c <- base::c
[09:31:26.944]             inherits <- base::inherits
[09:31:26.944]             invokeRestart <- base::invokeRestart
[09:31:26.944]             length <- base::length
[09:31:26.944]             list <- base::list
[09:31:26.944]             seq.int <- base::seq.int
[09:31:26.944]             signalCondition <- base::signalCondition
[09:31:26.944]             sys.calls <- base::sys.calls
[09:31:26.944]             `[[` <- base::`[[`
[09:31:26.944]             `+` <- base::`+`
[09:31:26.944]             `<<-` <- base::`<<-`
[09:31:26.944]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:26.944]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:26.944]                   3L)]
[09:31:26.944]             }
[09:31:26.944]             function(cond) {
[09:31:26.944]                 is_error <- inherits(cond, "error")
[09:31:26.944]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:26.944]                   NULL)
[09:31:26.944]                 if (is_error) {
[09:31:26.944]                   sessionInformation <- function() {
[09:31:26.944]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:26.944]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:26.944]                       search = base::search(), system = base::Sys.info())
[09:31:26.944]                   }
[09:31:26.944]                   ...future.conditions[[length(...future.conditions) + 
[09:31:26.944]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:26.944]                     cond$call), session = sessionInformation(), 
[09:31:26.944]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:26.944]                   signalCondition(cond)
[09:31:26.944]                 }
[09:31:26.944]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:26.944]                 "immediateCondition"))) {
[09:31:26.944]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:26.944]                   ...future.conditions[[length(...future.conditions) + 
[09:31:26.944]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:26.944]                   if (TRUE && !signal) {
[09:31:26.944]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:26.944]                     {
[09:31:26.944]                       inherits <- base::inherits
[09:31:26.944]                       invokeRestart <- base::invokeRestart
[09:31:26.944]                       is.null <- base::is.null
[09:31:26.944]                       muffled <- FALSE
[09:31:26.944]                       if (inherits(cond, "message")) {
[09:31:26.944]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:26.944]                         if (muffled) 
[09:31:26.944]                           invokeRestart("muffleMessage")
[09:31:26.944]                       }
[09:31:26.944]                       else if (inherits(cond, "warning")) {
[09:31:26.944]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:26.944]                         if (muffled) 
[09:31:26.944]                           invokeRestart("muffleWarning")
[09:31:26.944]                       }
[09:31:26.944]                       else if (inherits(cond, "condition")) {
[09:31:26.944]                         if (!is.null(pattern)) {
[09:31:26.944]                           computeRestarts <- base::computeRestarts
[09:31:26.944]                           grepl <- base::grepl
[09:31:26.944]                           restarts <- computeRestarts(cond)
[09:31:26.944]                           for (restart in restarts) {
[09:31:26.944]                             name <- restart$name
[09:31:26.944]                             if (is.null(name)) 
[09:31:26.944]                               next
[09:31:26.944]                             if (!grepl(pattern, name)) 
[09:31:26.944]                               next
[09:31:26.944]                             invokeRestart(restart)
[09:31:26.944]                             muffled <- TRUE
[09:31:26.944]                             break
[09:31:26.944]                           }
[09:31:26.944]                         }
[09:31:26.944]                       }
[09:31:26.944]                       invisible(muffled)
[09:31:26.944]                     }
[09:31:26.944]                     muffleCondition(cond, pattern = "^muffle")
[09:31:26.944]                   }
[09:31:26.944]                 }
[09:31:26.944]                 else {
[09:31:26.944]                   if (TRUE) {
[09:31:26.944]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:26.944]                     {
[09:31:26.944]                       inherits <- base::inherits
[09:31:26.944]                       invokeRestart <- base::invokeRestart
[09:31:26.944]                       is.null <- base::is.null
[09:31:26.944]                       muffled <- FALSE
[09:31:26.944]                       if (inherits(cond, "message")) {
[09:31:26.944]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:26.944]                         if (muffled) 
[09:31:26.944]                           invokeRestart("muffleMessage")
[09:31:26.944]                       }
[09:31:26.944]                       else if (inherits(cond, "warning")) {
[09:31:26.944]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:26.944]                         if (muffled) 
[09:31:26.944]                           invokeRestart("muffleWarning")
[09:31:26.944]                       }
[09:31:26.944]                       else if (inherits(cond, "condition")) {
[09:31:26.944]                         if (!is.null(pattern)) {
[09:31:26.944]                           computeRestarts <- base::computeRestarts
[09:31:26.944]                           grepl <- base::grepl
[09:31:26.944]                           restarts <- computeRestarts(cond)
[09:31:26.944]                           for (restart in restarts) {
[09:31:26.944]                             name <- restart$name
[09:31:26.944]                             if (is.null(name)) 
[09:31:26.944]                               next
[09:31:26.944]                             if (!grepl(pattern, name)) 
[09:31:26.944]                               next
[09:31:26.944]                             invokeRestart(restart)
[09:31:26.944]                             muffled <- TRUE
[09:31:26.944]                             break
[09:31:26.944]                           }
[09:31:26.944]                         }
[09:31:26.944]                       }
[09:31:26.944]                       invisible(muffled)
[09:31:26.944]                     }
[09:31:26.944]                     muffleCondition(cond, pattern = "^muffle")
[09:31:26.944]                   }
[09:31:26.944]                 }
[09:31:26.944]             }
[09:31:26.944]         }))
[09:31:26.944]     }, error = function(ex) {
[09:31:26.944]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:26.944]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:26.944]                 ...future.rng), started = ...future.startTime, 
[09:31:26.944]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:26.944]             version = "1.8"), class = "FutureResult")
[09:31:26.944]     }, finally = {
[09:31:26.944]         if (!identical(...future.workdir, getwd())) 
[09:31:26.944]             setwd(...future.workdir)
[09:31:26.944]         {
[09:31:26.944]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:26.944]                 ...future.oldOptions$nwarnings <- NULL
[09:31:26.944]             }
[09:31:26.944]             base::options(...future.oldOptions)
[09:31:26.944]             if (.Platform$OS.type == "windows") {
[09:31:26.944]                 old_names <- names(...future.oldEnvVars)
[09:31:26.944]                 envs <- base::Sys.getenv()
[09:31:26.944]                 names <- names(envs)
[09:31:26.944]                 common <- intersect(names, old_names)
[09:31:26.944]                 added <- setdiff(names, old_names)
[09:31:26.944]                 removed <- setdiff(old_names, names)
[09:31:26.944]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:26.944]                   envs[common]]
[09:31:26.944]                 NAMES <- toupper(changed)
[09:31:26.944]                 args <- list()
[09:31:26.944]                 for (kk in seq_along(NAMES)) {
[09:31:26.944]                   name <- changed[[kk]]
[09:31:26.944]                   NAME <- NAMES[[kk]]
[09:31:26.944]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:26.944]                     next
[09:31:26.944]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:26.944]                 }
[09:31:26.944]                 NAMES <- toupper(added)
[09:31:26.944]                 for (kk in seq_along(NAMES)) {
[09:31:26.944]                   name <- added[[kk]]
[09:31:26.944]                   NAME <- NAMES[[kk]]
[09:31:26.944]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:26.944]                     next
[09:31:26.944]                   args[[name]] <- ""
[09:31:26.944]                 }
[09:31:26.944]                 NAMES <- toupper(removed)
[09:31:26.944]                 for (kk in seq_along(NAMES)) {
[09:31:26.944]                   name <- removed[[kk]]
[09:31:26.944]                   NAME <- NAMES[[kk]]
[09:31:26.944]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:26.944]                     next
[09:31:26.944]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:26.944]                 }
[09:31:26.944]                 if (length(args) > 0) 
[09:31:26.944]                   base::do.call(base::Sys.setenv, args = args)
[09:31:26.944]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:26.944]             }
[09:31:26.944]             else {
[09:31:26.944]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:26.944]             }
[09:31:26.944]             {
[09:31:26.944]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:26.944]                   0L) {
[09:31:26.944]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:26.944]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:26.944]                   base::options(opts)
[09:31:26.944]                 }
[09:31:26.944]                 {
[09:31:26.944]                   {
[09:31:26.944]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:26.944]                     NULL
[09:31:26.944]                   }
[09:31:26.944]                   options(future.plan = NULL)
[09:31:26.944]                   if (is.na(NA_character_)) 
[09:31:26.944]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:26.944]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:26.944]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:26.944]                     .init = FALSE)
[09:31:26.944]                 }
[09:31:26.944]             }
[09:31:26.944]         }
[09:31:26.944]     })
[09:31:26.944]     if (TRUE) {
[09:31:26.944]         base::sink(type = "output", split = FALSE)
[09:31:26.944]         if (TRUE) {
[09:31:26.944]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:26.944]         }
[09:31:26.944]         else {
[09:31:26.944]             ...future.result["stdout"] <- base::list(NULL)
[09:31:26.944]         }
[09:31:26.944]         base::close(...future.stdout)
[09:31:26.944]         ...future.stdout <- NULL
[09:31:26.944]     }
[09:31:26.944]     ...future.result$conditions <- ...future.conditions
[09:31:26.944]     ...future.result$finished <- base::Sys.time()
[09:31:26.944]     ...future.result
[09:31:26.944] }
[09:31:26.995] MultisessionFuture started
[09:31:26.995] result() for ClusterFuture ...
[09:31:26.996] receiveMessageFromWorker() for ClusterFuture ...
[09:31:26.996] - Validating connection of MultisessionFuture
[09:31:27.027] - received message: FutureResult
[09:31:27.027] - Received FutureResult
[09:31:27.029] - Erased future from FutureRegistry
[09:31:27.030] result() for ClusterFuture ...
[09:31:27.030] - result already collected: FutureResult
[09:31:27.030] result() for ClusterFuture ... done
[09:31:27.030] receiveMessageFromWorker() for ClusterFuture ... done
[09:31:27.030] result() for ClusterFuture ... done
[09:31:27.030] result() for ClusterFuture ...
[09:31:27.030] - result already collected: FutureResult
[09:31:27.030] result() for ClusterFuture ... done
[09:31:27.031] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[09:31:27.031] plan(): nbrOfWorkers() = 2
> 
> env <- new.env()
> 
> ## Create future #1 (consumes background process #1)
> env$a %<-% { 5 }
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[09:31:27.032] getGlobalsAndPackages() ...
[09:31:27.033] Searching for globals...
[09:31:27.036] - globals found: [1] ‘{’
[09:31:27.036] Searching for globals ... DONE
[09:31:27.037] Resolving globals: TRUE
[09:31:27.037] Resolving any globals that are futures ...
[09:31:27.037] - globals: [1] ‘{’
[09:31:27.037] Resolving any globals that are futures ... DONE
[09:31:27.037] 
[09:31:27.038] 
[09:31:27.038] getGlobalsAndPackages() ... DONE
[09:31:27.038] run() for ‘Future’ ...
[09:31:27.038] - state: ‘created’
[09:31:27.038] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:31:27.049] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:27.049] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:31:27.050]   - Field: ‘node’
[09:31:27.050]   - Field: ‘label’
[09:31:27.050]   - Field: ‘local’
[09:31:27.050]   - Field: ‘owner’
[09:31:27.050]   - Field: ‘envir’
[09:31:27.050]   - Field: ‘workers’
[09:31:27.050]   - Field: ‘packages’
[09:31:27.050]   - Field: ‘gc’
[09:31:27.050]   - Field: ‘conditions’
[09:31:27.050]   - Field: ‘persistent’
[09:31:27.051]   - Field: ‘expr’
[09:31:27.051]   - Field: ‘uuid’
[09:31:27.051]   - Field: ‘seed’
[09:31:27.051]   - Field: ‘version’
[09:31:27.051]   - Field: ‘result’
[09:31:27.051]   - Field: ‘asynchronous’
[09:31:27.051]   - Field: ‘calls’
[09:31:27.051]   - Field: ‘globals’
[09:31:27.051]   - Field: ‘stdout’
[09:31:27.052]   - Field: ‘earlySignal’
[09:31:27.052]   - Field: ‘lazy’
[09:31:27.052]   - Field: ‘state’
[09:31:27.052] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:31:27.052] - Launch lazy future ...
[09:31:27.052] Packages needed by the future expression (n = 0): <none>
[09:31:27.053] Packages needed by future strategies (n = 0): <none>
[09:31:27.053] {
[09:31:27.053]     {
[09:31:27.053]         {
[09:31:27.053]             ...future.startTime <- base::Sys.time()
[09:31:27.053]             {
[09:31:27.053]                 {
[09:31:27.053]                   {
[09:31:27.053]                     {
[09:31:27.053]                       base::local({
[09:31:27.053]                         has_future <- base::requireNamespace("future", 
[09:31:27.053]                           quietly = TRUE)
[09:31:27.053]                         if (has_future) {
[09:31:27.053]                           ns <- base::getNamespace("future")
[09:31:27.053]                           version <- ns[[".package"]][["version"]]
[09:31:27.053]                           if (is.null(version)) 
[09:31:27.053]                             version <- utils::packageVersion("future")
[09:31:27.053]                         }
[09:31:27.053]                         else {
[09:31:27.053]                           version <- NULL
[09:31:27.053]                         }
[09:31:27.053]                         if (!has_future || version < "1.8.0") {
[09:31:27.053]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:27.053]                             "", base::R.version$version.string), 
[09:31:27.053]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:27.053]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:27.053]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:27.053]                               "release", "version")], collapse = " "), 
[09:31:27.053]                             hostname = base::Sys.info()[["nodename"]])
[09:31:27.053]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:27.053]                             info)
[09:31:27.053]                           info <- base::paste(info, collapse = "; ")
[09:31:27.053]                           if (!has_future) {
[09:31:27.053]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:27.053]                               info)
[09:31:27.053]                           }
[09:31:27.053]                           else {
[09:31:27.053]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:27.053]                               info, version)
[09:31:27.053]                           }
[09:31:27.053]                           base::stop(msg)
[09:31:27.053]                         }
[09:31:27.053]                       })
[09:31:27.053]                     }
[09:31:27.053]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:27.053]                     base::options(mc.cores = 1L)
[09:31:27.053]                   }
[09:31:27.053]                   ...future.strategy.old <- future::plan("list")
[09:31:27.053]                   options(future.plan = NULL)
[09:31:27.053]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:27.053]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:27.053]                 }
[09:31:27.053]                 ...future.workdir <- getwd()
[09:31:27.053]             }
[09:31:27.053]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:27.053]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:27.053]         }
[09:31:27.053]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:27.053]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:27.053]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:27.053]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[09:31:27.053]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:27.053]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:27.053]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:27.053]             base::names(...future.oldOptions))
[09:31:27.053]     }
[09:31:27.053]     if (FALSE) {
[09:31:27.053]     }
[09:31:27.053]     else {
[09:31:27.053]         if (TRUE) {
[09:31:27.053]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:27.053]                 open = "w")
[09:31:27.053]         }
[09:31:27.053]         else {
[09:31:27.053]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:27.053]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:27.053]         }
[09:31:27.053]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:27.053]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:27.053]             base::sink(type = "output", split = FALSE)
[09:31:27.053]             base::close(...future.stdout)
[09:31:27.053]         }, add = TRUE)
[09:31:27.053]     }
[09:31:27.053]     ...future.frame <- base::sys.nframe()
[09:31:27.053]     ...future.conditions <- base::list()
[09:31:27.053]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:27.053]     if (FALSE) {
[09:31:27.053]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:27.053]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:27.053]     }
[09:31:27.053]     ...future.result <- base::tryCatch({
[09:31:27.053]         base::withCallingHandlers({
[09:31:27.053]             ...future.value <- base::withVisible(base::local({
[09:31:27.053]                 ...future.makeSendCondition <- base::local({
[09:31:27.053]                   sendCondition <- NULL
[09:31:27.053]                   function(frame = 1L) {
[09:31:27.053]                     if (is.function(sendCondition)) 
[09:31:27.053]                       return(sendCondition)
[09:31:27.053]                     ns <- getNamespace("parallel")
[09:31:27.053]                     if (exists("sendData", mode = "function", 
[09:31:27.053]                       envir = ns)) {
[09:31:27.053]                       parallel_sendData <- get("sendData", mode = "function", 
[09:31:27.053]                         envir = ns)
[09:31:27.053]                       envir <- sys.frame(frame)
[09:31:27.053]                       master <- NULL
[09:31:27.053]                       while (!identical(envir, .GlobalEnv) && 
[09:31:27.053]                         !identical(envir, emptyenv())) {
[09:31:27.053]                         if (exists("master", mode = "list", envir = envir, 
[09:31:27.053]                           inherits = FALSE)) {
[09:31:27.053]                           master <- get("master", mode = "list", 
[09:31:27.053]                             envir = envir, inherits = FALSE)
[09:31:27.053]                           if (inherits(master, c("SOCKnode", 
[09:31:27.053]                             "SOCK0node"))) {
[09:31:27.053]                             sendCondition <<- function(cond) {
[09:31:27.053]                               data <- list(type = "VALUE", value = cond, 
[09:31:27.053]                                 success = TRUE)
[09:31:27.053]                               parallel_sendData(master, data)
[09:31:27.053]                             }
[09:31:27.053]                             return(sendCondition)
[09:31:27.053]                           }
[09:31:27.053]                         }
[09:31:27.053]                         frame <- frame + 1L
[09:31:27.053]                         envir <- sys.frame(frame)
[09:31:27.053]                       }
[09:31:27.053]                     }
[09:31:27.053]                     sendCondition <<- function(cond) NULL
[09:31:27.053]                   }
[09:31:27.053]                 })
[09:31:27.053]                 withCallingHandlers({
[09:31:27.053]                   {
[09:31:27.053]                     5
[09:31:27.053]                   }
[09:31:27.053]                 }, immediateCondition = function(cond) {
[09:31:27.053]                   sendCondition <- ...future.makeSendCondition()
[09:31:27.053]                   sendCondition(cond)
[09:31:27.053]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:27.053]                   {
[09:31:27.053]                     inherits <- base::inherits
[09:31:27.053]                     invokeRestart <- base::invokeRestart
[09:31:27.053]                     is.null <- base::is.null
[09:31:27.053]                     muffled <- FALSE
[09:31:27.053]                     if (inherits(cond, "message")) {
[09:31:27.053]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:27.053]                       if (muffled) 
[09:31:27.053]                         invokeRestart("muffleMessage")
[09:31:27.053]                     }
[09:31:27.053]                     else if (inherits(cond, "warning")) {
[09:31:27.053]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:27.053]                       if (muffled) 
[09:31:27.053]                         invokeRestart("muffleWarning")
[09:31:27.053]                     }
[09:31:27.053]                     else if (inherits(cond, "condition")) {
[09:31:27.053]                       if (!is.null(pattern)) {
[09:31:27.053]                         computeRestarts <- base::computeRestarts
[09:31:27.053]                         grepl <- base::grepl
[09:31:27.053]                         restarts <- computeRestarts(cond)
[09:31:27.053]                         for (restart in restarts) {
[09:31:27.053]                           name <- restart$name
[09:31:27.053]                           if (is.null(name)) 
[09:31:27.053]                             next
[09:31:27.053]                           if (!grepl(pattern, name)) 
[09:31:27.053]                             next
[09:31:27.053]                           invokeRestart(restart)
[09:31:27.053]                           muffled <- TRUE
[09:31:27.053]                           break
[09:31:27.053]                         }
[09:31:27.053]                       }
[09:31:27.053]                     }
[09:31:27.053]                     invisible(muffled)
[09:31:27.053]                   }
[09:31:27.053]                   muffleCondition(cond)
[09:31:27.053]                 })
[09:31:27.053]             }))
[09:31:27.053]             future::FutureResult(value = ...future.value$value, 
[09:31:27.053]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:27.053]                   ...future.rng), globalenv = if (FALSE) 
[09:31:27.053]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:27.053]                     ...future.globalenv.names))
[09:31:27.053]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:27.053]         }, condition = base::local({
[09:31:27.053]             c <- base::c
[09:31:27.053]             inherits <- base::inherits
[09:31:27.053]             invokeRestart <- base::invokeRestart
[09:31:27.053]             length <- base::length
[09:31:27.053]             list <- base::list
[09:31:27.053]             seq.int <- base::seq.int
[09:31:27.053]             signalCondition <- base::signalCondition
[09:31:27.053]             sys.calls <- base::sys.calls
[09:31:27.053]             `[[` <- base::`[[`
[09:31:27.053]             `+` <- base::`+`
[09:31:27.053]             `<<-` <- base::`<<-`
[09:31:27.053]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:27.053]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:27.053]                   3L)]
[09:31:27.053]             }
[09:31:27.053]             function(cond) {
[09:31:27.053]                 is_error <- inherits(cond, "error")
[09:31:27.053]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:27.053]                   NULL)
[09:31:27.053]                 if (is_error) {
[09:31:27.053]                   sessionInformation <- function() {
[09:31:27.053]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:27.053]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:27.053]                       search = base::search(), system = base::Sys.info())
[09:31:27.053]                   }
[09:31:27.053]                   ...future.conditions[[length(...future.conditions) + 
[09:31:27.053]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:27.053]                     cond$call), session = sessionInformation(), 
[09:31:27.053]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:27.053]                   signalCondition(cond)
[09:31:27.053]                 }
[09:31:27.053]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:27.053]                 "immediateCondition"))) {
[09:31:27.053]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:27.053]                   ...future.conditions[[length(...future.conditions) + 
[09:31:27.053]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:27.053]                   if (TRUE && !signal) {
[09:31:27.053]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:27.053]                     {
[09:31:27.053]                       inherits <- base::inherits
[09:31:27.053]                       invokeRestart <- base::invokeRestart
[09:31:27.053]                       is.null <- base::is.null
[09:31:27.053]                       muffled <- FALSE
[09:31:27.053]                       if (inherits(cond, "message")) {
[09:31:27.053]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:27.053]                         if (muffled) 
[09:31:27.053]                           invokeRestart("muffleMessage")
[09:31:27.053]                       }
[09:31:27.053]                       else if (inherits(cond, "warning")) {
[09:31:27.053]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:27.053]                         if (muffled) 
[09:31:27.053]                           invokeRestart("muffleWarning")
[09:31:27.053]                       }
[09:31:27.053]                       else if (inherits(cond, "condition")) {
[09:31:27.053]                         if (!is.null(pattern)) {
[09:31:27.053]                           computeRestarts <- base::computeRestarts
[09:31:27.053]                           grepl <- base::grepl
[09:31:27.053]                           restarts <- computeRestarts(cond)
[09:31:27.053]                           for (restart in restarts) {
[09:31:27.053]                             name <- restart$name
[09:31:27.053]                             if (is.null(name)) 
[09:31:27.053]                               next
[09:31:27.053]                             if (!grepl(pattern, name)) 
[09:31:27.053]                               next
[09:31:27.053]                             invokeRestart(restart)
[09:31:27.053]                             muffled <- TRUE
[09:31:27.053]                             break
[09:31:27.053]                           }
[09:31:27.053]                         }
[09:31:27.053]                       }
[09:31:27.053]                       invisible(muffled)
[09:31:27.053]                     }
[09:31:27.053]                     muffleCondition(cond, pattern = "^muffle")
[09:31:27.053]                   }
[09:31:27.053]                 }
[09:31:27.053]                 else {
[09:31:27.053]                   if (TRUE) {
[09:31:27.053]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:27.053]                     {
[09:31:27.053]                       inherits <- base::inherits
[09:31:27.053]                       invokeRestart <- base::invokeRestart
[09:31:27.053]                       is.null <- base::is.null
[09:31:27.053]                       muffled <- FALSE
[09:31:27.053]                       if (inherits(cond, "message")) {
[09:31:27.053]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:27.053]                         if (muffled) 
[09:31:27.053]                           invokeRestart("muffleMessage")
[09:31:27.053]                       }
[09:31:27.053]                       else if (inherits(cond, "warning")) {
[09:31:27.053]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:27.053]                         if (muffled) 
[09:31:27.053]                           invokeRestart("muffleWarning")
[09:31:27.053]                       }
[09:31:27.053]                       else if (inherits(cond, "condition")) {
[09:31:27.053]                         if (!is.null(pattern)) {
[09:31:27.053]                           computeRestarts <- base::computeRestarts
[09:31:27.053]                           grepl <- base::grepl
[09:31:27.053]                           restarts <- computeRestarts(cond)
[09:31:27.053]                           for (restart in restarts) {
[09:31:27.053]                             name <- restart$name
[09:31:27.053]                             if (is.null(name)) 
[09:31:27.053]                               next
[09:31:27.053]                             if (!grepl(pattern, name)) 
[09:31:27.053]                               next
[09:31:27.053]                             invokeRestart(restart)
[09:31:27.053]                             muffled <- TRUE
[09:31:27.053]                             break
[09:31:27.053]                           }
[09:31:27.053]                         }
[09:31:27.053]                       }
[09:31:27.053]                       invisible(muffled)
[09:31:27.053]                     }
[09:31:27.053]                     muffleCondition(cond, pattern = "^muffle")
[09:31:27.053]                   }
[09:31:27.053]                 }
[09:31:27.053]             }
[09:31:27.053]         }))
[09:31:27.053]     }, error = function(ex) {
[09:31:27.053]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:27.053]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:27.053]                 ...future.rng), started = ...future.startTime, 
[09:31:27.053]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:27.053]             version = "1.8"), class = "FutureResult")
[09:31:27.053]     }, finally = {
[09:31:27.053]         if (!identical(...future.workdir, getwd())) 
[09:31:27.053]             setwd(...future.workdir)
[09:31:27.053]         {
[09:31:27.053]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:27.053]                 ...future.oldOptions$nwarnings <- NULL
[09:31:27.053]             }
[09:31:27.053]             base::options(...future.oldOptions)
[09:31:27.053]             if (.Platform$OS.type == "windows") {
[09:31:27.053]                 old_names <- names(...future.oldEnvVars)
[09:31:27.053]                 envs <- base::Sys.getenv()
[09:31:27.053]                 names <- names(envs)
[09:31:27.053]                 common <- intersect(names, old_names)
[09:31:27.053]                 added <- setdiff(names, old_names)
[09:31:27.053]                 removed <- setdiff(old_names, names)
[09:31:27.053]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:27.053]                   envs[common]]
[09:31:27.053]                 NAMES <- toupper(changed)
[09:31:27.053]                 args <- list()
[09:31:27.053]                 for (kk in seq_along(NAMES)) {
[09:31:27.053]                   name <- changed[[kk]]
[09:31:27.053]                   NAME <- NAMES[[kk]]
[09:31:27.053]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:27.053]                     next
[09:31:27.053]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:27.053]                 }
[09:31:27.053]                 NAMES <- toupper(added)
[09:31:27.053]                 for (kk in seq_along(NAMES)) {
[09:31:27.053]                   name <- added[[kk]]
[09:31:27.053]                   NAME <- NAMES[[kk]]
[09:31:27.053]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:27.053]                     next
[09:31:27.053]                   args[[name]] <- ""
[09:31:27.053]                 }
[09:31:27.053]                 NAMES <- toupper(removed)
[09:31:27.053]                 for (kk in seq_along(NAMES)) {
[09:31:27.053]                   name <- removed[[kk]]
[09:31:27.053]                   NAME <- NAMES[[kk]]
[09:31:27.053]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:27.053]                     next
[09:31:27.053]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:27.053]                 }
[09:31:27.053]                 if (length(args) > 0) 
[09:31:27.053]                   base::do.call(base::Sys.setenv, args = args)
[09:31:27.053]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:27.053]             }
[09:31:27.053]             else {
[09:31:27.053]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:27.053]             }
[09:31:27.053]             {
[09:31:27.053]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:27.053]                   0L) {
[09:31:27.053]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:27.053]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:27.053]                   base::options(opts)
[09:31:27.053]                 }
[09:31:27.053]                 {
[09:31:27.053]                   {
[09:31:27.053]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:27.053]                     NULL
[09:31:27.053]                   }
[09:31:27.053]                   options(future.plan = NULL)
[09:31:27.053]                   if (is.na(NA_character_)) 
[09:31:27.053]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:27.053]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:27.053]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:27.053]                     .init = FALSE)
[09:31:27.053]                 }
[09:31:27.053]             }
[09:31:27.053]         }
[09:31:27.053]     })
[09:31:27.053]     if (TRUE) {
[09:31:27.053]         base::sink(type = "output", split = FALSE)
[09:31:27.053]         if (TRUE) {
[09:31:27.053]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:27.053]         }
[09:31:27.053]         else {
[09:31:27.053]             ...future.result["stdout"] <- base::list(NULL)
[09:31:27.053]         }
[09:31:27.053]         base::close(...future.stdout)
[09:31:27.053]         ...future.stdout <- NULL
[09:31:27.053]     }
[09:31:27.053]     ...future.result$conditions <- ...future.conditions
[09:31:27.053]     ...future.result$finished <- base::Sys.time()
[09:31:27.053]     ...future.result
[09:31:27.053] }
[09:31:27.056] MultisessionFuture started
[09:31:27.057] - Launch lazy future ... done
[09:31:27.057] run() for ‘MultisessionFuture’ ... done
> 
> ## Create future #2 (consumes background process #2)
> b %<-% { "a" }
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[09:31:27.057] getGlobalsAndPackages() ...
[09:31:27.058] Searching for globals...
[09:31:27.059] - globals found: [1] ‘{’
[09:31:27.059] Searching for globals ... DONE
[09:31:27.059] Resolving globals: TRUE
[09:31:27.059] Resolving any globals that are futures ...
[09:31:27.059] - globals: [1] ‘{’
[09:31:27.059] Resolving any globals that are futures ... DONE
[09:31:27.060] 
[09:31:27.060] 
[09:31:27.060] getGlobalsAndPackages() ... DONE
[09:31:27.060] run() for ‘Future’ ...
[09:31:27.060] - state: ‘created’
[09:31:27.060] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:31:27.071] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:27.071] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:31:27.071]   - Field: ‘node’
[09:31:27.071]   - Field: ‘label’
[09:31:27.072]   - Field: ‘local’
[09:31:27.072]   - Field: ‘owner’
[09:31:27.072]   - Field: ‘envir’
[09:31:27.072]   - Field: ‘workers’
[09:31:27.072]   - Field: ‘packages’
[09:31:27.072]   - Field: ‘gc’
[09:31:27.072]   - Field: ‘conditions’
[09:31:27.072]   - Field: ‘persistent’
[09:31:27.072]   - Field: ‘expr’
[09:31:27.072]   - Field: ‘uuid’
[09:31:27.073]   - Field: ‘seed’
[09:31:27.073]   - Field: ‘version’
[09:31:27.073]   - Field: ‘result’
[09:31:27.073]   - Field: ‘asynchronous’
[09:31:27.073]   - Field: ‘calls’
[09:31:27.073]   - Field: ‘globals’
[09:31:27.073]   - Field: ‘stdout’
[09:31:27.073]   - Field: ‘earlySignal’
[09:31:27.073]   - Field: ‘lazy’
[09:31:27.074]   - Field: ‘state’
[09:31:27.074] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:31:27.074] - Launch lazy future ...
[09:31:27.074] Packages needed by the future expression (n = 0): <none>
[09:31:27.074] Packages needed by future strategies (n = 0): <none>
[09:31:27.075] {
[09:31:27.075]     {
[09:31:27.075]         {
[09:31:27.075]             ...future.startTime <- base::Sys.time()
[09:31:27.075]             {
[09:31:27.075]                 {
[09:31:27.075]                   {
[09:31:27.075]                     {
[09:31:27.075]                       base::local({
[09:31:27.075]                         has_future <- base::requireNamespace("future", 
[09:31:27.075]                           quietly = TRUE)
[09:31:27.075]                         if (has_future) {
[09:31:27.075]                           ns <- base::getNamespace("future")
[09:31:27.075]                           version <- ns[[".package"]][["version"]]
[09:31:27.075]                           if (is.null(version)) 
[09:31:27.075]                             version <- utils::packageVersion("future")
[09:31:27.075]                         }
[09:31:27.075]                         else {
[09:31:27.075]                           version <- NULL
[09:31:27.075]                         }
[09:31:27.075]                         if (!has_future || version < "1.8.0") {
[09:31:27.075]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:27.075]                             "", base::R.version$version.string), 
[09:31:27.075]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:27.075]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:27.075]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:27.075]                               "release", "version")], collapse = " "), 
[09:31:27.075]                             hostname = base::Sys.info()[["nodename"]])
[09:31:27.075]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:27.075]                             info)
[09:31:27.075]                           info <- base::paste(info, collapse = "; ")
[09:31:27.075]                           if (!has_future) {
[09:31:27.075]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:27.075]                               info)
[09:31:27.075]                           }
[09:31:27.075]                           else {
[09:31:27.075]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:27.075]                               info, version)
[09:31:27.075]                           }
[09:31:27.075]                           base::stop(msg)
[09:31:27.075]                         }
[09:31:27.075]                       })
[09:31:27.075]                     }
[09:31:27.075]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:27.075]                     base::options(mc.cores = 1L)
[09:31:27.075]                   }
[09:31:27.075]                   ...future.strategy.old <- future::plan("list")
[09:31:27.075]                   options(future.plan = NULL)
[09:31:27.075]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:27.075]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:27.075]                 }
[09:31:27.075]                 ...future.workdir <- getwd()
[09:31:27.075]             }
[09:31:27.075]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:27.075]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:27.075]         }
[09:31:27.075]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:27.075]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:27.075]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:27.075]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[09:31:27.075]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:27.075]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:27.075]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:27.075]             base::names(...future.oldOptions))
[09:31:27.075]     }
[09:31:27.075]     if (FALSE) {
[09:31:27.075]     }
[09:31:27.075]     else {
[09:31:27.075]         if (TRUE) {
[09:31:27.075]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:27.075]                 open = "w")
[09:31:27.075]         }
[09:31:27.075]         else {
[09:31:27.075]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:27.075]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:27.075]         }
[09:31:27.075]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:27.075]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:27.075]             base::sink(type = "output", split = FALSE)
[09:31:27.075]             base::close(...future.stdout)
[09:31:27.075]         }, add = TRUE)
[09:31:27.075]     }
[09:31:27.075]     ...future.frame <- base::sys.nframe()
[09:31:27.075]     ...future.conditions <- base::list()
[09:31:27.075]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:27.075]     if (FALSE) {
[09:31:27.075]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:27.075]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:27.075]     }
[09:31:27.075]     ...future.result <- base::tryCatch({
[09:31:27.075]         base::withCallingHandlers({
[09:31:27.075]             ...future.value <- base::withVisible(base::local({
[09:31:27.075]                 ...future.makeSendCondition <- base::local({
[09:31:27.075]                   sendCondition <- NULL
[09:31:27.075]                   function(frame = 1L) {
[09:31:27.075]                     if (is.function(sendCondition)) 
[09:31:27.075]                       return(sendCondition)
[09:31:27.075]                     ns <- getNamespace("parallel")
[09:31:27.075]                     if (exists("sendData", mode = "function", 
[09:31:27.075]                       envir = ns)) {
[09:31:27.075]                       parallel_sendData <- get("sendData", mode = "function", 
[09:31:27.075]                         envir = ns)
[09:31:27.075]                       envir <- sys.frame(frame)
[09:31:27.075]                       master <- NULL
[09:31:27.075]                       while (!identical(envir, .GlobalEnv) && 
[09:31:27.075]                         !identical(envir, emptyenv())) {
[09:31:27.075]                         if (exists("master", mode = "list", envir = envir, 
[09:31:27.075]                           inherits = FALSE)) {
[09:31:27.075]                           master <- get("master", mode = "list", 
[09:31:27.075]                             envir = envir, inherits = FALSE)
[09:31:27.075]                           if (inherits(master, c("SOCKnode", 
[09:31:27.075]                             "SOCK0node"))) {
[09:31:27.075]                             sendCondition <<- function(cond) {
[09:31:27.075]                               data <- list(type = "VALUE", value = cond, 
[09:31:27.075]                                 success = TRUE)
[09:31:27.075]                               parallel_sendData(master, data)
[09:31:27.075]                             }
[09:31:27.075]                             return(sendCondition)
[09:31:27.075]                           }
[09:31:27.075]                         }
[09:31:27.075]                         frame <- frame + 1L
[09:31:27.075]                         envir <- sys.frame(frame)
[09:31:27.075]                       }
[09:31:27.075]                     }
[09:31:27.075]                     sendCondition <<- function(cond) NULL
[09:31:27.075]                   }
[09:31:27.075]                 })
[09:31:27.075]                 withCallingHandlers({
[09:31:27.075]                   {
[09:31:27.075]                     "a"
[09:31:27.075]                   }
[09:31:27.075]                 }, immediateCondition = function(cond) {
[09:31:27.075]                   sendCondition <- ...future.makeSendCondition()
[09:31:27.075]                   sendCondition(cond)
[09:31:27.075]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:27.075]                   {
[09:31:27.075]                     inherits <- base::inherits
[09:31:27.075]                     invokeRestart <- base::invokeRestart
[09:31:27.075]                     is.null <- base::is.null
[09:31:27.075]                     muffled <- FALSE
[09:31:27.075]                     if (inherits(cond, "message")) {
[09:31:27.075]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:27.075]                       if (muffled) 
[09:31:27.075]                         invokeRestart("muffleMessage")
[09:31:27.075]                     }
[09:31:27.075]                     else if (inherits(cond, "warning")) {
[09:31:27.075]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:27.075]                       if (muffled) 
[09:31:27.075]                         invokeRestart("muffleWarning")
[09:31:27.075]                     }
[09:31:27.075]                     else if (inherits(cond, "condition")) {
[09:31:27.075]                       if (!is.null(pattern)) {
[09:31:27.075]                         computeRestarts <- base::computeRestarts
[09:31:27.075]                         grepl <- base::grepl
[09:31:27.075]                         restarts <- computeRestarts(cond)
[09:31:27.075]                         for (restart in restarts) {
[09:31:27.075]                           name <- restart$name
[09:31:27.075]                           if (is.null(name)) 
[09:31:27.075]                             next
[09:31:27.075]                           if (!grepl(pattern, name)) 
[09:31:27.075]                             next
[09:31:27.075]                           invokeRestart(restart)
[09:31:27.075]                           muffled <- TRUE
[09:31:27.075]                           break
[09:31:27.075]                         }
[09:31:27.075]                       }
[09:31:27.075]                     }
[09:31:27.075]                     invisible(muffled)
[09:31:27.075]                   }
[09:31:27.075]                   muffleCondition(cond)
[09:31:27.075]                 })
[09:31:27.075]             }))
[09:31:27.075]             future::FutureResult(value = ...future.value$value, 
[09:31:27.075]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:27.075]                   ...future.rng), globalenv = if (FALSE) 
[09:31:27.075]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:27.075]                     ...future.globalenv.names))
[09:31:27.075]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:27.075]         }, condition = base::local({
[09:31:27.075]             c <- base::c
[09:31:27.075]             inherits <- base::inherits
[09:31:27.075]             invokeRestart <- base::invokeRestart
[09:31:27.075]             length <- base::length
[09:31:27.075]             list <- base::list
[09:31:27.075]             seq.int <- base::seq.int
[09:31:27.075]             signalCondition <- base::signalCondition
[09:31:27.075]             sys.calls <- base::sys.calls
[09:31:27.075]             `[[` <- base::`[[`
[09:31:27.075]             `+` <- base::`+`
[09:31:27.075]             `<<-` <- base::`<<-`
[09:31:27.075]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:27.075]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:27.075]                   3L)]
[09:31:27.075]             }
[09:31:27.075]             function(cond) {
[09:31:27.075]                 is_error <- inherits(cond, "error")
[09:31:27.075]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:27.075]                   NULL)
[09:31:27.075]                 if (is_error) {
[09:31:27.075]                   sessionInformation <- function() {
[09:31:27.075]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:27.075]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:27.075]                       search = base::search(), system = base::Sys.info())
[09:31:27.075]                   }
[09:31:27.075]                   ...future.conditions[[length(...future.conditions) + 
[09:31:27.075]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:27.075]                     cond$call), session = sessionInformation(), 
[09:31:27.075]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:27.075]                   signalCondition(cond)
[09:31:27.075]                 }
[09:31:27.075]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:27.075]                 "immediateCondition"))) {
[09:31:27.075]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:27.075]                   ...future.conditions[[length(...future.conditions) + 
[09:31:27.075]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:27.075]                   if (TRUE && !signal) {
[09:31:27.075]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:27.075]                     {
[09:31:27.075]                       inherits <- base::inherits
[09:31:27.075]                       invokeRestart <- base::invokeRestart
[09:31:27.075]                       is.null <- base::is.null
[09:31:27.075]                       muffled <- FALSE
[09:31:27.075]                       if (inherits(cond, "message")) {
[09:31:27.075]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:27.075]                         if (muffled) 
[09:31:27.075]                           invokeRestart("muffleMessage")
[09:31:27.075]                       }
[09:31:27.075]                       else if (inherits(cond, "warning")) {
[09:31:27.075]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:27.075]                         if (muffled) 
[09:31:27.075]                           invokeRestart("muffleWarning")
[09:31:27.075]                       }
[09:31:27.075]                       else if (inherits(cond, "condition")) {
[09:31:27.075]                         if (!is.null(pattern)) {
[09:31:27.075]                           computeRestarts <- base::computeRestarts
[09:31:27.075]                           grepl <- base::grepl
[09:31:27.075]                           restarts <- computeRestarts(cond)
[09:31:27.075]                           for (restart in restarts) {
[09:31:27.075]                             name <- restart$name
[09:31:27.075]                             if (is.null(name)) 
[09:31:27.075]                               next
[09:31:27.075]                             if (!grepl(pattern, name)) 
[09:31:27.075]                               next
[09:31:27.075]                             invokeRestart(restart)
[09:31:27.075]                             muffled <- TRUE
[09:31:27.075]                             break
[09:31:27.075]                           }
[09:31:27.075]                         }
[09:31:27.075]                       }
[09:31:27.075]                       invisible(muffled)
[09:31:27.075]                     }
[09:31:27.075]                     muffleCondition(cond, pattern = "^muffle")
[09:31:27.075]                   }
[09:31:27.075]                 }
[09:31:27.075]                 else {
[09:31:27.075]                   if (TRUE) {
[09:31:27.075]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:27.075]                     {
[09:31:27.075]                       inherits <- base::inherits
[09:31:27.075]                       invokeRestart <- base::invokeRestart
[09:31:27.075]                       is.null <- base::is.null
[09:31:27.075]                       muffled <- FALSE
[09:31:27.075]                       if (inherits(cond, "message")) {
[09:31:27.075]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:27.075]                         if (muffled) 
[09:31:27.075]                           invokeRestart("muffleMessage")
[09:31:27.075]                       }
[09:31:27.075]                       else if (inherits(cond, "warning")) {
[09:31:27.075]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:27.075]                         if (muffled) 
[09:31:27.075]                           invokeRestart("muffleWarning")
[09:31:27.075]                       }
[09:31:27.075]                       else if (inherits(cond, "condition")) {
[09:31:27.075]                         if (!is.null(pattern)) {
[09:31:27.075]                           computeRestarts <- base::computeRestarts
[09:31:27.075]                           grepl <- base::grepl
[09:31:27.075]                           restarts <- computeRestarts(cond)
[09:31:27.075]                           for (restart in restarts) {
[09:31:27.075]                             name <- restart$name
[09:31:27.075]                             if (is.null(name)) 
[09:31:27.075]                               next
[09:31:27.075]                             if (!grepl(pattern, name)) 
[09:31:27.075]                               next
[09:31:27.075]                             invokeRestart(restart)
[09:31:27.075]                             muffled <- TRUE
[09:31:27.075]                             break
[09:31:27.075]                           }
[09:31:27.075]                         }
[09:31:27.075]                       }
[09:31:27.075]                       invisible(muffled)
[09:31:27.075]                     }
[09:31:27.075]                     muffleCondition(cond, pattern = "^muffle")
[09:31:27.075]                   }
[09:31:27.075]                 }
[09:31:27.075]             }
[09:31:27.075]         }))
[09:31:27.075]     }, error = function(ex) {
[09:31:27.075]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:27.075]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:27.075]                 ...future.rng), started = ...future.startTime, 
[09:31:27.075]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:27.075]             version = "1.8"), class = "FutureResult")
[09:31:27.075]     }, finally = {
[09:31:27.075]         if (!identical(...future.workdir, getwd())) 
[09:31:27.075]             setwd(...future.workdir)
[09:31:27.075]         {
[09:31:27.075]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:27.075]                 ...future.oldOptions$nwarnings <- NULL
[09:31:27.075]             }
[09:31:27.075]             base::options(...future.oldOptions)
[09:31:27.075]             if (.Platform$OS.type == "windows") {
[09:31:27.075]                 old_names <- names(...future.oldEnvVars)
[09:31:27.075]                 envs <- base::Sys.getenv()
[09:31:27.075]                 names <- names(envs)
[09:31:27.075]                 common <- intersect(names, old_names)
[09:31:27.075]                 added <- setdiff(names, old_names)
[09:31:27.075]                 removed <- setdiff(old_names, names)
[09:31:27.075]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:27.075]                   envs[common]]
[09:31:27.075]                 NAMES <- toupper(changed)
[09:31:27.075]                 args <- list()
[09:31:27.075]                 for (kk in seq_along(NAMES)) {
[09:31:27.075]                   name <- changed[[kk]]
[09:31:27.075]                   NAME <- NAMES[[kk]]
[09:31:27.075]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:27.075]                     next
[09:31:27.075]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:27.075]                 }
[09:31:27.075]                 NAMES <- toupper(added)
[09:31:27.075]                 for (kk in seq_along(NAMES)) {
[09:31:27.075]                   name <- added[[kk]]
[09:31:27.075]                   NAME <- NAMES[[kk]]
[09:31:27.075]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:27.075]                     next
[09:31:27.075]                   args[[name]] <- ""
[09:31:27.075]                 }
[09:31:27.075]                 NAMES <- toupper(removed)
[09:31:27.075]                 for (kk in seq_along(NAMES)) {
[09:31:27.075]                   name <- removed[[kk]]
[09:31:27.075]                   NAME <- NAMES[[kk]]
[09:31:27.075]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:27.075]                     next
[09:31:27.075]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:27.075]                 }
[09:31:27.075]                 if (length(args) > 0) 
[09:31:27.075]                   base::do.call(base::Sys.setenv, args = args)
[09:31:27.075]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:27.075]             }
[09:31:27.075]             else {
[09:31:27.075]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:27.075]             }
[09:31:27.075]             {
[09:31:27.075]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:27.075]                   0L) {
[09:31:27.075]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:27.075]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:27.075]                   base::options(opts)
[09:31:27.075]                 }
[09:31:27.075]                 {
[09:31:27.075]                   {
[09:31:27.075]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:27.075]                     NULL
[09:31:27.075]                   }
[09:31:27.075]                   options(future.plan = NULL)
[09:31:27.075]                   if (is.na(NA_character_)) 
[09:31:27.075]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:27.075]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:27.075]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:27.075]                     .init = FALSE)
[09:31:27.075]                 }
[09:31:27.075]             }
[09:31:27.075]         }
[09:31:27.075]     })
[09:31:27.075]     if (TRUE) {
[09:31:27.075]         base::sink(type = "output", split = FALSE)
[09:31:27.075]         if (TRUE) {
[09:31:27.075]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:27.075]         }
[09:31:27.075]         else {
[09:31:27.075]             ...future.result["stdout"] <- base::list(NULL)
[09:31:27.075]         }
[09:31:27.075]         base::close(...future.stdout)
[09:31:27.075]         ...future.stdout <- NULL
[09:31:27.075]     }
[09:31:27.075]     ...future.result$conditions <- ...future.conditions
[09:31:27.075]     ...future.result$finished <- base::Sys.time()
[09:31:27.075]     ...future.result
[09:31:27.075] }
[09:31:27.126] MultisessionFuture started
[09:31:27.127] - Launch lazy future ... done
[09:31:27.127] run() for ‘MultisessionFuture’ ... done
> 
> ## Resolve future #2 (frees up background process #2)
> message(sprintf("b = %s\n", sQuote(b)))
[09:31:27.127] result() for ClusterFuture ...
[09:31:27.127] receiveMessageFromWorker() for ClusterFuture ...
[09:31:27.127] - Validating connection of MultisessionFuture
[09:31:27.158] - received message: FutureResult
[09:31:27.158] - Received FutureResult
[09:31:27.159] - Erased future from FutureRegistry
[09:31:27.159] result() for ClusterFuture ...
[09:31:27.159] - result already collected: FutureResult
[09:31:27.159] result() for ClusterFuture ... done
[09:31:27.159] receiveMessageFromWorker() for ClusterFuture ... done
[09:31:27.159] result() for ClusterFuture ... done
[09:31:27.159] result() for ClusterFuture ...
[09:31:27.162] - result already collected: FutureResult
[09:31:27.162] result() for ClusterFuture ... done
b = ‘a’

> 
> ## Create future #3 (consumes background process #2)
> ## THIS IS THE TRICKY PART:
> ## Two globals are identified `env` and `b` and both are resolved.
> ## However, object `env[[b]]` (here element `a` of environment `env`)
> ## is not touched and therefore not resolved (since it is a future)
> ## unless environment `env` is resolved recursively. (Issue #49)
> y %<-% { env[[b]] }
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[09:31:27.163] getGlobalsAndPackages() ...
[09:31:27.163] Searching for globals...
[09:31:27.167] - globals found: [4] ‘{’, ‘[[’, ‘env’, ‘b’
[09:31:27.167] Searching for globals ... DONE
[09:31:27.167] Resolving globals: TRUE
[09:31:27.167] Resolving any globals that are futures ...
[09:31:27.167] - globals: [4] ‘{’, ‘[[’, ‘env’, ‘b’
[09:31:27.167] Resolving any globals that are futures ... DONE
[09:31:27.168] Resolving futures part of globals (recursively) ...
[09:31:27.168] resolve() on list ...
[09:31:27.168]  recursive: 99
[09:31:27.169]  length: 2
[09:31:27.169]  elements: ‘env’, ‘b’
[09:31:27.169] resolve() on environment ...
[09:31:27.169]  recursive: 98
[09:31:27.170]  elements: [1] ‘.future_a’, ‘a’
[09:31:27.170] receiveMessageFromWorker() for ClusterFuture ...
[09:31:27.170] - Validating connection of MultisessionFuture
[09:31:27.171] - received message: FutureResult
[09:31:27.171] - Received FutureResult
[09:31:27.171] - Erased future from FutureRegistry
[09:31:27.171] result() for ClusterFuture ...
[09:31:27.171] - result already collected: FutureResult
[09:31:27.171] result() for ClusterFuture ... done
[09:31:27.171] receiveMessageFromWorker() for ClusterFuture ... done
[09:31:27.171] Future #1
[09:31:27.171] result() for ClusterFuture ...
[09:31:27.171] - result already collected: FutureResult
[09:31:27.171] result() for ClusterFuture ... done
[09:31:27.172] result() for ClusterFuture ...
[09:31:27.172] - result already collected: FutureResult
[09:31:27.172] result() for ClusterFuture ... done
[09:31:27.172] A MultisessionFuture was resolved
[09:31:27.172]  length: 0 (resolved future 1)
[09:31:27.172] resolve() on environment ... DONE
[09:31:27.172]  length: 1 (resolved future 1)
[09:31:27.172]  length: 0 (resolved future 2)
[09:31:27.172] resolve() on list ... DONE
[09:31:27.173] - globals: [2] ‘env’, ‘b’
[09:31:27.173] Resolving futures part of globals (recursively) ... DONE
[09:31:27.173] The total size of the 2 globals is 4.29 KiB (4392 bytes)
[09:31:27.174] The total size of the 2 globals exported for future expression (‘{; env[[b]]; }’) is 4.29 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘env’ (4.18 KiB of class ‘environment’) and ‘b’ (112 bytes of class ‘character’)
[09:31:27.174] - globals: [2] ‘env’, ‘b’
[09:31:27.174] 
[09:31:27.174] getGlobalsAndPackages() ... DONE
[09:31:27.174] run() for ‘Future’ ...
[09:31:27.175] - state: ‘created’
[09:31:27.175] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:31:27.185] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:27.185] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:31:27.185]   - Field: ‘node’
[09:31:27.185]   - Field: ‘label’
[09:31:27.186]   - Field: ‘local’
[09:31:27.186]   - Field: ‘owner’
[09:31:27.186]   - Field: ‘envir’
[09:31:27.186]   - Field: ‘workers’
[09:31:27.186]   - Field: ‘packages’
[09:31:27.186]   - Field: ‘gc’
[09:31:27.186]   - Field: ‘conditions’
[09:31:27.186]   - Field: ‘persistent’
[09:31:27.186]   - Field: ‘expr’
[09:31:27.186]   - Field: ‘uuid’
[09:31:27.186]   - Field: ‘seed’
[09:31:27.186]   - Field: ‘version’
[09:31:27.187]   - Field: ‘result’
[09:31:27.187]   - Field: ‘asynchronous’
[09:31:27.187]   - Field: ‘calls’
[09:31:27.187]   - Field: ‘globals’
[09:31:27.187]   - Field: ‘stdout’
[09:31:27.187]   - Field: ‘earlySignal’
[09:31:27.187]   - Field: ‘lazy’
[09:31:27.187]   - Field: ‘state’
[09:31:27.187] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:31:27.187] - Launch lazy future ...
[09:31:27.188] Packages needed by the future expression (n = 0): <none>
[09:31:27.188] Packages needed by future strategies (n = 0): <none>
[09:31:27.188] {
[09:31:27.188]     {
[09:31:27.188]         {
[09:31:27.188]             ...future.startTime <- base::Sys.time()
[09:31:27.188]             {
[09:31:27.188]                 {
[09:31:27.188]                   {
[09:31:27.188]                     {
[09:31:27.188]                       base::local({
[09:31:27.188]                         has_future <- base::requireNamespace("future", 
[09:31:27.188]                           quietly = TRUE)
[09:31:27.188]                         if (has_future) {
[09:31:27.188]                           ns <- base::getNamespace("future")
[09:31:27.188]                           version <- ns[[".package"]][["version"]]
[09:31:27.188]                           if (is.null(version)) 
[09:31:27.188]                             version <- utils::packageVersion("future")
[09:31:27.188]                         }
[09:31:27.188]                         else {
[09:31:27.188]                           version <- NULL
[09:31:27.188]                         }
[09:31:27.188]                         if (!has_future || version < "1.8.0") {
[09:31:27.188]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:27.188]                             "", base::R.version$version.string), 
[09:31:27.188]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:27.188]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:27.188]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:27.188]                               "release", "version")], collapse = " "), 
[09:31:27.188]                             hostname = base::Sys.info()[["nodename"]])
[09:31:27.188]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:27.188]                             info)
[09:31:27.188]                           info <- base::paste(info, collapse = "; ")
[09:31:27.188]                           if (!has_future) {
[09:31:27.188]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:27.188]                               info)
[09:31:27.188]                           }
[09:31:27.188]                           else {
[09:31:27.188]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:27.188]                               info, version)
[09:31:27.188]                           }
[09:31:27.188]                           base::stop(msg)
[09:31:27.188]                         }
[09:31:27.188]                       })
[09:31:27.188]                     }
[09:31:27.188]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:27.188]                     base::options(mc.cores = 1L)
[09:31:27.188]                   }
[09:31:27.188]                   ...future.strategy.old <- future::plan("list")
[09:31:27.188]                   options(future.plan = NULL)
[09:31:27.188]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:27.188]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:27.188]                 }
[09:31:27.188]                 ...future.workdir <- getwd()
[09:31:27.188]             }
[09:31:27.188]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:27.188]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:27.188]         }
[09:31:27.188]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:27.188]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:27.188]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:27.188]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[09:31:27.188]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:27.188]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:27.188]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:27.188]             base::names(...future.oldOptions))
[09:31:27.188]     }
[09:31:27.188]     if (FALSE) {
[09:31:27.188]     }
[09:31:27.188]     else {
[09:31:27.188]         if (TRUE) {
[09:31:27.188]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:27.188]                 open = "w")
[09:31:27.188]         }
[09:31:27.188]         else {
[09:31:27.188]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:27.188]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:27.188]         }
[09:31:27.188]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:27.188]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:27.188]             base::sink(type = "output", split = FALSE)
[09:31:27.188]             base::close(...future.stdout)
[09:31:27.188]         }, add = TRUE)
[09:31:27.188]     }
[09:31:27.188]     ...future.frame <- base::sys.nframe()
[09:31:27.188]     ...future.conditions <- base::list()
[09:31:27.188]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:27.188]     if (FALSE) {
[09:31:27.188]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:27.188]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:27.188]     }
[09:31:27.188]     ...future.result <- base::tryCatch({
[09:31:27.188]         base::withCallingHandlers({
[09:31:27.188]             ...future.value <- base::withVisible(base::local({
[09:31:27.188]                 ...future.makeSendCondition <- base::local({
[09:31:27.188]                   sendCondition <- NULL
[09:31:27.188]                   function(frame = 1L) {
[09:31:27.188]                     if (is.function(sendCondition)) 
[09:31:27.188]                       return(sendCondition)
[09:31:27.188]                     ns <- getNamespace("parallel")
[09:31:27.188]                     if (exists("sendData", mode = "function", 
[09:31:27.188]                       envir = ns)) {
[09:31:27.188]                       parallel_sendData <- get("sendData", mode = "function", 
[09:31:27.188]                         envir = ns)
[09:31:27.188]                       envir <- sys.frame(frame)
[09:31:27.188]                       master <- NULL
[09:31:27.188]                       while (!identical(envir, .GlobalEnv) && 
[09:31:27.188]                         !identical(envir, emptyenv())) {
[09:31:27.188]                         if (exists("master", mode = "list", envir = envir, 
[09:31:27.188]                           inherits = FALSE)) {
[09:31:27.188]                           master <- get("master", mode = "list", 
[09:31:27.188]                             envir = envir, inherits = FALSE)
[09:31:27.188]                           if (inherits(master, c("SOCKnode", 
[09:31:27.188]                             "SOCK0node"))) {
[09:31:27.188]                             sendCondition <<- function(cond) {
[09:31:27.188]                               data <- list(type = "VALUE", value = cond, 
[09:31:27.188]                                 success = TRUE)
[09:31:27.188]                               parallel_sendData(master, data)
[09:31:27.188]                             }
[09:31:27.188]                             return(sendCondition)
[09:31:27.188]                           }
[09:31:27.188]                         }
[09:31:27.188]                         frame <- frame + 1L
[09:31:27.188]                         envir <- sys.frame(frame)
[09:31:27.188]                       }
[09:31:27.188]                     }
[09:31:27.188]                     sendCondition <<- function(cond) NULL
[09:31:27.188]                   }
[09:31:27.188]                 })
[09:31:27.188]                 withCallingHandlers({
[09:31:27.188]                   {
[09:31:27.188]                     env[[b]]
[09:31:27.188]                   }
[09:31:27.188]                 }, immediateCondition = function(cond) {
[09:31:27.188]                   sendCondition <- ...future.makeSendCondition()
[09:31:27.188]                   sendCondition(cond)
[09:31:27.188]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:27.188]                   {
[09:31:27.188]                     inherits <- base::inherits
[09:31:27.188]                     invokeRestart <- base::invokeRestart
[09:31:27.188]                     is.null <- base::is.null
[09:31:27.188]                     muffled <- FALSE
[09:31:27.188]                     if (inherits(cond, "message")) {
[09:31:27.188]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:27.188]                       if (muffled) 
[09:31:27.188]                         invokeRestart("muffleMessage")
[09:31:27.188]                     }
[09:31:27.188]                     else if (inherits(cond, "warning")) {
[09:31:27.188]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:27.188]                       if (muffled) 
[09:31:27.188]                         invokeRestart("muffleWarning")
[09:31:27.188]                     }
[09:31:27.188]                     else if (inherits(cond, "condition")) {
[09:31:27.188]                       if (!is.null(pattern)) {
[09:31:27.188]                         computeRestarts <- base::computeRestarts
[09:31:27.188]                         grepl <- base::grepl
[09:31:27.188]                         restarts <- computeRestarts(cond)
[09:31:27.188]                         for (restart in restarts) {
[09:31:27.188]                           name <- restart$name
[09:31:27.188]                           if (is.null(name)) 
[09:31:27.188]                             next
[09:31:27.188]                           if (!grepl(pattern, name)) 
[09:31:27.188]                             next
[09:31:27.188]                           invokeRestart(restart)
[09:31:27.188]                           muffled <- TRUE
[09:31:27.188]                           break
[09:31:27.188]                         }
[09:31:27.188]                       }
[09:31:27.188]                     }
[09:31:27.188]                     invisible(muffled)
[09:31:27.188]                   }
[09:31:27.188]                   muffleCondition(cond)
[09:31:27.188]                 })
[09:31:27.188]             }))
[09:31:27.188]             future::FutureResult(value = ...future.value$value, 
[09:31:27.188]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:27.188]                   ...future.rng), globalenv = if (FALSE) 
[09:31:27.188]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:27.188]                     ...future.globalenv.names))
[09:31:27.188]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:27.188]         }, condition = base::local({
[09:31:27.188]             c <- base::c
[09:31:27.188]             inherits <- base::inherits
[09:31:27.188]             invokeRestart <- base::invokeRestart
[09:31:27.188]             length <- base::length
[09:31:27.188]             list <- base::list
[09:31:27.188]             seq.int <- base::seq.int
[09:31:27.188]             signalCondition <- base::signalCondition
[09:31:27.188]             sys.calls <- base::sys.calls
[09:31:27.188]             `[[` <- base::`[[`
[09:31:27.188]             `+` <- base::`+`
[09:31:27.188]             `<<-` <- base::`<<-`
[09:31:27.188]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:27.188]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:27.188]                   3L)]
[09:31:27.188]             }
[09:31:27.188]             function(cond) {
[09:31:27.188]                 is_error <- inherits(cond, "error")
[09:31:27.188]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:27.188]                   NULL)
[09:31:27.188]                 if (is_error) {
[09:31:27.188]                   sessionInformation <- function() {
[09:31:27.188]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:27.188]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:27.188]                       search = base::search(), system = base::Sys.info())
[09:31:27.188]                   }
[09:31:27.188]                   ...future.conditions[[length(...future.conditions) + 
[09:31:27.188]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:27.188]                     cond$call), session = sessionInformation(), 
[09:31:27.188]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:27.188]                   signalCondition(cond)
[09:31:27.188]                 }
[09:31:27.188]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:27.188]                 "immediateCondition"))) {
[09:31:27.188]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:27.188]                   ...future.conditions[[length(...future.conditions) + 
[09:31:27.188]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:27.188]                   if (TRUE && !signal) {
[09:31:27.188]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:27.188]                     {
[09:31:27.188]                       inherits <- base::inherits
[09:31:27.188]                       invokeRestart <- base::invokeRestart
[09:31:27.188]                       is.null <- base::is.null
[09:31:27.188]                       muffled <- FALSE
[09:31:27.188]                       if (inherits(cond, "message")) {
[09:31:27.188]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:27.188]                         if (muffled) 
[09:31:27.188]                           invokeRestart("muffleMessage")
[09:31:27.188]                       }
[09:31:27.188]                       else if (inherits(cond, "warning")) {
[09:31:27.188]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:27.188]                         if (muffled) 
[09:31:27.188]                           invokeRestart("muffleWarning")
[09:31:27.188]                       }
[09:31:27.188]                       else if (inherits(cond, "condition")) {
[09:31:27.188]                         if (!is.null(pattern)) {
[09:31:27.188]                           computeRestarts <- base::computeRestarts
[09:31:27.188]                           grepl <- base::grepl
[09:31:27.188]                           restarts <- computeRestarts(cond)
[09:31:27.188]                           for (restart in restarts) {
[09:31:27.188]                             name <- restart$name
[09:31:27.188]                             if (is.null(name)) 
[09:31:27.188]                               next
[09:31:27.188]                             if (!grepl(pattern, name)) 
[09:31:27.188]                               next
[09:31:27.188]                             invokeRestart(restart)
[09:31:27.188]                             muffled <- TRUE
[09:31:27.188]                             break
[09:31:27.188]                           }
[09:31:27.188]                         }
[09:31:27.188]                       }
[09:31:27.188]                       invisible(muffled)
[09:31:27.188]                     }
[09:31:27.188]                     muffleCondition(cond, pattern = "^muffle")
[09:31:27.188]                   }
[09:31:27.188]                 }
[09:31:27.188]                 else {
[09:31:27.188]                   if (TRUE) {
[09:31:27.188]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:27.188]                     {
[09:31:27.188]                       inherits <- base::inherits
[09:31:27.188]                       invokeRestart <- base::invokeRestart
[09:31:27.188]                       is.null <- base::is.null
[09:31:27.188]                       muffled <- FALSE
[09:31:27.188]                       if (inherits(cond, "message")) {
[09:31:27.188]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:27.188]                         if (muffled) 
[09:31:27.188]                           invokeRestart("muffleMessage")
[09:31:27.188]                       }
[09:31:27.188]                       else if (inherits(cond, "warning")) {
[09:31:27.188]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:27.188]                         if (muffled) 
[09:31:27.188]                           invokeRestart("muffleWarning")
[09:31:27.188]                       }
[09:31:27.188]                       else if (inherits(cond, "condition")) {
[09:31:27.188]                         if (!is.null(pattern)) {
[09:31:27.188]                           computeRestarts <- base::computeRestarts
[09:31:27.188]                           grepl <- base::grepl
[09:31:27.188]                           restarts <- computeRestarts(cond)
[09:31:27.188]                           for (restart in restarts) {
[09:31:27.188]                             name <- restart$name
[09:31:27.188]                             if (is.null(name)) 
[09:31:27.188]                               next
[09:31:27.188]                             if (!grepl(pattern, name)) 
[09:31:27.188]                               next
[09:31:27.188]                             invokeRestart(restart)
[09:31:27.188]                             muffled <- TRUE
[09:31:27.188]                             break
[09:31:27.188]                           }
[09:31:27.188]                         }
[09:31:27.188]                       }
[09:31:27.188]                       invisible(muffled)
[09:31:27.188]                     }
[09:31:27.188]                     muffleCondition(cond, pattern = "^muffle")
[09:31:27.188]                   }
[09:31:27.188]                 }
[09:31:27.188]             }
[09:31:27.188]         }))
[09:31:27.188]     }, error = function(ex) {
[09:31:27.188]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:27.188]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:27.188]                 ...future.rng), started = ...future.startTime, 
[09:31:27.188]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:27.188]             version = "1.8"), class = "FutureResult")
[09:31:27.188]     }, finally = {
[09:31:27.188]         if (!identical(...future.workdir, getwd())) 
[09:31:27.188]             setwd(...future.workdir)
[09:31:27.188]         {
[09:31:27.188]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:27.188]                 ...future.oldOptions$nwarnings <- NULL
[09:31:27.188]             }
[09:31:27.188]             base::options(...future.oldOptions)
[09:31:27.188]             if (.Platform$OS.type == "windows") {
[09:31:27.188]                 old_names <- names(...future.oldEnvVars)
[09:31:27.188]                 envs <- base::Sys.getenv()
[09:31:27.188]                 names <- names(envs)
[09:31:27.188]                 common <- intersect(names, old_names)
[09:31:27.188]                 added <- setdiff(names, old_names)
[09:31:27.188]                 removed <- setdiff(old_names, names)
[09:31:27.188]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:27.188]                   envs[common]]
[09:31:27.188]                 NAMES <- toupper(changed)
[09:31:27.188]                 args <- list()
[09:31:27.188]                 for (kk in seq_along(NAMES)) {
[09:31:27.188]                   name <- changed[[kk]]
[09:31:27.188]                   NAME <- NAMES[[kk]]
[09:31:27.188]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:27.188]                     next
[09:31:27.188]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:27.188]                 }
[09:31:27.188]                 NAMES <- toupper(added)
[09:31:27.188]                 for (kk in seq_along(NAMES)) {
[09:31:27.188]                   name <- added[[kk]]
[09:31:27.188]                   NAME <- NAMES[[kk]]
[09:31:27.188]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:27.188]                     next
[09:31:27.188]                   args[[name]] <- ""
[09:31:27.188]                 }
[09:31:27.188]                 NAMES <- toupper(removed)
[09:31:27.188]                 for (kk in seq_along(NAMES)) {
[09:31:27.188]                   name <- removed[[kk]]
[09:31:27.188]                   NAME <- NAMES[[kk]]
[09:31:27.188]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:27.188]                     next
[09:31:27.188]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:27.188]                 }
[09:31:27.188]                 if (length(args) > 0) 
[09:31:27.188]                   base::do.call(base::Sys.setenv, args = args)
[09:31:27.188]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:27.188]             }
[09:31:27.188]             else {
[09:31:27.188]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:27.188]             }
[09:31:27.188]             {
[09:31:27.188]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:27.188]                   0L) {
[09:31:27.188]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:27.188]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:27.188]                   base::options(opts)
[09:31:27.188]                 }
[09:31:27.188]                 {
[09:31:27.188]                   {
[09:31:27.188]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:27.188]                     NULL
[09:31:27.188]                   }
[09:31:27.188]                   options(future.plan = NULL)
[09:31:27.188]                   if (is.na(NA_character_)) 
[09:31:27.188]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:27.188]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:27.188]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:27.188]                     .init = FALSE)
[09:31:27.188]                 }
[09:31:27.188]             }
[09:31:27.188]         }
[09:31:27.188]     })
[09:31:27.188]     if (TRUE) {
[09:31:27.188]         base::sink(type = "output", split = FALSE)
[09:31:27.188]         if (TRUE) {
[09:31:27.188]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:27.188]         }
[09:31:27.188]         else {
[09:31:27.188]             ...future.result["stdout"] <- base::list(NULL)
[09:31:27.188]         }
[09:31:27.188]         base::close(...future.stdout)
[09:31:27.188]         ...future.stdout <- NULL
[09:31:27.188]     }
[09:31:27.188]     ...future.result$conditions <- ...future.conditions
[09:31:27.188]     ...future.result$finished <- base::Sys.time()
[09:31:27.188]     ...future.result
[09:31:27.188] }
[09:31:27.191] Exporting 2 global objects (4.29 KiB) to cluster node #1 ...
[09:31:27.191] Exporting ‘env’ (4.18 KiB) to cluster node #1 ...
[09:31:27.202] Exporting ‘env’ (4.18 KiB) to cluster node #1 ... DONE
[09:31:27.202] Exporting ‘b’ (112 bytes) to cluster node #1 ...
[09:31:27.203] Exporting ‘b’ (112 bytes) to cluster node #1 ... DONE
[09:31:27.203] Exporting 2 global objects (4.29 KiB) to cluster node #1 ... DONE
[09:31:27.203] MultisessionFuture started
[09:31:27.204] - Launch lazy future ... done
[09:31:27.204] run() for ‘MultisessionFuture’ ... done
> 
> ## Resolve future #3
> message(sprintf("y = %s\n", y))
[09:31:27.204] result() for ClusterFuture ...
[09:31:27.204] receiveMessageFromWorker() for ClusterFuture ...
[09:31:27.204] - Validating connection of MultisessionFuture
[09:31:27.246] - received message: FutureResult
[09:31:27.246] - Received FutureResult
[09:31:27.246] - Erased future from FutureRegistry
[09:31:27.246] result() for ClusterFuture ...
[09:31:27.247] - result already collected: FutureResult
[09:31:27.247] result() for ClusterFuture ... done
[09:31:27.247] receiveMessageFromWorker() for ClusterFuture ... done
[09:31:27.247] result() for ClusterFuture ... done
[09:31:27.247] result() for ClusterFuture ...
[09:31:27.247] - result already collected: FutureResult
[09:31:27.247] result() for ClusterFuture ... done
y = 5

> 
> ## Resolve future #1 if not already done
> str(as.list(env))
[09:31:27.247] result() for ClusterFuture ...
[09:31:27.247] - result already collected: FutureResult
[09:31:27.248] result() for ClusterFuture ... done
[09:31:27.248] result() for ClusterFuture ...
[09:31:27.248] - result already collected: FutureResult
[09:31:27.248] result() for ClusterFuture ... done
List of 1
 $ a: num 5
> 
> ## Create future #4
> ## Since future #1 is resolved it will work at this point
> y %<-% { env[[b]] }
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[09:31:27.249] getGlobalsAndPackages() ...
[09:31:27.249] Searching for globals...
[09:31:27.250] - globals found: [4] ‘{’, ‘[[’, ‘env’, ‘b’
[09:31:27.250] Searching for globals ... DONE
[09:31:27.250] Resolving globals: TRUE
[09:31:27.250] Resolving any globals that are futures ...
[09:31:27.250] - globals: [4] ‘{’, ‘[[’, ‘env’, ‘b’
[09:31:27.250] Resolving any globals that are futures ... DONE
[09:31:27.250] Resolving futures part of globals (recursively) ...
[09:31:27.251] resolve() on list ...
[09:31:27.251]  recursive: 99
[09:31:27.251]  length: 2
[09:31:27.251]  elements: ‘env’, ‘b’
[09:31:27.251] resolve() on environment ...
[09:31:27.251]  recursive: 98
[09:31:27.251]  elements: [1] ‘a’
[09:31:27.252]  length: 0 (resolved future 1)
[09:31:27.252] resolve() on environment ... DONE
[09:31:27.252]  length: 1 (resolved future 1)
[09:31:27.252]  length: 0 (resolved future 2)
[09:31:27.252] resolve() on list ... DONE
[09:31:27.252] - globals: [2] ‘env’, ‘b’
[09:31:27.252] Resolving futures part of globals (recursively) ... DONE
[09:31:27.252] The total size of the 2 globals is 168 bytes (168 bytes)
[09:31:27.253] The total size of the 2 globals exported for future expression (‘{; env[[b]]; }’) is 168 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘b’ (112 bytes of class ‘character’) and ‘env’ (56 bytes of class ‘environment’)
[09:31:27.253] - globals: [2] ‘env’, ‘b’
[09:31:27.253] 
[09:31:27.253] getGlobalsAndPackages() ... DONE
[09:31:27.253] run() for ‘Future’ ...
[09:31:27.253] - state: ‘created’
[09:31:27.253] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:31:27.265] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:27.265] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:31:27.265]   - Field: ‘node’
[09:31:27.265]   - Field: ‘label’
[09:31:27.265]   - Field: ‘local’
[09:31:27.265]   - Field: ‘owner’
[09:31:27.265]   - Field: ‘envir’
[09:31:27.265]   - Field: ‘workers’
[09:31:27.266]   - Field: ‘packages’
[09:31:27.266]   - Field: ‘gc’
[09:31:27.266]   - Field: ‘conditions’
[09:31:27.266]   - Field: ‘persistent’
[09:31:27.266]   - Field: ‘expr’
[09:31:27.266]   - Field: ‘uuid’
[09:31:27.266]   - Field: ‘seed’
[09:31:27.266]   - Field: ‘version’
[09:31:27.266]   - Field: ‘result’
[09:31:27.266]   - Field: ‘asynchronous’
[09:31:27.266]   - Field: ‘calls’
[09:31:27.267]   - Field: ‘globals’
[09:31:27.267]   - Field: ‘stdout’
[09:31:27.267]   - Field: ‘earlySignal’
[09:31:27.267]   - Field: ‘lazy’
[09:31:27.267]   - Field: ‘state’
[09:31:27.267] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:31:27.267] - Launch lazy future ...
[09:31:27.267] Packages needed by the future expression (n = 0): <none>
[09:31:27.267] Packages needed by future strategies (n = 0): <none>
[09:31:27.268] {
[09:31:27.268]     {
[09:31:27.268]         {
[09:31:27.268]             ...future.startTime <- base::Sys.time()
[09:31:27.268]             {
[09:31:27.268]                 {
[09:31:27.268]                   {
[09:31:27.268]                     {
[09:31:27.268]                       base::local({
[09:31:27.268]                         has_future <- base::requireNamespace("future", 
[09:31:27.268]                           quietly = TRUE)
[09:31:27.268]                         if (has_future) {
[09:31:27.268]                           ns <- base::getNamespace("future")
[09:31:27.268]                           version <- ns[[".package"]][["version"]]
[09:31:27.268]                           if (is.null(version)) 
[09:31:27.268]                             version <- utils::packageVersion("future")
[09:31:27.268]                         }
[09:31:27.268]                         else {
[09:31:27.268]                           version <- NULL
[09:31:27.268]                         }
[09:31:27.268]                         if (!has_future || version < "1.8.0") {
[09:31:27.268]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:27.268]                             "", base::R.version$version.string), 
[09:31:27.268]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:27.268]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:27.268]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:27.268]                               "release", "version")], collapse = " "), 
[09:31:27.268]                             hostname = base::Sys.info()[["nodename"]])
[09:31:27.268]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:27.268]                             info)
[09:31:27.268]                           info <- base::paste(info, collapse = "; ")
[09:31:27.268]                           if (!has_future) {
[09:31:27.268]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:27.268]                               info)
[09:31:27.268]                           }
[09:31:27.268]                           else {
[09:31:27.268]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:27.268]                               info, version)
[09:31:27.268]                           }
[09:31:27.268]                           base::stop(msg)
[09:31:27.268]                         }
[09:31:27.268]                       })
[09:31:27.268]                     }
[09:31:27.268]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:27.268]                     base::options(mc.cores = 1L)
[09:31:27.268]                   }
[09:31:27.268]                   ...future.strategy.old <- future::plan("list")
[09:31:27.268]                   options(future.plan = NULL)
[09:31:27.268]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:27.268]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:27.268]                 }
[09:31:27.268]                 ...future.workdir <- getwd()
[09:31:27.268]             }
[09:31:27.268]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:27.268]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:27.268]         }
[09:31:27.268]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:27.268]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:27.268]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:27.268]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[09:31:27.268]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:27.268]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:27.268]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:27.268]             base::names(...future.oldOptions))
[09:31:27.268]     }
[09:31:27.268]     if (FALSE) {
[09:31:27.268]     }
[09:31:27.268]     else {
[09:31:27.268]         if (TRUE) {
[09:31:27.268]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:27.268]                 open = "w")
[09:31:27.268]         }
[09:31:27.268]         else {
[09:31:27.268]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:27.268]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:27.268]         }
[09:31:27.268]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:27.268]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:27.268]             base::sink(type = "output", split = FALSE)
[09:31:27.268]             base::close(...future.stdout)
[09:31:27.268]         }, add = TRUE)
[09:31:27.268]     }
[09:31:27.268]     ...future.frame <- base::sys.nframe()
[09:31:27.268]     ...future.conditions <- base::list()
[09:31:27.268]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:27.268]     if (FALSE) {
[09:31:27.268]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:27.268]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:27.268]     }
[09:31:27.268]     ...future.result <- base::tryCatch({
[09:31:27.268]         base::withCallingHandlers({
[09:31:27.268]             ...future.value <- base::withVisible(base::local({
[09:31:27.268]                 ...future.makeSendCondition <- base::local({
[09:31:27.268]                   sendCondition <- NULL
[09:31:27.268]                   function(frame = 1L) {
[09:31:27.268]                     if (is.function(sendCondition)) 
[09:31:27.268]                       return(sendCondition)
[09:31:27.268]                     ns <- getNamespace("parallel")
[09:31:27.268]                     if (exists("sendData", mode = "function", 
[09:31:27.268]                       envir = ns)) {
[09:31:27.268]                       parallel_sendData <- get("sendData", mode = "function", 
[09:31:27.268]                         envir = ns)
[09:31:27.268]                       envir <- sys.frame(frame)
[09:31:27.268]                       master <- NULL
[09:31:27.268]                       while (!identical(envir, .GlobalEnv) && 
[09:31:27.268]                         !identical(envir, emptyenv())) {
[09:31:27.268]                         if (exists("master", mode = "list", envir = envir, 
[09:31:27.268]                           inherits = FALSE)) {
[09:31:27.268]                           master <- get("master", mode = "list", 
[09:31:27.268]                             envir = envir, inherits = FALSE)
[09:31:27.268]                           if (inherits(master, c("SOCKnode", 
[09:31:27.268]                             "SOCK0node"))) {
[09:31:27.268]                             sendCondition <<- function(cond) {
[09:31:27.268]                               data <- list(type = "VALUE", value = cond, 
[09:31:27.268]                                 success = TRUE)
[09:31:27.268]                               parallel_sendData(master, data)
[09:31:27.268]                             }
[09:31:27.268]                             return(sendCondition)
[09:31:27.268]                           }
[09:31:27.268]                         }
[09:31:27.268]                         frame <- frame + 1L
[09:31:27.268]                         envir <- sys.frame(frame)
[09:31:27.268]                       }
[09:31:27.268]                     }
[09:31:27.268]                     sendCondition <<- function(cond) NULL
[09:31:27.268]                   }
[09:31:27.268]                 })
[09:31:27.268]                 withCallingHandlers({
[09:31:27.268]                   {
[09:31:27.268]                     env[[b]]
[09:31:27.268]                   }
[09:31:27.268]                 }, immediateCondition = function(cond) {
[09:31:27.268]                   sendCondition <- ...future.makeSendCondition()
[09:31:27.268]                   sendCondition(cond)
[09:31:27.268]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:27.268]                   {
[09:31:27.268]                     inherits <- base::inherits
[09:31:27.268]                     invokeRestart <- base::invokeRestart
[09:31:27.268]                     is.null <- base::is.null
[09:31:27.268]                     muffled <- FALSE
[09:31:27.268]                     if (inherits(cond, "message")) {
[09:31:27.268]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:27.268]                       if (muffled) 
[09:31:27.268]                         invokeRestart("muffleMessage")
[09:31:27.268]                     }
[09:31:27.268]                     else if (inherits(cond, "warning")) {
[09:31:27.268]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:27.268]                       if (muffled) 
[09:31:27.268]                         invokeRestart("muffleWarning")
[09:31:27.268]                     }
[09:31:27.268]                     else if (inherits(cond, "condition")) {
[09:31:27.268]                       if (!is.null(pattern)) {
[09:31:27.268]                         computeRestarts <- base::computeRestarts
[09:31:27.268]                         grepl <- base::grepl
[09:31:27.268]                         restarts <- computeRestarts(cond)
[09:31:27.268]                         for (restart in restarts) {
[09:31:27.268]                           name <- restart$name
[09:31:27.268]                           if (is.null(name)) 
[09:31:27.268]                             next
[09:31:27.268]                           if (!grepl(pattern, name)) 
[09:31:27.268]                             next
[09:31:27.268]                           invokeRestart(restart)
[09:31:27.268]                           muffled <- TRUE
[09:31:27.268]                           break
[09:31:27.268]                         }
[09:31:27.268]                       }
[09:31:27.268]                     }
[09:31:27.268]                     invisible(muffled)
[09:31:27.268]                   }
[09:31:27.268]                   muffleCondition(cond)
[09:31:27.268]                 })
[09:31:27.268]             }))
[09:31:27.268]             future::FutureResult(value = ...future.value$value, 
[09:31:27.268]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:27.268]                   ...future.rng), globalenv = if (FALSE) 
[09:31:27.268]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:27.268]                     ...future.globalenv.names))
[09:31:27.268]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:27.268]         }, condition = base::local({
[09:31:27.268]             c <- base::c
[09:31:27.268]             inherits <- base::inherits
[09:31:27.268]             invokeRestart <- base::invokeRestart
[09:31:27.268]             length <- base::length
[09:31:27.268]             list <- base::list
[09:31:27.268]             seq.int <- base::seq.int
[09:31:27.268]             signalCondition <- base::signalCondition
[09:31:27.268]             sys.calls <- base::sys.calls
[09:31:27.268]             `[[` <- base::`[[`
[09:31:27.268]             `+` <- base::`+`
[09:31:27.268]             `<<-` <- base::`<<-`
[09:31:27.268]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:27.268]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:27.268]                   3L)]
[09:31:27.268]             }
[09:31:27.268]             function(cond) {
[09:31:27.268]                 is_error <- inherits(cond, "error")
[09:31:27.268]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:27.268]                   NULL)
[09:31:27.268]                 if (is_error) {
[09:31:27.268]                   sessionInformation <- function() {
[09:31:27.268]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:27.268]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:27.268]                       search = base::search(), system = base::Sys.info())
[09:31:27.268]                   }
[09:31:27.268]                   ...future.conditions[[length(...future.conditions) + 
[09:31:27.268]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:27.268]                     cond$call), session = sessionInformation(), 
[09:31:27.268]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:27.268]                   signalCondition(cond)
[09:31:27.268]                 }
[09:31:27.268]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:27.268]                 "immediateCondition"))) {
[09:31:27.268]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:27.268]                   ...future.conditions[[length(...future.conditions) + 
[09:31:27.268]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:27.268]                   if (TRUE && !signal) {
[09:31:27.268]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:27.268]                     {
[09:31:27.268]                       inherits <- base::inherits
[09:31:27.268]                       invokeRestart <- base::invokeRestart
[09:31:27.268]                       is.null <- base::is.null
[09:31:27.268]                       muffled <- FALSE
[09:31:27.268]                       if (inherits(cond, "message")) {
[09:31:27.268]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:27.268]                         if (muffled) 
[09:31:27.268]                           invokeRestart("muffleMessage")
[09:31:27.268]                       }
[09:31:27.268]                       else if (inherits(cond, "warning")) {
[09:31:27.268]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:27.268]                         if (muffled) 
[09:31:27.268]                           invokeRestart("muffleWarning")
[09:31:27.268]                       }
[09:31:27.268]                       else if (inherits(cond, "condition")) {
[09:31:27.268]                         if (!is.null(pattern)) {
[09:31:27.268]                           computeRestarts <- base::computeRestarts
[09:31:27.268]                           grepl <- base::grepl
[09:31:27.268]                           restarts <- computeRestarts(cond)
[09:31:27.268]                           for (restart in restarts) {
[09:31:27.268]                             name <- restart$name
[09:31:27.268]                             if (is.null(name)) 
[09:31:27.268]                               next
[09:31:27.268]                             if (!grepl(pattern, name)) 
[09:31:27.268]                               next
[09:31:27.268]                             invokeRestart(restart)
[09:31:27.268]                             muffled <- TRUE
[09:31:27.268]                             break
[09:31:27.268]                           }
[09:31:27.268]                         }
[09:31:27.268]                       }
[09:31:27.268]                       invisible(muffled)
[09:31:27.268]                     }
[09:31:27.268]                     muffleCondition(cond, pattern = "^muffle")
[09:31:27.268]                   }
[09:31:27.268]                 }
[09:31:27.268]                 else {
[09:31:27.268]                   if (TRUE) {
[09:31:27.268]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:27.268]                     {
[09:31:27.268]                       inherits <- base::inherits
[09:31:27.268]                       invokeRestart <- base::invokeRestart
[09:31:27.268]                       is.null <- base::is.null
[09:31:27.268]                       muffled <- FALSE
[09:31:27.268]                       if (inherits(cond, "message")) {
[09:31:27.268]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:27.268]                         if (muffled) 
[09:31:27.268]                           invokeRestart("muffleMessage")
[09:31:27.268]                       }
[09:31:27.268]                       else if (inherits(cond, "warning")) {
[09:31:27.268]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:27.268]                         if (muffled) 
[09:31:27.268]                           invokeRestart("muffleWarning")
[09:31:27.268]                       }
[09:31:27.268]                       else if (inherits(cond, "condition")) {
[09:31:27.268]                         if (!is.null(pattern)) {
[09:31:27.268]                           computeRestarts <- base::computeRestarts
[09:31:27.268]                           grepl <- base::grepl
[09:31:27.268]                           restarts <- computeRestarts(cond)
[09:31:27.268]                           for (restart in restarts) {
[09:31:27.268]                             name <- restart$name
[09:31:27.268]                             if (is.null(name)) 
[09:31:27.268]                               next
[09:31:27.268]                             if (!grepl(pattern, name)) 
[09:31:27.268]                               next
[09:31:27.268]                             invokeRestart(restart)
[09:31:27.268]                             muffled <- TRUE
[09:31:27.268]                             break
[09:31:27.268]                           }
[09:31:27.268]                         }
[09:31:27.268]                       }
[09:31:27.268]                       invisible(muffled)
[09:31:27.268]                     }
[09:31:27.268]                     muffleCondition(cond, pattern = "^muffle")
[09:31:27.268]                   }
[09:31:27.268]                 }
[09:31:27.268]             }
[09:31:27.268]         }))
[09:31:27.268]     }, error = function(ex) {
[09:31:27.268]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:27.268]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:27.268]                 ...future.rng), started = ...future.startTime, 
[09:31:27.268]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:27.268]             version = "1.8"), class = "FutureResult")
[09:31:27.268]     }, finally = {
[09:31:27.268]         if (!identical(...future.workdir, getwd())) 
[09:31:27.268]             setwd(...future.workdir)
[09:31:27.268]         {
[09:31:27.268]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:27.268]                 ...future.oldOptions$nwarnings <- NULL
[09:31:27.268]             }
[09:31:27.268]             base::options(...future.oldOptions)
[09:31:27.268]             if (.Platform$OS.type == "windows") {
[09:31:27.268]                 old_names <- names(...future.oldEnvVars)
[09:31:27.268]                 envs <- base::Sys.getenv()
[09:31:27.268]                 names <- names(envs)
[09:31:27.268]                 common <- intersect(names, old_names)
[09:31:27.268]                 added <- setdiff(names, old_names)
[09:31:27.268]                 removed <- setdiff(old_names, names)
[09:31:27.268]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:27.268]                   envs[common]]
[09:31:27.268]                 NAMES <- toupper(changed)
[09:31:27.268]                 args <- list()
[09:31:27.268]                 for (kk in seq_along(NAMES)) {
[09:31:27.268]                   name <- changed[[kk]]
[09:31:27.268]                   NAME <- NAMES[[kk]]
[09:31:27.268]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:27.268]                     next
[09:31:27.268]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:27.268]                 }
[09:31:27.268]                 NAMES <- toupper(added)
[09:31:27.268]                 for (kk in seq_along(NAMES)) {
[09:31:27.268]                   name <- added[[kk]]
[09:31:27.268]                   NAME <- NAMES[[kk]]
[09:31:27.268]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:27.268]                     next
[09:31:27.268]                   args[[name]] <- ""
[09:31:27.268]                 }
[09:31:27.268]                 NAMES <- toupper(removed)
[09:31:27.268]                 for (kk in seq_along(NAMES)) {
[09:31:27.268]                   name <- removed[[kk]]
[09:31:27.268]                   NAME <- NAMES[[kk]]
[09:31:27.268]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:27.268]                     next
[09:31:27.268]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:27.268]                 }
[09:31:27.268]                 if (length(args) > 0) 
[09:31:27.268]                   base::do.call(base::Sys.setenv, args = args)
[09:31:27.268]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:27.268]             }
[09:31:27.268]             else {
[09:31:27.268]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:27.268]             }
[09:31:27.268]             {
[09:31:27.268]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:27.268]                   0L) {
[09:31:27.268]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:27.268]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:27.268]                   base::options(opts)
[09:31:27.268]                 }
[09:31:27.268]                 {
[09:31:27.268]                   {
[09:31:27.268]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:27.268]                     NULL
[09:31:27.268]                   }
[09:31:27.268]                   options(future.plan = NULL)
[09:31:27.268]                   if (is.na(NA_character_)) 
[09:31:27.268]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:27.268]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:27.268]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:27.268]                     .init = FALSE)
[09:31:27.268]                 }
[09:31:27.268]             }
[09:31:27.268]         }
[09:31:27.268]     })
[09:31:27.268]     if (TRUE) {
[09:31:27.268]         base::sink(type = "output", split = FALSE)
[09:31:27.268]         if (TRUE) {
[09:31:27.268]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:27.268]         }
[09:31:27.268]         else {
[09:31:27.268]             ...future.result["stdout"] <- base::list(NULL)
[09:31:27.268]         }
[09:31:27.268]         base::close(...future.stdout)
[09:31:27.268]         ...future.stdout <- NULL
[09:31:27.268]     }
[09:31:27.268]     ...future.result$conditions <- ...future.conditions
[09:31:27.268]     ...future.result$finished <- base::Sys.time()
[09:31:27.268]     ...future.result
[09:31:27.268] }
[09:31:27.270] Exporting 2 global objects (168 bytes) to cluster node #1 ...
[09:31:27.270] Exporting ‘env’ (56 bytes) to cluster node #1 ...
[09:31:27.271] Exporting ‘env’ (56 bytes) to cluster node #1 ... DONE
[09:31:27.271] Exporting ‘b’ (112 bytes) to cluster node #1 ...
[09:31:27.271] Exporting ‘b’ (112 bytes) to cluster node #1 ... DONE
[09:31:27.271] Exporting 2 global objects (168 bytes) to cluster node #1 ... DONE
[09:31:27.272] MultisessionFuture started
[09:31:27.272] - Launch lazy future ... done
[09:31:27.272] run() for ‘MultisessionFuture’ ... done
> ## Resolve future #4
> message(sprintf("y = %s\n", y))
[09:31:27.272] result() for ClusterFuture ...
[09:31:27.272] receiveMessageFromWorker() for ClusterFuture ...
[09:31:27.272] - Validating connection of MultisessionFuture
[09:31:27.313] - received message: FutureResult
[09:31:27.313] - Received FutureResult
[09:31:27.314] - Erased future from FutureRegistry
[09:31:27.314] result() for ClusterFuture ...
[09:31:27.314] - result already collected: FutureResult
[09:31:27.314] result() for ClusterFuture ... done
[09:31:27.314] receiveMessageFromWorker() for ClusterFuture ... done
[09:31:27.314] result() for ClusterFuture ... done
[09:31:27.314] result() for ClusterFuture ...
[09:31:27.314] - result already collected: FutureResult
[09:31:27.314] result() for ClusterFuture ... done
y = 5

> 
> message("*** Tricky use cases related to globals (part 2) ... DONE")
*** Tricky use cases related to globals (part 2) ... DONE
> 
> ## Cleanup
> setTimeLimit()
> source("incl/end.R")
[09:31:27.315] plan(): Setting new future strategy stack:
[09:31:27.315] List of future strategies:
[09:31:27.315] 1. FutureStrategy:
[09:31:27.315]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:27.315]    - tweaked: FALSE
[09:31:27.315]    - call: future::plan(oplan)
[09:31:27.316] plan(): nbrOfWorkers() = 1
> 
