
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:39:20.515] plan(): Setting new future strategy stack:
[17:39:20.516] List of future strategies:
[17:39:20.516] 1. sequential:
[17:39:20.516]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:20.516]    - tweaked: FALSE
[17:39:20.516]    - call: future::plan("sequential")
[17:39:20.527] plan(): nbrOfWorkers() = 1
> 
> message("*** Future class ...")
*** Future class ...
> 
> message("*** Future class - exception ...")
*** Future class - exception ...
> 
> f <- Future()
[17:39:20.541] getGlobalsAndPackages() ...
[17:39:20.541] 
[17:39:20.541] - globals: [0] <none>
[17:39:20.541] getGlobalsAndPackages() ... DONE
> print(f)
Future:
Label: ‘<none>’
Expression:
NULL
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2c25b728-8f02-e61d-0fe7-dde45c518816
Class: ‘Future’, ‘environment’
> 
> res <- tryCatch(value(f), error = identity)
[17:39:20.543] run() for ‘Future’ ...
[17:39:20.543] - state: ‘created’
[17:39:20.543] run() for ‘Future’ ... done
> print(res)
<simpleError: ‘future$lazy’ is not TRUE>
> stopifnot(inherits(res, "error"))
> 
> ## Invalid seed
> res <- tryCatch(f <- Future(42, seed = 1:2), error = identity)
> stopifnot(inherits(res, "error"))
> 
> ## When no packages are exported
> foo <- structure(function(...) { Future(1) }, class = "future")
> plan(foo)
[17:39:20.546] plan(): Setting new future strategy stack:
[17:39:20.546] List of future strategies:
[17:39:20.546] 1. future:
[17:39:20.546]    - args: function (..., workers = "<NULL>")
[17:39:20.546]    - tweaked: FALSE
[17:39:20.546]    - call: plan(foo)
[17:39:20.557] plan(): nbrOfWorkers() = Inf
> f <- Future()
[17:39:20.557] getGlobalsAndPackages() ...
[17:39:20.557] 
[17:39:20.557] - globals: [0] <none>
[17:39:20.558] getGlobalsAndPackages() ... DONE
> expr <- getExpression(f)
[17:39:20.558] Packages needed by the future expression (n = 0): <none>
[17:39:20.558] Packages needed by future strategies (n = 0): <none>
[17:39:20.559] {
[17:39:20.559]     {
[17:39:20.559]         {
[17:39:20.559]             ...future.startTime <- base::Sys.time()
[17:39:20.559]             {
[17:39:20.559]                 {
[17:39:20.559]                   {
[17:39:20.559]                     base::local({
[17:39:20.559]                       has_future <- base::requireNamespace("future", 
[17:39:20.559]                         quietly = TRUE)
[17:39:20.559]                       if (has_future) {
[17:39:20.559]                         ns <- base::getNamespace("future")
[17:39:20.559]                         version <- ns[[".package"]][["version"]]
[17:39:20.559]                         if (is.null(version)) 
[17:39:20.559]                           version <- utils::packageVersion("future")
[17:39:20.559]                       }
[17:39:20.559]                       else {
[17:39:20.559]                         version <- NULL
[17:39:20.559]                       }
[17:39:20.559]                       if (!has_future || version < "1.8.0") {
[17:39:20.559]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:20.559]                           "", base::R.version$version.string), 
[17:39:20.559]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:20.559]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:20.559]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:20.559]                             "release", "version")], collapse = " "), 
[17:39:20.559]                           hostname = base::Sys.info()[["nodename"]])
[17:39:20.559]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:20.559]                           info)
[17:39:20.559]                         info <- base::paste(info, collapse = "; ")
[17:39:20.559]                         if (!has_future) {
[17:39:20.559]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:20.559]                             info)
[17:39:20.559]                         }
[17:39:20.559]                         else {
[17:39:20.559]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:20.559]                             info, version)
[17:39:20.559]                         }
[17:39:20.559]                         base::stop(msg)
[17:39:20.559]                       }
[17:39:20.559]                     })
[17:39:20.559]                   }
[17:39:20.559]                   ...future.strategy.old <- future::plan("list")
[17:39:20.559]                   options(future.plan = NULL)
[17:39:20.559]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:20.559]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:20.559]                 }
[17:39:20.559]                 ...future.workdir <- getwd()
[17:39:20.559]             }
[17:39:20.559]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:20.559]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:20.559]         }
[17:39:20.559]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:20.559]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:20.559]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:20.559]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:20.559]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:20.559]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:20.559]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:20.559]             base::names(...future.oldOptions))
[17:39:20.559]     }
[17:39:20.559]     if (FALSE) {
[17:39:20.559]     }
[17:39:20.559]     else {
[17:39:20.559]         if (TRUE) {
[17:39:20.559]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:20.559]                 open = "w")
[17:39:20.559]         }
[17:39:20.559]         else {
[17:39:20.559]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:20.559]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:20.559]         }
[17:39:20.559]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:20.559]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:20.559]             base::sink(type = "output", split = FALSE)
[17:39:20.559]             base::close(...future.stdout)
[17:39:20.559]         }, add = TRUE)
[17:39:20.559]     }
[17:39:20.559]     ...future.frame <- base::sys.nframe()
[17:39:20.559]     ...future.conditions <- base::list()
[17:39:20.559]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:20.559]     if (FALSE) {
[17:39:20.559]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:20.559]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:20.559]     }
[17:39:20.559]     ...future.result <- base::tryCatch({
[17:39:20.559]         base::withCallingHandlers({
[17:39:20.559]             ...future.value <- base::withVisible(base::local(NULL))
[17:39:20.559]             future::FutureResult(value = ...future.value$value, 
[17:39:20.559]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:20.559]                   ...future.rng), globalenv = if (FALSE) 
[17:39:20.559]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:20.559]                     ...future.globalenv.names))
[17:39:20.559]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:20.559]         }, condition = base::local({
[17:39:20.559]             c <- base::c
[17:39:20.559]             inherits <- base::inherits
[17:39:20.559]             invokeRestart <- base::invokeRestart
[17:39:20.559]             length <- base::length
[17:39:20.559]             list <- base::list
[17:39:20.559]             seq.int <- base::seq.int
[17:39:20.559]             signalCondition <- base::signalCondition
[17:39:20.559]             sys.calls <- base::sys.calls
[17:39:20.559]             `[[` <- base::`[[`
[17:39:20.559]             `+` <- base::`+`
[17:39:20.559]             `<<-` <- base::`<<-`
[17:39:20.559]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:20.559]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:20.559]                   3L)]
[17:39:20.559]             }
[17:39:20.559]             function(cond) {
[17:39:20.559]                 is_error <- inherits(cond, "error")
[17:39:20.559]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:20.559]                   NULL)
[17:39:20.559]                 if (is_error) {
[17:39:20.559]                   sessionInformation <- function() {
[17:39:20.559]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:20.559]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:20.559]                       search = base::search(), system = base::Sys.info())
[17:39:20.559]                   }
[17:39:20.559]                   ...future.conditions[[length(...future.conditions) + 
[17:39:20.559]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:20.559]                     cond$call), session = sessionInformation(), 
[17:39:20.559]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:20.559]                   signalCondition(cond)
[17:39:20.559]                 }
[17:39:20.559]                 else if (!ignore && TRUE && inherits(cond, "condition")) {
[17:39:20.559]                   signal <- FALSE && inherits(cond, character(0))
[17:39:20.559]                   ...future.conditions[[length(...future.conditions) + 
[17:39:20.559]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:20.559]                   if (FALSE && !signal) {
[17:39:20.559]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:20.559]                     {
[17:39:20.559]                       inherits <- base::inherits
[17:39:20.559]                       invokeRestart <- base::invokeRestart
[17:39:20.559]                       is.null <- base::is.null
[17:39:20.559]                       muffled <- FALSE
[17:39:20.559]                       if (inherits(cond, "message")) {
[17:39:20.559]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:20.559]                         if (muffled) 
[17:39:20.559]                           invokeRestart("muffleMessage")
[17:39:20.559]                       }
[17:39:20.559]                       else if (inherits(cond, "warning")) {
[17:39:20.559]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:20.559]                         if (muffled) 
[17:39:20.559]                           invokeRestart("muffleWarning")
[17:39:20.559]                       }
[17:39:20.559]                       else if (inherits(cond, "condition")) {
[17:39:20.559]                         if (!is.null(pattern)) {
[17:39:20.559]                           computeRestarts <- base::computeRestarts
[17:39:20.559]                           grepl <- base::grepl
[17:39:20.559]                           restarts <- computeRestarts(cond)
[17:39:20.559]                           for (restart in restarts) {
[17:39:20.559]                             name <- restart$name
[17:39:20.559]                             if (is.null(name)) 
[17:39:20.559]                               next
[17:39:20.559]                             if (!grepl(pattern, name)) 
[17:39:20.559]                               next
[17:39:20.559]                             invokeRestart(restart)
[17:39:20.559]                             muffled <- TRUE
[17:39:20.559]                             break
[17:39:20.559]                           }
[17:39:20.559]                         }
[17:39:20.559]                       }
[17:39:20.559]                       invisible(muffled)
[17:39:20.559]                     }
[17:39:20.559]                     muffleCondition(cond, pattern = "^muffle")
[17:39:20.559]                   }
[17:39:20.559]                 }
[17:39:20.559]                 else {
[17:39:20.559]                   if (TRUE) {
[17:39:20.559]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:20.559]                     {
[17:39:20.559]                       inherits <- base::inherits
[17:39:20.559]                       invokeRestart <- base::invokeRestart
[17:39:20.559]                       is.null <- base::is.null
[17:39:20.559]                       muffled <- FALSE
[17:39:20.559]                       if (inherits(cond, "message")) {
[17:39:20.559]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:20.559]                         if (muffled) 
[17:39:20.559]                           invokeRestart("muffleMessage")
[17:39:20.559]                       }
[17:39:20.559]                       else if (inherits(cond, "warning")) {
[17:39:20.559]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:20.559]                         if (muffled) 
[17:39:20.559]                           invokeRestart("muffleWarning")
[17:39:20.559]                       }
[17:39:20.559]                       else if (inherits(cond, "condition")) {
[17:39:20.559]                         if (!is.null(pattern)) {
[17:39:20.559]                           computeRestarts <- base::computeRestarts
[17:39:20.559]                           grepl <- base::grepl
[17:39:20.559]                           restarts <- computeRestarts(cond)
[17:39:20.559]                           for (restart in restarts) {
[17:39:20.559]                             name <- restart$name
[17:39:20.559]                             if (is.null(name)) 
[17:39:20.559]                               next
[17:39:20.559]                             if (!grepl(pattern, name)) 
[17:39:20.559]                               next
[17:39:20.559]                             invokeRestart(restart)
[17:39:20.559]                             muffled <- TRUE
[17:39:20.559]                             break
[17:39:20.559]                           }
[17:39:20.559]                         }
[17:39:20.559]                       }
[17:39:20.559]                       invisible(muffled)
[17:39:20.559]                     }
[17:39:20.559]                     muffleCondition(cond, pattern = "^muffle")
[17:39:20.559]                   }
[17:39:20.559]                 }
[17:39:20.559]             }
[17:39:20.559]         }))
[17:39:20.559]     }, error = function(ex) {
[17:39:20.559]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:20.559]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:20.559]                 ...future.rng), started = ...future.startTime, 
[17:39:20.559]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:20.559]             version = "1.8"), class = "FutureResult")
[17:39:20.559]     }, finally = {
[17:39:20.559]         if (!identical(...future.workdir, getwd())) 
[17:39:20.559]             setwd(...future.workdir)
[17:39:20.559]         {
[17:39:20.559]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:20.559]                 ...future.oldOptions$nwarnings <- NULL
[17:39:20.559]             }
[17:39:20.559]             base::options(...future.oldOptions)
[17:39:20.559]             if (.Platform$OS.type == "windows") {
[17:39:20.559]                 old_names <- names(...future.oldEnvVars)
[17:39:20.559]                 envs <- base::Sys.getenv()
[17:39:20.559]                 names <- names(envs)
[17:39:20.559]                 common <- intersect(names, old_names)
[17:39:20.559]                 added <- setdiff(names, old_names)
[17:39:20.559]                 removed <- setdiff(old_names, names)
[17:39:20.559]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:20.559]                   envs[common]]
[17:39:20.559]                 NAMES <- toupper(changed)
[17:39:20.559]                 args <- list()
[17:39:20.559]                 for (kk in seq_along(NAMES)) {
[17:39:20.559]                   name <- changed[[kk]]
[17:39:20.559]                   NAME <- NAMES[[kk]]
[17:39:20.559]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:20.559]                     next
[17:39:20.559]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:20.559]                 }
[17:39:20.559]                 NAMES <- toupper(added)
[17:39:20.559]                 for (kk in seq_along(NAMES)) {
[17:39:20.559]                   name <- added[[kk]]
[17:39:20.559]                   NAME <- NAMES[[kk]]
[17:39:20.559]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:20.559]                     next
[17:39:20.559]                   args[[name]] <- ""
[17:39:20.559]                 }
[17:39:20.559]                 NAMES <- toupper(removed)
[17:39:20.559]                 for (kk in seq_along(NAMES)) {
[17:39:20.559]                   name <- removed[[kk]]
[17:39:20.559]                   NAME <- NAMES[[kk]]
[17:39:20.559]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:20.559]                     next
[17:39:20.559]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:20.559]                 }
[17:39:20.559]                 if (length(args) > 0) 
[17:39:20.559]                   base::do.call(base::Sys.setenv, args = args)
[17:39:20.559]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:20.559]             }
[17:39:20.559]             else {
[17:39:20.559]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:20.559]             }
[17:39:20.559]             {
[17:39:20.559]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:20.559]                   0L) {
[17:39:20.559]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:20.559]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:20.559]                   base::options(opts)
[17:39:20.559]                 }
[17:39:20.559]                 {
[17:39:20.559]                   NULL
[17:39:20.559]                   options(future.plan = NULL)
[17:39:20.559]                   if (is.na(NA_character_)) 
[17:39:20.559]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:20.559]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:20.559]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:20.559]                     .init = FALSE)
[17:39:20.559]                 }
[17:39:20.559]             }
[17:39:20.559]         }
[17:39:20.559]     })
[17:39:20.559]     if (TRUE) {
[17:39:20.559]         base::sink(type = "output", split = FALSE)
[17:39:20.559]         if (TRUE) {
[17:39:20.559]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:20.559]         }
[17:39:20.559]         else {
[17:39:20.559]             ...future.result["stdout"] <- base::list(NULL)
[17:39:20.559]         }
[17:39:20.559]         base::close(...future.stdout)
[17:39:20.559]         ...future.stdout <- NULL
[17:39:20.559]     }
[17:39:20.559]     ...future.result$conditions <- ...future.conditions
[17:39:20.559]     ...future.result$finished <- base::Sys.time()
[17:39:20.559]     ...future.result
[17:39:20.559] }
> print(expr)
{
    {
        {
            ...future.startTime <- base::Sys.time()
            {
                {
                  {
                    base::local({
                      has_future <- base::requireNamespace("future", 
                        quietly = TRUE)
                      if (has_future) {
                        ns <- base::getNamespace("future")
                        version <- ns[[".package"]][["version"]]
                        if (is.null(version)) 
                          version <- utils::packageVersion("future")
                      }
                      else {
                        version <- NULL
                      }
                      if (!has_future || version < "1.8.0") {
                        info <- base::c(r_version = base::gsub("R version ", 
                          "", base::R.version$version.string), 
                          platform = base::sprintf("%s (%s-bit)", 
                            base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
                          os = base::paste(base::Sys.info()[base::c("sysname", 
                            "release", "version")], collapse = " "), 
                          hostname = base::Sys.info()[["nodename"]])
                        info <- base::sprintf("%s: %s", base::names(info), 
                          info)
                        info <- base::paste(info, collapse = "; ")
                        if (!has_future) {
                          msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
                            info)
                        }
                        else {
                          msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
                            info, version)
                        }
                        base::stop(msg)
                      }
                    })
                  }
                  ...future.strategy.old <- future::plan("list")
                  options(future.plan = NULL)
                  Sys.unsetenv("R_FUTURE_PLAN")
                  future::plan("default", .cleanup = FALSE, .init = FALSE)
                }
                ...future.workdir <- getwd()
            }
            ...future.oldOptions <- base::as.list(base::.Options)
            ...future.oldEnvVars <- base::Sys.getenv()
        }
        base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
            future.globals.maxSize = NULL, future.globals.method = NULL, 
            future.globals.onMissing = NULL, future.globals.onReference = NULL, 
            future.globals.resolve = NULL, future.resolve.recursive = NULL, 
            future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
            future.stdout.windows.reencode = NULL, width = 80L)
        ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
            base::names(...future.oldOptions))
    }
    if (FALSE) {
    }
    else {
        if (TRUE) {
            ...future.stdout <- base::rawConnection(base::raw(0L), 
                open = "w")
        }
        else {
            ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
                windows = "NUL", "/dev/null"), open = "w")
        }
        base::sink(...future.stdout, type = "output", split = FALSE)
        base::on.exit(if (!base::is.null(...future.stdout)) {
            base::sink(type = "output", split = FALSE)
            base::close(...future.stdout)
        }, add = TRUE)
    }
    ...future.frame <- base::sys.nframe()
    ...future.conditions <- base::list()
    ...future.rng <- base::globalenv()$.Random.seed
    if (FALSE) {
        ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
            "...future.value", "...future.globalenv.names", ".Random.seed")
    }
    ...future.result <- base::tryCatch({
        base::withCallingHandlers({
            ...future.value <- base::withVisible(base::local(NULL))
            future::FutureResult(value = ...future.value$value, 
                visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
                  ...future.rng), globalenv = if (FALSE) 
                  list(added = base::setdiff(base::names(base::.GlobalEnv), 
                    ...future.globalenv.names))
                else NULL, started = ...future.startTime, version = "1.8")
        }, condition = base::local({
            c <- base::c
            inherits <- base::inherits
            invokeRestart <- base::invokeRestart
            length <- base::length
            list <- base::list
            seq.int <- base::seq.int
            signalCondition <- base::signalCondition
            sys.calls <- base::sys.calls
            `[[` <- base::`[[`
            `+` <- base::`+`
            `<<-` <- base::`<<-`
            sysCalls <- function(calls = sys.calls(), from = 1L) {
                calls[seq.int(from = from + 12L, to = length(calls) - 
                  3L)]
            }
            function(cond) {
                is_error <- inherits(cond, "error")
                ignore <- !is_error && !is.null(NULL) && inherits(cond, 
                  NULL)
                if (is_error) {
                  sessionInformation <- function() {
                    list(r = base::R.Version(), locale = base::Sys.getlocale(), 
                      rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
                      search = base::search(), system = base::Sys.info())
                  }
                  ...future.conditions[[length(...future.conditions) + 
                    1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
                    cond$call), session = sessionInformation(), 
                    timestamp = base::Sys.time(), signaled = 0L)
                  signalCondition(cond)
                }
                else if (!ignore && TRUE && inherits(cond, "condition")) {
                  signal <- FALSE && inherits(cond, character(0))
                  ...future.conditions[[length(...future.conditions) + 
                    1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
                  if (FALSE && !signal) {
                    muffleCondition <- function (cond, pattern = "^muffle") 
                    {
                      inherits <- base::inherits
                      invokeRestart <- base::invokeRestart
                      is.null <- base::is.null
                      muffled <- FALSE
                      if (inherits(cond, "message")) {
                        muffled <- grepl(pattern, "muffleMessage")
                        if (muffled) 
                          invokeRestart("muffleMessage")
                      }
                      else if (inherits(cond, "warning")) {
                        muffled <- grepl(pattern, "muffleWarning")
                        if (muffled) 
                          invokeRestart("muffleWarning")
                      }
                      else if (inherits(cond, "condition")) {
                        if (!is.null(pattern)) {
                          computeRestarts <- base::computeRestarts
                          grepl <- base::grepl
                          restarts <- computeRestarts(cond)
                          for (restart in restarts) {
                            name <- restart$name
                            if (is.null(name)) 
                              next
                            if (!grepl(pattern, name)) 
                              next
                            invokeRestart(restart)
                            muffled <- TRUE
                            break
                          }
                        }
                      }
                      invisible(muffled)
                    }
                    muffleCondition(cond, pattern = "^muffle")
                  }
                }
                else {
                  if (TRUE) {
                    muffleCondition <- function (cond, pattern = "^muffle") 
                    {
                      inherits <- base::inherits
                      invokeRestart <- base::invokeRestart
                      is.null <- base::is.null
                      muffled <- FALSE
                      if (inherits(cond, "message")) {
                        muffled <- grepl(pattern, "muffleMessage")
                        if (muffled) 
                          invokeRestart("muffleMessage")
                      }
                      else if (inherits(cond, "warning")) {
                        muffled <- grepl(pattern, "muffleWarning")
                        if (muffled) 
                          invokeRestart("muffleWarning")
                      }
                      else if (inherits(cond, "condition")) {
                        if (!is.null(pattern)) {
                          computeRestarts <- base::computeRestarts
                          grepl <- base::grepl
                          restarts <- computeRestarts(cond)
                          for (restart in restarts) {
                            name <- restart$name
                            if (is.null(name)) 
                              next
                            if (!grepl(pattern, name)) 
                              next
                            invokeRestart(restart)
                            muffled <- TRUE
                            break
                          }
                        }
                      }
                      invisible(muffled)
                    }
                    muffleCondition(cond, pattern = "^muffle")
                  }
                }
            }
        }))
    }, error = function(ex) {
        base::structure(base::list(value = NULL, visible = NULL, 
            conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
                ...future.rng), started = ...future.startTime, 
            finished = Sys.time(), session_uuid = NA_character_, 
            version = "1.8"), class = "FutureResult")
    }, finally = {
        if (!identical(...future.workdir, getwd())) 
            setwd(...future.workdir)
        {
            if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
                ...future.oldOptions$nwarnings <- NULL
            }
            base::options(...future.oldOptions)
            if (.Platform$OS.type == "windows") {
                old_names <- names(...future.oldEnvVars)
                envs <- base::Sys.getenv()
                names <- names(envs)
                common <- intersect(names, old_names)
                added <- setdiff(names, old_names)
                removed <- setdiff(old_names, names)
                changed <- common[...future.oldEnvVars[common] != 
                  envs[common]]
                NAMES <- toupper(changed)
                args <- list()
                for (kk in seq_along(NAMES)) {
                  name <- changed[[kk]]
                  NAME <- NAMES[[kk]]
                  if (name != NAME && is.element(NAME, old_names)) 
                    next
                  args[[name]] <- ...future.oldEnvVars[[name]]
                }
                NAMES <- toupper(added)
                for (kk in seq_along(NAMES)) {
                  name <- added[[kk]]
                  NAME <- NAMES[[kk]]
                  if (name != NAME && is.element(NAME, old_names)) 
                    next
                  args[[name]] <- ""
                }
                NAMES <- toupper(removed)
                for (kk in seq_along(NAMES)) {
                  name <- removed[[kk]]
                  NAME <- NAMES[[kk]]
                  if (name != NAME && is.element(NAME, old_names)) 
                    next
                  args[[name]] <- ...future.oldEnvVars[[name]]
                }
                if (length(args) > 0) 
                  base::do.call(base::Sys.setenv, args = args)
                args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
            }
            else {
                base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
            }
            {
                if (base::length(...future.futureOptionsAdded) > 
                  0L) {
                  opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
                  base::names(opts) <- ...future.futureOptionsAdded
                  base::options(opts)
                }
                {
                  NULL
                  options(future.plan = NULL)
                  if (is.na(NA_character_)) 
                    Sys.unsetenv("R_FUTURE_PLAN")
                  else Sys.setenv(R_FUTURE_PLAN = NA_character_)
                  future::plan(...future.strategy.old, .cleanup = FALSE, 
                    .init = FALSE)
                }
            }
        }
    })
    if (TRUE) {
        base::sink(type = "output", split = FALSE)
        if (TRUE) {
            ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
        }
        else {
            ...future.result["stdout"] <- base::list(NULL)
        }
        base::close(...future.stdout)
        ...future.stdout <- NULL
    }
    ...future.result$conditions <- ...future.conditions
    ...future.result$finished <- base::Sys.time()
    ...future.result
}
> stopifnot(is.call(expr))
> 
> clazzes <- list(
+   sequential = SequentialFuture,
+   multisession = function(...) MultisessionFuture(..., workers = 2L),
+   sequential = SequentialFuture
+ )
> if (supportsMulticore()) {
+   clazzes$multicore = function(...) MulticoreFuture(..., workers = 2L)
+ }
> 
> for (clazz in clazzes) {
+   ## Calling run() more than once
+   f <- clazz({ 42L })
+   print(f)
+   run(f)
+   res <- tryCatch(run(f), error = identity)
+   stopifnot(inherits(res, "error"))
+   v <- value(f)
+   print(v)
+   stopifnot(v == 42L)
+ 
+   ## Call value() without run()
+   f <- clazz({ 42L })
+   v <- value(f)
+   print(v)
+   stopifnot(v == 42L)
+ }
[17:39:20.569] getGlobalsAndPackages() ...
[17:39:20.569] Searching for globals...
[17:39:20.575] - globals found: [1] ‘{’
[17:39:20.575] Searching for globals ... DONE
[17:39:20.575] Resolving globals: FALSE
[17:39:20.575] 
[17:39:20.575] 
[17:39:20.576] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2c25b728-8f02-e61d-0fe7-dde45c518816
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:20.577] Packages needed by the future expression (n = 0): <none>
[17:39:20.577] Packages needed by future strategies (n = 0): <none>
[17:39:20.577] {
[17:39:20.577]     {
[17:39:20.577]         {
[17:39:20.577]             ...future.startTime <- base::Sys.time()
[17:39:20.577]             {
[17:39:20.577]                 {
[17:39:20.577]                   {
[17:39:20.577]                     base::local({
[17:39:20.577]                       has_future <- base::requireNamespace("future", 
[17:39:20.577]                         quietly = TRUE)
[17:39:20.577]                       if (has_future) {
[17:39:20.577]                         ns <- base::getNamespace("future")
[17:39:20.577]                         version <- ns[[".package"]][["version"]]
[17:39:20.577]                         if (is.null(version)) 
[17:39:20.577]                           version <- utils::packageVersion("future")
[17:39:20.577]                       }
[17:39:20.577]                       else {
[17:39:20.577]                         version <- NULL
[17:39:20.577]                       }
[17:39:20.577]                       if (!has_future || version < "1.8.0") {
[17:39:20.577]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:20.577]                           "", base::R.version$version.string), 
[17:39:20.577]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:20.577]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:20.577]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:20.577]                             "release", "version")], collapse = " "), 
[17:39:20.577]                           hostname = base::Sys.info()[["nodename"]])
[17:39:20.577]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:20.577]                           info)
[17:39:20.577]                         info <- base::paste(info, collapse = "; ")
[17:39:20.577]                         if (!has_future) {
[17:39:20.577]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:20.577]                             info)
[17:39:20.577]                         }
[17:39:20.577]                         else {
[17:39:20.577]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:20.577]                             info, version)
[17:39:20.577]                         }
[17:39:20.577]                         base::stop(msg)
[17:39:20.577]                       }
[17:39:20.577]                     })
[17:39:20.577]                   }
[17:39:20.577]                   ...future.strategy.old <- future::plan("list")
[17:39:20.577]                   options(future.plan = NULL)
[17:39:20.577]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:20.577]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:20.577]                 }
[17:39:20.577]                 ...future.workdir <- getwd()
[17:39:20.577]             }
[17:39:20.577]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:20.577]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:20.577]         }
[17:39:20.577]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:20.577]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:20.577]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:20.577]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:20.577]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:20.577]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:20.577]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:20.577]             base::names(...future.oldOptions))
[17:39:20.577]     }
[17:39:20.577]     if (FALSE) {
[17:39:20.577]     }
[17:39:20.577]     else {
[17:39:20.577]         if (TRUE) {
[17:39:20.577]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:20.577]                 open = "w")
[17:39:20.577]         }
[17:39:20.577]         else {
[17:39:20.577]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:20.577]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:20.577]         }
[17:39:20.577]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:20.577]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:20.577]             base::sink(type = "output", split = FALSE)
[17:39:20.577]             base::close(...future.stdout)
[17:39:20.577]         }, add = TRUE)
[17:39:20.577]     }
[17:39:20.577]     ...future.frame <- base::sys.nframe()
[17:39:20.577]     ...future.conditions <- base::list()
[17:39:20.577]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:20.577]     if (FALSE) {
[17:39:20.577]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:20.577]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:20.577]     }
[17:39:20.577]     ...future.result <- base::tryCatch({
[17:39:20.577]         base::withCallingHandlers({
[17:39:20.577]             ...future.value <- base::withVisible(base::local({
[17:39:20.577]                 42L
[17:39:20.577]             }))
[17:39:20.577]             future::FutureResult(value = ...future.value$value, 
[17:39:20.577]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:20.577]                   ...future.rng), globalenv = if (FALSE) 
[17:39:20.577]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:20.577]                     ...future.globalenv.names))
[17:39:20.577]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:20.577]         }, condition = base::local({
[17:39:20.577]             c <- base::c
[17:39:20.577]             inherits <- base::inherits
[17:39:20.577]             invokeRestart <- base::invokeRestart
[17:39:20.577]             length <- base::length
[17:39:20.577]             list <- base::list
[17:39:20.577]             seq.int <- base::seq.int
[17:39:20.577]             signalCondition <- base::signalCondition
[17:39:20.577]             sys.calls <- base::sys.calls
[17:39:20.577]             `[[` <- base::`[[`
[17:39:20.577]             `+` <- base::`+`
[17:39:20.577]             `<<-` <- base::`<<-`
[17:39:20.577]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:20.577]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:20.577]                   3L)]
[17:39:20.577]             }
[17:39:20.577]             function(cond) {
[17:39:20.577]                 is_error <- inherits(cond, "error")
[17:39:20.577]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:20.577]                   NULL)
[17:39:20.577]                 if (is_error) {
[17:39:20.577]                   sessionInformation <- function() {
[17:39:20.577]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:20.577]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:20.577]                       search = base::search(), system = base::Sys.info())
[17:39:20.577]                   }
[17:39:20.577]                   ...future.conditions[[length(...future.conditions) + 
[17:39:20.577]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:20.577]                     cond$call), session = sessionInformation(), 
[17:39:20.577]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:20.577]                   signalCondition(cond)
[17:39:20.577]                 }
[17:39:20.577]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:20.577]                 "immediateCondition"))) {
[17:39:20.577]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:20.577]                   ...future.conditions[[length(...future.conditions) + 
[17:39:20.577]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:20.577]                   if (TRUE && !signal) {
[17:39:20.577]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:20.577]                     {
[17:39:20.577]                       inherits <- base::inherits
[17:39:20.577]                       invokeRestart <- base::invokeRestart
[17:39:20.577]                       is.null <- base::is.null
[17:39:20.577]                       muffled <- FALSE
[17:39:20.577]                       if (inherits(cond, "message")) {
[17:39:20.577]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:20.577]                         if (muffled) 
[17:39:20.577]                           invokeRestart("muffleMessage")
[17:39:20.577]                       }
[17:39:20.577]                       else if (inherits(cond, "warning")) {
[17:39:20.577]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:20.577]                         if (muffled) 
[17:39:20.577]                           invokeRestart("muffleWarning")
[17:39:20.577]                       }
[17:39:20.577]                       else if (inherits(cond, "condition")) {
[17:39:20.577]                         if (!is.null(pattern)) {
[17:39:20.577]                           computeRestarts <- base::computeRestarts
[17:39:20.577]                           grepl <- base::grepl
[17:39:20.577]                           restarts <- computeRestarts(cond)
[17:39:20.577]                           for (restart in restarts) {
[17:39:20.577]                             name <- restart$name
[17:39:20.577]                             if (is.null(name)) 
[17:39:20.577]                               next
[17:39:20.577]                             if (!grepl(pattern, name)) 
[17:39:20.577]                               next
[17:39:20.577]                             invokeRestart(restart)
[17:39:20.577]                             muffled <- TRUE
[17:39:20.577]                             break
[17:39:20.577]                           }
[17:39:20.577]                         }
[17:39:20.577]                       }
[17:39:20.577]                       invisible(muffled)
[17:39:20.577]                     }
[17:39:20.577]                     muffleCondition(cond, pattern = "^muffle")
[17:39:20.577]                   }
[17:39:20.577]                 }
[17:39:20.577]                 else {
[17:39:20.577]                   if (TRUE) {
[17:39:20.577]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:20.577]                     {
[17:39:20.577]                       inherits <- base::inherits
[17:39:20.577]                       invokeRestart <- base::invokeRestart
[17:39:20.577]                       is.null <- base::is.null
[17:39:20.577]                       muffled <- FALSE
[17:39:20.577]                       if (inherits(cond, "message")) {
[17:39:20.577]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:20.577]                         if (muffled) 
[17:39:20.577]                           invokeRestart("muffleMessage")
[17:39:20.577]                       }
[17:39:20.577]                       else if (inherits(cond, "warning")) {
[17:39:20.577]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:20.577]                         if (muffled) 
[17:39:20.577]                           invokeRestart("muffleWarning")
[17:39:20.577]                       }
[17:39:20.577]                       else if (inherits(cond, "condition")) {
[17:39:20.577]                         if (!is.null(pattern)) {
[17:39:20.577]                           computeRestarts <- base::computeRestarts
[17:39:20.577]                           grepl <- base::grepl
[17:39:20.577]                           restarts <- computeRestarts(cond)
[17:39:20.577]                           for (restart in restarts) {
[17:39:20.577]                             name <- restart$name
[17:39:20.577]                             if (is.null(name)) 
[17:39:20.577]                               next
[17:39:20.577]                             if (!grepl(pattern, name)) 
[17:39:20.577]                               next
[17:39:20.577]                             invokeRestart(restart)
[17:39:20.577]                             muffled <- TRUE
[17:39:20.577]                             break
[17:39:20.577]                           }
[17:39:20.577]                         }
[17:39:20.577]                       }
[17:39:20.577]                       invisible(muffled)
[17:39:20.577]                     }
[17:39:20.577]                     muffleCondition(cond, pattern = "^muffle")
[17:39:20.577]                   }
[17:39:20.577]                 }
[17:39:20.577]             }
[17:39:20.577]         }))
[17:39:20.577]     }, error = function(ex) {
[17:39:20.577]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:20.577]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:20.577]                 ...future.rng), started = ...future.startTime, 
[17:39:20.577]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:20.577]             version = "1.8"), class = "FutureResult")
[17:39:20.577]     }, finally = {
[17:39:20.577]         if (!identical(...future.workdir, getwd())) 
[17:39:20.577]             setwd(...future.workdir)
[17:39:20.577]         {
[17:39:20.577]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:20.577]                 ...future.oldOptions$nwarnings <- NULL
[17:39:20.577]             }
[17:39:20.577]             base::options(...future.oldOptions)
[17:39:20.577]             if (.Platform$OS.type == "windows") {
[17:39:20.577]                 old_names <- names(...future.oldEnvVars)
[17:39:20.577]                 envs <- base::Sys.getenv()
[17:39:20.577]                 names <- names(envs)
[17:39:20.577]                 common <- intersect(names, old_names)
[17:39:20.577]                 added <- setdiff(names, old_names)
[17:39:20.577]                 removed <- setdiff(old_names, names)
[17:39:20.577]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:20.577]                   envs[common]]
[17:39:20.577]                 NAMES <- toupper(changed)
[17:39:20.577]                 args <- list()
[17:39:20.577]                 for (kk in seq_along(NAMES)) {
[17:39:20.577]                   name <- changed[[kk]]
[17:39:20.577]                   NAME <- NAMES[[kk]]
[17:39:20.577]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:20.577]                     next
[17:39:20.577]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:20.577]                 }
[17:39:20.577]                 NAMES <- toupper(added)
[17:39:20.577]                 for (kk in seq_along(NAMES)) {
[17:39:20.577]                   name <- added[[kk]]
[17:39:20.577]                   NAME <- NAMES[[kk]]
[17:39:20.577]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:20.577]                     next
[17:39:20.577]                   args[[name]] <- ""
[17:39:20.577]                 }
[17:39:20.577]                 NAMES <- toupper(removed)
[17:39:20.577]                 for (kk in seq_along(NAMES)) {
[17:39:20.577]                   name <- removed[[kk]]
[17:39:20.577]                   NAME <- NAMES[[kk]]
[17:39:20.577]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:20.577]                     next
[17:39:20.577]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:20.577]                 }
[17:39:20.577]                 if (length(args) > 0) 
[17:39:20.577]                   base::do.call(base::Sys.setenv, args = args)
[17:39:20.577]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:20.577]             }
[17:39:20.577]             else {
[17:39:20.577]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:20.577]             }
[17:39:20.577]             {
[17:39:20.577]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:20.577]                   0L) {
[17:39:20.577]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:20.577]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:20.577]                   base::options(opts)
[17:39:20.577]                 }
[17:39:20.577]                 {
[17:39:20.577]                   {
[17:39:20.577]                     NULL
[17:39:20.577]                     RNGkind("Mersenne-Twister")
[17:39:20.577]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:20.577]                       inherits = FALSE)
[17:39:20.577]                   }
[17:39:20.577]                   options(future.plan = NULL)
[17:39:20.577]                   if (is.na(NA_character_)) 
[17:39:20.577]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:20.577]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:20.577]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:20.577]                     .init = FALSE)
[17:39:20.577]                 }
[17:39:20.577]             }
[17:39:20.577]         }
[17:39:20.577]     })
[17:39:20.577]     if (TRUE) {
[17:39:20.577]         base::sink(type = "output", split = FALSE)
[17:39:20.577]         if (TRUE) {
[17:39:20.577]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:20.577]         }
[17:39:20.577]         else {
[17:39:20.577]             ...future.result["stdout"] <- base::list(NULL)
[17:39:20.577]         }
[17:39:20.577]         base::close(...future.stdout)
[17:39:20.577]         ...future.stdout <- NULL
[17:39:20.577]     }
[17:39:20.577]     ...future.result$conditions <- ...future.conditions
[17:39:20.577]     ...future.result$finished <- base::Sys.time()
[17:39:20.577]     ...future.result
[17:39:20.577] }
[17:39:20.579] plan(): Setting new future strategy stack:
[17:39:20.579] List of future strategies:
[17:39:20.579] 1. sequential:
[17:39:20.579]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:20.579]    - tweaked: FALSE
[17:39:20.579]    - call: NULL
[17:39:20.579] plan(): nbrOfWorkers() = 1
[17:39:20.581] plan(): Setting new future strategy stack:
[17:39:20.581] List of future strategies:
[17:39:20.581] 1. future:
[17:39:20.581]    - args: function (..., workers = "<NULL>")
[17:39:20.581]    - tweaked: FALSE
[17:39:20.581]    - call: plan(foo)
[17:39:20.581] plan(): nbrOfWorkers() = Inf
[17:39:20.581] SequentialFuture started (and completed)
[1] 42
[17:39:20.582] getGlobalsAndPackages() ...
[17:39:20.582] Searching for globals...
[17:39:20.583] - globals found: [1] ‘{’
[17:39:20.583] Searching for globals ... DONE
[17:39:20.583] Resolving globals: FALSE
[17:39:20.583] 
[17:39:20.583] 
[17:39:20.583] getGlobalsAndPackages() ... DONE
[17:39:20.584] Packages needed by the future expression (n = 0): <none>
[17:39:20.584] Packages needed by future strategies (n = 0): <none>
[17:39:20.584] {
[17:39:20.584]     {
[17:39:20.584]         {
[17:39:20.584]             ...future.startTime <- base::Sys.time()
[17:39:20.584]             {
[17:39:20.584]                 {
[17:39:20.584]                   {
[17:39:20.584]                     base::local({
[17:39:20.584]                       has_future <- base::requireNamespace("future", 
[17:39:20.584]                         quietly = TRUE)
[17:39:20.584]                       if (has_future) {
[17:39:20.584]                         ns <- base::getNamespace("future")
[17:39:20.584]                         version <- ns[[".package"]][["version"]]
[17:39:20.584]                         if (is.null(version)) 
[17:39:20.584]                           version <- utils::packageVersion("future")
[17:39:20.584]                       }
[17:39:20.584]                       else {
[17:39:20.584]                         version <- NULL
[17:39:20.584]                       }
[17:39:20.584]                       if (!has_future || version < "1.8.0") {
[17:39:20.584]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:20.584]                           "", base::R.version$version.string), 
[17:39:20.584]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:20.584]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:20.584]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:20.584]                             "release", "version")], collapse = " "), 
[17:39:20.584]                           hostname = base::Sys.info()[["nodename"]])
[17:39:20.584]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:20.584]                           info)
[17:39:20.584]                         info <- base::paste(info, collapse = "; ")
[17:39:20.584]                         if (!has_future) {
[17:39:20.584]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:20.584]                             info)
[17:39:20.584]                         }
[17:39:20.584]                         else {
[17:39:20.584]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:20.584]                             info, version)
[17:39:20.584]                         }
[17:39:20.584]                         base::stop(msg)
[17:39:20.584]                       }
[17:39:20.584]                     })
[17:39:20.584]                   }
[17:39:20.584]                   ...future.strategy.old <- future::plan("list")
[17:39:20.584]                   options(future.plan = NULL)
[17:39:20.584]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:20.584]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:20.584]                 }
[17:39:20.584]                 ...future.workdir <- getwd()
[17:39:20.584]             }
[17:39:20.584]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:20.584]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:20.584]         }
[17:39:20.584]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:20.584]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:20.584]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:20.584]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:20.584]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:20.584]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:20.584]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:20.584]             base::names(...future.oldOptions))
[17:39:20.584]     }
[17:39:20.584]     if (FALSE) {
[17:39:20.584]     }
[17:39:20.584]     else {
[17:39:20.584]         if (TRUE) {
[17:39:20.584]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:20.584]                 open = "w")
[17:39:20.584]         }
[17:39:20.584]         else {
[17:39:20.584]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:20.584]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:20.584]         }
[17:39:20.584]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:20.584]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:20.584]             base::sink(type = "output", split = FALSE)
[17:39:20.584]             base::close(...future.stdout)
[17:39:20.584]         }, add = TRUE)
[17:39:20.584]     }
[17:39:20.584]     ...future.frame <- base::sys.nframe()
[17:39:20.584]     ...future.conditions <- base::list()
[17:39:20.584]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:20.584]     if (FALSE) {
[17:39:20.584]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:20.584]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:20.584]     }
[17:39:20.584]     ...future.result <- base::tryCatch({
[17:39:20.584]         base::withCallingHandlers({
[17:39:20.584]             ...future.value <- base::withVisible(base::local({
[17:39:20.584]                 42L
[17:39:20.584]             }))
[17:39:20.584]             future::FutureResult(value = ...future.value$value, 
[17:39:20.584]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:20.584]                   ...future.rng), globalenv = if (FALSE) 
[17:39:20.584]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:20.584]                     ...future.globalenv.names))
[17:39:20.584]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:20.584]         }, condition = base::local({
[17:39:20.584]             c <- base::c
[17:39:20.584]             inherits <- base::inherits
[17:39:20.584]             invokeRestart <- base::invokeRestart
[17:39:20.584]             length <- base::length
[17:39:20.584]             list <- base::list
[17:39:20.584]             seq.int <- base::seq.int
[17:39:20.584]             signalCondition <- base::signalCondition
[17:39:20.584]             sys.calls <- base::sys.calls
[17:39:20.584]             `[[` <- base::`[[`
[17:39:20.584]             `+` <- base::`+`
[17:39:20.584]             `<<-` <- base::`<<-`
[17:39:20.584]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:20.584]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:20.584]                   3L)]
[17:39:20.584]             }
[17:39:20.584]             function(cond) {
[17:39:20.584]                 is_error <- inherits(cond, "error")
[17:39:20.584]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:20.584]                   NULL)
[17:39:20.584]                 if (is_error) {
[17:39:20.584]                   sessionInformation <- function() {
[17:39:20.584]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:20.584]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:20.584]                       search = base::search(), system = base::Sys.info())
[17:39:20.584]                   }
[17:39:20.584]                   ...future.conditions[[length(...future.conditions) + 
[17:39:20.584]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:20.584]                     cond$call), session = sessionInformation(), 
[17:39:20.584]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:20.584]                   signalCondition(cond)
[17:39:20.584]                 }
[17:39:20.584]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:20.584]                 "immediateCondition"))) {
[17:39:20.584]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:20.584]                   ...future.conditions[[length(...future.conditions) + 
[17:39:20.584]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:20.584]                   if (TRUE && !signal) {
[17:39:20.584]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:20.584]                     {
[17:39:20.584]                       inherits <- base::inherits
[17:39:20.584]                       invokeRestart <- base::invokeRestart
[17:39:20.584]                       is.null <- base::is.null
[17:39:20.584]                       muffled <- FALSE
[17:39:20.584]                       if (inherits(cond, "message")) {
[17:39:20.584]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:20.584]                         if (muffled) 
[17:39:20.584]                           invokeRestart("muffleMessage")
[17:39:20.584]                       }
[17:39:20.584]                       else if (inherits(cond, "warning")) {
[17:39:20.584]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:20.584]                         if (muffled) 
[17:39:20.584]                           invokeRestart("muffleWarning")
[17:39:20.584]                       }
[17:39:20.584]                       else if (inherits(cond, "condition")) {
[17:39:20.584]                         if (!is.null(pattern)) {
[17:39:20.584]                           computeRestarts <- base::computeRestarts
[17:39:20.584]                           grepl <- base::grepl
[17:39:20.584]                           restarts <- computeRestarts(cond)
[17:39:20.584]                           for (restart in restarts) {
[17:39:20.584]                             name <- restart$name
[17:39:20.584]                             if (is.null(name)) 
[17:39:20.584]                               next
[17:39:20.584]                             if (!grepl(pattern, name)) 
[17:39:20.584]                               next
[17:39:20.584]                             invokeRestart(restart)
[17:39:20.584]                             muffled <- TRUE
[17:39:20.584]                             break
[17:39:20.584]                           }
[17:39:20.584]                         }
[17:39:20.584]                       }
[17:39:20.584]                       invisible(muffled)
[17:39:20.584]                     }
[17:39:20.584]                     muffleCondition(cond, pattern = "^muffle")
[17:39:20.584]                   }
[17:39:20.584]                 }
[17:39:20.584]                 else {
[17:39:20.584]                   if (TRUE) {
[17:39:20.584]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:20.584]                     {
[17:39:20.584]                       inherits <- base::inherits
[17:39:20.584]                       invokeRestart <- base::invokeRestart
[17:39:20.584]                       is.null <- base::is.null
[17:39:20.584]                       muffled <- FALSE
[17:39:20.584]                       if (inherits(cond, "message")) {
[17:39:20.584]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:20.584]                         if (muffled) 
[17:39:20.584]                           invokeRestart("muffleMessage")
[17:39:20.584]                       }
[17:39:20.584]                       else if (inherits(cond, "warning")) {
[17:39:20.584]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:20.584]                         if (muffled) 
[17:39:20.584]                           invokeRestart("muffleWarning")
[17:39:20.584]                       }
[17:39:20.584]                       else if (inherits(cond, "condition")) {
[17:39:20.584]                         if (!is.null(pattern)) {
[17:39:20.584]                           computeRestarts <- base::computeRestarts
[17:39:20.584]                           grepl <- base::grepl
[17:39:20.584]                           restarts <- computeRestarts(cond)
[17:39:20.584]                           for (restart in restarts) {
[17:39:20.584]                             name <- restart$name
[17:39:20.584]                             if (is.null(name)) 
[17:39:20.584]                               next
[17:39:20.584]                             if (!grepl(pattern, name)) 
[17:39:20.584]                               next
[17:39:20.584]                             invokeRestart(restart)
[17:39:20.584]                             muffled <- TRUE
[17:39:20.584]                             break
[17:39:20.584]                           }
[17:39:20.584]                         }
[17:39:20.584]                       }
[17:39:20.584]                       invisible(muffled)
[17:39:20.584]                     }
[17:39:20.584]                     muffleCondition(cond, pattern = "^muffle")
[17:39:20.584]                   }
[17:39:20.584]                 }
[17:39:20.584]             }
[17:39:20.584]         }))
[17:39:20.584]     }, error = function(ex) {
[17:39:20.584]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:20.584]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:20.584]                 ...future.rng), started = ...future.startTime, 
[17:39:20.584]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:20.584]             version = "1.8"), class = "FutureResult")
[17:39:20.584]     }, finally = {
[17:39:20.584]         if (!identical(...future.workdir, getwd())) 
[17:39:20.584]             setwd(...future.workdir)
[17:39:20.584]         {
[17:39:20.584]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:20.584]                 ...future.oldOptions$nwarnings <- NULL
[17:39:20.584]             }
[17:39:20.584]             base::options(...future.oldOptions)
[17:39:20.584]             if (.Platform$OS.type == "windows") {
[17:39:20.584]                 old_names <- names(...future.oldEnvVars)
[17:39:20.584]                 envs <- base::Sys.getenv()
[17:39:20.584]                 names <- names(envs)
[17:39:20.584]                 common <- intersect(names, old_names)
[17:39:20.584]                 added <- setdiff(names, old_names)
[17:39:20.584]                 removed <- setdiff(old_names, names)
[17:39:20.584]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:20.584]                   envs[common]]
[17:39:20.584]                 NAMES <- toupper(changed)
[17:39:20.584]                 args <- list()
[17:39:20.584]                 for (kk in seq_along(NAMES)) {
[17:39:20.584]                   name <- changed[[kk]]
[17:39:20.584]                   NAME <- NAMES[[kk]]
[17:39:20.584]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:20.584]                     next
[17:39:20.584]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:20.584]                 }
[17:39:20.584]                 NAMES <- toupper(added)
[17:39:20.584]                 for (kk in seq_along(NAMES)) {
[17:39:20.584]                   name <- added[[kk]]
[17:39:20.584]                   NAME <- NAMES[[kk]]
[17:39:20.584]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:20.584]                     next
[17:39:20.584]                   args[[name]] <- ""
[17:39:20.584]                 }
[17:39:20.584]                 NAMES <- toupper(removed)
[17:39:20.584]                 for (kk in seq_along(NAMES)) {
[17:39:20.584]                   name <- removed[[kk]]
[17:39:20.584]                   NAME <- NAMES[[kk]]
[17:39:20.584]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:20.584]                     next
[17:39:20.584]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:20.584]                 }
[17:39:20.584]                 if (length(args) > 0) 
[17:39:20.584]                   base::do.call(base::Sys.setenv, args = args)
[17:39:20.584]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:20.584]             }
[17:39:20.584]             else {
[17:39:20.584]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:20.584]             }
[17:39:20.584]             {
[17:39:20.584]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:20.584]                   0L) {
[17:39:20.584]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:20.584]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:20.584]                   base::options(opts)
[17:39:20.584]                 }
[17:39:20.584]                 {
[17:39:20.584]                   {
[17:39:20.584]                     NULL
[17:39:20.584]                     RNGkind("Mersenne-Twister")
[17:39:20.584]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:20.584]                       inherits = FALSE)
[17:39:20.584]                   }
[17:39:20.584]                   options(future.plan = NULL)
[17:39:20.584]                   if (is.na(NA_character_)) 
[17:39:20.584]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:20.584]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:20.584]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:20.584]                     .init = FALSE)
[17:39:20.584]                 }
[17:39:20.584]             }
[17:39:20.584]         }
[17:39:20.584]     })
[17:39:20.584]     if (TRUE) {
[17:39:20.584]         base::sink(type = "output", split = FALSE)
[17:39:20.584]         if (TRUE) {
[17:39:20.584]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:20.584]         }
[17:39:20.584]         else {
[17:39:20.584]             ...future.result["stdout"] <- base::list(NULL)
[17:39:20.584]         }
[17:39:20.584]         base::close(...future.stdout)
[17:39:20.584]         ...future.stdout <- NULL
[17:39:20.584]     }
[17:39:20.584]     ...future.result$conditions <- ...future.conditions
[17:39:20.584]     ...future.result$finished <- base::Sys.time()
[17:39:20.584]     ...future.result
[17:39:20.584] }
[17:39:20.586] plan(): Setting new future strategy stack:
[17:39:20.586] List of future strategies:
[17:39:20.586] 1. sequential:
[17:39:20.586]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:20.586]    - tweaked: FALSE
[17:39:20.586]    - call: NULL
[17:39:20.586] plan(): nbrOfWorkers() = 1
[17:39:20.587] plan(): Setting new future strategy stack:
[17:39:20.587] List of future strategies:
[17:39:20.587] 1. future:
[17:39:20.587]    - args: function (..., workers = "<NULL>")
[17:39:20.587]    - tweaked: FALSE
[17:39:20.587]    - call: plan(foo)
[17:39:20.588] plan(): nbrOfWorkers() = Inf
[17:39:20.588] SequentialFuture started (and completed)
[1] 42
[17:39:20.590] getGlobalsAndPackages() ...
[17:39:20.590] 
[17:39:20.590] - globals: [0] <none>
[17:39:20.590] getGlobalsAndPackages() ... DONE
[17:39:20.590] [local output] makeClusterPSOCK() ...
[17:39:20.626] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:39:20.627] [local output] Base port: 11204
[17:39:20.627] [local output] Getting setup options for 2 cluster nodes ...
[17:39:20.627] [local output]  - Node 1 of 2 ...
[17:39:20.628] [local output] localMachine=TRUE => revtunnel=FALSE

[17:39:20.628] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpdW9FaC/worker.rank=1.parallelly.parent=40642.9ec2415c51f8.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpdW9FaC/worker.rank=1.parallelly.parent=40642.9ec2415c51f8.pid")'’
[17:39:20.817] - Possible to infer worker's PID: TRUE
[17:39:20.817] [local output] Rscript port: 11204

[17:39:20.818] [local output]  - Node 2 of 2 ...
[17:39:20.818] [local output] localMachine=TRUE => revtunnel=FALSE

[17:39:20.819] [local output] Rscript port: 11204

[17:39:20.819] [local output] Getting setup options for 2 cluster nodes ... done
[17:39:20.819] [local output]  - Parallel setup requested for some PSOCK nodes
[17:39:20.820] [local output] Setting up PSOCK nodes in parallel
[17:39:20.820] List of 36
[17:39:20.820]  $ worker          : chr "localhost"
[17:39:20.820]   ..- attr(*, "localhost")= logi TRUE
[17:39:20.820]  $ master          : chr "localhost"
[17:39:20.820]  $ port            : int 11204
[17:39:20.820]  $ connectTimeout  : num 120
[17:39:20.820]  $ timeout         : num 2592000
[17:39:20.820]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:39:20.820]  $ homogeneous     : logi TRUE
[17:39:20.820]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:39:20.820]  $ rscript_envs    : NULL
[17:39:20.820]  $ rscript_libs    : NULL
[17:39:20.820]  $ rscript_startup : NULL
[17:39:20.820]  $ rscript_sh      : chr "sh"
[17:39:20.820]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:39:20.820]  $ methods         : logi TRUE
[17:39:20.820]  $ socketOptions   : chr "no-delay"
[17:39:20.820]  $ useXDR          : logi FALSE
[17:39:20.820]  $ outfile         : chr "/dev/null"
[17:39:20.820]  $ renice          : int NA
[17:39:20.820]  $ rshcmd          : NULL
[17:39:20.820]  $ user            : chr(0) 
[17:39:20.820]  $ revtunnel       : logi FALSE
[17:39:20.820]  $ rshlogfile      : NULL
[17:39:20.820]  $ rshopts         : chr(0) 
[17:39:20.820]  $ rank            : int 1
[17:39:20.820]  $ manual          : logi FALSE
[17:39:20.820]  $ dryrun          : logi FALSE
[17:39:20.820]  $ quiet           : logi FALSE
[17:39:20.820]  $ setup_strategy  : chr "parallel"
[17:39:20.820]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:39:20.820]  $ pidfile         : chr "/tmp/RtmpdW9FaC/worker.rank=1.parallelly.parent=40642.9ec2415c51f8.pid"
[17:39:20.820]  $ rshcmd_label    : NULL
[17:39:20.820]  $ rsh_call        : NULL
[17:39:20.820]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:39:20.820]  $ localMachine    : logi TRUE
[17:39:20.820]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:39:20.820]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:39:20.820]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:39:20.820]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:39:20.820]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:39:20.820]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:39:20.820]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:39:20.820]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:39:20.820]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:39:20.820]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:39:20.820]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:39:20.820]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:39:20.820]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:39:20.820]  $ arguments       :List of 28
[17:39:20.820]   ..$ worker          : chr "localhost"
[17:39:20.820]   ..$ master          : NULL
[17:39:20.820]   ..$ port            : int 11204
[17:39:20.820]   ..$ connectTimeout  : num 120
[17:39:20.820]   ..$ timeout         : num 2592000
[17:39:20.820]   ..$ rscript         : NULL
[17:39:20.820]   ..$ homogeneous     : NULL
[17:39:20.820]   ..$ rscript_args    : NULL
[17:39:20.820]   ..$ rscript_envs    : NULL
[17:39:20.820]   ..$ rscript_libs    : NULL
[17:39:20.820]   ..$ rscript_startup : NULL
[17:39:20.820]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:39:20.820]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:39:20.820]   ..$ methods         : logi TRUE
[17:39:20.820]   ..$ socketOptions   : chr "no-delay"
[17:39:20.820]   ..$ useXDR          : logi FALSE
[17:39:20.820]   ..$ outfile         : chr "/dev/null"
[17:39:20.820]   ..$ renice          : int NA
[17:39:20.820]   ..$ rshcmd          : NULL
[17:39:20.820]   ..$ user            : NULL
[17:39:20.820]   ..$ revtunnel       : logi NA
[17:39:20.820]   ..$ rshlogfile      : NULL
[17:39:20.820]   ..$ rshopts         : NULL
[17:39:20.820]   ..$ rank            : int 1
[17:39:20.820]   ..$ manual          : logi FALSE
[17:39:20.820]   ..$ dryrun          : logi FALSE
[17:39:20.820]   ..$ quiet           : logi FALSE
[17:39:20.820]   ..$ setup_strategy  : chr "parallel"
[17:39:20.820]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:39:20.836] [local output] System call to launch all workers:
[17:39:20.836] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpdW9FaC/worker.rank=1.parallelly.parent=40642.9ec2415c51f8.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11204 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:39:20.836] [local output] Starting PSOCK main server
[17:39:20.842] [local output] Workers launched
[17:39:20.842] [local output] Waiting for workers to connect back
[17:39:20.842]  - [local output] 0 workers out of 2 ready
[17:39:21.087]  - [local output] 0 workers out of 2 ready
[17:39:21.088]  - [local output] 1 workers out of 2 ready
[17:39:21.093]  - [local output] 1 workers out of 2 ready
[17:39:21.093]  - [local output] 2 workers out of 2 ready
[17:39:21.093] [local output] Launching of workers completed
[17:39:21.093] [local output] Collecting session information from workers
[17:39:21.094] [local output]  - Worker #1 of 2
[17:39:21.095] [local output]  - Worker #2 of 2
[17:39:21.095] [local output] makeClusterPSOCK() ... done
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: 0x55737df949a8
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2c25b728-8f02-e61d-0fe7-dde45c518816
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:21.107] Packages needed by the future expression (n = 0): <none>
[17:39:21.107] Packages needed by future strategies (n = 0): <none>
[17:39:21.107] {
[17:39:21.107]     {
[17:39:21.107]         {
[17:39:21.107]             ...future.startTime <- base::Sys.time()
[17:39:21.107]             {
[17:39:21.107]                 {
[17:39:21.107]                   {
[17:39:21.107]                     {
[17:39:21.107]                       base::local({
[17:39:21.107]                         has_future <- base::requireNamespace("future", 
[17:39:21.107]                           quietly = TRUE)
[17:39:21.107]                         if (has_future) {
[17:39:21.107]                           ns <- base::getNamespace("future")
[17:39:21.107]                           version <- ns[[".package"]][["version"]]
[17:39:21.107]                           if (is.null(version)) 
[17:39:21.107]                             version <- utils::packageVersion("future")
[17:39:21.107]                         }
[17:39:21.107]                         else {
[17:39:21.107]                           version <- NULL
[17:39:21.107]                         }
[17:39:21.107]                         if (!has_future || version < "1.8.0") {
[17:39:21.107]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:21.107]                             "", base::R.version$version.string), 
[17:39:21.107]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:21.107]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:21.107]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:21.107]                               "release", "version")], collapse = " "), 
[17:39:21.107]                             hostname = base::Sys.info()[["nodename"]])
[17:39:21.107]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:21.107]                             info)
[17:39:21.107]                           info <- base::paste(info, collapse = "; ")
[17:39:21.107]                           if (!has_future) {
[17:39:21.107]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:21.107]                               info)
[17:39:21.107]                           }
[17:39:21.107]                           else {
[17:39:21.107]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:21.107]                               info, version)
[17:39:21.107]                           }
[17:39:21.107]                           base::stop(msg)
[17:39:21.107]                         }
[17:39:21.107]                       })
[17:39:21.107]                     }
[17:39:21.107]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:21.107]                     base::options(mc.cores = 1L)
[17:39:21.107]                   }
[17:39:21.107]                   ...future.strategy.old <- future::plan("list")
[17:39:21.107]                   options(future.plan = NULL)
[17:39:21.107]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:21.107]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:21.107]                 }
[17:39:21.107]                 ...future.workdir <- getwd()
[17:39:21.107]             }
[17:39:21.107]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:21.107]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:21.107]         }
[17:39:21.107]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:21.107]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:21.107]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:21.107]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:21.107]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:21.107]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:21.107]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:21.107]             base::names(...future.oldOptions))
[17:39:21.107]     }
[17:39:21.107]     if (FALSE) {
[17:39:21.107]     }
[17:39:21.107]     else {
[17:39:21.107]         if (TRUE) {
[17:39:21.107]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:21.107]                 open = "w")
[17:39:21.107]         }
[17:39:21.107]         else {
[17:39:21.107]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:21.107]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:21.107]         }
[17:39:21.107]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:21.107]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:21.107]             base::sink(type = "output", split = FALSE)
[17:39:21.107]             base::close(...future.stdout)
[17:39:21.107]         }, add = TRUE)
[17:39:21.107]     }
[17:39:21.107]     ...future.frame <- base::sys.nframe()
[17:39:21.107]     ...future.conditions <- base::list()
[17:39:21.107]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:21.107]     if (FALSE) {
[17:39:21.107]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:21.107]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:21.107]     }
[17:39:21.107]     ...future.result <- base::tryCatch({
[17:39:21.107]         base::withCallingHandlers({
[17:39:21.107]             ...future.value <- base::withVisible(base::local({
[17:39:21.107]                 ...future.makeSendCondition <- base::local({
[17:39:21.107]                   sendCondition <- NULL
[17:39:21.107]                   function(frame = 1L) {
[17:39:21.107]                     if (is.function(sendCondition)) 
[17:39:21.107]                       return(sendCondition)
[17:39:21.107]                     ns <- getNamespace("parallel")
[17:39:21.107]                     if (exists("sendData", mode = "function", 
[17:39:21.107]                       envir = ns)) {
[17:39:21.107]                       parallel_sendData <- get("sendData", mode = "function", 
[17:39:21.107]                         envir = ns)
[17:39:21.107]                       envir <- sys.frame(frame)
[17:39:21.107]                       master <- NULL
[17:39:21.107]                       while (!identical(envir, .GlobalEnv) && 
[17:39:21.107]                         !identical(envir, emptyenv())) {
[17:39:21.107]                         if (exists("master", mode = "list", envir = envir, 
[17:39:21.107]                           inherits = FALSE)) {
[17:39:21.107]                           master <- get("master", mode = "list", 
[17:39:21.107]                             envir = envir, inherits = FALSE)
[17:39:21.107]                           if (inherits(master, c("SOCKnode", 
[17:39:21.107]                             "SOCK0node"))) {
[17:39:21.107]                             sendCondition <<- function(cond) {
[17:39:21.107]                               data <- list(type = "VALUE", value = cond, 
[17:39:21.107]                                 success = TRUE)
[17:39:21.107]                               parallel_sendData(master, data)
[17:39:21.107]                             }
[17:39:21.107]                             return(sendCondition)
[17:39:21.107]                           }
[17:39:21.107]                         }
[17:39:21.107]                         frame <- frame + 1L
[17:39:21.107]                         envir <- sys.frame(frame)
[17:39:21.107]                       }
[17:39:21.107]                     }
[17:39:21.107]                     sendCondition <<- function(cond) NULL
[17:39:21.107]                   }
[17:39:21.107]                 })
[17:39:21.107]                 withCallingHandlers({
[17:39:21.107]                   {
[17:39:21.107]                     42L
[17:39:21.107]                   }
[17:39:21.107]                 }, immediateCondition = function(cond) {
[17:39:21.107]                   sendCondition <- ...future.makeSendCondition()
[17:39:21.107]                   sendCondition(cond)
[17:39:21.107]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:21.107]                   {
[17:39:21.107]                     inherits <- base::inherits
[17:39:21.107]                     invokeRestart <- base::invokeRestart
[17:39:21.107]                     is.null <- base::is.null
[17:39:21.107]                     muffled <- FALSE
[17:39:21.107]                     if (inherits(cond, "message")) {
[17:39:21.107]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:21.107]                       if (muffled) 
[17:39:21.107]                         invokeRestart("muffleMessage")
[17:39:21.107]                     }
[17:39:21.107]                     else if (inherits(cond, "warning")) {
[17:39:21.107]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:21.107]                       if (muffled) 
[17:39:21.107]                         invokeRestart("muffleWarning")
[17:39:21.107]                     }
[17:39:21.107]                     else if (inherits(cond, "condition")) {
[17:39:21.107]                       if (!is.null(pattern)) {
[17:39:21.107]                         computeRestarts <- base::computeRestarts
[17:39:21.107]                         grepl <- base::grepl
[17:39:21.107]                         restarts <- computeRestarts(cond)
[17:39:21.107]                         for (restart in restarts) {
[17:39:21.107]                           name <- restart$name
[17:39:21.107]                           if (is.null(name)) 
[17:39:21.107]                             next
[17:39:21.107]                           if (!grepl(pattern, name)) 
[17:39:21.107]                             next
[17:39:21.107]                           invokeRestart(restart)
[17:39:21.107]                           muffled <- TRUE
[17:39:21.107]                           break
[17:39:21.107]                         }
[17:39:21.107]                       }
[17:39:21.107]                     }
[17:39:21.107]                     invisible(muffled)
[17:39:21.107]                   }
[17:39:21.107]                   muffleCondition(cond)
[17:39:21.107]                 })
[17:39:21.107]             }))
[17:39:21.107]             future::FutureResult(value = ...future.value$value, 
[17:39:21.107]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:21.107]                   ...future.rng), globalenv = if (FALSE) 
[17:39:21.107]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:21.107]                     ...future.globalenv.names))
[17:39:21.107]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:21.107]         }, condition = base::local({
[17:39:21.107]             c <- base::c
[17:39:21.107]             inherits <- base::inherits
[17:39:21.107]             invokeRestart <- base::invokeRestart
[17:39:21.107]             length <- base::length
[17:39:21.107]             list <- base::list
[17:39:21.107]             seq.int <- base::seq.int
[17:39:21.107]             signalCondition <- base::signalCondition
[17:39:21.107]             sys.calls <- base::sys.calls
[17:39:21.107]             `[[` <- base::`[[`
[17:39:21.107]             `+` <- base::`+`
[17:39:21.107]             `<<-` <- base::`<<-`
[17:39:21.107]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:21.107]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:21.107]                   3L)]
[17:39:21.107]             }
[17:39:21.107]             function(cond) {
[17:39:21.107]                 is_error <- inherits(cond, "error")
[17:39:21.107]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:21.107]                   NULL)
[17:39:21.107]                 if (is_error) {
[17:39:21.107]                   sessionInformation <- function() {
[17:39:21.107]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:21.107]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:21.107]                       search = base::search(), system = base::Sys.info())
[17:39:21.107]                   }
[17:39:21.107]                   ...future.conditions[[length(...future.conditions) + 
[17:39:21.107]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:21.107]                     cond$call), session = sessionInformation(), 
[17:39:21.107]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:21.107]                   signalCondition(cond)
[17:39:21.107]                 }
[17:39:21.107]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:21.107]                 "immediateCondition"))) {
[17:39:21.107]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:21.107]                   ...future.conditions[[length(...future.conditions) + 
[17:39:21.107]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:21.107]                   if (TRUE && !signal) {
[17:39:21.107]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:21.107]                     {
[17:39:21.107]                       inherits <- base::inherits
[17:39:21.107]                       invokeRestart <- base::invokeRestart
[17:39:21.107]                       is.null <- base::is.null
[17:39:21.107]                       muffled <- FALSE
[17:39:21.107]                       if (inherits(cond, "message")) {
[17:39:21.107]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:21.107]                         if (muffled) 
[17:39:21.107]                           invokeRestart("muffleMessage")
[17:39:21.107]                       }
[17:39:21.107]                       else if (inherits(cond, "warning")) {
[17:39:21.107]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:21.107]                         if (muffled) 
[17:39:21.107]                           invokeRestart("muffleWarning")
[17:39:21.107]                       }
[17:39:21.107]                       else if (inherits(cond, "condition")) {
[17:39:21.107]                         if (!is.null(pattern)) {
[17:39:21.107]                           computeRestarts <- base::computeRestarts
[17:39:21.107]                           grepl <- base::grepl
[17:39:21.107]                           restarts <- computeRestarts(cond)
[17:39:21.107]                           for (restart in restarts) {
[17:39:21.107]                             name <- restart$name
[17:39:21.107]                             if (is.null(name)) 
[17:39:21.107]                               next
[17:39:21.107]                             if (!grepl(pattern, name)) 
[17:39:21.107]                               next
[17:39:21.107]                             invokeRestart(restart)
[17:39:21.107]                             muffled <- TRUE
[17:39:21.107]                             break
[17:39:21.107]                           }
[17:39:21.107]                         }
[17:39:21.107]                       }
[17:39:21.107]                       invisible(muffled)
[17:39:21.107]                     }
[17:39:21.107]                     muffleCondition(cond, pattern = "^muffle")
[17:39:21.107]                   }
[17:39:21.107]                 }
[17:39:21.107]                 else {
[17:39:21.107]                   if (TRUE) {
[17:39:21.107]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:21.107]                     {
[17:39:21.107]                       inherits <- base::inherits
[17:39:21.107]                       invokeRestart <- base::invokeRestart
[17:39:21.107]                       is.null <- base::is.null
[17:39:21.107]                       muffled <- FALSE
[17:39:21.107]                       if (inherits(cond, "message")) {
[17:39:21.107]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:21.107]                         if (muffled) 
[17:39:21.107]                           invokeRestart("muffleMessage")
[17:39:21.107]                       }
[17:39:21.107]                       else if (inherits(cond, "warning")) {
[17:39:21.107]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:21.107]                         if (muffled) 
[17:39:21.107]                           invokeRestart("muffleWarning")
[17:39:21.107]                       }
[17:39:21.107]                       else if (inherits(cond, "condition")) {
[17:39:21.107]                         if (!is.null(pattern)) {
[17:39:21.107]                           computeRestarts <- base::computeRestarts
[17:39:21.107]                           grepl <- base::grepl
[17:39:21.107]                           restarts <- computeRestarts(cond)
[17:39:21.107]                           for (restart in restarts) {
[17:39:21.107]                             name <- restart$name
[17:39:21.107]                             if (is.null(name)) 
[17:39:21.107]                               next
[17:39:21.107]                             if (!grepl(pattern, name)) 
[17:39:21.107]                               next
[17:39:21.107]                             invokeRestart(restart)
[17:39:21.107]                             muffled <- TRUE
[17:39:21.107]                             break
[17:39:21.107]                           }
[17:39:21.107]                         }
[17:39:21.107]                       }
[17:39:21.107]                       invisible(muffled)
[17:39:21.107]                     }
[17:39:21.107]                     muffleCondition(cond, pattern = "^muffle")
[17:39:21.107]                   }
[17:39:21.107]                 }
[17:39:21.107]             }
[17:39:21.107]         }))
[17:39:21.107]     }, error = function(ex) {
[17:39:21.107]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:21.107]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:21.107]                 ...future.rng), started = ...future.startTime, 
[17:39:21.107]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:21.107]             version = "1.8"), class = "FutureResult")
[17:39:21.107]     }, finally = {
[17:39:21.107]         if (!identical(...future.workdir, getwd())) 
[17:39:21.107]             setwd(...future.workdir)
[17:39:21.107]         {
[17:39:21.107]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:21.107]                 ...future.oldOptions$nwarnings <- NULL
[17:39:21.107]             }
[17:39:21.107]             base::options(...future.oldOptions)
[17:39:21.107]             if (.Platform$OS.type == "windows") {
[17:39:21.107]                 old_names <- names(...future.oldEnvVars)
[17:39:21.107]                 envs <- base::Sys.getenv()
[17:39:21.107]                 names <- names(envs)
[17:39:21.107]                 common <- intersect(names, old_names)
[17:39:21.107]                 added <- setdiff(names, old_names)
[17:39:21.107]                 removed <- setdiff(old_names, names)
[17:39:21.107]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:21.107]                   envs[common]]
[17:39:21.107]                 NAMES <- toupper(changed)
[17:39:21.107]                 args <- list()
[17:39:21.107]                 for (kk in seq_along(NAMES)) {
[17:39:21.107]                   name <- changed[[kk]]
[17:39:21.107]                   NAME <- NAMES[[kk]]
[17:39:21.107]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:21.107]                     next
[17:39:21.107]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:21.107]                 }
[17:39:21.107]                 NAMES <- toupper(added)
[17:39:21.107]                 for (kk in seq_along(NAMES)) {
[17:39:21.107]                   name <- added[[kk]]
[17:39:21.107]                   NAME <- NAMES[[kk]]
[17:39:21.107]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:21.107]                     next
[17:39:21.107]                   args[[name]] <- ""
[17:39:21.107]                 }
[17:39:21.107]                 NAMES <- toupper(removed)
[17:39:21.107]                 for (kk in seq_along(NAMES)) {
[17:39:21.107]                   name <- removed[[kk]]
[17:39:21.107]                   NAME <- NAMES[[kk]]
[17:39:21.107]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:21.107]                     next
[17:39:21.107]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:21.107]                 }
[17:39:21.107]                 if (length(args) > 0) 
[17:39:21.107]                   base::do.call(base::Sys.setenv, args = args)
[17:39:21.107]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:21.107]             }
[17:39:21.107]             else {
[17:39:21.107]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:21.107]             }
[17:39:21.107]             {
[17:39:21.107]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:21.107]                   0L) {
[17:39:21.107]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:21.107]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:21.107]                   base::options(opts)
[17:39:21.107]                 }
[17:39:21.107]                 {
[17:39:21.107]                   {
[17:39:21.107]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:21.107]                     NULL
[17:39:21.107]                   }
[17:39:21.107]                   options(future.plan = NULL)
[17:39:21.107]                   if (is.na(NA_character_)) 
[17:39:21.107]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:21.107]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:21.107]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:21.107]                     .init = FALSE)
[17:39:21.107]                 }
[17:39:21.107]             }
[17:39:21.107]         }
[17:39:21.107]     })
[17:39:21.107]     if (TRUE) {
[17:39:21.107]         base::sink(type = "output", split = FALSE)
[17:39:21.107]         if (TRUE) {
[17:39:21.107]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:21.107]         }
[17:39:21.107]         else {
[17:39:21.107]             ...future.result["stdout"] <- base::list(NULL)
[17:39:21.107]         }
[17:39:21.107]         base::close(...future.stdout)
[17:39:21.107]         ...future.stdout <- NULL
[17:39:21.107]     }
[17:39:21.107]     ...future.result$conditions <- ...future.conditions
[17:39:21.107]     ...future.result$finished <- base::Sys.time()
[17:39:21.107]     ...future.result
[17:39:21.107] }
[17:39:21.161] MultisessionFuture started
[17:39:21.161] result() for ClusterFuture ...
[17:39:21.162] receiveMessageFromWorker() for ClusterFuture ...
[17:39:21.162] - Validating connection of MultisessionFuture
[17:39:21.194] - received message: FutureResult
[17:39:21.194] - Received FutureResult
[17:39:21.197] - Erased future from FutureRegistry
[17:39:21.197] result() for ClusterFuture ...
[17:39:21.197] - result already collected: FutureResult
[17:39:21.197] result() for ClusterFuture ... done
[17:39:21.197] receiveMessageFromWorker() for ClusterFuture ... done
[17:39:21.197] result() for ClusterFuture ... done
[17:39:21.198] result() for ClusterFuture ...
[17:39:21.198] - result already collected: FutureResult
[17:39:21.198] result() for ClusterFuture ... done
[1] 42
[17:39:21.199] getGlobalsAndPackages() ...
[17:39:21.199] 
[17:39:21.199] - globals: [0] <none>
[17:39:21.199] getGlobalsAndPackages() ... DONE
[17:39:21.210] Packages needed by the future expression (n = 0): <none>
[17:39:21.210] Packages needed by future strategies (n = 0): <none>
[17:39:21.211] {
[17:39:21.211]     {
[17:39:21.211]         {
[17:39:21.211]             ...future.startTime <- base::Sys.time()
[17:39:21.211]             {
[17:39:21.211]                 {
[17:39:21.211]                   {
[17:39:21.211]                     {
[17:39:21.211]                       base::local({
[17:39:21.211]                         has_future <- base::requireNamespace("future", 
[17:39:21.211]                           quietly = TRUE)
[17:39:21.211]                         if (has_future) {
[17:39:21.211]                           ns <- base::getNamespace("future")
[17:39:21.211]                           version <- ns[[".package"]][["version"]]
[17:39:21.211]                           if (is.null(version)) 
[17:39:21.211]                             version <- utils::packageVersion("future")
[17:39:21.211]                         }
[17:39:21.211]                         else {
[17:39:21.211]                           version <- NULL
[17:39:21.211]                         }
[17:39:21.211]                         if (!has_future || version < "1.8.0") {
[17:39:21.211]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:21.211]                             "", base::R.version$version.string), 
[17:39:21.211]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:21.211]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:21.211]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:21.211]                               "release", "version")], collapse = " "), 
[17:39:21.211]                             hostname = base::Sys.info()[["nodename"]])
[17:39:21.211]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:21.211]                             info)
[17:39:21.211]                           info <- base::paste(info, collapse = "; ")
[17:39:21.211]                           if (!has_future) {
[17:39:21.211]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:21.211]                               info)
[17:39:21.211]                           }
[17:39:21.211]                           else {
[17:39:21.211]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:21.211]                               info, version)
[17:39:21.211]                           }
[17:39:21.211]                           base::stop(msg)
[17:39:21.211]                         }
[17:39:21.211]                       })
[17:39:21.211]                     }
[17:39:21.211]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:21.211]                     base::options(mc.cores = 1L)
[17:39:21.211]                   }
[17:39:21.211]                   ...future.strategy.old <- future::plan("list")
[17:39:21.211]                   options(future.plan = NULL)
[17:39:21.211]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:21.211]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:21.211]                 }
[17:39:21.211]                 ...future.workdir <- getwd()
[17:39:21.211]             }
[17:39:21.211]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:21.211]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:21.211]         }
[17:39:21.211]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:21.211]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:21.211]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:21.211]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:21.211]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:21.211]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:21.211]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:21.211]             base::names(...future.oldOptions))
[17:39:21.211]     }
[17:39:21.211]     if (FALSE) {
[17:39:21.211]     }
[17:39:21.211]     else {
[17:39:21.211]         if (TRUE) {
[17:39:21.211]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:21.211]                 open = "w")
[17:39:21.211]         }
[17:39:21.211]         else {
[17:39:21.211]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:21.211]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:21.211]         }
[17:39:21.211]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:21.211]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:21.211]             base::sink(type = "output", split = FALSE)
[17:39:21.211]             base::close(...future.stdout)
[17:39:21.211]         }, add = TRUE)
[17:39:21.211]     }
[17:39:21.211]     ...future.frame <- base::sys.nframe()
[17:39:21.211]     ...future.conditions <- base::list()
[17:39:21.211]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:21.211]     if (FALSE) {
[17:39:21.211]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:21.211]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:21.211]     }
[17:39:21.211]     ...future.result <- base::tryCatch({
[17:39:21.211]         base::withCallingHandlers({
[17:39:21.211]             ...future.value <- base::withVisible(base::local({
[17:39:21.211]                 ...future.makeSendCondition <- base::local({
[17:39:21.211]                   sendCondition <- NULL
[17:39:21.211]                   function(frame = 1L) {
[17:39:21.211]                     if (is.function(sendCondition)) 
[17:39:21.211]                       return(sendCondition)
[17:39:21.211]                     ns <- getNamespace("parallel")
[17:39:21.211]                     if (exists("sendData", mode = "function", 
[17:39:21.211]                       envir = ns)) {
[17:39:21.211]                       parallel_sendData <- get("sendData", mode = "function", 
[17:39:21.211]                         envir = ns)
[17:39:21.211]                       envir <- sys.frame(frame)
[17:39:21.211]                       master <- NULL
[17:39:21.211]                       while (!identical(envir, .GlobalEnv) && 
[17:39:21.211]                         !identical(envir, emptyenv())) {
[17:39:21.211]                         if (exists("master", mode = "list", envir = envir, 
[17:39:21.211]                           inherits = FALSE)) {
[17:39:21.211]                           master <- get("master", mode = "list", 
[17:39:21.211]                             envir = envir, inherits = FALSE)
[17:39:21.211]                           if (inherits(master, c("SOCKnode", 
[17:39:21.211]                             "SOCK0node"))) {
[17:39:21.211]                             sendCondition <<- function(cond) {
[17:39:21.211]                               data <- list(type = "VALUE", value = cond, 
[17:39:21.211]                                 success = TRUE)
[17:39:21.211]                               parallel_sendData(master, data)
[17:39:21.211]                             }
[17:39:21.211]                             return(sendCondition)
[17:39:21.211]                           }
[17:39:21.211]                         }
[17:39:21.211]                         frame <- frame + 1L
[17:39:21.211]                         envir <- sys.frame(frame)
[17:39:21.211]                       }
[17:39:21.211]                     }
[17:39:21.211]                     sendCondition <<- function(cond) NULL
[17:39:21.211]                   }
[17:39:21.211]                 })
[17:39:21.211]                 withCallingHandlers({
[17:39:21.211]                   {
[17:39:21.211]                     42L
[17:39:21.211]                   }
[17:39:21.211]                 }, immediateCondition = function(cond) {
[17:39:21.211]                   sendCondition <- ...future.makeSendCondition()
[17:39:21.211]                   sendCondition(cond)
[17:39:21.211]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:21.211]                   {
[17:39:21.211]                     inherits <- base::inherits
[17:39:21.211]                     invokeRestart <- base::invokeRestart
[17:39:21.211]                     is.null <- base::is.null
[17:39:21.211]                     muffled <- FALSE
[17:39:21.211]                     if (inherits(cond, "message")) {
[17:39:21.211]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:21.211]                       if (muffled) 
[17:39:21.211]                         invokeRestart("muffleMessage")
[17:39:21.211]                     }
[17:39:21.211]                     else if (inherits(cond, "warning")) {
[17:39:21.211]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:21.211]                       if (muffled) 
[17:39:21.211]                         invokeRestart("muffleWarning")
[17:39:21.211]                     }
[17:39:21.211]                     else if (inherits(cond, "condition")) {
[17:39:21.211]                       if (!is.null(pattern)) {
[17:39:21.211]                         computeRestarts <- base::computeRestarts
[17:39:21.211]                         grepl <- base::grepl
[17:39:21.211]                         restarts <- computeRestarts(cond)
[17:39:21.211]                         for (restart in restarts) {
[17:39:21.211]                           name <- restart$name
[17:39:21.211]                           if (is.null(name)) 
[17:39:21.211]                             next
[17:39:21.211]                           if (!grepl(pattern, name)) 
[17:39:21.211]                             next
[17:39:21.211]                           invokeRestart(restart)
[17:39:21.211]                           muffled <- TRUE
[17:39:21.211]                           break
[17:39:21.211]                         }
[17:39:21.211]                       }
[17:39:21.211]                     }
[17:39:21.211]                     invisible(muffled)
[17:39:21.211]                   }
[17:39:21.211]                   muffleCondition(cond)
[17:39:21.211]                 })
[17:39:21.211]             }))
[17:39:21.211]             future::FutureResult(value = ...future.value$value, 
[17:39:21.211]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:21.211]                   ...future.rng), globalenv = if (FALSE) 
[17:39:21.211]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:21.211]                     ...future.globalenv.names))
[17:39:21.211]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:21.211]         }, condition = base::local({
[17:39:21.211]             c <- base::c
[17:39:21.211]             inherits <- base::inherits
[17:39:21.211]             invokeRestart <- base::invokeRestart
[17:39:21.211]             length <- base::length
[17:39:21.211]             list <- base::list
[17:39:21.211]             seq.int <- base::seq.int
[17:39:21.211]             signalCondition <- base::signalCondition
[17:39:21.211]             sys.calls <- base::sys.calls
[17:39:21.211]             `[[` <- base::`[[`
[17:39:21.211]             `+` <- base::`+`
[17:39:21.211]             `<<-` <- base::`<<-`
[17:39:21.211]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:21.211]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:21.211]                   3L)]
[17:39:21.211]             }
[17:39:21.211]             function(cond) {
[17:39:21.211]                 is_error <- inherits(cond, "error")
[17:39:21.211]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:21.211]                   NULL)
[17:39:21.211]                 if (is_error) {
[17:39:21.211]                   sessionInformation <- function() {
[17:39:21.211]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:21.211]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:21.211]                       search = base::search(), system = base::Sys.info())
[17:39:21.211]                   }
[17:39:21.211]                   ...future.conditions[[length(...future.conditions) + 
[17:39:21.211]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:21.211]                     cond$call), session = sessionInformation(), 
[17:39:21.211]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:21.211]                   signalCondition(cond)
[17:39:21.211]                 }
[17:39:21.211]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:21.211]                 "immediateCondition"))) {
[17:39:21.211]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:21.211]                   ...future.conditions[[length(...future.conditions) + 
[17:39:21.211]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:21.211]                   if (TRUE && !signal) {
[17:39:21.211]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:21.211]                     {
[17:39:21.211]                       inherits <- base::inherits
[17:39:21.211]                       invokeRestart <- base::invokeRestart
[17:39:21.211]                       is.null <- base::is.null
[17:39:21.211]                       muffled <- FALSE
[17:39:21.211]                       if (inherits(cond, "message")) {
[17:39:21.211]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:21.211]                         if (muffled) 
[17:39:21.211]                           invokeRestart("muffleMessage")
[17:39:21.211]                       }
[17:39:21.211]                       else if (inherits(cond, "warning")) {
[17:39:21.211]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:21.211]                         if (muffled) 
[17:39:21.211]                           invokeRestart("muffleWarning")
[17:39:21.211]                       }
[17:39:21.211]                       else if (inherits(cond, "condition")) {
[17:39:21.211]                         if (!is.null(pattern)) {
[17:39:21.211]                           computeRestarts <- base::computeRestarts
[17:39:21.211]                           grepl <- base::grepl
[17:39:21.211]                           restarts <- computeRestarts(cond)
[17:39:21.211]                           for (restart in restarts) {
[17:39:21.211]                             name <- restart$name
[17:39:21.211]                             if (is.null(name)) 
[17:39:21.211]                               next
[17:39:21.211]                             if (!grepl(pattern, name)) 
[17:39:21.211]                               next
[17:39:21.211]                             invokeRestart(restart)
[17:39:21.211]                             muffled <- TRUE
[17:39:21.211]                             break
[17:39:21.211]                           }
[17:39:21.211]                         }
[17:39:21.211]                       }
[17:39:21.211]                       invisible(muffled)
[17:39:21.211]                     }
[17:39:21.211]                     muffleCondition(cond, pattern = "^muffle")
[17:39:21.211]                   }
[17:39:21.211]                 }
[17:39:21.211]                 else {
[17:39:21.211]                   if (TRUE) {
[17:39:21.211]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:21.211]                     {
[17:39:21.211]                       inherits <- base::inherits
[17:39:21.211]                       invokeRestart <- base::invokeRestart
[17:39:21.211]                       is.null <- base::is.null
[17:39:21.211]                       muffled <- FALSE
[17:39:21.211]                       if (inherits(cond, "message")) {
[17:39:21.211]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:21.211]                         if (muffled) 
[17:39:21.211]                           invokeRestart("muffleMessage")
[17:39:21.211]                       }
[17:39:21.211]                       else if (inherits(cond, "warning")) {
[17:39:21.211]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:21.211]                         if (muffled) 
[17:39:21.211]                           invokeRestart("muffleWarning")
[17:39:21.211]                       }
[17:39:21.211]                       else if (inherits(cond, "condition")) {
[17:39:21.211]                         if (!is.null(pattern)) {
[17:39:21.211]                           computeRestarts <- base::computeRestarts
[17:39:21.211]                           grepl <- base::grepl
[17:39:21.211]                           restarts <- computeRestarts(cond)
[17:39:21.211]                           for (restart in restarts) {
[17:39:21.211]                             name <- restart$name
[17:39:21.211]                             if (is.null(name)) 
[17:39:21.211]                               next
[17:39:21.211]                             if (!grepl(pattern, name)) 
[17:39:21.211]                               next
[17:39:21.211]                             invokeRestart(restart)
[17:39:21.211]                             muffled <- TRUE
[17:39:21.211]                             break
[17:39:21.211]                           }
[17:39:21.211]                         }
[17:39:21.211]                       }
[17:39:21.211]                       invisible(muffled)
[17:39:21.211]                     }
[17:39:21.211]                     muffleCondition(cond, pattern = "^muffle")
[17:39:21.211]                   }
[17:39:21.211]                 }
[17:39:21.211]             }
[17:39:21.211]         }))
[17:39:21.211]     }, error = function(ex) {
[17:39:21.211]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:21.211]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:21.211]                 ...future.rng), started = ...future.startTime, 
[17:39:21.211]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:21.211]             version = "1.8"), class = "FutureResult")
[17:39:21.211]     }, finally = {
[17:39:21.211]         if (!identical(...future.workdir, getwd())) 
[17:39:21.211]             setwd(...future.workdir)
[17:39:21.211]         {
[17:39:21.211]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:21.211]                 ...future.oldOptions$nwarnings <- NULL
[17:39:21.211]             }
[17:39:21.211]             base::options(...future.oldOptions)
[17:39:21.211]             if (.Platform$OS.type == "windows") {
[17:39:21.211]                 old_names <- names(...future.oldEnvVars)
[17:39:21.211]                 envs <- base::Sys.getenv()
[17:39:21.211]                 names <- names(envs)
[17:39:21.211]                 common <- intersect(names, old_names)
[17:39:21.211]                 added <- setdiff(names, old_names)
[17:39:21.211]                 removed <- setdiff(old_names, names)
[17:39:21.211]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:21.211]                   envs[common]]
[17:39:21.211]                 NAMES <- toupper(changed)
[17:39:21.211]                 args <- list()
[17:39:21.211]                 for (kk in seq_along(NAMES)) {
[17:39:21.211]                   name <- changed[[kk]]
[17:39:21.211]                   NAME <- NAMES[[kk]]
[17:39:21.211]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:21.211]                     next
[17:39:21.211]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:21.211]                 }
[17:39:21.211]                 NAMES <- toupper(added)
[17:39:21.211]                 for (kk in seq_along(NAMES)) {
[17:39:21.211]                   name <- added[[kk]]
[17:39:21.211]                   NAME <- NAMES[[kk]]
[17:39:21.211]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:21.211]                     next
[17:39:21.211]                   args[[name]] <- ""
[17:39:21.211]                 }
[17:39:21.211]                 NAMES <- toupper(removed)
[17:39:21.211]                 for (kk in seq_along(NAMES)) {
[17:39:21.211]                   name <- removed[[kk]]
[17:39:21.211]                   NAME <- NAMES[[kk]]
[17:39:21.211]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:21.211]                     next
[17:39:21.211]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:21.211]                 }
[17:39:21.211]                 if (length(args) > 0) 
[17:39:21.211]                   base::do.call(base::Sys.setenv, args = args)
[17:39:21.211]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:21.211]             }
[17:39:21.211]             else {
[17:39:21.211]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:21.211]             }
[17:39:21.211]             {
[17:39:21.211]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:21.211]                   0L) {
[17:39:21.211]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:21.211]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:21.211]                   base::options(opts)
[17:39:21.211]                 }
[17:39:21.211]                 {
[17:39:21.211]                   {
[17:39:21.211]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:21.211]                     NULL
[17:39:21.211]                   }
[17:39:21.211]                   options(future.plan = NULL)
[17:39:21.211]                   if (is.na(NA_character_)) 
[17:39:21.211]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:21.211]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:21.211]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:21.211]                     .init = FALSE)
[17:39:21.211]                 }
[17:39:21.211]             }
[17:39:21.211]         }
[17:39:21.211]     })
[17:39:21.211]     if (TRUE) {
[17:39:21.211]         base::sink(type = "output", split = FALSE)
[17:39:21.211]         if (TRUE) {
[17:39:21.211]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:21.211]         }
[17:39:21.211]         else {
[17:39:21.211]             ...future.result["stdout"] <- base::list(NULL)
[17:39:21.211]         }
[17:39:21.211]         base::close(...future.stdout)
[17:39:21.211]         ...future.stdout <- NULL
[17:39:21.211]     }
[17:39:21.211]     ...future.result$conditions <- ...future.conditions
[17:39:21.211]     ...future.result$finished <- base::Sys.time()
[17:39:21.211]     ...future.result
[17:39:21.211] }
[17:39:21.214] MultisessionFuture started
[17:39:21.215] result() for ClusterFuture ...
[17:39:21.215] receiveMessageFromWorker() for ClusterFuture ...
[17:39:21.215] - Validating connection of MultisessionFuture
[17:39:21.216] - received message: FutureResult
[17:39:21.216] - Received FutureResult
[17:39:21.217] - Erased future from FutureRegistry
[17:39:21.217] result() for ClusterFuture ...
[17:39:21.217] - result already collected: FutureResult
[17:39:21.217] result() for ClusterFuture ... done
[17:39:21.217] receiveMessageFromWorker() for ClusterFuture ... done
[17:39:21.217] result() for ClusterFuture ... done
[17:39:21.217] result() for ClusterFuture ...
[17:39:21.217] - result already collected: FutureResult
[17:39:21.217] result() for ClusterFuture ... done
[1] 42
[17:39:21.218] getGlobalsAndPackages() ...
[17:39:21.218] Searching for globals...
[17:39:21.219] - globals found: [1] ‘{’
[17:39:21.219] Searching for globals ... DONE
[17:39:21.219] Resolving globals: FALSE
[17:39:21.219] 
[17:39:21.219] 
[17:39:21.220] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2c25b728-8f02-e61d-0fe7-dde45c518816
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:21.220] Packages needed by the future expression (n = 0): <none>
[17:39:21.220] Packages needed by future strategies (n = 0): <none>
[17:39:21.221] {
[17:39:21.221]     {
[17:39:21.221]         {
[17:39:21.221]             ...future.startTime <- base::Sys.time()
[17:39:21.221]             {
[17:39:21.221]                 {
[17:39:21.221]                   {
[17:39:21.221]                     base::local({
[17:39:21.221]                       has_future <- base::requireNamespace("future", 
[17:39:21.221]                         quietly = TRUE)
[17:39:21.221]                       if (has_future) {
[17:39:21.221]                         ns <- base::getNamespace("future")
[17:39:21.221]                         version <- ns[[".package"]][["version"]]
[17:39:21.221]                         if (is.null(version)) 
[17:39:21.221]                           version <- utils::packageVersion("future")
[17:39:21.221]                       }
[17:39:21.221]                       else {
[17:39:21.221]                         version <- NULL
[17:39:21.221]                       }
[17:39:21.221]                       if (!has_future || version < "1.8.0") {
[17:39:21.221]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:21.221]                           "", base::R.version$version.string), 
[17:39:21.221]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:21.221]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:21.221]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:21.221]                             "release", "version")], collapse = " "), 
[17:39:21.221]                           hostname = base::Sys.info()[["nodename"]])
[17:39:21.221]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:21.221]                           info)
[17:39:21.221]                         info <- base::paste(info, collapse = "; ")
[17:39:21.221]                         if (!has_future) {
[17:39:21.221]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:21.221]                             info)
[17:39:21.221]                         }
[17:39:21.221]                         else {
[17:39:21.221]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:21.221]                             info, version)
[17:39:21.221]                         }
[17:39:21.221]                         base::stop(msg)
[17:39:21.221]                       }
[17:39:21.221]                     })
[17:39:21.221]                   }
[17:39:21.221]                   ...future.strategy.old <- future::plan("list")
[17:39:21.221]                   options(future.plan = NULL)
[17:39:21.221]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:21.221]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:21.221]                 }
[17:39:21.221]                 ...future.workdir <- getwd()
[17:39:21.221]             }
[17:39:21.221]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:21.221]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:21.221]         }
[17:39:21.221]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:21.221]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:21.221]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:21.221]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:21.221]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:21.221]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:21.221]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:21.221]             base::names(...future.oldOptions))
[17:39:21.221]     }
[17:39:21.221]     if (FALSE) {
[17:39:21.221]     }
[17:39:21.221]     else {
[17:39:21.221]         if (TRUE) {
[17:39:21.221]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:21.221]                 open = "w")
[17:39:21.221]         }
[17:39:21.221]         else {
[17:39:21.221]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:21.221]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:21.221]         }
[17:39:21.221]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:21.221]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:21.221]             base::sink(type = "output", split = FALSE)
[17:39:21.221]             base::close(...future.stdout)
[17:39:21.221]         }, add = TRUE)
[17:39:21.221]     }
[17:39:21.221]     ...future.frame <- base::sys.nframe()
[17:39:21.221]     ...future.conditions <- base::list()
[17:39:21.221]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:21.221]     if (FALSE) {
[17:39:21.221]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:21.221]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:21.221]     }
[17:39:21.221]     ...future.result <- base::tryCatch({
[17:39:21.221]         base::withCallingHandlers({
[17:39:21.221]             ...future.value <- base::withVisible(base::local({
[17:39:21.221]                 42L
[17:39:21.221]             }))
[17:39:21.221]             future::FutureResult(value = ...future.value$value, 
[17:39:21.221]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:21.221]                   ...future.rng), globalenv = if (FALSE) 
[17:39:21.221]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:21.221]                     ...future.globalenv.names))
[17:39:21.221]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:21.221]         }, condition = base::local({
[17:39:21.221]             c <- base::c
[17:39:21.221]             inherits <- base::inherits
[17:39:21.221]             invokeRestart <- base::invokeRestart
[17:39:21.221]             length <- base::length
[17:39:21.221]             list <- base::list
[17:39:21.221]             seq.int <- base::seq.int
[17:39:21.221]             signalCondition <- base::signalCondition
[17:39:21.221]             sys.calls <- base::sys.calls
[17:39:21.221]             `[[` <- base::`[[`
[17:39:21.221]             `+` <- base::`+`
[17:39:21.221]             `<<-` <- base::`<<-`
[17:39:21.221]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:21.221]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:21.221]                   3L)]
[17:39:21.221]             }
[17:39:21.221]             function(cond) {
[17:39:21.221]                 is_error <- inherits(cond, "error")
[17:39:21.221]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:21.221]                   NULL)
[17:39:21.221]                 if (is_error) {
[17:39:21.221]                   sessionInformation <- function() {
[17:39:21.221]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:21.221]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:21.221]                       search = base::search(), system = base::Sys.info())
[17:39:21.221]                   }
[17:39:21.221]                   ...future.conditions[[length(...future.conditions) + 
[17:39:21.221]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:21.221]                     cond$call), session = sessionInformation(), 
[17:39:21.221]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:21.221]                   signalCondition(cond)
[17:39:21.221]                 }
[17:39:21.221]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:21.221]                 "immediateCondition"))) {
[17:39:21.221]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:21.221]                   ...future.conditions[[length(...future.conditions) + 
[17:39:21.221]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:21.221]                   if (TRUE && !signal) {
[17:39:21.221]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:21.221]                     {
[17:39:21.221]                       inherits <- base::inherits
[17:39:21.221]                       invokeRestart <- base::invokeRestart
[17:39:21.221]                       is.null <- base::is.null
[17:39:21.221]                       muffled <- FALSE
[17:39:21.221]                       if (inherits(cond, "message")) {
[17:39:21.221]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:21.221]                         if (muffled) 
[17:39:21.221]                           invokeRestart("muffleMessage")
[17:39:21.221]                       }
[17:39:21.221]                       else if (inherits(cond, "warning")) {
[17:39:21.221]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:21.221]                         if (muffled) 
[17:39:21.221]                           invokeRestart("muffleWarning")
[17:39:21.221]                       }
[17:39:21.221]                       else if (inherits(cond, "condition")) {
[17:39:21.221]                         if (!is.null(pattern)) {
[17:39:21.221]                           computeRestarts <- base::computeRestarts
[17:39:21.221]                           grepl <- base::grepl
[17:39:21.221]                           restarts <- computeRestarts(cond)
[17:39:21.221]                           for (restart in restarts) {
[17:39:21.221]                             name <- restart$name
[17:39:21.221]                             if (is.null(name)) 
[17:39:21.221]                               next
[17:39:21.221]                             if (!grepl(pattern, name)) 
[17:39:21.221]                               next
[17:39:21.221]                             invokeRestart(restart)
[17:39:21.221]                             muffled <- TRUE
[17:39:21.221]                             break
[17:39:21.221]                           }
[17:39:21.221]                         }
[17:39:21.221]                       }
[17:39:21.221]                       invisible(muffled)
[17:39:21.221]                     }
[17:39:21.221]                     muffleCondition(cond, pattern = "^muffle")
[17:39:21.221]                   }
[17:39:21.221]                 }
[17:39:21.221]                 else {
[17:39:21.221]                   if (TRUE) {
[17:39:21.221]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:21.221]                     {
[17:39:21.221]                       inherits <- base::inherits
[17:39:21.221]                       invokeRestart <- base::invokeRestart
[17:39:21.221]                       is.null <- base::is.null
[17:39:21.221]                       muffled <- FALSE
[17:39:21.221]                       if (inherits(cond, "message")) {
[17:39:21.221]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:21.221]                         if (muffled) 
[17:39:21.221]                           invokeRestart("muffleMessage")
[17:39:21.221]                       }
[17:39:21.221]                       else if (inherits(cond, "warning")) {
[17:39:21.221]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:21.221]                         if (muffled) 
[17:39:21.221]                           invokeRestart("muffleWarning")
[17:39:21.221]                       }
[17:39:21.221]                       else if (inherits(cond, "condition")) {
[17:39:21.221]                         if (!is.null(pattern)) {
[17:39:21.221]                           computeRestarts <- base::computeRestarts
[17:39:21.221]                           grepl <- base::grepl
[17:39:21.221]                           restarts <- computeRestarts(cond)
[17:39:21.221]                           for (restart in restarts) {
[17:39:21.221]                             name <- restart$name
[17:39:21.221]                             if (is.null(name)) 
[17:39:21.221]                               next
[17:39:21.221]                             if (!grepl(pattern, name)) 
[17:39:21.221]                               next
[17:39:21.221]                             invokeRestart(restart)
[17:39:21.221]                             muffled <- TRUE
[17:39:21.221]                             break
[17:39:21.221]                           }
[17:39:21.221]                         }
[17:39:21.221]                       }
[17:39:21.221]                       invisible(muffled)
[17:39:21.221]                     }
[17:39:21.221]                     muffleCondition(cond, pattern = "^muffle")
[17:39:21.221]                   }
[17:39:21.221]                 }
[17:39:21.221]             }
[17:39:21.221]         }))
[17:39:21.221]     }, error = function(ex) {
[17:39:21.221]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:21.221]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:21.221]                 ...future.rng), started = ...future.startTime, 
[17:39:21.221]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:21.221]             version = "1.8"), class = "FutureResult")
[17:39:21.221]     }, finally = {
[17:39:21.221]         if (!identical(...future.workdir, getwd())) 
[17:39:21.221]             setwd(...future.workdir)
[17:39:21.221]         {
[17:39:21.221]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:21.221]                 ...future.oldOptions$nwarnings <- NULL
[17:39:21.221]             }
[17:39:21.221]             base::options(...future.oldOptions)
[17:39:21.221]             if (.Platform$OS.type == "windows") {
[17:39:21.221]                 old_names <- names(...future.oldEnvVars)
[17:39:21.221]                 envs <- base::Sys.getenv()
[17:39:21.221]                 names <- names(envs)
[17:39:21.221]                 common <- intersect(names, old_names)
[17:39:21.221]                 added <- setdiff(names, old_names)
[17:39:21.221]                 removed <- setdiff(old_names, names)
[17:39:21.221]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:21.221]                   envs[common]]
[17:39:21.221]                 NAMES <- toupper(changed)
[17:39:21.221]                 args <- list()
[17:39:21.221]                 for (kk in seq_along(NAMES)) {
[17:39:21.221]                   name <- changed[[kk]]
[17:39:21.221]                   NAME <- NAMES[[kk]]
[17:39:21.221]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:21.221]                     next
[17:39:21.221]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:21.221]                 }
[17:39:21.221]                 NAMES <- toupper(added)
[17:39:21.221]                 for (kk in seq_along(NAMES)) {
[17:39:21.221]                   name <- added[[kk]]
[17:39:21.221]                   NAME <- NAMES[[kk]]
[17:39:21.221]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:21.221]                     next
[17:39:21.221]                   args[[name]] <- ""
[17:39:21.221]                 }
[17:39:21.221]                 NAMES <- toupper(removed)
[17:39:21.221]                 for (kk in seq_along(NAMES)) {
[17:39:21.221]                   name <- removed[[kk]]
[17:39:21.221]                   NAME <- NAMES[[kk]]
[17:39:21.221]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:21.221]                     next
[17:39:21.221]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:21.221]                 }
[17:39:21.221]                 if (length(args) > 0) 
[17:39:21.221]                   base::do.call(base::Sys.setenv, args = args)
[17:39:21.221]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:21.221]             }
[17:39:21.221]             else {
[17:39:21.221]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:21.221]             }
[17:39:21.221]             {
[17:39:21.221]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:21.221]                   0L) {
[17:39:21.221]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:21.221]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:21.221]                   base::options(opts)
[17:39:21.221]                 }
[17:39:21.221]                 {
[17:39:21.221]                   {
[17:39:21.221]                     NULL
[17:39:21.221]                     RNGkind("Mersenne-Twister")
[17:39:21.221]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:21.221]                       inherits = FALSE)
[17:39:21.221]                   }
[17:39:21.221]                   options(future.plan = NULL)
[17:39:21.221]                   if (is.na(NA_character_)) 
[17:39:21.221]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:21.221]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:21.221]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:21.221]                     .init = FALSE)
[17:39:21.221]                 }
[17:39:21.221]             }
[17:39:21.221]         }
[17:39:21.221]     })
[17:39:21.221]     if (TRUE) {
[17:39:21.221]         base::sink(type = "output", split = FALSE)
[17:39:21.221]         if (TRUE) {
[17:39:21.221]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:21.221]         }
[17:39:21.221]         else {
[17:39:21.221]             ...future.result["stdout"] <- base::list(NULL)
[17:39:21.221]         }
[17:39:21.221]         base::close(...future.stdout)
[17:39:21.221]         ...future.stdout <- NULL
[17:39:21.221]     }
[17:39:21.221]     ...future.result$conditions <- ...future.conditions
[17:39:21.221]     ...future.result$finished <- base::Sys.time()
[17:39:21.221]     ...future.result
[17:39:21.221] }
[17:39:21.223] plan(): Setting new future strategy stack:
[17:39:21.223] List of future strategies:
[17:39:21.223] 1. sequential:
[17:39:21.223]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:21.223]    - tweaked: FALSE
[17:39:21.223]    - call: NULL
[17:39:21.224] plan(): nbrOfWorkers() = 1
[17:39:21.225] plan(): Setting new future strategy stack:
[17:39:21.225] List of future strategies:
[17:39:21.225] 1. future:
[17:39:21.225]    - args: function (..., workers = "<NULL>")
[17:39:21.225]    - tweaked: FALSE
[17:39:21.225]    - call: plan(foo)
[17:39:21.225] plan(): nbrOfWorkers() = Inf
[17:39:21.225] SequentialFuture started (and completed)
[1] 42
[17:39:21.226] getGlobalsAndPackages() ...
[17:39:21.226] Searching for globals...
[17:39:21.227] - globals found: [1] ‘{’
[17:39:21.227] Searching for globals ... DONE
[17:39:21.227] Resolving globals: FALSE
[17:39:21.227] 
[17:39:21.227] 
[17:39:21.228] getGlobalsAndPackages() ... DONE
[17:39:21.228] Packages needed by the future expression (n = 0): <none>
[17:39:21.228] Packages needed by future strategies (n = 0): <none>
[17:39:21.229] {
[17:39:21.229]     {
[17:39:21.229]         {
[17:39:21.229]             ...future.startTime <- base::Sys.time()
[17:39:21.229]             {
[17:39:21.229]                 {
[17:39:21.229]                   {
[17:39:21.229]                     base::local({
[17:39:21.229]                       has_future <- base::requireNamespace("future", 
[17:39:21.229]                         quietly = TRUE)
[17:39:21.229]                       if (has_future) {
[17:39:21.229]                         ns <- base::getNamespace("future")
[17:39:21.229]                         version <- ns[[".package"]][["version"]]
[17:39:21.229]                         if (is.null(version)) 
[17:39:21.229]                           version <- utils::packageVersion("future")
[17:39:21.229]                       }
[17:39:21.229]                       else {
[17:39:21.229]                         version <- NULL
[17:39:21.229]                       }
[17:39:21.229]                       if (!has_future || version < "1.8.0") {
[17:39:21.229]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:21.229]                           "", base::R.version$version.string), 
[17:39:21.229]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:21.229]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:21.229]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:21.229]                             "release", "version")], collapse = " "), 
[17:39:21.229]                           hostname = base::Sys.info()[["nodename"]])
[17:39:21.229]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:21.229]                           info)
[17:39:21.229]                         info <- base::paste(info, collapse = "; ")
[17:39:21.229]                         if (!has_future) {
[17:39:21.229]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:21.229]                             info)
[17:39:21.229]                         }
[17:39:21.229]                         else {
[17:39:21.229]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:21.229]                             info, version)
[17:39:21.229]                         }
[17:39:21.229]                         base::stop(msg)
[17:39:21.229]                       }
[17:39:21.229]                     })
[17:39:21.229]                   }
[17:39:21.229]                   ...future.strategy.old <- future::plan("list")
[17:39:21.229]                   options(future.plan = NULL)
[17:39:21.229]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:21.229]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:21.229]                 }
[17:39:21.229]                 ...future.workdir <- getwd()
[17:39:21.229]             }
[17:39:21.229]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:21.229]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:21.229]         }
[17:39:21.229]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:21.229]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:21.229]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:21.229]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:21.229]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:21.229]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:21.229]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:21.229]             base::names(...future.oldOptions))
[17:39:21.229]     }
[17:39:21.229]     if (FALSE) {
[17:39:21.229]     }
[17:39:21.229]     else {
[17:39:21.229]         if (TRUE) {
[17:39:21.229]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:21.229]                 open = "w")
[17:39:21.229]         }
[17:39:21.229]         else {
[17:39:21.229]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:21.229]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:21.229]         }
[17:39:21.229]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:21.229]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:21.229]             base::sink(type = "output", split = FALSE)
[17:39:21.229]             base::close(...future.stdout)
[17:39:21.229]         }, add = TRUE)
[17:39:21.229]     }
[17:39:21.229]     ...future.frame <- base::sys.nframe()
[17:39:21.229]     ...future.conditions <- base::list()
[17:39:21.229]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:21.229]     if (FALSE) {
[17:39:21.229]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:21.229]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:21.229]     }
[17:39:21.229]     ...future.result <- base::tryCatch({
[17:39:21.229]         base::withCallingHandlers({
[17:39:21.229]             ...future.value <- base::withVisible(base::local({
[17:39:21.229]                 42L
[17:39:21.229]             }))
[17:39:21.229]             future::FutureResult(value = ...future.value$value, 
[17:39:21.229]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:21.229]                   ...future.rng), globalenv = if (FALSE) 
[17:39:21.229]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:21.229]                     ...future.globalenv.names))
[17:39:21.229]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:21.229]         }, condition = base::local({
[17:39:21.229]             c <- base::c
[17:39:21.229]             inherits <- base::inherits
[17:39:21.229]             invokeRestart <- base::invokeRestart
[17:39:21.229]             length <- base::length
[17:39:21.229]             list <- base::list
[17:39:21.229]             seq.int <- base::seq.int
[17:39:21.229]             signalCondition <- base::signalCondition
[17:39:21.229]             sys.calls <- base::sys.calls
[17:39:21.229]             `[[` <- base::`[[`
[17:39:21.229]             `+` <- base::`+`
[17:39:21.229]             `<<-` <- base::`<<-`
[17:39:21.229]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:21.229]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:21.229]                   3L)]
[17:39:21.229]             }
[17:39:21.229]             function(cond) {
[17:39:21.229]                 is_error <- inherits(cond, "error")
[17:39:21.229]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:21.229]                   NULL)
[17:39:21.229]                 if (is_error) {
[17:39:21.229]                   sessionInformation <- function() {
[17:39:21.229]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:21.229]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:21.229]                       search = base::search(), system = base::Sys.info())
[17:39:21.229]                   }
[17:39:21.229]                   ...future.conditions[[length(...future.conditions) + 
[17:39:21.229]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:21.229]                     cond$call), session = sessionInformation(), 
[17:39:21.229]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:21.229]                   signalCondition(cond)
[17:39:21.229]                 }
[17:39:21.229]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:21.229]                 "immediateCondition"))) {
[17:39:21.229]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:21.229]                   ...future.conditions[[length(...future.conditions) + 
[17:39:21.229]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:21.229]                   if (TRUE && !signal) {
[17:39:21.229]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:21.229]                     {
[17:39:21.229]                       inherits <- base::inherits
[17:39:21.229]                       invokeRestart <- base::invokeRestart
[17:39:21.229]                       is.null <- base::is.null
[17:39:21.229]                       muffled <- FALSE
[17:39:21.229]                       if (inherits(cond, "message")) {
[17:39:21.229]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:21.229]                         if (muffled) 
[17:39:21.229]                           invokeRestart("muffleMessage")
[17:39:21.229]                       }
[17:39:21.229]                       else if (inherits(cond, "warning")) {
[17:39:21.229]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:21.229]                         if (muffled) 
[17:39:21.229]                           invokeRestart("muffleWarning")
[17:39:21.229]                       }
[17:39:21.229]                       else if (inherits(cond, "condition")) {
[17:39:21.229]                         if (!is.null(pattern)) {
[17:39:21.229]                           computeRestarts <- base::computeRestarts
[17:39:21.229]                           grepl <- base::grepl
[17:39:21.229]                           restarts <- computeRestarts(cond)
[17:39:21.229]                           for (restart in restarts) {
[17:39:21.229]                             name <- restart$name
[17:39:21.229]                             if (is.null(name)) 
[17:39:21.229]                               next
[17:39:21.229]                             if (!grepl(pattern, name)) 
[17:39:21.229]                               next
[17:39:21.229]                             invokeRestart(restart)
[17:39:21.229]                             muffled <- TRUE
[17:39:21.229]                             break
[17:39:21.229]                           }
[17:39:21.229]                         }
[17:39:21.229]                       }
[17:39:21.229]                       invisible(muffled)
[17:39:21.229]                     }
[17:39:21.229]                     muffleCondition(cond, pattern = "^muffle")
[17:39:21.229]                   }
[17:39:21.229]                 }
[17:39:21.229]                 else {
[17:39:21.229]                   if (TRUE) {
[17:39:21.229]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:21.229]                     {
[17:39:21.229]                       inherits <- base::inherits
[17:39:21.229]                       invokeRestart <- base::invokeRestart
[17:39:21.229]                       is.null <- base::is.null
[17:39:21.229]                       muffled <- FALSE
[17:39:21.229]                       if (inherits(cond, "message")) {
[17:39:21.229]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:21.229]                         if (muffled) 
[17:39:21.229]                           invokeRestart("muffleMessage")
[17:39:21.229]                       }
[17:39:21.229]                       else if (inherits(cond, "warning")) {
[17:39:21.229]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:21.229]                         if (muffled) 
[17:39:21.229]                           invokeRestart("muffleWarning")
[17:39:21.229]                       }
[17:39:21.229]                       else if (inherits(cond, "condition")) {
[17:39:21.229]                         if (!is.null(pattern)) {
[17:39:21.229]                           computeRestarts <- base::computeRestarts
[17:39:21.229]                           grepl <- base::grepl
[17:39:21.229]                           restarts <- computeRestarts(cond)
[17:39:21.229]                           for (restart in restarts) {
[17:39:21.229]                             name <- restart$name
[17:39:21.229]                             if (is.null(name)) 
[17:39:21.229]                               next
[17:39:21.229]                             if (!grepl(pattern, name)) 
[17:39:21.229]                               next
[17:39:21.229]                             invokeRestart(restart)
[17:39:21.229]                             muffled <- TRUE
[17:39:21.229]                             break
[17:39:21.229]                           }
[17:39:21.229]                         }
[17:39:21.229]                       }
[17:39:21.229]                       invisible(muffled)
[17:39:21.229]                     }
[17:39:21.229]                     muffleCondition(cond, pattern = "^muffle")
[17:39:21.229]                   }
[17:39:21.229]                 }
[17:39:21.229]             }
[17:39:21.229]         }))
[17:39:21.229]     }, error = function(ex) {
[17:39:21.229]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:21.229]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:21.229]                 ...future.rng), started = ...future.startTime, 
[17:39:21.229]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:21.229]             version = "1.8"), class = "FutureResult")
[17:39:21.229]     }, finally = {
[17:39:21.229]         if (!identical(...future.workdir, getwd())) 
[17:39:21.229]             setwd(...future.workdir)
[17:39:21.229]         {
[17:39:21.229]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:21.229]                 ...future.oldOptions$nwarnings <- NULL
[17:39:21.229]             }
[17:39:21.229]             base::options(...future.oldOptions)
[17:39:21.229]             if (.Platform$OS.type == "windows") {
[17:39:21.229]                 old_names <- names(...future.oldEnvVars)
[17:39:21.229]                 envs <- base::Sys.getenv()
[17:39:21.229]                 names <- names(envs)
[17:39:21.229]                 common <- intersect(names, old_names)
[17:39:21.229]                 added <- setdiff(names, old_names)
[17:39:21.229]                 removed <- setdiff(old_names, names)
[17:39:21.229]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:21.229]                   envs[common]]
[17:39:21.229]                 NAMES <- toupper(changed)
[17:39:21.229]                 args <- list()
[17:39:21.229]                 for (kk in seq_along(NAMES)) {
[17:39:21.229]                   name <- changed[[kk]]
[17:39:21.229]                   NAME <- NAMES[[kk]]
[17:39:21.229]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:21.229]                     next
[17:39:21.229]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:21.229]                 }
[17:39:21.229]                 NAMES <- toupper(added)
[17:39:21.229]                 for (kk in seq_along(NAMES)) {
[17:39:21.229]                   name <- added[[kk]]
[17:39:21.229]                   NAME <- NAMES[[kk]]
[17:39:21.229]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:21.229]                     next
[17:39:21.229]                   args[[name]] <- ""
[17:39:21.229]                 }
[17:39:21.229]                 NAMES <- toupper(removed)
[17:39:21.229]                 for (kk in seq_along(NAMES)) {
[17:39:21.229]                   name <- removed[[kk]]
[17:39:21.229]                   NAME <- NAMES[[kk]]
[17:39:21.229]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:21.229]                     next
[17:39:21.229]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:21.229]                 }
[17:39:21.229]                 if (length(args) > 0) 
[17:39:21.229]                   base::do.call(base::Sys.setenv, args = args)
[17:39:21.229]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:21.229]             }
[17:39:21.229]             else {
[17:39:21.229]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:21.229]             }
[17:39:21.229]             {
[17:39:21.229]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:21.229]                   0L) {
[17:39:21.229]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:21.229]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:21.229]                   base::options(opts)
[17:39:21.229]                 }
[17:39:21.229]                 {
[17:39:21.229]                   {
[17:39:21.229]                     NULL
[17:39:21.229]                     RNGkind("Mersenne-Twister")
[17:39:21.229]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:21.229]                       inherits = FALSE)
[17:39:21.229]                   }
[17:39:21.229]                   options(future.plan = NULL)
[17:39:21.229]                   if (is.na(NA_character_)) 
[17:39:21.229]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:21.229]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:21.229]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:21.229]                     .init = FALSE)
[17:39:21.229]                 }
[17:39:21.229]             }
[17:39:21.229]         }
[17:39:21.229]     })
[17:39:21.229]     if (TRUE) {
[17:39:21.229]         base::sink(type = "output", split = FALSE)
[17:39:21.229]         if (TRUE) {
[17:39:21.229]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:21.229]         }
[17:39:21.229]         else {
[17:39:21.229]             ...future.result["stdout"] <- base::list(NULL)
[17:39:21.229]         }
[17:39:21.229]         base::close(...future.stdout)
[17:39:21.229]         ...future.stdout <- NULL
[17:39:21.229]     }
[17:39:21.229]     ...future.result$conditions <- ...future.conditions
[17:39:21.229]     ...future.result$finished <- base::Sys.time()
[17:39:21.229]     ...future.result
[17:39:21.229] }
[17:39:21.230] plan(): Setting new future strategy stack:
[17:39:21.231] List of future strategies:
[17:39:21.231] 1. sequential:
[17:39:21.231]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:21.231]    - tweaked: FALSE
[17:39:21.231]    - call: NULL
[17:39:21.231] plan(): nbrOfWorkers() = 1
[17:39:21.232] plan(): Setting new future strategy stack:
[17:39:21.232] List of future strategies:
[17:39:21.232] 1. future:
[17:39:21.232]    - args: function (..., workers = "<NULL>")
[17:39:21.232]    - tweaked: FALSE
[17:39:21.232]    - call: plan(foo)
[17:39:21.233] plan(): nbrOfWorkers() = Inf
[17:39:21.233] SequentialFuture started (and completed)
[1] 42
[17:39:21.233] getGlobalsAndPackages() ...
[17:39:21.233] 
[17:39:21.233] - globals: [0] <none>
[17:39:21.234] getGlobalsAndPackages() ... DONE
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: 0x55737ff14be0
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2c25b728-8f02-e61d-0fe7-dde45c518816
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:21.235] Packages needed by the future expression (n = 0): <none>
[17:39:21.236] Packages needed by future strategies (n = 0): <none>
[17:39:21.236] {
[17:39:21.236]     {
[17:39:21.236]         {
[17:39:21.236]             ...future.startTime <- base::Sys.time()
[17:39:21.236]             {
[17:39:21.236]                 {
[17:39:21.236]                   {
[17:39:21.236]                     {
[17:39:21.236]                       base::local({
[17:39:21.236]                         has_future <- base::requireNamespace("future", 
[17:39:21.236]                           quietly = TRUE)
[17:39:21.236]                         if (has_future) {
[17:39:21.236]                           ns <- base::getNamespace("future")
[17:39:21.236]                           version <- ns[[".package"]][["version"]]
[17:39:21.236]                           if (is.null(version)) 
[17:39:21.236]                             version <- utils::packageVersion("future")
[17:39:21.236]                         }
[17:39:21.236]                         else {
[17:39:21.236]                           version <- NULL
[17:39:21.236]                         }
[17:39:21.236]                         if (!has_future || version < "1.8.0") {
[17:39:21.236]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:21.236]                             "", base::R.version$version.string), 
[17:39:21.236]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:21.236]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:21.236]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:21.236]                               "release", "version")], collapse = " "), 
[17:39:21.236]                             hostname = base::Sys.info()[["nodename"]])
[17:39:21.236]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:21.236]                             info)
[17:39:21.236]                           info <- base::paste(info, collapse = "; ")
[17:39:21.236]                           if (!has_future) {
[17:39:21.236]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:21.236]                               info)
[17:39:21.236]                           }
[17:39:21.236]                           else {
[17:39:21.236]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:21.236]                               info, version)
[17:39:21.236]                           }
[17:39:21.236]                           base::stop(msg)
[17:39:21.236]                         }
[17:39:21.236]                       })
[17:39:21.236]                     }
[17:39:21.236]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:21.236]                     base::options(mc.cores = 1L)
[17:39:21.236]                   }
[17:39:21.236]                   ...future.strategy.old <- future::plan("list")
[17:39:21.236]                   options(future.plan = NULL)
[17:39:21.236]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:21.236]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:21.236]                 }
[17:39:21.236]                 ...future.workdir <- getwd()
[17:39:21.236]             }
[17:39:21.236]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:21.236]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:21.236]         }
[17:39:21.236]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:21.236]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:21.236]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:21.236]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:21.236]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:21.236]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:21.236]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:21.236]             base::names(...future.oldOptions))
[17:39:21.236]     }
[17:39:21.236]     if (FALSE) {
[17:39:21.236]     }
[17:39:21.236]     else {
[17:39:21.236]         if (TRUE) {
[17:39:21.236]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:21.236]                 open = "w")
[17:39:21.236]         }
[17:39:21.236]         else {
[17:39:21.236]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:21.236]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:21.236]         }
[17:39:21.236]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:21.236]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:21.236]             base::sink(type = "output", split = FALSE)
[17:39:21.236]             base::close(...future.stdout)
[17:39:21.236]         }, add = TRUE)
[17:39:21.236]     }
[17:39:21.236]     ...future.frame <- base::sys.nframe()
[17:39:21.236]     ...future.conditions <- base::list()
[17:39:21.236]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:21.236]     if (FALSE) {
[17:39:21.236]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:21.236]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:21.236]     }
[17:39:21.236]     ...future.result <- base::tryCatch({
[17:39:21.236]         base::withCallingHandlers({
[17:39:21.236]             ...future.value <- base::withVisible(base::local({
[17:39:21.236]                 withCallingHandlers({
[17:39:21.236]                   {
[17:39:21.236]                     42L
[17:39:21.236]                   }
[17:39:21.236]                 }, immediateCondition = function(cond) {
[17:39:21.236]                   save_rds <- function (object, pathname, ...) 
[17:39:21.236]                   {
[17:39:21.236]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:39:21.236]                     if (file_test("-f", pathname_tmp)) {
[17:39:21.236]                       fi_tmp <- file.info(pathname_tmp)
[17:39:21.236]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:39:21.236]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:21.236]                         fi_tmp[["mtime"]])
[17:39:21.236]                     }
[17:39:21.236]                     tryCatch({
[17:39:21.236]                       saveRDS(object, file = pathname_tmp, ...)
[17:39:21.236]                     }, error = function(ex) {
[17:39:21.236]                       msg <- conditionMessage(ex)
[17:39:21.236]                       fi_tmp <- file.info(pathname_tmp)
[17:39:21.236]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:39:21.236]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:21.236]                         fi_tmp[["mtime"]], msg)
[17:39:21.236]                       ex$message <- msg
[17:39:21.236]                       stop(ex)
[17:39:21.236]                     })
[17:39:21.236]                     stopifnot(file_test("-f", pathname_tmp))
[17:39:21.236]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:39:21.236]                     if (!res || file_test("-f", pathname_tmp)) {
[17:39:21.236]                       fi_tmp <- file.info(pathname_tmp)
[17:39:21.236]                       fi <- file.info(pathname)
[17:39:21.236]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:39:21.236]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:21.236]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:39:21.236]                         fi[["size"]], fi[["mtime"]])
[17:39:21.236]                       stop(msg)
[17:39:21.236]                     }
[17:39:21.236]                     invisible(pathname)
[17:39:21.236]                   }
[17:39:21.236]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:39:21.236]                     rootPath = tempdir()) 
[17:39:21.236]                   {
[17:39:21.236]                     obj <- list(time = Sys.time(), condition = cond)
[17:39:21.236]                     file <- tempfile(pattern = class(cond)[1], 
[17:39:21.236]                       tmpdir = path, fileext = ".rds")
[17:39:21.236]                     save_rds(obj, file)
[17:39:21.236]                   }
[17:39:21.236]                   saveImmediateCondition(cond, path = "/tmp/RtmpdW9FaC/.future/immediateConditions")
[17:39:21.236]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:21.236]                   {
[17:39:21.236]                     inherits <- base::inherits
[17:39:21.236]                     invokeRestart <- base::invokeRestart
[17:39:21.236]                     is.null <- base::is.null
[17:39:21.236]                     muffled <- FALSE
[17:39:21.236]                     if (inherits(cond, "message")) {
[17:39:21.236]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:21.236]                       if (muffled) 
[17:39:21.236]                         invokeRestart("muffleMessage")
[17:39:21.236]                     }
[17:39:21.236]                     else if (inherits(cond, "warning")) {
[17:39:21.236]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:21.236]                       if (muffled) 
[17:39:21.236]                         invokeRestart("muffleWarning")
[17:39:21.236]                     }
[17:39:21.236]                     else if (inherits(cond, "condition")) {
[17:39:21.236]                       if (!is.null(pattern)) {
[17:39:21.236]                         computeRestarts <- base::computeRestarts
[17:39:21.236]                         grepl <- base::grepl
[17:39:21.236]                         restarts <- computeRestarts(cond)
[17:39:21.236]                         for (restart in restarts) {
[17:39:21.236]                           name <- restart$name
[17:39:21.236]                           if (is.null(name)) 
[17:39:21.236]                             next
[17:39:21.236]                           if (!grepl(pattern, name)) 
[17:39:21.236]                             next
[17:39:21.236]                           invokeRestart(restart)
[17:39:21.236]                           muffled <- TRUE
[17:39:21.236]                           break
[17:39:21.236]                         }
[17:39:21.236]                       }
[17:39:21.236]                     }
[17:39:21.236]                     invisible(muffled)
[17:39:21.236]                   }
[17:39:21.236]                   muffleCondition(cond)
[17:39:21.236]                 })
[17:39:21.236]             }))
[17:39:21.236]             future::FutureResult(value = ...future.value$value, 
[17:39:21.236]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:21.236]                   ...future.rng), globalenv = if (FALSE) 
[17:39:21.236]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:21.236]                     ...future.globalenv.names))
[17:39:21.236]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:21.236]         }, condition = base::local({
[17:39:21.236]             c <- base::c
[17:39:21.236]             inherits <- base::inherits
[17:39:21.236]             invokeRestart <- base::invokeRestart
[17:39:21.236]             length <- base::length
[17:39:21.236]             list <- base::list
[17:39:21.236]             seq.int <- base::seq.int
[17:39:21.236]             signalCondition <- base::signalCondition
[17:39:21.236]             sys.calls <- base::sys.calls
[17:39:21.236]             `[[` <- base::`[[`
[17:39:21.236]             `+` <- base::`+`
[17:39:21.236]             `<<-` <- base::`<<-`
[17:39:21.236]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:21.236]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:21.236]                   3L)]
[17:39:21.236]             }
[17:39:21.236]             function(cond) {
[17:39:21.236]                 is_error <- inherits(cond, "error")
[17:39:21.236]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:21.236]                   NULL)
[17:39:21.236]                 if (is_error) {
[17:39:21.236]                   sessionInformation <- function() {
[17:39:21.236]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:21.236]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:21.236]                       search = base::search(), system = base::Sys.info())
[17:39:21.236]                   }
[17:39:21.236]                   ...future.conditions[[length(...future.conditions) + 
[17:39:21.236]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:21.236]                     cond$call), session = sessionInformation(), 
[17:39:21.236]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:21.236]                   signalCondition(cond)
[17:39:21.236]                 }
[17:39:21.236]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:21.236]                 "immediateCondition"))) {
[17:39:21.236]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:21.236]                   ...future.conditions[[length(...future.conditions) + 
[17:39:21.236]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:21.236]                   if (TRUE && !signal) {
[17:39:21.236]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:21.236]                     {
[17:39:21.236]                       inherits <- base::inherits
[17:39:21.236]                       invokeRestart <- base::invokeRestart
[17:39:21.236]                       is.null <- base::is.null
[17:39:21.236]                       muffled <- FALSE
[17:39:21.236]                       if (inherits(cond, "message")) {
[17:39:21.236]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:21.236]                         if (muffled) 
[17:39:21.236]                           invokeRestart("muffleMessage")
[17:39:21.236]                       }
[17:39:21.236]                       else if (inherits(cond, "warning")) {
[17:39:21.236]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:21.236]                         if (muffled) 
[17:39:21.236]                           invokeRestart("muffleWarning")
[17:39:21.236]                       }
[17:39:21.236]                       else if (inherits(cond, "condition")) {
[17:39:21.236]                         if (!is.null(pattern)) {
[17:39:21.236]                           computeRestarts <- base::computeRestarts
[17:39:21.236]                           grepl <- base::grepl
[17:39:21.236]                           restarts <- computeRestarts(cond)
[17:39:21.236]                           for (restart in restarts) {
[17:39:21.236]                             name <- restart$name
[17:39:21.236]                             if (is.null(name)) 
[17:39:21.236]                               next
[17:39:21.236]                             if (!grepl(pattern, name)) 
[17:39:21.236]                               next
[17:39:21.236]                             invokeRestart(restart)
[17:39:21.236]                             muffled <- TRUE
[17:39:21.236]                             break
[17:39:21.236]                           }
[17:39:21.236]                         }
[17:39:21.236]                       }
[17:39:21.236]                       invisible(muffled)
[17:39:21.236]                     }
[17:39:21.236]                     muffleCondition(cond, pattern = "^muffle")
[17:39:21.236]                   }
[17:39:21.236]                 }
[17:39:21.236]                 else {
[17:39:21.236]                   if (TRUE) {
[17:39:21.236]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:21.236]                     {
[17:39:21.236]                       inherits <- base::inherits
[17:39:21.236]                       invokeRestart <- base::invokeRestart
[17:39:21.236]                       is.null <- base::is.null
[17:39:21.236]                       muffled <- FALSE
[17:39:21.236]                       if (inherits(cond, "message")) {
[17:39:21.236]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:21.236]                         if (muffled) 
[17:39:21.236]                           invokeRestart("muffleMessage")
[17:39:21.236]                       }
[17:39:21.236]                       else if (inherits(cond, "warning")) {
[17:39:21.236]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:21.236]                         if (muffled) 
[17:39:21.236]                           invokeRestart("muffleWarning")
[17:39:21.236]                       }
[17:39:21.236]                       else if (inherits(cond, "condition")) {
[17:39:21.236]                         if (!is.null(pattern)) {
[17:39:21.236]                           computeRestarts <- base::computeRestarts
[17:39:21.236]                           grepl <- base::grepl
[17:39:21.236]                           restarts <- computeRestarts(cond)
[17:39:21.236]                           for (restart in restarts) {
[17:39:21.236]                             name <- restart$name
[17:39:21.236]                             if (is.null(name)) 
[17:39:21.236]                               next
[17:39:21.236]                             if (!grepl(pattern, name)) 
[17:39:21.236]                               next
[17:39:21.236]                             invokeRestart(restart)
[17:39:21.236]                             muffled <- TRUE
[17:39:21.236]                             break
[17:39:21.236]                           }
[17:39:21.236]                         }
[17:39:21.236]                       }
[17:39:21.236]                       invisible(muffled)
[17:39:21.236]                     }
[17:39:21.236]                     muffleCondition(cond, pattern = "^muffle")
[17:39:21.236]                   }
[17:39:21.236]                 }
[17:39:21.236]             }
[17:39:21.236]         }))
[17:39:21.236]     }, error = function(ex) {
[17:39:21.236]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:21.236]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:21.236]                 ...future.rng), started = ...future.startTime, 
[17:39:21.236]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:21.236]             version = "1.8"), class = "FutureResult")
[17:39:21.236]     }, finally = {
[17:39:21.236]         if (!identical(...future.workdir, getwd())) 
[17:39:21.236]             setwd(...future.workdir)
[17:39:21.236]         {
[17:39:21.236]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:21.236]                 ...future.oldOptions$nwarnings <- NULL
[17:39:21.236]             }
[17:39:21.236]             base::options(...future.oldOptions)
[17:39:21.236]             if (.Platform$OS.type == "windows") {
[17:39:21.236]                 old_names <- names(...future.oldEnvVars)
[17:39:21.236]                 envs <- base::Sys.getenv()
[17:39:21.236]                 names <- names(envs)
[17:39:21.236]                 common <- intersect(names, old_names)
[17:39:21.236]                 added <- setdiff(names, old_names)
[17:39:21.236]                 removed <- setdiff(old_names, names)
[17:39:21.236]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:21.236]                   envs[common]]
[17:39:21.236]                 NAMES <- toupper(changed)
[17:39:21.236]                 args <- list()
[17:39:21.236]                 for (kk in seq_along(NAMES)) {
[17:39:21.236]                   name <- changed[[kk]]
[17:39:21.236]                   NAME <- NAMES[[kk]]
[17:39:21.236]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:21.236]                     next
[17:39:21.236]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:21.236]                 }
[17:39:21.236]                 NAMES <- toupper(added)
[17:39:21.236]                 for (kk in seq_along(NAMES)) {
[17:39:21.236]                   name <- added[[kk]]
[17:39:21.236]                   NAME <- NAMES[[kk]]
[17:39:21.236]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:21.236]                     next
[17:39:21.236]                   args[[name]] <- ""
[17:39:21.236]                 }
[17:39:21.236]                 NAMES <- toupper(removed)
[17:39:21.236]                 for (kk in seq_along(NAMES)) {
[17:39:21.236]                   name <- removed[[kk]]
[17:39:21.236]                   NAME <- NAMES[[kk]]
[17:39:21.236]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:21.236]                     next
[17:39:21.236]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:21.236]                 }
[17:39:21.236]                 if (length(args) > 0) 
[17:39:21.236]                   base::do.call(base::Sys.setenv, args = args)
[17:39:21.236]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:21.236]             }
[17:39:21.236]             else {
[17:39:21.236]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:21.236]             }
[17:39:21.236]             {
[17:39:21.236]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:21.236]                   0L) {
[17:39:21.236]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:21.236]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:21.236]                   base::options(opts)
[17:39:21.236]                 }
[17:39:21.236]                 {
[17:39:21.236]                   {
[17:39:21.236]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:21.236]                     NULL
[17:39:21.236]                   }
[17:39:21.236]                   options(future.plan = NULL)
[17:39:21.236]                   if (is.na(NA_character_)) 
[17:39:21.236]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:21.236]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:21.236]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:21.236]                     .init = FALSE)
[17:39:21.236]                 }
[17:39:21.236]             }
[17:39:21.236]         }
[17:39:21.236]     })
[17:39:21.236]     if (TRUE) {
[17:39:21.236]         base::sink(type = "output", split = FALSE)
[17:39:21.236]         if (TRUE) {
[17:39:21.236]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:21.236]         }
[17:39:21.236]         else {
[17:39:21.236]             ...future.result["stdout"] <- base::list(NULL)
[17:39:21.236]         }
[17:39:21.236]         base::close(...future.stdout)
[17:39:21.236]         ...future.stdout <- NULL
[17:39:21.236]     }
[17:39:21.236]     ...future.result$conditions <- ...future.conditions
[17:39:21.236]     ...future.result$finished <- base::Sys.time()
[17:39:21.236]     ...future.result
[17:39:21.236] }
[17:39:21.239] requestCore(): workers = 2
[17:39:21.242] MulticoreFuture started
[17:39:21.242] plan(): Setting new future strategy stack:
[17:39:21.243] List of future strategies:
[17:39:21.243] 1. sequential:
[17:39:21.243]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:21.243]    - tweaked: FALSE
[17:39:21.243]    - call: NULL
[17:39:21.243] result() for MulticoreFuture ...
[17:39:21.244] plan(): nbrOfWorkers() = 1
[17:39:21.245] plan(): Setting new future strategy stack:
[17:39:21.245] List of future strategies:
[17:39:21.245] 1. future:
[17:39:21.245]    - args: function (..., workers = "<NULL>")
[17:39:21.245]    - tweaked: FALSE
[17:39:21.245]    - call: plan(foo)
[17:39:21.246] plan(): nbrOfWorkers() = Inf
[17:39:21.247] result() for MulticoreFuture ...
[17:39:21.247] result() for MulticoreFuture ... done
[17:39:21.247] result() for MulticoreFuture ... done
[17:39:21.248] result() for MulticoreFuture ...
[17:39:21.248] result() for MulticoreFuture ... done
[1] 42
[17:39:21.249] getGlobalsAndPackages() ...
[17:39:21.249] 
[17:39:21.250] - globals: [0] <none>
[17:39:21.250] getGlobalsAndPackages() ... DONE
[17:39:21.250] Packages needed by the future expression (n = 0): <none>
[17:39:21.250] Packages needed by future strategies (n = 0): <none>
[17:39:21.251] {
[17:39:21.251]     {
[17:39:21.251]         {
[17:39:21.251]             ...future.startTime <- base::Sys.time()
[17:39:21.251]             {
[17:39:21.251]                 {
[17:39:21.251]                   {
[17:39:21.251]                     {
[17:39:21.251]                       base::local({
[17:39:21.251]                         has_future <- base::requireNamespace("future", 
[17:39:21.251]                           quietly = TRUE)
[17:39:21.251]                         if (has_future) {
[17:39:21.251]                           ns <- base::getNamespace("future")
[17:39:21.251]                           version <- ns[[".package"]][["version"]]
[17:39:21.251]                           if (is.null(version)) 
[17:39:21.251]                             version <- utils::packageVersion("future")
[17:39:21.251]                         }
[17:39:21.251]                         else {
[17:39:21.251]                           version <- NULL
[17:39:21.251]                         }
[17:39:21.251]                         if (!has_future || version < "1.8.0") {
[17:39:21.251]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:21.251]                             "", base::R.version$version.string), 
[17:39:21.251]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:21.251]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:21.251]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:21.251]                               "release", "version")], collapse = " "), 
[17:39:21.251]                             hostname = base::Sys.info()[["nodename"]])
[17:39:21.251]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:21.251]                             info)
[17:39:21.251]                           info <- base::paste(info, collapse = "; ")
[17:39:21.251]                           if (!has_future) {
[17:39:21.251]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:21.251]                               info)
[17:39:21.251]                           }
[17:39:21.251]                           else {
[17:39:21.251]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:21.251]                               info, version)
[17:39:21.251]                           }
[17:39:21.251]                           base::stop(msg)
[17:39:21.251]                         }
[17:39:21.251]                       })
[17:39:21.251]                     }
[17:39:21.251]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:21.251]                     base::options(mc.cores = 1L)
[17:39:21.251]                   }
[17:39:21.251]                   ...future.strategy.old <- future::plan("list")
[17:39:21.251]                   options(future.plan = NULL)
[17:39:21.251]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:21.251]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:21.251]                 }
[17:39:21.251]                 ...future.workdir <- getwd()
[17:39:21.251]             }
[17:39:21.251]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:21.251]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:21.251]         }
[17:39:21.251]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:21.251]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:21.251]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:21.251]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:21.251]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:21.251]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:21.251]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:21.251]             base::names(...future.oldOptions))
[17:39:21.251]     }
[17:39:21.251]     if (FALSE) {
[17:39:21.251]     }
[17:39:21.251]     else {
[17:39:21.251]         if (TRUE) {
[17:39:21.251]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:21.251]                 open = "w")
[17:39:21.251]         }
[17:39:21.251]         else {
[17:39:21.251]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:21.251]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:21.251]         }
[17:39:21.251]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:21.251]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:21.251]             base::sink(type = "output", split = FALSE)
[17:39:21.251]             base::close(...future.stdout)
[17:39:21.251]         }, add = TRUE)
[17:39:21.251]     }
[17:39:21.251]     ...future.frame <- base::sys.nframe()
[17:39:21.251]     ...future.conditions <- base::list()
[17:39:21.251]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:21.251]     if (FALSE) {
[17:39:21.251]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:21.251]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:21.251]     }
[17:39:21.251]     ...future.result <- base::tryCatch({
[17:39:21.251]         base::withCallingHandlers({
[17:39:21.251]             ...future.value <- base::withVisible(base::local({
[17:39:21.251]                 withCallingHandlers({
[17:39:21.251]                   {
[17:39:21.251]                     42L
[17:39:21.251]                   }
[17:39:21.251]                 }, immediateCondition = function(cond) {
[17:39:21.251]                   save_rds <- function (object, pathname, ...) 
[17:39:21.251]                   {
[17:39:21.251]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:39:21.251]                     if (file_test("-f", pathname_tmp)) {
[17:39:21.251]                       fi_tmp <- file.info(pathname_tmp)
[17:39:21.251]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:39:21.251]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:21.251]                         fi_tmp[["mtime"]])
[17:39:21.251]                     }
[17:39:21.251]                     tryCatch({
[17:39:21.251]                       saveRDS(object, file = pathname_tmp, ...)
[17:39:21.251]                     }, error = function(ex) {
[17:39:21.251]                       msg <- conditionMessage(ex)
[17:39:21.251]                       fi_tmp <- file.info(pathname_tmp)
[17:39:21.251]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:39:21.251]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:21.251]                         fi_tmp[["mtime"]], msg)
[17:39:21.251]                       ex$message <- msg
[17:39:21.251]                       stop(ex)
[17:39:21.251]                     })
[17:39:21.251]                     stopifnot(file_test("-f", pathname_tmp))
[17:39:21.251]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:39:21.251]                     if (!res || file_test("-f", pathname_tmp)) {
[17:39:21.251]                       fi_tmp <- file.info(pathname_tmp)
[17:39:21.251]                       fi <- file.info(pathname)
[17:39:21.251]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:39:21.251]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:21.251]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:39:21.251]                         fi[["size"]], fi[["mtime"]])
[17:39:21.251]                       stop(msg)
[17:39:21.251]                     }
[17:39:21.251]                     invisible(pathname)
[17:39:21.251]                   }
[17:39:21.251]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:39:21.251]                     rootPath = tempdir()) 
[17:39:21.251]                   {
[17:39:21.251]                     obj <- list(time = Sys.time(), condition = cond)
[17:39:21.251]                     file <- tempfile(pattern = class(cond)[1], 
[17:39:21.251]                       tmpdir = path, fileext = ".rds")
[17:39:21.251]                     save_rds(obj, file)
[17:39:21.251]                   }
[17:39:21.251]                   saveImmediateCondition(cond, path = "/tmp/RtmpdW9FaC/.future/immediateConditions")
[17:39:21.251]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:21.251]                   {
[17:39:21.251]                     inherits <- base::inherits
[17:39:21.251]                     invokeRestart <- base::invokeRestart
[17:39:21.251]                     is.null <- base::is.null
[17:39:21.251]                     muffled <- FALSE
[17:39:21.251]                     if (inherits(cond, "message")) {
[17:39:21.251]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:21.251]                       if (muffled) 
[17:39:21.251]                         invokeRestart("muffleMessage")
[17:39:21.251]                     }
[17:39:21.251]                     else if (inherits(cond, "warning")) {
[17:39:21.251]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:21.251]                       if (muffled) 
[17:39:21.251]                         invokeRestart("muffleWarning")
[17:39:21.251]                     }
[17:39:21.251]                     else if (inherits(cond, "condition")) {
[17:39:21.251]                       if (!is.null(pattern)) {
[17:39:21.251]                         computeRestarts <- base::computeRestarts
[17:39:21.251]                         grepl <- base::grepl
[17:39:21.251]                         restarts <- computeRestarts(cond)
[17:39:21.251]                         for (restart in restarts) {
[17:39:21.251]                           name <- restart$name
[17:39:21.251]                           if (is.null(name)) 
[17:39:21.251]                             next
[17:39:21.251]                           if (!grepl(pattern, name)) 
[17:39:21.251]                             next
[17:39:21.251]                           invokeRestart(restart)
[17:39:21.251]                           muffled <- TRUE
[17:39:21.251]                           break
[17:39:21.251]                         }
[17:39:21.251]                       }
[17:39:21.251]                     }
[17:39:21.251]                     invisible(muffled)
[17:39:21.251]                   }
[17:39:21.251]                   muffleCondition(cond)
[17:39:21.251]                 })
[17:39:21.251]             }))
[17:39:21.251]             future::FutureResult(value = ...future.value$value, 
[17:39:21.251]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:21.251]                   ...future.rng), globalenv = if (FALSE) 
[17:39:21.251]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:21.251]                     ...future.globalenv.names))
[17:39:21.251]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:21.251]         }, condition = base::local({
[17:39:21.251]             c <- base::c
[17:39:21.251]             inherits <- base::inherits
[17:39:21.251]             invokeRestart <- base::invokeRestart
[17:39:21.251]             length <- base::length
[17:39:21.251]             list <- base::list
[17:39:21.251]             seq.int <- base::seq.int
[17:39:21.251]             signalCondition <- base::signalCondition
[17:39:21.251]             sys.calls <- base::sys.calls
[17:39:21.251]             `[[` <- base::`[[`
[17:39:21.251]             `+` <- base::`+`
[17:39:21.251]             `<<-` <- base::`<<-`
[17:39:21.251]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:21.251]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:21.251]                   3L)]
[17:39:21.251]             }
[17:39:21.251]             function(cond) {
[17:39:21.251]                 is_error <- inherits(cond, "error")
[17:39:21.251]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:21.251]                   NULL)
[17:39:21.251]                 if (is_error) {
[17:39:21.251]                   sessionInformation <- function() {
[17:39:21.251]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:21.251]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:21.251]                       search = base::search(), system = base::Sys.info())
[17:39:21.251]                   }
[17:39:21.251]                   ...future.conditions[[length(...future.conditions) + 
[17:39:21.251]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:21.251]                     cond$call), session = sessionInformation(), 
[17:39:21.251]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:21.251]                   signalCondition(cond)
[17:39:21.251]                 }
[17:39:21.251]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:21.251]                 "immediateCondition"))) {
[17:39:21.251]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:21.251]                   ...future.conditions[[length(...future.conditions) + 
[17:39:21.251]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:21.251]                   if (TRUE && !signal) {
[17:39:21.251]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:21.251]                     {
[17:39:21.251]                       inherits <- base::inherits
[17:39:21.251]                       invokeRestart <- base::invokeRestart
[17:39:21.251]                       is.null <- base::is.null
[17:39:21.251]                       muffled <- FALSE
[17:39:21.251]                       if (inherits(cond, "message")) {
[17:39:21.251]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:21.251]                         if (muffled) 
[17:39:21.251]                           invokeRestart("muffleMessage")
[17:39:21.251]                       }
[17:39:21.251]                       else if (inherits(cond, "warning")) {
[17:39:21.251]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:21.251]                         if (muffled) 
[17:39:21.251]                           invokeRestart("muffleWarning")
[17:39:21.251]                       }
[17:39:21.251]                       else if (inherits(cond, "condition")) {
[17:39:21.251]                         if (!is.null(pattern)) {
[17:39:21.251]                           computeRestarts <- base::computeRestarts
[17:39:21.251]                           grepl <- base::grepl
[17:39:21.251]                           restarts <- computeRestarts(cond)
[17:39:21.251]                           for (restart in restarts) {
[17:39:21.251]                             name <- restart$name
[17:39:21.251]                             if (is.null(name)) 
[17:39:21.251]                               next
[17:39:21.251]                             if (!grepl(pattern, name)) 
[17:39:21.251]                               next
[17:39:21.251]                             invokeRestart(restart)
[17:39:21.251]                             muffled <- TRUE
[17:39:21.251]                             break
[17:39:21.251]                           }
[17:39:21.251]                         }
[17:39:21.251]                       }
[17:39:21.251]                       invisible(muffled)
[17:39:21.251]                     }
[17:39:21.251]                     muffleCondition(cond, pattern = "^muffle")
[17:39:21.251]                   }
[17:39:21.251]                 }
[17:39:21.251]                 else {
[17:39:21.251]                   if (TRUE) {
[17:39:21.251]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:21.251]                     {
[17:39:21.251]                       inherits <- base::inherits
[17:39:21.251]                       invokeRestart <- base::invokeRestart
[17:39:21.251]                       is.null <- base::is.null
[17:39:21.251]                       muffled <- FALSE
[17:39:21.251]                       if (inherits(cond, "message")) {
[17:39:21.251]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:21.251]                         if (muffled) 
[17:39:21.251]                           invokeRestart("muffleMessage")
[17:39:21.251]                       }
[17:39:21.251]                       else if (inherits(cond, "warning")) {
[17:39:21.251]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:21.251]                         if (muffled) 
[17:39:21.251]                           invokeRestart("muffleWarning")
[17:39:21.251]                       }
[17:39:21.251]                       else if (inherits(cond, "condition")) {
[17:39:21.251]                         if (!is.null(pattern)) {
[17:39:21.251]                           computeRestarts <- base::computeRestarts
[17:39:21.251]                           grepl <- base::grepl
[17:39:21.251]                           restarts <- computeRestarts(cond)
[17:39:21.251]                           for (restart in restarts) {
[17:39:21.251]                             name <- restart$name
[17:39:21.251]                             if (is.null(name)) 
[17:39:21.251]                               next
[17:39:21.251]                             if (!grepl(pattern, name)) 
[17:39:21.251]                               next
[17:39:21.251]                             invokeRestart(restart)
[17:39:21.251]                             muffled <- TRUE
[17:39:21.251]                             break
[17:39:21.251]                           }
[17:39:21.251]                         }
[17:39:21.251]                       }
[17:39:21.251]                       invisible(muffled)
[17:39:21.251]                     }
[17:39:21.251]                     muffleCondition(cond, pattern = "^muffle")
[17:39:21.251]                   }
[17:39:21.251]                 }
[17:39:21.251]             }
[17:39:21.251]         }))
[17:39:21.251]     }, error = function(ex) {
[17:39:21.251]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:21.251]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:21.251]                 ...future.rng), started = ...future.startTime, 
[17:39:21.251]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:21.251]             version = "1.8"), class = "FutureResult")
[17:39:21.251]     }, finally = {
[17:39:21.251]         if (!identical(...future.workdir, getwd())) 
[17:39:21.251]             setwd(...future.workdir)
[17:39:21.251]         {
[17:39:21.251]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:21.251]                 ...future.oldOptions$nwarnings <- NULL
[17:39:21.251]             }
[17:39:21.251]             base::options(...future.oldOptions)
[17:39:21.251]             if (.Platform$OS.type == "windows") {
[17:39:21.251]                 old_names <- names(...future.oldEnvVars)
[17:39:21.251]                 envs <- base::Sys.getenv()
[17:39:21.251]                 names <- names(envs)
[17:39:21.251]                 common <- intersect(names, old_names)
[17:39:21.251]                 added <- setdiff(names, old_names)
[17:39:21.251]                 removed <- setdiff(old_names, names)
[17:39:21.251]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:21.251]                   envs[common]]
[17:39:21.251]                 NAMES <- toupper(changed)
[17:39:21.251]                 args <- list()
[17:39:21.251]                 for (kk in seq_along(NAMES)) {
[17:39:21.251]                   name <- changed[[kk]]
[17:39:21.251]                   NAME <- NAMES[[kk]]
[17:39:21.251]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:21.251]                     next
[17:39:21.251]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:21.251]                 }
[17:39:21.251]                 NAMES <- toupper(added)
[17:39:21.251]                 for (kk in seq_along(NAMES)) {
[17:39:21.251]                   name <- added[[kk]]
[17:39:21.251]                   NAME <- NAMES[[kk]]
[17:39:21.251]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:21.251]                     next
[17:39:21.251]                   args[[name]] <- ""
[17:39:21.251]                 }
[17:39:21.251]                 NAMES <- toupper(removed)
[17:39:21.251]                 for (kk in seq_along(NAMES)) {
[17:39:21.251]                   name <- removed[[kk]]
[17:39:21.251]                   NAME <- NAMES[[kk]]
[17:39:21.251]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:21.251]                     next
[17:39:21.251]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:21.251]                 }
[17:39:21.251]                 if (length(args) > 0) 
[17:39:21.251]                   base::do.call(base::Sys.setenv, args = args)
[17:39:21.251]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:21.251]             }
[17:39:21.251]             else {
[17:39:21.251]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:21.251]             }
[17:39:21.251]             {
[17:39:21.251]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:21.251]                   0L) {
[17:39:21.251]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:21.251]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:21.251]                   base::options(opts)
[17:39:21.251]                 }
[17:39:21.251]                 {
[17:39:21.251]                   {
[17:39:21.251]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:21.251]                     NULL
[17:39:21.251]                   }
[17:39:21.251]                   options(future.plan = NULL)
[17:39:21.251]                   if (is.na(NA_character_)) 
[17:39:21.251]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:21.251]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:21.251]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:21.251]                     .init = FALSE)
[17:39:21.251]                 }
[17:39:21.251]             }
[17:39:21.251]         }
[17:39:21.251]     })
[17:39:21.251]     if (TRUE) {
[17:39:21.251]         base::sink(type = "output", split = FALSE)
[17:39:21.251]         if (TRUE) {
[17:39:21.251]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:21.251]         }
[17:39:21.251]         else {
[17:39:21.251]             ...future.result["stdout"] <- base::list(NULL)
[17:39:21.251]         }
[17:39:21.251]         base::close(...future.stdout)
[17:39:21.251]         ...future.stdout <- NULL
[17:39:21.251]     }
[17:39:21.251]     ...future.result$conditions <- ...future.conditions
[17:39:21.251]     ...future.result$finished <- base::Sys.time()
[17:39:21.251]     ...future.result
[17:39:21.251] }
[17:39:21.254] requestCore(): workers = 2
[17:39:21.256] MulticoreFuture started
[17:39:21.256] result() for MulticoreFuture ...
[17:39:21.257] plan(): Setting new future strategy stack:
[17:39:21.257] List of future strategies:
[17:39:21.257] 1. sequential:
[17:39:21.257]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:21.257]    - tweaked: FALSE
[17:39:21.257]    - call: NULL
[17:39:21.258] plan(): nbrOfWorkers() = 1
[17:39:21.259] plan(): Setting new future strategy stack:
[17:39:21.260] List of future strategies:
[17:39:21.260] 1. future:
[17:39:21.260]    - args: function (..., workers = "<NULL>")
[17:39:21.260]    - tweaked: FALSE
[17:39:21.260]    - call: plan(foo)
[17:39:21.260] plan(): nbrOfWorkers() = Inf
[17:39:21.261] result() for MulticoreFuture ...
[17:39:21.261] result() for MulticoreFuture ... done
[17:39:21.262] result() for MulticoreFuture ... done
[17:39:21.262] result() for MulticoreFuture ...
[17:39:21.262] result() for MulticoreFuture ... done
[1] 42
> 
> message("*** Future class - exception ... DONE")
*** Future class - exception ... DONE
> 
> message("*** Future class ... DONE")
*** Future class ... DONE
> 
> source("incl/end.R")
[17:39:21.263] plan(): Setting new future strategy stack:
[17:39:21.263] List of future strategies:
[17:39:21.263] 1. FutureStrategy:
[17:39:21.263]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:21.263]    - tweaked: FALSE
[17:39:21.263]    - call: future::plan(oplan)
[17:39:21.264] plan(): nbrOfWorkers() = 1
> 
