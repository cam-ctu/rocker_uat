
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[09:30:59.066] plan(): Setting new future strategy stack:
[09:30:59.067] List of future strategies:
[09:30:59.067] 1. sequential:
[09:30:59.067]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:59.067]    - tweaked: FALSE
[09:30:59.067]    - call: future::plan("sequential")
[09:30:59.078] plan(): nbrOfWorkers() = 1
> 
> message("*** Future class ...")
*** Future class ...
> 
> message("*** Future class - exception ...")
*** Future class - exception ...
> 
> f <- Future()
[09:30:59.090] getGlobalsAndPackages() ...
[09:30:59.091] 
[09:30:59.091] - globals: [0] <none>
[09:30:59.091] getGlobalsAndPackages() ... DONE
> print(f)
Future:
Label: ‘<none>’
Expression:
NULL
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: d1376831-1a69-df06-dce9-bd05e7c69d80
Class: ‘Future’, ‘environment’
> 
> res <- tryCatch(value(f), error = identity)
[09:30:59.092] run() for ‘Future’ ...
[09:30:59.092] - state: ‘created’
[09:30:59.093] run() for ‘Future’ ... done
> print(res)
<simpleError: ‘future$lazy’ is not TRUE>
> stopifnot(inherits(res, "error"))
> 
> ## Invalid seed
> res <- tryCatch(f <- Future(42, seed = 1:2), error = identity)
> stopifnot(inherits(res, "error"))
> 
> ## When no packages are exported
> foo <- structure(function(...) { Future(1) }, class = "future")
> plan(foo)
[09:30:59.095] plan(): Setting new future strategy stack:
[09:30:59.095] List of future strategies:
[09:30:59.095] 1. future:
[09:30:59.095]    - args: function (..., workers = "<NULL>")
[09:30:59.095]    - tweaked: FALSE
[09:30:59.095]    - call: plan(foo)
[09:30:59.106] plan(): nbrOfWorkers() = Inf
> f <- Future()
[09:30:59.106] getGlobalsAndPackages() ...
[09:30:59.106] 
[09:30:59.106] - globals: [0] <none>
[09:30:59.106] getGlobalsAndPackages() ... DONE
> expr <- getExpression(f)
[09:30:59.107] Packages needed by the future expression (n = 0): <none>
[09:30:59.107] Packages needed by future strategies (n = 0): <none>
[09:30:59.108] {
[09:30:59.108]     {
[09:30:59.108]         {
[09:30:59.108]             ...future.startTime <- base::Sys.time()
[09:30:59.108]             {
[09:30:59.108]                 {
[09:30:59.108]                   {
[09:30:59.108]                     base::local({
[09:30:59.108]                       has_future <- base::requireNamespace("future", 
[09:30:59.108]                         quietly = TRUE)
[09:30:59.108]                       if (has_future) {
[09:30:59.108]                         ns <- base::getNamespace("future")
[09:30:59.108]                         version <- ns[[".package"]][["version"]]
[09:30:59.108]                         if (is.null(version)) 
[09:30:59.108]                           version <- utils::packageVersion("future")
[09:30:59.108]                       }
[09:30:59.108]                       else {
[09:30:59.108]                         version <- NULL
[09:30:59.108]                       }
[09:30:59.108]                       if (!has_future || version < "1.8.0") {
[09:30:59.108]                         info <- base::c(r_version = base::gsub("R version ", 
[09:30:59.108]                           "", base::R.version$version.string), 
[09:30:59.108]                           platform = base::sprintf("%s (%s-bit)", 
[09:30:59.108]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:30:59.108]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:30:59.108]                             "release", "version")], collapse = " "), 
[09:30:59.108]                           hostname = base::Sys.info()[["nodename"]])
[09:30:59.108]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:30:59.108]                           info)
[09:30:59.108]                         info <- base::paste(info, collapse = "; ")
[09:30:59.108]                         if (!has_future) {
[09:30:59.108]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:30:59.108]                             info)
[09:30:59.108]                         }
[09:30:59.108]                         else {
[09:30:59.108]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:30:59.108]                             info, version)
[09:30:59.108]                         }
[09:30:59.108]                         base::stop(msg)
[09:30:59.108]                       }
[09:30:59.108]                     })
[09:30:59.108]                   }
[09:30:59.108]                   ...future.strategy.old <- future::plan("list")
[09:30:59.108]                   options(future.plan = NULL)
[09:30:59.108]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:30:59.108]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:30:59.108]                 }
[09:30:59.108]                 ...future.workdir <- getwd()
[09:30:59.108]             }
[09:30:59.108]             ...future.oldOptions <- base::as.list(base::.Options)
[09:30:59.108]             ...future.oldEnvVars <- base::Sys.getenv()
[09:30:59.108]         }
[09:30:59.108]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:30:59.108]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:30:59.108]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:30:59.108]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:30:59.108]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:30:59.108]             future.stdout.windows.reencode = NULL, width = 80L)
[09:30:59.108]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:30:59.108]             base::names(...future.oldOptions))
[09:30:59.108]     }
[09:30:59.108]     if (FALSE) {
[09:30:59.108]     }
[09:30:59.108]     else {
[09:30:59.108]         if (TRUE) {
[09:30:59.108]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:30:59.108]                 open = "w")
[09:30:59.108]         }
[09:30:59.108]         else {
[09:30:59.108]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:30:59.108]                 windows = "NUL", "/dev/null"), open = "w")
[09:30:59.108]         }
[09:30:59.108]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:30:59.108]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:30:59.108]             base::sink(type = "output", split = FALSE)
[09:30:59.108]             base::close(...future.stdout)
[09:30:59.108]         }, add = TRUE)
[09:30:59.108]     }
[09:30:59.108]     ...future.frame <- base::sys.nframe()
[09:30:59.108]     ...future.conditions <- base::list()
[09:30:59.108]     ...future.rng <- base::globalenv()$.Random.seed
[09:30:59.108]     if (FALSE) {
[09:30:59.108]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:30:59.108]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:30:59.108]     }
[09:30:59.108]     ...future.result <- base::tryCatch({
[09:30:59.108]         base::withCallingHandlers({
[09:30:59.108]             ...future.value <- base::withVisible(base::local(NULL))
[09:30:59.108]             future::FutureResult(value = ...future.value$value, 
[09:30:59.108]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:59.108]                   ...future.rng), globalenv = if (FALSE) 
[09:30:59.108]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:30:59.108]                     ...future.globalenv.names))
[09:30:59.108]                 else NULL, started = ...future.startTime, version = "1.8")
[09:30:59.108]         }, condition = base::local({
[09:30:59.108]             c <- base::c
[09:30:59.108]             inherits <- base::inherits
[09:30:59.108]             invokeRestart <- base::invokeRestart
[09:30:59.108]             length <- base::length
[09:30:59.108]             list <- base::list
[09:30:59.108]             seq.int <- base::seq.int
[09:30:59.108]             signalCondition <- base::signalCondition
[09:30:59.108]             sys.calls <- base::sys.calls
[09:30:59.108]             `[[` <- base::`[[`
[09:30:59.108]             `+` <- base::`+`
[09:30:59.108]             `<<-` <- base::`<<-`
[09:30:59.108]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:30:59.108]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:30:59.108]                   3L)]
[09:30:59.108]             }
[09:30:59.108]             function(cond) {
[09:30:59.108]                 is_error <- inherits(cond, "error")
[09:30:59.108]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:30:59.108]                   NULL)
[09:30:59.108]                 if (is_error) {
[09:30:59.108]                   sessionInformation <- function() {
[09:30:59.108]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:30:59.108]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:30:59.108]                       search = base::search(), system = base::Sys.info())
[09:30:59.108]                   }
[09:30:59.108]                   ...future.conditions[[length(...future.conditions) + 
[09:30:59.108]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:30:59.108]                     cond$call), session = sessionInformation(), 
[09:30:59.108]                     timestamp = base::Sys.time(), signaled = 0L)
[09:30:59.108]                   signalCondition(cond)
[09:30:59.108]                 }
[09:30:59.108]                 else if (!ignore && TRUE && inherits(cond, "condition")) {
[09:30:59.108]                   signal <- FALSE && inherits(cond, character(0))
[09:30:59.108]                   ...future.conditions[[length(...future.conditions) + 
[09:30:59.108]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:30:59.108]                   if (FALSE && !signal) {
[09:30:59.108]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:59.108]                     {
[09:30:59.108]                       inherits <- base::inherits
[09:30:59.108]                       invokeRestart <- base::invokeRestart
[09:30:59.108]                       is.null <- base::is.null
[09:30:59.108]                       muffled <- FALSE
[09:30:59.108]                       if (inherits(cond, "message")) {
[09:30:59.108]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:59.108]                         if (muffled) 
[09:30:59.108]                           invokeRestart("muffleMessage")
[09:30:59.108]                       }
[09:30:59.108]                       else if (inherits(cond, "warning")) {
[09:30:59.108]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:59.108]                         if (muffled) 
[09:30:59.108]                           invokeRestart("muffleWarning")
[09:30:59.108]                       }
[09:30:59.108]                       else if (inherits(cond, "condition")) {
[09:30:59.108]                         if (!is.null(pattern)) {
[09:30:59.108]                           computeRestarts <- base::computeRestarts
[09:30:59.108]                           grepl <- base::grepl
[09:30:59.108]                           restarts <- computeRestarts(cond)
[09:30:59.108]                           for (restart in restarts) {
[09:30:59.108]                             name <- restart$name
[09:30:59.108]                             if (is.null(name)) 
[09:30:59.108]                               next
[09:30:59.108]                             if (!grepl(pattern, name)) 
[09:30:59.108]                               next
[09:30:59.108]                             invokeRestart(restart)
[09:30:59.108]                             muffled <- TRUE
[09:30:59.108]                             break
[09:30:59.108]                           }
[09:30:59.108]                         }
[09:30:59.108]                       }
[09:30:59.108]                       invisible(muffled)
[09:30:59.108]                     }
[09:30:59.108]                     muffleCondition(cond, pattern = "^muffle")
[09:30:59.108]                   }
[09:30:59.108]                 }
[09:30:59.108]                 else {
[09:30:59.108]                   if (TRUE) {
[09:30:59.108]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:59.108]                     {
[09:30:59.108]                       inherits <- base::inherits
[09:30:59.108]                       invokeRestart <- base::invokeRestart
[09:30:59.108]                       is.null <- base::is.null
[09:30:59.108]                       muffled <- FALSE
[09:30:59.108]                       if (inherits(cond, "message")) {
[09:30:59.108]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:59.108]                         if (muffled) 
[09:30:59.108]                           invokeRestart("muffleMessage")
[09:30:59.108]                       }
[09:30:59.108]                       else if (inherits(cond, "warning")) {
[09:30:59.108]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:59.108]                         if (muffled) 
[09:30:59.108]                           invokeRestart("muffleWarning")
[09:30:59.108]                       }
[09:30:59.108]                       else if (inherits(cond, "condition")) {
[09:30:59.108]                         if (!is.null(pattern)) {
[09:30:59.108]                           computeRestarts <- base::computeRestarts
[09:30:59.108]                           grepl <- base::grepl
[09:30:59.108]                           restarts <- computeRestarts(cond)
[09:30:59.108]                           for (restart in restarts) {
[09:30:59.108]                             name <- restart$name
[09:30:59.108]                             if (is.null(name)) 
[09:30:59.108]                               next
[09:30:59.108]                             if (!grepl(pattern, name)) 
[09:30:59.108]                               next
[09:30:59.108]                             invokeRestart(restart)
[09:30:59.108]                             muffled <- TRUE
[09:30:59.108]                             break
[09:30:59.108]                           }
[09:30:59.108]                         }
[09:30:59.108]                       }
[09:30:59.108]                       invisible(muffled)
[09:30:59.108]                     }
[09:30:59.108]                     muffleCondition(cond, pattern = "^muffle")
[09:30:59.108]                   }
[09:30:59.108]                 }
[09:30:59.108]             }
[09:30:59.108]         }))
[09:30:59.108]     }, error = function(ex) {
[09:30:59.108]         base::structure(base::list(value = NULL, visible = NULL, 
[09:30:59.108]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:59.108]                 ...future.rng), started = ...future.startTime, 
[09:30:59.108]             finished = Sys.time(), session_uuid = NA_character_, 
[09:30:59.108]             version = "1.8"), class = "FutureResult")
[09:30:59.108]     }, finally = {
[09:30:59.108]         if (!identical(...future.workdir, getwd())) 
[09:30:59.108]             setwd(...future.workdir)
[09:30:59.108]         {
[09:30:59.108]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:30:59.108]                 ...future.oldOptions$nwarnings <- NULL
[09:30:59.108]             }
[09:30:59.108]             base::options(...future.oldOptions)
[09:30:59.108]             if (.Platform$OS.type == "windows") {
[09:30:59.108]                 old_names <- names(...future.oldEnvVars)
[09:30:59.108]                 envs <- base::Sys.getenv()
[09:30:59.108]                 names <- names(envs)
[09:30:59.108]                 common <- intersect(names, old_names)
[09:30:59.108]                 added <- setdiff(names, old_names)
[09:30:59.108]                 removed <- setdiff(old_names, names)
[09:30:59.108]                 changed <- common[...future.oldEnvVars[common] != 
[09:30:59.108]                   envs[common]]
[09:30:59.108]                 NAMES <- toupper(changed)
[09:30:59.108]                 args <- list()
[09:30:59.108]                 for (kk in seq_along(NAMES)) {
[09:30:59.108]                   name <- changed[[kk]]
[09:30:59.108]                   NAME <- NAMES[[kk]]
[09:30:59.108]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:59.108]                     next
[09:30:59.108]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:59.108]                 }
[09:30:59.108]                 NAMES <- toupper(added)
[09:30:59.108]                 for (kk in seq_along(NAMES)) {
[09:30:59.108]                   name <- added[[kk]]
[09:30:59.108]                   NAME <- NAMES[[kk]]
[09:30:59.108]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:59.108]                     next
[09:30:59.108]                   args[[name]] <- ""
[09:30:59.108]                 }
[09:30:59.108]                 NAMES <- toupper(removed)
[09:30:59.108]                 for (kk in seq_along(NAMES)) {
[09:30:59.108]                   name <- removed[[kk]]
[09:30:59.108]                   NAME <- NAMES[[kk]]
[09:30:59.108]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:59.108]                     next
[09:30:59.108]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:59.108]                 }
[09:30:59.108]                 if (length(args) > 0) 
[09:30:59.108]                   base::do.call(base::Sys.setenv, args = args)
[09:30:59.108]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:30:59.108]             }
[09:30:59.108]             else {
[09:30:59.108]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:30:59.108]             }
[09:30:59.108]             {
[09:30:59.108]                 if (base::length(...future.futureOptionsAdded) > 
[09:30:59.108]                   0L) {
[09:30:59.108]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:30:59.108]                   base::names(opts) <- ...future.futureOptionsAdded
[09:30:59.108]                   base::options(opts)
[09:30:59.108]                 }
[09:30:59.108]                 {
[09:30:59.108]                   NULL
[09:30:59.108]                   options(future.plan = NULL)
[09:30:59.108]                   if (is.na(NA_character_)) 
[09:30:59.108]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:30:59.108]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:30:59.108]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:30:59.108]                     .init = FALSE)
[09:30:59.108]                 }
[09:30:59.108]             }
[09:30:59.108]         }
[09:30:59.108]     })
[09:30:59.108]     if (TRUE) {
[09:30:59.108]         base::sink(type = "output", split = FALSE)
[09:30:59.108]         if (TRUE) {
[09:30:59.108]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:30:59.108]         }
[09:30:59.108]         else {
[09:30:59.108]             ...future.result["stdout"] <- base::list(NULL)
[09:30:59.108]         }
[09:30:59.108]         base::close(...future.stdout)
[09:30:59.108]         ...future.stdout <- NULL
[09:30:59.108]     }
[09:30:59.108]     ...future.result$conditions <- ...future.conditions
[09:30:59.108]     ...future.result$finished <- base::Sys.time()
[09:30:59.108]     ...future.result
[09:30:59.108] }
> print(expr)
{
    {
        {
            ...future.startTime <- base::Sys.time()
            {
                {
                  {
                    base::local({
                      has_future <- base::requireNamespace("future", 
                        quietly = TRUE)
                      if (has_future) {
                        ns <- base::getNamespace("future")
                        version <- ns[[".package"]][["version"]]
                        if (is.null(version)) 
                          version <- utils::packageVersion("future")
                      }
                      else {
                        version <- NULL
                      }
                      if (!has_future || version < "1.8.0") {
                        info <- base::c(r_version = base::gsub("R version ", 
                          "", base::R.version$version.string), 
                          platform = base::sprintf("%s (%s-bit)", 
                            base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
                          os = base::paste(base::Sys.info()[base::c("sysname", 
                            "release", "version")], collapse = " "), 
                          hostname = base::Sys.info()[["nodename"]])
                        info <- base::sprintf("%s: %s", base::names(info), 
                          info)
                        info <- base::paste(info, collapse = "; ")
                        if (!has_future) {
                          msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
                            info)
                        }
                        else {
                          msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
                            info, version)
                        }
                        base::stop(msg)
                      }
                    })
                  }
                  ...future.strategy.old <- future::plan("list")
                  options(future.plan = NULL)
                  Sys.unsetenv("R_FUTURE_PLAN")
                  future::plan("default", .cleanup = FALSE, .init = FALSE)
                }
                ...future.workdir <- getwd()
            }
            ...future.oldOptions <- base::as.list(base::.Options)
            ...future.oldEnvVars <- base::Sys.getenv()
        }
        base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
            future.globals.maxSize = NULL, future.globals.method = NULL, 
            future.globals.onMissing = NULL, future.globals.onReference = NULL, 
            future.globals.resolve = NULL, future.resolve.recursive = NULL, 
            future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
            future.stdout.windows.reencode = NULL, width = 80L)
        ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
            base::names(...future.oldOptions))
    }
    if (FALSE) {
    }
    else {
        if (TRUE) {
            ...future.stdout <- base::rawConnection(base::raw(0L), 
                open = "w")
        }
        else {
            ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
                windows = "NUL", "/dev/null"), open = "w")
        }
        base::sink(...future.stdout, type = "output", split = FALSE)
        base::on.exit(if (!base::is.null(...future.stdout)) {
            base::sink(type = "output", split = FALSE)
            base::close(...future.stdout)
        }, add = TRUE)
    }
    ...future.frame <- base::sys.nframe()
    ...future.conditions <- base::list()
    ...future.rng <- base::globalenv()$.Random.seed
    if (FALSE) {
        ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
            "...future.value", "...future.globalenv.names", ".Random.seed")
    }
    ...future.result <- base::tryCatch({
        base::withCallingHandlers({
            ...future.value <- base::withVisible(base::local(NULL))
            future::FutureResult(value = ...future.value$value, 
                visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
                  ...future.rng), globalenv = if (FALSE) 
                  list(added = base::setdiff(base::names(base::.GlobalEnv), 
                    ...future.globalenv.names))
                else NULL, started = ...future.startTime, version = "1.8")
        }, condition = base::local({
            c <- base::c
            inherits <- base::inherits
            invokeRestart <- base::invokeRestart
            length <- base::length
            list <- base::list
            seq.int <- base::seq.int
            signalCondition <- base::signalCondition
            sys.calls <- base::sys.calls
            `[[` <- base::`[[`
            `+` <- base::`+`
            `<<-` <- base::`<<-`
            sysCalls <- function(calls = sys.calls(), from = 1L) {
                calls[seq.int(from = from + 12L, to = length(calls) - 
                  3L)]
            }
            function(cond) {
                is_error <- inherits(cond, "error")
                ignore <- !is_error && !is.null(NULL) && inherits(cond, 
                  NULL)
                if (is_error) {
                  sessionInformation <- function() {
                    list(r = base::R.Version(), locale = base::Sys.getlocale(), 
                      rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
                      search = base::search(), system = base::Sys.info())
                  }
                  ...future.conditions[[length(...future.conditions) + 
                    1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
                    cond$call), session = sessionInformation(), 
                    timestamp = base::Sys.time(), signaled = 0L)
                  signalCondition(cond)
                }
                else if (!ignore && TRUE && inherits(cond, "condition")) {
                  signal <- FALSE && inherits(cond, character(0))
                  ...future.conditions[[length(...future.conditions) + 
                    1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
                  if (FALSE && !signal) {
                    muffleCondition <- function (cond, pattern = "^muffle") 
                    {
                      inherits <- base::inherits
                      invokeRestart <- base::invokeRestart
                      is.null <- base::is.null
                      muffled <- FALSE
                      if (inherits(cond, "message")) {
                        muffled <- grepl(pattern, "muffleMessage")
                        if (muffled) 
                          invokeRestart("muffleMessage")
                      }
                      else if (inherits(cond, "warning")) {
                        muffled <- grepl(pattern, "muffleWarning")
                        if (muffled) 
                          invokeRestart("muffleWarning")
                      }
                      else if (inherits(cond, "condition")) {
                        if (!is.null(pattern)) {
                          computeRestarts <- base::computeRestarts
                          grepl <- base::grepl
                          restarts <- computeRestarts(cond)
                          for (restart in restarts) {
                            name <- restart$name
                            if (is.null(name)) 
                              next
                            if (!grepl(pattern, name)) 
                              next
                            invokeRestart(restart)
                            muffled <- TRUE
                            break
                          }
                        }
                      }
                      invisible(muffled)
                    }
                    muffleCondition(cond, pattern = "^muffle")
                  }
                }
                else {
                  if (TRUE) {
                    muffleCondition <- function (cond, pattern = "^muffle") 
                    {
                      inherits <- base::inherits
                      invokeRestart <- base::invokeRestart
                      is.null <- base::is.null
                      muffled <- FALSE
                      if (inherits(cond, "message")) {
                        muffled <- grepl(pattern, "muffleMessage")
                        if (muffled) 
                          invokeRestart("muffleMessage")
                      }
                      else if (inherits(cond, "warning")) {
                        muffled <- grepl(pattern, "muffleWarning")
                        if (muffled) 
                          invokeRestart("muffleWarning")
                      }
                      else if (inherits(cond, "condition")) {
                        if (!is.null(pattern)) {
                          computeRestarts <- base::computeRestarts
                          grepl <- base::grepl
                          restarts <- computeRestarts(cond)
                          for (restart in restarts) {
                            name <- restart$name
                            if (is.null(name)) 
                              next
                            if (!grepl(pattern, name)) 
                              next
                            invokeRestart(restart)
                            muffled <- TRUE
                            break
                          }
                        }
                      }
                      invisible(muffled)
                    }
                    muffleCondition(cond, pattern = "^muffle")
                  }
                }
            }
        }))
    }, error = function(ex) {
        base::structure(base::list(value = NULL, visible = NULL, 
            conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
                ...future.rng), started = ...future.startTime, 
            finished = Sys.time(), session_uuid = NA_character_, 
            version = "1.8"), class = "FutureResult")
    }, finally = {
        if (!identical(...future.workdir, getwd())) 
            setwd(...future.workdir)
        {
            if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
                ...future.oldOptions$nwarnings <- NULL
            }
            base::options(...future.oldOptions)
            if (.Platform$OS.type == "windows") {
                old_names <- names(...future.oldEnvVars)
                envs <- base::Sys.getenv()
                names <- names(envs)
                common <- intersect(names, old_names)
                added <- setdiff(names, old_names)
                removed <- setdiff(old_names, names)
                changed <- common[...future.oldEnvVars[common] != 
                  envs[common]]
                NAMES <- toupper(changed)
                args <- list()
                for (kk in seq_along(NAMES)) {
                  name <- changed[[kk]]
                  NAME <- NAMES[[kk]]
                  if (name != NAME && is.element(NAME, old_names)) 
                    next
                  args[[name]] <- ...future.oldEnvVars[[name]]
                }
                NAMES <- toupper(added)
                for (kk in seq_along(NAMES)) {
                  name <- added[[kk]]
                  NAME <- NAMES[[kk]]
                  if (name != NAME && is.element(NAME, old_names)) 
                    next
                  args[[name]] <- ""
                }
                NAMES <- toupper(removed)
                for (kk in seq_along(NAMES)) {
                  name <- removed[[kk]]
                  NAME <- NAMES[[kk]]
                  if (name != NAME && is.element(NAME, old_names)) 
                    next
                  args[[name]] <- ...future.oldEnvVars[[name]]
                }
                if (length(args) > 0) 
                  base::do.call(base::Sys.setenv, args = args)
                args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
            }
            else {
                base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
            }
            {
                if (base::length(...future.futureOptionsAdded) > 
                  0L) {
                  opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
                  base::names(opts) <- ...future.futureOptionsAdded
                  base::options(opts)
                }
                {
                  NULL
                  options(future.plan = NULL)
                  if (is.na(NA_character_)) 
                    Sys.unsetenv("R_FUTURE_PLAN")
                  else Sys.setenv(R_FUTURE_PLAN = NA_character_)
                  future::plan(...future.strategy.old, .cleanup = FALSE, 
                    .init = FALSE)
                }
            }
        }
    })
    if (TRUE) {
        base::sink(type = "output", split = FALSE)
        if (TRUE) {
            ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
        }
        else {
            ...future.result["stdout"] <- base::list(NULL)
        }
        base::close(...future.stdout)
        ...future.stdout <- NULL
    }
    ...future.result$conditions <- ...future.conditions
    ...future.result$finished <- base::Sys.time()
    ...future.result
}
> stopifnot(is.call(expr))
> 
> clazzes <- list(
+   sequential = SequentialFuture,
+   multisession = function(...) MultisessionFuture(..., workers = 2L),
+   sequential = SequentialFuture
+ )
> if (supportsMulticore()) {
+   clazzes$multicore = function(...) MulticoreFuture(..., workers = 2L)
+ }
> 
> for (clazz in clazzes) {
+   ## Calling run() more than once
+   f <- clazz({ 42L })
+   print(f)
+   run(f)
+   res <- tryCatch(run(f), error = identity)
+   stopifnot(inherits(res, "error"))
+   v <- value(f)
+   print(v)
+   stopifnot(v == 42L)
+ 
+   ## Call value() without run()
+   f <- clazz({ 42L })
+   v <- value(f)
+   print(v)
+   stopifnot(v == 42L)
+ }
[09:30:59.119] getGlobalsAndPackages() ...
[09:30:59.120] Searching for globals...
[09:30:59.125] - globals found: [1] ‘{’
[09:30:59.125] Searching for globals ... DONE
[09:30:59.125] Resolving globals: FALSE
[09:30:59.125] 
[09:30:59.125] 
[09:30:59.125] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: d1376831-1a69-df06-dce9-bd05e7c69d80
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:30:59.126] Packages needed by the future expression (n = 0): <none>
[09:30:59.126] Packages needed by future strategies (n = 0): <none>
[09:30:59.127] {
[09:30:59.127]     {
[09:30:59.127]         {
[09:30:59.127]             ...future.startTime <- base::Sys.time()
[09:30:59.127]             {
[09:30:59.127]                 {
[09:30:59.127]                   {
[09:30:59.127]                     base::local({
[09:30:59.127]                       has_future <- base::requireNamespace("future", 
[09:30:59.127]                         quietly = TRUE)
[09:30:59.127]                       if (has_future) {
[09:30:59.127]                         ns <- base::getNamespace("future")
[09:30:59.127]                         version <- ns[[".package"]][["version"]]
[09:30:59.127]                         if (is.null(version)) 
[09:30:59.127]                           version <- utils::packageVersion("future")
[09:30:59.127]                       }
[09:30:59.127]                       else {
[09:30:59.127]                         version <- NULL
[09:30:59.127]                       }
[09:30:59.127]                       if (!has_future || version < "1.8.0") {
[09:30:59.127]                         info <- base::c(r_version = base::gsub("R version ", 
[09:30:59.127]                           "", base::R.version$version.string), 
[09:30:59.127]                           platform = base::sprintf("%s (%s-bit)", 
[09:30:59.127]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:30:59.127]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:30:59.127]                             "release", "version")], collapse = " "), 
[09:30:59.127]                           hostname = base::Sys.info()[["nodename"]])
[09:30:59.127]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:30:59.127]                           info)
[09:30:59.127]                         info <- base::paste(info, collapse = "; ")
[09:30:59.127]                         if (!has_future) {
[09:30:59.127]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:30:59.127]                             info)
[09:30:59.127]                         }
[09:30:59.127]                         else {
[09:30:59.127]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:30:59.127]                             info, version)
[09:30:59.127]                         }
[09:30:59.127]                         base::stop(msg)
[09:30:59.127]                       }
[09:30:59.127]                     })
[09:30:59.127]                   }
[09:30:59.127]                   ...future.strategy.old <- future::plan("list")
[09:30:59.127]                   options(future.plan = NULL)
[09:30:59.127]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:30:59.127]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:30:59.127]                 }
[09:30:59.127]                 ...future.workdir <- getwd()
[09:30:59.127]             }
[09:30:59.127]             ...future.oldOptions <- base::as.list(base::.Options)
[09:30:59.127]             ...future.oldEnvVars <- base::Sys.getenv()
[09:30:59.127]         }
[09:30:59.127]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:30:59.127]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:30:59.127]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:30:59.127]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:30:59.127]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:30:59.127]             future.stdout.windows.reencode = NULL, width = 80L)
[09:30:59.127]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:30:59.127]             base::names(...future.oldOptions))
[09:30:59.127]     }
[09:30:59.127]     if (FALSE) {
[09:30:59.127]     }
[09:30:59.127]     else {
[09:30:59.127]         if (TRUE) {
[09:30:59.127]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:30:59.127]                 open = "w")
[09:30:59.127]         }
[09:30:59.127]         else {
[09:30:59.127]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:30:59.127]                 windows = "NUL", "/dev/null"), open = "w")
[09:30:59.127]         }
[09:30:59.127]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:30:59.127]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:30:59.127]             base::sink(type = "output", split = FALSE)
[09:30:59.127]             base::close(...future.stdout)
[09:30:59.127]         }, add = TRUE)
[09:30:59.127]     }
[09:30:59.127]     ...future.frame <- base::sys.nframe()
[09:30:59.127]     ...future.conditions <- base::list()
[09:30:59.127]     ...future.rng <- base::globalenv()$.Random.seed
[09:30:59.127]     if (FALSE) {
[09:30:59.127]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:30:59.127]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:30:59.127]     }
[09:30:59.127]     ...future.result <- base::tryCatch({
[09:30:59.127]         base::withCallingHandlers({
[09:30:59.127]             ...future.value <- base::withVisible(base::local({
[09:30:59.127]                 42L
[09:30:59.127]             }))
[09:30:59.127]             future::FutureResult(value = ...future.value$value, 
[09:30:59.127]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:59.127]                   ...future.rng), globalenv = if (FALSE) 
[09:30:59.127]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:30:59.127]                     ...future.globalenv.names))
[09:30:59.127]                 else NULL, started = ...future.startTime, version = "1.8")
[09:30:59.127]         }, condition = base::local({
[09:30:59.127]             c <- base::c
[09:30:59.127]             inherits <- base::inherits
[09:30:59.127]             invokeRestart <- base::invokeRestart
[09:30:59.127]             length <- base::length
[09:30:59.127]             list <- base::list
[09:30:59.127]             seq.int <- base::seq.int
[09:30:59.127]             signalCondition <- base::signalCondition
[09:30:59.127]             sys.calls <- base::sys.calls
[09:30:59.127]             `[[` <- base::`[[`
[09:30:59.127]             `+` <- base::`+`
[09:30:59.127]             `<<-` <- base::`<<-`
[09:30:59.127]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:30:59.127]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:30:59.127]                   3L)]
[09:30:59.127]             }
[09:30:59.127]             function(cond) {
[09:30:59.127]                 is_error <- inherits(cond, "error")
[09:30:59.127]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:30:59.127]                   NULL)
[09:30:59.127]                 if (is_error) {
[09:30:59.127]                   sessionInformation <- function() {
[09:30:59.127]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:30:59.127]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:30:59.127]                       search = base::search(), system = base::Sys.info())
[09:30:59.127]                   }
[09:30:59.127]                   ...future.conditions[[length(...future.conditions) + 
[09:30:59.127]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:30:59.127]                     cond$call), session = sessionInformation(), 
[09:30:59.127]                     timestamp = base::Sys.time(), signaled = 0L)
[09:30:59.127]                   signalCondition(cond)
[09:30:59.127]                 }
[09:30:59.127]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:30:59.127]                 "immediateCondition"))) {
[09:30:59.127]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:30:59.127]                   ...future.conditions[[length(...future.conditions) + 
[09:30:59.127]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:30:59.127]                   if (TRUE && !signal) {
[09:30:59.127]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:59.127]                     {
[09:30:59.127]                       inherits <- base::inherits
[09:30:59.127]                       invokeRestart <- base::invokeRestart
[09:30:59.127]                       is.null <- base::is.null
[09:30:59.127]                       muffled <- FALSE
[09:30:59.127]                       if (inherits(cond, "message")) {
[09:30:59.127]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:59.127]                         if (muffled) 
[09:30:59.127]                           invokeRestart("muffleMessage")
[09:30:59.127]                       }
[09:30:59.127]                       else if (inherits(cond, "warning")) {
[09:30:59.127]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:59.127]                         if (muffled) 
[09:30:59.127]                           invokeRestart("muffleWarning")
[09:30:59.127]                       }
[09:30:59.127]                       else if (inherits(cond, "condition")) {
[09:30:59.127]                         if (!is.null(pattern)) {
[09:30:59.127]                           computeRestarts <- base::computeRestarts
[09:30:59.127]                           grepl <- base::grepl
[09:30:59.127]                           restarts <- computeRestarts(cond)
[09:30:59.127]                           for (restart in restarts) {
[09:30:59.127]                             name <- restart$name
[09:30:59.127]                             if (is.null(name)) 
[09:30:59.127]                               next
[09:30:59.127]                             if (!grepl(pattern, name)) 
[09:30:59.127]                               next
[09:30:59.127]                             invokeRestart(restart)
[09:30:59.127]                             muffled <- TRUE
[09:30:59.127]                             break
[09:30:59.127]                           }
[09:30:59.127]                         }
[09:30:59.127]                       }
[09:30:59.127]                       invisible(muffled)
[09:30:59.127]                     }
[09:30:59.127]                     muffleCondition(cond, pattern = "^muffle")
[09:30:59.127]                   }
[09:30:59.127]                 }
[09:30:59.127]                 else {
[09:30:59.127]                   if (TRUE) {
[09:30:59.127]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:59.127]                     {
[09:30:59.127]                       inherits <- base::inherits
[09:30:59.127]                       invokeRestart <- base::invokeRestart
[09:30:59.127]                       is.null <- base::is.null
[09:30:59.127]                       muffled <- FALSE
[09:30:59.127]                       if (inherits(cond, "message")) {
[09:30:59.127]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:59.127]                         if (muffled) 
[09:30:59.127]                           invokeRestart("muffleMessage")
[09:30:59.127]                       }
[09:30:59.127]                       else if (inherits(cond, "warning")) {
[09:30:59.127]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:59.127]                         if (muffled) 
[09:30:59.127]                           invokeRestart("muffleWarning")
[09:30:59.127]                       }
[09:30:59.127]                       else if (inherits(cond, "condition")) {
[09:30:59.127]                         if (!is.null(pattern)) {
[09:30:59.127]                           computeRestarts <- base::computeRestarts
[09:30:59.127]                           grepl <- base::grepl
[09:30:59.127]                           restarts <- computeRestarts(cond)
[09:30:59.127]                           for (restart in restarts) {
[09:30:59.127]                             name <- restart$name
[09:30:59.127]                             if (is.null(name)) 
[09:30:59.127]                               next
[09:30:59.127]                             if (!grepl(pattern, name)) 
[09:30:59.127]                               next
[09:30:59.127]                             invokeRestart(restart)
[09:30:59.127]                             muffled <- TRUE
[09:30:59.127]                             break
[09:30:59.127]                           }
[09:30:59.127]                         }
[09:30:59.127]                       }
[09:30:59.127]                       invisible(muffled)
[09:30:59.127]                     }
[09:30:59.127]                     muffleCondition(cond, pattern = "^muffle")
[09:30:59.127]                   }
[09:30:59.127]                 }
[09:30:59.127]             }
[09:30:59.127]         }))
[09:30:59.127]     }, error = function(ex) {
[09:30:59.127]         base::structure(base::list(value = NULL, visible = NULL, 
[09:30:59.127]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:59.127]                 ...future.rng), started = ...future.startTime, 
[09:30:59.127]             finished = Sys.time(), session_uuid = NA_character_, 
[09:30:59.127]             version = "1.8"), class = "FutureResult")
[09:30:59.127]     }, finally = {
[09:30:59.127]         if (!identical(...future.workdir, getwd())) 
[09:30:59.127]             setwd(...future.workdir)
[09:30:59.127]         {
[09:30:59.127]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:30:59.127]                 ...future.oldOptions$nwarnings <- NULL
[09:30:59.127]             }
[09:30:59.127]             base::options(...future.oldOptions)
[09:30:59.127]             if (.Platform$OS.type == "windows") {
[09:30:59.127]                 old_names <- names(...future.oldEnvVars)
[09:30:59.127]                 envs <- base::Sys.getenv()
[09:30:59.127]                 names <- names(envs)
[09:30:59.127]                 common <- intersect(names, old_names)
[09:30:59.127]                 added <- setdiff(names, old_names)
[09:30:59.127]                 removed <- setdiff(old_names, names)
[09:30:59.127]                 changed <- common[...future.oldEnvVars[common] != 
[09:30:59.127]                   envs[common]]
[09:30:59.127]                 NAMES <- toupper(changed)
[09:30:59.127]                 args <- list()
[09:30:59.127]                 for (kk in seq_along(NAMES)) {
[09:30:59.127]                   name <- changed[[kk]]
[09:30:59.127]                   NAME <- NAMES[[kk]]
[09:30:59.127]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:59.127]                     next
[09:30:59.127]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:59.127]                 }
[09:30:59.127]                 NAMES <- toupper(added)
[09:30:59.127]                 for (kk in seq_along(NAMES)) {
[09:30:59.127]                   name <- added[[kk]]
[09:30:59.127]                   NAME <- NAMES[[kk]]
[09:30:59.127]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:59.127]                     next
[09:30:59.127]                   args[[name]] <- ""
[09:30:59.127]                 }
[09:30:59.127]                 NAMES <- toupper(removed)
[09:30:59.127]                 for (kk in seq_along(NAMES)) {
[09:30:59.127]                   name <- removed[[kk]]
[09:30:59.127]                   NAME <- NAMES[[kk]]
[09:30:59.127]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:59.127]                     next
[09:30:59.127]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:59.127]                 }
[09:30:59.127]                 if (length(args) > 0) 
[09:30:59.127]                   base::do.call(base::Sys.setenv, args = args)
[09:30:59.127]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:30:59.127]             }
[09:30:59.127]             else {
[09:30:59.127]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:30:59.127]             }
[09:30:59.127]             {
[09:30:59.127]                 if (base::length(...future.futureOptionsAdded) > 
[09:30:59.127]                   0L) {
[09:30:59.127]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:30:59.127]                   base::names(opts) <- ...future.futureOptionsAdded
[09:30:59.127]                   base::options(opts)
[09:30:59.127]                 }
[09:30:59.127]                 {
[09:30:59.127]                   {
[09:30:59.127]                     NULL
[09:30:59.127]                     RNGkind("Mersenne-Twister")
[09:30:59.127]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:30:59.127]                       inherits = FALSE)
[09:30:59.127]                   }
[09:30:59.127]                   options(future.plan = NULL)
[09:30:59.127]                   if (is.na(NA_character_)) 
[09:30:59.127]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:30:59.127]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:30:59.127]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:30:59.127]                     .init = FALSE)
[09:30:59.127]                 }
[09:30:59.127]             }
[09:30:59.127]         }
[09:30:59.127]     })
[09:30:59.127]     if (TRUE) {
[09:30:59.127]         base::sink(type = "output", split = FALSE)
[09:30:59.127]         if (TRUE) {
[09:30:59.127]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:30:59.127]         }
[09:30:59.127]         else {
[09:30:59.127]             ...future.result["stdout"] <- base::list(NULL)
[09:30:59.127]         }
[09:30:59.127]         base::close(...future.stdout)
[09:30:59.127]         ...future.stdout <- NULL
[09:30:59.127]     }
[09:30:59.127]     ...future.result$conditions <- ...future.conditions
[09:30:59.127]     ...future.result$finished <- base::Sys.time()
[09:30:59.127]     ...future.result
[09:30:59.127] }
[09:30:59.129] plan(): Setting new future strategy stack:
[09:30:59.129] List of future strategies:
[09:30:59.129] 1. sequential:
[09:30:59.129]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:59.129]    - tweaked: FALSE
[09:30:59.129]    - call: NULL
[09:30:59.129] plan(): nbrOfWorkers() = 1
[09:30:59.130] plan(): Setting new future strategy stack:
[09:30:59.130] List of future strategies:
[09:30:59.130] 1. future:
[09:30:59.130]    - args: function (..., workers = "<NULL>")
[09:30:59.130]    - tweaked: FALSE
[09:30:59.130]    - call: plan(foo)
[09:30:59.131] plan(): nbrOfWorkers() = Inf
[09:30:59.131] SequentialFuture started (and completed)
[1] 42
[09:30:59.132] getGlobalsAndPackages() ...
[09:30:59.132] Searching for globals...
[09:30:59.132] - globals found: [1] ‘{’
[09:30:59.132] Searching for globals ... DONE
[09:30:59.132] Resolving globals: FALSE
[09:30:59.133] 
[09:30:59.133] 
[09:30:59.133] getGlobalsAndPackages() ... DONE
[09:30:59.133] Packages needed by the future expression (n = 0): <none>
[09:30:59.133] Packages needed by future strategies (n = 0): <none>
[09:30:59.134] {
[09:30:59.134]     {
[09:30:59.134]         {
[09:30:59.134]             ...future.startTime <- base::Sys.time()
[09:30:59.134]             {
[09:30:59.134]                 {
[09:30:59.134]                   {
[09:30:59.134]                     base::local({
[09:30:59.134]                       has_future <- base::requireNamespace("future", 
[09:30:59.134]                         quietly = TRUE)
[09:30:59.134]                       if (has_future) {
[09:30:59.134]                         ns <- base::getNamespace("future")
[09:30:59.134]                         version <- ns[[".package"]][["version"]]
[09:30:59.134]                         if (is.null(version)) 
[09:30:59.134]                           version <- utils::packageVersion("future")
[09:30:59.134]                       }
[09:30:59.134]                       else {
[09:30:59.134]                         version <- NULL
[09:30:59.134]                       }
[09:30:59.134]                       if (!has_future || version < "1.8.0") {
[09:30:59.134]                         info <- base::c(r_version = base::gsub("R version ", 
[09:30:59.134]                           "", base::R.version$version.string), 
[09:30:59.134]                           platform = base::sprintf("%s (%s-bit)", 
[09:30:59.134]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:30:59.134]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:30:59.134]                             "release", "version")], collapse = " "), 
[09:30:59.134]                           hostname = base::Sys.info()[["nodename"]])
[09:30:59.134]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:30:59.134]                           info)
[09:30:59.134]                         info <- base::paste(info, collapse = "; ")
[09:30:59.134]                         if (!has_future) {
[09:30:59.134]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:30:59.134]                             info)
[09:30:59.134]                         }
[09:30:59.134]                         else {
[09:30:59.134]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:30:59.134]                             info, version)
[09:30:59.134]                         }
[09:30:59.134]                         base::stop(msg)
[09:30:59.134]                       }
[09:30:59.134]                     })
[09:30:59.134]                   }
[09:30:59.134]                   ...future.strategy.old <- future::plan("list")
[09:30:59.134]                   options(future.plan = NULL)
[09:30:59.134]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:30:59.134]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:30:59.134]                 }
[09:30:59.134]                 ...future.workdir <- getwd()
[09:30:59.134]             }
[09:30:59.134]             ...future.oldOptions <- base::as.list(base::.Options)
[09:30:59.134]             ...future.oldEnvVars <- base::Sys.getenv()
[09:30:59.134]         }
[09:30:59.134]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:30:59.134]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:30:59.134]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:30:59.134]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:30:59.134]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:30:59.134]             future.stdout.windows.reencode = NULL, width = 80L)
[09:30:59.134]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:30:59.134]             base::names(...future.oldOptions))
[09:30:59.134]     }
[09:30:59.134]     if (FALSE) {
[09:30:59.134]     }
[09:30:59.134]     else {
[09:30:59.134]         if (TRUE) {
[09:30:59.134]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:30:59.134]                 open = "w")
[09:30:59.134]         }
[09:30:59.134]         else {
[09:30:59.134]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:30:59.134]                 windows = "NUL", "/dev/null"), open = "w")
[09:30:59.134]         }
[09:30:59.134]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:30:59.134]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:30:59.134]             base::sink(type = "output", split = FALSE)
[09:30:59.134]             base::close(...future.stdout)
[09:30:59.134]         }, add = TRUE)
[09:30:59.134]     }
[09:30:59.134]     ...future.frame <- base::sys.nframe()
[09:30:59.134]     ...future.conditions <- base::list()
[09:30:59.134]     ...future.rng <- base::globalenv()$.Random.seed
[09:30:59.134]     if (FALSE) {
[09:30:59.134]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:30:59.134]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:30:59.134]     }
[09:30:59.134]     ...future.result <- base::tryCatch({
[09:30:59.134]         base::withCallingHandlers({
[09:30:59.134]             ...future.value <- base::withVisible(base::local({
[09:30:59.134]                 42L
[09:30:59.134]             }))
[09:30:59.134]             future::FutureResult(value = ...future.value$value, 
[09:30:59.134]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:59.134]                   ...future.rng), globalenv = if (FALSE) 
[09:30:59.134]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:30:59.134]                     ...future.globalenv.names))
[09:30:59.134]                 else NULL, started = ...future.startTime, version = "1.8")
[09:30:59.134]         }, condition = base::local({
[09:30:59.134]             c <- base::c
[09:30:59.134]             inherits <- base::inherits
[09:30:59.134]             invokeRestart <- base::invokeRestart
[09:30:59.134]             length <- base::length
[09:30:59.134]             list <- base::list
[09:30:59.134]             seq.int <- base::seq.int
[09:30:59.134]             signalCondition <- base::signalCondition
[09:30:59.134]             sys.calls <- base::sys.calls
[09:30:59.134]             `[[` <- base::`[[`
[09:30:59.134]             `+` <- base::`+`
[09:30:59.134]             `<<-` <- base::`<<-`
[09:30:59.134]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:30:59.134]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:30:59.134]                   3L)]
[09:30:59.134]             }
[09:30:59.134]             function(cond) {
[09:30:59.134]                 is_error <- inherits(cond, "error")
[09:30:59.134]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:30:59.134]                   NULL)
[09:30:59.134]                 if (is_error) {
[09:30:59.134]                   sessionInformation <- function() {
[09:30:59.134]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:30:59.134]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:30:59.134]                       search = base::search(), system = base::Sys.info())
[09:30:59.134]                   }
[09:30:59.134]                   ...future.conditions[[length(...future.conditions) + 
[09:30:59.134]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:30:59.134]                     cond$call), session = sessionInformation(), 
[09:30:59.134]                     timestamp = base::Sys.time(), signaled = 0L)
[09:30:59.134]                   signalCondition(cond)
[09:30:59.134]                 }
[09:30:59.134]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:30:59.134]                 "immediateCondition"))) {
[09:30:59.134]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:30:59.134]                   ...future.conditions[[length(...future.conditions) + 
[09:30:59.134]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:30:59.134]                   if (TRUE && !signal) {
[09:30:59.134]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:59.134]                     {
[09:30:59.134]                       inherits <- base::inherits
[09:30:59.134]                       invokeRestart <- base::invokeRestart
[09:30:59.134]                       is.null <- base::is.null
[09:30:59.134]                       muffled <- FALSE
[09:30:59.134]                       if (inherits(cond, "message")) {
[09:30:59.134]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:59.134]                         if (muffled) 
[09:30:59.134]                           invokeRestart("muffleMessage")
[09:30:59.134]                       }
[09:30:59.134]                       else if (inherits(cond, "warning")) {
[09:30:59.134]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:59.134]                         if (muffled) 
[09:30:59.134]                           invokeRestart("muffleWarning")
[09:30:59.134]                       }
[09:30:59.134]                       else if (inherits(cond, "condition")) {
[09:30:59.134]                         if (!is.null(pattern)) {
[09:30:59.134]                           computeRestarts <- base::computeRestarts
[09:30:59.134]                           grepl <- base::grepl
[09:30:59.134]                           restarts <- computeRestarts(cond)
[09:30:59.134]                           for (restart in restarts) {
[09:30:59.134]                             name <- restart$name
[09:30:59.134]                             if (is.null(name)) 
[09:30:59.134]                               next
[09:30:59.134]                             if (!grepl(pattern, name)) 
[09:30:59.134]                               next
[09:30:59.134]                             invokeRestart(restart)
[09:30:59.134]                             muffled <- TRUE
[09:30:59.134]                             break
[09:30:59.134]                           }
[09:30:59.134]                         }
[09:30:59.134]                       }
[09:30:59.134]                       invisible(muffled)
[09:30:59.134]                     }
[09:30:59.134]                     muffleCondition(cond, pattern = "^muffle")
[09:30:59.134]                   }
[09:30:59.134]                 }
[09:30:59.134]                 else {
[09:30:59.134]                   if (TRUE) {
[09:30:59.134]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:59.134]                     {
[09:30:59.134]                       inherits <- base::inherits
[09:30:59.134]                       invokeRestart <- base::invokeRestart
[09:30:59.134]                       is.null <- base::is.null
[09:30:59.134]                       muffled <- FALSE
[09:30:59.134]                       if (inherits(cond, "message")) {
[09:30:59.134]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:59.134]                         if (muffled) 
[09:30:59.134]                           invokeRestart("muffleMessage")
[09:30:59.134]                       }
[09:30:59.134]                       else if (inherits(cond, "warning")) {
[09:30:59.134]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:59.134]                         if (muffled) 
[09:30:59.134]                           invokeRestart("muffleWarning")
[09:30:59.134]                       }
[09:30:59.134]                       else if (inherits(cond, "condition")) {
[09:30:59.134]                         if (!is.null(pattern)) {
[09:30:59.134]                           computeRestarts <- base::computeRestarts
[09:30:59.134]                           grepl <- base::grepl
[09:30:59.134]                           restarts <- computeRestarts(cond)
[09:30:59.134]                           for (restart in restarts) {
[09:30:59.134]                             name <- restart$name
[09:30:59.134]                             if (is.null(name)) 
[09:30:59.134]                               next
[09:30:59.134]                             if (!grepl(pattern, name)) 
[09:30:59.134]                               next
[09:30:59.134]                             invokeRestart(restart)
[09:30:59.134]                             muffled <- TRUE
[09:30:59.134]                             break
[09:30:59.134]                           }
[09:30:59.134]                         }
[09:30:59.134]                       }
[09:30:59.134]                       invisible(muffled)
[09:30:59.134]                     }
[09:30:59.134]                     muffleCondition(cond, pattern = "^muffle")
[09:30:59.134]                   }
[09:30:59.134]                 }
[09:30:59.134]             }
[09:30:59.134]         }))
[09:30:59.134]     }, error = function(ex) {
[09:30:59.134]         base::structure(base::list(value = NULL, visible = NULL, 
[09:30:59.134]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:59.134]                 ...future.rng), started = ...future.startTime, 
[09:30:59.134]             finished = Sys.time(), session_uuid = NA_character_, 
[09:30:59.134]             version = "1.8"), class = "FutureResult")
[09:30:59.134]     }, finally = {
[09:30:59.134]         if (!identical(...future.workdir, getwd())) 
[09:30:59.134]             setwd(...future.workdir)
[09:30:59.134]         {
[09:30:59.134]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:30:59.134]                 ...future.oldOptions$nwarnings <- NULL
[09:30:59.134]             }
[09:30:59.134]             base::options(...future.oldOptions)
[09:30:59.134]             if (.Platform$OS.type == "windows") {
[09:30:59.134]                 old_names <- names(...future.oldEnvVars)
[09:30:59.134]                 envs <- base::Sys.getenv()
[09:30:59.134]                 names <- names(envs)
[09:30:59.134]                 common <- intersect(names, old_names)
[09:30:59.134]                 added <- setdiff(names, old_names)
[09:30:59.134]                 removed <- setdiff(old_names, names)
[09:30:59.134]                 changed <- common[...future.oldEnvVars[common] != 
[09:30:59.134]                   envs[common]]
[09:30:59.134]                 NAMES <- toupper(changed)
[09:30:59.134]                 args <- list()
[09:30:59.134]                 for (kk in seq_along(NAMES)) {
[09:30:59.134]                   name <- changed[[kk]]
[09:30:59.134]                   NAME <- NAMES[[kk]]
[09:30:59.134]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:59.134]                     next
[09:30:59.134]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:59.134]                 }
[09:30:59.134]                 NAMES <- toupper(added)
[09:30:59.134]                 for (kk in seq_along(NAMES)) {
[09:30:59.134]                   name <- added[[kk]]
[09:30:59.134]                   NAME <- NAMES[[kk]]
[09:30:59.134]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:59.134]                     next
[09:30:59.134]                   args[[name]] <- ""
[09:30:59.134]                 }
[09:30:59.134]                 NAMES <- toupper(removed)
[09:30:59.134]                 for (kk in seq_along(NAMES)) {
[09:30:59.134]                   name <- removed[[kk]]
[09:30:59.134]                   NAME <- NAMES[[kk]]
[09:30:59.134]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:59.134]                     next
[09:30:59.134]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:59.134]                 }
[09:30:59.134]                 if (length(args) > 0) 
[09:30:59.134]                   base::do.call(base::Sys.setenv, args = args)
[09:30:59.134]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:30:59.134]             }
[09:30:59.134]             else {
[09:30:59.134]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:30:59.134]             }
[09:30:59.134]             {
[09:30:59.134]                 if (base::length(...future.futureOptionsAdded) > 
[09:30:59.134]                   0L) {
[09:30:59.134]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:30:59.134]                   base::names(opts) <- ...future.futureOptionsAdded
[09:30:59.134]                   base::options(opts)
[09:30:59.134]                 }
[09:30:59.134]                 {
[09:30:59.134]                   {
[09:30:59.134]                     NULL
[09:30:59.134]                     RNGkind("Mersenne-Twister")
[09:30:59.134]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:30:59.134]                       inherits = FALSE)
[09:30:59.134]                   }
[09:30:59.134]                   options(future.plan = NULL)
[09:30:59.134]                   if (is.na(NA_character_)) 
[09:30:59.134]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:30:59.134]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:30:59.134]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:30:59.134]                     .init = FALSE)
[09:30:59.134]                 }
[09:30:59.134]             }
[09:30:59.134]         }
[09:30:59.134]     })
[09:30:59.134]     if (TRUE) {
[09:30:59.134]         base::sink(type = "output", split = FALSE)
[09:30:59.134]         if (TRUE) {
[09:30:59.134]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:30:59.134]         }
[09:30:59.134]         else {
[09:30:59.134]             ...future.result["stdout"] <- base::list(NULL)
[09:30:59.134]         }
[09:30:59.134]         base::close(...future.stdout)
[09:30:59.134]         ...future.stdout <- NULL
[09:30:59.134]     }
[09:30:59.134]     ...future.result$conditions <- ...future.conditions
[09:30:59.134]     ...future.result$finished <- base::Sys.time()
[09:30:59.134]     ...future.result
[09:30:59.134] }
[09:30:59.135] plan(): Setting new future strategy stack:
[09:30:59.135] List of future strategies:
[09:30:59.135] 1. sequential:
[09:30:59.135]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:59.135]    - tweaked: FALSE
[09:30:59.135]    - call: NULL
[09:30:59.136] plan(): nbrOfWorkers() = 1
[09:30:59.136] plan(): Setting new future strategy stack:
[09:30:59.137] List of future strategies:
[09:30:59.137] 1. future:
[09:30:59.137]    - args: function (..., workers = "<NULL>")
[09:30:59.137]    - tweaked: FALSE
[09:30:59.137]    - call: plan(foo)
[09:30:59.137] plan(): nbrOfWorkers() = Inf
[09:30:59.137] SequentialFuture started (and completed)
[1] 42
[09:30:59.139] getGlobalsAndPackages() ...
[09:30:59.139] 
[09:30:59.139] - globals: [0] <none>
[09:30:59.139] getGlobalsAndPackages() ... DONE
[09:30:59.140] [local output] makeClusterPSOCK() ...
[09:30:59.171] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[09:30:59.172] [local output] Base port: 11982
[09:30:59.172] [local output] Getting setup options for 2 cluster nodes ...
[09:30:59.172] [local output]  - Node 1 of 2 ...
[09:30:59.173] [local output] localMachine=TRUE => revtunnel=FALSE

[09:30:59.173] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpqiCXEr/worker.rank=1.parallelly.parent=40639.9ebf528d59e.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpqiCXEr/worker.rank=1.parallelly.parent=40639.9ebf528d59e.pid")'’
[09:30:59.361] - Possible to infer worker's PID: TRUE
[09:30:59.361] [local output] Rscript port: 11982

[09:30:59.361] [local output]  - Node 2 of 2 ...
[09:30:59.362] [local output] localMachine=TRUE => revtunnel=FALSE

[09:30:59.362] [local output] Rscript port: 11982

[09:30:59.362] [local output] Getting setup options for 2 cluster nodes ... done
[09:30:59.363] [local output]  - Parallel setup requested for some PSOCK nodes
[09:30:59.363] [local output] Setting up PSOCK nodes in parallel
[09:30:59.363] List of 36
[09:30:59.363]  $ worker          : chr "localhost"
[09:30:59.363]   ..- attr(*, "localhost")= logi TRUE
[09:30:59.363]  $ master          : chr "localhost"
[09:30:59.363]  $ port            : int 11982
[09:30:59.363]  $ connectTimeout  : num 120
[09:30:59.363]  $ timeout         : num 2592000
[09:30:59.363]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[09:30:59.363]  $ homogeneous     : logi TRUE
[09:30:59.363]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[09:30:59.363]  $ rscript_envs    : NULL
[09:30:59.363]  $ rscript_libs    : NULL
[09:30:59.363]  $ rscript_startup : NULL
[09:30:59.363]  $ rscript_sh      : chr "sh"
[09:30:59.363]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[09:30:59.363]  $ methods         : logi TRUE
[09:30:59.363]  $ socketOptions   : chr "no-delay"
[09:30:59.363]  $ useXDR          : logi FALSE
[09:30:59.363]  $ outfile         : chr "/dev/null"
[09:30:59.363]  $ renice          : int NA
[09:30:59.363]  $ rshcmd          : NULL
[09:30:59.363]  $ user            : chr(0) 
[09:30:59.363]  $ revtunnel       : logi FALSE
[09:30:59.363]  $ rshlogfile      : NULL
[09:30:59.363]  $ rshopts         : chr(0) 
[09:30:59.363]  $ rank            : int 1
[09:30:59.363]  $ manual          : logi FALSE
[09:30:59.363]  $ dryrun          : logi FALSE
[09:30:59.363]  $ quiet           : logi FALSE
[09:30:59.363]  $ setup_strategy  : chr "parallel"
[09:30:59.363]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[09:30:59.363]  $ pidfile         : chr "/tmp/RtmpqiCXEr/worker.rank=1.parallelly.parent=40639.9ebf528d59e.pid"
[09:30:59.363]  $ rshcmd_label    : NULL
[09:30:59.363]  $ rsh_call        : NULL
[09:30:59.363]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[09:30:59.363]  $ localMachine    : logi TRUE
[09:30:59.363]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[09:30:59.363]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[09:30:59.363]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[09:30:59.363]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[09:30:59.363]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[09:30:59.363]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[09:30:59.363]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[09:30:59.363]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[09:30:59.363]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[09:30:59.363]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[09:30:59.363]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[09:30:59.363]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[09:30:59.363]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[09:30:59.363]  $ arguments       :List of 28
[09:30:59.363]   ..$ worker          : chr "localhost"
[09:30:59.363]   ..$ master          : NULL
[09:30:59.363]   ..$ port            : int 11982
[09:30:59.363]   ..$ connectTimeout  : num 120
[09:30:59.363]   ..$ timeout         : num 2592000
[09:30:59.363]   ..$ rscript         : NULL
[09:30:59.363]   ..$ homogeneous     : NULL
[09:30:59.363]   ..$ rscript_args    : NULL
[09:30:59.363]   ..$ rscript_envs    : NULL
[09:30:59.363]   ..$ rscript_libs    : NULL
[09:30:59.363]   ..$ rscript_startup : NULL
[09:30:59.363]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[09:30:59.363]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[09:30:59.363]   ..$ methods         : logi TRUE
[09:30:59.363]   ..$ socketOptions   : chr "no-delay"
[09:30:59.363]   ..$ useXDR          : logi FALSE
[09:30:59.363]   ..$ outfile         : chr "/dev/null"
[09:30:59.363]   ..$ renice          : int NA
[09:30:59.363]   ..$ rshcmd          : NULL
[09:30:59.363]   ..$ user            : NULL
[09:30:59.363]   ..$ revtunnel       : logi NA
[09:30:59.363]   ..$ rshlogfile      : NULL
[09:30:59.363]   ..$ rshopts         : NULL
[09:30:59.363]   ..$ rank            : int 1
[09:30:59.363]   ..$ manual          : logi FALSE
[09:30:59.363]   ..$ dryrun          : logi FALSE
[09:30:59.363]   ..$ quiet           : logi FALSE
[09:30:59.363]   ..$ setup_strategy  : chr "parallel"
[09:30:59.363]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[09:30:59.379] [local output] System call to launch all workers:
[09:30:59.379] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpqiCXEr/worker.rank=1.parallelly.parent=40639.9ebf528d59e.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11982 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[09:30:59.379] [local output] Starting PSOCK main server
[09:30:59.385] [local output] Workers launched
[09:30:59.385] [local output] Waiting for workers to connect back
[09:30:59.386]  - [local output] 0 workers out of 2 ready
[09:30:59.615]  - [local output] 0 workers out of 2 ready
[09:30:59.615]  - [local output] 1 workers out of 2 ready
[09:30:59.622]  - [local output] 1 workers out of 2 ready
[09:30:59.623]  - [local output] 2 workers out of 2 ready
[09:30:59.623] [local output] Launching of workers completed
[09:30:59.623] [local output] Collecting session information from workers
[09:30:59.624] [local output]  - Worker #1 of 2
[09:30:59.624] [local output]  - Worker #2 of 2
[09:30:59.625] [local output] makeClusterPSOCK() ... done
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: 0x55a2dfdbf900
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: d1376831-1a69-df06-dce9-bd05e7c69d80
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:30:59.637] Packages needed by the future expression (n = 0): <none>
[09:30:59.637] Packages needed by future strategies (n = 0): <none>
[09:30:59.637] {
[09:30:59.637]     {
[09:30:59.637]         {
[09:30:59.637]             ...future.startTime <- base::Sys.time()
[09:30:59.637]             {
[09:30:59.637]                 {
[09:30:59.637]                   {
[09:30:59.637]                     {
[09:30:59.637]                       base::local({
[09:30:59.637]                         has_future <- base::requireNamespace("future", 
[09:30:59.637]                           quietly = TRUE)
[09:30:59.637]                         if (has_future) {
[09:30:59.637]                           ns <- base::getNamespace("future")
[09:30:59.637]                           version <- ns[[".package"]][["version"]]
[09:30:59.637]                           if (is.null(version)) 
[09:30:59.637]                             version <- utils::packageVersion("future")
[09:30:59.637]                         }
[09:30:59.637]                         else {
[09:30:59.637]                           version <- NULL
[09:30:59.637]                         }
[09:30:59.637]                         if (!has_future || version < "1.8.0") {
[09:30:59.637]                           info <- base::c(r_version = base::gsub("R version ", 
[09:30:59.637]                             "", base::R.version$version.string), 
[09:30:59.637]                             platform = base::sprintf("%s (%s-bit)", 
[09:30:59.637]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:30:59.637]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:30:59.637]                               "release", "version")], collapse = " "), 
[09:30:59.637]                             hostname = base::Sys.info()[["nodename"]])
[09:30:59.637]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:30:59.637]                             info)
[09:30:59.637]                           info <- base::paste(info, collapse = "; ")
[09:30:59.637]                           if (!has_future) {
[09:30:59.637]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:30:59.637]                               info)
[09:30:59.637]                           }
[09:30:59.637]                           else {
[09:30:59.637]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:30:59.637]                               info, version)
[09:30:59.637]                           }
[09:30:59.637]                           base::stop(msg)
[09:30:59.637]                         }
[09:30:59.637]                       })
[09:30:59.637]                     }
[09:30:59.637]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:30:59.637]                     base::options(mc.cores = 1L)
[09:30:59.637]                   }
[09:30:59.637]                   ...future.strategy.old <- future::plan("list")
[09:30:59.637]                   options(future.plan = NULL)
[09:30:59.637]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:30:59.637]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:30:59.637]                 }
[09:30:59.637]                 ...future.workdir <- getwd()
[09:30:59.637]             }
[09:30:59.637]             ...future.oldOptions <- base::as.list(base::.Options)
[09:30:59.637]             ...future.oldEnvVars <- base::Sys.getenv()
[09:30:59.637]         }
[09:30:59.637]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:30:59.637]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:30:59.637]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:30:59.637]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:30:59.637]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:30:59.637]             future.stdout.windows.reencode = NULL, width = 80L)
[09:30:59.637]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:30:59.637]             base::names(...future.oldOptions))
[09:30:59.637]     }
[09:30:59.637]     if (FALSE) {
[09:30:59.637]     }
[09:30:59.637]     else {
[09:30:59.637]         if (TRUE) {
[09:30:59.637]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:30:59.637]                 open = "w")
[09:30:59.637]         }
[09:30:59.637]         else {
[09:30:59.637]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:30:59.637]                 windows = "NUL", "/dev/null"), open = "w")
[09:30:59.637]         }
[09:30:59.637]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:30:59.637]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:30:59.637]             base::sink(type = "output", split = FALSE)
[09:30:59.637]             base::close(...future.stdout)
[09:30:59.637]         }, add = TRUE)
[09:30:59.637]     }
[09:30:59.637]     ...future.frame <- base::sys.nframe()
[09:30:59.637]     ...future.conditions <- base::list()
[09:30:59.637]     ...future.rng <- base::globalenv()$.Random.seed
[09:30:59.637]     if (FALSE) {
[09:30:59.637]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:30:59.637]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:30:59.637]     }
[09:30:59.637]     ...future.result <- base::tryCatch({
[09:30:59.637]         base::withCallingHandlers({
[09:30:59.637]             ...future.value <- base::withVisible(base::local({
[09:30:59.637]                 ...future.makeSendCondition <- base::local({
[09:30:59.637]                   sendCondition <- NULL
[09:30:59.637]                   function(frame = 1L) {
[09:30:59.637]                     if (is.function(sendCondition)) 
[09:30:59.637]                       return(sendCondition)
[09:30:59.637]                     ns <- getNamespace("parallel")
[09:30:59.637]                     if (exists("sendData", mode = "function", 
[09:30:59.637]                       envir = ns)) {
[09:30:59.637]                       parallel_sendData <- get("sendData", mode = "function", 
[09:30:59.637]                         envir = ns)
[09:30:59.637]                       envir <- sys.frame(frame)
[09:30:59.637]                       master <- NULL
[09:30:59.637]                       while (!identical(envir, .GlobalEnv) && 
[09:30:59.637]                         !identical(envir, emptyenv())) {
[09:30:59.637]                         if (exists("master", mode = "list", envir = envir, 
[09:30:59.637]                           inherits = FALSE)) {
[09:30:59.637]                           master <- get("master", mode = "list", 
[09:30:59.637]                             envir = envir, inherits = FALSE)
[09:30:59.637]                           if (inherits(master, c("SOCKnode", 
[09:30:59.637]                             "SOCK0node"))) {
[09:30:59.637]                             sendCondition <<- function(cond) {
[09:30:59.637]                               data <- list(type = "VALUE", value = cond, 
[09:30:59.637]                                 success = TRUE)
[09:30:59.637]                               parallel_sendData(master, data)
[09:30:59.637]                             }
[09:30:59.637]                             return(sendCondition)
[09:30:59.637]                           }
[09:30:59.637]                         }
[09:30:59.637]                         frame <- frame + 1L
[09:30:59.637]                         envir <- sys.frame(frame)
[09:30:59.637]                       }
[09:30:59.637]                     }
[09:30:59.637]                     sendCondition <<- function(cond) NULL
[09:30:59.637]                   }
[09:30:59.637]                 })
[09:30:59.637]                 withCallingHandlers({
[09:30:59.637]                   {
[09:30:59.637]                     42L
[09:30:59.637]                   }
[09:30:59.637]                 }, immediateCondition = function(cond) {
[09:30:59.637]                   sendCondition <- ...future.makeSendCondition()
[09:30:59.637]                   sendCondition(cond)
[09:30:59.637]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:59.637]                   {
[09:30:59.637]                     inherits <- base::inherits
[09:30:59.637]                     invokeRestart <- base::invokeRestart
[09:30:59.637]                     is.null <- base::is.null
[09:30:59.637]                     muffled <- FALSE
[09:30:59.637]                     if (inherits(cond, "message")) {
[09:30:59.637]                       muffled <- grepl(pattern, "muffleMessage")
[09:30:59.637]                       if (muffled) 
[09:30:59.637]                         invokeRestart("muffleMessage")
[09:30:59.637]                     }
[09:30:59.637]                     else if (inherits(cond, "warning")) {
[09:30:59.637]                       muffled <- grepl(pattern, "muffleWarning")
[09:30:59.637]                       if (muffled) 
[09:30:59.637]                         invokeRestart("muffleWarning")
[09:30:59.637]                     }
[09:30:59.637]                     else if (inherits(cond, "condition")) {
[09:30:59.637]                       if (!is.null(pattern)) {
[09:30:59.637]                         computeRestarts <- base::computeRestarts
[09:30:59.637]                         grepl <- base::grepl
[09:30:59.637]                         restarts <- computeRestarts(cond)
[09:30:59.637]                         for (restart in restarts) {
[09:30:59.637]                           name <- restart$name
[09:30:59.637]                           if (is.null(name)) 
[09:30:59.637]                             next
[09:30:59.637]                           if (!grepl(pattern, name)) 
[09:30:59.637]                             next
[09:30:59.637]                           invokeRestart(restart)
[09:30:59.637]                           muffled <- TRUE
[09:30:59.637]                           break
[09:30:59.637]                         }
[09:30:59.637]                       }
[09:30:59.637]                     }
[09:30:59.637]                     invisible(muffled)
[09:30:59.637]                   }
[09:30:59.637]                   muffleCondition(cond)
[09:30:59.637]                 })
[09:30:59.637]             }))
[09:30:59.637]             future::FutureResult(value = ...future.value$value, 
[09:30:59.637]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:59.637]                   ...future.rng), globalenv = if (FALSE) 
[09:30:59.637]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:30:59.637]                     ...future.globalenv.names))
[09:30:59.637]                 else NULL, started = ...future.startTime, version = "1.8")
[09:30:59.637]         }, condition = base::local({
[09:30:59.637]             c <- base::c
[09:30:59.637]             inherits <- base::inherits
[09:30:59.637]             invokeRestart <- base::invokeRestart
[09:30:59.637]             length <- base::length
[09:30:59.637]             list <- base::list
[09:30:59.637]             seq.int <- base::seq.int
[09:30:59.637]             signalCondition <- base::signalCondition
[09:30:59.637]             sys.calls <- base::sys.calls
[09:30:59.637]             `[[` <- base::`[[`
[09:30:59.637]             `+` <- base::`+`
[09:30:59.637]             `<<-` <- base::`<<-`
[09:30:59.637]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:30:59.637]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:30:59.637]                   3L)]
[09:30:59.637]             }
[09:30:59.637]             function(cond) {
[09:30:59.637]                 is_error <- inherits(cond, "error")
[09:30:59.637]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:30:59.637]                   NULL)
[09:30:59.637]                 if (is_error) {
[09:30:59.637]                   sessionInformation <- function() {
[09:30:59.637]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:30:59.637]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:30:59.637]                       search = base::search(), system = base::Sys.info())
[09:30:59.637]                   }
[09:30:59.637]                   ...future.conditions[[length(...future.conditions) + 
[09:30:59.637]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:30:59.637]                     cond$call), session = sessionInformation(), 
[09:30:59.637]                     timestamp = base::Sys.time(), signaled = 0L)
[09:30:59.637]                   signalCondition(cond)
[09:30:59.637]                 }
[09:30:59.637]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:30:59.637]                 "immediateCondition"))) {
[09:30:59.637]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:30:59.637]                   ...future.conditions[[length(...future.conditions) + 
[09:30:59.637]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:30:59.637]                   if (TRUE && !signal) {
[09:30:59.637]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:59.637]                     {
[09:30:59.637]                       inherits <- base::inherits
[09:30:59.637]                       invokeRestart <- base::invokeRestart
[09:30:59.637]                       is.null <- base::is.null
[09:30:59.637]                       muffled <- FALSE
[09:30:59.637]                       if (inherits(cond, "message")) {
[09:30:59.637]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:59.637]                         if (muffled) 
[09:30:59.637]                           invokeRestart("muffleMessage")
[09:30:59.637]                       }
[09:30:59.637]                       else if (inherits(cond, "warning")) {
[09:30:59.637]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:59.637]                         if (muffled) 
[09:30:59.637]                           invokeRestart("muffleWarning")
[09:30:59.637]                       }
[09:30:59.637]                       else if (inherits(cond, "condition")) {
[09:30:59.637]                         if (!is.null(pattern)) {
[09:30:59.637]                           computeRestarts <- base::computeRestarts
[09:30:59.637]                           grepl <- base::grepl
[09:30:59.637]                           restarts <- computeRestarts(cond)
[09:30:59.637]                           for (restart in restarts) {
[09:30:59.637]                             name <- restart$name
[09:30:59.637]                             if (is.null(name)) 
[09:30:59.637]                               next
[09:30:59.637]                             if (!grepl(pattern, name)) 
[09:30:59.637]                               next
[09:30:59.637]                             invokeRestart(restart)
[09:30:59.637]                             muffled <- TRUE
[09:30:59.637]                             break
[09:30:59.637]                           }
[09:30:59.637]                         }
[09:30:59.637]                       }
[09:30:59.637]                       invisible(muffled)
[09:30:59.637]                     }
[09:30:59.637]                     muffleCondition(cond, pattern = "^muffle")
[09:30:59.637]                   }
[09:30:59.637]                 }
[09:30:59.637]                 else {
[09:30:59.637]                   if (TRUE) {
[09:30:59.637]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:59.637]                     {
[09:30:59.637]                       inherits <- base::inherits
[09:30:59.637]                       invokeRestart <- base::invokeRestart
[09:30:59.637]                       is.null <- base::is.null
[09:30:59.637]                       muffled <- FALSE
[09:30:59.637]                       if (inherits(cond, "message")) {
[09:30:59.637]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:59.637]                         if (muffled) 
[09:30:59.637]                           invokeRestart("muffleMessage")
[09:30:59.637]                       }
[09:30:59.637]                       else if (inherits(cond, "warning")) {
[09:30:59.637]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:59.637]                         if (muffled) 
[09:30:59.637]                           invokeRestart("muffleWarning")
[09:30:59.637]                       }
[09:30:59.637]                       else if (inherits(cond, "condition")) {
[09:30:59.637]                         if (!is.null(pattern)) {
[09:30:59.637]                           computeRestarts <- base::computeRestarts
[09:30:59.637]                           grepl <- base::grepl
[09:30:59.637]                           restarts <- computeRestarts(cond)
[09:30:59.637]                           for (restart in restarts) {
[09:30:59.637]                             name <- restart$name
[09:30:59.637]                             if (is.null(name)) 
[09:30:59.637]                               next
[09:30:59.637]                             if (!grepl(pattern, name)) 
[09:30:59.637]                               next
[09:30:59.637]                             invokeRestart(restart)
[09:30:59.637]                             muffled <- TRUE
[09:30:59.637]                             break
[09:30:59.637]                           }
[09:30:59.637]                         }
[09:30:59.637]                       }
[09:30:59.637]                       invisible(muffled)
[09:30:59.637]                     }
[09:30:59.637]                     muffleCondition(cond, pattern = "^muffle")
[09:30:59.637]                   }
[09:30:59.637]                 }
[09:30:59.637]             }
[09:30:59.637]         }))
[09:30:59.637]     }, error = function(ex) {
[09:30:59.637]         base::structure(base::list(value = NULL, visible = NULL, 
[09:30:59.637]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:59.637]                 ...future.rng), started = ...future.startTime, 
[09:30:59.637]             finished = Sys.time(), session_uuid = NA_character_, 
[09:30:59.637]             version = "1.8"), class = "FutureResult")
[09:30:59.637]     }, finally = {
[09:30:59.637]         if (!identical(...future.workdir, getwd())) 
[09:30:59.637]             setwd(...future.workdir)
[09:30:59.637]         {
[09:30:59.637]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:30:59.637]                 ...future.oldOptions$nwarnings <- NULL
[09:30:59.637]             }
[09:30:59.637]             base::options(...future.oldOptions)
[09:30:59.637]             if (.Platform$OS.type == "windows") {
[09:30:59.637]                 old_names <- names(...future.oldEnvVars)
[09:30:59.637]                 envs <- base::Sys.getenv()
[09:30:59.637]                 names <- names(envs)
[09:30:59.637]                 common <- intersect(names, old_names)
[09:30:59.637]                 added <- setdiff(names, old_names)
[09:30:59.637]                 removed <- setdiff(old_names, names)
[09:30:59.637]                 changed <- common[...future.oldEnvVars[common] != 
[09:30:59.637]                   envs[common]]
[09:30:59.637]                 NAMES <- toupper(changed)
[09:30:59.637]                 args <- list()
[09:30:59.637]                 for (kk in seq_along(NAMES)) {
[09:30:59.637]                   name <- changed[[kk]]
[09:30:59.637]                   NAME <- NAMES[[kk]]
[09:30:59.637]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:59.637]                     next
[09:30:59.637]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:59.637]                 }
[09:30:59.637]                 NAMES <- toupper(added)
[09:30:59.637]                 for (kk in seq_along(NAMES)) {
[09:30:59.637]                   name <- added[[kk]]
[09:30:59.637]                   NAME <- NAMES[[kk]]
[09:30:59.637]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:59.637]                     next
[09:30:59.637]                   args[[name]] <- ""
[09:30:59.637]                 }
[09:30:59.637]                 NAMES <- toupper(removed)
[09:30:59.637]                 for (kk in seq_along(NAMES)) {
[09:30:59.637]                   name <- removed[[kk]]
[09:30:59.637]                   NAME <- NAMES[[kk]]
[09:30:59.637]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:59.637]                     next
[09:30:59.637]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:59.637]                 }
[09:30:59.637]                 if (length(args) > 0) 
[09:30:59.637]                   base::do.call(base::Sys.setenv, args = args)
[09:30:59.637]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:30:59.637]             }
[09:30:59.637]             else {
[09:30:59.637]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:30:59.637]             }
[09:30:59.637]             {
[09:30:59.637]                 if (base::length(...future.futureOptionsAdded) > 
[09:30:59.637]                   0L) {
[09:30:59.637]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:30:59.637]                   base::names(opts) <- ...future.futureOptionsAdded
[09:30:59.637]                   base::options(opts)
[09:30:59.637]                 }
[09:30:59.637]                 {
[09:30:59.637]                   {
[09:30:59.637]                     base::options(mc.cores = ...future.mc.cores.old)
[09:30:59.637]                     NULL
[09:30:59.637]                   }
[09:30:59.637]                   options(future.plan = NULL)
[09:30:59.637]                   if (is.na(NA_character_)) 
[09:30:59.637]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:30:59.637]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:30:59.637]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:30:59.637]                     .init = FALSE)
[09:30:59.637]                 }
[09:30:59.637]             }
[09:30:59.637]         }
[09:30:59.637]     })
[09:30:59.637]     if (TRUE) {
[09:30:59.637]         base::sink(type = "output", split = FALSE)
[09:30:59.637]         if (TRUE) {
[09:30:59.637]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:30:59.637]         }
[09:30:59.637]         else {
[09:30:59.637]             ...future.result["stdout"] <- base::list(NULL)
[09:30:59.637]         }
[09:30:59.637]         base::close(...future.stdout)
[09:30:59.637]         ...future.stdout <- NULL
[09:30:59.637]     }
[09:30:59.637]     ...future.result$conditions <- ...future.conditions
[09:30:59.637]     ...future.result$finished <- base::Sys.time()
[09:30:59.637]     ...future.result
[09:30:59.637] }
[09:30:59.688] MultisessionFuture started
[09:30:59.689] result() for ClusterFuture ...
[09:30:59.690] receiveMessageFromWorker() for ClusterFuture ...
[09:30:59.690] - Validating connection of MultisessionFuture
[09:30:59.721] - received message: FutureResult
[09:30:59.721] - Received FutureResult
[09:30:59.724] - Erased future from FutureRegistry
[09:30:59.724] result() for ClusterFuture ...
[09:30:59.724] - result already collected: FutureResult
[09:30:59.724] result() for ClusterFuture ... done
[09:30:59.724] receiveMessageFromWorker() for ClusterFuture ... done
[09:30:59.724] result() for ClusterFuture ... done
[09:30:59.725] result() for ClusterFuture ...
[09:30:59.725] - result already collected: FutureResult
[09:30:59.725] result() for ClusterFuture ... done
[1] 42
[09:30:59.726] getGlobalsAndPackages() ...
[09:30:59.726] 
[09:30:59.726] - globals: [0] <none>
[09:30:59.726] getGlobalsAndPackages() ... DONE
[09:30:59.737] Packages needed by the future expression (n = 0): <none>
[09:30:59.738] Packages needed by future strategies (n = 0): <none>
[09:30:59.738] {
[09:30:59.738]     {
[09:30:59.738]         {
[09:30:59.738]             ...future.startTime <- base::Sys.time()
[09:30:59.738]             {
[09:30:59.738]                 {
[09:30:59.738]                   {
[09:30:59.738]                     {
[09:30:59.738]                       base::local({
[09:30:59.738]                         has_future <- base::requireNamespace("future", 
[09:30:59.738]                           quietly = TRUE)
[09:30:59.738]                         if (has_future) {
[09:30:59.738]                           ns <- base::getNamespace("future")
[09:30:59.738]                           version <- ns[[".package"]][["version"]]
[09:30:59.738]                           if (is.null(version)) 
[09:30:59.738]                             version <- utils::packageVersion("future")
[09:30:59.738]                         }
[09:30:59.738]                         else {
[09:30:59.738]                           version <- NULL
[09:30:59.738]                         }
[09:30:59.738]                         if (!has_future || version < "1.8.0") {
[09:30:59.738]                           info <- base::c(r_version = base::gsub("R version ", 
[09:30:59.738]                             "", base::R.version$version.string), 
[09:30:59.738]                             platform = base::sprintf("%s (%s-bit)", 
[09:30:59.738]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:30:59.738]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:30:59.738]                               "release", "version")], collapse = " "), 
[09:30:59.738]                             hostname = base::Sys.info()[["nodename"]])
[09:30:59.738]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:30:59.738]                             info)
[09:30:59.738]                           info <- base::paste(info, collapse = "; ")
[09:30:59.738]                           if (!has_future) {
[09:30:59.738]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:30:59.738]                               info)
[09:30:59.738]                           }
[09:30:59.738]                           else {
[09:30:59.738]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:30:59.738]                               info, version)
[09:30:59.738]                           }
[09:30:59.738]                           base::stop(msg)
[09:30:59.738]                         }
[09:30:59.738]                       })
[09:30:59.738]                     }
[09:30:59.738]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:30:59.738]                     base::options(mc.cores = 1L)
[09:30:59.738]                   }
[09:30:59.738]                   ...future.strategy.old <- future::plan("list")
[09:30:59.738]                   options(future.plan = NULL)
[09:30:59.738]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:30:59.738]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:30:59.738]                 }
[09:30:59.738]                 ...future.workdir <- getwd()
[09:30:59.738]             }
[09:30:59.738]             ...future.oldOptions <- base::as.list(base::.Options)
[09:30:59.738]             ...future.oldEnvVars <- base::Sys.getenv()
[09:30:59.738]         }
[09:30:59.738]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:30:59.738]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:30:59.738]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:30:59.738]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:30:59.738]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:30:59.738]             future.stdout.windows.reencode = NULL, width = 80L)
[09:30:59.738]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:30:59.738]             base::names(...future.oldOptions))
[09:30:59.738]     }
[09:30:59.738]     if (FALSE) {
[09:30:59.738]     }
[09:30:59.738]     else {
[09:30:59.738]         if (TRUE) {
[09:30:59.738]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:30:59.738]                 open = "w")
[09:30:59.738]         }
[09:30:59.738]         else {
[09:30:59.738]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:30:59.738]                 windows = "NUL", "/dev/null"), open = "w")
[09:30:59.738]         }
[09:30:59.738]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:30:59.738]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:30:59.738]             base::sink(type = "output", split = FALSE)
[09:30:59.738]             base::close(...future.stdout)
[09:30:59.738]         }, add = TRUE)
[09:30:59.738]     }
[09:30:59.738]     ...future.frame <- base::sys.nframe()
[09:30:59.738]     ...future.conditions <- base::list()
[09:30:59.738]     ...future.rng <- base::globalenv()$.Random.seed
[09:30:59.738]     if (FALSE) {
[09:30:59.738]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:30:59.738]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:30:59.738]     }
[09:30:59.738]     ...future.result <- base::tryCatch({
[09:30:59.738]         base::withCallingHandlers({
[09:30:59.738]             ...future.value <- base::withVisible(base::local({
[09:30:59.738]                 ...future.makeSendCondition <- base::local({
[09:30:59.738]                   sendCondition <- NULL
[09:30:59.738]                   function(frame = 1L) {
[09:30:59.738]                     if (is.function(sendCondition)) 
[09:30:59.738]                       return(sendCondition)
[09:30:59.738]                     ns <- getNamespace("parallel")
[09:30:59.738]                     if (exists("sendData", mode = "function", 
[09:30:59.738]                       envir = ns)) {
[09:30:59.738]                       parallel_sendData <- get("sendData", mode = "function", 
[09:30:59.738]                         envir = ns)
[09:30:59.738]                       envir <- sys.frame(frame)
[09:30:59.738]                       master <- NULL
[09:30:59.738]                       while (!identical(envir, .GlobalEnv) && 
[09:30:59.738]                         !identical(envir, emptyenv())) {
[09:30:59.738]                         if (exists("master", mode = "list", envir = envir, 
[09:30:59.738]                           inherits = FALSE)) {
[09:30:59.738]                           master <- get("master", mode = "list", 
[09:30:59.738]                             envir = envir, inherits = FALSE)
[09:30:59.738]                           if (inherits(master, c("SOCKnode", 
[09:30:59.738]                             "SOCK0node"))) {
[09:30:59.738]                             sendCondition <<- function(cond) {
[09:30:59.738]                               data <- list(type = "VALUE", value = cond, 
[09:30:59.738]                                 success = TRUE)
[09:30:59.738]                               parallel_sendData(master, data)
[09:30:59.738]                             }
[09:30:59.738]                             return(sendCondition)
[09:30:59.738]                           }
[09:30:59.738]                         }
[09:30:59.738]                         frame <- frame + 1L
[09:30:59.738]                         envir <- sys.frame(frame)
[09:30:59.738]                       }
[09:30:59.738]                     }
[09:30:59.738]                     sendCondition <<- function(cond) NULL
[09:30:59.738]                   }
[09:30:59.738]                 })
[09:30:59.738]                 withCallingHandlers({
[09:30:59.738]                   {
[09:30:59.738]                     42L
[09:30:59.738]                   }
[09:30:59.738]                 }, immediateCondition = function(cond) {
[09:30:59.738]                   sendCondition <- ...future.makeSendCondition()
[09:30:59.738]                   sendCondition(cond)
[09:30:59.738]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:59.738]                   {
[09:30:59.738]                     inherits <- base::inherits
[09:30:59.738]                     invokeRestart <- base::invokeRestart
[09:30:59.738]                     is.null <- base::is.null
[09:30:59.738]                     muffled <- FALSE
[09:30:59.738]                     if (inherits(cond, "message")) {
[09:30:59.738]                       muffled <- grepl(pattern, "muffleMessage")
[09:30:59.738]                       if (muffled) 
[09:30:59.738]                         invokeRestart("muffleMessage")
[09:30:59.738]                     }
[09:30:59.738]                     else if (inherits(cond, "warning")) {
[09:30:59.738]                       muffled <- grepl(pattern, "muffleWarning")
[09:30:59.738]                       if (muffled) 
[09:30:59.738]                         invokeRestart("muffleWarning")
[09:30:59.738]                     }
[09:30:59.738]                     else if (inherits(cond, "condition")) {
[09:30:59.738]                       if (!is.null(pattern)) {
[09:30:59.738]                         computeRestarts <- base::computeRestarts
[09:30:59.738]                         grepl <- base::grepl
[09:30:59.738]                         restarts <- computeRestarts(cond)
[09:30:59.738]                         for (restart in restarts) {
[09:30:59.738]                           name <- restart$name
[09:30:59.738]                           if (is.null(name)) 
[09:30:59.738]                             next
[09:30:59.738]                           if (!grepl(pattern, name)) 
[09:30:59.738]                             next
[09:30:59.738]                           invokeRestart(restart)
[09:30:59.738]                           muffled <- TRUE
[09:30:59.738]                           break
[09:30:59.738]                         }
[09:30:59.738]                       }
[09:30:59.738]                     }
[09:30:59.738]                     invisible(muffled)
[09:30:59.738]                   }
[09:30:59.738]                   muffleCondition(cond)
[09:30:59.738]                 })
[09:30:59.738]             }))
[09:30:59.738]             future::FutureResult(value = ...future.value$value, 
[09:30:59.738]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:59.738]                   ...future.rng), globalenv = if (FALSE) 
[09:30:59.738]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:30:59.738]                     ...future.globalenv.names))
[09:30:59.738]                 else NULL, started = ...future.startTime, version = "1.8")
[09:30:59.738]         }, condition = base::local({
[09:30:59.738]             c <- base::c
[09:30:59.738]             inherits <- base::inherits
[09:30:59.738]             invokeRestart <- base::invokeRestart
[09:30:59.738]             length <- base::length
[09:30:59.738]             list <- base::list
[09:30:59.738]             seq.int <- base::seq.int
[09:30:59.738]             signalCondition <- base::signalCondition
[09:30:59.738]             sys.calls <- base::sys.calls
[09:30:59.738]             `[[` <- base::`[[`
[09:30:59.738]             `+` <- base::`+`
[09:30:59.738]             `<<-` <- base::`<<-`
[09:30:59.738]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:30:59.738]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:30:59.738]                   3L)]
[09:30:59.738]             }
[09:30:59.738]             function(cond) {
[09:30:59.738]                 is_error <- inherits(cond, "error")
[09:30:59.738]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:30:59.738]                   NULL)
[09:30:59.738]                 if (is_error) {
[09:30:59.738]                   sessionInformation <- function() {
[09:30:59.738]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:30:59.738]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:30:59.738]                       search = base::search(), system = base::Sys.info())
[09:30:59.738]                   }
[09:30:59.738]                   ...future.conditions[[length(...future.conditions) + 
[09:30:59.738]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:30:59.738]                     cond$call), session = sessionInformation(), 
[09:30:59.738]                     timestamp = base::Sys.time(), signaled = 0L)
[09:30:59.738]                   signalCondition(cond)
[09:30:59.738]                 }
[09:30:59.738]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:30:59.738]                 "immediateCondition"))) {
[09:30:59.738]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:30:59.738]                   ...future.conditions[[length(...future.conditions) + 
[09:30:59.738]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:30:59.738]                   if (TRUE && !signal) {
[09:30:59.738]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:59.738]                     {
[09:30:59.738]                       inherits <- base::inherits
[09:30:59.738]                       invokeRestart <- base::invokeRestart
[09:30:59.738]                       is.null <- base::is.null
[09:30:59.738]                       muffled <- FALSE
[09:30:59.738]                       if (inherits(cond, "message")) {
[09:30:59.738]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:59.738]                         if (muffled) 
[09:30:59.738]                           invokeRestart("muffleMessage")
[09:30:59.738]                       }
[09:30:59.738]                       else if (inherits(cond, "warning")) {
[09:30:59.738]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:59.738]                         if (muffled) 
[09:30:59.738]                           invokeRestart("muffleWarning")
[09:30:59.738]                       }
[09:30:59.738]                       else if (inherits(cond, "condition")) {
[09:30:59.738]                         if (!is.null(pattern)) {
[09:30:59.738]                           computeRestarts <- base::computeRestarts
[09:30:59.738]                           grepl <- base::grepl
[09:30:59.738]                           restarts <- computeRestarts(cond)
[09:30:59.738]                           for (restart in restarts) {
[09:30:59.738]                             name <- restart$name
[09:30:59.738]                             if (is.null(name)) 
[09:30:59.738]                               next
[09:30:59.738]                             if (!grepl(pattern, name)) 
[09:30:59.738]                               next
[09:30:59.738]                             invokeRestart(restart)
[09:30:59.738]                             muffled <- TRUE
[09:30:59.738]                             break
[09:30:59.738]                           }
[09:30:59.738]                         }
[09:30:59.738]                       }
[09:30:59.738]                       invisible(muffled)
[09:30:59.738]                     }
[09:30:59.738]                     muffleCondition(cond, pattern = "^muffle")
[09:30:59.738]                   }
[09:30:59.738]                 }
[09:30:59.738]                 else {
[09:30:59.738]                   if (TRUE) {
[09:30:59.738]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:59.738]                     {
[09:30:59.738]                       inherits <- base::inherits
[09:30:59.738]                       invokeRestart <- base::invokeRestart
[09:30:59.738]                       is.null <- base::is.null
[09:30:59.738]                       muffled <- FALSE
[09:30:59.738]                       if (inherits(cond, "message")) {
[09:30:59.738]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:59.738]                         if (muffled) 
[09:30:59.738]                           invokeRestart("muffleMessage")
[09:30:59.738]                       }
[09:30:59.738]                       else if (inherits(cond, "warning")) {
[09:30:59.738]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:59.738]                         if (muffled) 
[09:30:59.738]                           invokeRestart("muffleWarning")
[09:30:59.738]                       }
[09:30:59.738]                       else if (inherits(cond, "condition")) {
[09:30:59.738]                         if (!is.null(pattern)) {
[09:30:59.738]                           computeRestarts <- base::computeRestarts
[09:30:59.738]                           grepl <- base::grepl
[09:30:59.738]                           restarts <- computeRestarts(cond)
[09:30:59.738]                           for (restart in restarts) {
[09:30:59.738]                             name <- restart$name
[09:30:59.738]                             if (is.null(name)) 
[09:30:59.738]                               next
[09:30:59.738]                             if (!grepl(pattern, name)) 
[09:30:59.738]                               next
[09:30:59.738]                             invokeRestart(restart)
[09:30:59.738]                             muffled <- TRUE
[09:30:59.738]                             break
[09:30:59.738]                           }
[09:30:59.738]                         }
[09:30:59.738]                       }
[09:30:59.738]                       invisible(muffled)
[09:30:59.738]                     }
[09:30:59.738]                     muffleCondition(cond, pattern = "^muffle")
[09:30:59.738]                   }
[09:30:59.738]                 }
[09:30:59.738]             }
[09:30:59.738]         }))
[09:30:59.738]     }, error = function(ex) {
[09:30:59.738]         base::structure(base::list(value = NULL, visible = NULL, 
[09:30:59.738]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:59.738]                 ...future.rng), started = ...future.startTime, 
[09:30:59.738]             finished = Sys.time(), session_uuid = NA_character_, 
[09:30:59.738]             version = "1.8"), class = "FutureResult")
[09:30:59.738]     }, finally = {
[09:30:59.738]         if (!identical(...future.workdir, getwd())) 
[09:30:59.738]             setwd(...future.workdir)
[09:30:59.738]         {
[09:30:59.738]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:30:59.738]                 ...future.oldOptions$nwarnings <- NULL
[09:30:59.738]             }
[09:30:59.738]             base::options(...future.oldOptions)
[09:30:59.738]             if (.Platform$OS.type == "windows") {
[09:30:59.738]                 old_names <- names(...future.oldEnvVars)
[09:30:59.738]                 envs <- base::Sys.getenv()
[09:30:59.738]                 names <- names(envs)
[09:30:59.738]                 common <- intersect(names, old_names)
[09:30:59.738]                 added <- setdiff(names, old_names)
[09:30:59.738]                 removed <- setdiff(old_names, names)
[09:30:59.738]                 changed <- common[...future.oldEnvVars[common] != 
[09:30:59.738]                   envs[common]]
[09:30:59.738]                 NAMES <- toupper(changed)
[09:30:59.738]                 args <- list()
[09:30:59.738]                 for (kk in seq_along(NAMES)) {
[09:30:59.738]                   name <- changed[[kk]]
[09:30:59.738]                   NAME <- NAMES[[kk]]
[09:30:59.738]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:59.738]                     next
[09:30:59.738]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:59.738]                 }
[09:30:59.738]                 NAMES <- toupper(added)
[09:30:59.738]                 for (kk in seq_along(NAMES)) {
[09:30:59.738]                   name <- added[[kk]]
[09:30:59.738]                   NAME <- NAMES[[kk]]
[09:30:59.738]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:59.738]                     next
[09:30:59.738]                   args[[name]] <- ""
[09:30:59.738]                 }
[09:30:59.738]                 NAMES <- toupper(removed)
[09:30:59.738]                 for (kk in seq_along(NAMES)) {
[09:30:59.738]                   name <- removed[[kk]]
[09:30:59.738]                   NAME <- NAMES[[kk]]
[09:30:59.738]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:59.738]                     next
[09:30:59.738]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:59.738]                 }
[09:30:59.738]                 if (length(args) > 0) 
[09:30:59.738]                   base::do.call(base::Sys.setenv, args = args)
[09:30:59.738]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:30:59.738]             }
[09:30:59.738]             else {
[09:30:59.738]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:30:59.738]             }
[09:30:59.738]             {
[09:30:59.738]                 if (base::length(...future.futureOptionsAdded) > 
[09:30:59.738]                   0L) {
[09:30:59.738]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:30:59.738]                   base::names(opts) <- ...future.futureOptionsAdded
[09:30:59.738]                   base::options(opts)
[09:30:59.738]                 }
[09:30:59.738]                 {
[09:30:59.738]                   {
[09:30:59.738]                     base::options(mc.cores = ...future.mc.cores.old)
[09:30:59.738]                     NULL
[09:30:59.738]                   }
[09:30:59.738]                   options(future.plan = NULL)
[09:30:59.738]                   if (is.na(NA_character_)) 
[09:30:59.738]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:30:59.738]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:30:59.738]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:30:59.738]                     .init = FALSE)
[09:30:59.738]                 }
[09:30:59.738]             }
[09:30:59.738]         }
[09:30:59.738]     })
[09:30:59.738]     if (TRUE) {
[09:30:59.738]         base::sink(type = "output", split = FALSE)
[09:30:59.738]         if (TRUE) {
[09:30:59.738]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:30:59.738]         }
[09:30:59.738]         else {
[09:30:59.738]             ...future.result["stdout"] <- base::list(NULL)
[09:30:59.738]         }
[09:30:59.738]         base::close(...future.stdout)
[09:30:59.738]         ...future.stdout <- NULL
[09:30:59.738]     }
[09:30:59.738]     ...future.result$conditions <- ...future.conditions
[09:30:59.738]     ...future.result$finished <- base::Sys.time()
[09:30:59.738]     ...future.result
[09:30:59.738] }
[09:30:59.741] MultisessionFuture started
[09:30:59.741] result() for ClusterFuture ...
[09:30:59.742] receiveMessageFromWorker() for ClusterFuture ...
[09:30:59.742] - Validating connection of MultisessionFuture
[09:30:59.743] - received message: FutureResult
[09:30:59.743] - Received FutureResult
[09:30:59.743] - Erased future from FutureRegistry
[09:30:59.743] result() for ClusterFuture ...
[09:30:59.744] - result already collected: FutureResult
[09:30:59.744] result() for ClusterFuture ... done
[09:30:59.744] receiveMessageFromWorker() for ClusterFuture ... done
[09:30:59.744] result() for ClusterFuture ... done
[09:30:59.744] result() for ClusterFuture ...
[09:30:59.744] - result already collected: FutureResult
[09:30:59.744] result() for ClusterFuture ... done
[1] 42
[09:30:59.745] getGlobalsAndPackages() ...
[09:30:59.745] Searching for globals...
[09:30:59.745] - globals found: [1] ‘{’
[09:30:59.746] Searching for globals ... DONE
[09:30:59.746] Resolving globals: FALSE
[09:30:59.746] 
[09:30:59.746] 
[09:30:59.746] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: d1376831-1a69-df06-dce9-bd05e7c69d80
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:30:59.747] Packages needed by the future expression (n = 0): <none>
[09:30:59.747] Packages needed by future strategies (n = 0): <none>
[09:30:59.748] {
[09:30:59.748]     {
[09:30:59.748]         {
[09:30:59.748]             ...future.startTime <- base::Sys.time()
[09:30:59.748]             {
[09:30:59.748]                 {
[09:30:59.748]                   {
[09:30:59.748]                     base::local({
[09:30:59.748]                       has_future <- base::requireNamespace("future", 
[09:30:59.748]                         quietly = TRUE)
[09:30:59.748]                       if (has_future) {
[09:30:59.748]                         ns <- base::getNamespace("future")
[09:30:59.748]                         version <- ns[[".package"]][["version"]]
[09:30:59.748]                         if (is.null(version)) 
[09:30:59.748]                           version <- utils::packageVersion("future")
[09:30:59.748]                       }
[09:30:59.748]                       else {
[09:30:59.748]                         version <- NULL
[09:30:59.748]                       }
[09:30:59.748]                       if (!has_future || version < "1.8.0") {
[09:30:59.748]                         info <- base::c(r_version = base::gsub("R version ", 
[09:30:59.748]                           "", base::R.version$version.string), 
[09:30:59.748]                           platform = base::sprintf("%s (%s-bit)", 
[09:30:59.748]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:30:59.748]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:30:59.748]                             "release", "version")], collapse = " "), 
[09:30:59.748]                           hostname = base::Sys.info()[["nodename"]])
[09:30:59.748]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:30:59.748]                           info)
[09:30:59.748]                         info <- base::paste(info, collapse = "; ")
[09:30:59.748]                         if (!has_future) {
[09:30:59.748]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:30:59.748]                             info)
[09:30:59.748]                         }
[09:30:59.748]                         else {
[09:30:59.748]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:30:59.748]                             info, version)
[09:30:59.748]                         }
[09:30:59.748]                         base::stop(msg)
[09:30:59.748]                       }
[09:30:59.748]                     })
[09:30:59.748]                   }
[09:30:59.748]                   ...future.strategy.old <- future::plan("list")
[09:30:59.748]                   options(future.plan = NULL)
[09:30:59.748]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:30:59.748]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:30:59.748]                 }
[09:30:59.748]                 ...future.workdir <- getwd()
[09:30:59.748]             }
[09:30:59.748]             ...future.oldOptions <- base::as.list(base::.Options)
[09:30:59.748]             ...future.oldEnvVars <- base::Sys.getenv()
[09:30:59.748]         }
[09:30:59.748]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:30:59.748]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:30:59.748]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:30:59.748]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:30:59.748]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:30:59.748]             future.stdout.windows.reencode = NULL, width = 80L)
[09:30:59.748]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:30:59.748]             base::names(...future.oldOptions))
[09:30:59.748]     }
[09:30:59.748]     if (FALSE) {
[09:30:59.748]     }
[09:30:59.748]     else {
[09:30:59.748]         if (TRUE) {
[09:30:59.748]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:30:59.748]                 open = "w")
[09:30:59.748]         }
[09:30:59.748]         else {
[09:30:59.748]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:30:59.748]                 windows = "NUL", "/dev/null"), open = "w")
[09:30:59.748]         }
[09:30:59.748]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:30:59.748]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:30:59.748]             base::sink(type = "output", split = FALSE)
[09:30:59.748]             base::close(...future.stdout)
[09:30:59.748]         }, add = TRUE)
[09:30:59.748]     }
[09:30:59.748]     ...future.frame <- base::sys.nframe()
[09:30:59.748]     ...future.conditions <- base::list()
[09:30:59.748]     ...future.rng <- base::globalenv()$.Random.seed
[09:30:59.748]     if (FALSE) {
[09:30:59.748]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:30:59.748]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:30:59.748]     }
[09:30:59.748]     ...future.result <- base::tryCatch({
[09:30:59.748]         base::withCallingHandlers({
[09:30:59.748]             ...future.value <- base::withVisible(base::local({
[09:30:59.748]                 42L
[09:30:59.748]             }))
[09:30:59.748]             future::FutureResult(value = ...future.value$value, 
[09:30:59.748]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:59.748]                   ...future.rng), globalenv = if (FALSE) 
[09:30:59.748]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:30:59.748]                     ...future.globalenv.names))
[09:30:59.748]                 else NULL, started = ...future.startTime, version = "1.8")
[09:30:59.748]         }, condition = base::local({
[09:30:59.748]             c <- base::c
[09:30:59.748]             inherits <- base::inherits
[09:30:59.748]             invokeRestart <- base::invokeRestart
[09:30:59.748]             length <- base::length
[09:30:59.748]             list <- base::list
[09:30:59.748]             seq.int <- base::seq.int
[09:30:59.748]             signalCondition <- base::signalCondition
[09:30:59.748]             sys.calls <- base::sys.calls
[09:30:59.748]             `[[` <- base::`[[`
[09:30:59.748]             `+` <- base::`+`
[09:30:59.748]             `<<-` <- base::`<<-`
[09:30:59.748]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:30:59.748]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:30:59.748]                   3L)]
[09:30:59.748]             }
[09:30:59.748]             function(cond) {
[09:30:59.748]                 is_error <- inherits(cond, "error")
[09:30:59.748]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:30:59.748]                   NULL)
[09:30:59.748]                 if (is_error) {
[09:30:59.748]                   sessionInformation <- function() {
[09:30:59.748]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:30:59.748]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:30:59.748]                       search = base::search(), system = base::Sys.info())
[09:30:59.748]                   }
[09:30:59.748]                   ...future.conditions[[length(...future.conditions) + 
[09:30:59.748]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:30:59.748]                     cond$call), session = sessionInformation(), 
[09:30:59.748]                     timestamp = base::Sys.time(), signaled = 0L)
[09:30:59.748]                   signalCondition(cond)
[09:30:59.748]                 }
[09:30:59.748]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:30:59.748]                 "immediateCondition"))) {
[09:30:59.748]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:30:59.748]                   ...future.conditions[[length(...future.conditions) + 
[09:30:59.748]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:30:59.748]                   if (TRUE && !signal) {
[09:30:59.748]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:59.748]                     {
[09:30:59.748]                       inherits <- base::inherits
[09:30:59.748]                       invokeRestart <- base::invokeRestart
[09:30:59.748]                       is.null <- base::is.null
[09:30:59.748]                       muffled <- FALSE
[09:30:59.748]                       if (inherits(cond, "message")) {
[09:30:59.748]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:59.748]                         if (muffled) 
[09:30:59.748]                           invokeRestart("muffleMessage")
[09:30:59.748]                       }
[09:30:59.748]                       else if (inherits(cond, "warning")) {
[09:30:59.748]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:59.748]                         if (muffled) 
[09:30:59.748]                           invokeRestart("muffleWarning")
[09:30:59.748]                       }
[09:30:59.748]                       else if (inherits(cond, "condition")) {
[09:30:59.748]                         if (!is.null(pattern)) {
[09:30:59.748]                           computeRestarts <- base::computeRestarts
[09:30:59.748]                           grepl <- base::grepl
[09:30:59.748]                           restarts <- computeRestarts(cond)
[09:30:59.748]                           for (restart in restarts) {
[09:30:59.748]                             name <- restart$name
[09:30:59.748]                             if (is.null(name)) 
[09:30:59.748]                               next
[09:30:59.748]                             if (!grepl(pattern, name)) 
[09:30:59.748]                               next
[09:30:59.748]                             invokeRestart(restart)
[09:30:59.748]                             muffled <- TRUE
[09:30:59.748]                             break
[09:30:59.748]                           }
[09:30:59.748]                         }
[09:30:59.748]                       }
[09:30:59.748]                       invisible(muffled)
[09:30:59.748]                     }
[09:30:59.748]                     muffleCondition(cond, pattern = "^muffle")
[09:30:59.748]                   }
[09:30:59.748]                 }
[09:30:59.748]                 else {
[09:30:59.748]                   if (TRUE) {
[09:30:59.748]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:59.748]                     {
[09:30:59.748]                       inherits <- base::inherits
[09:30:59.748]                       invokeRestart <- base::invokeRestart
[09:30:59.748]                       is.null <- base::is.null
[09:30:59.748]                       muffled <- FALSE
[09:30:59.748]                       if (inherits(cond, "message")) {
[09:30:59.748]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:59.748]                         if (muffled) 
[09:30:59.748]                           invokeRestart("muffleMessage")
[09:30:59.748]                       }
[09:30:59.748]                       else if (inherits(cond, "warning")) {
[09:30:59.748]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:59.748]                         if (muffled) 
[09:30:59.748]                           invokeRestart("muffleWarning")
[09:30:59.748]                       }
[09:30:59.748]                       else if (inherits(cond, "condition")) {
[09:30:59.748]                         if (!is.null(pattern)) {
[09:30:59.748]                           computeRestarts <- base::computeRestarts
[09:30:59.748]                           grepl <- base::grepl
[09:30:59.748]                           restarts <- computeRestarts(cond)
[09:30:59.748]                           for (restart in restarts) {
[09:30:59.748]                             name <- restart$name
[09:30:59.748]                             if (is.null(name)) 
[09:30:59.748]                               next
[09:30:59.748]                             if (!grepl(pattern, name)) 
[09:30:59.748]                               next
[09:30:59.748]                             invokeRestart(restart)
[09:30:59.748]                             muffled <- TRUE
[09:30:59.748]                             break
[09:30:59.748]                           }
[09:30:59.748]                         }
[09:30:59.748]                       }
[09:30:59.748]                       invisible(muffled)
[09:30:59.748]                     }
[09:30:59.748]                     muffleCondition(cond, pattern = "^muffle")
[09:30:59.748]                   }
[09:30:59.748]                 }
[09:30:59.748]             }
[09:30:59.748]         }))
[09:30:59.748]     }, error = function(ex) {
[09:30:59.748]         base::structure(base::list(value = NULL, visible = NULL, 
[09:30:59.748]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:59.748]                 ...future.rng), started = ...future.startTime, 
[09:30:59.748]             finished = Sys.time(), session_uuid = NA_character_, 
[09:30:59.748]             version = "1.8"), class = "FutureResult")
[09:30:59.748]     }, finally = {
[09:30:59.748]         if (!identical(...future.workdir, getwd())) 
[09:30:59.748]             setwd(...future.workdir)
[09:30:59.748]         {
[09:30:59.748]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:30:59.748]                 ...future.oldOptions$nwarnings <- NULL
[09:30:59.748]             }
[09:30:59.748]             base::options(...future.oldOptions)
[09:30:59.748]             if (.Platform$OS.type == "windows") {
[09:30:59.748]                 old_names <- names(...future.oldEnvVars)
[09:30:59.748]                 envs <- base::Sys.getenv()
[09:30:59.748]                 names <- names(envs)
[09:30:59.748]                 common <- intersect(names, old_names)
[09:30:59.748]                 added <- setdiff(names, old_names)
[09:30:59.748]                 removed <- setdiff(old_names, names)
[09:30:59.748]                 changed <- common[...future.oldEnvVars[common] != 
[09:30:59.748]                   envs[common]]
[09:30:59.748]                 NAMES <- toupper(changed)
[09:30:59.748]                 args <- list()
[09:30:59.748]                 for (kk in seq_along(NAMES)) {
[09:30:59.748]                   name <- changed[[kk]]
[09:30:59.748]                   NAME <- NAMES[[kk]]
[09:30:59.748]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:59.748]                     next
[09:30:59.748]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:59.748]                 }
[09:30:59.748]                 NAMES <- toupper(added)
[09:30:59.748]                 for (kk in seq_along(NAMES)) {
[09:30:59.748]                   name <- added[[kk]]
[09:30:59.748]                   NAME <- NAMES[[kk]]
[09:30:59.748]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:59.748]                     next
[09:30:59.748]                   args[[name]] <- ""
[09:30:59.748]                 }
[09:30:59.748]                 NAMES <- toupper(removed)
[09:30:59.748]                 for (kk in seq_along(NAMES)) {
[09:30:59.748]                   name <- removed[[kk]]
[09:30:59.748]                   NAME <- NAMES[[kk]]
[09:30:59.748]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:59.748]                     next
[09:30:59.748]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:59.748]                 }
[09:30:59.748]                 if (length(args) > 0) 
[09:30:59.748]                   base::do.call(base::Sys.setenv, args = args)
[09:30:59.748]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:30:59.748]             }
[09:30:59.748]             else {
[09:30:59.748]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:30:59.748]             }
[09:30:59.748]             {
[09:30:59.748]                 if (base::length(...future.futureOptionsAdded) > 
[09:30:59.748]                   0L) {
[09:30:59.748]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:30:59.748]                   base::names(opts) <- ...future.futureOptionsAdded
[09:30:59.748]                   base::options(opts)
[09:30:59.748]                 }
[09:30:59.748]                 {
[09:30:59.748]                   {
[09:30:59.748]                     NULL
[09:30:59.748]                     RNGkind("Mersenne-Twister")
[09:30:59.748]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:30:59.748]                       inherits = FALSE)
[09:30:59.748]                   }
[09:30:59.748]                   options(future.plan = NULL)
[09:30:59.748]                   if (is.na(NA_character_)) 
[09:30:59.748]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:30:59.748]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:30:59.748]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:30:59.748]                     .init = FALSE)
[09:30:59.748]                 }
[09:30:59.748]             }
[09:30:59.748]         }
[09:30:59.748]     })
[09:30:59.748]     if (TRUE) {
[09:30:59.748]         base::sink(type = "output", split = FALSE)
[09:30:59.748]         if (TRUE) {
[09:30:59.748]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:30:59.748]         }
[09:30:59.748]         else {
[09:30:59.748]             ...future.result["stdout"] <- base::list(NULL)
[09:30:59.748]         }
[09:30:59.748]         base::close(...future.stdout)
[09:30:59.748]         ...future.stdout <- NULL
[09:30:59.748]     }
[09:30:59.748]     ...future.result$conditions <- ...future.conditions
[09:30:59.748]     ...future.result$finished <- base::Sys.time()
[09:30:59.748]     ...future.result
[09:30:59.748] }
[09:30:59.750] plan(): Setting new future strategy stack:
[09:30:59.750] List of future strategies:
[09:30:59.750] 1. sequential:
[09:30:59.750]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:59.750]    - tweaked: FALSE
[09:30:59.750]    - call: NULL
[09:30:59.750] plan(): nbrOfWorkers() = 1
[09:30:59.751] plan(): Setting new future strategy stack:
[09:30:59.751] List of future strategies:
[09:30:59.751] 1. future:
[09:30:59.751]    - args: function (..., workers = "<NULL>")
[09:30:59.751]    - tweaked: FALSE
[09:30:59.751]    - call: plan(foo)
[09:30:59.752] plan(): nbrOfWorkers() = Inf
[09:30:59.752] SequentialFuture started (and completed)
[1] 42
[09:30:59.753] getGlobalsAndPackages() ...
[09:30:59.753] Searching for globals...
[09:30:59.753] - globals found: [1] ‘{’
[09:30:59.754] Searching for globals ... DONE
[09:30:59.754] Resolving globals: FALSE
[09:30:59.754] 
[09:30:59.754] 
[09:30:59.754] getGlobalsAndPackages() ... DONE
[09:30:59.755] Packages needed by the future expression (n = 0): <none>
[09:30:59.755] Packages needed by future strategies (n = 0): <none>
[09:30:59.755] {
[09:30:59.755]     {
[09:30:59.755]         {
[09:30:59.755]             ...future.startTime <- base::Sys.time()
[09:30:59.755]             {
[09:30:59.755]                 {
[09:30:59.755]                   {
[09:30:59.755]                     base::local({
[09:30:59.755]                       has_future <- base::requireNamespace("future", 
[09:30:59.755]                         quietly = TRUE)
[09:30:59.755]                       if (has_future) {
[09:30:59.755]                         ns <- base::getNamespace("future")
[09:30:59.755]                         version <- ns[[".package"]][["version"]]
[09:30:59.755]                         if (is.null(version)) 
[09:30:59.755]                           version <- utils::packageVersion("future")
[09:30:59.755]                       }
[09:30:59.755]                       else {
[09:30:59.755]                         version <- NULL
[09:30:59.755]                       }
[09:30:59.755]                       if (!has_future || version < "1.8.0") {
[09:30:59.755]                         info <- base::c(r_version = base::gsub("R version ", 
[09:30:59.755]                           "", base::R.version$version.string), 
[09:30:59.755]                           platform = base::sprintf("%s (%s-bit)", 
[09:30:59.755]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:30:59.755]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:30:59.755]                             "release", "version")], collapse = " "), 
[09:30:59.755]                           hostname = base::Sys.info()[["nodename"]])
[09:30:59.755]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:30:59.755]                           info)
[09:30:59.755]                         info <- base::paste(info, collapse = "; ")
[09:30:59.755]                         if (!has_future) {
[09:30:59.755]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:30:59.755]                             info)
[09:30:59.755]                         }
[09:30:59.755]                         else {
[09:30:59.755]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:30:59.755]                             info, version)
[09:30:59.755]                         }
[09:30:59.755]                         base::stop(msg)
[09:30:59.755]                       }
[09:30:59.755]                     })
[09:30:59.755]                   }
[09:30:59.755]                   ...future.strategy.old <- future::plan("list")
[09:30:59.755]                   options(future.plan = NULL)
[09:30:59.755]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:30:59.755]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:30:59.755]                 }
[09:30:59.755]                 ...future.workdir <- getwd()
[09:30:59.755]             }
[09:30:59.755]             ...future.oldOptions <- base::as.list(base::.Options)
[09:30:59.755]             ...future.oldEnvVars <- base::Sys.getenv()
[09:30:59.755]         }
[09:30:59.755]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:30:59.755]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:30:59.755]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:30:59.755]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:30:59.755]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:30:59.755]             future.stdout.windows.reencode = NULL, width = 80L)
[09:30:59.755]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:30:59.755]             base::names(...future.oldOptions))
[09:30:59.755]     }
[09:30:59.755]     if (FALSE) {
[09:30:59.755]     }
[09:30:59.755]     else {
[09:30:59.755]         if (TRUE) {
[09:30:59.755]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:30:59.755]                 open = "w")
[09:30:59.755]         }
[09:30:59.755]         else {
[09:30:59.755]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:30:59.755]                 windows = "NUL", "/dev/null"), open = "w")
[09:30:59.755]         }
[09:30:59.755]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:30:59.755]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:30:59.755]             base::sink(type = "output", split = FALSE)
[09:30:59.755]             base::close(...future.stdout)
[09:30:59.755]         }, add = TRUE)
[09:30:59.755]     }
[09:30:59.755]     ...future.frame <- base::sys.nframe()
[09:30:59.755]     ...future.conditions <- base::list()
[09:30:59.755]     ...future.rng <- base::globalenv()$.Random.seed
[09:30:59.755]     if (FALSE) {
[09:30:59.755]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:30:59.755]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:30:59.755]     }
[09:30:59.755]     ...future.result <- base::tryCatch({
[09:30:59.755]         base::withCallingHandlers({
[09:30:59.755]             ...future.value <- base::withVisible(base::local({
[09:30:59.755]                 42L
[09:30:59.755]             }))
[09:30:59.755]             future::FutureResult(value = ...future.value$value, 
[09:30:59.755]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:59.755]                   ...future.rng), globalenv = if (FALSE) 
[09:30:59.755]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:30:59.755]                     ...future.globalenv.names))
[09:30:59.755]                 else NULL, started = ...future.startTime, version = "1.8")
[09:30:59.755]         }, condition = base::local({
[09:30:59.755]             c <- base::c
[09:30:59.755]             inherits <- base::inherits
[09:30:59.755]             invokeRestart <- base::invokeRestart
[09:30:59.755]             length <- base::length
[09:30:59.755]             list <- base::list
[09:30:59.755]             seq.int <- base::seq.int
[09:30:59.755]             signalCondition <- base::signalCondition
[09:30:59.755]             sys.calls <- base::sys.calls
[09:30:59.755]             `[[` <- base::`[[`
[09:30:59.755]             `+` <- base::`+`
[09:30:59.755]             `<<-` <- base::`<<-`
[09:30:59.755]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:30:59.755]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:30:59.755]                   3L)]
[09:30:59.755]             }
[09:30:59.755]             function(cond) {
[09:30:59.755]                 is_error <- inherits(cond, "error")
[09:30:59.755]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:30:59.755]                   NULL)
[09:30:59.755]                 if (is_error) {
[09:30:59.755]                   sessionInformation <- function() {
[09:30:59.755]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:30:59.755]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:30:59.755]                       search = base::search(), system = base::Sys.info())
[09:30:59.755]                   }
[09:30:59.755]                   ...future.conditions[[length(...future.conditions) + 
[09:30:59.755]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:30:59.755]                     cond$call), session = sessionInformation(), 
[09:30:59.755]                     timestamp = base::Sys.time(), signaled = 0L)
[09:30:59.755]                   signalCondition(cond)
[09:30:59.755]                 }
[09:30:59.755]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:30:59.755]                 "immediateCondition"))) {
[09:30:59.755]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:30:59.755]                   ...future.conditions[[length(...future.conditions) + 
[09:30:59.755]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:30:59.755]                   if (TRUE && !signal) {
[09:30:59.755]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:59.755]                     {
[09:30:59.755]                       inherits <- base::inherits
[09:30:59.755]                       invokeRestart <- base::invokeRestart
[09:30:59.755]                       is.null <- base::is.null
[09:30:59.755]                       muffled <- FALSE
[09:30:59.755]                       if (inherits(cond, "message")) {
[09:30:59.755]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:59.755]                         if (muffled) 
[09:30:59.755]                           invokeRestart("muffleMessage")
[09:30:59.755]                       }
[09:30:59.755]                       else if (inherits(cond, "warning")) {
[09:30:59.755]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:59.755]                         if (muffled) 
[09:30:59.755]                           invokeRestart("muffleWarning")
[09:30:59.755]                       }
[09:30:59.755]                       else if (inherits(cond, "condition")) {
[09:30:59.755]                         if (!is.null(pattern)) {
[09:30:59.755]                           computeRestarts <- base::computeRestarts
[09:30:59.755]                           grepl <- base::grepl
[09:30:59.755]                           restarts <- computeRestarts(cond)
[09:30:59.755]                           for (restart in restarts) {
[09:30:59.755]                             name <- restart$name
[09:30:59.755]                             if (is.null(name)) 
[09:30:59.755]                               next
[09:30:59.755]                             if (!grepl(pattern, name)) 
[09:30:59.755]                               next
[09:30:59.755]                             invokeRestart(restart)
[09:30:59.755]                             muffled <- TRUE
[09:30:59.755]                             break
[09:30:59.755]                           }
[09:30:59.755]                         }
[09:30:59.755]                       }
[09:30:59.755]                       invisible(muffled)
[09:30:59.755]                     }
[09:30:59.755]                     muffleCondition(cond, pattern = "^muffle")
[09:30:59.755]                   }
[09:30:59.755]                 }
[09:30:59.755]                 else {
[09:30:59.755]                   if (TRUE) {
[09:30:59.755]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:59.755]                     {
[09:30:59.755]                       inherits <- base::inherits
[09:30:59.755]                       invokeRestart <- base::invokeRestart
[09:30:59.755]                       is.null <- base::is.null
[09:30:59.755]                       muffled <- FALSE
[09:30:59.755]                       if (inherits(cond, "message")) {
[09:30:59.755]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:59.755]                         if (muffled) 
[09:30:59.755]                           invokeRestart("muffleMessage")
[09:30:59.755]                       }
[09:30:59.755]                       else if (inherits(cond, "warning")) {
[09:30:59.755]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:59.755]                         if (muffled) 
[09:30:59.755]                           invokeRestart("muffleWarning")
[09:30:59.755]                       }
[09:30:59.755]                       else if (inherits(cond, "condition")) {
[09:30:59.755]                         if (!is.null(pattern)) {
[09:30:59.755]                           computeRestarts <- base::computeRestarts
[09:30:59.755]                           grepl <- base::grepl
[09:30:59.755]                           restarts <- computeRestarts(cond)
[09:30:59.755]                           for (restart in restarts) {
[09:30:59.755]                             name <- restart$name
[09:30:59.755]                             if (is.null(name)) 
[09:30:59.755]                               next
[09:30:59.755]                             if (!grepl(pattern, name)) 
[09:30:59.755]                               next
[09:30:59.755]                             invokeRestart(restart)
[09:30:59.755]                             muffled <- TRUE
[09:30:59.755]                             break
[09:30:59.755]                           }
[09:30:59.755]                         }
[09:30:59.755]                       }
[09:30:59.755]                       invisible(muffled)
[09:30:59.755]                     }
[09:30:59.755]                     muffleCondition(cond, pattern = "^muffle")
[09:30:59.755]                   }
[09:30:59.755]                 }
[09:30:59.755]             }
[09:30:59.755]         }))
[09:30:59.755]     }, error = function(ex) {
[09:30:59.755]         base::structure(base::list(value = NULL, visible = NULL, 
[09:30:59.755]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:59.755]                 ...future.rng), started = ...future.startTime, 
[09:30:59.755]             finished = Sys.time(), session_uuid = NA_character_, 
[09:30:59.755]             version = "1.8"), class = "FutureResult")
[09:30:59.755]     }, finally = {
[09:30:59.755]         if (!identical(...future.workdir, getwd())) 
[09:30:59.755]             setwd(...future.workdir)
[09:30:59.755]         {
[09:30:59.755]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:30:59.755]                 ...future.oldOptions$nwarnings <- NULL
[09:30:59.755]             }
[09:30:59.755]             base::options(...future.oldOptions)
[09:30:59.755]             if (.Platform$OS.type == "windows") {
[09:30:59.755]                 old_names <- names(...future.oldEnvVars)
[09:30:59.755]                 envs <- base::Sys.getenv()
[09:30:59.755]                 names <- names(envs)
[09:30:59.755]                 common <- intersect(names, old_names)
[09:30:59.755]                 added <- setdiff(names, old_names)
[09:30:59.755]                 removed <- setdiff(old_names, names)
[09:30:59.755]                 changed <- common[...future.oldEnvVars[common] != 
[09:30:59.755]                   envs[common]]
[09:30:59.755]                 NAMES <- toupper(changed)
[09:30:59.755]                 args <- list()
[09:30:59.755]                 for (kk in seq_along(NAMES)) {
[09:30:59.755]                   name <- changed[[kk]]
[09:30:59.755]                   NAME <- NAMES[[kk]]
[09:30:59.755]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:59.755]                     next
[09:30:59.755]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:59.755]                 }
[09:30:59.755]                 NAMES <- toupper(added)
[09:30:59.755]                 for (kk in seq_along(NAMES)) {
[09:30:59.755]                   name <- added[[kk]]
[09:30:59.755]                   NAME <- NAMES[[kk]]
[09:30:59.755]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:59.755]                     next
[09:30:59.755]                   args[[name]] <- ""
[09:30:59.755]                 }
[09:30:59.755]                 NAMES <- toupper(removed)
[09:30:59.755]                 for (kk in seq_along(NAMES)) {
[09:30:59.755]                   name <- removed[[kk]]
[09:30:59.755]                   NAME <- NAMES[[kk]]
[09:30:59.755]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:59.755]                     next
[09:30:59.755]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:59.755]                 }
[09:30:59.755]                 if (length(args) > 0) 
[09:30:59.755]                   base::do.call(base::Sys.setenv, args = args)
[09:30:59.755]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:30:59.755]             }
[09:30:59.755]             else {
[09:30:59.755]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:30:59.755]             }
[09:30:59.755]             {
[09:30:59.755]                 if (base::length(...future.futureOptionsAdded) > 
[09:30:59.755]                   0L) {
[09:30:59.755]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:30:59.755]                   base::names(opts) <- ...future.futureOptionsAdded
[09:30:59.755]                   base::options(opts)
[09:30:59.755]                 }
[09:30:59.755]                 {
[09:30:59.755]                   {
[09:30:59.755]                     NULL
[09:30:59.755]                     RNGkind("Mersenne-Twister")
[09:30:59.755]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:30:59.755]                       inherits = FALSE)
[09:30:59.755]                   }
[09:30:59.755]                   options(future.plan = NULL)
[09:30:59.755]                   if (is.na(NA_character_)) 
[09:30:59.755]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:30:59.755]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:30:59.755]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:30:59.755]                     .init = FALSE)
[09:30:59.755]                 }
[09:30:59.755]             }
[09:30:59.755]         }
[09:30:59.755]     })
[09:30:59.755]     if (TRUE) {
[09:30:59.755]         base::sink(type = "output", split = FALSE)
[09:30:59.755]         if (TRUE) {
[09:30:59.755]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:30:59.755]         }
[09:30:59.755]         else {
[09:30:59.755]             ...future.result["stdout"] <- base::list(NULL)
[09:30:59.755]         }
[09:30:59.755]         base::close(...future.stdout)
[09:30:59.755]         ...future.stdout <- NULL
[09:30:59.755]     }
[09:30:59.755]     ...future.result$conditions <- ...future.conditions
[09:30:59.755]     ...future.result$finished <- base::Sys.time()
[09:30:59.755]     ...future.result
[09:30:59.755] }
[09:30:59.757] plan(): Setting new future strategy stack:
[09:30:59.757] List of future strategies:
[09:30:59.757] 1. sequential:
[09:30:59.757]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:59.757]    - tweaked: FALSE
[09:30:59.757]    - call: NULL
[09:30:59.758] plan(): nbrOfWorkers() = 1
[09:30:59.759] plan(): Setting new future strategy stack:
[09:30:59.759] List of future strategies:
[09:30:59.759] 1. future:
[09:30:59.759]    - args: function (..., workers = "<NULL>")
[09:30:59.759]    - tweaked: FALSE
[09:30:59.759]    - call: plan(foo)
[09:30:59.759] plan(): nbrOfWorkers() = Inf
[09:30:59.759] SequentialFuture started (and completed)
[1] 42
[09:30:59.760] getGlobalsAndPackages() ...
[09:30:59.760] 
[09:30:59.760] - globals: [0] <none>
[09:30:59.760] getGlobalsAndPackages() ... DONE
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: 0x55a2e1d40380
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: d1376831-1a69-df06-dce9-bd05e7c69d80
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:30:59.762] Packages needed by the future expression (n = 0): <none>
[09:30:59.762] Packages needed by future strategies (n = 0): <none>
[09:30:59.763] {
[09:30:59.763]     {
[09:30:59.763]         {
[09:30:59.763]             ...future.startTime <- base::Sys.time()
[09:30:59.763]             {
[09:30:59.763]                 {
[09:30:59.763]                   {
[09:30:59.763]                     {
[09:30:59.763]                       base::local({
[09:30:59.763]                         has_future <- base::requireNamespace("future", 
[09:30:59.763]                           quietly = TRUE)
[09:30:59.763]                         if (has_future) {
[09:30:59.763]                           ns <- base::getNamespace("future")
[09:30:59.763]                           version <- ns[[".package"]][["version"]]
[09:30:59.763]                           if (is.null(version)) 
[09:30:59.763]                             version <- utils::packageVersion("future")
[09:30:59.763]                         }
[09:30:59.763]                         else {
[09:30:59.763]                           version <- NULL
[09:30:59.763]                         }
[09:30:59.763]                         if (!has_future || version < "1.8.0") {
[09:30:59.763]                           info <- base::c(r_version = base::gsub("R version ", 
[09:30:59.763]                             "", base::R.version$version.string), 
[09:30:59.763]                             platform = base::sprintf("%s (%s-bit)", 
[09:30:59.763]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:30:59.763]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:30:59.763]                               "release", "version")], collapse = " "), 
[09:30:59.763]                             hostname = base::Sys.info()[["nodename"]])
[09:30:59.763]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:30:59.763]                             info)
[09:30:59.763]                           info <- base::paste(info, collapse = "; ")
[09:30:59.763]                           if (!has_future) {
[09:30:59.763]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:30:59.763]                               info)
[09:30:59.763]                           }
[09:30:59.763]                           else {
[09:30:59.763]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:30:59.763]                               info, version)
[09:30:59.763]                           }
[09:30:59.763]                           base::stop(msg)
[09:30:59.763]                         }
[09:30:59.763]                       })
[09:30:59.763]                     }
[09:30:59.763]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:30:59.763]                     base::options(mc.cores = 1L)
[09:30:59.763]                   }
[09:30:59.763]                   ...future.strategy.old <- future::plan("list")
[09:30:59.763]                   options(future.plan = NULL)
[09:30:59.763]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:30:59.763]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:30:59.763]                 }
[09:30:59.763]                 ...future.workdir <- getwd()
[09:30:59.763]             }
[09:30:59.763]             ...future.oldOptions <- base::as.list(base::.Options)
[09:30:59.763]             ...future.oldEnvVars <- base::Sys.getenv()
[09:30:59.763]         }
[09:30:59.763]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:30:59.763]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:30:59.763]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:30:59.763]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:30:59.763]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:30:59.763]             future.stdout.windows.reencode = NULL, width = 80L)
[09:30:59.763]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:30:59.763]             base::names(...future.oldOptions))
[09:30:59.763]     }
[09:30:59.763]     if (FALSE) {
[09:30:59.763]     }
[09:30:59.763]     else {
[09:30:59.763]         if (TRUE) {
[09:30:59.763]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:30:59.763]                 open = "w")
[09:30:59.763]         }
[09:30:59.763]         else {
[09:30:59.763]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:30:59.763]                 windows = "NUL", "/dev/null"), open = "w")
[09:30:59.763]         }
[09:30:59.763]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:30:59.763]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:30:59.763]             base::sink(type = "output", split = FALSE)
[09:30:59.763]             base::close(...future.stdout)
[09:30:59.763]         }, add = TRUE)
[09:30:59.763]     }
[09:30:59.763]     ...future.frame <- base::sys.nframe()
[09:30:59.763]     ...future.conditions <- base::list()
[09:30:59.763]     ...future.rng <- base::globalenv()$.Random.seed
[09:30:59.763]     if (FALSE) {
[09:30:59.763]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:30:59.763]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:30:59.763]     }
[09:30:59.763]     ...future.result <- base::tryCatch({
[09:30:59.763]         base::withCallingHandlers({
[09:30:59.763]             ...future.value <- base::withVisible(base::local({
[09:30:59.763]                 withCallingHandlers({
[09:30:59.763]                   {
[09:30:59.763]                     42L
[09:30:59.763]                   }
[09:30:59.763]                 }, immediateCondition = function(cond) {
[09:30:59.763]                   save_rds <- function (object, pathname, ...) 
[09:30:59.763]                   {
[09:30:59.763]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:30:59.763]                     if (file_test("-f", pathname_tmp)) {
[09:30:59.763]                       fi_tmp <- file.info(pathname_tmp)
[09:30:59.763]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:30:59.763]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:30:59.763]                         fi_tmp[["mtime"]])
[09:30:59.763]                     }
[09:30:59.763]                     tryCatch({
[09:30:59.763]                       saveRDS(object, file = pathname_tmp, ...)
[09:30:59.763]                     }, error = function(ex) {
[09:30:59.763]                       msg <- conditionMessage(ex)
[09:30:59.763]                       fi_tmp <- file.info(pathname_tmp)
[09:30:59.763]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:30:59.763]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:30:59.763]                         fi_tmp[["mtime"]], msg)
[09:30:59.763]                       ex$message <- msg
[09:30:59.763]                       stop(ex)
[09:30:59.763]                     })
[09:30:59.763]                     stopifnot(file_test("-f", pathname_tmp))
[09:30:59.763]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:30:59.763]                     if (!res || file_test("-f", pathname_tmp)) {
[09:30:59.763]                       fi_tmp <- file.info(pathname_tmp)
[09:30:59.763]                       fi <- file.info(pathname)
[09:30:59.763]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:30:59.763]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:30:59.763]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:30:59.763]                         fi[["size"]], fi[["mtime"]])
[09:30:59.763]                       stop(msg)
[09:30:59.763]                     }
[09:30:59.763]                     invisible(pathname)
[09:30:59.763]                   }
[09:30:59.763]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:30:59.763]                     rootPath = tempdir()) 
[09:30:59.763]                   {
[09:30:59.763]                     obj <- list(time = Sys.time(), condition = cond)
[09:30:59.763]                     file <- tempfile(pattern = class(cond)[1], 
[09:30:59.763]                       tmpdir = path, fileext = ".rds")
[09:30:59.763]                     save_rds(obj, file)
[09:30:59.763]                   }
[09:30:59.763]                   saveImmediateCondition(cond, path = "/tmp/RtmpqiCXEr/.future/immediateConditions")
[09:30:59.763]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:59.763]                   {
[09:30:59.763]                     inherits <- base::inherits
[09:30:59.763]                     invokeRestart <- base::invokeRestart
[09:30:59.763]                     is.null <- base::is.null
[09:30:59.763]                     muffled <- FALSE
[09:30:59.763]                     if (inherits(cond, "message")) {
[09:30:59.763]                       muffled <- grepl(pattern, "muffleMessage")
[09:30:59.763]                       if (muffled) 
[09:30:59.763]                         invokeRestart("muffleMessage")
[09:30:59.763]                     }
[09:30:59.763]                     else if (inherits(cond, "warning")) {
[09:30:59.763]                       muffled <- grepl(pattern, "muffleWarning")
[09:30:59.763]                       if (muffled) 
[09:30:59.763]                         invokeRestart("muffleWarning")
[09:30:59.763]                     }
[09:30:59.763]                     else if (inherits(cond, "condition")) {
[09:30:59.763]                       if (!is.null(pattern)) {
[09:30:59.763]                         computeRestarts <- base::computeRestarts
[09:30:59.763]                         grepl <- base::grepl
[09:30:59.763]                         restarts <- computeRestarts(cond)
[09:30:59.763]                         for (restart in restarts) {
[09:30:59.763]                           name <- restart$name
[09:30:59.763]                           if (is.null(name)) 
[09:30:59.763]                             next
[09:30:59.763]                           if (!grepl(pattern, name)) 
[09:30:59.763]                             next
[09:30:59.763]                           invokeRestart(restart)
[09:30:59.763]                           muffled <- TRUE
[09:30:59.763]                           break
[09:30:59.763]                         }
[09:30:59.763]                       }
[09:30:59.763]                     }
[09:30:59.763]                     invisible(muffled)
[09:30:59.763]                   }
[09:30:59.763]                   muffleCondition(cond)
[09:30:59.763]                 })
[09:30:59.763]             }))
[09:30:59.763]             future::FutureResult(value = ...future.value$value, 
[09:30:59.763]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:59.763]                   ...future.rng), globalenv = if (FALSE) 
[09:30:59.763]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:30:59.763]                     ...future.globalenv.names))
[09:30:59.763]                 else NULL, started = ...future.startTime, version = "1.8")
[09:30:59.763]         }, condition = base::local({
[09:30:59.763]             c <- base::c
[09:30:59.763]             inherits <- base::inherits
[09:30:59.763]             invokeRestart <- base::invokeRestart
[09:30:59.763]             length <- base::length
[09:30:59.763]             list <- base::list
[09:30:59.763]             seq.int <- base::seq.int
[09:30:59.763]             signalCondition <- base::signalCondition
[09:30:59.763]             sys.calls <- base::sys.calls
[09:30:59.763]             `[[` <- base::`[[`
[09:30:59.763]             `+` <- base::`+`
[09:30:59.763]             `<<-` <- base::`<<-`
[09:30:59.763]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:30:59.763]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:30:59.763]                   3L)]
[09:30:59.763]             }
[09:30:59.763]             function(cond) {
[09:30:59.763]                 is_error <- inherits(cond, "error")
[09:30:59.763]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:30:59.763]                   NULL)
[09:30:59.763]                 if (is_error) {
[09:30:59.763]                   sessionInformation <- function() {
[09:30:59.763]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:30:59.763]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:30:59.763]                       search = base::search(), system = base::Sys.info())
[09:30:59.763]                   }
[09:30:59.763]                   ...future.conditions[[length(...future.conditions) + 
[09:30:59.763]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:30:59.763]                     cond$call), session = sessionInformation(), 
[09:30:59.763]                     timestamp = base::Sys.time(), signaled = 0L)
[09:30:59.763]                   signalCondition(cond)
[09:30:59.763]                 }
[09:30:59.763]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:30:59.763]                 "immediateCondition"))) {
[09:30:59.763]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:30:59.763]                   ...future.conditions[[length(...future.conditions) + 
[09:30:59.763]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:30:59.763]                   if (TRUE && !signal) {
[09:30:59.763]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:59.763]                     {
[09:30:59.763]                       inherits <- base::inherits
[09:30:59.763]                       invokeRestart <- base::invokeRestart
[09:30:59.763]                       is.null <- base::is.null
[09:30:59.763]                       muffled <- FALSE
[09:30:59.763]                       if (inherits(cond, "message")) {
[09:30:59.763]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:59.763]                         if (muffled) 
[09:30:59.763]                           invokeRestart("muffleMessage")
[09:30:59.763]                       }
[09:30:59.763]                       else if (inherits(cond, "warning")) {
[09:30:59.763]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:59.763]                         if (muffled) 
[09:30:59.763]                           invokeRestart("muffleWarning")
[09:30:59.763]                       }
[09:30:59.763]                       else if (inherits(cond, "condition")) {
[09:30:59.763]                         if (!is.null(pattern)) {
[09:30:59.763]                           computeRestarts <- base::computeRestarts
[09:30:59.763]                           grepl <- base::grepl
[09:30:59.763]                           restarts <- computeRestarts(cond)
[09:30:59.763]                           for (restart in restarts) {
[09:30:59.763]                             name <- restart$name
[09:30:59.763]                             if (is.null(name)) 
[09:30:59.763]                               next
[09:30:59.763]                             if (!grepl(pattern, name)) 
[09:30:59.763]                               next
[09:30:59.763]                             invokeRestart(restart)
[09:30:59.763]                             muffled <- TRUE
[09:30:59.763]                             break
[09:30:59.763]                           }
[09:30:59.763]                         }
[09:30:59.763]                       }
[09:30:59.763]                       invisible(muffled)
[09:30:59.763]                     }
[09:30:59.763]                     muffleCondition(cond, pattern = "^muffle")
[09:30:59.763]                   }
[09:30:59.763]                 }
[09:30:59.763]                 else {
[09:30:59.763]                   if (TRUE) {
[09:30:59.763]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:59.763]                     {
[09:30:59.763]                       inherits <- base::inherits
[09:30:59.763]                       invokeRestart <- base::invokeRestart
[09:30:59.763]                       is.null <- base::is.null
[09:30:59.763]                       muffled <- FALSE
[09:30:59.763]                       if (inherits(cond, "message")) {
[09:30:59.763]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:59.763]                         if (muffled) 
[09:30:59.763]                           invokeRestart("muffleMessage")
[09:30:59.763]                       }
[09:30:59.763]                       else if (inherits(cond, "warning")) {
[09:30:59.763]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:59.763]                         if (muffled) 
[09:30:59.763]                           invokeRestart("muffleWarning")
[09:30:59.763]                       }
[09:30:59.763]                       else if (inherits(cond, "condition")) {
[09:30:59.763]                         if (!is.null(pattern)) {
[09:30:59.763]                           computeRestarts <- base::computeRestarts
[09:30:59.763]                           grepl <- base::grepl
[09:30:59.763]                           restarts <- computeRestarts(cond)
[09:30:59.763]                           for (restart in restarts) {
[09:30:59.763]                             name <- restart$name
[09:30:59.763]                             if (is.null(name)) 
[09:30:59.763]                               next
[09:30:59.763]                             if (!grepl(pattern, name)) 
[09:30:59.763]                               next
[09:30:59.763]                             invokeRestart(restart)
[09:30:59.763]                             muffled <- TRUE
[09:30:59.763]                             break
[09:30:59.763]                           }
[09:30:59.763]                         }
[09:30:59.763]                       }
[09:30:59.763]                       invisible(muffled)
[09:30:59.763]                     }
[09:30:59.763]                     muffleCondition(cond, pattern = "^muffle")
[09:30:59.763]                   }
[09:30:59.763]                 }
[09:30:59.763]             }
[09:30:59.763]         }))
[09:30:59.763]     }, error = function(ex) {
[09:30:59.763]         base::structure(base::list(value = NULL, visible = NULL, 
[09:30:59.763]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:59.763]                 ...future.rng), started = ...future.startTime, 
[09:30:59.763]             finished = Sys.time(), session_uuid = NA_character_, 
[09:30:59.763]             version = "1.8"), class = "FutureResult")
[09:30:59.763]     }, finally = {
[09:30:59.763]         if (!identical(...future.workdir, getwd())) 
[09:30:59.763]             setwd(...future.workdir)
[09:30:59.763]         {
[09:30:59.763]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:30:59.763]                 ...future.oldOptions$nwarnings <- NULL
[09:30:59.763]             }
[09:30:59.763]             base::options(...future.oldOptions)
[09:30:59.763]             if (.Platform$OS.type == "windows") {
[09:30:59.763]                 old_names <- names(...future.oldEnvVars)
[09:30:59.763]                 envs <- base::Sys.getenv()
[09:30:59.763]                 names <- names(envs)
[09:30:59.763]                 common <- intersect(names, old_names)
[09:30:59.763]                 added <- setdiff(names, old_names)
[09:30:59.763]                 removed <- setdiff(old_names, names)
[09:30:59.763]                 changed <- common[...future.oldEnvVars[common] != 
[09:30:59.763]                   envs[common]]
[09:30:59.763]                 NAMES <- toupper(changed)
[09:30:59.763]                 args <- list()
[09:30:59.763]                 for (kk in seq_along(NAMES)) {
[09:30:59.763]                   name <- changed[[kk]]
[09:30:59.763]                   NAME <- NAMES[[kk]]
[09:30:59.763]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:59.763]                     next
[09:30:59.763]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:59.763]                 }
[09:30:59.763]                 NAMES <- toupper(added)
[09:30:59.763]                 for (kk in seq_along(NAMES)) {
[09:30:59.763]                   name <- added[[kk]]
[09:30:59.763]                   NAME <- NAMES[[kk]]
[09:30:59.763]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:59.763]                     next
[09:30:59.763]                   args[[name]] <- ""
[09:30:59.763]                 }
[09:30:59.763]                 NAMES <- toupper(removed)
[09:30:59.763]                 for (kk in seq_along(NAMES)) {
[09:30:59.763]                   name <- removed[[kk]]
[09:30:59.763]                   NAME <- NAMES[[kk]]
[09:30:59.763]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:59.763]                     next
[09:30:59.763]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:59.763]                 }
[09:30:59.763]                 if (length(args) > 0) 
[09:30:59.763]                   base::do.call(base::Sys.setenv, args = args)
[09:30:59.763]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:30:59.763]             }
[09:30:59.763]             else {
[09:30:59.763]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:30:59.763]             }
[09:30:59.763]             {
[09:30:59.763]                 if (base::length(...future.futureOptionsAdded) > 
[09:30:59.763]                   0L) {
[09:30:59.763]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:30:59.763]                   base::names(opts) <- ...future.futureOptionsAdded
[09:30:59.763]                   base::options(opts)
[09:30:59.763]                 }
[09:30:59.763]                 {
[09:30:59.763]                   {
[09:30:59.763]                     base::options(mc.cores = ...future.mc.cores.old)
[09:30:59.763]                     NULL
[09:30:59.763]                   }
[09:30:59.763]                   options(future.plan = NULL)
[09:30:59.763]                   if (is.na(NA_character_)) 
[09:30:59.763]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:30:59.763]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:30:59.763]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:30:59.763]                     .init = FALSE)
[09:30:59.763]                 }
[09:30:59.763]             }
[09:30:59.763]         }
[09:30:59.763]     })
[09:30:59.763]     if (TRUE) {
[09:30:59.763]         base::sink(type = "output", split = FALSE)
[09:30:59.763]         if (TRUE) {
[09:30:59.763]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:30:59.763]         }
[09:30:59.763]         else {
[09:30:59.763]             ...future.result["stdout"] <- base::list(NULL)
[09:30:59.763]         }
[09:30:59.763]         base::close(...future.stdout)
[09:30:59.763]         ...future.stdout <- NULL
[09:30:59.763]     }
[09:30:59.763]     ...future.result$conditions <- ...future.conditions
[09:30:59.763]     ...future.result$finished <- base::Sys.time()
[09:30:59.763]     ...future.result
[09:30:59.763] }
[09:30:59.765] requestCore(): workers = 2
[09:30:59.769] MulticoreFuture started
[09:30:59.769] plan(): Setting new future strategy stack:
[09:30:59.770] result() for MulticoreFuture ...
[09:30:59.769] List of future strategies:
[09:30:59.769] 1. sequential:
[09:30:59.769]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:59.769]    - tweaked: FALSE
[09:30:59.769]    - call: NULL
[09:30:59.770] plan(): nbrOfWorkers() = 1
[09:30:59.772] plan(): Setting new future strategy stack:
[09:30:59.772] List of future strategies:
[09:30:59.772] 1. future:
[09:30:59.772]    - args: function (..., workers = "<NULL>")
[09:30:59.772]    - tweaked: FALSE
[09:30:59.772]    - call: plan(foo)
[09:30:59.773] plan(): nbrOfWorkers() = Inf
[09:30:59.774] result() for MulticoreFuture ...
[09:30:59.774] result() for MulticoreFuture ... done
[09:30:59.774] result() for MulticoreFuture ... done
[09:30:59.774] result() for MulticoreFuture ...
[09:30:59.774] result() for MulticoreFuture ... done
[1] 42
[09:30:59.776] getGlobalsAndPackages() ...
[09:30:59.776] 
[09:30:59.776] - globals: [0] <none>
[09:30:59.776] getGlobalsAndPackages() ... DONE
[09:30:59.777] Packages needed by the future expression (n = 0): <none>
[09:30:59.777] Packages needed by future strategies (n = 0): <none>
[09:30:59.778] {
[09:30:59.778]     {
[09:30:59.778]         {
[09:30:59.778]             ...future.startTime <- base::Sys.time()
[09:30:59.778]             {
[09:30:59.778]                 {
[09:30:59.778]                   {
[09:30:59.778]                     {
[09:30:59.778]                       base::local({
[09:30:59.778]                         has_future <- base::requireNamespace("future", 
[09:30:59.778]                           quietly = TRUE)
[09:30:59.778]                         if (has_future) {
[09:30:59.778]                           ns <- base::getNamespace("future")
[09:30:59.778]                           version <- ns[[".package"]][["version"]]
[09:30:59.778]                           if (is.null(version)) 
[09:30:59.778]                             version <- utils::packageVersion("future")
[09:30:59.778]                         }
[09:30:59.778]                         else {
[09:30:59.778]                           version <- NULL
[09:30:59.778]                         }
[09:30:59.778]                         if (!has_future || version < "1.8.0") {
[09:30:59.778]                           info <- base::c(r_version = base::gsub("R version ", 
[09:30:59.778]                             "", base::R.version$version.string), 
[09:30:59.778]                             platform = base::sprintf("%s (%s-bit)", 
[09:30:59.778]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:30:59.778]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:30:59.778]                               "release", "version")], collapse = " "), 
[09:30:59.778]                             hostname = base::Sys.info()[["nodename"]])
[09:30:59.778]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:30:59.778]                             info)
[09:30:59.778]                           info <- base::paste(info, collapse = "; ")
[09:30:59.778]                           if (!has_future) {
[09:30:59.778]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:30:59.778]                               info)
[09:30:59.778]                           }
[09:30:59.778]                           else {
[09:30:59.778]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:30:59.778]                               info, version)
[09:30:59.778]                           }
[09:30:59.778]                           base::stop(msg)
[09:30:59.778]                         }
[09:30:59.778]                       })
[09:30:59.778]                     }
[09:30:59.778]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:30:59.778]                     base::options(mc.cores = 1L)
[09:30:59.778]                   }
[09:30:59.778]                   ...future.strategy.old <- future::plan("list")
[09:30:59.778]                   options(future.plan = NULL)
[09:30:59.778]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:30:59.778]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:30:59.778]                 }
[09:30:59.778]                 ...future.workdir <- getwd()
[09:30:59.778]             }
[09:30:59.778]             ...future.oldOptions <- base::as.list(base::.Options)
[09:30:59.778]             ...future.oldEnvVars <- base::Sys.getenv()
[09:30:59.778]         }
[09:30:59.778]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:30:59.778]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:30:59.778]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:30:59.778]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:30:59.778]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:30:59.778]             future.stdout.windows.reencode = NULL, width = 80L)
[09:30:59.778]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:30:59.778]             base::names(...future.oldOptions))
[09:30:59.778]     }
[09:30:59.778]     if (FALSE) {
[09:30:59.778]     }
[09:30:59.778]     else {
[09:30:59.778]         if (TRUE) {
[09:30:59.778]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:30:59.778]                 open = "w")
[09:30:59.778]         }
[09:30:59.778]         else {
[09:30:59.778]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:30:59.778]                 windows = "NUL", "/dev/null"), open = "w")
[09:30:59.778]         }
[09:30:59.778]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:30:59.778]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:30:59.778]             base::sink(type = "output", split = FALSE)
[09:30:59.778]             base::close(...future.stdout)
[09:30:59.778]         }, add = TRUE)
[09:30:59.778]     }
[09:30:59.778]     ...future.frame <- base::sys.nframe()
[09:30:59.778]     ...future.conditions <- base::list()
[09:30:59.778]     ...future.rng <- base::globalenv()$.Random.seed
[09:30:59.778]     if (FALSE) {
[09:30:59.778]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:30:59.778]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:30:59.778]     }
[09:30:59.778]     ...future.result <- base::tryCatch({
[09:30:59.778]         base::withCallingHandlers({
[09:30:59.778]             ...future.value <- base::withVisible(base::local({
[09:30:59.778]                 withCallingHandlers({
[09:30:59.778]                   {
[09:30:59.778]                     42L
[09:30:59.778]                   }
[09:30:59.778]                 }, immediateCondition = function(cond) {
[09:30:59.778]                   save_rds <- function (object, pathname, ...) 
[09:30:59.778]                   {
[09:30:59.778]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:30:59.778]                     if (file_test("-f", pathname_tmp)) {
[09:30:59.778]                       fi_tmp <- file.info(pathname_tmp)
[09:30:59.778]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:30:59.778]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:30:59.778]                         fi_tmp[["mtime"]])
[09:30:59.778]                     }
[09:30:59.778]                     tryCatch({
[09:30:59.778]                       saveRDS(object, file = pathname_tmp, ...)
[09:30:59.778]                     }, error = function(ex) {
[09:30:59.778]                       msg <- conditionMessage(ex)
[09:30:59.778]                       fi_tmp <- file.info(pathname_tmp)
[09:30:59.778]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:30:59.778]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:30:59.778]                         fi_tmp[["mtime"]], msg)
[09:30:59.778]                       ex$message <- msg
[09:30:59.778]                       stop(ex)
[09:30:59.778]                     })
[09:30:59.778]                     stopifnot(file_test("-f", pathname_tmp))
[09:30:59.778]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:30:59.778]                     if (!res || file_test("-f", pathname_tmp)) {
[09:30:59.778]                       fi_tmp <- file.info(pathname_tmp)
[09:30:59.778]                       fi <- file.info(pathname)
[09:30:59.778]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:30:59.778]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:30:59.778]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:30:59.778]                         fi[["size"]], fi[["mtime"]])
[09:30:59.778]                       stop(msg)
[09:30:59.778]                     }
[09:30:59.778]                     invisible(pathname)
[09:30:59.778]                   }
[09:30:59.778]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:30:59.778]                     rootPath = tempdir()) 
[09:30:59.778]                   {
[09:30:59.778]                     obj <- list(time = Sys.time(), condition = cond)
[09:30:59.778]                     file <- tempfile(pattern = class(cond)[1], 
[09:30:59.778]                       tmpdir = path, fileext = ".rds")
[09:30:59.778]                     save_rds(obj, file)
[09:30:59.778]                   }
[09:30:59.778]                   saveImmediateCondition(cond, path = "/tmp/RtmpqiCXEr/.future/immediateConditions")
[09:30:59.778]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:59.778]                   {
[09:30:59.778]                     inherits <- base::inherits
[09:30:59.778]                     invokeRestart <- base::invokeRestart
[09:30:59.778]                     is.null <- base::is.null
[09:30:59.778]                     muffled <- FALSE
[09:30:59.778]                     if (inherits(cond, "message")) {
[09:30:59.778]                       muffled <- grepl(pattern, "muffleMessage")
[09:30:59.778]                       if (muffled) 
[09:30:59.778]                         invokeRestart("muffleMessage")
[09:30:59.778]                     }
[09:30:59.778]                     else if (inherits(cond, "warning")) {
[09:30:59.778]                       muffled <- grepl(pattern, "muffleWarning")
[09:30:59.778]                       if (muffled) 
[09:30:59.778]                         invokeRestart("muffleWarning")
[09:30:59.778]                     }
[09:30:59.778]                     else if (inherits(cond, "condition")) {
[09:30:59.778]                       if (!is.null(pattern)) {
[09:30:59.778]                         computeRestarts <- base::computeRestarts
[09:30:59.778]                         grepl <- base::grepl
[09:30:59.778]                         restarts <- computeRestarts(cond)
[09:30:59.778]                         for (restart in restarts) {
[09:30:59.778]                           name <- restart$name
[09:30:59.778]                           if (is.null(name)) 
[09:30:59.778]                             next
[09:30:59.778]                           if (!grepl(pattern, name)) 
[09:30:59.778]                             next
[09:30:59.778]                           invokeRestart(restart)
[09:30:59.778]                           muffled <- TRUE
[09:30:59.778]                           break
[09:30:59.778]                         }
[09:30:59.778]                       }
[09:30:59.778]                     }
[09:30:59.778]                     invisible(muffled)
[09:30:59.778]                   }
[09:30:59.778]                   muffleCondition(cond)
[09:30:59.778]                 })
[09:30:59.778]             }))
[09:30:59.778]             future::FutureResult(value = ...future.value$value, 
[09:30:59.778]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:59.778]                   ...future.rng), globalenv = if (FALSE) 
[09:30:59.778]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:30:59.778]                     ...future.globalenv.names))
[09:30:59.778]                 else NULL, started = ...future.startTime, version = "1.8")
[09:30:59.778]         }, condition = base::local({
[09:30:59.778]             c <- base::c
[09:30:59.778]             inherits <- base::inherits
[09:30:59.778]             invokeRestart <- base::invokeRestart
[09:30:59.778]             length <- base::length
[09:30:59.778]             list <- base::list
[09:30:59.778]             seq.int <- base::seq.int
[09:30:59.778]             signalCondition <- base::signalCondition
[09:30:59.778]             sys.calls <- base::sys.calls
[09:30:59.778]             `[[` <- base::`[[`
[09:30:59.778]             `+` <- base::`+`
[09:30:59.778]             `<<-` <- base::`<<-`
[09:30:59.778]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:30:59.778]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:30:59.778]                   3L)]
[09:30:59.778]             }
[09:30:59.778]             function(cond) {
[09:30:59.778]                 is_error <- inherits(cond, "error")
[09:30:59.778]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:30:59.778]                   NULL)
[09:30:59.778]                 if (is_error) {
[09:30:59.778]                   sessionInformation <- function() {
[09:30:59.778]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:30:59.778]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:30:59.778]                       search = base::search(), system = base::Sys.info())
[09:30:59.778]                   }
[09:30:59.778]                   ...future.conditions[[length(...future.conditions) + 
[09:30:59.778]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:30:59.778]                     cond$call), session = sessionInformation(), 
[09:30:59.778]                     timestamp = base::Sys.time(), signaled = 0L)
[09:30:59.778]                   signalCondition(cond)
[09:30:59.778]                 }
[09:30:59.778]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:30:59.778]                 "immediateCondition"))) {
[09:30:59.778]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:30:59.778]                   ...future.conditions[[length(...future.conditions) + 
[09:30:59.778]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:30:59.778]                   if (TRUE && !signal) {
[09:30:59.778]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:59.778]                     {
[09:30:59.778]                       inherits <- base::inherits
[09:30:59.778]                       invokeRestart <- base::invokeRestart
[09:30:59.778]                       is.null <- base::is.null
[09:30:59.778]                       muffled <- FALSE
[09:30:59.778]                       if (inherits(cond, "message")) {
[09:30:59.778]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:59.778]                         if (muffled) 
[09:30:59.778]                           invokeRestart("muffleMessage")
[09:30:59.778]                       }
[09:30:59.778]                       else if (inherits(cond, "warning")) {
[09:30:59.778]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:59.778]                         if (muffled) 
[09:30:59.778]                           invokeRestart("muffleWarning")
[09:30:59.778]                       }
[09:30:59.778]                       else if (inherits(cond, "condition")) {
[09:30:59.778]                         if (!is.null(pattern)) {
[09:30:59.778]                           computeRestarts <- base::computeRestarts
[09:30:59.778]                           grepl <- base::grepl
[09:30:59.778]                           restarts <- computeRestarts(cond)
[09:30:59.778]                           for (restart in restarts) {
[09:30:59.778]                             name <- restart$name
[09:30:59.778]                             if (is.null(name)) 
[09:30:59.778]                               next
[09:30:59.778]                             if (!grepl(pattern, name)) 
[09:30:59.778]                               next
[09:30:59.778]                             invokeRestart(restart)
[09:30:59.778]                             muffled <- TRUE
[09:30:59.778]                             break
[09:30:59.778]                           }
[09:30:59.778]                         }
[09:30:59.778]                       }
[09:30:59.778]                       invisible(muffled)
[09:30:59.778]                     }
[09:30:59.778]                     muffleCondition(cond, pattern = "^muffle")
[09:30:59.778]                   }
[09:30:59.778]                 }
[09:30:59.778]                 else {
[09:30:59.778]                   if (TRUE) {
[09:30:59.778]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:59.778]                     {
[09:30:59.778]                       inherits <- base::inherits
[09:30:59.778]                       invokeRestart <- base::invokeRestart
[09:30:59.778]                       is.null <- base::is.null
[09:30:59.778]                       muffled <- FALSE
[09:30:59.778]                       if (inherits(cond, "message")) {
[09:30:59.778]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:59.778]                         if (muffled) 
[09:30:59.778]                           invokeRestart("muffleMessage")
[09:30:59.778]                       }
[09:30:59.778]                       else if (inherits(cond, "warning")) {
[09:30:59.778]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:59.778]                         if (muffled) 
[09:30:59.778]                           invokeRestart("muffleWarning")
[09:30:59.778]                       }
[09:30:59.778]                       else if (inherits(cond, "condition")) {
[09:30:59.778]                         if (!is.null(pattern)) {
[09:30:59.778]                           computeRestarts <- base::computeRestarts
[09:30:59.778]                           grepl <- base::grepl
[09:30:59.778]                           restarts <- computeRestarts(cond)
[09:30:59.778]                           for (restart in restarts) {
[09:30:59.778]                             name <- restart$name
[09:30:59.778]                             if (is.null(name)) 
[09:30:59.778]                               next
[09:30:59.778]                             if (!grepl(pattern, name)) 
[09:30:59.778]                               next
[09:30:59.778]                             invokeRestart(restart)
[09:30:59.778]                             muffled <- TRUE
[09:30:59.778]                             break
[09:30:59.778]                           }
[09:30:59.778]                         }
[09:30:59.778]                       }
[09:30:59.778]                       invisible(muffled)
[09:30:59.778]                     }
[09:30:59.778]                     muffleCondition(cond, pattern = "^muffle")
[09:30:59.778]                   }
[09:30:59.778]                 }
[09:30:59.778]             }
[09:30:59.778]         }))
[09:30:59.778]     }, error = function(ex) {
[09:30:59.778]         base::structure(base::list(value = NULL, visible = NULL, 
[09:30:59.778]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:59.778]                 ...future.rng), started = ...future.startTime, 
[09:30:59.778]             finished = Sys.time(), session_uuid = NA_character_, 
[09:30:59.778]             version = "1.8"), class = "FutureResult")
[09:30:59.778]     }, finally = {
[09:30:59.778]         if (!identical(...future.workdir, getwd())) 
[09:30:59.778]             setwd(...future.workdir)
[09:30:59.778]         {
[09:30:59.778]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:30:59.778]                 ...future.oldOptions$nwarnings <- NULL
[09:30:59.778]             }
[09:30:59.778]             base::options(...future.oldOptions)
[09:30:59.778]             if (.Platform$OS.type == "windows") {
[09:30:59.778]                 old_names <- names(...future.oldEnvVars)
[09:30:59.778]                 envs <- base::Sys.getenv()
[09:30:59.778]                 names <- names(envs)
[09:30:59.778]                 common <- intersect(names, old_names)
[09:30:59.778]                 added <- setdiff(names, old_names)
[09:30:59.778]                 removed <- setdiff(old_names, names)
[09:30:59.778]                 changed <- common[...future.oldEnvVars[common] != 
[09:30:59.778]                   envs[common]]
[09:30:59.778]                 NAMES <- toupper(changed)
[09:30:59.778]                 args <- list()
[09:30:59.778]                 for (kk in seq_along(NAMES)) {
[09:30:59.778]                   name <- changed[[kk]]
[09:30:59.778]                   NAME <- NAMES[[kk]]
[09:30:59.778]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:59.778]                     next
[09:30:59.778]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:59.778]                 }
[09:30:59.778]                 NAMES <- toupper(added)
[09:30:59.778]                 for (kk in seq_along(NAMES)) {
[09:30:59.778]                   name <- added[[kk]]
[09:30:59.778]                   NAME <- NAMES[[kk]]
[09:30:59.778]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:59.778]                     next
[09:30:59.778]                   args[[name]] <- ""
[09:30:59.778]                 }
[09:30:59.778]                 NAMES <- toupper(removed)
[09:30:59.778]                 for (kk in seq_along(NAMES)) {
[09:30:59.778]                   name <- removed[[kk]]
[09:30:59.778]                   NAME <- NAMES[[kk]]
[09:30:59.778]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:59.778]                     next
[09:30:59.778]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:59.778]                 }
[09:30:59.778]                 if (length(args) > 0) 
[09:30:59.778]                   base::do.call(base::Sys.setenv, args = args)
[09:30:59.778]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:30:59.778]             }
[09:30:59.778]             else {
[09:30:59.778]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:30:59.778]             }
[09:30:59.778]             {
[09:30:59.778]                 if (base::length(...future.futureOptionsAdded) > 
[09:30:59.778]                   0L) {
[09:30:59.778]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:30:59.778]                   base::names(opts) <- ...future.futureOptionsAdded
[09:30:59.778]                   base::options(opts)
[09:30:59.778]                 }
[09:30:59.778]                 {
[09:30:59.778]                   {
[09:30:59.778]                     base::options(mc.cores = ...future.mc.cores.old)
[09:30:59.778]                     NULL
[09:30:59.778]                   }
[09:30:59.778]                   options(future.plan = NULL)
[09:30:59.778]                   if (is.na(NA_character_)) 
[09:30:59.778]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:30:59.778]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:30:59.778]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:30:59.778]                     .init = FALSE)
[09:30:59.778]                 }
[09:30:59.778]             }
[09:30:59.778]         }
[09:30:59.778]     })
[09:30:59.778]     if (TRUE) {
[09:30:59.778]         base::sink(type = "output", split = FALSE)
[09:30:59.778]         if (TRUE) {
[09:30:59.778]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:30:59.778]         }
[09:30:59.778]         else {
[09:30:59.778]             ...future.result["stdout"] <- base::list(NULL)
[09:30:59.778]         }
[09:30:59.778]         base::close(...future.stdout)
[09:30:59.778]         ...future.stdout <- NULL
[09:30:59.778]     }
[09:30:59.778]     ...future.result$conditions <- ...future.conditions
[09:30:59.778]     ...future.result$finished <- base::Sys.time()
[09:30:59.778]     ...future.result
[09:30:59.778] }
[09:30:59.780] requestCore(): workers = 2
[09:30:59.782] MulticoreFuture started
[09:30:59.783] result() for MulticoreFuture ...
[09:30:59.783] plan(): Setting new future strategy stack:
[09:30:59.783] List of future strategies:
[09:30:59.783] 1. sequential:
[09:30:59.783]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:59.783]    - tweaked: FALSE
[09:30:59.783]    - call: NULL
[09:30:59.784] plan(): nbrOfWorkers() = 1
[09:30:59.786] plan(): Setting new future strategy stack:
[09:30:59.786] List of future strategies:
[09:30:59.786] 1. future:
[09:30:59.786]    - args: function (..., workers = "<NULL>")
[09:30:59.786]    - tweaked: FALSE
[09:30:59.786]    - call: plan(foo)
[09:30:59.787] plan(): nbrOfWorkers() = Inf
[09:30:59.788] result() for MulticoreFuture ...
[09:30:59.788] result() for MulticoreFuture ... done
[09:30:59.788] result() for MulticoreFuture ... done
[09:30:59.788] result() for MulticoreFuture ...
[09:30:59.788] result() for MulticoreFuture ... done
[1] 42
> 
> message("*** Future class - exception ... DONE")
*** Future class - exception ... DONE
> 
> message("*** Future class ... DONE")
*** Future class ... DONE
> 
> source("incl/end.R")
[09:30:59.789] plan(): Setting new future strategy stack:
[09:30:59.789] List of future strategies:
[09:30:59.789] 1. FutureStrategy:
[09:30:59.789]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:59.789]    - tweaked: FALSE
[09:30:59.789]    - call: future::plan(oplan)
[09:30:59.791] plan(): nbrOfWorkers() = 1
> 
